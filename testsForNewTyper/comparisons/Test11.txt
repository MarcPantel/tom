import test11.test11.types.*;
public class Test11 {
  %gom {
    module Test11
      abstract syntax
      B = b()
        | f(n:B)
        | g(n:B)
  }

  public static void main(String[] args) {
    B tt = `f(f(b()));
    %match{
      x << tt -> { System.out.println("l1 = " + `x); }
      f(x) << tt -> { System.out.println("l2 = " + `x); }
    }
  }
}

------------------------------------------------
=> SORTIE NEWTYPER:
Code after type inference = 
Tom(concCode(TargetLanguageToCode(TL("import test11.test11.types.*;\npublic class Test11 {\n  ",TextPosition(1,1),TextPosition(3,3))),TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),Name("t1"),Type("B",TLType(" test11.test11.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),Name("t2"),Type("B",TLType(" test11.test11.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),Name("t"),Type("B",TLType(" test11.test11.types.B "))),Code(" ({0} instanceof test11.test11.types.B) "),OriginTracking(Name("is_sort"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom"))),OriginTracking(Name("B"),2,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),DeclarationToCode(SymbolDecl(Name("f"))),DeclarationToCode(SymbolDecl(Name("g"))),TargetLanguageToCode(TL("\n\n",TextPosition(24,1),TextPosition(26,1))))),TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    B tt = ",TextPosition(9,4),TextPosition(12,12))),BQTermToCode(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("b"),concBQTerm(),"default")))),"default")))),"default")))),TargetLanguageToCode(TL(";\n    ",TextPosition(12,22),TextPosition(13,5))),InstructionToCode(Match(concConstraintInstruction(ConstraintInstruction(MatchConstraint(Variable(concOption(OriginTracking(Name("x"),14,"Test11.t")),Name("x"),Type("B",TLType(" test11.test11.types.B ")),concConstraint()),BQVariable(concOption(OriginTracking(Name("tt"),14,"Test11.t")),Name("tt"),Type("B",TLType(" test11.test11.types.B ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" System.out.println(\"l1 = \" + ",TextPosition(14,18),TextPosition(14,49)))),BQTermToInstruction(BQVariable(concOption(OriginTracking(Name("x"),14,"Test11.t"),ModuleName("default")),Name("x"),Type("B",TLType(" test11.test11.types.B ")))),CodeToInstruction(TargetLanguageToCode(TL("); ",TextPosition(14,52),TextPosition(14,54))))))),concOption(OriginTracking(Name("Pattern"),14,"Test11.t"),OriginalText(Name("")))),ConstraintInstruction(MatchConstraint(RecordAppl(concOption(OriginTracking(Name("f"),15,"Test11.t")),concTomName(Name("f")),concSlot(PairSlotAppl(Name("n"),Variable(concOption(OriginTracking(Name("x"),15,"Test11.t")),Name("x"),Type("B",TLType(" test11.test11.types.B ")),concConstraint()))),concConstraint()),BQVariable(concOption(OriginTracking(Name("tt"),15,"Test11.t")),Name("tt"),Type("B",TLType(" test11.test11.types.B ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" System.out.println(\"l2 = \" + ",TextPosition(15,21),TextPosition(15,52)))),BQTermToInstruction(BQVariable(concOption(OriginTracking(Name("x"),15,"Test11.t"),ModuleName("default")),Name("x"),Type("B",TLType(" test11.test11.types.B ")))),CodeToInstruction(TargetLanguageToCode(TL("); ",TextPosition(15,55),TextPosition(15,57))))))),concOption(OriginTracking(Name("Pattern"),15,"Test11.t"),OriginalText(Name(""))))),concOption(OriginTracking(Name("Match"),13,"Test11.t"),ModuleName("default")))),TargetLanguageToCode(TL("\n  }\n}\n",TextPosition(16,5),TextPosition(19,1)))))

------------------------------------------------
=> SORTIE OLDTYPER:
Tom(concCode(TargetLanguageToCode(TL("import test11.test11.types.*;\npublic class Test11 {\n  ",TextPosition(1,1),TextPosition(3,3))),TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),Name("t1"),Type("B",TLType(" test11.test11.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),Name("t2"),Type("B",TLType(" test11.test11.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom")),Name("t"),Type("B",TLType(" test11.test11.types.B "))),Code(" ({0} instanceof test11.test11.types.B) "),OriginTracking(Name("is_sort"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom"))),OriginTracking(Name("B"),2,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test11/test11/Test11.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),DeclarationToCode(SymbolDecl(Name("f"))),DeclarationToCode(SymbolDecl(Name("g"))),TargetLanguageToCode(TL("\n\n",TextPosition(24,1),TextPosition(26,1))))),TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    B tt = ",TextPosition(9,4),TextPosition(12,12))),BQTermToCode(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("b"),concBQTerm(),"default")))),"default")))),"default")))),TargetLanguageToCode(TL(";\n    ",TextPosition(12,22),TextPosition(13,5))),InstructionToCode(Match(concConstraintInstruction(ConstraintInstruction(MatchConstraint(Variable(concOption(OriginTracking(Name("x"),14,"Test11.t")),Name("x"),Type("B",TLType(" test11.test11.types.B ")),concConstraint()),BQVariable(concOption(OriginTracking(Name("tt"),14,"Test11.t")),Name("tt"),Type("B",TLType(" test11.test11.types.B ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" System.out.println(\"l1 = \" + ",TextPosition(14,18),TextPosition(14,49)))),BQTermToInstruction(BQVariable(concOption(OriginTracking(Name("x"),14,"Test11.t"),ModuleName("default")),Name("x"),Type("B",TLType(" test11.test11.types.B ")))),CodeToInstruction(TargetLanguageToCode(TL("); ",TextPosition(14,52),TextPosition(14,54))))))),concOption(OriginTracking(Name("Pattern"),14,"Test11.t"),OriginalText(Name("")))),ConstraintInstruction(MatchConstraint(RecordAppl(concOption(OriginTracking(Name("f"),15,"Test11.t")),concTomName(Name("f")),concSlot(PairSlotAppl(Name("n"),Variable(concOption(OriginTracking(Name("x"),15,"Test11.t")),Name("x"),Type("B",TLType(" test11.test11.types.B ")),concConstraint()))),concConstraint()),BQVariable(concOption(OriginTracking(Name("tt"),15,"Test11.t")),Name("tt"),Type("B",TLType(" test11.test11.types.B ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" System.out.println(\"l2 = \" + ",TextPosition(15,21),TextPosition(15,52)))),BQTermToInstruction(BQVariable(concOption(OriginTracking(Name("x"),15,"Test11.t"),ModuleName("default")),Name("x"),Type("B",TLType(" test11.test11.types.B ")))),CodeToInstruction(TargetLanguageToCode(TL("); ",TextPosition(15,55),TextPosition(15,57))))))),concOption(OriginTracking(Name("Pattern"),15,"Test11.t"),OriginalText(Name(""))))),concOption(OriginTracking(Name("Match"),13,"Test11.t"),ModuleName("default")))),TargetLanguageToCode(TL("\n  }\n}\n",TextPosition(16,5),TextPosition(19,1)))))

