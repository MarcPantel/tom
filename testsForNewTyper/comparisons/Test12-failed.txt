import test12.test12.types.*;
public class Test12 {
  %gom {
    module Test12
      abstract syntax
      B = b()
        | f(n:B)
        | g(n:B)
  }

  public static void main(String[] args) {
    B tt = `f(f(b()));
    %match{
      x << tt -> { System.out.println("l1 = " + `f(x)); }
    }
  }
}

------------------------------------------------
=> SORTIE NEWTYPER:
Code after type inference = 
Tom(concCode(TargetLanguageToCode(TL("import test12.test12.types.*;\npublic class Test12 {\n  ",TextPosition(1,1),TextPosition(3,3))),TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),Name("t1"),Type("B",TLType(" test12.test12.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),Name("t2"),Type("B",TLType(" test12.test12.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),Name("t"),Type("B",TLType(" test12.test12.types.B "))),Code(" ({0} instanceof test12.test12.types.B) "),OriginTracking(Name("is_sort"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom"))),OriginTracking(Name("B"),2,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),DeclarationToCode(SymbolDecl(Name("f"))),DeclarationToCode(SymbolDecl(Name("g"))),TargetLanguageToCode(TL("\n\n",TextPosition(24,1),TextPosition(26,1))))),TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    B tt = ",TextPosition(9,4),TextPosition(12,12))),BQTermToCode(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("b"),concBQTerm(),"default")))),"default")))),"default")))),TargetLanguageToCode(TL(";\n    ",TextPosition(12,22),TextPosition(13,5))),InstructionToCode(Match(concConstraintInstruction(ConstraintInstruction(MatchConstraint(Variable(concOption(OriginTracking(Name("x"),14,"Test12.t")),Name("x"),Type("unknown type",EmptyTargetLanguageType()),concConstraint()),BQVariable(concOption(OriginTracking(Name("tt"),14,"Test12.t")),Name("tt"),Type("unknown type",EmptyTargetLanguageType()))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" System.out.println(\"l1 = \" + ",TextPosition(14,18),TextPosition(14,49)))),BQTermToInstruction(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("x"),14,"Test12.t"),ModuleName("default")),Name("x"),Type("unknown type",EmptyTargetLanguageType()))))),"default")))),CodeToInstruction(TargetLanguageToCode(TL("); ",TextPosition(14,54),TextPosition(14,57))))))),concOption(OriginTracking(Name("Pattern"),14,"Test12.t"),OriginalText(Name(""))))),concOption(OriginTracking(Name("Match"),13,"Test12.t"),ModuleName("default")))),TargetLanguageToCode(TL("\n  }\n}\n",TextPosition(15,5),TextPosition(18,1)))))
Cannot generate code for expression: Cast(Type("unknown type",EmptyTargetLanguageType()),BQTermToExpression(BQVariable(concOption(OriginTracking(Name("tt"),14,"Test12.t")),Name("tt"),Type("unknown type",EmptyTargetLanguageType()))))
Test12.t:-1: ERROR: Test12.t: Unhandled exception


------------------------------------------------
=> SORTIE OLDTYPER:
Cannot guess the type of 'tt', use at least one constructor or specify the type

Code after type inference = 
Tom(concCode(TargetLanguageToCode(TL("import test12.test12.types.*;\npublic class Test12 {\n  ",TextPosition(1,1),TextPosition(3,3))),TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("B"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),Name("t1"),Type("B",TLType(" test12.test12.types.B "))),BQVariable(concOption(OriginTracking(Name("t2"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),Name("t2"),Type("B",TLType(" test12.test12.types.B "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom")),Name("t"),Type("B",TLType(" test12.test12.types.B "))),Code(" ({0} instanceof test12.test12.types.B) "),OriginTracking(Name("is_sort"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom"))),OriginTracking(Name("B"),2,"/Users/claudia/Doctorat/tom/workspace/git-jtom/testsForNewTyper/test12/test12/Test12.tom"))),DeclarationToCode(SymbolDecl(Name("b"))),DeclarationToCode(SymbolDecl(Name("f"))),DeclarationToCode(SymbolDecl(Name("g"))),TargetLanguageToCode(TL("\n\n",TextPosition(24,1),TextPosition(26,1))))),TargetLanguageToCode(TL("\n\n  public static void main(String[] args) {\n    B tt = ",TextPosition(9,4),TextPosition(12,12))),BQTermToCode(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("b"),concBQTerm(),"default")))),"default")))),"default")))),TargetLanguageToCode(TL(";\n    ",TextPosition(12,22),TextPosition(13,5))),InstructionToCode(Match(concConstraintInstruction(ConstraintInstruction(MatchConstraint(Variable(concOption(OriginTracking(Name("x"),14,"Test12.t")),Name("x"),Type("unknown type",EmptyTargetLanguageType()),concConstraint()),BQVariable(concOption(OriginTracking(Name("tt"),14,"Test12.t")),Name("tt"),Type("unknown type",EmptyTargetLanguageType()))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" System.out.println(\"l1 = \" + ",TextPosition(14,18),TextPosition(14,49)))),BQTermToInstruction(Composite(CompositeBQTerm(BuildTerm(Name("f"),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("x"),14,"Test12.t"),ModuleName("default")),Name("x"),Type("unknown type",EmptyTargetLanguageType()))))),"default")))),CodeToInstruction(TargetLanguageToCode(TL("); ",TextPosition(14,54),TextPosition(14,57))))))),concOption(OriginTracking(Name("Pattern"),14,"Test12.t"),OriginalText(Name(""))))),concOption(OriginTracking(Name("Match"),13,"Test12.t"),ModuleName("default")))),TargetLanguageToCode(TL("\n  }\n}\n",TextPosition(15,5),TextPosition(18,1)))))


