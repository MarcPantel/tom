TyperPlugin : newtyper = true
NewTyper : newtyper = true

Code after type inference = 
Tom(concCode(TargetLanguageToCode(TL("/*\n * Copyright (c) 2004-2010, INPL, INRIA\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *  - Redistributions of source code must retain the above copyright\n *  notice, this list of conditions and the following disclaimer.\n *  - Redistributions in binary form must reproduce the above copyright\n *  notice, this list of conditions and the following disclaimer in the\n *  documentation and/or other materials provided with the distribution.\n *  - Neither the name of the INRIA nor the names of its\n *  contributors may be used to endorse or promote products derived from\n *  this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage master;\nimport master.evaluator.expression.types.*;\n\nclass Evaluator {\n  ",TextPosition(1,1),TextPosition(33,3))),TomInclude(concCode(TomInclude(concCode(DeclarationToCode(TypeTermDecl(Name("int"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t1"),Type("int",TLType(" int "))),BQVariable(concOption(OriginTracking(Name("t2"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t2"),Type("int",TLType(" int "))),Code(" {0}=={1} "),OriginTracking(Name("equals"),32,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom")),Name("t"),Type("int",TLType(" int "))),Code(" true "),OriginTracking(Name("is_sort"),31,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),OriginTracking(Name("int"),29,"/Users/claudia/Doctorat/tom/workspace/git-jtom/src/dist/share/tom/java/int.tom"))),TargetLanguageToCode(TL("\n",TextPosition(33,1),TextPosition(34,1))))),DeclarationToCode(TypeTermDecl(Name("Expr"),concDeclaration(EqualTermDecl(BQVariable(concOption(OriginTracking(Name("t1"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/master/master/evaluator/expression/Expression.tom")),Name("t1"),Type("Expr",TLType(" master.evaluator.expression.types.Expr "))),BQVariable(concOption(OriginTracking(Name("t2"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/master/master/evaluator/expression/Expression.tom")),Name("t2"),Type("Expr",TLType(" master.evaluator.expression.types.Expr "))),Code(" ({0}=={1}) "),OriginTracking(Name("equals"),8,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/master/master/evaluator/expression/Expression.tom")),IsSortDecl(BQVariable(concOption(OriginTracking(Name("t"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/master/master/evaluator/expression/Expression.tom")),Name("t"),Type("Expr",TLType(" master.evaluator.expression.types.Expr "))),Code(" ({0} instanceof master.evaluator.expression.types.Expr) "),OriginTracking(Name("is_sort"),6,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/master/master/evaluator/expression/Expression.tom"))),OriginTracking(Name("Expr"),4,"/Users/claudia/Doctorat/tom/workspace/git-jtom/examples/master/master/evaluator/expression/Expression.tom"))),DeclarationToCode(SymbolDecl(Name("Cst"))),DeclarationToCode(SymbolDecl(Name("Plus"))),DeclarationToCode(SymbolDecl(Name("Mult"))),TargetLanguageToCode(TL("\n\n",TextPosition(29,1),TextPosition(31,1))))),TargetLanguageToCode(TL("\n\n  public static Expr eval(Expr expr) {\n    ",TextPosition(40,4),TextPosition(43,5))),InstructionToCode(Match(concConstraintInstruction(ConstraintInstruction(MatchConstraint(RecordAppl(concOption(OriginTracking(Name("Plus"),44,"Evaluator.t")),concTomName(Name("Plus")),concSlot(PairSlotAppl(Name("e1"),RecordAppl(concOption(OriginTracking(Name("Cst"),44,"Evaluator.t")),concTomName(Name("Cst")),concSlot(PairSlotAppl(Name("val"),Variable(concOption(OriginTracking(Name("v1"),44,"Evaluator.t")),Name("v1"),Type("int",TLType(" int ")),concConstraint()))),concConstraint())),PairSlotAppl(Name("e2"),RecordAppl(concOption(OriginTracking(Name("Cst"),44,"Evaluator.t")),concTomName(Name("Cst")),concSlot(PairSlotAppl(Name("val"),Variable(concOption(OriginTracking(Name("v2"),44,"Evaluator.t")),Name("v2"),Type("int",TLType(" int ")),concConstraint()))),concConstraint()))),concConstraint()),BQVariable(concOption(OriginTracking(Name("expr"),43,"Evaluator.t")),Name("expr"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" return ",TextPosition(44,32),TextPosition(44,41)))),BQTermToInstruction(Composite(CompositeBQTerm(BuildTerm(Name("Cst"),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("v1"),44,"Evaluator.t"),ModuleName("default")),Name("v1"),Type("int",TLType(" int ")))),CompositeTL(ITL("+")),CompositeTL(ITL(" ")),CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("v2"),44,"Evaluator.t"),ModuleName("default")),Name("v2"),Type("int",TLType(" int ")))))),"default")))),CodeToInstruction(TargetLanguageToCode(TL("; ",TextPosition(44,54),TextPosition(44,56))))))),concOption(OriginalText(Name("")))),ConstraintInstruction(MatchConstraint(RecordAppl(concOption(OriginTracking(Name("Mult"),45,"Evaluator.t")),concTomName(Name("Mult")),concSlot(PairSlotAppl(Name("e1"),RecordAppl(concOption(OriginTracking(Name("Cst"),45,"Evaluator.t")),concTomName(Name("Cst")),concSlot(PairSlotAppl(Name("val"),Variable(concOption(OriginTracking(Name("v1"),45,"Evaluator.t")),Name("v1"),Type("int",TLType(" int ")),concConstraint()))),concConstraint())),PairSlotAppl(Name("e2"),RecordAppl(concOption(OriginTracking(Name("Cst"),45,"Evaluator.t")),concTomName(Name("Cst")),concSlot(PairSlotAppl(Name("val"),Variable(concOption(OriginTracking(Name("v2"),45,"Evaluator.t")),Name("v2"),Type("int",TLType(" int ")),concConstraint()))),concConstraint()))),concConstraint()),BQVariable(concOption(OriginTracking(Name("expr"),43,"Evaluator.t")),Name("expr"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" return ",TextPosition(45,32),TextPosition(45,41)))),BQTermToInstruction(Composite(CompositeBQTerm(BuildTerm(Name("Cst"),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("v1"),45,"Evaluator.t"),ModuleName("default")),Name("v1"),Type("int",TLType(" int ")))),CompositeTL(ITL("*")),CompositeTL(ITL(" ")),CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("v2"),45,"Evaluator.t"),ModuleName("default")),Name("v2"),Type("int",TLType(" int ")))))),"default")))),CodeToInstruction(TargetLanguageToCode(TL("; ",TextPosition(45,54),TextPosition(45,56))))))),concOption(OriginalText(Name("")))),ConstraintInstruction(MatchConstraint(RecordAppl(concOption(OriginTracking(Name("Plus"),47,"Evaluator.t")),concTomName(Name("Plus")),concSlot(PairSlotAppl(Name("e1"),Variable(concOption(OriginTracking(Name("e1"),47,"Evaluator.t")),Name("e1"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")),concConstraint())),PairSlotAppl(Name("e2"),Variable(concOption(OriginTracking(Name("e2"),47,"Evaluator.t")),Name("e2"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")),concConstraint()))),concConstraint()),BQVariable(concOption(OriginTracking(Name("expr"),43,"Evaluator.t")),Name("expr"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" return ",TextPosition(47,22),TextPosition(47,31)))),BQTermToInstruction(Composite(CompositeBQTerm(FunctionCall(Name("eval"),EmptyType(),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("Plus"),concBQTerm(Composite(CompositeBQTerm(FunctionCall(Name("eval"),EmptyType(),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("e1"),47,"Evaluator.t"),ModuleName("default")),Name("e1"),Type("Expr",TLType(" master.evaluator.expression.types.Expr "))))))))),Composite(CompositeBQTerm(FunctionCall(Name("eval"),EmptyType(),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("e2"),47,"Evaluator.t"),ModuleName("default")),Name("e2"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))))))))),"default")))))))),CodeToInstruction(TargetLanguageToCode(TL("; ",TextPosition(47,61),TextPosition(47,63))))))),concOption(OriginalText(Name("")))),ConstraintInstruction(MatchConstraint(RecordAppl(concOption(OriginTracking(Name("Mult"),48,"Evaluator.t")),concTomName(Name("Mult")),concSlot(PairSlotAppl(Name("e1"),Variable(concOption(OriginTracking(Name("e1"),48,"Evaluator.t")),Name("e1"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")),concConstraint())),PairSlotAppl(Name("e2"),Variable(concOption(OriginTracking(Name("e2"),48,"Evaluator.t")),Name("e2"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")),concConstraint()))),concConstraint()),BQVariable(concOption(OriginTracking(Name("expr"),43,"Evaluator.t")),Name("expr"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" return ",TextPosition(48,22),TextPosition(48,31)))),BQTermToInstruction(Composite(CompositeBQTerm(FunctionCall(Name("eval"),EmptyType(),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("Mult"),concBQTerm(Composite(CompositeBQTerm(FunctionCall(Name("eval"),EmptyType(),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("e1"),48,"Evaluator.t"),ModuleName("default")),Name("e1"),Type("Expr",TLType(" master.evaluator.expression.types.Expr "))))))))),Composite(CompositeBQTerm(FunctionCall(Name("eval"),EmptyType(),concBQTerm(Composite(CompositeBQTerm(BQVariable(concOption(OriginTracking(Name("e2"),48,"Evaluator.t"),ModuleName("default")),Name("e2"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))))))))),"default")))))))),CodeToInstruction(TargetLanguageToCode(TL("; ",TextPosition(48,61),TextPosition(48,63))))))),concOption(OriginalText(Name("")))),ConstraintInstruction(MatchConstraint(Variable(concOption(OriginTracking(Name("x"),49,"Evaluator.t")),Name("x"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")),concConstraint()),BQVariable(concOption(OriginTracking(Name("expr"),43,"Evaluator.t")),Name("expr"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))),RawAction(AbstractBlock(concInstruction(CodeToInstruction(TargetLanguageToCode(TL(" return ",TextPosition(49,12),TextPosition(49,21)))),BQTermToInstruction(BQVariable(concOption(OriginTracking(Name("x"),49,"Evaluator.t"),ModuleName("default")),Name("x"),Type("Expr",TLType(" master.evaluator.expression.types.Expr ")))),CodeToInstruction(TargetLanguageToCode(TL("; ",TextPosition(49,24),TextPosition(49,25))))))),concOption(OriginalText(Name(""))))),concOption(OriginTracking(Name("Match"),43,"Evaluator.t"),ModuleName("default")))),TargetLanguageToCode(TL("\n    throw new RuntimeException(\"strange term: \" + expr);\n  }\n\n  //-------------------------------------------------------\n\n  public final static void main(String[] args) {\n    System.out.println(\"running...\");\n    Expr e1 = ",TextPosition(50,5),TextPosition(58,15))),BQTermToCode(Composite(CompositeBQTerm(BuildTerm(Name("Plus"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("Cst"),concBQTerm(Composite(CompositeTL(ITL("1")))),"default"))),Composite(CompositeBQTerm(BuildTerm(Name("Cst"),concBQTerm(Composite(CompositeTL(ITL("2")))),"default")))),"default")))),TargetLanguageToCode(TL(";\n    System.out.println(e1 + \" --> \" + eval(e1));\n    \n    Expr e2 = ",TextPosition(58,35),TextPosition(61,15))),BQTermToCode(Composite(CompositeBQTerm(BuildTerm(Name("Plus"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("Mult"),concBQTerm(Composite(CompositeBQTerm(BuildTerm(Name("Cst"),concBQTerm(Composite(CompositeTL(ITL("3")))),"default"))),Composite(CompositeBQTerm(BuildTerm(Name("Cst"),concBQTerm(Composite(CompositeTL(ITL("4")))),"default")))),"default"))),Composite(CompositeBQTerm(BuildTerm(Name("Cst"),concBQTerm(Composite(CompositeTL(ITL("1")))),"default")))),"default")))),TargetLanguageToCode(TL(";\n    System.out.println(e2 + \" --> \" + eval(e2));\n  }\n\n\n}\n",TextPosition(61,48),TextPosition(67,1)))))
