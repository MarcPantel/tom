/* Generated by TOM (version 3.0alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.platform;

import java.text.*;
import java.util.*;
import java.util.logging.*;
import java.io.*;

import aterm.*;
import aterm.pure.*;

import tom.library.adt.tnode.*;
import tom.library.adt.tnode.types.*;
import tom.library.xml.*;

/**
 * The TomServer manages plugins. It parses Tom.xml in order to find which
 * plugins are used and how they are ordered. Then it instantiates them,
 * and runs them.
 *
 * @author Gr&eacute;gory ANDRIEN
 */
public class PluginPlatform {

  /* Generated by TOM (version 3.0alpha): Do not edit this file *//* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_TNode( tom.library.adt.tnode.types.TNode t) { return null; }public boolean tom_cmp_fun_sym_TNode(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TNode( tom.library.adt.tnode.types.TNode t,  int  n) { return null; }public boolean tom_terms_equal_TNode(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_CommentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCommentNode(); }public  tom.library.adt.tnode.types.TNode tom_make_CommentNode( String  t0) { return  getTNodeFactory().makeTNode_CommentNode(t0); }public  String  tom_get_slot_CommentNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_ProcessingInstructionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isProcessingInstructionNode(); }public  tom.library.adt.tnode.types.TNode tom_make_ProcessingInstructionNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_ProcessingInstructionNode(t0, t1); }public  String  tom_get_slot_ProcessingInstructionNode_target( tom.library.adt.tnode.types.TNode t) { return  t.getTarget(); }public  String  tom_get_slot_ProcessingInstructionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_TextNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isTextNode(); }public  tom.library.adt.tnode.types.TNode tom_make_TextNode( String  t0) { return  getTNodeFactory().makeTNode_TextNode(t0); }public  String  tom_get_slot_TextNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_CDATASectionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCDATASectionNode(); }public  tom.library.adt.tnode.types.TNode tom_make_CDATASectionNode( String  t0) { return  getTNodeFactory().makeTNode_CDATASectionNode(t0); }public  String  tom_get_slot_CDATASectionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_DocumentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentNode(); }public  tom.library.adt.tnode.types.TNode tom_make_DocumentNode( tom.library.adt.tnode.types.TNode t0,  tom.library.adt.tnode.types.TNode t1) { return  getTNodeFactory().makeTNode_DocumentNode(t0, t1); }public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docType( tom.library.adt.tnode.types.TNode t) { return  t.getDocType(); }public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docElem( tom.library.adt.tnode.types.TNode t) { return  t.getDocElem(); }public boolean tom_is_fun_sym_ElementNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isElementNode(); }public  tom.library.adt.tnode.types.TNode tom_make_ElementNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1,  tom.library.adt.tnode.types.TNodeList t2) { return  getTNodeFactory().makeTNode_ElementNode(t0, t1, t2); }public  String  tom_get_slot_ElementNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_attrList( tom.library.adt.tnode.types.TNode t) { return  t.getAttrList(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_AttributeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isAttributeNode(); }public  tom.library.adt.tnode.types.TNode tom_make_AttributeNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_AttributeNode(t0, t1, t2); }public  String  tom_get_slot_AttributeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_AttributeNode_specified( tom.library.adt.tnode.types.TNode t) { return  t.getSpecified(); }public  String  tom_get_slot_AttributeNode_value( tom.library.adt.tnode.types.TNode t) { return  t.getValue(); }public boolean tom_is_fun_sym_DocumentTypeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentTypeNode(); }public  tom.library.adt.tnode.types.TNode tom_make_DocumentTypeNode( String  t0,  String  t1,  String  t2,  String  t3,  tom.library.adt.tnode.types.TNodeList t4,  tom.library.adt.tnode.types.TNodeList t5) { return  getTNodeFactory().makeTNode_DocumentTypeNode(t0, t1, t2, t3, t4, t5); }public  String  tom_get_slot_DocumentTypeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_DocumentTypeNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_DocumentTypeNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public  String  tom_get_slot_DocumentTypeNode_internalSubset( tom.library.adt.tnode.types.TNode t) { return  t.getInternalSubset(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_entities( tom.library.adt.tnode.types.TNode t) { return  t.getEntities(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_notations( tom.library.adt.tnode.types.TNode t) { return  t.getNotations(); }public boolean tom_is_fun_sym_EntityReferenceNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityReferenceNode(); }public  tom.library.adt.tnode.types.TNode tom_make_EntityReferenceNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1) { return  getTNodeFactory().makeTNode_EntityReferenceNode(t0, t1); }public  String  tom_get_slot_EntityReferenceNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_EntityReferenceNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_EntityNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityNode(); }public  tom.library.adt.tnode.types.TNode tom_make_EntityNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_EntityNode(t0, t1, t2); }public  String  tom_get_slot_EntityNode_notationName( tom.library.adt.tnode.types.TNode t) { return  t.getNotationName(); }public  String  tom_get_slot_EntityNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_EntityNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public boolean tom_is_fun_sym_NotationNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isNotationNode(); }public  tom.library.adt.tnode.types.TNode tom_make_NotationNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_NotationNode(t0, t1); }public  String  tom_get_slot_NotationNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_NotationNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public Object tom_get_fun_sym_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return null; }public boolean tom_cmp_fun_sym_TNodeList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TNodeList(Object t1, Object t2) { return t1.equals(t2); }public  tom.library.adt.tnode.types.TNode tom_get_head_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getHead(); }public  tom.library.adt.tnode.types.TNodeList tom_get_tail_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getTail(); }public boolean tom_is_empty_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTNode( tom.library.adt.tnode.types.TNodeList t) { return (t!= null) && t.isSortTNodeList(); }public  tom.library.adt.tnode.types.TNodeList tom_empty_list_concTNode() { return getTNodeFactory().makeTNodeList(); }public  tom.library.adt.tnode.types.TNodeList tom_cons_list_concTNode( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  tom.library.adt.tnode.types.TNodeList tom_append_list_concTNode( tom.library.adt.tnode.types.TNodeList l1,  tom.library.adt.tnode.types.TNodeList l2) {    if(tom_is_empty_TNodeList(l1)) {     return l2;    } else if(tom_is_empty_TNodeList(l2)) {     return l1;    } else if(tom_is_empty_TNodeList(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1))) {     return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),l2);    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),tom_append_list_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1),l2));    }   }  public  tom.library.adt.tnode.types.TNodeList tom_get_slice_concTNode( tom.library.adt.tnode.types.TNodeList begin,  tom.library.adt.tnode.types.TNodeList end) {    if(tom_terms_equal_TNodeList(begin,end)) {      return ( tom.library.adt.tnode.types.TNodeList)tom_empty_list_concTNode();    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(begin),( tom.library.adt.tnode.types.TNodeList)tom_get_slice_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isEmpty(); }public  tom.library.adt.tnode.types.TNodeList tom_make_emptyTNodeList() { return getTNodeFactory().makeTNodeList(); }public boolean tom_is_fun_sym_manyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isMany(); }public  tom.library.adt.tnode.types.TNodeList tom_make_manyTNodeList( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  tom.library.adt.tnode.types.TNode tom_get_slot_manyTNodeList_head( tom.library.adt.tnode.types.TNodeList t) { return  t.getHead(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_manyTNodeList_tail( tom.library.adt.tnode.types.TNodeList t) { return  t.getTail(); } 
    
  /** The List containing a reference to the plugins. */
  private List instances;
    
  /**  */
  private TNodeFactory tNodeFactory;

  /**  */
  private OptionManager optionManager;
	
  /**
   * An accessor method.
   * 
   * @return a TNodeFactory
   */  
  public TNodeFactory getTNodeFactory() { return tNodeFactory; }
	
  /**
   * An accessor method.
   * 
   * @return an OptionManager
   */
  public OptionManager getOptionManager() { return optionManager; }

  /**  */
  private Logger logger;

  /**  */
  private StatusHandler statusHandler;

  /** Accessor method for the status handler. */
  public StatusHandler getStatusHandler() { return statusHandler; }

  /**
   * Part of the Singleton pattern. The unique instance of the TomServer.
   */
  private static PluginPlatform instance = null;
    
  /**
   * Part of the Singleton pattern. A private constructor method, that exists to defeat instantiation.
   */
  private PluginPlatform(){}
    
  /**
   * Part of the Singleton pattern. Returns the instance of the TomServer if it has been initialized before,
   * otherwise it throws a RuntimeException.
   * 
   * @return the instance of the TomServer
   * @throws RuntimeException if the TomServer hasn't been initialized before the call
   */
  public static PluginPlatform getInstance() {
    if(instance == null) {
      throw new RuntimeException("Cannot get the instance of an uninitialized TomServer");
    }
    return instance;
  }

  /**
   * Part of the Singleton pattern. Initializes the PluginPlatform in case it hasn't been done before,
   * otherwise it reinitializes it.
   * 
   * @return the instance of the PluginPlatform
   */
  public static PluginPlatform create(OptionManager optionManager, String loggerRadical) {
    if(instance == null) {
      instance = new PluginPlatform();
        
      instance.instances = new ArrayList();
      instance.tNodeFactory = TNodeFactory.getInstance(SingletonFactory.getInstance());
      instance.optionManager = optionManager;

      instance.statusHandler = new StatusHandler();
      Logger.getLogger(loggerRadical).addHandler(instance.statusHandler);
      instance.logger = Logger.getLogger(loggerRadical+".PluginPlatform","tom.platform.PluginPlatformResources");
	
      return instance;
    } else {
      PluginPlatform.reset(optionManager, loggerRadical);
      return instance;
    }
  }

  /**
   * Reinitializes the PluginPlatform instance.
   */
  public static void reset(OptionManager optionManager, String loggerRadical) {
    instance.instances = new ArrayList();
    instance.optionManager = optionManager;
    instance.statusHandler = new StatusHandler();
    Logger.getLogger(loggerRadical).addHandler(instance.statusHandler);
    instance.logger = Logger.getLogger(loggerRadical+".PluginPlatform","tom.platform.PluginPlatformResources");
  }

  /**
   * 
   * @param args
   * @return
   */
  public static int exec(String args[], OptionManager optionManager, String loggerRadical) {
    PluginPlatform server = PluginPlatform.create(optionManager, loggerRadical);
    return server.run(args);
  }

  /**
   * This method analyzes the command line and determines which configuration file should be used.
   * 
   * @param argumentList the command line
   * @return a String containing the path to the configuration file to be used
   */
  private String whichConfigFile(String[] argumentList) {
    // there is no default configuration file
    // because the tom script already specifies a configuration file
    // (which can be overridden by the user since only the last one that is specified is taken into account)
    // so there MUST be at least one "-X" option
    // (should be remembered if the PluginPlatform is used outside of the tom script)
    String xmlConfigurationFile = null; 
	
    int i = 0;

    try {
      for(; i < argumentList.length; i++) {
        if(argumentList[i].equals("-X")) {
          // tests if argumentList redefines the configuration file
          xmlConfigurationFile = argumentList[++i];
        }
      }
    } catch (ArrayIndexOutOfBoundsException e) {
      logger.log(Level.SEVERE,
		 "IncompleteOption",
		 argumentList[--i]);
    }

     if( statusHandler.hasError() ) {
       return null;
     }

    try {
      File file = new File(xmlConfigurationFile);
      
      if(! file.exists() ) {
        // the case where the specified file doesn't exist is handled here
	logger.log(Level.SEVERE,
		   "ConfigFileNotFound",
		   xmlConfigurationFile);
      }
    } catch(NullPointerException npe) {
      // the lack of a configuration file is handled here
      logger.log(Level.SEVERE,
		 "ConfigFileNotSpecified");
    }

     if( statusHandler.hasError() ) {
       return null;
     }

    return xmlConfigurationFile;
  }

  /**
   * This method parses the configuration and extracts the global options as well as
   * the class paths of the plugins that are going to be used.
   * 
   * @param xmlConfigurationFile the name of the XML configuration file to be parsed
   * @return a List containing the class paths of the plugins
   */
  private List parseConfigFile(String xmlConfigurationFile) {
    // parses configuration file...
    XmlTools xtools = new XmlTools();
    List classPaths = new ArrayList();
    TNode node = (TNode)xtools.convertXMLToATerm(xmlConfigurationFile);

    if( node == null ) {
      // parsing failed
      logger.log(Level.SEVERE,
		 "ConfigFileNotXML",
		 xmlConfigurationFile);
      return null;
    }

    // ... to extract global options
    optionManager.extractOptionList(node.getDocElem());

    // ... to extract plugin classpaths
    extractClassPaths(node.getDocElem(), classPaths);
    return classPaths;
  }

  /**
   * The main method, which runs the PluginPlatform.
   * 
   * @param argumentList the command line
   * @return an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  public int run(String[] argumentList) {
    String xmlConfigurationFile = whichConfigFile(argumentList);

    if( statusHandler.hasError() ) { // method whichConfigFile() encountered an error
      return 1;
    }

    List classPaths = parseConfigFile(xmlConfigurationFile);
  
    if( statusHandler.hasError() ) { // method parseConfigFile() encountered an error
      return 1;
    }
  
    // creates an instance of each plugin
    Iterator it = classPaths.iterator();
    while(it.hasNext()) {
      String path = (String)it.next();
      try { 
        Object pluginInstance = Class.forName(path).newInstance();
        if(pluginInstance instanceof Plugin) {
          instances.add(pluginInstance);
        } else {
          logger.log(Level.SEVERE,
                     "ClassNotAPlugin",
                     path);
        }
      } catch(ClassNotFoundException cnfe) { 
        logger.log(Level.WARNING,
                   "ClassNotFound",
                   path);
      } catch(Exception e) { 
        logger.log(Level.SEVERE,
                   "InstantiationError",
                   path);
      }
    }

    if( statusHandler.hasError() ) {
      return 1;
    }
    
    optionManager.setPlugins(instances);
    String[] inputFiles = optionManager.optionManagement(argumentList);
  
    if( statusHandler.hasError() ) {
      return 1;
    }

    for(int i = 0; i < inputFiles.length; i++) { // for each file
      logger.log(Level.FINER,
                 "NowCompiling",
                 inputFiles[i]);

      // creates an ATerm containing the input file name
      ATerm term = (SingletonFactory.getInstance()).makeAFun(inputFiles[i],0,false);
      
      // runs the modules
      it = instances.iterator();
      while(it.hasNext()) {
        Plugin plugin = (Plugin)it.next();
        plugin.setTerm(term);
        plugin.run();
        term = plugin.getTerm();

	if( statusHandler.hasError() ) {
	  logger.log(Level.SEVERE,
		     "ProcessingError",
		     inputFiles[i]);
	  break;
	}
      }
    }

    int nbOfErrors   = statusHandler.nbOfErrors();
    int nbOfWarnings = statusHandler.nbOfWarnings();

    if( statusHandler.hasError() ) {
      logger.log( Level.OFF, // this is the highest possible level > will be printed no matter what 
		  "TaskErrorMessage",
		  new Object[]{ new Integer(nbOfErrors), new Integer(nbOfWarnings) } );
      return 1;
    } else if( statusHandler.hasWarning() ) {
      logger.log( Level.OFF,
		  "TaskWarningMessage",
		  new Integer(nbOfWarnings) );
      return 0;
    } else {
      return 0;
    }
  }

    
  /**
   * Extracts the plugins' class paths from the XML configuration file.
   * 
   * @param node the node containing the XML document
   * @param v the List into which class paths will be put
   */
  private void extractClassPaths(TNode node, List v) {
     { tom.library.adt.tnode.types.TNode tom_match1_1=(( tom.library.adt.tnode.types.TNode)node);{ if(tom_is_fun_sym_ElementNode(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_ElementNode_name(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_2=tom_get_slot_ElementNode_attrList(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3=tom_get_slot_ElementNode_childList(tom_match1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_1) , "server") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_2_list1=tom_match1_1_2; if(tom_is_fun_sym_concTNode(tom_match1_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_list1=tom_match1_1_3; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_begin1=tom_match1_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_end1=tom_match1_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match1_1_3_end1))) {tom_match1_1_3_list1=tom_match1_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match1_1_3_2=tom_get_head_TNodeList(tom_match1_1_3_list1);tom_match1_1_3_list1=tom_get_tail_TNodeList(tom_match1_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match1_1_3_2) ||  false ) { { tom.library.adt.tnode.types.TNode plug=tom_match1_1_3_2; { String  tom_match1_1_3_2_1=tom_get_slot_ElementNode_name(tom_match1_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match1_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match1_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_3_2_1) , "plugins") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_2_list1=tom_match1_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match1_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_list1=tom_match1_1_3_2_3; { tom.library.adt.tnode.types.TNode tom_match2_1=(( tom.library.adt.tnode.types.TNode)plug);{ if(tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3=tom_get_slot_ElementNode_childList(tom_match2_1); { tom.library.adt.tnode.types.TNodeList cl=tom_match2_1_3;


 // gets the <plugin> nodes 
	    while(!(cl.isEmpty())) { // for each node...
	      TNode pluginNode = cl.getHead();
	       { tom.library.adt.tnode.types.TNode tom_match3_1=(( tom.library.adt.tnode.types.TNode)pluginNode);{ if(tom_is_fun_sym_ElementNode(tom_match3_1) ||  false ) { { String  tom_match3_1_1=tom_get_slot_ElementNode_name(tom_match3_1); { tom.library.adt.tnode.types.TNodeList tom_match3_1_2=tom_get_slot_ElementNode_attrList(tom_match3_1); { tom.library.adt.tnode.types.TNodeList tom_match3_1_3=tom_get_slot_ElementNode_childList(tom_match3_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_1) , "plugin") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match3_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_2_list1=tom_match3_1_2; { tom.library.adt.tnode.types.TNodeList tom_match3_1_2_begin1=tom_match3_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match3_1_2_end1=tom_match3_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match3_1_2_end1))) {tom_match3_1_2_list1=tom_match3_1_2_end1;{ { tom.library.adt.tnode.types.TNode tom_match3_1_2_2=tom_get_head_TNodeList(tom_match3_1_2_list1);tom_match3_1_2_list1=tom_get_tail_TNodeList(tom_match3_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match3_1_2_2) ||  false ) { { String  tom_match3_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match3_1_2_2); { String  tom_match3_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match3_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_2_2_1) , "classpath") ||  false ) { { String  cp=tom_match3_1_2_2_3; if(tom_is_fun_sym_concTNode(tom_match3_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match3_1_3_list1=tom_match3_1_3; if(tom_is_empty_TNodeList(tom_match3_1_3_list1)) {
 
		  v.add(cp);
		  logger.log(Level.FINER,
			     "ClassPathRead",
			     cp);
		 }} }} }}} }}tom_match3_1_2_end1=tom_get_tail_TNodeList(tom_match3_1_2_end1);} }}}} } }}}} }}}

	      cl = cl.getTail();
	    }
	  }} }}}

      } }} } }}}}} }}tom_match1_1_3_end1=tom_get_tail_TNodeList(tom_match1_1_3_end1);} }}}} }} } }}}} }}}

  }

  /**
   * Returns the value of an option. Returns an Object which is a Boolean, a String or an Integer
   * depending on what the option type is.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return an Object containing the option's value
   */
  public Object getOptionValue(String optionName) {
    return optionManager.getOptionValue(optionName);
  }

  /**
   * Returns the value of a boolean option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return a boolean that is the option's value
   */
  public boolean getOptionBooleanValue(String optionName) {
    return optionManager.getOptionBooleanValue(optionName);
  }
    
  /**
   * Returns the value of an integer option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return an int that is the option's value
   */
  public int getOptionIntegerValue(String optionName) {
    return optionManager.getOptionIntegerValue(optionName);
  }
    
  /**
   * Returns the value of a string option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return a String that is the option's value
   */
  public String getOptionStringValue(String optionName) {
    return optionManager.getOptionStringValue(optionName);
  }

  public void putOptionValue(Object key, Object value) {
    optionManager.putOptionValue(key, value);
  }

}
