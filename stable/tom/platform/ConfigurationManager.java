/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.platform;

import java.util.*;
import java.util.logging.*;

import aterm.*;
import aterm.pure.*;

import tom.library.adt.tnode.*;
import tom.library.adt.tnode.types.*;
import tom.library.xml.*;
import tom.platform.adt.platformoption.*;
import tom.platform.adt.platformoption.types.*;

/**
 * This class is a wrapper for the platform XML configuration files.
 * It extracts the plugins information and create an ordered list of
 * of instances. Extracts the Option Management information and based
 * on it create and initialize the corresponding OptionManager.
 * The instantiation of a Configuration is not sufficient since it need to
 * be initialized with an execution commandLine.
 *
 */
public class ConfigurationManager {
  
  /** Used to analyse xml configuration file*/
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_TNodeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTNode( tom.library.adt.tnode.types.TNodeList t) {  return (t!= null) && t.isSortTNodeList() ;}private static  tom.library.adt.tnode.types.TNodeList tom_empty_list_concTNode() { return tom.library.adt.tnode.TNodeFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTNodeList(); }private static  tom.library.adt.tnode.types.TNodeList tom_cons_list_concTNode( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return tom.library.adt.tnode.TNodeFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTNodeList(e,l); }private static  tom.library.adt.tnode.types.TNode tom_get_head_concTNode_TNodeList( tom.library.adt.tnode.types.TNodeList l) {  return l.getHead() ;}private static  tom.library.adt.tnode.types.TNodeList tom_get_tail_concTNode_TNodeList( tom.library.adt.tnode.types.TNodeList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTNode_TNodeList( tom.library.adt.tnode.types.TNodeList l) {  return l.isEmpty() ;}private static  tom.library.adt.tnode.types.TNodeList tom_append_list_concTNode( tom.library.adt.tnode.types.TNodeList l1,  tom.library.adt.tnode.types.TNodeList l2) {    if(tom_is_empty_concTNode_TNodeList(l1)) {     return l2;    } else if(tom_is_empty_concTNode_TNodeList(l2)) {     return l1;    } else if(tom_is_empty_concTNode_TNodeList(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_concTNode_TNodeList(l1))) {     return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_concTNode_TNodeList(l1),l2);    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_concTNode_TNodeList(l1),tom_append_list_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_concTNode_TNodeList(l1),l2));    }   }  private static  tom.library.adt.tnode.types.TNodeList tom_get_slice_concTNode( tom.library.adt.tnode.types.TNodeList begin,  tom.library.adt.tnode.types.TNodeList end) {    if(tom_terms_equal_TNodeList(begin,end)) {      return ( tom.library.adt.tnode.types.TNodeList)tom_empty_list_concTNode();    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_concTNode_TNodeList(begin),( tom.library.adt.tnode.types.TNodeList)tom_get_slice_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_concTNode_TNodeList(begin),end));    }   }  private static boolean tom_terms_equal_TNode(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_AttributeNode( tom.library.adt.tnode.types.TNode t) {  return  (t!= null) && t.isAttributeNode() ;}private static  String  tom_get_slot_AttributeNode_name( tom.library.adt.tnode.types.TNode t) {  return  t.getName() ;}private static  String  tom_get_slot_AttributeNode_specified( tom.library.adt.tnode.types.TNode t) {  return  t.getSpecified() ;}private static  String  tom_get_slot_AttributeNode_value( tom.library.adt.tnode.types.TNode t) {  return  t.getValue() ;}private static boolean tom_is_fun_sym_ElementNode( tom.library.adt.tnode.types.TNode t) {  return  (t!= null) && t.isElementNode() ;}private static  String  tom_get_slot_ElementNode_name( tom.library.adt.tnode.types.TNode t) {  return  t.getName() ;}private static  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_attrList( tom.library.adt.tnode.types.TNode t) {  return  t.getAttrList() ;}private static  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_childList( tom.library.adt.tnode.types.TNode t) {  return  t.getChildList() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_PlatformOptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformBoolean(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformValue(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformOption(Object t1, Object t2) {  return t1.equals(t2) ;}  


  
  /** configuration file name */
  private String xmlConfigurationFileName;

  /** The plugins instance list*/
  private List pluginsList;

  /** The OptionManager */
  private OptionManager optionManager;
  
  /**
   * Basic Constructor
   * constructing a configurationManager that needs to be initialized
   */
  public ConfigurationManager(String xmlConfigurationFileName) {
    this.xmlConfigurationFileName = xmlConfigurationFileName;
    this.pluginsList = new ArrayList();
  }
  
  /**
   * initialize analyse the XML file and extract plugins and option management
   *
   * @return  an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  public int initialize(String[] commandLine) {
    XmlTools xtools = new XmlTools();
    TNode configurationNode = (TNode)xtools.convertXMLToATerm(xmlConfigurationFileName);
    if(configurationNode == null) {
      getLogger().log(Level.SEVERE, PluginPlatformMessage.configFileNotXML.getMessage(), xmlConfigurationFileName);
      return 1;
    }
    if(createPlugins(configurationNode.getDocElem())==1) {
      return 1;
    }
    if(createOptionManager(configurationNode.getDocElem()) == 1) {
      return 1;
    }
    return optionManager.initialize(this, commandLine);
  }

  /** Accessor method */
  public List getPluginsList() {
    return pluginsList;
  }

  /** Accessor method */
  public OptionManager  getOptionManager() {
    return optionManager;
  }
  
  /** 
   * Initialize the plugins list based on information extracted
   * from the XML conf file converted in TNode
   *
   * @return  an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  private int createPlugins(TNode configurationNode) {
    List pluginsClassList = extractClassPaths(configurationNode);
    // if empty list this means there is a problem somewhere
    if(pluginsClassList.isEmpty()) {
      getLogger().log(Level.SEVERE, PluginPlatformMessage.noPluginFound.getMessage(), xmlConfigurationFileName);
      pluginsList = null;
      return 1;
    }
    // creates an instance of each plugin
    Iterator classPathIt = pluginsClassList.iterator();
    while(classPathIt.hasNext()) {
      String pluginClass = (String)classPathIt.next();
      try { 
        Object pluginInstance = Class.forName(pluginClass).newInstance();
        if(pluginInstance instanceof Plugin) {
          pluginsList.add(pluginInstance);
        } else {
          getLogger().log(Level.SEVERE, PluginPlatformMessage.classNotAPlugin.getMessage(), pluginClass);
          pluginsList = null;
          return 1;
        }
      } catch(ClassNotFoundException cnfe) {
        getLogger().log(Level.WARNING, PluginPlatformMessage.classNotFound.getMessage(), pluginClass);
        return 1;
      } catch(Exception e) {
        // adds the error message. this is too cryptic otherwise
        e.printStackTrace();
        getLogger().log(Level.SEVERE, PluginPlatformMessage.instantiationError.getMessage(), pluginClass);
        pluginsList = null;
        return 1;
      }
    }
    return 0;
  }
  
  /**
   * Extracts the plugins' class name from the XML configuration file.
   * 
   * @param node the node containing the XML document
   * @return the List of plugins class path
   */
  private List extractClassPaths(TNode node) {
    List res = new ArrayList();
     if(node instanceof  tom.library.adt.tnode.types.TNode) { { tom.library.adt.tnode.types.TNode tom_match1_1=(( tom.library.adt.tnode.types.TNode)node); if (tom_is_fun_sym_ElementNode(tom_match1_1) ||  false ) { { String  tom_match1_1_name=tom_get_slot_ElementNode_name(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_attrList=tom_get_slot_ElementNode_attrList(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList=tom_get_slot_ElementNode_childList(tom_match1_1); if (tom_terms_equal_String("platform", tom_match1_1_name) ||  false ) { if (tom_is_fun_sym_concTNode(tom_match1_1_attrList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_attrList_list1=tom_match1_1_attrList; if (tom_is_fun_sym_concTNode(tom_match1_1_childList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_list1=tom_match1_1_childList; { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_begin1=tom_match1_1_childList_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_end1=tom_match1_1_childList_list1; { while (!(tom_is_empty_concTNode_TNodeList(tom_match1_1_childList_end1))) {tom_match1_1_childList_list1=tom_match1_1_childList_end1; { { tom.library.adt.tnode.types.TNode tom_match1_1_childList_2=tom_get_head_concTNode_TNodeList(tom_match1_1_childList_list1);tom_match1_1_childList_list1=tom_get_tail_concTNode_TNodeList(tom_match1_1_childList_list1); if (tom_is_fun_sym_ElementNode(tom_match1_1_childList_2) ||  false ) { { String  tom_match1_1_childList_2_name=tom_get_slot_ElementNode_name(tom_match1_1_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_attrList=tom_get_slot_ElementNode_attrList(tom_match1_1_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList=tom_get_slot_ElementNode_childList(tom_match1_1_childList_2); if (tom_terms_equal_String("plugins", tom_match1_1_childList_2_name) ||  false ) { if (tom_is_fun_sym_concTNode(tom_match1_1_childList_2_attrList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_attrList_list1=tom_match1_1_childList_2_attrList; if (tom_is_fun_sym_concTNode(tom_match1_1_childList_2_childList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_list1=tom_match1_1_childList_2_childList; { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_begin1=tom_match1_1_childList_2_childList_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_end1=tom_match1_1_childList_2_childList_list1; { while (!(tom_is_empty_concTNode_TNodeList(tom_match1_1_childList_2_childList_end1))) {tom_match1_1_childList_2_childList_list1=tom_match1_1_childList_2_childList_end1; { { tom.library.adt.tnode.types.TNode tom_match1_1_childList_2_childList_2=tom_get_head_concTNode_TNodeList(tom_match1_1_childList_2_childList_list1);tom_match1_1_childList_2_childList_list1=tom_get_tail_concTNode_TNodeList(tom_match1_1_childList_2_childList_list1); if (tom_is_fun_sym_ElementNode(tom_match1_1_childList_2_childList_2) ||  false ) { { String  tom_match1_1_childList_2_childList_2_name=tom_get_slot_ElementNode_name(tom_match1_1_childList_2_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_2_attrList=tom_get_slot_ElementNode_attrList(tom_match1_1_childList_2_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_2_childList=tom_get_slot_ElementNode_childList(tom_match1_1_childList_2_childList_2); if (tom_terms_equal_String("plugin", tom_match1_1_childList_2_childList_2_name) ||  false ) { if (tom_is_fun_sym_concTNode(tom_match1_1_childList_2_childList_2_attrList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_2_attrList_list1=tom_match1_1_childList_2_childList_2_attrList; { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_2_attrList_begin1=tom_match1_1_childList_2_childList_2_attrList_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_2_attrList_end1=tom_match1_1_childList_2_childList_2_attrList_list1; { while (!(tom_is_empty_concTNode_TNodeList(tom_match1_1_childList_2_childList_2_attrList_end1))) {tom_match1_1_childList_2_childList_2_attrList_list1=tom_match1_1_childList_2_childList_2_attrList_end1; { { tom.library.adt.tnode.types.TNode tom_match1_1_childList_2_childList_2_attrList_2=tom_get_head_concTNode_TNodeList(tom_match1_1_childList_2_childList_2_attrList_list1);tom_match1_1_childList_2_childList_2_attrList_list1=tom_get_tail_concTNode_TNodeList(tom_match1_1_childList_2_childList_2_attrList_list1); if (tom_is_fun_sym_AttributeNode(tom_match1_1_childList_2_childList_2_attrList_2) ||  false ) { { String  tom_match1_1_childList_2_childList_2_attrList_2_name=tom_get_slot_AttributeNode_name(tom_match1_1_childList_2_childList_2_attrList_2); { String  tom_match1_1_childList_2_childList_2_attrList_2_specified=tom_get_slot_AttributeNode_specified(tom_match1_1_childList_2_childList_2_attrList_2); { String  tom_match1_1_childList_2_childList_2_attrList_2_value=tom_get_slot_AttributeNode_value(tom_match1_1_childList_2_childList_2_attrList_2); if (tom_terms_equal_String("class", tom_match1_1_childList_2_childList_2_attrList_2_name) ||  false ) { { String  tom_cp=tom_match1_1_childList_2_childList_2_attrList_2_value; if (tom_is_fun_sym_concTNode(tom_match1_1_childList_2_childList_2_childList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_childList_2_childList_2_childList_list1=tom_match1_1_childList_2_childList_2_childList; if (tom_is_empty_concTNode_TNodeList(tom_match1_1_childList_2_childList_2_childList_list1)) { if ( true ) {

         res.add(tom_cp);
         getLogger().log(Level.FINER, PluginPlatformMessage.classPathRead.getMessage(), tom_cp);
        } } } } } } } } } } }tom_match1_1_childList_2_childList_2_attrList_end1=tom_get_tail_concTNode_TNodeList(tom_match1_1_childList_2_childList_2_attrList_end1); } }tom_match1_1_childList_2_childList_2_attrList_list1=tom_match1_1_childList_2_childList_2_attrList_begin1; } } } } } } } } } } }tom_match1_1_childList_2_childList_end1=tom_get_tail_concTNode_TNodeList(tom_match1_1_childList_2_childList_end1); } }tom_match1_1_childList_2_childList_list1=tom_match1_1_childList_2_childList_begin1; } } } } } } } } } } } } }tom_match1_1_childList_end1=tom_get_tail_concTNode_TNodeList(tom_match1_1_childList_end1); } }tom_match1_1_childList_list1=tom_match1_1_childList_begin1; } } } } } } } } } } } } } }

    return res;
  }
 
   /**
   * Initialize the option manager based on information extracted
   * from the XML conf file converted in TNode
   * 
   * @param node the node containing the XML file
   * @return  an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  private int createOptionManager(TNode node) {
     if(node instanceof  tom.library.adt.tnode.types.TNode) { { tom.library.adt.tnode.types.TNode tom_match2_1=(( tom.library.adt.tnode.types.TNode)node); if (tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { String  tom_match2_1_name=tom_get_slot_ElementNode_name(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_attrList=tom_get_slot_ElementNode_attrList(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList=tom_get_slot_ElementNode_childList(tom_match2_1); if (tom_terms_equal_String("platform", tom_match2_1_name) ||  false ) { if (tom_is_fun_sym_concTNode(tom_match2_1_attrList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_attrList_list1=tom_match2_1_attrList; if (tom_is_fun_sym_concTNode(tom_match2_1_childList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_list1=tom_match2_1_childList; { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_begin1=tom_match2_1_childList_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_end1=tom_match2_1_childList_list1; { while (!(tom_is_empty_concTNode_TNodeList(tom_match2_1_childList_end1))) {tom_match2_1_childList_list1=tom_match2_1_childList_end1; { { tom.library.adt.tnode.types.TNode tom_match2_1_childList_2=tom_get_head_concTNode_TNodeList(tom_match2_1_childList_list1);tom_match2_1_childList_list1=tom_get_tail_concTNode_TNodeList(tom_match2_1_childList_list1); if (tom_is_fun_sym_ElementNode(tom_match2_1_childList_2) ||  false ) { { String  tom_match2_1_childList_2_name=tom_get_slot_ElementNode_name(tom_match2_1_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_attrList=tom_get_slot_ElementNode_attrList(tom_match2_1_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList=tom_get_slot_ElementNode_childList(tom_match2_1_childList_2); if (tom_terms_equal_String("optionmanager", tom_match2_1_childList_2_name) ||  false ) { if (tom_is_fun_sym_concTNode(tom_match2_1_childList_2_attrList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_attrList_list1=tom_match2_1_childList_2_attrList; { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_attrList_begin1=tom_match2_1_childList_2_attrList_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_attrList_end1=tom_match2_1_childList_2_attrList_list1; { while (!(tom_is_empty_concTNode_TNodeList(tom_match2_1_childList_2_attrList_end1))) {tom_match2_1_childList_2_attrList_list1=tom_match2_1_childList_2_attrList_end1; { { tom.library.adt.tnode.types.TNode tom_match2_1_childList_2_attrList_2=tom_get_head_concTNode_TNodeList(tom_match2_1_childList_2_attrList_list1);tom_match2_1_childList_2_attrList_list1=tom_get_tail_concTNode_TNodeList(tom_match2_1_childList_2_attrList_list1); if (tom_is_fun_sym_AttributeNode(tom_match2_1_childList_2_attrList_2) ||  false ) { { String  tom_match2_1_childList_2_attrList_2_name=tom_get_slot_AttributeNode_name(tom_match2_1_childList_2_attrList_2); { String  tom_match2_1_childList_2_attrList_2_specified=tom_get_slot_AttributeNode_specified(tom_match2_1_childList_2_attrList_2); { String  tom_match2_1_childList_2_attrList_2_value=tom_get_slot_AttributeNode_value(tom_match2_1_childList_2_attrList_2); if (tom_terms_equal_String("class", tom_match2_1_childList_2_attrList_2_name) ||  false ) { { String  tom_omclass=tom_match2_1_childList_2_attrList_2_value; if (tom_is_fun_sym_concTNode(tom_match2_1_childList_2_childList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList_list1=tom_match2_1_childList_2_childList; { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList_begin1=tom_match2_1_childList_2_childList_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList_end1=tom_match2_1_childList_2_childList_list1; { while (!(tom_is_empty_concTNode_TNodeList(tom_match2_1_childList_2_childList_end1))) {tom_match2_1_childList_2_childList_list1=tom_match2_1_childList_2_childList_end1; { { tom.library.adt.tnode.types.TNode tom_match2_1_childList_2_childList_2=tom_get_head_concTNode_TNodeList(tom_match2_1_childList_2_childList_list1);tom_match2_1_childList_2_childList_list1=tom_get_tail_concTNode_TNodeList(tom_match2_1_childList_2_childList_list1); if (tom_is_fun_sym_ElementNode(tom_match2_1_childList_2_childList_2) ||  false ) { { tom.library.adt.tnode.types.TNode tom_opt=tom_match2_1_childList_2_childList_2; { String  tom_match2_1_childList_2_childList_2_name=tom_get_slot_ElementNode_name(tom_match2_1_childList_2_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList_2_attrList=tom_get_slot_ElementNode_attrList(tom_match2_1_childList_2_childList_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList_2_childList=tom_get_slot_ElementNode_childList(tom_match2_1_childList_2_childList_2); if (tom_terms_equal_String("options", tom_match2_1_childList_2_childList_2_name) ||  false ) { if (tom_is_fun_sym_concTNode(tom_match2_1_childList_2_childList_2_attrList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList_2_attrList_list1=tom_match2_1_childList_2_childList_2_attrList; if (tom_is_fun_sym_concTNode(tom_match2_1_childList_2_childList_2_childList) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_childList_2_childList_2_childList_list1=tom_match2_1_childList_2_childList_2_childList; if ( true ) {

        try {
          Object omInstance = Class.forName(tom_omclass).newInstance();
          if(omInstance instanceof OptionManager) {
            optionManager = (OptionManager)omInstance;
          } else {
            getLogger().log(Level.SEVERE, PluginPlatformMessage.classNotOptionManager.getMessage(), tom_omclass);
            return 1;
          }
        } catch(ClassNotFoundException cnfe) {
          getLogger().log(Level.SEVERE, PluginPlatformMessage.classNotFound.getMessage(), tom_omclass);
          optionManager = null;
          return 1;
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println(e.getMessage());
          getLogger().log(Level.SEVERE, PluginPlatformMessage.instantiationError.getMessage(), tom_omclass);
          optionManager = null;
          return 1;
        }
        PlatformOptionList globalOptions = OptionParser.xmlNodeToOptionList(tom_opt);
        optionManager.setGlobalOptionList(globalOptions);
        return 0;
       } } } } } } } } } } } }tom_match2_1_childList_2_childList_end1=tom_get_tail_concTNode_TNodeList(tom_match2_1_childList_2_childList_end1); } }tom_match2_1_childList_2_childList_list1=tom_match2_1_childList_2_childList_begin1; } } } } } } } } } } } }tom_match2_1_childList_2_attrList_end1=tom_get_tail_concTNode_TNodeList(tom_match2_1_childList_2_attrList_end1); } }tom_match2_1_childList_2_attrList_list1=tom_match2_1_childList_2_attrList_begin1; } } } } } } } } } } }tom_match2_1_childList_end1=tom_get_tail_concTNode_TNodeList(tom_match2_1_childList_end1); } }tom_match2_1_childList_list1=tom_match2_1_childList_begin1; } } } } } } } } } } } } } }

    return 1;
  }

  /** logger accessor in case of logging needs*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }

}
