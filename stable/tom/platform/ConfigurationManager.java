/* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.platform;

import java.util.*;
import java.util.logging.*;


import aterm.*;
import aterm.pure.*;

import tom.library.adt.tnode.*;
import tom.library.adt.tnode.types.*;
import tom.library.xml.*;
import tom.platform.adt.platformoption.*;
import tom.platform.adt.platformoption.types.*;

/**
 * This class is a wrapper for the platform XML configuration files.
 * It extract the plugins information and create an ordered list of
 * of instances. It extract the Option Management information and based
 * on it create and initialize the corresponding OptionManager.
 * The instantiation of a Configuration is not sfficient since it need to
 * be initialized with an execution commandLine.
 *
 */
public class ConfigurationManager {
  
  /** Used to analyse xml configuration file*/
  /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_TNode( tom.library.adt.tnode.types.TNode t) { return null; }public boolean tom_cmp_fun_sym_TNode(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TNode( tom.library.adt.tnode.types.TNode t,  int  n) { return null; }public boolean tom_terms_equal_TNode(Object t1, Object t2) { return t1.equals(t2); }public void tom_check_stamp_TNode( tom.library.adt.tnode.types.TNode t) { if(t.getAnnotation(getTNodeFactory().getPureFactory().makeList()) == getTNodeFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.library.adt.tnode.types.TNode tom_set_stamp_TNode( tom.library.adt.tnode.types.TNode t) { return (tom.library.adt.tnode.types.TNode)t.setAnnotation(getTNodeFactory().getPureFactory().makeList(),getTNodeFactory().getPureFactory().makeList()); }public  tom.library.adt.tnode.types.TNode tom_get_implementation_TNode( tom.library.adt.tnode.types.TNode t) { return t; }public boolean tom_is_fun_sym_CommentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCommentNode(); }public  tom.library.adt.tnode.types.TNode tom_make_CommentNode( String  t0) { return  getTNodeFactory().makeTNode_CommentNode(t0); }public  String  tom_get_slot_CommentNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_ProcessingInstructionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isProcessingInstructionNode(); }public  tom.library.adt.tnode.types.TNode tom_make_ProcessingInstructionNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_ProcessingInstructionNode(t0, t1); }public  String  tom_get_slot_ProcessingInstructionNode_target( tom.library.adt.tnode.types.TNode t) { return  t.getTarget(); }public  String  tom_get_slot_ProcessingInstructionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_TextNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isTextNode(); }public  tom.library.adt.tnode.types.TNode tom_make_TextNode( String  t0) { return  getTNodeFactory().makeTNode_TextNode(t0); }public  String  tom_get_slot_TextNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_CDATASectionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCDATASectionNode(); }public  tom.library.adt.tnode.types.TNode tom_make_CDATASectionNode( String  t0) { return  getTNodeFactory().makeTNode_CDATASectionNode(t0); }public  String  tom_get_slot_CDATASectionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_DocumentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentNode(); }public  tom.library.adt.tnode.types.TNode tom_make_DocumentNode( tom.library.adt.tnode.types.TNode t0,  tom.library.adt.tnode.types.TNode t1) { return  getTNodeFactory().makeTNode_DocumentNode(t0, t1); }public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docType( tom.library.adt.tnode.types.TNode t) { return  t.getDocType(); }public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docElem( tom.library.adt.tnode.types.TNode t) { return  t.getDocElem(); }public boolean tom_is_fun_sym_ElementNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isElementNode(); }public  tom.library.adt.tnode.types.TNode tom_make_ElementNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1,  tom.library.adt.tnode.types.TNodeList t2) { return  getTNodeFactory().makeTNode_ElementNode(t0, t1, t2); }public  String  tom_get_slot_ElementNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_attrList( tom.library.adt.tnode.types.TNode t) { return  t.getAttrList(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_AttributeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isAttributeNode(); }public  tom.library.adt.tnode.types.TNode tom_make_AttributeNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_AttributeNode(t0, t1, t2); }public  String  tom_get_slot_AttributeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_AttributeNode_specified( tom.library.adt.tnode.types.TNode t) { return  t.getSpecified(); }public  String  tom_get_slot_AttributeNode_value( tom.library.adt.tnode.types.TNode t) { return  t.getValue(); }public boolean tom_is_fun_sym_DocumentTypeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentTypeNode(); }public  tom.library.adt.tnode.types.TNode tom_make_DocumentTypeNode( String  t0,  String  t1,  String  t2,  String  t3,  tom.library.adt.tnode.types.TNodeList t4,  tom.library.adt.tnode.types.TNodeList t5) { return  getTNodeFactory().makeTNode_DocumentTypeNode(t0, t1, t2, t3, t4, t5); }public  String  tom_get_slot_DocumentTypeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_DocumentTypeNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_DocumentTypeNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public  String  tom_get_slot_DocumentTypeNode_internalSubset( tom.library.adt.tnode.types.TNode t) { return  t.getInternalSubset(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_entities( tom.library.adt.tnode.types.TNode t) { return  t.getEntities(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_notations( tom.library.adt.tnode.types.TNode t) { return  t.getNotations(); }public boolean tom_is_fun_sym_EntityReferenceNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityReferenceNode(); }public  tom.library.adt.tnode.types.TNode tom_make_EntityReferenceNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1) { return  getTNodeFactory().makeTNode_EntityReferenceNode(t0, t1); }public  String  tom_get_slot_EntityReferenceNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_EntityReferenceNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_EntityNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityNode(); }public  tom.library.adt.tnode.types.TNode tom_make_EntityNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_EntityNode(t0, t1, t2); }public  String  tom_get_slot_EntityNode_notationName( tom.library.adt.tnode.types.TNode t) { return  t.getNotationName(); }public  String  tom_get_slot_EntityNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_EntityNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public boolean tom_is_fun_sym_NotationNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isNotationNode(); }public  tom.library.adt.tnode.types.TNode tom_make_NotationNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_NotationNode(t0, t1); }public  String  tom_get_slot_NotationNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_NotationNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }public Object tom_get_fun_sym_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return null; }public boolean tom_cmp_fun_sym_TNodeList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TNodeList(Object t1, Object t2) { return t1.equals(t2); }public  tom.library.adt.tnode.types.TNode tom_get_head_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getHead(); }public  tom.library.adt.tnode.types.TNodeList tom_get_tail_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getTail(); }public boolean tom_is_empty_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.isEmpty(); }public void tom_check_stamp_TNodeList( tom.library.adt.tnode.types.TNodeList t) { if(t.getAnnotation(getTNodeFactory().getPureFactory().makeList()) == getTNodeFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.library.adt.tnode.types.TNodeList tom_set_stamp_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return (tom.library.adt.tnode.types.TNodeList)t.setAnnotation(getTNodeFactory().getPureFactory().makeList(),getTNodeFactory().getPureFactory().makeList()); }public  tom.library.adt.tnode.types.TNodeList tom_get_implementation_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return t; }public boolean tom_is_fun_sym_concTNode( tom.library.adt.tnode.types.TNodeList t) { return (t!= null) && t.isSortTNodeList(); }public  tom.library.adt.tnode.types.TNodeList tom_empty_list_concTNode() { return getTNodeFactory().makeTNodeList(); }public  tom.library.adt.tnode.types.TNodeList tom_cons_list_concTNode( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  tom.library.adt.tnode.types.TNodeList tom_append_list_concTNode( tom.library.adt.tnode.types.TNodeList l1,  tom.library.adt.tnode.types.TNodeList l2) {    if(tom_is_empty_TNodeList(l1)) {     return l2;    } else if(tom_is_empty_TNodeList(l2)) {     return l1;    } else if(tom_is_empty_TNodeList(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1))) {     return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),l2);    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),tom_append_list_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1),l2));    }   }  public  tom.library.adt.tnode.types.TNodeList tom_get_slice_concTNode( tom.library.adt.tnode.types.TNodeList begin,  tom.library.adt.tnode.types.TNodeList end) {    if(tom_terms_equal_TNodeList(begin,end)) {      return ( tom.library.adt.tnode.types.TNodeList)tom_empty_list_concTNode();    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(begin),( tom.library.adt.tnode.types.TNodeList)tom_get_slice_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isEmpty(); }public  tom.library.adt.tnode.types.TNodeList tom_make_emptyTNodeList() { return getTNodeFactory().makeTNodeList(); }public boolean tom_is_fun_sym_manyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isMany(); }public  tom.library.adt.tnode.types.TNodeList tom_make_manyTNodeList( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  tom.library.adt.tnode.types.TNode tom_get_slot_manyTNodeList_head( tom.library.adt.tnode.types.TNodeList t) { return  t.getHead(); }public  tom.library.adt.tnode.types.TNodeList tom_get_slot_manyTNodeList_tail( tom.library.adt.tnode.types.TNodeList t) { return  t.getTail(); } 
  
  /**
   * Accessor method necessary when including adt/TNode.tom 
   * @return a TNodeFactory
   */
  private TNodeFactory getTNodeFactory() {
    return TNodeFactory.getInstance(SingletonFactory.getInstance());
  }

  /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file */public Object tom_get_fun_sym_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return null; }public boolean tom_cmp_fun_sym_PlatformOption(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t,  int  n) { return null; }public boolean tom_terms_equal_PlatformOption(Object t1, Object t2) { return t1.equals(t2); }public void tom_check_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformOption tom_set_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return (tom.platform.adt.platformoption.types.PlatformOption)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformOption tom_get_implementation_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return t; }public boolean tom_is_fun_sym_PluginOption( tom.platform.adt.platformoption.types.PlatformOption t) { return  (t!= null) && t.isPluginOption(); }public  tom.platform.adt.platformoption.types.PlatformOption tom_make_PluginOption( String  t0,  String  t1,  String  t2,  tom.platform.adt.platformoption.types.PlatformValue t3,  String  t4) { return  getPlatformOptionFactory().makePlatformOption_PluginOption(t0, t1, t2, t3, t4); }public  String  tom_get_slot_PluginOption_name( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getName(); }public  String  tom_get_slot_PluginOption_altName( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getAltName(); }public  String  tom_get_slot_PluginOption_description( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getDescription(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_get_slot_PluginOption_value( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getValue(); }public  String  tom_get_slot_PluginOption_attrName( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getAttrName(); }public Object tom_get_fun_sym_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return null; }public boolean tom_cmp_fun_sym_PlatformValue(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t,  int  n) { return null; }public boolean tom_terms_equal_PlatformValue(Object t1, Object t2) { return t1.equals(t2); }public void tom_check_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformValue tom_set_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return (tom.platform.adt.platformoption.types.PlatformValue)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformValue tom_get_implementation_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return t; }public boolean tom_is_fun_sym_BooleanValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isBooleanValue(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_make_BooleanValue( tom.platform.adt.platformoption.types.PlatformBoolean t0) { return  getPlatformOptionFactory().makePlatformValue_BooleanValue(t0); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_slot_BooleanValue_booleanValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getBooleanValue(); }public boolean tom_is_fun_sym_StringValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isStringValue(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_make_StringValue( String  t0) { return  getPlatformOptionFactory().makePlatformValue_StringValue(t0); }public  String  tom_get_slot_StringValue_stringValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getStringValue(); }public boolean tom_is_fun_sym_IntegerValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isIntegerValue(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_make_IntegerValue( int  t0) { return  getPlatformOptionFactory().makePlatformValue_IntegerValue(t0); }public  int  tom_get_slot_IntegerValue_integerValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getIntegerValue(); }public Object tom_get_fun_sym_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return null; }public boolean tom_cmp_fun_sym_PlatformBoolean(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t,  int  n) { return null; }public boolean tom_terms_equal_PlatformBoolean(Object t1, Object t2) { return t1.equals(t2); }public void tom_check_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_set_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return (tom.platform.adt.platformoption.types.PlatformBoolean)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_implementation_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return t; }public boolean tom_is_fun_sym_True( tom.platform.adt.platformoption.types.PlatformBoolean t) { return  (t!= null) && t.isTrue(); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_True() { return  getPlatformOptionFactory().makePlatformBoolean_True(); }public boolean tom_is_fun_sym_False( tom.platform.adt.platformoption.types.PlatformBoolean t) { return  (t!= null) && t.isFalse(); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_False() { return  getPlatformOptionFactory().makePlatformBoolean_False(); }public Object tom_get_fun_sym_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return null; }public boolean tom_cmp_fun_sym_PlatformOptionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_PlatformOptionList(Object t1, Object t2) { return t1.equals(t2); }public  tom.platform.adt.platformoption.types.PlatformOption tom_get_head_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.getHead(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_tail_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.getTail(); }public boolean tom_is_empty_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.isEmpty(); }public void tom_check_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_set_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return (tom.platform.adt.platformoption.types.PlatformOptionList)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_implementation_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return t; }public boolean tom_is_fun_sym_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList t) { return (t!= null) && t.isSortPlatformOptionList(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_empty_list_concPlatformOption() { return getPlatformOptionFactory().makePlatformOptionList(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_cons_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return getPlatformOptionFactory().makePlatformOptionList(e,l); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_append_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList l1,  tom.platform.adt.platformoption.types.PlatformOptionList l2) {    if(tom_is_empty_PlatformOptionList(l1)) {     return l2;    } else if(tom_is_empty_PlatformOptionList(l2)) {     return l1;    } else if(tom_is_empty_PlatformOptionList(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(l1))) {     return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(l1),l2);    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(l1),tom_append_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(l1),l2));    }   }  public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slice_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList begin,  tom.platform.adt.platformoption.types.PlatformOptionList end) {    if(tom_terms_equal_PlatformOptionList(begin,end)) {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_empty_list_concPlatformOption();    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(begin),( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_slice_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  (t!= null) && t.isEmpty(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_emptyPlatformOptionList() { return getPlatformOptionFactory().makePlatformOptionList(); }public boolean tom_is_fun_sym_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  (t!= null) && t.isMany(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return getPlatformOptionFactory().makePlatformOptionList(e,l); }public  tom.platform.adt.platformoption.types.PlatformOption tom_get_slot_manyPlatformOptionList_head( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  t.getHead(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slot_manyPlatformOptionList_tail( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  t.getTail(); } 
  /**
   * Accessor method necessary to include adt/PlatformOption.tom
   * @return a PlatformOptionFactory
   */
  private PlatformOptionFactory getPlatformOptionFactory() {
    return PlatformOptionFactory.getInstance(SingletonFactory.getInstance());
  }
  
  /** configuration file name */
  private String xmlConfigurationFileName;

  /** The plugins instance list*/
  private List pluginsList;

  /** The OptionManager */
  private OptionManager optionManager;
  
  /**
   * Basic Constructor
   * @return a configurationManager that needs to be initialized
   */
  public ConfigurationManager(String xmlConfigurationFileName) {
    this.xmlConfigurationFileName = xmlConfigurationFileName;
    this.pluginsList = new ArrayList();
  }
  
  /**
   * initialize analyse the XML file and extract plugins and option management
   *
   * @return  an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  public int initialize(String[] commandLine) {
    XmlTools xtools = new XmlTools();
    TNode configurationNode = (TNode)xtools.convertXMLToATerm(xmlConfigurationFileName);
    if(configurationNode == null) {
      getLogger().log(Level.SEVERE, "ConfigFileNotXML", xmlConfigurationFileName);
      return 1;
    }
    if(createPlugins(configurationNode.getDocElem())==1) {
      return 1;
    }
    if(createOptionManager(configurationNode.getDocElem()) == 1) {
      return 1;
    }
    return optionManager.initialize(this, commandLine);
  }

  /** Accessor method */
  public List getPluginsList() {
    return pluginsList;
  }

  /** Accessor method */
  public OptionManager  getOptionManager() {
    return optionManager;
  }
  
  /** 
   * Initialize the plugins list based on information extracted
   * from the XML conf file converted in TNode
   *
   * @return  an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  private int createPlugins(TNode configurationNode) {
    List pluginsClassList = extractClassPaths(configurationNode);
    // if empty list this means there is a problem somewhere
    if(pluginsClassList.isEmpty()) {
      getLogger().log(Level.SEVERE, "NoPluginFound", xmlConfigurationFileName);
      pluginsList = null;
      return 1;
    }
    // creates an instance of each plugin
    Iterator classPathIt = pluginsClassList.iterator();
    while(classPathIt.hasNext()) {
      String pluginClass = (String)classPathIt.next();
      try { 
        Object pluginInstance = Class.forName(pluginClass).newInstance();
        if(pluginInstance instanceof Plugin) {
          pluginsList.add(pluginInstance);
        } else {
          getLogger().log(Level.SEVERE, "ClassNotAPlugin", pluginClass);
          pluginsList = null;
          return 1;
        }
      } catch(ClassNotFoundException cnfe) {
        getLogger().log(Level.WARNING, "ClassNotFound", pluginClass);
        return 1;
      } catch(Exception e) {
        //e.printStackTrace();
        getLogger().log(Level.SEVERE, "InstantiationError", pluginClass);
        pluginsList = null;
        return 1;
      }
    }
    return 0;
  }
  
  /**
   * Extracts the plugins' class name from the XML configuration file.
   * 
   * @param node the node containing the XML document
   * @return the List of plugins class path
   */
  private List extractClassPaths(TNode node) {
    List res = new ArrayList();
     { tom.library.adt.tnode.types.TNode tom_match1_1=(( tom.library.adt.tnode.types.TNode)node); if(tom_is_fun_sym_ElementNode(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_ElementNode_name(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_2=tom_get_slot_ElementNode_attrList(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3=tom_get_slot_ElementNode_childList(tom_match1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_1) , "platform") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_2_list1=tom_match1_1_2; if(tom_is_fun_sym_concTNode(tom_match1_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_list1=tom_match1_1_3; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_begin1=tom_match1_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_end1=tom_match1_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match1_1_3_end1))) {tom_match1_1_3_list1=tom_match1_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match1_1_3_2=tom_get_head_TNodeList(tom_match1_1_3_list1);tom_match1_1_3_list1=tom_get_tail_TNodeList(tom_match1_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match1_1_3_2) ||  false ) { { String  tom_match1_1_3_2_1=tom_get_slot_ElementNode_name(tom_match1_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match1_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match1_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_3_2_1) , "plugins") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_2_list1=tom_match1_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match1_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_list1=tom_match1_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_begin1=tom_match1_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_end1=tom_match1_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match1_1_3_2_3_end1))) {tom_match1_1_3_2_3_list1=tom_match1_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match1_1_3_2_3_2=tom_get_head_TNodeList(tom_match1_1_3_2_3_list1);tom_match1_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match1_1_3_2_3_list1); if(tom_is_fun_sym_ElementNode(tom_match1_1_3_2_3_2) ||  false ) { { String  tom_match1_1_3_2_3_2_1=tom_get_slot_ElementNode_name(tom_match1_1_3_2_3_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_2_2=tom_get_slot_ElementNode_attrList(tom_match1_1_3_2_3_2); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_2_3=tom_get_slot_ElementNode_childList(tom_match1_1_3_2_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_3_2_3_2_1) , "plugin") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_3_2_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_2_2_list1=tom_match1_1_3_2_3_2_2; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_2_2_begin1=tom_match1_1_3_2_3_2_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_2_2_end1=tom_match1_1_3_2_3_2_2_list1; while (!(tom_is_empty_TNodeList(tom_match1_1_3_2_3_2_2_end1))) {tom_match1_1_3_2_3_2_2_list1=tom_match1_1_3_2_3_2_2_end1;{ { tom.library.adt.tnode.types.TNode tom_match1_1_3_2_3_2_2_2=tom_get_head_TNodeList(tom_match1_1_3_2_3_2_2_list1);tom_match1_1_3_2_3_2_2_list1=tom_get_tail_TNodeList(tom_match1_1_3_2_3_2_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match1_1_3_2_3_2_2_2) ||  false ) { { String  tom_match1_1_3_2_3_2_2_2_1=tom_get_slot_AttributeNode_name(tom_match1_1_3_2_3_2_2_2); { String  tom_match1_1_3_2_3_2_2_2_3=tom_get_slot_AttributeNode_value(tom_match1_1_3_2_3_2_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_3_2_3_2_2_2_1) , "class") ||  false ) { { String  cp=tom_match1_1_3_2_3_2_2_2_3; if(tom_is_fun_sym_concTNode(tom_match1_1_3_2_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_2_3_2_3_list1=tom_match1_1_3_2_3_2_3; if(tom_is_empty_TNodeList(tom_match1_1_3_2_3_2_3_list1)) {

         res.add(cp);
         getLogger().log(Level.FINER, "ClassPathRead", cp);
        }} }} }}} }}tom_match1_1_3_2_3_2_2_end1=tom_get_tail_TNodeList(tom_match1_1_3_2_3_2_2_end1);} }}}} } }}}} }}tom_match1_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match1_1_3_2_3_end1);} }}}} }} } }}}} }}tom_match1_1_3_end1=tom_get_tail_TNodeList(tom_match1_1_3_end1);} }}}} }} } }}}} }}

    return res;
  }
 
   /**
   * Initialize the option manager based on information extracted
   * from the XML conf file converted in TNode
   * 
   * @param node the node containing the XML file
   * @return  an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  private int createOptionManager(TNode node) {
     { tom.library.adt.tnode.types.TNode tom_match2_1=(( tom.library.adt.tnode.types.TNode)node); if(tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_ElementNode_name(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_2=tom_get_slot_ElementNode_attrList(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3=tom_get_slot_ElementNode_childList(tom_match2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_1) , "platform") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match2_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_list1=tom_match2_1_2; if(tom_is_fun_sym_concTNode(tom_match2_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_list1=tom_match2_1_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_begin1=tom_match2_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_end1=tom_match2_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_3_end1))) {tom_match2_1_3_list1=tom_match2_1_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match2_1_3_2=tom_get_head_TNodeList(tom_match2_1_3_list1);tom_match2_1_3_list1=tom_get_tail_TNodeList(tom_match2_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match2_1_3_2) ||  false ) { { String  tom_match2_1_3_2_1=tom_get_slot_ElementNode_name(tom_match2_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match2_1_3_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match2_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_3_2_1) , "optionmanager") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match2_1_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_2_list1=tom_match2_1_3_2_2; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_2_begin1=tom_match2_1_3_2_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_2_end1=tom_match2_1_3_2_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_3_2_2_end1))) {tom_match2_1_3_2_2_list1=tom_match2_1_3_2_2_end1;{ { tom.library.adt.tnode.types.TNode tom_match2_1_3_2_2_2=tom_get_head_TNodeList(tom_match2_1_3_2_2_list1);tom_match2_1_3_2_2_list1=tom_get_tail_TNodeList(tom_match2_1_3_2_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_3_2_2_2) ||  false ) { { String  tom_match2_1_3_2_2_2_1=tom_get_slot_AttributeNode_name(tom_match2_1_3_2_2_2); { String  tom_match2_1_3_2_2_2_3=tom_get_slot_AttributeNode_value(tom_match2_1_3_2_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_3_2_2_2_1) , "class") ||  false ) { { String  omclass=tom_match2_1_3_2_2_2_3; if(tom_is_fun_sym_concTNode(tom_match2_1_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3_list1=tom_match2_1_3_2_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3_begin1=tom_match2_1_3_2_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3_end1=tom_match2_1_3_2_3_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_3_2_3_end1))) {tom_match2_1_3_2_3_list1=tom_match2_1_3_2_3_end1;{ { tom.library.adt.tnode.types.TNode tom_match2_1_3_2_3_2=tom_get_head_TNodeList(tom_match2_1_3_2_3_list1);tom_match2_1_3_2_3_list1=tom_get_tail_TNodeList(tom_match2_1_3_2_3_list1); if(tom_is_fun_sym_ElementNode(tom_match2_1_3_2_3_2) ||  false ) { { tom.library.adt.tnode.types.TNode opt=tom_match2_1_3_2_3_2; { String  tom_match2_1_3_2_3_2_1=tom_get_slot_ElementNode_name(tom_match2_1_3_2_3_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3_2_2=tom_get_slot_ElementNode_attrList(tom_match2_1_3_2_3_2); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3_2_3=tom_get_slot_ElementNode_childList(tom_match2_1_3_2_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_3_2_3_2_1) , "options") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match2_1_3_2_3_2_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3_2_2_list1=tom_match2_1_3_2_3_2_2; if(tom_is_fun_sym_concTNode(tom_match2_1_3_2_3_2_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_2_3_2_3_list1=tom_match2_1_3_2_3_2_3;

        try {
          Object omInstance = Class.forName(omclass).newInstance();
          if(omInstance instanceof OptionManager) {
            optionManager = (OptionManager)omInstance;
          } else {
            getLogger().log(Level.SEVERE, "ClassNotOptionManager", omclass);
            return 1;
          }
        } catch(ClassNotFoundException cnfe) {
          getLogger().log(Level.SEVERE, "ClassNotFound", omclass);
          optionManager = null;
          return 1;
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println(e.getMessage());
          getLogger().log(Level.SEVERE, "InstantiationError", omclass);
          optionManager = null;
          return 1;
        }
        PlatformOptionList globalOptions = OptionParser.xmlNodeToOptionList(opt);
        optionManager.setGlobalOptionList(globalOptions);
        return 0;
      } }} } }}}}} }}tom_match2_1_3_2_3_end1=tom_get_tail_TNodeList(tom_match2_1_3_2_3_end1);} }}}} }} }}} }}tom_match2_1_3_2_2_end1=tom_get_tail_TNodeList(tom_match2_1_3_2_2_end1);} }}}} } }}}} }}tom_match2_1_3_end1=tom_get_tail_TNodeList(tom_match2_1_3_end1);} }}}} }} } }}}} }}

    return 1;
  }

  /** logger accessor in case of logging needs*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }

} // class ConfigurationManager
