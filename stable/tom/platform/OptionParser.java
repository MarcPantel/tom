/* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.platform;

import java.io.*;

import aterm.*;
import aterm.pure.*;

import tom.library.adt.tnode.*;
import tom.library.adt.tnode.types.*;
import tom.platform.adt.platformoption.*;
import tom.platform.adt.platformoption.types.*;
import tom.library.xml.*;


/**
 * Helper class to parse OptionOwner options following this DTD
 *
 * <!ELEMENT options (boolean*,integer*,string*)>
 *
 * <!ELEMENT boolean EMPTY>
 * <!ATTLIST boolean
 *   name CDATA #REQUIRED
 *   altName CDATA ""
 *   description CDATA ""
 *   value (true|false) #REQUIRED>
 *
 * <!ELEMENT integer EMPTY>
 * <!ATTLIST integer
 *   name CDATA #REQUIRED
 *   altName CDATA ""
 *   description CDATA ""
 *   value CDATA #REQUIRED
 *   attrName CDATA #REQUIRED>
 *
 * <!ELEMENT string EMPTY>
 * <!ATTLIST string
 *   name CDATA #REQUIRED
 *   altName CDATA ""
 *   description CDATA ""
 *   value CDATA #REQUIRED
 *   attrName CDATA #REQUIRED>
 */
public class OptionParser {
  
  /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static public  char  tom_get_fun_sym_char( char  t) { return  t ; }static public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }static public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }static public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }static public Object tom_get_fun_sym_Character( Character  t) { return  t ; }static public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }static public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }static public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }static public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }static public  Character  tom_make_Char( char  c) { return  new Character(c) ; }static public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } static public  String  tom_get_fun_sym_String( String  t) { return  t ; }static public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }static public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }static public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }static public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }static public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }static public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }static public  String  tom_empty_list_concString() { return  "" ; }static public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }static public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  static public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  static public  int  tom_get_fun_sym_int( int  t) { return  t ; }static public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }static public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }static public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static public  double  tom_get_fun_sym_double( double  t) { return  t ; }static public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }static public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }static public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }static public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }static public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }static public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }static public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }static public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }static public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }static public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }static public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } static public Object tom_get_fun_sym_TNode( tom.library.adt.tnode.types.TNode t) { return null; }static public boolean tom_cmp_fun_sym_TNode(Object s1, Object s2) { return  false; }static public Object tom_get_subterm_TNode( tom.library.adt.tnode.types.TNode t,  int  n) { return null; }static public boolean tom_terms_equal_TNode(Object t1, Object t2) { return t1.equals(t2); }static public void tom_check_stamp_TNode( tom.library.adt.tnode.types.TNode t) { if(t.getAnnotation(getTNodeFactory().getPureFactory().makeList()) == getTNodeFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }static public  tom.library.adt.tnode.types.TNode tom_set_stamp_TNode( tom.library.adt.tnode.types.TNode t) { return (tom.library.adt.tnode.types.TNode)t.setAnnotation(getTNodeFactory().getPureFactory().makeList(),getTNodeFactory().getPureFactory().makeList()); }static public  tom.library.adt.tnode.types.TNode tom_get_implementation_TNode( tom.library.adt.tnode.types.TNode t) { return t; }static public boolean tom_is_fun_sym_CommentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCommentNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_CommentNode( String  t0) { return  getTNodeFactory().makeTNode_CommentNode(t0); }static public  String  tom_get_slot_CommentNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }static public boolean tom_is_fun_sym_ProcessingInstructionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isProcessingInstructionNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_ProcessingInstructionNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_ProcessingInstructionNode(t0, t1); }static public  String  tom_get_slot_ProcessingInstructionNode_target( tom.library.adt.tnode.types.TNode t) { return  t.getTarget(); }static public  String  tom_get_slot_ProcessingInstructionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }static public boolean tom_is_fun_sym_TextNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isTextNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_TextNode( String  t0) { return  getTNodeFactory().makeTNode_TextNode(t0); }static public  String  tom_get_slot_TextNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }static public boolean tom_is_fun_sym_CDATASectionNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isCDATASectionNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_CDATASectionNode( String  t0) { return  getTNodeFactory().makeTNode_CDATASectionNode(t0); }static public  String  tom_get_slot_CDATASectionNode_data( tom.library.adt.tnode.types.TNode t) { return  t.getData(); }static public boolean tom_is_fun_sym_DocumentNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_DocumentNode( tom.library.adt.tnode.types.TNode t0,  tom.library.adt.tnode.types.TNode t1) { return  getTNodeFactory().makeTNode_DocumentNode(t0, t1); }static public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docType( tom.library.adt.tnode.types.TNode t) { return  t.getDocType(); }static public  tom.library.adt.tnode.types.TNode tom_get_slot_DocumentNode_docElem( tom.library.adt.tnode.types.TNode t) { return  t.getDocElem(); }static public boolean tom_is_fun_sym_ElementNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isElementNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_ElementNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1,  tom.library.adt.tnode.types.TNodeList t2) { return  getTNodeFactory().makeTNode_ElementNode(t0, t1, t2); }static public  String  tom_get_slot_ElementNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }static public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_attrList( tom.library.adt.tnode.types.TNode t) { return  t.getAttrList(); }static public  tom.library.adt.tnode.types.TNodeList tom_get_slot_ElementNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }static public boolean tom_is_fun_sym_AttributeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isAttributeNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_AttributeNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_AttributeNode(t0, t1, t2); }static public  String  tom_get_slot_AttributeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }static public  String  tom_get_slot_AttributeNode_specified( tom.library.adt.tnode.types.TNode t) { return  t.getSpecified(); }static public  String  tom_get_slot_AttributeNode_value( tom.library.adt.tnode.types.TNode t) { return  t.getValue(); }static public boolean tom_is_fun_sym_DocumentTypeNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentTypeNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_DocumentTypeNode( String  t0,  String  t1,  String  t2,  String  t3,  tom.library.adt.tnode.types.TNodeList t4,  tom.library.adt.tnode.types.TNodeList t5) { return  getTNodeFactory().makeTNode_DocumentTypeNode(t0, t1, t2, t3, t4, t5); }static public  String  tom_get_slot_DocumentTypeNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }static public  String  tom_get_slot_DocumentTypeNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }static public  String  tom_get_slot_DocumentTypeNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }static public  String  tom_get_slot_DocumentTypeNode_internalSubset( tom.library.adt.tnode.types.TNode t) { return  t.getInternalSubset(); }static public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_entities( tom.library.adt.tnode.types.TNode t) { return  t.getEntities(); }static public  tom.library.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_notations( tom.library.adt.tnode.types.TNode t) { return  t.getNotations(); }static public boolean tom_is_fun_sym_EntityReferenceNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityReferenceNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_EntityReferenceNode( String  t0,  tom.library.adt.tnode.types.TNodeList t1) { return  getTNodeFactory().makeTNode_EntityReferenceNode(t0, t1); }static public  String  tom_get_slot_EntityReferenceNode_name( tom.library.adt.tnode.types.TNode t) { return  t.getName(); }static public  tom.library.adt.tnode.types.TNodeList tom_get_slot_EntityReferenceNode_childList( tom.library.adt.tnode.types.TNode t) { return  t.getChildList(); }static public boolean tom_is_fun_sym_EntityNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_EntityNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_EntityNode(t0, t1, t2); }static public  String  tom_get_slot_EntityNode_notationName( tom.library.adt.tnode.types.TNode t) { return  t.getNotationName(); }static public  String  tom_get_slot_EntityNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }static public  String  tom_get_slot_EntityNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }static public boolean tom_is_fun_sym_NotationNode( tom.library.adt.tnode.types.TNode t) { return  (t!= null) && t.isNotationNode(); }static public  tom.library.adt.tnode.types.TNode tom_make_NotationNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_NotationNode(t0, t1); }static public  String  tom_get_slot_NotationNode_publicId( tom.library.adt.tnode.types.TNode t) { return  t.getPublicId(); }static public  String  tom_get_slot_NotationNode_systemId( tom.library.adt.tnode.types.TNode t) { return  t.getSystemId(); }static public Object tom_get_fun_sym_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return null; }static public boolean tom_cmp_fun_sym_TNodeList(Object s1, Object s2) { return  false; }static public boolean tom_terms_equal_TNodeList(Object t1, Object t2) { return t1.equals(t2); }static public  tom.library.adt.tnode.types.TNode tom_get_head_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getHead(); }static public  tom.library.adt.tnode.types.TNodeList tom_get_tail_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.getTail(); }static public boolean tom_is_empty_TNodeList( tom.library.adt.tnode.types.TNodeList l) { return l.isEmpty(); }static public void tom_check_stamp_TNodeList( tom.library.adt.tnode.types.TNodeList t) { if(t.getAnnotation(getTNodeFactory().getPureFactory().makeList()) == getTNodeFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }static public  tom.library.adt.tnode.types.TNodeList tom_set_stamp_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return (tom.library.adt.tnode.types.TNodeList)t.setAnnotation(getTNodeFactory().getPureFactory().makeList(),getTNodeFactory().getPureFactory().makeList()); }static public  tom.library.adt.tnode.types.TNodeList tom_get_implementation_TNodeList( tom.library.adt.tnode.types.TNodeList t) { return t; }static public boolean tom_is_fun_sym_concTNode( tom.library.adt.tnode.types.TNodeList t) { return (t!= null) && t.isSortTNodeList(); }static public  tom.library.adt.tnode.types.TNodeList tom_empty_list_concTNode() { return getTNodeFactory().makeTNodeList(); }static public  tom.library.adt.tnode.types.TNodeList tom_cons_list_concTNode( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }static public  tom.library.adt.tnode.types.TNodeList tom_append_list_concTNode( tom.library.adt.tnode.types.TNodeList l1,  tom.library.adt.tnode.types.TNodeList l2) {    if(tom_is_empty_TNodeList(l1)) {     return l2;    } else if(tom_is_empty_TNodeList(l2)) {     return l1;    } else if(tom_is_empty_TNodeList(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1))) {     return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),l2);    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),tom_append_list_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1),l2));    }   }  static public  tom.library.adt.tnode.types.TNodeList tom_get_slice_concTNode( tom.library.adt.tnode.types.TNodeList begin,  tom.library.adt.tnode.types.TNodeList end) {    if(tom_terms_equal_TNodeList(begin,end)) {      return ( tom.library.adt.tnode.types.TNodeList)tom_empty_list_concTNode();    } else {      return ( tom.library.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( tom.library.adt.tnode.types.TNode)tom_get_head_TNodeList(begin),( tom.library.adt.tnode.types.TNodeList)tom_get_slice_concTNode(( tom.library.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(begin),end));    }   }  static public boolean tom_is_fun_sym_emptyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isEmpty(); }static public  tom.library.adt.tnode.types.TNodeList tom_make_emptyTNodeList() { return getTNodeFactory().makeTNodeList(); }static public boolean tom_is_fun_sym_manyTNodeList( tom.library.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isMany(); }static public  tom.library.adt.tnode.types.TNodeList tom_make_manyTNodeList( tom.library.adt.tnode.types.TNode e,  tom.library.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }static public  tom.library.adt.tnode.types.TNode tom_get_slot_manyTNodeList_head( tom.library.adt.tnode.types.TNodeList t) { return  t.getHead(); }static public  tom.library.adt.tnode.types.TNodeList tom_get_slot_manyTNodeList_tail( tom.library.adt.tnode.types.TNodeList t) { return  t.getTail(); } 
  
  /**
   * Accessor method necessary when including adt/TNode.tom 
   * @return a TNodeFactory
   */
  private static TNodeFactory getTNodeFactory() {
    return TNodeFactory.getInstance(SingletonFactory.getInstance());
  }
  
  /* Generated by TOM (version 2.1-rc2alpha (src)): Do not edit this file */static public Object tom_get_fun_sym_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return null; }static public boolean tom_cmp_fun_sym_PlatformOption(Object s1, Object s2) { return  false; }static public Object tom_get_subterm_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t,  int  n) { return null; }static public boolean tom_terms_equal_PlatformOption(Object t1, Object t2) { return t1.equals(t2); }static public void tom_check_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }static public  tom.platform.adt.platformoption.types.PlatformOption tom_set_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return (tom.platform.adt.platformoption.types.PlatformOption)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }static public  tom.platform.adt.platformoption.types.PlatformOption tom_get_implementation_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return t; }static public boolean tom_is_fun_sym_PluginOption( tom.platform.adt.platformoption.types.PlatformOption t) { return  (t!= null) && t.isPluginOption(); }static public  tom.platform.adt.platformoption.types.PlatformOption tom_make_PluginOption( String  t0,  String  t1,  String  t2,  tom.platform.adt.platformoption.types.PlatformValue t3,  String  t4) { return  getPlatformOptionFactory().makePlatformOption_PluginOption(t0, t1, t2, t3, t4); }static public  String  tom_get_slot_PluginOption_name( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getName(); }static public  String  tom_get_slot_PluginOption_altName( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getAltName(); }static public  String  tom_get_slot_PluginOption_description( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getDescription(); }static public  tom.platform.adt.platformoption.types.PlatformValue tom_get_slot_PluginOption_value( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getValue(); }static public  String  tom_get_slot_PluginOption_attrName( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getAttrName(); }static public Object tom_get_fun_sym_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return null; }static public boolean tom_cmp_fun_sym_PlatformValue(Object s1, Object s2) { return  false; }static public Object tom_get_subterm_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t,  int  n) { return null; }static public boolean tom_terms_equal_PlatformValue(Object t1, Object t2) { return t1.equals(t2); }static public void tom_check_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }static public  tom.platform.adt.platformoption.types.PlatformValue tom_set_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return (tom.platform.adt.platformoption.types.PlatformValue)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }static public  tom.platform.adt.platformoption.types.PlatformValue tom_get_implementation_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return t; }static public boolean tom_is_fun_sym_BooleanValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isBooleanValue(); }static public  tom.platform.adt.platformoption.types.PlatformValue tom_make_BooleanValue( tom.platform.adt.platformoption.types.PlatformBoolean t0) { return  getPlatformOptionFactory().makePlatformValue_BooleanValue(t0); }static public  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_slot_BooleanValue_booleanValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getBooleanValue(); }static public boolean tom_is_fun_sym_StringValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isStringValue(); }static public  tom.platform.adt.platformoption.types.PlatformValue tom_make_StringValue( String  t0) { return  getPlatformOptionFactory().makePlatformValue_StringValue(t0); }static public  String  tom_get_slot_StringValue_stringValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getStringValue(); }static public boolean tom_is_fun_sym_IntegerValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isIntegerValue(); }static public  tom.platform.adt.platformoption.types.PlatformValue tom_make_IntegerValue( int  t0) { return  getPlatformOptionFactory().makePlatformValue_IntegerValue(t0); }static public  int  tom_get_slot_IntegerValue_integerValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getIntegerValue(); }static public Object tom_get_fun_sym_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return null; }static public boolean tom_cmp_fun_sym_PlatformBoolean(Object s1, Object s2) { return  false; }static public Object tom_get_subterm_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t,  int  n) { return null; }static public boolean tom_terms_equal_PlatformBoolean(Object t1, Object t2) { return t1.equals(t2); }static public void tom_check_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }static public  tom.platform.adt.platformoption.types.PlatformBoolean tom_set_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return (tom.platform.adt.platformoption.types.PlatformBoolean)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }static public  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_implementation_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return t; }static public boolean tom_is_fun_sym_True( tom.platform.adt.platformoption.types.PlatformBoolean t) { return  (t!= null) && t.isTrue(); }static public  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_True() { return  getPlatformOptionFactory().makePlatformBoolean_True(); }static public boolean tom_is_fun_sym_False( tom.platform.adt.platformoption.types.PlatformBoolean t) { return  (t!= null) && t.isFalse(); }static public  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_False() { return  getPlatformOptionFactory().makePlatformBoolean_False(); }static public Object tom_get_fun_sym_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return null; }static public boolean tom_cmp_fun_sym_PlatformOptionList(Object s1, Object s2) { return  false; }static public boolean tom_terms_equal_PlatformOptionList(Object t1, Object t2) { return t1.equals(t2); }static public  tom.platform.adt.platformoption.types.PlatformOption tom_get_head_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.getHead(); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_tail_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.getTail(); }static public boolean tom_is_empty_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.isEmpty(); }static public void tom_check_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_set_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return (tom.platform.adt.platformoption.types.PlatformOptionList)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_implementation_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return t; }static public boolean tom_is_fun_sym_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList t) { return (t!= null) && t.isSortPlatformOptionList(); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_empty_list_concPlatformOption() { return getPlatformOptionFactory().makePlatformOptionList(); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_cons_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return getPlatformOptionFactory().makePlatformOptionList(e,l); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_append_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList l1,  tom.platform.adt.platformoption.types.PlatformOptionList l2) {    if(tom_is_empty_PlatformOptionList(l1)) {     return l2;    } else if(tom_is_empty_PlatformOptionList(l2)) {     return l1;    } else if(tom_is_empty_PlatformOptionList(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(l1))) {     return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(l1),l2);    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(l1),tom_append_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(l1),l2));    }   }  static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slice_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList begin,  tom.platform.adt.platformoption.types.PlatformOptionList end) {    if(tom_terms_equal_PlatformOptionList(begin,end)) {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_empty_list_concPlatformOption();    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(begin),( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_slice_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(begin),end));    }   }  static public boolean tom_is_fun_sym_emptyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  (t!= null) && t.isEmpty(); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_emptyPlatformOptionList() { return getPlatformOptionFactory().makePlatformOptionList(); }static public boolean tom_is_fun_sym_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  (t!= null) && t.isMany(); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return getPlatformOptionFactory().makePlatformOptionList(e,l); }static public  tom.platform.adt.platformoption.types.PlatformOption tom_get_slot_manyPlatformOptionList_head( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  t.getHead(); }static public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slot_manyPlatformOptionList_tail( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  t.getTail(); } 
  
  /**
   * Accessor method necessary to include adt/PlatformOption.tom
   * @return a PlatformOptionFactory
   */
  private static PlatformOptionFactory getPlatformOptionFactory() {
    return PlatformOptionFactory.getInstance(SingletonFactory.getInstance());
  }
  
  /**
   * An XMLTools for doing the stuff
   */
  private static XmlTools xtools = new XmlTools();
  
  /**
   * @return a PlatformOptionList extracted from the a String
   */
  public static PlatformOptionList xmlToOptionList(String xmlString) {
    InputStream stream = new ByteArrayInputStream(xmlString.getBytes());
    TNode node = (TNode)xtools.convertXMLToATerm(stream);
    return xmlNodeToOptionList(node.getDocElem());
  }
  
  /**
   * @return a PlatformOptionList extracted from a TNode
   */
  public static PlatformOptionList xmlNodeToOptionList(TNode optionsNode) {
    PlatformOptionList list = tom_make_emptyPlatformOptionList();
     { tom.library.adt.tnode.types.TNode tom_match1_1=(( tom.library.adt.tnode.types.TNode)optionsNode); if(tom_is_fun_sym_ElementNode(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_ElementNode_name(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_2=tom_get_slot_ElementNode_attrList(tom_match1_1); { tom.library.adt.tnode.types.TNodeList tom_match1_1_3=tom_get_slot_ElementNode_childList(tom_match1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_1) , "options") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_2_list1=tom_match1_1_2; if(tom_is_fun_sym_concTNode(tom_match1_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_list1=tom_match1_1_3; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_begin1=tom_match1_1_3_list1; { tom.library.adt.tnode.types.TNodeList tom_match1_1_3_end1=tom_match1_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match1_1_3_end1))) {tom_match1_1_3_list1=tom_match1_1_3_end1;{ { tom.library.adt.tnode.types.TNode option=tom_get_head_TNodeList(tom_match1_1_3_list1);tom_match1_1_3_list1=tom_get_tail_TNodeList(tom_match1_1_3_list1); { tom.library.adt.tnode.types.TNode tom_match2_1=(( tom.library.adt.tnode.types.TNode)option); if(tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_ElementNode_name(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_2=tom_get_slot_ElementNode_attrList(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3=tom_get_slot_ElementNode_childList(tom_match2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_1) , "boolean") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match2_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_list1=tom_match2_1_2; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin1=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end1=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end1))) {tom_match2_1_2_list1=tom_match2_1_2_end1;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_2=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_2) ||  false ) { { String  tom_match2_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_2); { String  tom_match2_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_2_1) , "altName") ||  false ) { { String  an=tom_match2_1_2_2_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin3=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end3=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end3))) {tom_match2_1_2_list1=tom_match2_1_2_end3;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_4=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_4) ||  false ) { { String  tom_match2_1_2_4_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_4); { String  tom_match2_1_2_4_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_4_1) , "description") ||  false ) { { String  d=tom_match2_1_2_4_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin5=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end5=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end5))) {tom_match2_1_2_list1=tom_match2_1_2_end5;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_6=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_6) ||  false ) { { String  tom_match2_1_2_6_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_6); { String  tom_match2_1_2_6_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_6_1) , "name") ||  false ) { { String  n=tom_match2_1_2_6_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin7=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end7=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end7))) {tom_match2_1_2_list1=tom_match2_1_2_end7;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_8=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_8) ||  false ) { { String  tom_match2_1_2_8_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_8); { String  tom_match2_1_2_8_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_8); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_8_1) , "value") ||  false ) { { String  v=tom_match2_1_2_8_3; if(tom_is_fun_sym_concTNode(tom_match2_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_list1=tom_match2_1_3; if(tom_is_empty_TNodeList(tom_match2_1_3_list1)) {


	
            PlatformBoolean bool = Boolean.valueOf(v).booleanValue()?tom_make_True():tom_make_False();
            list = tom_append_list_concPlatformOption(list,tom_cons_list_concPlatformOption(tom_make_PluginOption(n,an,d,tom_make_BooleanValue(bool),""),tom_empty_list_concPlatformOption())); 
           }} }} }}} }}tom_match2_1_2_end7=tom_get_tail_TNodeList(tom_match2_1_2_end7);} }}}} }}} }}tom_match2_1_2_end5=tom_get_tail_TNodeList(tom_match2_1_2_end5);} }}}} }}} }}tom_match2_1_2_end3=tom_get_tail_TNodeList(tom_match2_1_2_end3);} }}}} }}} }}tom_match2_1_2_end1=tom_get_tail_TNodeList(tom_match2_1_2_end1);} }}}} } }}}} } if(tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_ElementNode_name(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_2=tom_get_slot_ElementNode_attrList(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3=tom_get_slot_ElementNode_childList(tom_match2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_1) , "integer") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match2_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_list1=tom_match2_1_2; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin1=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end1=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end1))) {tom_match2_1_2_list1=tom_match2_1_2_end1;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_2=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_2) ||  false ) { { String  tom_match2_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_2); { String  tom_match2_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_2_1) , "altName") ||  false ) { { String  an=tom_match2_1_2_2_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin3=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end3=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end3))) {tom_match2_1_2_list1=tom_match2_1_2_end3;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_4=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_4) ||  false ) { { String  tom_match2_1_2_4_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_4); { String  tom_match2_1_2_4_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_4_1) , "attrName") ||  false ) { { String  at=tom_match2_1_2_4_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin5=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end5=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end5))) {tom_match2_1_2_list1=tom_match2_1_2_end5;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_6=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_6) ||  false ) { { String  tom_match2_1_2_6_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_6); { String  tom_match2_1_2_6_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_6_1) , "description") ||  false ) { { String  d=tom_match2_1_2_6_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin7=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end7=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end7))) {tom_match2_1_2_list1=tom_match2_1_2_end7;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_8=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_8) ||  false ) { { String  tom_match2_1_2_8_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_8); { String  tom_match2_1_2_8_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_8); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_8_1) , "name") ||  false ) { { String  n=tom_match2_1_2_8_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin9=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end9=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end9))) {tom_match2_1_2_list1=tom_match2_1_2_end9;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_10=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_10) ||  false ) { { String  tom_match2_1_2_10_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_10); { String  tom_match2_1_2_10_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_10); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_10_1) , "value") ||  false ) { { String  v=tom_match2_1_2_10_3; if(tom_is_fun_sym_concTNode(tom_match2_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_list1=tom_match2_1_3; if(tom_is_empty_TNodeList(tom_match2_1_3_list1)) {

            list = tom_append_list_concPlatformOption(list,tom_cons_list_concPlatformOption(tom_make_PluginOption(n,an,d,tom_make_IntegerValue(Integer.parseInt(v)),at),tom_empty_list_concPlatformOption()));
           }} }} }}} }}tom_match2_1_2_end9=tom_get_tail_TNodeList(tom_match2_1_2_end9);} }}}} }}} }}tom_match2_1_2_end7=tom_get_tail_TNodeList(tom_match2_1_2_end7);} }}}} }}} }}tom_match2_1_2_end5=tom_get_tail_TNodeList(tom_match2_1_2_end5);} }}}} }}} }}tom_match2_1_2_end3=tom_get_tail_TNodeList(tom_match2_1_2_end3);} }}}} }}} }}tom_match2_1_2_end1=tom_get_tail_TNodeList(tom_match2_1_2_end1);} }}}} } }}}} } if(tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_ElementNode_name(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_2=tom_get_slot_ElementNode_attrList(tom_match2_1); { tom.library.adt.tnode.types.TNodeList tom_match2_1_3=tom_get_slot_ElementNode_childList(tom_match2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_1) , "string") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match2_1_2) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_list1=tom_match2_1_2; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin1=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end1=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end1))) {tom_match2_1_2_list1=tom_match2_1_2_end1;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_2=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_2) ||  false ) { { String  tom_match2_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_2); { String  tom_match2_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_2_1) , "altName") ||  false ) { { String  an=tom_match2_1_2_2_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin3=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end3=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end3))) {tom_match2_1_2_list1=tom_match2_1_2_end3;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_4=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_4) ||  false ) { { String  tom_match2_1_2_4_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_4); { String  tom_match2_1_2_4_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_4_1) , "attrName") ||  false ) { { String  at=tom_match2_1_2_4_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin5=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end5=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end5))) {tom_match2_1_2_list1=tom_match2_1_2_end5;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_6=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_6) ||  false ) { { String  tom_match2_1_2_6_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_6); { String  tom_match2_1_2_6_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_6_1) , "description") ||  false ) { { String  d=tom_match2_1_2_6_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin7=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end7=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end7))) {tom_match2_1_2_list1=tom_match2_1_2_end7;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_8=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_8) ||  false ) { { String  tom_match2_1_2_8_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_8); { String  tom_match2_1_2_8_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_8); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_8_1) , "name") ||  false ) { { String  n=tom_match2_1_2_8_3; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_begin9=tom_match2_1_2_list1; { tom.library.adt.tnode.types.TNodeList tom_match2_1_2_end9=tom_match2_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match2_1_2_end9))) {tom_match2_1_2_list1=tom_match2_1_2_end9;{ { tom.library.adt.tnode.types.TNode tom_match2_1_2_10=tom_get_head_TNodeList(tom_match2_1_2_list1);tom_match2_1_2_list1=tom_get_tail_TNodeList(tom_match2_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match2_1_2_10) ||  false ) { { String  tom_match2_1_2_10_1=tom_get_slot_AttributeNode_name(tom_match2_1_2_10); { String  tom_match2_1_2_10_3=tom_get_slot_AttributeNode_value(tom_match2_1_2_10); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match2_1_2_10_1) , "value") ||  false ) { { String  v=tom_match2_1_2_10_3; if(tom_is_fun_sym_concTNode(tom_match2_1_3) ||  false ) { { tom.library.adt.tnode.types.TNodeList tom_match2_1_3_list1=tom_match2_1_3; if(tom_is_empty_TNodeList(tom_match2_1_3_list1)) {

            list = tom_append_list_concPlatformOption(list,tom_cons_list_concPlatformOption(tom_make_PluginOption(n,an,d,tom_make_StringValue(v),at),tom_empty_list_concPlatformOption()));
           }} }} }}} }}tom_match2_1_2_end9=tom_get_tail_TNodeList(tom_match2_1_2_end9);} }}}} }}} }}tom_match2_1_2_end7=tom_get_tail_TNodeList(tom_match2_1_2_end7);} }}}} }}} }}tom_match2_1_2_end5=tom_get_tail_TNodeList(tom_match2_1_2_end5);} }}}} }}} }}tom_match2_1_2_end3=tom_get_tail_TNodeList(tom_match2_1_2_end3);} }}}} }}} }}tom_match2_1_2_end1=tom_get_tail_TNodeList(tom_match2_1_2_end1);} }}}} } }}}} }}

      }tom_match1_1_3_end1=tom_get_tail_TNodeList(tom_match1_1_3_end1);} }}}} }} } }}}} }}

    return list;
  }

} // class optionParser
