/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class TypeExpander {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.gom.adt.gom.types.GomModuleList  tom_append_list_concGomModule( tom.gom.adt.gom.types.GomModuleList l1,  tom.gom.adt.gom.types.GomModuleList  l2) {     if( l1.isEmptyconcGomModule() ) {       return l2;     } else if( l2.isEmptyconcGomModule() ) {       return l1;     } else if(  l1.getTailconcGomModule() .isEmptyconcGomModule() ) {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,tom_append_list_concGomModule( l1.getTailconcGomModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GomModuleList  tom_get_slice_concGomModule( tom.gom.adt.gom.types.GomModuleList  begin,  tom.gom.adt.gom.types.GomModuleList  end, tom.gom.adt.gom.types.GomModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( begin.getHeadconcGomModule() ,( tom.gom.adt.gom.types.GomModuleList )tom_get_slice_concGomModule( begin.getTailconcGomModule() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.GrammarList  tom_append_list_concGrammar( tom.gom.adt.gom.types.GrammarList l1,  tom.gom.adt.gom.types.GrammarList  l2) {     if( l1.isEmptyconcGrammar() ) {       return l2;     } else if( l2.isEmptyconcGrammar() ) {       return l1;     } else if(  l1.getTailconcGrammar() .isEmptyconcGrammar() ) {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( l1.getHeadconcGrammar() ,l2) ;     } else {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( l1.getHeadconcGrammar() ,tom_append_list_concGrammar( l1.getTailconcGrammar() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GrammarList  tom_get_slice_concGrammar( tom.gom.adt.gom.types.GrammarList  begin,  tom.gom.adt.gom.types.GrammarList  end, tom.gom.adt.gom.types.GrammarList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( begin.getHeadconcGrammar() ,( tom.gom.adt.gom.types.GrammarList )tom_get_slice_concGrammar( begin.getTailconcGrammar() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SectionList  tom_append_list_concSection( tom.gom.adt.gom.types.SectionList l1,  tom.gom.adt.gom.types.SectionList  l2) {     if( l1.isEmptyconcSection() ) {       return l2;     } else if( l2.isEmptyconcSection() ) {       return l1;     } else if(  l1.getTailconcSection() .isEmptyconcSection() ) {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,tom_append_list_concSection( l1.getTailconcSection() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SectionList  tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList  begin,  tom.gom.adt.gom.types.SectionList  end, tom.gom.adt.gom.types.SectionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( begin.getHeadconcSection() ,( tom.gom.adt.gom.types.SectionList )tom_get_slice_concSection( begin.getTailconcSection() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyconcOperator() ) {       return l2;     } else if( l2.isEmptyconcOperator() ) {       return l1;     } else if(  l1.getTailconcOperator() .isEmptyconcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,tom_append_list_concOperator( l1.getTailconcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( begin.getHeadconcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator( begin.getTailconcOperator() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SortDeclList  tom_append_list_concSortDecl( tom.gom.adt.gom.types.SortDeclList l1,  tom.gom.adt.gom.types.SortDeclList  l2) {     if( l1.isEmptyconcSortDecl() ) {       return l2;     } else if( l2.isEmptyconcSortDecl() ) {       return l1;     } else if(  l1.getTailconcSortDecl() .isEmptyconcSortDecl() ) {       return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make( l1.getHeadconcSortDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make( l1.getHeadconcSortDecl() ,tom_append_list_concSortDecl( l1.getTailconcSortDecl() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortDeclList  tom_get_slice_concSortDecl( tom.gom.adt.gom.types.SortDeclList  begin,  tom.gom.adt.gom.types.SortDeclList  end, tom.gom.adt.gom.types.SortDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make( begin.getHeadconcSortDecl() ,( tom.gom.adt.gom.types.SortDeclList )tom_get_slice_concSortDecl( begin.getTailconcSortDecl() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.GomTypeList  tom_append_list_concGomType( tom.gom.adt.gom.types.GomTypeList l1,  tom.gom.adt.gom.types.GomTypeList  l2) {     if( l1.isEmptyconcGomType() ) {       return l2;     } else if( l2.isEmptyconcGomType() ) {       return l1;     } else if(  l1.getTailconcGomType() .isEmptyconcGomType() ) {       return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make( l1.getHeadconcGomType() ,l2) ;     } else {       return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make( l1.getHeadconcGomType() ,tom_append_list_concGomType( l1.getTailconcGomType() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GomTypeList  tom_get_slice_concGomType( tom.gom.adt.gom.types.GomTypeList  begin,  tom.gom.adt.gom.types.GomTypeList  end, tom.gom.adt.gom.types.GomTypeList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make( begin.getHeadconcGomType() ,( tom.gom.adt.gom.types.GomTypeList )tom_get_slice_concGomType( begin.getTailconcGomType() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ProductionList  tom_append_list_concProduction( tom.gom.adt.gom.types.ProductionList l1,  tom.gom.adt.gom.types.ProductionList  l2) {     if( l1.isEmptyconcProduction() ) {       return l2;     } else if( l2.isEmptyconcProduction() ) {       return l1;     } else if(  l1.getTailconcProduction() .isEmptyconcProduction() ) {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( l1.getHeadconcProduction() ,l2) ;     } else {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( l1.getHeadconcProduction() ,tom_append_list_concProduction( l1.getTailconcProduction() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ProductionList  tom_get_slice_concProduction( tom.gom.adt.gom.types.ProductionList  begin,  tom.gom.adt.gom.types.ProductionList  end, tom.gom.adt.gom.types.ProductionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( begin.getHeadconcProduction() ,( tom.gom.adt.gom.types.ProductionList )tom_get_slice_concProduction( begin.getTailconcProduction() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ImportList  tom_append_list_concImportedModule( tom.gom.adt.gom.types.ImportList l1,  tom.gom.adt.gom.types.ImportList  l2) {     if( l1.isEmptyconcImportedModule() ) {       return l2;     } else if( l2.isEmptyconcImportedModule() ) {       return l1;     } else if(  l1.getTailconcImportedModule() .isEmptyconcImportedModule() ) {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( l1.getHeadconcImportedModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( l1.getHeadconcImportedModule() ,tom_append_list_concImportedModule( l1.getTailconcImportedModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ImportList  tom_get_slice_concImportedModule( tom.gom.adt.gom.types.ImportList  begin,  tom.gom.adt.gom.types.ImportList  end, tom.gom.adt.gom.types.ImportList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( begin.getHeadconcImportedModule() ,( tom.gom.adt.gom.types.ImportList )tom_get_slice_concImportedModule( begin.getTailconcImportedModule() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ModuleDeclList  tom_append_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList l1,  tom.gom.adt.gom.types.ModuleDeclList  l2) {     if( l1.isEmptyconcModuleDecl() ) {       return l2;     } else if( l2.isEmptyconcModuleDecl() ) {       return l1;     } else if(  l1.getTailconcModuleDecl() .isEmptyconcModuleDecl() ) {       return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make( l1.getHeadconcModuleDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make( l1.getHeadconcModuleDecl() ,tom_append_list_concModuleDecl( l1.getTailconcModuleDecl() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleDeclList  tom_get_slice_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  begin,  tom.gom.adt.gom.types.ModuleDeclList  end, tom.gom.adt.gom.types.ModuleDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make( begin.getHeadconcModuleDecl() ,( tom.gom.adt.gom.types.ModuleDeclList )tom_get_slice_concModuleDecl( begin.getTailconcModuleDecl() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.FieldList  tom_append_list_concField( tom.gom.adt.gom.types.FieldList l1,  tom.gom.adt.gom.types.FieldList  l2) {     if( l1.isEmptyconcField() ) {       return l2;     } else if( l2.isEmptyconcField() ) {       return l1;     } else if(  l1.getTailconcField() .isEmptyconcField() ) {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( l1.getHeadconcField() ,l2) ;     } else {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( l1.getHeadconcField() ,tom_append_list_concField( l1.getTailconcField() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.FieldList  tom_get_slice_concField( tom.gom.adt.gom.types.FieldList  begin,  tom.gom.adt.gom.types.FieldList  end, tom.gom.adt.gom.types.FieldList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( begin.getHeadconcField() ,( tom.gom.adt.gom.types.FieldList )tom_get_slice_concField( begin.getTailconcField() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyconcSort() ) {       return l2;     } else if( l2.isEmptyconcSort() ) {       return l1;     } else if(  l1.getTailconcSort() .isEmptyconcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,tom_append_list_concSort( l1.getTailconcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( begin.getHeadconcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort( begin.getTailconcSort() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_concModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyconcModule() ) {       return l2;     } else if( l2.isEmptyconcModule() ) {       return l1;     } else if(  l1.getTailconcModule() .isEmptyconcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,tom_append_list_concModule( l1.getTailconcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_concModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( begin.getHeadconcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_concModule( begin.getTailconcModule() ,end,tail)) ;     }   }    

  private GomStreamManager streamManager;
  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  public TypeExpander(GomStreamManager streamManager) {
    this.streamManager = streamManager;
  }
  /**
    * We try here to get full sort definitions for each constructs
    * Once the structure is correctly build, we can attach the hooks
    */
  public ModuleList expand(GomModuleList moduleList) {

    /* put a map giving all imported modules for each module in the path */
    buildDependencyMap(moduleList);

    /* collect all sort declarations */
    SortDeclList sortDeclList =  tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() ;
    /* The sorts declared in each module */
    Map sortsForModule = new HashMap();
    GomModuleList consum = moduleList;
    while(!consum.isEmptyconcGomModule()) {
      GomModule module = consum.getHeadconcGomModule();
      consum = consum.getTailconcGomModule();

      Collection decls = getSortDeclarations(module);
      Collection implicitdecls = getSortDeclarationInCodomain(module);

      /* Check that there are no implicit sort declarations
       * Also, check that declared sorts have at least an operator
       */
      if(!decls.containsAll(implicitdecls)) {
        // whine about non declared sorts
        Collection undeclaredSorts = new HashSet();
        undeclaredSorts.addAll(implicitdecls);
        undeclaredSorts.removeAll(decls);
        getLogger().log(Level.WARNING, GomMessage.undeclaredSorts.getMessage(),
            new Object[]{showSortList(undeclaredSorts)});
      }
      if(!implicitdecls.containsAll(decls)) {
        // whine about sorts without operators: this is a real error
        Collection emptySorts = new HashSet();
        emptySorts.addAll(decls);
        emptySorts.removeAll(implicitdecls);
        getLogger().log(Level.SEVERE, GomMessage.emptySorts.getMessage(),
            new Object[]{showSortList(emptySorts)});
        return  tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() ;
      }
      Iterator it = implicitdecls.iterator();
      while(it.hasNext()) {
        SortDecl decl = (SortDecl)it.next();
        sortDeclList =  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make(decl,tom_append_list_concSortDecl(sortDeclList, tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() )) ;
      }
      /* Fills sortsForModule */
      it = decls.iterator();
      SortDeclList declaredSorts =  tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() ;
      while(it.hasNext()) {
        SortDecl decl = (SortDecl)it.next();
        declaredSorts =  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make(decl,tom_append_list_concSortDecl(declaredSorts, tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() )) ;
      }
      GomModuleName moduleName = module.getModuleName();
      ModuleDecl mdecl =  tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(moduleName, streamManager.getPackagePath(moduleName.getName())) ;
      sortsForModule.put(mdecl,declaredSorts);
    }

    /* now get all operators for each sort */
    Map operatorsForSort = new HashMap();
    Map hooksForSort = new HashMap();
    consum = moduleList;
    while(!consum.isEmptyconcGomModule()) {
      GomModule module = consum.getHeadconcGomModule();
      consum = consum.getTailconcGomModule();

      // iterate through the productions
      {if ( (module instanceof tom.gom.adt.gom.types.GomModule) ) {{  tom.gom.adt.gom.types.GomModule  tomMatch469NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if ( (tomMatch469NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch469NameNumber_freshVar_0= tomMatch469NameNumberfreshSubject_1.getModuleName() ;{  tom.gom.adt.gom.types.SectionList  tomMatch469NameNumber_freshVar_1= tomMatch469NameNumberfreshSubject_1.getSectionList() ;if ( ((tomMatch469NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection) || (tomMatch469NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection)) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch469NameNumber_freshVar_2=tomMatch469NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SectionList  tomMatch469NameNumber_begin_4=tomMatch469NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SectionList  tomMatch469NameNumber_end_5=tomMatch469NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch469NameNumber_freshVar_3=tomMatch469NameNumber_end_5;if (!( tomMatch469NameNumber_freshVar_3.isEmptyconcSection() )) {if ( ( tomMatch469NameNumber_freshVar_3.getHeadconcSection()  instanceof tom.gom.adt.gom.types.section.Public) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch469NameNumber_freshVar_8=  tomMatch469NameNumber_freshVar_3.getHeadconcSection() .getGrammarList() ;if ( ((tomMatch469NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar) || (tomMatch469NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar)) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch469NameNumber_freshVar_9=tomMatch469NameNumber_freshVar_8;{  tom.gom.adt.gom.types.GrammarList  tomMatch469NameNumber_begin_11=tomMatch469NameNumber_freshVar_9;{  tom.gom.adt.gom.types.GrammarList  tomMatch469NameNumber_end_12=tomMatch469NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch469NameNumber_freshVar_10=tomMatch469NameNumber_end_12;if (!( tomMatch469NameNumber_freshVar_10.isEmptyconcGrammar() )) {if ( ( tomMatch469NameNumber_freshVar_10.getHeadconcGrammar()  instanceof tom.gom.adt.gom.types.grammar.Grammar) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch469NameNumber_freshVar_15=  tomMatch469NameNumber_freshVar_10.getHeadconcGrammar() .getProductionList() ;if ( ((tomMatch469NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction) || (tomMatch469NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch469NameNumber_freshVar_16=tomMatch469NameNumber_freshVar_15;{  tom.gom.adt.gom.types.ProductionList  tomMatch469NameNumber_begin_18=tomMatch469NameNumber_freshVar_16;{  tom.gom.adt.gom.types.ProductionList  tomMatch469NameNumber_end_19=tomMatch469NameNumber_freshVar_16;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch469NameNumber_freshVar_17=tomMatch469NameNumber_end_19;if (!( tomMatch469NameNumber_freshVar_17.isEmptyconcProduction() )) {if ( ( tomMatch469NameNumber_freshVar_17.getHeadconcProduction()  instanceof tom.gom.adt.gom.types.production.Production) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch469NameNumber_freshVar_20= tomMatch469NameNumber_freshVar_17.getTailconcProduction() ;{  tom.gom.adt.gom.types.GrammarList  tomMatch469NameNumber_freshVar_13= tomMatch469NameNumber_freshVar_10.getTailconcGrammar() ;{  tom.gom.adt.gom.types.SectionList  tomMatch469NameNumber_freshVar_6= tomMatch469NameNumber_freshVar_3.getTailconcSection() ;if ( true ) {



          // we may want to pass moduleName to help resolve ambiguities with modules
          getOperatorDecl( tomMatch469NameNumber_freshVar_17.getHeadconcProduction() ,sortDeclList,operatorsForSort);

        }}}}}}}if ( tomMatch469NameNumber_end_19.isEmptyconcProduction() ) {tomMatch469NameNumber_end_19=tomMatch469NameNumber_begin_18;} else {tomMatch469NameNumber_end_19= tomMatch469NameNumber_end_19.getTailconcProduction() ;}}} while(!( tomMatch469NameNumber_end_19.equals(tomMatch469NameNumber_begin_18) ));}}}}}}}}if ( tomMatch469NameNumber_end_12.isEmptyconcGrammar() ) {tomMatch469NameNumber_end_12=tomMatch469NameNumber_begin_11;} else {tomMatch469NameNumber_end_12= tomMatch469NameNumber_end_12.getTailconcGrammar() ;}}} while(!( tomMatch469NameNumber_end_12.equals(tomMatch469NameNumber_begin_11) ));}}}}}}}}if ( tomMatch469NameNumber_end_5.isEmptyconcSection() ) {tomMatch469NameNumber_end_5=tomMatch469NameNumber_begin_4;} else {tomMatch469NameNumber_end_5= tomMatch469NameNumber_end_5.getTailconcSection() ;}}} while(!( tomMatch469NameNumber_end_5.equals(tomMatch469NameNumber_begin_4) ));}}}}}}}}}}

    }

    /*
     * build the module list using the map
     * since we already checked that the declared and used sorts do match, we
     * can use the map alone
     */
    ModuleList resultModuleList =  tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() ;
    Iterator it = sortsForModule.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ModuleDecl mdecl = (ModuleDecl) entry.getKey();
      SortDeclList sdeclList = (SortDeclList) entry.getValue();
      SortList sortList =  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ;
      {if ( (sdeclList instanceof tom.gom.adt.gom.types.SortDeclList) ) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch470NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortDeclList )sdeclList);if ( ((tomMatch470NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl) || (tomMatch470NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl)) ) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch470NameNumber_freshVar_0=tomMatch470NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortDeclList  tomMatch470NameNumber_begin_2=tomMatch470NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortDeclList  tomMatch470NameNumber_end_3=tomMatch470NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortDeclList  tomMatch470NameNumber_freshVar_1=tomMatch470NameNumber_end_3;if (!( tomMatch470NameNumber_freshVar_1.isEmptyconcSortDecl() )) {{  tom.gom.adt.gom.types.SortDecl  tom_sdecl= tomMatch470NameNumber_freshVar_1.getHeadconcSortDecl() ;{  tom.gom.adt.gom.types.SortDeclList  tomMatch470NameNumber_freshVar_4= tomMatch470NameNumber_freshVar_1.getTailconcSortDecl() ;if ( true ) {

          OperatorDeclList opdecl = (OperatorDeclList)
            operatorsForSort.get(tom_sdecl);
          Sort fullSort =  tom.gom.adt.gom.types.sort.Sort.make(tom_sdecl, opdecl) ;
          if(checkSortValidity(fullSort)) {
            sortList =  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(fullSort,tom_append_list_concSort(sortList, tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() )) ;
          }
        }}}}}if ( tomMatch470NameNumber_end_3.isEmptyconcSortDecl() ) {tomMatch470NameNumber_end_3=tomMatch470NameNumber_begin_2;} else {tomMatch470NameNumber_end_3= tomMatch470NameNumber_end_3.getTailconcSortDecl() ;}}} while(!( tomMatch470NameNumber_end_3.equals(tomMatch470NameNumber_begin_2) ));}}}}}}}

      resultModuleList =  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( tom.gom.adt.gom.types.module.Module.make(mdecl, sortList) ,tom_append_list_concModule(resultModuleList, tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() )) 

;
    }
    return resultModuleList;
  }

  /*
   * Get an OperatorDecl from a Production, using the list of sort declarations
   * XXX: There is huge room for efficiency improvement, as we could use a map
   * sortName -> sortDeclList instead of a simple list
   */
  private OperatorDecl getOperatorDecl(Production prod,
      SortDeclList sortDeclList,
      Map operatorsForSort) {

    {if ( (prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch471NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )prod);if ( (tomMatch471NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.production.Production) ) {{  String  tomMatch471NameNumber_freshVar_0= tomMatch471NameNumberfreshSubject_1.getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch471NameNumber_freshVar_1= tomMatch471NameNumberfreshSubject_1.getDomain() ;{  tom.gom.adt.gom.types.GomType  tomMatch471NameNumber_freshVar_2= tomMatch471NameNumberfreshSubject_1.getCodomain() ;{  tom.gom.adt.gom.types.Option  tomMatch471NameNumber_freshVar_3= tomMatch471NameNumberfreshSubject_1.getOption() ;if ( (tomMatch471NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.gomtype.GomType) ) {{  String  tomMatch471NameNumber_freshVar_4= tomMatch471NameNumber_freshVar_2.getName() ;if ( true ) {

        SortDecl codomainSort = declFromTypename(tomMatch471NameNumber_freshVar_4,sortDeclList);
        TypedProduction domainSorts = typedProduction(tomMatch471NameNumber_freshVar_1,sortDeclList);
        OperatorDecl decl =  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make(tomMatch471NameNumber_freshVar_0, codomainSort, domainSorts) ;
        if (operatorsForSort.containsKey(codomainSort)) {
          OperatorDeclList list = (OperatorDeclList) operatorsForSort.get(codomainSort);
          operatorsForSort.put(codomainSort, tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(decl,tom_append_list_concOperator(list, tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() )) );
        } else {
          operatorsForSort.put(codomainSort, tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(decl, tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ) );
        }
        return decl;
      }}}}}}}}}}}

    throw new GomRuntimeException(
        "TypeExpander::getOperatorDecl: wrong Production?");
  }

  private SortDecl declFromTypename(String typename,
                                    SortDeclList sortDeclList) {
    if (environment().isBuiltinSort(typename)) {
      return environment().builtinSort(typename);
    }
    {if ( (sortDeclList instanceof tom.gom.adt.gom.types.SortDeclList) ) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch472NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortDeclList )sortDeclList);if ( ((tomMatch472NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl) || (tomMatch472NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl)) ) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch472NameNumber_freshVar_0=tomMatch472NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortDeclList  tomMatch472NameNumber_begin_2=tomMatch472NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortDeclList  tomMatch472NameNumber_end_3=tomMatch472NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortDeclList  tomMatch472NameNumber_freshVar_1=tomMatch472NameNumber_end_3;if (!( tomMatch472NameNumber_freshVar_1.isEmptyconcSortDecl() )) {if ( ( tomMatch472NameNumber_freshVar_1.getHeadconcSortDecl()  instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch472NameNumber_freshVar_6=  tomMatch472NameNumber_freshVar_1.getHeadconcSortDecl() .getName() ;{  tom.gom.adt.gom.types.SortDeclList  tomMatch472NameNumber_freshVar_4= tomMatch472NameNumber_freshVar_1.getTailconcSortDecl() ;if ( true ) {

        if (typename.equals(tomMatch472NameNumber_freshVar_6)) {
          return  tomMatch472NameNumber_freshVar_1.getHeadconcSortDecl() ;
        }
      }}}}}}if ( tomMatch472NameNumber_end_3.isEmptyconcSortDecl() ) {tomMatch472NameNumber_end_3=tomMatch472NameNumber_begin_2;} else {tomMatch472NameNumber_end_3= tomMatch472NameNumber_end_3.getTailconcSortDecl() ;}}} while(!( tomMatch472NameNumber_end_3.equals(tomMatch472NameNumber_begin_2) ));}}}}}}}

    getLogger().log(Level.SEVERE, GomMessage.unknownSort.getMessage(),
        new Object[]{typename});
    /* If the sort is not known, assume it is a builtin */
    return  tom.gom.adt.gom.types.sortdecl.BuiltinSortDecl.make(typename) ;
  }

  private TypedProduction typedProduction(FieldList domain, SortDeclList sortDeclList) {
    {if ( (domain instanceof tom.gom.adt.gom.types.FieldList) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch473NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.FieldList )domain);if ( ((tomMatch473NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField) || (tomMatch473NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField)) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch473NameNumber_freshVar_0=tomMatch473NameNumberfreshSubject_1;if (!( tomMatch473NameNumber_freshVar_0.isEmptyconcField() )) {if ( ( tomMatch473NameNumber_freshVar_0.getHeadconcField()  instanceof tom.gom.adt.gom.types.field.StarredField) ) {{  tom.gom.adt.gom.types.GomType  tomMatch473NameNumber_freshVar_2=  tomMatch473NameNumber_freshVar_0.getHeadconcField() .getFieldType() ;if ( (tomMatch473NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.gomtype.GomType) ) {{  String  tomMatch473NameNumber_freshVar_3= tomMatch473NameNumber_freshVar_2.getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch473NameNumber_freshVar_1= tomMatch473NameNumber_freshVar_0.getTailconcField() ;if ( tomMatch473NameNumber_freshVar_1.isEmptyconcField() ) {if ( true ) {

        return  tom.gom.adt.gom.types.typedproduction.Variadic.make(declFromTypename(tomMatch473NameNumber_freshVar_3,sortDeclList)) ;
      }}}}}}}}}}}}if ( (domain instanceof tom.gom.adt.gom.types.FieldList) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch473NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.FieldList )domain);if ( ((tomMatch473NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField) || (tomMatch473NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField)) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch473NameNumber_freshVar_4=tomMatch473NameNumberfreshSubject_1;if ( true ) {

        return  tom.gom.adt.gom.types.typedproduction.Slots.make(typedSlotList(tomMatch473NameNumber_freshVar_4,sortDeclList)) ;
      }}}}}}

    // the error message could be more refined
    throw new GomRuntimeException("TypeExpander::typedProduction: illformed Production");
  }

  private SlotList typedSlotList(FieldList fields, SortDeclList sortDeclList) {
    {if ( (fields instanceof tom.gom.adt.gom.types.FieldList) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch474NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.FieldList )fields);if ( ((tomMatch474NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField) || (tomMatch474NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField)) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch474NameNumber_freshVar_0=tomMatch474NameNumberfreshSubject_1;if ( tomMatch474NameNumber_freshVar_0.isEmptyconcField() ) {if ( true ) {

        return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ;
      }}}}}}if ( (fields instanceof tom.gom.adt.gom.types.FieldList) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch474NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.FieldList )fields);if ( ((tomMatch474NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField) || (tomMatch474NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField)) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch474NameNumber_freshVar_1=tomMatch474NameNumberfreshSubject_1;if (!( tomMatch474NameNumber_freshVar_1.isEmptyconcField() )) {if ( ( tomMatch474NameNumber_freshVar_1.getHeadconcField()  instanceof tom.gom.adt.gom.types.field.NamedField) ) {{  String  tomMatch474NameNumber_freshVar_4=  tomMatch474NameNumber_freshVar_1.getHeadconcField() .getName() ;{  tom.gom.adt.gom.types.GomType  tomMatch474NameNumber_freshVar_5=  tomMatch474NameNumber_freshVar_1.getHeadconcField() .getFieldType() ;if ( (tomMatch474NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.gomtype.GomType) ) {{  String  tomMatch474NameNumber_freshVar_6= tomMatch474NameNumber_freshVar_5.getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch474NameNumber_freshVar_2= tomMatch474NameNumber_freshVar_1.getTailconcField() ;if ( true ) {

        SlotList newtail = typedSlotList(tomMatch474NameNumber_freshVar_2,sortDeclList);
        return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make(tomMatch474NameNumber_freshVar_4, declFromTypename(tomMatch474NameNumber_freshVar_6,sortDeclList)) ,tom_append_list_concSlot(newtail, tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() )) ;
      }}}}}}}}}}}}}

    getLogger().log(Level.SEVERE, GomMessage.malformedProduction.getMessage(),
        new Object[]{fields.toString()});
    return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ;
  }

  /*
   * Get all sort declarations in a module
   */
  private Collection getSortDeclarations(GomModule module) {
    Collection result = new HashSet();
    {if ( (module instanceof tom.gom.adt.gom.types.GomModule) ) {{  tom.gom.adt.gom.types.GomModule  tomMatch475NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if ( (tomMatch475NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch475NameNumber_freshVar_0= tomMatch475NameNumberfreshSubject_1.getModuleName() ;{  tom.gom.adt.gom.types.SectionList  tomMatch475NameNumber_freshVar_1= tomMatch475NameNumberfreshSubject_1.getSectionList() ;{  tom.gom.adt.gom.types.GomModuleName  tom_moduleName=tomMatch475NameNumber_freshVar_0;if ( ((tomMatch475NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection) || (tomMatch475NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection)) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch475NameNumber_freshVar_2=tomMatch475NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SectionList  tomMatch475NameNumber_begin_4=tomMatch475NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SectionList  tomMatch475NameNumber_end_5=tomMatch475NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch475NameNumber_freshVar_3=tomMatch475NameNumber_end_5;if (!( tomMatch475NameNumber_freshVar_3.isEmptyconcSection() )) {if ( ( tomMatch475NameNumber_freshVar_3.getHeadconcSection()  instanceof tom.gom.adt.gom.types.section.Public) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch475NameNumber_freshVar_8=  tomMatch475NameNumber_freshVar_3.getHeadconcSection() .getGrammarList() ;if ( ((tomMatch475NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar) || (tomMatch475NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar)) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch475NameNumber_freshVar_9=tomMatch475NameNumber_freshVar_8;{  tom.gom.adt.gom.types.GrammarList  tomMatch475NameNumber_begin_11=tomMatch475NameNumber_freshVar_9;{  tom.gom.adt.gom.types.GrammarList  tomMatch475NameNumber_end_12=tomMatch475NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch475NameNumber_freshVar_10=tomMatch475NameNumber_end_12;if (!( tomMatch475NameNumber_freshVar_10.isEmptyconcGrammar() )) {if ( ( tomMatch475NameNumber_freshVar_10.getHeadconcGrammar()  instanceof tom.gom.adt.gom.types.grammar.Sorts) ) {{  tom.gom.adt.gom.types.GomTypeList  tomMatch475NameNumber_freshVar_15=  tomMatch475NameNumber_freshVar_10.getHeadconcGrammar() .getTypeList() ;if ( ((tomMatch475NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.gomtypelist.ConsconcGomType) || (tomMatch475NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType)) ) {{  tom.gom.adt.gom.types.GomTypeList  tomMatch475NameNumber_freshVar_16=tomMatch475NameNumber_freshVar_15;{  tom.gom.adt.gom.types.GomTypeList  tomMatch475NameNumber_begin_18=tomMatch475NameNumber_freshVar_16;{  tom.gom.adt.gom.types.GomTypeList  tomMatch475NameNumber_end_19=tomMatch475NameNumber_freshVar_16;do {{{  tom.gom.adt.gom.types.GomTypeList  tomMatch475NameNumber_freshVar_17=tomMatch475NameNumber_end_19;if (!( tomMatch475NameNumber_freshVar_17.isEmptyconcGomType() )) {if ( ( tomMatch475NameNumber_freshVar_17.getHeadconcGomType()  instanceof tom.gom.adt.gom.types.gomtype.GomType) ) {{  String  tomMatch475NameNumber_freshVar_22=  tomMatch475NameNumber_freshVar_17.getHeadconcGomType() .getName() ;{  tom.gom.adt.gom.types.GomTypeList  tomMatch475NameNumber_freshVar_20= tomMatch475NameNumber_freshVar_17.getTailconcGomType() ;{  tom.gom.adt.gom.types.GrammarList  tomMatch475NameNumber_freshVar_13= tomMatch475NameNumber_freshVar_10.getTailconcGrammar() ;{  tom.gom.adt.gom.types.SectionList  tomMatch475NameNumber_freshVar_6= tomMatch475NameNumber_freshVar_3.getTailconcSection() ;if ( true ) {



        result.add( tom.gom.adt.gom.types.sortdecl.SortDecl.make(tomMatch475NameNumber_freshVar_22,  tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(tom_moduleName, streamManager.getPackagePath(tom_moduleName.getName())) ) );
      }}}}}}}}if ( tomMatch475NameNumber_end_19.isEmptyconcGomType() ) {tomMatch475NameNumber_end_19=tomMatch475NameNumber_begin_18;} else {tomMatch475NameNumber_end_19= tomMatch475NameNumber_end_19.getTailconcGomType() ;}}} while(!( tomMatch475NameNumber_end_19.equals(tomMatch475NameNumber_begin_18) ));}}}}}}}}if ( tomMatch475NameNumber_end_12.isEmptyconcGrammar() ) {tomMatch475NameNumber_end_12=tomMatch475NameNumber_begin_11;} else {tomMatch475NameNumber_end_12= tomMatch475NameNumber_end_12.getTailconcGrammar() ;}}} while(!( tomMatch475NameNumber_end_12.equals(tomMatch475NameNumber_begin_11) ));}}}}}}}}if ( tomMatch475NameNumber_end_5.isEmptyconcSection() ) {tomMatch475NameNumber_end_5=tomMatch475NameNumber_begin_4;} else {tomMatch475NameNumber_end_5= tomMatch475NameNumber_end_5.getTailconcSection() ;}}} while(!( tomMatch475NameNumber_end_5.equals(tomMatch475NameNumber_begin_4) ));}}}}}}}}}}}

    return result;
  }

  /*
   * Get all sort uses in a module (as codomain of an operator)
   */
  private Collection getSortDeclarationInCodomain(GomModule module) {
    Collection result = new HashSet();
    {if ( (module instanceof tom.gom.adt.gom.types.GomModule) ) {{  tom.gom.adt.gom.types.GomModule  tomMatch476NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if ( (tomMatch476NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch476NameNumber_freshVar_0= tomMatch476NameNumberfreshSubject_1.getModuleName() ;{  tom.gom.adt.gom.types.SectionList  tomMatch476NameNumber_freshVar_1= tomMatch476NameNumberfreshSubject_1.getSectionList() ;{  tom.gom.adt.gom.types.GomModuleName  tom_moduleName=tomMatch476NameNumber_freshVar_0;if ( ((tomMatch476NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection) || (tomMatch476NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection)) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch476NameNumber_freshVar_2=tomMatch476NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SectionList  tomMatch476NameNumber_begin_4=tomMatch476NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SectionList  tomMatch476NameNumber_end_5=tomMatch476NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch476NameNumber_freshVar_3=tomMatch476NameNumber_end_5;if (!( tomMatch476NameNumber_freshVar_3.isEmptyconcSection() )) {if ( ( tomMatch476NameNumber_freshVar_3.getHeadconcSection()  instanceof tom.gom.adt.gom.types.section.Public) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch476NameNumber_freshVar_8=  tomMatch476NameNumber_freshVar_3.getHeadconcSection() .getGrammarList() ;if ( ((tomMatch476NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar) || (tomMatch476NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar)) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch476NameNumber_freshVar_9=tomMatch476NameNumber_freshVar_8;{  tom.gom.adt.gom.types.GrammarList  tomMatch476NameNumber_begin_11=tomMatch476NameNumber_freshVar_9;{  tom.gom.adt.gom.types.GrammarList  tomMatch476NameNumber_end_12=tomMatch476NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch476NameNumber_freshVar_10=tomMatch476NameNumber_end_12;if (!( tomMatch476NameNumber_freshVar_10.isEmptyconcGrammar() )) {if ( ( tomMatch476NameNumber_freshVar_10.getHeadconcGrammar()  instanceof tom.gom.adt.gom.types.grammar.Grammar) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch476NameNumber_freshVar_15=  tomMatch476NameNumber_freshVar_10.getHeadconcGrammar() .getProductionList() ;if ( ((tomMatch476NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction) || (tomMatch476NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch476NameNumber_freshVar_16=tomMatch476NameNumber_freshVar_15;{  tom.gom.adt.gom.types.ProductionList  tomMatch476NameNumber_begin_18=tomMatch476NameNumber_freshVar_16;{  tom.gom.adt.gom.types.ProductionList  tomMatch476NameNumber_end_19=tomMatch476NameNumber_freshVar_16;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch476NameNumber_freshVar_17=tomMatch476NameNumber_end_19;if (!( tomMatch476NameNumber_freshVar_17.isEmptyconcProduction() )) {if ( ( tomMatch476NameNumber_freshVar_17.getHeadconcProduction()  instanceof tom.gom.adt.gom.types.production.Production) ) {{  String  tomMatch476NameNumber_freshVar_22=  tomMatch476NameNumber_freshVar_17.getHeadconcProduction() .getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch476NameNumber_freshVar_23=  tomMatch476NameNumber_freshVar_17.getHeadconcProduction() .getDomain() ;{  tom.gom.adt.gom.types.GomType  tomMatch476NameNumber_freshVar_24=  tomMatch476NameNumber_freshVar_17.getHeadconcProduction() .getCodomain() ;{  tom.gom.adt.gom.types.Option  tomMatch476NameNumber_freshVar_25=  tomMatch476NameNumber_freshVar_17.getHeadconcProduction() .getOption() ;if ( (tomMatch476NameNumber_freshVar_24 instanceof tom.gom.adt.gom.types.gomtype.GomType) ) {{  String  tomMatch476NameNumber_freshVar_26= tomMatch476NameNumber_freshVar_24.getName() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch476NameNumber_freshVar_20= tomMatch476NameNumber_freshVar_17.getTailconcProduction() ;{  tom.gom.adt.gom.types.GrammarList  tomMatch476NameNumber_freshVar_13= tomMatch476NameNumber_freshVar_10.getTailconcGrammar() ;{  tom.gom.adt.gom.types.SectionList  tomMatch476NameNumber_freshVar_6= tomMatch476NameNumber_freshVar_3.getTailconcSection() ;if ( true ) {











        result.add( tom.gom.adt.gom.types.sortdecl.SortDecl.make(tomMatch476NameNumber_freshVar_26,  tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(tom_moduleName, streamManager.getPackagePath(tom_moduleName.getName())) ) );
      }}}}}}}}}}}}}if ( tomMatch476NameNumber_end_19.isEmptyconcProduction() ) {tomMatch476NameNumber_end_19=tomMatch476NameNumber_begin_18;} else {tomMatch476NameNumber_end_19= tomMatch476NameNumber_end_19.getTailconcProduction() ;}}} while(!( tomMatch476NameNumber_end_19.equals(tomMatch476NameNumber_begin_18) ));}}}}}}}}if ( tomMatch476NameNumber_end_12.isEmptyconcGrammar() ) {tomMatch476NameNumber_end_12=tomMatch476NameNumber_begin_11;} else {tomMatch476NameNumber_end_12= tomMatch476NameNumber_end_12.getTailconcGrammar() ;}}} while(!( tomMatch476NameNumber_end_12.equals(tomMatch476NameNumber_begin_11) ));}}}}}}}}if ( tomMatch476NameNumber_end_5.isEmptyconcSection() ) {tomMatch476NameNumber_end_5=tomMatch476NameNumber_begin_4;} else {tomMatch476NameNumber_end_5= tomMatch476NameNumber_end_5.getTailconcSection() ;}}} while(!( tomMatch476NameNumber_end_5.equals(tomMatch476NameNumber_begin_4) ));}}}}}}}}}}}

    return result;
  }

  /**
   * Get directly imported modules. Skip builtins
   *
   * @param module the main module with imports
   * @return the Collection of imported GomModuleName
   */
  private Collection getImportedModules(GomModule module) {
    Set imports = new HashSet();
    {if ( (module instanceof tom.gom.adt.gom.types.GomModule) ) {{  tom.gom.adt.gom.types.GomModule  tomMatch477NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if ( (tomMatch477NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch477NameNumber_freshVar_0= tomMatch477NameNumberfreshSubject_1.getModuleName() ;{  tom.gom.adt.gom.types.SectionList  tomMatch477NameNumber_freshVar_1= tomMatch477NameNumberfreshSubject_1.getSectionList() ;{  tom.gom.adt.gom.types.SectionList  tom_sectionList=tomMatch477NameNumber_freshVar_1;if ( true ) {

        imports.add(tomMatch477NameNumber_freshVar_0);
        {if ( (tom_sectionList instanceof tom.gom.adt.gom.types.SectionList) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch478NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SectionList )tom_sectionList);if ( ((tomMatch478NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection) || (tomMatch478NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection)) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch478NameNumber_freshVar_0=tomMatch478NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SectionList  tomMatch478NameNumber_begin_2=tomMatch478NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SectionList  tomMatch478NameNumber_end_3=tomMatch478NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch478NameNumber_freshVar_1=tomMatch478NameNumber_end_3;if (!( tomMatch478NameNumber_freshVar_1.isEmptyconcSection() )) {if ( ( tomMatch478NameNumber_freshVar_1.getHeadconcSection()  instanceof tom.gom.adt.gom.types.section.Imports) ) {{  tom.gom.adt.gom.types.ImportList  tomMatch478NameNumber_freshVar_6=  tomMatch478NameNumber_freshVar_1.getHeadconcSection() .getImportList() ;if ( ((tomMatch478NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.importlist.ConsconcImportedModule) || (tomMatch478NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.importlist.EmptyconcImportedModule)) ) {{  tom.gom.adt.gom.types.ImportList  tomMatch478NameNumber_freshVar_7=tomMatch478NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ImportList  tomMatch478NameNumber_begin_9=tomMatch478NameNumber_freshVar_7;{  tom.gom.adt.gom.types.ImportList  tomMatch478NameNumber_end_10=tomMatch478NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.ImportList  tomMatch478NameNumber_freshVar_8=tomMatch478NameNumber_end_10;if (!( tomMatch478NameNumber_freshVar_8.isEmptyconcImportedModule() )) {if ( ( tomMatch478NameNumber_freshVar_8.getHeadconcImportedModule()  instanceof tom.gom.adt.gom.types.importedmodule.Import) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch478NameNumber_freshVar_13=  tomMatch478NameNumber_freshVar_8.getHeadconcImportedModule() .getModuleName() ;if ( (tomMatch478NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch478NameNumber_freshVar_14= tomMatch478NameNumber_freshVar_13.getName() ;{  tom.gom.adt.gom.types.ImportList  tomMatch478NameNumber_freshVar_11= tomMatch478NameNumber_freshVar_8.getTailconcImportedModule() ;{  tom.gom.adt.gom.types.SectionList  tomMatch478NameNumber_freshVar_4= tomMatch478NameNumber_freshVar_1.getTailconcSection() ;if ( true ) {





            if (!environment().isBuiltin(tomMatch478NameNumber_freshVar_14)) {
              imports.add(tomMatch478NameNumber_freshVar_13);
            }
          }}}}}}}}}if ( tomMatch478NameNumber_end_10.isEmptyconcImportedModule() ) {tomMatch478NameNumber_end_10=tomMatch478NameNumber_begin_9;} else {tomMatch478NameNumber_end_10= tomMatch478NameNumber_end_10.getTailconcImportedModule() ;}}} while(!( tomMatch478NameNumber_end_10.equals(tomMatch478NameNumber_begin_9) ));}}}}}}}}if ( tomMatch478NameNumber_end_3.isEmptyconcSection() ) {tomMatch478NameNumber_end_3=tomMatch478NameNumber_begin_2;} else {tomMatch478NameNumber_end_3= tomMatch478NameNumber_end_3.getTailconcSection() ;}}} while(!( tomMatch478NameNumber_end_3.equals(tomMatch478NameNumber_begin_2) ));}}}}}}}

      }}}}}}}}

    return imports;
  }

  private GomModule getModule(GomModuleName modname, GomModuleList list) {
    {if ( (list instanceof tom.gom.adt.gom.types.GomModuleList) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch479NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModuleList )list);if ( ((tomMatch479NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule) || (tomMatch479NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule)) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch479NameNumber_freshVar_0=tomMatch479NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.GomModuleList  tomMatch479NameNumber_begin_2=tomMatch479NameNumber_freshVar_0;{  tom.gom.adt.gom.types.GomModuleList  tomMatch479NameNumber_end_3=tomMatch479NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.GomModuleList  tomMatch479NameNumber_freshVar_1=tomMatch479NameNumber_end_3;if (!( tomMatch479NameNumber_freshVar_1.isEmptyconcGomModule() )) {if ( ( tomMatch479NameNumber_freshVar_1.getHeadconcGomModule()  instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch479NameNumber_freshVar_6=  tomMatch479NameNumber_freshVar_1.getHeadconcGomModule() .getModuleName() ;{  tom.gom.adt.gom.types.GomModuleList  tomMatch479NameNumber_freshVar_4= tomMatch479NameNumber_freshVar_1.getTailconcGomModule() ;if ( true ) {

        if (tomMatch479NameNumber_freshVar_6.equals(modname)) {
          return  tomMatch479NameNumber_freshVar_1.getHeadconcGomModule() ;
        }
      }}}}}}if ( tomMatch479NameNumber_end_3.isEmptyconcGomModule() ) {tomMatch479NameNumber_end_3=tomMatch479NameNumber_begin_2;} else {tomMatch479NameNumber_end_3= tomMatch479NameNumber_end_3.getTailconcGomModule() ;}}} while(!( tomMatch479NameNumber_end_3.equals(tomMatch479NameNumber_begin_2) ));}}}}}}}

    throw new GomRuntimeException("Module "+ modname +" not present");
  }

  private Collection getTransitiveClosureImports(GomModule module,
      GomModuleList moduleList) {
    Set imported = new HashSet();
    imported.addAll(getImportedModules(module));

    Set newSet = new HashSet();
    while(!newSet.equals(imported)) {
      newSet.addAll(imported);
      imported.addAll(newSet);
      Iterator it = imported.iterator();
      while(it.hasNext()) {
        GomModuleName modname = (GomModuleName) it.next();
        newSet.addAll(getImportedModules(getModule(modname,moduleList)));
      }
    }
    return newSet;
  }

  private void buildDependencyMap(GomModuleList moduleList) {
    {if ( (moduleList instanceof tom.gom.adt.gom.types.GomModuleList) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch480NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModuleList )moduleList);if ( ((tomMatch480NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule) || (tomMatch480NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule)) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch480NameNumber_freshVar_0=tomMatch480NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.GomModuleList  tomMatch480NameNumber_begin_2=tomMatch480NameNumber_freshVar_0;{  tom.gom.adt.gom.types.GomModuleList  tomMatch480NameNumber_end_3=tomMatch480NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.GomModuleList  tomMatch480NameNumber_freshVar_1=tomMatch480NameNumber_end_3;if (!( tomMatch480NameNumber_freshVar_1.isEmptyconcGomModule() )) {if ( ( tomMatch480NameNumber_freshVar_1.getHeadconcGomModule()  instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch480NameNumber_freshVar_6=  tomMatch480NameNumber_freshVar_1.getHeadconcGomModule() .getModuleName() ;{  tom.gom.adt.gom.types.GomModuleName  tom_moduleName=tomMatch480NameNumber_freshVar_6;{  tom.gom.adt.gom.types.GomModuleList  tomMatch480NameNumber_freshVar_4= tomMatch480NameNumber_freshVar_1.getTailconcGomModule() ;if ( true ) {

        ModuleDeclList importsModuleDeclList =  tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl.make() ;
        Iterator it = getTransitiveClosureImports( tomMatch480NameNumber_freshVar_1.getHeadconcGomModule() ,moduleList).iterator();
        while(it.hasNext()) {
          GomModuleName importedModuleName = (GomModuleName) it.next();


          importsModuleDeclList = 
             tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make( tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(importedModuleName, streamManager.getPackagePath(importedModuleName.getName())) ,tom_append_list_concModuleDecl(importsModuleDeclList, tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl.make() )) 
;
        }
        environment().addModuleDependency(
             tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(tom_moduleName, streamManager.getPackagePath(tom_moduleName.getName())) ,importsModuleDeclList);
      }}}}}}}if ( tomMatch480NameNumber_end_3.isEmptyconcGomModule() ) {tomMatch480NameNumber_end_3=tomMatch480NameNumber_begin_2;} else {tomMatch480NameNumber_end_3= tomMatch480NameNumber_end_3.getTailconcGomModule() ;}}} while(!( tomMatch480NameNumber_end_3.equals(tomMatch480NameNumber_begin_2) ));}}}}}}}

  }

  private boolean checkSortValidity(Sort sort) {
    boolean valid = true;
    // check if the same slot name is used with different types
    Map mapNameType = new HashMap();
    {if ( (sort instanceof tom.gom.adt.gom.types.Sort) ) {{  tom.gom.adt.gom.types.Sort  tomMatch481NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Sort )sort);if ( (tomMatch481NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch481NameNumber_freshVar_0= tomMatch481NameNumberfreshSubject_1.getOperators() ;if ( ((tomMatch481NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator) || (tomMatch481NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch481NameNumber_freshVar_1=tomMatch481NameNumber_freshVar_0;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch481NameNumber_begin_3=tomMatch481NameNumber_freshVar_1;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch481NameNumber_end_4=tomMatch481NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch481NameNumber_freshVar_2=tomMatch481NameNumber_end_4;if (!( tomMatch481NameNumber_freshVar_2.isEmptyconcOperator() )) {if ( ( tomMatch481NameNumber_freshVar_2.getHeadconcOperator()  instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch481NameNumber_freshVar_7=  tomMatch481NameNumber_freshVar_2.getHeadconcOperator() .getProd() ;if ( (tomMatch481NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.typedproduction.Slots) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch481NameNumber_freshVar_8= tomMatch481NameNumber_freshVar_7.getSlots() ;if ( ((tomMatch481NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot) || (tomMatch481NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot)) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch481NameNumber_freshVar_9=tomMatch481NameNumber_freshVar_8;{  tom.gom.adt.gom.types.SlotList  tomMatch481NameNumber_begin_11=tomMatch481NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SlotList  tomMatch481NameNumber_end_12=tomMatch481NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.SlotList  tomMatch481NameNumber_freshVar_10=tomMatch481NameNumber_end_12;if (!( tomMatch481NameNumber_freshVar_10.isEmptyconcSlot() )) {if ( ( tomMatch481NameNumber_freshVar_10.getHeadconcSlot()  instanceof tom.gom.adt.gom.types.slot.Slot) ) {{  String  tomMatch481NameNumber_freshVar_15=  tomMatch481NameNumber_freshVar_10.getHeadconcSlot() .getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch481NameNumber_freshVar_16=  tomMatch481NameNumber_freshVar_10.getHeadconcSlot() .getSort() ;{  String  tom_slotName=tomMatch481NameNumber_freshVar_15;{  tom.gom.adt.gom.types.SortDecl  tom_slotSort=tomMatch481NameNumber_freshVar_16;{  tom.gom.adt.gom.types.SlotList  tomMatch481NameNumber_freshVar_13= tomMatch481NameNumber_freshVar_10.getTailconcSlot() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch481NameNumber_freshVar_5= tomMatch481NameNumber_freshVar_2.getTailconcOperator() ;if ( true ) {





        if(!mapNameType.containsKey(tom_slotName)) {
          mapNameType.put(tom_slotName,tom_slotSort);
        } else {
          SortDecl prevSort = (SortDecl) mapNameType.get(tom_slotName);
          if (!prevSort.equals(tom_slotSort)) {
            getLogger().log(Level.SEVERE,
                GomMessage.slotIncompatibleTypes.getMessage(),
                new Object[]{(tom_slotName),prevSort.getName(),
                             (tom_slotSort).getName()});
            valid = false;
          }
        }
      }}}}}}}}}}if ( tomMatch481NameNumber_end_12.isEmptyconcSlot() ) {tomMatch481NameNumber_end_12=tomMatch481NameNumber_begin_11;} else {tomMatch481NameNumber_end_12= tomMatch481NameNumber_end_12.getTailconcSlot() ;}}} while(!( tomMatch481NameNumber_end_12.equals(tomMatch481NameNumber_begin_11) ));}}}}}}}}}}if ( tomMatch481NameNumber_end_4.isEmptyconcOperator() ) {tomMatch481NameNumber_end_4=tomMatch481NameNumber_begin_3;} else {tomMatch481NameNumber_end_4= tomMatch481NameNumber_end_4.getTailconcOperator() ;}}} while(!( tomMatch481NameNumber_end_4.equals(tomMatch481NameNumber_begin_3) ));}}}}}}}}}

    return valid;
  }

  private String showSortList(Collection decls) {
    String sorts = "";
    Iterator it = decls.iterator();
    if(it.hasNext()) {
      SortDecl decl = (SortDecl)it.next();
      sorts += decl.getName();
    }
    while(it.hasNext()) {
      SortDecl decl = (SortDecl)it.next();
      sorts += ", "+decl.getName();
    }
    return sorts;
  }

  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
