/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class TypeExpander {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Hook(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Hook(Object t) { return  t instanceof tom.gom.adt.objects.types.Hook ;}private static boolean tom_equal_term_SlotField(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotField(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotField ;}private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotFieldList(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotFieldList ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClass(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClass ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassName(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassName ;}private static boolean tom_equal_term_GomClassList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClassList(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClassList ;}private static boolean tom_equal_term_ClassNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassNameList(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassNameList ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookList(Object t) { return  t instanceof tom.gom.adt.objects.types.HookList ;}private static boolean tom_equal_term_Code(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Code(Object t) { return  t instanceof tom.gom.adt.code.types.Code ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.gom.adt.gom.types.Slot ;}private static boolean tom_equal_term_ArgList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ArgList(Object t) { return  t instanceof tom.gom.adt.gom.types.ArgList ;}private static boolean tom_equal_term_IdKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_IdKind(Object t) { return  t instanceof tom.gom.adt.gom.types.IdKind ;}private static boolean tom_equal_term_GomModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleList ;}private static boolean tom_equal_term_GrammarList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GrammarList(Object t) { return  t instanceof tom.gom.adt.gom.types.GrammarList ;}private static boolean tom_equal_term_TypedProduction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TypedProduction(Object t) { return  t instanceof tom.gom.adt.gom.types.TypedProduction ;}private static boolean tom_equal_term_SectionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SectionList(Object t) { return  t instanceof tom.gom.adt.gom.types.SectionList ;}private static boolean tom_equal_term_OperatorDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDeclList ;}private static boolean tom_equal_term_HookDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDeclList ;}private static boolean tom_equal_term_SortDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDeclList ;}private static boolean tom_equal_term_OperatorDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDecl ;}private static boolean tom_equal_term_GomModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModule(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModule ;}private static boolean tom_equal_term_Pair(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Pair(Object t) { return  t instanceof tom.gom.adt.gom.types.Pair ;}private static boolean tom_equal_term_Section(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Section(Object t) { return  t instanceof tom.gom.adt.gom.types.Section ;}private static boolean tom_equal_term_GomTypeList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomTypeList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomTypeList ;}private static boolean tom_equal_term_ProductionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ProductionList(Object t) { return  t instanceof tom.gom.adt.gom.types.ProductionList ;}private static boolean tom_equal_term_Decl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Decl(Object t) { return  t instanceof tom.gom.adt.gom.types.Decl ;}private static boolean tom_equal_term_ImportList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportList(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportList ;}private static boolean tom_equal_term_Sort(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Sort(Object t) { return  t instanceof tom.gom.adt.gom.types.Sort ;}private static boolean tom_equal_term_SortDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDecl ;}private static boolean tom_equal_term_HookDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDecl ;}private static boolean tom_equal_term_ModuleDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDeclList ;}private static boolean tom_equal_term_Module(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Module(Object t) { return  t instanceof tom.gom.adt.gom.types.Module ;}private static boolean tom_equal_term_FieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_FieldList(Object t) { return  t instanceof tom.gom.adt.gom.types.FieldList ;}private static boolean tom_equal_term_Grammar(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Grammar(Object t) { return  t instanceof tom.gom.adt.gom.types.Grammar ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.gom.adt.gom.types.SlotList ;}private static boolean tom_equal_term_SortList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortList ;}private static boolean tom_equal_term_Arg(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Arg(Object t) { return  t instanceof tom.gom.adt.gom.types.Arg ;}private static boolean tom_equal_term_GomModuleName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleName(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleName ;}private static boolean tom_equal_term_Field(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Field(Object t) { return  t instanceof tom.gom.adt.gom.types.Field ;}private static boolean tom_equal_term_Production(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Production(Object t) { return  t instanceof tom.gom.adt.gom.types.Production ;}private static boolean tom_equal_term_ModuleDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDecl ;}private static boolean tom_equal_term_ModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleList ;}private static boolean tom_equal_term_GomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomType(Object t) { return  t instanceof tom.gom.adt.gom.types.GomType ;}private static boolean tom_equal_term_ImportedModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportedModule(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportedModule ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.gom.adt.gom.types.Option ;}private static boolean tom_equal_term_HookKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookKind(Object t) { return  t instanceof tom.gom.adt.gom.types.HookKind ;}private static boolean tom_is_fun_sym_Slot( tom.gom.adt.gom.types.Slot  t) { return  (t instanceof tom.gom.adt.gom.types.slot.Slot) ;}private static  tom.gom.adt.gom.types.Slot  tom_make_Slot( String  t0,  tom.gom.adt.gom.types.SortDecl  t1) { return  tom.gom.adt.gom.types.slot.Slot.make(t0, t1) ; }private static  String  tom_get_slot_Slot_Name( tom.gom.adt.gom.types.Slot  t) { return  t.getName() ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Slot_Sort( tom.gom.adt.gom.types.Slot  t) { return  t.getSort() ;}private static boolean tom_is_fun_sym_Slots( tom.gom.adt.gom.types.TypedProduction  t) { return  (t instanceof tom.gom.adt.gom.types.typedproduction.Slots) ;}private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Slots( tom.gom.adt.gom.types.SlotList  t0) { return  tom.gom.adt.gom.types.typedproduction.Slots.make(t0) ; }private static  tom.gom.adt.gom.types.SlotList  tom_get_slot_Slots_Slots( tom.gom.adt.gom.types.TypedProduction  t) { return  t.getSlots() ;}private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Variadic( tom.gom.adt.gom.types.SortDecl  t0) { return  tom.gom.adt.gom.types.typedproduction.Variadic.make(t0) ; }private static boolean tom_is_fun_sym_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl  t) { return  (t instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ;}private static  tom.gom.adt.gom.types.OperatorDecl  tom_make_OperatorDecl( String  t0,  tom.gom.adt.gom.types.SortDecl  t1,  tom.gom.adt.gom.types.TypedProduction  t2) { return  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make(t0, t1, t2) ; }private static  String  tom_get_slot_OperatorDecl_Name( tom.gom.adt.gom.types.OperatorDecl  t) { return  t.getName() ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_OperatorDecl_Sort( tom.gom.adt.gom.types.OperatorDecl  t) { return  t.getSort() ;}private static  tom.gom.adt.gom.types.TypedProduction  tom_get_slot_OperatorDecl_Prod( tom.gom.adt.gom.types.OperatorDecl  t) { return  t.getProd() ;}private static boolean tom_is_fun_sym_GomModule( tom.gom.adt.gom.types.GomModule  t) { return  (t instanceof tom.gom.adt.gom.types.gommodule.GomModule) ;}private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_GomModule_ModuleName( tom.gom.adt.gom.types.GomModule  t) { return  t.getModuleName() ;}private static  tom.gom.adt.gom.types.SectionList  tom_get_slot_GomModule_SectionList( tom.gom.adt.gom.types.GomModule  t) { return  t.getSectionList() ;}private static boolean tom_is_fun_sym_Imports( tom.gom.adt.gom.types.Section  t) { return  (t instanceof tom.gom.adt.gom.types.section.Imports) ;}private static  tom.gom.adt.gom.types.ImportList  tom_get_slot_Imports_ImportList( tom.gom.adt.gom.types.Section  t) { return  t.getImportList() ;}private static boolean tom_is_fun_sym_Public( tom.gom.adt.gom.types.Section  t) { return  (t instanceof tom.gom.adt.gom.types.section.Public) ;}private static  tom.gom.adt.gom.types.GrammarList  tom_get_slot_Public_GrammarList( tom.gom.adt.gom.types.Section  t) { return  t.getGrammarList() ;}private static boolean tom_is_fun_sym_Sort( tom.gom.adt.gom.types.Sort  t) { return  (t instanceof tom.gom.adt.gom.types.sort.Sort) ;}private static  tom.gom.adt.gom.types.Sort  tom_make_Sort( tom.gom.adt.gom.types.SortDecl  t0,  tom.gom.adt.gom.types.OperatorDeclList  t1) { return  tom.gom.adt.gom.types.sort.Sort.make(t0, t1) ; }private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Sort_Decl( tom.gom.adt.gom.types.Sort  t) { return  t.getDecl() ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slot_Sort_Operators( tom.gom.adt.gom.types.Sort  t) { return  t.getOperators() ;}private static boolean tom_is_fun_sym_SortDecl( tom.gom.adt.gom.types.SortDecl  t) { return  (t instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ;}private static  tom.gom.adt.gom.types.SortDecl  tom_make_SortDecl( String  t0,  tom.gom.adt.gom.types.ModuleDecl  t1) { return  tom.gom.adt.gom.types.sortdecl.SortDecl.make(t0, t1) ; }private static  String  tom_get_slot_SortDecl_Name( tom.gom.adt.gom.types.SortDecl  t) { return  t.getName() ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_SortDecl_ModuleDecl( tom.gom.adt.gom.types.SortDecl  t) { return  t.getModuleDecl() ;}private static  tom.gom.adt.gom.types.SortDecl  tom_make_BuiltinSortDecl( String  t0) { return  tom.gom.adt.gom.types.sortdecl.BuiltinSortDecl.make(t0) ; }private static  tom.gom.adt.gom.types.Module  tom_make_Module( tom.gom.adt.gom.types.ModuleDecl  t0,  tom.gom.adt.gom.types.SortList  t1) { return  tom.gom.adt.gom.types.module.Module.make(t0, t1) ; }private static boolean tom_is_fun_sym_Grammar( tom.gom.adt.gom.types.Grammar  t) { return  (t instanceof tom.gom.adt.gom.types.grammar.Grammar) ;}private static  tom.gom.adt.gom.types.ProductionList  tom_get_slot_Grammar_ProductionList( tom.gom.adt.gom.types.Grammar  t) { return  t.getProductionList() ;}private static boolean tom_is_fun_sym_Sorts( tom.gom.adt.gom.types.Grammar  t) { return  (t instanceof tom.gom.adt.gom.types.grammar.Sorts) ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_get_slot_Sorts_TypeList( tom.gom.adt.gom.types.Grammar  t) { return  t.getTypeList() ;}private static boolean tom_is_fun_sym_GomModuleName( tom.gom.adt.gom.types.GomModuleName  t) { return  (t instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ;}private static  String  tom_get_slot_GomModuleName_Name( tom.gom.adt.gom.types.GomModuleName  t) { return  t.getName() ;}private static boolean tom_is_fun_sym_StarredField( tom.gom.adt.gom.types.Field  t) { return  (t instanceof tom.gom.adt.gom.types.field.StarredField) ;}private static  tom.gom.adt.gom.types.GomType  tom_get_slot_StarredField_FieldType( tom.gom.adt.gom.types.Field  t) { return  t.getFieldType() ;}private static boolean tom_is_fun_sym_NamedField( tom.gom.adt.gom.types.Field  t) { return  (t instanceof tom.gom.adt.gom.types.field.NamedField) ;}private static  String  tom_get_slot_NamedField_Name( tom.gom.adt.gom.types.Field  t) { return  t.getName() ;}private static  tom.gom.adt.gom.types.GomType  tom_get_slot_NamedField_FieldType( tom.gom.adt.gom.types.Field  t) { return  t.getFieldType() ;}private static boolean tom_is_fun_sym_Production( tom.gom.adt.gom.types.Production  t) { return  (t instanceof tom.gom.adt.gom.types.production.Production) ;}private static  String  tom_get_slot_Production_Name( tom.gom.adt.gom.types.Production  t) { return  t.getName() ;}private static  tom.gom.adt.gom.types.FieldList  tom_get_slot_Production_Domain( tom.gom.adt.gom.types.Production  t) { return  t.getDomain() ;}private static  tom.gom.adt.gom.types.GomType  tom_get_slot_Production_Codomain( tom.gom.adt.gom.types.Production  t) { return  t.getCodomain() ;}private static  tom.gom.adt.gom.types.Option  tom_get_slot_Production_Option( tom.gom.adt.gom.types.Production  t) { return  t.getOption() ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_make_ModuleDecl( tom.gom.adt.gom.types.GomModuleName  t0,  String  t1) { return  tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(t0, t1) ; }private static boolean tom_is_fun_sym_GomType( tom.gom.adt.gom.types.GomType  t) { return  (t instanceof tom.gom.adt.gom.types.gomtype.GomType) ;}private static  String  tom_get_slot_GomType_Name( tom.gom.adt.gom.types.GomType  t) { return  t.getName() ;}private static boolean tom_is_fun_sym_Import( tom.gom.adt.gom.types.ImportedModule  t) { return  (t instanceof tom.gom.adt.gom.types.importedmodule.Import) ;}private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_Import_ModuleName( tom.gom.adt.gom.types.ImportedModule  t) { return  t.getModuleName() ;}private static boolean tom_is_fun_sym_concGomModule( tom.gom.adt.gom.types.GomModuleList  t) { return  ((t instanceof tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule) || (t instanceof tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule)) ;}private static  tom.gom.adt.gom.types.GomModuleList  tom_empty_list_concGomModule() { return  tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule.make() ; }private static  tom.gom.adt.gom.types.GomModuleList  tom_cons_list_concGomModule( tom.gom.adt.gom.types.GomModule  e,  tom.gom.adt.gom.types.GomModuleList  l) { return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make(e,l) ; }private static  tom.gom.adt.gom.types.GomModule  tom_get_head_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList  l) { return  l.getHeadconcGomModule() ;}private static  tom.gom.adt.gom.types.GomModuleList  tom_get_tail_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList  l) { return  l.getTailconcGomModule() ;}private static boolean tom_is_empty_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList  l) { return  l.isEmptyconcGomModule() ;}   private static   tom.gom.adt.gom.types.GomModuleList  tom_append_list_concGomModule( tom.gom.adt.gom.types.GomModuleList l1,  tom.gom.adt.gom.types.GomModuleList  l2) {     if( l1.isEmptyconcGomModule() ) {       return l2;     } else if( l2.isEmptyconcGomModule() ) {       return l1;     } else if(  l1.getTailconcGomModule() .isEmptyconcGomModule() ) {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,tom_append_list_concGomModule( l1.getTailconcGomModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GomModuleList  tom_get_slice_concGomModule( tom.gom.adt.gom.types.GomModuleList  begin,  tom.gom.adt.gom.types.GomModuleList  end, tom.gom.adt.gom.types.GomModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( begin.getHeadconcGomModule() ,( tom.gom.adt.gom.types.GomModuleList )tom_get_slice_concGomModule( begin.getTailconcGomModule() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concGrammar( tom.gom.adt.gom.types.GrammarList  t) { return  ((t instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar) || (t instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar)) ;}private static  tom.gom.adt.gom.types.GrammarList  tom_empty_list_concGrammar() { return  tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar.make() ; }private static  tom.gom.adt.gom.types.GrammarList  tom_cons_list_concGrammar( tom.gom.adt.gom.types.Grammar  e,  tom.gom.adt.gom.types.GrammarList  l) { return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make(e,l) ; }private static  tom.gom.adt.gom.types.Grammar  tom_get_head_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) { return  l.getHeadconcGrammar() ;}private static  tom.gom.adt.gom.types.GrammarList  tom_get_tail_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) { return  l.getTailconcGrammar() ;}private static boolean tom_is_empty_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) { return  l.isEmptyconcGrammar() ;}   private static   tom.gom.adt.gom.types.GrammarList  tom_append_list_concGrammar( tom.gom.adt.gom.types.GrammarList l1,  tom.gom.adt.gom.types.GrammarList  l2) {     if( l1.isEmptyconcGrammar() ) {       return l2;     } else if( l2.isEmptyconcGrammar() ) {       return l1;     } else if(  l1.getTailconcGrammar() .isEmptyconcGrammar() ) {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( l1.getHeadconcGrammar() ,l2) ;     } else {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( l1.getHeadconcGrammar() ,tom_append_list_concGrammar( l1.getTailconcGrammar() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GrammarList  tom_get_slice_concGrammar( tom.gom.adt.gom.types.GrammarList  begin,  tom.gom.adt.gom.types.GrammarList  end, tom.gom.adt.gom.types.GrammarList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( begin.getHeadconcGrammar() ,( tom.gom.adt.gom.types.GrammarList )tom_get_slice_concGrammar( begin.getTailconcGrammar() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concSection( tom.gom.adt.gom.types.SectionList  t) { return  ((t instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection) || (t instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection)) ;}private static  tom.gom.adt.gom.types.SectionList  tom_empty_list_concSection() { return  tom.gom.adt.gom.types.sectionlist.EmptyconcSection.make() ; }private static  tom.gom.adt.gom.types.SectionList  tom_cons_list_concSection( tom.gom.adt.gom.types.Section  e,  tom.gom.adt.gom.types.SectionList  l) { return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make(e,l) ; }private static  tom.gom.adt.gom.types.Section  tom_get_head_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) { return  l.getHeadconcSection() ;}private static  tom.gom.adt.gom.types.SectionList  tom_get_tail_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) { return  l.getTailconcSection() ;}private static boolean tom_is_empty_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) { return  l.isEmptyconcSection() ;}   private static   tom.gom.adt.gom.types.SectionList  tom_append_list_concSection( tom.gom.adt.gom.types.SectionList l1,  tom.gom.adt.gom.types.SectionList  l2) {     if( l1.isEmptyconcSection() ) {       return l2;     } else if( l2.isEmptyconcSection() ) {       return l1;     } else if(  l1.getTailconcSection() .isEmptyconcSection() ) {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,tom_append_list_concSection( l1.getTailconcSection() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SectionList  tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList  begin,  tom.gom.adt.gom.types.SectionList  end, tom.gom.adt.gom.types.SectionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( begin.getHeadconcSection() ,( tom.gom.adt.gom.types.SectionList )tom_get_slice_concSection( begin.getTailconcSection() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList  t) { return  ((t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator) || (t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator)) ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_empty_list_concOperator() { return  tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ; }private static  tom.gom.adt.gom.types.OperatorDeclList  tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl  e,  tom.gom.adt.gom.types.OperatorDeclList  l) { return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(e,l) ; }private static  tom.gom.adt.gom.types.OperatorDecl  tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) { return  l.getHeadconcOperator() ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) { return  l.getTailconcOperator() ;}private static boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) { return  l.isEmptyconcOperator() ;}   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyconcOperator() ) {       return l2;     } else if( l2.isEmptyconcOperator() ) {       return l1;     } else if(  l1.getTailconcOperator() .isEmptyconcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,tom_append_list_concOperator( l1.getTailconcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( begin.getHeadconcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator( begin.getTailconcOperator() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concSortDecl( tom.gom.adt.gom.types.SortDeclList  t) { return  ((t instanceof tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl) || (t instanceof tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl)) ;}private static  tom.gom.adt.gom.types.SortDeclList  tom_empty_list_concSortDecl() { return  tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() ; }private static  tom.gom.adt.gom.types.SortDeclList  tom_cons_list_concSortDecl( tom.gom.adt.gom.types.SortDecl  e,  tom.gom.adt.gom.types.SortDeclList  l) { return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.SortDecl  tom_get_head_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList  l) { return  l.getHeadconcSortDecl() ;}private static  tom.gom.adt.gom.types.SortDeclList  tom_get_tail_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList  l) { return  l.getTailconcSortDecl() ;}private static boolean tom_is_empty_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList  l) { return  l.isEmptyconcSortDecl() ;}   private static   tom.gom.adt.gom.types.SortDeclList  tom_append_list_concSortDecl( tom.gom.adt.gom.types.SortDeclList l1,  tom.gom.adt.gom.types.SortDeclList  l2) {     if( l1.isEmptyconcSortDecl() ) {       return l2;     } else if( l2.isEmptyconcSortDecl() ) {       return l1;     } else if(  l1.getTailconcSortDecl() .isEmptyconcSortDecl() ) {       return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make( l1.getHeadconcSortDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make( l1.getHeadconcSortDecl() ,tom_append_list_concSortDecl( l1.getTailconcSortDecl() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortDeclList  tom_get_slice_concSortDecl( tom.gom.adt.gom.types.SortDeclList  begin,  tom.gom.adt.gom.types.SortDeclList  end, tom.gom.adt.gom.types.SortDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make( begin.getHeadconcSortDecl() ,( tom.gom.adt.gom.types.SortDeclList )tom_get_slice_concSortDecl( begin.getTailconcSortDecl() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concGomType( tom.gom.adt.gom.types.GomTypeList  t) { return  ((t instanceof tom.gom.adt.gom.types.gomtypelist.ConsconcGomType) || (t instanceof tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType)) ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_empty_list_concGomType() { return  tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType.make() ; }private static  tom.gom.adt.gom.types.GomTypeList  tom_cons_list_concGomType( tom.gom.adt.gom.types.GomType  e,  tom.gom.adt.gom.types.GomTypeList  l) { return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make(e,l) ; }private static  tom.gom.adt.gom.types.GomType  tom_get_head_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) { return  l.getHeadconcGomType() ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_get_tail_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) { return  l.getTailconcGomType() ;}private static boolean tom_is_empty_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) { return  l.isEmptyconcGomType() ;}   private static   tom.gom.adt.gom.types.GomTypeList  tom_append_list_concGomType( tom.gom.adt.gom.types.GomTypeList l1,  tom.gom.adt.gom.types.GomTypeList  l2) {     if( l1.isEmptyconcGomType() ) {       return l2;     } else if( l2.isEmptyconcGomType() ) {       return l1;     } else if(  l1.getTailconcGomType() .isEmptyconcGomType() ) {       return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make( l1.getHeadconcGomType() ,l2) ;     } else {       return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make( l1.getHeadconcGomType() ,tom_append_list_concGomType( l1.getTailconcGomType() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GomTypeList  tom_get_slice_concGomType( tom.gom.adt.gom.types.GomTypeList  begin,  tom.gom.adt.gom.types.GomTypeList  end, tom.gom.adt.gom.types.GomTypeList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make( begin.getHeadconcGomType() ,( tom.gom.adt.gom.types.GomTypeList )tom_get_slice_concGomType( begin.getTailconcGomType() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concProduction( tom.gom.adt.gom.types.ProductionList  t) { return  ((t instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction) || (t instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction)) ;}private static  tom.gom.adt.gom.types.ProductionList  tom_empty_list_concProduction() { return  tom.gom.adt.gom.types.productionlist.EmptyconcProduction.make() ; }private static  tom.gom.adt.gom.types.ProductionList  tom_cons_list_concProduction( tom.gom.adt.gom.types.Production  e,  tom.gom.adt.gom.types.ProductionList  l) { return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make(e,l) ; }private static  tom.gom.adt.gom.types.Production  tom_get_head_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) { return  l.getHeadconcProduction() ;}private static  tom.gom.adt.gom.types.ProductionList  tom_get_tail_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) { return  l.getTailconcProduction() ;}private static boolean tom_is_empty_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) { return  l.isEmptyconcProduction() ;}   private static   tom.gom.adt.gom.types.ProductionList  tom_append_list_concProduction( tom.gom.adt.gom.types.ProductionList l1,  tom.gom.adt.gom.types.ProductionList  l2) {     if( l1.isEmptyconcProduction() ) {       return l2;     } else if( l2.isEmptyconcProduction() ) {       return l1;     } else if(  l1.getTailconcProduction() .isEmptyconcProduction() ) {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( l1.getHeadconcProduction() ,l2) ;     } else {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( l1.getHeadconcProduction() ,tom_append_list_concProduction( l1.getTailconcProduction() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ProductionList  tom_get_slice_concProduction( tom.gom.adt.gom.types.ProductionList  begin,  tom.gom.adt.gom.types.ProductionList  end, tom.gom.adt.gom.types.ProductionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( begin.getHeadconcProduction() ,( tom.gom.adt.gom.types.ProductionList )tom_get_slice_concProduction( begin.getTailconcProduction() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concImportedModule( tom.gom.adt.gom.types.ImportList  t) { return  ((t instanceof tom.gom.adt.gom.types.importlist.ConsconcImportedModule) || (t instanceof tom.gom.adt.gom.types.importlist.EmptyconcImportedModule)) ;}private static  tom.gom.adt.gom.types.ImportList  tom_empty_list_concImportedModule() { return  tom.gom.adt.gom.types.importlist.EmptyconcImportedModule.make() ; }private static  tom.gom.adt.gom.types.ImportList  tom_cons_list_concImportedModule( tom.gom.adt.gom.types.ImportedModule  e,  tom.gom.adt.gom.types.ImportList  l) { return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make(e,l) ; }private static  tom.gom.adt.gom.types.ImportedModule  tom_get_head_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) { return  l.getHeadconcImportedModule() ;}private static  tom.gom.adt.gom.types.ImportList  tom_get_tail_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) { return  l.getTailconcImportedModule() ;}private static boolean tom_is_empty_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) { return  l.isEmptyconcImportedModule() ;}   private static   tom.gom.adt.gom.types.ImportList  tom_append_list_concImportedModule( tom.gom.adt.gom.types.ImportList l1,  tom.gom.adt.gom.types.ImportList  l2) {     if( l1.isEmptyconcImportedModule() ) {       return l2;     } else if( l2.isEmptyconcImportedModule() ) {       return l1;     } else if(  l1.getTailconcImportedModule() .isEmptyconcImportedModule() ) {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( l1.getHeadconcImportedModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( l1.getHeadconcImportedModule() ,tom_append_list_concImportedModule( l1.getTailconcImportedModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ImportList  tom_get_slice_concImportedModule( tom.gom.adt.gom.types.ImportList  begin,  tom.gom.adt.gom.types.ImportList  end, tom.gom.adt.gom.types.ImportList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( begin.getHeadconcImportedModule() ,( tom.gom.adt.gom.types.ImportList )tom_get_slice_concImportedModule( begin.getTailconcImportedModule() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  t) { return  ((t instanceof tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl) || (t instanceof tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl)) ;}private static  tom.gom.adt.gom.types.ModuleDeclList  tom_empty_list_concModuleDecl() { return  tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl.make() ; }private static  tom.gom.adt.gom.types.ModuleDeclList  tom_cons_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDecl  e,  tom.gom.adt.gom.types.ModuleDeclList  l) { return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_head_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList  l) { return  l.getHeadconcModuleDecl() ;}private static  tom.gom.adt.gom.types.ModuleDeclList  tom_get_tail_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList  l) { return  l.getTailconcModuleDecl() ;}private static boolean tom_is_empty_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList  l) { return  l.isEmptyconcModuleDecl() ;}   private static   tom.gom.adt.gom.types.ModuleDeclList  tom_append_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList l1,  tom.gom.adt.gom.types.ModuleDeclList  l2) {     if( l1.isEmptyconcModuleDecl() ) {       return l2;     } else if( l2.isEmptyconcModuleDecl() ) {       return l1;     } else if(  l1.getTailconcModuleDecl() .isEmptyconcModuleDecl() ) {       return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make( l1.getHeadconcModuleDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make( l1.getHeadconcModuleDecl() ,tom_append_list_concModuleDecl( l1.getTailconcModuleDecl() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleDeclList  tom_get_slice_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  begin,  tom.gom.adt.gom.types.ModuleDeclList  end, tom.gom.adt.gom.types.ModuleDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make( begin.getHeadconcModuleDecl() ,( tom.gom.adt.gom.types.ModuleDeclList )tom_get_slice_concModuleDecl( begin.getTailconcModuleDecl() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concField( tom.gom.adt.gom.types.FieldList  t) { return  ((t instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField) || (t instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField)) ;}private static  tom.gom.adt.gom.types.FieldList  tom_empty_list_concField() { return  tom.gom.adt.gom.types.fieldlist.EmptyconcField.make() ; }private static  tom.gom.adt.gom.types.FieldList  tom_cons_list_concField( tom.gom.adt.gom.types.Field  e,  tom.gom.adt.gom.types.FieldList  l) { return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make(e,l) ; }private static  tom.gom.adt.gom.types.Field  tom_get_head_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) { return  l.getHeadconcField() ;}private static  tom.gom.adt.gom.types.FieldList  tom_get_tail_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) { return  l.getTailconcField() ;}private static boolean tom_is_empty_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) { return  l.isEmptyconcField() ;}   private static   tom.gom.adt.gom.types.FieldList  tom_append_list_concField( tom.gom.adt.gom.types.FieldList l1,  tom.gom.adt.gom.types.FieldList  l2) {     if( l1.isEmptyconcField() ) {       return l2;     } else if( l2.isEmptyconcField() ) {       return l1;     } else if(  l1.getTailconcField() .isEmptyconcField() ) {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( l1.getHeadconcField() ,l2) ;     } else {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( l1.getHeadconcField() ,tom_append_list_concField( l1.getTailconcField() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.FieldList  tom_get_slice_concField( tom.gom.adt.gom.types.FieldList  begin,  tom.gom.adt.gom.types.FieldList  end, tom.gom.adt.gom.types.FieldList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( begin.getHeadconcField() ,( tom.gom.adt.gom.types.FieldList )tom_get_slice_concField( begin.getTailconcField() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList  t) { return  ((t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot) || (t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot)) ;}private static  tom.gom.adt.gom.types.SlotList  tom_empty_list_concSlot() { return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }private static  tom.gom.adt.gom.types.SlotList  tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot  e,  tom.gom.adt.gom.types.SlotList  l) { return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.gom.adt.gom.types.Slot  tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) { return  l.getHeadconcSlot() ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) { return  l.getTailconcSlot() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) { return  l.isEmptyconcSlot() ;}   private static   tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList  t) { return  ((t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ;}private static  tom.gom.adt.gom.types.SortList  tom_empty_list_concSort() { return  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ; }private static  tom.gom.adt.gom.types.SortList  tom_cons_list_concSort( tom.gom.adt.gom.types.Sort  e,  tom.gom.adt.gom.types.SortList  l) { return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(e,l) ; }private static  tom.gom.adt.gom.types.Sort  tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList  l) { return  l.getHeadconcSort() ;}private static  tom.gom.adt.gom.types.SortList  tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList  l) { return  l.getTailconcSort() ;}private static boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList  l) { return  l.isEmptyconcSort() ;}   private static   tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyconcSort() ) {       return l2;     } else if( l2.isEmptyconcSort() ) {       return l1;     } else if(  l1.getTailconcSort() .isEmptyconcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,tom_append_list_concSort( l1.getTailconcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( begin.getHeadconcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort( begin.getTailconcSort() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concModule( tom.gom.adt.gom.types.ModuleList  t) { return  ((t instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (t instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ;}private static  tom.gom.adt.gom.types.ModuleList  tom_empty_list_concModule() { return  tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() ; }private static  tom.gom.adt.gom.types.ModuleList  tom_cons_list_concModule( tom.gom.adt.gom.types.Module  e,  tom.gom.adt.gom.types.ModuleList  l) { return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make(e,l) ; }private static  tom.gom.adt.gom.types.Module  tom_get_head_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) { return  l.getHeadconcModule() ;}private static  tom.gom.adt.gom.types.ModuleList  tom_get_tail_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) { return  l.getTailconcModule() ;}private static boolean tom_is_empty_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) { return  l.isEmptyconcModule() ;}   private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_concModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyconcModule() ) {       return l2;     } else if( l2.isEmptyconcModule() ) {       return l1;     } else if(  l1.getTailconcModule() .isEmptyconcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,tom_append_list_concModule( l1.getTailconcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_concModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( begin.getHeadconcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_concModule( begin.getTailconcModule() ,end,tail)) ;     }   }    

  private String packagePath;
  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  public TypeExpander(String packagePath) {
    this.packagePath = packagePath;
  }
  /**
    * We try here to get full sort definitions for each constructs
    * Once the structure is correctly build, we can attach the hooks
    */
  public ModuleList expand(GomModuleList moduleList) {

    /* put a map giving all imported modules for each module in the path */
    buildDependencyMap(moduleList);

    /* collect all sort declarations */
    SortDeclList sortDeclList = tom_empty_list_concSortDecl();
    /* The sorts declared in each module */
    Map sortsForModule = new HashMap();
    GomModuleList consum = moduleList;
    while(!consum.isEmptyconcGomModule()) {
      GomModule module = consum.getHeadconcGomModule();
      consum = consum.getTailconcGomModule();

      Collection decls = getSortDeclarations(module);
      Collection implicitdecls = getSortDeclarationInCodomain(module);

      /* Check that there are no implicit sort declarations
       * Also, check that declared sorts have at least an operator
       */
      if(!decls.containsAll(implicitdecls)) {
        // whine about non declared sorts
        Collection undeclaredSorts = new HashSet();
        undeclaredSorts.addAll(implicitdecls);
        undeclaredSorts.removeAll(decls);
        getLogger().log(Level.WARNING, GomMessage.undeclaredSorts.getMessage(),
            new Object[]{showSortList(undeclaredSorts)});
      }
      if(!implicitdecls.containsAll(decls)) {
        // whine about sorts without operators: this is a real error
        Collection emptySorts = new HashSet();
        emptySorts.addAll(decls);
        emptySorts.removeAll(implicitdecls);
        getLogger().log(Level.SEVERE, GomMessage.emptySorts.getMessage(),
            new Object[]{showSortList(emptySorts)});
        return tom_empty_list_concModule();
      }
      Iterator it = implicitdecls.iterator();
      while(it.hasNext()) {
        SortDecl decl = (SortDecl)it.next();
        sortDeclList = tom_cons_list_concSortDecl(decl,tom_append_list_concSortDecl(sortDeclList,tom_empty_list_concSortDecl()));
      }
      /* Fills sortsForModule */
      it = decls.iterator();
      SortDeclList declaredSorts = tom_empty_list_concSortDecl();
      while(it.hasNext()) {
        SortDecl decl = (SortDecl)it.next();
        declaredSorts = tom_cons_list_concSortDecl(decl,tom_append_list_concSortDecl(declaredSorts,tom_empty_list_concSortDecl()));
      }
      ModuleDecl mdecl = tom_make_ModuleDecl(module.getModuleName(),packagePath);
      sortsForModule.put(mdecl,declaredSorts);
    }

    /* now get all operators for each sort */
    Map operatorsForSort = new HashMap();
    Map hooksForSort = new HashMap();
    consum = moduleList;
    while(!consum.isEmptyconcGomModule()) {
      GomModule module = consum.getHeadconcGomModule();
      consum = consum.getTailconcGomModule();

      // iterate through the productions
      if (tom_is_sort_GomModule(module)) {{  tom.gom.adt.gom.types.GomModule  tomMatch480NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if (tom_is_fun_sym_GomModule(tomMatch480NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch480NameNumber_freshVar_0=tom_get_slot_GomModule_ModuleName(tomMatch480NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.SectionList  tomMatch480NameNumber_freshVar_1=tom_get_slot_GomModule_SectionList(tomMatch480NameNumberfreshSubject_1);if (tom_is_fun_sym_concSection(tomMatch480NameNumber_freshVar_1)) {{  tom.gom.adt.gom.types.SectionList  tomMatch480NameNumber_freshVar_2=tomMatch480NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SectionList  tomMatch480NameNumber_begin_4=tomMatch480NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SectionList  tomMatch480NameNumber_end_5=tomMatch480NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch480NameNumber_freshVar_3=tomMatch480NameNumber_end_5;if (!(tom_is_empty_concSection_SectionList(tomMatch480NameNumber_freshVar_3))) {if (tom_is_fun_sym_Public(tom_get_head_concSection_SectionList(tomMatch480NameNumber_freshVar_3))) {{  tom.gom.adt.gom.types.GrammarList  tomMatch480NameNumber_freshVar_8=tom_get_slot_Public_GrammarList(tom_get_head_concSection_SectionList(tomMatch480NameNumber_freshVar_3));if (tom_is_fun_sym_concGrammar(tomMatch480NameNumber_freshVar_8)) {{  tom.gom.adt.gom.types.GrammarList  tomMatch480NameNumber_freshVar_9=tomMatch480NameNumber_freshVar_8;{  tom.gom.adt.gom.types.GrammarList  tomMatch480NameNumber_begin_11=tomMatch480NameNumber_freshVar_9;{  tom.gom.adt.gom.types.GrammarList  tomMatch480NameNumber_end_12=tomMatch480NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch480NameNumber_freshVar_10=tomMatch480NameNumber_end_12;if (!(tom_is_empty_concGrammar_GrammarList(tomMatch480NameNumber_freshVar_10))) {if (tom_is_fun_sym_Grammar(tom_get_head_concGrammar_GrammarList(tomMatch480NameNumber_freshVar_10))) {{  tom.gom.adt.gom.types.ProductionList  tomMatch480NameNumber_freshVar_15=tom_get_slot_Grammar_ProductionList(tom_get_head_concGrammar_GrammarList(tomMatch480NameNumber_freshVar_10));if (tom_is_fun_sym_concProduction(tomMatch480NameNumber_freshVar_15)) {{  tom.gom.adt.gom.types.ProductionList  tomMatch480NameNumber_freshVar_16=tomMatch480NameNumber_freshVar_15;{  tom.gom.adt.gom.types.ProductionList  tomMatch480NameNumber_begin_18=tomMatch480NameNumber_freshVar_16;{  tom.gom.adt.gom.types.ProductionList  tomMatch480NameNumber_end_19=tomMatch480NameNumber_freshVar_16;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch480NameNumber_freshVar_17=tomMatch480NameNumber_end_19;if (!(tom_is_empty_concProduction_ProductionList(tomMatch480NameNumber_freshVar_17))) {if (tom_is_fun_sym_Production(tom_get_head_concProduction_ProductionList(tomMatch480NameNumber_freshVar_17))) {{  tom.gom.adt.gom.types.ProductionList  tomMatch480NameNumber_freshVar_20=tom_get_tail_concProduction_ProductionList(tomMatch480NameNumber_freshVar_17);{  tom.gom.adt.gom.types.GrammarList  tomMatch480NameNumber_freshVar_13=tom_get_tail_concGrammar_GrammarList(tomMatch480NameNumber_freshVar_10);{  tom.gom.adt.gom.types.SectionList  tomMatch480NameNumber_freshVar_6=tom_get_tail_concSection_SectionList(tomMatch480NameNumber_freshVar_3);if ( true ) {



          // we may want to pass modulename to help resolve ambiguities with modules
          getOperatorDecl(tom_get_head_concProduction_ProductionList(tomMatch480NameNumber_freshVar_17),sortDeclList,operatorsForSort);

        }}}}}}}if (tom_is_empty_concProduction_ProductionList(tomMatch480NameNumber_end_19)) {tomMatch480NameNumber_end_19=tomMatch480NameNumber_begin_18;} else {tomMatch480NameNumber_end_19=tom_get_tail_concProduction_ProductionList(tomMatch480NameNumber_end_19);}}} while(!(tom_equal_term_ProductionList(tomMatch480NameNumber_end_19, tomMatch480NameNumber_begin_18)));}}}}}}}}if (tom_is_empty_concGrammar_GrammarList(tomMatch480NameNumber_end_12)) {tomMatch480NameNumber_end_12=tomMatch480NameNumber_begin_11;} else {tomMatch480NameNumber_end_12=tom_get_tail_concGrammar_GrammarList(tomMatch480NameNumber_end_12);}}} while(!(tom_equal_term_GrammarList(tomMatch480NameNumber_end_12, tomMatch480NameNumber_begin_11)));}}}}}}}}if (tom_is_empty_concSection_SectionList(tomMatch480NameNumber_end_5)) {tomMatch480NameNumber_end_5=tomMatch480NameNumber_begin_4;} else {tomMatch480NameNumber_end_5=tom_get_tail_concSection_SectionList(tomMatch480NameNumber_end_5);}}} while(!(tom_equal_term_SectionList(tomMatch480NameNumber_end_5, tomMatch480NameNumber_begin_4)));}}}}}}}}}

    }

    /*
     * build the module list using the map
     * since we already checked that the declared and used sorts do match, we
     * can use the map alone
     */
    ModuleList resultModuleList = tom_empty_list_concModule();
    Iterator it = sortsForModule.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ModuleDecl mdecl = (ModuleDecl) entry.getKey();
      SortDeclList sdeclList = (SortDeclList) entry.getValue();
      SortList sortList = tom_empty_list_concSort();
      if (tom_is_sort_SortDeclList(sdeclList)) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch481NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortDeclList )sdeclList);if (tom_is_fun_sym_concSortDecl(tomMatch481NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch481NameNumber_freshVar_0=tomMatch481NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortDeclList  tomMatch481NameNumber_begin_2=tomMatch481NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortDeclList  tomMatch481NameNumber_end_3=tomMatch481NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortDeclList  tomMatch481NameNumber_freshVar_1=tomMatch481NameNumber_end_3;if (!(tom_is_empty_concSortDecl_SortDeclList(tomMatch481NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.SortDecl  tom_sdecl=tom_get_head_concSortDecl_SortDeclList(tomMatch481NameNumber_freshVar_1);{  tom.gom.adt.gom.types.SortDeclList  tomMatch481NameNumber_freshVar_4=tom_get_tail_concSortDecl_SortDeclList(tomMatch481NameNumber_freshVar_1);if ( true ) {

          OperatorDeclList opdecl = (OperatorDeclList)
            operatorsForSort.get(tom_sdecl);
          Sort fullSort = tom_make_Sort(tom_sdecl,opdecl);
          if(checkSortValidity(fullSort)) {
            sortList = tom_cons_list_concSort(fullSort,tom_append_list_concSort(sortList,tom_empty_list_concSort()));
          }
        }}}}}if (tom_is_empty_concSortDecl_SortDeclList(tomMatch481NameNumber_end_3)) {tomMatch481NameNumber_end_3=tomMatch481NameNumber_begin_2;} else {tomMatch481NameNumber_end_3=tom_get_tail_concSortDecl_SortDeclList(tomMatch481NameNumber_end_3);}}} while(!(tom_equal_term_SortDeclList(tomMatch481NameNumber_end_3, tomMatch481NameNumber_begin_2)));}}}}}}

      resultModuleList = tom_cons_list_concModule(tom_make_Module(mdecl,sortList),tom_append_list_concModule(resultModuleList,tom_empty_list_concModule()))

;
    }
    return resultModuleList;
  }

  /*
   * Get an OperatorDecl from a Production, using the list of sort declarations
   * XXX: There is huge room for efficiency improvement, as we could use a map
   * sortName -> sortDeclList instead of a simple list
   */
  private OperatorDecl getOperatorDecl(Production prod,
      SortDeclList sortDeclList,
      Map operatorsForSort) {

    if (tom_is_sort_Production(prod)) {{  tom.gom.adt.gom.types.Production  tomMatch482NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )prod);if (tom_is_fun_sym_Production(tomMatch482NameNumberfreshSubject_1)) {{  String  tomMatch482NameNumber_freshVar_0=tom_get_slot_Production_Name(tomMatch482NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.FieldList  tomMatch482NameNumber_freshVar_1=tom_get_slot_Production_Domain(tomMatch482NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.GomType  tomMatch482NameNumber_freshVar_2=tom_get_slot_Production_Codomain(tomMatch482NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.Option  tomMatch482NameNumber_freshVar_3=tom_get_slot_Production_Option(tomMatch482NameNumberfreshSubject_1);if (tom_is_fun_sym_GomType(tomMatch482NameNumber_freshVar_2)) {{  String  tomMatch482NameNumber_freshVar_4=tom_get_slot_GomType_Name(tomMatch482NameNumber_freshVar_2);if ( true ) {

        SortDecl codomainSort = declFromTypename(tomMatch482NameNumber_freshVar_4,sortDeclList);
        TypedProduction domainSorts = typedProduction(tomMatch482NameNumber_freshVar_1,sortDeclList);
        OperatorDecl decl = tom_make_OperatorDecl(tomMatch482NameNumber_freshVar_0,codomainSort,domainSorts);
        if (operatorsForSort.containsKey(codomainSort)) {
          OperatorDeclList list = (OperatorDeclList) operatorsForSort.get(codomainSort);
          operatorsForSort.put(codomainSort,tom_cons_list_concOperator(decl,tom_append_list_concOperator(list,tom_empty_list_concOperator())));
        } else {
          operatorsForSort.put(codomainSort,tom_cons_list_concOperator(decl,tom_empty_list_concOperator()));
        }
        return decl;
      }}}}}}}}}}

    throw new GomRuntimeException(
        "TypeExpander::getOperatorDecl: wrong Production?");
  }

  private SortDecl declFromTypename(String typename,
                                    SortDeclList sortDeclList) {
    if (environment().isBuiltinSort(typename)) {
      return environment().builtinSort(typename);
    }
    if (tom_is_sort_SortDeclList(sortDeclList)) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch483NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortDeclList )sortDeclList);if (tom_is_fun_sym_concSortDecl(tomMatch483NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SortDeclList  tomMatch483NameNumber_freshVar_0=tomMatch483NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortDeclList  tomMatch483NameNumber_begin_2=tomMatch483NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortDeclList  tomMatch483NameNumber_end_3=tomMatch483NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortDeclList  tomMatch483NameNumber_freshVar_1=tomMatch483NameNumber_end_3;if (!(tom_is_empty_concSortDecl_SortDeclList(tomMatch483NameNumber_freshVar_1))) {if (tom_is_fun_sym_SortDecl(tom_get_head_concSortDecl_SortDeclList(tomMatch483NameNumber_freshVar_1))) {{  String  tomMatch483NameNumber_freshVar_6=tom_get_slot_SortDecl_Name(tom_get_head_concSortDecl_SortDeclList(tomMatch483NameNumber_freshVar_1));{  tom.gom.adt.gom.types.SortDeclList  tomMatch483NameNumber_freshVar_4=tom_get_tail_concSortDecl_SortDeclList(tomMatch483NameNumber_freshVar_1);if ( true ) {

        if (typename.equals(tomMatch483NameNumber_freshVar_6)) {
          return tom_get_head_concSortDecl_SortDeclList(tomMatch483NameNumber_freshVar_1);
        }
      }}}}}}if (tom_is_empty_concSortDecl_SortDeclList(tomMatch483NameNumber_end_3)) {tomMatch483NameNumber_end_3=tomMatch483NameNumber_begin_2;} else {tomMatch483NameNumber_end_3=tom_get_tail_concSortDecl_SortDeclList(tomMatch483NameNumber_end_3);}}} while(!(tom_equal_term_SortDeclList(tomMatch483NameNumber_end_3, tomMatch483NameNumber_begin_2)));}}}}}}

    getLogger().log(Level.SEVERE, GomMessage.unknownSort.getMessage(),
        new Object[]{typename});
    /* If the sort is not known, assume it is a builtin */
    return tom_make_BuiltinSortDecl(typename);
  }

  private TypedProduction typedProduction(FieldList domain, SortDeclList sortDeclList) {
    if (tom_is_sort_FieldList(domain)) {{  tom.gom.adt.gom.types.FieldList  tomMatch484NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.FieldList )domain);if (tom_is_fun_sym_concField(tomMatch484NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.FieldList  tomMatch484NameNumber_freshVar_0=tomMatch484NameNumberfreshSubject_1;if (!(tom_is_empty_concField_FieldList(tomMatch484NameNumber_freshVar_0))) {if (tom_is_fun_sym_StarredField(tom_get_head_concField_FieldList(tomMatch484NameNumber_freshVar_0))) {{  tom.gom.adt.gom.types.GomType  tomMatch484NameNumber_freshVar_2=tom_get_slot_StarredField_FieldType(tom_get_head_concField_FieldList(tomMatch484NameNumber_freshVar_0));if (tom_is_fun_sym_GomType(tomMatch484NameNumber_freshVar_2)) {{  String  tomMatch484NameNumber_freshVar_3=tom_get_slot_GomType_Name(tomMatch484NameNumber_freshVar_2);{  tom.gom.adt.gom.types.FieldList  tomMatch484NameNumber_freshVar_1=tom_get_tail_concField_FieldList(tomMatch484NameNumber_freshVar_0);if (tom_is_empty_concField_FieldList(tomMatch484NameNumber_freshVar_1)) {if ( true ) {

        return tom_make_Variadic(declFromTypename(tomMatch484NameNumber_freshVar_3,sortDeclList));
      }}}}}}}}}}if (tom_is_fun_sym_concField(tomMatch484NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.FieldList  tomMatch484NameNumber_freshVar_4=tomMatch484NameNumberfreshSubject_1;if ( true ) {

        return tom_make_Slots(typedSlotList(tomMatch484NameNumber_freshVar_4,sortDeclList));
      }}}}}

    // the error message could be more refined
    throw new GomRuntimeException("TypeExpander::typedProduction: illformed Production");
  }

  private SlotList typedSlotList(FieldList fields, SortDeclList sortDeclList) {
    if (tom_is_sort_FieldList(fields)) {{  tom.gom.adt.gom.types.FieldList  tomMatch485NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.FieldList )fields);if (tom_is_fun_sym_concField(tomMatch485NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.FieldList  tomMatch485NameNumber_freshVar_0=tomMatch485NameNumberfreshSubject_1;if (tom_is_empty_concField_FieldList(tomMatch485NameNumber_freshVar_0)) {if ( true ) {

        return tom_empty_list_concSlot();
      }}}}if (tom_is_fun_sym_concField(tomMatch485NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.FieldList  tomMatch485NameNumber_freshVar_1=tomMatch485NameNumberfreshSubject_1;if (!(tom_is_empty_concField_FieldList(tomMatch485NameNumber_freshVar_1))) {if (tom_is_fun_sym_NamedField(tom_get_head_concField_FieldList(tomMatch485NameNumber_freshVar_1))) {{  String  tomMatch485NameNumber_freshVar_5=tom_get_slot_NamedField_Name(tom_get_head_concField_FieldList(tomMatch485NameNumber_freshVar_1));{  tom.gom.adt.gom.types.GomType  tomMatch485NameNumber_freshVar_6=tom_get_slot_NamedField_FieldType(tom_get_head_concField_FieldList(tomMatch485NameNumber_freshVar_1));if (tom_is_fun_sym_GomType(tomMatch485NameNumber_freshVar_6)) {{  String  tomMatch485NameNumber_freshVar_7=tom_get_slot_GomType_Name(tomMatch485NameNumber_freshVar_6);{  tom.gom.adt.gom.types.FieldList  tomMatch485NameNumber_freshVar_2=tom_get_tail_concField_FieldList(tomMatch485NameNumber_freshVar_1);if ( true ) {

        SlotList newtail = typedSlotList(tomMatch485NameNumber_freshVar_2,sortDeclList);
        return tom_cons_list_concSlot(tom_make_Slot(tomMatch485NameNumber_freshVar_5,declFromTypename(tomMatch485NameNumber_freshVar_7,sortDeclList)),tom_append_list_concSlot(newtail,tom_empty_list_concSlot()));
      }}}}}}}}}}}}

    getLogger().log(Level.SEVERE, GomMessage.malformedProduction.getMessage(),
        new Object[]{fields.toString()});
    return tom_empty_list_concSlot();
  }

  /*
   * Get all sort declarations in a module
   */
  private Collection getSortDeclarations(GomModule module) {
    Collection result = new HashSet();
    if (tom_is_sort_GomModule(module)) {{  tom.gom.adt.gom.types.GomModule  tomMatch486NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if (tom_is_fun_sym_GomModule(tomMatch486NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch486NameNumber_freshVar_0=tom_get_slot_GomModule_ModuleName(tomMatch486NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.SectionList  tomMatch486NameNumber_freshVar_1=tom_get_slot_GomModule_SectionList(tomMatch486NameNumberfreshSubject_1);if (tom_is_fun_sym_concSection(tomMatch486NameNumber_freshVar_1)) {{  tom.gom.adt.gom.types.SectionList  tomMatch486NameNumber_freshVar_2=tomMatch486NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SectionList  tomMatch486NameNumber_begin_4=tomMatch486NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SectionList  tomMatch486NameNumber_end_5=tomMatch486NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch486NameNumber_freshVar_3=tomMatch486NameNumber_end_5;if (!(tom_is_empty_concSection_SectionList(tomMatch486NameNumber_freshVar_3))) {if (tom_is_fun_sym_Public(tom_get_head_concSection_SectionList(tomMatch486NameNumber_freshVar_3))) {{  tom.gom.adt.gom.types.GrammarList  tomMatch486NameNumber_freshVar_8=tom_get_slot_Public_GrammarList(tom_get_head_concSection_SectionList(tomMatch486NameNumber_freshVar_3));if (tom_is_fun_sym_concGrammar(tomMatch486NameNumber_freshVar_8)) {{  tom.gom.adt.gom.types.GrammarList  tomMatch486NameNumber_freshVar_9=tomMatch486NameNumber_freshVar_8;{  tom.gom.adt.gom.types.GrammarList  tomMatch486NameNumber_begin_11=tomMatch486NameNumber_freshVar_9;{  tom.gom.adt.gom.types.GrammarList  tomMatch486NameNumber_end_12=tomMatch486NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch486NameNumber_freshVar_10=tomMatch486NameNumber_end_12;if (!(tom_is_empty_concGrammar_GrammarList(tomMatch486NameNumber_freshVar_10))) {if (tom_is_fun_sym_Sorts(tom_get_head_concGrammar_GrammarList(tomMatch486NameNumber_freshVar_10))) {{  tom.gom.adt.gom.types.GomTypeList  tomMatch486NameNumber_freshVar_15=tom_get_slot_Sorts_TypeList(tom_get_head_concGrammar_GrammarList(tomMatch486NameNumber_freshVar_10));if (tom_is_fun_sym_concGomType(tomMatch486NameNumber_freshVar_15)) {{  tom.gom.adt.gom.types.GomTypeList  tomMatch486NameNumber_freshVar_16=tomMatch486NameNumber_freshVar_15;{  tom.gom.adt.gom.types.GomTypeList  tomMatch486NameNumber_begin_18=tomMatch486NameNumber_freshVar_16;{  tom.gom.adt.gom.types.GomTypeList  tomMatch486NameNumber_end_19=tomMatch486NameNumber_freshVar_16;do {{{  tom.gom.adt.gom.types.GomTypeList  tomMatch486NameNumber_freshVar_17=tomMatch486NameNumber_end_19;if (!(tom_is_empty_concGomType_GomTypeList(tomMatch486NameNumber_freshVar_17))) {if (tom_is_fun_sym_GomType(tom_get_head_concGomType_GomTypeList(tomMatch486NameNumber_freshVar_17))) {{  String  tomMatch486NameNumber_freshVar_22=tom_get_slot_GomType_Name(tom_get_head_concGomType_GomTypeList(tomMatch486NameNumber_freshVar_17));{  tom.gom.adt.gom.types.GomTypeList  tomMatch486NameNumber_freshVar_20=tom_get_tail_concGomType_GomTypeList(tomMatch486NameNumber_freshVar_17);{  tom.gom.adt.gom.types.GrammarList  tomMatch486NameNumber_freshVar_13=tom_get_tail_concGrammar_GrammarList(tomMatch486NameNumber_freshVar_10);{  tom.gom.adt.gom.types.SectionList  tomMatch486NameNumber_freshVar_6=tom_get_tail_concSection_SectionList(tomMatch486NameNumber_freshVar_3);if ( true ) {



        result.add(tom_make_SortDecl(tomMatch486NameNumber_freshVar_22,tom_make_ModuleDecl(tomMatch486NameNumber_freshVar_0,packagePath)));
      }}}}}}}}if (tom_is_empty_concGomType_GomTypeList(tomMatch486NameNumber_end_19)) {tomMatch486NameNumber_end_19=tomMatch486NameNumber_begin_18;} else {tomMatch486NameNumber_end_19=tom_get_tail_concGomType_GomTypeList(tomMatch486NameNumber_end_19);}}} while(!(tom_equal_term_GomTypeList(tomMatch486NameNumber_end_19, tomMatch486NameNumber_begin_18)));}}}}}}}}if (tom_is_empty_concGrammar_GrammarList(tomMatch486NameNumber_end_12)) {tomMatch486NameNumber_end_12=tomMatch486NameNumber_begin_11;} else {tomMatch486NameNumber_end_12=tom_get_tail_concGrammar_GrammarList(tomMatch486NameNumber_end_12);}}} while(!(tom_equal_term_GrammarList(tomMatch486NameNumber_end_12, tomMatch486NameNumber_begin_11)));}}}}}}}}if (tom_is_empty_concSection_SectionList(tomMatch486NameNumber_end_5)) {tomMatch486NameNumber_end_5=tomMatch486NameNumber_begin_4;} else {tomMatch486NameNumber_end_5=tom_get_tail_concSection_SectionList(tomMatch486NameNumber_end_5);}}} while(!(tom_equal_term_SectionList(tomMatch486NameNumber_end_5, tomMatch486NameNumber_begin_4)));}}}}}}}}}

    return result;
  }

  /*
   * Get all sort uses in a module (as codomain of an operator)
   */
  private Collection getSortDeclarationInCodomain(GomModule module) {
    Collection result = new HashSet();
    if (tom_is_sort_GomModule(module)) {{  tom.gom.adt.gom.types.GomModule  tomMatch487NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if (tom_is_fun_sym_GomModule(tomMatch487NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch487NameNumber_freshVar_0=tom_get_slot_GomModule_ModuleName(tomMatch487NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.SectionList  tomMatch487NameNumber_freshVar_1=tom_get_slot_GomModule_SectionList(tomMatch487NameNumberfreshSubject_1);if (tom_is_fun_sym_concSection(tomMatch487NameNumber_freshVar_1)) {{  tom.gom.adt.gom.types.SectionList  tomMatch487NameNumber_freshVar_2=tomMatch487NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SectionList  tomMatch487NameNumber_begin_4=tomMatch487NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SectionList  tomMatch487NameNumber_end_5=tomMatch487NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch487NameNumber_freshVar_3=tomMatch487NameNumber_end_5;if (!(tom_is_empty_concSection_SectionList(tomMatch487NameNumber_freshVar_3))) {if (tom_is_fun_sym_Public(tom_get_head_concSection_SectionList(tomMatch487NameNumber_freshVar_3))) {{  tom.gom.adt.gom.types.GrammarList  tomMatch487NameNumber_freshVar_8=tom_get_slot_Public_GrammarList(tom_get_head_concSection_SectionList(tomMatch487NameNumber_freshVar_3));if (tom_is_fun_sym_concGrammar(tomMatch487NameNumber_freshVar_8)) {{  tom.gom.adt.gom.types.GrammarList  tomMatch487NameNumber_freshVar_9=tomMatch487NameNumber_freshVar_8;{  tom.gom.adt.gom.types.GrammarList  tomMatch487NameNumber_begin_11=tomMatch487NameNumber_freshVar_9;{  tom.gom.adt.gom.types.GrammarList  tomMatch487NameNumber_end_12=tomMatch487NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch487NameNumber_freshVar_10=tomMatch487NameNumber_end_12;if (!(tom_is_empty_concGrammar_GrammarList(tomMatch487NameNumber_freshVar_10))) {if (tom_is_fun_sym_Grammar(tom_get_head_concGrammar_GrammarList(tomMatch487NameNumber_freshVar_10))) {{  tom.gom.adt.gom.types.ProductionList  tomMatch487NameNumber_freshVar_15=tom_get_slot_Grammar_ProductionList(tom_get_head_concGrammar_GrammarList(tomMatch487NameNumber_freshVar_10));if (tom_is_fun_sym_concProduction(tomMatch487NameNumber_freshVar_15)) {{  tom.gom.adt.gom.types.ProductionList  tomMatch487NameNumber_freshVar_16=tomMatch487NameNumber_freshVar_15;{  tom.gom.adt.gom.types.ProductionList  tomMatch487NameNumber_begin_18=tomMatch487NameNumber_freshVar_16;{  tom.gom.adt.gom.types.ProductionList  tomMatch487NameNumber_end_19=tomMatch487NameNumber_freshVar_16;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch487NameNumber_freshVar_17=tomMatch487NameNumber_end_19;if (!(tom_is_empty_concProduction_ProductionList(tomMatch487NameNumber_freshVar_17))) {if (tom_is_fun_sym_Production(tom_get_head_concProduction_ProductionList(tomMatch487NameNumber_freshVar_17))) {{  String  tomMatch487NameNumber_freshVar_22=tom_get_slot_Production_Name(tom_get_head_concProduction_ProductionList(tomMatch487NameNumber_freshVar_17));{  tom.gom.adt.gom.types.FieldList  tomMatch487NameNumber_freshVar_23=tom_get_slot_Production_Domain(tom_get_head_concProduction_ProductionList(tomMatch487NameNumber_freshVar_17));{  tom.gom.adt.gom.types.GomType  tomMatch487NameNumber_freshVar_24=tom_get_slot_Production_Codomain(tom_get_head_concProduction_ProductionList(tomMatch487NameNumber_freshVar_17));{  tom.gom.adt.gom.types.Option  tomMatch487NameNumber_freshVar_25=tom_get_slot_Production_Option(tom_get_head_concProduction_ProductionList(tomMatch487NameNumber_freshVar_17));if (tom_is_fun_sym_GomType(tomMatch487NameNumber_freshVar_24)) {{  String  tomMatch487NameNumber_freshVar_26=tom_get_slot_GomType_Name(tomMatch487NameNumber_freshVar_24);{  tom.gom.adt.gom.types.ProductionList  tomMatch487NameNumber_freshVar_20=tom_get_tail_concProduction_ProductionList(tomMatch487NameNumber_freshVar_17);{  tom.gom.adt.gom.types.GrammarList  tomMatch487NameNumber_freshVar_13=tom_get_tail_concGrammar_GrammarList(tomMatch487NameNumber_freshVar_10);{  tom.gom.adt.gom.types.SectionList  tomMatch487NameNumber_freshVar_6=tom_get_tail_concSection_SectionList(tomMatch487NameNumber_freshVar_3);if ( true ) {











        result.add(tom_make_SortDecl(tomMatch487NameNumber_freshVar_26,tom_make_ModuleDecl(tomMatch487NameNumber_freshVar_0,packagePath)));
      }}}}}}}}}}}}}if (tom_is_empty_concProduction_ProductionList(tomMatch487NameNumber_end_19)) {tomMatch487NameNumber_end_19=tomMatch487NameNumber_begin_18;} else {tomMatch487NameNumber_end_19=tom_get_tail_concProduction_ProductionList(tomMatch487NameNumber_end_19);}}} while(!(tom_equal_term_ProductionList(tomMatch487NameNumber_end_19, tomMatch487NameNumber_begin_18)));}}}}}}}}if (tom_is_empty_concGrammar_GrammarList(tomMatch487NameNumber_end_12)) {tomMatch487NameNumber_end_12=tomMatch487NameNumber_begin_11;} else {tomMatch487NameNumber_end_12=tom_get_tail_concGrammar_GrammarList(tomMatch487NameNumber_end_12);}}} while(!(tom_equal_term_GrammarList(tomMatch487NameNumber_end_12, tomMatch487NameNumber_begin_11)));}}}}}}}}if (tom_is_empty_concSection_SectionList(tomMatch487NameNumber_end_5)) {tomMatch487NameNumber_end_5=tomMatch487NameNumber_begin_4;} else {tomMatch487NameNumber_end_5=tom_get_tail_concSection_SectionList(tomMatch487NameNumber_end_5);}}} while(!(tom_equal_term_SectionList(tomMatch487NameNumber_end_5, tomMatch487NameNumber_begin_4)));}}}}}}}}}

    return result;
  }

  /**
   * Get directly imported modules. Skip builtins
   *
   * @param module the main module with imports
   * @return the Collection of imported GomModuleName
   */
  private Collection getImportedModules(GomModule module) {
    Set imports = new HashSet();
    if (tom_is_sort_GomModule(module)) {{  tom.gom.adt.gom.types.GomModule  tomMatch488NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if (tom_is_fun_sym_GomModule(tomMatch488NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch488NameNumber_freshVar_0=tom_get_slot_GomModule_ModuleName(tomMatch488NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.SectionList  tomMatch488NameNumber_freshVar_1=tom_get_slot_GomModule_SectionList(tomMatch488NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.SectionList  tom_sectionList=tomMatch488NameNumber_freshVar_1;if ( true ) {

        imports.add(tomMatch488NameNumber_freshVar_0);
        if (tom_is_sort_SectionList(tom_sectionList)) {{  tom.gom.adt.gom.types.SectionList  tomMatch489NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SectionList )tom_sectionList);if (tom_is_fun_sym_concSection(tomMatch489NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SectionList  tomMatch489NameNumber_freshVar_0=tomMatch489NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SectionList  tomMatch489NameNumber_begin_2=tomMatch489NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SectionList  tomMatch489NameNumber_end_3=tomMatch489NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch489NameNumber_freshVar_1=tomMatch489NameNumber_end_3;if (!(tom_is_empty_concSection_SectionList(tomMatch489NameNumber_freshVar_1))) {if (tom_is_fun_sym_Imports(tom_get_head_concSection_SectionList(tomMatch489NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.ImportList  tomMatch489NameNumber_freshVar_6=tom_get_slot_Imports_ImportList(tom_get_head_concSection_SectionList(tomMatch489NameNumber_freshVar_1));if (tom_is_fun_sym_concImportedModule(tomMatch489NameNumber_freshVar_6)) {{  tom.gom.adt.gom.types.ImportList  tomMatch489NameNumber_freshVar_7=tomMatch489NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ImportList  tomMatch489NameNumber_begin_9=tomMatch489NameNumber_freshVar_7;{  tom.gom.adt.gom.types.ImportList  tomMatch489NameNumber_end_10=tomMatch489NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.ImportList  tomMatch489NameNumber_freshVar_8=tomMatch489NameNumber_end_10;if (!(tom_is_empty_concImportedModule_ImportList(tomMatch489NameNumber_freshVar_8))) {if (tom_is_fun_sym_Import(tom_get_head_concImportedModule_ImportList(tomMatch489NameNumber_freshVar_8))) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch489NameNumber_freshVar_13=tom_get_slot_Import_ModuleName(tom_get_head_concImportedModule_ImportList(tomMatch489NameNumber_freshVar_8));if (tom_is_fun_sym_GomModuleName(tomMatch489NameNumber_freshVar_13)) {{  String  tomMatch489NameNumber_freshVar_14=tom_get_slot_GomModuleName_Name(tomMatch489NameNumber_freshVar_13);{  tom.gom.adt.gom.types.ImportList  tomMatch489NameNumber_freshVar_11=tom_get_tail_concImportedModule_ImportList(tomMatch489NameNumber_freshVar_8);{  tom.gom.adt.gom.types.SectionList  tomMatch489NameNumber_freshVar_4=tom_get_tail_concSection_SectionList(tomMatch489NameNumber_freshVar_1);if ( true ) {





            if (!environment().isBuiltin(tomMatch489NameNumber_freshVar_14)) {
              imports.add(tomMatch489NameNumber_freshVar_13);
            }
          }}}}}}}}}if (tom_is_empty_concImportedModule_ImportList(tomMatch489NameNumber_end_10)) {tomMatch489NameNumber_end_10=tomMatch489NameNumber_begin_9;} else {tomMatch489NameNumber_end_10=tom_get_tail_concImportedModule_ImportList(tomMatch489NameNumber_end_10);}}} while(!(tom_equal_term_ImportList(tomMatch489NameNumber_end_10, tomMatch489NameNumber_begin_9)));}}}}}}}}if (tom_is_empty_concSection_SectionList(tomMatch489NameNumber_end_3)) {tomMatch489NameNumber_end_3=tomMatch489NameNumber_begin_2;} else {tomMatch489NameNumber_end_3=tom_get_tail_concSection_SectionList(tomMatch489NameNumber_end_3);}}} while(!(tom_equal_term_SectionList(tomMatch489NameNumber_end_3, tomMatch489NameNumber_begin_2)));}}}}}}

      }}}}}}}

    return imports;
  }

  private GomModule getModule(GomModuleName modname, GomModuleList list) {
    if (tom_is_sort_GomModuleList(list)) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch490NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModuleList )list);if (tom_is_fun_sym_concGomModule(tomMatch490NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch490NameNumber_freshVar_0=tomMatch490NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.GomModuleList  tomMatch490NameNumber_begin_2=tomMatch490NameNumber_freshVar_0;{  tom.gom.adt.gom.types.GomModuleList  tomMatch490NameNumber_end_3=tomMatch490NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.GomModuleList  tomMatch490NameNumber_freshVar_1=tomMatch490NameNumber_end_3;if (!(tom_is_empty_concGomModule_GomModuleList(tomMatch490NameNumber_freshVar_1))) {if (tom_is_fun_sym_GomModule(tom_get_head_concGomModule_GomModuleList(tomMatch490NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch490NameNumber_freshVar_6=tom_get_slot_GomModule_ModuleName(tom_get_head_concGomModule_GomModuleList(tomMatch490NameNumber_freshVar_1));{  tom.gom.adt.gom.types.GomModuleList  tomMatch490NameNumber_freshVar_4=tom_get_tail_concGomModule_GomModuleList(tomMatch490NameNumber_freshVar_1);if ( true ) {

        if (tomMatch490NameNumber_freshVar_6.equals(modname)) {
          return tom_get_head_concGomModule_GomModuleList(tomMatch490NameNumber_freshVar_1);
        }
      }}}}}}if (tom_is_empty_concGomModule_GomModuleList(tomMatch490NameNumber_end_3)) {tomMatch490NameNumber_end_3=tomMatch490NameNumber_begin_2;} else {tomMatch490NameNumber_end_3=tom_get_tail_concGomModule_GomModuleList(tomMatch490NameNumber_end_3);}}} while(!(tom_equal_term_GomModuleList(tomMatch490NameNumber_end_3, tomMatch490NameNumber_begin_2)));}}}}}}

    throw new GomRuntimeException("Module "+ modname +" not present");
  }

  private Collection getTransitiveClosureImports(GomModule module,
      GomModuleList moduleList) {
    Set imported = new HashSet();
    imported.addAll(getImportedModules(module));

    Set newSet = new HashSet();
    while(!newSet.equals(imported)) {
      newSet.addAll(imported);
      imported.addAll(newSet);
      Iterator it = imported.iterator();
      while(it.hasNext()) {
        GomModuleName modname = (GomModuleName) it.next();
        newSet.addAll(getImportedModules(getModule(modname,moduleList)));
      }
    }
    return newSet;
  }

  private void buildDependencyMap(GomModuleList moduleList) {
    if (tom_is_sort_GomModuleList(moduleList)) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch491NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModuleList )moduleList);if (tom_is_fun_sym_concGomModule(tomMatch491NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch491NameNumber_freshVar_0=tomMatch491NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.GomModuleList  tomMatch491NameNumber_begin_2=tomMatch491NameNumber_freshVar_0;{  tom.gom.adt.gom.types.GomModuleList  tomMatch491NameNumber_end_3=tomMatch491NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.GomModuleList  tomMatch491NameNumber_freshVar_1=tomMatch491NameNumber_end_3;if (!(tom_is_empty_concGomModule_GomModuleList(tomMatch491NameNumber_freshVar_1))) {if (tom_is_fun_sym_GomModule(tom_get_head_concGomModule_GomModuleList(tomMatch491NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch491NameNumber_freshVar_6=tom_get_slot_GomModule_ModuleName(tom_get_head_concGomModule_GomModuleList(tomMatch491NameNumber_freshVar_1));{  tom.gom.adt.gom.types.GomModuleList  tomMatch491NameNumber_freshVar_4=tom_get_tail_concGomModule_GomModuleList(tomMatch491NameNumber_freshVar_1);if ( true ) {

        ModuleDeclList importsModuleDeclList = tom_empty_list_concModuleDecl();
        Iterator it = getTransitiveClosureImports(tom_get_head_concGomModule_GomModuleList(tomMatch491NameNumber_freshVar_1),moduleList).iterator();
        while(it.hasNext()) {
          GomModuleName importedModuleName = (GomModuleName) it.next();
          importsModuleDeclList = 
            tom_cons_list_concModuleDecl(tom_make_ModuleDecl(importedModuleName,packagePath),tom_append_list_concModuleDecl(importsModuleDeclList,tom_empty_list_concModuleDecl()))
;
        }
        environment().addModuleDependency(
            tom_make_ModuleDecl(tomMatch491NameNumber_freshVar_6,packagePath),importsModuleDeclList);
      }}}}}}if (tom_is_empty_concGomModule_GomModuleList(tomMatch491NameNumber_end_3)) {tomMatch491NameNumber_end_3=tomMatch491NameNumber_begin_2;} else {tomMatch491NameNumber_end_3=tom_get_tail_concGomModule_GomModuleList(tomMatch491NameNumber_end_3);}}} while(!(tom_equal_term_GomModuleList(tomMatch491NameNumber_end_3, tomMatch491NameNumber_begin_2)));}}}}}}

  }

  private boolean checkSortValidity(Sort sort) {
    boolean valid = true;
    // check if the same slot name is used with different types
    Map mapNameType = new HashMap();
    if (tom_is_sort_Sort(sort)) {{  tom.gom.adt.gom.types.Sort  tomMatch492NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Sort )sort);if (tom_is_fun_sym_Sort(tomMatch492NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch492NameNumber_freshVar_0=tom_get_slot_Sort_Operators(tomMatch492NameNumberfreshSubject_1);if (tom_is_fun_sym_concOperator(tomMatch492NameNumber_freshVar_0)) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch492NameNumber_freshVar_1=tomMatch492NameNumber_freshVar_0;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch492NameNumber_begin_3=tomMatch492NameNumber_freshVar_1;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch492NameNumber_end_4=tomMatch492NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch492NameNumber_freshVar_2=tomMatch492NameNumber_end_4;if (!(tom_is_empty_concOperator_OperatorDeclList(tomMatch492NameNumber_freshVar_2))) {if (tom_is_fun_sym_OperatorDecl(tom_get_head_concOperator_OperatorDeclList(tomMatch492NameNumber_freshVar_2))) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch492NameNumber_freshVar_7=tom_get_slot_OperatorDecl_Prod(tom_get_head_concOperator_OperatorDeclList(tomMatch492NameNumber_freshVar_2));if (tom_is_fun_sym_Slots(tomMatch492NameNumber_freshVar_7)) {{  tom.gom.adt.gom.types.SlotList  tomMatch492NameNumber_freshVar_8=tom_get_slot_Slots_Slots(tomMatch492NameNumber_freshVar_7);if (tom_is_fun_sym_concSlot(tomMatch492NameNumber_freshVar_8)) {{  tom.gom.adt.gom.types.SlotList  tomMatch492NameNumber_freshVar_9=tomMatch492NameNumber_freshVar_8;{  tom.gom.adt.gom.types.SlotList  tomMatch492NameNumber_begin_11=tomMatch492NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SlotList  tomMatch492NameNumber_end_12=tomMatch492NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.SlotList  tomMatch492NameNumber_freshVar_10=tomMatch492NameNumber_end_12;if (!(tom_is_empty_concSlot_SlotList(tomMatch492NameNumber_freshVar_10))) {if (tom_is_fun_sym_Slot(tom_get_head_concSlot_SlotList(tomMatch492NameNumber_freshVar_10))) {{  String  tomMatch492NameNumber_freshVar_15=tom_get_slot_Slot_Name(tom_get_head_concSlot_SlotList(tomMatch492NameNumber_freshVar_10));{  tom.gom.adt.gom.types.SortDecl  tomMatch492NameNumber_freshVar_16=tom_get_slot_Slot_Sort(tom_get_head_concSlot_SlotList(tomMatch492NameNumber_freshVar_10));{  String  tom_slotName=tomMatch492NameNumber_freshVar_15;{  tom.gom.adt.gom.types.SortDecl  tom_slotSort=tomMatch492NameNumber_freshVar_16;{  tom.gom.adt.gom.types.SlotList  tomMatch492NameNumber_freshVar_13=tom_get_tail_concSlot_SlotList(tomMatch492NameNumber_freshVar_10);{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch492NameNumber_freshVar_5=tom_get_tail_concOperator_OperatorDeclList(tomMatch492NameNumber_freshVar_2);if ( true ) {





        if(!mapNameType.containsKey(tom_slotName)) {
          mapNameType.put(tom_slotName,tom_slotSort);
        } else {
          SortDecl prevSort = (SortDecl) mapNameType.get(tom_slotName);
          if (!prevSort.equals(tom_slotSort)) {
            getLogger().log(Level.SEVERE,
                GomMessage.slotIncompatibleTypes.getMessage(),
                new Object[]{(tom_slotName),prevSort.getName(),
                             (tom_slotSort).getName()});
            valid = false;
          }
        }
      }}}}}}}}}}if (tom_is_empty_concSlot_SlotList(tomMatch492NameNumber_end_12)) {tomMatch492NameNumber_end_12=tomMatch492NameNumber_begin_11;} else {tomMatch492NameNumber_end_12=tom_get_tail_concSlot_SlotList(tomMatch492NameNumber_end_12);}}} while(!(tom_equal_term_SlotList(tomMatch492NameNumber_end_12, tomMatch492NameNumber_begin_11)));}}}}}}}}}}if (tom_is_empty_concOperator_OperatorDeclList(tomMatch492NameNumber_end_4)) {tomMatch492NameNumber_end_4=tomMatch492NameNumber_begin_3;} else {tomMatch492NameNumber_end_4=tom_get_tail_concOperator_OperatorDeclList(tomMatch492NameNumber_end_4);}}} while(!(tom_equal_term_OperatorDeclList(tomMatch492NameNumber_end_4, tomMatch492NameNumber_begin_3)));}}}}}}}}

    return valid;
  }

  private String showSortList(Collection decls) {
    String sorts = "";
    Iterator it = decls.iterator();
    if(it.hasNext()) {
      SortDecl decl = (SortDecl)it.next();
      sorts += decl.getName();
    }
    while(it.hasNext()) {
      SortDecl decl = (SortDecl)it.next();
      sorts += ", "+decl.getName();
    }
    return sorts;
  }

  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
