/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.expander.rule.RuleExpander;
import tom.gom.expander.rule.GraphRuleExpander;

public class HookTypeExpander {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.gom.adt.code.types.Code  tom_append_list_CodeList( tom.gom.adt.code.types.Code  l1,  tom.gom.adt.code.types.Code  l2) {     if( l1.isEmptyCodeList() ) {       return l2;     } else if( l2.isEmptyCodeList() ) {       return l1;     } else if( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) ) {       if( (( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getTailCodeList() : tom.gom.adt.code.types.code.EmptyCodeList.make() ).isEmptyCodeList() ) {         return  tom.gom.adt.code.types.code.ConsCodeList.make((( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getHeadCodeList() :l1),l2) ;       } else {         return  tom.gom.adt.code.types.code.ConsCodeList.make((( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getHeadCodeList() :l1),tom_append_list_CodeList((( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getTailCodeList() : tom.gom.adt.code.types.code.EmptyCodeList.make() ),l2)) ;       }     } else {       return  tom.gom.adt.code.types.code.ConsCodeList.make(l1,l2) ;     }   }   private static   tom.gom.adt.code.types.Code  tom_get_slice_CodeList( tom.gom.adt.code.types.Code  begin,  tom.gom.adt.code.types.Code  end, tom.gom.adt.code.types.Code  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.code.types.code.ConsCodeList.make((( ((begin instanceof tom.gom.adt.code.types.code.ConsCodeList) || (begin instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? begin.getHeadCodeList() :begin),( tom.gom.adt.code.types.Code )tom_get_slice_CodeList((( ((begin instanceof tom.gom.adt.code.types.code.ConsCodeList) || (begin instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? begin.getTailCodeList() : tom.gom.adt.code.types.code.EmptyCodeList.make() ),end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ArgList  tom_append_list_concArg( tom.gom.adt.gom.types.ArgList l1,  tom.gom.adt.gom.types.ArgList  l2) {     if( l1.isEmptyconcArg() ) {       return l2;     } else if( l2.isEmptyconcArg() ) {       return l1;     } else if(  l1.getTailconcArg() .isEmptyconcArg() ) {       return  tom.gom.adt.gom.types.arglist.ConsconcArg.make( l1.getHeadconcArg() ,l2) ;     } else {       return  tom.gom.adt.gom.types.arglist.ConsconcArg.make( l1.getHeadconcArg() ,tom_append_list_concArg( l1.getTailconcArg() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ArgList  tom_get_slice_concArg( tom.gom.adt.gom.types.ArgList  begin,  tom.gom.adt.gom.types.ArgList  end, tom.gom.adt.gom.types.ArgList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.arglist.ConsconcArg.make( begin.getHeadconcArg() ,( tom.gom.adt.gom.types.ArgList )tom_get_slice_concArg( begin.getTailconcArg() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.GomModuleList  tom_append_list_concGomModule( tom.gom.adt.gom.types.GomModuleList l1,  tom.gom.adt.gom.types.GomModuleList  l2) {     if( l1.isEmptyconcGomModule() ) {       return l2;     } else if( l2.isEmptyconcGomModule() ) {       return l1;     } else if(  l1.getTailconcGomModule() .isEmptyconcGomModule() ) {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,tom_append_list_concGomModule( l1.getTailconcGomModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GomModuleList  tom_get_slice_concGomModule( tom.gom.adt.gom.types.GomModuleList  begin,  tom.gom.adt.gom.types.GomModuleList  end, tom.gom.adt.gom.types.GomModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( begin.getHeadconcGomModule() ,( tom.gom.adt.gom.types.GomModuleList )tom_get_slice_concGomModule( begin.getTailconcGomModule() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.GrammarList  tom_append_list_concGrammar( tom.gom.adt.gom.types.GrammarList l1,  tom.gom.adt.gom.types.GrammarList  l2) {     if( l1.isEmptyconcGrammar() ) {       return l2;     } else if( l2.isEmptyconcGrammar() ) {       return l1;     } else if(  l1.getTailconcGrammar() .isEmptyconcGrammar() ) {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( l1.getHeadconcGrammar() ,l2) ;     } else {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( l1.getHeadconcGrammar() ,tom_append_list_concGrammar( l1.getTailconcGrammar() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GrammarList  tom_get_slice_concGrammar( tom.gom.adt.gom.types.GrammarList  begin,  tom.gom.adt.gom.types.GrammarList  end, tom.gom.adt.gom.types.GrammarList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make( begin.getHeadconcGrammar() ,( tom.gom.adt.gom.types.GrammarList )tom_get_slice_concGrammar( begin.getTailconcGrammar() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SectionList  tom_append_list_concSection( tom.gom.adt.gom.types.SectionList l1,  tom.gom.adt.gom.types.SectionList  l2) {     if( l1.isEmptyconcSection() ) {       return l2;     } else if( l2.isEmptyconcSection() ) {       return l1;     } else if(  l1.getTailconcSection() .isEmptyconcSection() ) {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,tom_append_list_concSection( l1.getTailconcSection() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SectionList  tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList  begin,  tom.gom.adt.gom.types.SectionList  end, tom.gom.adt.gom.types.SectionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( begin.getHeadconcSection() ,( tom.gom.adt.gom.types.SectionList )tom_get_slice_concSection( begin.getTailconcSection() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyconcOperator() ) {       return l2;     } else if( l2.isEmptyconcOperator() ) {       return l1;     } else if(  l1.getTailconcOperator() .isEmptyconcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,tom_append_list_concOperator( l1.getTailconcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( begin.getHeadconcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator( begin.getTailconcOperator() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.HookDeclList  tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList l1,  tom.gom.adt.gom.types.HookDeclList  l2) {     if( l1.isEmptyconcHookDecl() ) {       return l2;     } else if( l2.isEmptyconcHookDecl() ) {       return l1;     } else if(  l1.getTailconcHookDecl() .isEmptyconcHookDecl() ) {       return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( l1.getHeadconcHookDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( l1.getHeadconcHookDecl() ,tom_append_list_concHookDecl( l1.getTailconcHookDecl() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.HookDeclList  tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end, tom.gom.adt.gom.types.HookDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( begin.getHeadconcHookDecl() ,( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_concHookDecl( begin.getTailconcHookDecl() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ProductionList  tom_append_list_concProduction( tom.gom.adt.gom.types.ProductionList l1,  tom.gom.adt.gom.types.ProductionList  l2) {     if( l1.isEmptyconcProduction() ) {       return l2;     } else if( l2.isEmptyconcProduction() ) {       return l1;     } else if(  l1.getTailconcProduction() .isEmptyconcProduction() ) {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( l1.getHeadconcProduction() ,l2) ;     } else {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( l1.getHeadconcProduction() ,tom_append_list_concProduction( l1.getTailconcProduction() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ProductionList  tom_get_slice_concProduction( tom.gom.adt.gom.types.ProductionList  begin,  tom.gom.adt.gom.types.ProductionList  end, tom.gom.adt.gom.types.ProductionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make( begin.getHeadconcProduction() ,( tom.gom.adt.gom.types.ProductionList )tom_get_slice_concProduction( begin.getTailconcProduction() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.FieldList  tom_append_list_concField( tom.gom.adt.gom.types.FieldList l1,  tom.gom.adt.gom.types.FieldList  l2) {     if( l1.isEmptyconcField() ) {       return l2;     } else if( l2.isEmptyconcField() ) {       return l1;     } else if(  l1.getTailconcField() .isEmptyconcField() ) {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( l1.getHeadconcField() ,l2) ;     } else {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( l1.getHeadconcField() ,tom_append_list_concField( l1.getTailconcField() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.FieldList  tom_get_slice_concField( tom.gom.adt.gom.types.FieldList  begin,  tom.gom.adt.gom.types.FieldList  end, tom.gom.adt.gom.types.FieldList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make( begin.getHeadconcField() ,( tom.gom.adt.gom.types.FieldList )tom_get_slice_concField( begin.getTailconcField() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyconcSort() ) {       return l2;     } else if( l2.isEmptyconcSort() ) {       return l1;     } else if(  l1.getTailconcSort() .isEmptyconcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,tom_append_list_concSort( l1.getTailconcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( begin.getHeadconcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort( begin.getTailconcSort() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_concModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyconcModule() ) {       return l2;     } else if( l2.isEmptyconcModule() ) {       return l1;     } else if(  l1.getTailconcModule() .isEmptyconcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,tom_append_list_concModule( l1.getTailconcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_concModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( begin.getHeadconcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_concModule( begin.getTailconcModule() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.Option  tom_append_list_OptionList( tom.gom.adt.gom.types.Option  l1,  tom.gom.adt.gom.types.Option  l2) {     if( l1.isEmptyOptionList() ) {       return l2;     } else if( l2.isEmptyOptionList() ) {       return l1;     } else if( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) ) {       if( (( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getTailOptionList() : tom.gom.adt.gom.types.option.EmptyOptionList.make() ).isEmptyOptionList() ) {         return  tom.gom.adt.gom.types.option.ConsOptionList.make((( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getHeadOptionList() :l1),l2) ;       } else {         return  tom.gom.adt.gom.types.option.ConsOptionList.make((( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getHeadOptionList() :l1),tom_append_list_OptionList((( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getTailOptionList() : tom.gom.adt.gom.types.option.EmptyOptionList.make() ),l2)) ;       }     } else {       return  tom.gom.adt.gom.types.option.ConsOptionList.make(l1,l2) ;     }   }   private static   tom.gom.adt.gom.types.Option  tom_get_slice_OptionList( tom.gom.adt.gom.types.Option  begin,  tom.gom.adt.gom.types.Option  end, tom.gom.adt.gom.types.Option  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.option.ConsOptionList.make((( ((begin instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (begin instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? begin.getHeadOptionList() :begin),( tom.gom.adt.gom.types.Option )tom_get_slice_OptionList((( ((begin instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (begin instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? begin.getTailOptionList() : tom.gom.adt.gom.types.option.EmptyOptionList.make() ),end,tail)) ;     }   }    

  private ModuleList moduleList;
  private ArrayList sortsWithGraphrules;

  public HookTypeExpander(ModuleList moduleList) {
    this.moduleList = moduleList;
    sortsWithGraphrules = new ArrayList();
  }

  /**
    * Get the correct types for hooks, and attach them the correct Decl
    */
  public HookDeclList expand(GomModuleList gomModuleList) {
    HookDeclList hookList =  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;
    /* For each hook in the GomModuleList */
    {if ( (gomModuleList instanceof tom.gom.adt.gom.types.GomModuleList) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch449NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModuleList )gomModuleList);if ( ((tomMatch449NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule) || (tomMatch449NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule)) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch449NameNumber_freshVar_0=tomMatch449NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.GomModuleList  tomMatch449NameNumber_begin_2=tomMatch449NameNumber_freshVar_0;{  tom.gom.adt.gom.types.GomModuleList  tomMatch449NameNumber_end_3=tomMatch449NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.GomModuleList  tomMatch449NameNumber_freshVar_1=tomMatch449NameNumber_end_3;if (!( tomMatch449NameNumber_freshVar_1.isEmptyconcGomModule() )) {if ( ( tomMatch449NameNumber_freshVar_1.getHeadconcGomModule()  instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch449NameNumber_freshVar_6=  tomMatch449NameNumber_freshVar_1.getHeadconcGomModule() .getModuleName() ;{  tom.gom.adt.gom.types.SectionList  tomMatch449NameNumber_freshVar_7=  tomMatch449NameNumber_freshVar_1.getHeadconcGomModule() .getSectionList() ;if ( (tomMatch449NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch449NameNumber_freshVar_8= tomMatch449NameNumber_freshVar_6.getName() ;{  String  tom_moduleName=tomMatch449NameNumber_freshVar_8;if ( ((tomMatch449NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection) || (tomMatch449NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection)) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch449NameNumber_freshVar_9=tomMatch449NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SectionList  tomMatch449NameNumber_begin_11=tomMatch449NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SectionList  tomMatch449NameNumber_end_12=tomMatch449NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch449NameNumber_freshVar_10=tomMatch449NameNumber_end_12;if (!( tomMatch449NameNumber_freshVar_10.isEmptyconcSection() )) {if ( ( tomMatch449NameNumber_freshVar_10.getHeadconcSection()  instanceof tom.gom.adt.gom.types.section.Public) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch449NameNumber_freshVar_15=  tomMatch449NameNumber_freshVar_10.getHeadconcSection() .getGrammarList() ;if ( ((tomMatch449NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar) || (tomMatch449NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar)) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch449NameNumber_freshVar_16=tomMatch449NameNumber_freshVar_15;{  tom.gom.adt.gom.types.GrammarList  tomMatch449NameNumber_begin_18=tomMatch449NameNumber_freshVar_16;{  tom.gom.adt.gom.types.GrammarList  tomMatch449NameNumber_end_19=tomMatch449NameNumber_freshVar_16;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch449NameNumber_freshVar_17=tomMatch449NameNumber_end_19;if (!( tomMatch449NameNumber_freshVar_17.isEmptyconcGrammar() )) {if ( ( tomMatch449NameNumber_freshVar_17.getHeadconcGrammar()  instanceof tom.gom.adt.gom.types.grammar.Grammar) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch449NameNumber_freshVar_22=  tomMatch449NameNumber_freshVar_17.getHeadconcGrammar() .getProductionList() ;{  tom.gom.adt.gom.types.ProductionList  tom_prodList=tomMatch449NameNumber_freshVar_22;{  tom.gom.adt.gom.types.GrammarList  tomMatch449NameNumber_freshVar_20= tomMatch449NameNumber_freshVar_17.getTailconcGrammar() ;{  tom.gom.adt.gom.types.SectionList  tomMatch449NameNumber_freshVar_13= tomMatch449NameNumber_freshVar_10.getTailconcSection() ;{  tom.gom.adt.gom.types.GomModuleList  tomMatch449NameNumber_freshVar_4= tomMatch449NameNumber_freshVar_1.getTailconcGomModule() ;if ( true ) {{if ( (tom_prodList instanceof tom.gom.adt.gom.types.ProductionList) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch450NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ProductionList )tom_prodList);if ( ((tomMatch450NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction) || (tomMatch450NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch450NameNumber_freshVar_0=tomMatch450NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ProductionList  tomMatch450NameNumber_begin_2=tomMatch450NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ProductionList  tomMatch450NameNumber_end_3=tomMatch450NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch450NameNumber_freshVar_1=tomMatch450NameNumber_end_3;if (!( tomMatch450NameNumber_freshVar_1.isEmptyconcProduction() )) {{  tom.gom.adt.gom.types.Production  tom_prod= tomMatch450NameNumber_freshVar_1.getHeadconcProduction() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch450NameNumber_freshVar_4= tomMatch450NameNumber_freshVar_1.getTailconcProduction() ;if ( true ) {












            /* Process hooks attached to a module */
            {if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch451NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);if ( (tomMatch451NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.IdKind  tomMatch451NameNumber_freshVar_0= tomMatch451NameNumberfreshSubject_1.getNameType() ;{  tom.gom.adt.gom.types.HookKind  tomMatch451NameNumber_freshVar_1= tomMatch451NameNumberfreshSubject_1.getHookType() ;{  String  tomMatch451NameNumber_freshVar_2= tomMatch451NameNumberfreshSubject_1.getName() ;if ( (tomMatch451NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.idkind.KindModule) ) {{  String  tom_mname=tomMatch451NameNumber_freshVar_2;if ( true ) {

                //Graph-rewrite rules hooks are only allowed for sorts
                if(tomMatch451NameNumber_freshVar_1.getkind().equals("graphrules")) {
                  getLogger().log(Level.SEVERE,
                      "Grapphrules hooks are authorised only on sorts");

                }
                if(tom_mname.equals(tom_moduleName)) {
                  ModuleDecl mdecl = getModuleDecl(tom_mname,moduleList);
                  HookDeclList newDeclList =
                    makeHookDeclList(tomMatch451NameNumberfreshSubject_1, tom.gom.adt.gom.types.decl.CutModule.make(mdecl) );
                  hookList = tom_append_list_concHookDecl(newDeclList,tom_append_list_concHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ));
                } else {
                  getLogger().log(Level.SEVERE,
                      "Hooks on module are authorised only on the current module");
                }
              }}}}}}}}}if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch451NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);if ( (tomMatch451NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.IdKind  tomMatch451NameNumber_freshVar_3= tomMatch451NameNumberfreshSubject_1.getNameType() ;{  String  tomMatch451NameNumber_freshVar_4= tomMatch451NameNumberfreshSubject_1.getName() ;if ( (tomMatch451NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.idkind.KindSort) ) {if ( true ) {

                SortDecl sdecl = getSortDecl(tomMatch451NameNumber_freshVar_4,tom_moduleName,moduleList);
                HookDeclList newDeclList = makeHookDeclList(tomMatch451NameNumberfreshSubject_1, tom.gom.adt.gom.types.decl.CutSort.make(sdecl) );
                hookList = tom_append_list_concHookDecl(newDeclList,tom_append_list_concHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ));
              }}}}}}}if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch451NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);if ( (tomMatch451NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.IdKind  tomMatch451NameNumber_freshVar_5= tomMatch451NameNumberfreshSubject_1.getNameType() ;{  tom.gom.adt.gom.types.HookKind  tomMatch451NameNumber_freshVar_6= tomMatch451NameNumberfreshSubject_1.getHookType() ;{  String  tomMatch451NameNumber_freshVar_7= tomMatch451NameNumberfreshSubject_1.getName() ;if ( (tomMatch451NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.idkind.KindOperator) ) {if ( true ) {

                //Graph-rewrite rules hooks are only allowed for sorts
                if(tomMatch451NameNumber_freshVar_6.getkind().equals("graphrules")) {
                  getLogger().log(Level.SEVERE,
                      "Grapphrules hooks are authorised only on sorts");

                }
                OperatorDecl odecl = getOperatorDecl(tomMatch451NameNumber_freshVar_7,tom_moduleName,moduleList);
                HookDeclList newDeclList = makeHookDeclList(tomMatch451NameNumberfreshSubject_1, tom.gom.adt.gom.types.decl.CutOperator.make(odecl) );
                hookList = tom_append_list_concHookDecl(newDeclList,tom_append_list_concHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ));
              }}}}}}}}}

          }}}}}if ( tomMatch450NameNumber_end_3.isEmptyconcProduction() ) {tomMatch450NameNumber_end_3=tomMatch450NameNumber_begin_2;} else {tomMatch450NameNumber_end_3= tomMatch450NameNumber_end_3.getTailconcProduction() ;}}} while(!( tomMatch450NameNumber_end_3.equals(tomMatch450NameNumber_begin_2) ));}}}}}}}

        ArrayList examinedOps = new ArrayList();
        {if ( (tom_prodList instanceof tom.gom.adt.gom.types.ProductionList) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch452NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ProductionList )tom_prodList);if ( ((tomMatch452NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction) || (tomMatch452NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch452NameNumber_freshVar_0=tomMatch452NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ProductionList  tomMatch452NameNumber_begin_2=tomMatch452NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ProductionList  tomMatch452NameNumber_end_3=tomMatch452NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch452NameNumber_freshVar_1=tomMatch452NameNumber_end_3;if (!( tomMatch452NameNumber_freshVar_1.isEmptyconcProduction() )) {{  tom.gom.adt.gom.types.Production  tom_prod= tomMatch452NameNumber_freshVar_1.getHeadconcProduction() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch452NameNumber_freshVar_4= tomMatch452NameNumber_freshVar_1.getTailconcProduction() ;if ( true ) {{if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch453NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);if ( (tomMatch453NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.production.Production) ) {{  String  tomMatch453NameNumber_freshVar_0= tomMatch453NameNumberfreshSubject_1.getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch453NameNumber_freshVar_1= tomMatch453NameNumberfreshSubject_1.getDomain() ;{  tom.gom.adt.gom.types.GomType  tomMatch453NameNumber_freshVar_2= tomMatch453NameNumberfreshSubject_1.getCodomain() ;{  tom.gom.adt.gom.types.Option  tomMatch453NameNumber_freshVar_3= tomMatch453NameNumberfreshSubject_1.getOption() ;{  String  tom_opName=tomMatch453NameNumber_freshVar_0;if ( ((tomMatch453NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField) || (tomMatch453NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField)) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch453NameNumber_freshVar_4=tomMatch453NameNumber_freshVar_1;if (!( tomMatch453NameNumber_freshVar_4.isEmptyconcField() )) {if ( ( tomMatch453NameNumber_freshVar_4.getHeadconcField()  instanceof tom.gom.adt.gom.types.field.StarredField) ) {{  tom.gom.adt.gom.types.GomType  tomMatch453NameNumber_freshVar_6=  tomMatch453NameNumber_freshVar_4.getHeadconcField() .getFieldType() ;{  tom.gom.adt.gom.types.FieldList  tomMatch453NameNumber_freshVar_5= tomMatch453NameNumber_freshVar_4.getTailconcField() ;if ( tomMatch453NameNumber_freshVar_5.isEmptyconcField() ) {{  tom.gom.adt.gom.types.GomType  tomMatch453NameNumber_freshVar_13=tomMatch453NameNumber_freshVar_2;if ( tomMatch453NameNumber_freshVar_13.equals(tomMatch453NameNumber_freshVar_6) ) {if ( (hookList instanceof tom.gom.adt.gom.types.HookDeclList) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.HookDeclList )hookList);{ boolean tomMatch453NameNumber_freshVar_18= false ;if ( ((tomMatch453NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl) || (tomMatch453NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl)) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_freshVar_7=tomMatch453NameNumberfreshSubject_2;{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_begin_9=tomMatch453NameNumber_freshVar_7;{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_end_10=tomMatch453NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_freshVar_8=tomMatch453NameNumber_end_10;if (!( tomMatch453NameNumber_freshVar_8.isEmptyconcHookDecl() )) {if ( ( tomMatch453NameNumber_freshVar_8.getHeadconcHookDecl()  instanceof tom.gom.adt.gom.types.hookdecl.MakeHookDecl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch453NameNumber_freshVar_14=  tomMatch453NameNumber_freshVar_8.getHeadconcHookDecl() .getPointcut() ;if ( (tomMatch453NameNumber_freshVar_14 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch453NameNumber_freshVar_15= tomMatch453NameNumber_freshVar_14.getODecl() ;if ( (tomMatch453NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch453NameNumber_freshVar_16= tomMatch453NameNumber_freshVar_15.getName() ;{  String  tomMatch453NameNumber_freshVar_17=tomMatch453NameNumber_freshVar_16;if ( tomMatch453NameNumber_freshVar_17.equals(tom_opName) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_freshVar_11= tomMatch453NameNumber_freshVar_8.getTailconcHookDecl() ;tomMatch453NameNumber_freshVar_18= true ;}}}}}}}}}}}if ( tomMatch453NameNumber_end_10.isEmptyconcHookDecl() ) {tomMatch453NameNumber_end_10=tomMatch453NameNumber_begin_9;} else {tomMatch453NameNumber_end_10= tomMatch453NameNumber_end_10.getTailconcHookDecl() ;}}} while(!( tomMatch453NameNumber_end_10.equals(tomMatch453NameNumber_begin_9) ));}}}}if ((tomMatch453NameNumber_freshVar_18 ==  false )) {if ( true ) {






                  /* generate a FL hook for list-operators without other hook */
                  String emptyCode = "{}";
                  Production hook =  tom.gom.adt.gom.types.production.Hook.make( tom.gom.adt.gom.types.idkind.KindOperator.make() , tom_opName,  tom.gom.adt.gom.types.hookkind.HookKind.make("FL") ,  tom.gom.adt.gom.types.arglist.EmptyconcArg.make() , emptyCode,  tom.gom.adt.gom.types.option.EmptyOptionList.make() ) ;
                  OperatorDecl odecl = getOperatorDecl(tom_opName,tom_moduleName,moduleList);
                  HookDeclList newDeclList = makeHookDeclList(hook, tom.gom.adt.gom.types.decl.CutOperator.make(odecl) );
                  hookList = tom_append_list_concHookDecl(newDeclList,tom_append_list_concHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ));
                }}}}}}}}}}}}}}}}}}}}}}if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch453NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);if ( (tomMatch453NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.production.Production) ) {{  String  tomMatch453NameNumber_freshVar_19= tomMatch453NameNumberfreshSubject_1.getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch453NameNumber_freshVar_20= tomMatch453NameNumberfreshSubject_1.getDomain() ;{  tom.gom.adt.gom.types.GomType  tomMatch453NameNumber_freshVar_21= tomMatch453NameNumberfreshSubject_1.getCodomain() ;{  tom.gom.adt.gom.types.Option  tomMatch453NameNumber_freshVar_22= tomMatch453NameNumberfreshSubject_1.getOption() ;{  String  tom_opName=tomMatch453NameNumber_freshVar_19;if ( ((tomMatch453NameNumber_freshVar_20 instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField) || (tomMatch453NameNumber_freshVar_20 instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField)) ) {{  tom.gom.adt.gom.types.FieldList  tomMatch453NameNumber_freshVar_23=tomMatch453NameNumber_freshVar_20;if (!( tomMatch453NameNumber_freshVar_23.isEmptyconcField() )) {if ( ( tomMatch453NameNumber_freshVar_23.getHeadconcField()  instanceof tom.gom.adt.gom.types.field.StarredField) ) {{  tom.gom.adt.gom.types.GomType  tomMatch453NameNumber_freshVar_31=  tomMatch453NameNumber_freshVar_23.getHeadconcField() .getFieldType() ;{  tom.gom.adt.gom.types.FieldList  tomMatch453NameNumber_freshVar_24= tomMatch453NameNumber_freshVar_23.getTailconcField() ;if ( tomMatch453NameNumber_freshVar_24.isEmptyconcField() ) {{  tom.gom.adt.gom.types.GomType  tomMatch453NameNumber_freshVar_34=tomMatch453NameNumber_freshVar_21;if ( tomMatch453NameNumber_freshVar_34.equals(tomMatch453NameNumber_freshVar_31) ) {if ( (hookList instanceof tom.gom.adt.gom.types.HookDeclList) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.HookDeclList )hookList);if ( ((tomMatch453NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl) || (tomMatch453NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl)) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_freshVar_25=tomMatch453NameNumberfreshSubject_2;{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_begin_27=tomMatch453NameNumber_freshVar_25;{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_end_28=tomMatch453NameNumber_freshVar_25;do {{{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_freshVar_26=tomMatch453NameNumber_end_28;if (!( tomMatch453NameNumber_freshVar_26.isEmptyconcHookDecl() )) {if ( ( tomMatch453NameNumber_freshVar_26.getHeadconcHookDecl()  instanceof tom.gom.adt.gom.types.hookdecl.MakeHookDecl) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch453NameNumber_freshVar_32=  tomMatch453NameNumber_freshVar_26.getHeadconcHookDecl() .getHookType() ;if ( (tomMatch453NameNumber_freshVar_32 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch453NameNumber_freshVar_33= tomMatch453NameNumber_freshVar_32.getkind() ;{ boolean tomMatch453NameNumber_freshVar_35= false ;if ( "make_insert".equals(tomMatch453NameNumber_freshVar_33) ) {tomMatch453NameNumber_freshVar_35= true ;} else {if ( "make_empty".equals(tomMatch453NameNumber_freshVar_33) ) {tomMatch453NameNumber_freshVar_35= true ;} else {if ( "rules".equals(tomMatch453NameNumber_freshVar_33) ) {tomMatch453NameNumber_freshVar_35= true ;}}}if ((tomMatch453NameNumber_freshVar_35 ==  true )) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch453NameNumber_freshVar_29= tomMatch453NameNumber_freshVar_26.getTailconcHookDecl() ;if ( true ) {




                  if(! examinedOps.contains(tom_opName)) {
                    examinedOps.add(tom_opName);
                      {if ( (hookList instanceof tom.gom.adt.gom.types.HookDeclList) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch454NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookDeclList )hookList);{ boolean tomMatch454NameNumber_freshVar_11= false ;if ( ((tomMatch454NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl) || (tomMatch454NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl)) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch454NameNumber_freshVar_0=tomMatch454NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.HookDeclList  tomMatch454NameNumber_begin_2=tomMatch454NameNumber_freshVar_0;{  tom.gom.adt.gom.types.HookDeclList  tomMatch454NameNumber_end_3=tomMatch454NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.HookDeclList  tomMatch454NameNumber_freshVar_1=tomMatch454NameNumber_end_3;if (!( tomMatch454NameNumber_freshVar_1.isEmptyconcHookDecl() )) {if ( ( tomMatch454NameNumber_freshVar_1.getHeadconcHookDecl()  instanceof tom.gom.adt.gom.types.hookdecl.MakeHookDecl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch454NameNumber_freshVar_6=  tomMatch454NameNumber_freshVar_1.getHeadconcHookDecl() .getPointcut() ;{  tom.gom.adt.gom.types.HookKind  tomMatch454NameNumber_freshVar_7=  tomMatch454NameNumber_freshVar_1.getHeadconcHookDecl() .getHookType() ;if ( (tomMatch454NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch454NameNumber_freshVar_8= tomMatch454NameNumber_freshVar_6.getODecl() ;if ( (tomMatch454NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch454NameNumber_freshVar_9= tomMatch454NameNumber_freshVar_8.getName() ;if ( (tomMatch454NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch454NameNumber_freshVar_10= tomMatch454NameNumber_freshVar_7.getkind() ;{ boolean tomMatch454NameNumber_freshVar_12= false ;if ( "Free".equals(tomMatch454NameNumber_freshVar_10) ) {tomMatch454NameNumber_freshVar_12= true ;} else {if ( "FL".equals(tomMatch454NameNumber_freshVar_10) ) {tomMatch454NameNumber_freshVar_12= true ;} else {if ( "AU".equals(tomMatch454NameNumber_freshVar_10) ) {tomMatch454NameNumber_freshVar_12= true ;} else {if ( "ACU".equals(tomMatch454NameNumber_freshVar_10) ) {tomMatch454NameNumber_freshVar_12= true ;}}}}if ((tomMatch454NameNumber_freshVar_12 ==  true )) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch454NameNumber_freshVar_4= tomMatch454NameNumber_freshVar_1.getTailconcHookDecl() ;tomMatch454NameNumber_freshVar_11= true ;}}}}}}}}}}}}}}if ( tomMatch454NameNumber_end_3.isEmptyconcHookDecl() ) {tomMatch454NameNumber_end_3=tomMatch454NameNumber_begin_2;} else {tomMatch454NameNumber_end_3= tomMatch454NameNumber_end_3.getTailconcHookDecl() ;}}} while(!( tomMatch454NameNumber_end_3.equals(tomMatch454NameNumber_begin_2) ));}}}}if ((tomMatch454NameNumber_freshVar_11 ==  false )) {if ( true ) {


                          /* generate an error to make users specify the theory */
                          getLogger().log(Level.SEVERE,
                              "As you use make_insert,make_empty or rules, specify the associated theory for the variadic operator "+tom_opName);
                        }}}}}}

                  }
                }}}}}}}}}}if ( tomMatch453NameNumber_end_28.isEmptyconcHookDecl() ) {tomMatch453NameNumber_end_28=tomMatch453NameNumber_begin_27;} else {tomMatch453NameNumber_end_28= tomMatch453NameNumber_end_28.getTailconcHookDecl() ;}}} while(!( tomMatch453NameNumber_end_28.equals(tomMatch453NameNumber_begin_27) ));}}}}}}}}}}}}}}}}}}}}}}}}

          }}}}}if ( tomMatch452NameNumber_end_3.isEmptyconcProduction() ) {tomMatch452NameNumber_end_3=tomMatch452NameNumber_begin_2;} else {tomMatch452NameNumber_end_3= tomMatch452NameNumber_end_3.getTailconcProduction() ;}}} while(!( tomMatch452NameNumber_end_3.equals(tomMatch452NameNumber_begin_2) ));}}}}}}}

      }}}}}}}}}if ( tomMatch449NameNumber_end_19.isEmptyconcGrammar() ) {tomMatch449NameNumber_end_19=tomMatch449NameNumber_begin_18;} else {tomMatch449NameNumber_end_19= tomMatch449NameNumber_end_19.getTailconcGrammar() ;}}} while(!( tomMatch449NameNumber_end_19.equals(tomMatch449NameNumber_begin_18) ));}}}}}}}}if ( tomMatch449NameNumber_end_12.isEmptyconcSection() ) {tomMatch449NameNumber_end_12=tomMatch449NameNumber_begin_11;} else {tomMatch449NameNumber_end_12= tomMatch449NameNumber_end_12.getTailconcSection() ;}}} while(!( tomMatch449NameNumber_end_12.equals(tomMatch449NameNumber_begin_11) ));}}}}}}}}}}}}if ( tomMatch449NameNumber_end_3.isEmptyconcGomModule() ) {tomMatch449NameNumber_end_3=tomMatch449NameNumber_begin_2;} else {tomMatch449NameNumber_end_3= tomMatch449NameNumber_end_3.getTailconcGomModule() ;}}} while(!( tomMatch449NameNumber_end_3.equals(tomMatch449NameNumber_begin_2) ));}}}}}}}

    return hookList;
  }

  private HookDeclList makeHookDeclList(Production hook, Decl mdecl) {
    {if ( (hook instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch455NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )hook);if ( (tomMatch455NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch455NameNumber_freshVar_0= tomMatch455NameNumberfreshSubject_1.getHookType() ;{  String  tomMatch455NameNumber_freshVar_1= tomMatch455NameNumberfreshSubject_1.getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch455NameNumber_freshVar_2= tomMatch455NameNumberfreshSubject_1.getArgs() ;{  String  tomMatch455NameNumber_freshVar_3= tomMatch455NameNumberfreshSubject_1.getStringCode() ;{  tom.gom.adt.gom.types.HookKind  tom_hkind=tomMatch455NameNumber_freshVar_0;{  String  tom_hName=tomMatch455NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ArgList  tom_hookArgs=tomMatch455NameNumber_freshVar_2;{  String  tom_scode=tomMatch455NameNumber_freshVar_3;if ( true ) {




          HookDeclList newHookList =  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;
          {if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_0= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "block".equals(tomMatch456NameNumber_freshVar_0) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ) 
;
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_1= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "interface".equals(tomMatch456NameNumber_freshVar_1) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ) 
;
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_2= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "import".equals(tomMatch456NameNumber_freshVar_2) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ) 
;
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_3= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "mapping".equals(tomMatch456NameNumber_freshVar_3) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MappingHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ) 
;
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_4= tomMatch456NameNumberfreshSubject_1.getkind() ;{ boolean tomMatch456NameNumber_freshVar_5= false ;if ( "make".equals(tomMatch456NameNumber_freshVar_4) ) {tomMatch456NameNumber_freshVar_5= true ;} else {if ( "make_insert".equals(tomMatch456NameNumber_freshVar_4) ) {tomMatch456NameNumber_freshVar_5= true ;} else {if ( "make_empty".equals(tomMatch456NameNumber_freshVar_4) ) {tomMatch456NameNumber_freshVar_5= true ;}}}if ((tomMatch456NameNumber_freshVar_5 ==  true )) {if ( true ) {

              SlotList typedArgs = typeArguments(tom_hookArgs,tom_hkind,mdecl);
              if (typedArgs == null) {
                getLogger().log(Level.SEVERE,
                    GomMessage.discardedHook.getMessage(),
                    new Object[]{ (tom_hName) });
                return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;
              }
              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl, typedArgs,  tom.gom.adt.code.types.code.Code.make(tom_scode) , tomMatch456NameNumberfreshSubject_1) , tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ) 
;
            }}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_6= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "Free".equals(tomMatch456NameNumber_freshVar_6) ) {if ( true ) {

              /* Even there is no code associated, we generate a MakeHook to prevent FL hooks to be automatically generated */
              return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ,  tom.gom.adt.code.types.code.Code.make("") ,  tom.gom.adt.gom.types.hookkind.HookKind.make("Free") ) , tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ) 
;
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_7= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "FL".equals(tomMatch456NameNumber_freshVar_7) ) {if ( true ) {

              /* FL: flattened list */
              return makeFLHookList(tom_hName,mdecl,tom_scode);
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_8= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "AU".equals(tomMatch456NameNumber_freshVar_8) ) {if ( true ) {

              return makeAUHookList(tom_hName,mdecl,tom_scode);
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_9= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "ACU".equals(tomMatch456NameNumber_freshVar_9) ) {if ( true ) {

              return makeACUHookList(tom_hName,mdecl,tom_scode);
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_10= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "rules".equals(tomMatch456NameNumber_freshVar_10) ) {if ( true ) {

              return makeRulesHookList(tom_hName,mdecl,tom_scode);
            }}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);if ( (tomMatch456NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch456NameNumber_freshVar_11= tomMatch456NameNumberfreshSubject_1.getkind() ;if ( "graphrules".equals(tomMatch456NameNumber_freshVar_11) ) {if ( true ) {

              //TODO: verify if the option termgraph is on
              if(tom_hookArgs.length()!=2) {
                throw new GomRuntimeException(
                    "GomTypeExpander:graphrules hooks need two parameters: the name of the generated strategy and its default behaviour");
              }
              return makeGraphRulesHookList(tom_hName,tom_hookArgs,mdecl,tom_scode);
            }}}}}}}

          if (newHookList ==  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ) {
            throw new GomRuntimeException(
                "GomTypeExpander:typeModuleHook unknown HookKind: "+tom_hkind);
          }
          return newHookList;
        }}}}}}}}}}}}}

    throw new GomRuntimeException(
        "HookTypeExpander: this hook is not a hook: "+hook);
  }

  /**
   * Finds the ModuleDecl corresponding to a module name.
   *
   * @param mname the module name
   * @param moduleList the queried ModuleList
   * @return the ModuleDecl for mname
   */
  private ModuleDecl getModuleDecl(String mname, ModuleList moduleList) {
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch457NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch457NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch457NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch457NameNumber_freshVar_0=tomMatch457NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch457NameNumber_begin_2=tomMatch457NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch457NameNumber_end_3=tomMatch457NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch457NameNumber_freshVar_1=tomMatch457NameNumber_end_3;if (!( tomMatch457NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch457NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch457NameNumber_freshVar_6=  tomMatch457NameNumber_freshVar_1.getHeadconcModule() .getMDecl() ;if ( (tomMatch457NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch457NameNumber_freshVar_7= tomMatch457NameNumber_freshVar_6.getModuleName() ;if ( (tomMatch457NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch457NameNumber_freshVar_8= tomMatch457NameNumber_freshVar_7.getName() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch457NameNumber_freshVar_4= tomMatch457NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {




        if (tomMatch457NameNumber_freshVar_8.equals(mname)) {
          return tomMatch457NameNumber_freshVar_6;
        }
      }}}}}}}}}}if ( tomMatch457NameNumber_end_3.isEmptyconcModule() ) {tomMatch457NameNumber_end_3=tomMatch457NameNumber_begin_2;} else {tomMatch457NameNumber_end_3= tomMatch457NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch457NameNumber_end_3.equals(tomMatch457NameNumber_begin_2) ));}}}}}}}

    throw new GomRuntimeException(
        "HookTypeExpander: Module not found: "+mname);
  }

  /**
   * Finds the SortDecl corresponding to a sort name.
   *
   * @param sname the sort name
   * @param modName the module name that should contain the sort
   * @param moduleList the queried ModuleList
   * @return the SortDecl for sname
   */
  private SortDecl getSortDecl(String sname, String modName, ModuleList moduleList) {
    {if ( true ) {{  String  tomMatch458NameNumberfreshSubject_1=(( String )modName);if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch458NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch458NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch458NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch458NameNumber_freshVar_0=tomMatch458NameNumberfreshSubject_2;{  tom.gom.adt.gom.types.ModuleList  tomMatch458NameNumber_begin_2=tomMatch458NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch458NameNumber_end_3=tomMatch458NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch458NameNumber_freshVar_1=tomMatch458NameNumber_end_3;if (!( tomMatch458NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch458NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch458NameNumber_freshVar_6=  tomMatch458NameNumber_freshVar_1.getHeadconcModule() .getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_freshVar_7=  tomMatch458NameNumber_freshVar_1.getHeadconcModule() .getSorts() ;if ( (tomMatch458NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch458NameNumber_freshVar_8= tomMatch458NameNumber_freshVar_6.getModuleName() ;if ( (tomMatch458NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch458NameNumber_freshVar_9= tomMatch458NameNumber_freshVar_8.getName() ;{  String  tomMatch458NameNumber_freshVar_16=tomMatch458NameNumber_freshVar_9;if ( tomMatch458NameNumber_freshVar_16.equals(tomMatch458NameNumberfreshSubject_1) ) {if ( ((tomMatch458NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (tomMatch458NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_freshVar_10=tomMatch458NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_begin_12=tomMatch458NameNumber_freshVar_10;{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_end_13=tomMatch458NameNumber_freshVar_10;do {{{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_freshVar_11=tomMatch458NameNumber_end_13;if (!( tomMatch458NameNumber_freshVar_11.isEmptyconcSort() )) {if ( ( tomMatch458NameNumber_freshVar_11.getHeadconcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch458NameNumber_freshVar_17=  tomMatch458NameNumber_freshVar_11.getHeadconcSort() .getDecl() ;if ( (tomMatch458NameNumber_freshVar_17 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch458NameNumber_freshVar_18= tomMatch458NameNumber_freshVar_17.getName() ;{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_freshVar_14= tomMatch458NameNumber_freshVar_11.getTailconcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch458NameNumber_freshVar_4= tomMatch458NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {






          if (tomMatch458NameNumber_freshVar_18.equals(sname)) {
            return tomMatch458NameNumber_freshVar_17;
          }
        }}}}}}}}}if ( tomMatch458NameNumber_end_13.isEmptyconcSort() ) {tomMatch458NameNumber_end_13=tomMatch458NameNumber_begin_12;} else {tomMatch458NameNumber_end_13= tomMatch458NameNumber_end_13.getTailconcSort() ;}}} while(!( tomMatch458NameNumber_end_13.equals(tomMatch458NameNumber_begin_12) ));}}}}}}}}}}}}}}}if ( tomMatch458NameNumber_end_3.isEmptyconcModule() ) {tomMatch458NameNumber_end_3=tomMatch458NameNumber_begin_2;} else {tomMatch458NameNumber_end_3= tomMatch458NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch458NameNumber_end_3.equals(tomMatch458NameNumber_begin_2) ));}}}}}}}}}

    throw new GomRuntimeException(
        "HookTypeExpander: Sort not found: "+sname);
  }

  /**
   * Finds the OperatorDecl corresponding to an operator name.
   *
   * @param oname the sort name
   * @param modName the module name that should contain the operator
   * @param moduleList the queried ModuleList
   * @return the OperatorDecl for sname
   */
  private OperatorDecl getOperatorDecl(
      String oname,
      String modName,
      ModuleList moduleList) {
    {if ( true ) {{  String  tomMatch459NameNumberfreshSubject_1=(( String )modName);if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch459NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch459NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch459NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch459NameNumber_freshVar_0=tomMatch459NameNumberfreshSubject_2;{  tom.gom.adt.gom.types.ModuleList  tomMatch459NameNumber_begin_2=tomMatch459NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch459NameNumber_end_3=tomMatch459NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch459NameNumber_freshVar_1=tomMatch459NameNumber_end_3;if (!( tomMatch459NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch459NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch459NameNumber_freshVar_6=  tomMatch459NameNumber_freshVar_1.getHeadconcModule() .getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_freshVar_7=  tomMatch459NameNumber_freshVar_1.getHeadconcModule() .getSorts() ;if ( (tomMatch459NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch459NameNumber_freshVar_8= tomMatch459NameNumber_freshVar_6.getModuleName() ;if ( (tomMatch459NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch459NameNumber_freshVar_9= tomMatch459NameNumber_freshVar_8.getName() ;{  String  tomMatch459NameNumber_freshVar_16=tomMatch459NameNumber_freshVar_9;if ( tomMatch459NameNumber_freshVar_16.equals(tomMatch459NameNumberfreshSubject_1) ) {if ( ((tomMatch459NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (tomMatch459NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_freshVar_10=tomMatch459NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_begin_12=tomMatch459NameNumber_freshVar_10;{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_end_13=tomMatch459NameNumber_freshVar_10;do {{{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_freshVar_11=tomMatch459NameNumber_end_13;if (!( tomMatch459NameNumber_freshVar_11.isEmptyconcSort() )) {if ( ( tomMatch459NameNumber_freshVar_11.getHeadconcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch459NameNumber_freshVar_17=  tomMatch459NameNumber_freshVar_11.getHeadconcSort() .getOperators() ;if ( ((tomMatch459NameNumber_freshVar_17 instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator) || (tomMatch459NameNumber_freshVar_17 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch459NameNumber_freshVar_18=tomMatch459NameNumber_freshVar_17;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch459NameNumber_begin_20=tomMatch459NameNumber_freshVar_18;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch459NameNumber_end_21=tomMatch459NameNumber_freshVar_18;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch459NameNumber_freshVar_19=tomMatch459NameNumber_end_21;if (!( tomMatch459NameNumber_freshVar_19.isEmptyconcOperator() )) {if ( ( tomMatch459NameNumber_freshVar_19.getHeadconcOperator()  instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch459NameNumber_freshVar_24=  tomMatch459NameNumber_freshVar_19.getHeadconcOperator() .getName() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch459NameNumber_freshVar_22= tomMatch459NameNumber_freshVar_19.getTailconcOperator() ;{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_freshVar_14= tomMatch459NameNumber_freshVar_11.getTailconcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch459NameNumber_freshVar_4= tomMatch459NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {








        if (tomMatch459NameNumber_freshVar_24.equals(oname)) {
          return  tomMatch459NameNumber_freshVar_19.getHeadconcOperator() ;
        }
      }}}}}}}}if ( tomMatch459NameNumber_end_21.isEmptyconcOperator() ) {tomMatch459NameNumber_end_21=tomMatch459NameNumber_begin_20;} else {tomMatch459NameNumber_end_21= tomMatch459NameNumber_end_21.getTailconcOperator() ;}}} while(!( tomMatch459NameNumber_end_21.equals(tomMatch459NameNumber_begin_20) ));}}}}}}}}if ( tomMatch459NameNumber_end_13.isEmptyconcSort() ) {tomMatch459NameNumber_end_13=tomMatch459NameNumber_begin_12;} else {tomMatch459NameNumber_end_13= tomMatch459NameNumber_end_13.getTailconcSort() ;}}} while(!( tomMatch459NameNumber_end_13.equals(tomMatch459NameNumber_begin_12) ));}}}}}}}}}}}}}}}if ( tomMatch459NameNumber_end_3.isEmptyconcModule() ) {tomMatch459NameNumber_end_3=tomMatch459NameNumber_begin_2;} else {tomMatch459NameNumber_end_3= tomMatch459NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch459NameNumber_end_3.equals(tomMatch459NameNumber_begin_2) ));}}}}}}}}}

    throw new GomRuntimeException(
        "HookTypeExpander: Operator not found: "+oname);
  }

  private SlotList typeArguments(
      ArgList args,
      HookKind kind,
      Decl decl) {
    {if ( (kind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch460NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )kind);if ( (tomMatch460NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch460NameNumber_freshVar_0= tomMatch460NameNumberfreshSubject_1.getkind() ;if ( "make".equals(tomMatch460NameNumber_freshVar_0) ) {if ( true ) {

        /*
         * The TypedProduction has to be Slots
         * A KindMakeHook is attached to an operator
         */
        {if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( (tomMatch461NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch461NameNumber_freshVar_0= tomMatch461NameNumberfreshSubject_1.getODecl() ;if ( (tomMatch461NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch461NameNumber_freshVar_1= tomMatch461NameNumber_freshVar_0.getProd() ;if ( (tomMatch461NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.typedproduction.Slots) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch461NameNumber_freshVar_2= tomMatch461NameNumber_freshVar_1.getSlots() ;{  tom.gom.adt.gom.types.SlotList  tom_slotList=tomMatch461NameNumber_freshVar_2;if ( true ) {

            /* tests the arguments number */
            if (args.length() != tom_slotList.length()) {
              SlotList slist = tom_slotList;
              getLogger().log(Level.SEVERE,
                  GomMessage.mismatchedMakeArguments.getMessage(),
                  new Object[]{args,slist });
              return null;
            }
            /* Then check the types */
            return recArgSlots(args,tom_slotList);
          }}}}}}}}}}if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookAlgebraic.getMessage(),
                new Object[]{ kind });
            return null;
          }}}}

      }}}}}}if ( (kind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch460NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )kind);if ( (tomMatch460NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch460NameNumber_freshVar_1= tomMatch460NameNumberfreshSubject_1.getkind() ;if ( "make_insert".equals(tomMatch460NameNumber_freshVar_1) ) {if ( true ) {

        /*
         * The TypedProduction has to be Variadic
         * Then we get the codomain from the operatordecl
         */
        {if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch462NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( (tomMatch462NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch462NameNumber_freshVar_0= tomMatch462NameNumberfreshSubject_1.getODecl() ;if ( (tomMatch462NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch462NameNumber_freshVar_1= tomMatch462NameNumber_freshVar_0.getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch462NameNumber_freshVar_2= tomMatch462NameNumber_freshVar_0.getProd() ;if ( (tomMatch462NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch462NameNumber_freshVar_3= tomMatch462NameNumber_freshVar_2.getSort() ;if ( true ) {


              // for a make_insert hook, there are two arguments: head, tail
              {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch463NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( ((tomMatch463NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.ConsconcArg) || (tomMatch463NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg)) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch463NameNumber_freshVar_0=tomMatch463NameNumberfreshSubject_1;if (!( tomMatch463NameNumber_freshVar_0.isEmptyconcArg() )) {if ( ( tomMatch463NameNumber_freshVar_0.getHeadconcArg()  instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch463NameNumber_freshVar_3=  tomMatch463NameNumber_freshVar_0.getHeadconcArg() .getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch463NameNumber_freshVar_1= tomMatch463NameNumber_freshVar_0.getTailconcArg() ;if (!( tomMatch463NameNumber_freshVar_1.isEmptyconcArg() )) {if ( ( tomMatch463NameNumber_freshVar_1.getHeadconcArg()  instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch463NameNumber_freshVar_4=  tomMatch463NameNumber_freshVar_1.getHeadconcArg() .getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch463NameNumber_freshVar_2= tomMatch463NameNumber_freshVar_1.getTailconcArg() ;if ( tomMatch463NameNumber_freshVar_2.isEmptyconcArg() ) {if ( true ) {

                  return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make(tomMatch463NameNumber_freshVar_3, tomMatch462NameNumber_freshVar_3) , tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make(tomMatch463NameNumber_freshVar_4, tomMatch462NameNumber_freshVar_1) , tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ) ) ;
                }}}}}}}}}}}}}}if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch463NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( true ) {

                  getLogger().log(Level.SEVERE,
                      GomMessage.badHookArguments.getMessage(),
                      new Object[]{ (tomMatch460NameNumber_freshVar_1), new Integer(args.length())});
                  return null;
                }}}}

            }}}}}}}}}}if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch462NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookVariadic.getMessage(),
                new Object[]{ kind });
            return null;
          }}}}

      }}}}}}if ( (kind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch460NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )kind);if ( (tomMatch460NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch460NameNumber_freshVar_2= tomMatch460NameNumberfreshSubject_1.getkind() ;if ( "make_empty".equals(tomMatch460NameNumber_freshVar_2) ) {if ( true ) {

        /*
         * The TypedProduction has to be Variadic
         * Then we get the codomain from the operatordecl
         */
        {if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch464NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( (tomMatch464NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch464NameNumber_freshVar_0= tomMatch464NameNumberfreshSubject_1.getODecl() ;if ( (tomMatch464NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch464NameNumber_freshVar_1= tomMatch464NameNumber_freshVar_0.getProd() ;if ( (tomMatch464NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {if ( true ) {


              // for a make_empty hook, there is no argument
              {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch465NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( ((tomMatch465NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.ConsconcArg) || (tomMatch465NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg)) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch465NameNumber_freshVar_0=tomMatch465NameNumberfreshSubject_1;if ( tomMatch465NameNumber_freshVar_0.isEmptyconcArg() ) {if ( true ) {
 return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }}}}}}if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch465NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( true ) {

                  getLogger().log(Level.SEVERE,
                      GomMessage.badHookArguments.getMessage(),
                      new Object[]{ (tomMatch460NameNumber_freshVar_2), new Integer(args.length())});
                  return null;
                }}}}

            }}}}}}}}if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch464NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookVariadic.getMessage(),
                new Object[]{ kind });
            return null;
          }}}}

      }}}}}}}

    throw new GomRuntimeException("Hook kind \""+kind+"\" not supported");
  }

  private SlotList recArgSlots(ArgList args, SlotList slots) {
    {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch466NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( ((tomMatch466NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.ConsconcArg) || (tomMatch466NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg)) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch466NameNumber_freshVar_0=tomMatch466NameNumberfreshSubject_1;if ( tomMatch466NameNumber_freshVar_0.isEmptyconcArg() ) {if ( (slots instanceof tom.gom.adt.gom.types.SlotList) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch466NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.SlotList )slots);if ( ((tomMatch466NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot) || (tomMatch466NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot)) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch466NameNumber_freshVar_1=tomMatch466NameNumberfreshSubject_2;if ( tomMatch466NameNumber_freshVar_1.isEmptyconcSlot() ) {if ( true ) {

        return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ;
      }}}}}}}}}}}if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch466NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( ((tomMatch466NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.ConsconcArg) || (tomMatch466NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg)) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch466NameNumber_freshVar_2=tomMatch466NameNumberfreshSubject_1;if (!( tomMatch466NameNumber_freshVar_2.isEmptyconcArg() )) {if ( ( tomMatch466NameNumber_freshVar_2.getHeadconcArg()  instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch466NameNumber_freshVar_8=  tomMatch466NameNumber_freshVar_2.getHeadconcArg() .getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch466NameNumber_freshVar_3= tomMatch466NameNumber_freshVar_2.getTailconcArg() ;if ( (slots instanceof tom.gom.adt.gom.types.SlotList) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch466NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.SlotList )slots);if ( ((tomMatch466NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot) || (tomMatch466NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot)) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch466NameNumber_freshVar_5=tomMatch466NameNumberfreshSubject_2;if (!( tomMatch466NameNumber_freshVar_5.isEmptyconcSlot() )) {if ( ( tomMatch466NameNumber_freshVar_5.getHeadconcSlot()  instanceof tom.gom.adt.gom.types.slot.Slot) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch466NameNumber_freshVar_9=  tomMatch466NameNumber_freshVar_5.getHeadconcSlot() .getSort() ;{  tom.gom.adt.gom.types.SlotList  tomMatch466NameNumber_freshVar_6= tomMatch466NameNumber_freshVar_5.getTailconcSlot() ;if ( true ) {

        SlotList tail = recArgSlots(tomMatch466NameNumber_freshVar_3,tomMatch466NameNumber_freshVar_6);
        return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make(tomMatch466NameNumber_freshVar_8, tomMatch466NameNumber_freshVar_9) ,tom_append_list_concSlot(tail, tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() )) ;
      }}}}}}}}}}}}}}}}}}

    throw new GomRuntimeException("GomTypeExpander:recArgSlots failed "+args+" "+slots);
  }

  private String trimBracket(String stringCode) {
    int start = stringCode.indexOf('{')+1;
    int end = stringCode.lastIndexOf('}');
    return stringCode.substring(start,end).trim();
  }

  private SortDecl getSortAndCheck(Decl mdecl) {
    {if ( (mdecl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch467NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )mdecl);if ( (tomMatch467NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch467NameNumber_freshVar_0= tomMatch467NameNumberfreshSubject_1.getODecl() ;if ( (tomMatch467NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch467NameNumber_freshVar_1= tomMatch467NameNumber_freshVar_0.getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch467NameNumber_freshVar_2= tomMatch467NameNumber_freshVar_0.getProd() ;if ( (tomMatch467NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch467NameNumber_freshVar_3= tomMatch467NameNumber_freshVar_2.getSort() ;{  tom.gom.adt.gom.types.SortDecl  tom_sdecl=tomMatch467NameNumber_freshVar_3;if ( true ) {

        if (tomMatch467NameNumber_freshVar_1== tom_sdecl) {
          return tom_sdecl;
        } else {
          getLogger().log(Level.SEVERE,
              "Different domain and codomain");
        }
      }}}}}}}}}}}if ( (mdecl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch467NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )mdecl);if ( true ) {

        getLogger().log(Level.SEVERE,
            "FL/AU/ACU hook can only be used on a variadic operator");
      }}}}

    return null;
  }

  /*
   * generate hooks for normalizing rules 
   */
  private HookDeclList makeRulesHookList(String opName, Decl mdecl, String scode) {
    RuleExpander rexpander = new RuleExpander(moduleList);
    return rexpander.expandRules(trimBracket(scode));
  }

  /*
   * generate hooks for term-graph rules 
   */
  private HookDeclList makeGraphRulesHookList(String sortname, ArgList args, Decl sdecl, String scode) {
    {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( ((tomMatch468NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.ConsconcArg) || (tomMatch468NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg)) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumber_freshVar_0=tomMatch468NameNumberfreshSubject_1;if (!( tomMatch468NameNumber_freshVar_0.isEmptyconcArg() )) {if ( ( tomMatch468NameNumber_freshVar_0.getHeadconcArg()  instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch468NameNumber_freshVar_3=  tomMatch468NameNumber_freshVar_0.getHeadconcArg() .getName() ;{  String  tom_stratname=tomMatch468NameNumber_freshVar_3;{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumber_freshVar_1= tomMatch468NameNumber_freshVar_0.getTailconcArg() ;if (!( tomMatch468NameNumber_freshVar_1.isEmptyconcArg() )) {if ( ( tomMatch468NameNumber_freshVar_1.getHeadconcArg()  instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch468NameNumber_freshVar_4=  tomMatch468NameNumber_freshVar_1.getHeadconcArg() .getName() ;{  String  tom_defaultstrat=tomMatch468NameNumber_freshVar_4;{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumber_freshVar_2= tomMatch468NameNumber_freshVar_1.getTailconcArg() ;if ( tomMatch468NameNumber_freshVar_2.isEmptyconcArg() ) {if ( true ) {

        if (!tom_defaultstrat.equals("Fail") && !tom_defaultstrat.equals("Identity")) {
          getLogger().log(Level.SEVERE,
              "In graphrules hooks, the default strategies authorized are only Fail and Identity");
        }
        GraphRuleExpander rexpander = new GraphRuleExpander(moduleList);
        if (sortsWithGraphrules.contains(sdecl)) {
          return rexpander.expandGraphRules(sortname,tom_stratname,tom_defaultstrat,trimBracket(scode),sdecl);
        } else {
          sortsWithGraphrules.add(sdecl);
          return rexpander.expandFirstGraphRules(sortname,tom_stratname,tom_defaultstrat,trimBracket(scode),sdecl);
        }
      }}}}}}}}}}}}}}}}}

    return null;
  }

  /*
   * generate hooks for associative-commutative with neutral element
   */
  private HookDeclList makeACUHookList(String opName, Decl mdecl, String scode) {
    /* Can only be applied to a variadic operator, whose domain and codomain
     * are equals */
    SortDecl domain = getSortAndCheck(mdecl);
    if (null == domain)
      return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;

    /* start with AU normalization */
    HookDeclList acHooks = makeAUHookList(opName, mdecl, scode);
    /*
     * add the following hooks:
     * if(tail.isConc) {
     *   if(head < tail.head) {
     *     tmp = head
     *     head = tail.head
     *     tail = cons(tmp,tail.tail)
     *   }
     * } else if(head < tail) {
     *   tmp = head
     *   head = tail
     *   tail = tmp
     * }
     * // in all cases:
     * return makeReal(head,tail)
     */
    acHooks =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  if (0 < ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Compare.make( tom.gom.adt.code.types.code.Code.make("head") ,  tom.gom.adt.code.types.code.Code.make("tail.getHead" + opName+ "()") ) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.FullSortClass.make(domain) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(" tmpHd = head;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    head = tail.getHead" + opName+ "();\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    tail = `" + opName+ "(tmpHd,tail.getTail" + opName+ "());\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("} else {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  if (0 < ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Compare.make( tom.gom.adt.code.types.code.Code.make("head") ,  tom.gom.adt.code.types.code.Code.make("tail") ) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.FullSortClass.make(domain) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(" tmpHd = head;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    head = tail;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    tail = tmpHd;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("}\n") 
            , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("ACU") ) ,tom_append_list_concHookDecl(acHooks, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() )) 
























;
    return acHooks;
  }

  /*
   * generate hooks for associative with neutral element
   */
  private HookDeclList makeAUHookList(String opName, Decl mdecl, String scode) {
    /* Can only be applied to a variadic operator, whose domain and codomain
     * are equals */
    SortDecl domain = getSortAndCheck(mdecl);
    if (null == domain)
      return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;

    HookDeclList auHooks =  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;
    String userNeutral = trimBracket(scode);
    if(userNeutral.length() > 0) {
      /* The hook body is the name of the neutral element */
      auHooks =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ,  tom.gom.adt.code.types.code.Code.make("return "+userNeutral+";") ,  tom.gom.adt.gom.types.hookkind.HookKind.make("AU") ) ,tom_append_list_concHookDecl(auHooks, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() )) 

;
      /* 
       * Remove neutral:
       * if(<head> == makeNeutral) { return <tail>; }
       * if(<tail> == makeNeutral) { return <head>; }
       */
      auHooks =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (head == "+userNeutral+") { return tail; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (tail ==  "+userNeutral+") { return head; }\n") 
              , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("AU") ) ,tom_append_list_concHookDecl(auHooks, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() )) 







;
    }
    /* getODecl call is safe here, since mdecl was checked by getSortAndCheck */
    /*
     * Remove neutral and flatten:
     * if(<head>.isEmpty<conc>()) { return <tail>; }
     * if(<tail>.isEmpty<conc>()) { return <head>; }
     * if(<head>.isCons<conc>()) { return make(head.head,make(head.tail,tail)); }
     */
    auHooks =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return tail; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return head; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return make(head.getHead" + opName+ "(),make(head.getTail" + opName+ "(),tail)); }\n") 
            , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ) ) ) ) ) ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("AU") ) ,tom_append_list_concHookDecl(auHooks, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() )) 














;

    return auHooks;
  }

  /*
   * generate hooks for flattened lists (with empty list as last element)
   */
  private HookDeclList makeFLHookList(String opName, Decl mdecl, String scode) {
    /* Can only be applied to a variadic operator, whose domain and codomain
     * are equals */
    SortDecl domain = getSortAndCheck(mdecl);
    if(null == domain) {
      return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;
    }

    String userNeutral = trimBracket(scode);
    if(userNeutral.length() > 0) {
      getLogger().log(Level.SEVERE,
          "FL hook does not allow the definition of a neutral element");
    }

    HookDeclList hooks =  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ;
    /* getODecl call is safe here, since mdecl was checked by getSortAndCheck */
    /*
     * Remove neutral and flatten:
     * if(<head>.isEmpty<conc>()) { return <tail>; }
     * if(<head>.isCons<conc>()) { return make(head.head,make(head.tail,tail)); }
     * if(!<tail>.isCons<conc>() && !<tail>.isEmpty<conc>()) { return make(<tail>,<empty>); }
     */
    hooks =  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return tail; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return make(head.getHead" + opName+ "(),make(head.getTail" + opName+ "(),tail)); }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (!") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(" && !") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return make(head,make(tail,Empty" + opName+ ".make())); }\n") 
            , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ) ) ) ) ) ) ) ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("FL") ) ,tom_append_list_concHookDecl(hooks, tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() )) 
















;

    return hooks;
  }

  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
