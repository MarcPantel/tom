/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (c) 2006-2008, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.expander.rule.RuleExpander;
import tom.gom.expander.rule.GraphRuleExpander;

public class HookTypeExpander {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.gom.adt.code.types.Code  tom_append_list_CodeList( tom.gom.adt.code.types.Code  l1,  tom.gom.adt.code.types.Code  l2) {     if( l1.isEmptyCodeList() ) {       return l2;     } else if( l2.isEmptyCodeList() ) {       return l1;     } else if( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) ) {       if( (( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getTailCodeList() : tom.gom.adt.code.types.code.EmptyCodeList.make() ).isEmptyCodeList() ) {         return  tom.gom.adt.code.types.code.ConsCodeList.make((( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getHeadCodeList() :l1),l2) ;       } else {         return  tom.gom.adt.code.types.code.ConsCodeList.make((( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getHeadCodeList() :l1),tom_append_list_CodeList((( ((l1 instanceof tom.gom.adt.code.types.code.ConsCodeList) || (l1 instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? l1.getTailCodeList() : tom.gom.adt.code.types.code.EmptyCodeList.make() ),l2)) ;       }     } else {       return  tom.gom.adt.code.types.code.ConsCodeList.make(l1,l2) ;     }   }   private static   tom.gom.adt.code.types.Code  tom_get_slice_CodeList( tom.gom.adt.code.types.Code  begin,  tom.gom.adt.code.types.Code  end, tom.gom.adt.code.types.Code  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyCodeList()  ||  (end== tom.gom.adt.code.types.code.EmptyCodeList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.code.types.code.ConsCodeList.make((( ((begin instanceof tom.gom.adt.code.types.code.ConsCodeList) || (begin instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? begin.getHeadCodeList() :begin),( tom.gom.adt.code.types.Code )tom_get_slice_CodeList((( ((begin instanceof tom.gom.adt.code.types.code.ConsCodeList) || (begin instanceof tom.gom.adt.code.types.code.EmptyCodeList)) )? begin.getTailCodeList() : tom.gom.adt.code.types.code.EmptyCodeList.make() ),end,tail)) ;   }      private static   tom.gom.adt.gom.types.ArgList  tom_append_list_ConcArg( tom.gom.adt.gom.types.ArgList l1,  tom.gom.adt.gom.types.ArgList  l2) {     if( l1.isEmptyConcArg() ) {       return l2;     } else if( l2.isEmptyConcArg() ) {       return l1;     } else if(  l1.getTailConcArg() .isEmptyConcArg() ) {       return  tom.gom.adt.gom.types.arglist.ConsConcArg.make( l1.getHeadConcArg() ,l2) ;     } else {       return  tom.gom.adt.gom.types.arglist.ConsConcArg.make( l1.getHeadConcArg() ,tom_append_list_ConcArg( l1.getTailConcArg() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ArgList  tom_get_slice_ConcArg( tom.gom.adt.gom.types.ArgList  begin,  tom.gom.adt.gom.types.ArgList  end, tom.gom.adt.gom.types.ArgList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcArg()  ||  (end== tom.gom.adt.gom.types.arglist.EmptyConcArg.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.arglist.ConsConcArg.make( begin.getHeadConcArg() ,( tom.gom.adt.gom.types.ArgList )tom_get_slice_ConcArg( begin.getTailConcArg() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.GomModuleList  tom_append_list_ConcGomModule( tom.gom.adt.gom.types.GomModuleList l1,  tom.gom.adt.gom.types.GomModuleList  l2) {     if( l1.isEmptyConcGomModule() ) {       return l2;     } else if( l2.isEmptyConcGomModule() ) {       return l1;     } else if(  l1.getTailConcGomModule() .isEmptyConcGomModule() ) {       return  tom.gom.adt.gom.types.gommodulelist.ConsConcGomModule.make( l1.getHeadConcGomModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsConcGomModule.make( l1.getHeadConcGomModule() ,tom_append_list_ConcGomModule( l1.getTailConcGomModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GomModuleList  tom_get_slice_ConcGomModule( tom.gom.adt.gom.types.GomModuleList  begin,  tom.gom.adt.gom.types.GomModuleList  end, tom.gom.adt.gom.types.GomModuleList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcGomModule()  ||  (end== tom.gom.adt.gom.types.gommodulelist.EmptyConcGomModule.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.gommodulelist.ConsConcGomModule.make( begin.getHeadConcGomModule() ,( tom.gom.adt.gom.types.GomModuleList )tom_get_slice_ConcGomModule( begin.getTailConcGomModule() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.GrammarList  tom_append_list_ConcGrammar( tom.gom.adt.gom.types.GrammarList l1,  tom.gom.adt.gom.types.GrammarList  l2) {     if( l1.isEmptyConcGrammar() ) {       return l2;     } else if( l2.isEmptyConcGrammar() ) {       return l1;     } else if(  l1.getTailConcGrammar() .isEmptyConcGrammar() ) {       return  tom.gom.adt.gom.types.grammarlist.ConsConcGrammar.make( l1.getHeadConcGrammar() ,l2) ;     } else {       return  tom.gom.adt.gom.types.grammarlist.ConsConcGrammar.make( l1.getHeadConcGrammar() ,tom_append_list_ConcGrammar( l1.getTailConcGrammar() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GrammarList  tom_get_slice_ConcGrammar( tom.gom.adt.gom.types.GrammarList  begin,  tom.gom.adt.gom.types.GrammarList  end, tom.gom.adt.gom.types.GrammarList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcGrammar()  ||  (end== tom.gom.adt.gom.types.grammarlist.EmptyConcGrammar.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.grammarlist.ConsConcGrammar.make( begin.getHeadConcGrammar() ,( tom.gom.adt.gom.types.GrammarList )tom_get_slice_ConcGrammar( begin.getTailConcGrammar() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.SectionList  tom_append_list_ConcSection( tom.gom.adt.gom.types.SectionList l1,  tom.gom.adt.gom.types.SectionList  l2) {     if( l1.isEmptyConcSection() ) {       return l2;     } else if( l2.isEmptyConcSection() ) {       return l1;     } else if(  l1.getTailConcSection() .isEmptyConcSection() ) {       return  tom.gom.adt.gom.types.sectionlist.ConsConcSection.make( l1.getHeadConcSection() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsConcSection.make( l1.getHeadConcSection() ,tom_append_list_ConcSection( l1.getTailConcSection() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SectionList  tom_get_slice_ConcSection( tom.gom.adt.gom.types.SectionList  begin,  tom.gom.adt.gom.types.SectionList  end, tom.gom.adt.gom.types.SectionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSection()  ||  (end== tom.gom.adt.gom.types.sectionlist.EmptyConcSection.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.sectionlist.ConsConcSection.make( begin.getHeadConcSection() ,( tom.gom.adt.gom.types.SectionList )tom_get_slice_ConcSection( begin.getTailConcSection() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyConcOperator() ) {       return l2;     } else if( l2.isEmptyConcOperator() ) {       return l1;     } else if(  l1.getTailConcOperator() .isEmptyConcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,tom_append_list_ConcOperator( l1.getTailConcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcOperator()  ||  (end== tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( begin.getHeadConcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_ConcOperator( begin.getTailConcOperator() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.HookDeclList  tom_append_list_ConcHookDecl( tom.gom.adt.gom.types.HookDeclList l1,  tom.gom.adt.gom.types.HookDeclList  l2) {     if( l1.isEmptyConcHookDecl() ) {       return l2;     } else if( l2.isEmptyConcHookDecl() ) {       return l1;     } else if(  l1.getTailConcHookDecl() .isEmptyConcHookDecl() ) {       return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( l1.getHeadConcHookDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( l1.getHeadConcHookDecl() ,tom_append_list_ConcHookDecl( l1.getTailConcHookDecl() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.HookDeclList  tom_get_slice_ConcHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end, tom.gom.adt.gom.types.HookDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcHookDecl()  ||  (end== tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( begin.getHeadConcHookDecl() ,( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_ConcHookDecl( begin.getTailConcHookDecl() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.ProductionList  tom_append_list_ConcProduction( tom.gom.adt.gom.types.ProductionList l1,  tom.gom.adt.gom.types.ProductionList  l2) {     if( l1.isEmptyConcProduction() ) {       return l2;     } else if( l2.isEmptyConcProduction() ) {       return l1;     } else if(  l1.getTailConcProduction() .isEmptyConcProduction() ) {       return  tom.gom.adt.gom.types.productionlist.ConsConcProduction.make( l1.getHeadConcProduction() ,l2) ;     } else {       return  tom.gom.adt.gom.types.productionlist.ConsConcProduction.make( l1.getHeadConcProduction() ,tom_append_list_ConcProduction( l1.getTailConcProduction() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ProductionList  tom_get_slice_ConcProduction( tom.gom.adt.gom.types.ProductionList  begin,  tom.gom.adt.gom.types.ProductionList  end, tom.gom.adt.gom.types.ProductionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcProduction()  ||  (end== tom.gom.adt.gom.types.productionlist.EmptyConcProduction.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.productionlist.ConsConcProduction.make( begin.getHeadConcProduction() ,( tom.gom.adt.gom.types.ProductionList )tom_get_slice_ConcProduction( begin.getTailConcProduction() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.FieldList  tom_append_list_ConcField( tom.gom.adt.gom.types.FieldList l1,  tom.gom.adt.gom.types.FieldList  l2) {     if( l1.isEmptyConcField() ) {       return l2;     } else if( l2.isEmptyConcField() ) {       return l1;     } else if(  l1.getTailConcField() .isEmptyConcField() ) {       return  tom.gom.adt.gom.types.fieldlist.ConsConcField.make( l1.getHeadConcField() ,l2) ;     } else {       return  tom.gom.adt.gom.types.fieldlist.ConsConcField.make( l1.getHeadConcField() ,tom_append_list_ConcField( l1.getTailConcField() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.FieldList  tom_get_slice_ConcField( tom.gom.adt.gom.types.FieldList  begin,  tom.gom.adt.gom.types.FieldList  end, tom.gom.adt.gom.types.FieldList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcField()  ||  (end== tom.gom.adt.gom.types.fieldlist.EmptyConcField.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.fieldlist.ConsConcField.make( begin.getHeadConcField() ,( tom.gom.adt.gom.types.FieldList )tom_get_slice_ConcField( begin.getTailConcField() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.SlotList  tom_append_list_ConcSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyConcSlot() ) {       return l2;     } else if( l2.isEmptyConcSlot() ) {       return l1;     } else if(  l1.getTailConcSlot() .isEmptyConcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,tom_append_list_ConcSlot( l1.getTailConcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_ConcSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSlot()  ||  (end== tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( begin.getHeadConcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_ConcSlot( begin.getTailConcSlot() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.SortList  tom_append_list_ConcSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyConcSort() ) {       return l2;     } else if( l2.isEmptyConcSort() ) {       return l1;     } else if(  l1.getTailConcSort() .isEmptyConcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,tom_append_list_ConcSort( l1.getTailConcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_ConcSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSort()  ||  (end== tom.gom.adt.gom.types.sortlist.EmptyConcSort.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( begin.getHeadConcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_ConcSort( begin.getTailConcSort() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_ConcModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyConcModule() ) {       return l2;     } else if( l2.isEmptyConcModule() ) {       return l1;     } else if(  l1.getTailConcModule() .isEmptyConcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,tom_append_list_ConcModule( l1.getTailConcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_ConcModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcModule()  ||  (end== tom.gom.adt.gom.types.modulelist.EmptyConcModule.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( begin.getHeadConcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_ConcModule( begin.getTailConcModule() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.Option  tom_append_list_OptionList( tom.gom.adt.gom.types.Option  l1,  tom.gom.adt.gom.types.Option  l2) {     if( l1.isEmptyOptionList() ) {       return l2;     } else if( l2.isEmptyOptionList() ) {       return l1;     } else if( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) ) {       if( (( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getTailOptionList() : tom.gom.adt.gom.types.option.EmptyOptionList.make() ).isEmptyOptionList() ) {         return  tom.gom.adt.gom.types.option.ConsOptionList.make((( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getHeadOptionList() :l1),l2) ;       } else {         return  tom.gom.adt.gom.types.option.ConsOptionList.make((( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getHeadOptionList() :l1),tom_append_list_OptionList((( ((l1 instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (l1 instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? l1.getTailOptionList() : tom.gom.adt.gom.types.option.EmptyOptionList.make() ),l2)) ;       }     } else {       return  tom.gom.adt.gom.types.option.ConsOptionList.make(l1,l2) ;     }   }   private static   tom.gom.adt.gom.types.Option  tom_get_slice_OptionList( tom.gom.adt.gom.types.Option  begin,  tom.gom.adt.gom.types.Option  end, tom.gom.adt.gom.types.Option  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyOptionList()  ||  (end== tom.gom.adt.gom.types.option.EmptyOptionList.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.option.ConsOptionList.make((( ((begin instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (begin instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? begin.getHeadOptionList() :begin),( tom.gom.adt.gom.types.Option )tom_get_slice_OptionList((( ((begin instanceof tom.gom.adt.gom.types.option.ConsOptionList) || (begin instanceof tom.gom.adt.gom.types.option.EmptyOptionList)) )? begin.getTailOptionList() : tom.gom.adt.gom.types.option.EmptyOptionList.make() ),end,tail)) ;   }    

  private ModuleList moduleList;
  private ArrayList sortsWithGraphrules;

  public HookTypeExpander(ModuleList moduleList) {
    this.moduleList = moduleList;
    sortsWithGraphrules = new ArrayList();
  }

  /**
    * Get the correct types for hooks, and attach them the correct Decl
    */
  public HookDeclList expand(GomModuleList gomModuleList) {
    HookDeclList hookList =  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;
    /* For each hook in the GomModuleList */
    {if ( (gomModuleList instanceof tom.gom.adt.gom.types.GomModuleList) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch453NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModuleList )gomModuleList);{  tom.gom.adt.gom.types.GomModuleList  tomMatch453NameNumber_freshVar_0=tomMatch453NameNumberfreshSubject_1;if ( ((tomMatch453NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.gommodulelist.ConsConcGomModule) || (tomMatch453NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.gommodulelist.EmptyConcGomModule)) ) {{  tom.gom.adt.gom.types.GomModuleList  tomMatch453NameNumber_begin_2=tomMatch453NameNumber_freshVar_0;{  tom.gom.adt.gom.types.GomModuleList  tomMatch453NameNumber_end_3=tomMatch453NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.GomModuleList  tomMatch453NameNumber_freshVar_1=tomMatch453NameNumber_end_3;if (!( tomMatch453NameNumber_freshVar_1.isEmptyConcGomModule() )) {{  tom.gom.adt.gom.types.GomModule  tomMatch453NameNumber_freshVar_8= tomMatch453NameNumber_freshVar_1.getHeadConcGomModule() ;if ( (tomMatch453NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch453NameNumber_freshVar_6= tomMatch453NameNumber_freshVar_8.getModuleName() ;{  tom.gom.adt.gom.types.SectionList  tomMatch453NameNumber_freshVar_7= tomMatch453NameNumber_freshVar_8.getSectionList() ;{  tom.gom.adt.gom.types.GomModuleName  tomMatch453NameNumber_freshVar_10=tomMatch453NameNumber_freshVar_6;if ( (tomMatch453NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch453NameNumber_freshVar_9= tomMatch453NameNumber_freshVar_10.getName() ;{  String  tom_moduleName=tomMatch453NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SectionList  tomMatch453NameNumber_freshVar_11=tomMatch453NameNumber_freshVar_7;if ( ((tomMatch453NameNumber_freshVar_11 instanceof tom.gom.adt.gom.types.sectionlist.ConsConcSection) || (tomMatch453NameNumber_freshVar_11 instanceof tom.gom.adt.gom.types.sectionlist.EmptyConcSection)) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch453NameNumber_begin_13=tomMatch453NameNumber_freshVar_11;{  tom.gom.adt.gom.types.SectionList  tomMatch453NameNumber_end_14=tomMatch453NameNumber_freshVar_11;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch453NameNumber_freshVar_12=tomMatch453NameNumber_end_14;if (!( tomMatch453NameNumber_freshVar_12.isEmptyConcSection() )) {{  tom.gom.adt.gom.types.Section  tomMatch453NameNumber_freshVar_18= tomMatch453NameNumber_freshVar_12.getHeadConcSection() ;if ( (tomMatch453NameNumber_freshVar_18 instanceof tom.gom.adt.gom.types.section.Public) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch453NameNumber_freshVar_17= tomMatch453NameNumber_freshVar_18.getGrammarList() ;{  tom.gom.adt.gom.types.GrammarList  tomMatch453NameNumber_freshVar_19=tomMatch453NameNumber_freshVar_17;if ( ((tomMatch453NameNumber_freshVar_19 instanceof tom.gom.adt.gom.types.grammarlist.ConsConcGrammar) || (tomMatch453NameNumber_freshVar_19 instanceof tom.gom.adt.gom.types.grammarlist.EmptyConcGrammar)) ) {{  tom.gom.adt.gom.types.GrammarList  tomMatch453NameNumber_begin_21=tomMatch453NameNumber_freshVar_19;{  tom.gom.adt.gom.types.GrammarList  tomMatch453NameNumber_end_22=tomMatch453NameNumber_freshVar_19;do {{{  tom.gom.adt.gom.types.GrammarList  tomMatch453NameNumber_freshVar_20=tomMatch453NameNumber_end_22;if (!( tomMatch453NameNumber_freshVar_20.isEmptyConcGrammar() )) {{  tom.gom.adt.gom.types.Grammar  tomMatch453NameNumber_freshVar_26= tomMatch453NameNumber_freshVar_20.getHeadConcGrammar() ;if ( (tomMatch453NameNumber_freshVar_26 instanceof tom.gom.adt.gom.types.grammar.Grammar) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch453NameNumber_freshVar_25= tomMatch453NameNumber_freshVar_26.getProductionList() ;{  tom.gom.adt.gom.types.ProductionList  tom_prodList=tomMatch453NameNumber_freshVar_25;{  tom.gom.adt.gom.types.GrammarList  tomMatch453NameNumber_freshVar_23= tomMatch453NameNumber_freshVar_20.getTailConcGrammar() ;{  tom.gom.adt.gom.types.SectionList  tomMatch453NameNumber_freshVar_15= tomMatch453NameNumber_freshVar_12.getTailConcSection() ;{  tom.gom.adt.gom.types.GomModuleList  tomMatch453NameNumber_freshVar_4= tomMatch453NameNumber_freshVar_1.getTailConcGomModule() ;if ( true ) {{if ( (tom_prodList instanceof tom.gom.adt.gom.types.ProductionList) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch454NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ProductionList )tom_prodList);{  tom.gom.adt.gom.types.ProductionList  tomMatch454NameNumber_freshVar_0=tomMatch454NameNumberfreshSubject_1;if ( ((tomMatch454NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.productionlist.ConsConcProduction) || (tomMatch454NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.productionlist.EmptyConcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch454NameNumber_begin_2=tomMatch454NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ProductionList  tomMatch454NameNumber_end_3=tomMatch454NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch454NameNumber_freshVar_1=tomMatch454NameNumber_end_3;if (!( tomMatch454NameNumber_freshVar_1.isEmptyConcProduction() )) {{  tom.gom.adt.gom.types.Production  tom_prod= tomMatch454NameNumber_freshVar_1.getHeadConcProduction() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch454NameNumber_freshVar_4= tomMatch454NameNumber_freshVar_1.getTailConcProduction() ;if ( true ) {












            /* Process hooks attached to a module */
            {if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch455NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);{  tom.gom.adt.gom.types.Production  tomMatch455NameNumber_freshVar_3=tomMatch455NameNumberfreshSubject_1;if ( (tomMatch455NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.IdKind  tomMatch455NameNumber_freshVar_0= tomMatch455NameNumber_freshVar_3.getNameType() ;{  tom.gom.adt.gom.types.HookKind  tomMatch455NameNumber_freshVar_1= tomMatch455NameNumber_freshVar_3.getHookType() ;{  String  tomMatch455NameNumber_freshVar_2= tomMatch455NameNumber_freshVar_3.getName() ;{  tom.gom.adt.gom.types.IdKind  tomMatch455NameNumber_freshVar_4=tomMatch455NameNumber_freshVar_0;if ( (tomMatch455NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.idkind.KindModule) ) {{  String  tom_mname=tomMatch455NameNumber_freshVar_2;if ( true ) {

                //Graph-rewrite rules hooks are only allowed for sorts
                if(tomMatch455NameNumber_freshVar_1.getkind().equals("graphrules")) {
                  getLogger().log(Level.SEVERE,
                      "Grapphrules hooks are authorised only on sorts");

                }
                if(tom_mname.equals(tom_moduleName)) {
                  ModuleDecl mdecl = getModuleDecl(tom_mname,moduleList);
                  HookDeclList newDeclList =
                    makeHookDeclList(tomMatch455NameNumberfreshSubject_1, tom.gom.adt.gom.types.decl.CutModule.make(mdecl) );
                  hookList = tom_append_list_ConcHookDecl(newDeclList,tom_append_list_ConcHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ));
                } else {
                  getLogger().log(Level.SEVERE,
                      "Hooks on module are authorised only on the current module");
                }
              }}}}}}}}}}}if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch455NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);{  tom.gom.adt.gom.types.Production  tomMatch455NameNumber_freshVar_7=tomMatch455NameNumberfreshSubject_1;if ( (tomMatch455NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.IdKind  tomMatch455NameNumber_freshVar_5= tomMatch455NameNumber_freshVar_7.getNameType() ;{  String  tomMatch455NameNumber_freshVar_6= tomMatch455NameNumber_freshVar_7.getName() ;{  tom.gom.adt.gom.types.IdKind  tomMatch455NameNumber_freshVar_8=tomMatch455NameNumber_freshVar_5;if ( (tomMatch455NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.idkind.KindSort) ) {if ( true ) {

                SortDecl sdecl = getSortDecl(tomMatch455NameNumber_freshVar_6,tom_moduleName,moduleList);
                HookDeclList newDeclList = makeHookDeclList(tomMatch455NameNumberfreshSubject_1, tom.gom.adt.gom.types.decl.CutSort.make(sdecl) );
                hookList = tom_append_list_ConcHookDecl(newDeclList,tom_append_list_ConcHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ));
              }}}}}}}}}if ( (tom_prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch455NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )tom_prod);{  tom.gom.adt.gom.types.Production  tomMatch455NameNumber_freshVar_12=tomMatch455NameNumberfreshSubject_1;if ( (tomMatch455NameNumber_freshVar_12 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.IdKind  tomMatch455NameNumber_freshVar_9= tomMatch455NameNumber_freshVar_12.getNameType() ;{  tom.gom.adt.gom.types.HookKind  tomMatch455NameNumber_freshVar_10= tomMatch455NameNumber_freshVar_12.getHookType() ;{  String  tomMatch455NameNumber_freshVar_11= tomMatch455NameNumber_freshVar_12.getName() ;{  tom.gom.adt.gom.types.IdKind  tomMatch455NameNumber_freshVar_13=tomMatch455NameNumber_freshVar_9;if ( (tomMatch455NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.idkind.KindOperator) ) {if ( true ) {

                //Graph-rewrite rules hooks are only allowed for sorts
                if(tomMatch455NameNumber_freshVar_10.getkind().equals("graphrules")) {
                  getLogger().log(Level.SEVERE,
                      "Grapphrules hooks are authorised only on sorts");

                }
                OperatorDecl odecl = getOperatorDecl(tomMatch455NameNumber_freshVar_11,tom_moduleName,moduleList);
                if(odecl!=null) {
                  HookDeclList newDeclList = makeHookDeclList(tomMatch455NameNumberfreshSubject_1, tom.gom.adt.gom.types.decl.CutOperator.make(odecl) );
                  hookList = tom_append_list_ConcHookDecl(newDeclList,tom_append_list_ConcHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ));
                }
              }}}}}}}}}}}

          }}}}}if ( tomMatch454NameNumber_end_3.isEmptyConcProduction() ) {tomMatch454NameNumber_end_3=tomMatch454NameNumber_begin_2;} else {tomMatch454NameNumber_end_3= tomMatch454NameNumber_end_3.getTailConcProduction() ;}}} while(!( (tomMatch454NameNumber_end_3==tomMatch454NameNumber_begin_2) ));}}}}}}}

        ArrayList examinedOps = new ArrayList();
        {if ( (tom_prodList instanceof tom.gom.adt.gom.types.ProductionList) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ProductionList )tom_prodList);{  tom.gom.adt.gom.types.ProductionList  tomMatch456NameNumber_freshVar_0=tomMatch456NameNumberfreshSubject_1;if ( ((tomMatch456NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.productionlist.ConsConcProduction) || (tomMatch456NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.productionlist.EmptyConcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch456NameNumber_begin_2=tomMatch456NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ProductionList  tomMatch456NameNumber_end_3=tomMatch456NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch456NameNumber_freshVar_1=tomMatch456NameNumber_end_3;if (!( tomMatch456NameNumber_freshVar_1.isEmptyConcProduction() )) {{  tom.gom.adt.gom.types.Production  tom_prod= tomMatch456NameNumber_freshVar_1.getHeadConcProduction() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch456NameNumber_freshVar_4= tomMatch456NameNumber_freshVar_1.getTailConcProduction() ;if ( true ) {

            hookList = addDefaultTheoryHooks(tom_prod,hookList,examinedOps,tom_moduleName);
          }}}}}if ( tomMatch456NameNumber_end_3.isEmptyConcProduction() ) {tomMatch456NameNumber_end_3=tomMatch456NameNumber_begin_2;} else {tomMatch456NameNumber_end_3= tomMatch456NameNumber_end_3.getTailConcProduction() ;}}} while(!( (tomMatch456NameNumber_end_3==tomMatch456NameNumber_begin_2) ));}}}}}}}{if ( (tom_prodList instanceof tom.gom.adt.gom.types.ProductionList) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ProductionList )tom_prodList);{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_freshVar_0=tomMatch457NameNumberfreshSubject_1;if ( ((tomMatch457NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.productionlist.ConsConcProduction) || (tomMatch457NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.productionlist.EmptyConcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_begin_2=tomMatch457NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_end_3=tomMatch457NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_freshVar_1=tomMatch457NameNumber_end_3;if (!( tomMatch457NameNumber_freshVar_1.isEmptyConcProduction() )) {{  tom.gom.adt.gom.types.Production  tomMatch457NameNumber_freshVar_7= tomMatch457NameNumber_freshVar_1.getHeadConcProduction() ;if ( (tomMatch457NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.production.SortType) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_freshVar_6= tomMatch457NameNumber_freshVar_7.getProductionList() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_freshVar_8=tomMatch457NameNumber_freshVar_6;if ( ((tomMatch457NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.productionlist.ConsConcProduction) || (tomMatch457NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.productionlist.EmptyConcProduction)) ) {{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_begin_10=tomMatch457NameNumber_freshVar_8;{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_end_11=tomMatch457NameNumber_freshVar_8;do {{{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_freshVar_9=tomMatch457NameNumber_end_11;if (!( tomMatch457NameNumber_freshVar_9.isEmptyConcProduction() )) {{  tom.gom.adt.gom.types.Production  tom_prod= tomMatch457NameNumber_freshVar_9.getHeadConcProduction() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_freshVar_12= tomMatch457NameNumber_freshVar_9.getTailConcProduction() ;{  tom.gom.adt.gom.types.ProductionList  tomMatch457NameNumber_freshVar_4= tomMatch457NameNumber_freshVar_1.getTailConcProduction() ;if ( true ) {



            hookList = addDefaultTheoryHooks(tom_prod,hookList,examinedOps,tom_moduleName);
          }}}}}}if ( tomMatch457NameNumber_end_11.isEmptyConcProduction() ) {tomMatch457NameNumber_end_11=tomMatch457NameNumber_begin_10;} else {tomMatch457NameNumber_end_11= tomMatch457NameNumber_end_11.getTailConcProduction() ;}}} while(!( (tomMatch457NameNumber_end_11==tomMatch457NameNumber_begin_10) ));}}}}}}}}}if ( tomMatch457NameNumber_end_3.isEmptyConcProduction() ) {tomMatch457NameNumber_end_3=tomMatch457NameNumber_begin_2;} else {tomMatch457NameNumber_end_3= tomMatch457NameNumber_end_3.getTailConcProduction() ;}}} while(!( (tomMatch457NameNumber_end_3==tomMatch457NameNumber_begin_2) ));}}}}}}}

      }}}}}}}}}}if ( tomMatch453NameNumber_end_22.isEmptyConcGrammar() ) {tomMatch453NameNumber_end_22=tomMatch453NameNumber_begin_21;} else {tomMatch453NameNumber_end_22= tomMatch453NameNumber_end_22.getTailConcGrammar() ;}}} while(!( (tomMatch453NameNumber_end_22==tomMatch453NameNumber_begin_21) ));}}}}}}}}}if ( tomMatch453NameNumber_end_14.isEmptyConcSection() ) {tomMatch453NameNumber_end_14=tomMatch453NameNumber_begin_13;} else {tomMatch453NameNumber_end_14= tomMatch453NameNumber_end_14.getTailConcSection() ;}}} while(!( (tomMatch453NameNumber_end_14==tomMatch453NameNumber_begin_13) ));}}}}}}}}}}}}}}if ( tomMatch453NameNumber_end_3.isEmptyConcGomModule() ) {tomMatch453NameNumber_end_3=tomMatch453NameNumber_begin_2;} else {tomMatch453NameNumber_end_3= tomMatch453NameNumber_end_3.getTailConcGomModule() ;}}} while(!( (tomMatch453NameNumber_end_3==tomMatch453NameNumber_begin_2) ));}}}}}}}

    return hookList;
  }

  private HookDeclList addDefaultTheoryHooks(Production prod,
                                             HookDeclList hookList,
                                             ArrayList examinedOps,
                                             String moduleName) {
    {if ( (prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch458NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )prod);{  tom.gom.adt.gom.types.Production  tomMatch458NameNumber_freshVar_4=tomMatch458NameNumberfreshSubject_1;if ( (tomMatch458NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.production.Production) ) {{  String  tomMatch458NameNumber_freshVar_0= tomMatch458NameNumber_freshVar_4.getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch458NameNumber_freshVar_1= tomMatch458NameNumber_freshVar_4.getDomainList() ;{  tom.gom.adt.gom.types.GomType  tomMatch458NameNumber_freshVar_2= tomMatch458NameNumber_freshVar_4.getCodomain() ;{  tom.gom.adt.gom.types.Option  tomMatch458NameNumber_freshVar_3= tomMatch458NameNumber_freshVar_4.getOption() ;{  String  tom_opName=tomMatch458NameNumber_freshVar_0;{  tom.gom.adt.gom.types.FieldList  tomMatch458NameNumber_freshVar_5=tomMatch458NameNumber_freshVar_1;if ( ((tomMatch458NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.fieldlist.ConsConcField) || (tomMatch458NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.fieldlist.EmptyConcField)) ) {if (!( tomMatch458NameNumber_freshVar_5.isEmptyConcField() )) {{  tom.gom.adt.gom.types.Field  tomMatch458NameNumber_freshVar_8= tomMatch458NameNumber_freshVar_5.getHeadConcField() ;if ( (tomMatch458NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.field.StarredField) ) {{  tom.gom.adt.gom.types.GomType  tomMatch458NameNumber_freshVar_7= tomMatch458NameNumber_freshVar_8.getFieldType() ;{  tom.gom.adt.gom.types.FieldList  tomMatch458NameNumber_freshVar_6= tomMatch458NameNumber_freshVar_5.getTailConcField() ;if ( tomMatch458NameNumber_freshVar_6.isEmptyConcField() ) {{  tom.gom.adt.gom.types.GomType  tomMatch458NameNumber_freshVar_15=tomMatch458NameNumber_freshVar_2;if ( (tomMatch458NameNumber_freshVar_15==tomMatch458NameNumber_freshVar_7) ) {if ( (hookList instanceof tom.gom.adt.gom.types.HookDeclList) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.HookDeclList )hookList);{ boolean tomMatch458NameNumber_freshVar_23= false ;{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_freshVar_9=tomMatch458NameNumberfreshSubject_2;if ( ((tomMatch458NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl) || (tomMatch458NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl)) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_begin_11=tomMatch458NameNumber_freshVar_9;{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_end_12=tomMatch458NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_freshVar_10=tomMatch458NameNumber_end_12;if (!( tomMatch458NameNumber_freshVar_10.isEmptyConcHookDecl() )) {{  tom.gom.adt.gom.types.HookDecl  tomMatch458NameNumber_freshVar_17= tomMatch458NameNumber_freshVar_10.getHeadConcHookDecl() ;if ( (tomMatch458NameNumber_freshVar_17 instanceof tom.gom.adt.gom.types.hookdecl.MakeHookDecl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch458NameNumber_freshVar_16= tomMatch458NameNumber_freshVar_17.getPointcut() ;{  tom.gom.adt.gom.types.Decl  tomMatch458NameNumber_freshVar_19=tomMatch458NameNumber_freshVar_16;if ( (tomMatch458NameNumber_freshVar_19 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch458NameNumber_freshVar_18= tomMatch458NameNumber_freshVar_19.getODecl() ;{  tom.gom.adt.gom.types.OperatorDecl  tomMatch458NameNumber_freshVar_21=tomMatch458NameNumber_freshVar_18;if ( (tomMatch458NameNumber_freshVar_21 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch458NameNumber_freshVar_20= tomMatch458NameNumber_freshVar_21.getName() ;{  String  tomMatch458NameNumber_freshVar_22=tomMatch458NameNumber_freshVar_20;if ( tomMatch458NameNumber_freshVar_22.equals(tom_opName) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_freshVar_13= tomMatch458NameNumber_freshVar_10.getTailConcHookDecl() ;tomMatch458NameNumber_freshVar_23= true ;}}}}}}}}}}}}}}if ( tomMatch458NameNumber_end_12.isEmptyConcHookDecl() ) {tomMatch458NameNumber_end_12=tomMatch458NameNumber_begin_11;} else {tomMatch458NameNumber_end_12= tomMatch458NameNumber_end_12.getTailConcHookDecl() ;}}} while(!( (tomMatch458NameNumber_end_12==tomMatch458NameNumber_begin_11) ));}}}}if ((tomMatch458NameNumber_freshVar_23 ==  false )) {if ( true ) {




        /* generate a FL hook for list-operators without other hook */
        String emptyCode = "{}";
        Production hook =  tom.gom.adt.gom.types.production.Hook.make( tom.gom.adt.gom.types.idkind.KindOperator.make() , tom_opName,  tom.gom.adt.gom.types.hookkind.HookKind.make("FL") ,  tom.gom.adt.gom.types.arglist.EmptyConcArg.make() , emptyCode,  tom.gom.adt.gom.types.option.EmptyOptionList.make() ) ;
        OperatorDecl odecl = getOperatorDecl(tom_opName,moduleName,moduleList);
        if(odecl!=null) {
          HookDeclList newDeclList = makeHookDeclList(hook, tom.gom.adt.gom.types.decl.CutOperator.make(odecl) );
          hookList = tom_append_list_ConcHookDecl(newDeclList,tom_append_list_ConcHookDecl(hookList, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ));
        }
      }}}}}}}}}}}}}}}}}}}}}}}}if ( (prod instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch458NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )prod);{  tom.gom.adt.gom.types.Production  tomMatch458NameNumber_freshVar_28=tomMatch458NameNumberfreshSubject_1;if ( (tomMatch458NameNumber_freshVar_28 instanceof tom.gom.adt.gom.types.production.Production) ) {{  String  tomMatch458NameNumber_freshVar_24= tomMatch458NameNumber_freshVar_28.getName() ;{  tom.gom.adt.gom.types.FieldList  tomMatch458NameNumber_freshVar_25= tomMatch458NameNumber_freshVar_28.getDomainList() ;{  tom.gom.adt.gom.types.GomType  tomMatch458NameNumber_freshVar_26= tomMatch458NameNumber_freshVar_28.getCodomain() ;{  tom.gom.adt.gom.types.Option  tomMatch458NameNumber_freshVar_27= tomMatch458NameNumber_freshVar_28.getOption() ;{  String  tom_opName=tomMatch458NameNumber_freshVar_24;{  tom.gom.adt.gom.types.FieldList  tomMatch458NameNumber_freshVar_29=tomMatch458NameNumber_freshVar_25;if ( ((tomMatch458NameNumber_freshVar_29 instanceof tom.gom.adt.gom.types.fieldlist.ConsConcField) || (tomMatch458NameNumber_freshVar_29 instanceof tom.gom.adt.gom.types.fieldlist.EmptyConcField)) ) {if (!( tomMatch458NameNumber_freshVar_29.isEmptyConcField() )) {{  tom.gom.adt.gom.types.Field  tomMatch458NameNumber_freshVar_38= tomMatch458NameNumber_freshVar_29.getHeadConcField() ;if ( (tomMatch458NameNumber_freshVar_38 instanceof tom.gom.adt.gom.types.field.StarredField) ) {{  tom.gom.adt.gom.types.GomType  tomMatch458NameNumber_freshVar_37= tomMatch458NameNumber_freshVar_38.getFieldType() ;{  tom.gom.adt.gom.types.FieldList  tomMatch458NameNumber_freshVar_30= tomMatch458NameNumber_freshVar_29.getTailConcField() ;if ( tomMatch458NameNumber_freshVar_30.isEmptyConcField() ) {{  tom.gom.adt.gom.types.GomType  tomMatch458NameNumber_freshVar_44=tomMatch458NameNumber_freshVar_26;if ( (tomMatch458NameNumber_freshVar_44==tomMatch458NameNumber_freshVar_37) ) {if ( (hookList instanceof tom.gom.adt.gom.types.HookDeclList) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.HookDeclList )hookList);{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_freshVar_31=tomMatch458NameNumberfreshSubject_2;if ( ((tomMatch458NameNumber_freshVar_31 instanceof tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl) || (tomMatch458NameNumber_freshVar_31 instanceof tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl)) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_begin_33=tomMatch458NameNumber_freshVar_31;{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_end_34=tomMatch458NameNumber_freshVar_31;do {{{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_freshVar_32=tomMatch458NameNumber_end_34;if (!( tomMatch458NameNumber_freshVar_32.isEmptyConcHookDecl() )) {{  tom.gom.adt.gom.types.HookDecl  tomMatch458NameNumber_freshVar_40= tomMatch458NameNumber_freshVar_32.getHeadConcHookDecl() ;if ( (tomMatch458NameNumber_freshVar_40 instanceof tom.gom.adt.gom.types.hookdecl.MakeHookDecl) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch458NameNumber_freshVar_39= tomMatch458NameNumber_freshVar_40.getHookType() ;{  tom.gom.adt.gom.types.HookKind  tomMatch458NameNumber_freshVar_42=tomMatch458NameNumber_freshVar_39;if ( (tomMatch458NameNumber_freshVar_42 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch458NameNumber_freshVar_41= tomMatch458NameNumber_freshVar_42.getkind() ;{  String  tomMatch458NameNumber_freshVar_43=tomMatch458NameNumber_freshVar_41;{ boolean tomMatch458NameNumber_freshVar_45= false ;if ( "make_insert".equals(tomMatch458NameNumber_freshVar_43) ) {tomMatch458NameNumber_freshVar_45= true ;} else {if ( "make_empty".equals(tomMatch458NameNumber_freshVar_43) ) {tomMatch458NameNumber_freshVar_45= true ;} else {if ( "rules".equals(tomMatch458NameNumber_freshVar_43) ) {tomMatch458NameNumber_freshVar_45= true ;}}}if ((tomMatch458NameNumber_freshVar_45 ==  true )) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch458NameNumber_freshVar_35= tomMatch458NameNumber_freshVar_32.getTailConcHookDecl() ;if ( true ) {




        if(! examinedOps.contains(tom_opName)) {
          examinedOps.add(tom_opName);
          {if ( (hookList instanceof tom.gom.adt.gom.types.HookDeclList) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch459NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookDeclList )hookList);{ boolean tomMatch459NameNumber_freshVar_16= false ;{  tom.gom.adt.gom.types.HookDeclList  tomMatch459NameNumber_freshVar_0=tomMatch459NameNumberfreshSubject_1;if ( ((tomMatch459NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl) || (tomMatch459NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl)) ) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch459NameNumber_begin_2=tomMatch459NameNumber_freshVar_0;{  tom.gom.adt.gom.types.HookDeclList  tomMatch459NameNumber_end_3=tomMatch459NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.HookDeclList  tomMatch459NameNumber_freshVar_1=tomMatch459NameNumber_end_3;if (!( tomMatch459NameNumber_freshVar_1.isEmptyConcHookDecl() )) {{  tom.gom.adt.gom.types.HookDecl  tomMatch459NameNumber_freshVar_8= tomMatch459NameNumber_freshVar_1.getHeadConcHookDecl() ;if ( (tomMatch459NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.hookdecl.MakeHookDecl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch459NameNumber_freshVar_6= tomMatch459NameNumber_freshVar_8.getPointcut() ;{  tom.gom.adt.gom.types.HookKind  tomMatch459NameNumber_freshVar_7= tomMatch459NameNumber_freshVar_8.getHookType() ;{  tom.gom.adt.gom.types.Decl  tomMatch459NameNumber_freshVar_10=tomMatch459NameNumber_freshVar_6;if ( (tomMatch459NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch459NameNumber_freshVar_9= tomMatch459NameNumber_freshVar_10.getODecl() ;{  tom.gom.adt.gom.types.OperatorDecl  tomMatch459NameNumber_freshVar_12=tomMatch459NameNumber_freshVar_9;if ( (tomMatch459NameNumber_freshVar_12 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch459NameNumber_freshVar_11= tomMatch459NameNumber_freshVar_12.getName() ;{  tom.gom.adt.gom.types.HookKind  tomMatch459NameNumber_freshVar_14=tomMatch459NameNumber_freshVar_7;if ( (tomMatch459NameNumber_freshVar_14 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch459NameNumber_freshVar_13= tomMatch459NameNumber_freshVar_14.getkind() ;{  String  tomMatch459NameNumber_freshVar_15=tomMatch459NameNumber_freshVar_13;{ boolean tomMatch459NameNumber_freshVar_17= false ;if ( "Free".equals(tomMatch459NameNumber_freshVar_15) ) {tomMatch459NameNumber_freshVar_17= true ;} else {if ( "FL".equals(tomMatch459NameNumber_freshVar_15) ) {tomMatch459NameNumber_freshVar_17= true ;} else {if ( "AU".equals(tomMatch459NameNumber_freshVar_15) ) {tomMatch459NameNumber_freshVar_17= true ;} else {if ( "ACU".equals(tomMatch459NameNumber_freshVar_15) ) {tomMatch459NameNumber_freshVar_17= true ;}}}}if ((tomMatch459NameNumber_freshVar_17 ==  true )) {{  tom.gom.adt.gom.types.HookDeclList  tomMatch459NameNumber_freshVar_4= tomMatch459NameNumber_freshVar_1.getTailConcHookDecl() ;tomMatch459NameNumber_freshVar_16= true ;}}}}}}}}}}}}}}}}}}}if ( tomMatch459NameNumber_end_3.isEmptyConcHookDecl() ) {tomMatch459NameNumber_end_3=tomMatch459NameNumber_begin_2;} else {tomMatch459NameNumber_end_3= tomMatch459NameNumber_end_3.getTailConcHookDecl() ;}}} while(!( (tomMatch459NameNumber_end_3==tomMatch459NameNumber_begin_2) ));}}}}if ((tomMatch459NameNumber_freshVar_16 ==  false )) {if ( true ) {


              /* generate an error to make users specify the theory */
              getLogger().log(Level.SEVERE,
                "As you use make_insert,make_empty or rules, specify the associated theory for the variadic operator "+tom_opName);
            }}}}}}

        }
      }}}}}}}}}}}}}if ( tomMatch458NameNumber_end_34.isEmptyConcHookDecl() ) {tomMatch458NameNumber_end_34=tomMatch458NameNumber_begin_33;} else {tomMatch458NameNumber_end_34= tomMatch458NameNumber_end_34.getTailConcHookDecl() ;}}} while(!( (tomMatch458NameNumber_end_34==tomMatch458NameNumber_begin_33) ));}}}}}}}}}}}}}}}}}}}}}}}}}}

    return hookList;
  }

  private HookDeclList makeHookDeclList(Production hook, Decl mdecl) {
    {if ( (hook instanceof tom.gom.adt.gom.types.Production) ) {{  tom.gom.adt.gom.types.Production  tomMatch460NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Production )hook);{  tom.gom.adt.gom.types.Production  tomMatch460NameNumber_freshVar_4=tomMatch460NameNumberfreshSubject_1;if ( (tomMatch460NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.production.Hook) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch460NameNumber_freshVar_0= tomMatch460NameNumber_freshVar_4.getHookType() ;{  String  tomMatch460NameNumber_freshVar_1= tomMatch460NameNumber_freshVar_4.getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch460NameNumber_freshVar_2= tomMatch460NameNumber_freshVar_4.getArgs() ;{  String  tomMatch460NameNumber_freshVar_3= tomMatch460NameNumber_freshVar_4.getStringCode() ;{  tom.gom.adt.gom.types.HookKind  tom_hkind=tomMatch460NameNumber_freshVar_0;{  String  tom_hName=tomMatch460NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ArgList  tom_hookArgs=tomMatch460NameNumber_freshVar_2;{  String  tom_scode=tomMatch460NameNumber_freshVar_3;if ( true ) {




          HookDeclList newHookList =  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;
          {if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_1=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_0= tomMatch461NameNumber_freshVar_1.getkind() ;{  String  tomMatch461NameNumber_freshVar_2=tomMatch461NameNumber_freshVar_0;if ( "block".equals(tomMatch461NameNumber_freshVar_2) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) 
;
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_4=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_3= tomMatch461NameNumber_freshVar_4.getkind() ;{  String  tomMatch461NameNumber_freshVar_5=tomMatch461NameNumber_freshVar_3;if ( "interface".equals(tomMatch461NameNumber_freshVar_5) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) 
;
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_7=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_6= tomMatch461NameNumber_freshVar_7.getkind() ;{  String  tomMatch461NameNumber_freshVar_8=tomMatch461NameNumber_freshVar_6;if ( "import".equals(tomMatch461NameNumber_freshVar_8) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) 
;
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_10=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_9= tomMatch461NameNumber_freshVar_10.getkind() ;{  String  tomMatch461NameNumber_freshVar_11=tomMatch461NameNumber_freshVar_9;if ( "mapping".equals(tomMatch461NameNumber_freshVar_11) ) {if ( true ) {

              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MappingHookDecl.make(mdecl,  tom.gom.adt.code.types.code.Code.make(trimBracket(tom_scode)) ) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) 
;
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_13=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_12= tomMatch461NameNumber_freshVar_13.getkind() ;{  String  tomMatch461NameNumber_freshVar_14=tomMatch461NameNumber_freshVar_12;{ boolean tomMatch461NameNumber_freshVar_15= false ;if ( "make".equals(tomMatch461NameNumber_freshVar_14) ) {tomMatch461NameNumber_freshVar_15= true ;} else {if ( "make_insert".equals(tomMatch461NameNumber_freshVar_14) ) {tomMatch461NameNumber_freshVar_15= true ;} else {if ( "make_empty".equals(tomMatch461NameNumber_freshVar_14) ) {tomMatch461NameNumber_freshVar_15= true ;}}}if ((tomMatch461NameNumber_freshVar_15 ==  true )) {if ( true ) {

              SlotList typedArgs = typeArguments(tom_hookArgs,tom_hkind,mdecl);
              if (typedArgs == null) {
                getLogger().log(Level.SEVERE,
                    GomMessage.discardedHook.getMessage(),
                    new Object[]{ (tom_hName) });
                return  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;
              }
              newHookList =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl, typedArgs,  tom.gom.adt.code.types.code.Code.make(tom_scode) , tomMatch461NameNumberfreshSubject_1) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) 
;
            }}}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_17=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_17 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_16= tomMatch461NameNumber_freshVar_17.getkind() ;{  String  tomMatch461NameNumber_freshVar_18=tomMatch461NameNumber_freshVar_16;if ( "Free".equals(tomMatch461NameNumber_freshVar_18) ) {if ( true ) {

              /* Even there is no code associated, we generate a MakeHook to prevent FL hooks to be automatically generated */
              return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ,  tom.gom.adt.code.types.code.Code.make("") ,  tom.gom.adt.gom.types.hookkind.HookKind.make("Free") ) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) 
;
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_20=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_20 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_19= tomMatch461NameNumber_freshVar_20.getkind() ;{  String  tomMatch461NameNumber_freshVar_21=tomMatch461NameNumber_freshVar_19;if ( "FL".equals(tomMatch461NameNumber_freshVar_21) ) {if ( true ) {

              /* FL: flattened list */
              return makeFLHookList(tom_hName,mdecl,tom_scode);
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_23=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_23 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_22= tomMatch461NameNumber_freshVar_23.getkind() ;{  String  tomMatch461NameNumber_freshVar_24=tomMatch461NameNumber_freshVar_22;if ( "AU".equals(tomMatch461NameNumber_freshVar_24) ) {if ( true ) {

              return makeAUHookList(tom_hName,mdecl,tom_scode);
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_26=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_26 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_25= tomMatch461NameNumber_freshVar_26.getkind() ;{  String  tomMatch461NameNumber_freshVar_27=tomMatch461NameNumber_freshVar_25;if ( "ACU".equals(tomMatch461NameNumber_freshVar_27) ) {if ( true ) {

              return makeACUHookList(tom_hName,mdecl,tom_scode);
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_29=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_29 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_28= tomMatch461NameNumber_freshVar_29.getkind() ;{  String  tomMatch461NameNumber_freshVar_30=tomMatch461NameNumber_freshVar_28;if ( "rules".equals(tomMatch461NameNumber_freshVar_30) ) {if ( true ) {

              return makeRulesHookList(tom_hName,mdecl,tom_scode);
            }}}}}}}}if ( (tom_hkind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )tom_hkind);{  tom.gom.adt.gom.types.HookKind  tomMatch461NameNumber_freshVar_32=tomMatch461NameNumberfreshSubject_1;if ( (tomMatch461NameNumber_freshVar_32 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch461NameNumber_freshVar_31= tomMatch461NameNumber_freshVar_32.getkind() ;{  String  tomMatch461NameNumber_freshVar_33=tomMatch461NameNumber_freshVar_31;if ( "graphrules".equals(tomMatch461NameNumber_freshVar_33) ) {if ( true ) {

              //TODO: verify if the option termgraph is on
              if(tom_hookArgs.length()!=2) {
                throw new GomRuntimeException(
                    "GomTypeExpander:graphrules hooks need two parameters: the name of the generated strategy and its default behaviour");
              }
              return makeGraphRulesHookList(tom_hName,tom_hookArgs,mdecl,tom_scode);
            }}}}}}}}}

          if (newHookList ==  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) {
            getLogger().log(Level.SEVERE, GomMessage.unknownHookKind.getMessage(), new Object[]{ (tom_hkind) });
          }
          return newHookList;
        }}}}}}}}}}}}}}

    throw new GomRuntimeException("HookTypeExpander: this hook is not a hook: "+ hook);
  }

  /**
   * Finds the ModuleDecl corresponding to a module name.
   *
   * @param mname the module name
   * @param moduleList the queried ModuleList
   * @return the ModuleDecl for mname
   */
  private ModuleDecl getModuleDecl(String mname, ModuleList moduleList) {
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch462NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch462NameNumber_freshVar_0=tomMatch462NameNumberfreshSubject_1;if ( ((tomMatch462NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch462NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch462NameNumber_begin_2=tomMatch462NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch462NameNumber_end_3=tomMatch462NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch462NameNumber_freshVar_1=tomMatch462NameNumber_end_3;if (!( tomMatch462NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch462NameNumber_freshVar_7= tomMatch462NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch462NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch462NameNumber_freshVar_6= tomMatch462NameNumber_freshVar_7.getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch462NameNumber_freshVar_9=tomMatch462NameNumber_freshVar_6;if ( (tomMatch462NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch462NameNumber_freshVar_8= tomMatch462NameNumber_freshVar_9.getModuleName() ;{  tom.gom.adt.gom.types.GomModuleName  tomMatch462NameNumber_freshVar_11=tomMatch462NameNumber_freshVar_8;if ( (tomMatch462NameNumber_freshVar_11 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch462NameNumber_freshVar_10= tomMatch462NameNumber_freshVar_11.getName() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch462NameNumber_freshVar_4= tomMatch462NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {




        if (tomMatch462NameNumber_freshVar_10.equals(mname)) {
          return tomMatch462NameNumber_freshVar_6;
        }
      }}}}}}}}}}}}}if ( tomMatch462NameNumber_end_3.isEmptyConcModule() ) {tomMatch462NameNumber_end_3=tomMatch462NameNumber_begin_2;} else {tomMatch462NameNumber_end_3= tomMatch462NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch462NameNumber_end_3==tomMatch462NameNumber_begin_2) ));}}}}}}}

    throw new GomRuntimeException(
        "HookTypeExpander: Module not found: "+mname);
  }

  /**
   * Finds the SortDecl corresponding to a sort name.
   *
   * @param sname the sort name
   * @param modName the module name that should contain the sort
   * @param moduleList the queried ModuleList
   * @return the SortDecl for sname
   */
  private SortDecl getSortDecl(String sname, String modName, ModuleList moduleList) {
    {if ( true ) {{  String  tomMatch463NameNumberfreshSubject_1=(( String )modName);if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch463NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch463NameNumber_freshVar_0=tomMatch463NameNumberfreshSubject_2;if ( ((tomMatch463NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch463NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch463NameNumber_begin_2=tomMatch463NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch463NameNumber_end_3=tomMatch463NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch463NameNumber_freshVar_1=tomMatch463NameNumber_end_3;if (!( tomMatch463NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch463NameNumber_freshVar_8= tomMatch463NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch463NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch463NameNumber_freshVar_6= tomMatch463NameNumber_freshVar_8.getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch463NameNumber_freshVar_7= tomMatch463NameNumber_freshVar_8.getSorts() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch463NameNumber_freshVar_10=tomMatch463NameNumber_freshVar_6;if ( (tomMatch463NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch463NameNumber_freshVar_9= tomMatch463NameNumber_freshVar_10.getModuleName() ;{  tom.gom.adt.gom.types.GomModuleName  tomMatch463NameNumber_freshVar_12=tomMatch463NameNumber_freshVar_9;if ( (tomMatch463NameNumber_freshVar_12 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch463NameNumber_freshVar_11= tomMatch463NameNumber_freshVar_12.getName() ;{  String  tomMatch463NameNumber_freshVar_19=tomMatch463NameNumber_freshVar_11;if ( tomMatch463NameNumber_freshVar_19.equals(tomMatch463NameNumberfreshSubject_1) ) {{  tom.gom.adt.gom.types.SortList  tomMatch463NameNumber_freshVar_13=tomMatch463NameNumber_freshVar_7;if ( ((tomMatch463NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch463NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch463NameNumber_begin_15=tomMatch463NameNumber_freshVar_13;{  tom.gom.adt.gom.types.SortList  tomMatch463NameNumber_end_16=tomMatch463NameNumber_freshVar_13;do {{{  tom.gom.adt.gom.types.SortList  tomMatch463NameNumber_freshVar_14=tomMatch463NameNumber_end_16;if (!( tomMatch463NameNumber_freshVar_14.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch463NameNumber_freshVar_21= tomMatch463NameNumber_freshVar_14.getHeadConcSort() ;if ( (tomMatch463NameNumber_freshVar_21 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch463NameNumber_freshVar_20= tomMatch463NameNumber_freshVar_21.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch463NameNumber_freshVar_23=tomMatch463NameNumber_freshVar_20;if ( (tomMatch463NameNumber_freshVar_23 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch463NameNumber_freshVar_22= tomMatch463NameNumber_freshVar_23.getName() ;{  tom.gom.adt.gom.types.SortList  tomMatch463NameNumber_freshVar_17= tomMatch463NameNumber_freshVar_14.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch463NameNumber_freshVar_4= tomMatch463NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {






          if (tomMatch463NameNumber_freshVar_22.equals(sname)) {
            return tomMatch463NameNumber_freshVar_20;
          }
        }}}}}}}}}}}if ( tomMatch463NameNumber_end_16.isEmptyConcSort() ) {tomMatch463NameNumber_end_16=tomMatch463NameNumber_begin_15;} else {tomMatch463NameNumber_end_16= tomMatch463NameNumber_end_16.getTailConcSort() ;}}} while(!( (tomMatch463NameNumber_end_16==tomMatch463NameNumber_begin_15) ));}}}}}}}}}}}}}}}}}}if ( tomMatch463NameNumber_end_3.isEmptyConcModule() ) {tomMatch463NameNumber_end_3=tomMatch463NameNumber_begin_2;} else {tomMatch463NameNumber_end_3= tomMatch463NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch463NameNumber_end_3==tomMatch463NameNumber_begin_2) ));}}}}}}}}}

    throw new GomRuntimeException(
        "HookTypeExpander: Sort not found: "+sname);
  }

  /**
   * Finds the OperatorDecl corresponding to an operator name.
   *
   * @param oname the sort name
   * @param modName the module name that should contain the operator
   * @param moduleList the queried ModuleList
   * @return the OperatorDecl for sname
   */
  private OperatorDecl getOperatorDecl(
      String oname,
      String modName,
      ModuleList moduleList) {
    {if ( true ) {{  String  tomMatch464NameNumberfreshSubject_1=(( String )modName);if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch464NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch464NameNumber_freshVar_0=tomMatch464NameNumberfreshSubject_2;if ( ((tomMatch464NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch464NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch464NameNumber_begin_2=tomMatch464NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch464NameNumber_end_3=tomMatch464NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch464NameNumber_freshVar_1=tomMatch464NameNumber_end_3;if (!( tomMatch464NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch464NameNumber_freshVar_8= tomMatch464NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch464NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch464NameNumber_freshVar_6= tomMatch464NameNumber_freshVar_8.getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch464NameNumber_freshVar_7= tomMatch464NameNumber_freshVar_8.getSorts() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch464NameNumber_freshVar_10=tomMatch464NameNumber_freshVar_6;if ( (tomMatch464NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch464NameNumber_freshVar_9= tomMatch464NameNumber_freshVar_10.getModuleName() ;{  tom.gom.adt.gom.types.GomModuleName  tomMatch464NameNumber_freshVar_12=tomMatch464NameNumber_freshVar_9;if ( (tomMatch464NameNumber_freshVar_12 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch464NameNumber_freshVar_11= tomMatch464NameNumber_freshVar_12.getName() ;{  String  tomMatch464NameNumber_freshVar_19=tomMatch464NameNumber_freshVar_11;if ( tomMatch464NameNumber_freshVar_19.equals(tomMatch464NameNumberfreshSubject_1) ) {{  tom.gom.adt.gom.types.SortList  tomMatch464NameNumber_freshVar_13=tomMatch464NameNumber_freshVar_7;if ( ((tomMatch464NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch464NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch464NameNumber_begin_15=tomMatch464NameNumber_freshVar_13;{  tom.gom.adt.gom.types.SortList  tomMatch464NameNumber_end_16=tomMatch464NameNumber_freshVar_13;do {{{  tom.gom.adt.gom.types.SortList  tomMatch464NameNumber_freshVar_14=tomMatch464NameNumber_end_16;if (!( tomMatch464NameNumber_freshVar_14.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch464NameNumber_freshVar_21= tomMatch464NameNumber_freshVar_14.getHeadConcSort() ;if ( (tomMatch464NameNumber_freshVar_21 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch464NameNumber_freshVar_20= tomMatch464NameNumber_freshVar_21.getOperatorDecls() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch464NameNumber_freshVar_22=tomMatch464NameNumber_freshVar_20;if ( ((tomMatch464NameNumber_freshVar_22 instanceof tom.gom.adt.gom.types.operatordecllist.ConsConcOperator) || (tomMatch464NameNumber_freshVar_22 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch464NameNumber_begin_24=tomMatch464NameNumber_freshVar_22;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch464NameNumber_end_25=tomMatch464NameNumber_freshVar_22;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch464NameNumber_freshVar_23=tomMatch464NameNumber_end_25;if (!( tomMatch464NameNumber_freshVar_23.isEmptyConcOperator() )) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch464NameNumber_freshVar_29= tomMatch464NameNumber_freshVar_23.getHeadConcOperator() ;if ( (tomMatch464NameNumber_freshVar_29 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch464NameNumber_freshVar_28= tomMatch464NameNumber_freshVar_29.getName() ;{  tom.gom.adt.gom.types.OperatorDecl  tom_odecl= tomMatch464NameNumber_freshVar_23.getHeadConcOperator() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch464NameNumber_freshVar_26= tomMatch464NameNumber_freshVar_23.getTailConcOperator() ;{  tom.gom.adt.gom.types.SortList  tomMatch464NameNumber_freshVar_17= tomMatch464NameNumber_freshVar_14.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch464NameNumber_freshVar_4= tomMatch464NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {








        if (tomMatch464NameNumber_freshVar_28.equals(oname)) {
          return tom_odecl;
        }
      }}}}}}}}}}if ( tomMatch464NameNumber_end_25.isEmptyConcOperator() ) {tomMatch464NameNumber_end_25=tomMatch464NameNumber_begin_24;} else {tomMatch464NameNumber_end_25= tomMatch464NameNumber_end_25.getTailConcOperator() ;}}} while(!( (tomMatch464NameNumber_end_25==tomMatch464NameNumber_begin_24) ));}}}}}}}}}if ( tomMatch464NameNumber_end_16.isEmptyConcSort() ) {tomMatch464NameNumber_end_16=tomMatch464NameNumber_begin_15;} else {tomMatch464NameNumber_end_16= tomMatch464NameNumber_end_16.getTailConcSort() ;}}} while(!( (tomMatch464NameNumber_end_16==tomMatch464NameNumber_begin_15) ));}}}}}}}}}}}}}}}}}}if ( tomMatch464NameNumber_end_3.isEmptyConcModule() ) {tomMatch464NameNumber_end_3=tomMatch464NameNumber_begin_2;} else {tomMatch464NameNumber_end_3= tomMatch464NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch464NameNumber_end_3==tomMatch464NameNumber_begin_2) ));}}}}}}}}}

    getLogger().log(Level.SEVERE,
        GomMessage.orphanedHook.getMessage(),
        new Object[]{oname});
    return null;
  }

  private SlotList typeArguments(
      ArgList args,
      HookKind kind,
      Decl decl) {
    {if ( (kind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch465NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )kind);{  tom.gom.adt.gom.types.HookKind  tomMatch465NameNumber_freshVar_1=tomMatch465NameNumberfreshSubject_1;if ( (tomMatch465NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch465NameNumber_freshVar_0= tomMatch465NameNumber_freshVar_1.getkind() ;{  String  tomMatch465NameNumber_freshVar_2=tomMatch465NameNumber_freshVar_0;if ( "make".equals(tomMatch465NameNumber_freshVar_2) ) {if ( true ) {

        /*
         * The TypedProduction has to be Slots
         * A KindMakeHook is attached to an operator
         */
        {if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch466NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);{  tom.gom.adt.gom.types.Decl  tomMatch466NameNumber_freshVar_1=tomMatch466NameNumberfreshSubject_1;if ( (tomMatch466NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch466NameNumber_freshVar_0= tomMatch466NameNumber_freshVar_1.getODecl() ;{  tom.gom.adt.gom.types.OperatorDecl  tomMatch466NameNumber_freshVar_3=tomMatch466NameNumber_freshVar_0;if ( (tomMatch466NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch466NameNumber_freshVar_2= tomMatch466NameNumber_freshVar_3.getProd() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch466NameNumber_freshVar_5=tomMatch466NameNumber_freshVar_2;if ( (tomMatch466NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.typedproduction.Slots) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch466NameNumber_freshVar_4= tomMatch466NameNumber_freshVar_5.getSlots() ;{  tom.gom.adt.gom.types.SlotList  tom_slotList=tomMatch466NameNumber_freshVar_4;if ( true ) {

            /* tests the arguments number */
            if (args.length() != tom_slotList.length()) {
              SlotList slist = tom_slotList;
              getLogger().log(Level.SEVERE,
                  GomMessage.mismatchedMakeArguments.getMessage(),
                  new Object[]{args,slist });
              return null;
            }
            /* Then check the types */
            return recArgSlots(args,tom_slotList);
          }}}}}}}}}}}}}if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch466NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookAlgebraic.getMessage(),
                new Object[]{ kind });
            return null;
          }}}}

      }}}}}}}}if ( (kind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch465NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )kind);{  tom.gom.adt.gom.types.HookKind  tomMatch465NameNumber_freshVar_4=tomMatch465NameNumberfreshSubject_1;if ( (tomMatch465NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch465NameNumber_freshVar_3= tomMatch465NameNumber_freshVar_4.getkind() ;{  String  tomMatch465NameNumber_freshVar_5=tomMatch465NameNumber_freshVar_3;if ( "make_insert".equals(tomMatch465NameNumber_freshVar_5) ) {if ( true ) {

        /*
         * The TypedProduction has to be Variadic
         * Then we get the codomain from the operatordecl
         */
        {if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch467NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);{  tom.gom.adt.gom.types.Decl  tomMatch467NameNumber_freshVar_1=tomMatch467NameNumberfreshSubject_1;if ( (tomMatch467NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch467NameNumber_freshVar_0= tomMatch467NameNumber_freshVar_1.getODecl() ;{  tom.gom.adt.gom.types.OperatorDecl  tomMatch467NameNumber_freshVar_4=tomMatch467NameNumber_freshVar_0;if ( (tomMatch467NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch467NameNumber_freshVar_2= tomMatch467NameNumber_freshVar_4.getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch467NameNumber_freshVar_3= tomMatch467NameNumber_freshVar_4.getProd() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch467NameNumber_freshVar_6=tomMatch467NameNumber_freshVar_3;if ( (tomMatch467NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch467NameNumber_freshVar_5= tomMatch467NameNumber_freshVar_6.getSort() ;if ( true ) {


              // for a make_insert hook, there are two arguments: head, tail
              {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumber_freshVar_0=tomMatch468NameNumberfreshSubject_1;if ( ((tomMatch468NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.ConsConcArg) || (tomMatch468NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.EmptyConcArg)) ) {if (!( tomMatch468NameNumber_freshVar_0.isEmptyConcArg() )) {{  tom.gom.adt.gom.types.Arg  tomMatch468NameNumber_freshVar_4= tomMatch468NameNumber_freshVar_0.getHeadConcArg() ;if ( (tomMatch468NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch468NameNumber_freshVar_3= tomMatch468NameNumber_freshVar_4.getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumber_freshVar_1= tomMatch468NameNumber_freshVar_0.getTailConcArg() ;if (!( tomMatch468NameNumber_freshVar_1.isEmptyConcArg() )) {{  tom.gom.adt.gom.types.Arg  tomMatch468NameNumber_freshVar_6= tomMatch468NameNumber_freshVar_1.getHeadConcArg() ;if ( (tomMatch468NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch468NameNumber_freshVar_5= tomMatch468NameNumber_freshVar_6.getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumber_freshVar_2= tomMatch468NameNumber_freshVar_1.getTailConcArg() ;if ( tomMatch468NameNumber_freshVar_2.isEmptyConcArg() ) {if ( true ) {

                  return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make(tomMatch468NameNumber_freshVar_3, tomMatch467NameNumber_freshVar_5) , tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make(tomMatch468NameNumber_freshVar_5, tomMatch467NameNumber_freshVar_2) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ;
                }}}}}}}}}}}}}}}}if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch468NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( true ) {

                  getLogger().log(Level.SEVERE,
                      GomMessage.badHookArguments.getMessage(),
                      new Object[]{ (tomMatch465NameNumber_freshVar_3), new Integer(args.length())});
                  return null;
                }}}}

            }}}}}}}}}}}}}if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch467NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookVariadic.getMessage(),
                new Object[]{ kind });
            return null;
          }}}}

      }}}}}}}}if ( (kind instanceof tom.gom.adt.gom.types.HookKind) ) {{  tom.gom.adt.gom.types.HookKind  tomMatch465NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.HookKind )kind);{  tom.gom.adt.gom.types.HookKind  tomMatch465NameNumber_freshVar_7=tomMatch465NameNumberfreshSubject_1;if ( (tomMatch465NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.hookkind.HookKind) ) {{  String  tomMatch465NameNumber_freshVar_6= tomMatch465NameNumber_freshVar_7.getkind() ;{  String  tomMatch465NameNumber_freshVar_8=tomMatch465NameNumber_freshVar_6;if ( "make_empty".equals(tomMatch465NameNumber_freshVar_8) ) {if ( true ) {

        /*
         * The TypedProduction has to be Variadic
         * Then we get the codomain from the operatordecl
         */
        {if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch469NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);{  tom.gom.adt.gom.types.Decl  tomMatch469NameNumber_freshVar_1=tomMatch469NameNumberfreshSubject_1;if ( (tomMatch469NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch469NameNumber_freshVar_0= tomMatch469NameNumber_freshVar_1.getODecl() ;{  tom.gom.adt.gom.types.OperatorDecl  tomMatch469NameNumber_freshVar_3=tomMatch469NameNumber_freshVar_0;if ( (tomMatch469NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch469NameNumber_freshVar_2= tomMatch469NameNumber_freshVar_3.getProd() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch469NameNumber_freshVar_4=tomMatch469NameNumber_freshVar_2;if ( (tomMatch469NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {if ( true ) {


              // for a make_empty hook, there is no argument
              {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch470NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);{  tom.gom.adt.gom.types.ArgList  tomMatch470NameNumber_freshVar_0=tomMatch470NameNumberfreshSubject_1;if ( ((tomMatch470NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.ConsConcArg) || (tomMatch470NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.EmptyConcArg)) ) {if ( tomMatch470NameNumber_freshVar_0.isEmptyConcArg() ) {if ( true ) {
 return  tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ; }}}}}}if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch470NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);if ( true ) {

                  getLogger().log(Level.SEVERE,
                      GomMessage.badHookArguments.getMessage(),
                      new Object[]{ (tomMatch465NameNumber_freshVar_6), new Integer(args.length())});
                  return null;
                }}}}

            }}}}}}}}}}}if ( (decl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch469NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )decl);if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookVariadic.getMessage(),
                new Object[]{ kind });
            return null;
          }}}}

      }}}}}}}}}

    throw new GomRuntimeException("Hook kind \""+kind+"\" not supported");
  }

  private SlotList recArgSlots(ArgList args, SlotList slots) {
    {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch471NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);{  tom.gom.adt.gom.types.ArgList  tomMatch471NameNumber_freshVar_0=tomMatch471NameNumberfreshSubject_1;if ( ((tomMatch471NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.ConsConcArg) || (tomMatch471NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.EmptyConcArg)) ) {if ( tomMatch471NameNumber_freshVar_0.isEmptyConcArg() ) {if ( (slots instanceof tom.gom.adt.gom.types.SlotList) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch471NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.SlotList )slots);{  tom.gom.adt.gom.types.SlotList  tomMatch471NameNumber_freshVar_1=tomMatch471NameNumberfreshSubject_2;if ( ((tomMatch471NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.slotlist.ConsConcSlot) || (tomMatch471NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.slotlist.EmptyConcSlot)) ) {if ( tomMatch471NameNumber_freshVar_1.isEmptyConcSlot() ) {if ( true ) {

        return  tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ;
      }}}}}}}}}}}if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch471NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);{  tom.gom.adt.gom.types.ArgList  tomMatch471NameNumber_freshVar_2=tomMatch471NameNumberfreshSubject_1;if ( ((tomMatch471NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.arglist.ConsConcArg) || (tomMatch471NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.arglist.EmptyConcArg)) ) {if (!( tomMatch471NameNumber_freshVar_2.isEmptyConcArg() )) {{  tom.gom.adt.gom.types.Arg  tomMatch471NameNumber_freshVar_9= tomMatch471NameNumber_freshVar_2.getHeadConcArg() ;if ( (tomMatch471NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch471NameNumber_freshVar_8= tomMatch471NameNumber_freshVar_9.getName() ;{  tom.gom.adt.gom.types.ArgList  tomMatch471NameNumber_freshVar_3= tomMatch471NameNumber_freshVar_2.getTailConcArg() ;if ( (slots instanceof tom.gom.adt.gom.types.SlotList) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch471NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.SlotList )slots);{  tom.gom.adt.gom.types.SlotList  tomMatch471NameNumber_freshVar_5=tomMatch471NameNumberfreshSubject_2;if ( ((tomMatch471NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.slotlist.ConsConcSlot) || (tomMatch471NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.slotlist.EmptyConcSlot)) ) {if (!( tomMatch471NameNumber_freshVar_5.isEmptyConcSlot() )) {{  tom.gom.adt.gom.types.Slot  tomMatch471NameNumber_freshVar_11= tomMatch471NameNumber_freshVar_5.getHeadConcSlot() ;if ( (tomMatch471NameNumber_freshVar_11 instanceof tom.gom.adt.gom.types.slot.Slot) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch471NameNumber_freshVar_10= tomMatch471NameNumber_freshVar_11.getSort() ;{  tom.gom.adt.gom.types.SlotList  tomMatch471NameNumber_freshVar_6= tomMatch471NameNumber_freshVar_5.getTailConcSlot() ;if ( true ) {

        SlotList tail = recArgSlots(tomMatch471NameNumber_freshVar_3,tomMatch471NameNumber_freshVar_6);
        return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make(tomMatch471NameNumber_freshVar_8, tomMatch471NameNumber_freshVar_10) ,tom_append_list_ConcSlot(tail, tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() )) ;
      }}}}}}}}}}}}}}}}}}}}

    throw new GomRuntimeException("GomTypeExpander:recArgSlots failed "+args+" "+slots);
  }

  private String trimBracket(String stringCode) {
    int start = stringCode.indexOf('{')+1;
    int end = stringCode.lastIndexOf('}');
    return stringCode.substring(start,end).trim();
  }

  private SortDecl getSortAndCheck(Decl mdecl) {
    {if ( (mdecl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch472NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )mdecl);{  tom.gom.adt.gom.types.Decl  tomMatch472NameNumber_freshVar_1=tomMatch472NameNumberfreshSubject_1;if ( (tomMatch472NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.decl.CutOperator) ) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch472NameNumber_freshVar_0= tomMatch472NameNumber_freshVar_1.getODecl() ;{  tom.gom.adt.gom.types.OperatorDecl  tomMatch472NameNumber_freshVar_4=tomMatch472NameNumber_freshVar_0;if ( (tomMatch472NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch472NameNumber_freshVar_2= tomMatch472NameNumber_freshVar_4.getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch472NameNumber_freshVar_3= tomMatch472NameNumber_freshVar_4.getProd() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch472NameNumber_freshVar_6=tomMatch472NameNumber_freshVar_3;if ( (tomMatch472NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch472NameNumber_freshVar_5= tomMatch472NameNumber_freshVar_6.getSort() ;{  tom.gom.adt.gom.types.SortDecl  tom_sdecl=tomMatch472NameNumber_freshVar_5;if ( true ) {

        if (tomMatch472NameNumber_freshVar_2== tom_sdecl) {
          return tom_sdecl;
        } else {
          getLogger().log(Level.SEVERE,
              "Different domain and codomain");
        }
      }}}}}}}}}}}}}}if ( (mdecl instanceof tom.gom.adt.gom.types.Decl) ) {{  tom.gom.adt.gom.types.Decl  tomMatch472NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Decl )mdecl);if ( true ) {

        getLogger().log(Level.SEVERE,
            "FL/AU/ACU hook can only be used on a variadic operator");
      }}}}

    return null;
  }

  /*
   * generate hooks for normalizing rules 
   */
  private HookDeclList makeRulesHookList(String opName, Decl mdecl, String scode) {
    RuleExpander rexpander = new RuleExpander(moduleList);
    return rexpander.expandRules(trimBracket(scode));
  }

  /*
   * generate hooks for term-graph rules 
   */
  private HookDeclList makeGraphRulesHookList(String sortname, ArgList args, Decl sdecl, String scode) {
    {if ( (args instanceof tom.gom.adt.gom.types.ArgList) ) {{  tom.gom.adt.gom.types.ArgList  tomMatch473NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ArgList )args);{  tom.gom.adt.gom.types.ArgList  tomMatch473NameNumber_freshVar_0=tomMatch473NameNumberfreshSubject_1;if ( ((tomMatch473NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.ConsConcArg) || (tomMatch473NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.arglist.EmptyConcArg)) ) {if (!( tomMatch473NameNumber_freshVar_0.isEmptyConcArg() )) {{  tom.gom.adt.gom.types.Arg  tomMatch473NameNumber_freshVar_4= tomMatch473NameNumber_freshVar_0.getHeadConcArg() ;if ( (tomMatch473NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch473NameNumber_freshVar_3= tomMatch473NameNumber_freshVar_4.getName() ;{  String  tom_stratname=tomMatch473NameNumber_freshVar_3;{  tom.gom.adt.gom.types.ArgList  tomMatch473NameNumber_freshVar_1= tomMatch473NameNumber_freshVar_0.getTailConcArg() ;if (!( tomMatch473NameNumber_freshVar_1.isEmptyConcArg() )) {{  tom.gom.adt.gom.types.Arg  tomMatch473NameNumber_freshVar_6= tomMatch473NameNumber_freshVar_1.getHeadConcArg() ;if ( (tomMatch473NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.arg.Arg) ) {{  String  tomMatch473NameNumber_freshVar_5= tomMatch473NameNumber_freshVar_6.getName() ;{  String  tom_defaultstrat=tomMatch473NameNumber_freshVar_5;{  tom.gom.adt.gom.types.ArgList  tomMatch473NameNumber_freshVar_2= tomMatch473NameNumber_freshVar_1.getTailConcArg() ;if ( tomMatch473NameNumber_freshVar_2.isEmptyConcArg() ) {if ( true ) {

        if (!tom_defaultstrat.equals("Fail") && !tom_defaultstrat.equals("Identity")) {
          getLogger().log(Level.SEVERE,
              "In graphrules hooks, the default strategies authorized are only Fail and Identity");
        }
        GraphRuleExpander rexpander = new GraphRuleExpander(moduleList);
        if (sortsWithGraphrules.contains(sdecl)) {
          return rexpander.expandGraphRules(sortname,tom_stratname,tom_defaultstrat,trimBracket(scode),sdecl);
        } else {
          sortsWithGraphrules.add(sdecl);
          return rexpander.expandFirstGraphRules(sortname,tom_stratname,tom_defaultstrat,trimBracket(scode),sdecl);
        }
      }}}}}}}}}}}}}}}}}}}

    return null;
  }

  /*
   * generate hooks for associative-commutative with neutral element
   */
  private HookDeclList makeACUHookList(String opName, Decl mdecl, String scode) {
    /* Can only be applied to a variadic operator, whose domain and codomain
     * are equals */
    SortDecl domain = getSortAndCheck(mdecl);
    if (null == domain)
      return  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;

    /* start with AU normalization */
    HookDeclList acHooks = makeAUHookList(opName, mdecl, scode);
    /*
     * add the following hooks:
     * if(tail.isConc) {
     *   if(head < tail.head) {
     *     tmp = head
     *     head = tail.head
     *     tail = cons(tmp,tail.tail)
     *   }
     * } else if(head < tail) {
     *   tmp = head
     *   head = tail
     *   tail = tmp
     * }
     * // in all cases:
     * return makeReal(head,tail)
     */
    acHooks =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  if (0 < ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Compare.make( tom.gom.adt.code.types.code.Code.make("head") ,  tom.gom.adt.code.types.code.Code.make("tail.getHead" + opName+ "()") ) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.FullSortClass.make(domain) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(" tmpHd = head;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    head = tail.getHead" + opName+ "();\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    tail = `" + opName+ "(tmpHd,tail.getTail" + opName+ "());\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("} else {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  if (0 < ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Compare.make( tom.gom.adt.code.types.code.Code.make("head") ,  tom.gom.adt.code.types.code.Code.make("tail") ) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") {\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    ") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.FullSortClass.make(domain) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(" tmpHd = head;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    head = tail;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("    tail = tmpHd;\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("  }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("}\n") 
            , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("ACU") ) ,tom_append_list_ConcHookDecl(acHooks, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() )) 
























;
    return acHooks;
  }

  /*
   * generate hooks for associative with neutral element
   */
  private HookDeclList makeAUHookList(String opName, Decl mdecl, String scode) {
    /* Can only be applied to a variadic operator, whose domain and codomain
     * are equals */
    SortDecl domain = getSortAndCheck(mdecl);
    if (null == domain)
      return  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;

    HookDeclList auHooks =  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;
    String userNeutral = trimBracket(scode);
    if(userNeutral.length() > 0) {
      /* The hook body is the name of the neutral element */
      auHooks =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ,  tom.gom.adt.code.types.code.Code.make("return "+userNeutral+";") ,  tom.gom.adt.gom.types.hookkind.HookKind.make("AU") ) ,tom_append_list_ConcHookDecl(auHooks, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() )) 

;
      /* 
       * Remove neutral:
       * if(<head> == makeNeutral) { return <tail>; }
       * if(<tail> == makeNeutral) { return <head>; }
       */
      auHooks =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (head == "+userNeutral+") { return tail; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (tail ==  "+userNeutral+") { return head; }\n") 
              , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("AU") ) ,tom_append_list_ConcHookDecl(auHooks, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() )) 







;
    }
    /* getODecl call is safe here, since mdecl was checked by getSortAndCheck */
    /*
     * Remove neutral and flatten:
     * if(<head>.isEmpty<conc>()) { return <tail>; }
     * if(<tail>.isEmpty<conc>()) { return <head>; }
     * if(<head>.isCons<conc>()) { return make(head.head,make(head.tail,tail)); }
     */
    auHooks =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return tail; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return head; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return make(head.getHead" + opName+ "(),make(head.getTail" + opName+ "(),tail)); }\n") 
            , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ) ) ) ) ) ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("AU") ) ,tom_append_list_ConcHookDecl(auHooks, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() )) 














;

    return auHooks;
  }

  /*
   * generate hooks for flattened lists (with empty list as last element)
   */
  private HookDeclList makeFLHookList(String opName, Decl mdecl, String scode) {
    /* Can only be applied to a variadic operator, whose domain and codomain
     * are equals */
    SortDecl domain = getSortAndCheck(mdecl);
    if(null == domain) {
      return  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;
    }

    String userNeutral = trimBracket(scode);
    if(userNeutral.length() > 0) {
      getLogger().log(Level.SEVERE,
          "FL hook does not allow the definition of a neutral element");
    }

    HookDeclList hooks =  tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ;
    /* getODecl call is safe here, since mdecl was checked by getSortAndCheck */
    /*
     * Remove neutral and flatten:
     * if(<head>.isEmpty<Conc>()) { return <tail>; }
     * if(<head>.isCons<Conc>()) { return make(head.head,make(head.tail,tail)); }
     * if(!<tail>.isCons<Conc>() && !<tail>.isEmpty<Conc>()) { return make(<tail>,<empty>); }
     */
    hooks =  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(mdecl,  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("head", domain) , tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("tail", domain) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ,  tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return tail; }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("head", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return make(head.getHead" + opName+ "(),make(head.getTail" + opName+ "(),tail)); }\n") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make("if (!") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsCons.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(" && !") , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.IsEmpty.make("tail", mdecl.getODecl()) , tom.gom.adt.code.types.code.ConsCodeList.make( tom.gom.adt.code.types.code.Code.make(") { return make(head,make(tail,Empty" + opName+ ".make())); }\n") 
            , tom.gom.adt.code.types.code.EmptyCodeList.make() ) ) ) ) ) ) ) ) ) ) ) ,  tom.gom.adt.gom.types.hookkind.HookKind.make("FL") ) ,tom_append_list_ConcHookDecl(hooks, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() )) 
















;

    return hooks;
  }

  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
