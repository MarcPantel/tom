/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class GomTypeExpander {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static  char  tom_set_stamp_char( char  c) {  return  c  ;}private static void tom_check_stamp_char( char  c) { ;}private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static  Character  tom_set_stamp_Character( Character  c) {  return  c  ;}private static void tom_check_stamp_Character( Character  c) { ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_fun_sym_Char( Character  t) {  return  (t!= null) && (t instanceof Character)  ;}private static  Character  tom_make_Char( char  c) { return  new Character(c) ; }private static  char  tom_get_slot_Char_c( Character  t) {  return  t.charValue()  ;} private static  String  tom_set_stamp_String( String  s) {  return  s  ;}private static void tom_check_stamp_String( String  s) { ;}private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_fun_sym_concString( String  t) {  return  (t!= null) && (t instanceof String)  ;}private static  String  tom_empty_list_concString() { return  "" ; }private static  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }private static  char  tom_get_head_concString_String( String  s) {  return  s.charAt(0)  ;}private static  String  tom_get_tail_concString_String( String  s) {  return  s.substring(1)  ;}private static boolean tom_is_empty_concString_String( String  s) {  return  (s.length()==0)  ;}private static  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  private static  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Hookkind(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ArgList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomModuleList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GrammarList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TypedProduction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SectionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomModule(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Section(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomTypeList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ProductionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ImportList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Sort(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ModuleDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Grammar(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_FieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Arg(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Production(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Field(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomModuleName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ModuleDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ImportedModule(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_Slot( tom.gom.adt.gom.types.Slot  t) {  return  (t!=null) && t.isSlot()  ;}private static  tom.gom.adt.gom.types.Slot  tom_make_Slot( String  t0,  tom.gom.adt.gom.types.SortDecl  t1) { return  tom.gom.adt.gom.types.slot.Slot.make(t0, t1); }private static  String  tom_get_slot_Slot_name( tom.gom.adt.gom.types.Slot  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Slot_sort( tom.gom.adt.gom.types.Slot  t) {  return  t.getsort()  ;}private static boolean tom_is_fun_sym_KindMakeinsertHook( tom.gom.adt.gom.types.Hookkind  t) {  return  (t!=null) && t.isKindMakeinsertHook()  ;}private static  tom.gom.adt.gom.types.Hookkind  tom_make_KindMakeinsertHook() { return  tom.gom.adt.gom.types.hookkind.KindMakeinsertHook.make(); }private static boolean tom_is_fun_sym_KindMakeHook( tom.gom.adt.gom.types.Hookkind  t) {  return  (t!=null) && t.isKindMakeHook()  ;}private static  tom.gom.adt.gom.types.Hookkind  tom_make_KindMakeHook() { return  tom.gom.adt.gom.types.hookkind.KindMakeHook.make(); }private static boolean tom_is_fun_sym_ConsconcArg( tom.gom.adt.gom.types.ArgList  t) {  return  (t!=null) && t.isConsconcArg()  ;}private static  tom.gom.adt.gom.types.ArgList  tom_make_ConsconcArg( tom.gom.adt.gom.types.Arg  t0,  tom.gom.adt.gom.types.ArgList  t1) { return  tom.gom.adt.gom.types.arglist.ConsconcArg.make(t0, t1); }private static  tom.gom.adt.gom.types.Arg  tom_get_slot_ConsconcArg_HeadconcArg( tom.gom.adt.gom.types.ArgList  t) {  return  t.getHeadconcArg()  ;}private static  tom.gom.adt.gom.types.ArgList  tom_get_slot_ConsconcArg_TailconcArg( tom.gom.adt.gom.types.ArgList  t) {  return  t.getTailconcArg()  ;}private static boolean tom_is_fun_sym_ConsconcGomModule( tom.gom.adt.gom.types.GomModuleList  t) {  return  (t!=null) && t.isConsconcGomModule()  ;}private static  tom.gom.adt.gom.types.GomModuleList  tom_make_ConsconcGomModule( tom.gom.adt.gom.types.GomModule  t0,  tom.gom.adt.gom.types.GomModuleList  t1) { return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make(t0, t1); }private static  tom.gom.adt.gom.types.GomModule  tom_get_slot_ConsconcGomModule_HeadconcGomModule( tom.gom.adt.gom.types.GomModuleList  t) {  return  t.getHeadconcGomModule()  ;}private static  tom.gom.adt.gom.types.GomModuleList  tom_get_slot_ConsconcGomModule_TailconcGomModule( tom.gom.adt.gom.types.GomModuleList  t) {  return  t.getTailconcGomModule()  ;}private static boolean tom_is_fun_sym_ConsconcGrammar( tom.gom.adt.gom.types.GrammarList  t) {  return  (t!=null) && t.isConsconcGrammar()  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_make_ConsconcGrammar( tom.gom.adt.gom.types.Grammar  t0,  tom.gom.adt.gom.types.GrammarList  t1) { return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make(t0, t1); }private static  tom.gom.adt.gom.types.Grammar  tom_get_slot_ConsconcGrammar_HeadconcGrammar( tom.gom.adt.gom.types.GrammarList  t) {  return  t.getHeadconcGrammar()  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_get_slot_ConsconcGrammar_TailconcGrammar( tom.gom.adt.gom.types.GrammarList  t) {  return  t.getTailconcGrammar()  ;}private static boolean tom_is_fun_sym_Variadic( tom.gom.adt.gom.types.TypedProduction  t) {  return  (t!=null) && t.isVariadic()  ;}private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Variadic( tom.gom.adt.gom.types.SortDecl  t0) { return  tom.gom.adt.gom.types.typedproduction.Variadic.make(t0); }private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Variadic_sort( tom.gom.adt.gom.types.TypedProduction  t) {  return  t.getsort()  ;}private static boolean tom_is_fun_sym_Slots( tom.gom.adt.gom.types.TypedProduction  t) {  return  (t!=null) && t.isSlots()  ;}private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Slots( tom.gom.adt.gom.types.SlotList  t0) { return  tom.gom.adt.gom.types.typedproduction.Slots.make(t0); }private static  tom.gom.adt.gom.types.SlotList  tom_get_slot_Slots_slots( tom.gom.adt.gom.types.TypedProduction  t) {  return  t.getslots()  ;}private static boolean tom_is_fun_sym_ConsconcHookDecl( tom.gom.adt.gom.types.HookDeclList  t) {  return  (t!=null) && t.isConsconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_make_ConsconcHookDecl( tom.gom.adt.gom.types.HookDecl  t0,  tom.gom.adt.gom.types.HookDeclList  t1) { return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.HookDecl  tom_get_slot_ConsconcHookDecl_HeadconcHookDecl( tom.gom.adt.gom.types.HookDeclList  t) {  return  t.getHeadconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_slot_ConsconcHookDecl_TailconcHookDecl( tom.gom.adt.gom.types.HookDeclList  t) {  return  t.getTailconcHookDecl()  ;}private static boolean tom_is_fun_sym_ConsconcOperator( tom.gom.adt.gom.types.OperatorDeclList  t) {  return  (t!=null) && t.isConsconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_make_ConsconcOperator( tom.gom.adt.gom.types.OperatorDecl  t0,  tom.gom.adt.gom.types.OperatorDeclList  t1) { return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(t0, t1); }private static  tom.gom.adt.gom.types.OperatorDecl  tom_get_slot_ConsconcOperator_HeadconcOperator( tom.gom.adt.gom.types.OperatorDeclList  t) {  return  t.getHeadconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slot_ConsconcOperator_TailconcOperator( tom.gom.adt.gom.types.OperatorDeclList  t) {  return  t.getTailconcOperator()  ;}private static boolean tom_is_fun_sym_ConsconcSection( tom.gom.adt.gom.types.SectionList  t) {  return  (t!=null) && t.isConsconcSection()  ;}private static  tom.gom.adt.gom.types.SectionList  tom_make_ConsconcSection( tom.gom.adt.gom.types.Section  t0,  tom.gom.adt.gom.types.SectionList  t1) { return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make(t0, t1); }private static  tom.gom.adt.gom.types.Section  tom_get_slot_ConsconcSection_HeadconcSection( tom.gom.adt.gom.types.SectionList  t) {  return  t.getHeadconcSection()  ;}private static  tom.gom.adt.gom.types.SectionList  tom_get_slot_ConsconcSection_TailconcSection( tom.gom.adt.gom.types.SectionList  t) {  return  t.getTailconcSection()  ;}private static boolean tom_is_fun_sym_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl  t) {  return  (t!=null) && t.isOperatorDecl()  ;}private static  tom.gom.adt.gom.types.OperatorDecl  tom_make_OperatorDecl( String  t0,  tom.gom.adt.gom.types.SortDecl  t1,  tom.gom.adt.gom.types.TypedProduction  t2,  tom.gom.adt.gom.types.HookDeclList  t3) { return  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make(t0, t1, t2, t3); }private static  String  tom_get_slot_OperatorDecl_name( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_OperatorDecl_sort( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.getsort()  ;}private static  tom.gom.adt.gom.types.TypedProduction  tom_get_slot_OperatorDecl_prod( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.getprod()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_slot_OperatorDecl_hooks( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.gethooks()  ;}private static boolean tom_is_fun_sym_ConsconcSortDecl( tom.gom.adt.gom.types.SortDeclList  t) {  return  (t!=null) && t.isConsconcSortDecl()  ;}private static  tom.gom.adt.gom.types.SortDeclList  tom_make_ConsconcSortDecl( tom.gom.adt.gom.types.SortDecl  t0,  tom.gom.adt.gom.types.SortDeclList  t1) { return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_ConsconcSortDecl_HeadconcSortDecl( tom.gom.adt.gom.types.SortDeclList  t) {  return  t.getHeadconcSortDecl()  ;}private static  tom.gom.adt.gom.types.SortDeclList  tom_get_slot_ConsconcSortDecl_TailconcSortDecl( tom.gom.adt.gom.types.SortDeclList  t) {  return  t.getTailconcSortDecl()  ;}private static boolean tom_is_fun_sym_GomModule( tom.gom.adt.gom.types.GomModule  t) {  return  (t!=null) && t.isGomModule()  ;}private static  tom.gom.adt.gom.types.GomModule  tom_make_GomModule( tom.gom.adt.gom.types.GomModuleName  t0,  tom.gom.adt.gom.types.SectionList  t1) { return  tom.gom.adt.gom.types.gommodule.GomModule.make(t0, t1); }private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_GomModule_moduleName( tom.gom.adt.gom.types.GomModule  t) {  return  t.getmoduleName()  ;}private static  tom.gom.adt.gom.types.SectionList  tom_get_slot_GomModule_sectionList( tom.gom.adt.gom.types.GomModule  t) {  return  t.getsectionList()  ;}private static boolean tom_is_fun_sym_Public( tom.gom.adt.gom.types.Section  t) {  return  (t!=null) && t.isPublic()  ;}private static  tom.gom.adt.gom.types.Section  tom_make_Public( tom.gom.adt.gom.types.GrammarList  t0) { return  tom.gom.adt.gom.types.section.Public.make(t0); }private static  tom.gom.adt.gom.types.GrammarList  tom_get_slot_Public_grammarList( tom.gom.adt.gom.types.Section  t) {  return  t.getgrammarList()  ;}private static boolean tom_is_fun_sym_Imports( tom.gom.adt.gom.types.Section  t) {  return  (t!=null) && t.isImports()  ;}private static  tom.gom.adt.gom.types.Section  tom_make_Imports( tom.gom.adt.gom.types.ImportList  t0) { return  tom.gom.adt.gom.types.section.Imports.make(t0); }private static  tom.gom.adt.gom.types.ImportList  tom_get_slot_Imports_importList( tom.gom.adt.gom.types.Section  t) {  return  t.getimportList()  ;}private static boolean tom_is_fun_sym_ConsconcGomType( tom.gom.adt.gom.types.GomTypeList  t) {  return  (t!=null) && t.isConsconcGomType()  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_make_ConsconcGomType( tom.gom.adt.gom.types.GomType  t0,  tom.gom.adt.gom.types.GomTypeList  t1) { return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make(t0, t1); }private static  tom.gom.adt.gom.types.GomType  tom_get_slot_ConsconcGomType_HeadconcGomType( tom.gom.adt.gom.types.GomTypeList  t) {  return  t.getHeadconcGomType()  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_get_slot_ConsconcGomType_TailconcGomType( tom.gom.adt.gom.types.GomTypeList  t) {  return  t.getTailconcGomType()  ;}private static boolean tom_is_fun_sym_ConsconcProduction( tom.gom.adt.gom.types.ProductionList  t) {  return  (t!=null) && t.isConsconcProduction()  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_make_ConsconcProduction( tom.gom.adt.gom.types.Production  t0,  tom.gom.adt.gom.types.ProductionList  t1) { return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make(t0, t1); }private static  tom.gom.adt.gom.types.Production  tom_get_slot_ConsconcProduction_HeadconcProduction( tom.gom.adt.gom.types.ProductionList  t) {  return  t.getHeadconcProduction()  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_get_slot_ConsconcProduction_TailconcProduction( tom.gom.adt.gom.types.ProductionList  t) {  return  t.getTailconcProduction()  ;}private static boolean tom_is_fun_sym_ConsconcImportedModule( tom.gom.adt.gom.types.ImportList  t) {  return  (t!=null) && t.isConsconcImportedModule()  ;}private static  tom.gom.adt.gom.types.ImportList  tom_make_ConsconcImportedModule( tom.gom.adt.gom.types.ImportedModule  t0,  tom.gom.adt.gom.types.ImportList  t1) { return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make(t0, t1); }private static  tom.gom.adt.gom.types.ImportedModule  tom_get_slot_ConsconcImportedModule_HeadconcImportedModule( tom.gom.adt.gom.types.ImportList  t) {  return  t.getHeadconcImportedModule()  ;}private static  tom.gom.adt.gom.types.ImportList  tom_get_slot_ConsconcImportedModule_TailconcImportedModule( tom.gom.adt.gom.types.ImportList  t) {  return  t.getTailconcImportedModule()  ;}private static boolean tom_is_fun_sym_Sort( tom.gom.adt.gom.types.Sort  t) {  return  (t!=null) && t.isSort()  ;}private static  tom.gom.adt.gom.types.Sort  tom_make_Sort( tom.gom.adt.gom.types.SortDecl  t0,  tom.gom.adt.gom.types.OperatorDeclList  t1) { return  tom.gom.adt.gom.types.sort.Sort.make(t0, t1); }private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Sort_decl( tom.gom.adt.gom.types.Sort  t) {  return  t.getdecl()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slot_Sort_operators( tom.gom.adt.gom.types.Sort  t) {  return  t.getoperators()  ;}private static boolean tom_is_fun_sym_MakeHookDecl( tom.gom.adt.gom.types.HookDecl  t) {  return  (t!=null) && t.isMakeHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDecl  tom_make_MakeHookDecl( tom.gom.adt.gom.types.SlotList  t0,  String  t1) { return  tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.SlotList  tom_get_slot_MakeHookDecl_slotargs( tom.gom.adt.gom.types.HookDecl  t) {  return  t.getslotargs()  ;}private static  String  tom_get_slot_MakeHookDecl_code( tom.gom.adt.gom.types.HookDecl  t) {  return  t.getcode()  ;}private static boolean tom_is_fun_sym_BuiltinSortDecl( tom.gom.adt.gom.types.SortDecl  t) {  return  (t!=null) && t.isBuiltinSortDecl()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_make_BuiltinSortDecl( String  t0) { return  tom.gom.adt.gom.types.sortdecl.BuiltinSortDecl.make(t0); }private static  String  tom_get_slot_BuiltinSortDecl_name( tom.gom.adt.gom.types.SortDecl  t) {  return  t.getname()  ;}private static boolean tom_is_fun_sym_SortDecl( tom.gom.adt.gom.types.SortDecl  t) {  return  (t!=null) && t.isSortDecl()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_make_SortDecl( String  t0,  tom.gom.adt.gom.types.ModuleDecl  t1) { return  tom.gom.adt.gom.types.sortdecl.SortDecl.make(t0, t1); }private static  String  tom_get_slot_SortDecl_name( tom.gom.adt.gom.types.SortDecl  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_SortDecl_moduleDecl( tom.gom.adt.gom.types.SortDecl  t) {  return  t.getmoduleDecl()  ;}private static boolean tom_is_fun_sym_ConsconcModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  t) {  return  (t!=null) && t.isConsconcModuleDecl()  ;}private static  tom.gom.adt.gom.types.ModuleDeclList  tom_make_ConsconcModuleDecl( tom.gom.adt.gom.types.ModuleDecl  t0,  tom.gom.adt.gom.types.ModuleDeclList  t1) { return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_ConsconcModuleDecl_HeadconcModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  t) {  return  t.getHeadconcModuleDecl()  ;}private static  tom.gom.adt.gom.types.ModuleDeclList  tom_get_slot_ConsconcModuleDecl_TailconcModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  t) {  return  t.getTailconcModuleDecl()  ;}private static boolean tom_is_fun_sym_Sorts( tom.gom.adt.gom.types.Grammar  t) {  return  (t!=null) && t.isSorts()  ;}private static  tom.gom.adt.gom.types.Grammar  tom_make_Sorts( tom.gom.adt.gom.types.GomTypeList  t0) { return  tom.gom.adt.gom.types.grammar.Sorts.make(t0); }private static  tom.gom.adt.gom.types.GomTypeList  tom_get_slot_Sorts_typeList( tom.gom.adt.gom.types.Grammar  t) {  return  t.gettypeList()  ;}private static boolean tom_is_fun_sym_Grammar( tom.gom.adt.gom.types.Grammar  t) {  return  (t!=null) && t.isGrammar()  ;}private static  tom.gom.adt.gom.types.Grammar  tom_make_Grammar( tom.gom.adt.gom.types.ProductionList  t0) { return  tom.gom.adt.gom.types.grammar.Grammar.make(t0); }private static  tom.gom.adt.gom.types.ProductionList  tom_get_slot_Grammar_productionList( tom.gom.adt.gom.types.Grammar  t) {  return  t.getproductionList()  ;}private static boolean tom_is_fun_sym_ConsconcField( tom.gom.adt.gom.types.FieldList  t) {  return  (t!=null) && t.isConsconcField()  ;}private static  tom.gom.adt.gom.types.FieldList  tom_make_ConsconcField( tom.gom.adt.gom.types.Field  t0,  tom.gom.adt.gom.types.FieldList  t1) { return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make(t0, t1); }private static  tom.gom.adt.gom.types.Field  tom_get_slot_ConsconcField_HeadconcField( tom.gom.adt.gom.types.FieldList  t) {  return  t.getHeadconcField()  ;}private static  tom.gom.adt.gom.types.FieldList  tom_get_slot_ConsconcField_TailconcField( tom.gom.adt.gom.types.FieldList  t) {  return  t.getTailconcField()  ;}private static boolean tom_is_fun_sym_ConsconcSort( tom.gom.adt.gom.types.SortList  t) {  return  (t!=null) && t.isConsconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_make_ConsconcSort( tom.gom.adt.gom.types.Sort  t0,  tom.gom.adt.gom.types.SortList  t1) { return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(t0, t1); }private static  tom.gom.adt.gom.types.Sort  tom_get_slot_ConsconcSort_HeadconcSort( tom.gom.adt.gom.types.SortList  t) {  return  t.getHeadconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_get_slot_ConsconcSort_TailconcSort( tom.gom.adt.gom.types.SortList  t) {  return  t.getTailconcSort()  ;}private static boolean tom_is_fun_sym_ConsconcSlot( tom.gom.adt.gom.types.SlotList  t) {  return  (t!=null) && t.isConsconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_make_ConsconcSlot( tom.gom.adt.gom.types.Slot  t0,  tom.gom.adt.gom.types.SlotList  t1) { return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(t0, t1); }private static  tom.gom.adt.gom.types.Slot  tom_get_slot_ConsconcSlot_HeadconcSlot( tom.gom.adt.gom.types.SlotList  t) {  return  t.getHeadconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_slot_ConsconcSlot_TailconcSlot( tom.gom.adt.gom.types.SlotList  t) {  return  t.getTailconcSlot()  ;}private static boolean tom_is_fun_sym_Arg( tom.gom.adt.gom.types.Arg  t) {  return  (t!=null) && t.isArg()  ;}private static  tom.gom.adt.gom.types.Arg  tom_make_Arg( String  t0) { return  tom.gom.adt.gom.types.arg.Arg.make(t0); }private static  String  tom_get_slot_Arg_name( tom.gom.adt.gom.types.Arg  t) {  return  t.getname()  ;}private static boolean tom_is_fun_sym_Hook( tom.gom.adt.gom.types.Production  t) {  return  (t!=null) && t.isHook()  ;}private static  tom.gom.adt.gom.types.Production  tom_make_Hook( String  t0,  tom.gom.adt.gom.types.Hookkind  t1,  tom.gom.adt.gom.types.ArgList  t2,  String  t3) { return  tom.gom.adt.gom.types.production.Hook.make(t0, t1, t2, t3); }private static  String  tom_get_slot_Hook_name( tom.gom.adt.gom.types.Production  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.Hookkind  tom_get_slot_Hook_hookType( tom.gom.adt.gom.types.Production  t) {  return  t.gethookType()  ;}private static  tom.gom.adt.gom.types.ArgList  tom_get_slot_Hook_args( tom.gom.adt.gom.types.Production  t) {  return  t.getargs()  ;}private static  String  tom_get_slot_Hook_code( tom.gom.adt.gom.types.Production  t) {  return  t.getcode()  ;}private static boolean tom_is_fun_sym_Production( tom.gom.adt.gom.types.Production  t) {  return  (t!=null) && t.isProduction()  ;}private static  tom.gom.adt.gom.types.Production  tom_make_Production( String  t0,  tom.gom.adt.gom.types.FieldList  t1,  tom.gom.adt.gom.types.GomType  t2) { return  tom.gom.adt.gom.types.production.Production.make(t0, t1, t2); }private static  String  tom_get_slot_Production_name( tom.gom.adt.gom.types.Production  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.FieldList  tom_get_slot_Production_domain( tom.gom.adt.gom.types.Production  t) {  return  t.getdomain()  ;}private static  tom.gom.adt.gom.types.GomType  tom_get_slot_Production_codomain( tom.gom.adt.gom.types.Production  t) {  return  t.getcodomain()  ;}private static boolean tom_is_fun_sym_NamedField( tom.gom.adt.gom.types.Field  t) {  return  (t!=null) && t.isNamedField()  ;}private static  tom.gom.adt.gom.types.Field  tom_make_NamedField( String  t0,  tom.gom.adt.gom.types.GomType  t1) { return  tom.gom.adt.gom.types.field.NamedField.make(t0, t1); }private static  String  tom_get_slot_NamedField_name( tom.gom.adt.gom.types.Field  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.GomType  tom_get_slot_NamedField_fieldType( tom.gom.adt.gom.types.Field  t) {  return  t.getfieldType()  ;}private static boolean tom_is_fun_sym_StarredField( tom.gom.adt.gom.types.Field  t) {  return  (t!=null) && t.isStarredField()  ;}private static  tom.gom.adt.gom.types.Field  tom_make_StarredField( tom.gom.adt.gom.types.GomType  t0) { return  tom.gom.adt.gom.types.field.StarredField.make(t0); }private static  tom.gom.adt.gom.types.GomType  tom_get_slot_StarredField_fieldType( tom.gom.adt.gom.types.Field  t) {  return  t.getfieldType()  ;}private static boolean tom_is_fun_sym_GomModuleName( tom.gom.adt.gom.types.GomModuleName  t) {  return  (t!=null) && t.isGomModuleName()  ;}private static  tom.gom.adt.gom.types.GomModuleName  tom_make_GomModuleName( String  t0) { return  tom.gom.adt.gom.types.gommodulename.GomModuleName.make(t0); }private static  String  tom_get_slot_GomModuleName_name( tom.gom.adt.gom.types.GomModuleName  t) {  return  t.getname()  ;}private static boolean tom_is_fun_sym_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl  t) {  return  (t!=null) && t.isModuleDecl()  ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_make_ModuleDecl( tom.gom.adt.gom.types.GomModuleName  t0,  String  t1) { return  tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_ModuleDecl_moduleName( tom.gom.adt.gom.types.ModuleDecl  t) {  return  t.getmoduleName()  ;}private static  String  tom_get_slot_ModuleDecl_pkg( tom.gom.adt.gom.types.ModuleDecl  t) {  return  t.getpkg()  ;}private static boolean tom_is_fun_sym_GomType( tom.gom.adt.gom.types.GomType  t) {  return  (t!=null) && t.isGomType()  ;}private static  tom.gom.adt.gom.types.GomType  tom_make_GomType( String  t0) { return  tom.gom.adt.gom.types.gomtype.GomType.make(t0); }private static  String  tom_get_slot_GomType_name( tom.gom.adt.gom.types.GomType  t) {  return  t.getname()  ;}private static boolean tom_is_fun_sym_Import( tom.gom.adt.gom.types.ImportedModule  t) {  return  (t!=null) && t.isImport()  ;}private static  tom.gom.adt.gom.types.ImportedModule  tom_make_Import( tom.gom.adt.gom.types.GomModuleName  t0) { return  tom.gom.adt.gom.types.importedmodule.Import.make(t0); }private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_Import_moduleName( tom.gom.adt.gom.types.ImportedModule  t) {  return  t.getmoduleName()  ;}private static boolean tom_is_fun_sym_concArg( tom.gom.adt.gom.types.ArgList  t) {  return  t instanceof tom.gom.adt.gom.types.arglist.ConsconcArg || t instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg  ;}private static  tom.gom.adt.gom.types.ArgList  tom_empty_list_concArg() { return  tom.gom.adt.gom.types.arglist.EmptyconcArg.make() ; }private static  tom.gom.adt.gom.types.ArgList  tom_cons_list_concArg( tom.gom.adt.gom.types.Arg  e,  tom.gom.adt.gom.types.ArgList  l) { return  tom.gom.adt.gom.types.arglist.ConsconcArg.make(e,l) ; }private static  tom.gom.adt.gom.types.Arg  tom_get_head_concArg_ArgList( tom.gom.adt.gom.types.ArgList  l) {  return  l.getHeadconcArg()  ;}private static  tom.gom.adt.gom.types.ArgList  tom_get_tail_concArg_ArgList( tom.gom.adt.gom.types.ArgList  l) {  return  l.getTailconcArg()  ;}private static boolean tom_is_empty_concArg_ArgList( tom.gom.adt.gom.types.ArgList  l) {  return  l.isEmptyconcArg()  ;}private static  tom.gom.adt.gom.types.ArgList  tom_append_list_concArg( tom.gom.adt.gom.types.ArgList  l1,  tom.gom.adt.gom.types.ArgList  l2) {    if(tom_is_empty_concArg_ArgList(l1)) {     return l2;    } else if(tom_is_empty_concArg_ArgList(l2)) {     return l1;    } else if(tom_is_empty_concArg_ArgList(( tom.gom.adt.gom.types.ArgList )tom_get_tail_concArg_ArgList(l1))) {     return ( tom.gom.adt.gom.types.ArgList )tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg )tom_get_head_concArg_ArgList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ArgList )tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg )tom_get_head_concArg_ArgList(l1),tom_append_list_concArg(( tom.gom.adt.gom.types.ArgList )tom_get_tail_concArg_ArgList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ArgList  tom_get_slice_concArg( tom.gom.adt.gom.types.ArgList  begin,  tom.gom.adt.gom.types.ArgList  end) {    if(tom_terms_equal_ArgList(begin,end)) {      return ( tom.gom.adt.gom.types.ArgList )tom_empty_list_concArg();    } else {      return ( tom.gom.adt.gom.types.ArgList )tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg )tom_get_head_concArg_ArgList(begin),( tom.gom.adt.gom.types.ArgList )tom_get_slice_concArg(( tom.gom.adt.gom.types.ArgList )tom_get_tail_concArg_ArgList(begin),end));    }   }  private static boolean tom_is_fun_sym_concGomModule( tom.gom.adt.gom.types.GomModuleList  t) {  return  t instanceof tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule || t instanceof tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule  ;}private static  tom.gom.adt.gom.types.GomModuleList  tom_empty_list_concGomModule() { return  tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule.make() ; }private static  tom.gom.adt.gom.types.GomModuleList  tom_cons_list_concGomModule( tom.gom.adt.gom.types.GomModule  e,  tom.gom.adt.gom.types.GomModuleList  l) { return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make(e,l) ; }private static  tom.gom.adt.gom.types.GomModule  tom_get_head_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList  l) {  return  l.getHeadconcGomModule()  ;}private static  tom.gom.adt.gom.types.GomModuleList  tom_get_tail_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList  l) {  return  l.getTailconcGomModule()  ;}private static boolean tom_is_empty_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList  l) {  return  l.isEmptyconcGomModule()  ;}private static  tom.gom.adt.gom.types.GomModuleList  tom_append_list_concGomModule( tom.gom.adt.gom.types.GomModuleList  l1,  tom.gom.adt.gom.types.GomModuleList  l2) {    if(tom_is_empty_concGomModule_GomModuleList(l1)) {     return l2;    } else if(tom_is_empty_concGomModule_GomModuleList(l2)) {     return l1;    } else if(tom_is_empty_concGomModule_GomModuleList(( tom.gom.adt.gom.types.GomModuleList )tom_get_tail_concGomModule_GomModuleList(l1))) {     return ( tom.gom.adt.gom.types.GomModuleList )tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule )tom_get_head_concGomModule_GomModuleList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GomModuleList )tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule )tom_get_head_concGomModule_GomModuleList(l1),tom_append_list_concGomModule(( tom.gom.adt.gom.types.GomModuleList )tom_get_tail_concGomModule_GomModuleList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.GomModuleList  tom_get_slice_concGomModule( tom.gom.adt.gom.types.GomModuleList  begin,  tom.gom.adt.gom.types.GomModuleList  end) {    if(tom_terms_equal_GomModuleList(begin,end)) {      return ( tom.gom.adt.gom.types.GomModuleList )tom_empty_list_concGomModule();    } else {      return ( tom.gom.adt.gom.types.GomModuleList )tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule )tom_get_head_concGomModule_GomModuleList(begin),( tom.gom.adt.gom.types.GomModuleList )tom_get_slice_concGomModule(( tom.gom.adt.gom.types.GomModuleList )tom_get_tail_concGomModule_GomModuleList(begin),end));    }   }  private static boolean tom_is_fun_sym_concGrammar( tom.gom.adt.gom.types.GrammarList  t) {  return  t instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar || t instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_empty_list_concGrammar() { return  tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar.make() ; }private static  tom.gom.adt.gom.types.GrammarList  tom_cons_list_concGrammar( tom.gom.adt.gom.types.Grammar  e,  tom.gom.adt.gom.types.GrammarList  l) { return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make(e,l) ; }private static  tom.gom.adt.gom.types.Grammar  tom_get_head_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) {  return  l.getHeadconcGrammar()  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_get_tail_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) {  return  l.getTailconcGrammar()  ;}private static boolean tom_is_empty_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) {  return  l.isEmptyconcGrammar()  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_append_list_concGrammar( tom.gom.adt.gom.types.GrammarList  l1,  tom.gom.adt.gom.types.GrammarList  l2) {    if(tom_is_empty_concGrammar_GrammarList(l1)) {     return l2;    } else if(tom_is_empty_concGrammar_GrammarList(l2)) {     return l1;    } else if(tom_is_empty_concGrammar_GrammarList(( tom.gom.adt.gom.types.GrammarList )tom_get_tail_concGrammar_GrammarList(l1))) {     return ( tom.gom.adt.gom.types.GrammarList )tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar )tom_get_head_concGrammar_GrammarList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GrammarList )tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar )tom_get_head_concGrammar_GrammarList(l1),tom_append_list_concGrammar(( tom.gom.adt.gom.types.GrammarList )tom_get_tail_concGrammar_GrammarList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.GrammarList  tom_get_slice_concGrammar( tom.gom.adt.gom.types.GrammarList  begin,  tom.gom.adt.gom.types.GrammarList  end) {    if(tom_terms_equal_GrammarList(begin,end)) {      return ( tom.gom.adt.gom.types.GrammarList )tom_empty_list_concGrammar();    } else {      return ( tom.gom.adt.gom.types.GrammarList )tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar )tom_get_head_concGrammar_GrammarList(begin),( tom.gom.adt.gom.types.GrammarList )tom_get_slice_concGrammar(( tom.gom.adt.gom.types.GrammarList )tom_get_tail_concGrammar_GrammarList(begin),end));    }   }  private static boolean tom_is_fun_sym_concHookDecl( tom.gom.adt.gom.types.HookDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl || t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_empty_list_concHookDecl() { return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ; }private static  tom.gom.adt.gom.types.HookDeclList  tom_cons_list_concHookDecl( tom.gom.adt.gom.types.HookDecl  e,  tom.gom.adt.gom.types.HookDeclList  l) { return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_get_head_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getHeadconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_tail_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getTailconcHookDecl()  ;}private static boolean tom_is_empty_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.isEmptyconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList  l1,  tom.gom.adt.gom.types.HookDeclList  l2) {    if(tom_is_empty_concHookDecl_HookDeclList(l1)) {     return l2;    } else if(tom_is_empty_concHookDecl_HookDeclList(l2)) {     return l1;    } else if(tom_is_empty_concHookDecl_HookDeclList(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1))) {     return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),tom_append_list_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.HookDeclList  tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end) {    if(tom_terms_equal_HookDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.HookDeclList )tom_empty_list_concHookDecl();    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(begin),( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator || t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_empty_list_concOperator() { return  tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ; }private static  tom.gom.adt.gom.types.OperatorDeclList  tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl  e,  tom.gom.adt.gom.types.OperatorDeclList  l) { return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(e,l) ; }private static  tom.gom.adt.gom.types.OperatorDecl  tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getHeadconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getTailconcOperator()  ;}private static boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.isEmptyconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList  l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {    if(tom_is_empty_concOperator_OperatorDeclList(l1)) {     return l2;    } else if(tom_is_empty_concOperator_OperatorDeclList(l2)) {     return l1;    } else if(tom_is_empty_concOperator_OperatorDeclList(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1))) {     return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),tom_append_list_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end) {    if(tom_terms_equal_OperatorDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_empty_list_concOperator();    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(begin),( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSection( tom.gom.adt.gom.types.SectionList  t) {  return  t instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection || t instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection  ;}private static  tom.gom.adt.gom.types.SectionList  tom_empty_list_concSection() { return  tom.gom.adt.gom.types.sectionlist.EmptyconcSection.make() ; }private static  tom.gom.adt.gom.types.SectionList  tom_cons_list_concSection( tom.gom.adt.gom.types.Section  e,  tom.gom.adt.gom.types.SectionList  l) { return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make(e,l) ; }private static  tom.gom.adt.gom.types.Section  tom_get_head_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) {  return  l.getHeadconcSection()  ;}private static  tom.gom.adt.gom.types.SectionList  tom_get_tail_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) {  return  l.getTailconcSection()  ;}private static boolean tom_is_empty_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) {  return  l.isEmptyconcSection()  ;}private static  tom.gom.adt.gom.types.SectionList  tom_append_list_concSection( tom.gom.adt.gom.types.SectionList  l1,  tom.gom.adt.gom.types.SectionList  l2) {    if(tom_is_empty_concSection_SectionList(l1)) {     return l2;    } else if(tom_is_empty_concSection_SectionList(l2)) {     return l1;    } else if(tom_is_empty_concSection_SectionList(( tom.gom.adt.gom.types.SectionList )tom_get_tail_concSection_SectionList(l1))) {     return ( tom.gom.adt.gom.types.SectionList )tom_cons_list_concSection(( tom.gom.adt.gom.types.Section )tom_get_head_concSection_SectionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SectionList )tom_cons_list_concSection(( tom.gom.adt.gom.types.Section )tom_get_head_concSection_SectionList(l1),tom_append_list_concSection(( tom.gom.adt.gom.types.SectionList )tom_get_tail_concSection_SectionList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SectionList  tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList  begin,  tom.gom.adt.gom.types.SectionList  end) {    if(tom_terms_equal_SectionList(begin,end)) {      return ( tom.gom.adt.gom.types.SectionList )tom_empty_list_concSection();    } else {      return ( tom.gom.adt.gom.types.SectionList )tom_cons_list_concSection(( tom.gom.adt.gom.types.Section )tom_get_head_concSection_SectionList(begin),( tom.gom.adt.gom.types.SectionList )tom_get_slice_concSection(( tom.gom.adt.gom.types.SectionList )tom_get_tail_concSection_SectionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSortDecl( tom.gom.adt.gom.types.SortDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl || t instanceof tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl  ;}private static  tom.gom.adt.gom.types.SortDeclList  tom_empty_list_concSortDecl() { return  tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() ; }private static  tom.gom.adt.gom.types.SortDeclList  tom_cons_list_concSortDecl( tom.gom.adt.gom.types.SortDecl  e,  tom.gom.adt.gom.types.SortDeclList  l) { return  tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.SortDecl  tom_get_head_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList  l) {  return  l.getHeadconcSortDecl()  ;}private static  tom.gom.adt.gom.types.SortDeclList  tom_get_tail_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList  l) {  return  l.getTailconcSortDecl()  ;}private static boolean tom_is_empty_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList  l) {  return  l.isEmptyconcSortDecl()  ;}private static  tom.gom.adt.gom.types.SortDeclList  tom_append_list_concSortDecl( tom.gom.adt.gom.types.SortDeclList  l1,  tom.gom.adt.gom.types.SortDeclList  l2) {    if(tom_is_empty_concSortDecl_SortDeclList(l1)) {     return l2;    } else if(tom_is_empty_concSortDecl_SortDeclList(l2)) {     return l1;    } else if(tom_is_empty_concSortDecl_SortDeclList(( tom.gom.adt.gom.types.SortDeclList )tom_get_tail_concSortDecl_SortDeclList(l1))) {     return ( tom.gom.adt.gom.types.SortDeclList )tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl )tom_get_head_concSortDecl_SortDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortDeclList )tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl )tom_get_head_concSortDecl_SortDeclList(l1),tom_append_list_concSortDecl(( tom.gom.adt.gom.types.SortDeclList )tom_get_tail_concSortDecl_SortDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SortDeclList  tom_get_slice_concSortDecl( tom.gom.adt.gom.types.SortDeclList  begin,  tom.gom.adt.gom.types.SortDeclList  end) {    if(tom_terms_equal_SortDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.SortDeclList )tom_empty_list_concSortDecl();    } else {      return ( tom.gom.adt.gom.types.SortDeclList )tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl )tom_get_head_concSortDecl_SortDeclList(begin),( tom.gom.adt.gom.types.SortDeclList )tom_get_slice_concSortDecl(( tom.gom.adt.gom.types.SortDeclList )tom_get_tail_concSortDecl_SortDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concGomType( tom.gom.adt.gom.types.GomTypeList  t) {  return  t instanceof tom.gom.adt.gom.types.gomtypelist.ConsconcGomType || t instanceof tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_empty_list_concGomType() { return  tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType.make() ; }private static  tom.gom.adt.gom.types.GomTypeList  tom_cons_list_concGomType( tom.gom.adt.gom.types.GomType  e,  tom.gom.adt.gom.types.GomTypeList  l) { return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make(e,l) ; }private static  tom.gom.adt.gom.types.GomType  tom_get_head_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) {  return  l.getHeadconcGomType()  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_get_tail_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) {  return  l.getTailconcGomType()  ;}private static boolean tom_is_empty_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) {  return  l.isEmptyconcGomType()  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_append_list_concGomType( tom.gom.adt.gom.types.GomTypeList  l1,  tom.gom.adt.gom.types.GomTypeList  l2) {    if(tom_is_empty_concGomType_GomTypeList(l1)) {     return l2;    } else if(tom_is_empty_concGomType_GomTypeList(l2)) {     return l1;    } else if(tom_is_empty_concGomType_GomTypeList(( tom.gom.adt.gom.types.GomTypeList )tom_get_tail_concGomType_GomTypeList(l1))) {     return ( tom.gom.adt.gom.types.GomTypeList )tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType )tom_get_head_concGomType_GomTypeList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GomTypeList )tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType )tom_get_head_concGomType_GomTypeList(l1),tom_append_list_concGomType(( tom.gom.adt.gom.types.GomTypeList )tom_get_tail_concGomType_GomTypeList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.GomTypeList  tom_get_slice_concGomType( tom.gom.adt.gom.types.GomTypeList  begin,  tom.gom.adt.gom.types.GomTypeList  end) {    if(tom_terms_equal_GomTypeList(begin,end)) {      return ( tom.gom.adt.gom.types.GomTypeList )tom_empty_list_concGomType();    } else {      return ( tom.gom.adt.gom.types.GomTypeList )tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType )tom_get_head_concGomType_GomTypeList(begin),( tom.gom.adt.gom.types.GomTypeList )tom_get_slice_concGomType(( tom.gom.adt.gom.types.GomTypeList )tom_get_tail_concGomType_GomTypeList(begin),end));    }   }  private static boolean tom_is_fun_sym_concProduction( tom.gom.adt.gom.types.ProductionList  t) {  return  t instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction || t instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_empty_list_concProduction() { return  tom.gom.adt.gom.types.productionlist.EmptyconcProduction.make() ; }private static  tom.gom.adt.gom.types.ProductionList  tom_cons_list_concProduction( tom.gom.adt.gom.types.Production  e,  tom.gom.adt.gom.types.ProductionList  l) { return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make(e,l) ; }private static  tom.gom.adt.gom.types.Production  tom_get_head_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) {  return  l.getHeadconcProduction()  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_get_tail_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) {  return  l.getTailconcProduction()  ;}private static boolean tom_is_empty_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) {  return  l.isEmptyconcProduction()  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_append_list_concProduction( tom.gom.adt.gom.types.ProductionList  l1,  tom.gom.adt.gom.types.ProductionList  l2) {    if(tom_is_empty_concProduction_ProductionList(l1)) {     return l2;    } else if(tom_is_empty_concProduction_ProductionList(l2)) {     return l1;    } else if(tom_is_empty_concProduction_ProductionList(( tom.gom.adt.gom.types.ProductionList )tom_get_tail_concProduction_ProductionList(l1))) {     return ( tom.gom.adt.gom.types.ProductionList )tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production )tom_get_head_concProduction_ProductionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ProductionList )tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production )tom_get_head_concProduction_ProductionList(l1),tom_append_list_concProduction(( tom.gom.adt.gom.types.ProductionList )tom_get_tail_concProduction_ProductionList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ProductionList  tom_get_slice_concProduction( tom.gom.adt.gom.types.ProductionList  begin,  tom.gom.adt.gom.types.ProductionList  end) {    if(tom_terms_equal_ProductionList(begin,end)) {      return ( tom.gom.adt.gom.types.ProductionList )tom_empty_list_concProduction();    } else {      return ( tom.gom.adt.gom.types.ProductionList )tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production )tom_get_head_concProduction_ProductionList(begin),( tom.gom.adt.gom.types.ProductionList )tom_get_slice_concProduction(( tom.gom.adt.gom.types.ProductionList )tom_get_tail_concProduction_ProductionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concImportedModule( tom.gom.adt.gom.types.ImportList  t) {  return  t instanceof tom.gom.adt.gom.types.importlist.ConsconcImportedModule || t instanceof tom.gom.adt.gom.types.importlist.EmptyconcImportedModule  ;}private static  tom.gom.adt.gom.types.ImportList  tom_empty_list_concImportedModule() { return  tom.gom.adt.gom.types.importlist.EmptyconcImportedModule.make() ; }private static  tom.gom.adt.gom.types.ImportList  tom_cons_list_concImportedModule( tom.gom.adt.gom.types.ImportedModule  e,  tom.gom.adt.gom.types.ImportList  l) { return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make(e,l) ; }private static  tom.gom.adt.gom.types.ImportedModule  tom_get_head_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) {  return  l.getHeadconcImportedModule()  ;}private static  tom.gom.adt.gom.types.ImportList  tom_get_tail_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) {  return  l.getTailconcImportedModule()  ;}private static boolean tom_is_empty_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) {  return  l.isEmptyconcImportedModule()  ;}private static  tom.gom.adt.gom.types.ImportList  tom_append_list_concImportedModule( tom.gom.adt.gom.types.ImportList  l1,  tom.gom.adt.gom.types.ImportList  l2) {    if(tom_is_empty_concImportedModule_ImportList(l1)) {     return l2;    } else if(tom_is_empty_concImportedModule_ImportList(l2)) {     return l1;    } else if(tom_is_empty_concImportedModule_ImportList(( tom.gom.adt.gom.types.ImportList )tom_get_tail_concImportedModule_ImportList(l1))) {     return ( tom.gom.adt.gom.types.ImportList )tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule )tom_get_head_concImportedModule_ImportList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ImportList )tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule )tom_get_head_concImportedModule_ImportList(l1),tom_append_list_concImportedModule(( tom.gom.adt.gom.types.ImportList )tom_get_tail_concImportedModule_ImportList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ImportList  tom_get_slice_concImportedModule( tom.gom.adt.gom.types.ImportList  begin,  tom.gom.adt.gom.types.ImportList  end) {    if(tom_terms_equal_ImportList(begin,end)) {      return ( tom.gom.adt.gom.types.ImportList )tom_empty_list_concImportedModule();    } else {      return ( tom.gom.adt.gom.types.ImportList )tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule )tom_get_head_concImportedModule_ImportList(begin),( tom.gom.adt.gom.types.ImportList )tom_get_slice_concImportedModule(( tom.gom.adt.gom.types.ImportList )tom_get_tail_concImportedModule_ImportList(begin),end));    }   }  private static boolean tom_is_fun_sym_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl || t instanceof tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl  ;}private static  tom.gom.adt.gom.types.ModuleDeclList  tom_empty_list_concModuleDecl() { return  tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl.make() ; }private static  tom.gom.adt.gom.types.ModuleDeclList  tom_cons_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDecl  e,  tom.gom.adt.gom.types.ModuleDeclList  l) { return  tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_head_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList  l) {  return  l.getHeadconcModuleDecl()  ;}private static  tom.gom.adt.gom.types.ModuleDeclList  tom_get_tail_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList  l) {  return  l.getTailconcModuleDecl()  ;}private static boolean tom_is_empty_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList  l) {  return  l.isEmptyconcModuleDecl()  ;}private static  tom.gom.adt.gom.types.ModuleDeclList  tom_append_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  l1,  tom.gom.adt.gom.types.ModuleDeclList  l2) {    if(tom_is_empty_concModuleDecl_ModuleDeclList(l1)) {     return l2;    } else if(tom_is_empty_concModuleDecl_ModuleDeclList(l2)) {     return l1;    } else if(tom_is_empty_concModuleDecl_ModuleDeclList(( tom.gom.adt.gom.types.ModuleDeclList )tom_get_tail_concModuleDecl_ModuleDeclList(l1))) {     return ( tom.gom.adt.gom.types.ModuleDeclList )tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl )tom_get_head_concModuleDecl_ModuleDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ModuleDeclList )tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl )tom_get_head_concModuleDecl_ModuleDeclList(l1),tom_append_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDeclList )tom_get_tail_concModuleDecl_ModuleDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ModuleDeclList  tom_get_slice_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList  begin,  tom.gom.adt.gom.types.ModuleDeclList  end) {    if(tom_terms_equal_ModuleDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.ModuleDeclList )tom_empty_list_concModuleDecl();    } else {      return ( tom.gom.adt.gom.types.ModuleDeclList )tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl )tom_get_head_concModuleDecl_ModuleDeclList(begin),( tom.gom.adt.gom.types.ModuleDeclList )tom_get_slice_concModuleDecl(( tom.gom.adt.gom.types.ModuleDeclList )tom_get_tail_concModuleDecl_ModuleDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concField( tom.gom.adt.gom.types.FieldList  t) {  return  t instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField || t instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField  ;}private static  tom.gom.adt.gom.types.FieldList  tom_empty_list_concField() { return  tom.gom.adt.gom.types.fieldlist.EmptyconcField.make() ; }private static  tom.gom.adt.gom.types.FieldList  tom_cons_list_concField( tom.gom.adt.gom.types.Field  e,  tom.gom.adt.gom.types.FieldList  l) { return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make(e,l) ; }private static  tom.gom.adt.gom.types.Field  tom_get_head_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) {  return  l.getHeadconcField()  ;}private static  tom.gom.adt.gom.types.FieldList  tom_get_tail_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) {  return  l.getTailconcField()  ;}private static boolean tom_is_empty_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) {  return  l.isEmptyconcField()  ;}private static  tom.gom.adt.gom.types.FieldList  tom_append_list_concField( tom.gom.adt.gom.types.FieldList  l1,  tom.gom.adt.gom.types.FieldList  l2) {    if(tom_is_empty_concField_FieldList(l1)) {     return l2;    } else if(tom_is_empty_concField_FieldList(l2)) {     return l1;    } else if(tom_is_empty_concField_FieldList(( tom.gom.adt.gom.types.FieldList )tom_get_tail_concField_FieldList(l1))) {     return ( tom.gom.adt.gom.types.FieldList )tom_cons_list_concField(( tom.gom.adt.gom.types.Field )tom_get_head_concField_FieldList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.FieldList )tom_cons_list_concField(( tom.gom.adt.gom.types.Field )tom_get_head_concField_FieldList(l1),tom_append_list_concField(( tom.gom.adt.gom.types.FieldList )tom_get_tail_concField_FieldList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.FieldList  tom_get_slice_concField( tom.gom.adt.gom.types.FieldList  begin,  tom.gom.adt.gom.types.FieldList  end) {    if(tom_terms_equal_FieldList(begin,end)) {      return ( tom.gom.adt.gom.types.FieldList )tom_empty_list_concField();    } else {      return ( tom.gom.adt.gom.types.FieldList )tom_cons_list_concField(( tom.gom.adt.gom.types.Field )tom_get_head_concField_FieldList(begin),( tom.gom.adt.gom.types.FieldList )tom_get_slice_concField(( tom.gom.adt.gom.types.FieldList )tom_get_tail_concField_FieldList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList  t) {  return  t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort || t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort  ;}private static  tom.gom.adt.gom.types.SortList  tom_empty_list_concSort() { return  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ; }private static  tom.gom.adt.gom.types.SortList  tom_cons_list_concSort( tom.gom.adt.gom.types.Sort  e,  tom.gom.adt.gom.types.SortList  l) { return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(e,l) ; }private static  tom.gom.adt.gom.types.Sort  tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getHeadconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getTailconcSort()  ;}private static boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.isEmptyconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList  l1,  tom.gom.adt.gom.types.SortList  l2) {    if(tom_is_empty_concSort_SortList(l1)) {     return l2;    } else if(tom_is_empty_concSort_SortList(l2)) {     return l1;    } else if(tom_is_empty_concSort_SortList(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1))) {     return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),tom_append_list_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end) {    if(tom_terms_equal_SortList(begin,end)) {      return ( tom.gom.adt.gom.types.SortList )tom_empty_list_concSort();    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(begin),( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList  t) {  return  t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot || t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot  ;}private static  tom.gom.adt.gom.types.SlotList  tom_empty_list_concSlot() { return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }private static  tom.gom.adt.gom.types.SlotList  tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot  e,  tom.gom.adt.gom.types.SlotList  l) { return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.gom.adt.gom.types.Slot  tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList  l1,  tom.gom.adt.gom.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.gom.adt.gom.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }   

  private String packagePath;
  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  public GomTypeExpander(String packagePath) {
    this.packagePath = packagePath;
  }
  /**
    * We try here to get full sort definitions for each constructs
    */
  public SortList expand(GomModuleList moduleList) {

    /* put a map giving all imported modules for each module in the path */
    buildDependencyMap(moduleList);

    /* collect all sort declarations, both explicit and implicit */
    SortDeclList sortDeclList = tom_empty_list_concSortDecl();
    GomModuleList consum = moduleList;
    while(!consum.isEmptyconcGomModule()) {
      GomModule module = consum.getHeadconcGomModule();
      consum = consum.getTailconcGomModule();

      Collection decls = getSortDeclarations(module);
      Collection implicitdecls = getSortDeclarationInCodomain(module);

      /* Check that there are no implicit sort declarations
       * Also, check that declared sorts have at least an operator
       */
      if(!decls.containsAll(implicitdecls)) {
        // whine about non declared sorts
        Collection undeclaredSorts = new HashSet();
        undeclaredSorts.addAll(implicitdecls);
        undeclaredSorts.removeAll(decls);
        getLogger().log(Level.WARNING, GomMessage.undeclaredSorts.getMessage(),
            new Object[]{showSortList(undeclaredSorts)});
      }
      if(!implicitdecls.containsAll(decls)) {
        // whine about sorts without operators: this is a real error
        Collection emptySorts = new HashSet();
        emptySorts.addAll(decls);
        emptySorts.removeAll(implicitdecls);
        getLogger().log(Level.SEVERE, GomMessage.emptySorts.getMessage(),
            new Object[]{showSortList(emptySorts)});
        return tom_empty_list_concSort();
      }
      Iterator it = implicitdecls.iterator();
      while(it.hasNext()) {
        SortDecl decl = (SortDecl)it.next();
        sortDeclList = tom_cons_list_concSortDecl(decl,tom_append_list_concSortDecl(sortDeclList,tom_empty_list_concSortDecl()));
      }
    }

    /* now get all operators for each sort */
    Map operatorsForSort = new HashMap();
    consum = moduleList;
    while(!consum.isEmptyconcGomModule()) {
      GomModule module = consum.getHeadconcGomModule();
      consum = consum.getTailconcGomModule();

      // iterate through the productions
       if(module instanceof  tom.gom.adt.gom.types.GomModule ) { { tom.gom.adt.gom.types.GomModule  tom_match1_1=(( tom.gom.adt.gom.types.GomModule )module); if (tom_is_fun_sym_GomModule(tom_match1_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match1_1_moduleName=tom_get_slot_GomModule_moduleName(tom_match1_1); { tom.gom.adt.gom.types.SectionList  tom_match1_1_sectionList=tom_get_slot_GomModule_sectionList(tom_match1_1); if (tom_is_fun_sym_concSection(tom_match1_1_sectionList) ||  false ) { { tom.gom.adt.gom.types.SectionList  tom_match1_1_sectionList_list1=tom_match1_1_sectionList; { tom.gom.adt.gom.types.SectionList  tom_match1_1_sectionList_begin1=tom_match1_1_sectionList_list1; { tom.gom.adt.gom.types.SectionList  tom_match1_1_sectionList_end1=tom_match1_1_sectionList_list1; { while (!(tom_is_empty_concSection_SectionList(tom_match1_1_sectionList_end1))) {tom_match1_1_sectionList_list1=tom_match1_1_sectionList_end1; { { tom.gom.adt.gom.types.Section  tom_match1_1_sectionList_2=tom_get_head_concSection_SectionList(tom_match1_1_sectionList_list1);tom_match1_1_sectionList_list1=tom_get_tail_concSection_SectionList(tom_match1_1_sectionList_list1); if (tom_is_fun_sym_Public(tom_match1_1_sectionList_2) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match1_1_sectionList_2_grammarList=tom_get_slot_Public_grammarList(tom_match1_1_sectionList_2); if (tom_is_fun_sym_concGrammar(tom_match1_1_sectionList_2_grammarList) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match1_1_sectionList_2_grammarList_list1=tom_match1_1_sectionList_2_grammarList; { tom.gom.adt.gom.types.GrammarList  tom_match1_1_sectionList_2_grammarList_begin1=tom_match1_1_sectionList_2_grammarList_list1; { tom.gom.adt.gom.types.GrammarList  tom_match1_1_sectionList_2_grammarList_end1=tom_match1_1_sectionList_2_grammarList_list1; { while (!(tom_is_empty_concGrammar_GrammarList(tom_match1_1_sectionList_2_grammarList_end1))) {tom_match1_1_sectionList_2_grammarList_list1=tom_match1_1_sectionList_2_grammarList_end1; { { tom.gom.adt.gom.types.Grammar  tom_match1_1_sectionList_2_grammarList_2=tom_get_head_concGrammar_GrammarList(tom_match1_1_sectionList_2_grammarList_list1);tom_match1_1_sectionList_2_grammarList_list1=tom_get_tail_concGrammar_GrammarList(tom_match1_1_sectionList_2_grammarList_list1); if (tom_is_fun_sym_Grammar(tom_match1_1_sectionList_2_grammarList_2) ||  false ) { { tom.gom.adt.gom.types.ProductionList  tom_match1_1_sectionList_2_grammarList_2_productionList=tom_get_slot_Grammar_productionList(tom_match1_1_sectionList_2_grammarList_2); if (tom_is_fun_sym_concProduction(tom_match1_1_sectionList_2_grammarList_2_productionList) ||  false ) { { tom.gom.adt.gom.types.ProductionList  tom_match1_1_sectionList_2_grammarList_2_productionList_list1=tom_match1_1_sectionList_2_grammarList_2_productionList; { tom.gom.adt.gom.types.ProductionList  tom_match1_1_sectionList_2_grammarList_2_productionList_begin1=tom_match1_1_sectionList_2_grammarList_2_productionList_list1; { tom.gom.adt.gom.types.ProductionList  tom_match1_1_sectionList_2_grammarList_2_productionList_end1=tom_match1_1_sectionList_2_grammarList_2_productionList_list1; { while (!(tom_is_empty_concProduction_ProductionList(tom_match1_1_sectionList_2_grammarList_2_productionList_end1))) {tom_match1_1_sectionList_2_grammarList_2_productionList_list1=tom_match1_1_sectionList_2_grammarList_2_productionList_end1; { { tom.gom.adt.gom.types.Production  tom_match1_1_sectionList_2_grammarList_2_productionList_2=tom_get_head_concProduction_ProductionList(tom_match1_1_sectionList_2_grammarList_2_productionList_list1);tom_match1_1_sectionList_2_grammarList_2_productionList_list1=tom_get_tail_concProduction_ProductionList(tom_match1_1_sectionList_2_grammarList_2_productionList_list1); if (tom_is_fun_sym_Production(tom_match1_1_sectionList_2_grammarList_2_productionList_2) ||  false ) { if ( true ) {



          // we may want to pass modulename to help resolve ambiguities with modules
         getOperatorDecl(tom_match1_1_sectionList_2_grammarList_2_productionList_2,sortDeclList,operatorsForSort);

         } } }tom_match1_1_sectionList_2_grammarList_2_productionList_end1=tom_get_tail_concProduction_ProductionList(tom_match1_1_sectionList_2_grammarList_2_productionList_end1); } }tom_match1_1_sectionList_2_grammarList_2_productionList_list1=tom_match1_1_sectionList_2_grammarList_2_productionList_begin1; } } } } } } } }tom_match1_1_sectionList_2_grammarList_end1=tom_get_tail_concGrammar_GrammarList(tom_match1_1_sectionList_2_grammarList_end1); } }tom_match1_1_sectionList_2_grammarList_list1=tom_match1_1_sectionList_2_grammarList_begin1; } } } } } } } }tom_match1_1_sectionList_end1=tom_get_tail_concSection_SectionList(tom_match1_1_sectionList_end1); } }tom_match1_1_sectionList_list1=tom_match1_1_sectionList_begin1; } } } } } } } } } }


      /*
       * now that we have the definitions of all operators, we can attach them
       * the hooks
       */
       if(module instanceof  tom.gom.adt.gom.types.GomModule ) { { tom.gom.adt.gom.types.GomModule  tom_match2_1=(( tom.gom.adt.gom.types.GomModule )module); if (tom_is_fun_sym_GomModule(tom_match2_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match2_1_moduleName=tom_get_slot_GomModule_moduleName(tom_match2_1); { tom.gom.adt.gom.types.SectionList  tom_match2_1_sectionList=tom_get_slot_GomModule_sectionList(tom_match2_1); if (tom_is_fun_sym_concSection(tom_match2_1_sectionList) ||  false ) { { tom.gom.adt.gom.types.SectionList  tom_match2_1_sectionList_list1=tom_match2_1_sectionList; { tom.gom.adt.gom.types.SectionList  tom_match2_1_sectionList_begin1=tom_match2_1_sectionList_list1; { tom.gom.adt.gom.types.SectionList  tom_match2_1_sectionList_end1=tom_match2_1_sectionList_list1; { while (!(tom_is_empty_concSection_SectionList(tom_match2_1_sectionList_end1))) {tom_match2_1_sectionList_list1=tom_match2_1_sectionList_end1; { { tom.gom.adt.gom.types.Section  tom_match2_1_sectionList_2=tom_get_head_concSection_SectionList(tom_match2_1_sectionList_list1);tom_match2_1_sectionList_list1=tom_get_tail_concSection_SectionList(tom_match2_1_sectionList_list1); if (tom_is_fun_sym_Public(tom_match2_1_sectionList_2) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match2_1_sectionList_2_grammarList=tom_get_slot_Public_grammarList(tom_match2_1_sectionList_2); if (tom_is_fun_sym_concGrammar(tom_match2_1_sectionList_2_grammarList) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match2_1_sectionList_2_grammarList_list1=tom_match2_1_sectionList_2_grammarList; { tom.gom.adt.gom.types.GrammarList  tom_match2_1_sectionList_2_grammarList_begin1=tom_match2_1_sectionList_2_grammarList_list1; { tom.gom.adt.gom.types.GrammarList  tom_match2_1_sectionList_2_grammarList_end1=tom_match2_1_sectionList_2_grammarList_list1; { while (!(tom_is_empty_concGrammar_GrammarList(tom_match2_1_sectionList_2_grammarList_end1))) {tom_match2_1_sectionList_2_grammarList_list1=tom_match2_1_sectionList_2_grammarList_end1; { { tom.gom.adt.gom.types.Grammar  tom_match2_1_sectionList_2_grammarList_2=tom_get_head_concGrammar_GrammarList(tom_match2_1_sectionList_2_grammarList_list1);tom_match2_1_sectionList_2_grammarList_list1=tom_get_tail_concGrammar_GrammarList(tom_match2_1_sectionList_2_grammarList_list1); if (tom_is_fun_sym_Grammar(tom_match2_1_sectionList_2_grammarList_2) ||  false ) { { tom.gom.adt.gom.types.ProductionList  tom_match2_1_sectionList_2_grammarList_2_productionList=tom_get_slot_Grammar_productionList(tom_match2_1_sectionList_2_grammarList_2); if (tom_is_fun_sym_concProduction(tom_match2_1_sectionList_2_grammarList_2_productionList) ||  false ) { { tom.gom.adt.gom.types.ProductionList  tom_match2_1_sectionList_2_grammarList_2_productionList_list1=tom_match2_1_sectionList_2_grammarList_2_productionList; { tom.gom.adt.gom.types.ProductionList  tom_match2_1_sectionList_2_grammarList_2_productionList_begin1=tom_match2_1_sectionList_2_grammarList_2_productionList_list1; { tom.gom.adt.gom.types.ProductionList  tom_match2_1_sectionList_2_grammarList_2_productionList_end1=tom_match2_1_sectionList_2_grammarList_2_productionList_list1; { while (!(tom_is_empty_concProduction_ProductionList(tom_match2_1_sectionList_2_grammarList_2_productionList_end1))) {tom_match2_1_sectionList_2_grammarList_2_productionList_list1=tom_match2_1_sectionList_2_grammarList_2_productionList_end1; { { tom.gom.adt.gom.types.Production  tom_match2_1_sectionList_2_grammarList_2_productionList_2=tom_get_head_concProduction_ProductionList(tom_match2_1_sectionList_2_grammarList_2_productionList_list1);tom_match2_1_sectionList_2_grammarList_2_productionList_list1=tom_get_tail_concProduction_ProductionList(tom_match2_1_sectionList_2_grammarList_2_productionList_list1); if (tom_is_fun_sym_Hook(tom_match2_1_sectionList_2_grammarList_2_productionList_2) ||  false ) { if ( true ) {



          // we may want to pass modulename to help resolve ambiguities with modules
         attachHook(tom_match2_1_sectionList_2_grammarList_2_productionList_2,operatorsForSort);
         } } }tom_match2_1_sectionList_2_grammarList_2_productionList_end1=tom_get_tail_concProduction_ProductionList(tom_match2_1_sectionList_2_grammarList_2_productionList_end1); } }tom_match2_1_sectionList_2_grammarList_2_productionList_list1=tom_match2_1_sectionList_2_grammarList_2_productionList_begin1; } } } } } } } }tom_match2_1_sectionList_2_grammarList_end1=tom_get_tail_concGrammar_GrammarList(tom_match2_1_sectionList_2_grammarList_end1); } }tom_match2_1_sectionList_2_grammarList_list1=tom_match2_1_sectionList_2_grammarList_begin1; } } } } } } } }tom_match2_1_sectionList_end1=tom_get_tail_concSection_SectionList(tom_match2_1_sectionList_end1); } }tom_match2_1_sectionList_list1=tom_match2_1_sectionList_begin1; } } } } } } } } } }

    }
    // build the sort list using the map
    // since we already checked that the declared and used sorts do match, we
    // can use the map alone
    SortList sortList = tom_empty_list_concSort();
    Iterator it = operatorsForSort.keySet().iterator();
    while(it.hasNext()) {
      SortDecl decl = (SortDecl) it.next();
      OperatorDeclList opdecl = (OperatorDeclList) operatorsForSort.get(decl);
      Sort fullSort = tom_make_Sort(decl,opdecl);
      if(checkSortValidity(fullSort)) {
        sortList = tom_cons_list_concSort(fullSort,tom_append_list_concSort(sortList,tom_empty_list_concSort()));
      }
    }
    return sortList;
  }

  private void attachHook(Production prod,
                          Map operatorsForSort) {
    /* Find the operator corresponding to the hook, and attach its hook */
     if(prod instanceof  tom.gom.adt.gom.types.Production ) { { tom.gom.adt.gom.types.Production  tom_match3_1=(( tom.gom.adt.gom.types.Production )prod); if (tom_is_fun_sym_Hook(tom_match3_1) ||  false ) { { String  tom_match3_1_name=tom_get_slot_Hook_name(tom_match3_1); if ( true ) {

        Iterator it = operatorsForSort.keySet().iterator();
        while(it.hasNext()) {
          SortDecl decl = (SortDecl) it.next();
          OperatorDeclList opdecl = (OperatorDeclList) operatorsForSort.get(decl);
           if(opdecl instanceof  tom.gom.adt.gom.types.OperatorDeclList ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match4_1=(( tom.gom.adt.gom.types.OperatorDeclList )opdecl); if (tom_is_fun_sym_concOperator(tom_match4_1) ||  false ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match4_1_list1=tom_match4_1; { tom.gom.adt.gom.types.OperatorDeclList  tom_match4_1_begin1=tom_match4_1_list1; { tom.gom.adt.gom.types.OperatorDeclList  tom_match4_1_end1=tom_match4_1_list1; { while (!(tom_is_empty_concOperator_OperatorDeclList(tom_match4_1_end1))) {tom_match4_1_list1=tom_match4_1_end1; { { tom.gom.adt.gom.types.OperatorDecl  tom_match4_1_2=tom_get_head_concOperator_OperatorDeclList(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_concOperator_OperatorDeclList(tom_match4_1_list1); if (tom_is_fun_sym_OperatorDecl(tom_match4_1_2) ||  false ) { { String  tom_match4_1_2_name=tom_get_slot_OperatorDecl_name(tom_match4_1_2); if ( true ) {

              if (tom_match4_1_2_name.equals(tom_match3_1_name)) {
                OperatorDecl newOp = typeOperatorHook(tom_match4_1_2,prod);
                OperatorDeclList newList = tom_append_list_concOperator(tom_get_slice_concOperator(tom_match4_1_begin1,tom_match4_1_end1),tom_cons_list_concOperator(newOp,tom_append_list_concOperator(tom_match4_1_list1,tom_empty_list_concOperator())));
                operatorsForSort.put(decl,newList);
                return; // our job is finished
              }
             } } } }tom_match4_1_end1=tom_get_tail_concOperator_OperatorDeclList(tom_match4_1_end1); } }tom_match4_1_list1=tom_match4_1_begin1; } } } } } } }

        }
        getLogger().log(Level.SEVERE, GomMessage.orphanedHook.getMessage(),
            new Object[]{prod.getname()});
        return;
       } } } } }

  }

  private OperatorDecl typeOperatorHook(OperatorDecl operator, Production prod) {
    OperatorDecl newOperator = operator;
     if(prod instanceof  tom.gom.adt.gom.types.Production ) { { tom.gom.adt.gom.types.Production  tom_match5_1=(( tom.gom.adt.gom.types.Production )prod); if (tom_is_fun_sym_Hook(tom_match5_1) ||  false ) { { String  tom_match5_1_name=tom_get_slot_Hook_name(tom_match5_1); { tom.gom.adt.gom.types.Hookkind  tom_match5_1_hookType=tom_get_slot_Hook_hookType(tom_match5_1); { tom.gom.adt.gom.types.ArgList  tom_match5_1_args=tom_get_slot_Hook_args(tom_match5_1); { String  tom_match5_1_code=tom_get_slot_Hook_code(tom_match5_1); { tom.gom.adt.gom.types.Hookkind  tom_hkind=tom_match5_1_hookType; if ( true ) { if(operator instanceof  tom.gom.adt.gom.types.OperatorDecl ) { { tom.gom.adt.gom.types.OperatorDecl  tom_match6_1=(( tom.gom.adt.gom.types.OperatorDecl )operator); if (tom_is_fun_sym_OperatorDecl(tom_match6_1) ||  false ) { { String  tom_match6_1_name=tom_get_slot_OperatorDecl_name(tom_match6_1); { tom.gom.adt.gom.types.SortDecl  tom_match6_1_sort=tom_get_slot_OperatorDecl_sort(tom_match6_1); { tom.gom.adt.gom.types.TypedProduction  tom_match6_1_prod=tom_get_slot_OperatorDecl_prod(tom_match6_1); { tom.gom.adt.gom.types.HookDeclList  tom_match6_1_hooks=tom_get_slot_OperatorDecl_hooks(tom_match6_1); { tom.gom.adt.gom.types.SortDecl  tom_osort=tom_match6_1_sort; { tom.gom.adt.gom.types.TypedProduction  tom_oprod=tom_match6_1_prod; if ( true ) {



            SlotList typedArgs = typedArguments(tom_match5_1_args,tom_hkind,tom_oprod, tom_osort);
            if (typedArgs == null) {
              String hookName = tom_match5_1_name;
              getLogger().log(Level.SEVERE, GomMessage.discardedHook.getMessage(),
                  new Object[]{hookName});
              return operator;
            }
            HookDecl newHook = null;
             if(tom_hkind instanceof  tom.gom.adt.gom.types.Hookkind ) { { tom.gom.adt.gom.types.Hookkind  tom_match7_1=(( tom.gom.adt.gom.types.Hookkind )tom_hkind); if (tom_is_fun_sym_KindMakeinsertHook(tom_match7_1) || tom_is_fun_sym_KindMakeHook(tom_match7_1) ||  false ) { if ( true ) {

                newHook = tom_make_MakeHookDecl(typedArgs,tom_match5_1_code);
               } } } }

            if (newHook == null) {
              throw new GomRuntimeException(
                  "GomTypeExpander:typeOperatorHook unknown Hookkind: "+tom_hkind);
            }
            newOperator = tom_make_OperatorDecl(tom_match6_1_name,tom_osort,tom_oprod,tom_cons_list_concHookDecl(newHook,tom_append_list_concHookDecl(tom_match6_1_hooks,tom_empty_list_concHookDecl())));
           } } } } } } } } } }

       } } } } } } } } }

    return newOperator;
  }
  private SlotList recArgSlots(ArgList args, SlotList slots) {
     if(args instanceof  tom.gom.adt.gom.types.ArgList ) { { tom.gom.adt.gom.types.ArgList  tom_match8_1=(( tom.gom.adt.gom.types.ArgList )args); if(slots instanceof  tom.gom.adt.gom.types.SlotList ) { { tom.gom.adt.gom.types.SlotList  tom_match8_2=(( tom.gom.adt.gom.types.SlotList )slots); if (tom_is_fun_sym_concArg(tom_match8_1) ||  false ) { { tom.gom.adt.gom.types.ArgList  tom_match8_1_list1=tom_match8_1; if (tom_is_empty_concArg_ArgList(tom_match8_1_list1)) { if (tom_is_fun_sym_concSlot(tom_match8_2) ||  false ) { { tom.gom.adt.gom.types.SlotList  tom_match8_2_list1=tom_match8_2; if (tom_is_empty_concSlot_SlotList(tom_match8_2_list1)) { if ( true ) {

        return tom_empty_list_concSlot();
       } } } } } } } if (tom_is_fun_sym_concArg(tom_match8_1) ||  false ) { { tom.gom.adt.gom.types.ArgList  tom_match8_1_list1=tom_match8_1; if (!(tom_is_empty_concArg_ArgList(tom_match8_1_list1))) { { tom.gom.adt.gom.types.Arg  tom_match8_1_1=tom_get_head_concArg_ArgList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concArg_ArgList(tom_match8_1_list1); if (tom_is_fun_sym_Arg(tom_match8_1_1) ||  false ) { { String  tom_match8_1_1_name=tom_get_slot_Arg_name(tom_match8_1_1); if (tom_is_fun_sym_concSlot(tom_match8_2) ||  false ) { { tom.gom.adt.gom.types.SlotList  tom_match8_2_list1=tom_match8_2; if (!(tom_is_empty_concSlot_SlotList(tom_match8_2_list1))) { { tom.gom.adt.gom.types.Slot  tom_match8_2_1=tom_get_head_concSlot_SlotList(tom_match8_2_list1);tom_match8_2_list1=tom_get_tail_concSlot_SlotList(tom_match8_2_list1); if (tom_is_fun_sym_Slot(tom_match8_2_1) ||  false ) { { tom.gom.adt.gom.types.SortDecl  tom_match8_2_1_sort=tom_get_slot_Slot_sort(tom_match8_2_1); if ( true ) {

        SlotList tail = recArgSlots(tom_match8_1_list1,tom_match8_2_list1);
        return tom_cons_list_concSlot(tom_make_Slot(tom_match8_1_1_name,tom_match8_2_1_sort),tom_append_list_concSlot(tail,tom_empty_list_concSlot()));
       } } } } } } } } } } } } } } } } }

    throw new GomRuntimeException("GomTypeExpander:recArgSlots failed "+args+" "+slots);
  }
  private SlotList typedArguments(ArgList args, Hookkind kind,
                                  TypedProduction tprod, SortDecl sort) {
     if(kind instanceof  tom.gom.adt.gom.types.Hookkind ) { { tom.gom.adt.gom.types.Hookkind  tom_match9_1=(( tom.gom.adt.gom.types.Hookkind )kind); if (tom_is_fun_sym_KindMakeHook(tom_match9_1) ||  false ) { if ( true ) {

        // the TypedProduction has to be Slots
         if(tprod instanceof  tom.gom.adt.gom.types.TypedProduction ) { { tom.gom.adt.gom.types.TypedProduction  tom_match10_1=(( tom.gom.adt.gom.types.TypedProduction )tprod); if (tom_is_fun_sym_Slots(tom_match10_1) ||  false ) { { tom.gom.adt.gom.types.SlotList  tom_match10_1_slots=tom_get_slot_Slots_slots(tom_match10_1); { tom.gom.adt.gom.types.SlotList  tom_slotList=tom_match10_1_slots; if ( true ) {

            if (getLength(args) != getLength(tom_slotList)) { // tests the arguments number
              SlotList slist = tom_slotList;
              getLogger().log(Level.SEVERE,
                  GomMessage.mismatchedMakeArguments.getMessage(),
                  new Object[]{args,slist });
              return null;
            }
            return recArgSlots(args,tom_slotList);
           } } } } if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookAlgebraic.getMessage(),
                new Object[]{kind});
            return null;
           } } }

       } } if (tom_is_fun_sym_KindMakeinsertHook(tom_match9_1) ||  false ) { if ( true ) {

        // the TypedProduction has to be Variadic
         if(tprod instanceof  tom.gom.adt.gom.types.TypedProduction ) { { tom.gom.adt.gom.types.TypedProduction  tom_match11_1=(( tom.gom.adt.gom.types.TypedProduction )tprod); if (tom_is_fun_sym_Variadic(tom_match11_1) ||  false ) { { tom.gom.adt.gom.types.SortDecl  tom_match11_1_sort=tom_get_slot_Variadic_sort(tom_match11_1); if ( true ) {

            // for a make_insert hook, there are two arguments: head, tail
             if(args instanceof  tom.gom.adt.gom.types.ArgList ) { { tom.gom.adt.gom.types.ArgList  tom_match12_1=(( tom.gom.adt.gom.types.ArgList )args); if (tom_is_fun_sym_concArg(tom_match12_1) ||  false ) { { tom.gom.adt.gom.types.ArgList  tom_match12_1_list1=tom_match12_1; if (!(tom_is_empty_concArg_ArgList(tom_match12_1_list1))) { { tom.gom.adt.gom.types.Arg  tom_match12_1_1=tom_get_head_concArg_ArgList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concArg_ArgList(tom_match12_1_list1); if (tom_is_fun_sym_Arg(tom_match12_1_1) ||  false ) { { String  tom_match12_1_1_name=tom_get_slot_Arg_name(tom_match12_1_1); if (!(tom_is_empty_concArg_ArgList(tom_match12_1_list1))) { { tom.gom.adt.gom.types.Arg  tom_match12_1_2=tom_get_head_concArg_ArgList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concArg_ArgList(tom_match12_1_list1); if (tom_is_fun_sym_Arg(tom_match12_1_2) ||  false ) { { String  tom_match12_1_2_name=tom_get_slot_Arg_name(tom_match12_1_2); if (tom_is_empty_concArg_ArgList(tom_match12_1_list1)) { if ( true ) {

                return tom_cons_list_concSlot(tom_make_Slot(tom_match12_1_1_name,tom_match11_1_sort),tom_cons_list_concSlot(tom_make_Slot(tom_match12_1_2_name,sort),tom_empty_list_concSlot()));
               } } } } } } } } } } } } if ( true ) {

                getLogger().log(Level.SEVERE,
                    GomMessage.badMakeInsertArguments.getMessage(),
                    new Object[]{new Integer(getLength(args))});
                return null;
               } } }

           } } } if ( true ) {

            getLogger().log(Level.SEVERE,
                GomMessage.unsupportedHookVariadic.getMessage(),
                new Object[]{kind});
            return null;
           } } }

       } } } }

    throw new GomRuntimeException("Hook kind \""+kind+"\" not supported");
  }

  /*
   * Get an OperatorDecl from a Production, using the list of sort declarations
   * XXX: There is huge room for efficiency improvement, as we could use a map
   * sortName -> sortDeclList instead of a simple list
   */
  private OperatorDecl getOperatorDecl(Production prod,
      SortDeclList sortDeclList,
      Map operatorsForSort) {

     if(prod instanceof  tom.gom.adt.gom.types.Production ) { { tom.gom.adt.gom.types.Production  tom_match13_1=(( tom.gom.adt.gom.types.Production )prod); if (tom_is_fun_sym_Production(tom_match13_1) ||  false ) { { String  tom_match13_1_name=tom_get_slot_Production_name(tom_match13_1); { tom.gom.adt.gom.types.FieldList  tom_match13_1_domain=tom_get_slot_Production_domain(tom_match13_1); { tom.gom.adt.gom.types.GomType  tom_match13_1_codomain=tom_get_slot_Production_codomain(tom_match13_1); if (tom_is_fun_sym_GomType(tom_match13_1_codomain) ||  false ) { { String  tom_match13_1_codomain_name=tom_get_slot_GomType_name(tom_match13_1_codomain); if ( true ) {

        SortDecl codomainSort = declFromTypename(tom_match13_1_codomain_name,sortDeclList);
        TypedProduction domainSorts = typedProduction(tom_match13_1_domain,sortDeclList);
        OperatorDecl decl = tom_make_OperatorDecl(tom_match13_1_name,codomainSort,domainSorts,tom_empty_list_concHookDecl());
        if (operatorsForSort.containsKey(codomainSort)) {
          OperatorDeclList list = (OperatorDeclList) operatorsForSort.get(codomainSort);
          operatorsForSort.put(codomainSort,tom_cons_list_concOperator(decl,tom_append_list_concOperator(list,tom_empty_list_concOperator())));
        } else {
          operatorsForSort.put(codomainSort,tom_cons_list_concOperator(decl,tom_empty_list_concOperator()));
        }
        return decl;
       } } } } } } } } }

    throw new GomRuntimeException(
        "GomTypeExpander::getOperatorDecl: wrong Production?");
  }
  private SortDecl declFromTypename(String typename, SortDeclList sortDeclList) {
    if (environment().isBuiltinSort(typename)) {
      return environment().builtinSort(typename);
    }
     if(sortDeclList instanceof  tom.gom.adt.gom.types.SortDeclList ) { { tom.gom.adt.gom.types.SortDeclList  tom_match14_1=(( tom.gom.adt.gom.types.SortDeclList )sortDeclList); if (tom_is_fun_sym_concSortDecl(tom_match14_1) ||  false ) { { tom.gom.adt.gom.types.SortDeclList  tom_match14_1_list1=tom_match14_1; { tom.gom.adt.gom.types.SortDeclList  tom_match14_1_begin1=tom_match14_1_list1; { tom.gom.adt.gom.types.SortDeclList  tom_match14_1_end1=tom_match14_1_list1; { while (!(tom_is_empty_concSortDecl_SortDeclList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1; { { tom.gom.adt.gom.types.SortDecl  tom_match14_1_2=tom_get_head_concSortDecl_SortDeclList(tom_match14_1_list1);tom_match14_1_list1=tom_get_tail_concSortDecl_SortDeclList(tom_match14_1_list1); if (tom_is_fun_sym_SortDecl(tom_match14_1_2) ||  false ) { { String  tom_match14_1_2_name=tom_get_slot_SortDecl_name(tom_match14_1_2); if ( true ) {

        if (typename.equals(tom_match14_1_2_name)) {
          return tom_match14_1_2;
        }
       } } } }tom_match14_1_end1=tom_get_tail_concSortDecl_SortDeclList(tom_match14_1_end1); } }tom_match14_1_list1=tom_match14_1_begin1; } } } } } } }

    getLogger().log(Level.SEVERE, GomMessage.unknownSort.getMessage(),
        new Object[]{typename});
    /* If the sort is not known, assume it is a builtin */
    return tom_make_BuiltinSortDecl(typename);
  }
  TypedProduction typedProduction(FieldList domain, SortDeclList sortDeclList) {
     if(domain instanceof  tom.gom.adt.gom.types.FieldList ) { { tom.gom.adt.gom.types.FieldList  tom_match15_1=(( tom.gom.adt.gom.types.FieldList )domain); if (tom_is_fun_sym_concField(tom_match15_1) ||  false ) { { tom.gom.adt.gom.types.FieldList  tom_match15_1_list1=tom_match15_1; if (!(tom_is_empty_concField_FieldList(tom_match15_1_list1))) { { tom.gom.adt.gom.types.Field  tom_match15_1_1=tom_get_head_concField_FieldList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_concField_FieldList(tom_match15_1_list1); if (tom_is_fun_sym_StarredField(tom_match15_1_1) ||  false ) { { tom.gom.adt.gom.types.GomType  tom_match15_1_1_fieldType=tom_get_slot_StarredField_fieldType(tom_match15_1_1); if (tom_is_fun_sym_GomType(tom_match15_1_1_fieldType) ||  false ) { { String  tom_match15_1_1_fieldType_name=tom_get_slot_GomType_name(tom_match15_1_1_fieldType); if (tom_is_empty_concField_FieldList(tom_match15_1_list1)) { if ( true ) {

        return tom_make_Variadic(declFromTypename(tom_match15_1_1_fieldType_name,sortDeclList));
       } } } } } } } } } } if (tom_is_fun_sym_concField(tom_match15_1) ||  false ) { { tom.gom.adt.gom.types.FieldList  tom_match15_1_list1=tom_match15_1; if ( true ) {

        return tom_make_Slots(typedSlotList(tom_match15_1_list1,sortDeclList));
       } } } } }

    // the error message could be more refined
    throw new GomRuntimeException("GomTypeExpander::typedProduction: illformed Production");
  }
  SlotList typedSlotList(FieldList fields, SortDeclList sortDeclList) {
     if(fields instanceof  tom.gom.adt.gom.types.FieldList ) { { tom.gom.adt.gom.types.FieldList  tom_match16_1=(( tom.gom.adt.gom.types.FieldList )fields); if (tom_is_fun_sym_concField(tom_match16_1) ||  false ) { { tom.gom.adt.gom.types.FieldList  tom_match16_1_list1=tom_match16_1; if (tom_is_empty_concField_FieldList(tom_match16_1_list1)) { if ( true ) {

        return tom_empty_list_concSlot();
       } } } } if (tom_is_fun_sym_concField(tom_match16_1) ||  false ) { { tom.gom.adt.gom.types.FieldList  tom_match16_1_list1=tom_match16_1; if (!(tom_is_empty_concField_FieldList(tom_match16_1_list1))) { { tom.gom.adt.gom.types.Field  tom_match16_1_1=tom_get_head_concField_FieldList(tom_match16_1_list1);tom_match16_1_list1=tom_get_tail_concField_FieldList(tom_match16_1_list1); if (tom_is_fun_sym_NamedField(tom_match16_1_1) ||  false ) { { String  tom_match16_1_1_name=tom_get_slot_NamedField_name(tom_match16_1_1); { tom.gom.adt.gom.types.GomType  tom_match16_1_1_fieldType=tom_get_slot_NamedField_fieldType(tom_match16_1_1); if (tom_is_fun_sym_GomType(tom_match16_1_1_fieldType) ||  false ) { { String  tom_match16_1_1_fieldType_name=tom_get_slot_GomType_name(tom_match16_1_1_fieldType); if ( true ) {

        SlotList newtail = typedSlotList(tom_match16_1_list1,sortDeclList);
        return tom_cons_list_concSlot(tom_make_Slot(tom_match16_1_1_name,declFromTypename(tom_match16_1_1_fieldType_name,sortDeclList)),tom_append_list_concSlot(newtail,tom_empty_list_concSlot()));
       } } } } } } } } } } } }

    getLogger().log(Level.SEVERE, GomMessage.malformedProduction.getMessage(),
        new Object[]{fields.toString()});
    return tom_empty_list_concSlot();
  }

  /*
   * Get all sort declarations in a module
   */
  private Collection getSortDeclarations(GomModule module) {
    Collection result = new HashSet();
     if(module instanceof  tom.gom.adt.gom.types.GomModule ) { { tom.gom.adt.gom.types.GomModule  tom_match17_1=(( tom.gom.adt.gom.types.GomModule )module); if (tom_is_fun_sym_GomModule(tom_match17_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match17_1_moduleName=tom_get_slot_GomModule_moduleName(tom_match17_1); { tom.gom.adt.gom.types.SectionList  tom_match17_1_sectionList=tom_get_slot_GomModule_sectionList(tom_match17_1); if (tom_is_fun_sym_concSection(tom_match17_1_sectionList) ||  false ) { { tom.gom.adt.gom.types.SectionList  tom_match17_1_sectionList_list1=tom_match17_1_sectionList; { tom.gom.adt.gom.types.SectionList  tom_match17_1_sectionList_begin1=tom_match17_1_sectionList_list1; { tom.gom.adt.gom.types.SectionList  tom_match17_1_sectionList_end1=tom_match17_1_sectionList_list1; { while (!(tom_is_empty_concSection_SectionList(tom_match17_1_sectionList_end1))) {tom_match17_1_sectionList_list1=tom_match17_1_sectionList_end1; { { tom.gom.adt.gom.types.Section  tom_match17_1_sectionList_2=tom_get_head_concSection_SectionList(tom_match17_1_sectionList_list1);tom_match17_1_sectionList_list1=tom_get_tail_concSection_SectionList(tom_match17_1_sectionList_list1); if (tom_is_fun_sym_Public(tom_match17_1_sectionList_2) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match17_1_sectionList_2_grammarList=tom_get_slot_Public_grammarList(tom_match17_1_sectionList_2); if (tom_is_fun_sym_concGrammar(tom_match17_1_sectionList_2_grammarList) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match17_1_sectionList_2_grammarList_list1=tom_match17_1_sectionList_2_grammarList; { tom.gom.adt.gom.types.GrammarList  tom_match17_1_sectionList_2_grammarList_begin1=tom_match17_1_sectionList_2_grammarList_list1; { tom.gom.adt.gom.types.GrammarList  tom_match17_1_sectionList_2_grammarList_end1=tom_match17_1_sectionList_2_grammarList_list1; { while (!(tom_is_empty_concGrammar_GrammarList(tom_match17_1_sectionList_2_grammarList_end1))) {tom_match17_1_sectionList_2_grammarList_list1=tom_match17_1_sectionList_2_grammarList_end1; { { tom.gom.adt.gom.types.Grammar  tom_match17_1_sectionList_2_grammarList_2=tom_get_head_concGrammar_GrammarList(tom_match17_1_sectionList_2_grammarList_list1);tom_match17_1_sectionList_2_grammarList_list1=tom_get_tail_concGrammar_GrammarList(tom_match17_1_sectionList_2_grammarList_list1); if (tom_is_fun_sym_Sorts(tom_match17_1_sectionList_2_grammarList_2) ||  false ) { { tom.gom.adt.gom.types.GomTypeList  tom_match17_1_sectionList_2_grammarList_2_typeList=tom_get_slot_Sorts_typeList(tom_match17_1_sectionList_2_grammarList_2); if (tom_is_fun_sym_concGomType(tom_match17_1_sectionList_2_grammarList_2_typeList) ||  false ) { { tom.gom.adt.gom.types.GomTypeList  tom_match17_1_sectionList_2_grammarList_2_typeList_list1=tom_match17_1_sectionList_2_grammarList_2_typeList; { tom.gom.adt.gom.types.GomTypeList  tom_match17_1_sectionList_2_grammarList_2_typeList_begin1=tom_match17_1_sectionList_2_grammarList_2_typeList_list1; { tom.gom.adt.gom.types.GomTypeList  tom_match17_1_sectionList_2_grammarList_2_typeList_end1=tom_match17_1_sectionList_2_grammarList_2_typeList_list1; { while (!(tom_is_empty_concGomType_GomTypeList(tom_match17_1_sectionList_2_grammarList_2_typeList_end1))) {tom_match17_1_sectionList_2_grammarList_2_typeList_list1=tom_match17_1_sectionList_2_grammarList_2_typeList_end1; { { tom.gom.adt.gom.types.GomType  tom_match17_1_sectionList_2_grammarList_2_typeList_2=tom_get_head_concGomType_GomTypeList(tom_match17_1_sectionList_2_grammarList_2_typeList_list1);tom_match17_1_sectionList_2_grammarList_2_typeList_list1=tom_get_tail_concGomType_GomTypeList(tom_match17_1_sectionList_2_grammarList_2_typeList_list1); if (tom_is_fun_sym_GomType(tom_match17_1_sectionList_2_grammarList_2_typeList_2) ||  false ) { { String  tom_match17_1_sectionList_2_grammarList_2_typeList_2_name=tom_get_slot_GomType_name(tom_match17_1_sectionList_2_grammarList_2_typeList_2); if ( true ) {



        result.add(tom_make_SortDecl(tom_match17_1_sectionList_2_grammarList_2_typeList_2_name,tom_make_ModuleDecl(tom_match17_1_moduleName,packagePath)));
       } } } }tom_match17_1_sectionList_2_grammarList_2_typeList_end1=tom_get_tail_concGomType_GomTypeList(tom_match17_1_sectionList_2_grammarList_2_typeList_end1); } }tom_match17_1_sectionList_2_grammarList_2_typeList_list1=tom_match17_1_sectionList_2_grammarList_2_typeList_begin1; } } } } } } } }tom_match17_1_sectionList_2_grammarList_end1=tom_get_tail_concGrammar_GrammarList(tom_match17_1_sectionList_2_grammarList_end1); } }tom_match17_1_sectionList_2_grammarList_list1=tom_match17_1_sectionList_2_grammarList_begin1; } } } } } } } }tom_match17_1_sectionList_end1=tom_get_tail_concSection_SectionList(tom_match17_1_sectionList_end1); } }tom_match17_1_sectionList_list1=tom_match17_1_sectionList_begin1; } } } } } } } } } }

    return result;
  }

  /*
   * Get all sort uses in a module (as codomain of an operator)
   */
  private Collection getSortDeclarationInCodomain(GomModule module) {
    Collection result = new HashSet();
     if(module instanceof  tom.gom.adt.gom.types.GomModule ) { { tom.gom.adt.gom.types.GomModule  tom_match18_1=(( tom.gom.adt.gom.types.GomModule )module); if (tom_is_fun_sym_GomModule(tom_match18_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match18_1_moduleName=tom_get_slot_GomModule_moduleName(tom_match18_1); { tom.gom.adt.gom.types.SectionList  tom_match18_1_sectionList=tom_get_slot_GomModule_sectionList(tom_match18_1); if (tom_is_fun_sym_concSection(tom_match18_1_sectionList) ||  false ) { { tom.gom.adt.gom.types.SectionList  tom_match18_1_sectionList_list1=tom_match18_1_sectionList; { tom.gom.adt.gom.types.SectionList  tom_match18_1_sectionList_begin1=tom_match18_1_sectionList_list1; { tom.gom.adt.gom.types.SectionList  tom_match18_1_sectionList_end1=tom_match18_1_sectionList_list1; { while (!(tom_is_empty_concSection_SectionList(tom_match18_1_sectionList_end1))) {tom_match18_1_sectionList_list1=tom_match18_1_sectionList_end1; { { tom.gom.adt.gom.types.Section  tom_match18_1_sectionList_2=tom_get_head_concSection_SectionList(tom_match18_1_sectionList_list1);tom_match18_1_sectionList_list1=tom_get_tail_concSection_SectionList(tom_match18_1_sectionList_list1); if (tom_is_fun_sym_Public(tom_match18_1_sectionList_2) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match18_1_sectionList_2_grammarList=tom_get_slot_Public_grammarList(tom_match18_1_sectionList_2); if (tom_is_fun_sym_concGrammar(tom_match18_1_sectionList_2_grammarList) ||  false ) { { tom.gom.adt.gom.types.GrammarList  tom_match18_1_sectionList_2_grammarList_list1=tom_match18_1_sectionList_2_grammarList; { tom.gom.adt.gom.types.GrammarList  tom_match18_1_sectionList_2_grammarList_begin1=tom_match18_1_sectionList_2_grammarList_list1; { tom.gom.adt.gom.types.GrammarList  tom_match18_1_sectionList_2_grammarList_end1=tom_match18_1_sectionList_2_grammarList_list1; { while (!(tom_is_empty_concGrammar_GrammarList(tom_match18_1_sectionList_2_grammarList_end1))) {tom_match18_1_sectionList_2_grammarList_list1=tom_match18_1_sectionList_2_grammarList_end1; { { tom.gom.adt.gom.types.Grammar  tom_match18_1_sectionList_2_grammarList_2=tom_get_head_concGrammar_GrammarList(tom_match18_1_sectionList_2_grammarList_list1);tom_match18_1_sectionList_2_grammarList_list1=tom_get_tail_concGrammar_GrammarList(tom_match18_1_sectionList_2_grammarList_list1); if (tom_is_fun_sym_Grammar(tom_match18_1_sectionList_2_grammarList_2) ||  false ) { { tom.gom.adt.gom.types.ProductionList  tom_match18_1_sectionList_2_grammarList_2_productionList=tom_get_slot_Grammar_productionList(tom_match18_1_sectionList_2_grammarList_2); if (tom_is_fun_sym_concProduction(tom_match18_1_sectionList_2_grammarList_2_productionList) ||  false ) { { tom.gom.adt.gom.types.ProductionList  tom_match18_1_sectionList_2_grammarList_2_productionList_list1=tom_match18_1_sectionList_2_grammarList_2_productionList; { tom.gom.adt.gom.types.ProductionList  tom_match18_1_sectionList_2_grammarList_2_productionList_begin1=tom_match18_1_sectionList_2_grammarList_2_productionList_list1; { tom.gom.adt.gom.types.ProductionList  tom_match18_1_sectionList_2_grammarList_2_productionList_end1=tom_match18_1_sectionList_2_grammarList_2_productionList_list1; { while (!(tom_is_empty_concProduction_ProductionList(tom_match18_1_sectionList_2_grammarList_2_productionList_end1))) {tom_match18_1_sectionList_2_grammarList_2_productionList_list1=tom_match18_1_sectionList_2_grammarList_2_productionList_end1; { { tom.gom.adt.gom.types.Production  tom_match18_1_sectionList_2_grammarList_2_productionList_2=tom_get_head_concProduction_ProductionList(tom_match18_1_sectionList_2_grammarList_2_productionList_list1);tom_match18_1_sectionList_2_grammarList_2_productionList_list1=tom_get_tail_concProduction_ProductionList(tom_match18_1_sectionList_2_grammarList_2_productionList_list1); if (tom_is_fun_sym_Production(tom_match18_1_sectionList_2_grammarList_2_productionList_2) ||  false ) { { String  tom_match18_1_sectionList_2_grammarList_2_productionList_2_name=tom_get_slot_Production_name(tom_match18_1_sectionList_2_grammarList_2_productionList_2); { tom.gom.adt.gom.types.FieldList  tom_match18_1_sectionList_2_grammarList_2_productionList_2_domain=tom_get_slot_Production_domain(tom_match18_1_sectionList_2_grammarList_2_productionList_2); { tom.gom.adt.gom.types.GomType  tom_match18_1_sectionList_2_grammarList_2_productionList_2_codomain=tom_get_slot_Production_codomain(tom_match18_1_sectionList_2_grammarList_2_productionList_2); if (tom_is_fun_sym_GomType(tom_match18_1_sectionList_2_grammarList_2_productionList_2_codomain) ||  false ) { { String  tom_match18_1_sectionList_2_grammarList_2_productionList_2_codomain_name=tom_get_slot_GomType_name(tom_match18_1_sectionList_2_grammarList_2_productionList_2_codomain); if ( true ) {



        result.add(tom_make_SortDecl(tom_match18_1_sectionList_2_grammarList_2_productionList_2_codomain_name,tom_make_ModuleDecl(tom_match18_1_moduleName,packagePath)));
       } } } } } } } }tom_match18_1_sectionList_2_grammarList_2_productionList_end1=tom_get_tail_concProduction_ProductionList(tom_match18_1_sectionList_2_grammarList_2_productionList_end1); } }tom_match18_1_sectionList_2_grammarList_2_productionList_list1=tom_match18_1_sectionList_2_grammarList_2_productionList_begin1; } } } } } } } }tom_match18_1_sectionList_2_grammarList_end1=tom_get_tail_concGrammar_GrammarList(tom_match18_1_sectionList_2_grammarList_end1); } }tom_match18_1_sectionList_2_grammarList_list1=tom_match18_1_sectionList_2_grammarList_begin1; } } } } } } } }tom_match18_1_sectionList_end1=tom_get_tail_concSection_SectionList(tom_match18_1_sectionList_end1); } }tom_match18_1_sectionList_list1=tom_match18_1_sectionList_begin1; } } } } } } } } } }

    return result;
  }

  // get directly imported modules. Skip builtins
  private Collection getImportedModules(GomModule module) {
    Set imports = new HashSet();
     if(module instanceof  tom.gom.adt.gom.types.GomModule ) { { tom.gom.adt.gom.types.GomModule  tom_match19_1=(( tom.gom.adt.gom.types.GomModule )module); if (tom_is_fun_sym_GomModule(tom_match19_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match19_1_moduleName=tom_get_slot_GomModule_moduleName(tom_match19_1); { tom.gom.adt.gom.types.SectionList  tom_match19_1_sectionList=tom_get_slot_GomModule_sectionList(tom_match19_1); { tom.gom.adt.gom.types.SectionList  tom_sectionList=tom_match19_1_sectionList; if ( true ) {

        imports.add(tom_match19_1_moduleName);
         if(tom_sectionList instanceof  tom.gom.adt.gom.types.SectionList ) { { tom.gom.adt.gom.types.SectionList  tom_match20_1=(( tom.gom.adt.gom.types.SectionList )tom_sectionList); if (tom_is_fun_sym_concSection(tom_match20_1) ||  false ) { { tom.gom.adt.gom.types.SectionList  tom_match20_1_list1=tom_match20_1; { tom.gom.adt.gom.types.SectionList  tom_match20_1_begin1=tom_match20_1_list1; { tom.gom.adt.gom.types.SectionList  tom_match20_1_end1=tom_match20_1_list1; { while (!(tom_is_empty_concSection_SectionList(tom_match20_1_end1))) {tom_match20_1_list1=tom_match20_1_end1; { { tom.gom.adt.gom.types.Section  tom_match20_1_2=tom_get_head_concSection_SectionList(tom_match20_1_list1);tom_match20_1_list1=tom_get_tail_concSection_SectionList(tom_match20_1_list1); if (tom_is_fun_sym_Imports(tom_match20_1_2) ||  false ) { { tom.gom.adt.gom.types.ImportList  tom_match20_1_2_importList=tom_get_slot_Imports_importList(tom_match20_1_2); if (tom_is_fun_sym_concImportedModule(tom_match20_1_2_importList) ||  false ) { { tom.gom.adt.gom.types.ImportList  tom_match20_1_2_importList_list1=tom_match20_1_2_importList; { tom.gom.adt.gom.types.ImportList  tom_match20_1_2_importList_begin1=tom_match20_1_2_importList_list1; { tom.gom.adt.gom.types.ImportList  tom_match20_1_2_importList_end1=tom_match20_1_2_importList_list1; { while (!(tom_is_empty_concImportedModule_ImportList(tom_match20_1_2_importList_end1))) {tom_match20_1_2_importList_list1=tom_match20_1_2_importList_end1; { { tom.gom.adt.gom.types.ImportedModule  tom_match20_1_2_importList_2=tom_get_head_concImportedModule_ImportList(tom_match20_1_2_importList_list1);tom_match20_1_2_importList_list1=tom_get_tail_concImportedModule_ImportList(tom_match20_1_2_importList_list1); if (tom_is_fun_sym_Import(tom_match20_1_2_importList_2) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match20_1_2_importList_2_moduleName=tom_get_slot_Import_moduleName(tom_match20_1_2_importList_2); if (tom_is_fun_sym_GomModuleName(tom_match20_1_2_importList_2_moduleName) ||  false ) { { String  tom_match20_1_2_importList_2_moduleName_name=tom_get_slot_GomModuleName_name(tom_match20_1_2_importList_2_moduleName); if ( true ) {





            if (!environment().isBuiltin(tom_match20_1_2_importList_2_moduleName_name)) {
              imports.add(tom_match20_1_2_importList_2_moduleName);
            }
           } } } } } }tom_match20_1_2_importList_end1=tom_get_tail_concImportedModule_ImportList(tom_match20_1_2_importList_end1); } }tom_match20_1_2_importList_list1=tom_match20_1_2_importList_begin1; } } } } } } } }tom_match20_1_end1=tom_get_tail_concSection_SectionList(tom_match20_1_end1); } }tom_match20_1_list1=tom_match20_1_begin1; } } } } } } }

       } } } } } } }

    return imports;
  }

  private GomModule getModule(GomModuleName modname, GomModuleList list) {
     if(list instanceof  tom.gom.adt.gom.types.GomModuleList ) { { tom.gom.adt.gom.types.GomModuleList  tom_match21_1=(( tom.gom.adt.gom.types.GomModuleList )list); if (tom_is_fun_sym_concGomModule(tom_match21_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleList  tom_match21_1_list1=tom_match21_1; { tom.gom.adt.gom.types.GomModuleList  tom_match21_1_begin1=tom_match21_1_list1; { tom.gom.adt.gom.types.GomModuleList  tom_match21_1_end1=tom_match21_1_list1; { while (!(tom_is_empty_concGomModule_GomModuleList(tom_match21_1_end1))) {tom_match21_1_list1=tom_match21_1_end1; { { tom.gom.adt.gom.types.GomModule  tom_match21_1_2=tom_get_head_concGomModule_GomModuleList(tom_match21_1_list1);tom_match21_1_list1=tom_get_tail_concGomModule_GomModuleList(tom_match21_1_list1); if (tom_is_fun_sym_GomModule(tom_match21_1_2) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match21_1_2_moduleName=tom_get_slot_GomModule_moduleName(tom_match21_1_2); if ( true ) {

        if (tom_match21_1_2_moduleName.equals(modname)) {
          return tom_match21_1_2;
        }
       } } } }tom_match21_1_end1=tom_get_tail_concGomModule_GomModuleList(tom_match21_1_end1); } }tom_match21_1_list1=tom_match21_1_begin1; } } } } } } }

    throw new GomRuntimeException("Module "+ modname +" not present");
  }

  private Collection getTransitiveClosureImports(GomModule module,
                                                 GomModuleList moduleList) {
    Set imported = new HashSet();
    imported.addAll(getImportedModules(module));

    Set newSet = new HashSet();
    while(!newSet.equals(imported)) {
      newSet.addAll(imported);
      imported.addAll(newSet);
      Iterator it = imported.iterator();
      while(it.hasNext()) {
        GomModuleName modname = (GomModuleName) it.next();
        newSet.addAll(getImportedModules(getModule(modname,moduleList)));
      }
    }
    return newSet;
  }

  private void buildDependencyMap(GomModuleList moduleList) {
     if(moduleList instanceof  tom.gom.adt.gom.types.GomModuleList ) { { tom.gom.adt.gom.types.GomModuleList  tom_match22_1=(( tom.gom.adt.gom.types.GomModuleList )moduleList); if (tom_is_fun_sym_concGomModule(tom_match22_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleList  tom_match22_1_list1=tom_match22_1; { tom.gom.adt.gom.types.GomModuleList  tom_match22_1_begin1=tom_match22_1_list1; { tom.gom.adt.gom.types.GomModuleList  tom_match22_1_end1=tom_match22_1_list1; { while (!(tom_is_empty_concGomModule_GomModuleList(tom_match22_1_end1))) {tom_match22_1_list1=tom_match22_1_end1; { { tom.gom.adt.gom.types.GomModule  tom_match22_1_2=tom_get_head_concGomModule_GomModuleList(tom_match22_1_list1);tom_match22_1_list1=tom_get_tail_concGomModule_GomModuleList(tom_match22_1_list1); if (tom_is_fun_sym_GomModule(tom_match22_1_2) ||  false ) { { tom.gom.adt.gom.types.GomModuleName  tom_match22_1_2_moduleName=tom_get_slot_GomModule_moduleName(tom_match22_1_2); if ( true ) {

        ModuleDeclList importsModuleDeclList = tom_empty_list_concModuleDecl();
        Iterator it = getTransitiveClosureImports(tom_match22_1_2,moduleList).iterator();
        while(it.hasNext()) {
          GomModuleName importedModuleName = (GomModuleName) it.next();
          importsModuleDeclList = 
            tom_cons_list_concModuleDecl(tom_make_ModuleDecl(importedModuleName,packagePath),tom_append_list_concModuleDecl(importsModuleDeclList,tom_empty_list_concModuleDecl()))
;
        }
        environment().addModuleDependency(
            tom_make_ModuleDecl(tom_match22_1_2_moduleName,packagePath),importsModuleDeclList);
       } } } }tom_match22_1_end1=tom_get_tail_concGomModule_GomModuleList(tom_match22_1_end1); } }tom_match22_1_list1=tom_match22_1_begin1; } } } } } } }

  }

  private boolean checkSortValidity(Sort sort) {
    boolean valid = true;
    // check if the same slot name is used with different types
    Map mapNameType = new HashMap();
     if(sort instanceof  tom.gom.adt.gom.types.Sort ) { { tom.gom.adt.gom.types.Sort  tom_match23_1=(( tom.gom.adt.gom.types.Sort )sort); if (tom_is_fun_sym_Sort(tom_match23_1) ||  false ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match23_1_operators=tom_get_slot_Sort_operators(tom_match23_1); if (tom_is_fun_sym_concOperator(tom_match23_1_operators) ||  false ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match23_1_operators_list1=tom_match23_1_operators; { tom.gom.adt.gom.types.OperatorDeclList  tom_match23_1_operators_begin1=tom_match23_1_operators_list1; { tom.gom.adt.gom.types.OperatorDeclList  tom_match23_1_operators_end1=tom_match23_1_operators_list1; { while (!(tom_is_empty_concOperator_OperatorDeclList(tom_match23_1_operators_end1))) {tom_match23_1_operators_list1=tom_match23_1_operators_end1; { { tom.gom.adt.gom.types.OperatorDecl  tom_match23_1_operators_2=tom_get_head_concOperator_OperatorDeclList(tom_match23_1_operators_list1);tom_match23_1_operators_list1=tom_get_tail_concOperator_OperatorDeclList(tom_match23_1_operators_list1); if (tom_is_fun_sym_OperatorDecl(tom_match23_1_operators_2) ||  false ) { { tom.gom.adt.gom.types.TypedProduction  tom_match23_1_operators_2_prod=tom_get_slot_OperatorDecl_prod(tom_match23_1_operators_2); if (tom_is_fun_sym_Slots(tom_match23_1_operators_2_prod) ||  false ) { { tom.gom.adt.gom.types.SlotList  tom_match23_1_operators_2_prod_slots=tom_get_slot_Slots_slots(tom_match23_1_operators_2_prod); if (tom_is_fun_sym_concSlot(tom_match23_1_operators_2_prod_slots) ||  false ) { { tom.gom.adt.gom.types.SlotList  tom_match23_1_operators_2_prod_slots_list1=tom_match23_1_operators_2_prod_slots; { tom.gom.adt.gom.types.SlotList  tom_match23_1_operators_2_prod_slots_begin1=tom_match23_1_operators_2_prod_slots_list1; { tom.gom.adt.gom.types.SlotList  tom_match23_1_operators_2_prod_slots_end1=tom_match23_1_operators_2_prod_slots_list1; { while (!(tom_is_empty_concSlot_SlotList(tom_match23_1_operators_2_prod_slots_end1))) {tom_match23_1_operators_2_prod_slots_list1=tom_match23_1_operators_2_prod_slots_end1; { { tom.gom.adt.gom.types.Slot  tom_match23_1_operators_2_prod_slots_2=tom_get_head_concSlot_SlotList(tom_match23_1_operators_2_prod_slots_list1);tom_match23_1_operators_2_prod_slots_list1=tom_get_tail_concSlot_SlotList(tom_match23_1_operators_2_prod_slots_list1); if (tom_is_fun_sym_Slot(tom_match23_1_operators_2_prod_slots_2) ||  false ) { { String  tom_match23_1_operators_2_prod_slots_2_name=tom_get_slot_Slot_name(tom_match23_1_operators_2_prod_slots_2); { tom.gom.adt.gom.types.SortDecl  tom_match23_1_operators_2_prod_slots_2_sort=tom_get_slot_Slot_sort(tom_match23_1_operators_2_prod_slots_2); { String  tom_slotName=tom_match23_1_operators_2_prod_slots_2_name; { tom.gom.adt.gom.types.SortDecl  tom_slotSort=tom_match23_1_operators_2_prod_slots_2_sort; if ( true ) {





        if(!mapNameType.containsKey(tom_slotName)) {
          mapNameType.put(tom_slotName,tom_slotSort);
        } else {
          SortDecl prevSort = (SortDecl) mapNameType.get(tom_slotName);
          if (!prevSort.equals(tom_slotSort)) {
            getLogger().log(Level.SEVERE, GomMessage.slotIncompatibleTypes.getMessage(),
                new Object[]{(tom_slotName),prevSort.getname(),(tom_slotSort).getname()});
            valid = false;
          }
        }
       } } } } } } }tom_match23_1_operators_2_prod_slots_end1=tom_get_tail_concSlot_SlotList(tom_match23_1_operators_2_prod_slots_end1); } }tom_match23_1_operators_2_prod_slots_list1=tom_match23_1_operators_2_prod_slots_begin1; } } } } } } } } } }tom_match23_1_operators_end1=tom_get_tail_concOperator_OperatorDeclList(tom_match23_1_operators_end1); } }tom_match23_1_operators_list1=tom_match23_1_operators_begin1; } } } } } } } } }

    return valid;
  }

  private String showSortList(Collection decls) {
    String sorts = "";
    Iterator it = decls.iterator();
    if(it.hasNext()) {
      SortDecl decl = (SortDecl)it.next();
      sorts += decl.getname();
    }
    while(it.hasNext()) {
      SortDecl decl = (SortDecl)it.next();
      sorts += ", "+decl.getname();
    }
    return sorts;
  }

  private int getLength(ArgList list) {
     if(list instanceof  tom.gom.adt.gom.types.ArgList ) { { tom.gom.adt.gom.types.ArgList  tom_match24_1=(( tom.gom.adt.gom.types.ArgList )list); if (tom_is_fun_sym_concArg(tom_match24_1) ||  false ) { { tom.gom.adt.gom.types.ArgList  tom_match24_1_list1=tom_match24_1; if (tom_is_empty_concArg_ArgList(tom_match24_1_list1)) { if ( true ) {
 return 0;  } } } } if (tom_is_fun_sym_concArg(tom_match24_1) ||  false ) { { tom.gom.adt.gom.types.ArgList  tom_match24_1_list1=tom_match24_1; if (!(tom_is_empty_concArg_ArgList(tom_match24_1_list1))) {tom_match24_1_list1=tom_get_tail_concArg_ArgList(tom_match24_1_list1); if ( true ) {
 return getLength(tom_match24_1_list1)+1;  } } } } } }

    return -1;
  }
  private int getLength(SlotList list) {
     if(list instanceof  tom.gom.adt.gom.types.SlotList ) { { tom.gom.adt.gom.types.SlotList  tom_match25_1=(( tom.gom.adt.gom.types.SlotList )list); if (tom_is_fun_sym_concSlot(tom_match25_1) ||  false ) { { tom.gom.adt.gom.types.SlotList  tom_match25_1_list1=tom_match25_1; if (tom_is_empty_concSlot_SlotList(tom_match25_1_list1)) { if ( true ) {
 return 0;  } } } } if (tom_is_fun_sym_concSlot(tom_match25_1) ||  false ) { { tom.gom.adt.gom.types.SlotList  tom_match25_1_list1=tom_match25_1; if (!(tom_is_empty_concSlot_SlotList(tom_match25_1_list1))) {tom_match25_1_list1=tom_get_tail_concSlot_SlotList(tom_match25_1_list1); if ( true ) {
 return getLength(tom_match25_1_list1)+1;  } } } } } }

    return -1;
  }

  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
