/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Emilie Balland  e-mail: Emilie.Balland@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.library.sl.*;
import tom.gom.backend.CodeGen;
import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.adt.objects.types.ClassName;
import tom.gom.tools.error.GomRuntimeException;

public class GomReferenceExpander {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */   static class MapEntry {   private Object key;   private Object val;   public Object getKey() { return key; }   public Object getVal() { return val; }   public MapEntry(Object key, Object val) {     this.key = key;     this.val = val;   } }  private static boolean tom_equal_term_MapEntry(Object e1, Object e2) { return  e1.equals(e2) ;}private static boolean tom_is_sort_MapEntry(Object t) { return  t instanceof MapEntry ;}/* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Object(Object o1, Object o2) { return  o1.equals(o2) ;}private static boolean tom_is_sort_Object(Object t) { return  t instanceof Object ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_HashMap(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_HashMap(Object t) { return  t instanceof java.util.HashMap ;}   private static java.util.HashMap hashMapAppend(MapEntry e, java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   res.put(e.getKey(), e.getVal());   return res; }  private static MapEntry hashMapGetHead(java.util.HashMap m) {   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   return new MapEntry(e.getKey(), e.getValue()); }  private static java.util.HashMap hashMapGetTail(java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   res.remove(e.getKey());   return res; }   /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_ArrayList(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_ArrayList(Object t) { return  t instanceof java.util.ArrayList ;}   private static java.util.ArrayList concArrayListAppend(Object o, java.util.ArrayList l) {   java.util.ArrayList res = (java.util.ArrayList)l.clone();   res.add(o);   return res; } /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return tom_cons_list_Sequence(l1,l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(begin.equals(end)) {       return tail;     } else {       return tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_boolean(boolean t1, boolean t2) { return  t1==t2 ;}private static boolean tom_is_sort_boolean(boolean t) { return  true ;} /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Hook(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Hook(Object t) { return  t instanceof tom.gom.adt.objects.types.Hook ;}private static boolean tom_equal_term_SlotField(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotField(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotField ;}private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotFieldList(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotFieldList ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClass(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClass ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassName(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassName ;}private static boolean tom_equal_term_GomClassList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClassList(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClassList ;}private static boolean tom_equal_term_ClassNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassNameList(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassNameList ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookList(Object t) { return  t instanceof tom.gom.adt.objects.types.HookList ;}private static boolean tom_equal_term_Code(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Code(Object t) { return  t instanceof tom.gom.adt.code.types.Code ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.gom.adt.gom.types.Slot ;}private static boolean tom_equal_term_ArgList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ArgList(Object t) { return  t instanceof tom.gom.adt.gom.types.ArgList ;}private static boolean tom_equal_term_IdKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_IdKind(Object t) { return  t instanceof tom.gom.adt.gom.types.IdKind ;}private static boolean tom_equal_term_GomModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleList ;}private static boolean tom_equal_term_GrammarList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GrammarList(Object t) { return  t instanceof tom.gom.adt.gom.types.GrammarList ;}private static boolean tom_equal_term_TypedProduction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TypedProduction(Object t) { return  t instanceof tom.gom.adt.gom.types.TypedProduction ;}private static boolean tom_equal_term_SectionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SectionList(Object t) { return  t instanceof tom.gom.adt.gom.types.SectionList ;}private static boolean tom_equal_term_OperatorDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDeclList ;}private static boolean tom_equal_term_HookDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDeclList ;}private static boolean tom_equal_term_SortDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDeclList ;}private static boolean tom_equal_term_OperatorDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDecl ;}private static boolean tom_equal_term_GomModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModule(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModule ;}private static boolean tom_equal_term_Pair(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Pair(Object t) { return  t instanceof tom.gom.adt.gom.types.Pair ;}private static boolean tom_equal_term_Section(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Section(Object t) { return  t instanceof tom.gom.adt.gom.types.Section ;}private static boolean tom_equal_term_GomTypeList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomTypeList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomTypeList ;}private static boolean tom_equal_term_ProductionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ProductionList(Object t) { return  t instanceof tom.gom.adt.gom.types.ProductionList ;}private static boolean tom_equal_term_Decl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Decl(Object t) { return  t instanceof tom.gom.adt.gom.types.Decl ;}private static boolean tom_equal_term_ImportList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportList(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportList ;}private static boolean tom_equal_term_Sort(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Sort(Object t) { return  t instanceof tom.gom.adt.gom.types.Sort ;}private static boolean tom_equal_term_SortDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDecl ;}private static boolean tom_equal_term_HookDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDecl ;}private static boolean tom_equal_term_ModuleDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDeclList ;}private static boolean tom_equal_term_Module(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Module(Object t) { return  t instanceof tom.gom.adt.gom.types.Module ;}private static boolean tom_equal_term_FieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_FieldList(Object t) { return  t instanceof tom.gom.adt.gom.types.FieldList ;}private static boolean tom_equal_term_Grammar(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Grammar(Object t) { return  t instanceof tom.gom.adt.gom.types.Grammar ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.gom.adt.gom.types.SlotList ;}private static boolean tom_equal_term_SortList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortList ;}private static boolean tom_equal_term_Arg(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Arg(Object t) { return  t instanceof tom.gom.adt.gom.types.Arg ;}private static boolean tom_equal_term_GomModuleName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleName(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleName ;}private static boolean tom_equal_term_Field(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Field(Object t) { return  t instanceof tom.gom.adt.gom.types.Field ;}private static boolean tom_equal_term_Production(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Production(Object t) { return  t instanceof tom.gom.adt.gom.types.Production ;}private static boolean tom_equal_term_ModuleDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDecl ;}private static boolean tom_equal_term_ModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleList ;}private static boolean tom_equal_term_GomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomType(Object t) { return  t instanceof tom.gom.adt.gom.types.GomType ;}private static boolean tom_equal_term_ImportedModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportedModule(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportedModule ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.gom.adt.gom.types.Option ;}private static boolean tom_equal_term_HookKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookKind(Object t) { return  t instanceof tom.gom.adt.gom.types.HookKind ;}private static boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName  t) { return  (t instanceof tom.gom.adt.objects.types.classname.ClassName) ;}private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1) ; }private static  String  tom_get_slot_ClassName_Pkg( tom.gom.adt.objects.types.ClassName  t) { return  t.getPkg() ;}private static  String  tom_get_slot_ClassName_Name( tom.gom.adt.objects.types.ClassName  t) { return  t.getName() ;}private static  tom.gom.adt.code.types.Code  tom_make_Code( String  t0) { return  tom.gom.adt.code.types.code.Code.make(t0) ; }private static  tom.gom.adt.code.types.Code  tom_make_FullSortClass( tom.gom.adt.gom.types.SortDecl  t0) { return  tom.gom.adt.code.types.code.FullSortClass.make(t0) ; }private static  tom.gom.adt.gom.types.Slot  tom_make_Slot( String  t0,  tom.gom.adt.gom.types.SortDecl  t1) { return  tom.gom.adt.gom.types.slot.Slot.make(t0, t1) ; }private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Slots( tom.gom.adt.gom.types.SlotList  t0) { return  tom.gom.adt.gom.types.typedproduction.Slots.make(t0) ; }private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Variadic( tom.gom.adt.gom.types.SortDecl  t0) { return  tom.gom.adt.gom.types.typedproduction.Variadic.make(t0) ; }private static  tom.gom.adt.gom.types.OperatorDecl  tom_make_OperatorDecl( String  t0,  tom.gom.adt.gom.types.SortDecl  t1,  tom.gom.adt.gom.types.TypedProduction  t2) { return  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make(t0, t1, t2) ; }private static  tom.gom.adt.gom.types.Pair  tom_make_ModHookPair( tom.gom.adt.gom.types.ModuleList  t0,  tom.gom.adt.gom.types.HookDeclList  t1) { return  tom.gom.adt.gom.types.pair.ModHookPair.make(t0, t1) ; }private static  tom.gom.adt.gom.types.Decl  tom_make_CutModule( tom.gom.adt.gom.types.ModuleDecl  t0) { return  tom.gom.adt.gom.types.decl.CutModule.make(t0) ; }private static  tom.gom.adt.gom.types.Decl  tom_make_CutOperator( tom.gom.adt.gom.types.OperatorDecl  t0) { return  tom.gom.adt.gom.types.decl.CutOperator.make(t0) ; }private static boolean tom_is_fun_sym_Sort( tom.gom.adt.gom.types.Sort  t) { return  (t instanceof tom.gom.adt.gom.types.sort.Sort) ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Sort_Decl( tom.gom.adt.gom.types.Sort  t) { return  t.getDecl() ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slot_Sort_Operators( tom.gom.adt.gom.types.Sort  t) { return  t.getOperators() ;}private static boolean tom_is_fun_sym_SortDecl( tom.gom.adt.gom.types.SortDecl  t) { return  (t instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ;}private static  String  tom_get_slot_SortDecl_Name( tom.gom.adt.gom.types.SortDecl  t) { return  t.getName() ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_SortDecl_ModuleDecl( tom.gom.adt.gom.types.SortDecl  t) { return  t.getModuleDecl() ;}private static  tom.gom.adt.gom.types.HookDecl  tom_make_BlockHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make(t0, t1) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_make_InterfaceHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl.make(t0, t1) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_make_ImportHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make(t0, t1) ; }private static boolean tom_is_fun_sym_Module( tom.gom.adt.gom.types.Module  t) { return  (t instanceof tom.gom.adt.gom.types.module.Module) ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_Module_MDecl( tom.gom.adt.gom.types.Module  t) { return  t.getMDecl() ;}private static  tom.gom.adt.gom.types.SortList  tom_get_slot_Module_Sorts( tom.gom.adt.gom.types.Module  t) { return  t.getSorts() ;}private static boolean tom_is_fun_sym_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl  t) { return  (t instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ;}private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_ModuleDecl_ModuleName( tom.gom.adt.gom.types.ModuleDecl  t) { return  t.getModuleName() ;}private static  String  tom_get_slot_ModuleDecl_Pkg( tom.gom.adt.gom.types.ModuleDecl  t) { return  t.getPkg() ;}private static boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList  t) { return  ((t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator) || (t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator)) ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_empty_list_concOperator() { return  tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ; }private static  tom.gom.adt.gom.types.OperatorDeclList  tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl  e,  tom.gom.adt.gom.types.OperatorDeclList  l) { return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(e,l) ; }private static  tom.gom.adt.gom.types.OperatorDecl  tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) { return  l.getHeadconcOperator() ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) { return  l.getTailconcOperator() ;}private static boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) { return  l.isEmptyconcOperator() ;}   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyconcOperator() ) {       return l2;     } else if( l2.isEmptyconcOperator() ) {       return l1;     } else if(  l1.getTailconcOperator() .isEmptyconcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,tom_append_list_concOperator( l1.getTailconcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( begin.getHeadconcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator( begin.getTailconcOperator() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concHookDecl( tom.gom.adt.gom.types.HookDeclList  t) { return  ((t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl) || (t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl)) ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_empty_list_concHookDecl() { return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ; }private static  tom.gom.adt.gom.types.HookDeclList  tom_cons_list_concHookDecl( tom.gom.adt.gom.types.HookDecl  e,  tom.gom.adt.gom.types.HookDeclList  l) { return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_get_head_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) { return  l.getHeadconcHookDecl() ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_tail_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) { return  l.getTailconcHookDecl() ;}private static boolean tom_is_empty_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) { return  l.isEmptyconcHookDecl() ;}   private static   tom.gom.adt.gom.types.HookDeclList  tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList l1,  tom.gom.adt.gom.types.HookDeclList  l2) {     if( l1.isEmptyconcHookDecl() ) {       return l2;     } else if( l2.isEmptyconcHookDecl() ) {       return l1;     } else if(  l1.getTailconcHookDecl() .isEmptyconcHookDecl() ) {       return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( l1.getHeadconcHookDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( l1.getHeadconcHookDecl() ,tom_append_list_concHookDecl( l1.getTailconcHookDecl() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.HookDeclList  tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end, tom.gom.adt.gom.types.HookDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make( begin.getHeadconcHookDecl() ,( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_concHookDecl( begin.getTailconcHookDecl() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList  t) { return  ((t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot) || (t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot)) ;}private static  tom.gom.adt.gom.types.SlotList  tom_empty_list_concSlot() { return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }private static  tom.gom.adt.gom.types.SlotList  tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot  e,  tom.gom.adt.gom.types.SlotList  l) { return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.gom.adt.gom.types.Slot  tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) { return  l.getHeadconcSlot() ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) { return  l.getTailconcSlot() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) { return  l.isEmptyconcSlot() ;}   private static   tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList  t) { return  ((t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ;}private static  tom.gom.adt.gom.types.SortList  tom_empty_list_concSort() { return  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ; }private static  tom.gom.adt.gom.types.SortList  tom_cons_list_concSort( tom.gom.adt.gom.types.Sort  e,  tom.gom.adt.gom.types.SortList  l) { return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(e,l) ; }private static  tom.gom.adt.gom.types.Sort  tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList  l) { return  l.getHeadconcSort() ;}private static  tom.gom.adt.gom.types.SortList  tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList  l) { return  l.getTailconcSort() ;}private static boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList  l) { return  l.isEmptyconcSort() ;}   private static   tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyconcSort() ) {       return l2;     } else if( l2.isEmptyconcSort() ) {       return l1;     } else if(  l1.getTailconcSort() .isEmptyconcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,tom_append_list_concSort( l1.getTailconcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( begin.getHeadconcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort( begin.getTailconcSort() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concModule( tom.gom.adt.gom.types.ModuleList  t) { return  ((t instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (t instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ;}private static  tom.gom.adt.gom.types.ModuleList  tom_empty_list_concModule() { return  tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() ; }private static  tom.gom.adt.gom.types.ModuleList  tom_cons_list_concModule( tom.gom.adt.gom.types.Module  e,  tom.gom.adt.gom.types.ModuleList  l) { return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make(e,l) ; }private static  tom.gom.adt.gom.types.Module  tom_get_head_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) { return  l.getHeadconcModule() ;}private static  tom.gom.adt.gom.types.ModuleList  tom_get_tail_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) { return  l.getTailconcModule() ;}private static boolean tom_is_empty_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) { return  l.isEmptyconcModule() ;}   private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_concModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyconcModule() ) {       return l2;     } else if( l2.isEmptyconcModule() ) {       return l1;     } else if(  l1.getTailconcModule() .isEmptyconcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,tom_append_list_concModule( l1.getTailconcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_concModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( begin.getHeadconcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_concModule( begin.getTailconcModule() ,end,tail)) ;     }   }    





  private static String packagePath;
  private static SortDecl stringSortDecl;
  private static SortDecl intSortDecl;
  // indicates if the expand method must include normalization phase
  // specific to termgraphs
  private boolean forTermgraph;

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  public GomReferenceExpander(String packagePath,boolean forTermgraph) {
    this.forTermgraph = forTermgraph;
    this.packagePath = packagePath;
    stringSortDecl = environment().builtinSort("String");
    intSortDecl = environment().builtinSort("int");
    //we mark them as used builtins:
    //String is used for labelling
    environment().markUsedBuiltin("String");
    //int is used for defining paths
    environment().markUsedBuiltin("int");
  }

  private static String fullClassName(ClassName clsName) {
    if (tom_is_sort_ClassName(clsName)) {{  tom.gom.adt.objects.types.ClassName  tomMatch453NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.ClassName )clsName);if (tom_is_fun_sym_ClassName(tomMatch453NameNumberfreshSubject_1)) {{  String  tomMatch453NameNumber_freshVar_0=tom_get_slot_ClassName_Pkg(tomMatch453NameNumberfreshSubject_1);{  String  tomMatch453NameNumber_freshVar_1=tom_get_slot_ClassName_Name(tomMatch453NameNumberfreshSubject_1);{  String  tom_pkgPrefix=tomMatch453NameNumber_freshVar_0;{  String  tom_name=tomMatch453NameNumber_freshVar_1;if ( true ) {

        if(tom_pkgPrefix.length()==0) {
          return tom_name;
        } else {
          return tom_pkgPrefix+"."+tom_name;
        }
      }}}}}}}}

    throw new GomRuntimeException(
        "GomReferenceExpander:fullClassName got a strange ClassName "+clsName);
  }

  public Pair expand(ModuleList list, HookDeclList hooks) {
    ModuleList expandedList = tom_empty_list_concModule();
    ArrayList hookList = new ArrayList();
    try {
      expandedList = (ModuleList) tom_make_TopDown(tom_make_ExpandSort(hookList)).visit(list);
    } catch(tom.library.sl.VisitFailure e) {
      throw new tom.gom.tools.error.GomRuntimeException("Unexpected strategy failure!");
    }
    //add a global expand method in every ModuleDecl contained in the SortList
    try {
      tom_make_TopDown(tom_make_ExpandModule(packagePath,forTermgraph,hookList))
.visit(expandedList);
    } catch (tom.library.sl.VisitFailure e) {
      throw new tom.gom.tools.error.GomRuntimeException("Unexpected strategy failure!");
    }
    Iterator it = hookList.iterator();
    while(it.hasNext()) {
      HookDeclList hList = (HookDeclList) it.next();
      hooks = tom_append_list_concHookDecl(hList,tom_append_list_concHookDecl(hooks,tom_empty_list_concHookDecl()));
    }
    return tom_make_ModHookPair(expandedList,hooks);
  }

  private static class ExpandModule extends  tom.gom.adt.gom.GomBasicStrategy  {private  String  packagePath; private  boolean  forTermgraph; private  java.util.ArrayList  hookList; public ExpandModule( String  packagePath,  boolean  forTermgraph,  java.util.ArrayList  hookList) { super(tom_make_Identity());this.packagePath=packagePath;this.forTermgraph=forTermgraph;this.hookList=hookList;}public  String  getpackagePath() { return packagePath;}public  boolean  getforTermgraph() { return forTermgraph;}public  java.util.ArrayList  gethookList() { return hookList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.gom.types.Module  visit_Module( tom.gom.adt.gom.types.Module  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Module(tom__arg)) {{  tom.gom.adt.gom.types.Module  tomMatch454NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Module )tom__arg);if (tom_is_fun_sym_Module(tomMatch454NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch454NameNumber_freshVar_0=tom_get_slot_Module_MDecl(tomMatch454NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.SortList  tomMatch454NameNumber_freshVar_1=tom_get_slot_Module_Sorts(tomMatch454NameNumberfreshSubject_1);if (tom_is_fun_sym_ModuleDecl(tomMatch454NameNumber_freshVar_0)) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch454NameNumber_freshVar_2=tom_get_slot_ModuleDecl_ModuleName(tomMatch454NameNumber_freshVar_0);if ( true ) {






        hookList.add(expHooksModule(tomMatch454NameNumber_freshVar_2,tomMatch454NameNumber_freshVar_1,tomMatch454NameNumber_freshVar_0,packagePath,forTermgraph));
      }}}}}}}}return super.visit_Module(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ExpandModule( String  t0,  boolean  t1,  java.util.ArrayList  t2) { return new ExpandModule(t0,t1,t2); }private static class ExpandSort extends  tom.gom.adt.gom.GomBasicStrategy  {private  java.util.ArrayList  hookList; public ExpandSort( java.util.ArrayList  hookList) { super(tom_make_Identity());this.hookList=hookList;}public  java.util.ArrayList  gethookList() { return hookList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.gom.types.Sort  visit_Sort( tom.gom.adt.gom.types.Sort  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Sort(tom__arg)) {{  tom.gom.adt.gom.types.Sort  tomMatch455NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Sort )tom__arg);if (tom_is_fun_sym_Sort(tomMatch455NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SortDecl  tomMatch455NameNumber_freshVar_0=tom_get_slot_Sort_Decl(tomMatch455NameNumberfreshSubject_1);{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch455NameNumber_freshVar_1=tom_get_slot_Sort_Operators(tomMatch455NameNumberfreshSubject_1);if (tom_is_fun_sym_SortDecl(tomMatch455NameNumber_freshVar_0)) {{  String  tomMatch455NameNumber_freshVar_2=tom_get_slot_SortDecl_Name(tomMatch455NameNumber_freshVar_0);{  String  tom_sortname=tomMatch455NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SortDecl  tom_sortdecl=tomMatch455NameNumber_freshVar_0;if ( true ) {






         
        //We add 5 new operators Lab<Sort>,Ref<Sort>,Path<Sort>,Subst<Sort>,Var<Sort>
        //the two last ones are only used to implement the termgraph rewriting step
        OperatorDecl labOp = tom_make_OperatorDecl("Lab"+tom_sortname,tom_sortdecl,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("label"+tom_sortname,stringSortDecl),tom_cons_list_concSlot(tom_make_Slot("term"+tom_sortname,tom_sortdecl),tom_empty_list_concSlot()))));
        OperatorDecl refOp = tom_make_OperatorDecl("Ref"+tom_sortname,tom_sortdecl,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("label"+tom_sortname,stringSortDecl),tom_empty_list_concSlot())));
        OperatorDecl pathOp = tom_make_OperatorDecl("Path"+tom_sortname,tom_sortdecl,tom_make_Variadic(intSortDecl));
        OperatorDecl substOp = tom_make_OperatorDecl("Subst"+tom_sortname,tom_sortdecl,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("global"+tom_sortname,tom_sortdecl),tom_cons_list_concSlot(tom_make_Slot("subst"+tom_sortname,tom_sortdecl),tom_empty_list_concSlot()))));
        OperatorDecl varOp = tom_make_OperatorDecl("Var"+tom_sortname,tom_sortdecl,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("label"+tom_sortname,stringSortDecl),tom_empty_list_concSlot())));
        hookList.add(pathHooks(pathOp,tom_sortdecl));
        return tomMatch455NameNumberfreshSubject_1.setOperators(tom_append_list_concOperator(tomMatch455NameNumber_freshVar_1,tom_cons_list_concOperator(labOp,tom_cons_list_concOperator(refOp,tom_cons_list_concOperator(pathOp,tom_cons_list_concOperator(substOp,tom_cons_list_concOperator(varOp,tom_empty_list_concOperator())))))));

      }}}}}}}}}}return super.visit_Sort(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ExpandSort( java.util.ArrayList  t0) { return new ExpandSort(t0); }



  private static HookDeclList pathHooks(OperatorDecl opDecl, SortDecl sort){

    String moduleName = sort.getModuleDecl().getModuleName().getName();
    String sortName = sort.getName();

    String codeImport ="\n      import "/* Generated by TOM (version 2.6alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.6alpha): Do not edit this file */+moduleName.toLowerCase()+".types.*;\n    import tom.library.sl.*;\n    "


;

    String codeBlock ="\n\n    public Path add(Path p){\n        Position pp = Position.make(this);\n        return make(pp.add(p));\n    }\n\n    public Path inverse(){\n      Position pp = Position.make(this);\n      return make(pp.inverse());\n    }\n\n    public Path sub(Path p){\n      Position pp = Position.make(this);\n      return make(pp.sub(p));\n    }\n\n    public int getHead(){\n      return getHeadPath"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"();\n    }\n\n    public Path getTail(){\n      return (Path) getTailPath"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"();\n    }\n\n    public Path getCanonicalPath(){\n      %match(this) {\n        Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(X*,x,y,Y*) -> {\n          if (`x==-`y) {\n            return ((Path)`Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(X*,Y*)).getCanonicalPath();\n          }\n        }\n      }\n      return this;\n    }\n\n    public Path conc(int i){\n      Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" current = this;\n      return (Path) `Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(i,current*);\n    }\n\n    public static Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" make(Path path){\n      "/* Generated by TOM (version 2.6alpha): Do not edit this file */+CodeGen.generateCode(tom_make_FullSortClass(sort))+" ref = `Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"();\n      Path pp = path.getCanonicalPath();\n      int size = pp.length();\n      for(int i=0;i<size;i++){\n        ref = `Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(ref*,pp.getHead());\n        pp = pp.getTail();\n      }\n      return (Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+") ref;\n    }\n\n    public int compare(Path p){\n      Position p1 = Position.make(this);\n      Position p2 = Position.make(p);\n      return p1.compare(p2);\n    }\n    "
























































;

    return 
      tom_cons_list_concHookDecl(tom_make_ImportHookDecl(tom_make_CutOperator(opDecl),tom_make_Code(codeImport)),tom_cons_list_concHookDecl(tom_make_InterfaceHookDecl(tom_make_CutOperator(opDecl),tom_make_Code("tom.library.sl.Path")),tom_cons_list_concHookDecl(tom_make_BlockHookDecl(tom_make_CutOperator(opDecl),tom_make_Code(codeBlock)),tom_empty_list_concHookDecl())))



;
  }

  private static HookDeclList expHooksModule(GomModuleName gomModuleName,
      SortList sorts,
      ModuleDecl mDecl,
      String packagePath,
      boolean forTermgraph) {
    String moduleName = gomModuleName.getName();
    ClassName abstractType = tom_make_ClassName(packagePath+"."+moduleName.toLowerCase(),moduleName+"AbstractType");

    String codeImport ="\n    import "/* Generated by TOM (version 2.6alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.6alpha): Do not edit this file */+moduleName.toLowerCase()+".types.*;\n    import "/* Generated by TOM (version 2.6alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.6alpha): Do not edit this file */+moduleName.toLowerCase()+".*;\n    import tom.library.sl.*;\n    import java.util.ArrayList;\n    import java.util.HashMap;\n    "





;

    String codeStrategies = "";
    String CollectLabels= "Fail()";
    String CollectLabels2= "Fail()";
    String CollectLabels3= "Fail()";
    String Label2Path = "Identity()",NormalizeLabel = "Identity()", CollectRef = "Identity()", AddLabel = "Identity()";

    if (tom_is_sort_SortList(sorts)) {{  tom.gom.adt.gom.types.SortList  tomMatch456NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortList )sorts);if (tom_is_fun_sym_concSort(tomMatch456NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SortList  tomMatch456NameNumber_freshVar_0=tomMatch456NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortList  tomMatch456NameNumber_begin_2=tomMatch456NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortList  tomMatch456NameNumber_end_3=tomMatch456NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortList  tomMatch456NameNumber_freshVar_1=tomMatch456NameNumber_end_3;if (!(tom_is_empty_concSort_SortList(tomMatch456NameNumber_freshVar_1))) {if (tom_is_fun_sym_Sort(tom_get_head_concSort_SortList(tomMatch456NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.SortDecl  tomMatch456NameNumber_freshVar_6=tom_get_slot_Sort_Decl(tom_get_head_concSort_SortList(tomMatch456NameNumber_freshVar_1));if (tom_is_fun_sym_SortDecl(tomMatch456NameNumber_freshVar_6)) {{  String  tomMatch456NameNumber_freshVar_7=tom_get_slot_SortDecl_Name(tomMatch456NameNumber_freshVar_6);{  String  tom_sortName=tomMatch456NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch456NameNumber_freshVar_4=tom_get_tail_concSort_SortList(tomMatch456NameNumber_freshVar_1);if ( true ) {

        codeImport += "\n          import "/* Generated by TOM (version 2.6alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.6alpha): Do not edit this file */+moduleName.toLowerCase()+".types."/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortName.toLowerCase()+".Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortName+";\n        "

;
        codeStrategies += getStrategies(tomMatch456NameNumber_freshVar_6);
        Label2Path = "Sequence(Label2Path"+tom_sortName+"(map),"+Label2Path+")";
        CollectLabels = "Choice(CollectLabels"+tom_sortName+"(map),"+CollectLabels+")";
        CollectLabels2 = "Choice(CollectLabels2"+tom_sortName+"(map),"+CollectLabels2+")";
        CollectLabels3 = "Choice(CollectLabels3"+tom_sortName+"(map),"+CollectLabels3+")";
        NormalizeLabel = "Sequence(NormalizeLabel"+tom_sortName+"(map),"+NormalizeLabel+")";
        CollectRef = "Sequence(CollectRef"+tom_sortName+"(map),"+CollectRef+")";
        AddLabel = "Sequence(AddLabel"+tom_sortName+"(map),"+AddLabel+")";
      }}}}}}}}}if (tom_is_empty_concSort_SortList(tomMatch456NameNumber_end_3)) {tomMatch456NameNumber_end_3=tomMatch456NameNumber_begin_2;} else {tomMatch456NameNumber_end_3=tom_get_tail_concSort_SortList(tomMatch456NameNumber_end_3);}}} while(!(tom_equal_term_SortList(tomMatch456NameNumber_end_3, tomMatch456NameNumber_begin_2)));}}}}}}


    String codeBlockCommon ="\n    %include{java/util/HashMap.tom}\n    %include{java/util/ArrayList.tom}\n    %include{sl.tom}\n\n    static int freshlabel =0; //to unexpand termgraphs\n    \n    %typeterm Info {\n      implement { Info }\n      is_sort(t) { t instanceof Info } \n    }\n\n\n    public static class Info {\n      public String label;\n      public Path path;\n      public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" term;\n    }\n\n    public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" unexpand() {\n       HashMap map = getLabels3();\n       try {\n         return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+")`Sequence(TopDown("/* Generated by TOM (version 2.6alpha): Do not edit this file */+CollectRef+"),BottomUp("/* Generated by TOM (version 2.6alpha): Do not edit this file */+AddLabel+")).visit(this);\n       } catch (tom.library.sl.VisitFailure e) {\n         throw new RuntimeException(\"Unexpected strategy failure!\");\n       }\n    }\n\n    protected HashMap getLabels3(){\n      HashMap map = new HashMap();\n      try {\n      `TopDown(Try("/* Generated by TOM (version 2.6alpha): Do not edit this file */+CollectLabels3+")).visit(this);\n      return map;\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    "





































;


    String codeBlockTermWithPointers ="\n\n      public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" expand(){\n        HashMap map = new HashMap();\n        Strategy label2path = `Sequence(Repeat(OnceTopDown("/* Generated by TOM (version 2.6alpha): Do not edit this file */+CollectLabels+")),TopDown("/* Generated by TOM (version 2.6alpha): Do not edit this file */+Label2Path+"));\n        try {\n          return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+") `label2path.visit(this);\n        } catch (tom.library.sl.VisitFailure e) {\n          throw new RuntimeException(\"Unexpected strategy failure!\");\n        }}\n        "









;

    String codeBlockTermGraph ="\n\n   public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" expand(){\n       Info info = new Info();\n       ArrayList marked = new ArrayList();\n       HashMap map = new HashMap();\n       try {\n         return (("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+")`InnermostIdSeq("/* Generated by TOM (version 2.6alpha): Do not edit this file */+NormalizeLabel+").visit(this.unexpand())).label2path();\n       } catch (tom.library.sl.VisitFailure e) {\n         throw new RuntimeException(\"Unexpected strategy failure!\");\n       }\n     }\n\n    protected "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" label2path(){\n      HashMap map = new HashMap();\n      Strategy label2path = `Sequence(Repeat(OnceTopDown("/* Generated by TOM (version 2.6alpha): Do not edit this file */+CollectLabels+")),TopDown("/* Generated by TOM (version 2.6alpha): Do not edit this file */+Label2Path+"));\n      try {\n        return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+") label2path.visit(this);\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n    \n    protected HashMap getLabels(){\n      HashMap map = new HashMap();\n      try {\n      `TopDown(Try("/* Generated by TOM (version 2.6alpha): Do not edit this file */+CollectLabels+")).visit(this);\n      return map;\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    protected HashMap getLabels2(){\n      HashMap map = new HashMap();\n      try {\n      `TopDown(Try("/* Generated by TOM (version 2.6alpha): Do not edit this file */+CollectLabels2+")).visit(this);\n      return map;\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" normalize() {\n      try {\n         return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+")`InnermostIdSeq(Normalize()).visit(this); \n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" applyGlobalRedirection(Position p1,Position p2) {\n      try {\n         return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+") globalRedirection(p1,p2).visit(this); \n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n  \n    public static Strategy globalRedirection(Position p1,Position p2) {\n        return `TopDown(GlobalRedirection(p1,p2)); \n    }\n\n    public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" swap(Position p1, Position p2) {\n      try {\n        "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" updatedSubject =  ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" ) `TopDown(UpdatePos(p1,p2)).visit(this);\n        "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" subterm_p1 = ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+") p1.getSubterm().visit(updatedSubject);\n        "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" subterm_p2 = ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+") p2.getSubterm().visit(updatedSubject);\n        return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+") `Sequence(p2.getReplace(subterm_p1),p1.getReplace(subterm_p2)).visit(updatedSubject);\n      } catch (VisitFailure e) { \n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n   %strategy Normalize() extends Identity() {\n"










































































;

  if (tom_is_sort_SortList(sorts)) {{  tom.gom.adt.gom.types.SortList  tomMatch457NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortList )sorts);if (tom_is_fun_sym_concSort(tomMatch457NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SortList  tomMatch457NameNumber_freshVar_0=tomMatch457NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortList  tomMatch457NameNumber_begin_2=tomMatch457NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortList  tomMatch457NameNumber_end_3=tomMatch457NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortList  tomMatch457NameNumber_freshVar_1=tomMatch457NameNumber_end_3;if (!(tom_is_empty_concSort_SortList(tomMatch457NameNumber_freshVar_1))) {if (tom_is_fun_sym_Sort(tom_get_head_concSort_SortList(tomMatch457NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.SortDecl  tomMatch457NameNumber_freshVar_6=tom_get_slot_Sort_Decl(tom_get_head_concSort_SortList(tomMatch457NameNumber_freshVar_1));if (tom_is_fun_sym_SortDecl(tomMatch457NameNumber_freshVar_6)) {{  String  tomMatch457NameNumber_freshVar_7=tom_get_slot_SortDecl_Name(tomMatch457NameNumber_freshVar_6);{  String  tom_sortname=tomMatch457NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch457NameNumber_freshVar_4=tom_get_tail_concSort_SortList(tomMatch457NameNumber_freshVar_1);if ( true ) {

 codeBlockTermGraph += "\n        visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+" {\n          p@Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+"(_*) -> {\n            Position current = getEnvironment().getPosition(); \n            Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n            if(current.compare(dest)== -1) {\n                getEnvironment().followPath((Path)`p);\n                Position realDest = getEnvironment().getPosition(); \n            if(!realDest.equals(dest)) {\n                //the subterm pointed was a pos (in case of previous switch) \n                //and we must only update the relative position\n                getEnvironment().followPath(current.sub(getEnvironment().getPosition()));\n                return Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+".make(realDest.sub(current));\n            }  else {\n                //switch the rel position and the pointed subterm\n\n                // 1. construct the new relative position\n                "/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+" relref = Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+".make(current.sub(dest));\n\n                // 2. update the part to change \n                `TopDown(UpdatePos(dest,current)).visit(getEnvironment());\n\n                // 3. save the subterm updated \n                "/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+" subterm = ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+") getEnvironment().getSubject(); \n\n                // 4. replace at dest the subterm by the new relative pos\n                getEnvironment().setSubject(relref);\n                getEnvironment().followPath(current.sub(getEnvironment().getPosition()));\n                return subterm; \n            }\n          }\n        }\n      }\n"
































;
      }}}}}}}}}if (tom_is_empty_concSort_SortList(tomMatch457NameNumber_end_3)) {tomMatch457NameNumber_end_3=tomMatch457NameNumber_begin_2;} else {tomMatch457NameNumber_end_3=tom_get_tail_concSort_SortList(tomMatch457NameNumber_end_3);}}} while(!(tom_equal_term_SortList(tomMatch457NameNumber_end_3, tomMatch457NameNumber_begin_2)));}}}}}}


  codeBlockTermGraph += "\n    }\n\n   %typeterm Position{\n        implement {Position}\n        is_sort(t)     { t instanceof Position }\n    }\n  \n   %strategy UpdatePos(source:Position,target:Position) extends Identity() {\n  "








;


   if (tom_is_sort_SortList(sorts)) {{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortList )sorts);if (tom_is_fun_sym_concSort(tomMatch458NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_freshVar_0=tomMatch458NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_begin_2=tomMatch458NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_end_3=tomMatch458NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_freshVar_1=tomMatch458NameNumber_end_3;if (!(tom_is_empty_concSort_SortList(tomMatch458NameNumber_freshVar_1))) {if (tom_is_fun_sym_Sort(tom_get_head_concSort_SortList(tomMatch458NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.SortDecl  tomMatch458NameNumber_freshVar_6=tom_get_slot_Sort_Decl(tom_get_head_concSort_SortList(tomMatch458NameNumber_freshVar_1));if (tom_is_fun_sym_SortDecl(tomMatch458NameNumber_freshVar_6)) {{  String  tomMatch458NameNumber_freshVar_7=tom_get_slot_SortDecl_Name(tomMatch458NameNumber_freshVar_6);{  String  tom_sortname=tomMatch458NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch458NameNumber_freshVar_4=tom_get_tail_concSort_SortList(tomMatch458NameNumber_freshVar_1);if ( true ) {

        codeBlockTermGraph += "\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+" {\n            p@Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+"(_*) -> {\n              Position current = getEnvironment().getPosition(); \n              Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n              //relative pos from the source to the external\n              if(current.hasPrefix(source) && !dest.hasPrefix(target) && !dest.hasPrefix(source)){\n                current = current.changePrefix(source,target);\n                return Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the external to the source\n              if (dest.hasPrefix(source) && !current.hasPrefix(target) && !current.hasPrefix(source)){\n                dest = dest.changePrefix(source,target); \n                return Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the source to the target\n              if(current.hasPrefix(source) && dest.hasPrefix(target)){\n                current = current.changePrefix(source,target);\n                dest = dest.changePrefix(target,source);\n                return Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the target to the source\n              if(current.hasPrefix(target) && dest.hasPrefix(source)){\n                current = current.changePrefix(target,source);\n                dest = dest.changePrefix(source,target);\n                return Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n   \n            }\n          }\n    "
































;
      }}}}}}}}}if (tom_is_empty_concSort_SortList(tomMatch458NameNumber_end_3)) {tomMatch458NameNumber_end_3=tomMatch458NameNumber_begin_2;} else {tomMatch458NameNumber_end_3=tom_get_tail_concSort_SortList(tomMatch458NameNumber_end_3);}}} while(!(tom_equal_term_SortList(tomMatch458NameNumber_end_3, tomMatch458NameNumber_begin_2)));}}}}}}


   codeBlockTermGraph += "\n   }\n\n   %strategy GlobalRedirection(source:Position,target:Position) extends Identity() {\n  "



;

   if (tom_is_sort_SortList(sorts)) {{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortList )sorts);if (tom_is_fun_sym_concSort(tomMatch459NameNumberfreshSubject_1)) {{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_freshVar_0=tomMatch459NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_begin_2=tomMatch459NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_end_3=tomMatch459NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_freshVar_1=tomMatch459NameNumber_end_3;if (!(tom_is_empty_concSort_SortList(tomMatch459NameNumber_freshVar_1))) {if (tom_is_fun_sym_Sort(tom_get_head_concSort_SortList(tomMatch459NameNumber_freshVar_1))) {{  tom.gom.adt.gom.types.SortDecl  tomMatch459NameNumber_freshVar_6=tom_get_slot_Sort_Decl(tom_get_head_concSort_SortList(tomMatch459NameNumber_freshVar_1));if (tom_is_fun_sym_SortDecl(tomMatch459NameNumber_freshVar_6)) {{  String  tomMatch459NameNumber_freshVar_7=tom_get_slot_SortDecl_Name(tomMatch459NameNumber_freshVar_6);{  String  tom_sortname=tomMatch459NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch459NameNumber_freshVar_4=tom_get_tail_concSort_SortList(tomMatch459NameNumber_freshVar_1);if ( true ) {

        codeBlockTermGraph += "\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+" {\n            p@Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+"(_*) -> {\n              Position current = getEnvironment().getPosition(); \n              Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n              if(dest.equals(source)) {\n                return Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+tom_sortname+".make(target.sub(current));\n              }\n            }\n          }\n    "









;
      }}}}}}}}}if (tom_is_empty_concSort_SortList(tomMatch459NameNumber_end_3)) {tomMatch459NameNumber_end_3=tomMatch459NameNumber_begin_2;} else {tomMatch459NameNumber_end_3=tom_get_tail_concSort_SortList(tomMatch459NameNumber_end_3);}}} while(!(tom_equal_term_SortList(tomMatch459NameNumber_end_3, tomMatch459NameNumber_begin_2)));}}}}}}


   codeBlockTermGraph += "\n   }\n   "

;

    String codeBlock = codeBlockCommon + codeStrategies + (forTermgraph?codeBlockTermGraph:codeBlockTermWithPointers);

    return tom_cons_list_concHookDecl(tom_make_ImportHookDecl(tom_make_CutModule(mDecl),tom_make_Code(codeImport)),tom_cons_list_concHookDecl(tom_make_BlockHookDecl(tom_make_CutModule(mDecl),tom_make_Code(codeBlock)),tom_empty_list_concHookDecl()))

;
  }

  private static String getStrategies(SortDecl sDecl) {

    String sortName = sDecl.getName();
    String strategies ="\n\n    %typeterm Info"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" {\n        implement { Info"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" }\n        is_sort(t) { t instanceof Info"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" } \n    }\n\n    static class Info"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"{\n      public Position omegaRef;\n      public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+CodeGen.generateCode(tom_make_FullSortClass(sDecl))+" sharedTerm;\n    }\n \n      %strategy Collect"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(marked:ArrayList,info:Info) extends Fail() {\n        visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"{\n          Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label,term"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=term]-> {\n            if(! marked.contains(`label)){\n              info.label=`label;\n              info.term=`Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label,term);\n              info.path=getEnvironment().getPosition();\n              marked.add(`label);\n              return `Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label,term);\n            }\n          }\n        }\n      }\n\n    %strategy CollectLabels"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(map:HashMap) extends Fail() {\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"{\n        Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label,term"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=term]-> {\n          map.put(`label,getEnvironment().getPosition());\n          return `term;\n        }\n      }\n    }\n\n    %strategy CollectLabels2"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(map:HashMap) extends Fail() {\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"{\n        Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label,term"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=term]-> {\n          map.put(`label,getEnvironment().getPosition());\n          return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+") getEnvironment().getSubject();\n        }\n      }\n    }\n\n    %strategy CollectLabels3"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(map:HashMap) extends Fail() {\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"{\n        Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label,term"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=term]-> {\n          map.put(getEnvironment().getPosition().toString(),`label);\n          return ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+") getEnvironment().getSubject();\n        }\n      }\n    }\n\n    %strategy Label2Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(map:HashMap) extends Identity() {\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" {\n        Ref"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label] -> {\n          if (map.containsKey(`label)) {\n            Position target = (Position) map.get(`label);\n            "/* Generated by TOM (version 2.6alpha): Do not edit this file */+CodeGen.generateCode(tom_make_FullSortClass(sDecl))+" ref = ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+CodeGen.generateCode(tom_make_FullSortClass(sDecl))+") (Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+".make(target.sub(getEnvironment().getPosition())).getCanonicalPath());\n            return ref;\n          }\n        }\n      }\n    }\n\n    %strategy CollectSubterm"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label:String,info:Info"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+") extends Fail() {\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" {\n        term@Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label,term"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=subterm] -> {\n          Position current = getEnvironment().getPosition();\n          if (label.equals(`label)) {\n            //test if it is not a cycle\n            if (!info.omegaRef.hasPrefix(current)) {\n              //return a ref\n              info.sharedTerm = `subterm;\n              return `Ref"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label);\n            }\n            else {\n              //do not return a ref and stop to collect\n              return `term;  \n            }\n          }\n        }\n      }\n    }\n\n \n    %strategy CollectRef"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(map:HashMap) extends Identity() {\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" {\n        p@Path"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(_*) -> {\n          //use String instead of Position because containskey method does\n          //not use the method equals to compare values\n          String target =\n            getEnvironment().getPosition().add((Path)`p).getCanonicalPath().toString();\n          if (map.containsKey(target)){\n            String label = (String) map.get(target);\n            return `Ref"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label);\n          }\n          else{\n            freshlabel++;\n            String label = \"tom_label\"+freshlabel;\n            map.put(target,label);\n            return `Ref"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label);\n          }\n        }\n      }\n    }\n    \n %strategy AddLabel"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(map:HashMap) extends Identity() {\n    visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"{\n      t@!Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[] -> {\n        if (map.containsKey(getEnvironment().getPosition().toString())) {\n          String label = (String) map.get(getEnvironment().getPosition().toString());\n          return `Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label,t);\n        }\n      }\n    }\n  }\n\n    %strategy NormalizeLabel"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(map:HashMap) extends Identity() {\n      visit "/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" {\n        Ref"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label] -> {\n          if (! map.containsKey(`label)){\n            Position old = getEnvironment().getPosition();\n            Position rootpos = new Position(new int[]{});\n            Info"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+" info = new Info"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"();\n            info.omegaRef = old;\n            getEnvironment().followPath(rootpos.sub(getEnvironment().getPosition()));           \n            `OnceTopDown(CollectSubterm"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label,info)).visit(getEnvironment());            \n            getEnvironment().followPath(old.sub(getEnvironment().getPosition()));\n            //test if it is not a ref to a cycle\n            if (info.sharedTerm!=null) {\n              map.put(`label,old);\n              return `Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"(label,info.sharedTerm);\n            }\n          }\n        }\n        Lab"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"[label"/* Generated by TOM (version 2.6alpha): Do not edit this file */+sortName+"=label] -> {\n          map.put(`label,getEnvironment().getPosition());\n        }\n      }\n    }\n    "












































































































































;

    return strategies;
  }

}
