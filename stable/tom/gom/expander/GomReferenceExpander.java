/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Emilie Balland  e-mail: Emilie.Balland@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class GomReferenceExpander {

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Sort(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TypedProduction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.gom.adt.gom.types.Slot  tom_make_Slot( String  t0,  tom.gom.adt.gom.types.SortDecl  t1) { return  tom.gom.adt.gom.types.slot.Slot.make(t0, t1); }private static  tom.gom.adt.gom.types.HookDecl  tom_make_MakeHookDecl( tom.gom.adt.gom.types.SlotList  t0,  String  t1) { return  tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.HookDecl  tom_make_BlockHookDecl( String  t0) { return  tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make(t0); }private static  tom.gom.adt.gom.types.HookDecl  tom_make_InterfaceHookDecl( String  t0) { return  tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl.make(t0); }private static  tom.gom.adt.gom.types.HookDecl  tom_make_ImportHookDecl( String  t0) { return  tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make(t0); }private static  tom.gom.adt.gom.types.OperatorDecl  tom_make_OperatorDecl( String  t0,  tom.gom.adt.gom.types.SortDecl  t1,  tom.gom.adt.gom.types.TypedProduction  t2,  tom.gom.adt.gom.types.HookDeclList  t3) { return  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make(t0, t1, t2, t3); }private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Slots( tom.gom.adt.gom.types.SlotList  t0) { return  tom.gom.adt.gom.types.typedproduction.Slots.make(t0); }private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Variadic( tom.gom.adt.gom.types.SortDecl  t0) { return  tom.gom.adt.gom.types.typedproduction.Variadic.make(t0); }private static boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList  t) {  return  t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot || t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot  ;}private static  tom.gom.adt.gom.types.SlotList  tom_empty_list_concSlot() { return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }private static  tom.gom.adt.gom.types.SlotList  tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot  e,  tom.gom.adt.gom.types.SlotList  l) { return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.gom.adt.gom.types.Slot  tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList  l1,  tom.gom.adt.gom.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.gom.adt.gom.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator || t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_empty_list_concOperator() { return  tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ; }private static  tom.gom.adt.gom.types.OperatorDeclList  tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl  e,  tom.gom.adt.gom.types.OperatorDeclList  l) { return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(e,l) ; }private static  tom.gom.adt.gom.types.OperatorDecl  tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getHeadconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getTailconcOperator()  ;}private static boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.isEmptyconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList  l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {    if(tom_is_empty_concOperator_OperatorDeclList(l1)) {     return l2;    } else if(tom_is_empty_concOperator_OperatorDeclList(l2)) {     return l1;    } else if(tom_is_empty_concOperator_OperatorDeclList(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1))) {     return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),tom_append_list_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end) {    if(tom_terms_equal_OperatorDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_empty_list_concOperator();    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(begin),( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concHookDecl( tom.gom.adt.gom.types.HookDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl || t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_empty_list_concHookDecl() { return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ; }private static  tom.gom.adt.gom.types.HookDeclList  tom_cons_list_concHookDecl( tom.gom.adt.gom.types.HookDecl  e,  tom.gom.adt.gom.types.HookDeclList  l) { return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_get_head_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getHeadconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_tail_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getTailconcHookDecl()  ;}private static boolean tom_is_empty_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.isEmptyconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList  l1,  tom.gom.adt.gom.types.HookDeclList  l2) {    if(tom_is_empty_concHookDecl_HookDeclList(l1)) {     return l2;    } else if(tom_is_empty_concHookDecl_HookDeclList(l2)) {     return l1;    } else if(tom_is_empty_concHookDecl_HookDeclList(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1))) {     return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),tom_append_list_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.HookDeclList  tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end) {    if(tom_terms_equal_HookDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.HookDeclList )tom_empty_list_concHookDecl();    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(begin),( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList  t) {  return  t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort || t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort  ;}private static  tom.gom.adt.gom.types.SortList  tom_empty_list_concSort() { return  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ; }private static  tom.gom.adt.gom.types.SortList  tom_cons_list_concSort( tom.gom.adt.gom.types.Sort  e,  tom.gom.adt.gom.types.SortList  l) { return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(e,l) ; }private static  tom.gom.adt.gom.types.Sort  tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getHeadconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getTailconcSort()  ;}private static boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.isEmptyconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList  l1,  tom.gom.adt.gom.types.SortList  l2) {    if(tom_is_empty_concSort_SortList(l1)) {     return l2;    } else if(tom_is_empty_concSort_SortList(l2)) {     return l1;    } else if(tom_is_empty_concSort_SortList(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1))) {     return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),tom_append_list_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end) {    if(tom_terms_equal_SortList(begin,end)) {      return ( tom.gom.adt.gom.types.SortList )tom_empty_list_concSort();    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(begin),( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(begin),end));    }   }   

  private String packagePath;
  private SortDecl stringSortDecl,intSortDecl;

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  public GomReferenceExpander(String packagePath) {
    this.packagePath = packagePath;
    stringSortDecl = environment().builtinSort("String");
    intSortDecl = environment().builtinSort("int");
    //we mark them as used builtins
    environment().markUsedBuiltin("String");
    environment().markUsedBuiltin("int");
  }

  public SortList expand(SortList typedModuleList) {
    //return (SortList) `_concSort(ExpandSort()).apply(typedModuleList);
    SortList expandedList = tom_empty_list_concSort();
     if(typedModuleList instanceof  tom.gom.adt.gom.types.SortList ) { { tom.gom.adt.gom.types.SortList  tom_match1_1=(( tom.gom.adt.gom.types.SortList )typedModuleList); if ( ( tom_is_fun_sym_concSort(tom_match1_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortList  tom_match1_1_list1=tom_match1_1; { tom.gom.adt.gom.types.SortList  tom_match1_1_begin1=tom_match1_1_list1; { tom.gom.adt.gom.types.SortList  tom_match1_1_end1=tom_match1_1_list1; { while (!(tom_is_empty_concSort_SortList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1; { { tom.gom.adt.gom.types.SortList  tom_match1_1_end2=tom_match1_1_list1; { { tom.gom.adt.gom.types.Sort  tom_sort=tom_get_head_concSort_SortList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concSort_SortList(tom_match1_1_list1); if ( true ) {

        expandedList = tom_append_list_concSort(expandedList,tom_cons_list_concSort(expandSort(tom_sort),tom_empty_list_concSort()));
       } }tom_match1_1_list1=tom_match1_1_end2; } }tom_match1_1_end1=tom_get_tail_concSort_SortList(tom_match1_1_end1); } }tom_match1_1_list1=tom_match1_1_begin1; } } } } } } }

    return expandedList;
  }

  /*
     %strategy ExpandSort() extends `Identity() {
     visit Sort{
     sort@Sort[Decl=Decl,Operators=Operators]-> {
     return `sort.setOperators(concOperator(Operators*,getRefOperators(Decl)));
     }
     }
     }
   */

  private Sort expandSort(Sort sort) {
    OperatorDeclList l1 = sort.getOperators();
    OperatorDeclList l2 = getRefOperators(sort.getDecl());
    return sort.setOperators(tom_append_list_concOperator(l1,tom_append_list_concOperator(l2,tom_empty_list_concOperator())));
  }

  /*
     We add 4 new operators for every sort
     lab<Sort>,ref<Sort>,pos<Sort>,exp<Sort>
     and the corresponding hooks
   */
  private OperatorDeclList getRefOperators(SortDecl sort){
    OperatorDecl labOp = tom_make_OperatorDecl("lab"+sort.getName(),sort,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("label",stringSortDecl),tom_cons_list_concSlot(tom_make_Slot("term",sort),tom_empty_list_concSlot()))),tom_empty_list_concHookDecl());

    OperatorDecl refOp = tom_make_OperatorDecl("ref"+sort.getName(),sort,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("label",stringSortDecl),tom_empty_list_concSlot())),tom_empty_list_concHookDecl());

    String posOpName = "pos"+sort.getName();
    OperatorDecl posOp = tom_make_OperatorDecl(posOpName,sort,tom_make_Variadic(intSortDecl),posHooks());

    String expOpName = "exp"+sort.getName();
    OperatorDecl expOp = tom_make_OperatorDecl(expOpName,sort,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("term",sort),tom_empty_list_concSlot())),expHooks(sort));

    return tom_cons_list_concOperator(labOp,tom_cons_list_concOperator(refOp,tom_cons_list_concOperator(posOp,tom_cons_list_concOperator(expOp,tom_empty_list_concOperator()))));
  }

  //TODO remove MuReference when sl is operational
  private HookDeclList posHooks(){
    return 
      tom_cons_list_concHookDecl(tom_make_InterfaceHookDecl("{tom.library.strategy.mutraveler.MuReference,tom.library.sl.Reference}"),tom_empty_list_concHookDecl());
  }

  private HookDeclList expHooks(SortDecl sortDecl){
    String sortName = sortDecl.getName();
    String moduleName = sortDecl.getModuleDecl().getModuleName().getName();
    String codeMake ="\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" termWithPos = expand(term);\n    //to avoid unaccessible real_make statement\n    if(! termWithPos.equals(term)){\n      return termWithPos;\n    }\n    if(termWithPos.equals(term)){\n      return term;\n    }"







;

    String codeImport ="\n    import "/* Generated by TOM (version 2.5alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName.toLowerCase()+".types."/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+";\n    import tom.library.strategy.mutraveler.*;\n    import java.util.HashMap;\n    "



;

    String codeBlock ="\n    %include{java/util/HashMap.tom}\n    %include{java/mustrategy.tom}\n\n    %strategy CollectLabelInfo(info:Info) extends Fail() {\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label,term=term]-> {\n        info.label=`label;\n        info.term=`term;\n        info.pos=getPosition();\n        return `lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(label,term); \n        }\n      }\n    }\n\n    %strategy Replace1(info:Info) extends Fail() {\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        ref"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label] -> {\n          if(`label.equals(info.label)){\n            if(getPosition().compare(info.pos)==-1){\n              info.pos=getPosition(); \n              return info.term;\n            }\n            else{\n              return `ref"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(label);\n            }\n          }\n        }\n      }\n    }\n\n    %strategy Replace2(info:Info) extends Identity() {\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        ref"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label] -> {\n          if(`label.equals(info.label)){\n            if (! info.pos.equals(getPosition())){\n              RelativePosition pos = \n                RelativePosition.make(getPosition(),info.pos);\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" ref = `pos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"();\n              int[] array = `pos.toArray();\n              for(int i=0;i<`pos.depth();i++){\n                ref = `pos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(ref*,array[i]);\n              }\n              return ref; \n            }\n          }\n        }\n        lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label,term=term] -> {\n          if(`label.equals(info.label)){\n            if (! info.pos.equals(getPosition())){\n              RelativePosition pos = \n                RelativePosition.make(getPosition(),info.pos);\n              "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" ref = `pos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"();\n              int[] array = `pos.toArray();\n              for(int i=0;i<`pos.depth();i++){\n                ref = `pos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(ref*,array[i]);\n              }\n              return ref; \n            }\n            else{\n              return `term;\n            }\n          }\n        }\n      }\n    }\n\n    %typeterm Info{\n      implement {Info}\n    }\n\n\n    public static class Info{\n      public String label;\n      public tom.library.strategy.mutraveler.Position pos;\n      public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" term;\n    }\n\n    public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" expand("/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" t){\n      Info info = new Info();\n      //TODO verify that every ref has a corresponding label\n      return ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+") `Repeat(Sequence(\n            OnceTopDown(CollectLabelInfo(info)),\n            Try(OnceTopDown(Replace1(info))),\n            TopDown(Replace2(info))\n            )).apply(t);\n    }\n\n    "























































































;
    return tom_cons_list_concHookDecl(tom_make_MakeHookDecl(tom_cons_list_concSlot(tom_make_Slot("term",sortDecl),tom_empty_list_concSlot()),codeMake),tom_cons_list_concHookDecl(tom_make_ImportHookDecl(codeImport),tom_cons_list_concHookDecl(tom_make_BlockHookDecl(codeBlock),tom_empty_list_concHookDecl())));
  }


}
