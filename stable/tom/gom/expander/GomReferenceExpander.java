/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Emilie Balland  e-mail: Emilie.Balland@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.library.sl.*;
import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class GomReferenceExpander {

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */   static class MapEntry {   private Object key;   private Object val;   public Object getKey() { return key; }   public Object getVal() { return val; }   public MapEntry(Object key, Object val) {     this.key = key;     this.val = val;   } }   /* Generated by TOM (version 2.5alpha): Do not edit this file */    /* Generated by TOM (version 2.5alpha): Do not edit this file */   private static java.util.HashMap hashMapAppend(MapEntry e, java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   res.put(e.getKey(), e.getVal());   return res; }  private static MapEntry hashMapGetHead(java.util.HashMap m) {   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   return new MapEntry(e.getKey(), e.getValue()); }  private static java.util.HashMap hashMapGetTail(java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   res.remove(e.getKey());   return res; }   /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_ArrayList(Object l1, Object l2) {  return  l1.equals(l2)  ;}   private static java.util.ArrayList concArrayListAppend(Object o, java.util.ArrayList l) {   java.util.ArrayList res = (java.util.ArrayList)l.clone();   res.add(o);   return res; } /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}/* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_int(int t1, int t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) {  return  (t instanceof tom.library.sl.Sequence)  ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) {  return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST)  ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) {  return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN)  ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) {  return  t instanceof tom.library.sl.Identity  ;}private static  tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {    if(tom_is_empty_Sequence_Strategy(l1)) {     return l2;    } else if(tom_is_empty_Sequence_Strategy(l2)) {     return l1;    } else if(tom_is_empty_Sequence_Strategy(( tom.library.sl.Strategy )tom_get_tail_Sequence_Strategy(l1))) {     return ( tom.library.sl.Strategy )tom_cons_list_Sequence(( tom.library.sl.Strategy )tom_get_head_Sequence_Strategy(l1),l2);    } else {      return ( tom.library.sl.Strategy )tom_cons_list_Sequence(( tom.library.sl.Strategy )tom_get_head_Sequence_Strategy(l1),tom_append_list_Sequence(( tom.library.sl.Strategy )tom_get_tail_Sequence_Strategy(l1),l2));    }   }  private static  tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end) {    if(tom_terms_equal_Strategy(begin,end)) {      return ( tom.library.sl.Strategy )tom_empty_list_Sequence();    } else {      return ( tom.library.sl.Strategy )tom_cons_list_Sequence(( tom.library.sl.Strategy )tom_get_head_Sequence_Strategy(begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(( tom.library.sl.Strategy )tom_get_tail_Sequence_Strategy(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_boolean(boolean t1, boolean t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_Code(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TypedProduction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Pair(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Decl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Sort(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Module(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomModuleName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ModuleDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ModuleList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.gom.adt.code.types.Code  tom_make_Code( String  t0) { return  tom.gom.adt.code.types.code.Code.make(t0); }private static  tom.gom.adt.gom.types.Slot  tom_make_Slot( String  t0,  tom.gom.adt.gom.types.SortDecl  t1) { return  tom.gom.adt.gom.types.slot.Slot.make(t0, t1); }private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Slots( tom.gom.adt.gom.types.SlotList  t0) { return  tom.gom.adt.gom.types.typedproduction.Slots.make(t0); }private static  tom.gom.adt.gom.types.TypedProduction  tom_make_Variadic( tom.gom.adt.gom.types.SortDecl  t0) { return  tom.gom.adt.gom.types.typedproduction.Variadic.make(t0); }private static  tom.gom.adt.gom.types.OperatorDecl  tom_make_OperatorDecl( String  t0,  tom.gom.adt.gom.types.SortDecl  t1,  tom.gom.adt.gom.types.TypedProduction  t2) { return  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make(t0, t1, t2); }private static  tom.gom.adt.gom.types.Pair  tom_make_ModHookPair( tom.gom.adt.gom.types.ModuleList  t0,  tom.gom.adt.gom.types.HookDeclList  t1) { return  tom.gom.adt.gom.types.pair.ModHookPair.make(t0, t1); }private static  tom.gom.adt.gom.types.Decl  tom_make_CutModule( tom.gom.adt.gom.types.ModuleDecl  t0) { return  tom.gom.adt.gom.types.decl.CutModule.make(t0); }private static  tom.gom.adt.gom.types.Decl  tom_make_CutOperator( tom.gom.adt.gom.types.OperatorDecl  t0) { return  tom.gom.adt.gom.types.decl.CutOperator.make(t0); }private static boolean tom_is_fun_sym_Sort( tom.gom.adt.gom.types.Sort  t) {  return  t instanceof tom.gom.adt.gom.types.sort.Sort  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Sort_Decl( tom.gom.adt.gom.types.Sort  t) {  return  t.getDecl()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slot_Sort_Operators( tom.gom.adt.gom.types.Sort  t) {  return  t.getOperators()  ;}private static boolean tom_is_fun_sym_SortDecl( tom.gom.adt.gom.types.SortDecl  t) {  return  t instanceof tom.gom.adt.gom.types.sortdecl.SortDecl  ;}private static  String  tom_get_slot_SortDecl_Name( tom.gom.adt.gom.types.SortDecl  t) {  return  t.getName()  ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_SortDecl_ModuleDecl( tom.gom.adt.gom.types.SortDecl  t) {  return  t.getModuleDecl()  ;}private static  tom.gom.adt.gom.types.HookDecl  tom_make_BlockHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.HookDecl  tom_make_InterfaceHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl.make(t0, t1); }private static  tom.gom.adt.gom.types.HookDecl  tom_make_ImportHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make(t0, t1); }private static boolean tom_is_fun_sym_Module( tom.gom.adt.gom.types.Module  t) {  return  t instanceof tom.gom.adt.gom.types.module.Module  ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_Module_MDecl( tom.gom.adt.gom.types.Module  t) {  return  t.getMDecl()  ;}private static  tom.gom.adt.gom.types.SortList  tom_get_slot_Module_Sorts( tom.gom.adt.gom.types.Module  t) {  return  t.getSorts()  ;}private static boolean tom_is_fun_sym_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl  t) {  return  t instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl  ;}private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_ModuleDecl_ModuleName( tom.gom.adt.gom.types.ModuleDecl  t) {  return  t.getModuleName()  ;}private static  String  tom_get_slot_ModuleDecl_Pkg( tom.gom.adt.gom.types.ModuleDecl  t) {  return  t.getPkg()  ;}private static boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator || t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_empty_list_concOperator() { return  tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ; }private static  tom.gom.adt.gom.types.OperatorDeclList  tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl  e,  tom.gom.adt.gom.types.OperatorDeclList  l) { return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(e,l) ; }private static  tom.gom.adt.gom.types.OperatorDecl  tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getHeadconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getTailconcOperator()  ;}private static boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.isEmptyconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList  l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {    if(tom_is_empty_concOperator_OperatorDeclList(l1)) {     return l2;    } else if(tom_is_empty_concOperator_OperatorDeclList(l2)) {     return l1;    } else if(tom_is_empty_concOperator_OperatorDeclList(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1))) {     return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),tom_append_list_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end) {    if(tom_terms_equal_OperatorDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_empty_list_concOperator();    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(begin),( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concHookDecl( tom.gom.adt.gom.types.HookDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl || t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_empty_list_concHookDecl() { return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ; }private static  tom.gom.adt.gom.types.HookDeclList  tom_cons_list_concHookDecl( tom.gom.adt.gom.types.HookDecl  e,  tom.gom.adt.gom.types.HookDeclList  l) { return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_get_head_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getHeadconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_tail_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getTailconcHookDecl()  ;}private static boolean tom_is_empty_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.isEmptyconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList  l1,  tom.gom.adt.gom.types.HookDeclList  l2) {    if(tom_is_empty_concHookDecl_HookDeclList(l1)) {     return l2;    } else if(tom_is_empty_concHookDecl_HookDeclList(l2)) {     return l1;    } else if(tom_is_empty_concHookDecl_HookDeclList(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1))) {     return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),tom_append_list_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.HookDeclList  tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end) {    if(tom_terms_equal_HookDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.HookDeclList )tom_empty_list_concHookDecl();    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(begin),( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList  t) {  return  t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot || t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot  ;}private static  tom.gom.adt.gom.types.SlotList  tom_empty_list_concSlot() { return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }private static  tom.gom.adt.gom.types.SlotList  tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot  e,  tom.gom.adt.gom.types.SlotList  l) { return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.gom.adt.gom.types.Slot  tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList  l1,  tom.gom.adt.gom.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.gom.adt.gom.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList  t) {  return  t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort || t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort  ;}private static  tom.gom.adt.gom.types.SortList  tom_empty_list_concSort() { return  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ; }private static  tom.gom.adt.gom.types.SortList  tom_cons_list_concSort( tom.gom.adt.gom.types.Sort  e,  tom.gom.adt.gom.types.SortList  l) { return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(e,l) ; }private static  tom.gom.adt.gom.types.Sort  tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getHeadconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getTailconcSort()  ;}private static boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.isEmptyconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList  l1,  tom.gom.adt.gom.types.SortList  l2) {    if(tom_is_empty_concSort_SortList(l1)) {     return l2;    } else if(tom_is_empty_concSort_SortList(l2)) {     return l1;    } else if(tom_is_empty_concSort_SortList(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1))) {     return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),tom_append_list_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end) {    if(tom_terms_equal_SortList(begin,end)) {      return ( tom.gom.adt.gom.types.SortList )tom_empty_list_concSort();    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(begin),( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(begin),end));    }   }  private static  tom.gom.adt.gom.types.ModuleList  tom_empty_list_concModule() { return  tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() ; }private static  tom.gom.adt.gom.types.ModuleList  tom_cons_list_concModule( tom.gom.adt.gom.types.Module  e,  tom.gom.adt.gom.types.ModuleList  l) { return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make(e,l) ; }private static  tom.gom.adt.gom.types.Module  tom_get_head_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) {  return  l.getHeadconcModule()  ;}private static  tom.gom.adt.gom.types.ModuleList  tom_get_tail_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) {  return  l.getTailconcModule()  ;}private static boolean tom_is_empty_concModule_ModuleList( tom.gom.adt.gom.types.ModuleList  l) {  return  l.isEmptyconcModule()  ;}private static  tom.gom.adt.gom.types.ModuleList  tom_append_list_concModule( tom.gom.adt.gom.types.ModuleList  l1,  tom.gom.adt.gom.types.ModuleList  l2) {    if(tom_is_empty_concModule_ModuleList(l1)) {     return l2;    } else if(tom_is_empty_concModule_ModuleList(l2)) {     return l1;    } else if(tom_is_empty_concModule_ModuleList(( tom.gom.adt.gom.types.ModuleList )tom_get_tail_concModule_ModuleList(l1))) {     return ( tom.gom.adt.gom.types.ModuleList )tom_cons_list_concModule(( tom.gom.adt.gom.types.Module )tom_get_head_concModule_ModuleList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ModuleList )tom_cons_list_concModule(( tom.gom.adt.gom.types.Module )tom_get_head_concModule_ModuleList(l1),tom_append_list_concModule(( tom.gom.adt.gom.types.ModuleList )tom_get_tail_concModule_ModuleList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ModuleList  tom_get_slice_concModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end) {    if(tom_terms_equal_ModuleList(begin,end)) {      return ( tom.gom.adt.gom.types.ModuleList )tom_empty_list_concModule();    } else {      return ( tom.gom.adt.gom.types.ModuleList )tom_cons_list_concModule(( tom.gom.adt.gom.types.Module )tom_get_head_concModule_ModuleList(begin),( tom.gom.adt.gom.types.ModuleList )tom_get_slice_concModule(( tom.gom.adt.gom.types.ModuleList )tom_get_tail_concModule_ModuleList(begin),end));    }   }   





  // indicates if the expand method must include normalization phase
  // specific to termgraphs
  private static String packagePath;

  private static SortDecl stringSortDecl,intSortDecl;
  private boolean forTermgraph;

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  public GomReferenceExpander(String packagePath,boolean forTermgraph) {
    this.forTermgraph = forTermgraph;
    this.packagePath = packagePath;
    stringSortDecl = environment().builtinSort("String");
    intSortDecl = environment().builtinSort("int");
    //we mark them as used builtins
    environment().markUsedBuiltin("String");
    environment().markUsedBuiltin("int");
  }

  public Pair expand(ModuleList list, HookDeclList hooks) {
    ModuleList expandedList = tom_empty_list_concModule();
    ArrayList hookList = new ArrayList();
    expandedList = (ModuleList) tom_make_TopDown(tom_make_ExpandSort(hookList)).fire(list);
    //add a global expand method in every ModuleDecl contained in the SortList
    tom_make_TopDown(tom_make_ExpandModule(packagePath,forTermgraph,hookList))
.fire(expandedList);
    Iterator it = hookList.iterator();
    while(it.hasNext()) {
      HookDeclList hList = (HookDeclList) it.next();
      hooks = tom_append_list_concHookDecl(hList,tom_append_list_concHookDecl(hooks,tom_empty_list_concHookDecl()));
    }
    return tom_make_ModHookPair(expandedList,hooks);
  }

   private static class ExpandModule  extends  tom.gom.adt.gom.GomBasicStrategy   { private  String  packagePath;  private  boolean  forTermgraph;  private  java.util.ArrayList  hookList;  public ExpandModule(  String  packagePath ,   boolean  forTermgraph ,   java.util.ArrayList  hookList ) { super(tom_make_Identity() ); this.packagePath=packagePath; this.forTermgraph=forTermgraph; this.hookList=hookList; } public  String  getpackagePath() { return packagePath;} public  boolean  getforTermgraph() { return forTermgraph;} public  java.util.ArrayList  gethookList() { return hookList;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.gom.adt.gom.types.Module  visit_Module(  tom.gom.adt.gom.types.Module  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.gom.adt.gom.types.Module ) { { tom.gom.adt.gom.types.Module  tomMatch1Position1=(( tom.gom.adt.gom.types.Module )tom__arg); if ( ( tom_is_fun_sym_Module(tomMatch1Position1) ||  false  ) ) { { tom.gom.adt.gom.types.ModuleDecl  tomMatch1Position1NameNumberMDecl=tom_get_slot_Module_MDecl(tomMatch1Position1); if ( ( tom_is_fun_sym_ModuleDecl(tomMatch1Position1NameNumberMDecl) ||  false  ) ) { { tom.gom.adt.gom.types.GomModuleName  tom_modName=tom_get_slot_ModuleDecl_ModuleName(tomMatch1Position1NameNumberMDecl); { tom.gom.adt.gom.types.ModuleDecl  tom_mdecl=tomMatch1Position1NameNumberMDecl; { tom.gom.adt.gom.types.SortList  tom_sorts=tom_get_slot_Module_Sorts(tomMatch1Position1); if ( true ) {






        hookList.add(expHooksModule(tom_modName,tom_sorts,tom_mdecl,packagePath,forTermgraph));
       } } } } } } } } } return super.visit_Module(tom__arg) ;  } }private static  tom.library.sl.Strategy  tom_make_ExpandModule( String  t0,  boolean  t1,  java.util.ArrayList  t2) { return new ExpandModule(t0,t1,t2); } private static class ExpandSort  extends  tom.gom.adt.gom.GomBasicStrategy   { private  java.util.ArrayList  hookList;  public ExpandSort(  java.util.ArrayList  hookList ) { super(tom_make_Identity() ); this.hookList=hookList; } public  java.util.ArrayList  gethookList() { return hookList;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.gom.adt.gom.types.Sort  visit_Sort(  tom.gom.adt.gom.types.Sort  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.gom.adt.gom.types.Sort ) { { tom.gom.adt.gom.types.Sort  tomMatch2Position1=(( tom.gom.adt.gom.types.Sort )tom__arg); { tom.gom.adt.gom.types.Sort  tom_x=tomMatch2Position1; if ( true ) {





 return expandSort(tom_x,hookList);  } } } } return super.visit_Sort(tom__arg) ;  } }private static  tom.library.sl.Strategy  tom_make_ExpandSort( java.util.ArrayList  t0) { return new ExpandSort(t0); }



  private static Sort expandSort(Sort sort, ArrayList hookList) {
    OperatorDeclList l1 = sort.getOperators();
    OperatorDeclList l2 = getRefOperators(sort.getDecl(),hookList);
    return sort.setOperators(tom_append_list_concOperator(l1,tom_append_list_concOperator(l2,tom_empty_list_concOperator())));
  }

  /*
     We add 4 new operators for every sort
     lab<Sort>,ref<Sort>,pos<Sort>,exp<Sort>
     and the corresponding hooks
   */
  private static OperatorDeclList getRefOperators(
      SortDecl sort,
      ArrayList hookList) {
    OperatorDecl labOp = tom_make_OperatorDecl("lab"+sort.getName(),sort,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("label",stringSortDecl),tom_cons_list_concSlot(tom_make_Slot("term",sort),tom_empty_list_concSlot()))));

    OperatorDecl refOp = tom_make_OperatorDecl("ref"+sort.getName(),sort,tom_make_Slots(tom_cons_list_concSlot(tom_make_Slot("label",stringSortDecl),tom_empty_list_concSlot())));

    String posOpName = "pos"+sort.getName();
    OperatorDecl posOp = tom_make_OperatorDecl(posOpName,sort,tom_make_Variadic(intSortDecl));
    hookList.add(posHooks(posOp,sort));

    return tom_cons_list_concOperator(labOp,tom_cons_list_concOperator(refOp,tom_cons_list_concOperator(posOp,tom_empty_list_concOperator())));
  }

  private static HookDeclList posHooks(OperatorDecl opDecl, SortDecl sort) {
    
    String moduleName = sort.getModuleDecl().getModuleName().getName();
    String sortName = sort.getName();

    String codeImport ="\n    import "/* Generated by TOM (version 2.5alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName.toLowerCase()+".types.*;\n    import tom.library.sl.*;\n    "


;

    String codeBlock ="\n     \n    // These two following methods could be factorized in an abstract class implementing Reference \n   \n    public Position getDestPosition(Position source) {\n      int[] relative = toArray();\n      int[] current = source.toArray();\n      int prefix = source.depth()-relative[0];\n      int absoluteLength = prefix+relative.length-1;\n      int[] absolute = new int[absoluteLength];\n      for(int i=0 ; i<prefix ; i++) {\n        absolute[i]=current[i];\n      }\n      for(int i=prefix ; i<absoluteLength ; i++){\n        absolute[i]=relative[i-prefix+1];\n      }\n      return new Position(absolute);\n    }\n\n   public static Conspos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" getReference(Position source, Position dest) {\n      int[] sourceOmega = source.toArray();\n      int[] destOmega = dest.toArray();\n      int min_length =Math.min(sourceOmega.length,destOmega.length);\n      int commonPrefixLength=0;\n      while(commonPrefixLength<min_length && sourceOmega[commonPrefixLength]==destOmega[commonPrefixLength]){\n        commonPrefixLength++;\n      }\n      int[] relative = new int[destOmega.length-commonPrefixLength+1];\n      relative[0]=sourceOmega.length-commonPrefixLength;\n      for(int j=1;j<relative.length;j++){\n        relative[j] = destOmega[commonPrefixLength+j-1];\n      }\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" ref = `pos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"();\n      for(int i=0;i<relative.length;i++){\n        ref = `pos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(ref*,relative[i]);\n      }\n      return (Conspos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+") ref; \n    }\n    \n   "






































;
   return 
      tom_cons_list_concHookDecl(tom_make_ImportHookDecl(tom_make_CutOperator(opDecl),tom_make_Code(codeImport)),tom_cons_list_concHookDecl(tom_make_InterfaceHookDecl(tom_make_CutOperator(opDecl),tom_make_Code("tom.library.sl.Reference")),tom_cons_list_concHookDecl(tom_make_BlockHookDecl(tom_make_CutOperator(opDecl),tom_make_Code(codeBlock)),tom_empty_list_concHookDecl())))



;
  }

  private static HookDeclList expHooksModule(GomModuleName gomModuleName,
                                             SortList sorts,
                                             ModuleDecl mDecl,
                                             String packagePath,
                                             boolean forTermgraph) {
    String moduleName = gomModuleName.getName();

    String codeImport ="\n    import "/* Generated by TOM (version 2.5alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName.toLowerCase()+".types.*;\n    import "/* Generated by TOM (version 2.5alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName.toLowerCase()+".*;\n    import tom.library.sl.*;\n    import java.util.*;\n   "




;

    String codeBlockCommon ="\n    %include{java/util/HashMap.tom}\n    %include{java/util/ArrayList.tom}\n    %include{sl.tom}\n\n    %typeterm Info{\n      implement {Info}\n    }\n\n\n    public static class Info{\n      public String label;\n      public Position pos;\n      public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType term;\n    }\n    "














;

    String codeStrategies = "";
    String CollectLabels= "Fail()",Collect = "Fail()";
    String Min= "Identity()",Switch= "Identity()",ClearMarked= "Identity()",Label2Pos = "Identity()";

     if(sorts instanceof  tom.gom.adt.gom.types.SortList ) { { tom.gom.adt.gom.types.SortList  tomMatch3Position1=(( tom.gom.adt.gom.types.SortList )sorts); if ( ( tom_is_fun_sym_concSort(tomMatch3Position1) ||  false  ) ) { {int tomMatch3Position1Index1=0; { tom.gom.adt.gom.types.SortList  tomMatch3Position1List1=tomMatch3Position1; { tom.gom.adt.gom.types.SortList  tomMatch3Position1Begin1=tomMatch3Position1List1; { tom.gom.adt.gom.types.SortList  tomMatch3Position1End1=tomMatch3Position1List1; { while (!(tom_is_empty_concSort_SortList(tomMatch3Position1End1))) {tomMatch3Position1List1=tomMatch3Position1End1; { { tom.gom.adt.gom.types.SortList  tomMatch3Position1Save2=tomMatch3Position1List1; { { tom.gom.adt.gom.types.Sort  tomMatch3Position1Position2=tom_get_head_concSort_SortList(tomMatch3Position1List1);tomMatch3Position1Index1=tomMatch3Position1Index1 + 1;tomMatch3Position1List1=tom_get_tail_concSort_SortList(tomMatch3Position1List1); if ( ( tom_is_fun_sym_Sort(tomMatch3Position1Position2) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tomMatch3Position1Position2NameNumberDecl=tom_get_slot_Sort_Decl(tomMatch3Position1Position2); if ( ( tom_is_fun_sym_SortDecl(tomMatch3Position1Position2NameNumberDecl) ||  false  ) ) { { String  tom_sortName=tom_get_slot_SortDecl_Name(tomMatch3Position1Position2NameNumberDecl); if ( true ) {

        codeImport +="\n          import "/* Generated by TOM (version 2.5alpha): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName.toLowerCase()+".types."/* Generated by TOM (version 2.5alpha): Do not edit this file */+tom_sortName.toLowerCase()+".*;\n        "

;
        codeStrategies += getStrategies(tom_sortName,moduleName);
        Min = "Sequence(Min"+tom_sortName+"(info),"+Min+")";
        Switch = "Sequence(Switch"+tom_sortName+"(info),"+Switch+")";
        ClearMarked = "Sequence(ClearMarked"+tom_sortName+"(marked),"+ClearMarked+")";
        Label2Pos = "Sequence(Label2Pos"+tom_sortName+"(map),"+Label2Pos+")";
        CollectLabels = "ChoiceV(CollectLabels"+tom_sortName+"(map),"+CollectLabels+")";
        Collect = "ChoiceV(Collect"+tom_sortName+"(marked,info),"+Collect+")";
       } } } } } }tomMatch3Position1List1=tomMatch3Position1Save2; } }tomMatch3Position1End1=tom_get_tail_concSort_SortList(tomMatch3Position1End1); } }tomMatch3Position1List1=tomMatch3Position1Begin1; } } } } } } } }


    String codeBlockTermWithPointers ="\n\n      public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType expand("/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType t){\n        HashMap map = new HashMap();\n        Strategy label2pos = `Sequence(Repeat(OnceTopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+CollectLabels+")),TopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+Label2Pos+"));\n        return ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType) `label2pos.fire(t);\n      }\n    "






;



    String codeBlockTermGraph ="\n\n      public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType expand("/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType t){\n        Info info = new Info();\n        ArrayList marked = new ArrayList();\n        HashMap map = new HashMap();\n        Strategy normalization = `RepeatId(Sequence(Repeat(Sequence(OnceTopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+Collect+"),BottomUp("/* Generated by TOM (version 2.5alpha): Do not edit this file */+Min+"),TopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+Switch+"))),"/* Generated by TOM (version 2.5alpha): Do not edit this file */+ClearMarked+"));\n        Strategy label2pos = `Sequence(Repeat(OnceTopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+CollectLabels+")),TopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+Label2Pos+"));\n        return ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType) `Sequence(normalization,label2pos).fire(t);\n      }\n\n      public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType label2pos("/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType t){\n        HashMap map = new HashMap();\n        Strategy label2pos = `Sequence(Repeat(OnceTopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+CollectLabels+")),TopDown("/* Generated by TOM (version 2.5alpha): Do not edit this file */+Label2Pos+"));\n        return ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+moduleName+"AbstractType) label2pos.fire(t);\n      }\n\n    "
















;

    String codeBlock = codeBlockCommon + codeStrategies + (forTermgraph?codeBlockTermGraph:codeBlockTermWithPointers);

    return tom_cons_list_concHookDecl(tom_make_ImportHookDecl(tom_make_CutModule(mDecl),tom_make_Code(codeImport)),tom_cons_list_concHookDecl(tom_make_BlockHookDecl(tom_make_CutModule(mDecl),tom_make_Code(codeBlock)),tom_empty_list_concHookDecl()))

;
  }

  private static String getStrategies(String sortName, String moduleName){

    String strategies ="\n\n      %strategy Collect"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(marked:ArrayList,info:Info) extends Fail(){\n        visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n          lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label,term=term]-> {\n            if(! marked.contains(`label)){\n              info.label=`label;\n              info.term=`lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(label,term);\n              info.pos=getEnvironment().getPosition();\n              marked.add(`label);\n              return `lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(label,term);\n            }\n          }\n        }\n      }\n\n    %strategy Min"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(info:Info) extends Identity(){\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        ref"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label] -> {\n          if(`label.equals(info.label)){\n            if(getEnvironment().getPosition().compare(info.pos)==-1){\n              info.pos=getEnvironment().getPosition();\n            }\n          }\n        }\n      }\n    }\n\n    %strategy Switch"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(info:Info) extends Identity(){\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        ref"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label] -> {\n          if (info.pos.equals(getEnvironment().getPosition())){\n            return ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+") info.term;\n          }\n        }\n        lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label,term=term] -> {\n          if(`label.equals(info.label)){\n            if (! info.pos.equals(getEnvironment().getPosition())){\n              return `ref"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(label);\n            }\n          }\n        }\n      }\n    }\n\n\n    %strategy ClearMarked"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(list:ArrayList) extends Identity(){\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        _ -> {\n          list.clear();\n        }\n      }\n    }\n\n    %strategy CollectLabels"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(map:HashMap) extends Fail(){\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        lab"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label,term=term]-> {\n          map.put(`label,getEnvironment().getPosition());\n          return `term;\n        }\n      }\n    }\n\n    %strategy Label2Pos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"(map:HashMap) extends Identity(){\n      visit "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"{\n        ref"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+"[label=label] -> {\n          if (! map.containsKey(`label)) {\n            // ref with an unexistent label\n            throw new RuntimeException(\"Term-graph with a null reference at\"+getEnvironment().getPosition());\n          }\n          else {\n            Position target = (Position) map.get(`label);\n            "/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+" ref = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+") (Conspos"/* Generated by TOM (version 2.5alpha): Do not edit this file */+sortName+".getReference(getEnvironment().getPosition(),target));\n            return ref;\n          }\n        }\n      }\n    }\n    "













































































;

    return strategies;
  }
}
