/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.expander;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.parser.AST2Gom;
import tom.gom.parser.ANTLRMapperGomLexer;
import tom.gom.parser.ANTLRMapperGomParser;
import tom.antlrmapper.ATermAST;
import tom.platform.PlatformLogRecord;
import antlr.RecognitionException;
import antlr.TokenStreamException;

public class Expander {
  private GomStreamManager streamManager;
  private String packagePrefix;

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_char(char t) { return  true ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_int(int t) { return  true ;} private static  tom.gom.adt.gom.types.GomModuleList  tom_empty_list_concGomModule() { return  tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule.make() ; }   private static   tom.gom.adt.gom.types.GomModuleList  tom_append_list_concGomModule( tom.gom.adt.gom.types.GomModuleList l1,  tom.gom.adt.gom.types.GomModuleList  l2) {     if( l1.isEmptyconcGomModule() ) {       return l2;     } else if( l2.isEmptyconcGomModule() ) {       return l1;     } else if(  l1.getTailconcGomModule() .isEmptyconcGomModule() ) {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( l1.getHeadconcGomModule() ,tom_append_list_concGomModule( l1.getTailconcGomModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.GomModuleList  tom_get_slice_concGomModule( tom.gom.adt.gom.types.GomModuleList  begin,  tom.gom.adt.gom.types.GomModuleList  end, tom.gom.adt.gom.types.GomModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make( begin.getHeadconcGomModule() ,( tom.gom.adt.gom.types.GomModuleList )tom_get_slice_concGomModule( begin.getTailconcGomModule() ,end,tail)) ;     }   }   private static  tom.gom.adt.gom.types.SectionList  tom_empty_list_concSection() { return  tom.gom.adt.gom.types.sectionlist.EmptyconcSection.make() ; }   private static   tom.gom.adt.gom.types.SectionList  tom_append_list_concSection( tom.gom.adt.gom.types.SectionList l1,  tom.gom.adt.gom.types.SectionList  l2) {     if( l1.isEmptyconcSection() ) {       return l2;     } else if( l2.isEmptyconcSection() ) {       return l1;     } else if(  l1.getTailconcSection() .isEmptyconcSection() ) {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( l1.getHeadconcSection() ,tom_append_list_concSection( l1.getTailconcSection() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SectionList  tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList  begin,  tom.gom.adt.gom.types.SectionList  end, tom.gom.adt.gom.types.SectionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make( begin.getHeadconcSection() ,( tom.gom.adt.gom.types.SectionList )tom_get_slice_concSection( begin.getTailconcSection() ,end,tail)) ;     }   }   private static  tom.gom.adt.gom.types.ImportList  tom_empty_list_concImportedModule() { return  tom.gom.adt.gom.types.importlist.EmptyconcImportedModule.make() ; }   private static   tom.gom.adt.gom.types.ImportList  tom_append_list_concImportedModule( tom.gom.adt.gom.types.ImportList l1,  tom.gom.adt.gom.types.ImportList  l2) {     if( l1.isEmptyconcImportedModule() ) {       return l2;     } else if( l2.isEmptyconcImportedModule() ) {       return l1;     } else if(  l1.getTailconcImportedModule() .isEmptyconcImportedModule() ) {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( l1.getHeadconcImportedModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( l1.getHeadconcImportedModule() ,tom_append_list_concImportedModule( l1.getTailconcImportedModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ImportList  tom_get_slice_concImportedModule( tom.gom.adt.gom.types.ImportList  begin,  tom.gom.adt.gom.types.ImportList  end, tom.gom.adt.gom.types.ImportList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make( begin.getHeadconcImportedModule() ,( tom.gom.adt.gom.types.ImportList )tom_get_slice_concImportedModule( begin.getTailconcImportedModule() ,end,tail)) ;     }   }    

  public Expander(GomStreamManager streamManager) {
    this.streamManager = streamManager;
    packagePrefix= streamManager.getPackagePath().replace(File.separatorChar,'.');
  }

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  /*
   * Compute the transitive closure of imported modules
   */
  public GomModuleList expand(GomModule module) {
    GomModuleList result =  tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make(module,tom_empty_list_concGomModule()) ;
    Set alreadyParsedModule = new HashSet();
    alreadyParsedModule.add(module.getModuleName());
    Set moduleToAnalyse = generateModuleToAnalyseSet(module, alreadyParsedModule);
    getLogger().log(Level.FINER, "GomExpander:moduleToAnalyse {0}",
        new Object[]{moduleToAnalyse});

    while (!moduleToAnalyse.isEmpty()) {
      HashSet newModuleToAnalyse = new HashSet();
      Iterator it = moduleToAnalyse.iterator();

      while(it.hasNext()) {
        GomModuleName moduleNameName = (GomModuleName)it.next();
        String moduleName = moduleNameName.getName();

        if(!environment().isBuiltin(moduleName)) {
          if(!alreadyParsedModule.contains(moduleNameName)) {
            GomModule importedModule = parse(moduleName);
            if(importedModule == null) {
              return null;
            }
            result = tom_append_list_concGomModule(result, tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make(importedModule,tom_empty_list_concGomModule()) );
            alreadyParsedModule.add(moduleNameName);
            newModuleToAnalyse.addAll(generateModuleToAnalyseSet(importedModule,alreadyParsedModule));
	  }
        } else {
          environment().markUsedBuiltin(moduleName); 
        }
      }
      moduleToAnalyse = newModuleToAnalyse;
    }
    return result;
  }

  /*
   * Compute immediate imported modules where already parsed modules are removed
   */
  private Set generateModuleToAnalyseSet(GomModule module, Set alreadyParsedModule) {
    HashSet moduleToAnalyse = new HashSet();
    ImportList importedModules = getImportList(module);
    while(!importedModules.isEmptyconcImportedModule()) {
      GomModuleName name = importedModules.getHeadconcImportedModule().getModuleName();
      if(!alreadyParsedModule.contains(name)) {
        moduleToAnalyse.add(name);
      }
      importedModules = importedModules.getTailconcImportedModule();
    }
    //System.out.println("*** generateModuleToAnalyseSet = " + moduleToAnalyse);
    return moduleToAnalyse;
  }

  private GomModule parse(String moduleName) {
    getLogger().log(Level.FINE, "Seeking for file {0}",
        new Object[]{moduleName});
    GomModule result = null;
    File importedModuleFile = findModuleFile(moduleName);
    if(importedModuleFile == null) {
      getLogger().log(Level.SEVERE,
          GomMessage.moduleNotFound.getMessage(),
          new Object[]{moduleName});
      return null;
    }
    InputStream inputStream = null;
    try {
      inputStream = new FileInputStream(importedModuleFile);
    } catch (FileNotFoundException e) {
      getLogger().log(Level.SEVERE,
          GomMessage.fileNotFound.getMessage(),
          new Object[]{moduleName+".gom"});
      return null;
    }
    ANTLRMapperGomLexer lexer = new ANTLRMapperGomLexer(inputStream);
    ANTLRMapperGomParser parser = new ANTLRMapperGomParser(lexer,"GomIncludeParser");
    try {
      parser.setASTNodeClass("tom.antlrmapper.ATermAST");
      parser.module();
      ATermAST t = (ATermAST)parser.getAST();
      result = AST2Gom.getGomModule(t,streamManager);

    } catch (RecognitionException re) {
      getLogger().log(new PlatformLogRecord(Level.SEVERE,
            GomMessage.detailedParseException,
            re.getMessage(),moduleName+".gom", lexer.getLine()));
      return null;
    } catch(TokenStreamException tse) {
      getLogger().log(new PlatformLogRecord(Level.SEVERE,
            GomMessage.detailedParseException,
            tse.getMessage(),moduleName+".gom", lexer.getLine()));
      return null;
    }
    return result;
  }

  /**
   * find a module locally or thanks to the stream manager import list
   */
  private File findModuleFile(String moduleName) {
    String extendedModuleName = moduleName+".gom";
    File f = new File(extendedModuleName);
    if(f.exists()) {
      return f;
    }
    return streamManager.findModuleFile(extendedModuleName);
  }

  /** the class logger instance*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }

  public ImportList getImportList(GomModule module) {
    ImportList imports = tom_empty_list_concImportedModule();
    if ( module instanceof tom.gom.adt.gom.types.GomModule ) {{  tom.gom.adt.gom.types.GomModule  tomMatch445NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.GomModule )module);if ( (tomMatch445NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.gommodule.GomModule) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch445NameNumber_freshVar_0= tomMatch445NameNumberfreshSubject_1.getModuleName() ;{  tom.gom.adt.gom.types.SectionList  tomMatch445NameNumber_freshVar_1= tomMatch445NameNumberfreshSubject_1.getSectionList() ;if ( ((tomMatch445NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection) || (tomMatch445NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection)) ) {{  tom.gom.adt.gom.types.SectionList  tomMatch445NameNumber_freshVar_2=tomMatch445NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SectionList  tomMatch445NameNumber_begin_4=tomMatch445NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SectionList  tomMatch445NameNumber_end_5=tomMatch445NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SectionList  tomMatch445NameNumber_freshVar_3=tomMatch445NameNumber_end_5;if (!( tomMatch445NameNumber_freshVar_3.isEmptyconcSection() )) {if ( ( tomMatch445NameNumber_freshVar_3.getHeadconcSection()  instanceof tom.gom.adt.gom.types.section.Imports) ) {{  tom.gom.adt.gom.types.ImportList  tomMatch445NameNumber_freshVar_8=  tomMatch445NameNumber_freshVar_3.getHeadconcSection() .getImportList() ;{  tom.gom.adt.gom.types.SectionList  tomMatch445NameNumber_freshVar_6= tomMatch445NameNumber_freshVar_3.getTailconcSection() ;if ( true ) {

        imports = tom_append_list_concImportedModule(tomMatch445NameNumber_freshVar_8,tom_append_list_concImportedModule(imports,tom_empty_list_concImportedModule()));
      }}}}}}if ( tomMatch445NameNumber_end_5.isEmptyconcSection() ) {tomMatch445NameNumber_end_5=tomMatch445NameNumber_begin_4;} else {tomMatch445NameNumber_end_5= tomMatch445NameNumber_end_5.getTailconcSection() ;}}} while(!( tomMatch445NameNumber_end_5.equals(tomMatch445NameNumber_begin_4) ));}}}}}}}}}

    return imports;
  }
}
