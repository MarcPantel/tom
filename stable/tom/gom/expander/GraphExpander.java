/* Generated by TOM (version 2.6): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (c) 2006-2008, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Emilie Balland  e-mail: Emilie.Balland@loria.fr
 *
 **/

package tom.gom.expander;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.library.sl.*;
import tom.gom.backend.CodeGen;
import tom.gom.GomMessage;
import tom.gom.SymbolTable;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.adt.objects.types.ClassName;
import tom.gom.tools.error.GomRuntimeException;

public class GraphExpander {

  /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */   static class MapEntry {   private Object key;   private Object val;   public Object getKey() { return key; }   public Object getVal() { return val; }   public MapEntry(Object key, Object val) {     this.key = key;     this.val = val;   } }  /* Generated by TOM (version 2.6): Do not edit this file */  /* Generated by TOM (version 2.6): Do not edit this file */   private static java.util.HashMap hashMapAppend(MapEntry e, java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   res.put(e.getKey(), e.getVal());   return res; }  private static MapEntry hashMapGetHead(java.util.HashMap m) {   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   return new MapEntry(e.getKey(), e.getValue()); }  private static java.util.HashMap hashMapGetTail(java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   res.remove(e.getKey());   return res; }   /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */   private static java.util.ArrayList concArrayListAppend(Object o, java.util.ArrayList l) {   java.util.ArrayList res = (java.util.ArrayList)l.clone();   res.add(o);   return res; } /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */     public static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Sequence) )) {       if(( ((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )) == null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Sequence(l1,l2) );     }   }   public static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(( null ))) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin):new tom.library.sl.Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)) );   }    /* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file */public static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) )) ) );}   /* Generated by TOM (version 2.6): Do not edit this file */   public static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyConcOperator() ) {       return l2;     } else if( l2.isEmptyConcOperator() ) {       return l1;     } else if(  l1.getTailConcOperator() .isEmptyConcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,tom_append_list_ConcOperator( l1.getTailConcOperator() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcOperator()  ||  (end== tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( begin.getHeadConcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_ConcOperator( begin.getTailConcOperator() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.HookDeclList  tom_append_list_ConcHookDecl( tom.gom.adt.gom.types.HookDeclList l1,  tom.gom.adt.gom.types.HookDeclList  l2) {     if( l1.isEmptyConcHookDecl() ) {       return l2;     } else if( l2.isEmptyConcHookDecl() ) {       return l1;     } else if(  l1.getTailConcHookDecl() .isEmptyConcHookDecl() ) {       return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( l1.getHeadConcHookDecl() ,l2) ;     } else {       return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( l1.getHeadConcHookDecl() ,tom_append_list_ConcHookDecl( l1.getTailConcHookDecl() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.HookDeclList  tom_get_slice_ConcHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end, tom.gom.adt.gom.types.HookDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcHookDecl()  ||  (end== tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( begin.getHeadConcHookDecl() ,( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_ConcHookDecl( begin.getTailConcHookDecl() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.SlotList  tom_append_list_ConcSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyConcSlot() ) {       return l2;     } else if( l2.isEmptyConcSlot() ) {       return l1;     } else if(  l1.getTailConcSlot() .isEmptyConcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,tom_append_list_ConcSlot( l1.getTailConcSlot() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.SlotList  tom_get_slice_ConcSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSlot()  ||  (end== tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( begin.getHeadConcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_ConcSlot( begin.getTailConcSlot() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.SortList  tom_append_list_ConcSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyConcSort() ) {       return l2;     } else if( l2.isEmptyConcSort() ) {       return l1;     } else if(  l1.getTailConcSort() .isEmptyConcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,tom_append_list_ConcSort( l1.getTailConcSort() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.SortList  tom_get_slice_ConcSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSort()  ||  (end== tom.gom.adt.gom.types.sortlist.EmptyConcSort.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( begin.getHeadConcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_ConcSort( begin.getTailConcSort() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.ModuleList  tom_append_list_ConcModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyConcModule() ) {       return l2;     } else if( l2.isEmptyConcModule() ) {       return l1;     } else if(  l1.getTailConcModule() .isEmptyConcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,tom_append_list_ConcModule( l1.getTailConcModule() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_ConcModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcModule()  ||  (end== tom.gom.adt.gom.types.modulelist.EmptyConcModule.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( begin.getHeadConcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_ConcModule( begin.getTailConcModule() ,end,tail)) ;   }    /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */    public static   tom.gom.adt.symboltable.types.FieldDescriptionList  tom_append_list_concFieldDescription( tom.gom.adt.symboltable.types.FieldDescriptionList l1,  tom.gom.adt.symboltable.types.FieldDescriptionList  l2) {     if( l1.isEmptyconcFieldDescription() ) {       return l2;     } else if( l2.isEmptyconcFieldDescription() ) {       return l1;     } else if(  l1.getTailconcFieldDescription() .isEmptyconcFieldDescription() ) {       return  tom.gom.adt.symboltable.types.fielddescriptionlist.ConsconcFieldDescription.make( l1.getHeadconcFieldDescription() ,l2) ;     } else {       return  tom.gom.adt.symboltable.types.fielddescriptionlist.ConsconcFieldDescription.make( l1.getHeadconcFieldDescription() ,tom_append_list_concFieldDescription( l1.getTailconcFieldDescription() ,l2)) ;     }   }   public static   tom.gom.adt.symboltable.types.FieldDescriptionList  tom_get_slice_concFieldDescription( tom.gom.adt.symboltable.types.FieldDescriptionList  begin,  tom.gom.adt.symboltable.types.FieldDescriptionList  end, tom.gom.adt.symboltable.types.FieldDescriptionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcFieldDescription()  ||  (end== tom.gom.adt.symboltable.types.fielddescriptionlist.EmptyconcFieldDescription.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.symboltable.types.fielddescriptionlist.ConsconcFieldDescription.make( begin.getHeadconcFieldDescription() ,( tom.gom.adt.symboltable.types.FieldDescriptionList )tom_get_slice_concFieldDescription( begin.getTailconcFieldDescription() ,end,tail)) ;   }    






  private static GomStreamManager streamManager;
  private static SortDecl stringSortDecl;
  private static SortDecl intSortDecl;
  // indicates if the expand method must include normalization phase
  // specific to termgraphs
  private boolean forTermgraph;
  private static GomEnvironment envt = GomEnvironment.getInstance();
  private static SymbolTable st = envt.getSymbolTable();
  
  public GraphExpander(GomStreamManager streamManager,boolean forTermgraph) {
    this.forTermgraph = forTermgraph;
    this.streamManager = streamManager;
    stringSortDecl = envt.builtinSort("String");
    intSortDecl = envt.builtinSort("int");
    //we mark them as used builtins:
    //String is used for labelling
    envt.markUsedBuiltin("String");
    //int is used for defining paths
    envt.markUsedBuiltin("int");
  }

  private static String fullClassName(ClassName clsName) {
    {{ Object tomMatch500NameNumber_freshVar_0=clsName;if ( (tomMatch500NameNumber_freshVar_0 instanceof tom.gom.adt.objects.types.ClassName) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch500NameNumber_freshSubject_1=(( tom.gom.adt.objects.types.ClassName )tomMatch500NameNumber_freshVar_0);{  tom.gom.adt.objects.types.ClassName  tomMatch500NameNumber_freshVar_3=tomMatch500NameNumber_freshSubject_1;if ( (tomMatch500NameNumber_freshVar_3 instanceof tom.gom.adt.objects.types.classname.ClassName) ) {{  String  tomMatch500NameNumber_freshVar_1= tomMatch500NameNumber_freshVar_3.getPkg() ;{  String  tomMatch500NameNumber_freshVar_2= tomMatch500NameNumber_freshVar_3.getName() ;{  String  tom_pkgPrefix=tomMatch500NameNumber_freshVar_1;{  String  tom_name=tomMatch500NameNumber_freshVar_2;

        if(tom_pkgPrefix.length()==0) {
          return tom_name;
        } else {
          return tom_pkgPrefix+"."+tom_name;
        }
      }}}}}}}}}}

    throw new GomRuntimeException(
        "GraphExpander:fullClassName got a strange ClassName "+clsName);
  }

  public Pair expand(ModuleList list, HookDeclList hooks) {
    ModuleList expandedList =  tom.gom.adt.gom.types.modulelist.EmptyConcModule.make() ;
    ArrayList hookList = new ArrayList();
    try {
      expandedList = (ModuleList) tom_make_TopDown(tom_make_ExpandSort(hookList)).visit(list);
    } catch(tom.library.sl.VisitFailure e) {
      throw new tom.gom.tools.error.GomRuntimeException("Unexpected strategy failure!");
    }
    //add a global expand method in every ModuleDecl contained in the SortList
    try {
      tom_make_TopDown(tom_make_ExpandModule(streamManager,forTermgraph,hookList))
.visit(expandedList);
    } catch (tom.library.sl.VisitFailure e) {
      throw new tom.gom.tools.error.GomRuntimeException("Unexpected strategy failure!");
    }
    Iterator it = hookList.iterator();
    while(it.hasNext()) {
      HookDeclList hList = (HookDeclList) it.next();
      hooks = tom_append_list_ConcHookDecl(hList,tom_append_list_ConcHookDecl(hooks, tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ));
    }
    return  tom.gom.adt.gom.types.pair.ModHookPair.make(expandedList, hooks) ;
  }

  public static class ExpandModule extends tom.library.sl.BasicStrategy {private  GomStreamManager  streamManager;private  boolean  forTermgraph;private  java.util.ArrayList  hookList;public ExpandModule( GomStreamManager  streamManager,  boolean  forTermgraph,  java.util.ArrayList  hookList) {super(( new tom.library.sl.Identity() ));this.streamManager=streamManager;this.forTermgraph=forTermgraph;this.hookList=hookList;}public  GomStreamManager  getstreamManager() {return streamManager;}public  boolean  getforTermgraph() {return forTermgraph;}public  java.util.ArrayList  gethookList() {return hookList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.gom.types.Module  visit_Module( tom.gom.adt.gom.types.Module  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{ Object tomMatch501NameNumber_freshVar_0=tom__arg;if ( (tomMatch501NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.Module) ) {{  tom.gom.adt.gom.types.Module  tomMatch501NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.Module )tomMatch501NameNumber_freshVar_0);{  tom.gom.adt.gom.types.Module  tomMatch501NameNumber_freshVar_3=tomMatch501NameNumber_freshSubject_1;if ( (tomMatch501NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch501NameNumber_freshVar_1= tomMatch501NameNumber_freshVar_3.getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch501NameNumber_freshVar_2= tomMatch501NameNumber_freshVar_3.getSorts() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch501NameNumber_freshVar_5=tomMatch501NameNumber_freshVar_1;if ( (tomMatch501NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch501NameNumber_freshVar_4= tomMatch501NameNumber_freshVar_5.getModuleName() ;{  tom.gom.adt.gom.types.GomModuleName  tom_moduleName=tomMatch501NameNumber_freshVar_4;






        hookList.add(expHooksModule(tom_moduleName,tomMatch501NameNumber_freshVar_2,tomMatch501NameNumber_freshVar_1,streamManager.getPackagePath(tom_moduleName.getName()),forTermgraph));
      }}}}}}}}}}}}return _visit_Module(tom__arg,introspector); }public  tom.gom.adt.gom.types.Module  _visit_Module( tom.gom.adt.gom.types.Module  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!( environment== null  )) {return (( tom.gom.adt.gom.types.Module )any.visit(environment,introspector));} else {return (( tom.gom.adt.gom.types.Module )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.gom.adt.gom.types.Module) ) {return visit_Module((( tom.gom.adt.gom.types.Module )v),introspector);}if (!( environment== null  )) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}public static  tom.library.sl.Strategy  tom_make_ExpandModule( GomStreamManager  t0,  boolean  t1,  java.util.ArrayList  t2) { return new ExpandModule(t0,t1,t2);}public static class ExpandSort extends tom.library.sl.BasicStrategy {private  java.util.ArrayList  hookList;public ExpandSort( java.util.ArrayList  hookList) {super(( new tom.library.sl.Identity() ));this.hookList=hookList;}public  java.util.ArrayList  gethookList() {return hookList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.gom.types.Sort  visit_Sort( tom.gom.adt.gom.types.Sort  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{ Object tomMatch502NameNumber_freshVar_0=tom__arg;if ( (tomMatch502NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.Sort) ) {{  tom.gom.adt.gom.types.Sort  tomMatch502NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.Sort )tomMatch502NameNumber_freshVar_0);{  tom.gom.adt.gom.types.Sort  tomMatch502NameNumber_freshVar_3=tomMatch502NameNumber_freshSubject_1;if ( (tomMatch502NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch502NameNumber_freshVar_1= tomMatch502NameNumber_freshVar_3.getDecl() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch502NameNumber_freshVar_2= tomMatch502NameNumber_freshVar_3.getOperatorDecls() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch502NameNumber_freshVar_5=tomMatch502NameNumber_freshVar_1;if ( (tomMatch502NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch502NameNumber_freshVar_4= tomMatch502NameNumber_freshVar_5.getName() ;{  String  tom_sortname=tomMatch502NameNumber_freshVar_4;{  tom.gom.adt.gom.types.SortDecl  tom_sortdecl=tomMatch502NameNumber_freshVar_1;






         
        //We add 4 new operators Lab<Sort>,Ref<Sort>,Path<Sort>,Var<Sort>
        //the last one is only used to implement the termgraph rewriting step
        // for now, we need also to fill the symbol table 
        OperatorDecl labOp =  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make("Lab"+tom_sortname, tom_sortdecl,  tom.gom.adt.gom.types.typedproduction.Slots.make( tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("label"+tom_sortname, stringSortDecl) , tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("term"+tom_sortname, tom_sortdecl) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ) ) ;
        st.addConstructor("Lab"+tom_sortname,tom_sortname, tom.gom.adt.symboltable.types.fielddescriptionlist.ConsconcFieldDescription.make( tom.gom.adt.symboltable.types.fielddescription.FieldDescription.make("label"+tom_sortname, "String",  tom.gom.adt.symboltable.types.status.SNone.make() ) , tom.gom.adt.symboltable.types.fielddescriptionlist.ConsconcFieldDescription.make( tom.gom.adt.symboltable.types.fielddescription.FieldDescription.make("term"+tom_sortname, tom_sortname,  tom.gom.adt.symboltable.types.status.SNone.make() ) , tom.gom.adt.symboltable.types.fielddescriptionlist.EmptyconcFieldDescription.make() ) ) ); 
        OperatorDecl refOp =  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make("Ref"+tom_sortname, tom_sortdecl,  tom.gom.adt.gom.types.typedproduction.Slots.make( tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("label"+tom_sortname, stringSortDecl) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ) ;
        st.addConstructor("Ref"+tom_sortname,tom_sortname, tom.gom.adt.symboltable.types.fielddescriptionlist.ConsconcFieldDescription.make( tom.gom.adt.symboltable.types.fielddescription.FieldDescription.make("label"+tom_sortname, "String",  tom.gom.adt.symboltable.types.status.SNone.make() ) , tom.gom.adt.symboltable.types.fielddescriptionlist.EmptyconcFieldDescription.make() ) ); 
        OperatorDecl pathOp =  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make("Path"+tom_sortname, tom_sortdecl,  tom.gom.adt.gom.types.typedproduction.Variadic.make(intSortDecl) ) ;
        st.addVariadicConstructor("Path"+tom_sortname,"int",tom_sortname);
        OperatorDecl varOp =  tom.gom.adt.gom.types.operatordecl.OperatorDecl.make("Var"+tom_sortname, tom_sortdecl,  tom.gom.adt.gom.types.typedproduction.Slots.make( tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( tom.gom.adt.gom.types.slot.Slot.make("label"+tom_sortname, stringSortDecl) , tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) ) ) ;
        st.addConstructor("Var"+tom_sortname,tom_sortname, tom.gom.adt.symboltable.types.fielddescriptionlist.ConsconcFieldDescription.make( tom.gom.adt.symboltable.types.fielddescription.FieldDescription.make("label"+tom_sortname, "String",  tom.gom.adt.symboltable.types.status.SNone.make() ) , tom.gom.adt.symboltable.types.fielddescriptionlist.EmptyconcFieldDescription.make() ) ); 
        hookList.add(pathHooks(pathOp,tom_sortdecl));
        return tomMatch502NameNumber_freshSubject_1.setOperatorDecls(tom_append_list_ConcOperator(tomMatch502NameNumber_freshVar_2, tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make(labOp, tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make(refOp, tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make(pathOp, tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make(varOp, tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator.make() ) ) ) ) ));

      }}}}}}}}}}}}}return _visit_Sort(tom__arg,introspector); }public  tom.gom.adt.gom.types.Sort  _visit_Sort( tom.gom.adt.gom.types.Sort  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!( environment== null  )) {return (( tom.gom.adt.gom.types.Sort )any.visit(environment,introspector));} else {return (( tom.gom.adt.gom.types.Sort )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.gom.adt.gom.types.Sort) ) {return visit_Sort((( tom.gom.adt.gom.types.Sort )v),introspector);}if (!( environment== null  )) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}public static  tom.library.sl.Strategy  tom_make_ExpandSort( java.util.ArrayList  t0) { return new ExpandSort(t0);}



  private static HookDeclList pathHooks(OperatorDecl opDecl, SortDecl sort){

    String moduleName = sort.getModuleDecl().getModuleName().getName();
    String sortName = sort.getName();

    String prefixPkg = streamManager.getPackagePath(moduleName);
    String codeImport ="\n      import "/* Generated by TOM (version 2.6): Do not edit this file */+((prefixPkg=="")?"":prefixPkg+".")+moduleName.toLowerCase()+".types.*;\n    import tom.library.sl.*;\n    "


;

    String codeBlock ="\n\n    public Path add(Path p){\n        Position pp = Position.make(this);\n        return make(pp.add(p));\n    }\n\n    public Path inverse(){\n      Position pp = Position.make(this);\n      return make(pp.inverse());\n    }\n\n    public Path sub(Path p){\n      Position pp = Position.make(this);\n      return make(pp.sub(p));\n    }\n\n    public int getHead(){\n      return getHeadPath"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+"();\n    }\n\n    public Path getTail(){\n      return (Path) getTailPath"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+"();\n    }\n\n    public Path getCanonicalPath(){\n      %match(this) {\n        Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+"(X*,x,y,Y*) -> {\n          if (`x==-`y) {\n            return ((Path)`Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+"(X*,Y*)).getCanonicalPath();\n          }\n        }\n      }\n      return this;\n    }\n\n    public Path conc(int i){\n      Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+" current = this;\n      return (Path) `Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+"(i,current*);\n    }\n\n    public static Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+" make(Path path){\n      "/* Generated by TOM (version 2.6): Do not edit this file */+CodeGen.generateCode( tom.gom.adt.code.types.code.FullSortClass.make(sort) )+" ref = `Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+"();\n      Path pp = path.getCanonicalPath();\n      int size = pp.length();\n      for(int i=0;i<size;i++){\n        ref = `Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+"(ref*,pp.getHead());\n        pp = pp.getTail();\n      }\n      return (Path"/* Generated by TOM (version 2.6): Do not edit this file */+sortName+") ref;\n    }\n\n    public int compare(Path p){\n      Position p1 = Position.make(this);\n      Position p2 = Position.make(p);\n      return p1.compare(p2);\n    }\n    "
























































;

    return 
       tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make( tom.gom.adt.gom.types.decl.CutOperator.make(opDecl) ,  tom.gom.adt.code.types.code.Code.make(codeImport) ) , tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl.make( tom.gom.adt.gom.types.decl.CutOperator.make(opDecl) ,  tom.gom.adt.code.types.code.Code.make("tom.library.sl.Path") ) , tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make( tom.gom.adt.gom.types.decl.CutOperator.make(opDecl) ,  tom.gom.adt.code.types.code.Code.make(codeBlock) ) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) ) ) 



;
  }

  private static HookDeclList expHooksModule(GomModuleName gomModuleName,
      SortList sorts,
      ModuleDecl mDecl,
      String packagePath,
      boolean forTermgraph) {
    String moduleName = gomModuleName.getName();
    ClassName abstractType =  tom.gom.adt.objects.types.classname.ClassName.make(packagePath+"."+moduleName.toLowerCase(), moduleName+"AbstractType") ;

    String prefix = (("".equals(packagePath))?"":packagePath+".")+moduleName.toLowerCase();
    String codeImport ="\n    import "/* Generated by TOM (version 2.6): Do not edit this file */+prefix+".types.*;\n    import "/* Generated by TOM (version 2.6): Do not edit this file */+prefix+".*;\n    import tom.library.sl.*;\n    import java.util.ArrayList;\n    import java.util.HashMap;\n    "





;

    String codeStrategies = getStrategies(sorts);

    {{ Object tomMatch503NameNumber_freshVar_0=sorts;if ( (tomMatch503NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch503NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.SortList )tomMatch503NameNumber_freshVar_0);{  tom.gom.adt.gom.types.SortList  tomMatch503NameNumber_freshVar_1=tomMatch503NameNumber_freshSubject_1;if ( ((tomMatch503NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch503NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch503NameNumber_begin_3=tomMatch503NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SortList  tomMatch503NameNumber_end_4=tomMatch503NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.SortList  tomMatch503NameNumber_freshVar_2=tomMatch503NameNumber_end_4;if (!( tomMatch503NameNumber_freshVar_2.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch503NameNumber_freshVar_8= tomMatch503NameNumber_freshVar_2.getHeadConcSort() ;if ( (tomMatch503NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch503NameNumber_freshVar_7= tomMatch503NameNumber_freshVar_8.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch503NameNumber_freshVar_10=tomMatch503NameNumber_freshVar_7;if ( (tomMatch503NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch503NameNumber_freshVar_9= tomMatch503NameNumber_freshVar_10.getName() ;{  String  tom_sortName=tomMatch503NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortList  tomMatch503NameNumber_freshVar_5= tomMatch503NameNumber_freshVar_2.getTailConcSort() ;

        codeImport += "\n          import "/* Generated by TOM (version 2.6): Do not edit this file */+packagePath+"."/* Generated by TOM (version 2.6): Do not edit this file */+moduleName.toLowerCase()+".types."/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName.toLowerCase()+".Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+";\n        "

;
      }}}}}}}}}}if ( tomMatch503NameNumber_end_4.isEmptyConcSort() ) {tomMatch503NameNumber_end_4=tomMatch503NameNumber_begin_3;} else {tomMatch503NameNumber_end_4= tomMatch503NameNumber_end_4.getTailConcSort() ;}}} while(!( (tomMatch503NameNumber_end_4==tomMatch503NameNumber_begin_3) ));}}}}}}}}


    String codeBlockCommon ="\n    %include{java/util/HashMap.tom}\n    %include{java/util/ArrayList.tom}\n    %include{sl.tom}\n\n    static int freshlabel =0; //to unexpand termgraphs\n    \n    %typeterm tom_Info {\n      implement { Info }\n      is_sort(t) { ($t instanceof Info) }\n    }\n\n\n    public static class Info {\n      public String label;\n      public Path path;\n      public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" term;\n    }\n\n    public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" unexpand() {\n       HashMap map = getMapFromPositionToLabel();\n       try {\n         return ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+")`Sequence(TopDown(CollectRef(map)),BottomUp(AddLabel(map))).visit(this);\n       } catch (tom.library.sl.VisitFailure e) {\n         throw new RuntimeException(\"Unexpected strategy failure!\");\n       }\n    }\n\n    protected HashMap getMapFromPositionToLabel(){\n      HashMap map = new HashMap();\n      try {\n      `TopDown(CollectPositionsOfLabels(map)).visit(this);\n      return map;\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    "





































;


    String codeBlockTermWithPointers ="\n\n      public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" expand(){\n        HashMap map = new HashMap();\n        Strategy label2path = `Sequence(RepeatId(OnceTopDownId(CollectAndRemoveLabels(map))),TopDown(Label2Path(map)));\n        try {\n          return ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+") `label2path.visit(this);\n        } catch (tom.library.sl.VisitFailure e) {\n          throw new RuntimeException(\"Unexpected strategy failure!\");\n        }}\n        "









;

    String codeBlockTermGraph ="\n\n   public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" expand() {\n       HashMap map = new HashMap();\n       try {\n         return (("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+")`InnermostIdSeq(NormalizeLabel(map)).visit(this.unexpand())).label2path();\n       } catch (tom.library.sl.VisitFailure e) {\n         throw new RuntimeException(\"Unexpected strategy failure!\");\n       }\n     }\n\n    public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" normalizeWithLabels() {\n      HashMap map = new HashMap();\n      try {\n        return (("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+")`InnermostIdSeq(NormalizeLabel(map)).visit(this));\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" label2path() {\n      HashMap map = new HashMap();\n      Strategy label2path = `Sequence(RepeatId(OnceTopDownId(CollectAndRemoveLabels(map))),TopDown(Label2Path(map)));\n      try {\n        return ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+") label2path.visit(this);\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n    \n    public HashMap<String,Position> getMapFromLabelToPositionAndRemoveLabels(){\n      HashMap<String,Position> map = new HashMap<String,Position>();\n      try {\n      `TopDown(CollectAndRemoveLabels(map)).visit(this);\n      return map;\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    public HashMap<String,Position> getMapFromLabelToPosition(){\n      HashMap<String,Position> map = new HashMap<String,Position>();\n      try {\n      `TopDown(CollectLabels(map)).visit(this);\n      return map;\n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" normalize() {\n      try {\n         return ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+")`InnermostIdSeq(Normalize()).visit(this); \n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n    public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" applyGlobalRedirection(Position p1,Position p2) {\n      try {\n         return ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+") globalRedirection(p1,p2).visit(this); \n      } catch (tom.library.sl.VisitFailure e) {\n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n  \n    public static Strategy globalRedirection(Position p1,Position p2) {\n        return `TopDown(GlobalRedirection(p1,p2)); \n    }\n\n    public "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" swap(Position p1, Position p2) {\n      try {\n        "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" updatedSubject =  ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" ) `TopDown(Sequence(UpdatePos(p1,p2))).visit(this);\n        "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" subterm_p1 = ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+") p1.getSubterm().visit(updatedSubject);\n        "/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+" subterm_p2 = ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+") p2.getSubterm().visit(updatedSubject);\n        return ("/* Generated by TOM (version 2.6): Do not edit this file */+fullClassName(abstractType)+") `Sequence(p2.getReplace(subterm_p1),p1.getReplace(subterm_p2)).visit(updatedSubject);\n      } catch (VisitFailure e) { \n        throw new RuntimeException(\"Unexpected strategy failure!\");\n      }\n    }\n\n   %strategy Normalize() extends Identity() {\n"

















































































;

  {{ Object tomMatch504NameNumber_freshVar_0=sorts;if ( (tomMatch504NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch504NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.SortList )tomMatch504NameNumber_freshVar_0);{  tom.gom.adt.gom.types.SortList  tomMatch504NameNumber_freshVar_1=tomMatch504NameNumber_freshSubject_1;if ( ((tomMatch504NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch504NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch504NameNumber_begin_3=tomMatch504NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SortList  tomMatch504NameNumber_end_4=tomMatch504NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.SortList  tomMatch504NameNumber_freshVar_2=tomMatch504NameNumber_end_4;if (!( tomMatch504NameNumber_freshVar_2.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch504NameNumber_freshVar_8= tomMatch504NameNumber_freshVar_2.getHeadConcSort() ;if ( (tomMatch504NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch504NameNumber_freshVar_7= tomMatch504NameNumber_freshVar_8.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch504NameNumber_freshVar_10=tomMatch504NameNumber_freshVar_7;if ( (tomMatch504NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch504NameNumber_freshVar_9= tomMatch504NameNumber_freshVar_10.getName() ;{  String  tom_sortname=tomMatch504NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortList  tomMatch504NameNumber_freshVar_5= tomMatch504NameNumber_freshVar_2.getTailConcSort() ;

 codeBlockTermGraph += "\n        visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+" {\n          p@Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+"(_*) -> {\n            Position current = getEnvironment().getPosition(); \n            Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n            if(current.compare(dest)== -1) {\n                getEnvironment().followPath((Path)`p);\n                Position realDest = getEnvironment().getPosition(); \n            if(!realDest.equals(dest)) {\n                //the subterm pointed was a pos (in case of previous switch) \n                //and we must only update the relative position\n                getEnvironment().followPath(current.sub(getEnvironment().getPosition()));\n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(realDest.sub(current));\n            }  else {\n                //switch the rel position and the pointed subterm\n\n                // 1. construct the new relative position\n                "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+" relref = Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(current.sub(dest));\n\n                // 2. update the part to change \n                `TopDown(UpdatePos(dest,current)).visit(getEnvironment());\n\n                // 3. save the subterm updated \n                "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+" subterm = ("/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+") getEnvironment().getSubject(); \n\n                // 4. replace at dest the subterm by the new relative pos\n                getEnvironment().setSubject(relref);\n                getEnvironment().followPath(current.sub(getEnvironment().getPosition()));\n                return subterm; \n            }\n          }\n        }\n      }\n"
































;
      }}}}}}}}}}if ( tomMatch504NameNumber_end_4.isEmptyConcSort() ) {tomMatch504NameNumber_end_4=tomMatch504NameNumber_begin_3;} else {tomMatch504NameNumber_end_4= tomMatch504NameNumber_end_4.getTailConcSort() ;}}} while(!( (tomMatch504NameNumber_end_4==tomMatch504NameNumber_begin_3) ));}}}}}}}}


  codeBlockTermGraph += "\n    }\n\n   %strategy UpdatePos(source:Position,target:Position) extends Identity() {\n  "



;


   {{ Object tomMatch505NameNumber_freshVar_0=sorts;if ( (tomMatch505NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch505NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.SortList )tomMatch505NameNumber_freshVar_0);{  tom.gom.adt.gom.types.SortList  tomMatch505NameNumber_freshVar_1=tomMatch505NameNumber_freshSubject_1;if ( ((tomMatch505NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch505NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch505NameNumber_begin_3=tomMatch505NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SortList  tomMatch505NameNumber_end_4=tomMatch505NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.SortList  tomMatch505NameNumber_freshVar_2=tomMatch505NameNumber_end_4;if (!( tomMatch505NameNumber_freshVar_2.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch505NameNumber_freshVar_8= tomMatch505NameNumber_freshVar_2.getHeadConcSort() ;if ( (tomMatch505NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch505NameNumber_freshVar_7= tomMatch505NameNumber_freshVar_8.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch505NameNumber_freshVar_10=tomMatch505NameNumber_freshVar_7;if ( (tomMatch505NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch505NameNumber_freshVar_9= tomMatch505NameNumber_freshVar_10.getName() ;{  String  tom_sortname=tomMatch505NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortList  tomMatch505NameNumber_freshVar_5= tomMatch505NameNumber_freshVar_2.getTailConcSort() ;

        codeBlockTermGraph += "\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+" {\n            p@Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+"(_*) -> {\n              Position current = getEnvironment().getPosition(); \n              Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n              //relative pos from the source to the external\n              if(current.hasPrefix(source) && !dest.hasPrefix(target) && !dest.hasPrefix(source)){\n                current = current.changePrefix(source,target);\n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the external to the source\n              if (dest.hasPrefix(source) && !current.hasPrefix(target) && !current.hasPrefix(source)){\n                dest = dest.changePrefix(source,target); \n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the target to the external\n              if(current.hasPrefix(target) && !dest.hasPrefix(source) && !dest.hasPrefix(target)){\n                current = current.changePrefix(target,source);\n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the external to the target\n              if (dest.hasPrefix(target) && !current.hasPrefix(source) && !current.hasPrefix(target)){\n                dest = dest.changePrefix(target,source); \n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the source to the target\n              if(current.hasPrefix(source) && dest.hasPrefix(target)){\n                current = current.changePrefix(source,target);\n                dest = dest.changePrefix(target,source);\n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n\n              //relative pos from the target to the source\n              if(current.hasPrefix(target) && dest.hasPrefix(source)){\n                current = current.changePrefix(target,source);\n                dest = dest.changePrefix(source,target);\n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(dest.sub(current));\n              }\n   \n            }\n          }\n    "












































;
      }}}}}}}}}}if ( tomMatch505NameNumber_end_4.isEmptyConcSort() ) {tomMatch505NameNumber_end_4=tomMatch505NameNumber_begin_3;} else {tomMatch505NameNumber_end_4= tomMatch505NameNumber_end_4.getTailConcSort() ;}}} while(!( (tomMatch505NameNumber_end_4==tomMatch505NameNumber_begin_3) ));}}}}}}}}


   codeBlockTermGraph += "\n   }\n\n   %strategy GlobalRedirection(source:Position,target:Position) extends Identity() {\n  "



;

   {{ Object tomMatch506NameNumber_freshVar_0=sorts;if ( (tomMatch506NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch506NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.SortList )tomMatch506NameNumber_freshVar_0);{  tom.gom.adt.gom.types.SortList  tomMatch506NameNumber_freshVar_1=tomMatch506NameNumber_freshSubject_1;if ( ((tomMatch506NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch506NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch506NameNumber_begin_3=tomMatch506NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SortList  tomMatch506NameNumber_end_4=tomMatch506NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.SortList  tomMatch506NameNumber_freshVar_2=tomMatch506NameNumber_end_4;if (!( tomMatch506NameNumber_freshVar_2.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch506NameNumber_freshVar_8= tomMatch506NameNumber_freshVar_2.getHeadConcSort() ;if ( (tomMatch506NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch506NameNumber_freshVar_7= tomMatch506NameNumber_freshVar_8.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch506NameNumber_freshVar_10=tomMatch506NameNumber_freshVar_7;if ( (tomMatch506NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch506NameNumber_freshVar_9= tomMatch506NameNumber_freshVar_10.getName() ;{  String  tom_sortname=tomMatch506NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortList  tomMatch506NameNumber_freshVar_5= tomMatch506NameNumber_freshVar_2.getTailConcSort() ;

        codeBlockTermGraph += "\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+" {\n            p@Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+"(_*) -> {\n              Position current = getEnvironment().getPosition(); \n              Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n              if(dest.equals(source)) {\n                return Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortname+".make(target.sub(current));\n              }\n            }\n          }\n    "









;
      }}}}}}}}}}if ( tomMatch506NameNumber_end_4.isEmptyConcSort() ) {tomMatch506NameNumber_end_4=tomMatch506NameNumber_begin_3;} else {tomMatch506NameNumber_end_4= tomMatch506NameNumber_end_4.getTailConcSort() ;}}} while(!( (tomMatch506NameNumber_end_4==tomMatch506NameNumber_begin_3) ));}}}}}}}}


   codeBlockTermGraph += "\n   }\n   "

;

    String codeBlock = codeBlockCommon + codeStrategies + (forTermgraph?codeBlockTermGraph:codeBlockTermWithPointers);

    return  tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make( tom.gom.adt.gom.types.decl.CutModule.make(mDecl) ,  tom.gom.adt.code.types.code.Code.make(codeImport) ) , tom.gom.adt.gom.types.hookdecllist.ConsConcHookDecl.make( tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make( tom.gom.adt.gom.types.decl.CutModule.make(mDecl) ,  tom.gom.adt.code.types.code.Code.make(codeBlock) ) , tom.gom.adt.gom.types.hookdecllist.EmptyConcHookDecl.make() ) ) 

;
  }

  private static String getStrategies(SortList sorts) {
    StringBuilder strategiesCode = new StringBuilder();
    // for the CollectLabels strategy
    StringBuilder CollectLabelsCode = new StringBuilder();
    CollectLabelsCode.append("\n    /**\n     * Collect labels and their corresponding positions in a\n     * map. The keys are the labels.\n     * @param map the map to collect tuples <label,position>\n     */\n\n    %strategy CollectLabels(map:HashMap) extends Identity() {\n      "







);

    // for the CollectAndRemoveLabels strategy
    StringBuilder CollectAndRemoveLabelsCode = new StringBuilder();
    CollectAndRemoveLabelsCode.append("\n    /**\n     * Collect labels and their corresponding positions in a\n     * map. The keys are the labels. At the same time, replace the labelled\n     * term by the term itself.\n     * @param map the map to collect tuples <label,position>\n     */\n\n    %strategy CollectAndRemoveLabels(map:HashMap) extends Identity() {\n      "








);


    // for the CollectPositionsOfLabels strategy
    StringBuilder CollectPositionsOfLabelsCode = new StringBuilder();
    CollectPositionsOfLabelsCode.append("\n     /**\n     * Collect labels of sort and their corresponding positions in a\n     * map and at the same time replace the labelled term by the term itself.\n     * The keys are the positions.\n     * @param map the map to collect tuples <position,label>\n     */\n\n    %strategy CollectPositionsOfLabels(map:HashMap) extends Identity() {\n    "








);

    // for the Label2Path strategy
    StringBuilder Label2PathCode = new StringBuilder();
    Label2PathCode.append("\n    %strategy Label2Path(map:HashMap) extends Identity() {\n    "

);

    // for the CollectRef strategy
    StringBuilder CollectRefCode = new StringBuilder();
    CollectRefCode.append("\n    %strategy CollectRef(map:HashMap) extends Identity() {\n    "

);


    // for the AddLabel strategy
    StringBuilder AddLabelCode = new StringBuilder();
    AddLabelCode.append("\n    %strategy AddLabel(map:HashMap) extends Identity() {\n    "

);

    // for the NormalizeLabel strategy
    StringBuilder NormalizeLabelCode = new StringBuilder();
    NormalizeLabelCode.append("\n    %strategy NormalizeLabel(map:HashMap) extends Identity() {\n    "

);



    {{ Object tomMatch507NameNumber_freshVar_0=sorts;if ( (tomMatch507NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch507NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.SortList )tomMatch507NameNumber_freshVar_0);{  tom.gom.adt.gom.types.SortList  tomMatch507NameNumber_freshVar_1=tomMatch507NameNumber_freshSubject_1;if ( ((tomMatch507NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch507NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch507NameNumber_begin_3=tomMatch507NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SortList  tomMatch507NameNumber_end_4=tomMatch507NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.SortList  tomMatch507NameNumber_freshVar_2=tomMatch507NameNumber_end_4;if (!( tomMatch507NameNumber_freshVar_2.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch507NameNumber_freshVar_8= tomMatch507NameNumber_freshVar_2.getHeadConcSort() ;if ( (tomMatch507NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch507NameNumber_freshVar_7= tomMatch507NameNumber_freshVar_8.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch507NameNumber_freshVar_10=tomMatch507NameNumber_freshVar_7;if ( (tomMatch507NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch507NameNumber_freshVar_9= tomMatch507NameNumber_freshVar_10.getName() ;{  String  tom_sortName=tomMatch507NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortDecl  tom_sDecl=tomMatch507NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch507NameNumber_freshVar_5= tomMatch507NameNumber_freshVar_2.getTailConcSort() ;

  
        strategiesCode.append("\n\n    %typeterm tom_Info"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" {\n        implement { Info"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" }\n        is_sort(t) { ($t instanceof Info"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+") }\n    }\n\n    static class Info"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"{\n      public Position omegaRef;\n      public "/* Generated by TOM (version 2.6): Do not edit this file */+CodeGen.generateCode( tom.gom.adt.code.types.code.FullSortClass.make(tom_sDecl) )+" sharedTerm;\n    }\n\n    "











);

        // generate the code for the CollectLabels strategy
        CollectLabelsCode.append("\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"{\n        Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[label"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=label,term"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=term]-> {\n          map.put(`label,getEnvironment().getPosition());\n          return ("/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+") getEnvironment().getSubject();\n        }\n      }\n        "






);
        
        // generate the code for the CollectAndRemoveLabels strategy
        CollectAndRemoveLabelsCode.append("\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"{\n        Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[label"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=label,term"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=term]-> {\n          map.put(`label,getEnvironment().getPosition());\n          return `term;\n        }\n      }\n      "






);

        // generate the code for the CollectPositionsOfLabels strategy
        CollectPositionsOfLabelsCode.append("\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"{\n        Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[label"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=label,term"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=term]-> {\n          map.put(getEnvironment().getPosition().toString(),`label);\n          return ("/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+") getEnvironment().getSubject();\n        }\n      }\n      "






);

       // generate the code for the Label2Path strategy
        Label2PathCode.append("\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" {\n        Ref"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[label"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=label] -> {\n          if (map.containsKey(`label)) {\n            Position target = (Position) map.get(`label);\n            "/* Generated by TOM (version 2.6): Do not edit this file */+CodeGen.generateCode( tom.gom.adt.code.types.code.FullSortClass.make(tom_sDecl) )+" ref = ("/* Generated by TOM (version 2.6): Do not edit this file */+CodeGen.generateCode( tom.gom.adt.code.types.code.FullSortClass.make(tom_sDecl) )+") (Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+".make(target.sub(getEnvironment().getPosition())).getCanonicalPath());\n            return ref;\n          }\n        }\n      }\n      "









);

        // generate the code for the CollectRef strategy
        CollectRefCode.append("\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" {\n        p@Path"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(_*) -> {\n          //use String instead of Position because containskey method does\n          //not use the method equals to compare values\n          String target =\n            getEnvironment().getPosition().add((Path)`p).getCanonicalPath().toString();\n          if (map.containsKey(target)){\n            String label = (String) map.get(target);\n            return `Ref"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(label);\n          }\n          else{\n            freshlabel++;\n            String label = \"tom_label\"+freshlabel;\n            map.put(target,label);\n            return `Ref"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(label);\n          }\n        }\n      }\n   "


















);
   
        // generate the code for the AddLabel strategy
        AddLabelCode.append("\n    visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" {\n      t@!Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[] -> {\n        if (map.containsKey(getEnvironment().getPosition().toString())) {\n          String label = (String) map.get(getEnvironment().getPosition().toString());\n          return `Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(label,t);\n        }\n      }\n    }\n   "








);
        // generate the code for the NormalizeLabel strategy
        NormalizeLabelCode.append("\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" {\n        Ref"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[label"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=label] -> {\n          if (! map.containsKey(`label)){\n            Position old = getEnvironment().getPosition();\n            Position rootpos = new Position(new int[]{});\n            Info"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" info = new Info"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"();\n            info.omegaRef = old;\n            getEnvironment().followPath(rootpos.sub(getEnvironment().getPosition()));           \n            `OnceTopDown(CollectSubterm"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(label,info)).visit(getEnvironment());            \n            getEnvironment().followPath(old.sub(getEnvironment().getPosition()));\n            //test if it is not a ref to a cycle\n            if (info.sharedTerm!=null) {\n              map.put(`label,old);\n              return `Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(label,info.sharedTerm);\n            }\n          }\n        }\n        Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[label"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=label] -> {\n          map.put(`label,getEnvironment().getPosition());\n        }\n      }\n    "





















);

    // generate each strategy CollectSubterm<sortname>
    strategiesCode.append("\n    %strategy CollectSubterm"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(label:String,info:tom_Info"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+") extends Fail() {\n      visit "/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+" {\n        term@Lab"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"[label"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=label,term"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"=subterm] -> {\n          Position current = getEnvironment().getPosition();\n          if (label.equals(`label)) {\n            //test if it is not a cycle\n            if (!info.omegaRef.hasPrefix(current)) {\n              //return a ref\n              info.sharedTerm = `subterm;\n              return `Ref"/* Generated by TOM (version 2.6): Do not edit this file */+tom_sortName+"(label);\n            }\n            else {\n              //do not return a ref and stop to collect\n              return `term;  \n            }\n          }\n        }\n      }\n    }\n    "



















);
      }}}}}}}}}}}if ( tomMatch507NameNumber_end_4.isEmptyConcSort() ) {tomMatch507NameNumber_end_4=tomMatch507NameNumber_begin_3;} else {tomMatch507NameNumber_end_4= tomMatch507NameNumber_end_4.getTailConcSort() ;}}} while(!( (tomMatch507NameNumber_end_4==tomMatch507NameNumber_begin_3) ));}}}}}}}}



    CollectLabelsCode.append("\n  }\n  "

);
    CollectAndRemoveLabelsCode.append("\n  }\n  "

);
    CollectPositionsOfLabelsCode.append("\n  }\n  "

);
    Label2PathCode.append("\n  }\n  "

);
 
    CollectRefCode.append("\n  }\n  "

);
    AddLabelCode.append("\n  }\n  "

);
    NormalizeLabelCode.append("\n  }\n  "

);
    strategiesCode.append(CollectLabelsCode);
    strategiesCode.append(CollectAndRemoveLabelsCode);
    strategiesCode.append(CollectPositionsOfLabelsCode);
    strategiesCode.append(Label2PathCode);
    strategiesCode.append(CollectRefCode);
    strategiesCode.append(AddLabelCode);
    strategiesCode.append(NormalizeLabelCode);
    return strategiesCode.toString();
  }

}
