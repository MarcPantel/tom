/* Generated by TOM (version 2.5): Do not edit this file *//*
 *
 * GOM
 *
 * Copyright (C) 2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Emilie Balland e-mail: Emilie.Balland@loria.fr
 *
 **/

package tom.gom.expander.rule;

import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.tree.Tree;
import java.util.logging.Level;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Logger;
import tom.gom.adt.gom.types.*;
import tom.gom.adt.rule.RuleTree;
import tom.gom.adt.rule.RuleAdaptor;
import tom.gom.adt.rule.types.*;
import tom.gom.adt.rule.types.term.*;
import tom.gom.tools.error.GomRuntimeException;
import tom.library.sl.*;

public class GraphRuleExpander {

  /* Generated by TOM (version 2.5): Do not edit this file *//* Generated by TOM (version 2.5): Do not edit this file *//* Generated by TOM (version 2.5): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Code(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Code(Object t) { return  t instanceof tom.gom.adt.code.types.Code ;}private static boolean tom_equal_term_HookDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDeclList ;}private static boolean tom_equal_term_Decl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Decl(Object t) { return  t instanceof tom.gom.adt.gom.types.Decl ;}private static boolean tom_equal_term_HookDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDecl ;}private static  tom.gom.adt.code.types.Code  tom_make_Code( String  t0) { return  tom.gom.adt.code.types.code.Code.make(t0) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_make_BlockHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make(t0, t1) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_make_ImportHookDecl( tom.gom.adt.gom.types.Decl  t0,  tom.gom.adt.code.types.Code  t1) { return  tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make(t0, t1) ; }private static boolean tom_is_fun_sym_concHookDecl( tom.gom.adt.gom.types.HookDeclList  t) { return  t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl || t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_empty_list_concHookDecl() { return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ; }private static  tom.gom.adt.gom.types.HookDeclList  tom_cons_list_concHookDecl( tom.gom.adt.gom.types.HookDecl  e,  tom.gom.adt.gom.types.HookDeclList  l) { return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_get_head_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) { return  l.getHeadconcHookDecl() ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_tail_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) { return  l.getTailconcHookDecl() ;}private static boolean tom_is_empty_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) { return  l.isEmptyconcHookDecl() ;}   private static   tom.gom.adt.gom.types.HookDeclList  tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList l1,  tom.gom.adt.gom.types.HookDeclList  l2) {     if(tom_is_empty_concHookDecl_HookDeclList(l1)) {       return l2;     } else if(tom_is_empty_concHookDecl_HookDeclList(l2)) {       return l1;     } else if(tom_is_empty_concHookDecl_HookDeclList(tom_get_tail_concHookDecl_HookDeclList(l1))) {       return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(tom_get_head_concHookDecl_HookDeclList(l1),l2);     } else {       return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(tom_get_head_concHookDecl_HookDeclList(l1),tom_append_list_concHookDecl(tom_get_tail_concHookDecl_HookDeclList(l1),l2));     }   }   private static   tom.gom.adt.gom.types.HookDeclList  tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end, tom.gom.adt.gom.types.HookDeclList  tail) {     if(tom_equal_term_HookDeclList(begin,end)) {       return tail;     } else {       return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(tom_get_head_concHookDecl_HookDeclList(begin),( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_concHookDecl(tom_get_tail_concHookDecl_HookDeclList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5): Do not edit this file */private static boolean tom_equal_term_Rule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Rule(Object t) { return  t instanceof tom.gom.adt.rule.types.Rule ;}private static boolean tom_equal_term_RuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_RuleList(Object t) { return  t instanceof tom.gom.adt.rule.types.RuleList ;}private static boolean tom_equal_term_TermList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TermList(Object t) { return  t instanceof tom.gom.adt.rule.types.TermList ;}private static boolean tom_equal_term_Condition(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Condition(Object t) { return  t instanceof tom.gom.adt.rule.types.Condition ;}private static boolean tom_equal_term_Term(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Term(Object t) { return  t instanceof tom.gom.adt.rule.types.Term ;}private static boolean tom_is_fun_sym_Rule( tom.gom.adt.rule.types.Rule  t) { return  t instanceof tom.gom.adt.rule.types.rule.Rule ;}private static  tom.gom.adt.rule.types.Term  tom_get_slot_Rule_lhs( tom.gom.adt.rule.types.Rule  t) { return  t.getlhs() ;}private static  tom.gom.adt.rule.types.Term  tom_get_slot_Rule_rhs( tom.gom.adt.rule.types.Rule  t) { return  t.getrhs() ;}private static boolean tom_is_fun_sym_ConditionalRule( tom.gom.adt.rule.types.Rule  t) { return  t instanceof tom.gom.adt.rule.types.rule.ConditionalRule ;}private static  tom.gom.adt.rule.types.Term  tom_get_slot_ConditionalRule_lhs( tom.gom.adt.rule.types.Rule  t) { return  t.getlhs() ;}private static  tom.gom.adt.rule.types.Term  tom_get_slot_ConditionalRule_rhs( tom.gom.adt.rule.types.Rule  t) { return  t.getrhs() ;}private static  tom.gom.adt.rule.types.Condition  tom_get_slot_ConditionalRule_cond( tom.gom.adt.rule.types.Rule  t) { return  t.getcond() ;}private static boolean tom_is_fun_sym_Appl( tom.gom.adt.rule.types.Term  t) { return  t instanceof tom.gom.adt.rule.types.term.Appl ;}private static  String  tom_get_slot_Appl_symbol( tom.gom.adt.rule.types.Term  t) { return  t.getsymbol() ;}private static  tom.gom.adt.rule.types.TermList  tom_get_slot_Appl_args( tom.gom.adt.rule.types.Term  t) { return  t.getargs() ;}private static boolean tom_is_fun_sym_Var( tom.gom.adt.rule.types.Term  t) { return  t instanceof tom.gom.adt.rule.types.term.Var ;}private static  String  tom_get_slot_Var_name( tom.gom.adt.rule.types.Term  t) { return  t.getname() ;}private static boolean tom_is_fun_sym_BuiltinInt( tom.gom.adt.rule.types.Term  t) { return  t instanceof tom.gom.adt.rule.types.term.BuiltinInt ;}private static  int  tom_get_slot_BuiltinInt_i( tom.gom.adt.rule.types.Term  t) { return  t.geti() ;}private static boolean tom_is_fun_sym_BuiltinString( tom.gom.adt.rule.types.Term  t) { return  t instanceof tom.gom.adt.rule.types.term.BuiltinString ;}private static  String  tom_get_slot_BuiltinString_s( tom.gom.adt.rule.types.Term  t) { return  t.gets() ;}private static boolean tom_is_fun_sym_LabTerm( tom.gom.adt.rule.types.Term  t) { return  t instanceof tom.gom.adt.rule.types.term.LabTerm ;}private static  tom.gom.adt.rule.types.Term  tom_make_LabTerm( String  t0,  tom.gom.adt.rule.types.Term  t1) { return  tom.gom.adt.rule.types.term.LabTerm.make(t0, t1) ; }private static  String  tom_get_slot_LabTerm_l( tom.gom.adt.rule.types.Term  t) { return  t.getl() ;}private static  tom.gom.adt.rule.types.Term  tom_get_slot_LabTerm_t( tom.gom.adt.rule.types.Term  t) { return  t.gett() ;}private static boolean tom_is_fun_sym_RefTerm( tom.gom.adt.rule.types.Term  t) { return  t instanceof tom.gom.adt.rule.types.term.RefTerm ;}private static  tom.gom.adt.rule.types.Term  tom_make_RefTerm( String  t0) { return  tom.gom.adt.rule.types.term.RefTerm.make(t0) ; }private static  String  tom_get_slot_RefTerm_l( tom.gom.adt.rule.types.Term  t) { return  t.getl() ;}private static boolean tom_is_fun_sym_RuleList( tom.gom.adt.rule.types.RuleList  t) { return  t instanceof tom.gom.adt.rule.types.rulelist.ConsRuleList || t instanceof tom.gom.adt.rule.types.rulelist.EmptyRuleList ;}private static  tom.gom.adt.rule.types.RuleList  tom_empty_list_RuleList() { return  tom.gom.adt.rule.types.rulelist.EmptyRuleList.make() ; }private static  tom.gom.adt.rule.types.RuleList  tom_cons_list_RuleList( tom.gom.adt.rule.types.Rule  e,  tom.gom.adt.rule.types.RuleList  l) { return  tom.gom.adt.rule.types.rulelist.ConsRuleList.make(e,l) ; }private static  tom.gom.adt.rule.types.Rule  tom_get_head_RuleList_RuleList( tom.gom.adt.rule.types.RuleList  l) { return  l.getHeadRuleList() ;}private static  tom.gom.adt.rule.types.RuleList  tom_get_tail_RuleList_RuleList( tom.gom.adt.rule.types.RuleList  l) { return  l.getTailRuleList() ;}private static boolean tom_is_empty_RuleList_RuleList( tom.gom.adt.rule.types.RuleList  l) { return  l.isEmptyRuleList() ;}   private static   tom.gom.adt.rule.types.RuleList  tom_append_list_RuleList( tom.gom.adt.rule.types.RuleList l1,  tom.gom.adt.rule.types.RuleList  l2) {     if(tom_is_empty_RuleList_RuleList(l1)) {       return l2;     } else if(tom_is_empty_RuleList_RuleList(l2)) {       return l1;     } else if(tom_is_empty_RuleList_RuleList(tom_get_tail_RuleList_RuleList(l1))) {       return ( tom.gom.adt.rule.types.RuleList )tom_cons_list_RuleList(tom_get_head_RuleList_RuleList(l1),l2);     } else {       return ( tom.gom.adt.rule.types.RuleList )tom_cons_list_RuleList(tom_get_head_RuleList_RuleList(l1),tom_append_list_RuleList(tom_get_tail_RuleList_RuleList(l1),l2));     }   }   private static   tom.gom.adt.rule.types.RuleList  tom_get_slice_RuleList( tom.gom.adt.rule.types.RuleList  begin,  tom.gom.adt.rule.types.RuleList  end, tom.gom.adt.rule.types.RuleList  tail) {     if(tom_equal_term_RuleList(begin,end)) {       return tail;     } else {       return ( tom.gom.adt.rule.types.RuleList )tom_cons_list_RuleList(tom_get_head_RuleList_RuleList(begin),( tom.gom.adt.rule.types.RuleList )tom_get_slice_RuleList(tom_get_tail_RuleList_RuleList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_TermList( tom.gom.adt.rule.types.TermList  t) { return  t instanceof tom.gom.adt.rule.types.termlist.ConsTermList || t instanceof tom.gom.adt.rule.types.termlist.EmptyTermList ;}private static  tom.gom.adt.rule.types.TermList  tom_empty_list_TermList() { return  tom.gom.adt.rule.types.termlist.EmptyTermList.make() ; }private static  tom.gom.adt.rule.types.TermList  tom_cons_list_TermList( tom.gom.adt.rule.types.Term  e,  tom.gom.adt.rule.types.TermList  l) { return  tom.gom.adt.rule.types.termlist.ConsTermList.make(e,l) ; }private static  tom.gom.adt.rule.types.Term  tom_get_head_TermList_TermList( tom.gom.adt.rule.types.TermList  l) { return  l.getHeadTermList() ;}private static  tom.gom.adt.rule.types.TermList  tom_get_tail_TermList_TermList( tom.gom.adt.rule.types.TermList  l) { return  l.getTailTermList() ;}private static boolean tom_is_empty_TermList_TermList( tom.gom.adt.rule.types.TermList  l) { return  l.isEmptyTermList() ;}   private static   tom.gom.adt.rule.types.TermList  tom_append_list_TermList( tom.gom.adt.rule.types.TermList l1,  tom.gom.adt.rule.types.TermList  l2) {     if(tom_is_empty_TermList_TermList(l1)) {       return l2;     } else if(tom_is_empty_TermList_TermList(l2)) {       return l1;     } else if(tom_is_empty_TermList_TermList(tom_get_tail_TermList_TermList(l1))) {       return ( tom.gom.adt.rule.types.TermList )tom_cons_list_TermList(tom_get_head_TermList_TermList(l1),l2);     } else {       return ( tom.gom.adt.rule.types.TermList )tom_cons_list_TermList(tom_get_head_TermList_TermList(l1),tom_append_list_TermList(tom_get_tail_TermList_TermList(l1),l2));     }   }   private static   tom.gom.adt.rule.types.TermList  tom_get_slice_TermList( tom.gom.adt.rule.types.TermList  begin,  tom.gom.adt.rule.types.TermList  end, tom.gom.adt.rule.types.TermList  tail) {     if(tom_equal_term_TermList(begin,end)) {       return tail;     } else {       return ( tom.gom.adt.rule.types.TermList )tom_cons_list_TermList(tom_get_head_TermList_TermList(begin),( tom.gom.adt.rule.types.TermList )tom_get_slice_TermList(tom_get_tail_TermList_TermList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_PathTerm( tom.gom.adt.rule.types.Term  t) { return  t instanceof tom.gom.adt.rule.types.term.ConsPathTerm || t instanceof tom.gom.adt.rule.types.term.EmptyPathTerm ;}private static  tom.gom.adt.rule.types.Term  tom_empty_list_PathTerm() { return  tom.gom.adt.rule.types.term.EmptyPathTerm.make() ; }private static  tom.gom.adt.rule.types.Term  tom_cons_list_PathTerm( int  e,  tom.gom.adt.rule.types.Term  l) { return  tom.gom.adt.rule.types.term.ConsPathTerm.make(e,l) ; }private static  int  tom_get_head_PathTerm_Term( tom.gom.adt.rule.types.Term  l) { return  l.getHeadPathTerm() ;}private static  tom.gom.adt.rule.types.Term  tom_get_tail_PathTerm_Term( tom.gom.adt.rule.types.Term  l) { return  l.getTailPathTerm() ;}private static boolean tom_is_empty_PathTerm_Term( tom.gom.adt.rule.types.Term  l) { return  l.isEmptyPathTerm() ;}   private static   tom.gom.adt.rule.types.Term  tom_append_list_PathTerm( tom.gom.adt.rule.types.Term l1,  tom.gom.adt.rule.types.Term  l2) {     if(tom_is_empty_PathTerm_Term(l1)) {       return l2;     } else if(tom_is_empty_PathTerm_Term(l2)) {       return l1;     } else if(tom_is_empty_PathTerm_Term(tom_get_tail_PathTerm_Term(l1))) {       return ( tom.gom.adt.rule.types.Term )tom_cons_list_PathTerm(tom_get_head_PathTerm_Term(l1),l2);     } else {       return ( tom.gom.adt.rule.types.Term )tom_cons_list_PathTerm(tom_get_head_PathTerm_Term(l1),tom_append_list_PathTerm(tom_get_tail_PathTerm_Term(l1),l2));     }   }   private static   tom.gom.adt.rule.types.Term  tom_get_slice_PathTerm( tom.gom.adt.rule.types.Term  begin,  tom.gom.adt.rule.types.Term  end, tom.gom.adt.rule.types.Term  tail) {     if(tom_equal_term_Term(begin,end)) {       return tail;     } else {       return ( tom.gom.adt.rule.types.Term )tom_cons_list_PathTerm(tom_get_head_PathTerm_Term(begin),( tom.gom.adt.rule.types.Term )tom_get_slice_PathTerm(tom_get_tail_PathTerm_Term(begin),end,tail));     }   }    /* Generated by TOM (version 2.5): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_One( tom.library.sl.Strategy  v) { return  new tom.library.sl.One(v) ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static  tom.library.sl.Strategy  tom_make_Fail() { return  new tom.library.sl.Fail() ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }   private static boolean tom_is_fun_sym_Choice( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Choice) ;}private static  tom.library.sl.Strategy  tom_empty_list_Choice() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Choice( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Choice(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Choice_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Choice_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Choice.THEN) ;}private static boolean tom_is_empty_Choice_Strategy( tom.library.sl.Strategy  t) { return  t ==null ;}   private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Choice_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Choice_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Choice(l1)) {       if(tom_is_empty_Choice_Strategy(((tom_is_fun_sym_Choice(l1))?tom_get_tail_Choice_Strategy(l1):tom_empty_list_Choice()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Choice(((tom_is_fun_sym_Choice(l1))?tom_get_head_Choice_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Choice(((tom_is_fun_sym_Choice(l1))?tom_get_head_Choice_Strategy(l1):l1),tom_append_list_Choice(((tom_is_fun_sym_Choice(l1))?tom_get_tail_Choice_Strategy(l1):tom_empty_list_Choice()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Choice(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Choice(((tom_is_fun_sym_Choice(begin))?tom_get_head_Choice_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((tom_is_fun_sym_Choice(begin))?tom_get_tail_Choice_Strategy(begin):tom_empty_list_Choice()),end,tail));     }   }   private static boolean tom_is_fun_sym_SequenceId( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.SequenceId) ;}private static  tom.library.sl.Strategy  tom_empty_list_SequenceId() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_SequenceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.SequenceId(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.THEN) ;}private static boolean tom_is_empty_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_SequenceId_Strategy(l1)) {       return l2;     } else if(tom_is_empty_SequenceId_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_SequenceId(l1)) {       if(tom_is_empty_SequenceId_Strategy(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()))) {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),tom_append_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_head_SequenceId_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_tail_SequenceId_Strategy(begin):tom_empty_list_SequenceId()),end,tail));     }   }    /* Generated by TOM (version 2.5): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_AllSeq( tom.library.sl.Strategy  s) { return  new tom.library.sl.AllSeq(s) ; } /* Generated by TOM (version 2.5): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  v) { return tom_cons_list_Choice(v,tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice())) ; }private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }private static  tom.library.sl.Strategy  tom_make_OnceTopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(v,tom_cons_list_Choice(tom_make_One(tom_make_MuVar("_x")),tom_empty_list_Choice()))) ; }private static  tom.library.sl.Strategy  tom_make_Repeat( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Choice(tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_MuVar("_x"),tom_empty_list_Sequence())),tom_cons_list_Choice(tom_make_Identity(),tom_empty_list_Choice()))) ; }private static  tom.library.sl.Strategy  tom_make_InnermostIdSeq( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(tom_make_AllSeq(tom_make_MuVar("_x")),tom_cons_list_Sequence(tom_cons_list_SequenceId(v,tom_cons_list_SequenceId(tom_make_MuVar("_x"),tom_empty_list_SequenceId())),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.5): Do not edit this file *//* Generated by TOM (version 2.5): Do not edit this file */   static class MapEntry {   private Object key;   private Object val;   public Object getKey() { return key; }   public Object getVal() { return val; }   public MapEntry(Object key, Object val) {     this.key = key;     this.val = val;   } }  /* Generated by TOM (version 2.5): Do not edit this file */  /* Generated by TOM (version 2.5): Do not edit this file */private static boolean tom_equal_term_HashMap(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_HashMap(Object t) { return  t instanceof java.util.HashMap ;}   private static java.util.HashMap hashMapAppend(MapEntry e, java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   res.put(e.getKey(), e.getVal());   return res; }  private static MapEntry hashMapGetHead(java.util.HashMap m) {   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   return new MapEntry(e.getKey(), e.getValue()); }  private static java.util.HashMap hashMapGetTail(java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   res.remove(e.getKey());   return res; }   




  private ModuleList moduleList;
  private String sortname;
  private String modulename;

  public GraphRuleExpander(ModuleList data) {
    this.moduleList = data;
  }

  public HookDeclList expandGraphRules(String sortname, String stratname, String defaultstrat, String ruleCode, Decl sdecl) {
    this.sortname = sortname; 
    this.modulename = sdecl.getSort().getModuleDecl().getModuleName().getName();
    RuleLexer lexer = new RuleLexer(new ANTLRStringStream(ruleCode));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    RuleParser parser = new RuleParser(tokens);
    parser.setTreeAdaptor(new RuleAdaptor());
    RuleList rulelist = tom_empty_list_RuleList();
    try {
      RuleTree ast = (RuleTree)parser.graphruleset().getTree();
      rulelist = (RuleList) ast.getTerm();
    } catch (org.antlr.runtime.RecognitionException e) {
      getLogger().log(Level.SEVERE, "Cannot parse rules",
          new Object[]{});
      return tom_empty_list_concHookDecl();
    }
    return expand(rulelist,stratname,defaultstrat,sdecl);
  }

  public HookDeclList expandFirstGraphRules(String sortname, String stratname, String defaultstrat, String ruleCode, Decl sdecl) {
    HookDeclList expandedrules = expandGraphRules(sortname,stratname,defaultstrat,ruleCode, sdecl);
    HookDeclList commonpart = expandFirst(sdecl);
    return tom_append_list_concHookDecl(commonpart,tom_append_list_concHookDecl(expandedrules,tom_empty_list_concHookDecl()));  
  }

  private String getArobase(){
    return "@";
  }


  //add the common methods, includes and imports for all graphrule strategies of a sort 
  protected HookDeclList expandFirst(Decl sdecl) {
  StringBuffer output = new StringBuffer();
    output.append(
        "\n   %include {sl.tom }\n\n    %typeterm Position{\n        implement {Position}\n        is_sort(t)     { t instanceof Position }\n    }\n\n    private static "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" Swap(Position p1, Position p2, "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" subject) {\n        try {\n          "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" updatedSubject =  ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") `TopDown(Sequence(UpdatePos(p1,p2),UpdatePos2(p1,p2))).visit(subject);\n          "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" subterm_p1 = ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") p1.getSubterm().visit(updatedSubject);\n          "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" subterm_p2 = ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") p2.getSubterm().visit(updatedSubject);\n          return ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") `Sequence(p2.getReplace(subterm_p1),p1.getReplace(subterm_p2)).visit(updatedSubject);\n          } catch (VisitFailure e) { return null; }\n    }\n\n\n   %strategy Normalize() extends Identity(){\n        visit "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" {\n          p"/* Generated by TOM (version 2.5): Do not edit this file */+getArobase()+"Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+"(_*) -> {\n            Position current = getEnvironment().getPosition(); \n            Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n            if(current.compare(dest)== -1) {\n                getEnvironment().followPath((Path)`p);\n                Position realDest = getEnvironment().getPosition(); \n            if(!realDest.equals(dest)) {\n                //the subterm pointed was a pos (in case of previous switch) \n                //and we must only update the relative position\n                getEnvironment().followPath(current.sub(getEnvironment().getPosition()));\n                return Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+".make(realDest.sub(current));\n            }  else {\n                //switch the rel position and the pointed subterm\n\n                // 1. construct the new relative position\n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" relref = Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+".make(current.sub(dest));\n\n                // 2. update the part to change \n                `TopDown(UpdatePos(dest,current)).visit(getEnvironment());\n\n                // 3. save the subterm updated \n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" subterm = ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") getEnvironment().getSubject(); \n\n                // 4. replace at dest the subterm by the new relative pos\n                getEnvironment().setSubject(relref);\n                getEnvironment().followPath(current.sub(getEnvironment().getPosition()));\n                return subterm; \n            }\n          }\n        }\n      }\n    }\n\n   %strategy UpdatePos(source:Position,target:Position) extends Identity() {\n          visit "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" {\n            p"/* Generated by TOM (version 2.5): Do not edit this file */+getArobase()+"Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+"(_*) -> {\n              Position current = getEnvironment().getPosition(); \n              Position dest = (Position) current.add((Path)`p).getCanonicalPath();\n              if(current.hasPrefix(source) && !dest.hasPrefix(target) && !dest.hasPrefix(source)){\n                //update this relative pos from the redex to the external\n                current = current.changePrefix(source,target);\n                return Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+".make(dest.sub(current));\n              }\n\n              if (dest.hasPrefix(source)  && !current.hasPrefix(target) && !current.hasPrefix(source)){\n                //update this relative pos from the external to the redex\n                dest = dest.changePrefix(source,target); \n                return Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+".make(dest.sub(current));\n              }\n            }\n          }\n   }\n\n   %strategy UpdatePos2(p1:Position,p2:Position) extends Identity() {\n          visit "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" {\n            p"/* Generated by TOM (version 2.5): Do not edit this file */+getArobase()+"Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+"(_*) -> {\n              Position src = getEnvironment().getPosition(); \n              Position dest = (Position) src.add((Path)`p).getCanonicalPath();\n              if(src.hasPrefix(p1) && dest.hasPrefix(p2)){\n                //update this relative pos from the subterm at p1 to the subterm at p2\n                Position newsrc = src.changePrefix(p1,p2);\n                Position newdest = dest.changePrefix(p2,p1);\n                return Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+".make(newdest.sub(newsrc));\n              }\n\n              if(src.hasPrefix(p2) && dest.hasPrefix(p1)){\n                //update this relative pos from the subterm at p2 to the subterm at p1\n                Position newsrc = src.changePrefix(p2,p1);\n                Position newdest = dest.changePrefix(p1,p2);\n                return Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+".make(newdest.sub(newsrc));\n              }\n            }\n          }\n   }\n\n\n  private static "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" computeRhsWithPath("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" lhs, "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" rhs, Position posRedex) {\n    try {\n      return ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") `TopDown(FromVarToPath(lhs,posRedex)).visit(`rhs);\n    } catch(VisitFailure e) { return null; }\n  }\n\n  %strategy FromVarToPath(lhs:"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+",posRedex:Position) extends Identity() {\n    visit "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" {\n      Var"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+"(name) -> { \n        Position wl = getVarPos(lhs,`name);\n        Position wr = getEnvironment().getPosition();\n        Position wwl = (Position) (new Position(new int[]{1})).add(posRedex).add(wl); \n        Position wwr = (Position) (new Position(new int[]{2})).add(wr); \n        Position res = (Position) wwl.sub(wwr);\n        return Path"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+".make(res);\n      }\n    }\n  }\n\n  private static Position getVarPos("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" term, String varname) {\n    Position p = new Position();\n    try {\n      `OnceTopDown(GetVarPos(p,varname)).visit(term);\n      return p;\n    } catch (VisitFailure e) { return null; }\n  }\n\n  %strategy GetVarPos(Position p, String varname) extends Fail() {\n    visit "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" {\n      v"/* Generated by TOM (version 2.5): Do not edit this file */+getArobase()+"Var"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+"(name) -> { \n        if (`name.equals(varname)) { \n          p.setValue(getEnvironment().getPosition().toArray()); \n          return `v; } \n      } \n    }\n  }\n\n   "




































































































































);

  String imports = "\nimport tom.library.sl.*;\nimport java.util.*;\n   "


;

   return tom_cons_list_concHookDecl(tom_make_BlockHookDecl(sdecl,tom_make_Code(output.toString())),tom_cons_list_concHookDecl(tom_make_ImportHookDecl(sdecl,tom_make_Code(imports)),tom_empty_list_concHookDecl()));
  }

  protected HookDeclList expand(RuleList rulelist, String stratname, String defaultstrat, Decl sdecl) {
    StringBuffer output = new StringBuffer();
    output.append("\n  public static Strategy "/* Generated by TOM (version 2.5): Do not edit this file */+stratname+"(){\n    return `"/* Generated by TOM (version 2.5): Do not edit this file */+stratname+"();\n  }\n\n  %strategy "/* Generated by TOM (version 2.5): Do not edit this file */+stratname+"() extends "/* Generated by TOM (version 2.5): Do not edit this file */+defaultstrat+"() {\n    visit "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" {\n      "






);

        if (tom_is_sort_RuleList(rulelist)) {{  tom.gom.adt.rule.types.RuleList  tomMatch466NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.RuleList )rulelist);if (tom_is_fun_sym_RuleList(tomMatch466NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.RuleList  tomMatch466NameNumber_freshVar_0=tomMatch466NameNumberfreshSubject_1;{  tom.gom.adt.rule.types.RuleList  tomMatch466NameNumber_begin_2=tomMatch466NameNumber_freshVar_0;{  tom.gom.adt.rule.types.RuleList  tomMatch466NameNumber_end_3=tomMatch466NameNumber_freshVar_0;do {{{  tom.gom.adt.rule.types.RuleList  tomMatch466NameNumber_freshVar_1=tomMatch466NameNumber_end_3;if (!(tom_is_empty_RuleList_RuleList(tomMatch466NameNumber_freshVar_1))) {{ boolean tomMatch466NameNumber_freshVar_8= false ;{  tom.gom.adt.rule.types.Term  tomMatch466NameNumber_freshVar_7= null ;{  tom.gom.adt.rule.types.Term  tomMatch466NameNumber_freshVar_6= null ;if (tom_is_fun_sym_Rule(tom_get_head_RuleList_RuleList(tomMatch466NameNumber_freshVar_1))) {{tomMatch466NameNumber_freshVar_8= true ;tomMatch466NameNumber_freshVar_6=tom_get_slot_Rule_lhs(tom_get_head_RuleList_RuleList(tomMatch466NameNumber_freshVar_1));tomMatch466NameNumber_freshVar_7=tom_get_slot_Rule_rhs(tom_get_head_RuleList_RuleList(tomMatch466NameNumber_freshVar_1));}} else {if (tom_is_fun_sym_ConditionalRule(tom_get_head_RuleList_RuleList(tomMatch466NameNumber_freshVar_1))) {{tomMatch466NameNumber_freshVar_8= true ;tomMatch466NameNumber_freshVar_6=tom_get_slot_ConditionalRule_lhs(tom_get_head_RuleList_RuleList(tomMatch466NameNumber_freshVar_1));tomMatch466NameNumber_freshVar_7=tom_get_slot_ConditionalRule_rhs(tom_get_head_RuleList_RuleList(tomMatch466NameNumber_freshVar_1));}}}if ((tomMatch466NameNumber_freshVar_8 ==  true )) {{  tom.gom.adt.rule.types.Term  tom_lhs=tomMatch466NameNumber_freshVar_6;{  tom.gom.adt.rule.types.RuleList  tomMatch466NameNumber_freshVar_4=tom_get_tail_RuleList_RuleList(tomMatch466NameNumber_freshVar_1);if ( true ) {

            //TODO: verify that the lhs of the rules are of the good sort  
            //TODO: verify the linearity of lhs and rhs
            output.append("\n                "/* Generated by TOM (version 2.5): Do not edit this file */+genTerm(tom_lhs)+" -> {\n\n                /* 1. save the current pos w */\n                Position omega = getEnvironment().getPosition();\n                Position posRhs = new Position(new int[]{2});\n                Position posFinal = new Position(new int[]{1});\n\n                /*  2. go to the root and get the global term-graph */\n                getEnvironment().followPath(omega.inverse());\n\n                /*3. construct tt=SubstTerm(t,r) */\n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" expandedLhs = ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") "/* Generated by TOM (version 2.5): Do not edit this file */+modulename+"AbstractType.expand(`"/* Generated by TOM (version 2.5): Do not edit this file */+genTermWithExplicitVar(tom_lhs)+");\n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" expandedRhs = ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") "/* Generated by TOM (version 2.5): Do not edit this file */+modulename+"AbstractType.expand(`"/* Generated by TOM (version 2.5): Do not edit this file */+genTermWithExplicitVar(tomMatch466NameNumber_freshVar_7)+");\n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" r = computeRhsWithPath(expandedLhs,expandedRhs,omega);\n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" tt = `Subst"/* Generated by TOM (version 2.5): Do not edit this file */+sortname+"(("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+")getEnvironment().getSubject(),r);\n                \n                /* 4. set the global term to norm(swap(tt,1.w,2))|1 i */\n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" ttt = Swap((Position) posFinal.add(omega),posRhs,tt); \n                "/* Generated by TOM (version 2.5): Do not edit this file */+sortname+" res = ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") `InnermostIdSeq(Normalize()).visit(ttt); \n                getEnvironment().setSubject(posFinal.getSubterm().visit(res));\n\n                /* 5. go to the position w */\n                getEnvironment().followPath(omega);\n\n                return ("/* Generated by TOM (version 2.5): Do not edit this file */+sortname+") getEnvironment().getSubject();\n                }\n                "


























);
          }}}}}}}}}if (tom_is_empty_RuleList_RuleList(tomMatch466NameNumber_end_3)) {tomMatch466NameNumber_end_3=tomMatch466NameNumber_begin_2;} else {tomMatch466NameNumber_end_3=tom_get_tail_RuleList_RuleList(tomMatch466NameNumber_end_3);}}} while(!(tom_equal_term_RuleList(tomMatch466NameNumber_end_3, tomMatch466NameNumber_begin_2)));}}}}}}


        output.append("\n    }\n  }\n            "


);

          return tom_cons_list_concHookDecl(tom_make_BlockHookDecl(sdecl,tom_make_Code(output.toString())),tom_empty_list_concHookDecl());
  }

  private String genTerm(Term term) {
    StringBuffer output = new StringBuffer();
    term = expand(term);
    if (tom_is_sort_Term(term)) {{  tom.gom.adt.rule.types.Term  tomMatch468NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )term);if (tom_is_fun_sym_PathTerm(tomMatch468NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.Term  tomMatch468NameNumber_freshVar_0=tomMatch468NameNumberfreshSubject_1;if (!(tom_is_empty_PathTerm_Term(tomMatch468NameNumber_freshVar_0))) {{  tom.gom.adt.rule.types.Term  tomMatch468NameNumber_freshVar_1=tom_get_tail_PathTerm_Term(tomMatch468NameNumber_freshVar_0);if ( true ) {

        output.append("Path"+sortname);
        output.append("(");
        output.append(tom_get_head_PathTerm_Term(tomMatch468NameNumber_freshVar_0));
        {  tom.gom.adt.rule.types.Term  tomMatch467NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )tomMatch468NameNumber_freshVar_1);if (tom_is_fun_sym_PathTerm(tomMatch467NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.Term  tomMatch467NameNumber_freshVar_0=tomMatch467NameNumberfreshSubject_1;{  tom.gom.adt.rule.types.Term  tomMatch467NameNumber_begin_2=tomMatch467NameNumber_freshVar_0;{  tom.gom.adt.rule.types.Term  tomMatch467NameNumber_end_3=tomMatch467NameNumber_freshVar_0;do {{{  tom.gom.adt.rule.types.Term  tomMatch467NameNumber_freshVar_1=tomMatch467NameNumber_end_3;if (!(tom_is_empty_PathTerm_Term(tomMatch467NameNumber_freshVar_1))) {{  tom.gom.adt.rule.types.Term  tomMatch467NameNumber_freshVar_4=tom_get_tail_PathTerm_Term(tomMatch467NameNumber_freshVar_1);if ( true ) {

            output.append(",");
            output.append(tom_get_head_PathTerm_Term(tomMatch467NameNumber_freshVar_1));
          }}}}if (tom_is_empty_PathTerm_Term(tomMatch467NameNumber_end_3)) {tomMatch467NameNumber_end_3=tomMatch467NameNumber_begin_2;} else {tomMatch467NameNumber_end_3=tom_get_tail_PathTerm_Term(tomMatch467NameNumber_end_3);}}} while(!(tom_equal_term_Term(tomMatch467NameNumber_end_3, tomMatch467NameNumber_begin_2)));}}}}}

        output.append(")");
      }}}}}if (tom_is_fun_sym_Appl(tomMatch468NameNumberfreshSubject_1)) {{  String  tomMatch468NameNumber_freshVar_8=tom_get_slot_Appl_symbol(tomMatch468NameNumberfreshSubject_1);{  tom.gom.adt.rule.types.TermList  tomMatch468NameNumber_freshVar_9=tom_get_slot_Appl_args(tomMatch468NameNumberfreshSubject_1);if ( true ) {

        output.append(tomMatch468NameNumber_freshVar_8);
        output.append("(");
        output.append(genTermList(tomMatch468NameNumber_freshVar_9));
        output.append(")");
      }}}}if (tom_is_fun_sym_Var(tomMatch468NameNumberfreshSubject_1)) {{  String  tomMatch468NameNumber_freshVar_10=tom_get_slot_Var_name(tomMatch468NameNumberfreshSubject_1);if ( true ) {

        output.append(tomMatch468NameNumber_freshVar_10);
      }}}if (tom_is_fun_sym_BuiltinInt(tomMatch468NameNumberfreshSubject_1)) {{  int  tomMatch468NameNumber_freshVar_11=tom_get_slot_BuiltinInt_i(tomMatch468NameNumberfreshSubject_1);if ( true ) {

        output.append(tomMatch468NameNumber_freshVar_11);
      }}}if (tom_is_fun_sym_BuiltinString(tomMatch468NameNumberfreshSubject_1)) {{  String  tomMatch468NameNumber_freshVar_12=tom_get_slot_BuiltinString_s(tomMatch468NameNumberfreshSubject_1);if ( true ) {

        output.append(tomMatch468NameNumber_freshVar_12);
      }}}}}

    return output.toString();
  }

  private String genTermList(TermList list) {
    StringBuffer output = new StringBuffer();
    if (tom_is_sort_TermList(list)) {{  tom.gom.adt.rule.types.TermList  tomMatch469NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.TermList )list);if (tom_is_fun_sym_TermList(tomMatch469NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.TermList  tomMatch469NameNumber_freshVar_0=tomMatch469NameNumberfreshSubject_1;if (tom_is_empty_TermList_TermList(tomMatch469NameNumber_freshVar_0)) {if ( true ) {
 return ""; }}}}if (tom_is_fun_sym_TermList(tomMatch469NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.TermList  tomMatch469NameNumber_freshVar_1=tomMatch469NameNumberfreshSubject_1;if (!(tom_is_empty_TermList_TermList(tomMatch469NameNumber_freshVar_1))) {{  tom.gom.adt.rule.types.TermList  tomMatch469NameNumber_freshVar_2=tom_get_tail_TermList_TermList(tomMatch469NameNumber_freshVar_1);{  tom.gom.adt.rule.types.TermList  tom_t=tomMatch469NameNumber_freshVar_2;if ( true ) {

        output.append(genTerm(tom_get_head_TermList_TermList(tomMatch469NameNumber_freshVar_1)));
        if (!tom_t.isEmptyTermList()) {
          output.append(", ");
        }
        output.append(genTermList(tom_t));
      }}}}}}}}

    return output.toString();
  }

  private String genTermWithExplicitVar(Term term) {
    StringBuffer output = new StringBuffer();
    if (tom_is_sort_Term(term)) {{  tom.gom.adt.rule.types.Term  tomMatch470NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )term);if (tom_is_fun_sym_LabTerm(tomMatch470NameNumberfreshSubject_1)) {{  String  tomMatch470NameNumber_freshVar_0=tom_get_slot_LabTerm_l(tomMatch470NameNumberfreshSubject_1);{  tom.gom.adt.rule.types.Term  tomMatch470NameNumber_freshVar_1=tom_get_slot_LabTerm_t(tomMatch470NameNumberfreshSubject_1);if ( true ) {

        output.append("Lab"+sortname);
        output.append("(");
        output.append("\""+tomMatch470NameNumber_freshVar_0+"\"");
        output.append(",");
        output.append(genTermWithExplicitVar(tomMatch470NameNumber_freshVar_1));
        output.append(")");
      }}}}if (tom_is_fun_sym_RefTerm(tomMatch470NameNumberfreshSubject_1)) {{  String  tomMatch470NameNumber_freshVar_2=tom_get_slot_RefTerm_l(tomMatch470NameNumberfreshSubject_1);if ( true ) {

        output.append("Ref"+sortname);
        output.append("(");
        output.append("\""+tomMatch470NameNumber_freshVar_2+"\"");
        output.append(")");
      }}}if (tom_is_fun_sym_Appl(tomMatch470NameNumberfreshSubject_1)) {{  String  tomMatch470NameNumber_freshVar_3=tom_get_slot_Appl_symbol(tomMatch470NameNumberfreshSubject_1);{  tom.gom.adt.rule.types.TermList  tomMatch470NameNumber_freshVar_4=tom_get_slot_Appl_args(tomMatch470NameNumberfreshSubject_1);if ( true ) {

        output.append(tomMatch470NameNumber_freshVar_3);
        output.append("(");
        output.append(genTermListWithExplicitVar(tomMatch470NameNumber_freshVar_4));
        output.append(")");
      }}}}if (tom_is_fun_sym_Var(tomMatch470NameNumberfreshSubject_1)) {{  String  tomMatch470NameNumber_freshVar_5=tom_get_slot_Var_name(tomMatch470NameNumberfreshSubject_1);if ( true ) {

        output.append("Var"+sortname+"(\""+tomMatch470NameNumber_freshVar_5+"\")");
      }}}if (tom_is_fun_sym_BuiltinInt(tomMatch470NameNumberfreshSubject_1)) {{  int  tomMatch470NameNumber_freshVar_6=tom_get_slot_BuiltinInt_i(tomMatch470NameNumberfreshSubject_1);if ( true ) {

        output.append(tomMatch470NameNumber_freshVar_6);
      }}}if (tom_is_fun_sym_BuiltinString(tomMatch470NameNumberfreshSubject_1)) {{  String  tomMatch470NameNumber_freshVar_7=tom_get_slot_BuiltinString_s(tomMatch470NameNumberfreshSubject_1);if ( true ) {

        output.append(tomMatch470NameNumber_freshVar_7);
      }}}}}

    return output.toString();
  }

  private String genTermListWithExplicitVar(TermList list) {
    StringBuffer output = new StringBuffer();
    if (tom_is_sort_TermList(list)) {{  tom.gom.adt.rule.types.TermList  tomMatch471NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.TermList )list);if (tom_is_fun_sym_TermList(tomMatch471NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.TermList  tomMatch471NameNumber_freshVar_0=tomMatch471NameNumberfreshSubject_1;if (tom_is_empty_TermList_TermList(tomMatch471NameNumber_freshVar_0)) {if ( true ) {
 return ""; }}}}if (tom_is_fun_sym_TermList(tomMatch471NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.TermList  tomMatch471NameNumber_freshVar_1=tomMatch471NameNumberfreshSubject_1;if (!(tom_is_empty_TermList_TermList(tomMatch471NameNumber_freshVar_1))) {{  tom.gom.adt.rule.types.TermList  tomMatch471NameNumber_freshVar_2=tom_get_tail_TermList_TermList(tomMatch471NameNumber_freshVar_1);{  tom.gom.adt.rule.types.TermList  tom_t=tomMatch471NameNumber_freshVar_2;if ( true ) {

        output.append(genTermWithExplicitVar(tom_get_head_TermList_TermList(tomMatch471NameNumber_freshVar_1)));
        if (!tom_t.isEmptyTermList()) {
          output.append(", ");
        }
        output.append(genTermListWithExplicitVar(tom_t));
      }}}}}}}}

    return output.toString();
  }


  public static Term expand(Term t) {
    HashMap map = new HashMap();
    Term tt = null;
    try {
      tt = (Term) tom_make_InnermostIdSeq(tom_make_NormalizeLabel(map)).visit(t);
    } catch (tom.library.sl.VisitFailure e) {
      throw new tom.gom.tools.error.GomRuntimeException("Unexpected strategy failure!");
    }
    return label2path(tt);
  }

  private static boolean tom_is_sort_Info(Object t) { return 

 t instanceof Info ;}


  static class Info {
    public Position omega;
    public Term term;
  }

  private static class CollectSubterm extends  tom.gom.adt.rule.RuleBasicStrategy  {private  String  label; private Info info; public CollectSubterm( String  label, Info info) { super(tom_make_Identity());this.label=label;this.info=info;}public  String  getlabel() { return label;}public Info getinfo() { return info;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.rule.types.Term  visit_Term( tom.gom.adt.rule.types.Term  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Term(tom__arg)) {{  tom.gom.adt.rule.types.Term  tomMatch472NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )tom__arg);if (tom_is_fun_sym_LabTerm(tomMatch472NameNumberfreshSubject_1)) {{  String  tomMatch472NameNumber_freshVar_0=tom_get_slot_LabTerm_l(tomMatch472NameNumberfreshSubject_1);{  tom.gom.adt.rule.types.Term  tomMatch472NameNumber_freshVar_1=tom_get_slot_LabTerm_t(tomMatch472NameNumberfreshSubject_1);{  String  tom_label=tomMatch472NameNumber_freshVar_0;if ( true ) {


        if(label.equals(tom_label)){
          info.term = tomMatch472NameNumber_freshVar_1;
          info.omega = getEnvironment().getPosition();
          return tom_make_RefTerm(tom_label);
        }
      }}}}}}}return super.visit_Term(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_CollectSubterm( String  t0, Info t1) { return new CollectSubterm(t0,t1); }private static class NormalizeLabel extends  tom.gom.adt.rule.RuleBasicStrategy  {private  java.util.HashMap  map; public NormalizeLabel( java.util.HashMap  map) { super(tom_make_Identity());this.map=map;}public  java.util.HashMap  getmap() { return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.rule.types.Term  visit_Term( tom.gom.adt.rule.types.Term  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Term(tom__arg)) {{  tom.gom.adt.rule.types.Term  tomMatch473NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )tom__arg);if (tom_is_fun_sym_RefTerm(tomMatch473NameNumberfreshSubject_1)) {{  String  tomMatch473NameNumber_freshVar_0=tom_get_slot_RefTerm_l(tomMatch473NameNumberfreshSubject_1);{  String  tom_label=tomMatch473NameNumber_freshVar_0;if ( true ) {






        if (! map.containsKey(tom_label)){
          Info info = new Info();
          Position pos = new Position(new int[]{});
          Position old = getEnvironment().getPosition();
          Position rootpos = new Position(new int[]{});
          map.put(tom_label,old);
          getEnvironment().followPath(rootpos.sub(getEnvironment().getPosition()));            
          tom_make_Try(tom_make_TopDown(tom_make_CollectSubterm(tom_label,info))).visit(getEnvironment());            
          getEnvironment().followPath(old.sub(getEnvironment().getPosition()));
          return tom_make_LabTerm(tom_label,info.term);
        }
      }}}}if (tom_is_fun_sym_LabTerm(tomMatch473NameNumberfreshSubject_1)) {{  String  tomMatch473NameNumber_freshVar_1=tom_get_slot_LabTerm_l(tomMatch473NameNumberfreshSubject_1);if ( true ) {

        map.put(tomMatch473NameNumber_freshVar_1,getEnvironment().getPosition());
      }}}}}return super.visit_Term(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_NormalizeLabel( java.util.HashMap  t0) { return new NormalizeLabel(t0); }



  public static Term label2path(Term t) {
    HashMap map = new HashMap();
    try {
      return (Term) tom_cons_list_Sequence(tom_make_Repeat(tom_make_OnceTopDown(tom_make_CollectLabels(map))),tom_cons_list_Sequence(tom_make_TopDown(tom_make_Label2Path(map)),tom_empty_list_Sequence())).visit(t);
    } catch (tom.library.sl.VisitFailure e) {
      throw new tom.gom.tools.error.GomRuntimeException("Unexpected strategy failure!");
    }  
  }

  private static class CollectLabels extends  tom.gom.adt.rule.RuleBasicStrategy  {private  java.util.HashMap  map; public CollectLabels( java.util.HashMap  map) { super(tom_make_Fail());this.map=map;}public  java.util.HashMap  getmap() { return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.rule.types.Term  visit_Term( tom.gom.adt.rule.types.Term  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Term(tom__arg)) {{  tom.gom.adt.rule.types.Term  tomMatch474NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )tom__arg);if (tom_is_fun_sym_LabTerm(tomMatch474NameNumberfreshSubject_1)) {{  String  tomMatch474NameNumber_freshVar_0=tom_get_slot_LabTerm_l(tomMatch474NameNumberfreshSubject_1);{  tom.gom.adt.rule.types.Term  tomMatch474NameNumber_freshVar_1=tom_get_slot_LabTerm_t(tomMatch474NameNumberfreshSubject_1);if ( true ) {


        map.put(tomMatch474NameNumber_freshVar_0,getEnvironment().getPosition());
        return tomMatch474NameNumber_freshVar_1;
      }}}}}}return super.visit_Term(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_CollectLabels( java.util.HashMap  t0) { return new CollectLabels(t0); }private static class PathForPattern extends  tom.gom.adt.rule.RuleBasicStrategy  {public PathForPattern() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.rule.types.Term  visit_Term( tom.gom.adt.rule.types.Term  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Term(tom__arg)) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )tom__arg);if (tom_is_fun_sym_PathTerm(tomMatch475NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_1=tomMatch475NameNumberfreshSubject_1;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_3=tomMatch475NameNumber_freshVar_1;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_4=tomMatch475NameNumber_freshVar_1;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_2=tomMatch475NameNumber_end_4;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_6=tomMatch475NameNumber_freshVar_2;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_7=tomMatch475NameNumber_freshVar_2;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_0=tom_get_slice_PathTerm(tomMatch475NameNumber_begin_6,tomMatch475NameNumber_end_7,tom_empty_list_PathTerm());{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_5=tomMatch475NameNumber_end_7;if (tom_is_fun_sym_PathTerm(tomMatch475NameNumber_freshVar_0)) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_10=tomMatch475NameNumber_freshVar_0;if (!(tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_10))) {if (tom_equal_term_int(-1, tom_get_head_PathTerm_Term(tomMatch475NameNumber_freshVar_10))) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_11=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_freshVar_10);{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_13=tomMatch475NameNumber_freshVar_11;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_14=tomMatch475NameNumber_freshVar_11;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_9=tom_get_slice_PathTerm(tomMatch475NameNumber_begin_13,tomMatch475NameNumber_end_14,tom_empty_list_PathTerm());{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_12=tomMatch475NameNumber_end_14;if (!(tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_12))) {if (tom_equal_term_int(-1, tom_get_head_PathTerm_Term(tomMatch475NameNumber_freshVar_12))) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_15=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_freshVar_12);if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_15)) {{ boolean tomMatch475NameNumber_freshVar_70= false ;tomMatch475NameNumber_freshVar_9=tomMatch475NameNumber_freshVar_9;if (tom_is_fun_sym_PathTerm(tomMatch475NameNumber_freshVar_9)) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_32=tomMatch475NameNumber_freshVar_9;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_34=tomMatch475NameNumber_freshVar_32;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_35=tomMatch475NameNumber_freshVar_32;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_33=tomMatch475NameNumber_end_35;if (!(tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_33))) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_36=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_freshVar_33);{ boolean tomMatch475NameNumber_freshVar_71= false ;if (tom_equal_term_int(-2, tom_get_head_PathTerm_Term(tomMatch475NameNumber_freshVar_33))) {tomMatch475NameNumber_freshVar_71= true ;}if ((tomMatch475NameNumber_freshVar_71 ==  false )) {tomMatch475NameNumber_freshVar_70= true ;}}}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_35)) {tomMatch475NameNumber_end_35=tomMatch475NameNumber_begin_34;} else {tomMatch475NameNumber_end_35=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_35);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_35, tomMatch475NameNumber_begin_34)));}}}}if ((tomMatch475NameNumber_freshVar_70 ==  false )) {if ( true ) {






        int k = 1+tomMatch475NameNumber_freshVar_9.length();
        PathTerm newX = (PathTerm) tom_make_PathForPattern().visit(tom_get_slice_PathTerm(tomMatch475NameNumber_begin_3,tomMatch475NameNumber_end_4,tom_empty_list_PathTerm()));
        PathTerm newY = (PathTerm) tom_make_PathForPattern().visit(tomMatch475NameNumber_freshVar_5);
        return tom_append_list_PathTerm(newX,tom_cons_list_PathTerm(-k,tom_append_list_PathTerm(newY,tom_empty_list_PathTerm())));
      }}}}}}}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_14)) {tomMatch475NameNumber_end_14=tomMatch475NameNumber_begin_13;} else {tomMatch475NameNumber_end_14=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_14);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_14, tomMatch475NameNumber_begin_13)));}}}}}}}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_7)) {tomMatch475NameNumber_end_7=tomMatch475NameNumber_begin_6;} else {tomMatch475NameNumber_end_7=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_7);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_7, tomMatch475NameNumber_begin_6)));}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_4)) {tomMatch475NameNumber_end_4=tomMatch475NameNumber_begin_3;} else {tomMatch475NameNumber_end_4=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_4);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_4, tomMatch475NameNumber_begin_3)));}}}}if (tom_is_fun_sym_PathTerm(tomMatch475NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_73=tomMatch475NameNumberfreshSubject_1;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_75=tomMatch475NameNumber_freshVar_73;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_76=tomMatch475NameNumber_freshVar_73;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_74=tomMatch475NameNumber_end_76;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_78=tomMatch475NameNumber_freshVar_74;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_79=tomMatch475NameNumber_freshVar_74;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_72=tom_get_slice_PathTerm(tomMatch475NameNumber_begin_78,tomMatch475NameNumber_end_79,tom_empty_list_PathTerm());{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_77=tomMatch475NameNumber_end_79;if (tom_is_fun_sym_PathTerm(tomMatch475NameNumber_freshVar_72)) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_82=tomMatch475NameNumber_freshVar_72;if (!(tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_82))) {if (tom_equal_term_int(1, tom_get_head_PathTerm_Term(tomMatch475NameNumber_freshVar_82))) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_83=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_freshVar_82);{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_85=tomMatch475NameNumber_freshVar_83;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_86=tomMatch475NameNumber_freshVar_83;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_81=tom_get_slice_PathTerm(tomMatch475NameNumber_begin_85,tomMatch475NameNumber_end_86,tom_empty_list_PathTerm());{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_84=tomMatch475NameNumber_end_86;if (!(tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_84))) {if (tom_equal_term_int(1, tom_get_head_PathTerm_Term(tomMatch475NameNumber_freshVar_84))) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_87=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_freshVar_84);if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_87)) {{ boolean tomMatch475NameNumber_freshVar_142= false ;tomMatch475NameNumber_freshVar_81=tomMatch475NameNumber_freshVar_81;if (tom_is_fun_sym_PathTerm(tomMatch475NameNumber_freshVar_81)) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_104=tomMatch475NameNumber_freshVar_81;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_begin_106=tomMatch475NameNumber_freshVar_104;{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_end_107=tomMatch475NameNumber_freshVar_104;do {{{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_105=tomMatch475NameNumber_end_107;if (!(tom_is_empty_PathTerm_Term(tomMatch475NameNumber_freshVar_105))) {{  tom.gom.adt.rule.types.Term  tomMatch475NameNumber_freshVar_108=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_freshVar_105);{ boolean tomMatch475NameNumber_freshVar_143= false ;if (tom_equal_term_int(2, tom_get_head_PathTerm_Term(tomMatch475NameNumber_freshVar_105))) {tomMatch475NameNumber_freshVar_143= true ;}if ((tomMatch475NameNumber_freshVar_143 ==  false )) {tomMatch475NameNumber_freshVar_142= true ;}}}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_107)) {tomMatch475NameNumber_end_107=tomMatch475NameNumber_begin_106;} else {tomMatch475NameNumber_end_107=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_107);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_107, tomMatch475NameNumber_begin_106)));}}}}if ((tomMatch475NameNumber_freshVar_142 ==  false )) {if ( true ) {

        int k = 1+tomMatch475NameNumber_freshVar_81.length();
        PathTerm newX = (PathTerm) tom_make_PathForPattern().visit(tom_get_slice_PathTerm(tomMatch475NameNumber_begin_75,tomMatch475NameNumber_end_76,tom_empty_list_PathTerm()));
        PathTerm newY = (PathTerm) tom_make_PathForPattern().visit(tomMatch475NameNumber_freshVar_77);
        return tom_append_list_PathTerm(newX,tom_cons_list_PathTerm(k,tom_append_list_PathTerm(newY,tom_empty_list_PathTerm())));
      }}}}}}}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_86)) {tomMatch475NameNumber_end_86=tomMatch475NameNumber_begin_85;} else {tomMatch475NameNumber_end_86=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_86);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_86, tomMatch475NameNumber_begin_85)));}}}}}}}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_79)) {tomMatch475NameNumber_end_79=tomMatch475NameNumber_begin_78;} else {tomMatch475NameNumber_end_79=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_79);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_79, tomMatch475NameNumber_begin_78)));}}}if (tom_is_empty_PathTerm_Term(tomMatch475NameNumber_end_76)) {tomMatch475NameNumber_end_76=tomMatch475NameNumber_begin_75;} else {tomMatch475NameNumber_end_76=tom_get_tail_PathTerm_Term(tomMatch475NameNumber_end_76);}}} while(!(tom_equal_term_Term(tomMatch475NameNumber_end_76, tomMatch475NameNumber_begin_75)));}}}}}}return super.visit_Term(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_PathForPattern() { return new PathForPattern(); }private static class Label2Path extends  tom.gom.adt.rule.RuleBasicStrategy  {private  java.util.HashMap  map; public Label2Path( java.util.HashMap  map) { super(tom_make_Identity());this.map=map;}public  java.util.HashMap  getmap() { return map;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.gom.adt.rule.types.Term  visit_Term( tom.gom.adt.rule.types.Term  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Term(tom__arg)) {{  tom.gom.adt.rule.types.Term  tomMatch476NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )tom__arg);if (tom_is_fun_sym_RefTerm(tomMatch476NameNumberfreshSubject_1)) {{  String  tomMatch476NameNumber_freshVar_0=tom_get_slot_RefTerm_l(tomMatch476NameNumberfreshSubject_1);{  String  tom_label=tomMatch476NameNumber_freshVar_0;if ( true ) {






        if (map.containsKey(tom_label)) {
          Path target = (Path) map.get(tom_label);
          Path ref = (target.sub(getEnvironment().getPosition()));
          //transform the path to obtain the corresponding one in the pattern
          Term path = tom_empty_list_PathTerm();
          int head;
          while(ref.length()!=0) {
            head = ref.getHead();
            ref  = ref.getTail();
            path = tom_append_list_PathTerm(path,tom_cons_list_PathTerm(head,tom_empty_list_PathTerm()));
          }
          Term newpath = normalize((Term)tom_make_PathForPattern().visitLight(path));
          return newpath;
        }
      }}}}}}return super.visit_Term(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_Label2Path( java.util.HashMap  t0) { return new Label2Path(t0); }



    public static Term normalize(Term path){
      if (tom_is_sort_Term(path)) {{  tom.gom.adt.rule.types.Term  tomMatch477NameNumberfreshSubject_1=(( tom.gom.adt.rule.types.Term )path);if (tom_is_fun_sym_PathTerm(tomMatch477NameNumberfreshSubject_1)) {{  tom.gom.adt.rule.types.Term  tomMatch477NameNumber_freshVar_0=tomMatch477NameNumberfreshSubject_1;{  tom.gom.adt.rule.types.Term  tomMatch477NameNumber_begin_2=tomMatch477NameNumber_freshVar_0;{  tom.gom.adt.rule.types.Term  tomMatch477NameNumber_end_3=tomMatch477NameNumber_freshVar_0;do {{{  tom.gom.adt.rule.types.Term  tomMatch477NameNumber_freshVar_1=tomMatch477NameNumber_end_3;if (!(tom_is_empty_PathTerm_Term(tomMatch477NameNumber_freshVar_1))) {{  tom.gom.adt.rule.types.Term  tomMatch477NameNumber_freshVar_4=tom_get_tail_PathTerm_Term(tomMatch477NameNumber_freshVar_1);if (!(tom_is_empty_PathTerm_Term(tomMatch477NameNumber_freshVar_4))) {{  tom.gom.adt.rule.types.Term  tomMatch477NameNumber_freshVar_5=tom_get_tail_PathTerm_Term(tomMatch477NameNumber_freshVar_4);if ( true ) {

          if (tom_get_head_PathTerm_Term(tomMatch477NameNumber_freshVar_1)==-tom_get_head_PathTerm_Term(tomMatch477NameNumber_freshVar_4)) {
            return normalize(tom_append_list_PathTerm(tom_get_slice_PathTerm(tomMatch477NameNumber_begin_2,tomMatch477NameNumber_end_3,tom_empty_list_PathTerm()),tom_append_list_PathTerm(tomMatch477NameNumber_freshVar_5,tom_empty_list_PathTerm())));
          }
        }}}}}}if (tom_is_empty_PathTerm_Term(tomMatch477NameNumber_end_3)) {tomMatch477NameNumber_end_3=tomMatch477NameNumber_begin_2;} else {tomMatch477NameNumber_end_3=tom_get_tail_PathTerm_Term(tomMatch477NameNumber_end_3);}}} while(!(tom_equal_term_Term(tomMatch477NameNumber_end_3, tomMatch477NameNumber_begin_2)));}}}}}}

      return path;
    }


  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }

}
