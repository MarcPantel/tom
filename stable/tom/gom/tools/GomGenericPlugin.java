/* Generated by TOM (version 2.3rc1): Do not edit this file *//*
 * Gom
 * 
 * Copyright (c) 2005-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Antoine Reilles    e-mail: Antoine.Reilles@loria.fr
 **/

package tom.gom.tools;

import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.platform.OptionManager;
import tom.platform.Plugin;
import tom.platform.StatusHandler;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import tom.gom.Gom;
import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;

public abstract class GomGenericPlugin implements Plugin {

  public GomGenericPlugin(String name) {
    pluginName = name;
  }

  /* Generated by TOM (version 2.3rc1): Do not edit this file *//* Generated by TOM (version 2.3rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static private  char  tom_set_stamp_char( char  c) {  return  c  ;}static private void tom_check_stamp_char( char  c) { ;}static private boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}static private  Character  tom_set_stamp_Character( Character  c) {  return  c  ;}static private void tom_check_stamp_Character( Character  c) { ;}static private boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;}static private boolean tom_is_fun_sym_Char( Character  t) {  return  (t!= null) && (t instanceof Character)  ;}static private  Character  tom_make_Char( char  c) { return  new Character(c) ; }static private  char  tom_get_slot_Char_c( Character  t) {  return  t.charValue()  ;} static private  String  tom_set_stamp_String( String  s) {  return  s  ;}static private void tom_check_stamp_String( String  s) { ;}static private boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}static private boolean tom_is_fun_sym_concString( String  t) {  return  (t!= null) && (t instanceof String)  ;}static private  String  tom_empty_list_concString() { return  "" ; }static private  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }static private  char  tom_get_head_concString_String( String  s) {  return  s.charAt(0)  ;}static private  String  tom_get_tail_concString_String( String  s) {  return  s.substring(1)  ;}static private boolean tom_is_empty_concString_String( String  s) {  return  (s.length()==0)  ;}static private  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  static private  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc1): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ static private boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static private boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static private boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.3rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  static private boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_implementation_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) {  return t ;}static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_set_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) {  return (tom.platform.adt.platformoption.types.PlatformOptionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}static private void tom_check_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}static private boolean tom_terms_equal_PlatformOptionList(Object t1, Object t2) {  return t1.equals(t2) ;}static private boolean tom_is_fun_sym_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList t) {  return (t!= null) && t.isSortPlatformOptionList() ;}static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_empty_list_concPlatformOption() { return tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformOptionList(); }static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_cons_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformOptionList(e,l); }static private  tom.platform.adt.platformoption.types.PlatformOption tom_get_head_concPlatformOption_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) {  return l.getHead() ;}static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_tail_concPlatformOption_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) {  return l.getTail() ;}static private boolean tom_is_empty_concPlatformOption_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) {  return l.isEmpty() ;}static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_append_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList l1,  tom.platform.adt.platformoption.types.PlatformOptionList l2) {    if(tom_is_empty_concPlatformOption_PlatformOptionList(l1)) {     return l2;    } else if(tom_is_empty_concPlatformOption_PlatformOptionList(l2)) {     return l1;    } else if(tom_is_empty_concPlatformOption_PlatformOptionList(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_concPlatformOption_PlatformOptionList(l1))) {     return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_concPlatformOption_PlatformOptionList(l1),l2);    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_concPlatformOption_PlatformOptionList(l1),tom_append_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_concPlatformOption_PlatformOptionList(l1),l2));    }   }  static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slice_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList begin,  tom.platform.adt.platformoption.types.PlatformOptionList end) {    if(tom_terms_equal_PlatformOptionList(begin,end)) {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_empty_list_concPlatformOption();    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_concPlatformOption_PlatformOptionList(begin),( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_slice_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_concPlatformOption_PlatformOptionList(begin),end));    }   }  static private boolean tom_is_fun_sym_emptyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) {  return  (t!= null) && t.isEmpty() ;}static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_emptyPlatformOptionList() { return tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformOptionList(); }static private boolean tom_is_fun_sym_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) {  return  (t!= null) && t.isMany() ;}static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformOptionList(e,l); }static private  tom.platform.adt.platformoption.types.PlatformOption tom_get_slot_manyPlatformOptionList_head( tom.platform.adt.platformoption.types.PlatformOptionList t) {  return  t.getHead() ;}static private  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slot_manyPlatformOptionList_tail( tom.platform.adt.platformoption.types.PlatformOptionList t) {  return  t.getTail() ;}static private  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_implementation_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) {  return t ;}static private  tom.platform.adt.platformoption.types.PlatformBoolean tom_set_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) {  return (tom.platform.adt.platformoption.types.PlatformBoolean)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}static private void tom_check_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}static private boolean tom_terms_equal_PlatformBoolean(Object t1, Object t2) {  return t1.equals(t2) ;}static private boolean tom_is_fun_sym_False( tom.platform.adt.platformoption.types.PlatformBoolean t) {  return  (t!= null) && t.isFalse() ;}static private  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_False() { return  tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformBoolean_False(); }static private boolean tom_is_fun_sym_True( tom.platform.adt.platformoption.types.PlatformBoolean t) {  return  (t!= null) && t.isTrue() ;}static private  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_True() { return  tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformBoolean_True(); }static private  tom.platform.adt.platformoption.types.PlatformValue tom_get_implementation_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return t ;}static private  tom.platform.adt.platformoption.types.PlatformValue tom_set_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return (tom.platform.adt.platformoption.types.PlatformValue)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}static private void tom_check_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}static private boolean tom_terms_equal_PlatformValue(Object t1, Object t2) {  return t1.equals(t2) ;}static private boolean tom_is_fun_sym_IntegerValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return  (t!= null) && t.isIntegerValue() ;}static private  tom.platform.adt.platformoption.types.PlatformValue tom_make_IntegerValue( int  t0) { return  tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformValue_IntegerValue(t0); }static private  int  tom_get_slot_IntegerValue_integerValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return  t.getIntegerValue() ;}static private boolean tom_is_fun_sym_StringValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return  (t!= null) && t.isStringValue() ;}static private  tom.platform.adt.platformoption.types.PlatformValue tom_make_StringValue( String  t0) { return  tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformValue_StringValue(t0); }static private  String  tom_get_slot_StringValue_stringValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return  t.getStringValue() ;}static private boolean tom_is_fun_sym_BooleanValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return  (t!= null) && t.isBooleanValue() ;}static private  tom.platform.adt.platformoption.types.PlatformValue tom_make_BooleanValue( tom.platform.adt.platformoption.types.PlatformBoolean t0) { return  tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformValue_BooleanValue(t0); }static private  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_slot_BooleanValue_booleanValue( tom.platform.adt.platformoption.types.PlatformValue t) {  return  t.getBooleanValue() ;}static private  tom.platform.adt.platformoption.types.PlatformOption tom_get_implementation_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) {  return t ;}static private  tom.platform.adt.platformoption.types.PlatformOption tom_set_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) {  return (tom.platform.adt.platformoption.types.PlatformOption)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}static private void tom_check_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}static private boolean tom_terms_equal_PlatformOption(Object t1, Object t2) {  return t1.equals(t2) ;}static private boolean tom_is_fun_sym_PluginOption( tom.platform.adt.platformoption.types.PlatformOption t) {  return  (t!= null) && t.isPluginOption() ;}static private  tom.platform.adt.platformoption.types.PlatformOption tom_make_PluginOption( String  t0,  String  t1,  String  t2,  tom.platform.adt.platformoption.types.PlatformValue t3,  String  t4) { return  tom.platform.adt.platformoption.PlatformOptionFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePlatformOption_PluginOption(t0, t1, t2, t3, t4); }static private  String  tom_get_slot_PluginOption_name( tom.platform.adt.platformoption.types.PlatformOption t) {  return  t.getName() ;}static private  String  tom_get_slot_PluginOption_altName( tom.platform.adt.platformoption.types.PlatformOption t) {  return  t.getAltName() ;}static private  String  tom_get_slot_PluginOption_description( tom.platform.adt.platformoption.types.PlatformOption t) {  return  t.getDescription() ;}static private  tom.platform.adt.platformoption.types.PlatformValue tom_get_slot_PluginOption_value( tom.platform.adt.platformoption.types.PlatformOption t) {  return  t.getValue() ;}static private  String  tom_get_slot_PluginOption_attrName( tom.platform.adt.platformoption.types.PlatformOption t) {  return  t.getAttrName() ;}  

  /** The name of the plugin. */
  private String pluginName;

  /** the status handler */
  private StatusHandler statusHandler;

  /** the option manager */
  private OptionManager optionManager;
  
  /** The streamanager */
  protected GomStreamManager streamManager;

  /**
   * An accessor method, so that the plugin can see its logger.
   *
   * @return the plugin's logger
   */
  protected Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }

  /**
   * An accessor method, so that the plugin can see the unique Status Handler.
   *
   * @return the common to all Gom plugins statusHandler
   */
  protected StatusHandler getStatusHandler() {
    if(statusHandler == null) {
      findStatusHandler();
    }
    return statusHandler;
  }

  protected GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  public GomStreamManager getStreamManager() {
    return streamManager;
  }

  public void setStreamManager(GomStreamManager m) {
    streamManager = m;
  }

  /**
   * From Plugin interface 
   * @param term the input Object
   */
  public abstract void setArgs(Object[] arg);

  /**
   * From Plugin interface
   * The run() method is not implemented in GomGenericPlugin.
   * The plugin should implement its own run() method itself.
   */
  public abstract void run();

  /**
   * From Plugin interface
   * @return the Object "term"
   */
  public abstract Object[] getArgs();

  /**
   * From Plugin interface
   * The setOptionManager save the reference to the OM.
   */
  public void setOptionManager(OptionManager optionManager) {
    this.optionManager = optionManager;
  }

  /**
   * From OptionOwner interface
   * Returns an empty PlatformOptionList. By default, the plugin is considered
   * to declare no options.
   *
   * @return an empty PlatformOptionList
   */
  public PlatformOptionList getDeclaredOptionList() {
    return tom_make_emptyPlatformOptionList();
  }

  /**
   * From OptionOwner interface
   * Returns an empty PlatformOptionList. By default, the plugin is considered
   * to have no prerequisites.
   *
   * @return an empty PlatformOptionList
   */
  public PlatformOptionList getRequiredOptionList() {
    return tom_make_emptyPlatformOptionList();
  }

  /**
   * From OptionOwner interface
   * By default, no further work is done. Sometimes though, a plugin might need
   * to do more work
   * (for instance if altering the value entails a change in another).
   *
   * @param optionName the option's name
   * @param optionValue the option's value
   */
  public void optionChanged(String optionName, Object optionValue) {
  }

  private void findStatusHandler() {
    Handler[] handlers = Logger.getLogger(Gom.LOGRADICAL).getHandlers();
    for(int i=0;i<handlers.length;i++) {
      if(handlers[i] instanceof StatusHandler) {
        statusHandler = (StatusHandler)handlers[i];
        break;
      }
    }
  }

  public OptionManager getOptionManager() {
    return optionManager;
  }

  public void setOptionValue(String name, Object value) {
    optionManager.setOptionValue(name, value);
  }

  protected Object getOptionValue(String name) {
    return optionManager.getOptionValue(name);
  }

  /**
   * Returns the value of a boolean option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return a boolean that is the option's value
   */
  public boolean getOptionBooleanValue(String optionName) {
    return ((Boolean)getOptionValue(optionName)).booleanValue();
  }

  /**
   * Returns the value of an integer option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return an int that is the option's value
   */
  public int getOptionIntegerValue(String optionName) {
    return ((Integer)getOptionValue(optionName)).intValue();
  }

  /**
   * Returns the value of a string option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return a String that is the option's value
   */
  public String getOptionStringValue(String optionName) {
    return (String) getOptionValue(optionName);
  }

  public String getArgumentArrayString(Object[] arg) {
    String argString = "[";
    for(int i=0;i<arg.length;i++) {
      argString += arg[i].getClass().getName();
      if(i < arg.length-1) {
        argString += ",";
      }
    }
    return argString+"]";
  }
}
