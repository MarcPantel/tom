/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import tom.gom.backend.CodeGen;
import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;
import tom.platform.OptionManager;

public abstract class TemplateHookedClass extends TemplateClass {
  protected HookList hooks;
  protected File tomHomePath;
  protected List importList;
  protected TemplateClass mapping;
  protected OptionManager optionManager;
 
  public TemplateHookedClass(GomClass gomClass,
                             OptionManager manager,
                             File tomHomePath,
                             List importList,
                             TemplateClass mapping) {
    super(gomClass);
    this.optionManager = manager;
    this.hooks = gomClass.getHooks();
    this.tomHomePath = tomHomePath;
    this.importList = importList;
    this.mapping = mapping;
  }

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Code(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Code(Object t) { return  t instanceof tom.gom.adt.code.types.Code ;}private static boolean tom_equal_term_Hook(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Hook(Object t) { return  t instanceof tom.gom.adt.objects.types.Hook ;}private static boolean tom_equal_term_SlotField(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotField(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotField ;}private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotFieldList(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotFieldList ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClass(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClass ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassName(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassName ;}private static boolean tom_equal_term_GomClassList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClassList(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClassList ;}private static boolean tom_equal_term_ClassNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassNameList(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassNameList ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookList(Object t) { return  t instanceof tom.gom.adt.objects.types.HookList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.gom.adt.gom.types.Slot ;}private static boolean tom_equal_term_ArgList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ArgList(Object t) { return  t instanceof tom.gom.adt.gom.types.ArgList ;}private static boolean tom_equal_term_IdKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_IdKind(Object t) { return  t instanceof tom.gom.adt.gom.types.IdKind ;}private static boolean tom_equal_term_GomModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleList ;}private static boolean tom_equal_term_GrammarList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GrammarList(Object t) { return  t instanceof tom.gom.adt.gom.types.GrammarList ;}private static boolean tom_equal_term_TypedProduction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TypedProduction(Object t) { return  t instanceof tom.gom.adt.gom.types.TypedProduction ;}private static boolean tom_equal_term_SectionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SectionList(Object t) { return  t instanceof tom.gom.adt.gom.types.SectionList ;}private static boolean tom_equal_term_OperatorDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDeclList ;}private static boolean tom_equal_term_HookDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDeclList ;}private static boolean tom_equal_term_SortDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDeclList ;}private static boolean tom_equal_term_OperatorDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDecl ;}private static boolean tom_equal_term_GomModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModule(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModule ;}private static boolean tom_equal_term_Pair(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Pair(Object t) { return  t instanceof tom.gom.adt.gom.types.Pair ;}private static boolean tom_equal_term_Section(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Section(Object t) { return  t instanceof tom.gom.adt.gom.types.Section ;}private static boolean tom_equal_term_GomTypeList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomTypeList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomTypeList ;}private static boolean tom_equal_term_ProductionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ProductionList(Object t) { return  t instanceof tom.gom.adt.gom.types.ProductionList ;}private static boolean tom_equal_term_Decl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Decl(Object t) { return  t instanceof tom.gom.adt.gom.types.Decl ;}private static boolean tom_equal_term_ImportList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportList(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportList ;}private static boolean tom_equal_term_Sort(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Sort(Object t) { return  t instanceof tom.gom.adt.gom.types.Sort ;}private static boolean tom_equal_term_SortDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDecl ;}private static boolean tom_equal_term_HookDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDecl ;}private static boolean tom_equal_term_ModuleDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDeclList ;}private static boolean tom_equal_term_Module(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Module(Object t) { return  t instanceof tom.gom.adt.gom.types.Module ;}private static boolean tom_equal_term_FieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_FieldList(Object t) { return  t instanceof tom.gom.adt.gom.types.FieldList ;}private static boolean tom_equal_term_Grammar(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Grammar(Object t) { return  t instanceof tom.gom.adt.gom.types.Grammar ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.gom.adt.gom.types.SlotList ;}private static boolean tom_equal_term_SortList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortList ;}private static boolean tom_equal_term_Arg(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Arg(Object t) { return  t instanceof tom.gom.adt.gom.types.Arg ;}private static boolean tom_equal_term_GomModuleName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleName(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleName ;}private static boolean tom_equal_term_Field(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Field(Object t) { return  t instanceof tom.gom.adt.gom.types.Field ;}private static boolean tom_equal_term_Production(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Production(Object t) { return  t instanceof tom.gom.adt.gom.types.Production ;}private static boolean tom_equal_term_ModuleDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDecl ;}private static boolean tom_equal_term_ModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleList ;}private static boolean tom_equal_term_GomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomType(Object t) { return  t instanceof tom.gom.adt.gom.types.GomType ;}private static boolean tom_equal_term_ImportedModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportedModule(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportedModule ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.gom.adt.gom.types.Option ;}private static boolean tom_equal_term_HookKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookKind(Object t) { return  t instanceof tom.gom.adt.gom.types.HookKind ;}private static boolean tom_is_fun_sym_BlockHook( tom.gom.adt.objects.types.Hook  t) { return  (t instanceof tom.gom.adt.objects.types.hook.BlockHook) ;}private static  tom.gom.adt.code.types.Code  tom_get_slot_BlockHook_Code( tom.gom.adt.objects.types.Hook  t) { return  t.getCode() ;}private static boolean tom_is_fun_sym_InterfaceHook( tom.gom.adt.objects.types.Hook  t) { return  (t instanceof tom.gom.adt.objects.types.hook.InterfaceHook) ;}private static  tom.gom.adt.code.types.Code  tom_get_slot_InterfaceHook_Code( tom.gom.adt.objects.types.Hook  t) { return  t.getCode() ;}private static boolean tom_is_fun_sym_ImportHook( tom.gom.adt.objects.types.Hook  t) { return  (t instanceof tom.gom.adt.objects.types.hook.ImportHook) ;}private static  tom.gom.adt.code.types.Code  tom_get_slot_ImportHook_Code( tom.gom.adt.objects.types.Hook  t) { return  t.getCode() ;}private static boolean tom_is_fun_sym_concHook( tom.gom.adt.objects.types.HookList  t) { return  ((t instanceof tom.gom.adt.objects.types.hooklist.ConsconcHook) || (t instanceof tom.gom.adt.objects.types.hooklist.EmptyconcHook)) ;}private static  tom.gom.adt.objects.types.HookList  tom_empty_list_concHook() { return  tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() ; }private static  tom.gom.adt.objects.types.HookList  tom_cons_list_concHook( tom.gom.adt.objects.types.Hook  e,  tom.gom.adt.objects.types.HookList  l) { return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make(e,l) ; }private static  tom.gom.adt.objects.types.Hook  tom_get_head_concHook_HookList( tom.gom.adt.objects.types.HookList  l) { return  l.getHeadconcHook() ;}private static  tom.gom.adt.objects.types.HookList  tom_get_tail_concHook_HookList( tom.gom.adt.objects.types.HookList  l) { return  l.getTailconcHook() ;}private static boolean tom_is_empty_concHook_HookList( tom.gom.adt.objects.types.HookList  l) { return  l.isEmptyconcHook() ;}   private static   tom.gom.adt.objects.types.HookList  tom_append_list_concHook( tom.gom.adt.objects.types.HookList l1,  tom.gom.adt.objects.types.HookList  l2) {     if( l1.isEmptyconcHook() ) {       return l2;     } else if( l2.isEmptyconcHook() ) {       return l1;     } else if(  l1.getTailconcHook() .isEmptyconcHook() ) {       return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make( l1.getHeadconcHook() ,l2) ;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make( l1.getHeadconcHook() ,tom_append_list_concHook( l1.getTailconcHook() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.HookList  tom_get_slice_concHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end, tom.gom.adt.objects.types.HookList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make( begin.getHeadconcHook() ,( tom.gom.adt.objects.types.HookList )tom_get_slice_concHook( begin.getTailconcHook() ,end,tail)) ;     }   }    

  protected String generateBlock() {
    StringBuffer res = new StringBuffer();
    HookList h = tom_append_list_concHook(hooks,tom_empty_list_concHook());   
    if (tom_is_sort_HookList(h)) {{  tom.gom.adt.objects.types.HookList  tomMatch371NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.HookList )h);if (tom_is_fun_sym_concHook(tomMatch371NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.HookList  tomMatch371NameNumber_freshVar_0=tomMatch371NameNumberfreshSubject_1;{  tom.gom.adt.objects.types.HookList  tomMatch371NameNumber_begin_2=tomMatch371NameNumber_freshVar_0;{  tom.gom.adt.objects.types.HookList  tomMatch371NameNumber_end_3=tomMatch371NameNumber_freshVar_0;do {{{  tom.gom.adt.objects.types.HookList  tomMatch371NameNumber_freshVar_1=tomMatch371NameNumber_end_3;if (!(tom_is_empty_concHook_HookList(tomMatch371NameNumber_freshVar_1))) {if (tom_is_fun_sym_BlockHook(tom_get_head_concHook_HookList(tomMatch371NameNumber_freshVar_1))) {{  tom.gom.adt.code.types.Code  tomMatch371NameNumber_freshVar_6=tom_get_slot_BlockHook_Code(tom_get_head_concHook_HookList(tomMatch371NameNumber_freshVar_1));{  tom.gom.adt.objects.types.HookList  tomMatch371NameNumber_freshVar_4=tom_get_tail_concHook_HookList(tomMatch371NameNumber_freshVar_1);if ( true ) {

        res.append(CodeGen.generateCode(tomMatch371NameNumber_freshVar_6));
        res.append("\n");
      }}}}}}if (tom_is_empty_concHook_HookList(tomMatch371NameNumber_end_3)) {tomMatch371NameNumber_end_3=tomMatch371NameNumber_begin_2;} else {tomMatch371NameNumber_end_3=tom_get_tail_concHook_HookList(tomMatch371NameNumber_end_3);}}} while(!(tom_equal_term_HookList(tomMatch371NameNumber_end_3, tomMatch371NameNumber_begin_2)));}}}}}}

    return res.toString();
  }

  protected String generateImport() {
    StringBuffer res = new StringBuffer();
    HookList h = tom_append_list_concHook(hooks,tom_empty_list_concHook());   
    if (tom_is_sort_HookList(h)) {{  tom.gom.adt.objects.types.HookList  tomMatch372NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.HookList )h);if (tom_is_fun_sym_concHook(tomMatch372NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.HookList  tomMatch372NameNumber_freshVar_0=tomMatch372NameNumberfreshSubject_1;{  tom.gom.adt.objects.types.HookList  tomMatch372NameNumber_begin_2=tomMatch372NameNumber_freshVar_0;{  tom.gom.adt.objects.types.HookList  tomMatch372NameNumber_end_3=tomMatch372NameNumber_freshVar_0;do {{{  tom.gom.adt.objects.types.HookList  tomMatch372NameNumber_freshVar_1=tomMatch372NameNumber_end_3;if (!(tom_is_empty_concHook_HookList(tomMatch372NameNumber_freshVar_1))) {if (tom_is_fun_sym_ImportHook(tom_get_head_concHook_HookList(tomMatch372NameNumber_freshVar_1))) {{  tom.gom.adt.code.types.Code  tomMatch372NameNumber_freshVar_6=tom_get_slot_ImportHook_Code(tom_get_head_concHook_HookList(tomMatch372NameNumber_freshVar_1));{  tom.gom.adt.objects.types.HookList  tomMatch372NameNumber_freshVar_4=tom_get_tail_concHook_HookList(tomMatch372NameNumber_freshVar_1);if ( true ) {

        res.append(CodeGen.generateCode(tomMatch372NameNumber_freshVar_6));
        res.append("\n");
      }}}}}}if (tom_is_empty_concHook_HookList(tomMatch372NameNumber_end_3)) {tomMatch372NameNumber_end_3=tomMatch372NameNumber_begin_2;} else {tomMatch372NameNumber_end_3=tom_get_tail_concHook_HookList(tomMatch372NameNumber_end_3);}}} while(!(tom_equal_term_HookList(tomMatch372NameNumber_end_3, tomMatch372NameNumber_begin_2)));}}}}}}

    return res.toString();
  }

  protected String generateInterface() {
    StringBuffer res = new StringBuffer();
    HookList h = tom_append_list_concHook(hooks,tom_empty_list_concHook());   
    if (tom_is_sort_HookList(h)) {{  tom.gom.adt.objects.types.HookList  tomMatch373NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.HookList )h);if (tom_is_fun_sym_concHook(tomMatch373NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.HookList  tomMatch373NameNumber_freshVar_0=tomMatch373NameNumberfreshSubject_1;{  tom.gom.adt.objects.types.HookList  tomMatch373NameNumber_begin_2=tomMatch373NameNumber_freshVar_0;{  tom.gom.adt.objects.types.HookList  tomMatch373NameNumber_end_3=tomMatch373NameNumber_freshVar_0;do {{{  tom.gom.adt.objects.types.HookList  tomMatch373NameNumber_freshVar_1=tomMatch373NameNumber_end_3;if (!(tom_is_empty_concHook_HookList(tomMatch373NameNumber_freshVar_1))) {if (tom_is_fun_sym_InterfaceHook(tom_get_head_concHook_HookList(tomMatch373NameNumber_freshVar_1))) {{  tom.gom.adt.code.types.Code  tomMatch373NameNumber_freshVar_6=tom_get_slot_InterfaceHook_Code(tom_get_head_concHook_HookList(tomMatch373NameNumber_freshVar_1));{  tom.gom.adt.objects.types.HookList  tomMatch373NameNumber_freshVar_4=tom_get_tail_concHook_HookList(tomMatch373NameNumber_freshVar_1);if ( true ) {

        res.append(",");
        res.append(CodeGen.generateCode(tomMatch373NameNumber_freshVar_6));
        res.append("\n");
      }}}}}}if (tom_is_empty_concHook_HookList(tomMatch373NameNumber_end_3)) {tomMatch373NameNumber_end_3=tomMatch373NameNumber_begin_2;} else {tomMatch373NameNumber_end_3=tom_get_tail_concHook_HookList(tomMatch373NameNumber_end_3);}}} while(!(tom_equal_term_HookList(tomMatch373NameNumber_end_3, tomMatch373NameNumber_begin_2)));}}}}}}

    return res.toString();
  }

  /*
   * The function for generating the file is extended, to be able to call Tom if
   * necessary (i.e. if there are user defined hooks)
   */
  public int generateFile() {
    if (hooks.isEmptyconcHook()) {
      try {
        File output = fileToGenerate();
        // make sure the directory exists
        output.getParentFile().mkdirs();
        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
        generate(writer);
        writer.flush();
        writer.close();
      } catch(Exception e) {
        e.printStackTrace();
        return 1;
      }
    } else { /* We need to call tom to generate the file */
      File xmlFile = new File(tomHomePath,"Tom.xml");
      if(!xmlFile.exists()) {
        getLogger().log(Level.FINER,"Failed to get canonical path for "+xmlFile.getPath());
      }
      String file_path = null;
      try {
        File output = fileToGenerate();
        file_path = output.getCanonicalPath();
      } catch (IOException e) {
        getLogger().log(Level.FINER,"Failed to get canonical path for "+fileName());
      }

      ArrayList tomParams = new ArrayList();      

      try {
        Iterator it = importList.iterator();
        while(it.hasNext()){
          String importPath = ((File)it.next()).getCanonicalPath();
          tomParams.add("--import");
          tomParams.add(importPath);
        }
      } catch (IOException e) {
        getLogger().log(Level.SEVERE,"Failed compute import list: " + e.getMessage());
      }

      tomParams.add("-X");
      tomParams.add(xmlFile.getPath());
      if(Boolean.TRUE == optionManager.getOptionValue("optimize")) {
        tomParams.add("--optimize");
      }
      if(Boolean.TRUE == optionManager.getOptionValue("optimize2")) {
        tomParams.add("--optimize2");
      }
      if(optionManager.getOptionValue("wall")==Boolean.TRUE) {
        tomParams.add("--wall");
      }
      if(optionManager.getOptionValue("intermediate")==Boolean.TRUE) {
        tomParams.add("--intermediate");
      }
      if(optionManager.getOptionValue("verbose")==Boolean.TRUE) {
        tomParams.add("--verbose");
      }
      tomParams.add("--output");
      tomParams.add(file_path);
      tomParams.add("-");     

      //String[] params = {"-X",xmlFile.getPath(),"--optimize","--optimize2","--output",file_path,"-"};
      //String[] params = {"-X",config_xml,"--output",file_path,"-"};

      //System.out.println("params: " + tomParams);

      try {
        StringWriter gen = new StringWriter();
        generate(gen);
        InputStream backupIn = System.in;
        System.setIn(new DataInputStream(new StringBufferInputStream(gen.toString())));
        int res = tom.engine.Tom.exec((String[])tomParams.toArray(new String[tomParams.size()]));
        //      int res = tom.engine.Tom.exec(params);
        System.setIn(backupIn);
        if (res != 0 ) {
          getLogger().log(Level.SEVERE, tom.gom.GomMessage.tomFailure.getMessage(),new Object[]{file_path});
          return res;
        }
      } catch (IOException e) {
        getLogger().log(Level.SEVERE,
            "Failed generate Tom code: " + e.getMessage());
      }
    }
    return 0;
  }

  /** the class logger instance*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }

}
