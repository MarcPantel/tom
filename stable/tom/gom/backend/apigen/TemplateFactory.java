/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 * 
 **/

package tom.gom.backend.apigen;

import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.objects.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class TemplateFactory extends TemplateClass {
  ClassNameList factories;
  GomClassList sorts;
  GomClassList operators;

	/* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private  char  tom_set_stamp_char( char  c) {  return  c  ;}private void tom_check_stamp_char( char  c) { ;}private boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private  Character  tom_set_stamp_Character( Character  c) {  return  c  ;}private void tom_check_stamp_Character( Character  c) { ;}private boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_Char( Character  t) {  return  (t!= null) && (t instanceof Character)  ;}private  Character  tom_make_Char( char  c) { return  new Character(c) ; }private  char  tom_get_slot_Char_c( Character  t) {  return  t.charValue()  ;} private  String  tom_set_stamp_String( String  s) {  return  s  ;}private void tom_check_stamp_String( String  s) { ;}private boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_concString( String  t) {  return  (t!= null) && (t instanceof String)  ;}private  String  tom_empty_list_concString() { return  "" ; }private  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }private  char  tom_get_head_concString_String( String  s) {  return  s.charAt(0)  ;}private  String  tom_get_tail_concString_String( String  s) {  return  s.substring(1)  ;}private boolean tom_is_empty_concString_String( String  s) {  return  (s.length()==0)  ;}private  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  private  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private  tom.gom.adt.objects.types.GomClassList tom_get_implementation_GomClassList( tom.gom.adt.objects.types.GomClassList t) {  return t ;}private  tom.gom.adt.objects.types.GomClassList tom_set_stamp_GomClassList( tom.gom.adt.objects.types.GomClassList t) {  return (tom.gom.adt.objects.types.GomClassList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomClassList( tom.gom.adt.objects.types.GomClassList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomClassList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGomClass( tom.gom.adt.objects.types.GomClassList t) {  return (t!= null) && t.isSortGomClassList() ;}private  tom.gom.adt.objects.types.GomClassList tom_empty_list_concGomClass() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(); }private  tom.gom.adt.objects.types.GomClassList tom_cons_list_concGomClass( tom.gom.adt.objects.types.GomClass e,  tom.gom.adt.objects.types.GomClassList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(e,l); }private  tom.gom.adt.objects.types.GomClass tom_get_head_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_tail_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.getTail() ;}private boolean tom_is_empty_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.GomClassList tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList l2) {    if(tom_is_empty_concGomClass_GomClassList(l1)) {     return l2;    } else if(tom_is_empty_concGomClass_GomClassList(l2)) {     return l1;    } else if(tom_is_empty_concGomClass_GomClassList(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(l1))) {     return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(l1),tom_append_list_concGomClass(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(l1),l2));    }   }  private  tom.gom.adt.objects.types.GomClassList tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList begin,  tom.gom.adt.objects.types.GomClassList end) {    if(tom_terms_equal_GomClassList(begin,end)) {      return ( tom.gom.adt.objects.types.GomClassList)tom_empty_list_concGomClass();    } else {      return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(begin),( tom.gom.adt.objects.types.GomClassList)tom_get_slice_concGomClass(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGomClassList( tom.gom.adt.objects.types.GomClassList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.GomClassList tom_make_emptyGomClassList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(); }private boolean tom_is_fun_sym_manyGomClassList( tom.gom.adt.objects.types.GomClassList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.GomClassList tom_make_manyGomClassList( tom.gom.adt.objects.types.GomClass e,  tom.gom.adt.objects.types.GomClassList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(e,l); }private  tom.gom.adt.objects.types.GomClass tom_get_slot_manyGomClassList_head( tom.gom.adt.objects.types.GomClassList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_manyGomClassList_tail( tom.gom.adt.objects.types.GomClassList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_implementation_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return t ;}private  tom.gom.adt.objects.types.SlotFieldList tom_set_stamp_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return (tom.gom.adt.objects.types.SlotFieldList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotFieldList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList t) {  return (t!= null) && t.isSortSlotFieldList() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_empty_list_concSlotField() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(); }private  tom.gom.adt.objects.types.SlotFieldList tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField e,  tom.gom.adt.objects.types.SlotFieldList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(e,l); }private  tom.gom.adt.objects.types.SlotField tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.getTail() ;}private boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList l1,  tom.gom.adt.objects.types.SlotFieldList l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private  tom.gom.adt.objects.types.SlotFieldList tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList begin,  tom.gom.adt.objects.types.SlotFieldList end) {    if(tom_terms_equal_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList)tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_make_emptySlotFieldList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(); }private boolean tom_is_fun_sym_manySlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_make_manySlotFieldList( tom.gom.adt.objects.types.SlotField e,  tom.gom.adt.objects.types.SlotFieldList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(e,l); }private  tom.gom.adt.objects.types.SlotField tom_get_slot_manySlotFieldList_head( tom.gom.adt.objects.types.SlotFieldList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_manySlotFieldList_tail( tom.gom.adt.objects.types.SlotFieldList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.SlotField tom_get_implementation_SlotField( tom.gom.adt.objects.types.SlotField t) {  return t ;}private  tom.gom.adt.objects.types.SlotField tom_set_stamp_SlotField( tom.gom.adt.objects.types.SlotField t) {  return (tom.gom.adt.objects.types.SlotField)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotField( tom.gom.adt.objects.types.SlotField t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotField(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField t) {  return  (t!= null) && t.isSlotField() ;}private  tom.gom.adt.objects.types.SlotField tom_make_SlotField( String  t0,  tom.gom.adt.objects.types.ClassName t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotField_SlotField(t0, t1); }private  String  tom_get_slot_SlotField_name( tom.gom.adt.objects.types.SlotField t) {  return  t.getName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SlotField_domain( tom.gom.adt.objects.types.SlotField t) {  return  t.getDomain() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_implementation_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return t ;}private  tom.gom.adt.objects.types.ClassNameList tom_set_stamp_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return (tom.gom.adt.objects.types.ClassNameList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ClassNameList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concClassName( tom.gom.adt.objects.types.ClassNameList t) {  return (t!= null) && t.isSortClassNameList() ;}private  tom.gom.adt.objects.types.ClassNameList tom_empty_list_concClassName() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(); }private  tom.gom.adt.objects.types.ClassNameList tom_cons_list_concClassName( tom.gom.adt.objects.types.ClassName e,  tom.gom.adt.objects.types.ClassNameList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(e,l); }private  tom.gom.adt.objects.types.ClassName tom_get_head_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_tail_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.getTail() ;}private boolean tom_is_empty_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.ClassNameList tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList l2) {    if(tom_is_empty_concClassName_ClassNameList(l1)) {     return l2;    } else if(tom_is_empty_concClassName_ClassNameList(l2)) {     return l1;    } else if(tom_is_empty_concClassName_ClassNameList(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(l1))) {     return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(l1),tom_append_list_concClassName(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(l1),l2));    }   }  private  tom.gom.adt.objects.types.ClassNameList tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList begin,  tom.gom.adt.objects.types.ClassNameList end) {    if(tom_terms_equal_ClassNameList(begin,end)) {      return ( tom.gom.adt.objects.types.ClassNameList)tom_empty_list_concClassName();    } else {      return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(begin),( tom.gom.adt.objects.types.ClassNameList)tom_get_slice_concClassName(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.ClassNameList tom_make_emptyClassNameList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(); }private boolean tom_is_fun_sym_manyClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.ClassNameList tom_make_manyClassNameList( tom.gom.adt.objects.types.ClassName e,  tom.gom.adt.objects.types.ClassNameList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(e,l); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_manyClassNameList_head( tom.gom.adt.objects.types.ClassNameList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_manyClassNameList_tail( tom.gom.adt.objects.types.ClassNameList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.ClassName tom_get_implementation_ClassName( tom.gom.adt.objects.types.ClassName t) {  return t ;}private  tom.gom.adt.objects.types.ClassName tom_set_stamp_ClassName( tom.gom.adt.objects.types.ClassName t) {  return (tom.gom.adt.objects.types.ClassName)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ClassName( tom.gom.adt.objects.types.ClassName t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName t) {  return  (t!= null) && t.isClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassName_ClassName(t0, t1); }private  String  tom_get_slot_ClassName_pkg( tom.gom.adt.objects.types.ClassName t) {  return  t.getPkg() ;}private  String  tom_get_slot_ClassName_name( tom.gom.adt.objects.types.ClassName t) {  return  t.getName() ;}private  tom.gom.adt.objects.types.GomClass tom_get_implementation_GomClass( tom.gom.adt.objects.types.GomClass t) {  return t ;}private  tom.gom.adt.objects.types.GomClass tom_set_stamp_GomClass( tom.gom.adt.objects.types.GomClass t) {  return (tom.gom.adt.objects.types.GomClass)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomClass( tom.gom.adt.objects.types.GomClass t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomClass(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_TomMapping( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isTomMapping() ;}private  tom.gom.adt.objects.types.GomClass tom_make_TomMapping( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClassList t1,  tom.gom.adt.objects.types.GomClassList t2) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_TomMapping(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_TomMapping_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_TomMapping_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_TomMapping_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VoidFwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVoidFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VoidFwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.GomClassList t3,  tom.gom.adt.objects.types.GomClassList t4) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VoidFwdClass(t0, t1, t2, t3, t4); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VoidFwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VoidFwdClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VoidFwdClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VoidFwdClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VoidFwdClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_FwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_FwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.GomClassList t3,  tom.gom.adt.objects.types.GomClassList t4) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_FwdClass(t0, t1, t2, t3, t4); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FwdClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FwdClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VisitorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVisitorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VisitorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClassList t1,  tom.gom.adt.objects.types.GomClassList t2) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VisitorClass(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VisitorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VisitorClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VisitorClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_FactoryClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isFactoryClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_FactoryClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassNameList t1,  tom.gom.adt.objects.types.GomClassList t2,  tom.gom.adt.objects.types.GomClassList t3) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_FactoryClass(t0, t1, t2, t3); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_FactoryClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_FactoryClass_importedFactories( tom.gom.adt.objects.types.GomClass t) {  return  t.getImportedFactories() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FactoryClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FactoryClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VariadicOperatorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVariadicOperatorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VariadicOperatorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassName t4,  tom.gom.adt.objects.types.SlotFieldList t5,  tom.gom.adt.objects.types.ClassName t6,  String  t7) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VariadicOperatorClass(t0, t1, t2, t3, t4, t5, t6, t7); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_sortName( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_VariadicOperatorClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_empty( tom.gom.adt.objects.types.GomClass t) {  return  t.getEmpty() ;}private  String  tom_get_slot_VariadicOperatorClass_operator( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperator() ;}private boolean tom_is_fun_sym_OperatorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isOperatorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_OperatorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassName t4,  tom.gom.adt.objects.types.SlotFieldList t5) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_OperatorClass(t0, t1, t2, t3, t4, t5); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_sortName( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_OperatorClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private boolean tom_is_fun_sym_SortClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isSortClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_SortClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassNameList t4,  tom.gom.adt.objects.types.SlotFieldList t5) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_SortClass(t0, t1, t2, t3, t4, t5); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_SortClass_operators( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperators() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_SortClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private boolean tom_is_fun_sym_AbstractTypeClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isAbstractTypeClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_AbstractTypeClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassNameList t3) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_AbstractTypeClass(t0, t1, t2, t3); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_AbstractTypeClass_sortList( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortList() ;}private boolean tom_is_fun_sym_VisitableFwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVisitableFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VisitableFwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClass t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VisitableFwdClass(t0, t1); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VisitableFwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClass tom_get_slot_VisitableFwdClass_fwd( tom.gom.adt.objects.types.GomClass t) {  return  t.getFwd() ;}  

  public TemplateFactory(ClassName className, ClassNameList factories, GomClassList sorts, GomClassList operators) {
    super(className);
    this.factories = factories;
    this.sorts = sorts;
    this.operators = operators;
  }

  /* We may want to return the stringbuffer itself in the future, or directly write to a Stream */
  public String generate() {
    StringBuffer out = new StringBuffer();

    out.append("package "+getPackage()+";\n");
    out.append("\n");
    out.append("public class "+className()+" {\n");

    out.append("\tprivate aterm.pure.PureFactory factory;\n");

    // factories
    ClassNameList consum = factories;
    while(!consum.isEmpty()) {
      ClassName factoryName = consum.getHead();
      consum = consum.getTail();
      out.append("\tprivate "+fullClassName(factoryName)+" "+fieldName(factoryName)+";\n");
    }

    // protos: no protos for operators with different factories
     if(operators instanceof  tom.gom.adt.objects.types.GomClassList) { { tom.gom.adt.objects.types.GomClassList tom_match1_1=(( tom.gom.adt.objects.types.GomClassList)operators); if(tom_is_fun_sym_concGomClass(tom_match1_1) ||  false ) { { tom.gom.adt.objects.types.GomClassList tom_match1_1_list1=tom_match1_1; { tom.gom.adt.objects.types.GomClassList tom_match1_1_begin1=tom_match1_1_list1; { tom.gom.adt.objects.types.GomClassList tom_match1_1_end1=tom_match1_1_list1;{ while (!(tom_is_empty_concGomClass_GomClassList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1;{ { tom.gom.adt.objects.types.GomClass tom_match1_1_2=tom_get_head_concGomClass_GomClassList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concGomClass_GomClassList(tom_match1_1_list1); if(tom_is_fun_sym_OperatorClass(tom_match1_1_2) ||  false ) { { tom.gom.adt.objects.types.GomClass tom_op=tom_match1_1_2; { tom.gom.adt.objects.types.ClassName tom_match1_1_2_sortName=tom_get_slot_OperatorClass_sortName(tom_match1_1_2); { tom.gom.adt.objects.types.ClassName tom_match1_1_2_factoryName=tom_get_slot_OperatorClass_factoryName(tom_match1_1_2); if( true ) {

        if (tom_match1_1_2_factoryName== this.className) {
          out.append("\n");
          out.append("\tprivate aterm.AFun "+fun(tom_op)+";\n");
          out.append("\tprivate "+fullClassName(tom_match1_1_2_sortName)+" "+proto(tom_op)+";\n");
          out.append("\tprivate aterm.ATerm "+pattern(tom_op)+";\n");
        }
       }}}} }}tom_match1_1_end1=tom_get_tail_concGomClass_GomClassList(tom_match1_1_end1);} }tom_match1_1_list1=tom_match1_1_begin1;}}}} }} }


    // constructor
    out.append("\tprivate "+className()+"() {\n");
    out.append("\t\tthis.factory = aterm.pure.SingletonFactory.getInstance();\n");
    out.append("\t}\n");
    out.append("\tprivate static "+className()+" instance = null;\n");
    out.append("\tpublic static "+className()+" getInstance() {\n");
    out.append("\t\tif (instance == null) {\n");
    out.append("\t\t\tinstance = new "+className()+"();\n");
    out.append("\t\t\tinstance.initialize();\n");
    out.append("\t\t}\n");
    out.append("\t\treturn instance;\n");
    out.append("\t}\n");
    out.append("\n");
    out.append("\tpublic aterm.pure.PureFactory getPureFactory() {\n");
    out.append("\t\treturn factory;\n");
    out.append("\t}\n");
    out.append("\n");

    // initialization
    out.append("\tprivate void initialize() {\n");
    out.append("\n");
    /* initialize factories */
    consum = factories;
    while(!consum.isEmpty()) {
      ClassName factoryName = consum.getHead();
      consum = consum.getTail();
      out.append("\t\tthis."+fieldName(factoryName)+" = "+fullClassName(factoryName)+".getInstance();\n");
    }
     if(operators instanceof  tom.gom.adt.objects.types.GomClassList) { { tom.gom.adt.objects.types.GomClassList tom_match2_1=(( tom.gom.adt.objects.types.GomClassList)operators); if(tom_is_fun_sym_concGomClass(tom_match2_1) ||  false ) { { tom.gom.adt.objects.types.GomClassList tom_match2_1_list1=tom_match2_1; { tom.gom.adt.objects.types.GomClassList tom_match2_1_begin1=tom_match2_1_list1; { tom.gom.adt.objects.types.GomClassList tom_match2_1_end1=tom_match2_1_list1;{ while (!(tom_is_empty_concGomClass_GomClassList(tom_match2_1_end1))) {tom_match2_1_list1=tom_match2_1_end1;{ { tom.gom.adt.objects.types.GomClass tom_match2_1_2=tom_get_head_concGomClass_GomClassList(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_concGomClass_GomClassList(tom_match2_1_list1); if(tom_is_fun_sym_OperatorClass(tom_match2_1_2) ||  false ) { { tom.gom.adt.objects.types.GomClass tom_op=tom_match2_1_2; { tom.gom.adt.objects.types.ClassName tom_match2_1_2_className=tom_get_slot_OperatorClass_className(tom_match2_1_2); { tom.gom.adt.objects.types.ClassName tom_match2_1_2_factoryName=tom_get_slot_OperatorClass_factoryName(tom_match2_1_2); if( true ) {

        if (tom_match2_1_2_factoryName== this.className) {
          out.append("\t\t"+pattern(tom_op)+" = factory.parse("+atermPattern(tom_op)+");\n");
          out.append("\t\t"+fun(tom_op)+" = factory.makeAFun("+atermFunArgs(tom_op)+");\n");
          out.append("\t\t"+proto(tom_op)+" = new "+fullClassName(tom_match2_1_2_className)+"(this);\n");
          out.append("\n");
        }
       }}}} }}tom_match2_1_end1=tom_get_tail_concGomClass_GomClassList(tom_match2_1_end1);} }tom_match2_1_list1=tom_match2_1_begin1;}}}} }} }

    out.append("\t}\n");

    // methods to make operators
     if(operators instanceof  tom.gom.adt.objects.types.GomClassList) { { tom.gom.adt.objects.types.GomClassList tom_match3_1=(( tom.gom.adt.objects.types.GomClassList)operators); if(tom_is_fun_sym_concGomClass(tom_match3_1) ||  false ) { { tom.gom.adt.objects.types.GomClassList tom_match3_1_list1=tom_match3_1; { tom.gom.adt.objects.types.GomClassList tom_match3_1_begin1=tom_match3_1_list1; { tom.gom.adt.objects.types.GomClassList tom_match3_1_end1=tom_match3_1_list1;{ while (!(tom_is_empty_concGomClass_GomClassList(tom_match3_1_end1))) {tom_match3_1_list1=tom_match3_1_end1;{ { tom.gom.adt.objects.types.GomClass tom_match3_1_2=tom_get_head_concGomClass_GomClassList(tom_match3_1_list1);tom_match3_1_list1=tom_get_tail_concGomClass_GomClassList(tom_match3_1_list1); if(tom_is_fun_sym_OperatorClass(tom_match3_1_2) ||  false ) { { tom.gom.adt.objects.types.GomClass tom_op=tom_match3_1_2; { tom.gom.adt.objects.types.ClassName tom_match3_1_2_className=tom_get_slot_OperatorClass_className(tom_match3_1_2); { tom.gom.adt.objects.types.ClassName tom_match3_1_2_factoryName=tom_get_slot_OperatorClass_factoryName(tom_match3_1_2); { tom.gom.adt.objects.types.ClassName tom_match3_1_2_sortName=tom_get_slot_OperatorClass_sortName(tom_match3_1_2); { tom.gom.adt.objects.types.ClassName tom_factory=tom_match3_1_2_factoryName; { tom.gom.adt.objects.types.ClassName tom_sortName=tom_match3_1_2_sortName; if( true ) {

        out.append("\tpublic "+fullClassName(tom_sortName)+" "+make(tom_op)+"(aterm.AFun fun, aterm.ATerm[] args, aterm.ATermList annos) {\n");
        if (tom_factory== this.className) {
          out.append("\t\tsynchronized ("+proto(tom_op)+") {\n");
          out.append("\t\t\t"+proto(tom_op)+".initHashCode(annos, fun, args);\n");
          out.append("\t\t\treturn ("+fullClassName(tom_sortName)+") factory.build("+proto(tom_op)+");\n");
          out.append("\t\t}\n");
        } else { /* trampoline*/
          out.append("\t\treturn "+fieldName(tom_factory)+"."+make(tom_op)+"(fun, args, annos);\n");
        }
        out.append("\t}\n");
        out.append("\n");

        out.append("\tpublic "+fullClassName(tom_sortName)+" "+make(tom_op)+"("+childArgsListWithType(tom_op)+") {\n");
        if (tom_factory== this.className) {
          out.append("\t\taterm.ATerm[] args = new aterm.ATerm[] {"+childArgsList(tom_op)+"};\n");
          out.append("\t\treturn "+make(tom_op)+"("+fun(tom_op)+", args, factory.getEmpty());\n");
        } else { /* trampoline*/
          out.append("\t\treturn "+fieldName(tom_factory)+"."+make(tom_op)+"("+childArgsList(tom_op)+");\n");
        }
        out.append("\t}\n");
        out.append("\n");

        if (tom_factory== this.className) {
          out.append("\tprotected "+fullClassName(tom_sortName)+" "+makefromterm(tom_op)+"(aterm.ATerm trm) {\n");
          out.append("\t\tjava.util.List children = trm.match("+pattern(tom_op)+");\n");
          out.append("\n");
          out.append("\t\tif(children != null) {\n");
          out.append("\t\t\treturn "+make(tom_op)+"(\n");
          out.append("\t\t\t"+fromTermChilds(tom_op,"children")+"\n");
          out.append("\t\t\t);\n");
          out.append("\t\t}\n");
          out.append("\t\telse {\n");
          out.append("\t\treturn null;\n");
          out.append("\t\t}\n");
          out.append("\t}\n");
          out.append("\n");
        } else { /* no need of trampoline for opFromTerm */ }

        out.append("\tpublic aterm.ATerm toTerm("+fullClassName(tom_match3_1_2_className)+" arg) {\n");
        if (tom_factory== this.className) {
          out.append("\t\tjava.util.List args = new java.util.LinkedList();\n");
          out.append("\t\t"+toTermChilds(tom_op,"args", "arg"));
          out.append("\t\treturn factory.make("+pattern(tom_op)+", args);\n");
        } else { /* trampoline */
          out.append("\t\treturn "+fieldName(tom_factory)+".toTerm(arg);\n");
        }
        out.append("\t}\n");
        out.append("\n");
       }}}}}}} }}tom_match3_1_end1=tom_get_tail_concGomClass_GomClassList(tom_match3_1_end1);} }tom_match3_1_list1=tom_match3_1_begin1;}}}} }} }


    // methods for the sorts
     if(sorts instanceof  tom.gom.adt.objects.types.GomClassList) { { tom.gom.adt.objects.types.GomClassList tom_match4_1=(( tom.gom.adt.objects.types.GomClassList)sorts); if(tom_is_fun_sym_concGomClass(tom_match4_1) ||  false ) { { tom.gom.adt.objects.types.GomClassList tom_match4_1_list1=tom_match4_1; { tom.gom.adt.objects.types.GomClassList tom_match4_1_begin1=tom_match4_1_list1; { tom.gom.adt.objects.types.GomClassList tom_match4_1_end1=tom_match4_1_list1;{ while (!(tom_is_empty_concGomClass_GomClassList(tom_match4_1_end1))) {tom_match4_1_list1=tom_match4_1_end1;{ { tom.gom.adt.objects.types.GomClass tom_match4_1_2=tom_get_head_concGomClass_GomClassList(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_concGomClass_GomClassList(tom_match4_1_list1); if(tom_is_fun_sym_SortClass(tom_match4_1_2) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match4_1_2_className=tom_get_slot_SortClass_className(tom_match4_1_2); { tom.gom.adt.objects.types.ClassName tom_match4_1_2_factoryName=tom_get_slot_SortClass_factoryName(tom_match4_1_2); { tom.gom.adt.objects.types.ClassNameList tom_match4_1_2_operators=tom_get_slot_SortClass_operators(tom_match4_1_2); { tom.gom.adt.objects.types.ClassName tom_sortName=tom_match4_1_2_className; { tom.gom.adt.objects.types.ClassName tom_factory=tom_match4_1_2_factoryName; { tom.gom.adt.objects.types.ClassNameList tom_sortOperators=tom_match4_1_2_operators; if( true ) {

        out.append("\tpublic "+fullClassName(tom_sortName)+" "+makesortfromterm(tom_sortName)+"(aterm.ATerm trm) {\n");
        if (tom_factory== this.className) {
          out.append("\t\t"+fullClassName(tom_sortName)+" tmp;\n");

          while(!tom_sortOperators.isEmpty()) {
            ClassName operatorName = tom_sortOperators.getHead();
            tom_sortOperators= tom_sortOperators.getTail();
            out.append("\t\ttmp = "+makefromterm(tom_sortName,operatorName)+"(trm);\n");
            out.append("\t\tif (tmp != null) {\n");
            out.append("\t\t\treturn tmp;\n");
            out.append("\t\t}\n");
          }
          out.append("\t\tthrow new IllegalArgumentException(\"This is not a "+className(tom_sortName)+"\");\n");
        } else { /* trampoline */
          out.append("\t\treturn "+fieldName(tom_factory)+"."+makesortfromterm(tom_sortName)+"(trm);\n");
        }
        out.append("\t}\n");
        out.append("\n");
       }}}}}}} }}tom_match4_1_end1=tom_get_tail_concGomClass_GomClassList(tom_match4_1_end1);} }tom_match4_1_list1=tom_match4_1_begin1;}}}} }} }


    out.append("/* FromFile, FromString,...*/\n");
    out.append("\n");
    out.append("\n");


    out.append("}");
    
    return out.toString();
  }

  private String fun(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match5_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match5_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match5_1_className=tom_get_slot_OperatorClass_className(tom_match5_1); { tom.gom.adt.objects.types.ClassName tom_match5_1_sortName=tom_get_slot_OperatorClass_sortName(tom_match5_1); if( true ) {

        return "fun_"+className(tom_match5_1_sortName)+"_"+className(tom_match5_1_className);
       }}} }} }

		throw new GomRuntimeException("TemplateFactory:fun got a strange operatorclass: "+op); 
  }
  private String proto(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match6_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match6_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match6_1_className=tom_get_slot_OperatorClass_className(tom_match6_1); { tom.gom.adt.objects.types.ClassName tom_match6_1_sortName=tom_get_slot_OperatorClass_sortName(tom_match6_1); if( true ) {

        return "proto_"+className(tom_match6_1_sortName)+"_"+className(tom_match6_1_className);
       }}} }} }

		throw new GomRuntimeException("TemplateFactory:proto got a strange operatorclass: "+op); 
  }
  private String pattern(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match7_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match7_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match7_1_className=tom_get_slot_OperatorClass_className(tom_match7_1); { tom.gom.adt.objects.types.ClassName tom_match7_1_sortName=tom_get_slot_OperatorClass_sortName(tom_match7_1); if( true ) {

        return "pattern_"+className(tom_match7_1_sortName)+"_"+className(tom_match7_1_className);
       }}} }} }

		throw new GomRuntimeException("TemplateFactory:pattern got a strange operatorclass: "+op); 
  }
  private String atermPattern(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match8_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match8_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match8_1_className=tom_get_slot_OperatorClass_className(tom_match8_1); { tom.gom.adt.objects.types.SlotFieldList tom_match8_1_slots=tom_get_slot_OperatorClass_slots(tom_match8_1); if( true ) {

        String res = className(tom_match8_1_className) + "(";
        String args = "";
        SlotFieldList slotList = tom_match8_1_slots;
        while(!slotList.isEmpty()) {
          SlotField head = slotList.getHead();
          slotList = slotList.getTail();
           if(head instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match9_1=(( tom.gom.adt.objects.types.SlotField)head); if(tom_is_fun_sym_SlotField(tom_match9_1) ||  false ) { if( true ) {

              if (!args.equals("")) {
                args+= ", ";
              }
              // TODO: handle builtins
              args+= "<term>";
             } }} }

        }
        return "\"" + res + args + ")\"";
       }}} }} }

		throw new GomRuntimeException("TemplateFactory:childArgsList got a strange operatorclass: "+op); 
  }
  private String childArgsList(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match10_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match10_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match10_1_slots=tom_get_slot_OperatorClass_slots(tom_match10_1); if( true ) {

        String res = "";
        SlotFieldList slotList = tom_match10_1_slots;
        while(!slotList.isEmpty()) {
          SlotField head = slotList.getHead();
          slotList = slotList.getTail();
           if(head instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match11_1=(( tom.gom.adt.objects.types.SlotField)head); if(tom_is_fun_sym_SlotField(tom_match11_1) ||  false ) { { String  tom_match11_1_name=tom_get_slot_SlotField_name(tom_match11_1); { tom.gom.adt.objects.types.ClassName tom_match11_1_domain=tom_get_slot_SlotField_domain(tom_match11_1); { String  tom_name=tom_match11_1_name; { tom.gom.adt.objects.types.ClassName tom_domain=tom_match11_1_domain; if( true ) {

              if (!res.equals("")) {
                res+= ", ";
              }
              if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
                res+= "_"+tom_name;
              } else {
                if (tom_domain.equals(tom_make_ClassName("","int"))) {
                  res+= "(aterm.ATerm) factory.makeInt(_"+tom_name+")";
                } else if (tom_domain.equals(tom_make_ClassName("","String"))) { 
                  res+= "(aterm.ATerm) factory.makeAppl(factory.makeAFun(_"+tom_name+",0 , true))";
                } else {
                  throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
                }
              }
             }}}}} }} }

        }
        return res;
       }} }} }

		throw new GomRuntimeException("TemplateFactory:childArgsList got a strange operatorclass: "+op); 
  }
  private String childArgsListWithType(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match12_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match12_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match12_1_slots=tom_get_slot_OperatorClass_slots(tom_match12_1); if( true ) {

        String res = "";
        SlotFieldList slotList = tom_match12_1_slots;
        while(!slotList.isEmpty()) {
          SlotField head = slotList.getHead();
          slotList = slotList.getTail();
           if(head instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match13_1=(( tom.gom.adt.objects.types.SlotField)head); if(tom_is_fun_sym_SlotField(tom_match13_1) ||  false ) { { String  tom_match13_1_name=tom_get_slot_SlotField_name(tom_match13_1); { tom.gom.adt.objects.types.ClassName tom_match13_1_domain=tom_get_slot_SlotField_domain(tom_match13_1); if( true ) {

              if (!res.equals("")) {
                res+= ", ";
              }
              res+= fullClassName(tom_match13_1_domain) + " _"+tom_match13_1_name;
             }}} }} }

        }
        return res;
       }} }} }

		throw new GomRuntimeException("TemplateFactory:childArgsListWithType got a strange operatorclass: "+op); 
  }
  private String atermFunArgs(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match14_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match14_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match14_1_className=tom_get_slot_OperatorClass_className(tom_match14_1); { tom.gom.adt.objects.types.ClassName tom_match14_1_sortName=tom_get_slot_OperatorClass_sortName(tom_match14_1); { tom.gom.adt.objects.types.SlotFieldList tom_match14_1_slots=tom_get_slot_OperatorClass_slots(tom_match14_1); if( true ) {

        return "\"_"+className(tom_match14_1_sortName)+"_"+className(tom_match14_1_className)+"\", "+tom_match14_1_slots.getLength()+", false";
       }}}} }} }

		throw new GomRuntimeException("TemplateFactory:atermFunArgs got a strange operatorclass: "+op); 
  }
  private String make(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match15_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match15_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match15_1_className=tom_get_slot_OperatorClass_className(tom_match15_1); { tom.gom.adt.objects.types.ClassName tom_match15_1_sortName=tom_get_slot_OperatorClass_sortName(tom_match15_1); if( true ) {

        return "make"+className(tom_match15_1_sortName)+"_"+className(tom_match15_1_className);
       }}} }} }

		throw new GomRuntimeException("TemplateFactory:make got a strange operatorclass: "+op); 
  }
  private String makefromterm(GomClass op) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match16_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match16_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match16_1_className=tom_get_slot_OperatorClass_className(tom_match16_1); { tom.gom.adt.objects.types.ClassName tom_match16_1_sortName=tom_get_slot_OperatorClass_sortName(tom_match16_1); if( true ) {

        return makefromterm(tom_match16_1_sortName,tom_match16_1_className);
       }}} }} }

		throw new GomRuntimeException("TemplateFactory:makefromterm got a strange operatorclass: "+op); 
  }
  private String makefromterm(ClassName sortName, ClassName opName) {
    return className(sortName)+"_"+className(opName)+"FromTerm";
  }

  private String fromTermChilds(GomClass op, String list) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match17_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match17_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match17_1_slots=tom_get_slot_OperatorClass_slots(tom_match17_1); if( true ) {

        String res = "";
        int index = 0;
        SlotFieldList slotList = tom_match17_1_slots;
        while(!slotList.isEmpty()) {
          SlotField head = slotList.getHead();
          slotList = slotList.getTail();
           if(head instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match18_1=(( tom.gom.adt.objects.types.SlotField)head); if(tom_is_fun_sym_SlotField(tom_match18_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match18_1_domain=tom_get_slot_SlotField_domain(tom_match18_1); { tom.gom.adt.objects.types.ClassName tom_domain=tom_match18_1_domain; if( true ) {

              if (!res.equals("")) {
                res+= ", ";
              }
              if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
                res+= makesortfromterm(tom_domain) + "((aterm.ATerm) "+list+".get("+index+"))";
              } else {
                if (tom_domain.equals(tom_make_ClassName("","int"))) {
                  res+= "((Integer) "+list+".get("+index+")).intValue()";
                } else if (tom_domain.equals(tom_make_ClassName("","String"))) { 
                  res+= "(String) "+list+".get("+index+")";
                } else {
                  throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
                }
              }
              index++;
             }}} }} }

        }
        return res;
       }} }} }

		throw new GomRuntimeException("TemplateFactory:childArgsListWithType got a strange operatorclass: "+op); 
  }
  private String makesortfromterm(ClassName clsName) {
     if(clsName instanceof  tom.gom.adt.objects.types.ClassName) { { tom.gom.adt.objects.types.ClassName tom_match19_1=(( tom.gom.adt.objects.types.ClassName)clsName); if(tom_is_fun_sym_ClassName(tom_match19_1) ||  false ) { { String  tom_match19_1_name=tom_get_slot_ClassName_name(tom_match19_1); if( true ) {

        return tom_match19_1_name+"FromTerm";
       }} }} }

    throw new GomRuntimeException("TemplateFactory:makesortfromterm got a strange ClassName");
  }
  private String toTermChilds(GomClass op, String list, String arg) {
     if(op instanceof  tom.gom.adt.objects.types.GomClass) { { tom.gom.adt.objects.types.GomClass tom_match20_1=(( tom.gom.adt.objects.types.GomClass)op); if(tom_is_fun_sym_OperatorClass(tom_match20_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match20_1_slots=tom_get_slot_OperatorClass_slots(tom_match20_1); if( true ) {

        String res = "";
        SlotFieldList slotList = tom_match20_1_slots;
        while(!slotList.isEmpty()) {
          SlotField head = slotList.getHead();
          slotList = slotList.getTail();
          if(!GomEnvironment.getInstance().isBuiltinClass(head.getDomain())) {
            res+= list+".add("+arg+"."+getMethod(head)+"().toTerm());\n";
          } else {
            if ((head.getDomain()).equals(tom_make_ClassName("","int"))) {
              res+= list+".add(new Integer("+arg+"."+getMethod(head)+"()));\n";
            } else if (head.getDomain().equals(tom_make_ClassName("","String"))) { 
              res+= list+".add("+arg+"."+getMethod(head)+"());\n";
            } else {
              throw new GomRuntimeException("Builtin " + head.getDomain() + " not supported");
            }
          }
        }
        return res;
       }} }} }

		throw new GomRuntimeException("TemplateFactory:childArgsListWithType got a strange operatorclass: "+op); 
  }
}
