/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.strategy;

import java.io.*;
import java.util.logging.*;
import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class MakeOpTemplate extends TemplateClass {
  ClassName operator;
  SlotFieldList slotList;

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_sort_String(String t) {  return  t instanceof String  ;}  private static boolean tom_equal_term_SlotField(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotField(Object t) {  return  t instanceof tom.gom.adt.objects.types.SlotField  ;}private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotFieldList(Object t) {  return  t instanceof tom.gom.adt.objects.types.SlotFieldList  ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_GomClass(Object t) {  return  t instanceof tom.gom.adt.objects.types.GomClass  ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_ClassName(Object t) {  return  t instanceof tom.gom.adt.objects.types.ClassName  ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_HookList(Object t) {  return  t instanceof tom.gom.adt.objects.types.HookList  ;}private static boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField  t) {  return  t instanceof tom.gom.adt.objects.types.slotfield.SlotField  ;}private static  String  tom_get_slot_SlotField_Name( tom.gom.adt.objects.types.SlotField  t) {  return  t.getName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SlotField_Domain( tom.gom.adt.objects.types.SlotField  t) {  return  t.getDomain()  ;}private static boolean tom_is_fun_sym_OperatorClass( tom.gom.adt.objects.types.GomClass  t) {  return  t instanceof tom.gom.adt.objects.types.gomclass.OperatorClass  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_ClassName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getClassName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getAbstractType()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_ExtendsType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getExtendsType()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_Mapping( tom.gom.adt.objects.types.GomClass  t) {  return  t.getMapping()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_SortName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getSortName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_Visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getVisitor()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_OperatorClass_Slots( tom.gom.adt.objects.types.GomClass  t) {  return  t.getSlots()  ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_OperatorClass_Hooks( tom.gom.adt.objects.types.GomClass  t) {  return  t.getHooks()  ;}private static boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName  t) {  return  t instanceof tom.gom.adt.objects.types.classname.ClassName  ;}private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1); }private static  String  tom_get_slot_ClassName_Pkg( tom.gom.adt.objects.types.ClassName  t) {  return  t.getPkg()  ;}private static  String  tom_get_slot_ClassName_Name( tom.gom.adt.objects.types.ClassName  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField || t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_empty_list_concSlotField() { return  tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() ; }private static  tom.gom.adt.objects.types.SlotFieldList  tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField  e,  tom.gom.adt.objects.types.SlotFieldList  l) { return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(e,l) ; }private static  tom.gom.adt.objects.types.SlotField  tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getHeadconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getTailconcSlotField()  ;}private static boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.isEmptyconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList  l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end) {    if(tom_equal_term_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }   

  /**
   * The argument is an operator class, and this template generates the
   * assotiated MakeOp strategy
   */
  public MakeOpTemplate(GomClass gomClass) {
    super(gomClass);
    ClassName clsName = this.className;
     if (tom_is_sort_ClassName(clsName)) { { tom.gom.adt.objects.types.ClassName  tomMatch1Position1=(( tom.gom.adt.objects.types.ClassName )clsName); if ( ( tom_is_fun_sym_ClassName(tomMatch1Position1) ||  false  ) ) { { String  tom_pkg=tom_get_slot_ClassName_Pkg(tomMatch1Position1); { String  tom_name=tom_get_slot_ClassName_Name(tomMatch1Position1); if ( true ) {

        String newpkg = tom_pkg.replaceFirst(".types.",".strategy.");
        String newname = "Make_"+tom_name;
        this.className = tom_make_ClassName(newpkg,newname);
       } } } } } } if (tom_is_sort_GomClass(gomClass)) { { tom.gom.adt.objects.types.GomClass  tomMatch2Position1=(( tom.gom.adt.objects.types.GomClass )gomClass); if ( ( tom_is_fun_sym_OperatorClass(tomMatch2Position1) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_opclass=tom_get_slot_OperatorClass_ClassName(tomMatch2Position1); { tom.gom.adt.objects.types.SlotFieldList  tom_slots=tom_get_slot_OperatorClass_Slots(tomMatch2Position1); if ( true ) {



        this.operator = tom_opclass;
        this.slotList = tom_slots;
        return;
       } } } } } }

    throw new GomRuntimeException(
        "Wrong argument for MakeOpTemplate: " + gomClass);
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {
writer.write("\npackage "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getPackage()+";\n\npublic class "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" implements tom.library.strategy.mutraveler.MuStrategy, tom.library.sl.Strategy {\n  /* Do not manage an internal position, since the arguments is not really\n   * used\n   */\n  public void setPosition(tom.library.strategy.mutraveler.Position pos) { ; /* who cares */ }\n\n  public tom.library.strategy.mutraveler.Position getPosition() {\n    throw new RuntimeException(\"Construction strategies have no position\");\n  }\n\n  public boolean hasPosition() { return false; }\n\n  protected tom.library.sl.Environment environment;\n  public void setEnvironment(tom.library.sl.Environment env) {\n    this.environment = env;\n  }\n\n  public tom.library.sl.Environment getEnvironment() {\n    if(environment!=null) {\n      return environment;\n    } else {\n      throw new RuntimeException(\"environment not initialized\");\n    }\n  }\n\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateMembers()+"\n\n  public int getChildCount() {\n    return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildCount()+";\n  }\n  public jjtraveler.Visitable getChildAt(int index) {\n    switch(index) {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinsGetCases()+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n  public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable child) {\n    switch(index) {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinMakeCases("child")+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable[] getChildren() {\n    return new jjtraveler.Visitable[]{"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateMembersList()+"};\n  }\n\n  public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateMembersSetChildren("children")+"\n    return this;\n  }\n\n  /*\n   * Apply the strategy, and returns the subject in case of VisitFailure\n   */\n  public jjtraveler.Visitable apply(jjtraveler.Visitable any) {\n    try {\n      return tom.library.strategy.mutraveler.MuTraveler.init(this).visit(any);\n    } catch (jjtraveler.VisitFailure f) {\n      return any;\n    }\n  }\n\n  public tom.library.sl.Visitable fire(tom.library.sl.Visitable any) {\n    tom.library.sl.AbstractStrategy.init(this,new tom.library.sl.Environment());\n    getEnvironment().setRoot(any);\n    visit();\n    if (getEnvironment().getStatus() == tom.library.sl.Environment.SUCCESS) {\n      return getEnvironment().getRoot();\n    } else {\n      throw new tom.library.sl.FireException();\n    }\n  }\n\n  public tom.library.strategy.mutraveler.MuStrategy accept(tom.library.strategy.mutraveler.reflective.StrategyVisitorFwd v) throws jjtraveler.VisitFailure {\n    return v.visit_Strategy(this);\n  }\n\n  public tom.library.sl.Strategy accept(tom.library.sl.reflective.StrategyFwd v) throws jjtraveler.VisitFailure {\n    return v.visit_Strategy(this);\n  }\n\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childListWithType(slotList)+") {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateMembersInit()+"\n  }\n\n  /**\n    * Builds a new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className(operator)+"\n    * If one of the sub-strategies application fails, throw a VisitFailure\n    */\n  public jjtraveler.Visitable visit(jjtraveler.Visitable any) throws jjtraveler.VisitFailure {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+computeNewChilds(slotList,"any")+"\n    return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(operator)+".make("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genMakeArguments(slotList)+");\n  }\n\n  public void visit() {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+computeSLNewChilds(slotList,"any")+"\n    getEnvironment().setSubject((tom.library.sl.Visitable)"/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(operator)+".make("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genMakeArguments(slotList)+"));\n    return;\n  }\n}\n"







































































































);
  }

  public String generateMapping() {
    return "\n%op Strategy "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genStratArgs(slotList,"arg")+") {\n  is_fsym(t) { (t!=null) && t instanceof ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+")}\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+genGetSlot(slotList,"arg")+"\n  make("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genMakeArguments(slotList)+") { new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genMakeArguments(slotList)+") }\n}\n"





;
  }

  private String genGetSlot(SlotFieldList slots, String arg) {
    StringBuffer out = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if (tom_is_sort_SlotField(head)) { { tom.gom.adt.objects.types.SlotField  tomMatch3Position1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tomMatch3Position1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tomMatch3Position1); if ( true ) {

          out.append("\n  get_slot("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_name)+", t) { "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_name)+" }"
);
         } } } } }

    }
    return out.toString();
  }
  private String genStratArgs(SlotFieldList slots,String arg) {
    StringBuffer args = new StringBuffer();
    int i = 0;
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();

       if (tom_is_sort_SlotField(head)) { { tom.gom.adt.objects.types.SlotField  tomMatch4Position1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tomMatch4Position1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tomMatch4Position1); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch4Position1); if ( true ) {

          args.append((i==0?"":", "));
          args.append(fieldName(tom_name));
          if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
            args.append(":Strategy");
          } else {
            args.append(":");
            args.append(fullClassName(tom_domain));
          }
         } } } } } }

      i++;
    }
    return args.toString();
  }

  private String genNonBuiltin() {
    StringBuffer out = new StringBuffer();
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch5Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch5Position1) ||  false  ) ) { {int tomMatch5Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch5Position1List1=tomMatch5Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch5Position1Begin1=tomMatch5Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch5Position1End1=tomMatch5Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch5Position1End1))) {tomMatch5Position1List1=tomMatch5Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch5Position1Save2=tomMatch5Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch5Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch5Position1List1);tomMatch5Position1Index1=tomMatch5Position1Index1 + 1;tomMatch5Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch5Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch5Position1Position2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch5Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          out.append("true, ");
        } else {
          out.append("false, ");
        }
       } } } }tomMatch5Position1List1=tomMatch5Position1Save2; } }tomMatch5Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch5Position1End1); } }tomMatch5Position1List1=tomMatch5Position1Begin1; } } } } } } } }

    if (out.length()!=0) {
      return out.substring(0,out.length()-2);
    } else {
      return out.toString();
    }
  }

  private int nonBuiltinChildCount() {
    int count = 0;
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch6Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch6Position1) ||  false  ) ) { {int tomMatch6Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch6Position1List1=tomMatch6Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch6Position1Begin1=tomMatch6Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch6Position1End1=tomMatch6Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch6Position1End1))) {tomMatch6Position1List1=tomMatch6Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch6Position1Save2=tomMatch6Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch6Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch6Position1List1);tomMatch6Position1Index1=tomMatch6Position1Index1 + 1;tomMatch6Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch6Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch6Position1Position2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch6Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          count++;
        }
       } } } }tomMatch6Position1List1=tomMatch6Position1Save2; } }tomMatch6Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch6Position1End1); } }tomMatch6Position1List1=tomMatch6Position1Begin1; } } } } } } } }

    return count;
  }

  /**
    * Store a strategy for each non builtin child, the builtin value otherwise
    */
  private String generateMembers() {
    String res="";
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch7Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch7Position1) ||  false  ) ) { {int tomMatch7Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch7Position1List1=tomMatch7Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch7Position1Begin1=tomMatch7Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch7Position1End1=tomMatch7Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch7Position1End1))) {tomMatch7Position1List1=tomMatch7Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch7Position1Save2=tomMatch7Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch7Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch7Position1List1);tomMatch7Position1Index1=tomMatch7Position1Index1 + 1;tomMatch7Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch7Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch7Position1Position2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tomMatch7Position1Position2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch7Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "  private jjtraveler.reflective.VisitableVisitor "+fieldName(tom_fieldName)+";\n";
        } else {
          res += "  private "+fullClassName(tom_domain)+" "+fieldName(tom_fieldName)+";\n";
        }
       } } } } }tomMatch7Position1List1=tomMatch7Position1Save2; } }tomMatch7Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch7Position1End1); } }tomMatch7Position1List1=tomMatch7Position1Begin1; } } } } } } } }

    return res;
  }

  private String generateMembersList() {
    String res="";
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch8Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch8Position1) ||  false  ) ) { {int tomMatch8Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch8Position1List1=tomMatch8Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch8Position1Begin1=tomMatch8Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch8Position1End1=tomMatch8Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch8Position1End1))) {tomMatch8Position1List1=tomMatch8Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch8Position1Save2=tomMatch8Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch8Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch8Position1List1);tomMatch8Position1Index1=tomMatch8Position1Index1 + 1;tomMatch8Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch8Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch8Position1Position2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tomMatch8Position1Position2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch8Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += fieldName(tom_fieldName) + ", ";
        } else {
          // Skip builtin childs
        }
       } } } } }tomMatch8Position1List1=tomMatch8Position1Save2; } }tomMatch8Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch8Position1End1); } }tomMatch8Position1List1=tomMatch8Position1Begin1; } } } } } } } }

    if (res.length() != 0) {
      return res.substring(0,res.length()-2);
    } else {
      return res;
    }
  }

  /**
    * Generate "case: " instructions for each non builtin child
    * XXX: this code in duplicated from OperatorTemplate, need to be factorized
    */
  private String nonBuiltinsGetCases() {
    String res = "";
    int index = 0;
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch9Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch9Position1) ||  false  ) ) { {int tomMatch9Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch9Position1List1=tomMatch9Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch9Position1Begin1=tomMatch9Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch9Position1End1=tomMatch9Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch9Position1End1))) {tomMatch9Position1List1=tomMatch9Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch9Position1Save2=tomMatch9Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch9Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch9Position1List1);tomMatch9Position1Index1=tomMatch9Position1Index1 + 1;tomMatch9Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch9Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch9Position1Position2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tomMatch9Position1Position2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch9Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "      case "+index+": return "+fieldName(tom_fieldName)+";\n";
          index++;
        }
       } } } } }tomMatch9Position1List1=tomMatch9Position1Save2; } }tomMatch9Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch9Position1End1); } }tomMatch9Position1List1=tomMatch9Position1Begin1; } } } } } } } }

    return res;
  }

  private String nonBuiltinMakeCases(String argName) {
    String res = "";
    int index = 0;
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch10Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch10Position1) ||  false  ) ) { {int tomMatch10Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch10Position1List1=tomMatch10Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch10Position1Begin1=tomMatch10Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch10Position1End1=tomMatch10Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch10Position1End1))) {tomMatch10Position1List1=tomMatch10Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch10Position1Save2=tomMatch10Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch10Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch10Position1List1);tomMatch10Position1Index1=tomMatch10Position1Index1 + 1;tomMatch10Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch10Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch10Position1Position2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tomMatch10Position1Position2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch10Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "      case "/* Generated by TOM (version 2.5alpha): Do not edit this file */+index+": "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_fieldName)+" = (jjtraveler.reflective.VisitableVisitor) "/* Generated by TOM (version 2.5alpha): Do not edit this file */+argName+"; return this;\n"
;
          index++;
        }
       } } } } }tomMatch10Position1List1=tomMatch10Position1Save2; } }tomMatch10Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch10Position1End1); } }tomMatch10Position1List1=tomMatch10Position1Begin1; } } } } } } } }

    return res;
  }
  
  /**
    * Generate the child list to be used as function parameter declaration
    * Each non builtin child has type VisitableVisitor
    */
  private String childListWithType(SlotFieldList slots) {
    StringBuffer res = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if (tom_is_sort_SlotField(head)) { { tom.gom.adt.objects.types.SlotField  tomMatch11Position1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tomMatch11Position1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tomMatch11Position1); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch11Position1); if ( true ) {

          if (res.length()!=0) {
            res.append(", ");
          }
          if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
            res.append("jjtraveler.reflective.VisitableVisitor ");
            res.append(fieldName(tom_name));
          } else {
            res.append(fullClassName(tom_domain));
            res.append(" ");
            res.append(fieldName(tom_name));
          }
         } } } } } }

    }
    return res.toString();
  }

  /**
   * Generate code to initialize all members of the strategy
   */
  private String computeNewChilds(SlotFieldList slots, String argName) {
    String res = "";
     if (tom_is_sort_SlotFieldList(slots)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch12Position1=(( tom.gom.adt.objects.types.SlotFieldList )slots); if ( ( tom_is_fun_sym_concSlotField(tomMatch12Position1) ||  false  ) ) { {int tomMatch12Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch12Position1List1=tomMatch12Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch12Position1Begin1=tomMatch12Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch12Position1End1=tomMatch12Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch12Position1End1))) {tomMatch12Position1List1=tomMatch12Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch12Position1Save2=tomMatch12Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch12Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch12Position1List1);tomMatch12Position1Index1=tomMatch12Position1Index1 + 1;tomMatch12Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch12Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch12Position1Position2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tomMatch12Position1Position2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch12Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(tom_domain)+" new"/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_fieldName)+" = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(tom_domain)+") "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_fieldName)+".visit("/* Generated by TOM (version 2.5alpha): Do not edit this file */+argName+");\n"

;
        }
       } } } } }tomMatch12Position1List1=tomMatch12Position1Save2; } }tomMatch12Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch12Position1End1); } }tomMatch12Position1List1=tomMatch12Position1Begin1; } } } } } } } }

    return res;
  }

  /**
   * Generate code to initialize all members of the strategy with the sl scheme
   */
  private String computeSLNewChilds(SlotFieldList slots, String argName) {
    String res = "";
     if (tom_is_sort_SlotFieldList(slots)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch13Position1=(( tom.gom.adt.objects.types.SlotFieldList )slots); if ( ( tom_is_fun_sym_concSlotField(tomMatch13Position1) ||  false  ) ) { {int tomMatch13Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch13Position1List1=tomMatch13Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch13Position1Begin1=tomMatch13Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch13Position1End1=tomMatch13Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch13Position1End1))) {tomMatch13Position1List1=tomMatch13Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch13Position1Save2=tomMatch13Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch13Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch13Position1List1);tomMatch13Position1Index1=tomMatch13Position1Index1 + 1;tomMatch13Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch13Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch13Position1Position2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tomMatch13Position1Position2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch13Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "\n    ((tom.library.sl.Strategy)"/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_fieldName)+").visit();\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(tom_domain)+" new"/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_fieldName)+" = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(tom_domain)+") getEnvironment().getSubject();\n"


;
        }
       } } } } }tomMatch13Position1List1=tomMatch13Position1Save2; } }tomMatch13Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch13Position1End1); } }tomMatch13Position1List1=tomMatch13Position1Begin1; } } } } } } } }

    return res;
  }

  /**
    * Generate the computation of all new childs for the target
    */
  private String generateMembersInit() {
    String res = "";
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch14Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch14Position1) ||  false  ) ) { {int tomMatch14Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch14Position1List1=tomMatch14Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch14Position1Begin1=tomMatch14Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch14Position1End1=tomMatch14Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch14Position1End1))) {tomMatch14Position1List1=tomMatch14Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch14Position1Save2=tomMatch14Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch14Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch14Position1List1);tomMatch14Position1Index1=tomMatch14Position1Index1 + 1;tomMatch14Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch14Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch14Position1Position2) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tomMatch14Position1Position2); if ( true ) {

        res += "    this."+fieldName(tom_name)+" = "+fieldName(tom_name)+";\n";
       } } } }tomMatch14Position1List1=tomMatch14Position1Save2; } }tomMatch14Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch14Position1End1); } }tomMatch14Position1List1=tomMatch14Position1Begin1; } } } } } } } }

    return res;
  }

  private String generateMembersSetChildren(String array) {
    String res = "";
    int index = 0;
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch15Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch15Position1) ||  false  ) ) { {int tomMatch15Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch15Position1List1=tomMatch15Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch15Position1Begin1=tomMatch15Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch15Position1End1=tomMatch15Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch15Position1End1))) {tomMatch15Position1List1=tomMatch15Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch15Position1Save2=tomMatch15Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch15Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch15Position1List1);tomMatch15Position1Index1=tomMatch15Position1Index1 + 1;tomMatch15Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch15Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch15Position1Position2) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tomMatch15Position1Position2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch15Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "    this."+fieldName(tom_name)+" = (jjtraveler.reflective.VisitableVisitor)"+array+"["+index+"];\n";
          index++;
        }
       } } } } }tomMatch15Position1List1=tomMatch15Position1Save2; } }tomMatch15Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch15Position1End1); } }tomMatch15Position1List1=tomMatch15Position1Begin1; } } } } } } } }

    return res;
  }

  /**
    * Generate the argument list for the operator construction, using the
    * values computed by computeNewChilds
    */
  private String genMakeArguments(SlotFieldList slots) {
    StringBuffer res = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if (tom_is_sort_SlotField(head)) { { tom.gom.adt.objects.types.SlotField  tomMatch16Position1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tomMatch16Position1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tomMatch16Position1); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch16Position1); if ( true ) {

          if (res.length()!=0) {
            res.append(", ");
          }
          if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
            res.append(" new");
            res.append(fieldName(tom_name));
          } else {
            res.append(" ");
            res.append(fieldName(tom_name));
          }
         } } } } } }

    }
    return res.toString();
  }
  private String fieldName(String fieldName) {
    return "_"+fieldName;
  }

  /** the class logger instance*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
