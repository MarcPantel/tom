/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.strategy;

import java.io.*;
import java.util.logging.*;
import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class SOpTemplate extends TemplateClass {
  ClassName operator;
  SlotFieldList slotList;

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */  

  /*
   * The argument is an operator class, and this template generates the
   * assotiated _Op strategy
   */
  public SOpTemplate(GomClass gomClass) {
    super(gomClass);
    ClassName clsName = this.className;
    {if ( (clsName instanceof tom.gom.adt.objects.types.ClassName) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch426NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.ClassName )clsName);if ( (tomMatch426NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.classname.ClassName) ) {{  String  tomMatch426NameNumber_freshVar_0= tomMatch426NameNumberfreshSubject_1.getPkg() ;{  String  tomMatch426NameNumber_freshVar_1= tomMatch426NameNumberfreshSubject_1.getName() ;if ( true ) {

        String newpkg = tomMatch426NameNumber_freshVar_0.replaceFirst(".types.",".strategy.");
        String newname = "_"+tomMatch426NameNumber_freshVar_1;
        this.className =  tom.gom.adt.objects.types.classname.ClassName.make(newpkg, newname) ;
      }}}}}}}{if ( (gomClass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch427NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomClass);if ( (tomMatch427NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.OperatorClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch427NameNumber_freshVar_0= tomMatch427NameNumberfreshSubject_1.getClassName() ;{  tom.gom.adt.objects.types.SlotFieldList  tomMatch427NameNumber_freshVar_1= tomMatch427NameNumberfreshSubject_1.getSlotFields() ;if ( true ) {



        this.operator = tomMatch427NameNumber_freshVar_0;
        this.slotList = tomMatch427NameNumber_freshVar_1;
        return;
      }}}}}}}

    throw new GomRuntimeException(
        "Wrong argument for SOpTemplate: " + gomClass);
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {
writer.write("\npackage "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getPackage()+";\n\npublic class "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+" implements tom.library.sl.Strategy {\n  private static final String msg = \"Not an "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className(operator)+"\";\n  /* Manage an internal environment */\n  protected tom.library.sl.Environment environment;\n  \n  public void setEnvironment(tom.library.sl.Environment env) {\n    this.environment = env;\n  }\n\n  public tom.library.sl.Environment getEnvironment() {\n    if(environment!=null) {\n      return environment;\n    } else {\n      throw new RuntimeException(\"environment not initialized\");\n    }\n  }\n\n  private tom.library.sl.Strategy[] args;\n\n  public tom.library.sl.Strategy getArgument(int i) {\n    return args[i];\n  }\n  public void setArgument(int i, tom.library.sl.Strategy child) {\n    args[i]= child;\n  }\n  public int getChildCount() {\n    return args.length;\n  }\n  public tom.library.sl.Visitable getChildAt(int i) {\n      return args[i];\n  }\n  public tom.library.sl.Visitable setChildAt(int i, tom.library.sl.Visitable child) {\n    args[i]= (tom.library.sl.Strategy) child;\n    return this;\n  }\n\n  public tom.library.sl.Visitable[] getChildren() {\n    return args.clone();\n  }\n\n  public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {\n    tom.library.sl.Strategy[] newArgs = new tom.library.sl.Strategy[children.length];\n    for(int i = 0; i < children.length; i++) {\n      newArgs[i] = (tom.library.sl.Strategy) children[i];\n    }\n    args = newArgs;\n    return this;\n  }\n\n  public tom.library.sl.Visitable visit(tom.library.sl.Environment envt) throws tom.library.sl.VisitFailure {\n    return (tom.library.sl.Visitable) visit(envt,tom.library.sl.VisitableIntrospector.getInstance());\n  }\n\n  public tom.library.sl.Visitable visit(tom.library.sl.Visitable any) throws tom.library.sl.VisitFailure{\n    return (tom.library.sl.Visitable) visit(any,tom.library.sl.VisitableIntrospector.getInstance());\n  }\n\n  public tom.library.sl.Visitable visitLight(tom.library.sl.Visitable any) throws tom.library.sl.VisitFailure {\n    return (tom.library.sl.Visitable) visitLight(any,tom.library.sl.VisitableIntrospector.getInstance());\n  }\n\n  public Object visit(Object any, tom.library.sl.Introspector i) throws tom.library.sl.VisitFailure {\n    tom.library.sl.AbstractStrategy.init(this,new tom.library.sl.Environment());\n    environment.setRoot(any);\n    int status = visit(i);\n    if(status == tom.library.sl.Environment.SUCCESS) {\n      return environment.getRoot();\n    } else {\n      throw new tom.library.sl.VisitFailure();\n    }\n  }\n\n  public tom.library.sl.Strategy accept(tom.library.sl.reflective.StrategyFwd v) throws tom.library.sl.VisitFailure {\n    return v.visit_Strategy(this,tom.library.sl.VisitableIntrospector.getInstance());\n  }\n\n\n  public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+genConstrArgs(slotList.length(),"tom.library.sl.Strategy arg",false)+") {\n    args = new tom.library.sl.Strategy[] {"/* Generated by TOM (version 2.6alpha): Do not edit this file */+genConstrArgs(slotList.length(),"arg",false)+"};\n  }\n\n  public Object visit(tom.library.sl.Environment envt, tom.library.sl.Introspector i) throws tom.library.sl.VisitFailure {\n    setEnvironment(envt);\n    int status = visit(i);\n    if(status == tom.library.sl.Environment.SUCCESS) {\n      return environment.getRoot();\n    } else {\n      throw new tom.library.sl.VisitFailure();\n    }\n  }\n\n  public Object visitLight(Object any, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {\n    if(any instanceof "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(operator)+") {\n      Object result = any;\n      Object[] childs = null;\n      for (int i = 0, nbi = 0; i < "/* Generated by TOM (version 2.6alpha): Do not edit this file */+slotList.length()+"; i++) {\n          Object oldChild = introspector.getChildAt(any,nbi);\n          Object newChild = args[i].visitLight(oldChild,introspector);\n          if(childs != null) {\n            childs[nbi] = newChild;\n          } else if(newChild != oldChild) {\n            // allocate the array, and fill it\n            childs = introspector.getChildren(any);\n            childs[nbi] = newChild;\n          }\n          nbi++;\n      }\n      if(childs!=null) {\n        result = introspector.setChildren(any,childs);\n      }\n      return result;\n    } else {\n      throw new tom.library.sl.VisitFailure(msg);\n    }\n  }\n\n  public int visit(tom.library.sl.Introspector introspector) {\n    Object any = environment.getSubject();\n    if(any instanceof "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(operator)+") {\n      Object[] childs = null;\n      for(int i = 0, nbi = 0; i < "/* Generated by TOM (version 2.6alpha): Do not edit this file */+slotList.length()+"; i++) {\n          Object oldChild = introspector.getChildAt(any,nbi);\n          environment.down(nbi+1);\n          int status = args[i].visit(introspector);\n          if(status != tom.library.sl.Environment.SUCCESS) {\n            environment.upLocal();\n            return status;\n          }\n          Object newChild = environment.getSubject();\n          if(childs != null) {\n            childs[nbi] = newChild;\n          } else if(newChild != oldChild) {\n            childs = introspector.getChildren(any);\n            childs[nbi] = newChild;\n          } \n          environment.upLocal();\n          nbi++;\n      }\n      if(childs!=null) {\n        environment.setSubject(introspector.setChildren(any,childs));\n      }\n      return tom.library.sl.Environment.SUCCESS;\n    } else {\n      return tom.library.sl.Environment.FAILURE;\n    }\n  }\n}\n"





















































































































































);
}

private String genConstrArgs(int count, String arg, boolean withDollar) {
  StringBuilder args = new StringBuilder();
  for(int i = 0; i < count; ++i) {
    args.append((i==0?"":", "));
    if(withDollar) {
      args.append("$");
    }
    args.append(arg);
    args.append(i);
  }
  return args.toString();
}

private String genIdArgs(int count) {
  StringBuilder args = new StringBuilder();
  for(int i = 0; i < count; ++i) {
    args.append((i==0?"":", "));
    args.append("Identity()");
  }
  return args.toString();
}

public String generateMapping() {

  return "\n    %op Strategy "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+genStratArgs(slotList.length(),"arg")+") {\n      is_fsym(t) { (($t!=null) && ($t instanceof ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+")))}\n      "/* Generated by TOM (version 2.6alpha): Do not edit this file */+genGetSlot(slotList.length(),"arg")+"\n        make("/* Generated by TOM (version 2.6alpha): Do not edit this file */+genConstrArgs(slotList.length(),"arg",false)+") { new "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+genConstrArgs(slotList.length(),"arg",true)+") }\n    }\n  \n  "






;
}

private String genGetSlot(int count, String arg) {
  StringBuilder out = new StringBuilder();
  for (int i = 0; i < count; ++i) {
    out.append("\n        get_slot("/* Generated by TOM (version 2.6alpha): Do not edit this file */+arg+i+", t) { $t.getArgument("/* Generated by TOM (version 2.6alpha): Do not edit this file */+i+") }"
);
  }
  return out.toString();
}

private String genStratArgs(int count, String arg) {
  StringBuilder args = new StringBuilder();
  for(int i = 0; i < count; ++i) {
    args.append((i==0?"":", "));
    args.append(arg);
    args.append(i);
    args.append(":Strategy");
  }
  return args.toString();
}

/** the class logger instance*/
private Logger getLogger() {
  return Logger.getLogger(getClass().getName());
}
}
