/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.strategy;

import java.io.*;
import java.util.logging.*;
import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class SOpTemplate extends TemplateClass {
  ClassName operator;
  SlotFieldList slotList;

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_sort_String(String t) {  return  t instanceof String  ;}  private static boolean tom_equal_term_SlotField(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotField(Object t) {  return  t instanceof tom.gom.adt.objects.types.SlotField  ;}private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotFieldList(Object t) {  return  t instanceof tom.gom.adt.objects.types.SlotFieldList  ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_GomClass(Object t) {  return  t instanceof tom.gom.adt.objects.types.GomClass  ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_ClassName(Object t) {  return  t instanceof tom.gom.adt.objects.types.ClassName  ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_HookList(Object t) {  return  t instanceof tom.gom.adt.objects.types.HookList  ;}private static boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField  t) {  return  t instanceof tom.gom.adt.objects.types.slotfield.SlotField  ;}private static  String  tom_get_slot_SlotField_Name( tom.gom.adt.objects.types.SlotField  t) {  return  t.getName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SlotField_Domain( tom.gom.adt.objects.types.SlotField  t) {  return  t.getDomain()  ;}private static boolean tom_is_fun_sym_OperatorClass( tom.gom.adt.objects.types.GomClass  t) {  return  t instanceof tom.gom.adt.objects.types.gomclass.OperatorClass  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_ClassName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getClassName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getAbstractType()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_ExtendsType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getExtendsType()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_Mapping( tom.gom.adt.objects.types.GomClass  t) {  return  t.getMapping()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_SortName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getSortName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_Visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getVisitor()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_OperatorClass_Slots( tom.gom.adt.objects.types.GomClass  t) {  return  t.getSlots()  ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_OperatorClass_Hooks( tom.gom.adt.objects.types.GomClass  t) {  return  t.getHooks()  ;}private static boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName  t) {  return  t instanceof tom.gom.adt.objects.types.classname.ClassName  ;}private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1); }private static  String  tom_get_slot_ClassName_Pkg( tom.gom.adt.objects.types.ClassName  t) {  return  t.getPkg()  ;}private static  String  tom_get_slot_ClassName_Name( tom.gom.adt.objects.types.ClassName  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField || t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_empty_list_concSlotField() { return  tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() ; }private static  tom.gom.adt.objects.types.SlotFieldList  tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField  e,  tom.gom.adt.objects.types.SlotFieldList  l) { return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(e,l) ; }private static  tom.gom.adt.objects.types.SlotField  tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getHeadconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getTailconcSlotField()  ;}private static boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.isEmptyconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList  l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end) {    if(tom_equal_term_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }   

  /*
   * The argument is an operator class, and this template generates the
   * assotiated _Op strategy
   */
  public SOpTemplate(GomClass gomClass) {
    super(gomClass);
    ClassName clsName = this.className;
     if (tom_is_sort_ClassName(clsName)) { { tom.gom.adt.objects.types.ClassName  tomMatch1Position1=(( tom.gom.adt.objects.types.ClassName )clsName); if ( ( tom_is_fun_sym_ClassName(tomMatch1Position1) ||  false  ) ) { { String  tom_pkg=tom_get_slot_ClassName_Pkg(tomMatch1Position1); { String  tom_name=tom_get_slot_ClassName_Name(tomMatch1Position1); if ( true ) {

        String newpkg = tom_pkg.replaceFirst(".types.",".strategy.");
        String newname = "_"+tom_name;
        this.className = tom_make_ClassName(newpkg,newname);
       } } } } } } if (tom_is_sort_GomClass(gomClass)) { { tom.gom.adt.objects.types.GomClass  tomMatch2Position1=(( tom.gom.adt.objects.types.GomClass )gomClass); if ( ( tom_is_fun_sym_OperatorClass(tomMatch2Position1) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_opclass=tom_get_slot_OperatorClass_ClassName(tomMatch2Position1); { tom.gom.adt.objects.types.SlotFieldList  tom_slots=tom_get_slot_OperatorClass_Slots(tomMatch2Position1); if ( true ) {



        this.operator = tom_opclass;
        this.slotList = tom_slots;
        return;
       } } } } } }

    throw new GomRuntimeException(
        "Wrong argument for SOpTemplate: " + gomClass);
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {
writer.write("\npackage "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getPackage()+";\n\npublic class "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" implements tom.library.strategy.mutraveler.MuStrategy, tom.library.sl.Strategy {\n  private static final String msg = \"Not an "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className(operator)+"\";\n  /* Manage an internal position */\n  private tom.library.strategy.mutraveler.Position position;\n\n  public void setPosition(tom.library.strategy.mutraveler.Position pos) {\n    this.position = pos;\n  }\n\n  public tom.library.strategy.mutraveler.Position getPosition() {\n    if(hasPosition()) {\n      return position;\n    } else {\n      throw new RuntimeException(\"position not initialized\");\n    }\n  }\n\n  public boolean hasPosition() {\n    return position!=null;\n  }\n\n  /* Manage an internal environment */\n  protected tom.library.sl.Environment environment;\n  public void setEnvironment(tom.library.sl.Environment env) {\n    this.environment = env;\n  }\n\n  public tom.library.sl.Environment getEnvironment() {\n    if(environment!=null) {\n      return environment;\n    } else {\n      throw new RuntimeException(\"environment not initialized\");\n    }\n  }\n\n  private jjtraveler.reflective.VisitableVisitor[] args;\n\n  public jjtraveler.reflective.VisitableVisitor getArgument(int i) {\n    return args[i];\n  }\n  public void setArgument(int i, jjtraveler.reflective.VisitableVisitor child) {\n    args[i]= child;\n  }\n  public int getChildCount() {\n    return args.length;\n  }\n  public jjtraveler.Visitable getChildAt(int i) {\n      return args[i];\n  }\n  public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) {\n    args[i]= (jjtraveler.reflective.VisitableVisitor) child;\n    return this;\n  }\n\n  public jjtraveler.Visitable[] getChildren() {\n    return args;\n  }\n\n  public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {\n    args = (jjtraveler.reflective.VisitableVisitor[])children;\n    return this;\n  }\n\n  /*\n   * Apply the strategy, and returns the subject in case of VisitFailure\n   */\n  public jjtraveler.Visitable apply(jjtraveler.Visitable any) {\n    try {\n      return tom.library.strategy.mutraveler.MuTraveler.init(this).visit(any);\n    } catch (jjtraveler.VisitFailure f) {\n      return any;\n    }\n  }\n\n  public tom.library.sl.Visitable fire(tom.library.sl.Visitable any) {\n    tom.library.sl.AbstractStrategy.init(this,new tom.library.sl.Environment());\n    getEnvironment().setRoot(any);\n    visit();\n    if(getEnvironment().getStatus() == tom.library.sl.Environment.SUCCESS) {\n      return getEnvironment().getRoot();\n    } else {\n      throw new tom.library.sl.FireException();\n    }\n  }\n\n  public tom.library.strategy.mutraveler.MuStrategy accept(tom.library.strategy.mutraveler.reflective.StrategyVisitorFwd v) throws jjtraveler.VisitFailure {\n    return v.visit_Strategy(this);\n  }\n\n  public tom.library.sl.Strategy accept(tom.library.sl.reflective.StrategyFwd v) throws jjtraveler.VisitFailure {\n    return v.visit_Strategy(this);\n  }\n\n\n  private static boolean[] nonbuiltin = new boolean[]{"/* Generated by TOM (version 2.5alpha): Do not edit this file */+genNonBuiltin()+"};\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genConstrArgs(slotList.length(),"jjtraveler.reflective.VisitableVisitor arg")+") {\n    args = new jjtraveler.reflective.VisitableVisitor[]{"/* Generated by TOM (version 2.5alpha): Do not edit this file */+genConstrArgs(slotList.length(),"arg")+"};\n  }\n\n  public jjtraveler.Visitable visit(jjtraveler.Visitable any) throws jjtraveler.VisitFailure {\n    if(any instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(operator)+") {\n      jjtraveler.Visitable result = any;\n      if (any instanceof tom.library.strategy.mutraveler.MuVisitable) {\n        boolean updated = false;\n        jjtraveler.Visitable[] childs = null;\n\n        if(!hasPosition()) {\n          for (int i = 0, nbi = 0; i < "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotList.length()+"; i++) {\n            if (nonbuiltin[i]) {\n              jjtraveler.Visitable oldChild = any.getChildAt(nbi);\n              jjtraveler.Visitable newChild = args[i].visit(oldChild);\n              if (updated || (newChild != oldChild)) {\n                if (!updated) { // this is the first change\n                  updated = true;\n                  // allocate the array, and fill it\n                  childs = new jjtraveler.Visitable["/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildCount()+"];\n                  for (int j = 0 ; j<nbi ; j++) {\n                    childs[j] = any.getChildAt(j);\n                  }\n                }\n                childs[nbi] = newChild;\n              }\n              nbi++;\n            }\n          }\n        } else {\n          try {\n            for (int i = 0, nbi = 0; i < "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotList.length()+"; i++) {\n              if (nonbuiltin[i]) {\n                jjtraveler.Visitable oldChild = any.getChildAt(nbi);\n                getPosition().down(i+1);\n                jjtraveler.Visitable newChild = args[i].visit(oldChild);\n                getPosition().up();\n                if (updated || (newChild != oldChild)) {\n                  if (!updated) {\n                    updated = true;\n                    // allocate the array, and fill it\n                    childs = new jjtraveler.Visitable["/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildCount()+"];\n                    for (int j = 0 ; j<nbi ; j++) {\n                      childs[j] = any.getChildAt(j);\n                    }\n                  }\n                  childs[nbi] = newChild;\n                }\n                nbi++;\n              }\n            }\n          } catch(jjtraveler.VisitFailure f) {\n            getPosition().up();\n            throw new jjtraveler.VisitFailure();\n          }\n        }\n        if (updated) {\n          result = ((tom.library.strategy.mutraveler.MuVisitable) any).setChilds(childs);\n        }\n      } else {\n        if(!hasPosition()) {\n          for (int i = 0, nbi = 0; i < "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotList.length()+"; i++) {\n            if (nonbuiltin[i]) {\n              jjtraveler.Visitable newChild = args[i].visit(result.getChildAt(nbi));\n              result = result.setChildAt(nbi, newChild);\n              nbi++;\n            }\n          }\n        } else {\n          try {\n            for (int i = 0, nbi = 0; i < "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotList.length()+"; i++) {\n              if (nonbuiltin[i]) {\n                getPosition().down(i+1);\n                jjtraveler.Visitable newChild = args[i].visit(result.getChildAt(nbi));\n                getPosition().up();\n                result = result.setChildAt(nbi, newChild);\n                nbi++;\n              }\n            }\n          } catch(jjtraveler.VisitFailure f) {\n            getPosition().up();\n            throw new jjtraveler.VisitFailure();\n          }\n        }\n      }\n      return result;\n    } else {\n      throw new jjtraveler.VisitFailure(msg);\n    }\n  }\n\n  public void visit() {\n    tom.library.sl.Visitable any = getEnvironment().getSubject();\n    if(any instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(operator)+") {\n    int childCount = any.getChildCount();\n\n    tom.library.sl.Visitable[] childs = null;\n    for (int i = 0; i < childCount; i++) {\n      tom.library.sl.Visitable oldChild = (tom.library.sl.Visitable)any.getChildAt(i);\n      jjtraveler.Visitable[] array = getEnvironment().getSubject().getChildren();\n      environment.down(i+1);\n      ((tom.library.sl.Strategy)args[i]).visit();\n      if (getEnvironment().getStatus() != tom.library.sl.Environment.SUCCESS) {\n        environment.up();\n        return;\n      }\n      tom.library.sl.Visitable newChild = getEnvironment().getSubject();\n      if(childs != null) {\n        childs[i] = newChild;\n        environment.up();\n        /* restore subject */\n        getEnvironment().setSubject(any);\n      } else if(newChild != oldChild) {\n        // allocate the array, and fill it\n        // childs = (Visitable[])getEnvironment().getSubject().getChildren();\n        java.util.List list = java.util.Arrays.asList(array);\n        childs = new tom.library.sl.Visitable[childCount];\n        for(int j = 0; j < array.length; j++) {\n          childs[j] = (tom.library.sl.Visitable) array[j];\n        }\n        childs[i] = newChild;\n        /* restore subject */\n        environment.up();\n        getEnvironment().setSubject(any);\n      } else {\n        /* no need to restore subject */\n        environment.up();\n      }\n    }\n\n    if(childs!=null) {\n      getEnvironment().setSubject((tom.library.sl.Visitable)getEnvironment().getSubject().setChildren(childs));\n    }\n    //return;\n    } else {\n      getEnvironment().setStatus(tom.library.sl.Environment.FAILURE);\n    }\n  }\n}\n"













































































































































































































































);
  }

  private String genConstrArgs(int count, String arg) {
    StringBuffer args = new StringBuffer();
    for(int i = 0; i < count; ++i) {
      args.append((i==0?"":", "));
      args.append(arg);
      args.append(i);
    }
    return args.toString();
  }

  public String generateMapping() {
    return "\n%op Strategy "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genStratArgs(slotList.length(),"arg")+") {\n  is_fsym(t) { (t!=null) && t instanceof ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+")}\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+genGetSlot(slotList.length(),"arg")+"\n  make("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genConstrArgs(slotList.length(),"arg")+") { new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+genConstrArgs(slotList.length(),"arg")+") }\n}\n"





;
  }

  private String genGetSlot(int count, String arg) {
    StringBuffer out = new StringBuffer();
    for (int i = 0; i < count; ++i) {
      out.append("\n  get_slot("/* Generated by TOM (version 2.5alpha): Do not edit this file */+arg+i+", t) { t.getArgument("/* Generated by TOM (version 2.5alpha): Do not edit this file */+i+") }"
);
    }
    return out.toString();
  }

  private String genStratArgs(int count, String arg) {
    StringBuffer args = new StringBuffer();
    for(int i = 0; i < count; ++i) {
      args.append((i==0?"":", "));
      args.append(arg);
      args.append(i);
      args.append(":Strategy");
    }
    return args.toString();
  }

  private String genNonBuiltin() {
    String out = "";
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch3Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch3Position1) ||  false  ) ) { {int tomMatch3Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch3Position1List1=tomMatch3Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch3Position1Begin1=tomMatch3Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch3Position1End1=tomMatch3Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch3Position1End1))) {tomMatch3Position1List1=tomMatch3Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch3Position1Save2=tomMatch3Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch3Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch3Position1List1);tomMatch3Position1Index1=tomMatch3Position1Index1 + 1;tomMatch3Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch3Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch3Position1Position2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch3Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          out += "true, ";
        } else {
          out += "false, ";
        }
       } } } }tomMatch3Position1List1=tomMatch3Position1Save2; } }tomMatch3Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch3Position1End1); } }tomMatch3Position1List1=tomMatch3Position1Begin1; } } } } } } } }

    if (out.length()!=0) {
      return out.substring(0,out.length()-2);
    } else {
      return out;
    }
  }

  private int nonBuiltinChildCount() {
    int count = 0;
     if (tom_is_sort_SlotFieldList(slotList)) { { tom.gom.adt.objects.types.SlotFieldList  tomMatch4Position1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tomMatch4Position1) ||  false  ) ) { {int tomMatch4Position1Index1=0; { tom.gom.adt.objects.types.SlotFieldList  tomMatch4Position1List1=tomMatch4Position1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch4Position1Begin1=tomMatch4Position1List1; { tom.gom.adt.objects.types.SlotFieldList  tomMatch4Position1End1=tomMatch4Position1List1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tomMatch4Position1End1))) {tomMatch4Position1List1=tomMatch4Position1End1; { { tom.gom.adt.objects.types.SlotFieldList  tomMatch4Position1Save2=tomMatch4Position1List1; { { tom.gom.adt.objects.types.SlotField  tomMatch4Position1Position2=tom_get_head_concSlotField_SlotFieldList(tomMatch4Position1List1);tomMatch4Position1Index1=tomMatch4Position1Index1 + 1;tomMatch4Position1List1=tom_get_tail_concSlotField_SlotFieldList(tomMatch4Position1List1); if ( ( tom_is_fun_sym_SlotField(tomMatch4Position1Position2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch4Position1Position2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          count++;
        }
       } } } }tomMatch4Position1List1=tomMatch4Position1Save2; } }tomMatch4Position1End1=tom_get_tail_concSlotField_SlotFieldList(tomMatch4Position1End1); } }tomMatch4Position1List1=tomMatch4Position1Begin1; } } } } } } } }

    return count;
  }

  /** the class logger instance*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
