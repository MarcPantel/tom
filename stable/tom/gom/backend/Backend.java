/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;

public class Backend {
  TemplateFactory templatefactory;
  private File tomHomePath;
  private List importList = null;
  private boolean strategySupport = true;
  private boolean multithread = false;

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.gom.adt.objects.types.GomClassList  tom_append_list_ConcGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList  l2) {     if( l1.isEmptyConcGomClass() ) {       return l2;     } else if( l2.isEmptyConcGomClass() ) {       return l1;     } else if(  l1.getTailConcGomClass() .isEmptyConcGomClass() ) {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,l2) ;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,tom_append_list_ConcGomClass( l1.getTailConcGomClass() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.GomClassList  tom_get_slice_ConcGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end, tom.gom.adt.objects.types.GomClassList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( begin.getHeadConcGomClass() ,( tom.gom.adt.objects.types.GomClassList )tom_get_slice_ConcGomClass( begin.getTailConcGomClass() ,end,tail)) ;     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */   


  Backend(TemplateFactory templatefactory,
          File tomHomePath,
          boolean strategySupport,
          boolean multithread,
          List importList) {
    this.templatefactory = templatefactory;
    this.tomHomePath = tomHomePath;
    this.strategySupport = strategySupport;
    this.multithread = multithread;
    this.importList = importList;
  }

  public int generate(GomClassList classList) {
    int errno = 0;
    Set mappingSet = new HashSet();
    Map generators =
      new HashMap();
    // prepare stuff for the mappings
    {if ( (classList instanceof tom.gom.adt.objects.types.GomClassList) ) {{  tom.gom.adt.objects.types.GomClassList  tomMatch342NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClassList )classList);if ( ((tomMatch342NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass) || (tomMatch342NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass)) ) {{  tom.gom.adt.objects.types.GomClassList  tomMatch342NameNumber_freshVar_0=tomMatch342NameNumberfreshSubject_1;{  tom.gom.adt.objects.types.GomClassList  tomMatch342NameNumber_begin_2=tomMatch342NameNumber_freshVar_0;{  tom.gom.adt.objects.types.GomClassList  tomMatch342NameNumber_end_3=tomMatch342NameNumber_freshVar_0;do {{{  tom.gom.adt.objects.types.GomClassList  tomMatch342NameNumber_freshVar_1=tomMatch342NameNumber_end_3;if (!( tomMatch342NameNumber_freshVar_1.isEmptyConcGomClass() )) {if ( ( tomMatch342NameNumber_freshVar_1.getHeadConcGomClass()  instanceof tom.gom.adt.objects.types.gomclass.TomMapping) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch342NameNumber_freshVar_6=  tomMatch342NameNumber_freshVar_1.getHeadConcGomClass() .getClassName() ;if ( (tomMatch342NameNumber_freshVar_6 instanceof tom.gom.adt.objects.types.classname.ClassName) ) {{  String  tomMatch342NameNumber_freshVar_7= tomMatch342NameNumber_freshVar_6.getPkg() ;{  String  tomMatch342NameNumber_freshVar_8= tomMatch342NameNumber_freshVar_6.getName() ;{  tom.gom.adt.objects.types.GomClass  tom_gomclass= tomMatch342NameNumber_freshVar_1.getHeadConcGomClass() ;{  tom.gom.adt.objects.types.GomClassList  tomMatch342NameNumber_freshVar_4= tomMatch342NameNumber_freshVar_1.getTailConcGomClass() ;if ( true ) {



        ClassName smappingclass =  tom.gom.adt.objects.types.classname.ClassName.make(tomMatch342NameNumber_freshVar_7, "_"+tomMatch342NameNumber_freshVar_8) ;
        GomClass nGomClass =
          tom_gomclass.setClassName(smappingclass);
        TemplateClass stratMapping =
          new tom.gom.backend.strategy.StratMappingTemplate(nGomClass);
        generators.put(smappingclass,stratMapping);

        TemplateClass mapping = null;
        if(strategySupport) {
          mapping =
            templatefactory.makeTomMappingTemplate(tom_gomclass,stratMapping);
        } else {
          mapping =
            templatefactory.makeTomMappingTemplate(tom_gomclass,null);
        }
        mappingSet.add(mapping);
        generators.put(tomMatch342NameNumber_freshVar_6,mapping);
      }}}}}}}}}}if ( tomMatch342NameNumber_end_3.isEmptyConcGomClass() ) {tomMatch342NameNumber_end_3=tomMatch342NameNumber_begin_2;} else {tomMatch342NameNumber_end_3= tomMatch342NameNumber_end_3.getTailConcGomClass() ;}}} while(!( tomMatch342NameNumber_end_3.equals(tomMatch342NameNumber_begin_2) ));}}}}}}}

    // generate a class for each element of the list
    while (!classList.isEmptyConcGomClass()) {
      GomClass gomclass = classList.getHeadConcGomClass();
      classList = classList.getTailConcGomClass();
      errno += generateClass(gomclass,generators);
    }
    /* The mappings may need to access generators */
    Iterator it = mappingSet.iterator();
    while (it.hasNext()) {
      ((MappingTemplateClass)it.next()).addTemplates(generators);
    }
    it = generators.keySet().iterator();
    while (it.hasNext()) {
      ((TemplateClass)generators.get(it.next())).generateFile();
    }

    return 1;
  }

  /*
   * Create template classes for the different classes to generate
   */
  public int generateClass(
      GomClass gomclass,
      Map generators) {
    {if ( (gomclass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if ( (tomMatch343NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.TomMapping) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_0= tomMatch343NameNumberfreshSubject_1.getClassName() ;if ( true ) {

        /* It was processed by the caller: check it is already in generators */
        if (!generators.containsKey(tomMatch343NameNumber_freshVar_0)) {
          throw new GomRuntimeException(
              "Mapping should be processed before generateClass is called");
        }
        return 1;
      }}}}}if ( (gomclass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if ( (tomMatch343NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.VisitableFwdClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_1= tomMatch343NameNumberfreshSubject_1.getClassName() ;if ( true ) {

        TemplateClass visitablefwd =
          templatefactory.makeVisitableForwardTemplate(gomclass);
        generators.put(tomMatch343NameNumber_freshVar_1,visitablefwd);
        return 1;
      }}}}}if ( (gomclass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if ( (tomMatch343NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.VisitorClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_2= tomMatch343NameNumberfreshSubject_1.getClassName() ;if ( true ) {

        TemplateClass visitor = templatefactory.makeVisitorTemplate(gomclass);
        generators.put(tomMatch343NameNumber_freshVar_2,visitor);
        return 1;
      }}}}}if ( (gomclass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if ( (tomMatch343NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.AbstractTypeClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_3= tomMatch343NameNumberfreshSubject_1.getClassName() ;{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_4= tomMatch343NameNumberfreshSubject_1.getMapping() ;if ( true ) {

        TemplateClass abstracttype =
          templatefactory.makeAbstractTypeTemplate(
              tomHomePath,
              importList,
              gomclass,
              (TemplateClass)generators.get(tomMatch343NameNumber_freshVar_4));
        generators.put(tomMatch343NameNumber_freshVar_3,abstracttype);
        return 1;
      }}}}}}if ( (gomclass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if ( (tomMatch343NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.SortClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_5= tomMatch343NameNumberfreshSubject_1.getClassName() ;{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_6= tomMatch343NameNumberfreshSubject_1.getMapping() ;if ( true ) {

        TemplateClass sort =
          templatefactory.makeSortTemplate(
              tomHomePath,
              importList,
              gomclass,
              (TemplateClass)generators.get(tomMatch343NameNumber_freshVar_6));
        generators.put(tomMatch343NameNumber_freshVar_5,sort);
        return 1;
      }}}}}}if ( (gomclass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if ( (tomMatch343NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.OperatorClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_7= tomMatch343NameNumberfreshSubject_1.getClassName() ;{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_8= tomMatch343NameNumberfreshSubject_1.getMapping() ;if ( true ) {

        TemplateClass operator = templatefactory.makeOperatorTemplate(
            tomHomePath,
            importList,
            gomclass,
            (TemplateClass)generators.get(tomMatch343NameNumber_freshVar_8),
            multithread);
        generators.put(tomMatch343NameNumber_freshVar_7,operator);

        TemplateClass sOpStrat =
          new tom.gom.backend.strategy.SOpTemplate(gomclass);
        sOpStrat.generateFile();

        TemplateClass isOpStrat =
          new tom.gom.backend.strategy.IsOpTemplate(gomclass);
        isOpStrat.generateFile();


        TemplateClass makeOpStrat = new tom.gom.backend.strategy.MakeOpTemplate(gomclass);
        makeOpStrat.generateFile();
       return 1;
      }}}}}}if ( (gomclass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if ( (tomMatch343NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.VariadicOperatorClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_9= tomMatch343NameNumberfreshSubject_1.getClassName() ;{  tom.gom.adt.objects.types.ClassName  tomMatch343NameNumber_freshVar_10= tomMatch343NameNumberfreshSubject_1.getMapping() ;{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumber_freshVar_11= tomMatch343NameNumberfreshSubject_1.getEmpty() ;{  tom.gom.adt.objects.types.GomClass  tomMatch343NameNumber_freshVar_12= tomMatch343NameNumberfreshSubject_1.getCons() ;if ( true ) {




        TemplateClass operator =
          templatefactory.makeVariadicOperatorTemplate(
              tomHomePath,
              importList,
              gomclass,
              (TemplateClass)generators.get(tomMatch343NameNumber_freshVar_10));
        generators.put(tomMatch343NameNumber_freshVar_9,operator);
        /* Generate files for cons and empty */
        int ret = 1;
        ret+=generateClass(tomMatch343NameNumber_freshVar_11,generators);
        ret+=generateClass(tomMatch343NameNumber_freshVar_12,generators);

        return ret;
      }}}}}}}}}

    throw new GomRuntimeException("Trying to generate code for a strange class: "+gomclass);
  }
}
