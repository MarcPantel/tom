/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;

public class Backend {
  TemplateFactory templatefactory;
  private File tomHomePath;
  private List importList = null;
  private boolean strategySupport = true;

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Code(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Code(Object t) { return  t instanceof tom.gom.adt.code.types.Code ;}private static boolean tom_equal_term_Hook(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Hook(Object t) { return  t instanceof tom.gom.adt.objects.types.Hook ;}private static boolean tom_equal_term_SlotField(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotField(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotField ;}private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotFieldList(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotFieldList ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClass(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClass ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassName(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassName ;}private static boolean tom_equal_term_GomClassList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClassList(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClassList ;}private static boolean tom_equal_term_ClassNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassNameList(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassNameList ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookList(Object t) { return  t instanceof tom.gom.adt.objects.types.HookList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.gom.adt.gom.types.Slot ;}private static boolean tom_equal_term_ArgList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ArgList(Object t) { return  t instanceof tom.gom.adt.gom.types.ArgList ;}private static boolean tom_equal_term_IdKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_IdKind(Object t) { return  t instanceof tom.gom.adt.gom.types.IdKind ;}private static boolean tom_equal_term_GomModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleList ;}private static boolean tom_equal_term_GrammarList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GrammarList(Object t) { return  t instanceof tom.gom.adt.gom.types.GrammarList ;}private static boolean tom_equal_term_TypedProduction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TypedProduction(Object t) { return  t instanceof tom.gom.adt.gom.types.TypedProduction ;}private static boolean tom_equal_term_SectionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SectionList(Object t) { return  t instanceof tom.gom.adt.gom.types.SectionList ;}private static boolean tom_equal_term_OperatorDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDeclList ;}private static boolean tom_equal_term_HookDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDeclList ;}private static boolean tom_equal_term_SortDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDeclList ;}private static boolean tom_equal_term_OperatorDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDecl ;}private static boolean tom_equal_term_GomModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModule(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModule ;}private static boolean tom_equal_term_Pair(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Pair(Object t) { return  t instanceof tom.gom.adt.gom.types.Pair ;}private static boolean tom_equal_term_Section(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Section(Object t) { return  t instanceof tom.gom.adt.gom.types.Section ;}private static boolean tom_equal_term_GomTypeList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomTypeList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomTypeList ;}private static boolean tom_equal_term_ProductionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ProductionList(Object t) { return  t instanceof tom.gom.adt.gom.types.ProductionList ;}private static boolean tom_equal_term_Decl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Decl(Object t) { return  t instanceof tom.gom.adt.gom.types.Decl ;}private static boolean tom_equal_term_ImportList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportList(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportList ;}private static boolean tom_equal_term_Sort(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Sort(Object t) { return  t instanceof tom.gom.adt.gom.types.Sort ;}private static boolean tom_equal_term_SortDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDecl ;}private static boolean tom_equal_term_HookDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDecl ;}private static boolean tom_equal_term_ModuleDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDeclList ;}private static boolean tom_equal_term_Module(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Module(Object t) { return  t instanceof tom.gom.adt.gom.types.Module ;}private static boolean tom_equal_term_FieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_FieldList(Object t) { return  t instanceof tom.gom.adt.gom.types.FieldList ;}private static boolean tom_equal_term_Grammar(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Grammar(Object t) { return  t instanceof tom.gom.adt.gom.types.Grammar ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.gom.adt.gom.types.SlotList ;}private static boolean tom_equal_term_SortList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortList ;}private static boolean tom_equal_term_Arg(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Arg(Object t) { return  t instanceof tom.gom.adt.gom.types.Arg ;}private static boolean tom_equal_term_GomModuleName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleName(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleName ;}private static boolean tom_equal_term_Field(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Field(Object t) { return  t instanceof tom.gom.adt.gom.types.Field ;}private static boolean tom_equal_term_Production(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Production(Object t) { return  t instanceof tom.gom.adt.gom.types.Production ;}private static boolean tom_equal_term_ModuleDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDecl ;}private static boolean tom_equal_term_ModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleList ;}private static boolean tom_equal_term_GomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomType(Object t) { return  t instanceof tom.gom.adt.gom.types.GomType ;}private static boolean tom_equal_term_ImportedModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportedModule(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportedModule ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.gom.adt.gom.types.Option ;}private static boolean tom_equal_term_HookKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookKind(Object t) { return  t instanceof tom.gom.adt.gom.types.HookKind ;}private static boolean tom_is_fun_sym_AbstractTypeClass( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.AbstractTypeClass) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_AbstractTypeClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_AbstractTypeClass_Mapping( tom.gom.adt.objects.types.GomClass  t) { return  t.getMapping() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_AbstractTypeClass_Visitor( tom.gom.adt.objects.types.GomClass  t) { return  t.getVisitor() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_AbstractTypeClass_SortList( tom.gom.adt.objects.types.GomClass  t) { return  t.getSortList() ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_AbstractTypeClass_Hooks( tom.gom.adt.objects.types.GomClass  t) { return  t.getHooks() ;}private static boolean tom_is_fun_sym_SortClass( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.SortClass) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) { return  t.getAbstractType() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Mapping( tom.gom.adt.objects.types.GomClass  t) { return  t.getMapping() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Visitor( tom.gom.adt.objects.types.GomClass  t) { return  t.getVisitor() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Forward( tom.gom.adt.objects.types.GomClass  t) { return  t.getForward() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_SortClass_Operators( tom.gom.adt.objects.types.GomClass  t) { return  t.getOperators() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_SortClass_VariadicOperators( tom.gom.adt.objects.types.GomClass  t) { return  t.getVariadicOperators() ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_SortClass_Slots( tom.gom.adt.objects.types.GomClass  t) { return  t.getSlots() ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_SortClass_Hooks( tom.gom.adt.objects.types.GomClass  t) { return  t.getHooks() ;}private static boolean tom_is_fun_sym_OperatorClass( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.OperatorClass) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) { return  t.getAbstractType() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_ExtendsType( tom.gom.adt.objects.types.GomClass  t) { return  t.getExtendsType() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_Mapping( tom.gom.adt.objects.types.GomClass  t) { return  t.getMapping() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_SortName( tom.gom.adt.objects.types.GomClass  t) { return  t.getSortName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_Visitor( tom.gom.adt.objects.types.GomClass  t) { return  t.getVisitor() ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_OperatorClass_Slots( tom.gom.adt.objects.types.GomClass  t) { return  t.getSlots() ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_OperatorClass_Hooks( tom.gom.adt.objects.types.GomClass  t) { return  t.getHooks() ;}private static boolean tom_is_fun_sym_VariadicOperatorClass( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.VariadicOperatorClass) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) { return  t.getAbstractType() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_Mapping( tom.gom.adt.objects.types.GomClass  t) { return  t.getMapping() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_SortName( tom.gom.adt.objects.types.GomClass  t) { return  t.getSortName() ;}private static  tom.gom.adt.objects.types.GomClass  tom_get_slot_VariadicOperatorClass_Empty( tom.gom.adt.objects.types.GomClass  t) { return  t.getEmpty() ;}private static  tom.gom.adt.objects.types.GomClass  tom_get_slot_VariadicOperatorClass_Cons( tom.gom.adt.objects.types.GomClass  t) { return  t.getCons() ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_VariadicOperatorClass_Hooks( tom.gom.adt.objects.types.GomClass  t) { return  t.getHooks() ;}private static boolean tom_is_fun_sym_VisitorClass( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.VisitorClass) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VisitorClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_VisitorClass_SortClasses( tom.gom.adt.objects.types.GomClass  t) { return  t.getSortClasses() ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_VisitorClass_OperatorClasses( tom.gom.adt.objects.types.GomClass  t) { return  t.getOperatorClasses() ;}private static boolean tom_is_fun_sym_VisitableFwdClass( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.VisitableFwdClass) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VisitableFwdClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VisitableFwdClass_Visitor( tom.gom.adt.objects.types.GomClass  t) { return  t.getVisitor() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_VisitableFwdClass_ImportedVisitors( tom.gom.adt.objects.types.GomClass  t) { return  t.getImportedVisitors() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VisitableFwdClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) { return  t.getAbstractType() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_VisitableFwdClass_ImportedAbstractTypes( tom.gom.adt.objects.types.GomClass  t) { return  t.getImportedAbstractTypes() ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_VisitableFwdClass_SortClasses( tom.gom.adt.objects.types.GomClass  t) { return  t.getSortClasses() ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_VisitableFwdClass_OperatorClasses( tom.gom.adt.objects.types.GomClass  t) { return  t.getOperatorClasses() ;}private static boolean tom_is_fun_sym_TomMapping( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.TomMapping) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_TomMapping_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_TomMapping_BasicStrategy( tom.gom.adt.objects.types.GomClass  t) { return  t.getBasicStrategy() ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_TomMapping_SortClasses( tom.gom.adt.objects.types.GomClass  t) { return  t.getSortClasses() ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_TomMapping_OperatorClasses( tom.gom.adt.objects.types.GomClass  t) { return  t.getOperatorClasses() ;}private static boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName  t) { return  (t instanceof tom.gom.adt.objects.types.classname.ClassName) ;}private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1) ; }private static  String  tom_get_slot_ClassName_Pkg( tom.gom.adt.objects.types.ClassName  t) { return  t.getPkg() ;}private static  String  tom_get_slot_ClassName_Name( tom.gom.adt.objects.types.ClassName  t) { return  t.getName() ;}private static boolean tom_is_fun_sym_concGomClass( tom.gom.adt.objects.types.GomClassList  t) { return  ((t instanceof tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass) || (t instanceof tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass)) ;}private static  tom.gom.adt.objects.types.GomClassList  tom_empty_list_concGomClass() { return  tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass.make() ; }private static  tom.gom.adt.objects.types.GomClassList  tom_cons_list_concGomClass( tom.gom.adt.objects.types.GomClass  e,  tom.gom.adt.objects.types.GomClassList  l) { return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(e,l) ; }private static  tom.gom.adt.objects.types.GomClass  tom_get_head_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) { return  l.getHeadconcGomClass() ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_tail_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) { return  l.getTailconcGomClass() ;}private static boolean tom_is_empty_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) { return  l.isEmptyconcGomClass() ;}   private static   tom.gom.adt.objects.types.GomClassList  tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList  l2) {     if( l1.isEmptyconcGomClass() ) {       return l2;     } else if( l2.isEmptyconcGomClass() ) {       return l1;     } else if(  l1.getTailconcGomClass() .isEmptyconcGomClass() ) {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( l1.getHeadconcGomClass() ,l2) ;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( l1.getHeadconcGomClass() ,tom_append_list_concGomClass( l1.getTailconcGomClass() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.GomClassList  tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end, tom.gom.adt.objects.types.GomClassList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( begin.getHeadconcGomClass() ,( tom.gom.adt.objects.types.GomClassList )tom_get_slice_concGomClass( begin.getTailconcGomClass() ,end,tail)) ;     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */   


  Backend(TemplateFactory templatefactory,
          File tomHomePath,
          boolean strategySupport,
          List importList) {
    this.templatefactory = templatefactory;
    this.tomHomePath = tomHomePath;
    this.strategySupport = strategySupport;
    this.importList = importList;
  }

  public int generate(GomClassList classList) {
    int errno = 0;
    Set mappingSet = new HashSet();
    Map generators =
      new HashMap();
    // prepare stuff for the mappings
    if (tom_is_sort_GomClassList(classList)) {{  tom.gom.adt.objects.types.GomClassList  tomMatch350NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClassList )classList);if (tom_is_fun_sym_concGomClass(tomMatch350NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.GomClassList  tomMatch350NameNumber_freshVar_0=tomMatch350NameNumberfreshSubject_1;{  tom.gom.adt.objects.types.GomClassList  tomMatch350NameNumber_begin_2=tomMatch350NameNumber_freshVar_0;{  tom.gom.adt.objects.types.GomClassList  tomMatch350NameNumber_end_3=tomMatch350NameNumber_freshVar_0;do {{{  tom.gom.adt.objects.types.GomClassList  tomMatch350NameNumber_freshVar_1=tomMatch350NameNumber_end_3;if (!(tom_is_empty_concGomClass_GomClassList(tomMatch350NameNumber_freshVar_1))) {if (tom_is_fun_sym_TomMapping(tom_get_head_concGomClass_GomClassList(tomMatch350NameNumber_freshVar_1))) {{  tom.gom.adt.objects.types.ClassName  tomMatch350NameNumber_freshVar_6=tom_get_slot_TomMapping_ClassName(tom_get_head_concGomClass_GomClassList(tomMatch350NameNumber_freshVar_1));if (tom_is_fun_sym_ClassName(tomMatch350NameNumber_freshVar_6)) {{  String  tomMatch350NameNumber_freshVar_7=tom_get_slot_ClassName_Pkg(tomMatch350NameNumber_freshVar_6);{  String  tomMatch350NameNumber_freshVar_8=tom_get_slot_ClassName_Name(tomMatch350NameNumber_freshVar_6);{  tom.gom.adt.objects.types.GomClass  tom_gomclass=tom_get_head_concGomClass_GomClassList(tomMatch350NameNumber_freshVar_1);{  tom.gom.adt.objects.types.GomClassList  tomMatch350NameNumber_freshVar_4=tom_get_tail_concGomClass_GomClassList(tomMatch350NameNumber_freshVar_1);if ( true ) {



        ClassName smappingclass = tom_make_ClassName(tomMatch350NameNumber_freshVar_7,"_"+tomMatch350NameNumber_freshVar_8);
        GomClass nGomClass =
          tom_gomclass.setClassName(smappingclass);
        TemplateClass stratMapping =
          new tom.gom.backend.strategy.StratMappingTemplate(nGomClass);
        generators.put(smappingclass,stratMapping);

        TemplateClass mapping = null;
        if(strategySupport) {
          mapping =
            templatefactory.makeTomMappingTemplate(tom_gomclass,stratMapping);
        } else {
          mapping =
            templatefactory.makeTomMappingTemplate(tom_gomclass,null);
        }
        mappingSet.add(mapping);
        generators.put(tomMatch350NameNumber_freshVar_6,mapping);
      }}}}}}}}}}if (tom_is_empty_concGomClass_GomClassList(tomMatch350NameNumber_end_3)) {tomMatch350NameNumber_end_3=tomMatch350NameNumber_begin_2;} else {tomMatch350NameNumber_end_3=tom_get_tail_concGomClass_GomClassList(tomMatch350NameNumber_end_3);}}} while(!(tom_equal_term_GomClassList(tomMatch350NameNumber_end_3, tomMatch350NameNumber_begin_2)));}}}}}}

    // generate a class for each element of the list
    while (!classList.isEmptyconcGomClass()) {
      GomClass gomclass = classList.getHeadconcGomClass();
      classList = classList.getTailconcGomClass();
      errno += generateClass(gomclass,generators);
    }
    /* The mappings may need to access generators */
    Iterator it = mappingSet.iterator();
    while (it.hasNext()) {
      ((MappingTemplateClass)it.next()).addTemplates(generators);
    }
    it = generators.keySet().iterator();
    while (it.hasNext()) {
      ((TemplateClass)generators.get(it.next())).generateFile();
    }

    return 1;
  }

  /*
   * Create template classes for the different classes to generate
   */
  public int generateClass(
      GomClass gomclass,
      Map generators) {
    if (tom_is_sort_GomClass(gomclass)) {{  tom.gom.adt.objects.types.GomClass  tomMatch351NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomclass);if (tom_is_fun_sym_TomMapping(tomMatch351NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_0=tom_get_slot_TomMapping_ClassName(tomMatch351NameNumberfreshSubject_1);if ( true ) {

        /* It was processed by the caller: check it is already in generators */
        if (!generators.containsKey(tomMatch351NameNumber_freshVar_0)) {
          throw new GomRuntimeException(
              "Mapping should be processed before generateClass is called");
        }
        return 1;
      }}}if (tom_is_fun_sym_VisitableFwdClass(tomMatch351NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_1=tom_get_slot_VisitableFwdClass_ClassName(tomMatch351NameNumberfreshSubject_1);if ( true ) {

        TemplateClass visitablefwd =
          templatefactory.makeVisitableForwardTemplate(gomclass);
        generators.put(tomMatch351NameNumber_freshVar_1,visitablefwd);
        return 1;
      }}}if (tom_is_fun_sym_VisitorClass(tomMatch351NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_2=tom_get_slot_VisitorClass_ClassName(tomMatch351NameNumberfreshSubject_1);if ( true ) {

        TemplateClass visitor = templatefactory.makeVisitorTemplate(gomclass);
        generators.put(tomMatch351NameNumber_freshVar_2,visitor);
        return 1;
      }}}if (tom_is_fun_sym_AbstractTypeClass(tomMatch351NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_3=tom_get_slot_AbstractTypeClass_ClassName(tomMatch351NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_4=tom_get_slot_AbstractTypeClass_Mapping(tomMatch351NameNumberfreshSubject_1);if ( true ) {

        TemplateClass abstracttype =
          templatefactory.makeAbstractTypeTemplate(
              tomHomePath,
              importList,
              gomclass,
              (TemplateClass)generators.get(tomMatch351NameNumber_freshVar_4));
        generators.put(tomMatch351NameNumber_freshVar_3,abstracttype);
        return 1;
      }}}}if (tom_is_fun_sym_SortClass(tomMatch351NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_5=tom_get_slot_SortClass_ClassName(tomMatch351NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_6=tom_get_slot_SortClass_Mapping(tomMatch351NameNumberfreshSubject_1);if ( true ) {

        TemplateClass sort =
          templatefactory.makeSortTemplate(
              tomHomePath,
              importList,
              gomclass,
              (TemplateClass)generators.get(tomMatch351NameNumber_freshVar_6));
        generators.put(tomMatch351NameNumber_freshVar_5,sort);
        return 1;
      }}}}if (tom_is_fun_sym_OperatorClass(tomMatch351NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_7=tom_get_slot_OperatorClass_ClassName(tomMatch351NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_8=tom_get_slot_OperatorClass_Mapping(tomMatch351NameNumberfreshSubject_1);if ( true ) {

        TemplateClass operator = templatefactory.makeOperatorTemplate(
            tomHomePath,
            importList,
            gomclass,
            (TemplateClass)generators.get(tomMatch351NameNumber_freshVar_8));
        generators.put(tomMatch351NameNumber_freshVar_7,operator);

        TemplateClass sOpStrat =
          new tom.gom.backend.strategy.SOpTemplate(gomclass);
        sOpStrat.generateFile();

        TemplateClass isOpStrat =
          new tom.gom.backend.strategy.IsOpTemplate(gomclass);
        isOpStrat.generateFile();


        TemplateClass makeOpStrat = new tom.gom.backend.strategy.MakeOpTemplate(gomclass);
        makeOpStrat.generateFile();
       return 1;
      }}}}if (tom_is_fun_sym_VariadicOperatorClass(tomMatch351NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_9=tom_get_slot_VariadicOperatorClass_ClassName(tomMatch351NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.ClassName  tomMatch351NameNumber_freshVar_10=tom_get_slot_VariadicOperatorClass_Mapping(tomMatch351NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.GomClass  tomMatch351NameNumber_freshVar_11=tom_get_slot_VariadicOperatorClass_Empty(tomMatch351NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.GomClass  tomMatch351NameNumber_freshVar_12=tom_get_slot_VariadicOperatorClass_Cons(tomMatch351NameNumberfreshSubject_1);if ( true ) {




        TemplateClass operator =
          templatefactory.makeVariadicOperatorTemplate(
              tomHomePath,
              importList,
              gomclass,
              (TemplateClass)generators.get(tomMatch351NameNumber_freshVar_10));
        generators.put(tomMatch351NameNumber_freshVar_9,operator);
        /* Generate files for cons and empty */
        int ret = 1;
        ret+=generateClass(tomMatch351NameNumber_freshVar_11,generators);
        ret+=generateClass(tomMatch351NameNumber_freshVar_12,generators);

        return ret;
      }}}}}}}}

    throw new GomRuntimeException("Trying to generate code for a strange class: "+gomclass);
  }
}
