/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import tom.gom.backend.TemplateClass;
import tom.gom.adt.objects.types.*;

public class ForwardTemplate extends TemplateClass {
  ClassName visitor;
  ClassNameList importedVisitors;
  ClassName abstractType;
  ClassNameList importedAbstractTypes;
  GomClassList sortClasses;
  GomClassList operatorClasses;

  /* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private  char  tom_set_stamp_char( char  c) {  return  c  ;}private void tom_check_stamp_char( char  c) { ;}private boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private  Character  tom_set_stamp_Character( Character  c) {  return  c  ;}private void tom_check_stamp_Character( Character  c) { ;}private boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_Char( Character  t) {  return  (t!= null) && (t instanceof Character)  ;}private  Character  tom_make_Char( char  c) { return  new Character(c) ; }private  char  tom_get_slot_Char_c( Character  t) {  return  t.charValue()  ;} private  String  tom_set_stamp_String( String  s) {  return  s  ;}private void tom_check_stamp_String( String  s) { ;}private boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_concString( String  t) {  return  (t!= null) && (t instanceof String)  ;}private  String  tom_empty_list_concString() { return  "" ; }private  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }private  char  tom_get_head_concString_String( String  s) {  return  s.charAt(0)  ;}private  String  tom_get_tail_concString_String( String  s) {  return  s.substring(1)  ;}private boolean tom_is_empty_concString_String( String  s) {  return  (s.length()==0)  ;}private  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  private  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private boolean tom_terms_equal_Hook(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_terms_equal_ClassNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_terms_equal_GomClass(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_terms_equal_SlotField(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_terms_equal_GomClassList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_terms_equal_HookList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_terms_equal_SlotFieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private boolean tom_is_fun_sym_MakeBeforeHook( tom.gom.adt.objects.types.Hook  t) {  return  (t!=null) && t.isMakeBeforeHook()  ;}private  tom.gom.adt.objects.types.Hook  tom_make_MakeBeforeHook( tom.gom.adt.objects.types.SlotFieldList  t0,  String  t1) { return  tom.gom.adt.objects.types.hook.MakeBeforeHook.make(t0, t1); }private  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_MakeBeforeHook_hookArguments( tom.gom.adt.objects.types.Hook  t) {  return  t.gethookArguments()  ;}private  String  tom_get_slot_MakeBeforeHook_code( tom.gom.adt.objects.types.Hook  t) {  return  t.getcode()  ;}private boolean tom_is_fun_sym_MakeHook( tom.gom.adt.objects.types.Hook  t) {  return  (t!=null) && t.isMakeHook()  ;}private  tom.gom.adt.objects.types.Hook  tom_make_MakeHook( tom.gom.adt.objects.types.SlotFieldList  t0,  String  t1) { return  tom.gom.adt.objects.types.hook.MakeHook.make(t0, t1); }private  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_MakeHook_hookArguments( tom.gom.adt.objects.types.Hook  t) {  return  t.gethookArguments()  ;}private  String  tom_get_slot_MakeHook_code( tom.gom.adt.objects.types.Hook  t) {  return  t.getcode()  ;}private boolean tom_is_fun_sym_ConsconcClassName( tom.gom.adt.objects.types.ClassNameList  t) {  return  (t!=null) && t.isConsconcClassName()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_make_ConsconcClassName( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassNameList  t1) { return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(t0, t1); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_ConsconcClassName_HeadconcClassName( tom.gom.adt.objects.types.ClassNameList  t) {  return  t.getHeadconcClassName()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_ConsconcClassName_TailconcClassName( tom.gom.adt.objects.types.ClassNameList  t) {  return  t.getTailconcClassName()  ;}private boolean tom_is_fun_sym_TomMapping( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isTomMapping()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_TomMapping( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.GomClassList  t2,  tom.gom.adt.objects.types.GomClassList  t3) { return  tom.gom.adt.objects.types.gomclass.TomMapping.make(t0, t1, t2, t3); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_TomMapping_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_TomMapping_basicStrategy( tom.gom.adt.objects.types.GomClass  t) {  return  t.getbasicStrategy()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_slot_TomMapping_sortClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getsortClasses()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_slot_TomMapping_operatorClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getoperatorClasses()  ;}private boolean tom_is_fun_sym_FwdClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isFwdClass()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_FwdClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassNameList  t2,  tom.gom.adt.objects.types.ClassName  t3,  tom.gom.adt.objects.types.ClassNameList  t4,  tom.gom.adt.objects.types.GomClassList  t5,  tom.gom.adt.objects.types.GomClassList  t6) { return  tom.gom.adt.objects.types.gomclass.FwdClass.make(t0, t1, t2, t3, t4, t5, t6); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_FwdClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_FwdClass_visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getvisitor()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_FwdClass_importedVisitors( tom.gom.adt.objects.types.GomClass  t) {  return  t.getimportedVisitors()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_FwdClass_abstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getabstractType()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_FwdClass_importedAbstractTypes( tom.gom.adt.objects.types.GomClass  t) {  return  t.getimportedAbstractTypes()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_slot_FwdClass_sortClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getsortClasses()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_slot_FwdClass_operatorClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getoperatorClasses()  ;}private boolean tom_is_fun_sym_VisitorClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isVisitorClass()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_VisitorClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.GomClassList  t1,  tom.gom.adt.objects.types.GomClassList  t2) { return  tom.gom.adt.objects.types.gomclass.VisitorClass.make(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VisitorClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_slot_VisitorClass_sortClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getsortClasses()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_slot_VisitorClass_operatorClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getoperatorClasses()  ;}private boolean tom_is_fun_sym_VariadicOperatorClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isVariadicOperatorClass()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_VariadicOperatorClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassName  t2,  tom.gom.adt.objects.types.ClassName  t3,  tom.gom.adt.objects.types.ClassName  t4,  tom.gom.adt.objects.types.SlotFieldList  t5,  tom.gom.adt.objects.types.ClassName  t6,  String  t7,  tom.gom.adt.objects.types.HookList  t8) { return  tom.gom.adt.objects.types.gomclass.VariadicOperatorClass.make(t0, t1, t2, t3, t4, t5, t6, t7, t8); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_abstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getabstractType()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_mapping( tom.gom.adt.objects.types.GomClass  t) {  return  t.getmapping()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_sortName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getsortName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getvisitor()  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_VariadicOperatorClass_slots( tom.gom.adt.objects.types.GomClass  t) {  return  t.getslots()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_empty( tom.gom.adt.objects.types.GomClass  t) {  return  t.getempty()  ;}private  String  tom_get_slot_VariadicOperatorClass_operator( tom.gom.adt.objects.types.GomClass  t) {  return  t.getoperator()  ;}private  tom.gom.adt.objects.types.HookList  tom_get_slot_VariadicOperatorClass_hooks( tom.gom.adt.objects.types.GomClass  t) {  return  t.gethooks()  ;}private boolean tom_is_fun_sym_OperatorClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isOperatorClass()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_OperatorClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassName  t2,  tom.gom.adt.objects.types.ClassName  t3,  tom.gom.adt.objects.types.ClassName  t4,  tom.gom.adt.objects.types.SlotFieldList  t5,  tom.gom.adt.objects.types.HookList  t6) { return  tom.gom.adt.objects.types.gomclass.OperatorClass.make(t0, t1, t2, t3, t4, t5, t6); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_abstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getabstractType()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_mapping( tom.gom.adt.objects.types.GomClass  t) {  return  t.getmapping()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_sortName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getsortName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_OperatorClass_visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getvisitor()  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_OperatorClass_slots( tom.gom.adt.objects.types.GomClass  t) {  return  t.getslots()  ;}private  tom.gom.adt.objects.types.HookList  tom_get_slot_OperatorClass_hooks( tom.gom.adt.objects.types.GomClass  t) {  return  t.gethooks()  ;}private boolean tom_is_fun_sym_SortClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isSortClass()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_SortClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassName  t2,  tom.gom.adt.objects.types.ClassName  t3,  tom.gom.adt.objects.types.ClassNameList  t4,  tom.gom.adt.objects.types.SlotFieldList  t5) { return  tom.gom.adt.objects.types.gomclass.SortClass.make(t0, t1, t2, t3, t4, t5); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_abstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getabstractType()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getvisitor()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_forward( tom.gom.adt.objects.types.GomClass  t) {  return  t.getforward()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_SortClass_operators( tom.gom.adt.objects.types.GomClass  t) {  return  t.getoperators()  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_SortClass_slots( tom.gom.adt.objects.types.GomClass  t) {  return  t.getslots()  ;}private boolean tom_is_fun_sym_AbstractTypeClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isAbstractTypeClass()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_AbstractTypeClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassNameList  t2) { return  tom.gom.adt.objects.types.gomclass.AbstractTypeClass.make(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_AbstractTypeClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_AbstractTypeClass_visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getvisitor()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_AbstractTypeClass_sortList( tom.gom.adt.objects.types.GomClass  t) {  return  t.getsortList()  ;}private boolean tom_is_fun_sym_VisitableFwdClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isVisitableFwdClass()  ;}private  tom.gom.adt.objects.types.GomClass  tom_make_VisitableFwdClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.GomClass  t1) { return  tom.gom.adt.objects.types.gomclass.VisitableFwdClass.make(t0, t1); }private  tom.gom.adt.objects.types.ClassName  tom_get_slot_VisitableFwdClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private  tom.gom.adt.objects.types.GomClass  tom_get_slot_VisitableFwdClass_fwd( tom.gom.adt.objects.types.GomClass  t) {  return  t.getfwd()  ;}private boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField  t) {  return  (t!=null) && t.isSlotField()  ;}private  tom.gom.adt.objects.types.SlotField  tom_make_SlotField( String  t0,  tom.gom.adt.objects.types.ClassName  t1) { return  tom.gom.adt.objects.types.slotfield.SlotField.make(t0, t1); }private  String  tom_get_slot_SlotField_name( tom.gom.adt.objects.types.SlotField  t) {  return  t.getname()  ;}private  tom.gom.adt.objects.types.ClassName  tom_get_slot_SlotField_domain( tom.gom.adt.objects.types.SlotField  t) {  return  t.getdomain()  ;}private boolean tom_is_fun_sym_ConsconcGomClass( tom.gom.adt.objects.types.GomClassList  t) {  return  (t!=null) && t.isConsconcGomClass()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_make_ConsconcGomClass( tom.gom.adt.objects.types.GomClass  t0,  tom.gom.adt.objects.types.GomClassList  t1) { return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(t0, t1); }private  tom.gom.adt.objects.types.GomClass  tom_get_slot_ConsconcGomClass_HeadconcGomClass( tom.gom.adt.objects.types.GomClassList  t) {  return  t.getHeadconcGomClass()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_slot_ConsconcGomClass_TailconcGomClass( tom.gom.adt.objects.types.GomClassList  t) {  return  t.getTailconcGomClass()  ;}private boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName  t) {  return  (t!=null) && t.isClassName()  ;}private  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1); }private  String  tom_get_slot_ClassName_pkg( tom.gom.adt.objects.types.ClassName  t) {  return  t.getpkg()  ;}private  String  tom_get_slot_ClassName_name( tom.gom.adt.objects.types.ClassName  t) {  return  t.getname()  ;}private boolean tom_is_fun_sym_ConsconcHook( tom.gom.adt.objects.types.HookList  t) {  return  (t!=null) && t.isConsconcHook()  ;}private  tom.gom.adt.objects.types.HookList  tom_make_ConsconcHook( tom.gom.adt.objects.types.Hook  t0,  tom.gom.adt.objects.types.HookList  t1) { return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make(t0, t1); }private  tom.gom.adt.objects.types.Hook  tom_get_slot_ConsconcHook_HeadconcHook( tom.gom.adt.objects.types.HookList  t) {  return  t.getHeadconcHook()  ;}private  tom.gom.adt.objects.types.HookList  tom_get_slot_ConsconcHook_TailconcHook( tom.gom.adt.objects.types.HookList  t) {  return  t.getTailconcHook()  ;}private boolean tom_is_fun_sym_ConsconcSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  (t!=null) && t.isConsconcSlotField()  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_make_ConsconcSlotField( tom.gom.adt.objects.types.SlotField  t0,  tom.gom.adt.objects.types.SlotFieldList  t1) { return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(t0, t1); }private  tom.gom.adt.objects.types.SlotField  tom_get_slot_ConsconcSlotField_HeadconcSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t.getHeadconcSlotField()  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_ConsconcSlotField_TailconcSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t.getTailconcSlotField()  ;}private boolean tom_is_fun_sym_concClassName( tom.gom.adt.objects.types.ClassNameList  t) {  return  t instanceof tom.gom.adt.objects.types.classnamelist.ConsconcClassName || t instanceof tom.gom.adt.objects.types.classnamelist.EmptyconcClassName  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_empty_list_concClassName() { return  tom.gom.adt.objects.types.classnamelist.EmptyconcClassName.make() ; }private  tom.gom.adt.objects.types.ClassNameList  tom_cons_list_concClassName( tom.gom.adt.objects.types.ClassName  e,  tom.gom.adt.objects.types.ClassNameList  l) { return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(e,l) ; }private  tom.gom.adt.objects.types.ClassName  tom_get_head_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) {  return  l.getHeadconcClassName()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_get_tail_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) {  return  l.getTailconcClassName()  ;}private boolean tom_is_empty_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) {  return  l.isEmptyconcClassName()  ;}private  tom.gom.adt.objects.types.ClassNameList  tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList  l1,  tom.gom.adt.objects.types.ClassNameList  l2) {    if(tom_is_empty_concClassName_ClassNameList(l1)) {     return l2;    } else if(tom_is_empty_concClassName_ClassNameList(l2)) {     return l1;    } else if(tom_is_empty_concClassName_ClassNameList(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(l1))) {     return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(l1),tom_append_list_concClassName(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(l1),l2));    }   }  private  tom.gom.adt.objects.types.ClassNameList  tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end) {    if(tom_terms_equal_ClassNameList(begin,end)) {      return ( tom.gom.adt.objects.types.ClassNameList )tom_empty_list_concClassName();    } else {      return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(begin),( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_concClassName(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(begin),end));    }   }  private boolean tom_is_fun_sym_concGomClass( tom.gom.adt.objects.types.GomClassList  t) {  return  t instanceof tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass || t instanceof tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass  ;}private  tom.gom.adt.objects.types.GomClassList  tom_empty_list_concGomClass() { return  tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass.make() ; }private  tom.gom.adt.objects.types.GomClassList  tom_cons_list_concGomClass( tom.gom.adt.objects.types.GomClass  e,  tom.gom.adt.objects.types.GomClassList  l) { return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(e,l) ; }private  tom.gom.adt.objects.types.GomClass  tom_get_head_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) {  return  l.getHeadconcGomClass()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_get_tail_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) {  return  l.getTailconcGomClass()  ;}private boolean tom_is_empty_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) {  return  l.isEmptyconcGomClass()  ;}private  tom.gom.adt.objects.types.GomClassList  tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList  l1,  tom.gom.adt.objects.types.GomClassList  l2) {    if(tom_is_empty_concGomClass_GomClassList(l1)) {     return l2;    } else if(tom_is_empty_concGomClass_GomClassList(l2)) {     return l1;    } else if(tom_is_empty_concGomClass_GomClassList(( tom.gom.adt.objects.types.GomClassList )tom_get_tail_concGomClass_GomClassList(l1))) {     return ( tom.gom.adt.objects.types.GomClassList )tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass )tom_get_head_concGomClass_GomClassList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.GomClassList )tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass )tom_get_head_concGomClass_GomClassList(l1),tom_append_list_concGomClass(( tom.gom.adt.objects.types.GomClassList )tom_get_tail_concGomClass_GomClassList(l1),l2));    }   }  private  tom.gom.adt.objects.types.GomClassList  tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end) {    if(tom_terms_equal_GomClassList(begin,end)) {      return ( tom.gom.adt.objects.types.GomClassList )tom_empty_list_concGomClass();    } else {      return ( tom.gom.adt.objects.types.GomClassList )tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass )tom_get_head_concGomClass_GomClassList(begin),( tom.gom.adt.objects.types.GomClassList )tom_get_slice_concGomClass(( tom.gom.adt.objects.types.GomClassList )tom_get_tail_concGomClass_GomClassList(begin),end));    }   }  private boolean tom_is_fun_sym_concHook( tom.gom.adt.objects.types.HookList  t) {  return  t instanceof tom.gom.adt.objects.types.hooklist.ConsconcHook || t instanceof tom.gom.adt.objects.types.hooklist.EmptyconcHook  ;}private  tom.gom.adt.objects.types.HookList  tom_empty_list_concHook() { return  tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() ; }private  tom.gom.adt.objects.types.HookList  tom_cons_list_concHook( tom.gom.adt.objects.types.Hook  e,  tom.gom.adt.objects.types.HookList  l) { return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make(e,l) ; }private  tom.gom.adt.objects.types.Hook  tom_get_head_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getHeadconcHook()  ;}private  tom.gom.adt.objects.types.HookList  tom_get_tail_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getTailconcHook()  ;}private boolean tom_is_empty_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.isEmptyconcHook()  ;}private  tom.gom.adt.objects.types.HookList  tom_append_list_concHook( tom.gom.adt.objects.types.HookList  l1,  tom.gom.adt.objects.types.HookList  l2) {    if(tom_is_empty_concHook_HookList(l1)) {     return l2;    } else if(tom_is_empty_concHook_HookList(l2)) {     return l1;    } else if(tom_is_empty_concHook_HookList(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1))) {     return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),tom_append_list_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1),l2));    }   }  private  tom.gom.adt.objects.types.HookList  tom_get_slice_concHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end) {    if(tom_terms_equal_HookList(begin,end)) {      return ( tom.gom.adt.objects.types.HookList )tom_empty_list_concHook();    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(begin),( tom.gom.adt.objects.types.HookList )tom_get_slice_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(begin),end));    }   }  private boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField || t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_empty_list_concSlotField() { return  tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() ; }private  tom.gom.adt.objects.types.SlotFieldList  tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField  e,  tom.gom.adt.objects.types.SlotFieldList  l) { return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(e,l) ; }private  tom.gom.adt.objects.types.SlotField  tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getHeadconcSlotField()  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getTailconcSlotField()  ;}private boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.isEmptyconcSlotField()  ;}private  tom.gom.adt.objects.types.SlotFieldList  tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList  l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private  tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end) {    if(tom_terms_equal_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }   

  public ForwardTemplate(ClassName className,
                         ClassName visitor,
                         ClassNameList importedVisitors,
                         ClassName abstractType,
                         ClassNameList importedAbstract,
                         GomClassList sortClasses,
                         GomClassList operatorClasses) {
    super(className);
    this.visitor = visitor;
    this.importedVisitors = importedVisitors;
    this.abstractType = abstractType;
    this.importedAbstractTypes = importedAbstract;
    this.sortClasses = sortClasses;
    this.operatorClasses = operatorClasses;
  }

  /* 
   * We may want to return the stringbuffer itself in the future, or directly
   * write to a Stream
   */
  public String generate() {
    StringBuffer out = new StringBuffer();

    out.append("\npackage "/* Generated by TOM (version 2.3rc0): Do not edit this file */+getPackage()+";\n\npublic class "/* Generated by TOM (version 2.3rc0): Do not edit this file */+className()+" implements "/* Generated by TOM (version 2.3rc0): Do not edit this file */+ className(visitor)+importedVisitorList(importedVisitors) +", jjtraveler.Visitor {\n  protected jjtraveler.Visitor any;\n\n  public "/* Generated by TOM (version 2.3rc0): Do not edit this file */+className()+"(jjtraveler.Visitor v) {\n    this.any = v;\n  }\n\n  public jjtraveler.Visitable visit(jjtraveler.Visitable v) throws jjtraveler.VisitFailure {\n    if (v instanceof "/* Generated by TOM (version 2.3rc0): Do not edit this file */+fullClassName(abstractType)+") {\n      return (("/* Generated by TOM (version 2.3rc0): Do not edit this file */+fullClassName(abstractType)+") v).accept(this);\n    }\n"/* Generated by TOM (version 2.3rc0): Do not edit this file */+generateDispatch(importedAbstractTypes)+"\n    else {\n      return any.visit(v);\n    }\n  }\n\n"/* Generated by TOM (version 2.3rc0): Do not edit this file */+generateVisitMethods()+"\n\n}"





















);

    return out.toString();
  }
  private String generateVisitMethods() {
    StringBuffer out = new StringBuffer();
    // generate a visit for each sort
     if(sortClasses instanceof  tom.gom.adt.objects.types.GomClassList ) { { tom.gom.adt.objects.types.GomClassList  tom_match1_1=(( tom.gom.adt.objects.types.GomClassList )sortClasses); if(tom_is_fun_sym_concGomClass(tom_match1_1) ||  false ) { { tom.gom.adt.objects.types.GomClassList  tom_match1_1_list1=tom_match1_1; { tom.gom.adt.objects.types.GomClassList  tom_match1_1_begin1=tom_match1_1_list1; { tom.gom.adt.objects.types.GomClassList  tom_match1_1_end1=tom_match1_1_list1;{ while (!(tom_is_empty_concGomClass_GomClassList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1;{ { tom.gom.adt.objects.types.GomClass  tom_match1_1_2=tom_get_head_concGomClass_GomClassList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concGomClass_GomClassList(tom_match1_1_list1); if(tom_is_fun_sym_SortClass(tom_match1_1_2) ||  false ) { { tom.gom.adt.objects.types.ClassName  tom_match1_1_2_className=tom_get_slot_SortClass_className(tom_match1_1_2); { tom.gom.adt.objects.types.ClassName  tom_sortName=tom_match1_1_2_className; if( true ) {


        out.append("\n  public "/* Generated by TOM (version 2.3rc0): Do not edit this file */+ fullClassName(tom_sortName) +" "/* Generated by TOM (version 2.3rc0): Do not edit this file */+visitMethod(tom_sortName)+"("/* Generated by TOM (version 2.3rc0): Do not edit this file */+fullClassName(tom_sortName)+" arg) throws jjtraveler.VisitFailure {\n    return ("/* Generated by TOM (version 2.3rc0): Do not edit this file */+fullClassName(tom_sortName)+") any.visit(arg);\n  }\n"



);
       }}} }}tom_match1_1_end1=tom_get_tail_concGomClass_GomClassList(tom_match1_1_end1);} }tom_match1_1_list1=tom_match1_1_begin1;}}}} }} }

    return out.toString();
  }

  private String generateDispatch(ClassNameList types) {
    StringBuffer out = new StringBuffer();
    while(!types.isEmptyconcClassName()) {
      out.append("    else if (v instanceof "/* Generated by TOM (version 2.3rc0): Do not edit this file */+fullClassName(types.getHeadconcClassName())+") {\n      return (("/* Generated by TOM (version 2.3rc0): Do not edit this file */+fullClassName(types.getHeadconcClassName())+") v).accept(this);\n    }"

);
      types = types.getTailconcClassName();
    }
    return out.toString();
  }
  String importedVisitorList(ClassNameList list) {
    StringBuffer out = new StringBuffer();
    while(!list.isEmptyconcClassName()) {
      out.append(", "+fullClassName(list.getHeadconcClassName()));
      list = list.getTailconcClassName();
    }
    return out.toString();
  }
}
