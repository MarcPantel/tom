/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import tom.gom.backend.TemplateClass;
import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class BasicStrategyTemplate extends TemplateClass {
  ClassName fwd;

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */   private static boolean tom_terms_equal_ClassNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomClassList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomClass(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_VisitableFwdClass( tom.gom.adt.objects.types.GomClass  t) {  return  t instanceof tom.gom.adt.objects.types.gomclass.VisitableFwdClass  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VisitableFwdClass_ClassName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getClassName()  ;}private static  tom.gom.adt.objects.types.GomClass  tom_get_slot_VisitableFwdClass_Fwd( tom.gom.adt.objects.types.GomClass  t) {  return  t.getFwd()  ;}private static boolean tom_is_fun_sym_FwdClass( tom.gom.adt.objects.types.GomClass  t) {  return  t instanceof tom.gom.adt.objects.types.gomclass.FwdClass  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_FwdClass_ClassName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getClassName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_FwdClass_Visitor( tom.gom.adt.objects.types.GomClass  t) {  return  t.getVisitor()  ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_FwdClass_ImportedVisitors( tom.gom.adt.objects.types.GomClass  t) {  return  t.getImportedVisitors()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_FwdClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getAbstractType()  ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_FwdClass_ImportedAbstractTypes( tom.gom.adt.objects.types.GomClass  t) {  return  t.getImportedAbstractTypes()  ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_FwdClass_SortClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getSortClasses()  ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_slot_FwdClass_OperatorClasses( tom.gom.adt.objects.types.GomClass  t) {  return  t.getOperatorClasses()  ;} 

  public BasicStrategyTemplate(GomClass basic) {
    super(basic);
     if(basic instanceof  tom.gom.adt.objects.types.GomClass ) { { tom.gom.adt.objects.types.GomClass  tom_match1_1=(( tom.gom.adt.objects.types.GomClass )basic); if ( ( tom_is_fun_sym_VisitableFwdClass(tom_match1_1) ||  false  ) ) { { tom.gom.adt.objects.types.GomClass  tom_match1_1_Fwd=tom_get_slot_VisitableFwdClass_Fwd(tom_match1_1); if ( ( tom_is_fun_sym_FwdClass(tom_match1_1_Fwd) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_fwdClass=tom_get_slot_FwdClass_ClassName(tom_match1_1_Fwd); if ( true ) {


        this.fwd = tom_fwdClass;
        return;
       } } } } } } }

    throw new GomRuntimeException(
        "Wrong argument for BasicStrategyTemplate: " + basic);
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {
    writer.write("\npackage "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getPackage()+";\nimport tom.library.strategy.mutraveler.Position;\n    \n  public class "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className(fwd)+" implements tom.library.strategy.mutraveler.MuStrategy, tom.library.sl.Strategy {\n  private Position position;\n\n  public void setPosition(Position pos) {\n    this.position = pos;\n  }\n\n  public Position getPosition() {\n    if(hasPosition()) {\n      return (Position) position.clone();\n    } else {\n      throw new RuntimeException(\"position not initialized\");\n    }\n  }\n\n  public boolean hasPosition() {\n    return position!=null;\n  }\n\n    \n  public int getChildCount() {\n    return 1;\n  }\n    \n  public jjtraveler.Visitable getChildAt(int i) {\n    switch (i) {\n      case 0: return (jjtraveler.Visitable) any;\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n    \n  public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) {\n    switch (i) {\n      case 0: any = (jjtraveler.reflective.VisitableVisitor) child; return this;\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable[] getChildren() {\n    return new jjtraveler.Visitable[]{(jjtraveler.Visitable)any};\n  }\n\n  public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] children) {\n    any = (jjtraveler.Visitor)children[0];\n    return this;\n  }\n\n  /*\n   * Apply the strategy, and returns the subject in case of VisitFailure\n   */\n  public jjtraveler.Visitable apply(jjtraveler.Visitable any) {\n    // Obsolete: for compatibility purpose only\n    try {\n      return tom.library.strategy.mutraveler.MuTraveler.init(this).visit(any);\n    } catch (jjtraveler.VisitFailure f) {\n      return any;\n    }\n  }\n\n  public void execute(tom.library.sl.Strategy s) {\n    tom.library.sl.AbstractStrategy.init(s,getEnvironment());\n    s.visit();\n  }\n\n  public void execute(tom.library.sl.Strategy s, tom.library.sl.Visitable v) {\n    getEnvironment().setSubject(v);\n    tom.library.sl.AbstractStrategy.init(s,getEnvironment());\n    s.visit();\n  }\n\n\n  public tom.library.sl.Visitable fire(tom.library.sl.Visitable any) {\n    tom.library.sl.AbstractStrategy.init(this,new tom.library.sl.Environment());\n    getEnvironment().setRoot(any);\n    visit();\n    if (getEnvironment().getStatus() == tom.library.sl.Environment.SUCCESS) {\n      return getEnvironment().getRoot();\n    } else {\n      throw new tom.library.sl.FireException();\n    }\n  }\n\n  public void visit() {\n    try {\n      getEnvironment().setSubject((tom.library.sl.Visitable)this.visit(getEnvironment().getSubject()));\n    } catch(jjtraveler.VisitFailure f) {\n      getEnvironment().setStatus(tom.library.sl.Environment.FAILURE);\n    }\n  }\n\n  public tom.library.sl.Environment getEnvironment() {\n    return ((tom.library.sl.Strategy)any).getEnvironment();\n  }\n\n  public void setEnvironment(tom.library.sl.Environment env) {\n    ((tom.library.sl.Strategy)any).setEnvironment(env);\n  }\n\n  public tom.library.sl.Strategy accept(tom.library.sl.reflective.StrategyFwd v) throws jjtraveler.VisitFailure {\n    return v.visit_Strategy(this);\n  } \n\n  public tom.library.strategy.mutraveler.MuStrategy accept(tom.library.strategy.mutraveler.reflective.StrategyVisitorFwd v) throws jjtraveler.VisitFailure {\n    return v.visit_Strategy(this);\n  }\n    \n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"(jjtraveler.reflective.VisitableVisitor any) {\n    super(any);\n  }\n}\n"

















































































































);
  }
}
