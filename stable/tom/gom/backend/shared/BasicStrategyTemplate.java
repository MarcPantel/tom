/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import tom.gom.backend.TemplateClass;
import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;

public class BasicStrategyTemplate extends TemplateClass {
  ClassName fwd;

  public BasicStrategyTemplate(ClassName className, ClassName fwd) {
    super(className);
    this.fwd = fwd;
  }

  public String generate() {
    StringBuffer out = new StringBuffer();

    out.append("\npackage "/* Generated by TOM (version 2.4alpha): Do not edit this file */+getPackage()+";\nimport tom.library.strategy.mutraveler.Position;\nimport tom.library.strategy.mutraveler.MuStrategy;\n    \n  public class "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className(fwd)+" implements MuStrategy {\n  private Position position;\n\n  public void setPosition(Position pos) {\n    this.position = pos;\n  }\n\n  public Position getPosition() {\n    if(hasPosition()) {\n      return (Position) position.clone();\n    } else {\n      throw new RuntimeException(\"position not initialized\");\n    }\n  }\n\n  public boolean hasPosition() {\n    return position!=null;\n  }\n\n    \n  public int getChildCount() {\n    return 1;\n  }\n    \n  public jjtraveler.Visitable getChildAt(int i) {\n    switch (i) {\n      case 0: return (jjtraveler.Visitable) any;\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n    \n  public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) {\n    switch (i) {\n      case 0: any = (jjtraveler.reflective.VisitableVisitor) child; return this;\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  /*\n   * Apply the strategy, and returns the subject in case of VisitFailure\n   */\n  public jjtraveler.Visitable apply(jjtraveler.Visitable any) {\n    try {\n      return tom.library.strategy.mutraveler.MuTraveler.init(this).visit(any);\n    } catch (jjtraveler.VisitFailure f) {\n      return any;\n    }\n  }\n\n  public tom.library.strategy.mutraveler.MuStrategy accept(tom.library.strategy.mutraveler.reflective.StrategyVisitorFwd v) throws jjtraveler.VisitFailure {\n    return v.visit_Strategy(this);\n  }\n    \n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"(jjtraveler.reflective.VisitableVisitor any) {\n    super(any);\n  }\n}\n"





























































);

    return out.toString();
  }
}
