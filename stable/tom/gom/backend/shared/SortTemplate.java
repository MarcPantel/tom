/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import tom.gom.backend.TemplateClass;
import tom.gom.adt.objects.types.*;

public class SortTemplate extends TemplateClass {
  ClassName abstractType;
  ClassName visitor;
  ClassNameList operatorList;
  SlotFieldList slotList;

  public SortTemplate(ClassName className,
                      ClassName abstractType,
                      ClassName visitor,
                      ClassNameList operatorList,
                      SlotFieldList slots) {
    super(className);
    this.abstractType = abstractType;
    this.visitor = visitor;
    this.operatorList = operatorList;
    this.slotList = slots;
  }

  public String generate() {
    StringBuffer out = new StringBuffer();

    out.append("\npackage "/* Generated by TOM (version 2.4alpha): Do not edit this file */+getPackage()+";        \n\npublic abstract class "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(abstractType)+" {\n\n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(abstractType)+" accept("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(visitor)+" v) throws jjtraveler.VisitFailure {\n    return v."/* Generated by TOM (version 2.4alpha): Do not edit this file */+visitMethod(className)+"(this);\n  }\n\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateBody()+"\n\n}\n"











);
    return out.toString();
  }

  public String generateBody() {
    StringBuffer out = new StringBuffer();

    // methods for each operator
    ClassNameList consum = operatorList;
    while (!consum.isEmptyconcClassName()) {
      ClassName operatorName = consum.getHeadconcClassName();
      consum = consum.getTailconcClassName();

      out.append("\n  public boolean "/* Generated by TOM (version 2.4alpha): Do not edit this file */+isOperatorMethod(operatorName)+"() {\n    return false;\n  }\n\n"




);
    }
    // methods for each slot
    while (!slotList.isEmptyconcSlotField()) {
      SlotField slot = slotList.getHeadconcSlotField();
      slotList = slotList.getTailconcSlotField();

      /* Do not generate "hasOp" methods for now
      out.append("\tpublic boolean "+hasMethod(slot)+"() {\n");
      out.append("\t\treturn false;\n");
      out.append("\t}\n");
      out.append("\n");
      */

      out.append("\n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+slotDomain(slot)+" "/* Generated by TOM (version 2.4alpha): Do not edit this file */+getMethod(slot)+"() {\n    throw new UnsupportedOperationException(\"This "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" has no "/* Generated by TOM (version 2.4alpha): Do not edit this file */+slot.getname()+"\");\n  }\n\n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" "/* Generated by TOM (version 2.4alpha): Do not edit this file */+setMethod(slot)+"("/* Generated by TOM (version 2.4alpha): Do not edit this file */+slotDomain(slot)+" _arg) {\n    throw new UnsupportedOperationException(\"This "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" has no "/* Generated by TOM (version 2.4alpha): Do not edit this file */+slot.getname()+"\");\n  }\n\n"








);

    }

    /* fromTerm method, dispatching to operator classes */
    out.append("\n  public static "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName()+" fromTerm(aterm.ATerm trm) {\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName()+" tmp;\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateFromTerm("trm","tmp")+"\n    throw new IllegalArgumentException(\"This is not a "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" \" + trm);\n  }\n\n"






);

    /* length and reverse prototypes, only usable on lists */
    out.append("\n  public int length() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName()+" reverse() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n"









);

    return out.toString();
  }
  
  private String generateFromTerm(String trm, String tmp) {
    StringBuffer out = new StringBuffer();
    ClassNameList consum = operatorList;
    while (!consum.isEmptyconcClassName()) {
      ClassName operatorName = consum.getHeadconcClassName();
      consum = consum.getTailconcClassName();
      out.append("\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+tmp+" = "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(operatorName)+".fromTerm("/* Generated by TOM (version 2.4alpha): Do not edit this file */+trm+");\n    if ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+tmp+" != null) {\n      return tmp;\n    }\n"




);
    }
    return out.toString();
  }

}
