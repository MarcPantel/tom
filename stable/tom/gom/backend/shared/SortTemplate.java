/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import java.io.*;
import java.util.*;

import tom.gom.backend.TemplateClass;
import tom.gom.backend.TemplateHookedClass;
import tom.gom.adt.objects.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class SortTemplate extends TemplateHookedClass {
  ClassName abstractType;
  ClassName visitor;
  ClassNameList operatorList;
  ClassNameList variadicOperatorList;
  SlotFieldList slotList;
 
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */   private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotFieldList(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotFieldList ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClass(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClass ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassName(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassName ;}private static boolean tom_equal_term_ClassNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassNameList(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassNameList ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookList(Object t) { return  t instanceof tom.gom.adt.objects.types.HookList ;}private static boolean tom_is_fun_sym_SortClass( tom.gom.adt.objects.types.GomClass  t) { return  t instanceof tom.gom.adt.objects.types.gomclass.SortClass ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) { return  t.getAbstractType() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Mapping( tom.gom.adt.objects.types.GomClass  t) { return  t.getMapping() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Visitor( tom.gom.adt.objects.types.GomClass  t) { return  t.getVisitor() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Forward( tom.gom.adt.objects.types.GomClass  t) { return  t.getForward() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_SortClass_Operators( tom.gom.adt.objects.types.GomClass  t) { return  t.getOperators() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_SortClass_VariadicOperators( tom.gom.adt.objects.types.GomClass  t) { return  t.getVariadicOperators() ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_SortClass_Slots( tom.gom.adt.objects.types.GomClass  t) { return  t.getSlots() ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_SortClass_Hooks( tom.gom.adt.objects.types.GomClass  t) { return  t.getHooks() ;}private static boolean tom_is_fun_sym_concClassName( tom.gom.adt.objects.types.ClassNameList  t) { return  t instanceof tom.gom.adt.objects.types.classnamelist.ConsconcClassName || t instanceof tom.gom.adt.objects.types.classnamelist.EmptyconcClassName ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_empty_list_concClassName() { return  tom.gom.adt.objects.types.classnamelist.EmptyconcClassName.make() ; }private static  tom.gom.adt.objects.types.ClassNameList  tom_cons_list_concClassName( tom.gom.adt.objects.types.ClassName  e,  tom.gom.adt.objects.types.ClassNameList  l) { return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(e,l) ; }private static  tom.gom.adt.objects.types.ClassName  tom_get_head_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) { return  l.getHeadconcClassName() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_tail_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) { return  l.getTailconcClassName() ;}private static boolean tom_is_empty_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) { return  l.isEmptyconcClassName() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList  l1,  tom.gom.adt.objects.types.ClassNameList  l2) {    if(tom_is_empty_concClassName_ClassNameList(l1)) {     return l2;    } else if(tom_is_empty_concClassName_ClassNameList(l2)) {     return l1;    } else if(tom_is_empty_concClassName_ClassNameList(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(l1))) {     return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(l1),tom_append_list_concClassName(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end, tom.gom.adt.objects.types.ClassNameList  tail) {    if(tom_equal_term_ClassNameList(begin,end)) {      return tail;    } else {      return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(begin),( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_concClassName(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(begin),end,tail));    }   }   

  public SortTemplate(File tomHomePath,
                      List importList, 	
                      GomClass gomClass,
                      TemplateClass mapping) {
    super(gomClass,tomHomePath,importList,mapping);
    if (tom_is_sort_GomClass(gomClass)) {{  tom.gom.adt.objects.types.GomClass  tomMatch1Position1=(( tom.gom.adt.objects.types.GomClass )gomClass);if ( ( tom_is_fun_sym_SortClass(tomMatch1Position1) ||  false  ) ) {if ( true ) {






        this.abstractType = tom_get_slot_SortClass_AbstractType(tomMatch1Position1);
        this.visitor = tom_get_slot_SortClass_Visitor(tomMatch1Position1);
        this.operatorList = tom_get_slot_SortClass_Operators(tomMatch1Position1);
        this.variadicOperatorList = tom_get_slot_SortClass_VariadicOperators(tomMatch1Position1);
        this.slotList = tom_get_slot_SortClass_Slots(tomMatch1Position1);
        return;
      }}}}

    throw new GomRuntimeException(
        "Bad argument for SortTemplate: " + gomClass);
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {
    writer.write("\npackage "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getPackage()+";        \n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateImport()+"\n\npublic abstract class "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(abstractType)+" "/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateInterface()+"{\n\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateBlock()+"\n\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(abstractType)+" accept("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(visitor)+" v) throws jjtraveler.VisitFailure {\n    return v."/* Generated by TOM (version 2.5alpha): Do not edit this file */+visitMethod(className)+"(this);\n  }\n"










);
generateBody(writer);
writer.write("\n}\n"

);
  }

  public void generateBody(java.io.Writer writer) throws java.io.IOException {
    // methods for each operator
    ClassNameList consum = operatorList;
    while (!consum.isEmptyconcClassName()) {
      ClassName operatorName = consum.getHeadconcClassName();
      consum = consum.getTailconcClassName();

      writer.write("\n  public boolean "/* Generated by TOM (version 2.5alpha): Do not edit this file */+isOperatorMethod(operatorName)+"() {\n    return false;\n  }\n\n"




);
    }
    // methods for each slot
    while (!slotList.isEmptyconcSlotField()) {
      SlotField slot = slotList.getHeadconcSlotField();
      slotList = slotList.getTailconcSlotField();

      /* Do not generate "hasOp" methods for now
      writer.write("\tpublic boolean "+hasMethod(slot)+"() {\n");
      writer.write("\t\treturn false;\n");
      writer.write("\t}\n");
      writer.write("\n");
      */

      writer.write("\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotDomain(slot)+" "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getMethod(slot)+"() {\n    throw new UnsupportedOperationException(\"This "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" has no "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slot.getName()+"\");\n  }\n\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" "/* Generated by TOM (version 2.5alpha): Do not edit this file */+setMethod(slot)+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotDomain(slot)+" _arg) {\n    throw new UnsupportedOperationException(\"This "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" has no "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slot.getName()+"\");\n  }\n\n"








);

    }

    /* fromTerm method, dispatching to operator classes */
    writer.write("\n  public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+" fromTerm(aterm.ATerm trm) {\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+" tmp;\n"


);
    generateFromTerm(writer,"trm","tmp");
    writer.write("\n    throw new IllegalArgumentException(\"This is not a "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" \" + trm);\n  }\n\n  public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+" fromString(String s) {\n    return fromTerm(aterm.pure.SingletonFactory.getInstance().parse(s));\n  }\n\n  public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+" fromStream(java.io.InputStream stream) throws java.io.IOException {\n    return fromTerm(aterm.pure.SingletonFactory.getInstance().readFromFile(stream));\n  }\n\n"











);

    /* length and reverse prototypes, only usable on lists */
    writer.write("\n  public int length() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+" reverse() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n"









);
    if (! hooks.isEmptyconcHook()) {
      mapping.generate(writer); 
    }
  }

protected String generateInterface() {
  String interfaces = super.generateInterface();
  if (! interfaces.equals("")) return "implements "+interfaces.substring(1);
  else return interfaces;
}

  private void generateFromTerm(java.io.Writer writer, String trm, String tmp) throws java.io.IOException {
    ClassNameList consum = tom_append_list_concClassName(operatorList,tom_append_list_concClassName(variadicOperatorList,tom_empty_list_concClassName()));
    while (!consum.isEmptyconcClassName()) {
      ClassName operatorName = consum.getHeadconcClassName();
      consum = consum.getTailconcClassName();
      writer.write("\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tmp+" = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(operatorName)+".fromTerm("/* Generated by TOM (version 2.5alpha): Do not edit this file */+trm+");\n    if ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+tmp+" != null) {\n      return tmp;\n    }\n"




);
    }
  }

  public void generateTomMapping(Writer writer, ClassName basicStrategy)
      throws java.io.IOException {
    writer.write("\n%typeterm "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" {\n  implement { "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+" }\n  is_sort(t) { t instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName()+" }\n  equals(t1,t2) { t1.equals(t2) }\n  visitor_fwd { "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(basicStrategy)+" }\n}\n"






);
    return;
  }
}
