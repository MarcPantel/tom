/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import java.io.*;
import java.util.*;

import tom.gom.backend.TemplateClass;
import tom.gom.backend.TemplateHookedClass;
import tom.gom.adt.objects.types.*;
import tom.gom.tools.error.GomRuntimeException;
import tom.platform.OptionManager;

public class SortTemplate extends TemplateHookedClass {
  ClassName abstractType;
  ClassName visitor;
  ClassNameList operatorList;
  ClassNameList variadicOperatorList;
  SlotFieldList slotList;

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Code(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Code(Object t) { return  t instanceof tom.gom.adt.code.types.Code ;}private static boolean tom_equal_term_Hook(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Hook(Object t) { return  t instanceof tom.gom.adt.objects.types.Hook ;}private static boolean tom_equal_term_SlotField(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotField(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotField ;}private static boolean tom_equal_term_SlotFieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotFieldList(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotFieldList ;}private static boolean tom_equal_term_GomClass(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClass(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClass ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassName(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassName ;}private static boolean tom_equal_term_GomClassList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomClassList(Object t) { return  t instanceof tom.gom.adt.objects.types.GomClassList ;}private static boolean tom_equal_term_ClassNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassNameList(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassNameList ;}private static boolean tom_equal_term_HookList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookList(Object t) { return  t instanceof tom.gom.adt.objects.types.HookList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.gom.adt.gom.types.Slot ;}private static boolean tom_equal_term_ArgList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ArgList(Object t) { return  t instanceof tom.gom.adt.gom.types.ArgList ;}private static boolean tom_equal_term_IdKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_IdKind(Object t) { return  t instanceof tom.gom.adt.gom.types.IdKind ;}private static boolean tom_equal_term_GomModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleList ;}private static boolean tom_equal_term_GrammarList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GrammarList(Object t) { return  t instanceof tom.gom.adt.gom.types.GrammarList ;}private static boolean tom_equal_term_TypedProduction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TypedProduction(Object t) { return  t instanceof tom.gom.adt.gom.types.TypedProduction ;}private static boolean tom_equal_term_SectionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SectionList(Object t) { return  t instanceof tom.gom.adt.gom.types.SectionList ;}private static boolean tom_equal_term_OperatorDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDeclList ;}private static boolean tom_equal_term_HookDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDeclList ;}private static boolean tom_equal_term_SortDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDeclList ;}private static boolean tom_equal_term_OperatorDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OperatorDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.OperatorDecl ;}private static boolean tom_equal_term_GomModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModule(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModule ;}private static boolean tom_equal_term_Pair(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Pair(Object t) { return  t instanceof tom.gom.adt.gom.types.Pair ;}private static boolean tom_equal_term_Section(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Section(Object t) { return  t instanceof tom.gom.adt.gom.types.Section ;}private static boolean tom_equal_term_GomTypeList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomTypeList(Object t) { return  t instanceof tom.gom.adt.gom.types.GomTypeList ;}private static boolean tom_equal_term_ProductionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ProductionList(Object t) { return  t instanceof tom.gom.adt.gom.types.ProductionList ;}private static boolean tom_equal_term_Decl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Decl(Object t) { return  t instanceof tom.gom.adt.gom.types.Decl ;}private static boolean tom_equal_term_ImportList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportList(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportList ;}private static boolean tom_equal_term_Sort(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Sort(Object t) { return  t instanceof tom.gom.adt.gom.types.Sort ;}private static boolean tom_equal_term_SortDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.SortDecl ;}private static boolean tom_equal_term_HookDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.HookDecl ;}private static boolean tom_equal_term_ModuleDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDeclList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDeclList ;}private static boolean tom_equal_term_Module(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Module(Object t) { return  t instanceof tom.gom.adt.gom.types.Module ;}private static boolean tom_equal_term_FieldList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_FieldList(Object t) { return  t instanceof tom.gom.adt.gom.types.FieldList ;}private static boolean tom_equal_term_Grammar(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Grammar(Object t) { return  t instanceof tom.gom.adt.gom.types.Grammar ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.gom.adt.gom.types.SlotList ;}private static boolean tom_equal_term_SortList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SortList(Object t) { return  t instanceof tom.gom.adt.gom.types.SortList ;}private static boolean tom_equal_term_Arg(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Arg(Object t) { return  t instanceof tom.gom.adt.gom.types.Arg ;}private static boolean tom_equal_term_GomModuleName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomModuleName(Object t) { return  t instanceof tom.gom.adt.gom.types.GomModuleName ;}private static boolean tom_equal_term_Field(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Field(Object t) { return  t instanceof tom.gom.adt.gom.types.Field ;}private static boolean tom_equal_term_Production(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Production(Object t) { return  t instanceof tom.gom.adt.gom.types.Production ;}private static boolean tom_equal_term_ModuleDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleDecl(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleDecl ;}private static boolean tom_equal_term_ModuleList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ModuleList(Object t) { return  t instanceof tom.gom.adt.gom.types.ModuleList ;}private static boolean tom_equal_term_GomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_GomType(Object t) { return  t instanceof tom.gom.adt.gom.types.GomType ;}private static boolean tom_equal_term_ImportedModule(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ImportedModule(Object t) { return  t instanceof tom.gom.adt.gom.types.ImportedModule ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.gom.adt.gom.types.Option ;}private static boolean tom_equal_term_HookKind(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_HookKind(Object t) { return  t instanceof tom.gom.adt.gom.types.HookKind ;}private static boolean tom_is_fun_sym_SortClass( tom.gom.adt.objects.types.GomClass  t) { return  (t instanceof tom.gom.adt.objects.types.gomclass.SortClass) ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_ClassName( tom.gom.adt.objects.types.GomClass  t) { return  t.getClassName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_AbstractType( tom.gom.adt.objects.types.GomClass  t) { return  t.getAbstractType() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Mapping( tom.gom.adt.objects.types.GomClass  t) { return  t.getMapping() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Visitor( tom.gom.adt.objects.types.GomClass  t) { return  t.getVisitor() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SortClass_Forward( tom.gom.adt.objects.types.GomClass  t) { return  t.getForward() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_SortClass_Operators( tom.gom.adt.objects.types.GomClass  t) { return  t.getOperators() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slot_SortClass_VariadicOperators( tom.gom.adt.objects.types.GomClass  t) { return  t.getVariadicOperators() ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_SortClass_Slots( tom.gom.adt.objects.types.GomClass  t) { return  t.getSlots() ;}private static  tom.gom.adt.objects.types.HookList  tom_get_slot_SortClass_Hooks( tom.gom.adt.objects.types.GomClass  t) { return  t.getHooks() ;}private static boolean tom_is_fun_sym_concClassName( tom.gom.adt.objects.types.ClassNameList  t) { return  ((t instanceof tom.gom.adt.objects.types.classnamelist.ConsconcClassName) || (t instanceof tom.gom.adt.objects.types.classnamelist.EmptyconcClassName)) ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_empty_list_concClassName() { return  tom.gom.adt.objects.types.classnamelist.EmptyconcClassName.make() ; }private static  tom.gom.adt.objects.types.ClassNameList  tom_cons_list_concClassName( tom.gom.adt.objects.types.ClassName  e,  tom.gom.adt.objects.types.ClassNameList  l) { return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(e,l) ; }private static  tom.gom.adt.objects.types.ClassName  tom_get_head_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) { return  l.getHeadconcClassName() ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_tail_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) { return  l.getTailconcClassName() ;}private static boolean tom_is_empty_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) { return  l.isEmptyconcClassName() ;}   private static   tom.gom.adt.objects.types.ClassNameList  tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList  l2) {     if( l1.isEmptyconcClassName() ) {       return l2;     } else if( l2.isEmptyconcClassName() ) {       return l1;     } else if(  l1.getTailconcClassName() .isEmptyconcClassName() ) {       return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make( l1.getHeadconcClassName() ,l2) ;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make( l1.getHeadconcClassName() ,tom_append_list_concClassName( l1.getTailconcClassName() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.ClassNameList  tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end, tom.gom.adt.objects.types.ClassNameList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make( begin.getHeadconcClassName() ,( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_concClassName( begin.getTailconcClassName() ,end,tail)) ;     }   }    

  public SortTemplate(File tomHomePath,
                      OptionManager manager,
                      List importList, 	
                      GomClass gomClass,
                      TemplateClass mapping) {
    super(gomClass,manager,tomHomePath,importList,mapping);
    if (tom_is_sort_GomClass(gomClass)) {{  tom.gom.adt.objects.types.GomClass  tomMatch403NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomClass);if (tom_is_fun_sym_SortClass(tomMatch403NameNumberfreshSubject_1)) {{  tom.gom.adt.objects.types.ClassName  tomMatch403NameNumber_freshVar_0=tom_get_slot_SortClass_AbstractType(tomMatch403NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.ClassName  tomMatch403NameNumber_freshVar_1=tom_get_slot_SortClass_Visitor(tomMatch403NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.ClassNameList  tomMatch403NameNumber_freshVar_2=tom_get_slot_SortClass_Operators(tomMatch403NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.ClassNameList  tomMatch403NameNumber_freshVar_3=tom_get_slot_SortClass_VariadicOperators(tomMatch403NameNumberfreshSubject_1);{  tom.gom.adt.objects.types.SlotFieldList  tomMatch403NameNumber_freshVar_4=tom_get_slot_SortClass_Slots(tomMatch403NameNumberfreshSubject_1);if ( true ) {





        this.abstractType = tomMatch403NameNumber_freshVar_0;
        this.visitor = tomMatch403NameNumber_freshVar_1;
        this.operatorList = tomMatch403NameNumber_freshVar_2;
        this.variadicOperatorList = tomMatch403NameNumber_freshVar_3;
        this.slotList = tomMatch403NameNumber_freshVar_4;
        return;
      }}}}}}}}}

    throw new GomRuntimeException(
        "Bad argument for SortTemplate: " + gomClass);
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {
    writer.write("\npackage "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getPackage()+";        \n"/* Generated by TOM (version 2.6alpha): Do not edit this file */+generateImport()+"\n//import "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getPackage()+"."/* Generated by TOM (version 2.6alpha): Do not edit this file */+className().toLowerCase()+".*;\n//import "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getPackage().substring(0,getPackage().lastIndexOf("."))+".*;\n\npublic abstract class "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" {\n\n"/* Generated by TOM (version 2.6alpha): Do not edit this file */+generateBlock()+"\n  @Override\n  public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(abstractType)+" accept("/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(visitor)+" v) throws tom.library.sl.VisitFailure {\n    return v."/* Generated by TOM (version 2.6alpha): Do not edit this file */+visitMethod(className)+"(this);\n  }\n"












);
generateBody(writer);
writer.write("\n}\n"

);
  }

  public void generateBody(java.io.Writer writer) throws java.io.IOException {
    // methods for each operator
    ClassNameList consum = operatorList;
    while (!consum.isEmptyconcClassName()) {
      ClassName operatorName = consum.getHeadconcClassName();
      consum = consum.getTailconcClassName();

      writer.write("\n  public boolean "/* Generated by TOM (version 2.6alpha): Do not edit this file */+isOperatorMethod(operatorName)+"() {\n    return false;\n  }\n\n"




);
    }
    // methods for each slot
    SlotFieldList sl = slotList;
    while (!sl.isEmptyconcSlotField()) {
      SlotField slot = sl.getHeadconcSlotField();
      sl = sl.getTailconcSlotField();

      writer.write("\n  public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+slotDomain(slot)+" "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getMethod(slot)+"() {\n    throw new UnsupportedOperationException(\"This "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+" has no "/* Generated by TOM (version 2.6alpha): Do not edit this file */+slot.getName()+"\");\n  }\n\n  public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+" "/* Generated by TOM (version 2.6alpha): Do not edit this file */+setMethod(slot)+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+slotDomain(slot)+" _arg) {\n    throw new UnsupportedOperationException(\"This "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+" has no "/* Generated by TOM (version 2.6alpha): Do not edit this file */+slot.getName()+"\");\n  }\n\n"








);

    }

    /* fromTerm method, dispatching to operator classes */
    writer.write("\n  public static "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+" fromTerm(aterm.ATerm trm) {\n    "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+" tmp;\n"


);
    generateFromTerm(writer,"trm","tmp");
    writer.write("\n    throw new IllegalArgumentException(\"This is not a "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+" \" + trm);\n  }\n\n  public static "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+" fromString(String s) {\n    return fromTerm(atermFactory.parse(s));\n  }\n\n  public static "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+" fromStream(java.io.InputStream stream) throws java.io.IOException {\n    return fromTerm(atermFactory.readFromFile(stream));\n  }\n\n"











);

    /* length and reverse prototypes, only usable on lists */
    writer.write("\n  public int length() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  public "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+" reverse() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  /**\n   * Collection\n   */\n  /*\n  public boolean add(Object o) {\n    throw new UnsupportedOperationException(\"This object \"+this.getClass().getName()+\" is not mutable\");\n  }\n\n  public boolean addAll(java.util.Collection c) {\n    throw new UnsupportedOperationException(\"This object \"+this.getClass().getName()+\" is not mutable\");\n  }\n\n  public void clear() {\n    throw new UnsupportedOperationException(\"This object \"+this.getClass().getName()+\" is not mutable\");\n  }\n\n  public boolean containsAll(java.util.Collection c) {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  public boolean contains(Object o) {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  public boolean equals(Object o) { return this == o; }\n\n  public int hashCode() { return hashCode(); }\n\n  public boolean isEmpty() { return false; }\n\n  public java.util.Iterator iterator() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  public boolean remove(Object o) {\n    throw new UnsupportedOperationException(\"This object \"+this.getClass().getName()+\" is not mutable\");\n  }\n\n  public boolean removeAll(java.util.Collection c) {\n    throw new UnsupportedOperationException(\"This object \"+this.getClass().getName()+\" is not mutable\");\n  }\n\n  public boolean retainAll(java.util.Collection c) {\n    throw new UnsupportedOperationException(\"This object \"+this.getClass().getName()+\" is not mutable\");\n  }\n\n  public int size() { return length(); }\n\n  public Object[] toArray() {\n    throw new IllegalArgumentException(\n      \"This \"+this.getClass().getName()+\" is not a list\");\n  }\n\n  public Object[] toArray(Object[] a) {\n    throw new UnsupportedOperationException(\"Not yet implemented\");\n  }\n  */\n  "






































































);
  /*
    // methods for each variadic operator
    consum = variadicOperatorList;
    while(!consum.isEmptyconcClassName()) {
      ClassName operatorName = consum.getHeadconcClassName();
      consum = consum.getTailconcClassName();
      // look for the corresponding domain
matchblock: {
      %match(slotList) {
        concSlotField(_*,slot@SlotField[Name=opname,Domain=domain],_*) -> {
          if(`opname.equals("Head"+operatorName.getName())) {
      writer.write(%[
  public java.util.Collection<@primitiveToReferenceType(slotDomain(`slot))@> @getCollectionMethod(operatorName)@() {
    throw new IllegalArgumentException(
      "This "+this.getClass().getName()+" is not a list");
  }
]%);
      break matchblock;
          }
        }
      }
      }
    }
  */
    if (!hooks.isEmptyconcHook()) {
      mapping.generate(writer); 
    }
  }

  private void generateFromTerm(java.io.Writer writer, String trm, String tmp) throws java.io.IOException {
    ClassNameList consum = tom_append_list_concClassName(operatorList,tom_append_list_concClassName(variadicOperatorList,tom_empty_list_concClassName()));
    while (!consum.isEmptyconcClassName()) {
      ClassName operatorName = consum.getHeadconcClassName();
      consum = consum.getTailconcClassName();
      writer.write("\n    "/* Generated by TOM (version 2.6alpha): Do not edit this file */+tmp+" = "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(operatorName)+".fromTerm("/* Generated by TOM (version 2.6alpha): Do not edit this file */+trm+");\n    if ("/* Generated by TOM (version 2.6alpha): Do not edit this file */+tmp+" != null) {\n      return tmp;\n    }\n"




);
    }
  }

  public void generateTomMapping(Writer writer, ClassName basicStrategy)
      throws java.io.IOException {
    writer.write("\n%typeterm "/* Generated by TOM (version 2.6alpha): Do not edit this file */+className()+" {\n  implement { "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+" }\n  is_sort(t) { $t instanceof "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName()+" }\n  equals(t1,t2) { $t1.equals($t2) }\n  visitor_fwd { "/* Generated by TOM (version 2.6alpha): Do not edit this file */+fullClassName(basicStrategy)+" }\n}\n"






);
    return;
  }
}
