/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import java.io.*;
import java.util.logging.*;
import tom.gom.backend.TemplateHookedClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class VariadicOperatorTemplate extends TemplateHookedClass {
  ClassName abstractType;
  ClassName sortName;
  GomClass empty;
  GomClass cons;

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */    

  public VariadicOperatorTemplate(ClassName className,
                                  ClassName abstractType,
                                  ClassName sortName,
                                  GomClass empty,
                                  GomClass cons,
                                  HookList hooks){
    super(className,hooks);
    this.abstractType = abstractType;
    this.sortName = sortName;
    this.empty = empty;
    this.cons = cons;
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {

    writer.write("\npackage "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getPackage()+";\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateImport()+"\npublic abstract class "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" "/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateInterface()+"{\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateBlock()+"\n"




);
generateBody(writer);
writer.write("\n}\n"

);
  }

  protected String generateInterface() {
    String interfaces = super.generateInterface();
    if (! interfaces.equals("")) {
      return "implements "+interfaces.substring(1);
    } else {
      return interfaces;
    }
  }


  private void generateBody(java.io.Writer writer) throws java.io.IOException {
    String domainClassName = fullClassName(
        cons.getSlots().getHeadconcSlotField().getDomain());
    writer.write("\n  public int length() {\n    int count = 0;\n    if(this instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+") {\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" tl = (("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+")this).getTail"/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n      if (tl instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+") {\n        return 1+(("/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+")tl).length();\n      } else {\n        return 2;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+"[] toArray() {\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+"[] array;\n    if(this instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+") {\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+" h = (("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+")this).getHead"/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" tl = (("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+")this).getTail"/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n      if (tl instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+") {\n        "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+"[] tailArray =(("/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+")tl).toArray();\n        array = new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+"[1+tailArray.length];\n        array[0]=h;\n        for(int i =0;i<tailArray.length;i++){\n          array[i+1]=tailArray[i];\n        }\n      } else {\n        array = new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+"[1];\n        array[0]=h;\n      }\n    } else {\n      array = new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+"[0];\n    }\n    return array;\n  }\n\n  public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" fromArray("/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+"[] array) {\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" res = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(empty.getClassName())+".make();\n    for(int i = array.length; i>0;) {\n      res = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+".make(("/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+")array[--i],res);\n    }\n    return res;\n  }\n\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" reverse() {\n    if(this instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+") {\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" cur = this;\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" rev = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(empty.getClassName())+".make();\n      while(cur instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+") {\n        rev = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+".make((("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+")cur).getHead"/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"(),rev);\n        cur = (("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+")cur).getTail"/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n      }\n      return rev;\n    } else {\n      return this;\n    }\n  }\n\n  public void toStringBuffer(java.lang.StringBuffer buffer) {\n    buffer.append(\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"(\");\n    if(this instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+") {\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" cur = this;\n      while(cur instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+") {\n        "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+" elem = (("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+")cur).getHead"/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n        cur = (("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+")cur).getTail"/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n        "/* Generated by TOM (version 2.5alpha): Do not edit this file */+toStringChild("buffer","elem")+"\n        if(cur instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+") {\n          buffer.append(\",\");\n        }\n      }\n    }\n    buffer.append(\")\");\n  }\n\n  public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" fromTerm(aterm.ATerm trm) {\n    if(trm instanceof aterm.ATermAppl) {\n      aterm.ATermAppl appl = (aterm.ATermAppl) trm;\n      if(\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"\".equals(appl.getName())) {\n        "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" res = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(empty.getClassName())+".make();\n\n        aterm.ATerm array[] = appl.getArgumentArray();\n        for(int i = array.length-1; i>=0; --i) {\n          "/* Generated by TOM (version 2.5alpha): Do not edit this file */+domainClassName+" elem = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fromATermElement("array[i]","elem")+";\n          res = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(cons.getClassName())+".make(elem,res);\n        }\n        return res;\n      }\n    }\n    return null;\n  }\n"


























































































);
  }

  private String toStringChild(String buffer, String element) {
    SlotField head = cons.getSlots().getHeadconcSlotField();
    StringBuffer res = new StringBuffer();
    toStringSlotField(res,head,element,buffer);
    return res.toString();
  }

  private String fromATermElement(String term, String element) {
    SlotField slot = cons.getSlots().getHeadconcSlotField();
    StringBuffer buffer = new StringBuffer();
    fromATermSlotField(buffer,slot,term);
    return buffer.toString();
  }

  /** the class logger instance*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
