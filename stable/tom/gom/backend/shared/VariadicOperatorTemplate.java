/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import java.io.*;
import java.util.logging.*;
import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class VariadicOperatorTemplate extends TemplateClass {
  ClassName abstractType;
  ClassName sortName;
  GomClass empty;
  GomClass cons;

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file */   /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */  

  public VariadicOperatorTemplate(ClassName className,
                                  ClassName abstractType,
                                  ClassName sortName,
                                  GomClass empty,
                                  GomClass cons) {
    super(className);
    this.abstractType = abstractType;
    this.sortName = sortName;
    this.empty = empty;
    this.cons = cons;
  }

  public String generate() {

    String classBody = "\npackage "/* Generated by TOM (version 2.4alpha): Do not edit this file */+getPackage()+";\n\npublic abstract class "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" {\n\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateBody()+"\n\n}\n"







;

    return classBody;
  }

  private String generateBody() {
    StringBuffer out = new StringBuffer();

    out.append("\n  public int length() {\n    int count = 0;\n    if(this instanceof "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+") {\n      "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" tl = (("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+")this).getTail"/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"();\n      if (tl instanceof "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+") {\n        return 1+(("/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+")tl).length();\n      } else {\n        return 2;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getslots().getHeadconcSlotField().getdomain())+"[] toArray() {\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getslots().getHeadconcSlotField().getdomain())+"[] array;\n    if(this instanceof "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+") {\n      "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getslots().getHeadconcSlotField().getdomain())+" h = (("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+")this).getHead"/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"();\n      "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" tl = (("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+")this).getTail"/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"();\n      if (tl instanceof "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+") {\n        "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getslots().getHeadconcSlotField().getdomain())+"[] tailArray =(("/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+")tl).toArray();\n        array = new "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getslots().getHeadconcSlotField().getdomain())+"[1+tailArray.length];\n        array[0]=h;     \n        for(int i =0;i<tailArray.length;i++){\n          array[i+1]=tailArray[i];\n        }\n      } else {\n        array = new "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getslots().getHeadconcSlotField().getdomain())+"[1];\n        array[0]=h;  \n      }\n    } else {\n        array = new "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getslots().getHeadconcSlotField().getdomain())+"[0];\n    }\n    return array;\n  }\n\n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" reverse() {\n    if(this instanceof "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+") {\n      "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" cur = this;\n      "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" rev = "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(empty.getclassName())+".make();\n      while(cur instanceof "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+") {\n        rev = "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+".make((("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+")cur).getHead"/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"(),rev);\n        cur = (("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(cons.getclassName())+")cur).getTail"/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"();\n      }\n      return rev;\n    } else {\n      return this;\n    }\n  }\n"

















































);

    return out.toString();
  }

  /** the class logger instance*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
