/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import tom.gom.backend.TemplateClass;
import tom.gom.adt.objects.types.*;
import tom.gom.tools.error.GomRuntimeException;

public class VisitorTemplate extends TemplateClass {
  GomClassList sortClasses;
  GomClassList operatorClasses;

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.gom.adt.objects.types.GomClassList  tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList  l2) {     if( l1.isEmptyconcGomClass() ) {       return l2;     } else if( l2.isEmptyconcGomClass() ) {       return l1;     } else if(  l1.getTailconcGomClass() .isEmptyconcGomClass() ) {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( l1.getHeadconcGomClass() ,l2) ;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( l1.getHeadconcGomClass() ,tom_append_list_concGomClass( l1.getTailconcGomClass() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.GomClassList  tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end, tom.gom.adt.objects.types.GomClassList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( begin.getHeadconcGomClass() ,( tom.gom.adt.objects.types.GomClassList )tom_get_slice_concGomClass( begin.getTailconcGomClass() ,end,tail)) ;     }   }    

  public VisitorTemplate(GomClass gomClass) {
    super(gomClass);
    {if ( (gomClass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch398NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )gomClass);if ( (tomMatch398NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.VisitorClass) ) {{  tom.gom.adt.objects.types.GomClassList  tomMatch398NameNumber_freshVar_0= tomMatch398NameNumberfreshSubject_1.getSortClasses() ;{  tom.gom.adt.objects.types.GomClassList  tomMatch398NameNumber_freshVar_1= tomMatch398NameNumberfreshSubject_1.getOperatorClasses() ;if ( true ) {


        this.sortClasses = tomMatch398NameNumber_freshVar_0;
        this.operatorClasses = tomMatch398NameNumber_freshVar_1;
        return;
      }}}}}}}

    throw new GomRuntimeException(
        "Bad argument for VisitorTemplate: " + gomClass);
  }

  /* We may want to return the stringbuffer itself in the future, or directly write to a Stream */
  public void generate(java.io.Writer writer) throws java.io.IOException {
    writer.write("package "+getPackage()+";\n");
    writer.write("\n");
    writer.write("public interface "+className()+" {\n");
    writer.write("\n");

    // generate a visit for each sort
    {if ( (sortClasses instanceof tom.gom.adt.objects.types.GomClassList) ) {{  tom.gom.adt.objects.types.GomClassList  tomMatch399NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClassList )sortClasses);if ( ((tomMatch399NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass) || (tomMatch399NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass)) ) {{  tom.gom.adt.objects.types.GomClassList  tomMatch399NameNumber_freshVar_0=tomMatch399NameNumberfreshSubject_1;{  tom.gom.adt.objects.types.GomClassList  tomMatch399NameNumber_begin_2=tomMatch399NameNumber_freshVar_0;{  tom.gom.adt.objects.types.GomClassList  tomMatch399NameNumber_end_3=tomMatch399NameNumber_freshVar_0;do {{{  tom.gom.adt.objects.types.GomClassList  tomMatch399NameNumber_freshVar_1=tomMatch399NameNumber_end_3;if (!( tomMatch399NameNumber_freshVar_1.isEmptyconcGomClass() )) {if ( ( tomMatch399NameNumber_freshVar_1.getHeadconcGomClass()  instanceof tom.gom.adt.objects.types.gomclass.SortClass) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch399NameNumber_freshVar_6=  tomMatch399NameNumber_freshVar_1.getHeadconcGomClass() .getClassName() ;{  tom.gom.adt.objects.types.ClassName  tom_sortName=tomMatch399NameNumber_freshVar_6;{  tom.gom.adt.objects.types.GomClassList  tomMatch399NameNumber_freshVar_4= tomMatch399NameNumber_freshVar_1.getTailconcGomClass() ;if ( true ) {

        writer.write("\tpublic "+fullClassName(tom_sortName)+" "+visitMethod(tom_sortName)+"("+fullClassName(tom_sortName)+" arg) throws tom.library.sl.VisitFailure;\n");
      }}}}}}}if ( tomMatch399NameNumber_end_3.isEmptyconcGomClass() ) {tomMatch399NameNumber_end_3=tomMatch399NameNumber_begin_2;} else {tomMatch399NameNumber_end_3= tomMatch399NameNumber_end_3.getTailconcGomClass() ;}}} while(!( tomMatch399NameNumber_end_3.equals(tomMatch399NameNumber_begin_2) ));}}}}}}}


    writer.write("\n");
    writer.write("}\n");
  }

}
