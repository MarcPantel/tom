/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import java.io.*;
import java.util.*;
import java.util.logging.*;
import tom.gom.backend.TemplateHookedClass;
import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class OperatorTemplate extends TemplateHookedClass {
  File tomHomePath;
  List importList;
  ClassName abstractType;
  ClassName extendsType;
  ClassName sortName;
  ClassName visitor;
  SlotFieldList slotList;
  TemplateClass mapping;

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  private static boolean tom_terms_equal_HookList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotField(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotFieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Hook(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1); }private static boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField  t) {  return  t instanceof tom.gom.adt.objects.types.slotfield.SlotField  ;}private static  String  tom_get_slot_SlotField_Name( tom.gom.adt.objects.types.SlotField  t) {  return  t.getName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SlotField_Domain( tom.gom.adt.objects.types.SlotField  t) {  return  t.getDomain()  ;}private static boolean tom_is_fun_sym_MakeHook( tom.gom.adt.objects.types.Hook  t) {  return  t instanceof tom.gom.adt.objects.types.hook.MakeHook  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_MakeHook_HookArguments( tom.gom.adt.objects.types.Hook  t) {  return  t.getHookArguments()  ;}private static  String  tom_get_slot_MakeHook_Code( tom.gom.adt.objects.types.Hook  t) {  return  t.getCode()  ;}private static boolean tom_is_fun_sym_concHook( tom.gom.adt.objects.types.HookList  t) {  return  t instanceof tom.gom.adt.objects.types.hooklist.ConsconcHook || t instanceof tom.gom.adt.objects.types.hooklist.EmptyconcHook  ;}private static  tom.gom.adt.objects.types.HookList  tom_empty_list_concHook() { return  tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() ; }private static  tom.gom.adt.objects.types.HookList  tom_cons_list_concHook( tom.gom.adt.objects.types.Hook  e,  tom.gom.adt.objects.types.HookList  l) { return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make(e,l) ; }private static  tom.gom.adt.objects.types.Hook  tom_get_head_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getHeadconcHook()  ;}private static  tom.gom.adt.objects.types.HookList  tom_get_tail_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getTailconcHook()  ;}private static boolean tom_is_empty_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.isEmptyconcHook()  ;}private static  tom.gom.adt.objects.types.HookList  tom_append_list_concHook( tom.gom.adt.objects.types.HookList  l1,  tom.gom.adt.objects.types.HookList  l2) {    if(tom_is_empty_concHook_HookList(l1)) {     return l2;    } else if(tom_is_empty_concHook_HookList(l2)) {     return l1;    } else if(tom_is_empty_concHook_HookList(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1))) {     return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),tom_append_list_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.HookList  tom_get_slice_concHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end) {    if(tom_terms_equal_HookList(begin,end)) {      return ( tom.gom.adt.objects.types.HookList )tom_empty_list_concHook();    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(begin),( tom.gom.adt.objects.types.HookList )tom_get_slice_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField || t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_empty_list_concSlotField() { return  tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() ; }private static  tom.gom.adt.objects.types.SlotFieldList  tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField  e,  tom.gom.adt.objects.types.SlotFieldList  l) { return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(e,l) ; }private static  tom.gom.adt.objects.types.SlotField  tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getHeadconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getTailconcSlotField()  ;}private static boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.isEmptyconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList  l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end) {    if(tom_terms_equal_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }   

  public OperatorTemplate(File tomHomePath,
		  				  List importList, 	
                          ClassName className,
                          ClassName abstractType,
                          ClassName extendsType,
                          ClassName sortName,
                          ClassName visitor,
                          SlotFieldList slots,
                          HookList hooks,
                          TemplateClass mapping) {
    super(className,hooks);
    this.tomHomePath = tomHomePath;
    this.importList = importList;
    this.abstractType = abstractType;
    this.extendsType = extendsType;;
    this.sortName = sortName;
    this.visitor = visitor;
    this.slotList = slots;
    this.mapping = mapping;
  }

  public void generate(java.io.Writer writer) throws java.io.IOException {

writer.write(
"\npackage "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getPackage()+";\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateImport()+"\npublic final class "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(extendsType)+" implements tom.library.strategy.mutraveler.MuVisitable, tom.library.sl.Visitable "/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateInterface()+" {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateBlock()+"\n  private static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" proto = new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n  private int hashCode;\n  private "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"() {}\n"







);
generateMembers(writer);
generateBody(writer);
writer.write("\n}\n"

);
  }

  private void generateBody(java.io.Writer writer) throws java.io.IOException {
    writer.write("\n    /* static constructor */\n"

);
generateConstructor(writer);
writer.write("\n  private void init("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childListWithType(slotList) + (slotList.isEmptyconcSlotField()?"":", ") +"int hashCode) {\n"

);
generateMembersInit(writer);
writer.write("\n    this.hashCode = hashCode;\n  }\n\n  private void initHashCode("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childListWithType(slotList)+") {\n"




);
generateMembersInit(writer);
writer.write("\n  this.hashCode = hashFunction();\n  }\n\n  /* name and arity */\n  public String symbolName() {\n    return \""/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"\";\n  }\n\n  private int getArity() {\n    return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotList.length()+";\n  }\n"











);

  /*
   * Generate a toStringBuffer method if the operator is not associative
   */
  if (sortName == extendsType) {
writer.write("\n  public void toStringBuffer(java.lang.StringBuffer buffer) {\n    buffer.append(\""/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"(\");\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+toStringChilds("buffer")+"\n    buffer.append(\")\");\n  }\n"





);
  }

writer.write("\n\n  /**\n    * This method implements a lexicographic order\n    */\n  public int compareToLPO(Object o) {\n    /*\n     * We do not want to compare with any object, only members of the module\n     * In case of invalid argument, throw a ClassCastException, as the java api\n     * asks for it\n     */\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(abstractType)+" ao = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(abstractType)+") o;\n    /* return 0 for equality */\n    if (ao == this)\n      return 0;\n    /* compare the symbols */\n    int symbCmp = this.symbolName().compareTo(ao.symbolName());\n    if (symbCmp != 0)\n      return symbCmp;\n    /* compare the childs */\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+genCompareChilds("ao","compareToLPO")+"\n    throw new RuntimeException(\"Unable to compare\");\n  }\n\n  public int compareTo(Object o) {\n    /*\n     * We do not want to compare with any object, only members of the module\n     * In case of invalid argument, throw a ClassCastException, as the java api\n     * asks for it\n     */\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(abstractType)+" ao = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(abstractType)+") o;\n    /* return 0 for equality */\n    if (ao == this)\n      return 0;\n    /* use the hash values to discriminate */\n    \n    if(this.hashCode != ao.hashCode())\n      return  (this.hashCode < ao.hashCode())?-1:1;\n\n    /* If not, compare the symbols : back to the normal order */\n    int symbCmp = this.symbolName().compareTo(ao.symbolName());\n    if (symbCmp != 0)\n      return symbCmp;\n    /* last resort: compare the childs */\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+genCompareChilds("ao","compareTo")+"\n    throw new RuntimeException(\"Unable to compare\");\n  }\n\n  /* shared.SharedObject */\n  public final int hashCode() {\n    return hashCode;\n  }\n\n  public shared.SharedObject duplicate() {\n    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" clone = new "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+"();\n    clone.init("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childList(slotList) + (slotList.isEmptyconcSlotField()?"":", ") +"hashCode);\n    return clone;\n  }\n\n  public final boolean equivalent(shared.SharedObject obj) {\n    if(obj instanceof "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+") {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateMembersEqualityTest("peer")+"\n    }\n    return false;\n  }\n\n  /* "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className(sortName)+" interface */\n  public boolean "/* Generated by TOM (version 2.5alpha): Do not edit this file */+isOperatorMethod(className)+"() {\n    return true;\n  }\n"





































































);
generateGetters(writer);

    writer.write("\n  /* AbstractType */\n  public aterm.ATerm toATerm() {\n    return aterm.pure.SingletonFactory.getInstance().makeAppl(\n      aterm.pure.SingletonFactory.getInstance().makeAFun(symbolName(),getArity(),false),\n      new aterm.ATerm[] {"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateToATermChilds()+"});\n  }\n\n  public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" fromTerm(aterm.ATerm trm) {\n    if(trm instanceof aterm.ATermAppl) {\n      aterm.ATermAppl appl = (aterm.ATermAppl) trm;\n      if(proto.symbolName().equals(appl.getName())) {\n        return make(\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+generatefromATermChilds("appl")+"\n        );\n      }\n    }\n    return null;\n  }\n\n"



















);

    writer.write("\n  /* jjtraveler.Visitable */\n  public int getChildCount() {\n    return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildCount()+";\n  }\n\n  public jjtraveler.Visitable getChildAt(int index) {\n    switch(index) {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinsGetCases()+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable v) {\n    switch(index) {\n"/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinMakeCases("v")+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable setChilds(jjtraveler.Visitable[] childs) {\n    if (childs.length == "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildCount()+") {\n      return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinArrayMake("childs")+";\n    } else {\n      throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable setChildren(jjtraveler.Visitable[] childs) {\n    if (childs.length == "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildCount()+") {\n      return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinArrayMake("childs")+";\n    } else {\n      throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable[] getChilds() {\n    return new jjtraveler.Visitable[] { "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildList(slotList)+" };\n  }\n\n  public jjtraveler.Visitable[] getChildren() {\n    return new jjtraveler.Visitable[] { "/* Generated by TOM (version 2.5alpha): Do not edit this file */+nonBuiltinChildList(slotList)+" };\n  }\n"










































);

    writer.write("\n      /* internal use */\n  protected int hashFunction() {\n    int a, b, c;\n\n    /* Set up the internal state */\n    a = 0x9e3779b9; /* the golden ratio; an arbitrary value */\n    b = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+shared.HashFunctions.stringHashFunction(fullClassName(),slotList.length())+"<<8);\n    c = getArity();\n    /*---------------------------------------- handle most of the key */\n\n    /*------------------------------------- handle the last 11 bytes */\n"











);
generateHashArgs(writer);
writer.write("\n    a -= b;\n    a -= c;\n    a ^= (c >> 13);\n    b -= c;\n    b -= a;\n    b ^= (a << 8);\n    c -= a;\n    c -= b;\n    c ^= (b >> 13);\n    a -= b;\n    a -= c;\n    a ^= (c >> 12);\n    b -= c;\n    b -= a;\n    b ^= (a << 16);\n    c -= a;\n    c -= b;\n    c ^= (b >> 5);\n    a -= b;\n    a -= c;\n    a ^= (c >> 3);\n    b -= c;\n    b -= a;\n    b ^= (a << 10);\n    c -= a;\n    c -= b;\n    c ^= (b >> 15);\n\n    /*-------------------------------------------- report the result */\n    return c;\n  }\n"































);
  }

  private void generateMembers(java.io.Writer writer) throws java.io.IOException {
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match1_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1_list1=tom_match1_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1_begin1=tom_match1_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1_end1=tom_match1_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1_end2=tom_match1_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match1_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match1_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match1_1_2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tom_match1_1_2); { tom.gom.adt.objects.types.ClassName  tom_domainClass=tom_get_slot_SlotField_Domain(tom_match1_1_2); if ( true ) {

        writer.write("  private ");
        writer.write(fullClassName(tom_domainClass));
        writer.write(" ");
        writer.write(fieldName(tom_fieldName));
        writer.write(";\n");
       } } } } }tom_match1_1_list1=tom_match1_1_end2; } }tom_match1_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match1_1_end1); } }tom_match1_1_list1=tom_match1_1_begin1; } } } } } } }

  }

  private void generateMembersInit(java.io.Writer writer) throws java.io.IOException {
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match2_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1_list1=tom_match2_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1_begin1=tom_match2_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1_end1=tom_match2_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match2_1_end1))) {tom_match2_1_list1=tom_match2_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1_end2=tom_match2_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match2_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match2_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match2_1_2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tom_match2_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match2_1_2); if ( true ) {

        writer.write("    this.");
        writer.write(fieldName(tom_fieldName));
        writer.write(" = ");
        writer.write(fieldName(tom_fieldName));
        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain) && tom_domain.equals(tom_make_ClassName("","String"))) {
          writer.write(".intern()");
        }
        writer.write(";\n");
       } } } } }tom_match2_1_list1=tom_match2_1_end2; } }tom_match2_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match2_1_end1); } }tom_match2_1_list1=tom_match2_1_begin1; } } } } } } }

  }

  private void generateGetters(java.io.Writer writer) throws java.io.IOException {
    SlotFieldList slots = slotList;
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
      writer.write("\n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotDomain(head)+" "/* Generated by TOM (version 2.5alpha): Do not edit this file */+getMethod(head)+"() {\n    return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(head.getName())+";\n  }\n      \n  public "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" "/* Generated by TOM (version 2.5alpha): Do not edit this file */+setMethod(head)+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+slotDomain(head)+" set_arg) {\n    return make("/* Generated by TOM (version 2.5alpha): Do not edit this file */+generateMakeArgsFor(head,"set_arg")+");\n  }"






);
    }
  }

  private String generateToATermChilds() {
    StringBuffer res = new StringBuffer();
    SlotFieldList slots = slotList;
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
      if (res.length()!=0) {
        res.append(", ");
      }
      toATermSlotField(res,head);
    }
    return res.toString();
  }

  private String generatefromATermChilds(String appl) {
    StringBuffer res = new StringBuffer();
    int index = 0;
    SlotFieldList slots = slotList;
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
      if (res.length()!=0) {
        res.append(", ");
      }
      fromATermSlotField(res,head, appl+".getArgument("+index+")");
      index++;
    }
    return res.toString();
  }

  private String fieldName(String fieldName) {
    return "_"+fieldName;
  }

  private String childListWithType(SlotFieldList slots) {
    StringBuffer res = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match3_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match3_1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tom_match3_1); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match3_1); if ( true ) {

          if (res.length()!=0) {
            res.append(", ");
          }
          res.append(fullClassName(tom_domain));
          res.append(" ");
          res.append(fieldName(tom_name));
         } } } } } }

    }
    return res.toString();
  }
  private String unprotectedChildListWithType(SlotFieldList slots) {
    StringBuffer res = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match4_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match4_1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tom_match4_1); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match4_1); if ( true ) {

          if (res.length()!=0) {
            res.append(", ");
          }
          res.append(fullClassName(tom_domain));
          res.append(" ");
          res.append(tom_name);
         } } } } } }

    }
    return res.toString();
  }
  private String childList(SlotFieldList slots) {
    StringBuffer res = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match5_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match5_1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tom_match5_1); if ( true ) {

          if (res.length()!=0) {
            res.append(", ");
          }
          res.append(" ");
          res.append(fieldName(tom_name));
         } } } } }

    }
    return res.toString();
  }
  private String unprotectedChildList(SlotFieldList slots) {
    StringBuffer res = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match6_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match6_1) ||  false  ) ) { { String  tom_name=tom_get_slot_SlotField_Name(tom_match6_1); if ( true ) {

          if (res.length()!=0) {
            res.append(", ");
          }
          res.append(" ");
          res.append(tom_name);
         } } } } }

    }
    return res.toString();
  }
  private String generateMembersEqualityTest(String peer) {
    StringBuffer res = new StringBuffer();
    if(!slotList.isEmptyconcSlotField()) {
      res.append("\n      "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" peer = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+") obj;"
);;
    }
    res.append("\n      return "
);
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match7_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match7_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match7_1_list1=tom_match7_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match7_1_begin1=tom_match7_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match7_1_end1=tom_match7_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match7_1_end1))) {tom_match7_1_list1=tom_match7_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match7_1_end2=tom_match7_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match7_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match7_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match7_1_2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tom_match7_1_2); if ( true ) {

        res.append(fieldName(tom_fieldName));
        res.append("==");
        res.append(peer);
        res.append(".");
        res.append(fieldName(tom_fieldName));
        res.append(" && ");
       } } } }tom_match7_1_list1=tom_match7_1_end2; } }tom_match7_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match7_1_end1); } }tom_match7_1_list1=tom_match7_1_begin1; } } } } } } }

    res.append("true;"); // to handle the "no childs" case
    return res.toString();
  }
  private int nonBuiltinChildCount() {
    int count = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match8_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match8_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match8_1_list1=tom_match8_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match8_1_begin1=tom_match8_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match8_1_end1=tom_match8_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match8_1_end1))) {tom_match8_1_list1=tom_match8_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match8_1_end2=tom_match8_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match8_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match8_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match8_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match8_1_2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          count++;
        }
       } } } }tom_match8_1_list1=tom_match8_1_end2; } }tom_match8_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match8_1_end1); } }tom_match8_1_list1=tom_match8_1_begin1; } } } } } } }

    return count;
  }

  private String nonBuiltinsGetCases() {
    StringBuffer res = new StringBuffer();
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match9_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1_list1=tom_match9_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1_begin1=tom_match9_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1_end1=tom_match9_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1_end2=tom_match9_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match9_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match9_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match9_1_2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tom_match9_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match9_1_2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res.append("      case ");
          res.append(index);
          res.append(": return ");
          res.append(fieldName(tom_fieldName));
          res.append(";\n");
          index++;
        }
       } } } } }tom_match9_1_list1=tom_match9_1_end2; } }tom_match9_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match9_1_end1); } }tom_match9_1_list1=tom_match9_1_begin1; } } } } } } }

    return res.toString();
  }

  private String nonBuiltinChildList(SlotFieldList slots) {
    StringBuffer res = new StringBuffer();
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match10_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match10_1) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match10_1); { String  tom_name=tom_get_slot_SlotField_Name(tom_match10_1); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          if (res.length()!=0) {
            res.append(", ");
          }
          res.append(" ");
          res.append(fieldName(tom_name));
        }
         } } } } } }

    }
    return res.toString();
  }

  private String nonBuiltinArrayMake(String arrayName) {
    StringBuffer res = new StringBuffer("make(");
    int index = 0;
    int fullindex = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match11_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1_list1=tom_match11_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1_begin1=tom_match11_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1_end1=tom_match11_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match11_1_end1))) {tom_match11_1_list1=tom_match11_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1_end2=tom_match11_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match11_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match11_1_list1);tom_match11_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match11_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match11_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match11_1_2); { tom.gom.adt.objects.types.SlotField  tom_slot=tom_match11_1_2; if ( true ) {

        if(fullindex>0) { res.append(", "); }
        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res.append("(");
          res.append(fullClassName(tom_domain));
          res.append(") ");
          res.append(arrayName);
          res.append("[");
          res.append(index);
          res.append("]");
          index++;
        } else {
          res.append(getMethod(tom_slot));
          res.append("()");
        }
        fullindex++;
       } } } } }tom_match11_1_list1=tom_match11_1_end2; } }tom_match11_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match11_1_end1); } }tom_match11_1_list1=tom_match11_1_begin1; } } } } } } }

    res.append(")");
    return res.toString();
  }
  private String nonBuiltinMakeCases(String argName) {
    StringBuffer res = new StringBuffer();
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match12_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1_list1=tom_match12_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1_begin1=tom_match12_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1_end2=tom_match12_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match12_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match12_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match12_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match12_1_2); if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res.append("      case "+index+": return make("+generateMakeArgsFor(index, argName)+");\n");
          index++;
        }
       } } } }tom_match12_1_list1=tom_match12_1_end2; } }tom_match12_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

    return res.toString();
  }
  private String generateMakeArgsFor(int argIndex, String argName) {
    StringBuffer res = new StringBuffer();
    int index = 0;
    int fullindex = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match13_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1_list1=tom_match13_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1_begin1=tom_match13_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1_end1=tom_match13_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match13_1_end1))) {tom_match13_1_list1=tom_match13_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1_end2=tom_match13_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match13_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match13_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match13_1_2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tom_match13_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match13_1_2); { tom.gom.adt.objects.types.SlotField  tom_slot=tom_match13_1_2; if ( true ) {

        if(fullindex>0) { res.append(", "); }
        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res.append(getMethod(tom_slot));
          res.append("()");
        } else {
          if (index != argIndex) {
            res.append(fieldName(tom_fieldName));
          } else {
            res.append("(");
            res.append(fullClassName(tom_domain));
            res.append(") ");
            res.append(argName);
          }
          index++;
        }
        fullindex++;
       } } } } } }tom_match13_1_list1=tom_match13_1_end2; } }tom_match13_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match13_1_end1); } }tom_match13_1_list1=tom_match13_1_begin1; } } } } } } }

    return res.toString();
  }
  private String generateMakeArgsFor(SlotField slot, String argName) {
    StringBuffer res = new StringBuffer();
    int fullindex = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match14_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1_list1=tom_match14_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1_begin1=tom_match14_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1_end1=tom_match14_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1_end2=tom_match14_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match14_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match14_1_list1);tom_match14_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match14_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match14_1_2) ||  false  ) ) { { String  tom_fieldName=tom_get_slot_SlotField_Name(tom_match14_1_2); { tom.gom.adt.objects.types.SlotField  tom_itslot=tom_match14_1_2; if ( true ) {

        if(fullindex>0) { res.append(", "); }
        if (tom_itslot== slot) {
          res.append(argName);
        } else {
          res.append(fieldName(tom_fieldName));
        }
        fullindex++;
       } } } } }tom_match14_1_list1=tom_match14_1_end2; } }tom_match14_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match14_1_end1); } }tom_match14_1_list1=tom_match14_1_begin1; } } } } } } }

    return res.toString();
  }

  private String toStringChilds(String buffer) {
    if (0 == slotList.length()) {
      return "";
    }
    StringBuffer res = new StringBuffer();
    SlotFieldList slots = slotList;
		while(!slots.isEmptyconcSlotField()) {
			if(res.length()!=0) {
				res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append(\",\");\n    "
);
			}
			SlotField head = slots.getHeadconcSlotField();
			slots = slots.getTailconcSlotField();
      toStringSlotField(res, head, fieldName(head.getName()), buffer);
		}
    return res.toString();
  }

  private String genCompareChilds(String oldOther, String compareFun) {
    StringBuffer res = new StringBuffer();
    String other = "tco";
    if(!slotList.isEmptyconcSlotField()) {
    res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" "/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+" = ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+") "/* Generated by TOM (version 2.5alpha): Do not edit this file */+oldOther+";");
    }
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match15_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1_list1=tom_match15_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1_begin1=tom_match15_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1_end1=tom_match15_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match15_1_end1))) {tom_match15_1_list1=tom_match15_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1_end2=tom_match15_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match15_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match15_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match15_1_2) ||  false  ) ) { { String  tom_slotName=tom_get_slot_SlotField_Name(tom_match15_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match15_1_2); if ( true ) {

        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
         if (tom_domain.equals(tom_make_ClassName("","int"))
             || tom_domain.equals(tom_make_ClassName("","long"))
             || tom_domain.equals(tom_make_ClassName("","double"))
             || tom_domain.equals(tom_make_ClassName("","float"))
             || tom_domain.equals(tom_make_ClassName("","char"))) { 
           res.append("\n    if( this."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+" != "/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+")\n      return (this."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+" < "/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+")?-1:1;\n"


);
         } else if (tom_domain.equals(tom_make_ClassName("","boolean"))) {
           res.append("\n    if( this."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+" != "/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+")\n      return (!this."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+" && "/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+")?-1:1;\n"


);
         } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
           res.append("\n    int "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp = (this."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+").compareTo("/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+");\n    if("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp != 0)\n      return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp;\n             \n"




);
         } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm"))
             ||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))) {
           res.append("\n    /* Inefficient total order on ATerm */\n    int "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp = ((this."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+").toString()).compareTo(("/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+").toString());\n    if("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp != 0)\n      return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp;\n"




);
         } else {
            throw new GomRuntimeException("Builtin "+tom_domain+" not supported");
         }
        } else {
          res.append("\n    int "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp = (this."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+")."/* Generated by TOM (version 2.5alpha): Do not edit this file */+compareFun+"("/* Generated by TOM (version 2.5alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+");\n    if("/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp != 0)\n      return "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp;\n"



); 
        }
       } } } } }tom_match15_1_list1=tom_match15_1_end2; } }tom_match15_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match15_1_end1); } }tom_match15_1_list1=tom_match15_1_begin1; } } } } } } }

    return res.toString();
  }

  private void generateHashArgs(java.io.Writer writer) throws java.io.IOException {
    int index = slotList.length() - 1;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match16_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1_list1=tom_match16_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1_begin1=tom_match16_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1_end1=tom_match16_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match16_1_end1))) {tom_match16_1_list1=tom_match16_1_end1; { { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1_end2=tom_match16_1_list1; { { tom.gom.adt.objects.types.SlotField  tom_match16_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match16_1_list1);tom_match16_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match16_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match16_1_2) ||  false  ) ) { { String  tom_slotName=tom_get_slot_SlotField_Name(tom_match16_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tom_match16_1_2); if ( true ) {

        int shift = (index % 4) * 8;
        String accum = ""+"aaaabbbbcccc".toCharArray()[index % 12];
        writer.write("    "+accum+" += (");
        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          writer.write(fieldName(tom_slotName)+".hashCode()");
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))
              || tom_domain.equals(tom_make_ClassName("","long"))
              || tom_domain.equals(tom_make_ClassName("","double"))
              || tom_domain.equals(tom_make_ClassName("","float"))
              || tom_domain.equals(tom_make_ClassName("","char"))) {
            writer.write(fieldName(tom_slotName));
          } else if (tom_domain.equals(tom_make_ClassName("","boolean"))) {
            writer.write("("+fieldName(tom_slotName)+"?1:0)");
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
            // Use the string hashFunction for Strings, and pass index as arity
            writer.write("shared.HashFunctions.stringHashFunction("+fieldName(tom_slotName)+", "+index+")");
          } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm"))||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))) {
            // Use the string hashFunction for Strings, and pass index as arity
            writer.write(fieldName(tom_slotName)+".hashCode()");
          }  else {
            throw new GomRuntimeException("generateHashArgs: Builtin " + tom_domain+ " not supported");
          }
        }
        if (shift!=0) { writer.write(" << "+(shift)); }
        writer.write(");\n");
        index--;
       } } } } }tom_match16_1_list1=tom_match16_1_end2; } }tom_match16_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match16_1_end1); } }tom_match16_1_list1=tom_match16_1_begin1; } } } } } } }

  }

public void generateConstructor(java.io.Writer writer) throws java.io.IOException {
  if (hooks.isEmptyconcHook()) {
    writer.write("\n        public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" make("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childListWithType(slotList)+") {\n        proto.initHashCode("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childList(slotList)+");\n        return ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+") shared.SingletonSharedObjectFactory.getInstance().build(proto);\n        }\n\n        "





);
  } else { // we have to generate an hidden "real" make
    writer.write("\n        private static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+" realMake("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childListWithType(slotList)+") {\n        proto.initHashCode("/* Generated by TOM (version 2.5alpha): Do not edit this file */+childList(slotList)+");\n        return ("/* Generated by TOM (version 2.5alpha): Do not edit this file */+className()+") shared.SingletonSharedObjectFactory.getInstance().build(proto);\n        }\n\n        "





);
    if(hooks.length() > 1) {
      throw new GomRuntimeException("Support for multiple hooks for an operator not implemented yet");
    }
    // then a make function calling it
     if(hooks instanceof  tom.gom.adt.objects.types.HookList ) { { tom.gom.adt.objects.types.HookList  tom_match17_1=(( tom.gom.adt.objects.types.HookList )hooks); if ( ( tom_is_fun_sym_concHook(tom_match17_1) ||  false  ) ) { { tom.gom.adt.objects.types.HookList  tom_match17_1_list1=tom_match17_1; { tom.gom.adt.objects.types.HookList  tom_match17_1_end1=tom_match17_1_list1; { if (!(tom_is_empty_concHook_HookList(tom_match17_1_list1))) { { tom.gom.adt.objects.types.Hook  tom_match17_1_1=tom_get_head_concHook_HookList(tom_match17_1_list1);tom_match17_1_list1=tom_get_tail_concHook_HookList(tom_match17_1_list1); if ( ( tom_is_fun_sym_MakeHook(tom_match17_1_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_args=tom_get_slot_MakeHook_HookArguments(tom_match17_1_1); { String  tom_code=tom_get_slot_MakeHook_Code(tom_match17_1_1); if (tom_is_empty_concHook_HookList(tom_match17_1_list1)) { if ( true ) {

        // replace the inner make call
        writer.write("\n            public static "/* Generated by TOM (version 2.5alpha): Do not edit this file */+fullClassName(sortName)+" make("/* Generated by TOM (version 2.5alpha): Do not edit this file */+unprotectedChildListWithType(tom_args)+") {\n            "/* Generated by TOM (version 2.5alpha): Do not edit this file */+tom_code+"\n            return realMake("/* Generated by TOM (version 2.5alpha): Do not edit this file */+unprotectedChildList(tom_args)+");\n            }\n\n            "





);
       } } } } } } }tom_match17_1_list1=tom_match17_1_end1; } } } } } }

    mapping.generate(writer); 
  }
}

/*
 * The function for generating the file is extended, to be able to call Tom if
 * necessary (i.e. if there are user defined hooks)
 */
public int generateFile() {
  if (hooks.isEmptyconcHook()) {
    try {
      File output = fileToGenerate();
      // make sure the directory exists
      output.getParentFile().mkdirs();
      Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
      generate(writer);
      writer.flush();
      writer.close();
    } catch(Exception e) {
      e.printStackTrace();
      return 1;
    }
  } else { /* We need to call tom to generate the file */
    File xmlFile = new File(tomHomePath,"Tom.xml");
    if(!xmlFile.exists()) {
      getLogger().log(Level.FINER,"Failed to get canonical path for "+xmlFile.getPath());
    }
    String file_path = null;
    try {
      File output = fileToGenerate();
      file_path = output.getCanonicalPath();
    } catch (IOException e) {
      getLogger().log(Level.FINER,"Failed to get canonical path for "+fileName());
    }

    ArrayList tomParams = new ArrayList();      

    try{
      Iterator it = importList.iterator();
      while(it.hasNext()){
        String importPath = ((File)it.next()).getCanonicalPath();
        tomParams.add("--import");
        tomParams.add(importPath);
      }
    }catch(IOException e){
      getLogger().log(Level.SEVERE,"Failed compute import list: " + e.getMessage());
    }

    tomParams.add("-X");
    tomParams.add(xmlFile.getPath());
    tomParams.add("--optimize");
    tomParams.add("--optimize2");
    tomParams.add("--output");
    tomParams.add(file_path);
    tomParams.add("-");     

    //String[] params = {"-X",xmlFile.getPath(),"--optimize","--optimize2","--output",file_path,"-"};
    //String[] params = {"-X",config_xml,"--output",file_path,"-"};

    //System.out.println("params: " + tomParams);

    try {
      StringWriter gen = new StringWriter();
      generate(gen);
      InputStream backupIn = System.in;
      System.setIn(new DataInputStream(new StringBufferInputStream(gen.toString())));
      int res = tom.engine.Tom.exec((String[])tomParams.toArray(new String[tomParams.size()]));
      //      int res = tom.engine.Tom.exec(params);
      System.setIn(backupIn);
      if (res != 0 ) {
        getLogger().log(Level.SEVERE, tom.gom.GomMessage.tomFailure.getMessage(),new Object[]{file_path});
        return res;
      }
    } catch(IOException e) {
      getLogger().log(Level.SEVERE,"Failed generate Tom code: " + e.getMessage());
    }
  }
  return 0;
}

/** the class logger instance*/
private Logger getLogger() {
  return Logger.getLogger(getClass().getName());
}
}
