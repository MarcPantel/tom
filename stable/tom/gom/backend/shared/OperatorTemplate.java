/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.backend.shared;

import java.io.*;
import java.util.logging.*;
import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class OperatorTemplate extends TemplateClass {
  File tomHomePath;
  ClassName abstractType;
  ClassName extendsType;
  ClassName sortName;
  ClassName visitor;
  SlotFieldList slotList;
  HookList hooks;
  TemplateClass mapping;

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_Hook(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotField(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotFieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_MakeHook( tom.gom.adt.objects.types.Hook  t) {  return  (t!=null) && t.isMakeHook()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slot_MakeHook_hookArguments( tom.gom.adt.objects.types.Hook  t) {  return  t.gethookArguments()  ;}private static  String  tom_get_slot_MakeHook_code( tom.gom.adt.objects.types.Hook  t) {  return  t.getcode()  ;}private static boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField  t) {  return  (t!=null) && t.isSlotField()  ;}private static  String  tom_get_slot_SlotField_name( tom.gom.adt.objects.types.SlotField  t) {  return  t.getname()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SlotField_domain( tom.gom.adt.objects.types.SlotField  t) {  return  t.getdomain()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1); }private static boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField || t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_empty_list_concSlotField() { return  tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() ; }private static  tom.gom.adt.objects.types.SlotFieldList  tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField  e,  tom.gom.adt.objects.types.SlotFieldList  l) { return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(e,l) ; }private static  tom.gom.adt.objects.types.SlotField  tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getHeadconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getTailconcSlotField()  ;}private static boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.isEmptyconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList  l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end) {    if(tom_terms_equal_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }  private static boolean tom_is_fun_sym_concHook( tom.gom.adt.objects.types.HookList  t) {  return  t instanceof tom.gom.adt.objects.types.hooklist.ConsconcHook || t instanceof tom.gom.adt.objects.types.hooklist.EmptyconcHook  ;}private static  tom.gom.adt.objects.types.HookList  tom_empty_list_concHook() { return  tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() ; }private static  tom.gom.adt.objects.types.HookList  tom_cons_list_concHook( tom.gom.adt.objects.types.Hook  e,  tom.gom.adt.objects.types.HookList  l) { return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make(e,l) ; }private static  tom.gom.adt.objects.types.Hook  tom_get_head_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getHeadconcHook()  ;}private static  tom.gom.adt.objects.types.HookList  tom_get_tail_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getTailconcHook()  ;}private static boolean tom_is_empty_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.isEmptyconcHook()  ;}private static  tom.gom.adt.objects.types.HookList  tom_append_list_concHook( tom.gom.adt.objects.types.HookList  l1,  tom.gom.adt.objects.types.HookList  l2) {    if(tom_is_empty_concHook_HookList(l1)) {     return l2;    } else if(tom_is_empty_concHook_HookList(l2)) {     return l1;    } else if(tom_is_empty_concHook_HookList(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1))) {     return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),tom_append_list_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.HookList  tom_get_slice_concHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end) {    if(tom_terms_equal_HookList(begin,end)) {      return ( tom.gom.adt.objects.types.HookList )tom_empty_list_concHook();    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(begin),( tom.gom.adt.objects.types.HookList )tom_get_slice_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(begin),end));    }   }   

  public OperatorTemplate(File tomHomePath,
                          ClassName className,
                          ClassName abstractType,
                          ClassName extendsType,
                          ClassName sortName,
                          ClassName visitor,
                          SlotFieldList slots,
                          HookList hooks,
                          TemplateClass mapping) {
    super(className);
    this.tomHomePath = tomHomePath;
    this.abstractType = abstractType;
    this.extendsType = extendsType;;
    this.sortName = sortName;
    this.visitor = visitor;
    this.slotList = slots;
    this.hooks = hooks;
    this.mapping = mapping;
  }

  public String generate() {

    String classBody = "\npackage "/* Generated by TOM (version 2.4alpha): Do not edit this file */+getPackage()+";\n\npublic class "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" extends "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(extendsType)+" implements tom.library.strategy.mutraveler.MuVisitable {\n  private static "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" proto = new "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"();\n  private int hashCode;\n  private "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"() {}\n\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateMembers()+"\n\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateBody()+"\n\n}\n"












;

    return classBody;
  }

  private String generateBody() {
    StringBuffer out = new StringBuffer();

    out.append("\n    /* static constructor */\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateConstructor()+"\n\n  private void init("/* Generated by TOM (version 2.4alpha): Do not edit this file */+childListWithType(slotList) + (slotList.isEmptyconcSlotField()?"":", ") +"int hashCode) {\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateMembersInit()+"\n    this.hashCode = hashCode;\n  }\n\n  private void initHashCode("/* Generated by TOM (version 2.4alpha): Do not edit this file */+childListWithType(slotList)+") {\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateMembersInit()+"\n  this.hashCode = hashFunction();\n  }\n\n  /* name and arity */\n  public String symbolName() {\n    return \""/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"\";\n  }\n\n  private int getArity() {\n    return "/* Generated by TOM (version 2.4alpha): Do not edit this file */+getLength(slotList)+";\n  }\n\n  public String toString() {\n    return \""/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"("/* Generated by TOM (version 2.4alpha): Do not edit this file */+toStringChilds()+")\";\n  }\n\n  /**\n    * This method implements a lexicographic order\n    */\n  public int compareToLPO(Object o) {\n    /*\n     * We do not want to compare with any object, only members of the module\n     * In case of invalid argument, throw a ClassCastException, as the java api\n     * asks for it\n     */\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(abstractType)+" ao = ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(abstractType)+") o;\n    /* return 0 for equality */\n    if (ao == this)\n      return 0;\n    /* compare the symbols */\n    int symbCmp = this.symbolName().compareTo(ao.symbolName());\n    if (symbCmp != 0)\n      return symbCmp;\n    /* compare the childs */\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+genCompareChilds("ao","compareToLPO")+"\n    throw new RuntimeException(\"Unable to compare\");\n  }\n\n  public int compareTo(Object o) {\n    /*\n     * We do not want to compare with any object, only members of the module\n     * In case of invalid argument, throw a ClassCastException, as the java api\n     * asks for it\n     */\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(abstractType)+" ao = ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(abstractType)+") o;\n    /* return 0 for equality */\n    if (ao == this)\n      return 0;\n    /* use the hash values to discriminate */\n    \n    if(this.hashCode != ao.hashCode())\n      return  (this.hashCode < ao.hashCode())?-1:1;\n\n    /* If not, compare the symbols : back to the normal order */\n    int symbCmp = this.symbolName().compareTo(ao.symbolName());\n    if (symbCmp != 0)\n      return symbCmp;\n    /* last resort: compare the childs */\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+genCompareChilds("ao","compareTo")+"\n    throw new RuntimeException(\"Unable to compare\");\n  }\n\n  /* shared.SharedObject */\n  public final int hashCode() {\n    return hashCode;\n  }\n\n  public shared.SharedObject duplicate() {\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" clone = new "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+"();\n    clone.init("/* Generated by TOM (version 2.4alpha): Do not edit this file */+childList(slotList) + (slotList.isEmptyconcSlotField()?"":", ") +"hashCode);\n    return clone;\n  }\n\n  public final boolean equivalent(shared.SharedObject obj) {\n    if(obj instanceof "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+") {\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateMembersEqualityTest("peer")+"\n    }\n    return false;\n  }\n\n  /* "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className(sortName)+" interface */\n  public boolean "/* Generated by TOM (version 2.4alpha): Do not edit this file */+isOperatorMethod(className)+"() {\n    return true;\n  }\n\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateGetters()+"\n\n"

































































































);

    out.append("\n  /* AbstractType */\n  public aterm.ATerm toATerm() {\n    return aterm.pure.SingletonFactory.getInstance().makeAppl(\n      aterm.pure.SingletonFactory.getInstance().makeAFun(symbolName(),getArity(),false),\n      new aterm.ATerm[] {"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateToATermChilds()+"});\n  }\n\n  public static "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" fromTerm(aterm.ATerm trm) {\n    if(trm instanceof aterm.ATermAppl) {\n      aterm.ATermAppl appl = (aterm.ATermAppl) trm;\n      if(proto.symbolName().equals(appl.getName())) {\n        return make(\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generatefromATermChilds("appl")+"\n        );\n      }\n    }\n    return null;\n  }\n\n"



















);

    out.append("\n  /* jjtraveler.Visitable */\n  public int getChildCount() {\n    return "/* Generated by TOM (version 2.4alpha): Do not edit this file */+nonBuiltinChildCount()+";\n  }\n\n  public jjtraveler.Visitable getChildAt(int index) {\n    switch(index) {\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+nonBuiltinsGetCases()+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable v) {\n    switch(index) {\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+nonBuiltinMakeCases("v")+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable setChilds(jjtraveler.Visitable[] childs) {\n    if (childs.length == "/* Generated by TOM (version 2.4alpha): Do not edit this file */+nonBuiltinChildCount()+") {\n      return "/* Generated by TOM (version 2.4alpha): Do not edit this file */+nonBuiltinArrayMake("childs")+";\n    } else {\n      throw new IndexOutOfBoundsException();\n    }\n  }\n\n"



























);

    out.append("\n      /* internal use */\n  protected int hashFunction() {\n    int a, b, c;\n\n    /* Set up the internal state */\n    a = 0x9e3779b9; /* the golden ratio; an arbitrary value */\n    b = ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+shared.HashFunctions.stringHashFunction(fullClassName(),getLength(slotList))+"<<8);\n    c = getArity();\n    /*---------------------------------------- handle most of the key */\n\n    /*------------------------------------- handle the last 11 bytes */\n\n"/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateHashArgs()+"\n\n    a -= b;\n    a -= c;\n    a ^= (c >> 13);\n    b -= c;\n    b -= a;\n    b ^= (a << 8);\n    c -= a;\n    c -= b;\n    c ^= (b >> 13);\n    a -= b;\n    a -= c;\n    a ^= (c >> 12);\n    b -= c;\n    b -= a;\n    b ^= (a << 16);\n    c -= a;\n    c -= b;\n    c ^= (b >> 5);\n    a -= b;\n    a -= c;\n    a ^= (c >> 3);\n    b -= c;\n    b -= a;\n    b ^= (a << 10);\n    c -= a;\n    c -= b;\n    c ^= (b >> 15);\n\n    /*-------------------------------------------- report the result */\n    return c;\n  }\n"













































);
    return out.toString();
  }

  private String generateMembers() {
    String res="";
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match1_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1_list1=tom_match1_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1_begin1=tom_match1_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match1_1_end1=tom_match1_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match1_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match1_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match1_1_2) ||  false  ) ) { { String  tom_match1_1_2_name=tom_get_slot_SlotField_name(tom_match1_1_2); { tom.gom.adt.objects.types.ClassName  tom_match1_1_2_domain=tom_get_slot_SlotField_domain(tom_match1_1_2); { String  tom_fieldName=tom_match1_1_2_name; { tom.gom.adt.objects.types.ClassName  tom_domainClass=tom_match1_1_2_domain; if ( true ) {

        res += "  private "+fullClassName(tom_domainClass)+" "+fieldName(tom_fieldName)+";\n";
       } } } } } } }tom_match1_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match1_1_end1); } }tom_match1_1_list1=tom_match1_1_begin1; } } } } } } }

    return res;
  }
  private String generateMembersInit() {
    String res = "";
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match2_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1_list1=tom_match2_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1_begin1=tom_match2_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match2_1_end1=tom_match2_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match2_1_end1))) {tom_match2_1_list1=tom_match2_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match2_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match2_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match2_1_2) ||  false  ) ) { { String  tom_match2_1_2_name=tom_get_slot_SlotField_name(tom_match2_1_2); { tom.gom.adt.objects.types.ClassName  tom_match2_1_2_domain=tom_get_slot_SlotField_domain(tom_match2_1_2); { String  tom_fieldName=tom_match2_1_2_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match2_1_2_domain; if ( true ) {

        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain) && tom_domain.equals(tom_make_ClassName("","String"))) {
          res += "    this."+fieldName(tom_fieldName)+" = "+fieldName(tom_fieldName)+".intern();\n";
        } else {
          res += "    this."+fieldName(tom_fieldName)+" = "+fieldName(tom_fieldName)+";\n";
        }
       } } } } } } }tom_match2_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match2_1_end1); } }tom_match2_1_list1=tom_match2_1_begin1; } } } } } } }

    return res;
  }

  private String generateGetters() {
    String res = "";
    SlotFieldList slots = slotList;
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
      res+= "\n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+slotDomain(head)+" "/* Generated by TOM (version 2.4alpha): Do not edit this file */+getMethod(head)+"() {\n    return "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(head.getname())+";\n  }\n      \n  public "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" "/* Generated by TOM (version 2.4alpha): Do not edit this file */+setMethod(head)+"("/* Generated by TOM (version 2.4alpha): Do not edit this file */+slotDomain(head)+" set_arg) {\n    return make("/* Generated by TOM (version 2.4alpha): Do not edit this file */+generateMakeArgsFor(head,"set_arg")+");\n  }"






;
    }
    return res;
  }

  private String generateToATermChilds() {
    String res = "";
    SlotFieldList slots = slotList;
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
      if (!res.equals("")) {
        res+= ", ";
      }
      res+= toATermSlotField(head);
    }
    return res;
  }
  private String toATermSlotField(SlotField slot) {
    String res = "";
     if(slot instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match3_1=(( tom.gom.adt.objects.types.SlotField )slot); if ( ( tom_is_fun_sym_SlotField(tom_match3_1) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_match3_1_domain=tom_get_slot_SlotField_domain(tom_match3_1); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match3_1_domain; if ( true ) {

        if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += getMethod(slot)+"().toATerm()";
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))) {
            res += "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeInt("+getMethod(slot)+"())";
          } else if (tom_domain.equals(tom_make_ClassName("","long"))) {
            res += "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeReal("+getMethod(slot)+"())";
          } else if (tom_domain.equals(tom_make_ClassName("","double"))) {
            res += "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeReal("+getMethod(slot)+"())";
          } else if (tom_domain.equals(tom_make_ClassName("","float"))) {
            res += "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeReal("+getMethod(slot)+"())";
          } else if (tom_domain.equals(tom_make_ClassName("","char"))) {
            res += "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeInt("+getMethod(slot)+"())";
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
            res += "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeAppl(";
            res += "aterm.pure.SingletonFactory.getInstance().makeAFun(";
            res += getMethod(slot)+"() ,0 , true))";
          } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm")) ||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))){
            res += getMethod(slot)+"()";
          }
            else {
            throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
          }
        }
       } } } } } }

    return res;
  }

  private String generatefromATermChilds(String appl) {
    String res = "";
    int index = 0;
    SlotFieldList slots = slotList;
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
      if (!res.equals("")) {
        res+= ", ";
      }
      res+= fromATermSlotField(head, appl, index);
      index++;
    }
    return res;
  }
  private String fromATermSlotField(SlotField slot, String appl, int index) {
    String res = "          ";
     if(slot instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match4_1=(( tom.gom.adt.objects.types.SlotField )slot); if ( ( tom_is_fun_sym_SlotField(tom_match4_1) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_match4_1_domain=tom_get_slot_SlotField_domain(tom_match4_1); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match4_1_domain; if ( true ) {

        if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res+= fullClassName(tom_domain)+".fromTerm("+appl+".getArgument("+index+"))";
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))) {
            res+= "((aterm.ATermInt)"+appl+".getArgument("+index+")).getInt()";
          } else  if (tom_domain.equals(tom_make_ClassName("","float"))) {
            res+= "(float) ((aterm.ATermReal)"+appl+".getArgument("+index+")).getReal()";
          } else  if (tom_domain.equals(tom_make_ClassName("","long"))) {
            res+= "(long) ((aterm.ATermReal)"+appl+".getArgument("+index+")).getReal()";
          } else  if (tom_domain.equals(tom_make_ClassName("","double"))) {
            res+= "((aterm.ATermReal)"+appl+".getArgument("+index+")).getReal()";
          } else  if (tom_domain.equals(tom_make_ClassName("","char"))) {
            res+= "(char) ((aterm.ATermInt)"+appl+".getArgument("+index+")).getInt()";
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
            res+= "(String)((aterm.ATermAppl)"+appl+".getArgument("+index+")).getAFun().getName()";
          } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm")) || tom_domain.equals(tom_make_ClassName("aterm","ATermList")) ){
            res +=  appl+".getArgument("+index+")";
          }
            else {
            throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
          }
        }
       } } } } } }

    return res;
  }

  private String fieldName(String fieldName) {
    return "_"+fieldName;
  }
  private String childListWithType(SlotFieldList slots) {
    String res = "";
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match5_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match5_1) ||  false  ) ) { { String  tom_match5_1_name=tom_get_slot_SlotField_name(tom_match5_1); { tom.gom.adt.objects.types.ClassName  tom_match5_1_domain=tom_get_slot_SlotField_domain(tom_match5_1); { String  tom_name=tom_match5_1_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match5_1_domain; if ( true ) {

          if (!res.equals("")) {
            res+= ", ";
          }
          res+= fullClassName(tom_domain) + " "+fieldName(tom_name);
         } } } } } } } }

    }
    return res;
  }
  private String unprotectedChildListWithType(SlotFieldList slots) {
    String res = "";
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match6_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match6_1) ||  false  ) ) { { String  tom_match6_1_name=tom_get_slot_SlotField_name(tom_match6_1); { tom.gom.adt.objects.types.ClassName  tom_match6_1_domain=tom_get_slot_SlotField_domain(tom_match6_1); { String  tom_name=tom_match6_1_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match6_1_domain; if ( true ) {

          if (!res.equals("")) {
            res+= ", ";
          }
          res+= fullClassName(tom_domain) + " "+tom_name;
         } } } } } } } }

    }
    return res;
  }
  private String childList(SlotFieldList slots) {
    String res = "";
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match7_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match7_1) ||  false  ) ) { { String  tom_match7_1_name=tom_get_slot_SlotField_name(tom_match7_1); { String  tom_name=tom_match7_1_name; if ( true ) {

          if (!res.equals("")) {
            res+= ", ";
          }
          res+= " "+fieldName(tom_name);
         } } } } } }

    }
    return res;
  }
  private String unprotectedChildList(SlotFieldList slots) {
    String res = "";
    while(!slots.isEmptyconcSlotField()) {
      SlotField head = slots.getHeadconcSlotField();
      slots = slots.getTailconcSlotField();
       if(head instanceof  tom.gom.adt.objects.types.SlotField ) { { tom.gom.adt.objects.types.SlotField  tom_match8_1=(( tom.gom.adt.objects.types.SlotField )head); if ( ( tom_is_fun_sym_SlotField(tom_match8_1) ||  false  ) ) { { String  tom_match8_1_name=tom_get_slot_SlotField_name(tom_match8_1); { String  tom_name=tom_match8_1_name; if ( true ) {

          if (!res.equals("")) {
            res+= ", ";
          }
          res+= " "+tom_name;
         } } } } } }

    }
    return res;
  }
  private String generateMembersEqualityTest(String peer) {
    String res = "";
    if(!slotList.isEmptyconcSlotField()) {
      res += "\n      "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" peer = ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+") obj;"
;
    }
    res += "\n      return "
;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match9_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1_list1=tom_match9_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1_begin1=tom_match9_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match9_1_end1=tom_match9_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match9_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match9_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match9_1_2) ||  false  ) ) { { String  tom_match9_1_2_name=tom_get_slot_SlotField_name(tom_match9_1_2); { String  tom_fieldName=tom_match9_1_2_name; if ( true ) {

        res += fieldName(tom_fieldName)+"=="+peer+"."+fieldName(tom_fieldName);
        res+= " && ";
       } } } } }tom_match9_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match9_1_end1); } }tom_match9_1_list1=tom_match9_1_begin1; } } } } } } }

    res += "true;"; // to handle the "no childs" case
    return res;
  }
  private int nonBuiltinChildCount() {
    int count = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match10_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match10_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match10_1_list1=tom_match10_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match10_1_begin1=tom_match10_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match10_1_end1=tom_match10_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match10_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match10_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match10_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_match10_1_2_domain=tom_get_slot_SlotField_domain(tom_match10_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match10_1_2_domain; if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          count++;
        }
       } } } } }tom_match10_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match10_1_end1); } }tom_match10_1_list1=tom_match10_1_begin1; } } } } } } }

    return count;
  }

  private String nonBuiltinsGetCases() {
    String res = "";
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match11_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1_list1=tom_match11_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1_begin1=tom_match11_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match11_1_end1=tom_match11_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match11_1_end1))) {tom_match11_1_list1=tom_match11_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match11_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match11_1_list1);tom_match11_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match11_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match11_1_2) ||  false  ) ) { { String  tom_match11_1_2_name=tom_get_slot_SlotField_name(tom_match11_1_2); { tom.gom.adt.objects.types.ClassName  tom_match11_1_2_domain=tom_get_slot_SlotField_domain(tom_match11_1_2); { String  tom_fieldName=tom_match11_1_2_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match11_1_2_domain; if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "      case "+index+": return "+fieldName(tom_fieldName)+";\n";
          index++;
        }
       } } } } } } }tom_match11_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match11_1_end1); } }tom_match11_1_list1=tom_match11_1_begin1; } } } } } } }

    return res;
  }

  private String nonBuiltinArrayMake(String arrayName) {
    String res = "make(";
    int index = 0;
    int fullindex = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match12_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1_list1=tom_match12_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1_begin1=tom_match12_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match12_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match12_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match12_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.SlotField  tom_slot=tom_match12_1_2; { tom.gom.adt.objects.types.ClassName  tom_match12_1_2_domain=tom_get_slot_SlotField_domain(tom_match12_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match12_1_2_domain; if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "("+fullClassName(tom_domain)+") "+arrayName+"["+index+"], ";
          index++;
        } else {
          res += getMethod(tom_slot)+"(), ";
        }
        fullindex++;
       } } } } } }tom_match12_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

    if (fullindex>0) {
      res = res.substring(0,res.length()-2);
    }
    res += ")";
    return res;
  }
  private String nonBuiltinMakeCases(String argName) {
    String res = "";
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match13_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1_list1=tom_match13_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1_begin1=tom_match13_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match13_1_end1=tom_match13_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match13_1_end1))) {tom_match13_1_list1=tom_match13_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match13_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match13_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match13_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.ClassName  tom_match13_1_2_domain=tom_get_slot_SlotField_domain(tom_match13_1_2); { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match13_1_2_domain; if ( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += "      case "+index+": return make("+generateMakeArgsFor(index, argName)+");\n";
          index++;
        }
       } } } } }tom_match13_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match13_1_end1); } }tom_match13_1_list1=tom_match13_1_begin1; } } } } } } }

    return res;
  }
  private String generateMakeArgsFor(int argIndex, String argName) {
    String res = "";
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match14_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1_list1=tom_match14_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1_begin1=tom_match14_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match14_1_end1=tom_match14_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match14_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match14_1_list1);tom_match14_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match14_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match14_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.SlotField  tom_slot=tom_match14_1_2; { String  tom_match14_1_2_name=tom_get_slot_SlotField_name(tom_match14_1_2); { tom.gom.adt.objects.types.ClassName  tom_match14_1_2_domain=tom_get_slot_SlotField_domain(tom_match14_1_2); { String  tom_fieldName=tom_match14_1_2_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match14_1_2_domain; if ( true ) {

        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += getMethod(tom_slot)+"(), ";
        } else {
          if (index != argIndex) {
            res += fieldName(tom_fieldName)+", ";
          } else {
            res += "("+fullClassName(tom_domain)+") " + argName+", ";
          }
          index++;
        }
       } } } } } } } }tom_match14_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match14_1_end1); } }tom_match14_1_list1=tom_match14_1_begin1; } } } } } } }

    return res.substring(0,res.length()-2);
  }
  private String generateMakeArgsFor(SlotField slot, String argName) {
    String res = "";
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match15_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1_list1=tom_match15_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1_begin1=tom_match15_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match15_1_end1=tom_match15_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match15_1_end1))) {tom_match15_1_list1=tom_match15_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match15_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match15_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match15_1_2) ||  false  ) ) { { tom.gom.adt.objects.types.SlotField  tom_itslot=tom_match15_1_2; { String  tom_match15_1_2_name=tom_get_slot_SlotField_name(tom_match15_1_2); { tom.gom.adt.objects.types.ClassName  tom_match15_1_2_domain=tom_get_slot_SlotField_domain(tom_match15_1_2); { String  tom_fieldName=tom_match15_1_2_name; if ( true ) {

        if (tom_itslot== slot) {
          res += argName+", ";
        } else {
          res += fieldName(tom_fieldName)+", ";
        }
       } } } } } } }tom_match15_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match15_1_end1); } }tom_match15_1_list1=tom_match15_1_begin1; } } } } } } }

    return res.substring(0,res.length()-2);
  }

  private String toStringChilds() {
    String res = "";
    if (0 == slotList.length()) {
      return res;
    }
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match16_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1_list1=tom_match16_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1_begin1=tom_match16_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match16_1_end1=tom_match16_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match16_1_end1))) {tom_match16_1_list1=tom_match16_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match16_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match16_1_list1);tom_match16_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match16_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match16_1_2) ||  false  ) ) { { String  tom_match16_1_2_name=tom_get_slot_SlotField_name(tom_match16_1_2); { tom.gom.adt.objects.types.ClassName  tom_match16_1_2_domain=tom_get_slot_SlotField_domain(tom_match16_1_2); { String  tom_slotName=tom_match16_1_2_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match16_1_2_domain; if ( true ) {

        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
         if (tom_domain.equals(tom_make_ClassName("","int")) || tom_domain.equals(tom_make_ClassName("","long")) || tom_domain.equals(tom_make_ClassName("","double")) || tom_domain.equals(tom_make_ClassName("","float")) || tom_domain.equals(tom_make_ClassName("","char"))) { 
           res+= "\"+"/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"+\"";
         } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
           res+= "\\\"\"+"/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"+\"\\\"";
         } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm")) ||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))) {
           res+= "\"+"/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+".toString()+\"";
         } else {
            throw new GomRuntimeException("Builtin "+tom_domain+" not supported");
         }
        } else {
          res+= "\"+"/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+".toString()+\""; 
        }
        res += ",";
       } } } } } } }tom_match16_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match16_1_end1); } }tom_match16_1_list1=tom_match16_1_begin1; } } } } } } }

    return res.substring(0,res.length()-1);
  }

  private String genCompareChilds(String oldOther, String compareFun) {
    String res = "";
    String other = "tco";
    if(!slotList.isEmptyconcSlotField()) {
    res += ""/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" "/* Generated by TOM (version 2.4alpha): Do not edit this file */+other+" = ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+") "/* Generated by TOM (version 2.4alpha): Do not edit this file */+oldOther+";";
    }
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match17_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match17_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match17_1_list1=tom_match17_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match17_1_begin1=tom_match17_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match17_1_end1=tom_match17_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match17_1_end1))) {tom_match17_1_list1=tom_match17_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match17_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match17_1_list1);tom_match17_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match17_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match17_1_2) ||  false  ) ) { { String  tom_match17_1_2_name=tom_get_slot_SlotField_name(tom_match17_1_2); { tom.gom.adt.objects.types.ClassName  tom_match17_1_2_domain=tom_get_slot_SlotField_domain(tom_match17_1_2); { String  tom_slotName=tom_match17_1_2_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match17_1_2_domain; if ( true ) {

        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
         if (tom_domain.equals(tom_make_ClassName("","int"))|| tom_domain.equals(tom_make_ClassName("","long")) || tom_domain.equals(tom_make_ClassName("","double")) || tom_domain.equals(tom_make_ClassName("","float")) || tom_domain.equals(tom_make_ClassName("","char"))) { 
           res+= "\n    if( this."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+" != "/* Generated by TOM (version 2.4alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+")\n      return (this."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+" < "/* Generated by TOM (version 2.4alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+")?-1:1;\n"


;
         } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
           res+= "\n    int "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp = (this."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+").compareTo("/* Generated by TOM (version 2.4alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+");\n    if("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp != 0)\n      return "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp;\n             \n"




;
         } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm")) ||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))) {
           res+= "\n    /* Inefficient total order on ATerm */\n    int "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp = ((this."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+").toString()).compareTo(("/* Generated by TOM (version 2.4alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+").toString());\n    if("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp != 0)\n      return "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp;\n"




;
         } else {
            throw new GomRuntimeException("Builtin "+tom_domain+" not supported");
         }
        } else {
          res+= "\n    int "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp = (this."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+")."/* Generated by TOM (version 2.4alpha): Do not edit this file */+compareFun+"("/* Generated by TOM (version 2.4alpha): Do not edit this file */+other+"."/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+");\n    if("/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp != 0)\n      return "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fieldName(tom_slotName)+"Cmp;\n"



; 
        }
       } } } } } } }tom_match17_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match17_1_end1); } }tom_match17_1_list1=tom_match17_1_begin1; } } } } } } }

    return res;
  }

  private String generateHashArgs() {
    String res = "";
    int index = getLength(slotList) - 1;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match18_1=(( tom.gom.adt.objects.types.SlotFieldList )slotList); if ( ( tom_is_fun_sym_concSlotField(tom_match18_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match18_1_list1=tom_match18_1; { tom.gom.adt.objects.types.SlotFieldList  tom_match18_1_begin1=tom_match18_1_list1; { tom.gom.adt.objects.types.SlotFieldList  tom_match18_1_end1=tom_match18_1_list1; { while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match18_1_end1))) {tom_match18_1_list1=tom_match18_1_end1; { { tom.gom.adt.objects.types.SlotField  tom_match18_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match18_1_list1);tom_match18_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match18_1_list1); if ( ( tom_is_fun_sym_SlotField(tom_match18_1_2) ||  false  ) ) { { String  tom_match18_1_2_name=tom_get_slot_SlotField_name(tom_match18_1_2); { tom.gom.adt.objects.types.ClassName  tom_match18_1_2_domain=tom_get_slot_SlotField_domain(tom_match18_1_2); { String  tom_slotName=tom_match18_1_2_name; { tom.gom.adt.objects.types.ClassName  tom_domain=tom_match18_1_2_domain; if ( true ) {

        int shift = (index % 4) * 8;
        String accum = ""+"aaaabbbbcccc".toCharArray()[index % 12];
        res += "    "+accum+" += (";
        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += fieldName(tom_slotName)+".hashCode()";
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int")) || tom_domain.equals(tom_make_ClassName("","long")) || tom_domain.equals(tom_make_ClassName("","double")) || tom_domain.equals(tom_make_ClassName("","float")) || tom_domain.equals(tom_make_ClassName("","char"))) {
            res+= fieldName(tom_slotName);
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
            // Use the string hashFunction for Strings, and pass index as arity
            res+= "shared.HashFunctions.stringHashFunction("+fieldName(tom_slotName)+", "+index+")";
          } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm"))||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))) {
            // Use the string hashFunction for Strings, and pass index as arity
            res+= fieldName(tom_slotName)+".hashCode()";
          }  else {
            throw new GomRuntimeException("generateHashArgs: Builtin " + tom_domain+ " not supported");
          }
        }
        if (shift!=0) { res += " << "+(shift); }
        res += ");\n";
        index--;
       } } } } } } }tom_match18_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match18_1_end1); } }tom_match18_1_list1=tom_match18_1_begin1; } } } } } } }

    return res;
  }

  public String generateConstructor() {
    StringBuffer out = new StringBuffer();
    if (hooks.isEmptyconcHook()) {
      out.append("\n  public static "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" make("/* Generated by TOM (version 2.4alpha): Do not edit this file */+childListWithType(slotList)+") {\n    proto.initHashCode("/* Generated by TOM (version 2.4alpha): Do not edit this file */+childList(slotList)+");\n    return ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+") shared.SingletonSharedObjectFactory.getInstance().build(proto);\n  }\n\n"





);
    } else { // we have to generate an hidden "real" make
      out.append("\n  private static "/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+" realMake("/* Generated by TOM (version 2.4alpha): Do not edit this file */+childListWithType(slotList)+") {\n    proto.initHashCode("/* Generated by TOM (version 2.4alpha): Do not edit this file */+childList(slotList)+");\n    return ("/* Generated by TOM (version 2.4alpha): Do not edit this file */+className()+") shared.SingletonSharedObjectFactory.getInstance().build(proto);\n  }\n\n"





);
      if(getLength(hooks) > 1) {
        throw new GomRuntimeException("Support for multiple hooks for an operator not implemented yet");
      }
      // then a make function calling it
       if(hooks instanceof  tom.gom.adt.objects.types.HookList ) { { tom.gom.adt.objects.types.HookList  tom_match19_1=(( tom.gom.adt.objects.types.HookList )hooks); if ( ( tom_is_fun_sym_concHook(tom_match19_1) ||  false  ) ) { { tom.gom.adt.objects.types.HookList  tom_match19_1_list1=tom_match19_1; if (!(tom_is_empty_concHook_HookList(tom_match19_1_list1))) { { tom.gom.adt.objects.types.Hook  tom_match19_1_1=tom_get_head_concHook_HookList(tom_match19_1_list1);tom_match19_1_list1=tom_get_tail_concHook_HookList(tom_match19_1_list1); if ( ( tom_is_fun_sym_MakeHook(tom_match19_1_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match19_1_1_hookArguments=tom_get_slot_MakeHook_hookArguments(tom_match19_1_1); { String  tom_match19_1_1_code=tom_get_slot_MakeHook_code(tom_match19_1_1); { tom.gom.adt.objects.types.SlotFieldList  tom_args=tom_match19_1_1_hookArguments; { String  tom_code=tom_match19_1_1_code; if (tom_is_empty_concHook_HookList(tom_match19_1_list1)) { if ( true ) {

          // replace the inner make call
          out.append("\n  public static "/* Generated by TOM (version 2.4alpha): Do not edit this file */+fullClassName(sortName)+" make("/* Generated by TOM (version 2.4alpha): Do not edit this file */+unprotectedChildListWithType(tom_args)+") {\n    "/* Generated by TOM (version 2.4alpha): Do not edit this file */+tom_code+"\n    return realMake("/* Generated by TOM (version 2.4alpha): Do not edit this file */+unprotectedChildList(tom_args)+");\n  }\n\n"





);
         } } } } } } } } } } } } }

      // also generate the tom mapping
     out.append(mapping.generate()); 
    }
    return out.toString();
  }

  /*
   * The function for generating the file is extended, to be able to call Tom if necessary
   * (i.e. if there are user defined hooks)
   */
  public int generateFile() {
    if (hooks.isEmptyconcHook()) {
      try {
         File output = fileToGenerate();
         // make sure the directory exists
         output.getParentFile().mkdirs();
         Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
         writer.write(generate());
         writer.flush();
         writer.close();
      } catch(Exception e) {
        e.printStackTrace();
        return 1;
      }
    } else { /* We need to call gom to generate the file */
      File xmlFile = new File(tomHomePath,"Tom.xml");
      if(!xmlFile.exists()) {
        getLogger().log(Level.FINER,"Failed to get canonical path for "+xmlFile.getPath());
      }
      String file_path = null;
      try {
        File output = fileToGenerate();
        file_path = output.getCanonicalPath();
      } catch (IOException e) {
        getLogger().log(Level.FINER,"Failed to get canonical path for "+fileName());
      }
      String[] params = {"-X",xmlFile.getPath(),"--optimize","--optimize2","--output",file_path,"-"};
      //String[] params = {"-X",config_xml,"--output",file_path,"-"};

      String gen = generate();

      InputStream backupIn = System.in;
      System.setIn(new DataInputStream(new StringBufferInputStream(gen)));
      int res = tom.engine.Tom.exec(params);
      System.setIn(backupIn);
      if (res != 0 ) {
        getLogger().log(Level.SEVERE, tom.gom.GomMessage.tomFailure.getMessage(),new Object[]{file_path});
        return res;
      }
    }
    return 0;
  }

  private int getLength(SlotFieldList list) {
     if(list instanceof  tom.gom.adt.objects.types.SlotFieldList ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match20_1=(( tom.gom.adt.objects.types.SlotFieldList )list); if ( ( tom_is_fun_sym_concSlotField(tom_match20_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match20_1_list1=tom_match20_1; if (tom_is_empty_concSlotField_SlotFieldList(tom_match20_1_list1)) { if ( true ) {
 return 0;  } } } } if ( ( tom_is_fun_sym_concSlotField(tom_match20_1) ||  false  ) ) { { tom.gom.adt.objects.types.SlotFieldList  tom_match20_1_list1=tom_match20_1; if (!(tom_is_empty_concSlotField_SlotFieldList(tom_match20_1_list1))) {tom_match20_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match20_1_list1); { tom.gom.adt.objects.types.SlotFieldList  tom_t=tom_match20_1_list1; if ( true ) {
 return getLength(tom_t)+1;  } } } } } } }

    return -1;
  }
  private int getLength(HookList list) {
     if(list instanceof  tom.gom.adt.objects.types.HookList ) { { tom.gom.adt.objects.types.HookList  tom_match21_1=(( tom.gom.adt.objects.types.HookList )list); if ( ( tom_is_fun_sym_concHook(tom_match21_1) ||  false  ) ) { { tom.gom.adt.objects.types.HookList  tom_match21_1_list1=tom_match21_1; if (tom_is_empty_concHook_HookList(tom_match21_1_list1)) { if ( true ) {
 return 0;  } } } } if ( ( tom_is_fun_sym_concHook(tom_match21_1) ||  false  ) ) { { tom.gom.adt.objects.types.HookList  tom_match21_1_list1=tom_match21_1; if (!(tom_is_empty_concHook_HookList(tom_match21_1_list1))) {tom_match21_1_list1=tom_get_tail_concHook_HookList(tom_match21_1_list1); { tom.gom.adt.objects.types.HookList  tom_t=tom_match21_1_list1; if ( true ) {
 return getLength(tom_t)+1;  } } } } } } }

    return -1;
  }

  /** the class logger instance*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
}
