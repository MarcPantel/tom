/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 * 
 **/

package tom.gom.backend.shared;

import tom.gom.backend.TemplateClass;
import tom.gom.tools.GomEnvironment;
import tom.gom.tools.error.GomRuntimeException;
import tom.gom.adt.objects.types.*;

public class OperatorTemplate extends TemplateClass {
  ClassName factoryName;
  ClassName abstractType;
  ClassName sortName;
  ClassName visitor;
  SlotFieldList slotList;

  /* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private  char  tom_set_stamp_char( char  c) {  return  c  ;}private void tom_check_stamp_char( char  c) { ;}private boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private  Character  tom_set_stamp_Character( Character  c) {  return  c  ;}private void tom_check_stamp_Character( Character  c) { ;}private boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_Char( Character  t) {  return  (t!= null) && (t instanceof Character)  ;}private  Character  tom_make_Char( char  c) { return  new Character(c) ; }private  char  tom_get_slot_Char_c( Character  t) {  return  t.charValue()  ;} private  String  tom_set_stamp_String( String  s) {  return  s  ;}private void tom_check_stamp_String( String  s) { ;}private boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_concString( String  t) {  return  (t!= null) && (t instanceof String)  ;}private  String  tom_empty_list_concString() { return  "" ; }private  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }private  char  tom_get_head_concString_String( String  s) {  return  s.charAt(0)  ;}private  String  tom_get_tail_concString_String( String  s) {  return  s.substring(1)  ;}private boolean tom_is_empty_concString_String( String  s) {  return  (s.length()==0)  ;}private  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  private  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private  tom.gom.adt.objects.types.GomClassList tom_get_implementation_GomClassList( tom.gom.adt.objects.types.GomClassList t) {  return t ;}private  tom.gom.adt.objects.types.GomClassList tom_set_stamp_GomClassList( tom.gom.adt.objects.types.GomClassList t) {  return (tom.gom.adt.objects.types.GomClassList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomClassList( tom.gom.adt.objects.types.GomClassList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomClassList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGomClass( tom.gom.adt.objects.types.GomClassList t) {  return (t!= null) && t.isSortGomClassList() ;}private  tom.gom.adt.objects.types.GomClassList tom_empty_list_concGomClass() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(); }private  tom.gom.adt.objects.types.GomClassList tom_cons_list_concGomClass( tom.gom.adt.objects.types.GomClass e,  tom.gom.adt.objects.types.GomClassList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(e,l); }private  tom.gom.adt.objects.types.GomClass tom_get_head_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_tail_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.getTail() ;}private boolean tom_is_empty_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.GomClassList tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList l2) {    if(tom_is_empty_concGomClass_GomClassList(l1)) {     return l2;    } else if(tom_is_empty_concGomClass_GomClassList(l2)) {     return l1;    } else if(tom_is_empty_concGomClass_GomClassList(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(l1))) {     return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(l1),tom_append_list_concGomClass(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(l1),l2));    }   }  private  tom.gom.adt.objects.types.GomClassList tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList begin,  tom.gom.adt.objects.types.GomClassList end) {    if(tom_terms_equal_GomClassList(begin,end)) {      return ( tom.gom.adt.objects.types.GomClassList)tom_empty_list_concGomClass();    } else {      return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(begin),( tom.gom.adt.objects.types.GomClassList)tom_get_slice_concGomClass(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGomClassList( tom.gom.adt.objects.types.GomClassList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.GomClassList tom_make_emptyGomClassList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(); }private boolean tom_is_fun_sym_manyGomClassList( tom.gom.adt.objects.types.GomClassList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.GomClassList tom_make_manyGomClassList( tom.gom.adt.objects.types.GomClass e,  tom.gom.adt.objects.types.GomClassList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(e,l); }private  tom.gom.adt.objects.types.GomClass tom_get_slot_manyGomClassList_head( tom.gom.adt.objects.types.GomClassList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_manyGomClassList_tail( tom.gom.adt.objects.types.GomClassList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_implementation_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return t ;}private  tom.gom.adt.objects.types.SlotFieldList tom_set_stamp_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return (tom.gom.adt.objects.types.SlotFieldList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotFieldList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList t) {  return (t!= null) && t.isSortSlotFieldList() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_empty_list_concSlotField() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(); }private  tom.gom.adt.objects.types.SlotFieldList tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField e,  tom.gom.adt.objects.types.SlotFieldList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(e,l); }private  tom.gom.adt.objects.types.SlotField tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.getTail() ;}private boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList l1,  tom.gom.adt.objects.types.SlotFieldList l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private  tom.gom.adt.objects.types.SlotFieldList tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList begin,  tom.gom.adt.objects.types.SlotFieldList end) {    if(tom_terms_equal_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList)tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_make_emptySlotFieldList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(); }private boolean tom_is_fun_sym_manySlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_make_manySlotFieldList( tom.gom.adt.objects.types.SlotField e,  tom.gom.adt.objects.types.SlotFieldList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(e,l); }private  tom.gom.adt.objects.types.SlotField tom_get_slot_manySlotFieldList_head( tom.gom.adt.objects.types.SlotFieldList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_manySlotFieldList_tail( tom.gom.adt.objects.types.SlotFieldList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.SlotField tom_get_implementation_SlotField( tom.gom.adt.objects.types.SlotField t) {  return t ;}private  tom.gom.adt.objects.types.SlotField tom_set_stamp_SlotField( tom.gom.adt.objects.types.SlotField t) {  return (tom.gom.adt.objects.types.SlotField)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotField( tom.gom.adt.objects.types.SlotField t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotField(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField t) {  return  (t!= null) && t.isSlotField() ;}private  tom.gom.adt.objects.types.SlotField tom_make_SlotField( String  t0,  tom.gom.adt.objects.types.ClassName t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotField_SlotField(t0, t1); }private  String  tom_get_slot_SlotField_name( tom.gom.adt.objects.types.SlotField t) {  return  t.getName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SlotField_domain( tom.gom.adt.objects.types.SlotField t) {  return  t.getDomain() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_implementation_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return t ;}private  tom.gom.adt.objects.types.ClassNameList tom_set_stamp_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return (tom.gom.adt.objects.types.ClassNameList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ClassNameList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concClassName( tom.gom.adt.objects.types.ClassNameList t) {  return (t!= null) && t.isSortClassNameList() ;}private  tom.gom.adt.objects.types.ClassNameList tom_empty_list_concClassName() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(); }private  tom.gom.adt.objects.types.ClassNameList tom_cons_list_concClassName( tom.gom.adt.objects.types.ClassName e,  tom.gom.adt.objects.types.ClassNameList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(e,l); }private  tom.gom.adt.objects.types.ClassName tom_get_head_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_tail_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.getTail() ;}private boolean tom_is_empty_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.ClassNameList tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList l2) {    if(tom_is_empty_concClassName_ClassNameList(l1)) {     return l2;    } else if(tom_is_empty_concClassName_ClassNameList(l2)) {     return l1;    } else if(tom_is_empty_concClassName_ClassNameList(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(l1))) {     return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(l1),tom_append_list_concClassName(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(l1),l2));    }   }  private  tom.gom.adt.objects.types.ClassNameList tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList begin,  tom.gom.adt.objects.types.ClassNameList end) {    if(tom_terms_equal_ClassNameList(begin,end)) {      return ( tom.gom.adt.objects.types.ClassNameList)tom_empty_list_concClassName();    } else {      return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(begin),( tom.gom.adt.objects.types.ClassNameList)tom_get_slice_concClassName(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.ClassNameList tom_make_emptyClassNameList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(); }private boolean tom_is_fun_sym_manyClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.ClassNameList tom_make_manyClassNameList( tom.gom.adt.objects.types.ClassName e,  tom.gom.adt.objects.types.ClassNameList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(e,l); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_manyClassNameList_head( tom.gom.adt.objects.types.ClassNameList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_manyClassNameList_tail( tom.gom.adt.objects.types.ClassNameList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.ClassName tom_get_implementation_ClassName( tom.gom.adt.objects.types.ClassName t) {  return t ;}private  tom.gom.adt.objects.types.ClassName tom_set_stamp_ClassName( tom.gom.adt.objects.types.ClassName t) {  return (tom.gom.adt.objects.types.ClassName)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ClassName( tom.gom.adt.objects.types.ClassName t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName t) {  return  (t!= null) && t.isClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassName_ClassName(t0, t1); }private  String  tom_get_slot_ClassName_pkg( tom.gom.adt.objects.types.ClassName t) {  return  t.getPkg() ;}private  String  tom_get_slot_ClassName_name( tom.gom.adt.objects.types.ClassName t) {  return  t.getName() ;}private  tom.gom.adt.objects.types.GomClass tom_get_implementation_GomClass( tom.gom.adt.objects.types.GomClass t) {  return t ;}private  tom.gom.adt.objects.types.GomClass tom_set_stamp_GomClass( tom.gom.adt.objects.types.GomClass t) {  return (tom.gom.adt.objects.types.GomClass)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomClass( tom.gom.adt.objects.types.GomClass t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomClass(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_TomMapping( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isTomMapping() ;}private  tom.gom.adt.objects.types.GomClass tom_make_TomMapping( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClassList t1,  tom.gom.adt.objects.types.GomClassList t2) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_TomMapping(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_TomMapping_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_TomMapping_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_TomMapping_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VoidFwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVoidFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VoidFwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.GomClassList t3,  tom.gom.adt.objects.types.GomClassList t4) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VoidFwdClass(t0, t1, t2, t3, t4); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VoidFwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VoidFwdClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VoidFwdClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VoidFwdClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VoidFwdClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_FwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_FwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.GomClassList t3,  tom.gom.adt.objects.types.GomClassList t4) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_FwdClass(t0, t1, t2, t3, t4); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FwdClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FwdClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VisitorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVisitorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VisitorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClassList t1,  tom.gom.adt.objects.types.GomClassList t2) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VisitorClass(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VisitorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VisitorClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VisitorClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_FactoryClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isFactoryClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_FactoryClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassNameList t1,  tom.gom.adt.objects.types.GomClassList t2,  tom.gom.adt.objects.types.GomClassList t3) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_FactoryClass(t0, t1, t2, t3); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_FactoryClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_FactoryClass_importedFactories( tom.gom.adt.objects.types.GomClass t) {  return  t.getImportedFactories() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FactoryClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FactoryClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VariadicOperatorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVariadicOperatorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VariadicOperatorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassName t4,  tom.gom.adt.objects.types.SlotFieldList t5,  tom.gom.adt.objects.types.ClassName t6,  String  t7) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VariadicOperatorClass(t0, t1, t2, t3, t4, t5, t6, t7); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_sortName( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_VariadicOperatorClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_empty( tom.gom.adt.objects.types.GomClass t) {  return  t.getEmpty() ;}private  String  tom_get_slot_VariadicOperatorClass_operator( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperator() ;}private boolean tom_is_fun_sym_OperatorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isOperatorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_OperatorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassName t4,  tom.gom.adt.objects.types.SlotFieldList t5) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_OperatorClass(t0, t1, t2, t3, t4, t5); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_sortName( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_OperatorClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private boolean tom_is_fun_sym_SortClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isSortClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_SortClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassNameList t4,  tom.gom.adt.objects.types.SlotFieldList t5) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_SortClass(t0, t1, t2, t3, t4, t5); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_SortClass_operators( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperators() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_SortClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private boolean tom_is_fun_sym_AbstractTypeClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isAbstractTypeClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_AbstractTypeClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassNameList t3) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_AbstractTypeClass(t0, t1, t2, t3); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_factoryName( tom.gom.adt.objects.types.GomClass t) {  return  t.getFactoryName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_AbstractTypeClass_sortList( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortList() ;}private boolean tom_is_fun_sym_VisitableFwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVisitableFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VisitableFwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClass t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VisitableFwdClass(t0, t1); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VisitableFwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClass tom_get_slot_VisitableFwdClass_fwd( tom.gom.adt.objects.types.GomClass t) {  return  t.getFwd() ;}  

  public OperatorTemplate(ClassName className, ClassName factoryName, ClassName abstractType, ClassName sortName, ClassName visitor, SlotFieldList slots) {
    super(className);
    this.factoryName = factoryName;
    this.abstractType = abstractType;
    this.sortName = sortName;
    this.visitor = visitor;
    this.slotList = slots;
  }

  public String generate() {

    String classBody = "\npackage "+getPackage()+";\n\npublic class "+className()+" extends "+fullClassName(sortName)+" {\n  private static "+className()+" proto = new "+className()+"();\n  private int hashCode;\n  private "+className()+"() {};\n    \n"+generateMembers()+"\n\n"+generateBody()+"\n\n}";
    
    return classBody;
  }

  private String generateBody() {
    StringBuffer out = new StringBuffer();

    /* static constructor */
    out.append("\n  public static "+className()+" make("+childListWithType()+") {\n    proto.initHashCode("+childList()+");\n    return ("+className()+") shared.SingletonSharedObjectFactory.getInstance().build(proto);\n  }\n  \n  private void init("+childListWithType() + (slotList.isEmpty()?"":", ") +"int hashCode) {\n"+generateMembersInit()+"\n    this.hashCode = hashCode;\n  }\n\n  private void initHashCode("+childListWithType()+") {\n"+generateMembersInit()+"\n  this.hashCode = this.hashFunction();\n  }\n\n  /* private name and arity */\n  private String getName() {\n    return \""+className()+"\";\n  }\n\n  private int getArity() {\n    return "+slotList.getLength()+";\n  }\n\n  /* shared.SharedObject */\n  public int hashCode() {\n    return this.hashCode;\n  }\n\n  public shared.SharedObject duplicate() {\n    "+className()+" clone = new "+className()+"();\n    clone.init("+childList() + (slotList.isEmpty()?"":", ") +"hashCode);\n    return clone;\n  }\n\n  public boolean equivalent(shared.SharedObject obj) {\n    if(obj instanceof "+className()+") {\n      "+className()+" peer = ("+className()+") obj;\n      return "+generateMembersEqualityTest("peer")+";\n    }\n    return false;\n  }\n  \n  /* "+className(sortName)+" interface */\n  public boolean "+isOperatorMethod(className)+"() {\n    return true;\n  }\n\n"+generateGetters()+"\n\n");

    out.append("\n  /* AbstractType */\n  public aterm.ATerm toATerm() {\n    return aterm.pure.SingletonFactory.getInstance().makeAppl(\n      aterm.pure.SingletonFactory.getInstance().makeAFun(getName(),getArity(),false),\n      new aterm.ATerm[] {"+generateToATermChilds()+"});\n  }\n\n  public static "+fullClassName(sortName)+" fromTerm(aterm.ATerm trm) {\n    if(trm instanceof aterm.ATermAppl) {\n      aterm.ATermAppl appl = (aterm.ATermAppl) trm;\n      if(proto.getName().equals(appl.getName())) {\n        return make(\n"+generatefromATermChilds("appl")+"\n        );\n      }\n    }\n    return null;\n  }\n\n");

    out.append("\n  /* jjtraveler.Visitable */\n  public int getChildCount() {\n    return "+nonBuiltinChildCount()+";\n  }\n\n  public jjtraveler.Visitable getChildAt(int index) {\n    switch(index) {\n"+nonBuiltinsGetCases()+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n  public jjtraveler.Visitable setChildAt(int index, jjtraveler.Visitable v) {\n    switch(index) {\n"+nonBuiltinMakeCases("v")+"\n      default: throw new IndexOutOfBoundsException();\n    }\n  }\n\n");

    out.append("\n      /* internal use */\n  protected int hashFunction() {\n    int a, b, c;\n\n    /* Set up the internal state */\n    a = b = 0x9e3779b9; /* the golden ratio; an arbitrary value */\n    c = getArity();\n    /*---------------------------------------- handle most of the key */\n\n    /*------------------------------------- handle the last 11 bytes */\n\n"+generateHashArgs()+"\n    \n    a -= b;\n    a -= c;\n    a ^= (c >> 13);\n    b -= c;\n    b -= a;\n    b ^= (a << 8);\n    c -= a;\n    c -= b;\n    c ^= (b >> 13);\n    a -= b;\n    a -= c;\n    a ^= (c >> 12);\n    b -= c;\n    b -= a;\n    b ^= (a << 16);\n    c -= a;\n    c -= b;\n    c ^= (b >> 5);\n    a -= b;\n    a -= c;\n    a ^= (c >> 3);\n    b -= c;\n    b -= a;\n    b ^= (a << 10);\n    c -= a;\n    c -= b;\n    c ^= (b >> 15);\n\n    /*-------------------------------------------- report the result */\n    return c;\n  }\n");
    return out.toString();
  }

  private String generateMembers() {
    String res="";
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match1_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match1_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match1_1_list1=tom_match1_1; { tom.gom.adt.objects.types.SlotFieldList tom_match1_1_begin1=tom_match1_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match1_1_end1=tom_match1_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match1_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match1_1_list1); if(tom_is_fun_sym_SlotField(tom_match1_1_2) ||  false ) { { String  tom_match1_1_2_name=tom_get_slot_SlotField_name(tom_match1_1_2); { tom.gom.adt.objects.types.ClassName tom_match1_1_2_domain=tom_get_slot_SlotField_domain(tom_match1_1_2); if( true ) {

        res += "  private "+fullClassName(tom_match1_1_2_domain)+" "+fieldName(tom_match1_1_2_name)+";\n";
       }}} }}tom_match1_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match1_1_end1);} }tom_match1_1_list1=tom_match1_1_begin1;}}}} }} }

    return res;
  }
  private String generateMembersInit() {
    String res = "";
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match2_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match2_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match2_1_list1=tom_match2_1; { tom.gom.adt.objects.types.SlotFieldList tom_match2_1_begin1=tom_match2_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match2_1_end1=tom_match2_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match2_1_end1))) {tom_match2_1_list1=tom_match2_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match2_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match2_1_list1); if(tom_is_fun_sym_SlotField(tom_match2_1_2) ||  false ) { { String  tom_match2_1_2_name=tom_get_slot_SlotField_name(tom_match2_1_2); { tom.gom.adt.objects.types.ClassName tom_match2_1_2_domain=tom_get_slot_SlotField_domain(tom_match2_1_2); { String  tom_fieldName=tom_match2_1_2_name; { tom.gom.adt.objects.types.ClassName tom_domain=tom_match2_1_2_domain; if( true ) {

        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain) && tom_domain.equals(tom_make_ClassName("","String"))) {
          res += "    this."+fieldName(tom_fieldName)+" = "+fieldName(tom_fieldName)+".intern();\n";
        } else {
          res += "    this."+fieldName(tom_fieldName)+" = "+fieldName(tom_fieldName)+";\n";
        }
       }}}}} }}tom_match2_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match2_1_end1);} }tom_match2_1_list1=tom_match2_1_begin1;}}}} }} }

    return res;
  }

  private String generateGetters() {
    String res = "";
    SlotFieldList slots = slotList;
    while(!slots.isEmpty()) {
      SlotField head = slots.getHead();
      slots = slots.getTail();
      res+= "\n  public "+slotDomain(head)+" "+getMethod(head)+"() {\n    return "+fieldName(head.getName())+";\n  }";
    }
    return res;
  }

  private String generateToATermChilds() {
    String res = "";
    SlotFieldList slots = slotList;
    while(!slots.isEmpty()) {
      SlotField head = slots.getHead();
      slots = slots.getTail();
      if (!res.equals("")) {
        res+= ", ";
      }
      res+= toATermSlotField(head);
    }
    return res;
  }
  private String toATermSlotField(SlotField slot) {
    String res = "";
     if(slot instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match3_1=(( tom.gom.adt.objects.types.SlotField)slot); if(tom_is_fun_sym_SlotField(tom_match3_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match3_1_domain=tom_get_slot_SlotField_domain(tom_match3_1); { tom.gom.adt.objects.types.ClassName tom_domain=tom_match3_1_domain; if( true ) {

        if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res+= getMethod(slot)+"().toATerm()";
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))) {
            res+= "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeInt("+getMethod(slot)+"())";
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) { 
            res+= "(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeAppl(";
            res += "aterm.pure.SingletonFactory.getInstance().makeAFun(";
            res += getMethod(slot)+"() ,0 , true))";
          } else {
            throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
          }
        }
       }}} }} }

    return res;
  }

  private String generatefromATermChilds(String appl) {
    String res = "";
    int index = 0;
    SlotFieldList slots = slotList;
    while(!slots.isEmpty()) {
      SlotField head = slots.getHead();
      slots = slots.getTail();
      if (!res.equals("")) {
        res+= ", ";
      }
      res+= fromATermSlotField(head, appl, index);
      index++;
    }
    return res;
  }
  private String fromATermSlotField(SlotField slot, String appl, int index) {
    String res = "          ";
     if(slot instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match4_1=(( tom.gom.adt.objects.types.SlotField)slot); if(tom_is_fun_sym_SlotField(tom_match4_1) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match4_1_domain=tom_get_slot_SlotField_domain(tom_match4_1); { tom.gom.adt.objects.types.ClassName tom_domain=tom_match4_1_domain; if( true ) {

        if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res+= fullClassName(tom_domain)+".fromTerm("+appl+".getArgument("+index+"))";
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))) {
            res+= "((aterm.ATermInt)"+appl+".getArgument("+index+")).getInt()";
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) { 
            res+= "(String)"+appl+".getArgument("+index+").toString()";
          } else {
            throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
          }
        }
       }}} }} }

    return res;
  }

  private String fieldName(String fieldName) {
    return "_"+fieldName;
  }
  private String childListWithType() {
    String res = "";
    SlotFieldList slots = slotList;
    while(!slots.isEmpty()) {
      SlotField head = slots.getHead();
      slots = slots.getTail();
       if(head instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match5_1=(( tom.gom.adt.objects.types.SlotField)head); if(tom_is_fun_sym_SlotField(tom_match5_1) ||  false ) { { String  tom_match5_1_name=tom_get_slot_SlotField_name(tom_match5_1); { tom.gom.adt.objects.types.ClassName tom_match5_1_domain=tom_get_slot_SlotField_domain(tom_match5_1); if( true ) {

          if (!res.equals("")) {
            res+= ", ";
          }
          res+= fullClassName(tom_match5_1_domain) + " "+fieldName(tom_match5_1_name);
         }}} }} }

    }
    return res;
  }     
  private String childList() {
    String res = "";
    SlotFieldList slots = slotList;
    while(!slots.isEmpty()) {
      SlotField head = slots.getHead();
      slots = slots.getTail();
       if(head instanceof  tom.gom.adt.objects.types.SlotField) { { tom.gom.adt.objects.types.SlotField tom_match6_1=(( tom.gom.adt.objects.types.SlotField)head); if(tom_is_fun_sym_SlotField(tom_match6_1) ||  false ) { { String  tom_match6_1_name=tom_get_slot_SlotField_name(tom_match6_1); if( true ) {

          if (!res.equals("")) {
            res+= ", ";
          }
          res+= " "+fieldName(tom_match6_1_name);
         }} }} }

    }
    return res;
  }     
  private String generateMembersEqualityTest(String peer) {
    String res = "";
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match7_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match7_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match7_1_list1=tom_match7_1; { tom.gom.adt.objects.types.SlotFieldList tom_match7_1_begin1=tom_match7_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match7_1_end1=tom_match7_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match7_1_end1))) {tom_match7_1_list1=tom_match7_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match7_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match7_1_list1); if(tom_is_fun_sym_SlotField(tom_match7_1_2) ||  false ) { { String  tom_match7_1_2_name=tom_get_slot_SlotField_name(tom_match7_1_2); if( true ) {

        res += fieldName(tom_match7_1_2_name)+"=="+peer+"."+getMethod(tom_match7_1_2)+"()";
        res+= " && ";
       }} }}tom_match7_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match7_1_end1);} }tom_match7_1_list1=tom_match7_1_begin1;}}}} }} }

    res += "true"; // to handle the "no childs" case
    return res;
  }
  private int nonBuiltinChildCount() {
    int count = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match8_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match8_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match8_1_list1=tom_match8_1; { tom.gom.adt.objects.types.SlotFieldList tom_match8_1_begin1=tom_match8_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match8_1_end1=tom_match8_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match8_1_end1))) {tom_match8_1_list1=tom_match8_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match8_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match8_1_list1); if(tom_is_fun_sym_SlotField(tom_match8_1_2) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match8_1_2_domain=tom_get_slot_SlotField_domain(tom_match8_1_2); if( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_match8_1_2_domain)) {
          count++;
        }
       }} }}tom_match8_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match8_1_end1);} }tom_match8_1_list1=tom_match8_1_begin1;}}}} }} }

    return count;
  }

  private String nonBuiltinsGetCases() {
    String res = "";
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match9_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match9_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match9_1_list1=tom_match9_1; { tom.gom.adt.objects.types.SlotFieldList tom_match9_1_begin1=tom_match9_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match9_1_end1=tom_match9_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match9_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match9_1_list1); if(tom_is_fun_sym_SlotField(tom_match9_1_2) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match9_1_2_domain=tom_get_slot_SlotField_domain(tom_match9_1_2); if( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_match9_1_2_domain)) {
          res += "      case "+index+": return "+getMethod(tom_match9_1_2)+"();\n";
          index++;
        }
       }} }}tom_match9_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match9_1_end1);} }tom_match9_1_list1=tom_match9_1_begin1;}}}} }} }

    return res;
  }

  private String nonBuiltinMakeCases(String argName) {
    String res = "";
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match10_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match10_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match10_1_list1=tom_match10_1; { tom.gom.adt.objects.types.SlotFieldList tom_match10_1_begin1=tom_match10_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match10_1_end1=tom_match10_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match10_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match10_1_list1); if(tom_is_fun_sym_SlotField(tom_match10_1_2) ||  false ) { { tom.gom.adt.objects.types.ClassName tom_match10_1_2_domain=tom_get_slot_SlotField_domain(tom_match10_1_2); if( true ) {

        if (!GomEnvironment.getInstance().isBuiltinClass(tom_match10_1_2_domain)) {
          res += "      case "+index+": return make("+generateMakeArgsFor(index, argName)+");\n";
          index++;
        }
       }} }}tom_match10_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match10_1_end1);} }tom_match10_1_list1=tom_match10_1_begin1;}}}} }} }

    return res;
  }
  private String generateMakeArgsFor(int argIndex, String argName) {
    String res = "";
    int index = 0;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match11_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match11_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match11_1_list1=tom_match11_1; { tom.gom.adt.objects.types.SlotFieldList tom_match11_1_begin1=tom_match11_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match11_1_end1=tom_match11_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match11_1_end1))) {tom_match11_1_list1=tom_match11_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match11_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match11_1_list1);tom_match11_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match11_1_list1); if(tom_is_fun_sym_SlotField(tom_match11_1_2) ||  false ) { { tom.gom.adt.objects.types.SlotField tom_slot=tom_match11_1_2; { tom.gom.adt.objects.types.ClassName tom_match11_1_2_domain=tom_get_slot_SlotField_domain(tom_match11_1_2); { tom.gom.adt.objects.types.ClassName tom_domain=tom_match11_1_2_domain; if( true ) {

        if (GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += getMethod(tom_slot)+"(), ";
        } else {
          if (index != argIndex) {
            res += getMethod(tom_slot)+"(), ";
          } else {
            res += "("+fullClassName(tom_domain)+") " + argName+", ";
          }
          index++;
        }
       }}}} }}tom_match11_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match11_1_end1);} }tom_match11_1_list1=tom_match11_1_begin1;}}}} }} }

    return res.substring(0,res.length()-2);
  }

  private String generateHashArgs() {
    String res = "";
    int index = slotList.getLength() - 1;
     if(slotList instanceof  tom.gom.adt.objects.types.SlotFieldList) { { tom.gom.adt.objects.types.SlotFieldList tom_match12_1=(( tom.gom.adt.objects.types.SlotFieldList)slotList); if(tom_is_fun_sym_concSlotField(tom_match12_1) ||  false ) { { tom.gom.adt.objects.types.SlotFieldList tom_match12_1_list1=tom_match12_1; { tom.gom.adt.objects.types.SlotFieldList tom_match12_1_begin1=tom_match12_1_list1; { tom.gom.adt.objects.types.SlotFieldList tom_match12_1_end1=tom_match12_1_list1;{ while (!(tom_is_empty_concSlotField_SlotFieldList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1;{ { tom.gom.adt.objects.types.SlotField tom_match12_1_2=tom_get_head_concSlotField_SlotFieldList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concSlotField_SlotFieldList(tom_match12_1_list1); if(tom_is_fun_sym_SlotField(tom_match12_1_2) ||  false ) { { String  tom_match12_1_2_name=tom_get_slot_SlotField_name(tom_match12_1_2); { tom.gom.adt.objects.types.ClassName tom_match12_1_2_domain=tom_get_slot_SlotField_domain(tom_match12_1_2); { String  tom_slotName=tom_match12_1_2_name; { tom.gom.adt.objects.types.ClassName tom_domain=tom_match12_1_2_domain; if( true ) {

        int shift = (index % 4) * 8;
        String accum = ""+"aaaabbbbcccc".toCharArray()[index % 12];
        res += "    "+accum+" += (";
        if (!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res += fieldName(tom_slotName)+".hashCode()";
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))) {
            res+= fieldName(tom_slotName);
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) { 
            // Use the string hashFunction for Strings, and pass index as arity
            res+= "shared.HashFunctions.stringHashFunction("+fieldName(tom_slotName)+", "+index+")";
          } else {
            throw new GomRuntimeException("generateHashArgs: Builtin " + tom_domain+ " not supported");
          }
        }
        if (shift!=0) { res += " << "+(shift); }
        res += ");\n";
        index--;
       }}}}} }}tom_match12_1_end1=tom_get_tail_concSlotField_SlotFieldList(tom_match12_1_end1);} }tom_match12_1_list1=tom_match12_1_begin1;}}}} }} }

    return res;
  }
}
