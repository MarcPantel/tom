/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/
package tom.gom.backend;

import tom.gom.GomStreamManager;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;
import tom.gom.tools.error.GomRuntimeException;
import java.io.*;

public abstract class TemplateClass {
  protected GomClass gomClass;
  protected ClassName className;

  public TemplateClass(GomClass gomClass) {
    this.gomClass = gomClass;
    this.className = gomClass.getClassName();
  }

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  private static boolean tom_equal_term_SlotField(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotField(Object t) { return  t instanceof tom.gom.adt.objects.types.SlotField ;}private static boolean tom_equal_term_ClassName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ClassName(Object t) { return  t instanceof tom.gom.adt.objects.types.ClassName ;}private static boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField  t) { return  t instanceof tom.gom.adt.objects.types.slotfield.SlotField ;}private static  String  tom_get_slot_SlotField_Name( tom.gom.adt.objects.types.SlotField  t) { return  t.getName() ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_SlotField_Domain( tom.gom.adt.objects.types.SlotField  t) { return  t.getDomain() ;}private static boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName  t) { return  t instanceof tom.gom.adt.objects.types.classname.ClassName ;}private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1) ; }private static  String  tom_get_slot_ClassName_Pkg( tom.gom.adt.objects.types.ClassName  t) { return  t.getPkg() ;}private static  String  tom_get_slot_ClassName_Name( tom.gom.adt.objects.types.ClassName  t) { return  t.getName() ;} 

  public abstract void generate(Writer writer) throws java.io.IOException;

  public String className() {
    return className(this.className);
  }

  public String className(ClassName clsName) {
    if (tom_is_sort_ClassName(clsName)) {{  tom.gom.adt.objects.types.ClassName  tomMatch1Position1=(( tom.gom.adt.objects.types.ClassName )clsName);if ( ( tom_is_fun_sym_ClassName(tomMatch1Position1) ||  false  ) ) {if ( true ) {

        return tom_get_slot_ClassName_Name(tomMatch1Position1);
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:className got a strange ClassName "+clsName);
  }

  public String fullClassName() {
    return fullClassName(this.className);
  }

  public static String fullClassName(ClassName clsName) {
    if (tom_is_sort_ClassName(clsName)) {{  tom.gom.adt.objects.types.ClassName  tomMatch2Position1=(( tom.gom.adt.objects.types.ClassName )clsName);if ( ( tom_is_fun_sym_ClassName(tomMatch2Position1) ||  false  ) ) {{  String  tom_pkgPrefix=tom_get_slot_ClassName_Pkg(tomMatch2Position1);{  String  tom_name=tom_get_slot_ClassName_Name(tomMatch2Position1);if ( true ) {

        if(tom_pkgPrefix.length()==0) {
          return tom_name;
        } else {
          return tom_pkgPrefix+"."+tom_name;
        }
      }}}}}}

    throw new GomRuntimeException(
        "TemplateClass:fullClassName got a strange ClassName "+clsName);
  }

  public String getPackage() {
    return getPackage(this.className);
  }

  public String getPackage(ClassName clsName) {
    if (tom_is_sort_ClassName(clsName)) {{  tom.gom.adt.objects.types.ClassName  tomMatch3Position1=(( tom.gom.adt.objects.types.ClassName )clsName);if ( ( tom_is_fun_sym_ClassName(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        return tom_get_slot_ClassName_Pkg(tomMatch3Position1);
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:getPackage got a strange ClassName "+clsName);
  }

  public String hasMethod(SlotField slot) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch4Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch4Position1) ||  false  ) ) {if ( true ) {

        return "has"+tom_get_slot_SlotField_Name(tomMatch4Position1);
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:hasMethod got a strange SlotField "+slot);
  }

  public String getMethod(SlotField slot) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch5Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch5Position1) ||  false  ) ) {if ( true ) {

        return "get"+tom_get_slot_SlotField_Name(tomMatch5Position1);
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:getMethod got a strange SlotField "+slot);
  }

  public String setMethod(SlotField slot) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch6Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch6Position1) ||  false  ) ) {if ( true ) {

        return "set"+tom_get_slot_SlotField_Name(tomMatch6Position1);
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:setMethod got a strange SlotField "+slot);
  }

  public String index(SlotField slot) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch7Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch7Position1) ||  false  ) ) {if ( true ) {

        return "index_"+tom_get_slot_SlotField_Name(tomMatch7Position1);
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:index got a strange SlotField "+slot);
  }

  public String slotDomain(SlotField slot) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch8Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch8Position1) ||  false  ) ) {if ( true ) {

        return fullClassName(tom_get_slot_SlotField_Domain(tomMatch8Position1));
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:slotDomain got a strange SlotField "+slot);
  }

  private String fieldName(String fieldName) {
    return "_"+fieldName;
  }

  public String classFieldName(ClassName clsName) {
    if (tom_is_sort_ClassName(clsName)) {{  tom.gom.adt.objects.types.ClassName  tomMatch9Position1=(( tom.gom.adt.objects.types.ClassName )clsName);if ( ( tom_is_fun_sym_ClassName(tomMatch9Position1) ||  false  ) ) {if ( true ) {

        return tom_get_slot_ClassName_Name(tomMatch9Position1).toLowerCase();
      }}}}

    throw new GomRuntimeException(
        "TemplateClass:classFieldName got a strange ClassName "+clsName);
  }

  public void toStringSlotField(StringBuffer res, SlotField slot,
                                String element, String buffer) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch10Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch10Position1) ||  false  ) ) {{  tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch10Position1);if ( true ) {

        if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+".toStringBuffer("/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+");\n"
);
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))
              || tom_domain.equals(tom_make_ClassName("","double"))
              || tom_domain.equals(tom_make_ClassName("","float"))) {
            res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append("/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+");\n"
);
          } else if (tom_domain.equals(tom_make_ClassName("","long"))) {
            res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append("/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+");\n            "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append(\"l\");\n"

);
          } else if (tom_domain.equals(tom_make_ClassName("","char"))) {
            res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append(((int)"/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+"-(int)'0'));\n"
);
          } else if (tom_domain.equals(tom_make_ClassName("","boolean"))) {
            res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append("/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+"?1:0);\n"
);
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
            String atchar = "@";
            res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\"');\n            for (int i = 0; i < "/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+".length(); i++) {\n              char c = "/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+".charAt(i);\n              switch (c) {\n                case '\\n':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('n');\n                  break;\n                case '\\t':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('t');\n                  break;\n                case '\\b':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('b');\n                  break;\n                case '\\r':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('r');\n                  break;\n                case '\\f':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('f');\n                  break;\n                case '\\\\':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  break;\n                case '\\'':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\'');\n                  break;\n                case '\\\"':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\"');\n                  break;\n                case '!':\n                case '"/* Generated by TOM (version 2.5alpha): Do not edit this file */+atchar+"':\n                case '#':\n                case '$':\n                case '%':\n                case '^':\n                case '&':\n                case '*':\n                case '(':\n                case ')':\n                case '-':\n                case '_':\n                case '+':\n                case '=':\n                case '|':\n                case '~':\n                case '{':\n                case '}':\n                case '[':\n                case ']':\n                case ';':\n                case ':':\n                case '<':\n                case '>':\n                case ',':\n                case '.':\n                case '?':\n                case ' ':\n                case '/':\n                  "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append(c);\n                  break;\n\n                default:\n                  if (java.lang.Character.isLetterOrDigit(c)) {\n                    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append(c);\n                  } else {\n                    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\\\\');\n                    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append((char) ('0' + c / 64));\n                    c = (char) (c % 64);\n                    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append((char) ('0' + c / 8));\n                    c = (char) (c % 8);\n                    "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append((char) ('0' + c));\n                  }\n              }\n            }\n            "/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append('\"');\n"

















































































);
          } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm")) ||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))) {
            res.append(""/* Generated by TOM (version 2.5alpha): Do not edit this file */+buffer+".append("/* Generated by TOM (version 2.5alpha): Do not edit this file */+element+".toString());\n"
);
          } else {
            throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
          }
        }
      }}}}}

  }

  public void toATermSlotField(StringBuffer res, SlotField slot) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch11Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch11Position1) ||  false  ) ) {{  tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch11Position1);if ( true ) {

        if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          res.append(getMethod(slot));
          res.append("().toATerm()");
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))) {
            res.append("(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeInt(");
            res.append(getMethod(slot));
            res.append("())");
          } else if (tom_domain.equals(tom_make_ClassName("","boolean"))) {
            res.append("(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeInt(");
            res.append(getMethod(slot));
            res.append("()?1:0)");
          } else if (tom_domain.equals(tom_make_ClassName("","long"))) {
            res.append("(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeLong(");
            res.append(getMethod(slot));
            res.append("())");
          } else if (tom_domain.equals(tom_make_ClassName("","double"))) {
            res.append("(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeReal(");
            res.append(getMethod(slot));
            res.append("())");
          } else if (tom_domain.equals(tom_make_ClassName("","float"))) {
            res.append("(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeReal(");
            res.append(getMethod(slot));
            res.append("())");
          } else if (tom_domain.equals(tom_make_ClassName("","char"))) {
            res.append("(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeInt(((int)");
            res.append(getMethod(slot));
            res.append("()-(int)'0'))");
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
            res.append("(aterm.ATerm) aterm.pure.SingletonFactory.getInstance().makeAppl(");
            res.append("aterm.pure.SingletonFactory.getInstance().makeAFun(");
            res.append(getMethod(slot));
            res.append("() ,0 , true))");
          } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm")) ||tom_domain.equals(tom_make_ClassName("aterm","ATermList"))){
            res.append(getMethod(slot));
            res.append("()");
          } else {
            throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
          }
        }
      }}}}}

  }

  public void fromATermSlotField(StringBuffer buffer, SlotField slot, String appl) {
    if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch12Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch12Position1) ||  false  ) ) {{  tom.gom.adt.objects.types.ClassName  tom_domain=tom_get_slot_SlotField_Domain(tomMatch12Position1);if ( true ) {

        if(!GomEnvironment.getInstance().isBuiltinClass(tom_domain)) {
          buffer.append(fullClassName(tom_domain));
          buffer.append(".fromTerm(");
          buffer.append(appl);
          buffer.append(")");
        } else {
          if (tom_domain.equals(tom_make_ClassName("","int"))) {
            buffer.append("((aterm.ATermInt)").append(appl).append(").getInt()");
          } else  if (tom_domain.equals(tom_make_ClassName("","float"))) {
            buffer.append("(float) ((aterm.ATermReal)").append(appl).append(").getReal()");
          } else  if (tom_domain.equals(tom_make_ClassName("","boolean"))) {
            buffer.append("(((aterm.ATermInt)").append(appl).append(").getInt()==0?false:true)");
          } else  if (tom_domain.equals(tom_make_ClassName("","long"))) {
            buffer.append("((aterm.ATermLong)").append(appl).append(").getLong()");
          } else  if (tom_domain.equals(tom_make_ClassName("","double"))) {
            buffer.append("((aterm.ATermReal)").append(appl).append(").getReal()");
          } else  if (tom_domain.equals(tom_make_ClassName("","char"))) {
            buffer.append("(char) (((aterm.ATermInt)").append(appl).append(").getInt()+(int)'0')");
          } else if (tom_domain.equals(tom_make_ClassName("","String"))) {
            buffer.append("(String) ((aterm.ATermAppl)").append(appl).append(").getAFun().getName()");
          } else if (tom_domain.equals(tom_make_ClassName("aterm","ATerm")) || tom_domain.equals(tom_make_ClassName("aterm","ATermList")) ){
            buffer.append(appl);
          } else {
            throw new GomRuntimeException("Builtin " + tom_domain+ " not supported");
          }
        }
      }}}}}

  }

  protected String fileName() {
    return fullClassName().replace('.',File.separatorChar)+".java";
  }

  protected File fileToGenerate() {
    GomStreamManager stream = GomEnvironment.getInstance().getStreamManager();
    File output = new File(stream.getDestDir(),fileName());
    return output;
  }

  public int generateFile() {
    try {
       File output = fileToGenerate();
       // make sure the directory exists
       output.getParentFile().mkdirs();
       Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));
       generate(writer);
       writer.flush();
       writer.close();
    } catch(Exception e) {
      e.printStackTrace();
      return 1;
    }
    return 0;
  }

  public String visitMethod(ClassName sortName) {
    return "visit_"+className(sortName);
  }

  public String isOperatorMethod(ClassName opName) {
    return "is"+className(opName);
  }

  protected void slotDecl(java.io.Writer writer, SlotFieldList slotList)
                        throws java.io.IOException {
    int index = 0;
    while(!slotList.isEmptyconcSlotField()) {
      SlotField slot = slotList.getHeadconcSlotField();
      slotList = slotList.getTailconcSlotField();
      if (index>0) { writer.write(", "); }
      if (tom_is_sort_SlotField(slot)) {{  tom.gom.adt.objects.types.SlotField  tomMatch13Position1=(( tom.gom.adt.objects.types.SlotField )slot);if ( ( tom_is_fun_sym_SlotField(tomMatch13Position1) ||  false  ) ) {{  tom.gom.adt.objects.types.ClassName  tomMatch13Position1NameNumberDomain=tom_get_slot_SlotField_Domain(tomMatch13Position1);if ( ( tom_is_fun_sym_ClassName(tomMatch13Position1NameNumberDomain) ||  false  ) ) {if ( true ) {

          writer.write(tom_get_slot_SlotField_Name(tomMatch13Position1));
          writer.write(":");
          writer.write(tom_get_slot_ClassName_Name(tomMatch13Position1NameNumberDomain));
          index++;
        }}}}}}

    }
  }

  protected void slotArgs(java.io.Writer writer, SlotFieldList slotList)
                        throws java.io.IOException {
    int index = 0;
    while(!slotList.isEmptyconcSlotField()) {
      SlotField slot = slotList.getHeadconcSlotField();
      slotList = slotList.getTailconcSlotField();
      if (index>0) { writer.write(", "); }
      /* Warning: do not write the 'index' alone, this is not a valid variable
         name */
      writer.write("t"+index);
      index++;
    }
  }

  public void generateTomMapping(Writer writer, ClassName basicStrategy)
      throws java.io.IOException {
    return;
  }

}
