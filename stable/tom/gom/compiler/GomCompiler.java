/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;

import tom.library.strategy.mutraveler.MuTraveler;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

public class GomCompiler {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TypedProduction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OperatorDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Sort(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SortList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomModuleName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ModuleDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_Slot( tom.gom.adt.gom.types.Slot  t) {  return  (t!=null) && t.isSlot()  ;}private static  String  tom_get_slot_Slot_name( tom.gom.adt.gom.types.Slot  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Slot_sort( tom.gom.adt.gom.types.Slot  t) {  return  t.getsort()  ;}private static boolean tom_is_fun_sym_Slots( tom.gom.adt.gom.types.TypedProduction  t) {  return  (t!=null) && t.isSlots()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_slot_Slots_slots( tom.gom.adt.gom.types.TypedProduction  t) {  return  t.getslots()  ;}private static boolean tom_is_fun_sym_Variadic( tom.gom.adt.gom.types.TypedProduction  t) {  return  (t!=null) && t.isVariadic()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Variadic_sort( tom.gom.adt.gom.types.TypedProduction  t) {  return  t.getsort()  ;}private static boolean tom_is_fun_sym_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl  t) {  return  (t!=null) && t.isOperatorDecl()  ;}private static  String  tom_get_slot_OperatorDecl_name( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_OperatorDecl_sort( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.getsort()  ;}private static  tom.gom.adt.gom.types.TypedProduction  tom_get_slot_OperatorDecl_prod( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.getprod()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_slot_OperatorDecl_hooks( tom.gom.adt.gom.types.OperatorDecl  t) {  return  t.gethooks()  ;}private static boolean tom_is_fun_sym_Sort( tom.gom.adt.gom.types.Sort  t) {  return  (t!=null) && t.isSort()  ;}private static  tom.gom.adt.gom.types.SortDecl  tom_get_slot_Sort_decl( tom.gom.adt.gom.types.Sort  t) {  return  t.getdecl()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slot_Sort_operators( tom.gom.adt.gom.types.Sort  t) {  return  t.getoperators()  ;}private static boolean tom_is_fun_sym_SortDecl( tom.gom.adt.gom.types.SortDecl  t) {  return  (t!=null) && t.isSortDecl()  ;}private static  String  tom_get_slot_SortDecl_name( tom.gom.adt.gom.types.SortDecl  t) {  return  t.getname()  ;}private static  tom.gom.adt.gom.types.ModuleDecl  tom_get_slot_SortDecl_moduleDecl( tom.gom.adt.gom.types.SortDecl  t) {  return  t.getmoduleDecl()  ;}private static boolean tom_is_fun_sym_MakeHookDecl( tom.gom.adt.gom.types.HookDecl  t) {  return  (t!=null) && t.isMakeHookDecl()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_slot_MakeHookDecl_slotargs( tom.gom.adt.gom.types.HookDecl  t) {  return  t.getslotargs()  ;}private static  String  tom_get_slot_MakeHookDecl_code( tom.gom.adt.gom.types.HookDecl  t) {  return  t.getcode()  ;}private static boolean tom_is_fun_sym_GomModuleName( tom.gom.adt.gom.types.GomModuleName  t) {  return  (t!=null) && t.isGomModuleName()  ;}private static  String  tom_get_slot_GomModuleName_name( tom.gom.adt.gom.types.GomModuleName  t) {  return  t.getname()  ;}private static boolean tom_is_fun_sym_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl  t) {  return  (t!=null) && t.isModuleDecl()  ;}private static  tom.gom.adt.gom.types.GomModuleName  tom_get_slot_ModuleDecl_moduleName( tom.gom.adt.gom.types.ModuleDecl  t) {  return  t.getmoduleName()  ;}private static  String  tom_get_slot_ModuleDecl_pkg( tom.gom.adt.gom.types.ModuleDecl  t) {  return  t.getpkg()  ;}private static boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator || t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_empty_list_concOperator() { return  tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ; }private static  tom.gom.adt.gom.types.OperatorDeclList  tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl  e,  tom.gom.adt.gom.types.OperatorDeclList  l) { return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(e,l) ; }private static  tom.gom.adt.gom.types.OperatorDecl  tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getHeadconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.getTailconcOperator()  ;}private static boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList  l) {  return  l.isEmptyconcOperator()  ;}private static  tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList  l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {    if(tom_is_empty_concOperator_OperatorDeclList(l1)) {     return l2;    } else if(tom_is_empty_concOperator_OperatorDeclList(l2)) {     return l1;    } else if(tom_is_empty_concOperator_OperatorDeclList(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1))) {     return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(l1),tom_append_list_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end) {    if(tom_terms_equal_OperatorDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_empty_list_concOperator();    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList )tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl )tom_get_head_concOperator_OperatorDeclList(begin),( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator(( tom.gom.adt.gom.types.OperatorDeclList )tom_get_tail_concOperator_OperatorDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concHookDecl( tom.gom.adt.gom.types.HookDeclList  t) {  return  t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl || t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_empty_list_concHookDecl() { return  tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() ; }private static  tom.gom.adt.gom.types.HookDeclList  tom_cons_list_concHookDecl( tom.gom.adt.gom.types.HookDecl  e,  tom.gom.adt.gom.types.HookDeclList  l) { return  tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(e,l) ; }private static  tom.gom.adt.gom.types.HookDecl  tom_get_head_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getHeadconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_get_tail_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.getTailconcHookDecl()  ;}private static boolean tom_is_empty_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList  l) {  return  l.isEmptyconcHookDecl()  ;}private static  tom.gom.adt.gom.types.HookDeclList  tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList  l1,  tom.gom.adt.gom.types.HookDeclList  l2) {    if(tom_is_empty_concHookDecl_HookDeclList(l1)) {     return l2;    } else if(tom_is_empty_concHookDecl_HookDeclList(l2)) {     return l1;    } else if(tom_is_empty_concHookDecl_HookDeclList(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1))) {     return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(l1),tom_append_list_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.HookDeclList  tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList  begin,  tom.gom.adt.gom.types.HookDeclList  end) {    if(tom_terms_equal_HookDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.HookDeclList )tom_empty_list_concHookDecl();    } else {      return ( tom.gom.adt.gom.types.HookDeclList )tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl )tom_get_head_concHookDecl_HookDeclList(begin),( tom.gom.adt.gom.types.HookDeclList )tom_get_slice_concHookDecl(( tom.gom.adt.gom.types.HookDeclList )tom_get_tail_concHookDecl_HookDeclList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList  t) {  return  t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot || t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot  ;}private static  tom.gom.adt.gom.types.SlotList  tom_empty_list_concSlot() { return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }private static  tom.gom.adt.gom.types.SlotList  tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot  e,  tom.gom.adt.gom.types.SlotList  l) { return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.gom.adt.gom.types.Slot  tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList  l1,  tom.gom.adt.gom.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.gom.adt.gom.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.gom.adt.gom.types.SlotList )tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot(( tom.gom.adt.gom.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList  t) {  return  t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort || t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort  ;}private static  tom.gom.adt.gom.types.SortList  tom_empty_list_concSort() { return  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ; }private static  tom.gom.adt.gom.types.SortList  tom_cons_list_concSort( tom.gom.adt.gom.types.Sort  e,  tom.gom.adt.gom.types.SortList  l) { return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make(e,l) ; }private static  tom.gom.adt.gom.types.Sort  tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getHeadconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.getTailconcSort()  ;}private static boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList  l) {  return  l.isEmptyconcSort()  ;}private static  tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList  l1,  tom.gom.adt.gom.types.SortList  l2) {    if(tom_is_empty_concSort_SortList(l1)) {     return l2;    } else if(tom_is_empty_concSort_SortList(l2)) {     return l1;    } else if(tom_is_empty_concSort_SortList(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1))) {     return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(l1),tom_append_list_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end) {    if(tom_terms_equal_SortList(begin,end)) {      return ( tom.gom.adt.gom.types.SortList )tom_empty_list_concSort();    } else {      return ( tom.gom.adt.gom.types.SortList )tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort )tom_get_head_concSort_SortList(begin),( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort(( tom.gom.adt.gom.types.SortList )tom_get_tail_concSort_SortList(begin),end));    }   }   /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Hook(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotField(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotFieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomClass(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomClassList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ClassNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.gom.adt.objects.types.Hook  tom_make_MakeHook( tom.gom.adt.objects.types.SlotFieldList  t0,  String  t1) { return  tom.gom.adt.objects.types.hook.MakeHook.make(t0, t1); }private static  tom.gom.adt.objects.types.SlotField  tom_make_SlotField( String  t0,  tom.gom.adt.objects.types.ClassName  t1) { return  tom.gom.adt.objects.types.slotfield.SlotField.make(t0, t1); }private static  tom.gom.adt.objects.types.GomClass  tom_make_VisitableFwdClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.GomClass  t1) { return  tom.gom.adt.objects.types.gomclass.VisitableFwdClass.make(t0, t1); }private static  tom.gom.adt.objects.types.GomClass  tom_make_AbstractTypeClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassNameList  t2) { return  tom.gom.adt.objects.types.gomclass.AbstractTypeClass.make(t0, t1, t2); }private static  tom.gom.adt.objects.types.GomClass  tom_make_SortClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassName  t2,  tom.gom.adt.objects.types.ClassName  t3,  tom.gom.adt.objects.types.ClassNameList  t4,  tom.gom.adt.objects.types.SlotFieldList  t5) { return  tom.gom.adt.objects.types.gomclass.SortClass.make(t0, t1, t2, t3, t4, t5); }private static  tom.gom.adt.objects.types.GomClass  tom_make_OperatorClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassName  t2,  tom.gom.adt.objects.types.ClassName  t3,  tom.gom.adt.objects.types.ClassName  t4,  tom.gom.adt.objects.types.ClassName  t5,  tom.gom.adt.objects.types.SlotFieldList  t6,  tom.gom.adt.objects.types.HookList  t7) { return  tom.gom.adt.objects.types.gomclass.OperatorClass.make(t0, t1, t2, t3, t4, t5, t6, t7); }private static boolean tom_is_fun_sym_VariadicOperatorClass( tom.gom.adt.objects.types.GomClass  t) {  return  (t!=null) && t.isVariadicOperatorClass()  ;}private static  tom.gom.adt.objects.types.GomClass  tom_make_VariadicOperatorClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassName  t2,  tom.gom.adt.objects.types.GomClass  t3,  tom.gom.adt.objects.types.GomClass  t4) { return  tom.gom.adt.objects.types.gomclass.VariadicOperatorClass.make(t0, t1, t2, t3, t4); }private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_className( tom.gom.adt.objects.types.GomClass  t) {  return  t.getclassName()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_abstractType( tom.gom.adt.objects.types.GomClass  t) {  return  t.getabstractType()  ;}private static  tom.gom.adt.objects.types.ClassName  tom_get_slot_VariadicOperatorClass_sortName( tom.gom.adt.objects.types.GomClass  t) {  return  t.getsortName()  ;}private static  tom.gom.adt.objects.types.GomClass  tom_get_slot_VariadicOperatorClass_empty( tom.gom.adt.objects.types.GomClass  t) {  return  t.getempty()  ;}private static  tom.gom.adt.objects.types.GomClass  tom_get_slot_VariadicOperatorClass_cons( tom.gom.adt.objects.types.GomClass  t) {  return  t.getcons()  ;}private static  tom.gom.adt.objects.types.GomClass  tom_make_VisitorClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.GomClassList  t1,  tom.gom.adt.objects.types.GomClassList  t2) { return  tom.gom.adt.objects.types.gomclass.VisitorClass.make(t0, t1, t2); }private static  tom.gom.adt.objects.types.GomClass  tom_make_FwdClass( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.ClassNameList  t2,  tom.gom.adt.objects.types.ClassName  t3,  tom.gom.adt.objects.types.ClassNameList  t4,  tom.gom.adt.objects.types.GomClassList  t5,  tom.gom.adt.objects.types.GomClassList  t6) { return  tom.gom.adt.objects.types.gomclass.FwdClass.make(t0, t1, t2, t3, t4, t5, t6); }private static  tom.gom.adt.objects.types.GomClass  tom_make_TomMapping( tom.gom.adt.objects.types.ClassName  t0,  tom.gom.adt.objects.types.ClassName  t1,  tom.gom.adt.objects.types.GomClassList  t2,  tom.gom.adt.objects.types.GomClassList  t3) { return  tom.gom.adt.objects.types.gomclass.TomMapping.make(t0, t1, t2, t3); }private static  tom.gom.adt.objects.types.ClassName  tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.types.classname.ClassName.make(t0, t1); }private static boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList  t) {  return  t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField || t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_empty_list_concSlotField() { return  tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() ; }private static  tom.gom.adt.objects.types.SlotFieldList  tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField  e,  tom.gom.adt.objects.types.SlotFieldList  l) { return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(e,l) ; }private static  tom.gom.adt.objects.types.SlotField  tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getHeadconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.getTailconcSlotField()  ;}private static boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList  l) {  return  l.isEmptyconcSlotField()  ;}private static  tom.gom.adt.objects.types.SlotFieldList  tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList  l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end) {    if(tom_terms_equal_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList )tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField )tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList )tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }  private static boolean tom_is_fun_sym_concGomClass( tom.gom.adt.objects.types.GomClassList  t) {  return  t instanceof tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass || t instanceof tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass  ;}private static  tom.gom.adt.objects.types.GomClassList  tom_empty_list_concGomClass() { return  tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass.make() ; }private static  tom.gom.adt.objects.types.GomClassList  tom_cons_list_concGomClass( tom.gom.adt.objects.types.GomClass  e,  tom.gom.adt.objects.types.GomClassList  l) { return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(e,l) ; }private static  tom.gom.adt.objects.types.GomClass  tom_get_head_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) {  return  l.getHeadconcGomClass()  ;}private static  tom.gom.adt.objects.types.GomClassList  tom_get_tail_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) {  return  l.getTailconcGomClass()  ;}private static boolean tom_is_empty_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList  l) {  return  l.isEmptyconcGomClass()  ;}private static  tom.gom.adt.objects.types.GomClassList  tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList  l1,  tom.gom.adt.objects.types.GomClassList  l2) {    if(tom_is_empty_concGomClass_GomClassList(l1)) {     return l2;    } else if(tom_is_empty_concGomClass_GomClassList(l2)) {     return l1;    } else if(tom_is_empty_concGomClass_GomClassList(( tom.gom.adt.objects.types.GomClassList )tom_get_tail_concGomClass_GomClassList(l1))) {     return ( tom.gom.adt.objects.types.GomClassList )tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass )tom_get_head_concGomClass_GomClassList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.GomClassList )tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass )tom_get_head_concGomClass_GomClassList(l1),tom_append_list_concGomClass(( tom.gom.adt.objects.types.GomClassList )tom_get_tail_concGomClass_GomClassList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.GomClassList  tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end) {    if(tom_terms_equal_GomClassList(begin,end)) {      return ( tom.gom.adt.objects.types.GomClassList )tom_empty_list_concGomClass();    } else {      return ( tom.gom.adt.objects.types.GomClassList )tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass )tom_get_head_concGomClass_GomClassList(begin),( tom.gom.adt.objects.types.GomClassList )tom_get_slice_concGomClass(( tom.gom.adt.objects.types.GomClassList )tom_get_tail_concGomClass_GomClassList(begin),end));    }   }  private static boolean tom_is_fun_sym_concClassName( tom.gom.adt.objects.types.ClassNameList  t) {  return  t instanceof tom.gom.adt.objects.types.classnamelist.ConsconcClassName || t instanceof tom.gom.adt.objects.types.classnamelist.EmptyconcClassName  ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_empty_list_concClassName() { return  tom.gom.adt.objects.types.classnamelist.EmptyconcClassName.make() ; }private static  tom.gom.adt.objects.types.ClassNameList  tom_cons_list_concClassName( tom.gom.adt.objects.types.ClassName  e,  tom.gom.adt.objects.types.ClassNameList  l) { return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(e,l) ; }private static  tom.gom.adt.objects.types.ClassName  tom_get_head_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) {  return  l.getHeadconcClassName()  ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_get_tail_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) {  return  l.getTailconcClassName()  ;}private static boolean tom_is_empty_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList  l) {  return  l.isEmptyconcClassName()  ;}private static  tom.gom.adt.objects.types.ClassNameList  tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList  l1,  tom.gom.adt.objects.types.ClassNameList  l2) {    if(tom_is_empty_concClassName_ClassNameList(l1)) {     return l2;    } else if(tom_is_empty_concClassName_ClassNameList(l2)) {     return l1;    } else if(tom_is_empty_concClassName_ClassNameList(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(l1))) {     return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(l1),tom_append_list_concClassName(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.ClassNameList  tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end) {    if(tom_terms_equal_ClassNameList(begin,end)) {      return ( tom.gom.adt.objects.types.ClassNameList )tom_empty_list_concClassName();    } else {      return ( tom.gom.adt.objects.types.ClassNameList )tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName )tom_get_head_concClassName_ClassNameList(begin),( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_concClassName(( tom.gom.adt.objects.types.ClassNameList )tom_get_tail_concClassName_ClassNameList(begin),end));    }   }  private static boolean tom_is_fun_sym_concHook( tom.gom.adt.objects.types.HookList  t) {  return  t instanceof tom.gom.adt.objects.types.hooklist.ConsconcHook || t instanceof tom.gom.adt.objects.types.hooklist.EmptyconcHook  ;}private static  tom.gom.adt.objects.types.HookList  tom_empty_list_concHook() { return  tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() ; }private static  tom.gom.adt.objects.types.HookList  tom_cons_list_concHook( tom.gom.adt.objects.types.Hook  e,  tom.gom.adt.objects.types.HookList  l) { return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make(e,l) ; }private static  tom.gom.adt.objects.types.Hook  tom_get_head_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getHeadconcHook()  ;}private static  tom.gom.adt.objects.types.HookList  tom_get_tail_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.getTailconcHook()  ;}private static boolean tom_is_empty_concHook_HookList( tom.gom.adt.objects.types.HookList  l) {  return  l.isEmptyconcHook()  ;}private static  tom.gom.adt.objects.types.HookList  tom_append_list_concHook( tom.gom.adt.objects.types.HookList  l1,  tom.gom.adt.objects.types.HookList  l2) {    if(tom_is_empty_concHook_HookList(l1)) {     return l2;    } else if(tom_is_empty_concHook_HookList(l2)) {     return l1;    } else if(tom_is_empty_concHook_HookList(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1))) {     return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(l1),tom_append_list_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(l1),l2));    }   }  private static  tom.gom.adt.objects.types.HookList  tom_get_slice_concHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end) {    if(tom_terms_equal_HookList(begin,end)) {      return ( tom.gom.adt.objects.types.HookList )tom_empty_list_concHook();    } else {      return ( tom.gom.adt.objects.types.HookList )tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook )tom_get_head_concHook_HookList(begin),( tom.gom.adt.objects.types.HookList )tom_get_slice_concHook(( tom.gom.adt.objects.types.HookList )tom_get_tail_concHook_HookList(begin),end));    }   }   /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file */private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_BottomUp( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("x")),v)) ; }  




  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  Map sortClassNameForSortDecl = environment().builtinSortClassMap();

  public GomClassList compile(SortList sortList) {
    GomClassList classList = tom_empty_list_concGomClass();

    Map abstractTypeNameForModule = new HashMap();
    Map visitorNameForModule = new HashMap();
    Map visitableForwardNameForModule = new HashMap();
    Map tomMappingNameForModule = new HashMap();
    Map sortGomClassForSortDecl = new HashMap();
    Map classForOperatorDecl = new HashMap();
    /* For each module */
    Iterator it = getModuleDeclSet(sortList).iterator();
    while(it.hasNext()) {
      ModuleDecl moduleDecl = (ModuleDecl) it.next();
      String moduleName = moduleDecl.getmoduleName().getname();

      /* create an AbstractType class */
      ClassName abstractTypeName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"AbstractType")

;

      ClassName visitorName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"Visitor");
      visitorNameForModule.put(moduleDecl,visitorName);

      ClassName visitablefwdName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"BasicStrategy");
      visitableForwardNameForModule.put(moduleDecl,visitablefwdName);

      ClassName tomMappingName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName);
      tomMappingNameForModule.put(moduleDecl,tomMappingName);

      abstractTypeNameForModule.put(moduleDecl,abstractTypeName);

    }

    /* For each sort, create a sort implementation, and operator implementations
       (we don't need to do that per module, since each operator and sort knows
       to which module it belongs) */
    SortList consum = sortList;
    while(!consum.isEmptyconcSort()) {
      Sort sort = consum.getHeadconcSort();
      consum=consum.getTailconcSort();
      // get the class name for the sort
       if(sort instanceof  tom.gom.adt.gom.types.Sort ) { { tom.gom.adt.gom.types.Sort  tom_match1_1=(( tom.gom.adt.gom.types.Sort )sort); if ( ( tom_is_fun_sym_Sort(tom_match1_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tom_match1_1_decl=tom_get_slot_Sort_decl(tom_match1_1); if ( ( tom_is_fun_sym_SortDecl(tom_match1_1_decl) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tom_decl=tom_match1_1_decl; { String  tom_match1_1_decl_name=tom_get_slot_SortDecl_name(tom_match1_1_decl); { tom.gom.adt.gom.types.ModuleDecl  tom_match1_1_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match1_1_decl); { String  tom_sortname=tom_match1_1_decl_name; { tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tom_match1_1_decl_moduleDecl; if ( true ) {

          ClassName sortClassName = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types",tom_sortname);
          sortClassNameForSortDecl.put(tom_decl,sortClassName);
         } } } } } } } } } } }

    }
    consum = sortList;
    while(!consum.isEmptyconcSort()) {
      Sort sort = consum.getHeadconcSort();
      consum=consum.getTailconcSort();
      // get the class name for the sort
       if(sort instanceof  tom.gom.adt.gom.types.Sort ) { { tom.gom.adt.gom.types.Sort  tom_match2_1=(( tom.gom.adt.gom.types.Sort )sort); if ( ( tom_is_fun_sym_Sort(tom_match2_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tom_match2_1_decl=tom_get_slot_Sort_decl(tom_match2_1); { tom.gom.adt.gom.types.OperatorDeclList  tom_match2_1_operators=tom_get_slot_Sort_operators(tom_match2_1); if ( ( tom_is_fun_sym_SortDecl(tom_match2_1_decl) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tom_sortDecl=tom_match2_1_decl; { tom.gom.adt.gom.types.ModuleDecl  tom_match2_1_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match2_1_decl); { tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tom_match2_1_decl_moduleDecl; { tom.gom.adt.gom.types.OperatorDeclList  tom_oplist=tom_match2_1_operators; if ( true ) {

          ClassName sortClassName = (ClassName)sortClassNameForSortDecl.get(tom_sortDecl);
          ClassName abstracttypeName = (ClassName)abstractTypeNameForModule.get(tom_moduleDecl);
          ClassName visitorName = (ClassName)visitorNameForModule.get(tom_moduleDecl);
          ClassName visitableforwardName = (ClassName)visitableForwardNameForModule.get(tom_moduleDecl);
          ClassName mappingName = (ClassName)tomMappingNameForModule.get(tom_moduleDecl);

          // create operator classes. Also, store a list of all operators for the sort class
          // use a Set to collect slots and avoid duplicates
          Set allSortSlots = new HashSet();
          ClassNameList allOperators = tom_empty_list_concClassName();
           if(tom_oplist instanceof  tom.gom.adt.gom.types.OperatorDeclList ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match3_1=(( tom.gom.adt.gom.types.OperatorDeclList )tom_oplist); if ( ( tom_is_fun_sym_concOperator(tom_match3_1) ||  false  ) ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match3_1_list1=tom_match3_1; { tom.gom.adt.gom.types.OperatorDeclList  tom_match3_1_begin1=tom_match3_1_list1; { tom.gom.adt.gom.types.OperatorDeclList  tom_match3_1_end1=tom_match3_1_list1; { while (!(tom_is_empty_concOperator_OperatorDeclList(tom_match3_1_end1))) {tom_match3_1_list1=tom_match3_1_end1; { { tom.gom.adt.gom.types.OperatorDecl  tom_match3_1_2=tom_get_head_concOperator_OperatorDeclList(tom_match3_1_list1);tom_match3_1_list1=tom_get_tail_concOperator_OperatorDeclList(tom_match3_1_list1); if ( ( tom_is_fun_sym_OperatorDecl(tom_match3_1_2) ||  false  ) ) { { tom.gom.adt.gom.types.OperatorDecl  tom_opdecl=tom_match3_1_2; { String  tom_match3_1_2_name=tom_get_slot_OperatorDecl_name(tom_match3_1_2); { tom.gom.adt.gom.types.SortDecl  tom_match3_1_2_sort=tom_get_slot_OperatorDecl_sort(tom_match3_1_2); { tom.gom.adt.gom.types.TypedProduction  tom_match3_1_2_prod=tom_get_slot_OperatorDecl_prod(tom_match3_1_2); { tom.gom.adt.gom.types.HookDeclList  tom_match3_1_2_hooks=tom_get_slot_OperatorDecl_hooks(tom_match3_1_2); { String  tom_opname=tom_match3_1_2_name; if ( ( tom_is_fun_sym_SortDecl(tom_match3_1_2_sort) ||  false  ) ) { { String  tom_match3_1_2_sort_name=tom_get_slot_SortDecl_name(tom_match3_1_2_sort); { String  tom_sortName=tom_match3_1_2_sort_name; { tom.gom.adt.gom.types.TypedProduction  tom_typedproduction=tom_match3_1_2_prod; { tom.gom.adt.gom.types.HookDeclList  tom_hookList=tom_match3_1_2_hooks; if ( true ) {






              String sortNamePackage = tom_sortName.toLowerCase();
              ClassName operatorClassName = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage,tom_opname);
              SlotFieldList slots = tom_empty_list_concSlotField();
              ClassName variadicOpClassName = null;
              ClassName empty = null;
               if(tom_typedproduction instanceof  tom.gom.adt.gom.types.TypedProduction ) { { tom.gom.adt.gom.types.TypedProduction  tom_match4_1=(( tom.gom.adt.gom.types.TypedProduction )tom_typedproduction); if ( ( tom_is_fun_sym_Variadic(tom_match4_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tom_match4_1_sort=tom_get_slot_Variadic_sort(tom_match4_1); { tom.gom.adt.gom.types.SortDecl  tom_domain=tom_match4_1_sort; if ( true ) {

                  ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tom_domain);
                  SlotField slotHead = tom_make_SlotField("Head"+tom_opname,clsName);
                  SlotField slotTail = tom_make_SlotField("Tail"+tom_opname,sortClassName);
                  allSortSlots.add(slotHead);
                  allSortSlots.add(slotTail);
                  slots = tom_cons_list_concSlotField(slotHead,tom_cons_list_concSlotField(slotTail,tom_empty_list_concSlotField()));
                  // as the operator is variadic, add a Cons and an Empty
                  variadicOpClassName = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage,tom_opname);
                  empty = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage,"Empty"+tom_opname);
                  operatorClassName = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage,"Cons"+tom_opname);

                  allOperators = tom_cons_list_concClassName(empty,tom_append_list_concClassName(allOperators,tom_empty_list_concClassName()));
                 } } } } if ( ( tom_is_fun_sym_Slots(tom_match4_1) ||  false  ) ) { { tom.gom.adt.gom.types.SlotList  tom_match4_1_slots=tom_get_slot_Slots_slots(tom_match4_1); if ( ( tom_is_fun_sym_concSlot(tom_match4_1_slots) ||  false  ) ) { { tom.gom.adt.gom.types.SlotList  tom_match4_1_slots_list1=tom_match4_1_slots; { tom.gom.adt.gom.types.SlotList  tom_match4_1_slots_begin1=tom_match4_1_slots_list1; { tom.gom.adt.gom.types.SlotList  tom_match4_1_slots_end1=tom_match4_1_slots_list1; { while (!(tom_is_empty_concSlot_SlotList(tom_match4_1_slots_end1))) {tom_match4_1_slots_list1=tom_match4_1_slots_end1; { { tom.gom.adt.gom.types.Slot  tom_match4_1_slots_2=tom_get_head_concSlot_SlotList(tom_match4_1_slots_list1);tom_match4_1_slots_list1=tom_get_tail_concSlot_SlotList(tom_match4_1_slots_list1); if ( ( tom_is_fun_sym_Slot(tom_match4_1_slots_2) ||  false  ) ) { { String  tom_match4_1_slots_2_name=tom_get_slot_Slot_name(tom_match4_1_slots_2); { tom.gom.adt.gom.types.SortDecl  tom_match4_1_slots_2_sort=tom_get_slot_Slot_sort(tom_match4_1_slots_2); { String  tom_slotname=tom_match4_1_slots_2_name; { tom.gom.adt.gom.types.SortDecl  tom_domain=tom_match4_1_slots_2_sort; if ( true ) {

                  ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tom_domain);
                  SlotField slotfield = tom_make_SlotField(tom_slotname,clsName);
                  allSortSlots.add(slotfield);
                  slots = tom_append_list_concSlotField(slots,tom_cons_list_concSlotField(slotfield,tom_empty_list_concSlotField()));
                 } } } } } } }tom_match4_1_slots_end1=tom_get_tail_concSlot_SlotList(tom_match4_1_slots_end1); } }tom_match4_1_slots_list1=tom_match4_1_slots_begin1; } } } } } } } } }

              GomClass operatorClass;
              allOperators = tom_cons_list_concClassName(operatorClassName,tom_append_list_concClassName(allOperators,tom_empty_list_concClassName()));
              HookList operatorHooks = makeHooksFromHookDecls(tom_hookList);
              if (variadicOpClassName != null) { // We just processed a variadic operator
                GomClass cons = tom_make_OperatorClass(operatorClassName,abstracttypeName,variadicOpClassName,mappingName,sortClassName,visitorName,slots,operatorHooks)





;
                classList = tom_cons_list_concGomClass(cons,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

                GomClass emptyClass = tom_make_OperatorClass(empty,abstracttypeName,variadicOpClassName,mappingName,sortClassName,visitorName,tom_empty_list_concSlotField(),tom_empty_list_concHook())






;
                classList = tom_cons_list_concGomClass(emptyClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

                operatorClass = tom_make_VariadicOperatorClass(variadicOpClassName,abstracttypeName,sortClassName,emptyClass,cons)



;
              } else {
                operatorClass = tom_make_OperatorClass(operatorClassName,abstracttypeName,sortClassName,mappingName,sortClassName,visitorName,slots,operatorHooks)





;
              }
              classForOperatorDecl.put(tom_opdecl,operatorClass);
              classList = tom_cons_list_concGomClass(operatorClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));
             } } } } } } } } } } } } } }tom_match3_1_end1=tom_get_tail_concOperator_OperatorDeclList(tom_match3_1_end1); } }tom_match3_1_list1=tom_match3_1_begin1; } } } } } } }

          // create the sort class and add it to the list
          GomClass sortClass = tom_make_SortClass(sortClassName,abstracttypeName,visitorName,visitableforwardName,allOperators,slotFieldListFromSet(allSortSlots))




;
          sortGomClassForSortDecl.put(tom_sortDecl,sortClass);
          classList = tom_cons_list_concGomClass(sortClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));
         } } } } } } } } } } }

    }

    it = getModuleDeclSet(sortList).iterator();
    while(it.hasNext()) {
      ModuleDecl moduleDecl = (ModuleDecl) it.next();
      String moduleName = moduleDecl.getmoduleName().getname();

      GomClassList allOperatorClasses = tom_empty_list_concGomClass();
      GomClassList allSortClasses = tom_empty_list_concGomClass();
      ModuleDeclList modlist = environment().getModuleDependency(moduleDecl);
      while(!modlist.isEmptyconcModuleDecl()) {
        ModuleDecl imported = modlist.getHeadconcModuleDecl();
        modlist = modlist.getTailconcModuleDecl();
        SortList moduleSorts = getSortForModule(imported,sortList);
        SortList sortconsum = moduleSorts;
        while(!sortconsum.isEmptyconcSort()) {
          Sort sort = sortconsum.getHeadconcSort();
          sortconsum = sortconsum.getTailconcSort();
           if(sort instanceof  tom.gom.adt.gom.types.Sort ) { { tom.gom.adt.gom.types.Sort  tom_match5_1=(( tom.gom.adt.gom.types.Sort )sort); if ( ( tom_is_fun_sym_Sort(tom_match5_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tom_match5_1_decl=tom_get_slot_Sort_decl(tom_match5_1); { tom.gom.adt.gom.types.SortDecl  tom_sortDecl=tom_match5_1_decl; if ( true ) {

              GomClass sortClass = (GomClass) sortGomClassForSortDecl.get(tom_sortDecl);
              allSortClasses = tom_cons_list_concGomClass(sortClass,tom_append_list_concGomClass(allSortClasses,tom_empty_list_concGomClass()));
             } } } } } }

        }
         if(moduleSorts instanceof  tom.gom.adt.gom.types.SortList ) { { tom.gom.adt.gom.types.SortList  tom_match6_1=(( tom.gom.adt.gom.types.SortList )moduleSorts); if ( ( tom_is_fun_sym_concSort(tom_match6_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortList  tom_match6_1_list1=tom_match6_1; { tom.gom.adt.gom.types.SortList  tom_match6_1_begin1=tom_match6_1_list1; { tom.gom.adt.gom.types.SortList  tom_match6_1_end1=tom_match6_1_list1; { while (!(tom_is_empty_concSort_SortList(tom_match6_1_end1))) {tom_match6_1_list1=tom_match6_1_end1; { { tom.gom.adt.gom.types.Sort  tom_match6_1_2=tom_get_head_concSort_SortList(tom_match6_1_list1);tom_match6_1_list1=tom_get_tail_concSort_SortList(tom_match6_1_list1); if ( ( tom_is_fun_sym_Sort(tom_match6_1_2) ||  false  ) ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match6_1_2_operators=tom_get_slot_Sort_operators(tom_match6_1_2); if ( ( tom_is_fun_sym_concOperator(tom_match6_1_2_operators) ||  false  ) ) { { tom.gom.adt.gom.types.OperatorDeclList  tom_match6_1_2_operators_list1=tom_match6_1_2_operators; { tom.gom.adt.gom.types.OperatorDeclList  tom_match6_1_2_operators_begin1=tom_match6_1_2_operators_list1; { tom.gom.adt.gom.types.OperatorDeclList  tom_match6_1_2_operators_end1=tom_match6_1_2_operators_list1; { while (!(tom_is_empty_concOperator_OperatorDeclList(tom_match6_1_2_operators_end1))) {tom_match6_1_2_operators_list1=tom_match6_1_2_operators_end1; { { tom.gom.adt.gom.types.OperatorDecl  tom_opDecl=tom_get_head_concOperator_OperatorDeclList(tom_match6_1_2_operators_list1);tom_match6_1_2_operators_list1=tom_get_tail_concOperator_OperatorDeclList(tom_match6_1_2_operators_list1); if ( true ) {

            GomClass opClass = (GomClass) classForOperatorDecl.get(tom_opDecl);
            allOperatorClasses = tom_cons_list_concGomClass(opClass,tom_append_list_concGomClass(allOperatorClasses,tom_empty_list_concGomClass()));
             if(opClass instanceof  tom.gom.adt.objects.types.GomClass ) { { tom.gom.adt.objects.types.GomClass  tom_match7_1=(( tom.gom.adt.objects.types.GomClass )opClass); if ( ( tom_is_fun_sym_VariadicOperatorClass(tom_match7_1) ||  false  ) ) { { tom.gom.adt.objects.types.GomClass  tom_match7_1_empty=tom_get_slot_VariadicOperatorClass_empty(tom_match7_1); { tom.gom.adt.objects.types.GomClass  tom_match7_1_cons=tom_get_slot_VariadicOperatorClass_cons(tom_match7_1); { tom.gom.adt.objects.types.GomClass  tom_emptyClass=tom_match7_1_empty; { tom.gom.adt.objects.types.GomClass  tom_consClass=tom_match7_1_cons; if ( true ) {

                allOperatorClasses = tom_cons_list_concGomClass(tom_emptyClass,tom_cons_list_concGomClass(tom_consClass,tom_append_list_concGomClass(allOperatorClasses,tom_empty_list_concGomClass())));
      
               } } } } } } } }

           } }tom_match6_1_2_operators_end1=tom_get_tail_concOperator_OperatorDeclList(tom_match6_1_2_operators_end1); } }tom_match6_1_2_operators_list1=tom_match6_1_2_operators_begin1; } } } } } } } }tom_match6_1_end1=tom_get_tail_concSort_SortList(tom_match6_1_end1); } }tom_match6_1_list1=tom_match6_1_begin1; } } } } } } }

      }

      ClassName abstractTypeClassName = (ClassName)abstractTypeNameForModule.get(moduleDecl);

      // late creation of the visitors, since it has to know all operators
      ClassName visitorName = (ClassName) visitorNameForModule.get(moduleDecl);
      GomClass visitorclass = tom_make_VisitorClass(visitorName,allSortClasses,allOperatorClasses);
      classList = tom_cons_list_concGomClass(visitorclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create a Fwd class */
      ClassNameList importedVisitors = allClassForImports(visitorNameForModule,moduleDecl);
      ClassName fwdName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"Forward");
      ClassNameList importedAbstractType = allClassForImports(abstractTypeNameForModule,moduleDecl);
      GomClass fwdclass = tom_make_FwdClass(fwdName,visitorName,importedVisitors,abstractTypeClassName,importedAbstractType,allSortClasses,allOperatorClasses);
      classList = tom_cons_list_concGomClass(fwdclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create a VisitableFwd class */
      ClassName visitablefwdName = (ClassName) visitableForwardNameForModule.get(moduleDecl);
      GomClass visitablefwdclass = tom_make_VisitableFwdClass(visitablefwdName,fwdclass);
      classList = tom_cons_list_concGomClass(visitablefwdclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create the abstractType */
      ClassNameList classSortList = sortClassNames(sortList);
      ClassName abstractTypeName = (ClassName) abstractTypeNameForModule.get(moduleDecl);
      GomClass abstracttype = tom_make_AbstractTypeClass(abstractTypeName,visitorName,classSortList);
      classList = tom_cons_list_concGomClass(abstracttype,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create a TomMapping */
      ClassName tomMappingName = (ClassName) tomMappingNameForModule.get(moduleDecl);
      GomClass tommappingclass = tom_make_TomMapping(tomMappingName,visitablefwdName,allSortClasses,allOperatorClasses);
      classList = tom_cons_list_concGomClass(tommappingclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

    }

    return classList;
  }

  private ClassNameList sortClassNames(SortList sortList) {
    ClassNameList classNames = tom_empty_list_concClassName();
     if(sortList instanceof  tom.gom.adt.gom.types.SortList ) { { tom.gom.adt.gom.types.SortList  tom_match8_1=(( tom.gom.adt.gom.types.SortList )sortList); if ( ( tom_is_fun_sym_concSort(tom_match8_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortList  tom_match8_1_list1=tom_match8_1; { tom.gom.adt.gom.types.SortList  tom_match8_1_begin1=tom_match8_1_list1; { tom.gom.adt.gom.types.SortList  tom_match8_1_end1=tom_match8_1_list1; { while (!(tom_is_empty_concSort_SortList(tom_match8_1_end1))) {tom_match8_1_list1=tom_match8_1_end1; { { tom.gom.adt.gom.types.Sort  tom_match8_1_2=tom_get_head_concSort_SortList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concSort_SortList(tom_match8_1_list1); if ( ( tom_is_fun_sym_Sort(tom_match8_1_2) ||  false  ) ) { { tom.gom.adt.gom.types.SortDecl  tom_match8_1_2_decl=tom_get_slot_Sort_decl(tom_match8_1_2); if ( ( tom_is_fun_sym_SortDecl(tom_match8_1_2_decl) ||  false  ) ) { { String  tom_match8_1_2_decl_name=tom_get_slot_SortDecl_name(tom_match8_1_2_decl); { tom.gom.adt.gom.types.ModuleDecl  tom_match8_1_2_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match8_1_2_decl); { String  tom_sortname=tom_match8_1_2_decl_name; { tom.gom.adt.gom.types.ModuleDecl  tom_moduledecl=tom_match8_1_2_decl_moduleDecl; if ( true ) {



        classNames = tom_cons_list_concClassName(tom_make_ClassName(packagePrefix(tom_moduledecl)+".types",tom_sortname),tom_append_list_concClassName(classNames,tom_empty_list_concClassName()));
       } } } } } } } } }tom_match8_1_end1=tom_get_tail_concSort_SortList(tom_match8_1_end1); } }tom_match8_1_list1=tom_match8_1_begin1; } } } } } } }

    return classNames;
  }

  private Collection getModuleDeclSet(SortList sortList) {
    class CollectModuleDecls extends GomBasicStrategy {
      Collection bag;
      CollectModuleDecls(Collection bag) {
        super(tom_make_Identity());
        this.bag = bag;
      }
      public ModuleDecl visit_ModuleDecl(ModuleDecl arg) {
        bag.add(arg);
        return arg;
      }
    }
    Collection res = new HashSet();
    try {
      VisitableVisitor getModule = new CollectModuleDecls(res);
      MuTraveler.init(tom_make_BottomUp(getModule)).visit(sortList);
    } catch (VisitFailure e) {
      throw new GomRuntimeException("Failed to get the set of module names");
    }
    return res;
  }

  /*
   * Get all sort definitions for a given module
   */
  Map mapModuleToSort = new HashMap();
  private SortList getSortForModule(ModuleDecl module, SortList sortList) {
    if (mapModuleToSort.containsKey(module)) {
      return (SortList)mapModuleToSort.get(module);
    } else {
      // Build the sort list for this module
      SortList sorts = tom_empty_list_concSort();
       if(sortList instanceof  tom.gom.adt.gom.types.SortList ) { { tom.gom.adt.gom.types.SortList  tom_match9_1=(( tom.gom.adt.gom.types.SortList )sortList); if ( ( tom_is_fun_sym_concSort(tom_match9_1) ||  false  ) ) { { tom.gom.adt.gom.types.SortList  tom_match9_1_list1=tom_match9_1; { tom.gom.adt.gom.types.SortList  tom_match9_1_begin1=tom_match9_1_list1; { tom.gom.adt.gom.types.SortList  tom_match9_1_end1=tom_match9_1_list1; { while (!(tom_is_empty_concSort_SortList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1; { { tom.gom.adt.gom.types.Sort  tom_match9_1_2=tom_get_head_concSort_SortList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concSort_SortList(tom_match9_1_list1); if ( ( tom_is_fun_sym_Sort(tom_match9_1_2) ||  false  ) ) { { tom.gom.adt.gom.types.Sort  tom_s=tom_match9_1_2; { tom.gom.adt.gom.types.SortDecl  tom_match9_1_2_decl=tom_get_slot_Sort_decl(tom_match9_1_2); if ( ( tom_is_fun_sym_SortDecl(tom_match9_1_2_decl) ||  false  ) ) { { tom.gom.adt.gom.types.ModuleDecl  tom_match9_1_2_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match9_1_2_decl); { tom.gom.adt.gom.types.ModuleDecl  tom_mod=tom_match9_1_2_decl_moduleDecl; if ( true ) {

          if (tom_mod.equals(module)) {
            sorts = tom_cons_list_concSort(tom_s,tom_append_list_concSort(sorts,tom_empty_list_concSort()));
          }
         } } } } } } } }tom_match9_1_end1=tom_get_tail_concSort_SortList(tom_match9_1_end1); } }tom_match9_1_list1=tom_match9_1_begin1; } } } } } } }

      mapModuleToSort.put(module,sorts);
      return sorts;
    }
  }

  private String packagePrefix(ModuleDecl moduleDecl) {
    String pkgPrefix = "";
     if(moduleDecl instanceof  tom.gom.adt.gom.types.ModuleDecl ) { { tom.gom.adt.gom.types.ModuleDecl  tom_match10_1=(( tom.gom.adt.gom.types.ModuleDecl )moduleDecl); if ( ( tom_is_fun_sym_ModuleDecl(tom_match10_1) ||  false  ) ) { { tom.gom.adt.gom.types.GomModuleName  tom_match10_1_moduleName=tom_get_slot_ModuleDecl_moduleName(tom_match10_1); { String  tom_match10_1_pkg=tom_get_slot_ModuleDecl_pkg(tom_match10_1); if ( ( tom_is_fun_sym_GomModuleName(tom_match10_1_moduleName) ||  false  ) ) { { String  tom_match10_1_moduleName_name=tom_get_slot_GomModuleName_name(tom_match10_1_moduleName); { String  tom_name=tom_match10_1_moduleName_name; { String  tom_pkgopt=tom_match10_1_pkg; if ( true ) {

        if(!tom_pkgopt.equals("")) {
          pkgPrefix = tom_pkgopt+ "." + tom_name;
        } else {
          pkgPrefix = tom_name;
        }
       } } } } } } } } } }

    return pkgPrefix.toLowerCase();
  }

  private SlotFieldList slotFieldListFromSet(Set slotFieldSet) {
    Iterator it = slotFieldSet.iterator();
    SlotFieldList list = tom_empty_list_concSlotField();
    while(it.hasNext()) {
      SlotField slot = (SlotField) it.next();
      list = tom_append_list_concSlotField(list,tom_cons_list_concSlotField(slot,tom_empty_list_concSlotField()));
    }
    return list;
  }

  private HookList makeHooksFromHookDecls(HookDeclList declList) {
    HookList list = tom_empty_list_concHook();
     if(declList instanceof  tom.gom.adt.gom.types.HookDeclList ) { { tom.gom.adt.gom.types.HookDeclList  tom_match11_1=(( tom.gom.adt.gom.types.HookDeclList )declList); if ( ( tom_is_fun_sym_concHookDecl(tom_match11_1) ||  false  ) ) { { tom.gom.adt.gom.types.HookDeclList  tom_match11_1_list1=tom_match11_1; { tom.gom.adt.gom.types.HookDeclList  tom_match11_1_begin1=tom_match11_1_list1; { tom.gom.adt.gom.types.HookDeclList  tom_match11_1_end1=tom_match11_1_list1; { while (!(tom_is_empty_concHookDecl_HookDeclList(tom_match11_1_end1))) {tom_match11_1_list1=tom_match11_1_end1; { { tom.gom.adt.gom.types.HookDecl  tom_hook=tom_get_head_concHookDecl_HookDeclList(tom_match11_1_list1);tom_match11_1_list1=tom_get_tail_concHookDecl_HookDeclList(tom_match11_1_list1); if ( true ) {



        SlotFieldList newArgs = null;
        Hook newHook = null;
         if(tom_hook instanceof  tom.gom.adt.gom.types.HookDecl ) { { tom.gom.adt.gom.types.HookDecl  tom_match12_1=(( tom.gom.adt.gom.types.HookDecl )tom_hook); if ( ( tom_is_fun_sym_MakeHookDecl(tom_match12_1) ||  false  ) ) { { tom.gom.adt.gom.types.SlotList  tom_match12_1_slotargs=tom_get_slot_MakeHookDecl_slotargs(tom_match12_1); { String  tom_match12_1_code=tom_get_slot_MakeHookDecl_code(tom_match12_1); { tom.gom.adt.gom.types.SlotList  tom_slotArgs=tom_match12_1_slotargs; { String  tom_hookCode=tom_match12_1_code; if ( true ) {

            newArgs = makeSlotFieldListFromSlotList(tom_slotArgs);
            newHook = tom_make_MakeHook(newArgs,tom_hookCode);
           } } } } } } } }

        if (newHook == null || newArgs == null) {
          throw new GomRuntimeException("Hook declaration "+tom_hook+" not processed");
        }
        list = tom_append_list_concHook(list,tom_cons_list_concHook(newHook,tom_empty_list_concHook()));
       } }tom_match11_1_end1=tom_get_tail_concHookDecl_HookDeclList(tom_match11_1_end1); } }tom_match11_1_list1=tom_match11_1_begin1; } } } } } } }

    return list;
  }
  private SlotFieldList makeSlotFieldListFromSlotList(SlotList args) {
    SlotFieldList newArgs = tom_empty_list_concSlotField();
    while(!args.isEmptyconcSlot()) {
      Slot arg = args.getHeadconcSlot();
      args = args.getTailconcSlot();
       if(arg instanceof  tom.gom.adt.gom.types.Slot ) { { tom.gom.adt.gom.types.Slot  tom_match13_1=(( tom.gom.adt.gom.types.Slot )arg); if ( ( tom_is_fun_sym_Slot(tom_match13_1) ||  false  ) ) { { String  tom_match13_1_name=tom_get_slot_Slot_name(tom_match13_1); { tom.gom.adt.gom.types.SortDecl  tom_match13_1_sort=tom_get_slot_Slot_sort(tom_match13_1); { String  tom_slotName=tom_match13_1_name; { tom.gom.adt.gom.types.SortDecl  tom_sortDecl=tom_match13_1_sort; if ( true ) {

          ClassName slotClassName = (ClassName) sortClassNameForSortDecl.get(tom_sortDecl);
          newArgs = tom_append_list_concSlotField(newArgs,tom_cons_list_concSlotField(tom_make_SlotField(tom_slotName,slotClassName),tom_empty_list_concSlotField()));
         } } } } } } } }

    }
    return newArgs;
  }

  private ClassNameList allClassForImports(Map classMap, ModuleDecl moduleDecl) {
    ClassNameList importedList = tom_empty_list_concClassName();
    ModuleDeclList importedModulelist = environment().getModuleDependency(moduleDecl);
    while(!importedModulelist.isEmptyconcModuleDecl()) {
      ModuleDecl imported = importedModulelist.getHeadconcModuleDecl();
      importedModulelist = importedModulelist.getTailconcModuleDecl();
      if (!imported.equals(moduleDecl)) {
        ClassName importedclass = (ClassName)classMap.get(imported);
        importedList = tom_cons_list_concClassName(importedclass,tom_append_list_concClassName(importedList,tom_empty_list_concClassName()));
      }
    }
    return importedList;
  }
}
