/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006 INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;

import tom.library.strategy.mutraveler.MuTraveler;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

public class GomCompiler {

  /* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private  char  tom_set_stamp_char( char  c) {  return  c  ;}private void tom_check_stamp_char( char  c) { ;}private boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private  Character  tom_set_stamp_Character( Character  c) {  return  c  ;}private void tom_check_stamp_Character( Character  c) { ;}private boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_Char( Character  t) {  return  (t!= null) && (t instanceof Character)  ;}private  Character  tom_make_Char( char  c) { return  new Character(c) ; }private  char  tom_get_slot_Char_c( Character  t) {  return  t.charValue()  ;} private  String  tom_set_stamp_String( String  s) {  return  s  ;}private void tom_check_stamp_String( String  s) { ;}private boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_concString( String  t) {  return  (t!= null) && (t instanceof String)  ;}private  String  tom_empty_list_concString() { return  "" ; }private  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }private  char  tom_get_head_concString_String( String  s) {  return  s.charAt(0)  ;}private  String  tom_get_tail_concString_String( String  s) {  return  s.substring(1)  ;}private boolean tom_is_empty_concString_String( String  s) {  return  (s.length()==0)  ;}private  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  private  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private  tom.gom.adt.gom.types.ModuleDeclList tom_get_implementation_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return t ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_set_stamp_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return (tom.gom.adt.gom.types.ModuleDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ModuleDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList t) {  return (t!= null) && t.isSortModuleDeclList() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_empty_list_concModuleDecl() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(); }private  tom.gom.adt.gom.types.ModuleDeclList tom_cons_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDecl e,  tom.gom.adt.gom.types.ModuleDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(e,l); }private  tom.gom.adt.gom.types.ModuleDecl tom_get_head_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_get_tail_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList l) {  return l.getTail() ;}private boolean tom_is_empty_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_append_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList l1,  tom.gom.adt.gom.types.ModuleDeclList l2) {    if(tom_is_empty_concModuleDecl_ModuleDeclList(l1)) {     return l2;    } else if(tom_is_empty_concModuleDecl_ModuleDeclList(l2)) {     return l1;    } else if(tom_is_empty_concModuleDecl_ModuleDeclList(( tom.gom.adt.gom.types.ModuleDeclList)tom_get_tail_concModuleDecl_ModuleDeclList(l1))) {     return ( tom.gom.adt.gom.types.ModuleDeclList)tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl)tom_get_head_concModuleDecl_ModuleDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ModuleDeclList)tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl)tom_get_head_concModuleDecl_ModuleDeclList(l1),tom_append_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDeclList)tom_get_tail_concModuleDecl_ModuleDeclList(l1),l2));    }   }  private  tom.gom.adt.gom.types.ModuleDeclList tom_get_slice_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList begin,  tom.gom.adt.gom.types.ModuleDeclList end) {    if(tom_terms_equal_ModuleDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.ModuleDeclList)tom_empty_list_concModuleDecl();    } else {      return ( tom.gom.adt.gom.types.ModuleDeclList)tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl)tom_get_head_concModuleDecl_ModuleDeclList(begin),( tom.gom.adt.gom.types.ModuleDeclList)tom_get_slice_concModuleDecl(( tom.gom.adt.gom.types.ModuleDeclList)tom_get_tail_concModuleDecl_ModuleDeclList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_make_emptyModuleDeclList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(); }private boolean tom_is_fun_sym_manyModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_make_manyModuleDeclList( tom.gom.adt.gom.types.ModuleDecl e,  tom.gom.adt.gom.types.ModuleDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(e,l); }private  tom.gom.adt.gom.types.ModuleDecl tom_get_slot_manyModuleDeclList_head( tom.gom.adt.gom.types.ModuleDeclList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_get_slot_manyModuleDeclList_tail( tom.gom.adt.gom.types.ModuleDeclList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.SortDeclList tom_get_implementation_SortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return t ;}private  tom.gom.adt.gom.types.SortDeclList tom_set_stamp_SortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return (tom.gom.adt.gom.types.SortDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SortDeclList( tom.gom.adt.gom.types.SortDeclList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SortDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSortDecl( tom.gom.adt.gom.types.SortDeclList t) {  return (t!= null) && t.isSortSortDeclList() ;}private  tom.gom.adt.gom.types.SortDeclList tom_empty_list_concSortDecl() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(); }private  tom.gom.adt.gom.types.SortDeclList tom_cons_list_concSortDecl( tom.gom.adt.gom.types.SortDecl e,  tom.gom.adt.gom.types.SortDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(e,l); }private  tom.gom.adt.gom.types.SortDecl tom_get_head_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SortDeclList tom_get_tail_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList l) {  return l.getTail() ;}private boolean tom_is_empty_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SortDeclList tom_append_list_concSortDecl( tom.gom.adt.gom.types.SortDeclList l1,  tom.gom.adt.gom.types.SortDeclList l2) {    if(tom_is_empty_concSortDecl_SortDeclList(l1)) {     return l2;    } else if(tom_is_empty_concSortDecl_SortDeclList(l2)) {     return l1;    } else if(tom_is_empty_concSortDecl_SortDeclList(( tom.gom.adt.gom.types.SortDeclList)tom_get_tail_concSortDecl_SortDeclList(l1))) {     return ( tom.gom.adt.gom.types.SortDeclList)tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl)tom_get_head_concSortDecl_SortDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortDeclList)tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl)tom_get_head_concSortDecl_SortDeclList(l1),tom_append_list_concSortDecl(( tom.gom.adt.gom.types.SortDeclList)tom_get_tail_concSortDecl_SortDeclList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SortDeclList tom_get_slice_concSortDecl( tom.gom.adt.gom.types.SortDeclList begin,  tom.gom.adt.gom.types.SortDeclList end) {    if(tom_terms_equal_SortDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.SortDeclList)tom_empty_list_concSortDecl();    } else {      return ( tom.gom.adt.gom.types.SortDeclList)tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl)tom_get_head_concSortDecl_SortDeclList(begin),( tom.gom.adt.gom.types.SortDeclList)tom_get_slice_concSortDecl(( tom.gom.adt.gom.types.SortDeclList)tom_get_tail_concSortDecl_SortDeclList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SortDeclList tom_make_emptySortDeclList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(); }private boolean tom_is_fun_sym_manySortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SortDeclList tom_make_manySortDeclList( tom.gom.adt.gom.types.SortDecl e,  tom.gom.adt.gom.types.SortDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(e,l); }private  tom.gom.adt.gom.types.SortDecl tom_get_slot_manySortDeclList_head( tom.gom.adt.gom.types.SortDeclList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SortDeclList tom_get_slot_manySortDeclList_tail( tom.gom.adt.gom.types.SortDeclList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.HookDecl tom_get_implementation_HookDecl( tom.gom.adt.gom.types.HookDecl t) {  return t ;}private  tom.gom.adt.gom.types.HookDecl tom_set_stamp_HookDecl( tom.gom.adt.gom.types.HookDecl t) {  return (tom.gom.adt.gom.types.HookDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_HookDecl( tom.gom.adt.gom.types.HookDecl t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_HookDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_MakeBeforeHookDecl( tom.gom.adt.gom.types.HookDecl t) {  return  (t!= null) && t.isMakeBeforeHookDecl() ;}private  tom.gom.adt.gom.types.HookDecl tom_make_MakeBeforeHookDecl( tom.gom.adt.gom.types.SlotList t0,  String  t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookDecl_MakeBeforeHookDecl(t0, t1); }private  tom.gom.adt.gom.types.SlotList tom_get_slot_MakeBeforeHookDecl_slotargs( tom.gom.adt.gom.types.HookDecl t) {  return  t.getSlotargs() ;}private  String  tom_get_slot_MakeBeforeHookDecl_code( tom.gom.adt.gom.types.HookDecl t) {  return  t.getCode() ;}private boolean tom_is_fun_sym_MakeHookDecl( tom.gom.adt.gom.types.HookDecl t) {  return  (t!= null) && t.isMakeHookDecl() ;}private  tom.gom.adt.gom.types.HookDecl tom_make_MakeHookDecl( tom.gom.adt.gom.types.SlotList t0,  String  t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookDecl_MakeHookDecl(t0, t1); }private  tom.gom.adt.gom.types.SlotList tom_get_slot_MakeHookDecl_slotargs( tom.gom.adt.gom.types.HookDecl t) {  return  t.getSlotargs() ;}private  String  tom_get_slot_MakeHookDecl_code( tom.gom.adt.gom.types.HookDecl t) {  return  t.getCode() ;}private  tom.gom.adt.gom.types.HookDeclList tom_get_implementation_HookDeclList( tom.gom.adt.gom.types.HookDeclList t) {  return t ;}private  tom.gom.adt.gom.types.HookDeclList tom_set_stamp_HookDeclList( tom.gom.adt.gom.types.HookDeclList t) {  return (tom.gom.adt.gom.types.HookDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_HookDeclList( tom.gom.adt.gom.types.HookDeclList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_HookDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concHookDecl( tom.gom.adt.gom.types.HookDeclList t) {  return (t!= null) && t.isSortHookDeclList() ;}private  tom.gom.adt.gom.types.HookDeclList tom_empty_list_concHookDecl() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookDeclList(); }private  tom.gom.adt.gom.types.HookDeclList tom_cons_list_concHookDecl( tom.gom.adt.gom.types.HookDecl e,  tom.gom.adt.gom.types.HookDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookDeclList(e,l); }private  tom.gom.adt.gom.types.HookDecl tom_get_head_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.HookDeclList tom_get_tail_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList l) {  return l.getTail() ;}private boolean tom_is_empty_concHookDecl_HookDeclList( tom.gom.adt.gom.types.HookDeclList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.HookDeclList tom_append_list_concHookDecl( tom.gom.adt.gom.types.HookDeclList l1,  tom.gom.adt.gom.types.HookDeclList l2) {    if(tom_is_empty_concHookDecl_HookDeclList(l1)) {     return l2;    } else if(tom_is_empty_concHookDecl_HookDeclList(l2)) {     return l1;    } else if(tom_is_empty_concHookDecl_HookDeclList(( tom.gom.adt.gom.types.HookDeclList)tom_get_tail_concHookDecl_HookDeclList(l1))) {     return ( tom.gom.adt.gom.types.HookDeclList)tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl)tom_get_head_concHookDecl_HookDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.HookDeclList)tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl)tom_get_head_concHookDecl_HookDeclList(l1),tom_append_list_concHookDecl(( tom.gom.adt.gom.types.HookDeclList)tom_get_tail_concHookDecl_HookDeclList(l1),l2));    }   }  private  tom.gom.adt.gom.types.HookDeclList tom_get_slice_concHookDecl( tom.gom.adt.gom.types.HookDeclList begin,  tom.gom.adt.gom.types.HookDeclList end) {    if(tom_terms_equal_HookDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.HookDeclList)tom_empty_list_concHookDecl();    } else {      return ( tom.gom.adt.gom.types.HookDeclList)tom_cons_list_concHookDecl(( tom.gom.adt.gom.types.HookDecl)tom_get_head_concHookDecl_HookDeclList(begin),( tom.gom.adt.gom.types.HookDeclList)tom_get_slice_concHookDecl(( tom.gom.adt.gom.types.HookDeclList)tom_get_tail_concHookDecl_HookDeclList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyHookDeclList( tom.gom.adt.gom.types.HookDeclList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.HookDeclList tom_make_emptyHookDeclList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookDeclList(); }private boolean tom_is_fun_sym_manyHookDeclList( tom.gom.adt.gom.types.HookDeclList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.HookDeclList tom_make_manyHookDeclList( tom.gom.adt.gom.types.HookDecl e,  tom.gom.adt.gom.types.HookDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookDeclList(e,l); }private  tom.gom.adt.gom.types.HookDecl tom_get_slot_manyHookDeclList_head( tom.gom.adt.gom.types.HookDeclList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.HookDeclList tom_get_slot_manyHookDeclList_tail( tom.gom.adt.gom.types.HookDeclList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.SortList tom_get_implementation_SortList( tom.gom.adt.gom.types.SortList t) {  return t ;}private  tom.gom.adt.gom.types.SortList tom_set_stamp_SortList( tom.gom.adt.gom.types.SortList t) {  return (tom.gom.adt.gom.types.SortList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SortList( tom.gom.adt.gom.types.SortList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SortList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList t) {  return (t!= null) && t.isSortSortList() ;}private  tom.gom.adt.gom.types.SortList tom_empty_list_concSort() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(); }private  tom.gom.adt.gom.types.SortList tom_cons_list_concSort( tom.gom.adt.gom.types.Sort e,  tom.gom.adt.gom.types.SortList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(e,l); }private  tom.gom.adt.gom.types.Sort tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SortList tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList l) {  return l.getTail() ;}private boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SortList tom_append_list_concSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList l2) {    if(tom_is_empty_concSort_SortList(l1)) {     return l2;    } else if(tom_is_empty_concSort_SortList(l2)) {     return l1;    } else if(tom_is_empty_concSort_SortList(( tom.gom.adt.gom.types.SortList)tom_get_tail_concSort_SortList(l1))) {     return ( tom.gom.adt.gom.types.SortList)tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort)tom_get_head_concSort_SortList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortList)tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort)tom_get_head_concSort_SortList(l1),tom_append_list_concSort(( tom.gom.adt.gom.types.SortList)tom_get_tail_concSort_SortList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SortList tom_get_slice_concSort( tom.gom.adt.gom.types.SortList begin,  tom.gom.adt.gom.types.SortList end) {    if(tom_terms_equal_SortList(begin,end)) {      return ( tom.gom.adt.gom.types.SortList)tom_empty_list_concSort();    } else {      return ( tom.gom.adt.gom.types.SortList)tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort)tom_get_head_concSort_SortList(begin),( tom.gom.adt.gom.types.SortList)tom_get_slice_concSort(( tom.gom.adt.gom.types.SortList)tom_get_tail_concSort_SortList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySortList( tom.gom.adt.gom.types.SortList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SortList tom_make_emptySortList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(); }private boolean tom_is_fun_sym_manySortList( tom.gom.adt.gom.types.SortList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SortList tom_make_manySortList( tom.gom.adt.gom.types.Sort e,  tom.gom.adt.gom.types.SortList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(e,l); }private  tom.gom.adt.gom.types.Sort tom_get_slot_manySortList_head( tom.gom.adt.gom.types.SortList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SortList tom_get_slot_manySortList_tail( tom.gom.adt.gom.types.SortList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_implementation_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return t ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_set_stamp_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return (tom.gom.adt.gom.types.OperatorDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_OperatorDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList t) {  return (t!= null) && t.isSortOperatorDeclList() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_empty_list_concOperator() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(); }private  tom.gom.adt.gom.types.OperatorDeclList tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl e,  tom.gom.adt.gom.types.OperatorDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(e,l); }private  tom.gom.adt.gom.types.OperatorDecl tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList l) {  return l.getTail() ;}private boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList l2) {    if(tom_is_empty_concOperator_OperatorDeclList(l1)) {     return l2;    } else if(tom_is_empty_concOperator_OperatorDeclList(l2)) {     return l1;    } else if(tom_is_empty_concOperator_OperatorDeclList(( tom.gom.adt.gom.types.OperatorDeclList)tom_get_tail_concOperator_OperatorDeclList(l1))) {     return ( tom.gom.adt.gom.types.OperatorDeclList)tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl)tom_get_head_concOperator_OperatorDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList)tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl)tom_get_head_concOperator_OperatorDeclList(l1),tom_append_list_concOperator(( tom.gom.adt.gom.types.OperatorDeclList)tom_get_tail_concOperator_OperatorDeclList(l1),l2));    }   }  private  tom.gom.adt.gom.types.OperatorDeclList tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList begin,  tom.gom.adt.gom.types.OperatorDeclList end) {    if(tom_terms_equal_OperatorDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.OperatorDeclList)tom_empty_list_concOperator();    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList)tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl)tom_get_head_concOperator_OperatorDeclList(begin),( tom.gom.adt.gom.types.OperatorDeclList)tom_get_slice_concOperator(( tom.gom.adt.gom.types.OperatorDeclList)tom_get_tail_concOperator_OperatorDeclList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyOperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_make_emptyOperatorDeclList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(); }private boolean tom_is_fun_sym_manyOperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_make_manyOperatorDeclList( tom.gom.adt.gom.types.OperatorDecl e,  tom.gom.adt.gom.types.OperatorDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(e,l); }private  tom.gom.adt.gom.types.OperatorDecl tom_get_slot_manyOperatorDeclList_head( tom.gom.adt.gom.types.OperatorDeclList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_slot_manyOperatorDeclList_tail( tom.gom.adt.gom.types.OperatorDeclList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.Sort tom_get_implementation_Sort( tom.gom.adt.gom.types.Sort t) {  return t ;}private  tom.gom.adt.gom.types.Sort tom_set_stamp_Sort( tom.gom.adt.gom.types.Sort t) {  return (tom.gom.adt.gom.types.Sort)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Sort( tom.gom.adt.gom.types.Sort t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Sort(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Sort( tom.gom.adt.gom.types.Sort t) {  return  (t!= null) && t.isSort() ;}private  tom.gom.adt.gom.types.Sort tom_make_Sort( tom.gom.adt.gom.types.SortDecl t0,  tom.gom.adt.gom.types.OperatorDeclList t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSort_Sort(t0, t1); }private  tom.gom.adt.gom.types.SortDecl tom_get_slot_Sort_decl( tom.gom.adt.gom.types.Sort t) {  return  t.getDecl() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_slot_Sort_operators( tom.gom.adt.gom.types.Sort t) {  return  t.getOperators() ;}private  tom.gom.adt.gom.types.SlotList tom_get_implementation_SlotList( tom.gom.adt.gom.types.SlotList t) {  return t ;}private  tom.gom.adt.gom.types.SlotList tom_set_stamp_SlotList( tom.gom.adt.gom.types.SlotList t) {  return (tom.gom.adt.gom.types.SlotList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotList( tom.gom.adt.gom.types.SlotList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList t) {  return (t!= null) && t.isSortSlotList() ;}private  tom.gom.adt.gom.types.SlotList tom_empty_list_concSlot() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private  tom.gom.adt.gom.types.SlotList tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot e,  tom.gom.adt.gom.types.SlotList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private  tom.gom.adt.gom.types.Slot tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SlotList tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList l) {  return l.getTail() ;}private boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SlotList tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.gom.adt.gom.types.SlotList)tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.gom.adt.gom.types.SlotList)tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot)tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SlotList)tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot)tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.gom.adt.gom.types.SlotList)tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SlotList tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList begin,  tom.gom.adt.gom.types.SlotList end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.gom.adt.gom.types.SlotList)tom_empty_list_concSlot();    } else {      return ( tom.gom.adt.gom.types.SlotList)tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot)tom_get_head_concSlot_SlotList(begin),( tom.gom.adt.gom.types.SlotList)tom_get_slice_concSlot(( tom.gom.adt.gom.types.SlotList)tom_get_tail_concSlot_SlotList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySlotList( tom.gom.adt.gom.types.SlotList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SlotList tom_make_emptySlotList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private boolean tom_is_fun_sym_manySlotList( tom.gom.adt.gom.types.SlotList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SlotList tom_make_manySlotList( tom.gom.adt.gom.types.Slot e,  tom.gom.adt.gom.types.SlotList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private  tom.gom.adt.gom.types.Slot tom_get_slot_manySlotList_head( tom.gom.adt.gom.types.SlotList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SlotList tom_get_slot_manySlotList_tail( tom.gom.adt.gom.types.SlotList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.Slot tom_get_implementation_Slot( tom.gom.adt.gom.types.Slot t) {  return t ;}private  tom.gom.adt.gom.types.Slot tom_set_stamp_Slot( tom.gom.adt.gom.types.Slot t) {  return (tom.gom.adt.gom.types.Slot)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Slot( tom.gom.adt.gom.types.Slot t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Slot( tom.gom.adt.gom.types.Slot t) {  return  (t!= null) && t.isSlot() ;}private  tom.gom.adt.gom.types.Slot tom_make_Slot( String  t0,  tom.gom.adt.gom.types.SortDecl t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_Slot(t0, t1); }private  String  tom_get_slot_Slot_name( tom.gom.adt.gom.types.Slot t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.SortDecl tom_get_slot_Slot_sort( tom.gom.adt.gom.types.Slot t) {  return  t.getSort() ;}private  tom.gom.adt.gom.types.TypedProduction tom_get_implementation_TypedProduction( tom.gom.adt.gom.types.TypedProduction t) {  return t ;}private  tom.gom.adt.gom.types.TypedProduction tom_set_stamp_TypedProduction( tom.gom.adt.gom.types.TypedProduction t) {  return (tom.gom.adt.gom.types.TypedProduction)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_TypedProduction( tom.gom.adt.gom.types.TypedProduction t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_TypedProduction(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Variadic( tom.gom.adt.gom.types.TypedProduction t) {  return  (t!= null) && t.isVariadic() ;}private  tom.gom.adt.gom.types.TypedProduction tom_make_Variadic( tom.gom.adt.gom.types.SortDecl t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTypedProduction_Variadic(t0); }private  tom.gom.adt.gom.types.SortDecl tom_get_slot_Variadic_sort( tom.gom.adt.gom.types.TypedProduction t) {  return  t.getSort() ;}private boolean tom_is_fun_sym_Slots( tom.gom.adt.gom.types.TypedProduction t) {  return  (t!= null) && t.isSlots() ;}private  tom.gom.adt.gom.types.TypedProduction tom_make_Slots( tom.gom.adt.gom.types.SlotList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTypedProduction_Slots(t0); }private  tom.gom.adt.gom.types.SlotList tom_get_slot_Slots_slots( tom.gom.adt.gom.types.TypedProduction t) {  return  t.getSlots() ;}private  tom.gom.adt.gom.types.OperatorDecl tom_get_implementation_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) {  return t ;}private  tom.gom.adt.gom.types.OperatorDecl tom_set_stamp_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) {  return (tom.gom.adt.gom.types.OperatorDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_OperatorDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) {  return  (t!= null) && t.isOperatorDecl() ;}private  tom.gom.adt.gom.types.OperatorDecl tom_make_OperatorDecl( String  t0,  tom.gom.adt.gom.types.SortDecl t1,  tom.gom.adt.gom.types.TypedProduction t2,  tom.gom.adt.gom.types.HookDeclList t3) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDecl_OperatorDecl(t0, t1, t2, t3); }private  String  tom_get_slot_OperatorDecl_name( tom.gom.adt.gom.types.OperatorDecl t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.SortDecl tom_get_slot_OperatorDecl_sort( tom.gom.adt.gom.types.OperatorDecl t) {  return  t.getSort() ;}private  tom.gom.adt.gom.types.TypedProduction tom_get_slot_OperatorDecl_prod( tom.gom.adt.gom.types.OperatorDecl t) {  return  t.getProd() ;}private  tom.gom.adt.gom.types.HookDeclList tom_get_slot_OperatorDecl_hooks( tom.gom.adt.gom.types.OperatorDecl t) {  return  t.getHooks() ;}private  tom.gom.adt.gom.types.SortDecl tom_get_implementation_SortDecl( tom.gom.adt.gom.types.SortDecl t) {  return t ;}private  tom.gom.adt.gom.types.SortDecl tom_set_stamp_SortDecl( tom.gom.adt.gom.types.SortDecl t) {  return (tom.gom.adt.gom.types.SortDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SortDecl( tom.gom.adt.gom.types.SortDecl t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SortDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_BuiltinSortDecl( tom.gom.adt.gom.types.SortDecl t) {  return  (t!= null) && t.isBuiltinSortDecl() ;}private  tom.gom.adt.gom.types.SortDecl tom_make_BuiltinSortDecl( String  t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDecl_BuiltinSortDecl(t0); }private  String  tom_get_slot_BuiltinSortDecl_name( tom.gom.adt.gom.types.SortDecl t) {  return  t.getName() ;}private boolean tom_is_fun_sym_SortDecl( tom.gom.adt.gom.types.SortDecl t) {  return  (t!= null) && t.isSortDecl() ;}private  tom.gom.adt.gom.types.SortDecl tom_make_SortDecl( String  t0,  tom.gom.adt.gom.types.ModuleDecl t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDecl_SortDecl(t0, t1); }private  String  tom_get_slot_SortDecl_name( tom.gom.adt.gom.types.SortDecl t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.ModuleDecl tom_get_slot_SortDecl_moduleDecl( tom.gom.adt.gom.types.SortDecl t) {  return  t.getModuleDecl() ;}private  tom.gom.adt.gom.types.ModuleDecl tom_get_implementation_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) {  return t ;}private  tom.gom.adt.gom.types.ModuleDecl tom_set_stamp_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) {  return (tom.gom.adt.gom.types.ModuleDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ModuleDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) {  return  (t!= null) && t.isModuleDecl() ;}private  tom.gom.adt.gom.types.ModuleDecl tom_make_ModuleDecl( tom.gom.adt.gom.types.GomModuleName t0,  String  t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDecl_ModuleDecl(t0, t1); }private  tom.gom.adt.gom.types.GomModuleName tom_get_slot_ModuleDecl_moduleName( tom.gom.adt.gom.types.ModuleDecl t) {  return  t.getModuleName() ;}private  String  tom_get_slot_ModuleDecl_pkg( tom.gom.adt.gom.types.ModuleDecl t) {  return  t.getPkg() ;}private  tom.gom.adt.gom.types.GomModuleList tom_get_implementation_GomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return t ;}private  tom.gom.adt.gom.types.GomModuleList tom_set_stamp_GomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return (tom.gom.adt.gom.types.GomModuleList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomModuleList( tom.gom.adt.gom.types.GomModuleList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomModuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGomModule( tom.gom.adt.gom.types.GomModuleList t) {  return (t!= null) && t.isSortGomModuleList() ;}private  tom.gom.adt.gom.types.GomModuleList tom_empty_list_concGomModule() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(); }private  tom.gom.adt.gom.types.GomModuleList tom_cons_list_concGomModule( tom.gom.adt.gom.types.GomModule e,  tom.gom.adt.gom.types.GomModuleList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(e,l); }private  tom.gom.adt.gom.types.GomModule tom_get_head_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.GomModuleList tom_get_tail_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList l) {  return l.getTail() ;}private boolean tom_is_empty_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.GomModuleList tom_append_list_concGomModule( tom.gom.adt.gom.types.GomModuleList l1,  tom.gom.adt.gom.types.GomModuleList l2) {    if(tom_is_empty_concGomModule_GomModuleList(l1)) {     return l2;    } else if(tom_is_empty_concGomModule_GomModuleList(l2)) {     return l1;    } else if(tom_is_empty_concGomModule_GomModuleList(( tom.gom.adt.gom.types.GomModuleList)tom_get_tail_concGomModule_GomModuleList(l1))) {     return ( tom.gom.adt.gom.types.GomModuleList)tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule)tom_get_head_concGomModule_GomModuleList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GomModuleList)tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule)tom_get_head_concGomModule_GomModuleList(l1),tom_append_list_concGomModule(( tom.gom.adt.gom.types.GomModuleList)tom_get_tail_concGomModule_GomModuleList(l1),l2));    }   }  private  tom.gom.adt.gom.types.GomModuleList tom_get_slice_concGomModule( tom.gom.adt.gom.types.GomModuleList begin,  tom.gom.adt.gom.types.GomModuleList end) {    if(tom_terms_equal_GomModuleList(begin,end)) {      return ( tom.gom.adt.gom.types.GomModuleList)tom_empty_list_concGomModule();    } else {      return ( tom.gom.adt.gom.types.GomModuleList)tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule)tom_get_head_concGomModule_GomModuleList(begin),( tom.gom.adt.gom.types.GomModuleList)tom_get_slice_concGomModule(( tom.gom.adt.gom.types.GomModuleList)tom_get_tail_concGomModule_GomModuleList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.GomModuleList tom_make_emptyGomModuleList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(); }private boolean tom_is_fun_sym_manyGomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.GomModuleList tom_make_manyGomModuleList( tom.gom.adt.gom.types.GomModule e,  tom.gom.adt.gom.types.GomModuleList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(e,l); }private  tom.gom.adt.gom.types.GomModule tom_get_slot_manyGomModuleList_head( tom.gom.adt.gom.types.GomModuleList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.GomModuleList tom_get_slot_manyGomModuleList_tail( tom.gom.adt.gom.types.GomModuleList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.GrammarList tom_get_implementation_GrammarList( tom.gom.adt.gom.types.GrammarList t) {  return t ;}private  tom.gom.adt.gom.types.GrammarList tom_set_stamp_GrammarList( tom.gom.adt.gom.types.GrammarList t) {  return (tom.gom.adt.gom.types.GrammarList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GrammarList( tom.gom.adt.gom.types.GrammarList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GrammarList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGrammar( tom.gom.adt.gom.types.GrammarList t) {  return (t!= null) && t.isSortGrammarList() ;}private  tom.gom.adt.gom.types.GrammarList tom_empty_list_concGrammar() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(); }private  tom.gom.adt.gom.types.GrammarList tom_cons_list_concGrammar( tom.gom.adt.gom.types.Grammar e,  tom.gom.adt.gom.types.GrammarList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(e,l); }private  tom.gom.adt.gom.types.Grammar tom_get_head_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.GrammarList tom_get_tail_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList l) {  return l.getTail() ;}private boolean tom_is_empty_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.GrammarList tom_append_list_concGrammar( tom.gom.adt.gom.types.GrammarList l1,  tom.gom.adt.gom.types.GrammarList l2) {    if(tom_is_empty_concGrammar_GrammarList(l1)) {     return l2;    } else if(tom_is_empty_concGrammar_GrammarList(l2)) {     return l1;    } else if(tom_is_empty_concGrammar_GrammarList(( tom.gom.adt.gom.types.GrammarList)tom_get_tail_concGrammar_GrammarList(l1))) {     return ( tom.gom.adt.gom.types.GrammarList)tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar)tom_get_head_concGrammar_GrammarList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GrammarList)tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar)tom_get_head_concGrammar_GrammarList(l1),tom_append_list_concGrammar(( tom.gom.adt.gom.types.GrammarList)tom_get_tail_concGrammar_GrammarList(l1),l2));    }   }  private  tom.gom.adt.gom.types.GrammarList tom_get_slice_concGrammar( tom.gom.adt.gom.types.GrammarList begin,  tom.gom.adt.gom.types.GrammarList end) {    if(tom_terms_equal_GrammarList(begin,end)) {      return ( tom.gom.adt.gom.types.GrammarList)tom_empty_list_concGrammar();    } else {      return ( tom.gom.adt.gom.types.GrammarList)tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar)tom_get_head_concGrammar_GrammarList(begin),( tom.gom.adt.gom.types.GrammarList)tom_get_slice_concGrammar(( tom.gom.adt.gom.types.GrammarList)tom_get_tail_concGrammar_GrammarList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGrammarList( tom.gom.adt.gom.types.GrammarList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.GrammarList tom_make_emptyGrammarList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(); }private boolean tom_is_fun_sym_manyGrammarList( tom.gom.adt.gom.types.GrammarList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.GrammarList tom_make_manyGrammarList( tom.gom.adt.gom.types.Grammar e,  tom.gom.adt.gom.types.GrammarList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(e,l); }private  tom.gom.adt.gom.types.Grammar tom_get_slot_manyGrammarList_head( tom.gom.adt.gom.types.GrammarList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.GrammarList tom_get_slot_manyGrammarList_tail( tom.gom.adt.gom.types.GrammarList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.ImportList tom_get_implementation_ImportList( tom.gom.adt.gom.types.ImportList t) {  return t ;}private  tom.gom.adt.gom.types.ImportList tom_set_stamp_ImportList( tom.gom.adt.gom.types.ImportList t) {  return (tom.gom.adt.gom.types.ImportList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ImportList( tom.gom.adt.gom.types.ImportList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ImportList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concImportedModule( tom.gom.adt.gom.types.ImportList t) {  return (t!= null) && t.isSortImportList() ;}private  tom.gom.adt.gom.types.ImportList tom_empty_list_concImportedModule() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(); }private  tom.gom.adt.gom.types.ImportList tom_cons_list_concImportedModule( tom.gom.adt.gom.types.ImportedModule e,  tom.gom.adt.gom.types.ImportList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(e,l); }private  tom.gom.adt.gom.types.ImportedModule tom_get_head_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.ImportList tom_get_tail_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList l) {  return l.getTail() ;}private boolean tom_is_empty_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.ImportList tom_append_list_concImportedModule( tom.gom.adt.gom.types.ImportList l1,  tom.gom.adt.gom.types.ImportList l2) {    if(tom_is_empty_concImportedModule_ImportList(l1)) {     return l2;    } else if(tom_is_empty_concImportedModule_ImportList(l2)) {     return l1;    } else if(tom_is_empty_concImportedModule_ImportList(( tom.gom.adt.gom.types.ImportList)tom_get_tail_concImportedModule_ImportList(l1))) {     return ( tom.gom.adt.gom.types.ImportList)tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule)tom_get_head_concImportedModule_ImportList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ImportList)tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule)tom_get_head_concImportedModule_ImportList(l1),tom_append_list_concImportedModule(( tom.gom.adt.gom.types.ImportList)tom_get_tail_concImportedModule_ImportList(l1),l2));    }   }  private  tom.gom.adt.gom.types.ImportList tom_get_slice_concImportedModule( tom.gom.adt.gom.types.ImportList begin,  tom.gom.adt.gom.types.ImportList end) {    if(tom_terms_equal_ImportList(begin,end)) {      return ( tom.gom.adt.gom.types.ImportList)tom_empty_list_concImportedModule();    } else {      return ( tom.gom.adt.gom.types.ImportList)tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule)tom_get_head_concImportedModule_ImportList(begin),( tom.gom.adt.gom.types.ImportList)tom_get_slice_concImportedModule(( tom.gom.adt.gom.types.ImportList)tom_get_tail_concImportedModule_ImportList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyImportList( tom.gom.adt.gom.types.ImportList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.ImportList tom_make_emptyImportList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(); }private boolean tom_is_fun_sym_manyImportList( tom.gom.adt.gom.types.ImportList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.ImportList tom_make_manyImportList( tom.gom.adt.gom.types.ImportedModule e,  tom.gom.adt.gom.types.ImportList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(e,l); }private  tom.gom.adt.gom.types.ImportedModule tom_get_slot_manyImportList_head( tom.gom.adt.gom.types.ImportList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.ImportList tom_get_slot_manyImportList_tail( tom.gom.adt.gom.types.ImportList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.FieldList tom_get_implementation_FieldList( tom.gom.adt.gom.types.FieldList t) {  return t ;}private  tom.gom.adt.gom.types.FieldList tom_set_stamp_FieldList( tom.gom.adt.gom.types.FieldList t) {  return (tom.gom.adt.gom.types.FieldList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_FieldList( tom.gom.adt.gom.types.FieldList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_FieldList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concField( tom.gom.adt.gom.types.FieldList t) {  return (t!= null) && t.isSortFieldList() ;}private  tom.gom.adt.gom.types.FieldList tom_empty_list_concField() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(); }private  tom.gom.adt.gom.types.FieldList tom_cons_list_concField( tom.gom.adt.gom.types.Field e,  tom.gom.adt.gom.types.FieldList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(e,l); }private  tom.gom.adt.gom.types.Field tom_get_head_concField_FieldList( tom.gom.adt.gom.types.FieldList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.FieldList tom_get_tail_concField_FieldList( tom.gom.adt.gom.types.FieldList l) {  return l.getTail() ;}private boolean tom_is_empty_concField_FieldList( tom.gom.adt.gom.types.FieldList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.FieldList tom_append_list_concField( tom.gom.adt.gom.types.FieldList l1,  tom.gom.adt.gom.types.FieldList l2) {    if(tom_is_empty_concField_FieldList(l1)) {     return l2;    } else if(tom_is_empty_concField_FieldList(l2)) {     return l1;    } else if(tom_is_empty_concField_FieldList(( tom.gom.adt.gom.types.FieldList)tom_get_tail_concField_FieldList(l1))) {     return ( tom.gom.adt.gom.types.FieldList)tom_cons_list_concField(( tom.gom.adt.gom.types.Field)tom_get_head_concField_FieldList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.FieldList)tom_cons_list_concField(( tom.gom.adt.gom.types.Field)tom_get_head_concField_FieldList(l1),tom_append_list_concField(( tom.gom.adt.gom.types.FieldList)tom_get_tail_concField_FieldList(l1),l2));    }   }  private  tom.gom.adt.gom.types.FieldList tom_get_slice_concField( tom.gom.adt.gom.types.FieldList begin,  tom.gom.adt.gom.types.FieldList end) {    if(tom_terms_equal_FieldList(begin,end)) {      return ( tom.gom.adt.gom.types.FieldList)tom_empty_list_concField();    } else {      return ( tom.gom.adt.gom.types.FieldList)tom_cons_list_concField(( tom.gom.adt.gom.types.Field)tom_get_head_concField_FieldList(begin),( tom.gom.adt.gom.types.FieldList)tom_get_slice_concField(( tom.gom.adt.gom.types.FieldList)tom_get_tail_concField_FieldList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyFieldList( tom.gom.adt.gom.types.FieldList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.FieldList tom_make_emptyFieldList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(); }private boolean tom_is_fun_sym_manyFieldList( tom.gom.adt.gom.types.FieldList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.FieldList tom_make_manyFieldList( tom.gom.adt.gom.types.Field e,  tom.gom.adt.gom.types.FieldList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(e,l); }private  tom.gom.adt.gom.types.Field tom_get_slot_manyFieldList_head( tom.gom.adt.gom.types.FieldList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.FieldList tom_get_slot_manyFieldList_tail( tom.gom.adt.gom.types.FieldList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.ProductionList tom_get_implementation_ProductionList( tom.gom.adt.gom.types.ProductionList t) {  return t ;}private  tom.gom.adt.gom.types.ProductionList tom_set_stamp_ProductionList( tom.gom.adt.gom.types.ProductionList t) {  return (tom.gom.adt.gom.types.ProductionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ProductionList( tom.gom.adt.gom.types.ProductionList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ProductionList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concProduction( tom.gom.adt.gom.types.ProductionList t) {  return (t!= null) && t.isSortProductionList() ;}private  tom.gom.adt.gom.types.ProductionList tom_empty_list_concProduction() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(); }private  tom.gom.adt.gom.types.ProductionList tom_cons_list_concProduction( tom.gom.adt.gom.types.Production e,  tom.gom.adt.gom.types.ProductionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(e,l); }private  tom.gom.adt.gom.types.Production tom_get_head_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.ProductionList tom_get_tail_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList l) {  return l.getTail() ;}private boolean tom_is_empty_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.ProductionList tom_append_list_concProduction( tom.gom.adt.gom.types.ProductionList l1,  tom.gom.adt.gom.types.ProductionList l2) {    if(tom_is_empty_concProduction_ProductionList(l1)) {     return l2;    } else if(tom_is_empty_concProduction_ProductionList(l2)) {     return l1;    } else if(tom_is_empty_concProduction_ProductionList(( tom.gom.adt.gom.types.ProductionList)tom_get_tail_concProduction_ProductionList(l1))) {     return ( tom.gom.adt.gom.types.ProductionList)tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production)tom_get_head_concProduction_ProductionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ProductionList)tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production)tom_get_head_concProduction_ProductionList(l1),tom_append_list_concProduction(( tom.gom.adt.gom.types.ProductionList)tom_get_tail_concProduction_ProductionList(l1),l2));    }   }  private  tom.gom.adt.gom.types.ProductionList tom_get_slice_concProduction( tom.gom.adt.gom.types.ProductionList begin,  tom.gom.adt.gom.types.ProductionList end) {    if(tom_terms_equal_ProductionList(begin,end)) {      return ( tom.gom.adt.gom.types.ProductionList)tom_empty_list_concProduction();    } else {      return ( tom.gom.adt.gom.types.ProductionList)tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production)tom_get_head_concProduction_ProductionList(begin),( tom.gom.adt.gom.types.ProductionList)tom_get_slice_concProduction(( tom.gom.adt.gom.types.ProductionList)tom_get_tail_concProduction_ProductionList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyProductionList( tom.gom.adt.gom.types.ProductionList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.ProductionList tom_make_emptyProductionList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(); }private boolean tom_is_fun_sym_manyProductionList( tom.gom.adt.gom.types.ProductionList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.ProductionList tom_make_manyProductionList( tom.gom.adt.gom.types.Production e,  tom.gom.adt.gom.types.ProductionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(e,l); }private  tom.gom.adt.gom.types.Production tom_get_slot_manyProductionList_head( tom.gom.adt.gom.types.ProductionList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.ProductionList tom_get_slot_manyProductionList_tail( tom.gom.adt.gom.types.ProductionList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.GomTypeList tom_get_implementation_GomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return t ;}private  tom.gom.adt.gom.types.GomTypeList tom_set_stamp_GomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return (tom.gom.adt.gom.types.GomTypeList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomTypeList( tom.gom.adt.gom.types.GomTypeList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGomType( tom.gom.adt.gom.types.GomTypeList t) {  return (t!= null) && t.isSortGomTypeList() ;}private  tom.gom.adt.gom.types.GomTypeList tom_empty_list_concGomType() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(); }private  tom.gom.adt.gom.types.GomTypeList tom_cons_list_concGomType( tom.gom.adt.gom.types.GomType e,  tom.gom.adt.gom.types.GomTypeList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(e,l); }private  tom.gom.adt.gom.types.GomType tom_get_head_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.GomTypeList tom_get_tail_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList l) {  return l.getTail() ;}private boolean tom_is_empty_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.GomTypeList tom_append_list_concGomType( tom.gom.adt.gom.types.GomTypeList l1,  tom.gom.adt.gom.types.GomTypeList l2) {    if(tom_is_empty_concGomType_GomTypeList(l1)) {     return l2;    } else if(tom_is_empty_concGomType_GomTypeList(l2)) {     return l1;    } else if(tom_is_empty_concGomType_GomTypeList(( tom.gom.adt.gom.types.GomTypeList)tom_get_tail_concGomType_GomTypeList(l1))) {     return ( tom.gom.adt.gom.types.GomTypeList)tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType)tom_get_head_concGomType_GomTypeList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GomTypeList)tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType)tom_get_head_concGomType_GomTypeList(l1),tom_append_list_concGomType(( tom.gom.adt.gom.types.GomTypeList)tom_get_tail_concGomType_GomTypeList(l1),l2));    }   }  private  tom.gom.adt.gom.types.GomTypeList tom_get_slice_concGomType( tom.gom.adt.gom.types.GomTypeList begin,  tom.gom.adt.gom.types.GomTypeList end) {    if(tom_terms_equal_GomTypeList(begin,end)) {      return ( tom.gom.adt.gom.types.GomTypeList)tom_empty_list_concGomType();    } else {      return ( tom.gom.adt.gom.types.GomTypeList)tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType)tom_get_head_concGomType_GomTypeList(begin),( tom.gom.adt.gom.types.GomTypeList)tom_get_slice_concGomType(( tom.gom.adt.gom.types.GomTypeList)tom_get_tail_concGomType_GomTypeList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.GomTypeList tom_make_emptyGomTypeList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(); }private boolean tom_is_fun_sym_manyGomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.GomTypeList tom_make_manyGomTypeList( tom.gom.adt.gom.types.GomType e,  tom.gom.adt.gom.types.GomTypeList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(e,l); }private  tom.gom.adt.gom.types.GomType tom_get_slot_manyGomTypeList_head( tom.gom.adt.gom.types.GomTypeList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.GomTypeList tom_get_slot_manyGomTypeList_tail( tom.gom.adt.gom.types.GomTypeList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.SectionList tom_get_implementation_SectionList( tom.gom.adt.gom.types.SectionList t) {  return t ;}private  tom.gom.adt.gom.types.SectionList tom_set_stamp_SectionList( tom.gom.adt.gom.types.SectionList t) {  return (tom.gom.adt.gom.types.SectionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SectionList( tom.gom.adt.gom.types.SectionList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SectionList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSection( tom.gom.adt.gom.types.SectionList t) {  return (t!= null) && t.isSortSectionList() ;}private  tom.gom.adt.gom.types.SectionList tom_empty_list_concSection() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(); }private  tom.gom.adt.gom.types.SectionList tom_cons_list_concSection( tom.gom.adt.gom.types.Section e,  tom.gom.adt.gom.types.SectionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(e,l); }private  tom.gom.adt.gom.types.Section tom_get_head_concSection_SectionList( tom.gom.adt.gom.types.SectionList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SectionList tom_get_tail_concSection_SectionList( tom.gom.adt.gom.types.SectionList l) {  return l.getTail() ;}private boolean tom_is_empty_concSection_SectionList( tom.gom.adt.gom.types.SectionList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SectionList tom_append_list_concSection( tom.gom.adt.gom.types.SectionList l1,  tom.gom.adt.gom.types.SectionList l2) {    if(tom_is_empty_concSection_SectionList(l1)) {     return l2;    } else if(tom_is_empty_concSection_SectionList(l2)) {     return l1;    } else if(tom_is_empty_concSection_SectionList(( tom.gom.adt.gom.types.SectionList)tom_get_tail_concSection_SectionList(l1))) {     return ( tom.gom.adt.gom.types.SectionList)tom_cons_list_concSection(( tom.gom.adt.gom.types.Section)tom_get_head_concSection_SectionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SectionList)tom_cons_list_concSection(( tom.gom.adt.gom.types.Section)tom_get_head_concSection_SectionList(l1),tom_append_list_concSection(( tom.gom.adt.gom.types.SectionList)tom_get_tail_concSection_SectionList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SectionList tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList begin,  tom.gom.adt.gom.types.SectionList end) {    if(tom_terms_equal_SectionList(begin,end)) {      return ( tom.gom.adt.gom.types.SectionList)tom_empty_list_concSection();    } else {      return ( tom.gom.adt.gom.types.SectionList)tom_cons_list_concSection(( tom.gom.adt.gom.types.Section)tom_get_head_concSection_SectionList(begin),( tom.gom.adt.gom.types.SectionList)tom_get_slice_concSection(( tom.gom.adt.gom.types.SectionList)tom_get_tail_concSection_SectionList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySectionList( tom.gom.adt.gom.types.SectionList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SectionList tom_make_emptySectionList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(); }private boolean tom_is_fun_sym_manySectionList( tom.gom.adt.gom.types.SectionList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SectionList tom_make_manySectionList( tom.gom.adt.gom.types.Section e,  tom.gom.adt.gom.types.SectionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(e,l); }private  tom.gom.adt.gom.types.Section tom_get_slot_manySectionList_head( tom.gom.adt.gom.types.SectionList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SectionList tom_get_slot_manySectionList_tail( tom.gom.adt.gom.types.SectionList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.GomType tom_get_implementation_GomType( tom.gom.adt.gom.types.GomType t) {  return t ;}private  tom.gom.adt.gom.types.GomType tom_set_stamp_GomType( tom.gom.adt.gom.types.GomType t) {  return (tom.gom.adt.gom.types.GomType)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomType( tom.gom.adt.gom.types.GomType t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomType(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_GomType( tom.gom.adt.gom.types.GomType t) {  return  (t!= null) && t.isGomType() ;}private  tom.gom.adt.gom.types.GomType tom_make_GomType( String  t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomType_GomType(t0); }private  String  tom_get_slot_GomType_name( tom.gom.adt.gom.types.GomType t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.GomModuleName tom_get_implementation_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) {  return t ;}private  tom.gom.adt.gom.types.GomModuleName tom_set_stamp_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) {  return (tom.gom.adt.gom.types.GomModuleName)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomModuleName(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) {  return  (t!= null) && t.isGomModuleName() ;}private  tom.gom.adt.gom.types.GomModuleName tom_make_GomModuleName( String  t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleName_GomModuleName(t0); }private  String  tom_get_slot_GomModuleName_name( tom.gom.adt.gom.types.GomModuleName t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.Field tom_get_implementation_Field( tom.gom.adt.gom.types.Field t) {  return t ;}private  tom.gom.adt.gom.types.Field tom_set_stamp_Field( tom.gom.adt.gom.types.Field t) {  return (tom.gom.adt.gom.types.Field)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Field( tom.gom.adt.gom.types.Field t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Field(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_NamedField( tom.gom.adt.gom.types.Field t) {  return  (t!= null) && t.isNamedField() ;}private  tom.gom.adt.gom.types.Field tom_make_NamedField( String  t0,  tom.gom.adt.gom.types.GomType t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeField_NamedField(t0, t1); }private  String  tom_get_slot_NamedField_name( tom.gom.adt.gom.types.Field t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.GomType tom_get_slot_NamedField_fieldType( tom.gom.adt.gom.types.Field t) {  return  t.getFieldType() ;}private boolean tom_is_fun_sym_StarredField( tom.gom.adt.gom.types.Field t) {  return  (t!= null) && t.isStarredField() ;}private  tom.gom.adt.gom.types.Field tom_make_StarredField( tom.gom.adt.gom.types.GomType t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeField_StarredField(t0); }private  tom.gom.adt.gom.types.GomType tom_get_slot_StarredField_fieldType( tom.gom.adt.gom.types.Field t) {  return  t.getFieldType() ;}private  tom.gom.adt.gom.types.Arg tom_get_implementation_Arg( tom.gom.adt.gom.types.Arg t) {  return t ;}private  tom.gom.adt.gom.types.Arg tom_set_stamp_Arg( tom.gom.adt.gom.types.Arg t) {  return (tom.gom.adt.gom.types.Arg)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Arg( tom.gom.adt.gom.types.Arg t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Arg(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Arg( tom.gom.adt.gom.types.Arg t) {  return  (t!= null) && t.isArg() ;}private  tom.gom.adt.gom.types.Arg tom_make_Arg( String  t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeArg_Arg(t0); }private  String  tom_get_slot_Arg_name( tom.gom.adt.gom.types.Arg t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.ArgList tom_get_implementation_ArgList( tom.gom.adt.gom.types.ArgList t) {  return t ;}private  tom.gom.adt.gom.types.ArgList tom_set_stamp_ArgList( tom.gom.adt.gom.types.ArgList t) {  return (tom.gom.adt.gom.types.ArgList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ArgList( tom.gom.adt.gom.types.ArgList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ArgList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concArg( tom.gom.adt.gom.types.ArgList t) {  return (t!= null) && t.isSortArgList() ;}private  tom.gom.adt.gom.types.ArgList tom_empty_list_concArg() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeArgList(); }private  tom.gom.adt.gom.types.ArgList tom_cons_list_concArg( tom.gom.adt.gom.types.Arg e,  tom.gom.adt.gom.types.ArgList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeArgList(e,l); }private  tom.gom.adt.gom.types.Arg tom_get_head_concArg_ArgList( tom.gom.adt.gom.types.ArgList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.ArgList tom_get_tail_concArg_ArgList( tom.gom.adt.gom.types.ArgList l) {  return l.getTail() ;}private boolean tom_is_empty_concArg_ArgList( tom.gom.adt.gom.types.ArgList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.ArgList tom_append_list_concArg( tom.gom.adt.gom.types.ArgList l1,  tom.gom.adt.gom.types.ArgList l2) {    if(tom_is_empty_concArg_ArgList(l1)) {     return l2;    } else if(tom_is_empty_concArg_ArgList(l2)) {     return l1;    } else if(tom_is_empty_concArg_ArgList(( tom.gom.adt.gom.types.ArgList)tom_get_tail_concArg_ArgList(l1))) {     return ( tom.gom.adt.gom.types.ArgList)tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg)tom_get_head_concArg_ArgList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ArgList)tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg)tom_get_head_concArg_ArgList(l1),tom_append_list_concArg(( tom.gom.adt.gom.types.ArgList)tom_get_tail_concArg_ArgList(l1),l2));    }   }  private  tom.gom.adt.gom.types.ArgList tom_get_slice_concArg( tom.gom.adt.gom.types.ArgList begin,  tom.gom.adt.gom.types.ArgList end) {    if(tom_terms_equal_ArgList(begin,end)) {      return ( tom.gom.adt.gom.types.ArgList)tom_empty_list_concArg();    } else {      return ( tom.gom.adt.gom.types.ArgList)tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg)tom_get_head_concArg_ArgList(begin),( tom.gom.adt.gom.types.ArgList)tom_get_slice_concArg(( tom.gom.adt.gom.types.ArgList)tom_get_tail_concArg_ArgList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyArgList( tom.gom.adt.gom.types.ArgList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.ArgList tom_make_emptyArgList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeArgList(); }private boolean tom_is_fun_sym_manyArgList( tom.gom.adt.gom.types.ArgList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.ArgList tom_make_manyArgList( tom.gom.adt.gom.types.Arg e,  tom.gom.adt.gom.types.ArgList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeArgList(e,l); }private  tom.gom.adt.gom.types.Arg tom_get_slot_manyArgList_head( tom.gom.adt.gom.types.ArgList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.ArgList tom_get_slot_manyArgList_tail( tom.gom.adt.gom.types.ArgList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.Hookkind tom_get_implementation_Hookkind( tom.gom.adt.gom.types.Hookkind t) {  return t ;}private  tom.gom.adt.gom.types.Hookkind tom_set_stamp_Hookkind( tom.gom.adt.gom.types.Hookkind t) {  return (tom.gom.adt.gom.types.Hookkind)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Hookkind( tom.gom.adt.gom.types.Hookkind t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Hookkind(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_KindMakeBeforeHook( tom.gom.adt.gom.types.Hookkind t) {  return  (t!= null) && t.isKindMakeBeforeHook() ;}private  tom.gom.adt.gom.types.Hookkind tom_make_KindMakeBeforeHook() { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookkind_KindMakeBeforeHook(); }private boolean tom_is_fun_sym_KindMakeinsertHook( tom.gom.adt.gom.types.Hookkind t) {  return  (t!= null) && t.isKindMakeinsertHook() ;}private  tom.gom.adt.gom.types.Hookkind tom_make_KindMakeinsertHook() { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookkind_KindMakeinsertHook(); }private boolean tom_is_fun_sym_KindMakeHook( tom.gom.adt.gom.types.Hookkind t) {  return  (t!= null) && t.isKindMakeHook() ;}private  tom.gom.adt.gom.types.Hookkind tom_make_KindMakeHook() { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookkind_KindMakeHook(); }private  tom.gom.adt.gom.types.Production tom_get_implementation_Production( tom.gom.adt.gom.types.Production t) {  return t ;}private  tom.gom.adt.gom.types.Production tom_set_stamp_Production( tom.gom.adt.gom.types.Production t) {  return (tom.gom.adt.gom.types.Production)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Production( tom.gom.adt.gom.types.Production t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Production(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Hook( tom.gom.adt.gom.types.Production t) {  return  (t!= null) && t.isHook() ;}private  tom.gom.adt.gom.types.Production tom_make_Hook( String  t0,  tom.gom.adt.gom.types.Hookkind t1,  tom.gom.adt.gom.types.ArgList t2,  String  t3) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProduction_Hook(t0, t1, t2, t3); }private  String  tom_get_slot_Hook_name( tom.gom.adt.gom.types.Production t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.Hookkind tom_get_slot_Hook_hookType( tom.gom.adt.gom.types.Production t) {  return  t.getHookType() ;}private  tom.gom.adt.gom.types.ArgList tom_get_slot_Hook_args( tom.gom.adt.gom.types.Production t) {  return  t.getArgs() ;}private  String  tom_get_slot_Hook_code( tom.gom.adt.gom.types.Production t) {  return  t.getCode() ;}private boolean tom_is_fun_sym_Production( tom.gom.adt.gom.types.Production t) {  return  (t!= null) && t.isProduction() ;}private  tom.gom.adt.gom.types.Production tom_make_Production( String  t0,  tom.gom.adt.gom.types.FieldList t1,  tom.gom.adt.gom.types.GomType t2) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProduction_Production(t0, t1, t2); }private  String  tom_get_slot_Production_name( tom.gom.adt.gom.types.Production t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.FieldList tom_get_slot_Production_domain( tom.gom.adt.gom.types.Production t) {  return  t.getDomain() ;}private  tom.gom.adt.gom.types.GomType tom_get_slot_Production_codomain( tom.gom.adt.gom.types.Production t) {  return  t.getCodomain() ;}private  tom.gom.adt.gom.types.Grammar tom_get_implementation_Grammar( tom.gom.adt.gom.types.Grammar t) {  return t ;}private  tom.gom.adt.gom.types.Grammar tom_set_stamp_Grammar( tom.gom.adt.gom.types.Grammar t) {  return (tom.gom.adt.gom.types.Grammar)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Grammar( tom.gom.adt.gom.types.Grammar t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Grammar(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Sorts( tom.gom.adt.gom.types.Grammar t) {  return  (t!= null) && t.isSorts() ;}private  tom.gom.adt.gom.types.Grammar tom_make_Sorts( tom.gom.adt.gom.types.GomTypeList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammar_Sorts(t0); }private  tom.gom.adt.gom.types.GomTypeList tom_get_slot_Sorts_typeList( tom.gom.adt.gom.types.Grammar t) {  return  t.getTypeList() ;}private boolean tom_is_fun_sym_Grammar( tom.gom.adt.gom.types.Grammar t) {  return  (t!= null) && t.isGrammar() ;}private  tom.gom.adt.gom.types.Grammar tom_make_Grammar( tom.gom.adt.gom.types.ProductionList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammar_Grammar(t0); }private  tom.gom.adt.gom.types.ProductionList tom_get_slot_Grammar_productionList( tom.gom.adt.gom.types.Grammar t) {  return  t.getProductionList() ;}private  tom.gom.adt.gom.types.ImportedModule tom_get_implementation_ImportedModule( tom.gom.adt.gom.types.ImportedModule t) {  return t ;}private  tom.gom.adt.gom.types.ImportedModule tom_set_stamp_ImportedModule( tom.gom.adt.gom.types.ImportedModule t) {  return (tom.gom.adt.gom.types.ImportedModule)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ImportedModule( tom.gom.adt.gom.types.ImportedModule t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ImportedModule(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Import( tom.gom.adt.gom.types.ImportedModule t) {  return  (t!= null) && t.isImport() ;}private  tom.gom.adt.gom.types.ImportedModule tom_make_Import( tom.gom.adt.gom.types.GomModuleName t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportedModule_Import(t0); }private  tom.gom.adt.gom.types.GomModuleName tom_get_slot_Import_moduleName( tom.gom.adt.gom.types.ImportedModule t) {  return  t.getModuleName() ;}private  tom.gom.adt.gom.types.Section tom_get_implementation_Section( tom.gom.adt.gom.types.Section t) {  return t ;}private  tom.gom.adt.gom.types.Section tom_set_stamp_Section( tom.gom.adt.gom.types.Section t) {  return (tom.gom.adt.gom.types.Section)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Section( tom.gom.adt.gom.types.Section t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Section(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Public( tom.gom.adt.gom.types.Section t) {  return  (t!= null) && t.isPublic() ;}private  tom.gom.adt.gom.types.Section tom_make_Public( tom.gom.adt.gom.types.GrammarList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSection_Public(t0); }private  tom.gom.adt.gom.types.GrammarList tom_get_slot_Public_grammarList( tom.gom.adt.gom.types.Section t) {  return  t.getGrammarList() ;}private boolean tom_is_fun_sym_Imports( tom.gom.adt.gom.types.Section t) {  return  (t!= null) && t.isImports() ;}private  tom.gom.adt.gom.types.Section tom_make_Imports( tom.gom.adt.gom.types.ImportList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSection_Imports(t0); }private  tom.gom.adt.gom.types.ImportList tom_get_slot_Imports_importList( tom.gom.adt.gom.types.Section t) {  return  t.getImportList() ;}private  tom.gom.adt.gom.types.GomModule tom_get_implementation_GomModule( tom.gom.adt.gom.types.GomModule t) {  return t ;}private  tom.gom.adt.gom.types.GomModule tom_set_stamp_GomModule( tom.gom.adt.gom.types.GomModule t) {  return (tom.gom.adt.gom.types.GomModule)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomModule( tom.gom.adt.gom.types.GomModule t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomModule(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_GomModule( tom.gom.adt.gom.types.GomModule t) {  return  (t!= null) && t.isGomModule() ;}private  tom.gom.adt.gom.types.GomModule tom_make_GomModule( tom.gom.adt.gom.types.GomModuleName t0,  tom.gom.adt.gom.types.SectionList t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModule_GomModule(t0, t1); }private  tom.gom.adt.gom.types.GomModuleName tom_get_slot_GomModule_moduleName( tom.gom.adt.gom.types.GomModule t) {  return  t.getModuleName() ;}private  tom.gom.adt.gom.types.SectionList tom_get_slot_GomModule_sectionList( tom.gom.adt.gom.types.GomModule t) {  return  t.getSectionList() ;}  /* Generated by TOM (version 2.3rc0): Do not edit this file */private  tom.gom.adt.objects.types.HookList tom_get_implementation_HookList( tom.gom.adt.objects.types.HookList t) {  return t ;}private  tom.gom.adt.objects.types.HookList tom_set_stamp_HookList( tom.gom.adt.objects.types.HookList t) {  return (tom.gom.adt.objects.types.HookList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_HookList( tom.gom.adt.objects.types.HookList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_HookList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concHook( tom.gom.adt.objects.types.HookList t) {  return (t!= null) && t.isSortHookList() ;}private  tom.gom.adt.objects.types.HookList tom_empty_list_concHook() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookList(); }private  tom.gom.adt.objects.types.HookList tom_cons_list_concHook( tom.gom.adt.objects.types.Hook e,  tom.gom.adt.objects.types.HookList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookList(e,l); }private  tom.gom.adt.objects.types.Hook tom_get_head_concHook_HookList( tom.gom.adt.objects.types.HookList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.HookList tom_get_tail_concHook_HookList( tom.gom.adt.objects.types.HookList l) {  return l.getTail() ;}private boolean tom_is_empty_concHook_HookList( tom.gom.adt.objects.types.HookList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.HookList tom_append_list_concHook( tom.gom.adt.objects.types.HookList l1,  tom.gom.adt.objects.types.HookList l2) {    if(tom_is_empty_concHook_HookList(l1)) {     return l2;    } else if(tom_is_empty_concHook_HookList(l2)) {     return l1;    } else if(tom_is_empty_concHook_HookList(( tom.gom.adt.objects.types.HookList)tom_get_tail_concHook_HookList(l1))) {     return ( tom.gom.adt.objects.types.HookList)tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook)tom_get_head_concHook_HookList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.HookList)tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook)tom_get_head_concHook_HookList(l1),tom_append_list_concHook(( tom.gom.adt.objects.types.HookList)tom_get_tail_concHook_HookList(l1),l2));    }   }  private  tom.gom.adt.objects.types.HookList tom_get_slice_concHook( tom.gom.adt.objects.types.HookList begin,  tom.gom.adt.objects.types.HookList end) {    if(tom_terms_equal_HookList(begin,end)) {      return ( tom.gom.adt.objects.types.HookList)tom_empty_list_concHook();    } else {      return ( tom.gom.adt.objects.types.HookList)tom_cons_list_concHook(( tom.gom.adt.objects.types.Hook)tom_get_head_concHook_HookList(begin),( tom.gom.adt.objects.types.HookList)tom_get_slice_concHook(( tom.gom.adt.objects.types.HookList)tom_get_tail_concHook_HookList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyHookList( tom.gom.adt.objects.types.HookList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.HookList tom_make_emptyHookList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookList(); }private boolean tom_is_fun_sym_manyHookList( tom.gom.adt.objects.types.HookList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.HookList tom_make_manyHookList( tom.gom.adt.objects.types.Hook e,  tom.gom.adt.objects.types.HookList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHookList(e,l); }private  tom.gom.adt.objects.types.Hook tom_get_slot_manyHookList_head( tom.gom.adt.objects.types.HookList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.HookList tom_get_slot_manyHookList_tail( tom.gom.adt.objects.types.HookList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_implementation_GomClassList( tom.gom.adt.objects.types.GomClassList t) {  return t ;}private  tom.gom.adt.objects.types.GomClassList tom_set_stamp_GomClassList( tom.gom.adt.objects.types.GomClassList t) {  return (tom.gom.adt.objects.types.GomClassList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomClassList( tom.gom.adt.objects.types.GomClassList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomClassList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGomClass( tom.gom.adt.objects.types.GomClassList t) {  return (t!= null) && t.isSortGomClassList() ;}private  tom.gom.adt.objects.types.GomClassList tom_empty_list_concGomClass() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(); }private  tom.gom.adt.objects.types.GomClassList tom_cons_list_concGomClass( tom.gom.adt.objects.types.GomClass e,  tom.gom.adt.objects.types.GomClassList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(e,l); }private  tom.gom.adt.objects.types.GomClass tom_get_head_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_tail_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.getTail() ;}private boolean tom_is_empty_concGomClass_GomClassList( tom.gom.adt.objects.types.GomClassList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.GomClassList tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList l2) {    if(tom_is_empty_concGomClass_GomClassList(l1)) {     return l2;    } else if(tom_is_empty_concGomClass_GomClassList(l2)) {     return l1;    } else if(tom_is_empty_concGomClass_GomClassList(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(l1))) {     return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(l1),tom_append_list_concGomClass(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(l1),l2));    }   }  private  tom.gom.adt.objects.types.GomClassList tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList begin,  tom.gom.adt.objects.types.GomClassList end) {    if(tom_terms_equal_GomClassList(begin,end)) {      return ( tom.gom.adt.objects.types.GomClassList)tom_empty_list_concGomClass();    } else {      return ( tom.gom.adt.objects.types.GomClassList)tom_cons_list_concGomClass(( tom.gom.adt.objects.types.GomClass)tom_get_head_concGomClass_GomClassList(begin),( tom.gom.adt.objects.types.GomClassList)tom_get_slice_concGomClass(( tom.gom.adt.objects.types.GomClassList)tom_get_tail_concGomClass_GomClassList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGomClassList( tom.gom.adt.objects.types.GomClassList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.GomClassList tom_make_emptyGomClassList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(); }private boolean tom_is_fun_sym_manyGomClassList( tom.gom.adt.objects.types.GomClassList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.GomClassList tom_make_manyGomClassList( tom.gom.adt.objects.types.GomClass e,  tom.gom.adt.objects.types.GomClassList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClassList(e,l); }private  tom.gom.adt.objects.types.GomClass tom_get_slot_manyGomClassList_head( tom.gom.adt.objects.types.GomClassList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_manyGomClassList_tail( tom.gom.adt.objects.types.GomClassList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.Hook tom_get_implementation_Hook( tom.gom.adt.objects.types.Hook t) {  return t ;}private  tom.gom.adt.objects.types.Hook tom_set_stamp_Hook( tom.gom.adt.objects.types.Hook t) {  return (tom.gom.adt.objects.types.Hook)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Hook( tom.gom.adt.objects.types.Hook t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Hook(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_MakeBeforeHook( tom.gom.adt.objects.types.Hook t) {  return  (t!= null) && t.isMakeBeforeHook() ;}private  tom.gom.adt.objects.types.Hook tom_make_MakeBeforeHook( tom.gom.adt.objects.types.SlotFieldList t0,  String  t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHook_MakeBeforeHook(t0, t1); }private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_MakeBeforeHook_hookArguments( tom.gom.adt.objects.types.Hook t) {  return  t.getHookArguments() ;}private  String  tom_get_slot_MakeBeforeHook_code( tom.gom.adt.objects.types.Hook t) {  return  t.getCode() ;}private boolean tom_is_fun_sym_MakeHook( tom.gom.adt.objects.types.Hook t) {  return  (t!= null) && t.isMakeHook() ;}private  tom.gom.adt.objects.types.Hook tom_make_MakeHook( tom.gom.adt.objects.types.SlotFieldList t0,  String  t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeHook_MakeHook(t0, t1); }private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_MakeHook_hookArguments( tom.gom.adt.objects.types.Hook t) {  return  t.getHookArguments() ;}private  String  tom_get_slot_MakeHook_code( tom.gom.adt.objects.types.Hook t) {  return  t.getCode() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_implementation_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return t ;}private  tom.gom.adt.objects.types.SlotFieldList tom_set_stamp_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return (tom.gom.adt.objects.types.SlotFieldList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotFieldList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSlotField( tom.gom.adt.objects.types.SlotFieldList t) {  return (t!= null) && t.isSortSlotFieldList() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_empty_list_concSlotField() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(); }private  tom.gom.adt.objects.types.SlotFieldList tom_cons_list_concSlotField( tom.gom.adt.objects.types.SlotField e,  tom.gom.adt.objects.types.SlotFieldList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(e,l); }private  tom.gom.adt.objects.types.SlotField tom_get_head_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_tail_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.getTail() ;}private boolean tom_is_empty_concSlotField_SlotFieldList( tom.gom.adt.objects.types.SlotFieldList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList l1,  tom.gom.adt.objects.types.SlotFieldList l2) {    if(tom_is_empty_concSlotField_SlotFieldList(l1)) {     return l2;    } else if(tom_is_empty_concSlotField_SlotFieldList(l2)) {     return l1;    } else if(tom_is_empty_concSlotField_SlotFieldList(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(l1))) {     return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(l1),tom_append_list_concSlotField(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(l1),l2));    }   }  private  tom.gom.adt.objects.types.SlotFieldList tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList begin,  tom.gom.adt.objects.types.SlotFieldList end) {    if(tom_terms_equal_SlotFieldList(begin,end)) {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_empty_list_concSlotField();    } else {      return ( tom.gom.adt.objects.types.SlotFieldList)tom_cons_list_concSlotField(( tom.gom.adt.objects.types.SlotField)tom_get_head_concSlotField_SlotFieldList(begin),( tom.gom.adt.objects.types.SlotFieldList)tom_get_slice_concSlotField(( tom.gom.adt.objects.types.SlotFieldList)tom_get_tail_concSlotField_SlotFieldList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_make_emptySlotFieldList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(); }private boolean tom_is_fun_sym_manySlotFieldList( tom.gom.adt.objects.types.SlotFieldList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_make_manySlotFieldList( tom.gom.adt.objects.types.SlotField e,  tom.gom.adt.objects.types.SlotFieldList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotFieldList(e,l); }private  tom.gom.adt.objects.types.SlotField tom_get_slot_manySlotFieldList_head( tom.gom.adt.objects.types.SlotFieldList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_manySlotFieldList_tail( tom.gom.adt.objects.types.SlotFieldList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.SlotField tom_get_implementation_SlotField( tom.gom.adt.objects.types.SlotField t) {  return t ;}private  tom.gom.adt.objects.types.SlotField tom_set_stamp_SlotField( tom.gom.adt.objects.types.SlotField t) {  return (tom.gom.adt.objects.types.SlotField)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotField( tom.gom.adt.objects.types.SlotField t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotField(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_SlotField( tom.gom.adt.objects.types.SlotField t) {  return  (t!= null) && t.isSlotField() ;}private  tom.gom.adt.objects.types.SlotField tom_make_SlotField( String  t0,  tom.gom.adt.objects.types.ClassName t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotField_SlotField(t0, t1); }private  String  tom_get_slot_SlotField_name( tom.gom.adt.objects.types.SlotField t) {  return  t.getName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SlotField_domain( tom.gom.adt.objects.types.SlotField t) {  return  t.getDomain() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_implementation_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return t ;}private  tom.gom.adt.objects.types.ClassNameList tom_set_stamp_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return (tom.gom.adt.objects.types.ClassNameList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ClassNameList( tom.gom.adt.objects.types.ClassNameList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ClassNameList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concClassName( tom.gom.adt.objects.types.ClassNameList t) {  return (t!= null) && t.isSortClassNameList() ;}private  tom.gom.adt.objects.types.ClassNameList tom_empty_list_concClassName() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(); }private  tom.gom.adt.objects.types.ClassNameList tom_cons_list_concClassName( tom.gom.adt.objects.types.ClassName e,  tom.gom.adt.objects.types.ClassNameList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(e,l); }private  tom.gom.adt.objects.types.ClassName tom_get_head_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.getHead() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_tail_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.getTail() ;}private boolean tom_is_empty_concClassName_ClassNameList( tom.gom.adt.objects.types.ClassNameList l) {  return l.isEmpty() ;}private  tom.gom.adt.objects.types.ClassNameList tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList l2) {    if(tom_is_empty_concClassName_ClassNameList(l1)) {     return l2;    } else if(tom_is_empty_concClassName_ClassNameList(l2)) {     return l1;    } else if(tom_is_empty_concClassName_ClassNameList(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(l1))) {     return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(l1),l2);    } else {      return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(l1),tom_append_list_concClassName(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(l1),l2));    }   }  private  tom.gom.adt.objects.types.ClassNameList tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList begin,  tom.gom.adt.objects.types.ClassNameList end) {    if(tom_terms_equal_ClassNameList(begin,end)) {      return ( tom.gom.adt.objects.types.ClassNameList)tom_empty_list_concClassName();    } else {      return ( tom.gom.adt.objects.types.ClassNameList)tom_cons_list_concClassName(( tom.gom.adt.objects.types.ClassName)tom_get_head_concClassName_ClassNameList(begin),( tom.gom.adt.objects.types.ClassNameList)tom_get_slice_concClassName(( tom.gom.adt.objects.types.ClassNameList)tom_get_tail_concClassName_ClassNameList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.objects.types.ClassNameList tom_make_emptyClassNameList() { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(); }private boolean tom_is_fun_sym_manyClassNameList( tom.gom.adt.objects.types.ClassNameList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.objects.types.ClassNameList tom_make_manyClassNameList( tom.gom.adt.objects.types.ClassName e,  tom.gom.adt.objects.types.ClassNameList l) { return tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassNameList(e,l); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_manyClassNameList_head( tom.gom.adt.objects.types.ClassNameList t) {  return  t.getHead() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_manyClassNameList_tail( tom.gom.adt.objects.types.ClassNameList t) {  return  t.getTail() ;}private  tom.gom.adt.objects.types.ClassName tom_get_implementation_ClassName( tom.gom.adt.objects.types.ClassName t) {  return t ;}private  tom.gom.adt.objects.types.ClassName tom_set_stamp_ClassName( tom.gom.adt.objects.types.ClassName t) {  return (tom.gom.adt.objects.types.ClassName)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ClassName( tom.gom.adt.objects.types.ClassName t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ClassName(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_ClassName( tom.gom.adt.objects.types.ClassName t) {  return  (t!= null) && t.isClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_make_ClassName( String  t0,  String  t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeClassName_ClassName(t0, t1); }private  String  tom_get_slot_ClassName_pkg( tom.gom.adt.objects.types.ClassName t) {  return  t.getPkg() ;}private  String  tom_get_slot_ClassName_name( tom.gom.adt.objects.types.ClassName t) {  return  t.getName() ;}private  tom.gom.adt.objects.types.GomClass tom_get_implementation_GomClass( tom.gom.adt.objects.types.GomClass t) {  return t ;}private  tom.gom.adt.objects.types.GomClass tom_set_stamp_GomClass( tom.gom.adt.objects.types.GomClass t) {  return (tom.gom.adt.objects.types.GomClass)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomClass( tom.gom.adt.objects.types.GomClass t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomClass(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_TomMapping( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isTomMapping() ;}private  tom.gom.adt.objects.types.GomClass tom_make_TomMapping( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.GomClassList t2,  tom.gom.adt.objects.types.GomClassList t3) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_TomMapping(t0, t1, t2, t3); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_TomMapping_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_TomMapping_basicStrategy( tom.gom.adt.objects.types.GomClass t) {  return  t.getBasicStrategy() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_TomMapping_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_TomMapping_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_FwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_FwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassNameList t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassNameList t4,  tom.gom.adt.objects.types.GomClassList t5,  tom.gom.adt.objects.types.GomClassList t6) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_FwdClass(t0, t1, t2, t3, t4, t5, t6); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_FwdClass_importedVisitors( tom.gom.adt.objects.types.GomClass t) {  return  t.getImportedVisitors() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_FwdClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_FwdClass_importedAbstractTypes( tom.gom.adt.objects.types.GomClass t) {  return  t.getImportedAbstractTypes() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FwdClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_FwdClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VisitorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVisitorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VisitorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClassList t1,  tom.gom.adt.objects.types.GomClassList t2) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VisitorClass(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VisitorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VisitorClass_sortClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortClasses() ;}private  tom.gom.adt.objects.types.GomClassList tom_get_slot_VisitorClass_operatorClasses( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperatorClasses() ;}private boolean tom_is_fun_sym_VariadicOperatorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVariadicOperatorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VariadicOperatorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassName t4,  tom.gom.adt.objects.types.SlotFieldList t5,  tom.gom.adt.objects.types.ClassName t6,  String  t7,  tom.gom.adt.objects.types.HookList t8) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VariadicOperatorClass(t0, t1, t2, t3, t4, t5, t6, t7, t8); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_mapping( tom.gom.adt.objects.types.GomClass t) {  return  t.getMapping() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_sortName( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_VariadicOperatorClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_VariadicOperatorClass_empty( tom.gom.adt.objects.types.GomClass t) {  return  t.getEmpty() ;}private  String  tom_get_slot_VariadicOperatorClass_operator( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperator() ;}private  tom.gom.adt.objects.types.HookList tom_get_slot_VariadicOperatorClass_hooks( tom.gom.adt.objects.types.GomClass t) {  return  t.getHooks() ;}private boolean tom_is_fun_sym_OperatorClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isOperatorClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_OperatorClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassName t4,  tom.gom.adt.objects.types.SlotFieldList t5,  tom.gom.adt.objects.types.HookList t6) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_OperatorClass(t0, t1, t2, t3, t4, t5, t6); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_mapping( tom.gom.adt.objects.types.GomClass t) {  return  t.getMapping() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_sortName( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_OperatorClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_OperatorClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private  tom.gom.adt.objects.types.HookList tom_get_slot_OperatorClass_hooks( tom.gom.adt.objects.types.GomClass t) {  return  t.getHooks() ;}private boolean tom_is_fun_sym_SortClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isSortClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_SortClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassName t2,  tom.gom.adt.objects.types.ClassName t3,  tom.gom.adt.objects.types.ClassNameList t4,  tom.gom.adt.objects.types.SlotFieldList t5) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_SortClass(t0, t1, t2, t3, t4, t5); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_abstractType( tom.gom.adt.objects.types.GomClass t) {  return  t.getAbstractType() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_SortClass_forward( tom.gom.adt.objects.types.GomClass t) {  return  t.getForward() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_SortClass_operators( tom.gom.adt.objects.types.GomClass t) {  return  t.getOperators() ;}private  tom.gom.adt.objects.types.SlotFieldList tom_get_slot_SortClass_slots( tom.gom.adt.objects.types.GomClass t) {  return  t.getSlots() ;}private boolean tom_is_fun_sym_AbstractTypeClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isAbstractTypeClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_AbstractTypeClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.ClassName t1,  tom.gom.adt.objects.types.ClassNameList t2) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_AbstractTypeClass(t0, t1, t2); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.ClassName tom_get_slot_AbstractTypeClass_visitor( tom.gom.adt.objects.types.GomClass t) {  return  t.getVisitor() ;}private  tom.gom.adt.objects.types.ClassNameList tom_get_slot_AbstractTypeClass_sortList( tom.gom.adt.objects.types.GomClass t) {  return  t.getSortList() ;}private boolean tom_is_fun_sym_VisitableFwdClass( tom.gom.adt.objects.types.GomClass t) {  return  (t!= null) && t.isVisitableFwdClass() ;}private  tom.gom.adt.objects.types.GomClass tom_make_VisitableFwdClass( tom.gom.adt.objects.types.ClassName t0,  tom.gom.adt.objects.types.GomClass t1) { return  tom.gom.adt.objects.ObjectsFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomClass_VisitableFwdClass(t0, t1); }private  tom.gom.adt.objects.types.ClassName tom_get_slot_VisitableFwdClass_className( tom.gom.adt.objects.types.GomClass t) {  return  t.getClassName() ;}private  tom.gom.adt.objects.types.GomClass tom_get_slot_VisitableFwdClass_fwd( tom.gom.adt.objects.types.GomClass t) {  return  t.getFwd() ;}  /* Generated by TOM (version 2.3rc0): Do not edit this file */private boolean tom_terms_equal_VisitableVisitor(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_terms_equal_Visitable(Object t1, Object t2) {  return t1.equals(t2) ;}  /*  * basic operators  */    private boolean tom_is_fun_sym_Identity( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Identity)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private boolean tom_is_fun_sym_Fail( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Fail)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private boolean tom_is_fun_sym_Not( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Not)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Not( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.Not((jjtraveler.reflective.VisitableVisitor)v) ; }private boolean tom_is_fun_sym_Sequence( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Sequence)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) ; }private boolean tom_is_fun_sym_Choice( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Choice)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) ; }private boolean tom_is_fun_sym_All( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.All)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All((jjtraveler.reflective.VisitableVisitor)v) ; }private boolean tom_is_fun_sym_One( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.One)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_One( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.One((jjtraveler.reflective.VisitableVisitor)v) ; }private boolean tom_is_fun_sym_Some( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Some)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Some( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.Some((jjtraveler.reflective.VisitableVisitor)v) ; }private boolean tom_is_fun_sym_IfThenElse( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.IfThenElse)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_IfThenElse( jjtraveler.reflective.VisitableVisitor  condition,  jjtraveler.reflective.VisitableVisitor  trueCase,  jjtraveler.reflective.VisitableVisitor  falseCase) { return  new tom.library.strategy.mutraveler.IfThenElse((jjtraveler.reflective.VisitableVisitor)condition,(jjtraveler.reflective.VisitableVisitor)trueCase,(jjtraveler.reflective.VisitableVisitor)falseCase) ; }private boolean tom_is_fun_sym_MuVar( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.MuVar)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private boolean tom_is_fun_sym_mu( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }private boolean tom_is_fun_sym_Omega( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Omega)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Omega( int  pos,  jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.Omega(pos,(jjtraveler.reflective.VisitableVisitor)v) ; } /*  * basic operators with Id considered as a failure  */    private boolean tom_is_fun_sym_OneId( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.OneId)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_OneId( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.OneId((jjtraveler.reflective.VisitableVisitor)v) ; }private boolean tom_is_fun_sym_SequenceId( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.SequenceId)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_SequenceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.SequenceId((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) ; }private boolean tom_is_fun_sym_ChoiceId( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.ChoiceId)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_ChoiceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.ChoiceId((jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) ; }  /*  * basic probabilistic operators  */    private boolean tom_is_fun_sym_Pselect( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Pselect)  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Pselect( int  p,  int  q,  jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Pselect(p,q,(jjtraveler.reflective.VisitableVisitor)first,(jjtraveler.reflective.VisitableVisitor)then) ; } /*  * strategies  */    private boolean tom_is_fun_sym_Try( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Try( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private boolean tom_is_fun_sym_TopDown( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }private boolean tom_is_fun_sym_BottomUp( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_BottomUp( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("x")),v)) ; }private boolean tom_is_fun_sym_OnceBottomUp( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_OnceBottomUp( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_One(tom_make_MuVar("x")),v)) ; }private boolean tom_is_fun_sym_Innermost( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Innermost( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("x")),tom_make_Try(tom_make_Sequence(v,tom_make_MuVar("x"))))) ; }private boolean tom_is_fun_sym_Repeat( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_Repeat( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_Sequence(v,tom_make_MuVar("x")),tom_make_Identity())) ; }  /*  * strategies with Id considered as failure  */    private boolean tom_is_fun_sym_TryId( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_TryId( jjtraveler.reflective.VisitableVisitor  v) { return  v ; }private boolean tom_is_fun_sym_RepeatId( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_RepeatId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_SequenceId(v,tom_make_MuVar("x"))) ; }private boolean tom_is_fun_sym_OnceBottomUpId( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_OnceBottomUpId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_OneId(tom_make_MuVar("x")),v)) ; }private boolean tom_is_fun_sym_OnceTopDownId( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_OnceTopDownId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(v,tom_make_OneId(tom_make_MuVar("x")))) ; }private boolean tom_is_fun_sym_InnermostId( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_InnermostId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("x")),tom_make_SequenceId(v,tom_make_MuVar("x")))) ; }private boolean tom_is_fun_sym_OutermostId( jjtraveler.reflective.VisitableVisitor  t) {  return  false  ;}private  jjtraveler.reflective.VisitableVisitor  tom_make_OutermostId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(tom_make_SequenceId(v,tom_make_MuVar("x")),tom_make_All(tom_make_MuVar("x")))) ; }  




  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  Map sortClassNameForSortDecl = environment().builtinSortClassMap();

  public GomClassList compile(SortList sortList) {
    GomClassList classList = tom_empty_list_concGomClass();

    Map abstractTypeNameForModule = new HashMap();
    Map visitorNameForModule = new HashMap();
    Map visitableForwardNameForModule = new HashMap();
    Map tomMappingNameForModule = new HashMap();
    Map sortGomClassForSortDecl = new HashMap();
    Map classForOperatorDecl = new HashMap();
    /* For each module */
    Iterator it = getModuleDeclSet(sortList).iterator();
    while(it.hasNext()) {
      ModuleDecl moduleDecl = (ModuleDecl) it.next();
      String moduleName = moduleDecl.getModuleName().getName();

      /* create an AbstractType class */
      ClassName abstractTypeName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"AbstractType")

;

      ClassName visitorName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"Visitor");
      visitorNameForModule.put(moduleDecl,visitorName);

      ClassName visitablefwdName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"BasicStrategy");
      visitableForwardNameForModule.put(moduleDecl,visitablefwdName);

      ClassName tomMappingName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName);
      tomMappingNameForModule.put(moduleDecl,tomMappingName);

      abstractTypeNameForModule.put(moduleDecl,abstractTypeName);

    }

    /* For each sort, create a sort implementation, and operator implementations
       (we don't need to do that per module, since each operator and sort knows
       to which module it belongs) */
    SortList consum = sortList;
    while(!consum.isEmpty()) {
      Sort sort = consum.getHead();
      consum=consum.getTail();
      // get the class name for the sort
       if(sort instanceof  tom.gom.adt.gom.types.Sort) { { tom.gom.adt.gom.types.Sort tom_match1_1=(( tom.gom.adt.gom.types.Sort)sort); if(tom_is_fun_sym_Sort(tom_match1_1) ||  false ) { { tom.gom.adt.gom.types.SortDecl tom_match1_1_decl=tom_get_slot_Sort_decl(tom_match1_1); if(tom_is_fun_sym_SortDecl(tom_match1_1_decl) ||  false ) { { String  tom_match1_1_decl_name=tom_get_slot_SortDecl_name(tom_match1_1_decl); { tom.gom.adt.gom.types.ModuleDecl tom_match1_1_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match1_1_decl); if( true ) {

          ClassName sortClassName = tom_make_ClassName(packagePrefix(tom_match1_1_decl_moduleDecl)+".types",tom_match1_1_decl_name);
          sortClassNameForSortDecl.put(tom_match1_1_decl,sortClassName);
         }}} }} }} }

    }
    consum = sortList;
    while(!consum.isEmpty()) {
      Sort sort = consum.getHead();
      consum=consum.getTail();
      // get the class name for the sort
       if(sort instanceof  tom.gom.adt.gom.types.Sort) { { tom.gom.adt.gom.types.Sort tom_match2_1=(( tom.gom.adt.gom.types.Sort)sort); if(tom_is_fun_sym_Sort(tom_match2_1) ||  false ) { { tom.gom.adt.gom.types.SortDecl tom_match2_1_decl=tom_get_slot_Sort_decl(tom_match2_1); { tom.gom.adt.gom.types.OperatorDeclList tom_match2_1_operators=tom_get_slot_Sort_operators(tom_match2_1); if(tom_is_fun_sym_SortDecl(tom_match2_1_decl) ||  false ) { { tom.gom.adt.gom.types.SortDecl tom_sortDecl=tom_match2_1_decl; { tom.gom.adt.gom.types.ModuleDecl tom_match2_1_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match2_1_decl); { tom.gom.adt.gom.types.ModuleDecl tom_moduleDecl=tom_match2_1_decl_moduleDecl; { tom.gom.adt.gom.types.OperatorDeclList tom_oplist=tom_match2_1_operators; if( true ) {

          ClassName sortClassName = (ClassName)sortClassNameForSortDecl.get(tom_sortDecl);
          ClassName abstracttypeName = (ClassName)abstractTypeNameForModule.get(tom_moduleDecl);
          ClassName visitorName = (ClassName)visitorNameForModule.get(tom_moduleDecl);
          ClassName visitableforwardName = (ClassName)visitableForwardNameForModule.get(tom_moduleDecl);
          ClassName mappingName = (ClassName)tomMappingNameForModule.get(tom_moduleDecl);

          // create operator classes. Also, store a list of all operators for the sort class
          // use a Set to collect slots and avoid duplicates
          Set allSortSlots = new HashSet();
          ClassNameList allOperators = tom_empty_list_concClassName();
           if(tom_oplist instanceof  tom.gom.adt.gom.types.OperatorDeclList) { { tom.gom.adt.gom.types.OperatorDeclList tom_match3_1=(( tom.gom.adt.gom.types.OperatorDeclList)tom_oplist); if(tom_is_fun_sym_concOperator(tom_match3_1) ||  false ) { { tom.gom.adt.gom.types.OperatorDeclList tom_match3_1_list1=tom_match3_1; { tom.gom.adt.gom.types.OperatorDeclList tom_match3_1_begin1=tom_match3_1_list1; { tom.gom.adt.gom.types.OperatorDeclList tom_match3_1_end1=tom_match3_1_list1;{ while (!(tom_is_empty_concOperator_OperatorDeclList(tom_match3_1_end1))) {tom_match3_1_list1=tom_match3_1_end1;{ { tom.gom.adt.gom.types.OperatorDecl tom_match3_1_2=tom_get_head_concOperator_OperatorDeclList(tom_match3_1_list1);tom_match3_1_list1=tom_get_tail_concOperator_OperatorDeclList(tom_match3_1_list1); if(tom_is_fun_sym_OperatorDecl(tom_match3_1_2) ||  false ) { { tom.gom.adt.gom.types.OperatorDecl tom_opdecl=tom_match3_1_2; { String  tom_match3_1_2_name=tom_get_slot_OperatorDecl_name(tom_match3_1_2); { tom.gom.adt.gom.types.SortDecl tom_match3_1_2_sort=tom_get_slot_OperatorDecl_sort(tom_match3_1_2); { tom.gom.adt.gom.types.TypedProduction tom_match3_1_2_prod=tom_get_slot_OperatorDecl_prod(tom_match3_1_2); { tom.gom.adt.gom.types.HookDeclList tom_match3_1_2_hooks=tom_get_slot_OperatorDecl_hooks(tom_match3_1_2); { String  tom_opname=tom_match3_1_2_name; if(tom_is_fun_sym_SortDecl(tom_match3_1_2_sort) ||  false ) { { String  tom_match3_1_2_sort_name=tom_get_slot_SortDecl_name(tom_match3_1_2_sort); { tom.gom.adt.gom.types.TypedProduction tom_typedproduction=tom_match3_1_2_prod; if( true ) {






              String sortNamePackage = tom_match3_1_2_sort_name.toLowerCase();
              ClassName operatorClassName = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage,tom_opname);
              SlotFieldList slots = tom_empty_list_concSlotField();
              ClassName empty = null;
               if(tom_typedproduction instanceof  tom.gom.adt.gom.types.TypedProduction) { { tom.gom.adt.gom.types.TypedProduction tom_match4_1=(( tom.gom.adt.gom.types.TypedProduction)tom_typedproduction); if(tom_is_fun_sym_Variadic(tom_match4_1) ||  false ) { { tom.gom.adt.gom.types.SortDecl tom_match4_1_sort=tom_get_slot_Variadic_sort(tom_match4_1); if( true ) {

                  ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tom_match4_1_sort);
                  SlotField slotHead = tom_make_SlotField("Head"+tom_opname,clsName);
                  SlotField slotTail = tom_make_SlotField("Tail"+tom_opname,sortClassName);
                  allSortSlots.add(slotHead);
                  allSortSlots.add(slotTail);
                  slots = tom_cons_list_concSlotField(slotHead,tom_cons_list_concSlotField(slotTail,tom_empty_list_concSlotField()));
                  // as the operator is variadic, add a Cons and an Empty
                  empty = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage,"Empty"+tom_opname);
                  operatorClassName = tom_make_ClassName(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage,"Cons"+tom_opname);

                  allOperators = tom_cons_list_concClassName(empty,tom_append_list_concClassName(allOperators,tom_empty_list_concClassName()));
                  GomClass emptyClass = tom_make_OperatorClass(empty,abstracttypeName,mappingName,sortClassName,visitorName,tom_empty_list_concSlotField(),tom_empty_list_concHook());
                  classForOperatorDecl.put(tom_opdecl,emptyClass);
                  classList = tom_cons_list_concGomClass(emptyClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));
                 }} } if(tom_is_fun_sym_Slots(tom_match4_1) ||  false ) { { tom.gom.adt.gom.types.SlotList tom_match4_1_slots=tom_get_slot_Slots_slots(tom_match4_1); if(tom_is_fun_sym_concSlot(tom_match4_1_slots) ||  false ) { { tom.gom.adt.gom.types.SlotList tom_match4_1_slots_list1=tom_match4_1_slots; { tom.gom.adt.gom.types.SlotList tom_match4_1_slots_begin1=tom_match4_1_slots_list1; { tom.gom.adt.gom.types.SlotList tom_match4_1_slots_end1=tom_match4_1_slots_list1;{ while (!(tom_is_empty_concSlot_SlotList(tom_match4_1_slots_end1))) {tom_match4_1_slots_list1=tom_match4_1_slots_end1;{ { tom.gom.adt.gom.types.Slot tom_match4_1_slots_2=tom_get_head_concSlot_SlotList(tom_match4_1_slots_list1);tom_match4_1_slots_list1=tom_get_tail_concSlot_SlotList(tom_match4_1_slots_list1); if(tom_is_fun_sym_Slot(tom_match4_1_slots_2) ||  false ) { { String  tom_match4_1_slots_2_name=tom_get_slot_Slot_name(tom_match4_1_slots_2); { tom.gom.adt.gom.types.SortDecl tom_match4_1_slots_2_sort=tom_get_slot_Slot_sort(tom_match4_1_slots_2); if( true ) {

                  ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tom_match4_1_slots_2_sort);
                  SlotField slotfield = tom_make_SlotField(tom_match4_1_slots_2_name,clsName);
                  allSortSlots.add(slotfield);
                  slots = tom_append_list_concSlotField(slots,tom_cons_list_concSlotField(slotfield,tom_empty_list_concSlotField()));
                 }}} }}tom_match4_1_slots_end1=tom_get_tail_concSlot_SlotList(tom_match4_1_slots_end1);} }tom_match4_1_slots_list1=tom_match4_1_slots_begin1;}}}} }} }} }

              GomClass operatorClass;
              allOperators = tom_cons_list_concClassName(operatorClassName,tom_append_list_concClassName(allOperators,tom_empty_list_concClassName()));
              HookList operatorHooks = makeHooksFromHookDecls(tom_match3_1_2_hooks);
              if (empty!= null) { // We just processed a variadic operator
                operatorClass = tom_make_VariadicOperatorClass(operatorClassName,abstracttypeName,mappingName,sortClassName,visitorName,slots,empty,tom_opname,operatorHooks)





;
              } else {
                operatorClass = tom_make_OperatorClass(operatorClassName,abstracttypeName,mappingName,sortClassName,visitorName,slots,operatorHooks)




;
              }
              classForOperatorDecl.put(tom_opdecl,operatorClass);
              classList = tom_cons_list_concGomClass(operatorClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));
             }}} }}}}}}} }}tom_match3_1_end1=tom_get_tail_concOperator_OperatorDeclList(tom_match3_1_end1);} }tom_match3_1_list1=tom_match3_1_begin1;}}}} }} }

          // create the sort class and add it to the list
          GomClass sortClass = tom_make_SortClass(sortClassName,abstracttypeName,visitorName,visitableforwardName,allOperators,slotFieldListFromSet(allSortSlots))




;
          sortGomClassForSortDecl.put(tom_sortDecl,sortClass);
          classList = tom_cons_list_concGomClass(sortClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));
         }}}}} }}} }} }

    }

    it = getModuleDeclSet(sortList).iterator();
    while(it.hasNext()) {
      ModuleDecl moduleDecl = (ModuleDecl) it.next();
      String moduleName = moduleDecl.getModuleName().getName();

      GomClassList allOperatorClasses = tom_empty_list_concGomClass();
      GomClassList allSortClasses = tom_empty_list_concGomClass();
      ModuleDeclList modlist = environment().getModuleDependency(moduleDecl);
      while(!modlist.isEmpty()) {
        ModuleDecl imported = modlist.getHead();
        modlist = modlist.getTail();
        SortList moduleSorts = getSortForModule(imported,sortList);
        SortList sortconsum = moduleSorts;
        while(!sortconsum.isEmpty()) {
          Sort sort = sortconsum.getHead();
          sortconsum = sortconsum.getTail();
           if(sort instanceof  tom.gom.adt.gom.types.Sort) { { tom.gom.adt.gom.types.Sort tom_match5_1=(( tom.gom.adt.gom.types.Sort)sort); if(tom_is_fun_sym_Sort(tom_match5_1) ||  false ) { { tom.gom.adt.gom.types.SortDecl tom_match5_1_decl=tom_get_slot_Sort_decl(tom_match5_1); if( true ) {

              GomClass sortClass = (GomClass) sortGomClassForSortDecl.get(tom_match5_1_decl);
              allSortClasses = tom_cons_list_concGomClass(sortClass,tom_append_list_concGomClass(allSortClasses,tom_empty_list_concGomClass()));
             }} }} }

        }
         if(moduleSorts instanceof  tom.gom.adt.gom.types.SortList) { { tom.gom.adt.gom.types.SortList tom_match6_1=(( tom.gom.adt.gom.types.SortList)moduleSorts); if(tom_is_fun_sym_concSort(tom_match6_1) ||  false ) { { tom.gom.adt.gom.types.SortList tom_match6_1_list1=tom_match6_1; { tom.gom.adt.gom.types.SortList tom_match6_1_begin1=tom_match6_1_list1; { tom.gom.adt.gom.types.SortList tom_match6_1_end1=tom_match6_1_list1;{ while (!(tom_is_empty_concSort_SortList(tom_match6_1_end1))) {tom_match6_1_list1=tom_match6_1_end1;{ { tom.gom.adt.gom.types.Sort tom_match6_1_2=tom_get_head_concSort_SortList(tom_match6_1_list1);tom_match6_1_list1=tom_get_tail_concSort_SortList(tom_match6_1_list1); if(tom_is_fun_sym_Sort(tom_match6_1_2) ||  false ) { { tom.gom.adt.gom.types.OperatorDeclList tom_match6_1_2_operators=tom_get_slot_Sort_operators(tom_match6_1_2); if(tom_is_fun_sym_concOperator(tom_match6_1_2_operators) ||  false ) { { tom.gom.adt.gom.types.OperatorDeclList tom_match6_1_2_operators_list1=tom_match6_1_2_operators; { tom.gom.adt.gom.types.OperatorDeclList tom_match6_1_2_operators_begin1=tom_match6_1_2_operators_list1; { tom.gom.adt.gom.types.OperatorDeclList tom_match6_1_2_operators_end1=tom_match6_1_2_operators_list1;{ while (!(tom_is_empty_concOperator_OperatorDeclList(tom_match6_1_2_operators_end1))) {tom_match6_1_2_operators_list1=tom_match6_1_2_operators_end1;{ { tom.gom.adt.gom.types.OperatorDecl tom_opDecl=tom_get_head_concOperator_OperatorDeclList(tom_match6_1_2_operators_list1);tom_match6_1_2_operators_list1=tom_get_tail_concOperator_OperatorDeclList(tom_match6_1_2_operators_list1); if( true ) {

            GomClass opClass = (GomClass) classForOperatorDecl.get(tom_opDecl);
            allOperatorClasses = tom_cons_list_concGomClass(opClass,tom_append_list_concGomClass(allOperatorClasses,tom_empty_list_concGomClass()));
           }}tom_match6_1_2_operators_end1=tom_get_tail_concOperator_OperatorDeclList(tom_match6_1_2_operators_end1);} }tom_match6_1_2_operators_list1=tom_match6_1_2_operators_begin1;}}}} }} }}tom_match6_1_end1=tom_get_tail_concSort_SortList(tom_match6_1_end1);} }tom_match6_1_list1=tom_match6_1_begin1;}}}} }} }

      }

      ClassName abstractTypeClassName = (ClassName)abstractTypeNameForModule.get(moduleDecl);

      // late creation of the visitors, since it has to know all operators
      ClassName visitorName = (ClassName) visitorNameForModule.get(moduleDecl);
      GomClass visitorclass = tom_make_VisitorClass(visitorName,allSortClasses,allOperatorClasses);
      classList = tom_cons_list_concGomClass(visitorclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create a Fwd class */
      ClassNameList importedVisitors = allClassForImports(visitorNameForModule,moduleDecl);
      ClassName fwdName = tom_make_ClassName(packagePrefix(moduleDecl),moduleName+"Forward");
      ClassNameList importedAbstractType = allClassForImports(abstractTypeNameForModule,moduleDecl);
      GomClass fwdclass = tom_make_FwdClass(fwdName,visitorName,importedVisitors,abstractTypeClassName,importedAbstractType,allSortClasses,allOperatorClasses);
      classList = tom_cons_list_concGomClass(fwdclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create a VisitableFwd class */
      ClassName visitablefwdName = (ClassName) visitableForwardNameForModule.get(moduleDecl);
      GomClass visitablefwdclass = tom_make_VisitableFwdClass(visitablefwdName,fwdclass);
      classList = tom_cons_list_concGomClass(visitablefwdclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create the abstractType */
      ClassNameList classSortList = sortClassNames(sortList);
      ClassName abstractTypeName = (ClassName) abstractTypeNameForModule.get(moduleDecl);
      GomClass abstracttype = tom_make_AbstractTypeClass(abstractTypeName,visitorName,classSortList);
      classList = tom_cons_list_concGomClass(abstracttype,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

      /* create a TomMapping */
      ClassName tomMappingName = (ClassName) tomMappingNameForModule.get(moduleDecl);
      GomClass tommappingclass = tom_make_TomMapping(tomMappingName,visitablefwdName,allSortClasses,allOperatorClasses);
      classList = tom_cons_list_concGomClass(tommappingclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass()));

    }

    return classList;
  }

  private ClassNameList sortClassNames(SortList sortList) {
    ClassNameList classNames = tom_empty_list_concClassName();
     if(sortList instanceof  tom.gom.adt.gom.types.SortList) { { tom.gom.adt.gom.types.SortList tom_match7_1=(( tom.gom.adt.gom.types.SortList)sortList); if(tom_is_fun_sym_concSort(tom_match7_1) ||  false ) { { tom.gom.adt.gom.types.SortList tom_match7_1_list1=tom_match7_1; { tom.gom.adt.gom.types.SortList tom_match7_1_begin1=tom_match7_1_list1; { tom.gom.adt.gom.types.SortList tom_match7_1_end1=tom_match7_1_list1;{ while (!(tom_is_empty_concSort_SortList(tom_match7_1_end1))) {tom_match7_1_list1=tom_match7_1_end1;{ { tom.gom.adt.gom.types.Sort tom_match7_1_2=tom_get_head_concSort_SortList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concSort_SortList(tom_match7_1_list1); if(tom_is_fun_sym_Sort(tom_match7_1_2) ||  false ) { { tom.gom.adt.gom.types.SortDecl tom_match7_1_2_decl=tom_get_slot_Sort_decl(tom_match7_1_2); if(tom_is_fun_sym_SortDecl(tom_match7_1_2_decl) ||  false ) { { String  tom_match7_1_2_decl_name=tom_get_slot_SortDecl_name(tom_match7_1_2_decl); { tom.gom.adt.gom.types.ModuleDecl tom_match7_1_2_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match7_1_2_decl); if( true ) {



        classNames = tom_cons_list_concClassName(tom_make_ClassName(packagePrefix(tom_match7_1_2_decl_moduleDecl)+".types",tom_match7_1_2_decl_name),tom_append_list_concClassName(classNames,tom_empty_list_concClassName()));
       }}} }} }}tom_match7_1_end1=tom_get_tail_concSort_SortList(tom_match7_1_end1);} }tom_match7_1_list1=tom_match7_1_begin1;}}}} }} }

    return classNames;
  }

  private Collection getModuleDeclSet(SortList sortList) {
    class CollectModuleDecls extends GomVisitableFwd {
      Collection bag;
      CollectModuleDecls(Collection bag) {
        super(tom_make_Identity());
        this.bag = bag;
      }
      public ModuleDecl visit_ModuleDecl(ModuleDecl arg) {
        bag.add(arg);
        return arg;
      }
    }
    Collection res = new HashSet();
    try {
      VisitableVisitor getModule = new CollectModuleDecls(res);
      MuTraveler.init(tom_make_BottomUp(getModule)).visit(sortList);
    } catch (VisitFailure e) {
      throw new GomRuntimeException("Failed to get the set of module names");
    }
    return res;
  }

  /*
   * Get all sort definitions for a given module
   */
  Map mapModuleToSort = new HashMap();
  private SortList getSortForModule(ModuleDecl module, SortList sortList) {
    if (mapModuleToSort.containsKey(module)) {
      return (SortList)mapModuleToSort.get(module);
    } else {
      // Build the sort list for this module
      SortList sorts = tom_empty_list_concSort();
       if(sortList instanceof  tom.gom.adt.gom.types.SortList) { { tom.gom.adt.gom.types.SortList tom_match8_1=(( tom.gom.adt.gom.types.SortList)sortList); if(tom_is_fun_sym_concSort(tom_match8_1) ||  false ) { { tom.gom.adt.gom.types.SortList tom_match8_1_list1=tom_match8_1; { tom.gom.adt.gom.types.SortList tom_match8_1_begin1=tom_match8_1_list1; { tom.gom.adt.gom.types.SortList tom_match8_1_end1=tom_match8_1_list1;{ while (!(tom_is_empty_concSort_SortList(tom_match8_1_end1))) {tom_match8_1_list1=tom_match8_1_end1;{ { tom.gom.adt.gom.types.Sort tom_match8_1_2=tom_get_head_concSort_SortList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concSort_SortList(tom_match8_1_list1); if(tom_is_fun_sym_Sort(tom_match8_1_2) ||  false ) { { tom.gom.adt.gom.types.SortDecl tom_match8_1_2_decl=tom_get_slot_Sort_decl(tom_match8_1_2); if(tom_is_fun_sym_SortDecl(tom_match8_1_2_decl) ||  false ) { { tom.gom.adt.gom.types.ModuleDecl tom_match8_1_2_decl_moduleDecl=tom_get_slot_SortDecl_moduleDecl(tom_match8_1_2_decl); if( true ) {

          if (tom_match8_1_2_decl_moduleDecl.equals(module)) {
            sorts = tom_cons_list_concSort(tom_match8_1_2,tom_append_list_concSort(sorts,tom_empty_list_concSort()));
          }
         }} }} }}tom_match8_1_end1=tom_get_tail_concSort_SortList(tom_match8_1_end1);} }tom_match8_1_list1=tom_match8_1_begin1;}}}} }} }

      mapModuleToSort.put(module,sorts);
      return sorts;
    }
  }

  private String packagePrefix(ModuleDecl moduleDecl) {
    String pkgPrefix = "";
     if(moduleDecl instanceof  tom.gom.adt.gom.types.ModuleDecl) { { tom.gom.adt.gom.types.ModuleDecl tom_match9_1=(( tom.gom.adt.gom.types.ModuleDecl)moduleDecl); if(tom_is_fun_sym_ModuleDecl(tom_match9_1) ||  false ) { { tom.gom.adt.gom.types.GomModuleName tom_match9_1_moduleName=tom_get_slot_ModuleDecl_moduleName(tom_match9_1); { String  tom_match9_1_pkg=tom_get_slot_ModuleDecl_pkg(tom_match9_1); if(tom_is_fun_sym_GomModuleName(tom_match9_1_moduleName) ||  false ) { { String  tom_match9_1_moduleName_name=tom_get_slot_GomModuleName_name(tom_match9_1_moduleName); { String  tom_name=tom_match9_1_moduleName_name; { String  tom_pkgopt=tom_match9_1_pkg; if( true ) {

        if(!tom_pkgopt.equals("")) {
          pkgPrefix = tom_pkgopt+ "." + tom_name;
        } else {
          pkgPrefix = tom_name;
        }
       }}}} }}} }} }

    return pkgPrefix.toLowerCase();
  }

  private SlotFieldList slotFieldListFromSet(Set slotFieldSet) {
    Iterator it = slotFieldSet.iterator();
    SlotFieldList list = tom_empty_list_concSlotField();
    while(it.hasNext()) {
      SlotField slot = (SlotField) it.next();
      list = tom_append_list_concSlotField(list,tom_cons_list_concSlotField(slot,tom_empty_list_concSlotField()));
    }
    return list;
  }

  private HookList makeHooksFromHookDecls(HookDeclList declList) {
    HookList list = tom_empty_list_concHook();
     if(declList instanceof  tom.gom.adt.gom.types.HookDeclList) { { tom.gom.adt.gom.types.HookDeclList tom_match10_1=(( tom.gom.adt.gom.types.HookDeclList)declList); if(tom_is_fun_sym_concHookDecl(tom_match10_1) ||  false ) { { tom.gom.adt.gom.types.HookDeclList tom_match10_1_list1=tom_match10_1; { tom.gom.adt.gom.types.HookDeclList tom_match10_1_begin1=tom_match10_1_list1; { tom.gom.adt.gom.types.HookDeclList tom_match10_1_end1=tom_match10_1_list1;{ while (!(tom_is_empty_concHookDecl_HookDeclList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1;{ { tom.gom.adt.gom.types.HookDecl tom_hook=tom_get_head_concHookDecl_HookDeclList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concHookDecl_HookDeclList(tom_match10_1_list1); if( true ) {



        SlotFieldList newArgs = null;
        Hook newHook = null;
         if(tom_hook instanceof  tom.gom.adt.gom.types.HookDecl) { { tom.gom.adt.gom.types.HookDecl tom_match11_1=(( tom.gom.adt.gom.types.HookDecl)tom_hook); if(tom_is_fun_sym_MakeHookDecl(tom_match11_1) ||  false ) { { tom.gom.adt.gom.types.SlotList tom_match11_1_slotargs=tom_get_slot_MakeHookDecl_slotargs(tom_match11_1); { String  tom_match11_1_code=tom_get_slot_MakeHookDecl_code(tom_match11_1); if( true ) {

            newArgs = makeSlotFieldListFromSlotList(tom_match11_1_slotargs);
            newHook = tom_make_MakeHook(newArgs,tom_match11_1_code);
           }}} } if(tom_is_fun_sym_MakeBeforeHookDecl(tom_match11_1) ||  false ) { { tom.gom.adt.gom.types.SlotList tom_match11_1_slotargs=tom_get_slot_MakeBeforeHookDecl_slotargs(tom_match11_1); { String  tom_match11_1_code=tom_get_slot_MakeBeforeHookDecl_code(tom_match11_1); if( true ) {

            newArgs = makeSlotFieldListFromSlotList(tom_match11_1_slotargs);
            newHook = tom_make_MakeBeforeHook(newArgs,tom_match11_1_code);
           }}} }} }

        if (newHook == null || newArgs == null) {
          throw new GomRuntimeException("Hook declaration "+tom_hook+" not processed");
        }
        list = tom_append_list_concHook(list,tom_cons_list_concHook(newHook,tom_empty_list_concHook()));
       }}tom_match10_1_end1=tom_get_tail_concHookDecl_HookDeclList(tom_match10_1_end1);} }tom_match10_1_list1=tom_match10_1_begin1;}}}} }} }

    return list;
  }
  private SlotFieldList makeSlotFieldListFromSlotList(SlotList args) {
    SlotFieldList newArgs = tom_empty_list_concSlotField();
    while(!args.isEmpty()) {
      Slot arg = args.getHead();
      args = args.getTail();
       if(arg instanceof  tom.gom.adt.gom.types.Slot) { { tom.gom.adt.gom.types.Slot tom_match12_1=(( tom.gom.adt.gom.types.Slot)arg); if(tom_is_fun_sym_Slot(tom_match12_1) ||  false ) { { String  tom_match12_1_name=tom_get_slot_Slot_name(tom_match12_1); { tom.gom.adt.gom.types.SortDecl tom_match12_1_sort=tom_get_slot_Slot_sort(tom_match12_1); if( true ) {

          ClassName slotClassName = (ClassName) sortClassNameForSortDecl.get(tom_match12_1_sort);
          newArgs = tom_append_list_concSlotField(newArgs,tom_cons_list_concSlotField(tom_make_SlotField(tom_match12_1_name,slotClassName),tom_empty_list_concSlotField()));
         }}} }} }


    }
    return newArgs;
  }

  private ClassNameList allClassForImports(Map classMap, ModuleDecl moduleDecl) {
    ClassNameList importedList = tom_empty_list_concClassName();
    ModuleDeclList importedModulelist = environment().getModuleDependency(moduleDecl);
    while(!importedModulelist.isEmpty()) {
      ModuleDecl imported = importedModulelist.getHead();
      importedModulelist = importedModulelist.getTail();
      if (!imported.equals(moduleDecl)) {
        ClassName importedclass = (ClassName)classMap.get(imported);
        importedList = tom_cons_list_concClassName(importedclass,tom_append_list_concClassName(importedList,tom_empty_list_concClassName()));
      }
    }
    return importedList;
  }
}
