/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (c) 2006-2008, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;
import tom.library.sl.VisitFailure;

public class Compiler {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.gom.adt.objects.types.SlotFieldList  tom_append_list_ConcSlotField( tom.gom.adt.objects.types.SlotFieldList l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {     if( l1.isEmptyConcSlotField() ) {       return l2;     } else if( l2.isEmptyConcSlotField() ) {       return l1;     } else if(  l1.getTailConcSlotField() .isEmptyConcSlotField() ) {       return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( l1.getHeadConcSlotField() ,l2) ;     } else {       return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( l1.getHeadConcSlotField() ,tom_append_list_ConcSlotField( l1.getTailConcSlotField() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_ConcSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end, tom.gom.adt.objects.types.SlotFieldList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSlotField()  ||  (end== tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( begin.getHeadConcSlotField() ,( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_ConcSlotField( begin.getTailConcSlotField() ,end,tail)) ;   }      private static   tom.gom.adt.objects.types.GomClassList  tom_append_list_ConcGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList  l2) {     if( l1.isEmptyConcGomClass() ) {       return l2;     } else if( l2.isEmptyConcGomClass() ) {       return l1;     } else if(  l1.getTailConcGomClass() .isEmptyConcGomClass() ) {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,l2) ;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,tom_append_list_ConcGomClass( l1.getTailConcGomClass() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.GomClassList  tom_get_slice_ConcGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end, tom.gom.adt.objects.types.GomClassList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcGomClass()  ||  (end== tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( begin.getHeadConcGomClass() ,( tom.gom.adt.objects.types.GomClassList )tom_get_slice_ConcGomClass( begin.getTailConcGomClass() ,end,tail)) ;   }      private static   tom.gom.adt.objects.types.ClassNameList  tom_append_list_ConcClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList  l2) {     if( l1.isEmptyConcClassName() ) {       return l2;     } else if( l2.isEmptyConcClassName() ) {       return l1;     } else if(  l1.getTailConcClassName() .isEmptyConcClassName() ) {       return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( l1.getHeadConcClassName() ,l2) ;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( l1.getHeadConcClassName() ,tom_append_list_ConcClassName( l1.getTailConcClassName() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.ClassNameList  tom_get_slice_ConcClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end, tom.gom.adt.objects.types.ClassNameList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcClassName()  ||  (end== tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( begin.getHeadConcClassName() ,( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_ConcClassName( begin.getTailConcClassName() ,end,tail)) ;   }      private static   tom.gom.adt.objects.types.HookList  tom_append_list_ConcHook( tom.gom.adt.objects.types.HookList l1,  tom.gom.adt.objects.types.HookList  l2) {     if( l1.isEmptyConcHook() ) {       return l2;     } else if( l2.isEmptyConcHook() ) {       return l1;     } else if(  l1.getTailConcHook() .isEmptyConcHook() ) {       return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( l1.getHeadConcHook() ,l2) ;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( l1.getHeadConcHook() ,tom_append_list_ConcHook( l1.getTailConcHook() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.HookList  tom_get_slice_ConcHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end, tom.gom.adt.objects.types.HookList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcHook()  ||  (end== tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( begin.getHeadConcHook() ,( tom.gom.adt.objects.types.HookList )tom_get_slice_ConcHook( begin.getTailConcHook() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyConcOperator() ) {       return l2;     } else if( l2.isEmptyConcOperator() ) {       return l1;     } else if(  l1.getTailConcOperator() .isEmptyConcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,tom_append_list_ConcOperator( l1.getTailConcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcOperator()  ||  (end== tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( begin.getHeadConcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_ConcOperator( begin.getTailConcOperator() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.SlotList  tom_append_list_ConcSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyConcSlot() ) {       return l2;     } else if( l2.isEmptyConcSlot() ) {       return l1;     } else if(  l1.getTailConcSlot() .isEmptyConcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,tom_append_list_ConcSlot( l1.getTailConcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_ConcSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSlot()  ||  (end== tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( begin.getHeadConcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_ConcSlot( begin.getTailConcSlot() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.SortList  tom_append_list_ConcSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyConcSort() ) {       return l2;     } else if( l2.isEmptyConcSort() ) {       return l1;     } else if(  l1.getTailConcSort() .isEmptyConcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,tom_append_list_ConcSort( l1.getTailConcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_ConcSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSort()  ||  (end== tom.gom.adt.gom.types.sortlist.EmptyConcSort.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( begin.getHeadConcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_ConcSort( begin.getTailConcSort() ,end,tail)) ;   }      private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_ConcModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyConcModule() ) {       return l2;     } else if( l2.isEmptyConcModule() ) {       return l1;     } else if(  l1.getTailConcModule() .isEmptyConcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,tom_append_list_ConcModule( l1.getTailConcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_ConcModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcModule()  ||  (end== tom.gom.adt.gom.types.modulelist.EmptyConcModule.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( begin.getHeadConcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_ConcModule( begin.getTailConcModule() ,end,tail)) ;   }    

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  Map sortClassNameForSortDecl = environment().builtinSortClassMap();

  public GomClassList compile(ModuleList moduleList, HookDeclList hookDecls) {
    GomClassList classList =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;

    /* ModuleDecl -> (AbstractType) ClassName */
    Map abstractTypeNameForModule = new HashMap();
    Map tomMappingNameForModule = new HashMap();
    /* SortDecl -> SortClass */
    Map sortGomClassForSortDecl = new HashMap();
    /* OperatorDecl -> OperatorClass */
    Map classForOperatorDecl = new HashMap();
    /* For each module */
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_freshVar_0=tomMatch426NameNumberfreshSubject_1;if ( ((tomMatch426NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch426NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_begin_2=tomMatch426NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_end_3=tomMatch426NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_freshVar_1=tomMatch426NameNumber_end_3;if (!( tomMatch426NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch426NameNumber_freshVar_7= tomMatch426NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch426NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch426NameNumber_freshVar_6= tomMatch426NameNumber_freshVar_7.getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch426NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_freshVar_4= tomMatch426NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {

        String moduleName = tom_moduleDecl.getModuleName().getName();

        /* create an AbstractType class */
        ClassName abstractTypeName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName+"AbstractType") 

;

        ClassName tomMappingName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName) 

;
        tomMappingNameForModule.put(tom_moduleDecl,tomMappingName);

        abstractTypeNameForModule.put(tom_moduleDecl,abstractTypeName);
      }}}}}}}}if ( tomMatch426NameNumber_end_3.isEmptyConcModule() ) {tomMatch426NameNumber_end_3=tomMatch426NameNumber_begin_2;} else {tomMatch426NameNumber_end_3= tomMatch426NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch426NameNumber_end_3==tomMatch426NameNumber_begin_2) ));}}}}}}}


    /* For each sort, create a sort implementation, and operator implementations
       (we don't need to do that per module, since each operator and sort knows
       to which module it belongs) */
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_freshVar_0=tomMatch427NameNumberfreshSubject_1;if ( ((tomMatch427NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch427NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_begin_2=tomMatch427NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_end_3=tomMatch427NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_freshVar_1=tomMatch427NameNumber_end_3;if (!( tomMatch427NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch427NameNumber_freshVar_7= tomMatch427NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch427NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_6= tomMatch427NameNumber_freshVar_7.getSorts() ;{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_8=tomMatch427NameNumber_freshVar_6;if ( ((tomMatch427NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch427NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_begin_10=tomMatch427NameNumber_freshVar_8;{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_end_11=tomMatch427NameNumber_freshVar_8;do {{{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_9=tomMatch427NameNumber_end_11;if (!( tomMatch427NameNumber_freshVar_9.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch427NameNumber_freshVar_15= tomMatch427NameNumber_freshVar_9.getHeadConcSort() ;if ( (tomMatch427NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch427NameNumber_freshVar_14= tomMatch427NameNumber_freshVar_15.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch427NameNumber_freshVar_18=tomMatch427NameNumber_freshVar_14;if ( (tomMatch427NameNumber_freshVar_18 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch427NameNumber_freshVar_16= tomMatch427NameNumber_freshVar_18.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch427NameNumber_freshVar_17= tomMatch427NameNumber_freshVar_18.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_12= tomMatch427NameNumber_freshVar_9.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_freshVar_4= tomMatch427NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {





        // get the class name for the sort
        ClassName sortClassName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch427NameNumber_freshVar_17)+".types", tomMatch427NameNumber_freshVar_16) ;
        sortClassNameForSortDecl.put(tomMatch427NameNumber_freshVar_14,sortClassName);
      }}}}}}}}}}}}if ( tomMatch427NameNumber_end_11.isEmptyConcSort() ) {tomMatch427NameNumber_end_11=tomMatch427NameNumber_begin_10;} else {tomMatch427NameNumber_end_11= tomMatch427NameNumber_end_11.getTailConcSort() ;}}} while(!( (tomMatch427NameNumber_end_11==tomMatch427NameNumber_begin_10) ));}}}}}}}}}if ( tomMatch427NameNumber_end_3.isEmptyConcModule() ) {tomMatch427NameNumber_end_3=tomMatch427NameNumber_begin_2;} else {tomMatch427NameNumber_end_3= tomMatch427NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch427NameNumber_end_3==tomMatch427NameNumber_begin_2) ));}}}}}}}{if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_freshVar_0=tomMatch428NameNumberfreshSubject_1;if ( ((tomMatch428NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch428NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_begin_2=tomMatch428NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_end_3=tomMatch428NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_freshVar_1=tomMatch428NameNumber_end_3;if (!( tomMatch428NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch428NameNumber_freshVar_7= tomMatch428NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch428NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_6= tomMatch428NameNumber_freshVar_7.getSorts() ;{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_8=tomMatch428NameNumber_freshVar_6;if ( ((tomMatch428NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch428NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_begin_10=tomMatch428NameNumber_freshVar_8;{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_end_11=tomMatch428NameNumber_freshVar_8;do {{{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_9=tomMatch428NameNumber_end_11;if (!( tomMatch428NameNumber_freshVar_9.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch428NameNumber_freshVar_16= tomMatch428NameNumber_freshVar_9.getHeadConcSort() ;if ( (tomMatch428NameNumber_freshVar_16 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch428NameNumber_freshVar_14= tomMatch428NameNumber_freshVar_16.getDecl() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch428NameNumber_freshVar_15= tomMatch428NameNumber_freshVar_16.getOperatorDecls() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch428NameNumber_freshVar_18=tomMatch428NameNumber_freshVar_14;if ( (tomMatch428NameNumber_freshVar_18 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch428NameNumber_freshVar_17= tomMatch428NameNumber_freshVar_18.getModuleDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch428NameNumber_freshVar_17;{  tom.gom.adt.gom.types.SortDecl  tom_sortDecl=tomMatch428NameNumber_freshVar_14;{  tom.gom.adt.gom.types.OperatorDeclList  tom_oplist=tomMatch428NameNumber_freshVar_15;{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_12= tomMatch428NameNumber_freshVar_9.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_freshVar_4= tomMatch428NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {








        // get the class name for the sort
        ClassName sortClassName = (ClassName)sortClassNameForSortDecl.get(tom_sortDecl);
        ClassName abstracttypeName = (ClassName)abstractTypeNameForModule.get(tom_moduleDecl);
        ClassName mappingName = (ClassName)tomMappingNameForModule.get(tom_moduleDecl);
        // create operator classes. Also, store a list of all operators for the sort class
        // use a Set to collect slots and avoid duplicates
        Set allSortSlots = new HashSet();
        ClassNameList allOperators =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
        ClassNameList allVariadicOperators =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
        {if ( (tom_oplist instanceof tom.gom.adt.gom.types.OperatorDeclList) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.OperatorDeclList )tom_oplist);{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_freshVar_0=tomMatch429NameNumberfreshSubject_1;if ( ((tomMatch429NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecllist.ConsConcOperator) || (tomMatch429NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_begin_2=tomMatch429NameNumber_freshVar_0;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_end_3=tomMatch429NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_freshVar_1=tomMatch429NameNumber_end_3;if (!( tomMatch429NameNumber_freshVar_1.isEmptyConcOperator() )) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch429NameNumber_freshVar_9= tomMatch429NameNumber_freshVar_1.getHeadConcOperator() ;if ( (tomMatch429NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch429NameNumber_freshVar_6= tomMatch429NameNumber_freshVar_9.getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch429NameNumber_freshVar_7= tomMatch429NameNumber_freshVar_9.getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch429NameNumber_freshVar_8= tomMatch429NameNumber_freshVar_9.getProd() ;{  String  tom_opname=tomMatch429NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SortDecl  tomMatch429NameNumber_freshVar_11=tomMatch429NameNumber_freshVar_7;if ( (tomMatch429NameNumber_freshVar_11 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch429NameNumber_freshVar_10= tomMatch429NameNumber_freshVar_11.getName() ;{  tom.gom.adt.gom.types.TypedProduction  tom_typedproduction=tomMatch429NameNumber_freshVar_8;{  tom.gom.adt.gom.types.OperatorDecl  tom_opdecl= tomMatch429NameNumber_freshVar_1.getHeadConcOperator() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_freshVar_4= tomMatch429NameNumber_freshVar_1.getTailConcOperator() ;if ( true ) {





            String sortNamePackage = tomMatch429NameNumber_freshVar_10.toLowerCase();
            ClassName operatorClassName =
               tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
            SlotFieldList slots =  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ;
            ClassName variadicOpClassName = null;
            ClassName empty = null;
            {if ( (tom_typedproduction instanceof tom.gom.adt.gom.types.TypedProduction) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch430NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.TypedProduction )tom_typedproduction);{  tom.gom.adt.gom.types.TypedProduction  tomMatch430NameNumber_freshVar_1=tomMatch430NameNumberfreshSubject_1;if ( (tomMatch430NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch430NameNumber_freshVar_0= tomMatch430NameNumber_freshVar_1.getSort() ;if ( true ) {

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch430NameNumber_freshVar_0);
                SlotField slotHead =  tom.gom.adt.objects.types.slotfield.SlotField.make("Head"+tom_opname, clsName) ;
                SlotField slotTail =  tom.gom.adt.objects.types.slotfield.SlotField.make("Tail"+tom_opname, sortClassName) ;
                allSortSlots.add(slotHead);
                allSortSlots.add(slotTail);
                slots =  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotHead, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotTail, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) ) ;
                // as the operator is variadic, add a Cons and an Empty
                variadicOpClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
                allVariadicOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(variadicOpClassName,tom_append_list_ConcClassName(allVariadicOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
                empty =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Empty"+tom_opname) ;
                operatorClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Cons"+tom_opname) ;

                allOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(empty,tom_append_list_ConcClassName(allOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
              }}}}}}if ( (tom_typedproduction instanceof tom.gom.adt.gom.types.TypedProduction) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch430NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.TypedProduction )tom_typedproduction);{  tom.gom.adt.gom.types.TypedProduction  tomMatch430NameNumber_freshVar_3=tomMatch430NameNumberfreshSubject_1;if ( (tomMatch430NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.typedproduction.Slots) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_2= tomMatch430NameNumber_freshVar_3.getSlots() ;{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_4=tomMatch430NameNumber_freshVar_2;if ( ((tomMatch430NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.slotlist.ConsConcSlot) || (tomMatch430NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.slotlist.EmptyConcSlot)) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_begin_6=tomMatch430NameNumber_freshVar_4;{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_end_7=tomMatch430NameNumber_freshVar_4;do {{{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_5=tomMatch430NameNumber_end_7;if (!( tomMatch430NameNumber_freshVar_5.isEmptyConcSlot() )) {{  tom.gom.adt.gom.types.Slot  tomMatch430NameNumber_freshVar_12= tomMatch430NameNumber_freshVar_5.getHeadConcSlot() ;if ( (tomMatch430NameNumber_freshVar_12 instanceof tom.gom.adt.gom.types.slot.Slot) ) {{  String  tomMatch430NameNumber_freshVar_10= tomMatch430NameNumber_freshVar_12.getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch430NameNumber_freshVar_11= tomMatch430NameNumber_freshVar_12.getSort() ;{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_8= tomMatch430NameNumber_freshVar_5.getTailConcSlot() ;if ( true ) {

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch430NameNumber_freshVar_11);
                SlotField slotfield =  tom.gom.adt.objects.types.slotfield.SlotField.make(tomMatch430NameNumber_freshVar_10, clsName) ;
                allSortSlots.add(slotfield);
                slots = tom_append_list_ConcSlotField(slots, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotfield, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) );
              }}}}}}}}if ( tomMatch430NameNumber_end_7.isEmptyConcSlot() ) {tomMatch430NameNumber_end_7=tomMatch430NameNumber_begin_6;} else {tomMatch430NameNumber_end_7= tomMatch430NameNumber_end_7.getTailConcSlot() ;}}} while(!( (tomMatch430NameNumber_end_7==tomMatch430NameNumber_begin_6) ));}}}}}}}}}}

            GomClass operatorClass;
            allOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(operatorClassName,tom_append_list_ConcClassName(allOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
            if (variadicOpClassName != null) {
              /* We just processed a variadic operator */
              GomClass cons =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, variadicOpClassName, mappingName, sortClassName, slots,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;

              GomClass emptyClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(empty, abstracttypeName, variadicOpClassName, mappingName, sortClassName,  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;

              operatorClass =  tom.gom.adt.objects.types.gomclass.VariadicOperatorClass.make(variadicOpClassName, abstracttypeName, mappingName, sortClassName, emptyClass, cons,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
            } else {
              operatorClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, sortClassName, mappingName, sortClassName, slots,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
            }
            classForOperatorDecl.put(tom_opdecl,operatorClass);
            classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(operatorClass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
          }}}}}}}}}}}}}}}if ( tomMatch429NameNumber_end_3.isEmptyConcOperator() ) {tomMatch429NameNumber_end_3=tomMatch429NameNumber_begin_2;} else {tomMatch429NameNumber_end_3= tomMatch429NameNumber_end_3.getTailConcOperator() ;}}} while(!( (tomMatch429NameNumber_end_3==tomMatch429NameNumber_begin_2) ));}}}}}}}

        // create the sort class and add it to the list
        GomClass sortClass =  tom.gom.adt.objects.types.gomclass.SortClass.make(sortClassName, abstracttypeName, mappingName, allOperators, allVariadicOperators, slotFieldListFromSet(allSortSlots),  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
        sortGomClassForSortDecl.put(tom_sortDecl,sortClass);
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(sortClass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
      }}}}}}}}}}}}}}}if ( tomMatch428NameNumber_end_11.isEmptyConcSort() ) {tomMatch428NameNumber_end_11=tomMatch428NameNumber_begin_10;} else {tomMatch428NameNumber_end_11= tomMatch428NameNumber_end_11.getTailConcSort() ;}}} while(!( (tomMatch428NameNumber_end_11==tomMatch428NameNumber_begin_10) ));}}}}}}}}}if ( tomMatch428NameNumber_end_3.isEmptyConcModule() ) {tomMatch428NameNumber_end_3=tomMatch428NameNumber_begin_2;} else {tomMatch428NameNumber_end_3= tomMatch428NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch428NameNumber_end_3==tomMatch428NameNumber_begin_2) ));}}}}}}}{if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_0=tomMatch431NameNumberfreshSubject_1;if ( ((tomMatch431NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch431NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_begin_2=tomMatch431NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_end_3=tomMatch431NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_1=tomMatch431NameNumber_end_3;if (!( tomMatch431NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch431NameNumber_freshVar_7= tomMatch431NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch431NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch431NameNumber_freshVar_6= tomMatch431NameNumber_freshVar_7.getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch431NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_4= tomMatch431NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {




        String moduleName = tom_moduleDecl.getModuleName().getName();

        GomClassList allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;
        GomClassList allSortClasses =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;
        /* TODO improve this part : just for test */
        ModuleDeclList modlist = environment().getModuleDependency(tom_moduleDecl);
        while(!modlist.isEmptyConcModuleDecl()) {
          ModuleDecl imported = modlist.getHeadConcModuleDecl();
          modlist = modlist.getTailConcModuleDecl();
          SortList moduleSorts = getSortsForModule(imported,moduleList);
          SortList sortconsum = moduleSorts;
          while(!sortconsum.isEmptyConcSort()) {
            Sort sort = sortconsum.getHeadConcSort();
            sortconsum = sortconsum.getTailConcSort();
            {if ( (sort instanceof tom.gom.adt.gom.types.Sort) ) {{  tom.gom.adt.gom.types.Sort  tomMatch432NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Sort )sort);{  tom.gom.adt.gom.types.Sort  tomMatch432NameNumber_freshVar_1=tomMatch432NameNumberfreshSubject_1;if ( (tomMatch432NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch432NameNumber_freshVar_0= tomMatch432NameNumber_freshVar_1.getDecl() ;if ( true ) {

                GomClass sortClass = (GomClass) sortGomClassForSortDecl.get(tomMatch432NameNumber_freshVar_0);
                allSortClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(sortClass,tom_append_list_ConcGomClass(allSortClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
              }}}}}}}

          }
          {if ( (moduleSorts instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortList )moduleSorts);{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_freshVar_0=tomMatch433NameNumberfreshSubject_1;if ( ((tomMatch433NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch433NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_begin_2=tomMatch433NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_end_3=tomMatch433NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_freshVar_1=tomMatch433NameNumber_end_3;if (!( tomMatch433NameNumber_freshVar_1.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch433NameNumber_freshVar_7= tomMatch433NameNumber_freshVar_1.getHeadConcSort() ;if ( (tomMatch433NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_6= tomMatch433NameNumber_freshVar_7.getOperatorDecls() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_8=tomMatch433NameNumber_freshVar_6;if ( ((tomMatch433NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.operatordecllist.ConsConcOperator) || (tomMatch433NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_begin_10=tomMatch433NameNumber_freshVar_8;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_end_11=tomMatch433NameNumber_freshVar_8;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_9=tomMatch433NameNumber_end_11;if (!( tomMatch433NameNumber_freshVar_9.isEmptyConcOperator() )) {{  tom.gom.adt.gom.types.OperatorDecl  tom_opDecl= tomMatch433NameNumber_freshVar_9.getHeadConcOperator() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_12= tomMatch433NameNumber_freshVar_9.getTailConcOperator() ;{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_freshVar_4= tomMatch433NameNumber_freshVar_1.getTailConcSort() ;if ( true ) {

              GomClass opClass = (GomClass) classForOperatorDecl.get(tom_opDecl);
              allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(opClass,tom_append_list_ConcGomClass(allOperatorClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
              {if ( (opClass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch434NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )opClass);{  tom.gom.adt.objects.types.GomClass  tomMatch434NameNumber_freshVar_2=tomMatch434NameNumberfreshSubject_1;if ( (tomMatch434NameNumber_freshVar_2 instanceof tom.gom.adt.objects.types.gomclass.VariadicOperatorClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch434NameNumber_freshVar_0= tomMatch434NameNumber_freshVar_2.getEmpty() ;{  tom.gom.adt.objects.types.GomClass  tomMatch434NameNumber_freshVar_1= tomMatch434NameNumber_freshVar_2.getCons() ;if ( true ) {

                  allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tomMatch434NameNumber_freshVar_0, tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tomMatch434NameNumber_freshVar_1,tom_append_list_ConcGomClass(allOperatorClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ) ;
                }}}}}}}}

            }}}}}}if ( tomMatch433NameNumber_end_11.isEmptyConcOperator() ) {tomMatch433NameNumber_end_11=tomMatch433NameNumber_begin_10;} else {tomMatch433NameNumber_end_11= tomMatch433NameNumber_end_11.getTailConcOperator() ;}}} while(!( (tomMatch433NameNumber_end_11==tomMatch433NameNumber_begin_10) ));}}}}}}}}}if ( tomMatch433NameNumber_end_3.isEmptyConcSort() ) {tomMatch433NameNumber_end_3=tomMatch433NameNumber_begin_2;} else {tomMatch433NameNumber_end_3= tomMatch433NameNumber_end_3.getTailConcSort() ;}}} while(!( (tomMatch433NameNumber_end_3==tomMatch433NameNumber_begin_2) ));}}}}}}}

        }

        ClassName abstractTypeClassName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);

        /* create a TomMapping */
        ClassName tomMappingName = (ClassName)
          tomMappingNameForModule.get(tom_moduleDecl);
        GomClass tommappingclass =  tom.gom.adt.objects.types.gomclass.TomMapping.make(tomMappingName, allSortClasses, allOperatorClasses) 

;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tommappingclass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;

        /* create the abstractType */
        ClassNameList classSortList = sortClassNames(moduleList);
        ClassName abstractTypeName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);
        GomClass abstracttype =
           tom.gom.adt.objects.types.gomclass.AbstractTypeClass.make(abstractTypeName, tomMappingName, classSortList,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 


;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(abstracttype,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;

      }}}}}}}}if ( tomMatch431NameNumber_end_3.isEmptyConcModule() ) {tomMatch431NameNumber_end_3=tomMatch431NameNumber_begin_2;} else {tomMatch431NameNumber_end_3= tomMatch431NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch431NameNumber_end_3==tomMatch431NameNumber_begin_2) ));}}}}}}}

    /* Call the hook processor here, to attach hooks to the correct classes */
    /* fist compute the mapping "Decl" -> "ClassName" */
    Map declToClassName = new HashMap();
    /* for ModuleDecl */
    declToClassName.putAll(abstractTypeNameForModule);
    /* for SortDecl */
    Iterator it = sortGomClassForSortDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    /* for OperatorDecl */
    it = classForOperatorDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    HookCompiler hcompiler = new HookCompiler(sortClassNameForSortDecl);
    classList = hcompiler.compile(hookDecls,classList,declToClassName);
    return classList;
  }

  private ClassNameList sortClassNames(ModuleList moduleList) {
    ClassNameList classNames =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_0=tomMatch435NameNumberfreshSubject_1;if ( ((tomMatch435NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch435NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_begin_2=tomMatch435NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_end_3=tomMatch435NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_1=tomMatch435NameNumber_end_3;if (!( tomMatch435NameNumber_freshVar_1.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch435NameNumber_freshVar_7= tomMatch435NameNumber_freshVar_1.getHeadConcModule() ;if ( (tomMatch435NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_6= tomMatch435NameNumber_freshVar_7.getSorts() ;{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_8=tomMatch435NameNumber_freshVar_6;if ( ((tomMatch435NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch435NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_begin_10=tomMatch435NameNumber_freshVar_8;{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_end_11=tomMatch435NameNumber_freshVar_8;do {{{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_9=tomMatch435NameNumber_end_11;if (!( tomMatch435NameNumber_freshVar_9.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch435NameNumber_freshVar_15= tomMatch435NameNumber_freshVar_9.getHeadConcSort() ;if ( (tomMatch435NameNumber_freshVar_15 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch435NameNumber_freshVar_14= tomMatch435NameNumber_freshVar_15.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch435NameNumber_freshVar_18=tomMatch435NameNumber_freshVar_14;if ( (tomMatch435NameNumber_freshVar_18 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch435NameNumber_freshVar_16= tomMatch435NameNumber_freshVar_18.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch435NameNumber_freshVar_17= tomMatch435NameNumber_freshVar_18.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_12= tomMatch435NameNumber_freshVar_9.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_4= tomMatch435NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {





        classNames =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch435NameNumber_freshVar_17)+".types", tomMatch435NameNumber_freshVar_16) ,tom_append_list_ConcClassName(classNames, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
      }}}}}}}}}}}}if ( tomMatch435NameNumber_end_11.isEmptyConcSort() ) {tomMatch435NameNumber_end_11=tomMatch435NameNumber_begin_10;} else {tomMatch435NameNumber_end_11= tomMatch435NameNumber_end_11.getTailConcSort() ;}}} while(!( (tomMatch435NameNumber_end_11==tomMatch435NameNumber_begin_10) ));}}}}}}}}}if ( tomMatch435NameNumber_end_3.isEmptyConcModule() ) {tomMatch435NameNumber_end_3=tomMatch435NameNumber_begin_2;} else {tomMatch435NameNumber_end_3= tomMatch435NameNumber_end_3.getTailConcModule() ;}}} while(!( (tomMatch435NameNumber_end_3==tomMatch435NameNumber_begin_2) ));}}}}}}}

    return classNames;
  }

  /*
   * Get all sort definitions for a given module
   */
  private SortList getSortsForModule(ModuleDecl module, ModuleList moduleList) {
    {if ( (module instanceof tom.gom.adt.gom.types.ModuleDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch436NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )module);{  tom.gom.adt.gom.types.ModuleDecl  tomMatch436NameNumber_freshVar_0=tomMatch436NameNumberfreshSubject_1;if ( (tomMatch436NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.ModuleList )moduleList);{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_freshVar_1=tomMatch436NameNumberfreshSubject_2;if ( ((tomMatch436NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch436NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_begin_3=tomMatch436NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_end_4=tomMatch436NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_freshVar_2=tomMatch436NameNumber_end_4;if (!( tomMatch436NameNumber_freshVar_2.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch436NameNumber_freshVar_9= tomMatch436NameNumber_freshVar_2.getHeadConcModule() ;if ( (tomMatch436NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch436NameNumber_freshVar_7= tomMatch436NameNumber_freshVar_9.getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch436NameNumber_freshVar_8= tomMatch436NameNumber_freshVar_9.getSorts() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch436NameNumber_freshVar_10=tomMatch436NameNumber_freshVar_7;if ( (tomMatch436NameNumber_freshVar_10==tomMatch436NameNumberfreshSubject_1) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_freshVar_5= tomMatch436NameNumber_freshVar_2.getTailConcModule() ;if ( true ) {


        return tomMatch436NameNumber_freshVar_8;
      }}}}}}}}}}if ( tomMatch436NameNumber_end_4.isEmptyConcModule() ) {tomMatch436NameNumber_end_4=tomMatch436NameNumber_begin_3;} else {tomMatch436NameNumber_end_4= tomMatch436NameNumber_end_4.getTailConcModule() ;}}} while(!( (tomMatch436NameNumber_end_4==tomMatch436NameNumber_begin_3) ));}}}}}}}}}}}

    throw new RuntimeException("Module " + module + " not found");
  }

  public static String packagePrefix(ModuleDecl moduleDecl) {
    String pkgPrefix = "";
    {if ( (moduleDecl instanceof tom.gom.adt.gom.types.ModuleDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch437NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )moduleDecl);{  tom.gom.adt.gom.types.ModuleDecl  tomMatch437NameNumber_freshVar_2=tomMatch437NameNumberfreshSubject_1;if ( (tomMatch437NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch437NameNumber_freshVar_0= tomMatch437NameNumber_freshVar_2.getModuleName() ;{  String  tomMatch437NameNumber_freshVar_1= tomMatch437NameNumber_freshVar_2.getPkg() ;{  tom.gom.adt.gom.types.GomModuleName  tomMatch437NameNumber_freshVar_4=tomMatch437NameNumber_freshVar_0;if ( (tomMatch437NameNumber_freshVar_4 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch437NameNumber_freshVar_3= tomMatch437NameNumber_freshVar_4.getName() ;{  String  tom_name=tomMatch437NameNumber_freshVar_3;{  String  tom_pkgopt=tomMatch437NameNumber_freshVar_1;if ( true ) {

        if(!tom_pkgopt.equals("")) {
          pkgPrefix = tom_pkgopt+ "." + tom_name;
        } else {
          pkgPrefix = tom_name;
        }
      }}}}}}}}}}}}}

    return pkgPrefix.toLowerCase();
  }

  private SlotFieldList slotFieldListFromSet(Set slotFieldSet) {
    Iterator it = slotFieldSet.iterator();
    SlotFieldList list =  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ;
    while(it.hasNext()) {
      SlotField slot = (SlotField) it.next();
      list = tom_append_list_ConcSlotField(list, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slot, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) );
    }
    return list;
  }

  private ClassNameList allClassForImports(
      Map classMap,
      ModuleDecl moduleDecl) {
    ClassNameList importedList =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
    ModuleDeclList importedModulelist = environment().getModuleDependency(moduleDecl);
    while(!importedModulelist.isEmptyConcModuleDecl()) {
      ModuleDecl imported = importedModulelist.getHeadConcModuleDecl();
      importedModulelist = importedModulelist.getTailConcModuleDecl();
      if (!imported.equals(moduleDecl)) {
        ClassName importedclass = (ClassName)classMap.get(imported);
        importedList =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(importedclass,tom_append_list_ConcClassName(importedList, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
      }
    }
    return importedList;
  }
}
