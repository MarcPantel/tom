/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;
import tom.library.sl.VisitFailure;

public class Compiler {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_char(char t) { return  true ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_int(int t) { return  true ;} private static  tom.gom.adt.objects.types.SlotFieldList  tom_empty_list_concSlotField() { return  tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() ; }   private static   tom.gom.adt.objects.types.SlotFieldList  tom_append_list_concSlotField( tom.gom.adt.objects.types.SlotFieldList l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {     if( l1.isEmptyconcSlotField() ) {       return l2;     } else if( l2.isEmptyconcSlotField() ) {       return l1;     } else if(  l1.getTailconcSlotField() .isEmptyconcSlotField() ) {       return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make( l1.getHeadconcSlotField() ,l2) ;     } else {       return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make( l1.getHeadconcSlotField() ,tom_append_list_concSlotField( l1.getTailconcSlotField() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_concSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end, tom.gom.adt.objects.types.SlotFieldList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make( begin.getHeadconcSlotField() ,( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_concSlotField( begin.getTailconcSlotField() ,end,tail)) ;     }   }   private static  tom.gom.adt.objects.types.GomClassList  tom_empty_list_concGomClass() { return  tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass.make() ; }   private static   tom.gom.adt.objects.types.GomClassList  tom_append_list_concGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList  l2) {     if( l1.isEmptyconcGomClass() ) {       return l2;     } else if( l2.isEmptyconcGomClass() ) {       return l1;     } else if(  l1.getTailconcGomClass() .isEmptyconcGomClass() ) {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( l1.getHeadconcGomClass() ,l2) ;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( l1.getHeadconcGomClass() ,tom_append_list_concGomClass( l1.getTailconcGomClass() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.GomClassList  tom_get_slice_concGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end, tom.gom.adt.objects.types.GomClassList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make( begin.getHeadconcGomClass() ,( tom.gom.adt.objects.types.GomClassList )tom_get_slice_concGomClass( begin.getTailconcGomClass() ,end,tail)) ;     }   }   private static  tom.gom.adt.objects.types.ClassNameList  tom_empty_list_concClassName() { return  tom.gom.adt.objects.types.classnamelist.EmptyconcClassName.make() ; }   private static   tom.gom.adt.objects.types.ClassNameList  tom_append_list_concClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList  l2) {     if( l1.isEmptyconcClassName() ) {       return l2;     } else if( l2.isEmptyconcClassName() ) {       return l1;     } else if(  l1.getTailconcClassName() .isEmptyconcClassName() ) {       return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make( l1.getHeadconcClassName() ,l2) ;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make( l1.getHeadconcClassName() ,tom_append_list_concClassName( l1.getTailconcClassName() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.ClassNameList  tom_get_slice_concClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end, tom.gom.adt.objects.types.ClassNameList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make( begin.getHeadconcClassName() ,( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_concClassName( begin.getTailconcClassName() ,end,tail)) ;     }   }   private static  tom.gom.adt.objects.types.HookList  tom_empty_list_concHook() { return  tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() ; }   private static   tom.gom.adt.objects.types.HookList  tom_append_list_concHook( tom.gom.adt.objects.types.HookList l1,  tom.gom.adt.objects.types.HookList  l2) {     if( l1.isEmptyconcHook() ) {       return l2;     } else if( l2.isEmptyconcHook() ) {       return l1;     } else if(  l1.getTailconcHook() .isEmptyconcHook() ) {       return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make( l1.getHeadconcHook() ,l2) ;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make( l1.getHeadconcHook() ,tom_append_list_concHook( l1.getTailconcHook() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.HookList  tom_get_slice_concHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end, tom.gom.adt.objects.types.HookList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsconcHook.make( begin.getHeadconcHook() ,( tom.gom.adt.objects.types.HookList )tom_get_slice_concHook( begin.getTailconcHook() ,end,tail)) ;     }   }   private static  tom.gom.adt.gom.types.OperatorDeclList  tom_empty_list_concOperator() { return  tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() ; }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyconcOperator() ) {       return l2;     } else if( l2.isEmptyconcOperator() ) {       return l1;     } else if(  l1.getTailconcOperator() .isEmptyconcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( l1.getHeadconcOperator() ,tom_append_list_concOperator( l1.getTailconcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make( begin.getHeadconcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_concOperator( begin.getTailconcOperator() ,end,tail)) ;     }   }   private static  tom.gom.adt.gom.types.SlotList  tom_empty_list_concSlot() { return  tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() ; }   private static   tom.gom.adt.gom.types.SlotList  tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;     }   }   private static  tom.gom.adt.gom.types.SortList  tom_empty_list_concSort() { return  tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() ; }   private static   tom.gom.adt.gom.types.SortList  tom_append_list_concSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyconcSort() ) {       return l2;     } else if( l2.isEmptyconcSort() ) {       return l1;     } else if(  l1.getTailconcSort() .isEmptyconcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( l1.getHeadconcSort() ,tom_append_list_concSort( l1.getTailconcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_concSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsconcSort.make( begin.getHeadconcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_concSort( begin.getTailconcSort() ,end,tail)) ;     }   }   private static  tom.gom.adt.gom.types.ModuleList  tom_empty_list_concModule() { return  tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() ; }   private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_concModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyconcModule() ) {       return l2;     } else if( l2.isEmptyconcModule() ) {       return l1;     } else if(  l1.getTailconcModule() .isEmptyconcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( l1.getHeadconcModule() ,tom_append_list_concModule( l1.getTailconcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_concModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsconcModule.make( begin.getHeadconcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_concModule( begin.getTailconcModule() ,end,tail)) ;     }   }    

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  Map sortClassNameForSortDecl = environment().builtinSortClassMap();

  public GomClassList compile(ModuleList moduleList, HookDeclList hookDecls) {
    GomClassList classList = tom_empty_list_concGomClass();

    /* ModuleDecl -> (AbstractType) ClassName */
    Map abstractTypeNameForModule = new HashMap();
    Map visitorNameForModule = new HashMap();
    Map visitableForwardNameForModule = new HashMap();
    Map tomMappingNameForModule = new HashMap();
    /* SortDecl -> SortClass */
    Map sortGomClassForSortDecl = new HashMap();
    /* OperatorDecl -> OperatorClass */
    Map classForOperatorDecl = new HashMap();
    /* For each module */
    if ( moduleList instanceof tom.gom.adt.gom.types.ModuleList ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch426NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch426NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_freshVar_0=tomMatch426NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_begin_2=tomMatch426NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_end_3=tomMatch426NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_freshVar_1=tomMatch426NameNumber_end_3;if (!( tomMatch426NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch426NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch426NameNumber_freshVar_6=  tomMatch426NameNumber_freshVar_1.getHeadconcModule() .getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch426NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ModuleList  tomMatch426NameNumber_freshVar_4= tomMatch426NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {

        String moduleName = tom_moduleDecl.getModuleName().getName();

        /* create an AbstractType class */
        ClassName abstractTypeName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName+"AbstractType") 

;

        ClassName visitorName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName+"Visitor") 

;
        visitorNameForModule.put(tom_moduleDecl,visitorName);

        ClassName visitablefwdName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName+"BasicStrategy") 

;
        visitableForwardNameForModule.put(tom_moduleDecl,visitablefwdName);

        ClassName tomMappingName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName) 

;
        tomMappingNameForModule.put(tom_moduleDecl,tomMappingName);

        abstractTypeNameForModule.put(tom_moduleDecl,abstractTypeName);
      }}}}}}}if ( tomMatch426NameNumber_end_3.isEmptyconcModule() ) {tomMatch426NameNumber_end_3=tomMatch426NameNumber_begin_2;} else {tomMatch426NameNumber_end_3= tomMatch426NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch426NameNumber_end_3.equals(tomMatch426NameNumber_begin_2) ));}}}}}}


    /* For each sort, create a sort implementation, and operator implementations
       (we don't need to do that per module, since each operator and sort knows
       to which module it belongs) */
    if ( moduleList instanceof tom.gom.adt.gom.types.ModuleList ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch427NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch427NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_freshVar_0=tomMatch427NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_begin_2=tomMatch427NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_end_3=tomMatch427NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_freshVar_1=tomMatch427NameNumber_end_3;if (!( tomMatch427NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch427NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_6=  tomMatch427NameNumber_freshVar_1.getHeadconcModule() .getSorts() ;if ( ((tomMatch427NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (tomMatch427NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_7=tomMatch427NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_begin_9=tomMatch427NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_end_10=tomMatch427NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_8=tomMatch427NameNumber_end_10;if (!( tomMatch427NameNumber_freshVar_8.isEmptyconcSort() )) {if ( ( tomMatch427NameNumber_freshVar_8.getHeadconcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch427NameNumber_freshVar_13=  tomMatch427NameNumber_freshVar_8.getHeadconcSort() .getDecl() ;if ( (tomMatch427NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch427NameNumber_freshVar_14= tomMatch427NameNumber_freshVar_13.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch427NameNumber_freshVar_15= tomMatch427NameNumber_freshVar_13.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch427NameNumber_freshVar_11= tomMatch427NameNumber_freshVar_8.getTailconcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch427NameNumber_freshVar_4= tomMatch427NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {





        // get the class name for the sort
        ClassName sortClassName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch427NameNumber_freshVar_15)+".types", tomMatch427NameNumber_freshVar_14) ;
        sortClassNameForSortDecl.put(tomMatch427NameNumber_freshVar_13,sortClassName);
      }}}}}}}}}}if ( tomMatch427NameNumber_end_10.isEmptyconcSort() ) {tomMatch427NameNumber_end_10=tomMatch427NameNumber_begin_9;} else {tomMatch427NameNumber_end_10= tomMatch427NameNumber_end_10.getTailconcSort() ;}}} while(!( tomMatch427NameNumber_end_10.equals(tomMatch427NameNumber_begin_9) ));}}}}}}}}if ( tomMatch427NameNumber_end_3.isEmptyconcModule() ) {tomMatch427NameNumber_end_3=tomMatch427NameNumber_begin_2;} else {tomMatch427NameNumber_end_3= tomMatch427NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch427NameNumber_end_3.equals(tomMatch427NameNumber_begin_2) ));}}}}}}if ( moduleList instanceof tom.gom.adt.gom.types.ModuleList ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch428NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch428NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_freshVar_0=tomMatch428NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_begin_2=tomMatch428NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_end_3=tomMatch428NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_freshVar_1=tomMatch428NameNumber_end_3;if (!( tomMatch428NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch428NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_6=  tomMatch428NameNumber_freshVar_1.getHeadconcModule() .getSorts() ;if ( ((tomMatch428NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (tomMatch428NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_7=tomMatch428NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_begin_9=tomMatch428NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_end_10=tomMatch428NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_8=tomMatch428NameNumber_end_10;if (!( tomMatch428NameNumber_freshVar_8.isEmptyconcSort() )) {if ( ( tomMatch428NameNumber_freshVar_8.getHeadconcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch428NameNumber_freshVar_13=  tomMatch428NameNumber_freshVar_8.getHeadconcSort() .getDecl() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch428NameNumber_freshVar_14=  tomMatch428NameNumber_freshVar_8.getHeadconcSort() .getOperators() ;if ( (tomMatch428NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch428NameNumber_freshVar_15= tomMatch428NameNumber_freshVar_13.getModuleDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch428NameNumber_freshVar_15;{  tom.gom.adt.gom.types.SortDecl  tom_sortDecl=tomMatch428NameNumber_freshVar_13;{  tom.gom.adt.gom.types.OperatorDeclList  tom_oplist=tomMatch428NameNumber_freshVar_14;{  tom.gom.adt.gom.types.SortList  tomMatch428NameNumber_freshVar_11= tomMatch428NameNumber_freshVar_8.getTailconcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch428NameNumber_freshVar_4= tomMatch428NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {








        // get the class name for the sort
        ClassName sortClassName = (ClassName)sortClassNameForSortDecl.get(tom_sortDecl);
        ClassName abstracttypeName = (ClassName)abstractTypeNameForModule.get(tom_moduleDecl);
        ClassName visitorName = (ClassName)visitorNameForModule.get(tom_moduleDecl);
        ClassName visitableforwardName = (ClassName)visitableForwardNameForModule.get(tom_moduleDecl);
        ClassName mappingName = (ClassName)tomMappingNameForModule.get(tom_moduleDecl);
        // create operator classes. Also, store a list of all operators for the sort class
        // use a Set to collect slots and avoid duplicates
        Set allSortSlots = new HashSet();
        ClassNameList allOperators = tom_empty_list_concClassName();
        ClassNameList allVariadicOperators = tom_empty_list_concClassName();
        if ( tom_oplist instanceof tom.gom.adt.gom.types.OperatorDeclList ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.OperatorDeclList )tom_oplist);if ( ((tomMatch429NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator) || (tomMatch429NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_freshVar_0=tomMatch429NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_begin_2=tomMatch429NameNumber_freshVar_0;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_end_3=tomMatch429NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_freshVar_1=tomMatch429NameNumber_end_3;if (!( tomMatch429NameNumber_freshVar_1.isEmptyconcOperator() )) {if ( ( tomMatch429NameNumber_freshVar_1.getHeadconcOperator()  instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch429NameNumber_freshVar_6=  tomMatch429NameNumber_freshVar_1.getHeadconcOperator() .getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch429NameNumber_freshVar_7=  tomMatch429NameNumber_freshVar_1.getHeadconcOperator() .getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch429NameNumber_freshVar_8=  tomMatch429NameNumber_freshVar_1.getHeadconcOperator() .getProd() ;{  String  tom_opname=tomMatch429NameNumber_freshVar_6;if ( (tomMatch429NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch429NameNumber_freshVar_9= tomMatch429NameNumber_freshVar_7.getName() ;{  tom.gom.adt.gom.types.TypedProduction  tom_typedproduction=tomMatch429NameNumber_freshVar_8;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch429NameNumber_freshVar_4= tomMatch429NameNumber_freshVar_1.getTailconcOperator() ;if ( true ) {





            String sortNamePackage = tomMatch429NameNumber_freshVar_9.toLowerCase();
            ClassName operatorClassName =
               tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
            SlotFieldList slots = tom_empty_list_concSlotField();
            ClassName variadicOpClassName = null;
            ClassName empty = null;
            if ( tom_typedproduction instanceof tom.gom.adt.gom.types.TypedProduction ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch430NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.TypedProduction )tom_typedproduction);if ( (tomMatch430NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch430NameNumber_freshVar_0= tomMatch430NameNumberfreshSubject_1.getSort() ;if ( true ) {

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch430NameNumber_freshVar_0);
                SlotField slotHead =  tom.gom.adt.objects.types.slotfield.SlotField.make("Head"+tom_opname, clsName) ;
                SlotField slotTail =  tom.gom.adt.objects.types.slotfield.SlotField.make("Tail"+tom_opname, sortClassName) ;
                allSortSlots.add(slotHead);
                allSortSlots.add(slotTail);
                slots =  tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(slotHead, tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(slotTail,tom_empty_list_concSlotField()) ) ;
                // as the operator is variadic, add a Cons and an Empty
                variadicOpClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
                allVariadicOperators =  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(variadicOpClassName,tom_append_list_concClassName(allVariadicOperators,tom_empty_list_concClassName())) ;
                empty =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Empty"+tom_opname) ;
                operatorClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Cons"+tom_opname) ;

                allOperators =  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(empty,tom_append_list_concClassName(allOperators,tom_empty_list_concClassName())) ;
              }}}if ( (tomMatch430NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.typedproduction.Slots) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_1= tomMatch430NameNumberfreshSubject_1.getSlots() ;if ( ((tomMatch430NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot) || (tomMatch430NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot)) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_2=tomMatch430NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_begin_4=tomMatch430NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_end_5=tomMatch430NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_3=tomMatch430NameNumber_end_5;if (!( tomMatch430NameNumber_freshVar_3.isEmptyconcSlot() )) {if ( ( tomMatch430NameNumber_freshVar_3.getHeadconcSlot()  instanceof tom.gom.adt.gom.types.slot.Slot) ) {{  String  tomMatch430NameNumber_freshVar_8=  tomMatch430NameNumber_freshVar_3.getHeadconcSlot() .getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch430NameNumber_freshVar_9=  tomMatch430NameNumber_freshVar_3.getHeadconcSlot() .getSort() ;{  tom.gom.adt.gom.types.SlotList  tomMatch430NameNumber_freshVar_6= tomMatch430NameNumber_freshVar_3.getTailconcSlot() ;if ( true ) {

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch430NameNumber_freshVar_9);
                SlotField slotfield =  tom.gom.adt.objects.types.slotfield.SlotField.make(tomMatch430NameNumber_freshVar_8, clsName) ;
                allSortSlots.add(slotfield);
                slots = tom_append_list_concSlotField(slots, tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(slotfield,tom_empty_list_concSlotField()) );
              }}}}}}}if ( tomMatch430NameNumber_end_5.isEmptyconcSlot() ) {tomMatch430NameNumber_end_5=tomMatch430NameNumber_begin_4;} else {tomMatch430NameNumber_end_5= tomMatch430NameNumber_end_5.getTailconcSlot() ;}}} while(!( tomMatch430NameNumber_end_5.equals(tomMatch430NameNumber_begin_4) ));}}}}}}}}

            GomClass operatorClass;
            allOperators =  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(operatorClassName,tom_append_list_concClassName(allOperators,tom_empty_list_concClassName())) ;
            if (variadicOpClassName != null) {
              /* We just processed a variadic operator */
              GomClass cons =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, variadicOpClassName, mappingName, sortClassName, visitorName, slots, tom_empty_list_concHook()) 





;

              GomClass emptyClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(empty, abstracttypeName, variadicOpClassName, mappingName, sortClassName, visitorName, tom_empty_list_concSlotField(), tom_empty_list_concHook()) 






;

              operatorClass =  tom.gom.adt.objects.types.gomclass.VariadicOperatorClass.make(variadicOpClassName, abstracttypeName, mappingName, sortClassName, emptyClass, cons, tom_empty_list_concHook()) 





;
            } else {
              operatorClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, sortClassName, mappingName, sortClassName, visitorName, slots, tom_empty_list_concHook()) 





;
            }
            classForOperatorDecl.put( tomMatch429NameNumber_freshVar_1.getHeadconcOperator() ,operatorClass);
            classList =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(operatorClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass())) ;
          }}}}}}}}}}}}if ( tomMatch429NameNumber_end_3.isEmptyconcOperator() ) {tomMatch429NameNumber_end_3=tomMatch429NameNumber_begin_2;} else {tomMatch429NameNumber_end_3= tomMatch429NameNumber_end_3.getTailconcOperator() ;}}} while(!( tomMatch429NameNumber_end_3.equals(tomMatch429NameNumber_begin_2) ));}}}}}}

        // create the sort class and add it to the list
        GomClass sortClass =  tom.gom.adt.objects.types.gomclass.SortClass.make(sortClassName, abstracttypeName, mappingName, visitorName, visitableforwardName, allOperators, allVariadicOperators, slotFieldListFromSet(allSortSlots), tom_empty_list_concHook()) 







;
        sortGomClassForSortDecl.put(tom_sortDecl,sortClass);
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(sortClass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass())) ;
      }}}}}}}}}}}}}if ( tomMatch428NameNumber_end_10.isEmptyconcSort() ) {tomMatch428NameNumber_end_10=tomMatch428NameNumber_begin_9;} else {tomMatch428NameNumber_end_10= tomMatch428NameNumber_end_10.getTailconcSort() ;}}} while(!( tomMatch428NameNumber_end_10.equals(tomMatch428NameNumber_begin_9) ));}}}}}}}}if ( tomMatch428NameNumber_end_3.isEmptyconcModule() ) {tomMatch428NameNumber_end_3=tomMatch428NameNumber_begin_2;} else {tomMatch428NameNumber_end_3= tomMatch428NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch428NameNumber_end_3.equals(tomMatch428NameNumber_begin_2) ));}}}}}}if ( moduleList instanceof tom.gom.adt.gom.types.ModuleList ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch431NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch431NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_0=tomMatch431NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_begin_2=tomMatch431NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_end_3=tomMatch431NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_1=tomMatch431NameNumber_end_3;if (!( tomMatch431NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch431NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch431NameNumber_freshVar_6=  tomMatch431NameNumber_freshVar_1.getHeadconcModule() .getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch431NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_4= tomMatch431NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {




        String moduleName = tom_moduleDecl.getModuleName().getName();

        GomClassList allOperatorClasses = tom_empty_list_concGomClass();
        GomClassList allSortClasses = tom_empty_list_concGomClass();
        /* TODO improve this part : just for test */
        ModuleDeclList modlist = environment().getModuleDependency(tom_moduleDecl);
        while(!modlist.isEmptyconcModuleDecl()) {
          ModuleDecl imported = modlist.getHeadconcModuleDecl();
          modlist = modlist.getTailconcModuleDecl();
          SortList moduleSorts = getSortsForModule(imported,moduleList);
          SortList sortconsum = moduleSorts;
          while(!sortconsum.isEmptyconcSort()) {
            Sort sort = sortconsum.getHeadconcSort();
            sortconsum = sortconsum.getTailconcSort();
            if ( sort instanceof tom.gom.adt.gom.types.Sort ) {{  tom.gom.adt.gom.types.Sort  tomMatch432NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Sort )sort);if ( (tomMatch432NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch432NameNumber_freshVar_0= tomMatch432NameNumberfreshSubject_1.getDecl() ;if ( true ) {

                GomClass sortClass = (GomClass) sortGomClassForSortDecl.get(tomMatch432NameNumber_freshVar_0);
                allSortClasses =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(sortClass,tom_append_list_concGomClass(allSortClasses,tom_empty_list_concGomClass())) ;
              }}}}}

          }
          if ( moduleSorts instanceof tom.gom.adt.gom.types.SortList ) {{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortList )moduleSorts);if ( ((tomMatch433NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (tomMatch433NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_freshVar_0=tomMatch433NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_begin_2=tomMatch433NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_end_3=tomMatch433NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_freshVar_1=tomMatch433NameNumber_end_3;if (!( tomMatch433NameNumber_freshVar_1.isEmptyconcSort() )) {if ( ( tomMatch433NameNumber_freshVar_1.getHeadconcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_6=  tomMatch433NameNumber_freshVar_1.getHeadconcSort() .getOperators() ;if ( ((tomMatch433NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator) || (tomMatch433NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_7=tomMatch433NameNumber_freshVar_6;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_begin_9=tomMatch433NameNumber_freshVar_7;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_end_10=tomMatch433NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_8=tomMatch433NameNumber_end_10;if (!( tomMatch433NameNumber_freshVar_8.isEmptyconcOperator() )) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_11= tomMatch433NameNumber_freshVar_8.getTailconcOperator() ;{  tom.gom.adt.gom.types.SortList  tomMatch433NameNumber_freshVar_4= tomMatch433NameNumber_freshVar_1.getTailconcSort() ;if ( true ) {

              GomClass opClass = (GomClass) classForOperatorDecl.get( tomMatch433NameNumber_freshVar_8.getHeadconcOperator() );
              allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(opClass,tom_append_list_concGomClass(allOperatorClasses,tom_empty_list_concGomClass())) ;
              if ( opClass instanceof tom.gom.adt.objects.types.GomClass ) {{  tom.gom.adt.objects.types.GomClass  tomMatch434NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )opClass);if ( (tomMatch434NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.VariadicOperatorClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch434NameNumber_freshVar_0= tomMatch434NameNumberfreshSubject_1.getEmpty() ;{  tom.gom.adt.objects.types.GomClass  tomMatch434NameNumber_freshVar_1= tomMatch434NameNumberfreshSubject_1.getCons() ;if ( true ) {

                  allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(tomMatch434NameNumber_freshVar_0, tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(tomMatch434NameNumber_freshVar_1,tom_append_list_concGomClass(allOperatorClasses,tom_empty_list_concGomClass())) ) ;
                }}}}}}

            }}}}}if ( tomMatch433NameNumber_end_10.isEmptyconcOperator() ) {tomMatch433NameNumber_end_10=tomMatch433NameNumber_begin_9;} else {tomMatch433NameNumber_end_10= tomMatch433NameNumber_end_10.getTailconcOperator() ;}}} while(!( tomMatch433NameNumber_end_10.equals(tomMatch433NameNumber_begin_9) ));}}}}}}}}if ( tomMatch433NameNumber_end_3.isEmptyconcSort() ) {tomMatch433NameNumber_end_3=tomMatch433NameNumber_begin_2;} else {tomMatch433NameNumber_end_3= tomMatch433NameNumber_end_3.getTailconcSort() ;}}} while(!( tomMatch433NameNumber_end_3.equals(tomMatch433NameNumber_begin_2) ));}}}}}}

        }

        ClassName abstractTypeClassName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);

        // late creation of the visitors, since it has to know all operators
        ClassName visitorName = (ClassName)
          visitorNameForModule.get(tom_moduleDecl);
        GomClass visitorclass =  tom.gom.adt.objects.types.gomclass.VisitorClass.make(visitorName, allSortClasses, allOperatorClasses) ;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(visitorclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass())) ;

        /* create a VisitableFwd class */
        ClassNameList importedVisitors = allClassForImports(visitorNameForModule,tom_moduleDecl);
        ClassName visitablefwdName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName+"BasicStrategy") ;
        ClassNameList importedAbstractType = allClassForImports(abstractTypeNameForModule,tom_moduleDecl);
        GomClass visitablefwdclass =  tom.gom.adt.objects.types.gomclass.VisitableFwdClass.make(visitablefwdName, visitorName, importedVisitors, abstractTypeClassName, importedAbstractType, allSortClasses, allOperatorClasses) ;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(visitablefwdclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass())) ;

        /* create a TomMapping */
        ClassName tomMappingName = (ClassName)
          tomMappingNameForModule.get(tom_moduleDecl);
        GomClass tommappingclass =  tom.gom.adt.objects.types.gomclass.TomMapping.make(tomMappingName, visitablefwdName, allSortClasses, allOperatorClasses) 


;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(tommappingclass,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass())) ;

        /* create the abstractType */
        ClassNameList classSortList = sortClassNames(moduleList);
        ClassName abstractTypeName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);
        GomClass abstracttype =
           tom.gom.adt.objects.types.gomclass.AbstractTypeClass.make(abstractTypeName, tomMappingName, visitorName, classSortList, tom_empty_list_concHook()) 



;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(abstracttype,tom_append_list_concGomClass(classList,tom_empty_list_concGomClass())) ;

      }}}}}}}if ( tomMatch431NameNumber_end_3.isEmptyconcModule() ) {tomMatch431NameNumber_end_3=tomMatch431NameNumber_begin_2;} else {tomMatch431NameNumber_end_3= tomMatch431NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch431NameNumber_end_3.equals(tomMatch431NameNumber_begin_2) ));}}}}}}

    /* Call the hook processor here, to attach hooks to the correct classes */
    /* fist compute the mapping "Decl" -> "ClassName" */
    Map declToClassName = new HashMap();
    /* for ModuleDecl */
    declToClassName.putAll(abstractTypeNameForModule);
    /* for SortDecl */
    Iterator it = sortGomClassForSortDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    /* for OperatorDecl */
    it = classForOperatorDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    HookCompiler hcompiler = new HookCompiler(sortClassNameForSortDecl);
    classList = hcompiler.compile(hookDecls,classList,declToClassName);
    return classList;
  }

  private ClassNameList sortClassNames(ModuleList moduleList) {
    ClassNameList classNames = tom_empty_list_concClassName();
    if ( moduleList instanceof tom.gom.adt.gom.types.ModuleList ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch435NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch435NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_0=tomMatch435NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_begin_2=tomMatch435NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_end_3=tomMatch435NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_1=tomMatch435NameNumber_end_3;if (!( tomMatch435NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch435NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_6=  tomMatch435NameNumber_freshVar_1.getHeadconcModule() .getSorts() ;if ( ((tomMatch435NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort) || (tomMatch435NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_7=tomMatch435NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_begin_9=tomMatch435NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_end_10=tomMatch435NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_8=tomMatch435NameNumber_end_10;if (!( tomMatch435NameNumber_freshVar_8.isEmptyconcSort() )) {if ( ( tomMatch435NameNumber_freshVar_8.getHeadconcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch435NameNumber_freshVar_13=  tomMatch435NameNumber_freshVar_8.getHeadconcSort() .getDecl() ;if ( (tomMatch435NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch435NameNumber_freshVar_14= tomMatch435NameNumber_freshVar_13.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch435NameNumber_freshVar_15= tomMatch435NameNumber_freshVar_13.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch435NameNumber_freshVar_11= tomMatch435NameNumber_freshVar_8.getTailconcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_4= tomMatch435NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {





        classNames =  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make( tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch435NameNumber_freshVar_15)+".types", tomMatch435NameNumber_freshVar_14) ,tom_append_list_concClassName(classNames,tom_empty_list_concClassName())) ;
      }}}}}}}}}}if ( tomMatch435NameNumber_end_10.isEmptyconcSort() ) {tomMatch435NameNumber_end_10=tomMatch435NameNumber_begin_9;} else {tomMatch435NameNumber_end_10= tomMatch435NameNumber_end_10.getTailconcSort() ;}}} while(!( tomMatch435NameNumber_end_10.equals(tomMatch435NameNumber_begin_9) ));}}}}}}}}if ( tomMatch435NameNumber_end_3.isEmptyconcModule() ) {tomMatch435NameNumber_end_3=tomMatch435NameNumber_begin_2;} else {tomMatch435NameNumber_end_3= tomMatch435NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch435NameNumber_end_3.equals(tomMatch435NameNumber_begin_2) ));}}}}}}

    return classNames;
  }

  /*
   * Get all sort definitions for a given module
   */
  private SortList getSortsForModule(ModuleDecl module, ModuleList moduleList) {
    if ( module instanceof tom.gom.adt.gom.types.ModuleDecl ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch436NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )module);if ( moduleList instanceof tom.gom.adt.gom.types.ModuleList ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( (tomMatch436NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {if ( ((tomMatch436NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule) || (tomMatch436NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_freshVar_0=tomMatch436NameNumberfreshSubject_2;{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_begin_2=tomMatch436NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_end_3=tomMatch436NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_freshVar_1=tomMatch436NameNumber_end_3;if (!( tomMatch436NameNumber_freshVar_1.isEmptyconcModule() )) {if ( ( tomMatch436NameNumber_freshVar_1.getHeadconcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch436NameNumber_freshVar_6=  tomMatch436NameNumber_freshVar_1.getHeadconcModule() .getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch436NameNumber_freshVar_7=  tomMatch436NameNumber_freshVar_1.getHeadconcModule() .getSorts() ;if ( tomMatch436NameNumberfreshSubject_1.equals(tomMatch436NameNumber_freshVar_6) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch436NameNumber_freshVar_4= tomMatch436NameNumber_freshVar_1.getTailconcModule() ;if ( true ) {


        return tomMatch436NameNumber_freshVar_7;
      }}}}}}}}if ( tomMatch436NameNumber_end_3.isEmptyconcModule() ) {tomMatch436NameNumber_end_3=tomMatch436NameNumber_begin_2;} else {tomMatch436NameNumber_end_3= tomMatch436NameNumber_end_3.getTailconcModule() ;}}} while(!( tomMatch436NameNumber_end_3.equals(tomMatch436NameNumber_begin_2) ));}}}}}}}}}

    throw new RuntimeException("Module " + module + " not found");
  }

  public static String packagePrefix(ModuleDecl moduleDecl) {
    String pkgPrefix = "";
    if ( moduleDecl instanceof tom.gom.adt.gom.types.ModuleDecl ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch437NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )moduleDecl);if ( (tomMatch437NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch437NameNumber_freshVar_0= tomMatch437NameNumberfreshSubject_1.getModuleName() ;{  String  tomMatch437NameNumber_freshVar_1= tomMatch437NameNumberfreshSubject_1.getPkg() ;if ( (tomMatch437NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch437NameNumber_freshVar_2= tomMatch437NameNumber_freshVar_0.getName() ;{  String  tom_name=tomMatch437NameNumber_freshVar_2;{  String  tom_pkgopt=tomMatch437NameNumber_freshVar_1;if ( true ) {

        if(!tom_pkgopt.equals("")) {
          pkgPrefix = tom_pkgopt+ "." + tom_name;
        } else {
          pkgPrefix = tom_name;
        }
      }}}}}}}}}}

    return pkgPrefix.toLowerCase();
  }

  private SlotFieldList slotFieldListFromSet(Set slotFieldSet) {
    Iterator it = slotFieldSet.iterator();
    SlotFieldList list = tom_empty_list_concSlotField();
    while(it.hasNext()) {
      SlotField slot = (SlotField) it.next();
      list = tom_append_list_concSlotField(list, tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(slot,tom_empty_list_concSlotField()) );
    }
    return list;
  }

  private ClassNameList allClassForImports(
      Map classMap,
      ModuleDecl moduleDecl) {
    ClassNameList importedList = tom_empty_list_concClassName();
    ModuleDeclList importedModulelist = environment().getModuleDependency(moduleDecl);
    while(!importedModulelist.isEmptyconcModuleDecl()) {
      ModuleDecl imported = importedModulelist.getHeadconcModuleDecl();
      importedModulelist = importedModulelist.getTailconcModuleDecl();
      if (!imported.equals(moduleDecl)) {
        ClassName importedclass = (ClassName)classMap.get(imported);
        importedList =  tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(importedclass,tom_append_list_concClassName(importedList,tom_empty_list_concClassName())) ;
      }
    }
    return importedList;
  }
}
