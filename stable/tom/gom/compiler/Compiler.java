/* Generated by TOM (version 2.6): Do not edit this file *//*
 * Gom
 *
 * Copyright (c) 2006-2008, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;
import tom.library.sl.VisitFailure;

public class Compiler {

  /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */  /* Generated by TOM (version 2.6): Do not edit this file */    public static   tom.gom.adt.objects.types.SlotFieldList  tom_append_list_ConcSlotField( tom.gom.adt.objects.types.SlotFieldList l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {     if( l1.isEmptyConcSlotField() ) {       return l2;     } else if( l2.isEmptyConcSlotField() ) {       return l1;     } else if(  l1.getTailConcSlotField() .isEmptyConcSlotField() ) {       return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( l1.getHeadConcSlotField() ,l2) ;     } else {       return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( l1.getHeadConcSlotField() ,tom_append_list_ConcSlotField( l1.getTailConcSlotField() ,l2)) ;     }   }   public static   tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_ConcSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end, tom.gom.adt.objects.types.SlotFieldList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSlotField()  ||  (end== tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( begin.getHeadConcSlotField() ,( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_ConcSlotField( begin.getTailConcSlotField() ,end,tail)) ;   }      public static   tom.gom.adt.objects.types.GomClassList  tom_append_list_ConcGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList  l2) {     if( l1.isEmptyConcGomClass() ) {       return l2;     } else if( l2.isEmptyConcGomClass() ) {       return l1;     } else if(  l1.getTailConcGomClass() .isEmptyConcGomClass() ) {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,l2) ;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,tom_append_list_ConcGomClass( l1.getTailConcGomClass() ,l2)) ;     }   }   public static   tom.gom.adt.objects.types.GomClassList  tom_get_slice_ConcGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end, tom.gom.adt.objects.types.GomClassList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcGomClass()  ||  (end== tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( begin.getHeadConcGomClass() ,( tom.gom.adt.objects.types.GomClassList )tom_get_slice_ConcGomClass( begin.getTailConcGomClass() ,end,tail)) ;   }      public static   tom.gom.adt.objects.types.ClassNameList  tom_append_list_ConcClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList  l2) {     if( l1.isEmptyConcClassName() ) {       return l2;     } else if( l2.isEmptyConcClassName() ) {       return l1;     } else if(  l1.getTailConcClassName() .isEmptyConcClassName() ) {       return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( l1.getHeadConcClassName() ,l2) ;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( l1.getHeadConcClassName() ,tom_append_list_ConcClassName( l1.getTailConcClassName() ,l2)) ;     }   }   public static   tom.gom.adt.objects.types.ClassNameList  tom_get_slice_ConcClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end, tom.gom.adt.objects.types.ClassNameList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcClassName()  ||  (end== tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( begin.getHeadConcClassName() ,( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_ConcClassName( begin.getTailConcClassName() ,end,tail)) ;   }      public static   tom.gom.adt.objects.types.HookList  tom_append_list_ConcHook( tom.gom.adt.objects.types.HookList l1,  tom.gom.adt.objects.types.HookList  l2) {     if( l1.isEmptyConcHook() ) {       return l2;     } else if( l2.isEmptyConcHook() ) {       return l1;     } else if(  l1.getTailConcHook() .isEmptyConcHook() ) {       return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( l1.getHeadConcHook() ,l2) ;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( l1.getHeadConcHook() ,tom_append_list_ConcHook( l1.getTailConcHook() ,l2)) ;     }   }   public static   tom.gom.adt.objects.types.HookList  tom_get_slice_ConcHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end, tom.gom.adt.objects.types.HookList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcHook()  ||  (end== tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( begin.getHeadConcHook() ,( tom.gom.adt.objects.types.HookList )tom_get_slice_ConcHook( begin.getTailConcHook() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyConcOperator() ) {       return l2;     } else if( l2.isEmptyConcOperator() ) {       return l1;     } else if(  l1.getTailConcOperator() .isEmptyConcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,tom_append_list_ConcOperator( l1.getTailConcOperator() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcOperator()  ||  (end== tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( begin.getHeadConcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_ConcOperator( begin.getTailConcOperator() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.SlotList  tom_append_list_ConcSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyConcSlot() ) {       return l2;     } else if( l2.isEmptyConcSlot() ) {       return l1;     } else if(  l1.getTailConcSlot() .isEmptyConcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,tom_append_list_ConcSlot( l1.getTailConcSlot() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.SlotList  tom_get_slice_ConcSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSlot()  ||  (end== tom.gom.adt.gom.types.slotlist.EmptyConcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( begin.getHeadConcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_ConcSlot( begin.getTailConcSlot() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.SortList  tom_append_list_ConcSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyConcSort() ) {       return l2;     } else if( l2.isEmptyConcSort() ) {       return l1;     } else if(  l1.getTailConcSort() .isEmptyConcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,tom_append_list_ConcSort( l1.getTailConcSort() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.SortList  tom_get_slice_ConcSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcSort()  ||  (end== tom.gom.adt.gom.types.sortlist.EmptyConcSort.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( begin.getHeadConcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_ConcSort( begin.getTailConcSort() ,end,tail)) ;   }      public static   tom.gom.adt.gom.types.ModuleList  tom_append_list_ConcModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyConcModule() ) {       return l2;     } else if( l2.isEmptyConcModule() ) {       return l1;     } else if(  l1.getTailConcModule() .isEmptyConcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,tom_append_list_ConcModule( l1.getTailConcModule() ,l2)) ;     }   }   public static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_ConcModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyConcModule()  ||  (end== tom.gom.adt.gom.types.modulelist.EmptyConcModule.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( begin.getHeadConcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_ConcModule( begin.getTailConcModule() ,end,tail)) ;   }    

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  Map sortClassNameForSortDecl = environment().builtinSortClassMap();

  public GomClassList compile(ModuleList moduleList, HookDeclList hookDecls) {
    GomClassList classList =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;

    /* ModuleDecl -> (AbstractType) ClassName */
    Map abstractTypeNameForModule = new HashMap();
    Map tomMappingNameForModule = new HashMap();
    /* SortDecl -> SortClass */
    Map sortGomClassForSortDecl = new HashMap();
    /* OperatorDecl -> OperatorClass */
    Map classForOperatorDecl = new HashMap();
    /* For each module */
    {{ Object tomMatch473NameNumber_freshVar_0=moduleList;if ( (tomMatch473NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch473NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.ModuleList )tomMatch473NameNumber_freshVar_0);{  tom.gom.adt.gom.types.ModuleList  tomMatch473NameNumber_freshVar_1=tomMatch473NameNumber_freshSubject_1;if ( ((tomMatch473NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch473NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch473NameNumber_begin_3=tomMatch473NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch473NameNumber_end_4=tomMatch473NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch473NameNumber_freshVar_2=tomMatch473NameNumber_end_4;if (!( tomMatch473NameNumber_freshVar_2.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch473NameNumber_freshVar_8= tomMatch473NameNumber_freshVar_2.getHeadConcModule() ;if ( (tomMatch473NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch473NameNumber_freshVar_7= tomMatch473NameNumber_freshVar_8.getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch473NameNumber_freshVar_7;{  tom.gom.adt.gom.types.ModuleList  tomMatch473NameNumber_freshVar_5= tomMatch473NameNumber_freshVar_2.getTailConcModule() ;

        String moduleName = tom_moduleDecl.getModuleName().getName();

        /* create an AbstractType class */
        ClassName abstractTypeName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName+"AbstractType") 

;

        ClassName tomMappingName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName) 

;
        tomMappingNameForModule.put(tom_moduleDecl,tomMappingName);

        abstractTypeNameForModule.put(tom_moduleDecl,abstractTypeName);
      }}}}}}}if ( tomMatch473NameNumber_end_4.isEmptyConcModule() ) {tomMatch473NameNumber_end_4=tomMatch473NameNumber_begin_3;} else {tomMatch473NameNumber_end_4= tomMatch473NameNumber_end_4.getTailConcModule() ;}}} while(!( (tomMatch473NameNumber_end_4==tomMatch473NameNumber_begin_3) ));}}}}}}}}


    /* For each sort, create a sort implementation, and operator implementations
       (we don't need to do that per module, since each operator and sort knows
       to which module it belongs) */
    {{ Object tomMatch474NameNumber_freshVar_0=moduleList;if ( (tomMatch474NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch474NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.ModuleList )tomMatch474NameNumber_freshVar_0);{  tom.gom.adt.gom.types.ModuleList  tomMatch474NameNumber_freshVar_1=tomMatch474NameNumber_freshSubject_1;if ( ((tomMatch474NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch474NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch474NameNumber_begin_3=tomMatch474NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch474NameNumber_end_4=tomMatch474NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch474NameNumber_freshVar_2=tomMatch474NameNumber_end_4;if (!( tomMatch474NameNumber_freshVar_2.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch474NameNumber_freshVar_8= tomMatch474NameNumber_freshVar_2.getHeadConcModule() ;if ( (tomMatch474NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch474NameNumber_freshVar_7= tomMatch474NameNumber_freshVar_8.getSorts() ;{  tom.gom.adt.gom.types.SortList  tomMatch474NameNumber_freshVar_9=tomMatch474NameNumber_freshVar_7;if ( ((tomMatch474NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch474NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch474NameNumber_begin_11=tomMatch474NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortList  tomMatch474NameNumber_end_12=tomMatch474NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.SortList  tomMatch474NameNumber_freshVar_10=tomMatch474NameNumber_end_12;if (!( tomMatch474NameNumber_freshVar_10.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch474NameNumber_freshVar_16= tomMatch474NameNumber_freshVar_10.getHeadConcSort() ;if ( (tomMatch474NameNumber_freshVar_16 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch474NameNumber_freshVar_15= tomMatch474NameNumber_freshVar_16.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch474NameNumber_freshVar_19=tomMatch474NameNumber_freshVar_15;if ( (tomMatch474NameNumber_freshVar_19 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch474NameNumber_freshVar_17= tomMatch474NameNumber_freshVar_19.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch474NameNumber_freshVar_18= tomMatch474NameNumber_freshVar_19.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch474NameNumber_freshVar_13= tomMatch474NameNumber_freshVar_10.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch474NameNumber_freshVar_5= tomMatch474NameNumber_freshVar_2.getTailConcModule() ;





        // get the class name for the sort
        ClassName sortClassName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch474NameNumber_freshVar_18)+".types", tomMatch474NameNumber_freshVar_17) ;
        sortClassNameForSortDecl.put(tomMatch474NameNumber_freshVar_15,sortClassName);
      }}}}}}}}}}}if ( tomMatch474NameNumber_end_12.isEmptyConcSort() ) {tomMatch474NameNumber_end_12=tomMatch474NameNumber_begin_11;} else {tomMatch474NameNumber_end_12= tomMatch474NameNumber_end_12.getTailConcSort() ;}}} while(!( (tomMatch474NameNumber_end_12==tomMatch474NameNumber_begin_11) ));}}}}}}}}}if ( tomMatch474NameNumber_end_4.isEmptyConcModule() ) {tomMatch474NameNumber_end_4=tomMatch474NameNumber_begin_3;} else {tomMatch474NameNumber_end_4= tomMatch474NameNumber_end_4.getTailConcModule() ;}}} while(!( (tomMatch474NameNumber_end_4==tomMatch474NameNumber_begin_3) ));}}}}}}}}{{ Object tomMatch475NameNumber_freshVar_0=moduleList;if ( (tomMatch475NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch475NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.ModuleList )tomMatch475NameNumber_freshVar_0);{  tom.gom.adt.gom.types.ModuleList  tomMatch475NameNumber_freshVar_1=tomMatch475NameNumber_freshSubject_1;if ( ((tomMatch475NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch475NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch475NameNumber_begin_3=tomMatch475NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch475NameNumber_end_4=tomMatch475NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch475NameNumber_freshVar_2=tomMatch475NameNumber_end_4;if (!( tomMatch475NameNumber_freshVar_2.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch475NameNumber_freshVar_8= tomMatch475NameNumber_freshVar_2.getHeadConcModule() ;if ( (tomMatch475NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch475NameNumber_freshVar_7= tomMatch475NameNumber_freshVar_8.getSorts() ;{  tom.gom.adt.gom.types.SortList  tomMatch475NameNumber_freshVar_9=tomMatch475NameNumber_freshVar_7;if ( ((tomMatch475NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch475NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch475NameNumber_begin_11=tomMatch475NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortList  tomMatch475NameNumber_end_12=tomMatch475NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.SortList  tomMatch475NameNumber_freshVar_10=tomMatch475NameNumber_end_12;if (!( tomMatch475NameNumber_freshVar_10.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch475NameNumber_freshVar_17= tomMatch475NameNumber_freshVar_10.getHeadConcSort() ;if ( (tomMatch475NameNumber_freshVar_17 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch475NameNumber_freshVar_15= tomMatch475NameNumber_freshVar_17.getDecl() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch475NameNumber_freshVar_16= tomMatch475NameNumber_freshVar_17.getOperatorDecls() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch475NameNumber_freshVar_19=tomMatch475NameNumber_freshVar_15;if ( (tomMatch475NameNumber_freshVar_19 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch475NameNumber_freshVar_18= tomMatch475NameNumber_freshVar_19.getModuleDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch475NameNumber_freshVar_18;{  tom.gom.adt.gom.types.SortDecl  tom_sortDecl=tomMatch475NameNumber_freshVar_15;{  tom.gom.adt.gom.types.SortList  tomMatch475NameNumber_freshVar_13= tomMatch475NameNumber_freshVar_10.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch475NameNumber_freshVar_5= tomMatch475NameNumber_freshVar_2.getTailConcModule() ;








        // get the class name for the sort
        ClassName sortClassName = (ClassName)sortClassNameForSortDecl.get(tom_sortDecl);
        ClassName abstracttypeName = (ClassName)abstractTypeNameForModule.get(tom_moduleDecl);
        ClassName mappingName = (ClassName)tomMappingNameForModule.get(tom_moduleDecl);
        // create operator classes. Also, store a list of all operators for the sort class
        // use a Set to collect slots and avoid duplicates
        Set allSortSlots = new HashSet();
        ClassNameList allOperators =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
        ClassNameList allVariadicOperators =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
        {{ Object tomMatch476NameNumber_freshVar_0=tomMatch475NameNumber_freshVar_16;if ( (tomMatch476NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.OperatorDeclList) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch476NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.OperatorDeclList )tomMatch476NameNumber_freshVar_0);{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch476NameNumber_freshVar_1=tomMatch476NameNumber_freshSubject_1;if ( ((tomMatch476NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.operatordecllist.ConsConcOperator) || (tomMatch476NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch476NameNumber_begin_3=tomMatch476NameNumber_freshVar_1;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch476NameNumber_end_4=tomMatch476NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch476NameNumber_freshVar_2=tomMatch476NameNumber_end_4;if (!( tomMatch476NameNumber_freshVar_2.isEmptyConcOperator() )) {{  tom.gom.adt.gom.types.OperatorDecl  tomMatch476NameNumber_freshVar_10= tomMatch476NameNumber_freshVar_2.getHeadConcOperator() ;if ( (tomMatch476NameNumber_freshVar_10 instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch476NameNumber_freshVar_7= tomMatch476NameNumber_freshVar_10.getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch476NameNumber_freshVar_8= tomMatch476NameNumber_freshVar_10.getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch476NameNumber_freshVar_9= tomMatch476NameNumber_freshVar_10.getProd() ;{  String  tom_opname=tomMatch476NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortDecl  tomMatch476NameNumber_freshVar_12=tomMatch476NameNumber_freshVar_8;if ( (tomMatch476NameNumber_freshVar_12 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch476NameNumber_freshVar_11= tomMatch476NameNumber_freshVar_12.getName() ;{  tom.gom.adt.gom.types.TypedProduction  tom_typedproduction=tomMatch476NameNumber_freshVar_9;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch476NameNumber_freshVar_5= tomMatch476NameNumber_freshVar_2.getTailConcOperator() ;





            String sortNamePackage = tomMatch476NameNumber_freshVar_11.toLowerCase();
            ClassName operatorClassName =
               tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
            SlotFieldList slots =  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ;
            ClassName variadicOpClassName = null;
            ClassName empty = null;
            {{ Object tomMatch477NameNumber_freshVar_0=tom_typedproduction;if ( (tomMatch477NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.TypedProduction) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch477NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.TypedProduction )tomMatch477NameNumber_freshVar_0);{  tom.gom.adt.gom.types.TypedProduction  tomMatch477NameNumber_freshVar_2=tomMatch477NameNumber_freshSubject_1;if ( (tomMatch477NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch477NameNumber_freshVar_1= tomMatch477NameNumber_freshVar_2.getSort() ;

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch477NameNumber_freshVar_1);
                SlotField slotHead =  tom.gom.adt.objects.types.slotfield.SlotField.make("Head"+tom_opname, clsName) ;
                SlotField slotTail =  tom.gom.adt.objects.types.slotfield.SlotField.make("Tail"+tom_opname, sortClassName) ;
                allSortSlots.add(slotHead);
                allSortSlots.add(slotTail);
                slots =  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotHead, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotTail, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) ) ;
                // as the operator is variadic, add a Cons and an Empty
                variadicOpClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
                allVariadicOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(variadicOpClassName,tom_append_list_ConcClassName(allVariadicOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
                empty =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Empty"+tom_opname) ;
                operatorClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Cons"+tom_opname) ;

                allOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(empty,tom_append_list_ConcClassName(allOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
              }}}}}}{ Object tomMatch477NameNumber_freshVar_3=tom_typedproduction;if ( (tomMatch477NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.TypedProduction) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch477NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.TypedProduction )tomMatch477NameNumber_freshVar_3);{  tom.gom.adt.gom.types.TypedProduction  tomMatch477NameNumber_freshVar_5=tomMatch477NameNumber_freshSubject_1;if ( (tomMatch477NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.typedproduction.Slots) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch477NameNumber_freshVar_4= tomMatch477NameNumber_freshVar_5.getSlots() ;{  tom.gom.adt.gom.types.SlotList  tomMatch477NameNumber_freshVar_6=tomMatch477NameNumber_freshVar_4;if ( ((tomMatch477NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.slotlist.ConsConcSlot) || (tomMatch477NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.slotlist.EmptyConcSlot)) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch477NameNumber_begin_8=tomMatch477NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SlotList  tomMatch477NameNumber_end_9=tomMatch477NameNumber_freshVar_6;do {{{  tom.gom.adt.gom.types.SlotList  tomMatch477NameNumber_freshVar_7=tomMatch477NameNumber_end_9;if (!( tomMatch477NameNumber_freshVar_7.isEmptyConcSlot() )) {{  tom.gom.adt.gom.types.Slot  tomMatch477NameNumber_freshVar_14= tomMatch477NameNumber_freshVar_7.getHeadConcSlot() ;if ( (tomMatch477NameNumber_freshVar_14 instanceof tom.gom.adt.gom.types.slot.Slot) ) {{  String  tomMatch477NameNumber_freshVar_12= tomMatch477NameNumber_freshVar_14.getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch477NameNumber_freshVar_13= tomMatch477NameNumber_freshVar_14.getSort() ;{  tom.gom.adt.gom.types.SlotList  tomMatch477NameNumber_freshVar_10= tomMatch477NameNumber_freshVar_7.getTailConcSlot() ;

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch477NameNumber_freshVar_13);
                SlotField slotfield =  tom.gom.adt.objects.types.slotfield.SlotField.make(tomMatch477NameNumber_freshVar_12, clsName) ;
                allSortSlots.add(slotfield);
                slots = tom_append_list_ConcSlotField(slots, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotfield, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) );
              }}}}}}}if ( tomMatch477NameNumber_end_9.isEmptyConcSlot() ) {tomMatch477NameNumber_end_9=tomMatch477NameNumber_begin_8;} else {tomMatch477NameNumber_end_9= tomMatch477NameNumber_end_9.getTailConcSlot() ;}}} while(!( (tomMatch477NameNumber_end_9==tomMatch477NameNumber_begin_8) ));}}}}}}}}}}}

            GomClass operatorClass;
            allOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(operatorClassName,tom_append_list_ConcClassName(allOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
            if(variadicOpClassName != null) {
              /* We just processed a variadic operator */
              GomClass consClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, variadicOpClassName, mappingName, sortClassName, slots,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;

              GomClass emptyClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(empty, abstracttypeName, variadicOpClassName, mappingName, sortClassName,  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;

              operatorClass =  tom.gom.adt.objects.types.gomclass.VariadicOperatorClass.make(variadicOpClassName, abstracttypeName, mappingName, sortClassName, emptyClass, consClass,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
            } else {
              operatorClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, sortClassName, mappingName, sortClassName, slots,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
            }
            classForOperatorDecl.put( tomMatch476NameNumber_freshVar_2.getHeadConcOperator() ,operatorClass);
            classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(operatorClass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
          }}}}}}}}}}}}}if ( tomMatch476NameNumber_end_4.isEmptyConcOperator() ) {tomMatch476NameNumber_end_4=tomMatch476NameNumber_begin_3;} else {tomMatch476NameNumber_end_4= tomMatch476NameNumber_end_4.getTailConcOperator() ;}}} while(!( (tomMatch476NameNumber_end_4==tomMatch476NameNumber_begin_3) ));}}}}}}}}

        // create the sort class and add it to the list
        GomClass sortClass =  tom.gom.adt.objects.types.gomclass.SortClass.make(sortClassName, abstracttypeName, mappingName, allOperators, allVariadicOperators, slotFieldListFromSet(allSortSlots),  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
        sortGomClassForSortDecl.put(tom_sortDecl,sortClass);
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(sortClass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
      }}}}}}}}}}}}}if ( tomMatch475NameNumber_end_12.isEmptyConcSort() ) {tomMatch475NameNumber_end_12=tomMatch475NameNumber_begin_11;} else {tomMatch475NameNumber_end_12= tomMatch475NameNumber_end_12.getTailConcSort() ;}}} while(!( (tomMatch475NameNumber_end_12==tomMatch475NameNumber_begin_11) ));}}}}}}}}}if ( tomMatch475NameNumber_end_4.isEmptyConcModule() ) {tomMatch475NameNumber_end_4=tomMatch475NameNumber_begin_3;} else {tomMatch475NameNumber_end_4= tomMatch475NameNumber_end_4.getTailConcModule() ;}}} while(!( (tomMatch475NameNumber_end_4==tomMatch475NameNumber_begin_3) ));}}}}}}}}{{ Object tomMatch478NameNumber_freshVar_0=moduleList;if ( (tomMatch478NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch478NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.ModuleList )tomMatch478NameNumber_freshVar_0);{  tom.gom.adt.gom.types.ModuleList  tomMatch478NameNumber_freshVar_1=tomMatch478NameNumber_freshSubject_1;if ( ((tomMatch478NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch478NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch478NameNumber_begin_3=tomMatch478NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch478NameNumber_end_4=tomMatch478NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch478NameNumber_freshVar_2=tomMatch478NameNumber_end_4;if (!( tomMatch478NameNumber_freshVar_2.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch478NameNumber_freshVar_8= tomMatch478NameNumber_freshVar_2.getHeadConcModule() ;if ( (tomMatch478NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch478NameNumber_freshVar_7= tomMatch478NameNumber_freshVar_8.getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch478NameNumber_freshVar_7;{  tom.gom.adt.gom.types.ModuleList  tomMatch478NameNumber_freshVar_5= tomMatch478NameNumber_freshVar_2.getTailConcModule() ;




        String moduleName = tom_moduleDecl.getModuleName().getName();

        GomClassList allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;
        GomClassList allSortClasses =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;
        /* TODO improve this part : just for test */
        ModuleDeclList modlist = environment().getModuleDependency(tom_moduleDecl);
        while(!modlist.isEmptyConcModuleDecl()) {
          ModuleDecl imported = modlist.getHeadConcModuleDecl();
          modlist = modlist.getTailConcModuleDecl();
          SortList moduleSorts = getSortsForModule(imported,moduleList);
          SortList sortconsum = moduleSorts;
          while(!sortconsum.isEmptyConcSort()) {
            Sort sort = sortconsum.getHeadConcSort();
            sortconsum = sortconsum.getTailConcSort();
            {{ Object tomMatch479NameNumber_freshVar_0=sort;if ( (tomMatch479NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.Sort) ) {{  tom.gom.adt.gom.types.Sort  tomMatch479NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.Sort )tomMatch479NameNumber_freshVar_0);{  tom.gom.adt.gom.types.Sort  tomMatch479NameNumber_freshVar_2=tomMatch479NameNumber_freshSubject_1;if ( (tomMatch479NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch479NameNumber_freshVar_1= tomMatch479NameNumber_freshVar_2.getDecl() ;

                GomClass sortClass = (GomClass) sortGomClassForSortDecl.get(tomMatch479NameNumber_freshVar_1);
                allSortClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(sortClass,tom_append_list_ConcGomClass(allSortClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
              }}}}}}}

          }
          {{ Object tomMatch480NameNumber_freshVar_0=moduleSorts;if ( (tomMatch480NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch480NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.SortList )tomMatch480NameNumber_freshVar_0);{  tom.gom.adt.gom.types.SortList  tomMatch480NameNumber_freshVar_1=tomMatch480NameNumber_freshSubject_1;if ( ((tomMatch480NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch480NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch480NameNumber_begin_3=tomMatch480NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SortList  tomMatch480NameNumber_end_4=tomMatch480NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.SortList  tomMatch480NameNumber_freshVar_2=tomMatch480NameNumber_end_4;if (!( tomMatch480NameNumber_freshVar_2.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch480NameNumber_freshVar_8= tomMatch480NameNumber_freshVar_2.getHeadConcSort() ;if ( (tomMatch480NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch480NameNumber_freshVar_7= tomMatch480NameNumber_freshVar_8.getOperatorDecls() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch480NameNumber_freshVar_9=tomMatch480NameNumber_freshVar_7;if ( ((tomMatch480NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.operatordecllist.ConsConcOperator) || (tomMatch480NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch480NameNumber_begin_11=tomMatch480NameNumber_freshVar_9;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch480NameNumber_end_12=tomMatch480NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch480NameNumber_freshVar_10=tomMatch480NameNumber_end_12;if (!( tomMatch480NameNumber_freshVar_10.isEmptyConcOperator() )) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch480NameNumber_freshVar_13= tomMatch480NameNumber_freshVar_10.getTailConcOperator() ;{  tom.gom.adt.gom.types.SortList  tomMatch480NameNumber_freshVar_5= tomMatch480NameNumber_freshVar_2.getTailConcSort() ;

              GomClass opClass = (GomClass) classForOperatorDecl.get( tomMatch480NameNumber_freshVar_10.getHeadConcOperator() );
              allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(opClass,tom_append_list_ConcGomClass(allOperatorClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
              {{ Object tomMatch481NameNumber_freshVar_0=opClass;if ( (tomMatch481NameNumber_freshVar_0 instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch481NameNumber_freshSubject_1=(( tom.gom.adt.objects.types.GomClass )tomMatch481NameNumber_freshVar_0);{  tom.gom.adt.objects.types.GomClass  tomMatch481NameNumber_freshVar_3=tomMatch481NameNumber_freshSubject_1;if ( (tomMatch481NameNumber_freshVar_3 instanceof tom.gom.adt.objects.types.gomclass.VariadicOperatorClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch481NameNumber_freshVar_1= tomMatch481NameNumber_freshVar_3.getEmpty() ;{  tom.gom.adt.objects.types.GomClass  tomMatch481NameNumber_freshVar_2= tomMatch481NameNumber_freshVar_3.getCons() ;

                  allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tomMatch481NameNumber_freshVar_1, tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tomMatch481NameNumber_freshVar_2,tom_append_list_ConcGomClass(allOperatorClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ) ;
                }}}}}}}}

            }}}}if ( tomMatch480NameNumber_end_12.isEmptyConcOperator() ) {tomMatch480NameNumber_end_12=tomMatch480NameNumber_begin_11;} else {tomMatch480NameNumber_end_12= tomMatch480NameNumber_end_12.getTailConcOperator() ;}}} while(!( (tomMatch480NameNumber_end_12==tomMatch480NameNumber_begin_11) ));}}}}}}}}}if ( tomMatch480NameNumber_end_4.isEmptyConcSort() ) {tomMatch480NameNumber_end_4=tomMatch480NameNumber_begin_3;} else {tomMatch480NameNumber_end_4= tomMatch480NameNumber_end_4.getTailConcSort() ;}}} while(!( (tomMatch480NameNumber_end_4==tomMatch480NameNumber_begin_3) ));}}}}}}}}

        }

        ClassName abstractTypeClassName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);

        /* create a TomMapping */
        ClassName tomMappingName = (ClassName)
          tomMappingNameForModule.get(tom_moduleDecl);
        GomClass tommappingclass =  tom.gom.adt.objects.types.gomclass.TomMapping.make(tomMappingName, allSortClasses, allOperatorClasses) 

;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tommappingclass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;

        /* create the abstractType */
        ClassNameList classSortList = sortClassNames(moduleList);
        ClassName abstractTypeName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);
        GomClass abstracttype =
           tom.gom.adt.objects.types.gomclass.AbstractTypeClass.make(abstractTypeName, tomMappingName, classSortList,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 


;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(abstracttype,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;

      }}}}}}}if ( tomMatch478NameNumber_end_4.isEmptyConcModule() ) {tomMatch478NameNumber_end_4=tomMatch478NameNumber_begin_3;} else {tomMatch478NameNumber_end_4= tomMatch478NameNumber_end_4.getTailConcModule() ;}}} while(!( (tomMatch478NameNumber_end_4==tomMatch478NameNumber_begin_3) ));}}}}}}}}

    /* Call the hook processor here, to attach hooks to the correct classes */
    /* fist compute the mapping "Decl" -> "ClassName" */
    Map declToClassName = new HashMap();
    /* for ModuleDecl */
    declToClassName.putAll(abstractTypeNameForModule);
    /* for SortDecl */
    Iterator it = sortGomClassForSortDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    /* for OperatorDecl */
    it = classForOperatorDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    HookCompiler hcompiler = new HookCompiler(sortClassNameForSortDecl);
    classList = hcompiler.compile(hookDecls,classList,declToClassName);
    return classList;
  }

  private ClassNameList sortClassNames(ModuleList moduleList) {
    ClassNameList classNames =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
    {{ Object tomMatch482NameNumber_freshVar_0=moduleList;if ( (tomMatch482NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch482NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.ModuleList )tomMatch482NameNumber_freshVar_0);{  tom.gom.adt.gom.types.ModuleList  tomMatch482NameNumber_freshVar_1=tomMatch482NameNumber_freshSubject_1;if ( ((tomMatch482NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch482NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch482NameNumber_begin_3=tomMatch482NameNumber_freshVar_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch482NameNumber_end_4=tomMatch482NameNumber_freshVar_1;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch482NameNumber_freshVar_2=tomMatch482NameNumber_end_4;if (!( tomMatch482NameNumber_freshVar_2.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch482NameNumber_freshVar_8= tomMatch482NameNumber_freshVar_2.getHeadConcModule() ;if ( (tomMatch482NameNumber_freshVar_8 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch482NameNumber_freshVar_7= tomMatch482NameNumber_freshVar_8.getSorts() ;{  tom.gom.adt.gom.types.SortList  tomMatch482NameNumber_freshVar_9=tomMatch482NameNumber_freshVar_7;if ( ((tomMatch482NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch482NameNumber_freshVar_9 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch482NameNumber_begin_11=tomMatch482NameNumber_freshVar_9;{  tom.gom.adt.gom.types.SortList  tomMatch482NameNumber_end_12=tomMatch482NameNumber_freshVar_9;do {{{  tom.gom.adt.gom.types.SortList  tomMatch482NameNumber_freshVar_10=tomMatch482NameNumber_end_12;if (!( tomMatch482NameNumber_freshVar_10.isEmptyConcSort() )) {{  tom.gom.adt.gom.types.Sort  tomMatch482NameNumber_freshVar_16= tomMatch482NameNumber_freshVar_10.getHeadConcSort() ;if ( (tomMatch482NameNumber_freshVar_16 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch482NameNumber_freshVar_15= tomMatch482NameNumber_freshVar_16.getDecl() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch482NameNumber_freshVar_19=tomMatch482NameNumber_freshVar_15;if ( (tomMatch482NameNumber_freshVar_19 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch482NameNumber_freshVar_17= tomMatch482NameNumber_freshVar_19.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch482NameNumber_freshVar_18= tomMatch482NameNumber_freshVar_19.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch482NameNumber_freshVar_13= tomMatch482NameNumber_freshVar_10.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch482NameNumber_freshVar_5= tomMatch482NameNumber_freshVar_2.getTailConcModule() ;





        classNames =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch482NameNumber_freshVar_18)+".types", tomMatch482NameNumber_freshVar_17) ,tom_append_list_ConcClassName(classNames, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
      }}}}}}}}}}}if ( tomMatch482NameNumber_end_12.isEmptyConcSort() ) {tomMatch482NameNumber_end_12=tomMatch482NameNumber_begin_11;} else {tomMatch482NameNumber_end_12= tomMatch482NameNumber_end_12.getTailConcSort() ;}}} while(!( (tomMatch482NameNumber_end_12==tomMatch482NameNumber_begin_11) ));}}}}}}}}}if ( tomMatch482NameNumber_end_4.isEmptyConcModule() ) {tomMatch482NameNumber_end_4=tomMatch482NameNumber_begin_3;} else {tomMatch482NameNumber_end_4= tomMatch482NameNumber_end_4.getTailConcModule() ;}}} while(!( (tomMatch482NameNumber_end_4==tomMatch482NameNumber_begin_3) ));}}}}}}}}

    return classNames;
  }

  /*
   * Get all sort definitions for a given module
   */
  private SortList getSortsForModule(ModuleDecl module, ModuleList moduleList) {
    {{ Object tomMatch483NameNumber_freshVar_0=module;if ( (tomMatch483NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.ModuleDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch483NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )tomMatch483NameNumber_freshVar_0);{  tom.gom.adt.gom.types.ModuleDecl  tomMatch483NameNumber_freshVar_2=tomMatch483NameNumber_freshSubject_1;if ( (tomMatch483NameNumber_freshVar_2 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{ Object tomMatch483NameNumber_freshVar_1=moduleList;if ( (tomMatch483NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch483NameNumber_freshSubject_2=(( tom.gom.adt.gom.types.ModuleList )tomMatch483NameNumber_freshVar_1);{  tom.gom.adt.gom.types.ModuleList  tomMatch483NameNumber_freshVar_3=tomMatch483NameNumber_freshSubject_2;if ( ((tomMatch483NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch483NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch483NameNumber_begin_5=tomMatch483NameNumber_freshVar_3;{  tom.gom.adt.gom.types.ModuleList  tomMatch483NameNumber_end_6=tomMatch483NameNumber_freshVar_3;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch483NameNumber_freshVar_4=tomMatch483NameNumber_end_6;if (!( tomMatch483NameNumber_freshVar_4.isEmptyConcModule() )) {{  tom.gom.adt.gom.types.Module  tomMatch483NameNumber_freshVar_11= tomMatch483NameNumber_freshVar_4.getHeadConcModule() ;if ( (tomMatch483NameNumber_freshVar_11 instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch483NameNumber_freshVar_9= tomMatch483NameNumber_freshVar_11.getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch483NameNumber_freshVar_10= tomMatch483NameNumber_freshVar_11.getSorts() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch483NameNumber_freshVar_12=tomMatch483NameNumber_freshVar_9;if ( (tomMatch483NameNumber_freshVar_12==tomMatch483NameNumber_freshSubject_1) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch483NameNumber_freshVar_7= tomMatch483NameNumber_freshVar_4.getTailConcModule() ;


        return tomMatch483NameNumber_freshVar_10;
      }}}}}}}}}if ( tomMatch483NameNumber_end_6.isEmptyConcModule() ) {tomMatch483NameNumber_end_6=tomMatch483NameNumber_begin_5;} else {tomMatch483NameNumber_end_6= tomMatch483NameNumber_end_6.getTailConcModule() ;}}} while(!( (tomMatch483NameNumber_end_6==tomMatch483NameNumber_begin_5) ));}}}}}}}}}}}}}

    throw new RuntimeException("Module " + module + " not found");
  }

  public static String packagePrefix(ModuleDecl moduleDecl) {
    String pkgPrefix = "";
    {{ Object tomMatch484NameNumber_freshVar_0=moduleDecl;if ( (tomMatch484NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.ModuleDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch484NameNumber_freshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )tomMatch484NameNumber_freshVar_0);{  tom.gom.adt.gom.types.ModuleDecl  tomMatch484NameNumber_freshVar_3=tomMatch484NameNumber_freshSubject_1;if ( (tomMatch484NameNumber_freshVar_3 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch484NameNumber_freshVar_1= tomMatch484NameNumber_freshVar_3.getModuleName() ;{  String  tomMatch484NameNumber_freshVar_2= tomMatch484NameNumber_freshVar_3.getPkg() ;{  tom.gom.adt.gom.types.GomModuleName  tomMatch484NameNumber_freshVar_5=tomMatch484NameNumber_freshVar_1;if ( (tomMatch484NameNumber_freshVar_5 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch484NameNumber_freshVar_4= tomMatch484NameNumber_freshVar_5.getName() ;{  String  tom_name=tomMatch484NameNumber_freshVar_4;{  String  tom_pkgopt=tomMatch484NameNumber_freshVar_2;

        if(!tom_pkgopt.equals("")) {
          pkgPrefix = tom_pkgopt+ "." + tom_name;
        } else {
          pkgPrefix = tom_name;
        }
      }}}}}}}}}}}}}

    return pkgPrefix.toLowerCase();
  }

  private SlotFieldList slotFieldListFromSet(Set slotFieldSet) {
    Iterator it = slotFieldSet.iterator();
    SlotFieldList list =  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ;
    while(it.hasNext()) {
      SlotField slot = (SlotField) it.next();
      list = tom_append_list_ConcSlotField(list, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slot, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) );
    }
    return list;
  }

  private ClassNameList allClassForImports(
      Map classMap,
      ModuleDecl moduleDecl) {
    ClassNameList importedList =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
    ModuleDeclList importedModulelist = environment().getModuleDependency(moduleDecl);
    while(!importedModulelist.isEmptyConcModuleDecl()) {
      ModuleDecl imported = importedModulelist.getHeadConcModuleDecl();
      importedModulelist = importedModulelist.getTailConcModuleDecl();
      if (!imported.equals(moduleDecl)) {
        ClassName importedclass = (ClassName)classMap.get(imported);
        importedList =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(importedclass,tom_append_list_ConcClassName(importedList, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
      }
    }
    return importedList;
  }
}
