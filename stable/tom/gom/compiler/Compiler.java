/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * Gom
 *
 * Copyright (C) 2006-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Antoine Reilles  e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.gom.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.gom.GomMessage;
import tom.gom.tools.GomEnvironment;
import tom.gom.adt.gom.*;
import tom.gom.adt.gom.types.*;
import tom.gom.tools.error.GomRuntimeException;

import tom.gom.adt.objects.*;
import tom.gom.adt.objects.types.*;
import tom.library.sl.VisitFailure;

public class Compiler {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.gom.adt.objects.types.SlotFieldList  tom_append_list_ConcSlotField( tom.gom.adt.objects.types.SlotFieldList l1,  tom.gom.adt.objects.types.SlotFieldList  l2) {     if( l1.isEmptyConcSlotField() ) {       return l2;     } else if( l2.isEmptyConcSlotField() ) {       return l1;     } else if(  l1.getTailConcSlotField() .isEmptyConcSlotField() ) {       return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( l1.getHeadConcSlotField() ,l2) ;     } else {       return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( l1.getHeadConcSlotField() ,tom_append_list_ConcSlotField( l1.getTailConcSlotField() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.SlotFieldList  tom_get_slice_ConcSlotField( tom.gom.adt.objects.types.SlotFieldList  begin,  tom.gom.adt.objects.types.SlotFieldList  end, tom.gom.adt.objects.types.SlotFieldList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make( begin.getHeadConcSlotField() ,( tom.gom.adt.objects.types.SlotFieldList )tom_get_slice_ConcSlotField( begin.getTailConcSlotField() ,end,tail)) ;     }   }      private static   tom.gom.adt.objects.types.GomClassList  tom_append_list_ConcGomClass( tom.gom.adt.objects.types.GomClassList l1,  tom.gom.adt.objects.types.GomClassList  l2) {     if( l1.isEmptyConcGomClass() ) {       return l2;     } else if( l2.isEmptyConcGomClass() ) {       return l1;     } else if(  l1.getTailConcGomClass() .isEmptyConcGomClass() ) {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,l2) ;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( l1.getHeadConcGomClass() ,tom_append_list_ConcGomClass( l1.getTailConcGomClass() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.GomClassList  tom_get_slice_ConcGomClass( tom.gom.adt.objects.types.GomClassList  begin,  tom.gom.adt.objects.types.GomClassList  end, tom.gom.adt.objects.types.GomClassList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make( begin.getHeadConcGomClass() ,( tom.gom.adt.objects.types.GomClassList )tom_get_slice_ConcGomClass( begin.getTailConcGomClass() ,end,tail)) ;     }   }      private static   tom.gom.adt.objects.types.ClassNameList  tom_append_list_ConcClassName( tom.gom.adt.objects.types.ClassNameList l1,  tom.gom.adt.objects.types.ClassNameList  l2) {     if( l1.isEmptyConcClassName() ) {       return l2;     } else if( l2.isEmptyConcClassName() ) {       return l1;     } else if(  l1.getTailConcClassName() .isEmptyConcClassName() ) {       return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( l1.getHeadConcClassName() ,l2) ;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( l1.getHeadConcClassName() ,tom_append_list_ConcClassName( l1.getTailConcClassName() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.ClassNameList  tom_get_slice_ConcClassName( tom.gom.adt.objects.types.ClassNameList  begin,  tom.gom.adt.objects.types.ClassNameList  end, tom.gom.adt.objects.types.ClassNameList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( begin.getHeadConcClassName() ,( tom.gom.adt.objects.types.ClassNameList )tom_get_slice_ConcClassName( begin.getTailConcClassName() ,end,tail)) ;     }   }      private static   tom.gom.adt.objects.types.HookList  tom_append_list_ConcHook( tom.gom.adt.objects.types.HookList l1,  tom.gom.adt.objects.types.HookList  l2) {     if( l1.isEmptyConcHook() ) {       return l2;     } else if( l2.isEmptyConcHook() ) {       return l1;     } else if(  l1.getTailConcHook() .isEmptyConcHook() ) {       return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( l1.getHeadConcHook() ,l2) ;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( l1.getHeadConcHook() ,tom_append_list_ConcHook( l1.getTailConcHook() ,l2)) ;     }   }   private static   tom.gom.adt.objects.types.HookList  tom_get_slice_ConcHook( tom.gom.adt.objects.types.HookList  begin,  tom.gom.adt.objects.types.HookList  end, tom.gom.adt.objects.types.HookList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.objects.types.hooklist.ConsConcHook.make( begin.getHeadConcHook() ,( tom.gom.adt.objects.types.HookList )tom_get_slice_ConcHook( begin.getTailConcHook() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.OperatorDeclList  tom_append_list_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList  l2) {     if( l1.isEmptyConcOperator() ) {       return l2;     } else if( l2.isEmptyConcOperator() ) {       return l1;     } else if(  l1.getTailConcOperator() .isEmptyConcOperator() ) {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,l2) ;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( l1.getHeadConcOperator() ,tom_append_list_ConcOperator( l1.getTailConcOperator() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.OperatorDeclList  tom_get_slice_ConcOperator( tom.gom.adt.gom.types.OperatorDeclList  begin,  tom.gom.adt.gom.types.OperatorDeclList  end, tom.gom.adt.gom.types.OperatorDeclList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.operatordecllist.ConsConcOperator.make( begin.getHeadConcOperator() ,( tom.gom.adt.gom.types.OperatorDeclList )tom_get_slice_ConcOperator( begin.getTailConcOperator() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SlotList  tom_append_list_ConcSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList  l2) {     if( l1.isEmptyConcSlot() ) {       return l2;     } else if( l2.isEmptyConcSlot() ) {       return l1;     } else if(  l1.getTailConcSlot() .isEmptyConcSlot() ) {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,l2) ;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( l1.getHeadConcSlot() ,tom_append_list_ConcSlot( l1.getTailConcSlot() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SlotList  tom_get_slice_ConcSlot( tom.gom.adt.gom.types.SlotList  begin,  tom.gom.adt.gom.types.SlotList  end, tom.gom.adt.gom.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.slotlist.ConsConcSlot.make( begin.getHeadConcSlot() ,( tom.gom.adt.gom.types.SlotList )tom_get_slice_ConcSlot( begin.getTailConcSlot() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.SortList  tom_append_list_ConcSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList  l2) {     if( l1.isEmptyConcSort() ) {       return l2;     } else if( l2.isEmptyConcSort() ) {       return l1;     } else if(  l1.getTailConcSort() .isEmptyConcSort() ) {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,l2) ;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( l1.getHeadConcSort() ,tom_append_list_ConcSort( l1.getTailConcSort() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.SortList  tom_get_slice_ConcSort( tom.gom.adt.gom.types.SortList  begin,  tom.gom.adt.gom.types.SortList  end, tom.gom.adt.gom.types.SortList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.sortlist.ConsConcSort.make( begin.getHeadConcSort() ,( tom.gom.adt.gom.types.SortList )tom_get_slice_ConcSort( begin.getTailConcSort() ,end,tail)) ;     }   }      private static   tom.gom.adt.gom.types.ModuleList  tom_append_list_ConcModule( tom.gom.adt.gom.types.ModuleList l1,  tom.gom.adt.gom.types.ModuleList  l2) {     if( l1.isEmptyConcModule() ) {       return l2;     } else if( l2.isEmptyConcModule() ) {       return l1;     } else if(  l1.getTailConcModule() .isEmptyConcModule() ) {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,l2) ;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( l1.getHeadConcModule() ,tom_append_list_ConcModule( l1.getTailConcModule() ,l2)) ;     }   }   private static   tom.gom.adt.gom.types.ModuleList  tom_get_slice_ConcModule( tom.gom.adt.gom.types.ModuleList  begin,  tom.gom.adt.gom.types.ModuleList  end, tom.gom.adt.gom.types.ModuleList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.gom.adt.gom.types.modulelist.ConsConcModule.make( begin.getHeadConcModule() ,( tom.gom.adt.gom.types.ModuleList )tom_get_slice_ConcModule( begin.getTailConcModule() ,end,tail)) ;     }   }    

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

  Map sortClassNameForSortDecl = environment().builtinSortClassMap();

  public GomClassList compile(ModuleList moduleList, HookDeclList hookDecls) {
    GomClassList classList =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;

    /* ModuleDecl -> (AbstractType) ClassName */
    Map abstractTypeNameForModule = new HashMap();
    Map tomMappingNameForModule = new HashMap();
    /* SortDecl -> SortClass */
    Map sortGomClassForSortDecl = new HashMap();
    /* OperatorDecl -> OperatorClass */
    Map classForOperatorDecl = new HashMap();
    /* For each module */
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch430NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch430NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch430NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch430NameNumber_freshVar_0=tomMatch430NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch430NameNumber_begin_2=tomMatch430NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch430NameNumber_end_3=tomMatch430NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch430NameNumber_freshVar_1=tomMatch430NameNumber_end_3;if (!( tomMatch430NameNumber_freshVar_1.isEmptyConcModule() )) {if ( ( tomMatch430NameNumber_freshVar_1.getHeadConcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch430NameNumber_freshVar_6=  tomMatch430NameNumber_freshVar_1.getHeadConcModule() .getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch430NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ModuleList  tomMatch430NameNumber_freshVar_4= tomMatch430NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {

        String moduleName = tom_moduleDecl.getModuleName().getName();

        /* create an AbstractType class */
        ClassName abstractTypeName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName+"AbstractType") 

;

        ClassName tomMappingName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl), moduleName) 

;
        tomMappingNameForModule.put(tom_moduleDecl,tomMappingName);

        abstractTypeNameForModule.put(tom_moduleDecl,abstractTypeName);
      }}}}}}}if ( tomMatch430NameNumber_end_3.isEmptyConcModule() ) {tomMatch430NameNumber_end_3=tomMatch430NameNumber_begin_2;} else {tomMatch430NameNumber_end_3= tomMatch430NameNumber_end_3.getTailConcModule() ;}}} while(!( tomMatch430NameNumber_end_3.equals(tomMatch430NameNumber_begin_2) ));}}}}}}}


    /* For each sort, create a sort implementation, and operator implementations
       (we don't need to do that per module, since each operator and sort knows
       to which module it belongs) */
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch431NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch431NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_0=tomMatch431NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_begin_2=tomMatch431NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_end_3=tomMatch431NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_1=tomMatch431NameNumber_end_3;if (!( tomMatch431NameNumber_freshVar_1.isEmptyConcModule() )) {if ( ( tomMatch431NameNumber_freshVar_1.getHeadConcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch431NameNumber_freshVar_6=  tomMatch431NameNumber_freshVar_1.getHeadConcModule() .getSorts() ;if ( ((tomMatch431NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch431NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch431NameNumber_freshVar_7=tomMatch431NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SortList  tomMatch431NameNumber_begin_9=tomMatch431NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch431NameNumber_end_10=tomMatch431NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.SortList  tomMatch431NameNumber_freshVar_8=tomMatch431NameNumber_end_10;if (!( tomMatch431NameNumber_freshVar_8.isEmptyConcSort() )) {if ( ( tomMatch431NameNumber_freshVar_8.getHeadConcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch431NameNumber_freshVar_13=  tomMatch431NameNumber_freshVar_8.getHeadConcSort() .getDecl() ;if ( (tomMatch431NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch431NameNumber_freshVar_14= tomMatch431NameNumber_freshVar_13.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch431NameNumber_freshVar_15= tomMatch431NameNumber_freshVar_13.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch431NameNumber_freshVar_11= tomMatch431NameNumber_freshVar_8.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch431NameNumber_freshVar_4= tomMatch431NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {





        // get the class name for the sort
        ClassName sortClassName =  tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch431NameNumber_freshVar_15)+".types", tomMatch431NameNumber_freshVar_14) ;
        sortClassNameForSortDecl.put(tomMatch431NameNumber_freshVar_13,sortClassName);
      }}}}}}}}}}if ( tomMatch431NameNumber_end_10.isEmptyConcSort() ) {tomMatch431NameNumber_end_10=tomMatch431NameNumber_begin_9;} else {tomMatch431NameNumber_end_10= tomMatch431NameNumber_end_10.getTailConcSort() ;}}} while(!( tomMatch431NameNumber_end_10.equals(tomMatch431NameNumber_begin_9) ));}}}}}}}}if ( tomMatch431NameNumber_end_3.isEmptyConcModule() ) {tomMatch431NameNumber_end_3=tomMatch431NameNumber_begin_2;} else {tomMatch431NameNumber_end_3= tomMatch431NameNumber_end_3.getTailConcModule() ;}}} while(!( tomMatch431NameNumber_end_3.equals(tomMatch431NameNumber_begin_2) ));}}}}}}}{if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch432NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch432NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch432NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch432NameNumber_freshVar_0=tomMatch432NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch432NameNumber_begin_2=tomMatch432NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch432NameNumber_end_3=tomMatch432NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch432NameNumber_freshVar_1=tomMatch432NameNumber_end_3;if (!( tomMatch432NameNumber_freshVar_1.isEmptyConcModule() )) {if ( ( tomMatch432NameNumber_freshVar_1.getHeadConcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch432NameNumber_freshVar_6=  tomMatch432NameNumber_freshVar_1.getHeadConcModule() .getSorts() ;if ( ((tomMatch432NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch432NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch432NameNumber_freshVar_7=tomMatch432NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SortList  tomMatch432NameNumber_begin_9=tomMatch432NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch432NameNumber_end_10=tomMatch432NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.SortList  tomMatch432NameNumber_freshVar_8=tomMatch432NameNumber_end_10;if (!( tomMatch432NameNumber_freshVar_8.isEmptyConcSort() )) {if ( ( tomMatch432NameNumber_freshVar_8.getHeadConcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch432NameNumber_freshVar_13=  tomMatch432NameNumber_freshVar_8.getHeadConcSort() .getDecl() ;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch432NameNumber_freshVar_14=  tomMatch432NameNumber_freshVar_8.getHeadConcSort() .getOperatorDecls() ;if ( (tomMatch432NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch432NameNumber_freshVar_15= tomMatch432NameNumber_freshVar_13.getModuleDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch432NameNumber_freshVar_15;{  tom.gom.adt.gom.types.SortDecl  tom_sortDecl=tomMatch432NameNumber_freshVar_13;{  tom.gom.adt.gom.types.OperatorDeclList  tom_oplist=tomMatch432NameNumber_freshVar_14;{  tom.gom.adt.gom.types.SortList  tomMatch432NameNumber_freshVar_11= tomMatch432NameNumber_freshVar_8.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch432NameNumber_freshVar_4= tomMatch432NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {








        // get the class name for the sort
        ClassName sortClassName = (ClassName)sortClassNameForSortDecl.get(tom_sortDecl);
        ClassName abstracttypeName = (ClassName)abstractTypeNameForModule.get(tom_moduleDecl);
        ClassName mappingName = (ClassName)tomMappingNameForModule.get(tom_moduleDecl);
        // create operator classes. Also, store a list of all operators for the sort class
        // use a Set to collect slots and avoid duplicates
        Set allSortSlots = new HashSet();
        ClassNameList allOperators =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
        ClassNameList allVariadicOperators =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
        {if ( (tom_oplist instanceof tom.gom.adt.gom.types.OperatorDeclList) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.OperatorDeclList )tom_oplist);if ( ((tomMatch433NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.operatordecllist.ConsConcOperator) || (tomMatch433NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_0=tomMatch433NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_begin_2=tomMatch433NameNumber_freshVar_0;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_end_3=tomMatch433NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_1=tomMatch433NameNumber_end_3;if (!( tomMatch433NameNumber_freshVar_1.isEmptyConcOperator() )) {if ( ( tomMatch433NameNumber_freshVar_1.getHeadConcOperator()  instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl) ) {{  String  tomMatch433NameNumber_freshVar_6=  tomMatch433NameNumber_freshVar_1.getHeadConcOperator() .getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch433NameNumber_freshVar_7=  tomMatch433NameNumber_freshVar_1.getHeadConcOperator() .getSort() ;{  tom.gom.adt.gom.types.TypedProduction  tomMatch433NameNumber_freshVar_8=  tomMatch433NameNumber_freshVar_1.getHeadConcOperator() .getProd() ;{  String  tom_opname=tomMatch433NameNumber_freshVar_6;if ( (tomMatch433NameNumber_freshVar_7 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch433NameNumber_freshVar_9= tomMatch433NameNumber_freshVar_7.getName() ;{  tom.gom.adt.gom.types.TypedProduction  tom_typedproduction=tomMatch433NameNumber_freshVar_8;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch433NameNumber_freshVar_4= tomMatch433NameNumber_freshVar_1.getTailConcOperator() ;if ( true ) {





            String sortNamePackage = tomMatch433NameNumber_freshVar_9.toLowerCase();
            ClassName operatorClassName =
               tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
            SlotFieldList slots =  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ;
            ClassName variadicOpClassName = null;
            ClassName empty = null;
            {if ( (tom_typedproduction instanceof tom.gom.adt.gom.types.TypedProduction) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch434NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.TypedProduction )tom_typedproduction);if ( (tomMatch434NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.typedproduction.Variadic) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch434NameNumber_freshVar_0= tomMatch434NameNumberfreshSubject_1.getSort() ;if ( true ) {

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch434NameNumber_freshVar_0);
                SlotField slotHead =  tom.gom.adt.objects.types.slotfield.SlotField.make("Head"+tom_opname, clsName) ;
                SlotField slotTail =  tom.gom.adt.objects.types.slotfield.SlotField.make("Tail"+tom_opname, sortClassName) ;
                allSortSlots.add(slotHead);
                allSortSlots.add(slotTail);
                slots =  tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotHead, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotTail, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) ) ;
                // as the operator is variadic, add a Cons and an Empty
                variadicOpClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, tom_opname) ;
                allVariadicOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(variadicOpClassName,tom_append_list_ConcClassName(allVariadicOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
                empty =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Empty"+tom_opname) ;
                operatorClassName =
                   tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tom_moduleDecl)+".types."+sortNamePackage, "Cons"+tom_opname) ;

                allOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(empty,tom_append_list_ConcClassName(allOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
              }}}}}if ( (tom_typedproduction instanceof tom.gom.adt.gom.types.TypedProduction) ) {{  tom.gom.adt.gom.types.TypedProduction  tomMatch434NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.TypedProduction )tom_typedproduction);if ( (tomMatch434NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.typedproduction.Slots) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch434NameNumber_freshVar_1= tomMatch434NameNumberfreshSubject_1.getSlots() ;if ( ((tomMatch434NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.slotlist.ConsConcSlot) || (tomMatch434NameNumber_freshVar_1 instanceof tom.gom.adt.gom.types.slotlist.EmptyConcSlot)) ) {{  tom.gom.adt.gom.types.SlotList  tomMatch434NameNumber_freshVar_2=tomMatch434NameNumber_freshVar_1;{  tom.gom.adt.gom.types.SlotList  tomMatch434NameNumber_begin_4=tomMatch434NameNumber_freshVar_2;{  tom.gom.adt.gom.types.SlotList  tomMatch434NameNumber_end_5=tomMatch434NameNumber_freshVar_2;do {{{  tom.gom.adt.gom.types.SlotList  tomMatch434NameNumber_freshVar_3=tomMatch434NameNumber_end_5;if (!( tomMatch434NameNumber_freshVar_3.isEmptyConcSlot() )) {if ( ( tomMatch434NameNumber_freshVar_3.getHeadConcSlot()  instanceof tom.gom.adt.gom.types.slot.Slot) ) {{  String  tomMatch434NameNumber_freshVar_8=  tomMatch434NameNumber_freshVar_3.getHeadConcSlot() .getName() ;{  tom.gom.adt.gom.types.SortDecl  tomMatch434NameNumber_freshVar_9=  tomMatch434NameNumber_freshVar_3.getHeadConcSlot() .getSort() ;{  tom.gom.adt.gom.types.SlotList  tomMatch434NameNumber_freshVar_6= tomMatch434NameNumber_freshVar_3.getTailConcSlot() ;if ( true ) {

                ClassName clsName = (ClassName)sortClassNameForSortDecl.get(tomMatch434NameNumber_freshVar_9);
                SlotField slotfield =  tom.gom.adt.objects.types.slotfield.SlotField.make(tomMatch434NameNumber_freshVar_8, clsName) ;
                allSortSlots.add(slotfield);
                slots = tom_append_list_ConcSlotField(slots, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slotfield, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) );
              }}}}}}}if ( tomMatch434NameNumber_end_5.isEmptyConcSlot() ) {tomMatch434NameNumber_end_5=tomMatch434NameNumber_begin_4;} else {tomMatch434NameNumber_end_5= tomMatch434NameNumber_end_5.getTailConcSlot() ;}}} while(!( tomMatch434NameNumber_end_5.equals(tomMatch434NameNumber_begin_4) ));}}}}}}}}}

            GomClass operatorClass;
            allOperators =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(operatorClassName,tom_append_list_ConcClassName(allOperators, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
            if (variadicOpClassName != null) {
              /* We just processed a variadic operator */
              GomClass cons =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, variadicOpClassName, mappingName, sortClassName, slots,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;

              GomClass emptyClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(empty, abstracttypeName, variadicOpClassName, mappingName, sortClassName,  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;

              operatorClass =  tom.gom.adt.objects.types.gomclass.VariadicOperatorClass.make(variadicOpClassName, abstracttypeName, mappingName, sortClassName, emptyClass, cons,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
            } else {
              operatorClass =  tom.gom.adt.objects.types.gomclass.OperatorClass.make(operatorClassName, abstracttypeName, sortClassName, mappingName, sortClassName, slots,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
            }
            classForOperatorDecl.put( tomMatch433NameNumber_freshVar_1.getHeadConcOperator() ,operatorClass);
            classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(operatorClass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
          }}}}}}}}}}}}if ( tomMatch433NameNumber_end_3.isEmptyConcOperator() ) {tomMatch433NameNumber_end_3=tomMatch433NameNumber_begin_2;} else {tomMatch433NameNumber_end_3= tomMatch433NameNumber_end_3.getTailConcOperator() ;}}} while(!( tomMatch433NameNumber_end_3.equals(tomMatch433NameNumber_begin_2) ));}}}}}}}

        // create the sort class and add it to the list
        GomClass sortClass =  tom.gom.adt.objects.types.gomclass.SortClass.make(sortClassName, abstracttypeName, mappingName, allOperators, allVariadicOperators, slotFieldListFromSet(allSortSlots),  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 





;
        sortGomClassForSortDecl.put(tom_sortDecl,sortClass);
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(sortClass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
      }}}}}}}}}}}}}if ( tomMatch432NameNumber_end_10.isEmptyConcSort() ) {tomMatch432NameNumber_end_10=tomMatch432NameNumber_begin_9;} else {tomMatch432NameNumber_end_10= tomMatch432NameNumber_end_10.getTailConcSort() ;}}} while(!( tomMatch432NameNumber_end_10.equals(tomMatch432NameNumber_begin_9) ));}}}}}}}}if ( tomMatch432NameNumber_end_3.isEmptyConcModule() ) {tomMatch432NameNumber_end_3=tomMatch432NameNumber_begin_2;} else {tomMatch432NameNumber_end_3= tomMatch432NameNumber_end_3.getTailConcModule() ;}}} while(!( tomMatch432NameNumber_end_3.equals(tomMatch432NameNumber_begin_2) ));}}}}}}}{if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch435NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch435NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_0=tomMatch435NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_begin_2=tomMatch435NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_end_3=tomMatch435NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_1=tomMatch435NameNumber_end_3;if (!( tomMatch435NameNumber_freshVar_1.isEmptyConcModule() )) {if ( ( tomMatch435NameNumber_freshVar_1.getHeadConcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch435NameNumber_freshVar_6=  tomMatch435NameNumber_freshVar_1.getHeadConcModule() .getMDecl() ;{  tom.gom.adt.gom.types.ModuleDecl  tom_moduleDecl=tomMatch435NameNumber_freshVar_6;{  tom.gom.adt.gom.types.ModuleList  tomMatch435NameNumber_freshVar_4= tomMatch435NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {




        String moduleName = tom_moduleDecl.getModuleName().getName();

        GomClassList allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;
        GomClassList allSortClasses =  tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() ;
        /* TODO improve this part : just for test */
        ModuleDeclList modlist = environment().getModuleDependency(tom_moduleDecl);
        while(!modlist.isEmptyConcModuleDecl()) {
          ModuleDecl imported = modlist.getHeadConcModuleDecl();
          modlist = modlist.getTailConcModuleDecl();
          SortList moduleSorts = getSortsForModule(imported,moduleList);
          SortList sortconsum = moduleSorts;
          while(!sortconsum.isEmptyConcSort()) {
            Sort sort = sortconsum.getHeadConcSort();
            sortconsum = sortconsum.getTailConcSort();
            {if ( (sort instanceof tom.gom.adt.gom.types.Sort) ) {{  tom.gom.adt.gom.types.Sort  tomMatch436NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.Sort )sort);if ( (tomMatch436NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch436NameNumber_freshVar_0= tomMatch436NameNumberfreshSubject_1.getDecl() ;if ( true ) {

                GomClass sortClass = (GomClass) sortGomClassForSortDecl.get(tomMatch436NameNumber_freshVar_0);
                allSortClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(sortClass,tom_append_list_ConcGomClass(allSortClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
              }}}}}}

          }
          {if ( (moduleSorts instanceof tom.gom.adt.gom.types.SortList) ) {{  tom.gom.adt.gom.types.SortList  tomMatch437NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.SortList )moduleSorts);if ( ((tomMatch437NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch437NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch437NameNumber_freshVar_0=tomMatch437NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.SortList  tomMatch437NameNumber_begin_2=tomMatch437NameNumber_freshVar_0;{  tom.gom.adt.gom.types.SortList  tomMatch437NameNumber_end_3=tomMatch437NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.SortList  tomMatch437NameNumber_freshVar_1=tomMatch437NameNumber_end_3;if (!( tomMatch437NameNumber_freshVar_1.isEmptyConcSort() )) {if ( ( tomMatch437NameNumber_freshVar_1.getHeadConcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch437NameNumber_freshVar_6=  tomMatch437NameNumber_freshVar_1.getHeadConcSort() .getOperatorDecls() ;if ( ((tomMatch437NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.operatordecllist.ConsConcOperator) || (tomMatch437NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.operatordecllist.EmptyConcOperator)) ) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch437NameNumber_freshVar_7=tomMatch437NameNumber_freshVar_6;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch437NameNumber_begin_9=tomMatch437NameNumber_freshVar_7;{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch437NameNumber_end_10=tomMatch437NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch437NameNumber_freshVar_8=tomMatch437NameNumber_end_10;if (!( tomMatch437NameNumber_freshVar_8.isEmptyConcOperator() )) {{  tom.gom.adt.gom.types.OperatorDeclList  tomMatch437NameNumber_freshVar_11= tomMatch437NameNumber_freshVar_8.getTailConcOperator() ;{  tom.gom.adt.gom.types.SortList  tomMatch437NameNumber_freshVar_4= tomMatch437NameNumber_freshVar_1.getTailConcSort() ;if ( true ) {

              GomClass opClass = (GomClass) classForOperatorDecl.get( tomMatch437NameNumber_freshVar_8.getHeadConcOperator() );
              allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(opClass,tom_append_list_ConcGomClass(allOperatorClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;
              {if ( (opClass instanceof tom.gom.adt.objects.types.GomClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch438NameNumberfreshSubject_1=(( tom.gom.adt.objects.types.GomClass )opClass);if ( (tomMatch438NameNumberfreshSubject_1 instanceof tom.gom.adt.objects.types.gomclass.VariadicOperatorClass) ) {{  tom.gom.adt.objects.types.GomClass  tomMatch438NameNumber_freshVar_0= tomMatch438NameNumberfreshSubject_1.getEmpty() ;{  tom.gom.adt.objects.types.GomClass  tomMatch438NameNumber_freshVar_1= tomMatch438NameNumberfreshSubject_1.getCons() ;if ( true ) {

                  allOperatorClasses =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tomMatch438NameNumber_freshVar_0, tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tomMatch438NameNumber_freshVar_1,tom_append_list_ConcGomClass(allOperatorClasses, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ) ;
                }}}}}}}

            }}}}}if ( tomMatch437NameNumber_end_10.isEmptyConcOperator() ) {tomMatch437NameNumber_end_10=tomMatch437NameNumber_begin_9;} else {tomMatch437NameNumber_end_10= tomMatch437NameNumber_end_10.getTailConcOperator() ;}}} while(!( tomMatch437NameNumber_end_10.equals(tomMatch437NameNumber_begin_9) ));}}}}}}}}if ( tomMatch437NameNumber_end_3.isEmptyConcSort() ) {tomMatch437NameNumber_end_3=tomMatch437NameNumber_begin_2;} else {tomMatch437NameNumber_end_3= tomMatch437NameNumber_end_3.getTailConcSort() ;}}} while(!( tomMatch437NameNumber_end_3.equals(tomMatch437NameNumber_begin_2) ));}}}}}}}

        }

        ClassName abstractTypeClassName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);

        /* create a TomMapping */
        ClassName tomMappingName = (ClassName)
          tomMappingNameForModule.get(tom_moduleDecl);
        GomClass tommappingclass =  tom.gom.adt.objects.types.gomclass.TomMapping.make(tomMappingName, allSortClasses, allOperatorClasses) 

;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(tommappingclass,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;

        /* create the abstractType */
        ClassNameList classSortList = sortClassNames(moduleList);
        ClassName abstractTypeName = (ClassName)
          abstractTypeNameForModule.get(tom_moduleDecl);
        GomClass abstracttype =
           tom.gom.adt.objects.types.gomclass.AbstractTypeClass.make(abstractTypeName, tomMappingName, classSortList,  tom.gom.adt.objects.types.hooklist.EmptyConcHook.make() ) 


;
        classList =  tom.gom.adt.objects.types.gomclasslist.ConsConcGomClass.make(abstracttype,tom_append_list_ConcGomClass(classList, tom.gom.adt.objects.types.gomclasslist.EmptyConcGomClass.make() )) ;

      }}}}}}}if ( tomMatch435NameNumber_end_3.isEmptyConcModule() ) {tomMatch435NameNumber_end_3=tomMatch435NameNumber_begin_2;} else {tomMatch435NameNumber_end_3= tomMatch435NameNumber_end_3.getTailConcModule() ;}}} while(!( tomMatch435NameNumber_end_3.equals(tomMatch435NameNumber_begin_2) ));}}}}}}}

    /* Call the hook processor here, to attach hooks to the correct classes */
    /* fist compute the mapping "Decl" -> "ClassName" */
    Map declToClassName = new HashMap();
    /* for ModuleDecl */
    declToClassName.putAll(abstractTypeNameForModule);
    /* for SortDecl */
    Iterator it = sortGomClassForSortDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    /* for OperatorDecl */
    it = classForOperatorDecl.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      GomClass sortClass = (GomClass) entry.getValue();
      declToClassName.put(entry.getKey(),sortClass.getClassName());
    }
    HookCompiler hcompiler = new HookCompiler(sortClassNameForSortDecl);
    classList = hcompiler.compile(hookDecls,classList,declToClassName);
    return classList;
  }

  private ClassNameList sortClassNames(ModuleList moduleList) {
    ClassNameList classNames =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
    {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch439NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch439NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch439NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch439NameNumber_freshVar_0=tomMatch439NameNumberfreshSubject_1;{  tom.gom.adt.gom.types.ModuleList  tomMatch439NameNumber_begin_2=tomMatch439NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch439NameNumber_end_3=tomMatch439NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch439NameNumber_freshVar_1=tomMatch439NameNumber_end_3;if (!( tomMatch439NameNumber_freshVar_1.isEmptyConcModule() )) {if ( ( tomMatch439NameNumber_freshVar_1.getHeadConcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.SortList  tomMatch439NameNumber_freshVar_6=  tomMatch439NameNumber_freshVar_1.getHeadConcModule() .getSorts() ;if ( ((tomMatch439NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.ConsConcSort) || (tomMatch439NameNumber_freshVar_6 instanceof tom.gom.adt.gom.types.sortlist.EmptyConcSort)) ) {{  tom.gom.adt.gom.types.SortList  tomMatch439NameNumber_freshVar_7=tomMatch439NameNumber_freshVar_6;{  tom.gom.adt.gom.types.SortList  tomMatch439NameNumber_begin_9=tomMatch439NameNumber_freshVar_7;{  tom.gom.adt.gom.types.SortList  tomMatch439NameNumber_end_10=tomMatch439NameNumber_freshVar_7;do {{{  tom.gom.adt.gom.types.SortList  tomMatch439NameNumber_freshVar_8=tomMatch439NameNumber_end_10;if (!( tomMatch439NameNumber_freshVar_8.isEmptyConcSort() )) {if ( ( tomMatch439NameNumber_freshVar_8.getHeadConcSort()  instanceof tom.gom.adt.gom.types.sort.Sort) ) {{  tom.gom.adt.gom.types.SortDecl  tomMatch439NameNumber_freshVar_13=  tomMatch439NameNumber_freshVar_8.getHeadConcSort() .getDecl() ;if ( (tomMatch439NameNumber_freshVar_13 instanceof tom.gom.adt.gom.types.sortdecl.SortDecl) ) {{  String  tomMatch439NameNumber_freshVar_14= tomMatch439NameNumber_freshVar_13.getName() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch439NameNumber_freshVar_15= tomMatch439NameNumber_freshVar_13.getModuleDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch439NameNumber_freshVar_11= tomMatch439NameNumber_freshVar_8.getTailConcSort() ;{  tom.gom.adt.gom.types.ModuleList  tomMatch439NameNumber_freshVar_4= tomMatch439NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {





        classNames =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make( tom.gom.adt.objects.types.classname.ClassName.make(packagePrefix(tomMatch439NameNumber_freshVar_15)+".types", tomMatch439NameNumber_freshVar_14) ,tom_append_list_ConcClassName(classNames, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
      }}}}}}}}}}if ( tomMatch439NameNumber_end_10.isEmptyConcSort() ) {tomMatch439NameNumber_end_10=tomMatch439NameNumber_begin_9;} else {tomMatch439NameNumber_end_10= tomMatch439NameNumber_end_10.getTailConcSort() ;}}} while(!( tomMatch439NameNumber_end_10.equals(tomMatch439NameNumber_begin_9) ));}}}}}}}}if ( tomMatch439NameNumber_end_3.isEmptyConcModule() ) {tomMatch439NameNumber_end_3=tomMatch439NameNumber_begin_2;} else {tomMatch439NameNumber_end_3= tomMatch439NameNumber_end_3.getTailConcModule() ;}}} while(!( tomMatch439NameNumber_end_3.equals(tomMatch439NameNumber_begin_2) ));}}}}}}}

    return classNames;
  }

  /*
   * Get all sort definitions for a given module
   */
  private SortList getSortsForModule(ModuleDecl module, ModuleList moduleList) {
    {if ( (module instanceof tom.gom.adt.gom.types.ModuleDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch440NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )module);if ( (tomMatch440NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {if ( (moduleList instanceof tom.gom.adt.gom.types.ModuleList) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch440NameNumberfreshSubject_2=(( tom.gom.adt.gom.types.ModuleList )moduleList);if ( ((tomMatch440NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.ConsConcModule) || (tomMatch440NameNumberfreshSubject_2 instanceof tom.gom.adt.gom.types.modulelist.EmptyConcModule)) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch440NameNumber_freshVar_0=tomMatch440NameNumberfreshSubject_2;{  tom.gom.adt.gom.types.ModuleList  tomMatch440NameNumber_begin_2=tomMatch440NameNumber_freshVar_0;{  tom.gom.adt.gom.types.ModuleList  tomMatch440NameNumber_end_3=tomMatch440NameNumber_freshVar_0;do {{{  tom.gom.adt.gom.types.ModuleList  tomMatch440NameNumber_freshVar_1=tomMatch440NameNumber_end_3;if (!( tomMatch440NameNumber_freshVar_1.isEmptyConcModule() )) {if ( ( tomMatch440NameNumber_freshVar_1.getHeadConcModule()  instanceof tom.gom.adt.gom.types.module.Module) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch440NameNumber_freshVar_6=  tomMatch440NameNumber_freshVar_1.getHeadConcModule() .getMDecl() ;{  tom.gom.adt.gom.types.SortList  tomMatch440NameNumber_freshVar_7=  tomMatch440NameNumber_freshVar_1.getHeadConcModule() .getSorts() ;{  tom.gom.adt.gom.types.ModuleDecl  tomMatch440NameNumber_freshVar_8=tomMatch440NameNumber_freshVar_6;if ( tomMatch440NameNumber_freshVar_8.equals(tomMatch440NameNumberfreshSubject_1) ) {{  tom.gom.adt.gom.types.ModuleList  tomMatch440NameNumber_freshVar_4= tomMatch440NameNumber_freshVar_1.getTailConcModule() ;if ( true ) {


        return tomMatch440NameNumber_freshVar_7;
      }}}}}}}}}if ( tomMatch440NameNumber_end_3.isEmptyConcModule() ) {tomMatch440NameNumber_end_3=tomMatch440NameNumber_begin_2;} else {tomMatch440NameNumber_end_3= tomMatch440NameNumber_end_3.getTailConcModule() ;}}} while(!( tomMatch440NameNumber_end_3.equals(tomMatch440NameNumber_begin_2) ));}}}}}}}}}}

    throw new RuntimeException("Module " + module + " not found");
  }

  public static String packagePrefix(ModuleDecl moduleDecl) {
    String pkgPrefix = "";
    {if ( (moduleDecl instanceof tom.gom.adt.gom.types.ModuleDecl) ) {{  tom.gom.adt.gom.types.ModuleDecl  tomMatch441NameNumberfreshSubject_1=(( tom.gom.adt.gom.types.ModuleDecl )moduleDecl);if ( (tomMatch441NameNumberfreshSubject_1 instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl) ) {{  tom.gom.adt.gom.types.GomModuleName  tomMatch441NameNumber_freshVar_0= tomMatch441NameNumberfreshSubject_1.getModuleName() ;{  String  tomMatch441NameNumber_freshVar_1= tomMatch441NameNumberfreshSubject_1.getPkg() ;if ( (tomMatch441NameNumber_freshVar_0 instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName) ) {{  String  tomMatch441NameNumber_freshVar_2= tomMatch441NameNumber_freshVar_0.getName() ;{  String  tom_name=tomMatch441NameNumber_freshVar_2;{  String  tom_pkgopt=tomMatch441NameNumber_freshVar_1;if ( true ) {

        if(!tom_pkgopt.equals("")) {
          pkgPrefix = tom_pkgopt+ "." + tom_name;
        } else {
          pkgPrefix = tom_name;
        }
      }}}}}}}}}}}

    return pkgPrefix.toLowerCase();
  }

  private SlotFieldList slotFieldListFromSet(Set slotFieldSet) {
    Iterator it = slotFieldSet.iterator();
    SlotFieldList list =  tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ;
    while(it.hasNext()) {
      SlotField slot = (SlotField) it.next();
      list = tom_append_list_ConcSlotField(list, tom.gom.adt.objects.types.slotfieldlist.ConsConcSlotField.make(slot, tom.gom.adt.objects.types.slotfieldlist.EmptyConcSlotField.make() ) );
    }
    return list;
  }

  private ClassNameList allClassForImports(
      Map classMap,
      ModuleDecl moduleDecl) {
    ClassNameList importedList =  tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() ;
    ModuleDeclList importedModulelist = environment().getModuleDependency(moduleDecl);
    while(!importedModulelist.isEmptyConcModuleDecl()) {
      ModuleDecl imported = importedModulelist.getHeadConcModuleDecl();
      importedModulelist = importedModulelist.getTailConcModuleDecl();
      if (!imported.equals(moduleDecl)) {
        ClassName importedclass = (ClassName)classMap.get(imported);
        importedList =  tom.gom.adt.objects.types.classnamelist.ConsConcClassName.make(importedclass,tom_append_list_ConcClassName(importedList, tom.gom.adt.objects.types.classnamelist.EmptyConcClassName.make() )) ;
      }
    }
    return importedList;
  }
}
