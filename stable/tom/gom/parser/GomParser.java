// $ANTLR 2.7.6 (20060516): "GomParser.g" -> "GomParser.java"$

  /*
   * Gom
   *
   * Copyright (c) 2005-2006, INRIA
   * Nancy, France.
   *
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation; either version 2 of the License, or
   * (at your option) any later version.
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   *
   * Antoine Reilles    e-mail: Antoine.Reilles@loria.fr
   *
   **/
  package tom.gom.parser;

import antlr.TokenBuffer;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.ANTLRException;
import antlr.LLkParser;
import antlr.Token;
import antlr.TokenStream;
import antlr.RecognitionException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.ParserSharedInputState;
import antlr.collections.impl.BitSet;

  import java.util.List;
  import java.util.LinkedList;
  import java.util.Iterator;
  import java.util.logging.Logger;
  import java.util.logging.Level;

  import aterm.*;
  import tom.gom.GomMessage;
  import tom.gom.tools.GomEnvironment;
  import tom.gom.tools.error.GomRuntimeException;
  import tom.gom.adt.gom.*;
  import tom.gom.adt.gom.types.*;
  import antlr.LexerSharedInputState;

public class GomParser extends antlr.LLkParser       implements GomParserTokenTypes
 {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_Production(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_IdKind(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Grammar(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomModuleName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ProductionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_HookKind(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SectionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Section(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GrammarList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_FieldList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Field(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ImportList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Arg(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ArgList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomTypeList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_GomModule(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ImportedModule(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.gom.adt.gom.types.Production  tom_make_Production( String  t0,  tom.gom.adt.gom.types.FieldList  t1,  tom.gom.adt.gom.types.GomType  t2) { return  tom.gom.adt.gom.types.production.Production.make(t0, t1, t2); }private static  tom.gom.adt.gom.types.Production  tom_make_Hook( tom.gom.adt.gom.types.IdKind  t0,  String  t1,  tom.gom.adt.gom.types.HookKind  t2,  tom.gom.adt.gom.types.ArgList  t3,  String  t4) { return  tom.gom.adt.gom.types.production.Hook.make(t0, t1, t2, t3, t4); }private static  tom.gom.adt.gom.types.IdKind  tom_make_KindOperator() { return  tom.gom.adt.gom.types.idkind.KindOperator.make(); }private static  tom.gom.adt.gom.types.Grammar  tom_make_Grammar( tom.gom.adt.gom.types.ProductionList  t0) { return  tom.gom.adt.gom.types.grammar.Grammar.make(t0); }private static  tom.gom.adt.gom.types.Grammar  tom_make_Sorts( tom.gom.adt.gom.types.GomTypeList  t0) { return  tom.gom.adt.gom.types.grammar.Sorts.make(t0); }private static  tom.gom.adt.gom.types.GomModuleName  tom_make_GomModuleName( String  t0) { return  tom.gom.adt.gom.types.gommodulename.GomModuleName.make(t0); }private static  tom.gom.adt.gom.types.HookKind  tom_make_KindMakeHook() { return  tom.gom.adt.gom.types.hookkind.KindMakeHook.make(); }private static  tom.gom.adt.gom.types.HookKind  tom_make_KindMakeinsertHook() { return  tom.gom.adt.gom.types.hookkind.KindMakeinsertHook.make(); }private static  tom.gom.adt.gom.types.Section  tom_make_Imports( tom.gom.adt.gom.types.ImportList  t0) { return  tom.gom.adt.gom.types.section.Imports.make(t0); }private static  tom.gom.adt.gom.types.Section  tom_make_Public( tom.gom.adt.gom.types.GrammarList  t0) { return  tom.gom.adt.gom.types.section.Public.make(t0); }private static  tom.gom.adt.gom.types.GomType  tom_make_GomType( String  t0) { return  tom.gom.adt.gom.types.gomtype.GomType.make(t0); }private static  tom.gom.adt.gom.types.Field  tom_make_StarredField( tom.gom.adt.gom.types.GomType  t0) { return  tom.gom.adt.gom.types.field.StarredField.make(t0); }private static  tom.gom.adt.gom.types.Field  tom_make_NamedField( String  t0,  tom.gom.adt.gom.types.GomType  t1) { return  tom.gom.adt.gom.types.field.NamedField.make(t0, t1); }private static  tom.gom.adt.gom.types.Arg  tom_make_Arg( String  t0) { return  tom.gom.adt.gom.types.arg.Arg.make(t0); }private static  tom.gom.adt.gom.types.GomModule  tom_make_GomModule( tom.gom.adt.gom.types.GomModuleName  t0,  tom.gom.adt.gom.types.SectionList  t1) { return  tom.gom.adt.gom.types.gommodule.GomModule.make(t0, t1); }private static  tom.gom.adt.gom.types.ImportedModule  tom_make_Import( tom.gom.adt.gom.types.GomModuleName  t0) { return  tom.gom.adt.gom.types.importedmodule.Import.make(t0); }private static boolean tom_is_fun_sym_concProduction( tom.gom.adt.gom.types.ProductionList  t) {  return  t instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction || t instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_empty_list_concProduction() { return  tom.gom.adt.gom.types.productionlist.EmptyconcProduction.make() ; }private static  tom.gom.adt.gom.types.ProductionList  tom_cons_list_concProduction( tom.gom.adt.gom.types.Production  e,  tom.gom.adt.gom.types.ProductionList  l) { return  tom.gom.adt.gom.types.productionlist.ConsconcProduction.make(e,l) ; }private static  tom.gom.adt.gom.types.Production  tom_get_head_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) {  return  l.getHeadconcProduction()  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_get_tail_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) {  return  l.getTailconcProduction()  ;}private static boolean tom_is_empty_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList  l) {  return  l.isEmptyconcProduction()  ;}private static  tom.gom.adt.gom.types.ProductionList  tom_append_list_concProduction( tom.gom.adt.gom.types.ProductionList  l1,  tom.gom.adt.gom.types.ProductionList  l2) {    if(tom_is_empty_concProduction_ProductionList(l1)) {     return l2;    } else if(tom_is_empty_concProduction_ProductionList(l2)) {     return l1;    } else if(tom_is_empty_concProduction_ProductionList(( tom.gom.adt.gom.types.ProductionList )tom_get_tail_concProduction_ProductionList(l1))) {     return ( tom.gom.adt.gom.types.ProductionList )tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production )tom_get_head_concProduction_ProductionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ProductionList )tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production )tom_get_head_concProduction_ProductionList(l1),tom_append_list_concProduction(( tom.gom.adt.gom.types.ProductionList )tom_get_tail_concProduction_ProductionList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ProductionList  tom_get_slice_concProduction( tom.gom.adt.gom.types.ProductionList  begin,  tom.gom.adt.gom.types.ProductionList  end) {    if(tom_terms_equal_ProductionList(begin,end)) {      return ( tom.gom.adt.gom.types.ProductionList )tom_empty_list_concProduction();    } else {      return ( tom.gom.adt.gom.types.ProductionList )tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production )tom_get_head_concProduction_ProductionList(begin),( tom.gom.adt.gom.types.ProductionList )tom_get_slice_concProduction(( tom.gom.adt.gom.types.ProductionList )tom_get_tail_concProduction_ProductionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSection( tom.gom.adt.gom.types.SectionList  t) {  return  t instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection || t instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection  ;}private static  tom.gom.adt.gom.types.SectionList  tom_empty_list_concSection() { return  tom.gom.adt.gom.types.sectionlist.EmptyconcSection.make() ; }private static  tom.gom.adt.gom.types.SectionList  tom_cons_list_concSection( tom.gom.adt.gom.types.Section  e,  tom.gom.adt.gom.types.SectionList  l) { return  tom.gom.adt.gom.types.sectionlist.ConsconcSection.make(e,l) ; }private static  tom.gom.adt.gom.types.Section  tom_get_head_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) {  return  l.getHeadconcSection()  ;}private static  tom.gom.adt.gom.types.SectionList  tom_get_tail_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) {  return  l.getTailconcSection()  ;}private static boolean tom_is_empty_concSection_SectionList( tom.gom.adt.gom.types.SectionList  l) {  return  l.isEmptyconcSection()  ;}private static  tom.gom.adt.gom.types.SectionList  tom_append_list_concSection( tom.gom.adt.gom.types.SectionList  l1,  tom.gom.adt.gom.types.SectionList  l2) {    if(tom_is_empty_concSection_SectionList(l1)) {     return l2;    } else if(tom_is_empty_concSection_SectionList(l2)) {     return l1;    } else if(tom_is_empty_concSection_SectionList(( tom.gom.adt.gom.types.SectionList )tom_get_tail_concSection_SectionList(l1))) {     return ( tom.gom.adt.gom.types.SectionList )tom_cons_list_concSection(( tom.gom.adt.gom.types.Section )tom_get_head_concSection_SectionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SectionList )tom_cons_list_concSection(( tom.gom.adt.gom.types.Section )tom_get_head_concSection_SectionList(l1),tom_append_list_concSection(( tom.gom.adt.gom.types.SectionList )tom_get_tail_concSection_SectionList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.SectionList  tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList  begin,  tom.gom.adt.gom.types.SectionList  end) {    if(tom_terms_equal_SectionList(begin,end)) {      return ( tom.gom.adt.gom.types.SectionList )tom_empty_list_concSection();    } else {      return ( tom.gom.adt.gom.types.SectionList )tom_cons_list_concSection(( tom.gom.adt.gom.types.Section )tom_get_head_concSection_SectionList(begin),( tom.gom.adt.gom.types.SectionList )tom_get_slice_concSection(( tom.gom.adt.gom.types.SectionList )tom_get_tail_concSection_SectionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concGrammar( tom.gom.adt.gom.types.GrammarList  t) {  return  t instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar || t instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_empty_list_concGrammar() { return  tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar.make() ; }private static  tom.gom.adt.gom.types.GrammarList  tom_cons_list_concGrammar( tom.gom.adt.gom.types.Grammar  e,  tom.gom.adt.gom.types.GrammarList  l) { return  tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make(e,l) ; }private static  tom.gom.adt.gom.types.Grammar  tom_get_head_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) {  return  l.getHeadconcGrammar()  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_get_tail_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) {  return  l.getTailconcGrammar()  ;}private static boolean tom_is_empty_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList  l) {  return  l.isEmptyconcGrammar()  ;}private static  tom.gom.adt.gom.types.GrammarList  tom_append_list_concGrammar( tom.gom.adt.gom.types.GrammarList  l1,  tom.gom.adt.gom.types.GrammarList  l2) {    if(tom_is_empty_concGrammar_GrammarList(l1)) {     return l2;    } else if(tom_is_empty_concGrammar_GrammarList(l2)) {     return l1;    } else if(tom_is_empty_concGrammar_GrammarList(( tom.gom.adt.gom.types.GrammarList )tom_get_tail_concGrammar_GrammarList(l1))) {     return ( tom.gom.adt.gom.types.GrammarList )tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar )tom_get_head_concGrammar_GrammarList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GrammarList )tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar )tom_get_head_concGrammar_GrammarList(l1),tom_append_list_concGrammar(( tom.gom.adt.gom.types.GrammarList )tom_get_tail_concGrammar_GrammarList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.GrammarList  tom_get_slice_concGrammar( tom.gom.adt.gom.types.GrammarList  begin,  tom.gom.adt.gom.types.GrammarList  end) {    if(tom_terms_equal_GrammarList(begin,end)) {      return ( tom.gom.adt.gom.types.GrammarList )tom_empty_list_concGrammar();    } else {      return ( tom.gom.adt.gom.types.GrammarList )tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar )tom_get_head_concGrammar_GrammarList(begin),( tom.gom.adt.gom.types.GrammarList )tom_get_slice_concGrammar(( tom.gom.adt.gom.types.GrammarList )tom_get_tail_concGrammar_GrammarList(begin),end));    }   }  private static boolean tom_is_fun_sym_concField( tom.gom.adt.gom.types.FieldList  t) {  return  t instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField || t instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField  ;}private static  tom.gom.adt.gom.types.FieldList  tom_empty_list_concField() { return  tom.gom.adt.gom.types.fieldlist.EmptyconcField.make() ; }private static  tom.gom.adt.gom.types.FieldList  tom_cons_list_concField( tom.gom.adt.gom.types.Field  e,  tom.gom.adt.gom.types.FieldList  l) { return  tom.gom.adt.gom.types.fieldlist.ConsconcField.make(e,l) ; }private static  tom.gom.adt.gom.types.Field  tom_get_head_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) {  return  l.getHeadconcField()  ;}private static  tom.gom.adt.gom.types.FieldList  tom_get_tail_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) {  return  l.getTailconcField()  ;}private static boolean tom_is_empty_concField_FieldList( tom.gom.adt.gom.types.FieldList  l) {  return  l.isEmptyconcField()  ;}private static  tom.gom.adt.gom.types.FieldList  tom_append_list_concField( tom.gom.adt.gom.types.FieldList  l1,  tom.gom.adt.gom.types.FieldList  l2) {    if(tom_is_empty_concField_FieldList(l1)) {     return l2;    } else if(tom_is_empty_concField_FieldList(l2)) {     return l1;    } else if(tom_is_empty_concField_FieldList(( tom.gom.adt.gom.types.FieldList )tom_get_tail_concField_FieldList(l1))) {     return ( tom.gom.adt.gom.types.FieldList )tom_cons_list_concField(( tom.gom.adt.gom.types.Field )tom_get_head_concField_FieldList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.FieldList )tom_cons_list_concField(( tom.gom.adt.gom.types.Field )tom_get_head_concField_FieldList(l1),tom_append_list_concField(( tom.gom.adt.gom.types.FieldList )tom_get_tail_concField_FieldList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.FieldList  tom_get_slice_concField( tom.gom.adt.gom.types.FieldList  begin,  tom.gom.adt.gom.types.FieldList  end) {    if(tom_terms_equal_FieldList(begin,end)) {      return ( tom.gom.adt.gom.types.FieldList )tom_empty_list_concField();    } else {      return ( tom.gom.adt.gom.types.FieldList )tom_cons_list_concField(( tom.gom.adt.gom.types.Field )tom_get_head_concField_FieldList(begin),( tom.gom.adt.gom.types.FieldList )tom_get_slice_concField(( tom.gom.adt.gom.types.FieldList )tom_get_tail_concField_FieldList(begin),end));    }   }  private static boolean tom_is_fun_sym_concImportedModule( tom.gom.adt.gom.types.ImportList  t) {  return  t instanceof tom.gom.adt.gom.types.importlist.ConsconcImportedModule || t instanceof tom.gom.adt.gom.types.importlist.EmptyconcImportedModule  ;}private static  tom.gom.adt.gom.types.ImportList  tom_empty_list_concImportedModule() { return  tom.gom.adt.gom.types.importlist.EmptyconcImportedModule.make() ; }private static  tom.gom.adt.gom.types.ImportList  tom_cons_list_concImportedModule( tom.gom.adt.gom.types.ImportedModule  e,  tom.gom.adt.gom.types.ImportList  l) { return  tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make(e,l) ; }private static  tom.gom.adt.gom.types.ImportedModule  tom_get_head_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) {  return  l.getHeadconcImportedModule()  ;}private static  tom.gom.adt.gom.types.ImportList  tom_get_tail_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) {  return  l.getTailconcImportedModule()  ;}private static boolean tom_is_empty_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList  l) {  return  l.isEmptyconcImportedModule()  ;}private static  tom.gom.adt.gom.types.ImportList  tom_append_list_concImportedModule( tom.gom.adt.gom.types.ImportList  l1,  tom.gom.adt.gom.types.ImportList  l2) {    if(tom_is_empty_concImportedModule_ImportList(l1)) {     return l2;    } else if(tom_is_empty_concImportedModule_ImportList(l2)) {     return l1;    } else if(tom_is_empty_concImportedModule_ImportList(( tom.gom.adt.gom.types.ImportList )tom_get_tail_concImportedModule_ImportList(l1))) {     return ( tom.gom.adt.gom.types.ImportList )tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule )tom_get_head_concImportedModule_ImportList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ImportList )tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule )tom_get_head_concImportedModule_ImportList(l1),tom_append_list_concImportedModule(( tom.gom.adt.gom.types.ImportList )tom_get_tail_concImportedModule_ImportList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ImportList  tom_get_slice_concImportedModule( tom.gom.adt.gom.types.ImportList  begin,  tom.gom.adt.gom.types.ImportList  end) {    if(tom_terms_equal_ImportList(begin,end)) {      return ( tom.gom.adt.gom.types.ImportList )tom_empty_list_concImportedModule();    } else {      return ( tom.gom.adt.gom.types.ImportList )tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule )tom_get_head_concImportedModule_ImportList(begin),( tom.gom.adt.gom.types.ImportList )tom_get_slice_concImportedModule(( tom.gom.adt.gom.types.ImportList )tom_get_tail_concImportedModule_ImportList(begin),end));    }   }  private static boolean tom_is_fun_sym_concArg( tom.gom.adt.gom.types.ArgList  t) {  return  t instanceof tom.gom.adt.gom.types.arglist.ConsconcArg || t instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg  ;}private static  tom.gom.adt.gom.types.ArgList  tom_empty_list_concArg() { return  tom.gom.adt.gom.types.arglist.EmptyconcArg.make() ; }private static  tom.gom.adt.gom.types.ArgList  tom_cons_list_concArg( tom.gom.adt.gom.types.Arg  e,  tom.gom.adt.gom.types.ArgList  l) { return  tom.gom.adt.gom.types.arglist.ConsconcArg.make(e,l) ; }private static  tom.gom.adt.gom.types.Arg  tom_get_head_concArg_ArgList( tom.gom.adt.gom.types.ArgList  l) {  return  l.getHeadconcArg()  ;}private static  tom.gom.adt.gom.types.ArgList  tom_get_tail_concArg_ArgList( tom.gom.adt.gom.types.ArgList  l) {  return  l.getTailconcArg()  ;}private static boolean tom_is_empty_concArg_ArgList( tom.gom.adt.gom.types.ArgList  l) {  return  l.isEmptyconcArg()  ;}private static  tom.gom.adt.gom.types.ArgList  tom_append_list_concArg( tom.gom.adt.gom.types.ArgList  l1,  tom.gom.adt.gom.types.ArgList  l2) {    if(tom_is_empty_concArg_ArgList(l1)) {     return l2;    } else if(tom_is_empty_concArg_ArgList(l2)) {     return l1;    } else if(tom_is_empty_concArg_ArgList(( tom.gom.adt.gom.types.ArgList )tom_get_tail_concArg_ArgList(l1))) {     return ( tom.gom.adt.gom.types.ArgList )tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg )tom_get_head_concArg_ArgList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ArgList )tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg )tom_get_head_concArg_ArgList(l1),tom_append_list_concArg(( tom.gom.adt.gom.types.ArgList )tom_get_tail_concArg_ArgList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.ArgList  tom_get_slice_concArg( tom.gom.adt.gom.types.ArgList  begin,  tom.gom.adt.gom.types.ArgList  end) {    if(tom_terms_equal_ArgList(begin,end)) {      return ( tom.gom.adt.gom.types.ArgList )tom_empty_list_concArg();    } else {      return ( tom.gom.adt.gom.types.ArgList )tom_cons_list_concArg(( tom.gom.adt.gom.types.Arg )tom_get_head_concArg_ArgList(begin),( tom.gom.adt.gom.types.ArgList )tom_get_slice_concArg(( tom.gom.adt.gom.types.ArgList )tom_get_tail_concArg_ArgList(begin),end));    }   }  private static boolean tom_is_fun_sym_concGomType( tom.gom.adt.gom.types.GomTypeList  t) {  return  t instanceof tom.gom.adt.gom.types.gomtypelist.ConsconcGomType || t instanceof tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_empty_list_concGomType() { return  tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType.make() ; }private static  tom.gom.adt.gom.types.GomTypeList  tom_cons_list_concGomType( tom.gom.adt.gom.types.GomType  e,  tom.gom.adt.gom.types.GomTypeList  l) { return  tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make(e,l) ; }private static  tom.gom.adt.gom.types.GomType  tom_get_head_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) {  return  l.getHeadconcGomType()  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_get_tail_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) {  return  l.getTailconcGomType()  ;}private static boolean tom_is_empty_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList  l) {  return  l.isEmptyconcGomType()  ;}private static  tom.gom.adt.gom.types.GomTypeList  tom_append_list_concGomType( tom.gom.adt.gom.types.GomTypeList  l1,  tom.gom.adt.gom.types.GomTypeList  l2) {    if(tom_is_empty_concGomType_GomTypeList(l1)) {     return l2;    } else if(tom_is_empty_concGomType_GomTypeList(l2)) {     return l1;    } else if(tom_is_empty_concGomType_GomTypeList(( tom.gom.adt.gom.types.GomTypeList )tom_get_tail_concGomType_GomTypeList(l1))) {     return ( tom.gom.adt.gom.types.GomTypeList )tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType )tom_get_head_concGomType_GomTypeList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GomTypeList )tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType )tom_get_head_concGomType_GomTypeList(l1),tom_append_list_concGomType(( tom.gom.adt.gom.types.GomTypeList )tom_get_tail_concGomType_GomTypeList(l1),l2));    }   }  private static  tom.gom.adt.gom.types.GomTypeList  tom_get_slice_concGomType( tom.gom.adt.gom.types.GomTypeList  begin,  tom.gom.adt.gom.types.GomTypeList  end) {    if(tom_terms_equal_GomTypeList(begin,end)) {      return ( tom.gom.adt.gom.types.GomTypeList )tom_empty_list_concGomType();    } else {      return ( tom.gom.adt.gom.types.GomTypeList )tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType )tom_get_head_concGomType_GomTypeList(begin),( tom.gom.adt.gom.types.GomTypeList )tom_get_slice_concGomType(( tom.gom.adt.gom.types.GomTypeList )tom_get_tail_concGomType_GomTypeList(begin),end));    }   }   

  private static final String REAL ="real";
  private static final String DOUBLE ="double";

  private LexerSharedInputState lexerstate = null;

  public GomParser(GomLexer lexer, String name) {
    this(lexer);
    /* the name attribute is used for constructor disambiguation */
    this.lexerstate = lexer.getInputState();
  }

  private GomTypeList typeListFromList(List list) {
    GomTypeList typeList = tom_empty_list_concGomType();
    Iterator it = list.iterator();
    while(it.hasNext()) {
      GomType type = (GomType) it.next();
      typeList = tom_cons_list_concGomType(type,tom_append_list_concGomType(typeList,tom_empty_list_concGomType()));
    }
    return typeList;
  }

protected GomParser(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
}

public GomParser(TokenBuffer tokenBuf) {
  this(tokenBuf,2);
}

protected GomParser(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
}

public GomParser(TokenStream lexer) {
  this(lexer,2);
}

public GomParser(ParserSharedInputState state) {
  super(state,2);
  tokenNames = _tokenNames;
}

	public final GomModule  module() throws RecognitionException, TokenStreamException {
		GomModule module;
		
		Token  moduleName = null;
		
		module = null;
		GomModuleName gomModuleName = null;
		ImportList impor = tom_empty_list_concImportedModule();
		Section parsedsection = null;
		
		
		match(MODULE);
		moduleName = LT(1);
		match(IDENTIFIER);
		gomModuleName = tom_make_GomModuleName(moduleName.getText());
		{
		switch ( LA(1)) {
		case IMPORTS:
		{
			impor=imports();
			break;
		}
		case PUBLIC:
		case SORTS:
		case ABSTRACT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		parsedsection=section();
		
		module = tom_make_GomModule(gomModuleName,tom_cons_list_concSection(tom_make_Imports(impor),tom_cons_list_concSection(parsedsection,tom_empty_list_concSection())))
		;
		
		return module;
	}
	
	public final ImportList  imports() throws RecognitionException, TokenStreamException {
		ImportList imports;
		
		Token  importedModuleName = null;
		
		imports = tom_empty_list_concImportedModule();
		
		
		match(IMPORTS);
		{
		_loop5:
		do {
			if ((LA(1)==IDENTIFIER)) {
				importedModuleName = LT(1);
				match(IDENTIFIER);
				
				imports = tom_cons_list_concImportedModule(tom_make_Import(tom_make_GomModuleName(importedModuleName.getText())),tom_append_list_concImportedModule(imports,tom_empty_list_concImportedModule()))
				;
				
			}
			else {
				break _loop5;
			}
			
		} while (true);
		}
		return imports;
	}
	
	public final Section  section() throws RecognitionException, TokenStreamException {
		Section parsedsection;
		
		
		parsedsection = null;
		GrammarList grammarlist = tom_empty_list_concGrammar();
		
		
		{
		switch ( LA(1)) {
		case PUBLIC:
		{
			match(PUBLIC);
			break;
		}
		case SORTS:
		case ABSTRACT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		{
		grammarlist=grammar();
		}
		
		parsedsection = tom_make_Public(grammarlist);
		
		return parsedsection;
	}
	
	public final GrammarList  grammar() throws RecognitionException, TokenStreamException {
		GrammarList grammars;
		
		
		grammars = tom_empty_list_concGrammar();
		ProductionList prods = tom_empty_list_concProduction();
		GomTypeList sorts = tom_empty_list_concGomType();
		List sortList = new LinkedList();
		
		
		{
		int _cnt11=0;
		_loop11:
		do {
			switch ( LA(1)) {
			case SORTS:
			{
				sorts=sortdef();
				grammars = tom_append_list_concGrammar(grammars,tom_cons_list_concGrammar(tom_make_Sorts(sorts),tom_empty_list_concGrammar()));
				break;
			}
			case ABSTRACT:
			{
				prods=syntax(sortList);
				
				if(!sortList.isEmpty()) {
				sorts = typeListFromList(sortList);
				grammars = tom_append_list_concGrammar(grammars,tom_cons_list_concGrammar(tom_make_Sorts(sorts),tom_empty_list_concGrammar()));
				}
				grammars = tom_append_list_concGrammar(grammars,tom_cons_list_concGrammar(tom_make_Grammar(prods),tom_empty_list_concGrammar()));
				
				break;
			}
			default:
			{
				if ( _cnt11>=1 ) { break _loop11; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			}
			_cnt11++;
		} while (true);
		}
		return grammars;
	}
	
	public final GomTypeList  sortdef() throws RecognitionException, TokenStreamException {
		GomTypeList definedSorts;
		
		
		definedSorts = tom_empty_list_concGomType();
		String sortName = null;
		
		
		match(SORTS);
		{
		_loop14:
		do {
			if ((LA(1)==IDENTIFIER)) {
				sortName=type();
				
				/* Warns the user about deprecated syntax */
				Logger.getLogger(getClass().getName()).log(Level.WARNING,
				GomMessage.deprecatedSyntax.getMessage(),
				new Object[]{});
				definedSorts = tom_cons_list_concGomType(tom_make_GomType(sortName),tom_append_list_concGomType(definedSorts,tom_empty_list_concGomType()));
				
			}
			else {
				break _loop14;
			}
			
		} while (true);
		}
		return definedSorts;
	}
	
	public final ProductionList  syntax(
		List sortlist
	) throws RecognitionException, TokenStreamException {
		ProductionList prods;
		
		
		prods = tom_empty_list_concProduction();
		Production prod = null;
		ProductionList productions = null;
		
		
		match(ABSTRACT);
		match(SYNTAX);
		{
		_loop18:
		do {
			if ((LA(1)==IDENTIFIER) && (LA(2)==LEFT_BRACE)) {
				prod=production();
				prods = tom_cons_list_concProduction(prod,tom_append_list_concProduction(prods,tom_empty_list_concProduction()));
			}
			else if ((LA(1)==IDENTIFIER) && (LA(2)==COLON)) {
				prod=hook();
				prods = tom_cons_list_concProduction(prod,tom_append_list_concProduction(prods,tom_empty_list_concProduction()));
			}
			else if ((LA(1)==IDENTIFIER) && (LA(2)==EQUALS)) {
				productions=typedecl(sortlist);
				prods = tom_append_list_concProduction(productions,tom_append_list_concProduction(prods,tom_empty_list_concProduction()));
			}
			else {
				break _loop18;
			}
			
		} while (true);
		}
		return prods;
	}
	
	public final String  type() throws RecognitionException, TokenStreamException {
		String id;
		
		Token  i = null;
		id=null;
		
		i = LT(1);
		match(IDENTIFIER);
		
		if(i.getText().equals(DOUBLE)) {
		id=REAL;
		Logger.getLogger(getClass().getName()).log(Level.WARNING,
		"Please prefer to use real in place of double\n"+
		"Automatic conversion done since double is a reserved word");
		} else {
		id=i.getText();
		}
		
		return id;
	}
	
	public final Production  production() throws RecognitionException, TokenStreamException {
		Production prod;
		
		Token  id = null;
		
		prod = null;
		String opName=null, typeName =null;
		FieldList fieldList = tom_empty_list_concField();
		
		
		id = LT(1);
		match(IDENTIFIER);
		opName = id.getText();
		fieldList=fieldlist();
		match(ARROW);
		typeName=type();
		
		prod = tom_make_Production(opName,fieldList,tom_make_GomType(typeName));
		
		return prod;
	}
	
	public final Production  hook() throws RecognitionException, TokenStreamException {
		Production prod;
		
		Token  id = null;
		Token  arg = null;
		Token  supplarg = null;
		
		prod = null;
		String opName = null;
		HookKind hooktype = null;
		ArgList argList = tom_empty_list_concArg();
		String code = "";
		
		
		id = LT(1);
		match(IDENTIFIER);
		opName = id.getText();
		match(COLON);
		hooktype=hooktype();
		{
		match(LEFT_BRACE);
		{
		switch ( LA(1)) {
		case IDENTIFIER:
		{
			arg = LT(1);
			match(IDENTIFIER);
			argList = tom_append_list_concArg(argList,tom_cons_list_concArg(tom_make_Arg(arg.getText()),tom_empty_list_concArg()));
			{
			_loop34:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					supplarg = LT(1);
					match(IDENTIFIER);
					argList = tom_append_list_concArg(argList,tom_cons_list_concArg(tom_make_Arg(supplarg.getText()),tom_empty_list_concArg()));
				}
				else {
					break _loop34;
				}
				
			} while (true);
			}
			break;
		}
		case RIGHT_BRACE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		match(RIGHT_BRACE);
		}
		
		BlockParser blockparser = BlockParser.makeBlockParser(lexerstate);
		code = blockparser.block();
		
		
		prod = tom_make_Hook(tom_make_KindOperator(),opName,hooktype,argList,code);
		
		return prod;
	}
	
	public final ProductionList  typedecl(
		List sortList
	) throws RecognitionException, TokenStreamException {
		ProductionList list;
		
		Token  id = null;
		
		list = null;
		GomType type = null;
		
		
		id = LT(1);
		match(IDENTIFIER);
		type=tom_make_GomType(id.getText()); sortList.add(type);
		match(EQUALS);
		list=alternatives(type);
		return list;
	}
	
	public final FieldList  fieldlist() throws RecognitionException, TokenStreamException {
		FieldList list;
		
		
		list = tom_empty_list_concField();
		Field field = null;
		
		
		match(LEFT_BRACE);
		{
		switch ( LA(1)) {
		case IDENTIFIER:
		{
			field=field();
			list = tom_append_list_concField(list,tom_cons_list_concField(field,tom_empty_list_concField()));
			{
			_loop29:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					field=field();
					list = tom_append_list_concField(list,tom_cons_list_concField(field,tom_empty_list_concField()));
				}
				else {
					break _loop29;
				}
				
			} while (true);
			}
			break;
		}
		case RIGHT_BRACE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		match(RIGHT_BRACE);
		return list;
	}
	
	public final ProductionList  alternatives(
		GomType type
	) throws RecognitionException, TokenStreamException {
		ProductionList list;
		
		Token  id = null;
		Token  altid = null;
		
		list = tom_empty_list_concProduction();
		String opName = null;
		FieldList fieldList = null;
		
		
		{
		switch ( LA(1)) {
		case ALT:
		{
			match(ALT);
			break;
		}
		case IDENTIFIER:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		id = LT(1);
		match(IDENTIFIER);
		opName = id.getText();
		fieldList=fieldlist();
		list = tom_cons_list_concProduction(tom_make_Production(opName,fieldList,type),tom_append_list_concProduction(list,tom_empty_list_concProduction()));
		{
		_loop24:
		do {
			if ((LA(1)==ALT)) {
				match(ALT);
				altid = LT(1);
				match(IDENTIFIER);
				opName = altid.getText();
				fieldList=fieldlist();
				list = tom_cons_list_concProduction(tom_make_Production(opName,fieldList,type),tom_append_list_concProduction(list,tom_empty_list_concProduction()));
			}
			else {
				break _loop24;
			}
			
		} while (true);
		}
		{
		switch ( LA(1)) {
		case SEMI:
		{
			match(SEMI);
			break;
		}
		case EOF:
		case IDENTIFIER:
		case SORTS:
		case ABSTRACT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return list;
	}
	
	public final Field  field() throws RecognitionException, TokenStreamException {
		Field field;
		
		Token  id = null;
		
		field = null;
		String t=null;
		
		
		if ((LA(1)==IDENTIFIER) && (LA(2)==STAR)) {
			t=type();
			match(STAR);
			field = tom_make_StarredField(tom_make_GomType(t));
		}
		else if ((LA(1)==IDENTIFIER) && (LA(2)==COLON)) {
			id = LT(1);
			match(IDENTIFIER);
			match(COLON);
			t=type();
			field = tom_make_NamedField(id.getText(),tom_make_GomType(t));
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		return field;
	}
	
	public final HookKind  hooktype() throws RecognitionException, TokenStreamException {
		HookKind type;
		
		Token  tp = null;
		
		type = null;
		String typeName = null;
		
		
		tp = LT(1);
		match(IDENTIFIER);
		typeName = tp.getText();
		
		if (typeName.equals("make")) {
		type = tom_make_KindMakeHook();
		} else if (typeName.equals("make_insert")) {
		type = tom_make_KindMakeinsertHook();
		} else {
		Logger.getLogger(getClass().getName()).log(Level.SEVERE,
		GomMessage.unknownHookKind.getMessage(),
		new Object[]{typeName});
		throw new GomRuntimeException("parsing problem");
		}
		
		return type;
	}
	
	
	public static final String[] _tokenNames = {
		"<0>",
		"EOF",
		"<2>",
		"NULL_TREE_LOOKAHEAD",
		"\"module\"",
		"IDENTIFIER",
		"\"imports\"",
		"\"public\"",
		"\"sorts\"",
		"\"abstract\"",
		"\"syntax\"",
		"ARROW",
		"EQUALS",
		"ALT",
		"SEMI",
		"LEFT_BRACE",
		"COMMA",
		"RIGHT_BRACE",
		"COLON",
		"STAR",
		"\"private\"",
		"LBRACE",
		"RBRACE",
		"WS",
		"SLCOMMENT",
		"ML_COMMENT"
	};
	
	
	}
