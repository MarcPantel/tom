// $ANTLR 2.7.5 (20050128): "GomParser.g" -> "GomParser.java"$

  /*
   * Gom
   * 
   * Copyright (c) 2005-2006, INRIA
   * Nancy, France.
   * 
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation; either version 2 of the License, or
   * (at your option) any later version.
   * 
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   * 
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   * 
   * Antoine Reilles    e-mail: Antoine.Reilles@loria.fr
   * 
   **/
  package tom.gom.parser;

import antlr.TokenBuffer;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.ANTLRException;
import antlr.LLkParser;
import antlr.Token;
import antlr.TokenStream;
import antlr.RecognitionException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.ParserSharedInputState;
import antlr.collections.impl.BitSet;

  import java.util.LinkedList;
  import java.util.Iterator;	
  import java.util.logging.Logger;
  import java.util.logging.Level;

  import aterm.*;
  import tom.gom.tools.GomEnvironment;
  import tom.gom.adt.gom.*;
  import tom.gom.adt.gom.types.*;

public class GomParser extends antlr.LLkParser       implements GomParserTokenTypes
 {

	/* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private  char  tom_set_stamp_char( char  c) {  return  c  ;}private void tom_check_stamp_char( char  c) { ;}private boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private  Character  tom_set_stamp_Character( Character  c) {  return  c  ;}private void tom_check_stamp_Character( Character  c) { ;}private boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_Char( Character  t) {  return  (t!= null) && (t instanceof Character)  ;}private  Character  tom_make_Char( char  c) { return  new Character(c) ; }private  char  tom_get_slot_Char_c( Character  t) {  return  t.charValue()  ;} private  String  tom_set_stamp_String( String  s) {  return  s  ;}private void tom_check_stamp_String( String  s) { ;}private boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}private boolean tom_is_fun_sym_concString( String  t) {  return  (t!= null) && (t instanceof String)  ;}private  String  tom_empty_list_concString() { return  "" ; }private  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }private  char  tom_get_head_concString_String( String  s) {  return  s.charAt(0)  ;}private  String  tom_get_tail_concString_String( String  s) {  return  s.substring(1)  ;}private boolean tom_is_empty_concString_String( String  s) {  return  (s.length()==0)  ;}private  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  private  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private  tom.gom.adt.gom.types.ModuleDeclList tom_get_implementation_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return t ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_set_stamp_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return (tom.gom.adt.gom.types.ModuleDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ModuleDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList t) {  return (t!= null) && t.isSortModuleDeclList() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_empty_list_concModuleDecl() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(); }private  tom.gom.adt.gom.types.ModuleDeclList tom_cons_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDecl e,  tom.gom.adt.gom.types.ModuleDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(e,l); }private  tom.gom.adt.gom.types.ModuleDecl tom_get_head_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_get_tail_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList l) {  return l.getTail() ;}private boolean tom_is_empty_concModuleDecl_ModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_append_list_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList l1,  tom.gom.adt.gom.types.ModuleDeclList l2) {    if(tom_is_empty_concModuleDecl_ModuleDeclList(l1)) {     return l2;    } else if(tom_is_empty_concModuleDecl_ModuleDeclList(l2)) {     return l1;    } else if(tom_is_empty_concModuleDecl_ModuleDeclList(( tom.gom.adt.gom.types.ModuleDeclList)tom_get_tail_concModuleDecl_ModuleDeclList(l1))) {     return ( tom.gom.adt.gom.types.ModuleDeclList)tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl)tom_get_head_concModuleDecl_ModuleDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ModuleDeclList)tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl)tom_get_head_concModuleDecl_ModuleDeclList(l1),tom_append_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDeclList)tom_get_tail_concModuleDecl_ModuleDeclList(l1),l2));    }   }  private  tom.gom.adt.gom.types.ModuleDeclList tom_get_slice_concModuleDecl( tom.gom.adt.gom.types.ModuleDeclList begin,  tom.gom.adt.gom.types.ModuleDeclList end) {    if(tom_terms_equal_ModuleDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.ModuleDeclList)tom_empty_list_concModuleDecl();    } else {      return ( tom.gom.adt.gom.types.ModuleDeclList)tom_cons_list_concModuleDecl(( tom.gom.adt.gom.types.ModuleDecl)tom_get_head_concModuleDecl_ModuleDeclList(begin),( tom.gom.adt.gom.types.ModuleDeclList)tom_get_slice_concModuleDecl(( tom.gom.adt.gom.types.ModuleDeclList)tom_get_tail_concModuleDecl_ModuleDeclList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_make_emptyModuleDeclList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(); }private boolean tom_is_fun_sym_manyModuleDeclList( tom.gom.adt.gom.types.ModuleDeclList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_make_manyModuleDeclList( tom.gom.adt.gom.types.ModuleDecl e,  tom.gom.adt.gom.types.ModuleDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDeclList(e,l); }private  tom.gom.adt.gom.types.ModuleDecl tom_get_slot_manyModuleDeclList_head( tom.gom.adt.gom.types.ModuleDeclList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.ModuleDeclList tom_get_slot_manyModuleDeclList_tail( tom.gom.adt.gom.types.ModuleDeclList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.SortDeclList tom_get_implementation_SortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return t ;}private  tom.gom.adt.gom.types.SortDeclList tom_set_stamp_SortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return (tom.gom.adt.gom.types.SortDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SortDeclList( tom.gom.adt.gom.types.SortDeclList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SortDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSortDecl( tom.gom.adt.gom.types.SortDeclList t) {  return (t!= null) && t.isSortSortDeclList() ;}private  tom.gom.adt.gom.types.SortDeclList tom_empty_list_concSortDecl() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(); }private  tom.gom.adt.gom.types.SortDeclList tom_cons_list_concSortDecl( tom.gom.adt.gom.types.SortDecl e,  tom.gom.adt.gom.types.SortDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(e,l); }private  tom.gom.adt.gom.types.SortDecl tom_get_head_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SortDeclList tom_get_tail_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList l) {  return l.getTail() ;}private boolean tom_is_empty_concSortDecl_SortDeclList( tom.gom.adt.gom.types.SortDeclList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SortDeclList tom_append_list_concSortDecl( tom.gom.adt.gom.types.SortDeclList l1,  tom.gom.adt.gom.types.SortDeclList l2) {    if(tom_is_empty_concSortDecl_SortDeclList(l1)) {     return l2;    } else if(tom_is_empty_concSortDecl_SortDeclList(l2)) {     return l1;    } else if(tom_is_empty_concSortDecl_SortDeclList(( tom.gom.adt.gom.types.SortDeclList)tom_get_tail_concSortDecl_SortDeclList(l1))) {     return ( tom.gom.adt.gom.types.SortDeclList)tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl)tom_get_head_concSortDecl_SortDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortDeclList)tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl)tom_get_head_concSortDecl_SortDeclList(l1),tom_append_list_concSortDecl(( tom.gom.adt.gom.types.SortDeclList)tom_get_tail_concSortDecl_SortDeclList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SortDeclList tom_get_slice_concSortDecl( tom.gom.adt.gom.types.SortDeclList begin,  tom.gom.adt.gom.types.SortDeclList end) {    if(tom_terms_equal_SortDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.SortDeclList)tom_empty_list_concSortDecl();    } else {      return ( tom.gom.adt.gom.types.SortDeclList)tom_cons_list_concSortDecl(( tom.gom.adt.gom.types.SortDecl)tom_get_head_concSortDecl_SortDeclList(begin),( tom.gom.adt.gom.types.SortDeclList)tom_get_slice_concSortDecl(( tom.gom.adt.gom.types.SortDeclList)tom_get_tail_concSortDecl_SortDeclList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SortDeclList tom_make_emptySortDeclList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(); }private boolean tom_is_fun_sym_manySortDeclList( tom.gom.adt.gom.types.SortDeclList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SortDeclList tom_make_manySortDeclList( tom.gom.adt.gom.types.SortDecl e,  tom.gom.adt.gom.types.SortDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDeclList(e,l); }private  tom.gom.adt.gom.types.SortDecl tom_get_slot_manySortDeclList_head( tom.gom.adt.gom.types.SortDeclList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SortDeclList tom_get_slot_manySortDeclList_tail( tom.gom.adt.gom.types.SortDeclList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.SortList tom_get_implementation_SortList( tom.gom.adt.gom.types.SortList t) {  return t ;}private  tom.gom.adt.gom.types.SortList tom_set_stamp_SortList( tom.gom.adt.gom.types.SortList t) {  return (tom.gom.adt.gom.types.SortList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SortList( tom.gom.adt.gom.types.SortList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SortList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSort( tom.gom.adt.gom.types.SortList t) {  return (t!= null) && t.isSortSortList() ;}private  tom.gom.adt.gom.types.SortList tom_empty_list_concSort() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(); }private  tom.gom.adt.gom.types.SortList tom_cons_list_concSort( tom.gom.adt.gom.types.Sort e,  tom.gom.adt.gom.types.SortList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(e,l); }private  tom.gom.adt.gom.types.Sort tom_get_head_concSort_SortList( tom.gom.adt.gom.types.SortList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SortList tom_get_tail_concSort_SortList( tom.gom.adt.gom.types.SortList l) {  return l.getTail() ;}private boolean tom_is_empty_concSort_SortList( tom.gom.adt.gom.types.SortList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SortList tom_append_list_concSort( tom.gom.adt.gom.types.SortList l1,  tom.gom.adt.gom.types.SortList l2) {    if(tom_is_empty_concSort_SortList(l1)) {     return l2;    } else if(tom_is_empty_concSort_SortList(l2)) {     return l1;    } else if(tom_is_empty_concSort_SortList(( tom.gom.adt.gom.types.SortList)tom_get_tail_concSort_SortList(l1))) {     return ( tom.gom.adt.gom.types.SortList)tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort)tom_get_head_concSort_SortList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SortList)tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort)tom_get_head_concSort_SortList(l1),tom_append_list_concSort(( tom.gom.adt.gom.types.SortList)tom_get_tail_concSort_SortList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SortList tom_get_slice_concSort( tom.gom.adt.gom.types.SortList begin,  tom.gom.adt.gom.types.SortList end) {    if(tom_terms_equal_SortList(begin,end)) {      return ( tom.gom.adt.gom.types.SortList)tom_empty_list_concSort();    } else {      return ( tom.gom.adt.gom.types.SortList)tom_cons_list_concSort(( tom.gom.adt.gom.types.Sort)tom_get_head_concSort_SortList(begin),( tom.gom.adt.gom.types.SortList)tom_get_slice_concSort(( tom.gom.adt.gom.types.SortList)tom_get_tail_concSort_SortList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySortList( tom.gom.adt.gom.types.SortList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SortList tom_make_emptySortList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(); }private boolean tom_is_fun_sym_manySortList( tom.gom.adt.gom.types.SortList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SortList tom_make_manySortList( tom.gom.adt.gom.types.Sort e,  tom.gom.adt.gom.types.SortList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortList(e,l); }private  tom.gom.adt.gom.types.Sort tom_get_slot_manySortList_head( tom.gom.adt.gom.types.SortList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SortList tom_get_slot_manySortList_tail( tom.gom.adt.gom.types.SortList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_implementation_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return t ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_set_stamp_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return (tom.gom.adt.gom.types.OperatorDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_OperatorDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concOperator( tom.gom.adt.gom.types.OperatorDeclList t) {  return (t!= null) && t.isSortOperatorDeclList() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_empty_list_concOperator() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(); }private  tom.gom.adt.gom.types.OperatorDeclList tom_cons_list_concOperator( tom.gom.adt.gom.types.OperatorDecl e,  tom.gom.adt.gom.types.OperatorDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(e,l); }private  tom.gom.adt.gom.types.OperatorDecl tom_get_head_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_tail_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList l) {  return l.getTail() ;}private boolean tom_is_empty_concOperator_OperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_append_list_concOperator( tom.gom.adt.gom.types.OperatorDeclList l1,  tom.gom.adt.gom.types.OperatorDeclList l2) {    if(tom_is_empty_concOperator_OperatorDeclList(l1)) {     return l2;    } else if(tom_is_empty_concOperator_OperatorDeclList(l2)) {     return l1;    } else if(tom_is_empty_concOperator_OperatorDeclList(( tom.gom.adt.gom.types.OperatorDeclList)tom_get_tail_concOperator_OperatorDeclList(l1))) {     return ( tom.gom.adt.gom.types.OperatorDeclList)tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl)tom_get_head_concOperator_OperatorDeclList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList)tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl)tom_get_head_concOperator_OperatorDeclList(l1),tom_append_list_concOperator(( tom.gom.adt.gom.types.OperatorDeclList)tom_get_tail_concOperator_OperatorDeclList(l1),l2));    }   }  private  tom.gom.adt.gom.types.OperatorDeclList tom_get_slice_concOperator( tom.gom.adt.gom.types.OperatorDeclList begin,  tom.gom.adt.gom.types.OperatorDeclList end) {    if(tom_terms_equal_OperatorDeclList(begin,end)) {      return ( tom.gom.adt.gom.types.OperatorDeclList)tom_empty_list_concOperator();    } else {      return ( tom.gom.adt.gom.types.OperatorDeclList)tom_cons_list_concOperator(( tom.gom.adt.gom.types.OperatorDecl)tom_get_head_concOperator_OperatorDeclList(begin),( tom.gom.adt.gom.types.OperatorDeclList)tom_get_slice_concOperator(( tom.gom.adt.gom.types.OperatorDeclList)tom_get_tail_concOperator_OperatorDeclList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyOperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_make_emptyOperatorDeclList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(); }private boolean tom_is_fun_sym_manyOperatorDeclList( tom.gom.adt.gom.types.OperatorDeclList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_make_manyOperatorDeclList( tom.gom.adt.gom.types.OperatorDecl e,  tom.gom.adt.gom.types.OperatorDeclList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDeclList(e,l); }private  tom.gom.adt.gom.types.OperatorDecl tom_get_slot_manyOperatorDeclList_head( tom.gom.adt.gom.types.OperatorDeclList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_slot_manyOperatorDeclList_tail( tom.gom.adt.gom.types.OperatorDeclList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.Sort tom_get_implementation_Sort( tom.gom.adt.gom.types.Sort t) {  return t ;}private  tom.gom.adt.gom.types.Sort tom_set_stamp_Sort( tom.gom.adt.gom.types.Sort t) {  return (tom.gom.adt.gom.types.Sort)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Sort( tom.gom.adt.gom.types.Sort t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Sort(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Sort( tom.gom.adt.gom.types.Sort t) {  return  (t!= null) && t.isSort() ;}private  tom.gom.adt.gom.types.Sort tom_make_Sort( tom.gom.adt.gom.types.SortDecl t0,  tom.gom.adt.gom.types.OperatorDeclList t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSort_Sort(t0, t1); }private  tom.gom.adt.gom.types.SortDecl tom_get_slot_Sort_decl( tom.gom.adt.gom.types.Sort t) {  return  t.getDecl() ;}private  tom.gom.adt.gom.types.OperatorDeclList tom_get_slot_Sort_operators( tom.gom.adt.gom.types.Sort t) {  return  t.getOperators() ;}private  tom.gom.adt.gom.types.SlotList tom_get_implementation_SlotList( tom.gom.adt.gom.types.SlotList t) {  return t ;}private  tom.gom.adt.gom.types.SlotList tom_set_stamp_SlotList( tom.gom.adt.gom.types.SlotList t) {  return (tom.gom.adt.gom.types.SlotList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SlotList( tom.gom.adt.gom.types.SlotList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSlot( tom.gom.adt.gom.types.SlotList t) {  return (t!= null) && t.isSortSlotList() ;}private  tom.gom.adt.gom.types.SlotList tom_empty_list_concSlot() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private  tom.gom.adt.gom.types.SlotList tom_cons_list_concSlot( tom.gom.adt.gom.types.Slot e,  tom.gom.adt.gom.types.SlotList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private  tom.gom.adt.gom.types.Slot tom_get_head_concSlot_SlotList( tom.gom.adt.gom.types.SlotList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SlotList tom_get_tail_concSlot_SlotList( tom.gom.adt.gom.types.SlotList l) {  return l.getTail() ;}private boolean tom_is_empty_concSlot_SlotList( tom.gom.adt.gom.types.SlotList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SlotList tom_append_list_concSlot( tom.gom.adt.gom.types.SlotList l1,  tom.gom.adt.gom.types.SlotList l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.gom.adt.gom.types.SlotList)tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.gom.adt.gom.types.SlotList)tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot)tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SlotList)tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot)tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.gom.adt.gom.types.SlotList)tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SlotList tom_get_slice_concSlot( tom.gom.adt.gom.types.SlotList begin,  tom.gom.adt.gom.types.SlotList end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.gom.adt.gom.types.SlotList)tom_empty_list_concSlot();    } else {      return ( tom.gom.adt.gom.types.SlotList)tom_cons_list_concSlot(( tom.gom.adt.gom.types.Slot)tom_get_head_concSlot_SlotList(begin),( tom.gom.adt.gom.types.SlotList)tom_get_slice_concSlot(( tom.gom.adt.gom.types.SlotList)tom_get_tail_concSlot_SlotList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySlotList( tom.gom.adt.gom.types.SlotList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SlotList tom_make_emptySlotList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private boolean tom_is_fun_sym_manySlotList( tom.gom.adt.gom.types.SlotList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SlotList tom_make_manySlotList( tom.gom.adt.gom.types.Slot e,  tom.gom.adt.gom.types.SlotList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private  tom.gom.adt.gom.types.Slot tom_get_slot_manySlotList_head( tom.gom.adt.gom.types.SlotList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SlotList tom_get_slot_manySlotList_tail( tom.gom.adt.gom.types.SlotList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.Slot tom_get_implementation_Slot( tom.gom.adt.gom.types.Slot t) {  return t ;}private  tom.gom.adt.gom.types.Slot tom_set_stamp_Slot( tom.gom.adt.gom.types.Slot t) {  return (tom.gom.adt.gom.types.Slot)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Slot( tom.gom.adt.gom.types.Slot t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Slot( tom.gom.adt.gom.types.Slot t) {  return  (t!= null) && t.isSlot() ;}private  tom.gom.adt.gom.types.Slot tom_make_Slot( String  t0,  tom.gom.adt.gom.types.SortDecl t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_Slot(t0, t1); }private  String  tom_get_slot_Slot_name( tom.gom.adt.gom.types.Slot t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.SortDecl tom_get_slot_Slot_sort( tom.gom.adt.gom.types.Slot t) {  return  t.getSort() ;}private  tom.gom.adt.gom.types.TypedProduction tom_get_implementation_TypedProduction( tom.gom.adt.gom.types.TypedProduction t) {  return t ;}private  tom.gom.adt.gom.types.TypedProduction tom_set_stamp_TypedProduction( tom.gom.adt.gom.types.TypedProduction t) {  return (tom.gom.adt.gom.types.TypedProduction)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_TypedProduction( tom.gom.adt.gom.types.TypedProduction t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_TypedProduction(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Variadic( tom.gom.adt.gom.types.TypedProduction t) {  return  (t!= null) && t.isVariadic() ;}private  tom.gom.adt.gom.types.TypedProduction tom_make_Variadic( tom.gom.adt.gom.types.SortDecl t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTypedProduction_Variadic(t0); }private  tom.gom.adt.gom.types.SortDecl tom_get_slot_Variadic_sort( tom.gom.adt.gom.types.TypedProduction t) {  return  t.getSort() ;}private boolean tom_is_fun_sym_Slots( tom.gom.adt.gom.types.TypedProduction t) {  return  (t!= null) && t.isSlots() ;}private  tom.gom.adt.gom.types.TypedProduction tom_make_Slots( tom.gom.adt.gom.types.SlotList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTypedProduction_Slots(t0); }private  tom.gom.adt.gom.types.SlotList tom_get_slot_Slots_slots( tom.gom.adt.gom.types.TypedProduction t) {  return  t.getSlots() ;}private  tom.gom.adt.gom.types.OperatorDecl tom_get_implementation_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) {  return t ;}private  tom.gom.adt.gom.types.OperatorDecl tom_set_stamp_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) {  return (tom.gom.adt.gom.types.OperatorDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_OperatorDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_OperatorDecl( tom.gom.adt.gom.types.OperatorDecl t) {  return  (t!= null) && t.isOperatorDecl() ;}private  tom.gom.adt.gom.types.OperatorDecl tom_make_OperatorDecl( String  t0,  tom.gom.adt.gom.types.SortDecl t1,  tom.gom.adt.gom.types.TypedProduction t2) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOperatorDecl_OperatorDecl(t0, t1, t2); }private  String  tom_get_slot_OperatorDecl_name( tom.gom.adt.gom.types.OperatorDecl t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.SortDecl tom_get_slot_OperatorDecl_sort( tom.gom.adt.gom.types.OperatorDecl t) {  return  t.getSort() ;}private  tom.gom.adt.gom.types.TypedProduction tom_get_slot_OperatorDecl_prod( tom.gom.adt.gom.types.OperatorDecl t) {  return  t.getProd() ;}private  tom.gom.adt.gom.types.SortDecl tom_get_implementation_SortDecl( tom.gom.adt.gom.types.SortDecl t) {  return t ;}private  tom.gom.adt.gom.types.SortDecl tom_set_stamp_SortDecl( tom.gom.adt.gom.types.SortDecl t) {  return (tom.gom.adt.gom.types.SortDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SortDecl( tom.gom.adt.gom.types.SortDecl t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SortDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_BuiltinSortDecl( tom.gom.adt.gom.types.SortDecl t) {  return  (t!= null) && t.isBuiltinSortDecl() ;}private  tom.gom.adt.gom.types.SortDecl tom_make_BuiltinSortDecl( String  t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDecl_BuiltinSortDecl(t0); }private  String  tom_get_slot_BuiltinSortDecl_name( tom.gom.adt.gom.types.SortDecl t) {  return  t.getName() ;}private boolean tom_is_fun_sym_SortDecl( tom.gom.adt.gom.types.SortDecl t) {  return  (t!= null) && t.isSortDecl() ;}private  tom.gom.adt.gom.types.SortDecl tom_make_SortDecl( String  t0,  tom.gom.adt.gom.types.ModuleDecl t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSortDecl_SortDecl(t0, t1); }private  String  tom_get_slot_SortDecl_name( tom.gom.adt.gom.types.SortDecl t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.ModuleDecl tom_get_slot_SortDecl_moduleDecl( tom.gom.adt.gom.types.SortDecl t) {  return  t.getModuleDecl() ;}private  tom.gom.adt.gom.types.ModuleDecl tom_get_implementation_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) {  return t ;}private  tom.gom.adt.gom.types.ModuleDecl tom_set_stamp_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) {  return (tom.gom.adt.gom.types.ModuleDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ModuleDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_ModuleDecl( tom.gom.adt.gom.types.ModuleDecl t) {  return  (t!= null) && t.isModuleDecl() ;}private  tom.gom.adt.gom.types.ModuleDecl tom_make_ModuleDecl( tom.gom.adt.gom.types.GomModuleName t0,  String  t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeModuleDecl_ModuleDecl(t0, t1); }private  tom.gom.adt.gom.types.GomModuleName tom_get_slot_ModuleDecl_moduleName( tom.gom.adt.gom.types.ModuleDecl t) {  return  t.getModuleName() ;}private  String  tom_get_slot_ModuleDecl_pkg( tom.gom.adt.gom.types.ModuleDecl t) {  return  t.getPkg() ;}private  tom.gom.adt.gom.types.GomModuleList tom_get_implementation_GomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return t ;}private  tom.gom.adt.gom.types.GomModuleList tom_set_stamp_GomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return (tom.gom.adt.gom.types.GomModuleList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomModuleList( tom.gom.adt.gom.types.GomModuleList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomModuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGomModule( tom.gom.adt.gom.types.GomModuleList t) {  return (t!= null) && t.isSortGomModuleList() ;}private  tom.gom.adt.gom.types.GomModuleList tom_empty_list_concGomModule() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(); }private  tom.gom.adt.gom.types.GomModuleList tom_cons_list_concGomModule( tom.gom.adt.gom.types.GomModule e,  tom.gom.adt.gom.types.GomModuleList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(e,l); }private  tom.gom.adt.gom.types.GomModule tom_get_head_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.GomModuleList tom_get_tail_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList l) {  return l.getTail() ;}private boolean tom_is_empty_concGomModule_GomModuleList( tom.gom.adt.gom.types.GomModuleList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.GomModuleList tom_append_list_concGomModule( tom.gom.adt.gom.types.GomModuleList l1,  tom.gom.adt.gom.types.GomModuleList l2) {    if(tom_is_empty_concGomModule_GomModuleList(l1)) {     return l2;    } else if(tom_is_empty_concGomModule_GomModuleList(l2)) {     return l1;    } else if(tom_is_empty_concGomModule_GomModuleList(( tom.gom.adt.gom.types.GomModuleList)tom_get_tail_concGomModule_GomModuleList(l1))) {     return ( tom.gom.adt.gom.types.GomModuleList)tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule)tom_get_head_concGomModule_GomModuleList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GomModuleList)tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule)tom_get_head_concGomModule_GomModuleList(l1),tom_append_list_concGomModule(( tom.gom.adt.gom.types.GomModuleList)tom_get_tail_concGomModule_GomModuleList(l1),l2));    }   }  private  tom.gom.adt.gom.types.GomModuleList tom_get_slice_concGomModule( tom.gom.adt.gom.types.GomModuleList begin,  tom.gom.adt.gom.types.GomModuleList end) {    if(tom_terms_equal_GomModuleList(begin,end)) {      return ( tom.gom.adt.gom.types.GomModuleList)tom_empty_list_concGomModule();    } else {      return ( tom.gom.adt.gom.types.GomModuleList)tom_cons_list_concGomModule(( tom.gom.adt.gom.types.GomModule)tom_get_head_concGomModule_GomModuleList(begin),( tom.gom.adt.gom.types.GomModuleList)tom_get_slice_concGomModule(( tom.gom.adt.gom.types.GomModuleList)tom_get_tail_concGomModule_GomModuleList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.GomModuleList tom_make_emptyGomModuleList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(); }private boolean tom_is_fun_sym_manyGomModuleList( tom.gom.adt.gom.types.GomModuleList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.GomModuleList tom_make_manyGomModuleList( tom.gom.adt.gom.types.GomModule e,  tom.gom.adt.gom.types.GomModuleList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleList(e,l); }private  tom.gom.adt.gom.types.GomModule tom_get_slot_manyGomModuleList_head( tom.gom.adt.gom.types.GomModuleList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.GomModuleList tom_get_slot_manyGomModuleList_tail( tom.gom.adt.gom.types.GomModuleList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.GrammarList tom_get_implementation_GrammarList( tom.gom.adt.gom.types.GrammarList t) {  return t ;}private  tom.gom.adt.gom.types.GrammarList tom_set_stamp_GrammarList( tom.gom.adt.gom.types.GrammarList t) {  return (tom.gom.adt.gom.types.GrammarList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GrammarList( tom.gom.adt.gom.types.GrammarList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GrammarList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGrammar( tom.gom.adt.gom.types.GrammarList t) {  return (t!= null) && t.isSortGrammarList() ;}private  tom.gom.adt.gom.types.GrammarList tom_empty_list_concGrammar() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(); }private  tom.gom.adt.gom.types.GrammarList tom_cons_list_concGrammar( tom.gom.adt.gom.types.Grammar e,  tom.gom.adt.gom.types.GrammarList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(e,l); }private  tom.gom.adt.gom.types.Grammar tom_get_head_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.GrammarList tom_get_tail_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList l) {  return l.getTail() ;}private boolean tom_is_empty_concGrammar_GrammarList( tom.gom.adt.gom.types.GrammarList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.GrammarList tom_append_list_concGrammar( tom.gom.adt.gom.types.GrammarList l1,  tom.gom.adt.gom.types.GrammarList l2) {    if(tom_is_empty_concGrammar_GrammarList(l1)) {     return l2;    } else if(tom_is_empty_concGrammar_GrammarList(l2)) {     return l1;    } else if(tom_is_empty_concGrammar_GrammarList(( tom.gom.adt.gom.types.GrammarList)tom_get_tail_concGrammar_GrammarList(l1))) {     return ( tom.gom.adt.gom.types.GrammarList)tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar)tom_get_head_concGrammar_GrammarList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GrammarList)tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar)tom_get_head_concGrammar_GrammarList(l1),tom_append_list_concGrammar(( tom.gom.adt.gom.types.GrammarList)tom_get_tail_concGrammar_GrammarList(l1),l2));    }   }  private  tom.gom.adt.gom.types.GrammarList tom_get_slice_concGrammar( tom.gom.adt.gom.types.GrammarList begin,  tom.gom.adt.gom.types.GrammarList end) {    if(tom_terms_equal_GrammarList(begin,end)) {      return ( tom.gom.adt.gom.types.GrammarList)tom_empty_list_concGrammar();    } else {      return ( tom.gom.adt.gom.types.GrammarList)tom_cons_list_concGrammar(( tom.gom.adt.gom.types.Grammar)tom_get_head_concGrammar_GrammarList(begin),( tom.gom.adt.gom.types.GrammarList)tom_get_slice_concGrammar(( tom.gom.adt.gom.types.GrammarList)tom_get_tail_concGrammar_GrammarList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGrammarList( tom.gom.adt.gom.types.GrammarList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.GrammarList tom_make_emptyGrammarList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(); }private boolean tom_is_fun_sym_manyGrammarList( tom.gom.adt.gom.types.GrammarList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.GrammarList tom_make_manyGrammarList( tom.gom.adt.gom.types.Grammar e,  tom.gom.adt.gom.types.GrammarList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammarList(e,l); }private  tom.gom.adt.gom.types.Grammar tom_get_slot_manyGrammarList_head( tom.gom.adt.gom.types.GrammarList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.GrammarList tom_get_slot_manyGrammarList_tail( tom.gom.adt.gom.types.GrammarList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.ImportList tom_get_implementation_ImportList( tom.gom.adt.gom.types.ImportList t) {  return t ;}private  tom.gom.adt.gom.types.ImportList tom_set_stamp_ImportList( tom.gom.adt.gom.types.ImportList t) {  return (tom.gom.adt.gom.types.ImportList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ImportList( tom.gom.adt.gom.types.ImportList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ImportList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concImportedModule( tom.gom.adt.gom.types.ImportList t) {  return (t!= null) && t.isSortImportList() ;}private  tom.gom.adt.gom.types.ImportList tom_empty_list_concImportedModule() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(); }private  tom.gom.adt.gom.types.ImportList tom_cons_list_concImportedModule( tom.gom.adt.gom.types.ImportedModule e,  tom.gom.adt.gom.types.ImportList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(e,l); }private  tom.gom.adt.gom.types.ImportedModule tom_get_head_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.ImportList tom_get_tail_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList l) {  return l.getTail() ;}private boolean tom_is_empty_concImportedModule_ImportList( tom.gom.adt.gom.types.ImportList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.ImportList tom_append_list_concImportedModule( tom.gom.adt.gom.types.ImportList l1,  tom.gom.adt.gom.types.ImportList l2) {    if(tom_is_empty_concImportedModule_ImportList(l1)) {     return l2;    } else if(tom_is_empty_concImportedModule_ImportList(l2)) {     return l1;    } else if(tom_is_empty_concImportedModule_ImportList(( tom.gom.adt.gom.types.ImportList)tom_get_tail_concImportedModule_ImportList(l1))) {     return ( tom.gom.adt.gom.types.ImportList)tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule)tom_get_head_concImportedModule_ImportList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ImportList)tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule)tom_get_head_concImportedModule_ImportList(l1),tom_append_list_concImportedModule(( tom.gom.adt.gom.types.ImportList)tom_get_tail_concImportedModule_ImportList(l1),l2));    }   }  private  tom.gom.adt.gom.types.ImportList tom_get_slice_concImportedModule( tom.gom.adt.gom.types.ImportList begin,  tom.gom.adt.gom.types.ImportList end) {    if(tom_terms_equal_ImportList(begin,end)) {      return ( tom.gom.adt.gom.types.ImportList)tom_empty_list_concImportedModule();    } else {      return ( tom.gom.adt.gom.types.ImportList)tom_cons_list_concImportedModule(( tom.gom.adt.gom.types.ImportedModule)tom_get_head_concImportedModule_ImportList(begin),( tom.gom.adt.gom.types.ImportList)tom_get_slice_concImportedModule(( tom.gom.adt.gom.types.ImportList)tom_get_tail_concImportedModule_ImportList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyImportList( tom.gom.adt.gom.types.ImportList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.ImportList tom_make_emptyImportList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(); }private boolean tom_is_fun_sym_manyImportList( tom.gom.adt.gom.types.ImportList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.ImportList tom_make_manyImportList( tom.gom.adt.gom.types.ImportedModule e,  tom.gom.adt.gom.types.ImportList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportList(e,l); }private  tom.gom.adt.gom.types.ImportedModule tom_get_slot_manyImportList_head( tom.gom.adt.gom.types.ImportList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.ImportList tom_get_slot_manyImportList_tail( tom.gom.adt.gom.types.ImportList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.FieldList tom_get_implementation_FieldList( tom.gom.adt.gom.types.FieldList t) {  return t ;}private  tom.gom.adt.gom.types.FieldList tom_set_stamp_FieldList( tom.gom.adt.gom.types.FieldList t) {  return (tom.gom.adt.gom.types.FieldList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_FieldList( tom.gom.adt.gom.types.FieldList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_FieldList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concField( tom.gom.adt.gom.types.FieldList t) {  return (t!= null) && t.isSortFieldList() ;}private  tom.gom.adt.gom.types.FieldList tom_empty_list_concField() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(); }private  tom.gom.adt.gom.types.FieldList tom_cons_list_concField( tom.gom.adt.gom.types.Field e,  tom.gom.adt.gom.types.FieldList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(e,l); }private  tom.gom.adt.gom.types.Field tom_get_head_concField_FieldList( tom.gom.adt.gom.types.FieldList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.FieldList tom_get_tail_concField_FieldList( tom.gom.adt.gom.types.FieldList l) {  return l.getTail() ;}private boolean tom_is_empty_concField_FieldList( tom.gom.adt.gom.types.FieldList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.FieldList tom_append_list_concField( tom.gom.adt.gom.types.FieldList l1,  tom.gom.adt.gom.types.FieldList l2) {    if(tom_is_empty_concField_FieldList(l1)) {     return l2;    } else if(tom_is_empty_concField_FieldList(l2)) {     return l1;    } else if(tom_is_empty_concField_FieldList(( tom.gom.adt.gom.types.FieldList)tom_get_tail_concField_FieldList(l1))) {     return ( tom.gom.adt.gom.types.FieldList)tom_cons_list_concField(( tom.gom.adt.gom.types.Field)tom_get_head_concField_FieldList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.FieldList)tom_cons_list_concField(( tom.gom.adt.gom.types.Field)tom_get_head_concField_FieldList(l1),tom_append_list_concField(( tom.gom.adt.gom.types.FieldList)tom_get_tail_concField_FieldList(l1),l2));    }   }  private  tom.gom.adt.gom.types.FieldList tom_get_slice_concField( tom.gom.adt.gom.types.FieldList begin,  tom.gom.adt.gom.types.FieldList end) {    if(tom_terms_equal_FieldList(begin,end)) {      return ( tom.gom.adt.gom.types.FieldList)tom_empty_list_concField();    } else {      return ( tom.gom.adt.gom.types.FieldList)tom_cons_list_concField(( tom.gom.adt.gom.types.Field)tom_get_head_concField_FieldList(begin),( tom.gom.adt.gom.types.FieldList)tom_get_slice_concField(( tom.gom.adt.gom.types.FieldList)tom_get_tail_concField_FieldList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyFieldList( tom.gom.adt.gom.types.FieldList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.FieldList tom_make_emptyFieldList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(); }private boolean tom_is_fun_sym_manyFieldList( tom.gom.adt.gom.types.FieldList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.FieldList tom_make_manyFieldList( tom.gom.adt.gom.types.Field e,  tom.gom.adt.gom.types.FieldList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeFieldList(e,l); }private  tom.gom.adt.gom.types.Field tom_get_slot_manyFieldList_head( tom.gom.adt.gom.types.FieldList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.FieldList tom_get_slot_manyFieldList_tail( tom.gom.adt.gom.types.FieldList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.ProductionList tom_get_implementation_ProductionList( tom.gom.adt.gom.types.ProductionList t) {  return t ;}private  tom.gom.adt.gom.types.ProductionList tom_set_stamp_ProductionList( tom.gom.adt.gom.types.ProductionList t) {  return (tom.gom.adt.gom.types.ProductionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ProductionList( tom.gom.adt.gom.types.ProductionList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ProductionList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concProduction( tom.gom.adt.gom.types.ProductionList t) {  return (t!= null) && t.isSortProductionList() ;}private  tom.gom.adt.gom.types.ProductionList tom_empty_list_concProduction() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(); }private  tom.gom.adt.gom.types.ProductionList tom_cons_list_concProduction( tom.gom.adt.gom.types.Production e,  tom.gom.adt.gom.types.ProductionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(e,l); }private  tom.gom.adt.gom.types.Production tom_get_head_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.ProductionList tom_get_tail_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList l) {  return l.getTail() ;}private boolean tom_is_empty_concProduction_ProductionList( tom.gom.adt.gom.types.ProductionList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.ProductionList tom_append_list_concProduction( tom.gom.adt.gom.types.ProductionList l1,  tom.gom.adt.gom.types.ProductionList l2) {    if(tom_is_empty_concProduction_ProductionList(l1)) {     return l2;    } else if(tom_is_empty_concProduction_ProductionList(l2)) {     return l1;    } else if(tom_is_empty_concProduction_ProductionList(( tom.gom.adt.gom.types.ProductionList)tom_get_tail_concProduction_ProductionList(l1))) {     return ( tom.gom.adt.gom.types.ProductionList)tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production)tom_get_head_concProduction_ProductionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.ProductionList)tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production)tom_get_head_concProduction_ProductionList(l1),tom_append_list_concProduction(( tom.gom.adt.gom.types.ProductionList)tom_get_tail_concProduction_ProductionList(l1),l2));    }   }  private  tom.gom.adt.gom.types.ProductionList tom_get_slice_concProduction( tom.gom.adt.gom.types.ProductionList begin,  tom.gom.adt.gom.types.ProductionList end) {    if(tom_terms_equal_ProductionList(begin,end)) {      return ( tom.gom.adt.gom.types.ProductionList)tom_empty_list_concProduction();    } else {      return ( tom.gom.adt.gom.types.ProductionList)tom_cons_list_concProduction(( tom.gom.adt.gom.types.Production)tom_get_head_concProduction_ProductionList(begin),( tom.gom.adt.gom.types.ProductionList)tom_get_slice_concProduction(( tom.gom.adt.gom.types.ProductionList)tom_get_tail_concProduction_ProductionList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyProductionList( tom.gom.adt.gom.types.ProductionList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.ProductionList tom_make_emptyProductionList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(); }private boolean tom_is_fun_sym_manyProductionList( tom.gom.adt.gom.types.ProductionList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.ProductionList tom_make_manyProductionList( tom.gom.adt.gom.types.Production e,  tom.gom.adt.gom.types.ProductionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProductionList(e,l); }private  tom.gom.adt.gom.types.Production tom_get_slot_manyProductionList_head( tom.gom.adt.gom.types.ProductionList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.ProductionList tom_get_slot_manyProductionList_tail( tom.gom.adt.gom.types.ProductionList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.GomTypeList tom_get_implementation_GomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return t ;}private  tom.gom.adt.gom.types.GomTypeList tom_set_stamp_GomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return (tom.gom.adt.gom.types.GomTypeList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomTypeList( tom.gom.adt.gom.types.GomTypeList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concGomType( tom.gom.adt.gom.types.GomTypeList t) {  return (t!= null) && t.isSortGomTypeList() ;}private  tom.gom.adt.gom.types.GomTypeList tom_empty_list_concGomType() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(); }private  tom.gom.adt.gom.types.GomTypeList tom_cons_list_concGomType( tom.gom.adt.gom.types.GomType e,  tom.gom.adt.gom.types.GomTypeList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(e,l); }private  tom.gom.adt.gom.types.GomType tom_get_head_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.GomTypeList tom_get_tail_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList l) {  return l.getTail() ;}private boolean tom_is_empty_concGomType_GomTypeList( tom.gom.adt.gom.types.GomTypeList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.GomTypeList tom_append_list_concGomType( tom.gom.adt.gom.types.GomTypeList l1,  tom.gom.adt.gom.types.GomTypeList l2) {    if(tom_is_empty_concGomType_GomTypeList(l1)) {     return l2;    } else if(tom_is_empty_concGomType_GomTypeList(l2)) {     return l1;    } else if(tom_is_empty_concGomType_GomTypeList(( tom.gom.adt.gom.types.GomTypeList)tom_get_tail_concGomType_GomTypeList(l1))) {     return ( tom.gom.adt.gom.types.GomTypeList)tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType)tom_get_head_concGomType_GomTypeList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.GomTypeList)tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType)tom_get_head_concGomType_GomTypeList(l1),tom_append_list_concGomType(( tom.gom.adt.gom.types.GomTypeList)tom_get_tail_concGomType_GomTypeList(l1),l2));    }   }  private  tom.gom.adt.gom.types.GomTypeList tom_get_slice_concGomType( tom.gom.adt.gom.types.GomTypeList begin,  tom.gom.adt.gom.types.GomTypeList end) {    if(tom_terms_equal_GomTypeList(begin,end)) {      return ( tom.gom.adt.gom.types.GomTypeList)tom_empty_list_concGomType();    } else {      return ( tom.gom.adt.gom.types.GomTypeList)tom_cons_list_concGomType(( tom.gom.adt.gom.types.GomType)tom_get_head_concGomType_GomTypeList(begin),( tom.gom.adt.gom.types.GomTypeList)tom_get_slice_concGomType(( tom.gom.adt.gom.types.GomTypeList)tom_get_tail_concGomType_GomTypeList(begin),end));    }   }  private boolean tom_is_fun_sym_emptyGomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.GomTypeList tom_make_emptyGomTypeList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(); }private boolean tom_is_fun_sym_manyGomTypeList( tom.gom.adt.gom.types.GomTypeList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.GomTypeList tom_make_manyGomTypeList( tom.gom.adt.gom.types.GomType e,  tom.gom.adt.gom.types.GomTypeList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomTypeList(e,l); }private  tom.gom.adt.gom.types.GomType tom_get_slot_manyGomTypeList_head( tom.gom.adt.gom.types.GomTypeList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.GomTypeList tom_get_slot_manyGomTypeList_tail( tom.gom.adt.gom.types.GomTypeList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.SectionList tom_get_implementation_SectionList( tom.gom.adt.gom.types.SectionList t) {  return t ;}private  tom.gom.adt.gom.types.SectionList tom_set_stamp_SectionList( tom.gom.adt.gom.types.SectionList t) {  return (tom.gom.adt.gom.types.SectionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_SectionList( tom.gom.adt.gom.types.SectionList t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_SectionList(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_concSection( tom.gom.adt.gom.types.SectionList t) {  return (t!= null) && t.isSortSectionList() ;}private  tom.gom.adt.gom.types.SectionList tom_empty_list_concSection() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(); }private  tom.gom.adt.gom.types.SectionList tom_cons_list_concSection( tom.gom.adt.gom.types.Section e,  tom.gom.adt.gom.types.SectionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(e,l); }private  tom.gom.adt.gom.types.Section tom_get_head_concSection_SectionList( tom.gom.adt.gom.types.SectionList l) {  return l.getHead() ;}private  tom.gom.adt.gom.types.SectionList tom_get_tail_concSection_SectionList( tom.gom.adt.gom.types.SectionList l) {  return l.getTail() ;}private boolean tom_is_empty_concSection_SectionList( tom.gom.adt.gom.types.SectionList l) {  return l.isEmpty() ;}private  tom.gom.adt.gom.types.SectionList tom_append_list_concSection( tom.gom.adt.gom.types.SectionList l1,  tom.gom.adt.gom.types.SectionList l2) {    if(tom_is_empty_concSection_SectionList(l1)) {     return l2;    } else if(tom_is_empty_concSection_SectionList(l2)) {     return l1;    } else if(tom_is_empty_concSection_SectionList(( tom.gom.adt.gom.types.SectionList)tom_get_tail_concSection_SectionList(l1))) {     return ( tom.gom.adt.gom.types.SectionList)tom_cons_list_concSection(( tom.gom.adt.gom.types.Section)tom_get_head_concSection_SectionList(l1),l2);    } else {      return ( tom.gom.adt.gom.types.SectionList)tom_cons_list_concSection(( tom.gom.adt.gom.types.Section)tom_get_head_concSection_SectionList(l1),tom_append_list_concSection(( tom.gom.adt.gom.types.SectionList)tom_get_tail_concSection_SectionList(l1),l2));    }   }  private  tom.gom.adt.gom.types.SectionList tom_get_slice_concSection( tom.gom.adt.gom.types.SectionList begin,  tom.gom.adt.gom.types.SectionList end) {    if(tom_terms_equal_SectionList(begin,end)) {      return ( tom.gom.adt.gom.types.SectionList)tom_empty_list_concSection();    } else {      return ( tom.gom.adt.gom.types.SectionList)tom_cons_list_concSection(( tom.gom.adt.gom.types.Section)tom_get_head_concSection_SectionList(begin),( tom.gom.adt.gom.types.SectionList)tom_get_slice_concSection(( tom.gom.adt.gom.types.SectionList)tom_get_tail_concSection_SectionList(begin),end));    }   }  private boolean tom_is_fun_sym_emptySectionList( tom.gom.adt.gom.types.SectionList t) {  return  (t!= null) && t.isEmpty() ;}private  tom.gom.adt.gom.types.SectionList tom_make_emptySectionList() { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(); }private boolean tom_is_fun_sym_manySectionList( tom.gom.adt.gom.types.SectionList t) {  return  (t!= null) && t.isMany() ;}private  tom.gom.adt.gom.types.SectionList tom_make_manySectionList( tom.gom.adt.gom.types.Section e,  tom.gom.adt.gom.types.SectionList l) { return tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSectionList(e,l); }private  tom.gom.adt.gom.types.Section tom_get_slot_manySectionList_head( tom.gom.adt.gom.types.SectionList t) {  return  t.getHead() ;}private  tom.gom.adt.gom.types.SectionList tom_get_slot_manySectionList_tail( tom.gom.adt.gom.types.SectionList t) {  return  t.getTail() ;}private  tom.gom.adt.gom.types.GomType tom_get_implementation_GomType( tom.gom.adt.gom.types.GomType t) {  return t ;}private  tom.gom.adt.gom.types.GomType tom_set_stamp_GomType( tom.gom.adt.gom.types.GomType t) {  return (tom.gom.adt.gom.types.GomType)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomType( tom.gom.adt.gom.types.GomType t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomType(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_GomType( tom.gom.adt.gom.types.GomType t) {  return  (t!= null) && t.isGomType() ;}private  tom.gom.adt.gom.types.GomType tom_make_GomType( String  t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomType_GomType(t0); }private  String  tom_get_slot_GomType_name( tom.gom.adt.gom.types.GomType t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.GomModuleName tom_get_implementation_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) {  return t ;}private  tom.gom.adt.gom.types.GomModuleName tom_set_stamp_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) {  return (tom.gom.adt.gom.types.GomModuleName)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomModuleName(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_GomModuleName( tom.gom.adt.gom.types.GomModuleName t) {  return  (t!= null) && t.isGomModuleName() ;}private  tom.gom.adt.gom.types.GomModuleName tom_make_GomModuleName( String  t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModuleName_GomModuleName(t0); }private  String  tom_get_slot_GomModuleName_name( tom.gom.adt.gom.types.GomModuleName t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.Field tom_get_implementation_Field( tom.gom.adt.gom.types.Field t) {  return t ;}private  tom.gom.adt.gom.types.Field tom_set_stamp_Field( tom.gom.adt.gom.types.Field t) {  return (tom.gom.adt.gom.types.Field)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Field( tom.gom.adt.gom.types.Field t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Field(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_NamedField( tom.gom.adt.gom.types.Field t) {  return  (t!= null) && t.isNamedField() ;}private  tom.gom.adt.gom.types.Field tom_make_NamedField( String  t0,  tom.gom.adt.gom.types.GomType t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeField_NamedField(t0, t1); }private  String  tom_get_slot_NamedField_name( tom.gom.adt.gom.types.Field t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.GomType tom_get_slot_NamedField_fieldType( tom.gom.adt.gom.types.Field t) {  return  t.getFieldType() ;}private boolean tom_is_fun_sym_StaredField( tom.gom.adt.gom.types.Field t) {  return  (t!= null) && t.isStaredField() ;}private  tom.gom.adt.gom.types.Field tom_make_StaredField( tom.gom.adt.gom.types.GomType t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeField_StaredField(t0); }private  tom.gom.adt.gom.types.GomType tom_get_slot_StaredField_fieldType( tom.gom.adt.gom.types.Field t) {  return  t.getFieldType() ;}private  tom.gom.adt.gom.types.Production tom_get_implementation_Production( tom.gom.adt.gom.types.Production t) {  return t ;}private  tom.gom.adt.gom.types.Production tom_set_stamp_Production( tom.gom.adt.gom.types.Production t) {  return (tom.gom.adt.gom.types.Production)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Production( tom.gom.adt.gom.types.Production t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Production(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Production( tom.gom.adt.gom.types.Production t) {  return  (t!= null) && t.isProduction() ;}private  tom.gom.adt.gom.types.Production tom_make_Production( String  t0,  tom.gom.adt.gom.types.FieldList t1,  tom.gom.adt.gom.types.GomType t2) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeProduction_Production(t0, t1, t2); }private  String  tom_get_slot_Production_name( tom.gom.adt.gom.types.Production t) {  return  t.getName() ;}private  tom.gom.adt.gom.types.FieldList tom_get_slot_Production_domain( tom.gom.adt.gom.types.Production t) {  return  t.getDomain() ;}private  tom.gom.adt.gom.types.GomType tom_get_slot_Production_codomain( tom.gom.adt.gom.types.Production t) {  return  t.getCodomain() ;}private  tom.gom.adt.gom.types.Grammar tom_get_implementation_Grammar( tom.gom.adt.gom.types.Grammar t) {  return t ;}private  tom.gom.adt.gom.types.Grammar tom_set_stamp_Grammar( tom.gom.adt.gom.types.Grammar t) {  return (tom.gom.adt.gom.types.Grammar)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Grammar( tom.gom.adt.gom.types.Grammar t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Grammar(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Sorts( tom.gom.adt.gom.types.Grammar t) {  return  (t!= null) && t.isSorts() ;}private  tom.gom.adt.gom.types.Grammar tom_make_Sorts( tom.gom.adt.gom.types.GomTypeList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammar_Sorts(t0); }private  tom.gom.adt.gom.types.GomTypeList tom_get_slot_Sorts_typeList( tom.gom.adt.gom.types.Grammar t) {  return  t.getTypeList() ;}private boolean tom_is_fun_sym_Grammar( tom.gom.adt.gom.types.Grammar t) {  return  (t!= null) && t.isGrammar() ;}private  tom.gom.adt.gom.types.Grammar tom_make_Grammar( tom.gom.adt.gom.types.ProductionList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGrammar_Grammar(t0); }private  tom.gom.adt.gom.types.ProductionList tom_get_slot_Grammar_productionList( tom.gom.adt.gom.types.Grammar t) {  return  t.getProductionList() ;}private  tom.gom.adt.gom.types.ImportedModule tom_get_implementation_ImportedModule( tom.gom.adt.gom.types.ImportedModule t) {  return t ;}private  tom.gom.adt.gom.types.ImportedModule tom_set_stamp_ImportedModule( tom.gom.adt.gom.types.ImportedModule t) {  return (tom.gom.adt.gom.types.ImportedModule)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_ImportedModule( tom.gom.adt.gom.types.ImportedModule t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_ImportedModule(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Import( tom.gom.adt.gom.types.ImportedModule t) {  return  (t!= null) && t.isImport() ;}private  tom.gom.adt.gom.types.ImportedModule tom_make_Import( tom.gom.adt.gom.types.GomModuleName t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeImportedModule_Import(t0); }private  tom.gom.adt.gom.types.GomModuleName tom_get_slot_Import_moduleName( tom.gom.adt.gom.types.ImportedModule t) {  return  t.getModuleName() ;}private  tom.gom.adt.gom.types.Section tom_get_implementation_Section( tom.gom.adt.gom.types.Section t) {  return t ;}private  tom.gom.adt.gom.types.Section tom_set_stamp_Section( tom.gom.adt.gom.types.Section t) {  return (tom.gom.adt.gom.types.Section)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_Section( tom.gom.adt.gom.types.Section t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_Section(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_Public( tom.gom.adt.gom.types.Section t) {  return  (t!= null) && t.isPublic() ;}private  tom.gom.adt.gom.types.Section tom_make_Public( tom.gom.adt.gom.types.GrammarList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSection_Public(t0); }private  tom.gom.adt.gom.types.GrammarList tom_get_slot_Public_grammarList( tom.gom.adt.gom.types.Section t) {  return  t.getGrammarList() ;}private boolean tom_is_fun_sym_Imports( tom.gom.adt.gom.types.Section t) {  return  (t!= null) && t.isImports() ;}private  tom.gom.adt.gom.types.Section tom_make_Imports( tom.gom.adt.gom.types.ImportList t0) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSection_Imports(t0); }private  tom.gom.adt.gom.types.ImportList tom_get_slot_Imports_importList( tom.gom.adt.gom.types.Section t) {  return  t.getImportList() ;}private  tom.gom.adt.gom.types.GomModule tom_get_implementation_GomModule( tom.gom.adt.gom.types.GomModule t) {  return t ;}private  tom.gom.adt.gom.types.GomModule tom_set_stamp_GomModule( tom.gom.adt.gom.types.GomModule t) {  return (tom.gom.adt.gom.types.GomModule)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList()) ;}private void tom_check_stamp_GomModule( tom.gom.adt.gom.types.GomModule t) { if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp");}private boolean tom_terms_equal_GomModule(Object t1, Object t2) {  return t1.equals(t2) ;}private boolean tom_is_fun_sym_GomModule( tom.gom.adt.gom.types.GomModule t) {  return  (t!= null) && t.isGomModule() ;}private  tom.gom.adt.gom.types.GomModule tom_make_GomModule( tom.gom.adt.gom.types.GomModuleName t0,  tom.gom.adt.gom.types.SectionList t1) { return  tom.gom.adt.gom.GomFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeGomModule_GomModule(t0, t1); }private  tom.gom.adt.gom.types.GomModuleName tom_get_slot_GomModule_moduleName( tom.gom.adt.gom.types.GomModule t) {  return  t.getModuleName() ;}private  tom.gom.adt.gom.types.SectionList tom_get_slot_GomModule_sectionList( tom.gom.adt.gom.types.GomModule t) {  return  t.getSectionList() ;}  

	private static final String REAL ="real";
	private static final String DOUBLE ="double";

  private GomEnvironment environment() {
    return GomEnvironment.getInstance();
  }

protected GomParser(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
}

public GomParser(TokenBuffer tokenBuf) {
  this(tokenBuf,2);
}

protected GomParser(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
}

public GomParser(TokenStream lexer) {
  this(lexer,2);
}

public GomParser(ParserSharedInputState state) {
  super(state,2);
  tokenNames = _tokenNames;
}

	public final GomModule  module() throws RecognitionException, TokenStreamException {
		GomModule module;
		
		Token  moduleName = null;
		
			module = null;
			GomModuleName gomModuleName = null;
			ImportList impor = tom_empty_list_concImportedModule();
		Section parsedsection = null;
		
		
		match(MODULE);
		moduleName = LT(1);
		match(IDENTIFIER);
			gomModuleName = tom_make_GomModuleName(moduleName.getText());
		{
		switch ( LA(1)) {
		case IMPORTS:
		{
			impor=imports();
			break;
		}
		case PUBLIC:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		parsedsection=section();
		
		module = tom_make_GomModule(gomModuleName,tom_cons_list_concSection(tom_make_Imports(impor),tom_cons_list_concSection(parsedsection,tom_empty_list_concSection())))
		;
		
		return module;
	}
	
	public final ImportList  imports() throws RecognitionException, TokenStreamException {
		ImportList imports;
		
		Token  importedModuleName = null;
		
			imports = tom_empty_list_concImportedModule();
		
		
		match(IMPORTS);
		{
		_loop5:
		do {
			if ((LA(1)==IDENTIFIER)) {
				importedModuleName = LT(1);
				match(IDENTIFIER);
				
				imports = tom_cons_list_concImportedModule(tom_make_Import(tom_make_GomModuleName(importedModuleName.getText())),tom_append_list_concImportedModule(imports,tom_empty_list_concImportedModule()))
				;
				
			}
			else {
				break _loop5;
			}
			
		} while (true);
		}
		return imports;
	}
	
	public final Section  section() throws RecognitionException, TokenStreamException {
		Section parsedsection;
		
		
		parsedsection = null;
		GrammarList grammarlist = tom_empty_list_concGrammar();
		
		
		match(PUBLIC);
		{
		grammarlist=grammar();
		}
		
		parsedsection = tom_make_Public(grammarlist);
		
		return parsedsection;
	}
	
	public final GrammarList  grammar() throws RecognitionException, TokenStreamException {
		GrammarList grammars;
		
		
		grammars = tom_empty_list_concGrammar();
		ProductionList prods = tom_empty_list_concProduction();
		GomTypeList sorts = tom_empty_list_concGomType();
		
		
		{
		int _cnt10=0;
		_loop10:
		do {
			switch ( LA(1)) {
			case SORTS:
			{
				sorts=sortdef();
				grammars = tom_append_list_concGrammar(grammars,tom_cons_list_concGrammar(tom_make_Sorts(sorts),tom_empty_list_concGrammar()));
				break;
			}
			case ABSTRACT:
			{
				prods=syntax();
				grammars = tom_append_list_concGrammar(grammars,tom_cons_list_concGrammar(tom_make_Grammar(prods),tom_empty_list_concGrammar()));
				break;
			}
			default:
			{
				if ( _cnt10>=1 ) { break _loop10; } else {throw new NoViableAltException(LT(1), getFilename());}
			}
			}
			_cnt10++;
		} while (true);
		}
		return grammars;
	}
	
	public final GomTypeList  sortdef() throws RecognitionException, TokenStreamException {
		GomTypeList definedSorts;
		
		
		definedSorts = tom_empty_list_concGomType();
		String sortName = null;
		
		
		match(SORTS);
		{
		_loop13:
		do {
			if ((LA(1)==IDENTIFIER)) {
				sortName=type();
				
				definedSorts = tom_cons_list_concGomType(tom_make_GomType(sortName),tom_append_list_concGomType(definedSorts,tom_empty_list_concGomType()));
				
			}
			else {
				break _loop13;
			}
			
		} while (true);
		}
		return definedSorts;
	}
	
	public final ProductionList  syntax() throws RecognitionException, TokenStreamException {
		ProductionList prods;
		
		
		prods = tom_empty_list_concProduction();
		Production prod = null;
		
		
		match(ABSTRACT);
		match(SYNTAX);
		{
		_loop17:
		do {
			if ((LA(1)==IDENTIFIER)) {
				prod=production();
				
				prods = tom_cons_list_concProduction(prod,tom_append_list_concProduction(prods,tom_empty_list_concProduction()));
				
			}
			else {
				break _loop17;
			}
			
		} while (true);
		}
		return prods;
	}
	
	public final String  type() throws RecognitionException, TokenStreamException {
		String id;
		
		Token  i = null;
		id=null;
		
		i = LT(1);
		match(IDENTIFIER);
		
		if(i.getText().equals(DOUBLE)) {
		id=REAL;
		Logger.getLogger(getClass().getName()).log(Level.WARNING, 
		"Please prefer to use real in place of double\nAutomatic conversion done since double is a reserved word");
		} else {
		id=i.getText();
		}
		
		return id;
	}
	
	public final Production  production() throws RecognitionException, TokenStreamException {
		Production prod;
		
		Token  id = null;
		
		prod = null;
		String opName=null, typeName =null;
		FieldList fieldList = tom_make_emptyFieldList();
		Field field = null;
		
		
		id = LT(1);
		match(IDENTIFIER);
		opName = id.getText();
		{
		switch ( LA(1)) {
		case LEFT_BRACE:
		{
			match(LEFT_BRACE);
			{
			switch ( LA(1)) {
			case IDENTIFIER:
			{
				field=field();
				fieldList = tom_append_list_concField(fieldList,tom_cons_list_concField(field,tom_empty_list_concField()));
				{
				_loop22:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						field=field();
						fieldList = tom_append_list_concField(fieldList,tom_cons_list_concField(field,tom_empty_list_concField()));
					}
					else {
						break _loop22;
					}
					
				} while (true);
				}
				break;
			}
			case RIGHT_BRACE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(RIGHT_BRACE);
			break;
		}
		case ARROW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		match(ARROW);
		typeName=type();
		
		prod = tom_make_Production(opName,fieldList,tom_make_GomType(typeName));
		
		return prod;
	}
	
	public final Field  field() throws RecognitionException, TokenStreamException {
		Field field;
		
		Token  id = null;
		
		field = null;
		String t=null;
		
		
		if ((LA(1)==IDENTIFIER) && (LA(2)==STAR)) {
			t=type();
			match(STAR);
			field = tom_make_StaredField(tom_make_GomType(t));
		}
		else if ((LA(1)==IDENTIFIER) && (LA(2)==COLON)) {
			id = LT(1);
			match(IDENTIFIER);
			match(COLON);
			t=type();
			field = tom_make_NamedField(id.getText(),tom_make_GomType(t));
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		return field;
	}
	
	
	public static final String[] _tokenNames = {
		"<0>",
		"EOF",
		"<2>",
		"NULL_TREE_LOOKAHEAD",
		"\"module\"",
		"IDENTIFIER",
		"\"imports\"",
		"\"public\"",
		"\"sorts\"",
		"\"abstract\"",
		"\"syntax\"",
		"LEFT_BRACE",
		"COMMA",
		"RIGHT_BRACE",
		"ARROW",
		"STAR",
		"COLON",
		"\"private\"",
		"WS",
		"SLCOMMENT",
		"ML_COMMENT"
	};
	
	
	}
