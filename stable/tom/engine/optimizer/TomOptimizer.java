/* Generated by TOM (version 2.1alpha): Do not edit this file *//**
 *
 * The TomOptimizer plugin.
 *
 */

package jtom.optimizer;

import jtom.*;
import jtom.adt.tomsignature.types.*;
import jtom.adt.options.types.*;
import aterm.*;
import java.util.*;
import jtom.tools.*;
import jtom.TomMessage;
import jtom.runtime.*;

public class TomOptimizer extends TomBase implements TomPlugin
{
    /* Generated by TOM (version 2.1alpha): Do not edit this file *//* Generated by TOM (version 2.1alpha): Do not edit this file *//*   *   * Copyright (c) 2004, Pierre-Etienne Moreau   * All rights reserved.   *    * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions are   * met:    *  - Redistributions of source code must retain the above copyright   *  notice, this list of conditions and the following disclaimer.     *  - Redistributions in binary form must reproduce the above copyright   *  notice, this list of conditions and the following disclaimer in the   *  documentation and/or other materials provided with the distribution.   *  - Neither the name of the INRIA nor the names of its   *  contributors may be used to endorse or promote products derived from   *  this software without specific prior written permission.   *    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *    **/    /* Generated by TOM (version 2.1alpha): Do not edit this file *//*   *   * Copyright (c) 2004, Pierre-Etienne Moreau   * All rights reserved.   *    * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions are   * met:    *  - Redistributions of source code must retain the above copyright   *  notice, this list of conditions and the following disclaimer.     *  - Redistributions in binary form must reproduce the above copyright   *  notice, this list of conditions and the following disclaimer in the   *  documentation and/or other materials provided with the distribution.   *  - Neither the name of the INRIA nor the names of its   *  contributors may be used to endorse or promote products derived from   *  this software without specific prior written permission.   *    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *    **/          /*   * old definition of String  %typeterm String {    implement           { String }    get_fun_sym(t)      { t }    cmp_fun_sym(s1,s2)  { s1.equals(s2) }    get_subterm(t, n)   { null }    equals(t1,t2)       { t1.equals(t2) }  }  */  /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.1alpha): Do not edit this file *//*   *   * Copyright (c) 2004, Pierre-Etienne Moreau   * All rights reserved.   *    * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions are   * met:    *  - Redistributions of source code must retain the above copyright   *  notice, this list of conditions and the following disclaimer.     *  - Redistributions in binary form must reproduce the above copyright   *  notice, this list of conditions and the following disclaimer in the   *  documentation and/or other materials provided with the distribution.   *  - Neither the name of the INRIA nor the names of its   *  contributors may be used to endorse or promote products derived from   *  this software without specific prior written permission.   *    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *    **/      /* Generated by TOM (version 2.1alpha): Do not edit this file *//*   *   * Copyright (c) 2004, Pierre-Etienne Moreau   * All rights reserved.   *    * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions are   * met:    *  - Redistributions of source code must retain the above copyright   *  notice, this list of conditions and the following disclaimer.     *  - Redistributions in binary form must reproduce the above copyright   *  notice, this list of conditions and the following disclaimer in the   *  documentation and/or other materials provided with the distribution.   *  - Neither the name of the INRIA nor the names of its   *  contributors may be used to endorse or promote products derived from   *  this software without specific prior written permission.   *    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   *    **/      /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.1alpha): Do not edit this file */  


    private TomTerm term;
    private TomOptionList myOptions;

    public static final String OPTIMIZED_SUFFIX = ".tfix.optimized"; // was previously in TomTaskInput

    public TomOptimizer()
    {
	myOptions = tom_cons_list_concTomOption(tom_make_OptionBoolean("optimize", "O", "Optimized generated code", tom_make_False()) // activation flag
				,tom_empty_list_concTomOption())
;
    }

    public void setInput(ATerm term)
    {
	if (term instanceof TomTerm)
	    this.term = (TomTerm)term;
	else
	    environment().messageError(TomMessage.getString("TomTermExpected"),
				       "TomParserPlugin", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
    }

    public ATerm getOutput()
    {
	return term;
    }

    public void run()
    {
	try
	    {
		long startChrono = System.currentTimeMillis();
		TomOptionList list = tom_append_list_concTomOption(myOptions,tom_empty_list_concTomOption());
		boolean willRun = true;

		boolean verbose = ((Boolean)getServer().getOptionValue("verbose")).booleanValue();
		boolean intermediate = ((Boolean)getServer().getOptionValue("intermediate")).booleanValue();
		
		while(!(list.isEmpty()))
		    {
			TomOption h = list.getHead();
			 { jtom.adt.options.types.TomOption tom_match1_1=(( jtom.adt.options.types.TomOption)h);{ if(tom_is_fun_sym_OptionBoolean(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_OptionBoolean_name(tom_match1_1); { jtom.adt.options.types.TomBoolean tom_match1_1_4=tom_get_slot_OptionBoolean_valueB(tom_match1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_1) , "optimize") ||  false ) { { jtom.adt.options.types.TomBoolean val=tom_match1_1_4; { jtom.adt.options.types.TomBoolean tom_match2_1=(( jtom.adt.options.types.TomBoolean)val);{ if(tom_is_fun_sym_True(tom_match2_1) ||  false ) {





 willRun = true;  } if(tom_is_fun_sym_False(tom_match2_1) ||  false ) {
 willRun = false;  }}}

				    } }}} }}}

			list = list.getTail();
		    }
		if(willRun)
		    {
			TomTerm renamedTerm = renameVariable(term, new HashSet());
			TomTerm optimizedTerm = optimize(renamedTerm);
			term = optimizedTerm;
			if(verbose)			
			    System.out.println("TOM optimization phase (" +(System.currentTimeMillis()-startChrono)+ " ms)");
			if(intermediate)
			    Tools.generateOutput(environment().getOutputFileNameWithoutSuffix() 
						 + OPTIMIZED_SUFFIX, term);
		    }
		else
		    {
			if(verbose)
			    System.out.println("The optimizer is not activated and thus WILL NOT RUN.");
		    }

		environment().printAlertMessage("TomOptimizer");
		if(!environment().isEclipseMode()) {
		    // remove all warning (in command line only)
		    environment().clearWarnings();
		}
	    }
	catch (Exception e) 
	    {
		environment().messageError("Exception occurs in TomOptimizer: "
					   +e.getMessage(), environment().getInputFile().getName(), 
					   TomMessage.DEFAULT_ERROR_LINE_NUMBER);
		e.printStackTrace();
	    }
    }

    public TomOptionList declareOptions()
    {
// 	int i = 0;
// 	OptionList list = `concOption(myOptions*);
// 	while(!(list.isEmpty()))
// 	    {
// 		i++;
// 		list = list.getTail();
// 	    }

// 	System.out.println("1.7. The optimizer declares " +i+ " options.");
	return myOptions;
    }

    public TomOptionList requiredOptions()
    {
	return tom_make_emptyTomOptionList();
    }

    public void setOption(String optionName, String optionValue)
    {
 	 { jtom.adt.options.types.TomOptionList tom_match3_1=(( jtom.adt.options.types.TomOptionList)myOptions);{ if(tom_is_fun_sym_concTomOption(tom_match3_1) ||  false ) { { jtom.adt.options.types.TomOptionList tom_match3_1_list1=tom_match3_1; { jtom.adt.options.types.TomOptionList tom_match3_1_begin1=tom_match3_1_list1; { jtom.adt.options.types.TomOptionList tom_match3_1_end1=tom_match3_1_list1; while (!(tom_is_empty_TomOptionList(tom_match3_1_end1))) {tom_match3_1_list1=tom_match3_1_end1;{ { jtom.adt.options.types.TomOptionList av=tom_get_slice_concTomOption(tom_match3_1_begin1,tom_match3_1_end1); { jtom.adt.options.types.TomOption tom_match3_1_2=tom_get_head_TomOptionList(tom_match3_1_list1);tom_match3_1_list1=tom_get_tail_TomOptionList(tom_match3_1_list1); if(tom_is_fun_sym_OptionBoolean(tom_match3_1_2) ||  false ) { { String  tom_match3_1_2_1=tom_get_slot_OptionBoolean_name(tom_match3_1_2); { String  tom_match3_1_2_2=tom_get_slot_OptionBoolean_altName(tom_match3_1_2); { String  tom_match3_1_2_3=tom_get_slot_OptionBoolean_description(tom_match3_1_2); { jtom.adt.options.types.TomBoolean tom_match3_1_2_4=tom_get_slot_OptionBoolean_valueB(tom_match3_1_2); { String  n=tom_match3_1_2_1; { String  alt=tom_match3_1_2_2; { String  desc=tom_match3_1_2_3; { jtom.adt.options.types.TomBoolean val=tom_match3_1_2_4; { jtom.adt.options.types.TomOptionList ap=tom_match3_1_list1;


 if(n.equals(optionName)||alt.equals(optionName))
			{
			     { String  tom_match4_1=(( String )optionValue);{ if(tom_is_fun_sym_concString(tom_match4_1) ||  false ) { { String  tom_match4_1_list1=tom_match4_1; if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_1=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_1) , 't') ||  false ) { if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_2=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_2) , 'r') ||  false ) { if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_3=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_3) , 'u') ||  false ) { if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_4=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_4) , 'e') ||  false ) { if(tom_is_empty_String(tom_match4_1_list1)) {


 myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionBoolean(n, alt, desc, tom_make_True()),tom_empty_list_concTomOption())));  } }} } }} } }} } }} }} } if(tom_is_fun_sym_concString(tom_match4_1) ||  false ) { { String  tom_match4_1_list1=tom_match4_1; if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_1=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_1) , 'f') ||  false ) { if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_2=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_2) , 'a') ||  false ) { if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_3=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_3) , 'l') ||  false ) { if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_4=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_4) , 's') ||  false ) { if(!(tom_is_empty_String(tom_match4_1_list1))) { { char  tom_match4_1_5=tom_get_head_String(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_String(tom_match4_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match4_1_5) , 'e') ||  false ) { if(tom_is_empty_String(tom_match4_1_list1)) {

 myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionBoolean(n, alt, desc, tom_make_False()),tom_empty_list_concTomOption())));  } }} } }} } }} } }} } }} }} }}}

			}
		}}}}}}}}} }}}tom_match3_1_end1=tom_get_tail_TomOptionList(tom_match3_1_end1);} }}}} } if(tom_is_fun_sym_concTomOption(tom_match3_1) ||  false ) { { jtom.adt.options.types.TomOptionList tom_match3_1_list1=tom_match3_1; { jtom.adt.options.types.TomOptionList tom_match3_1_begin1=tom_match3_1_list1; { jtom.adt.options.types.TomOptionList tom_match3_1_end1=tom_match3_1_list1; while (!(tom_is_empty_TomOptionList(tom_match3_1_end1))) {tom_match3_1_list1=tom_match3_1_end1;{ { jtom.adt.options.types.TomOptionList av=tom_get_slice_concTomOption(tom_match3_1_begin1,tom_match3_1_end1); { jtom.adt.options.types.TomOption tom_match3_1_2=tom_get_head_TomOptionList(tom_match3_1_list1);tom_match3_1_list1=tom_get_tail_TomOptionList(tom_match3_1_list1); if(tom_is_fun_sym_OptionInteger(tom_match3_1_2) ||  false ) { { String  tom_match3_1_2_1=tom_get_slot_OptionInteger_name(tom_match3_1_2); { String  tom_match3_1_2_2=tom_get_slot_OptionInteger_altName(tom_match3_1_2); { String  tom_match3_1_2_3=tom_get_slot_OptionInteger_description(tom_match3_1_2); { int  tom_match3_1_2_4=tom_get_slot_OptionInteger_valueI(tom_match3_1_2); { String  tom_match3_1_2_5=tom_get_slot_OptionInteger_attrName(tom_match3_1_2); { String  n=tom_match3_1_2_1; { String  alt=tom_match3_1_2_2; { String  desc=tom_match3_1_2_3; { int  val=tom_match3_1_2_4; { String  attr=tom_match3_1_2_5; { jtom.adt.options.types.TomOptionList ap=tom_match3_1_list1;

 if(n.equals(optionName)||alt.equals(optionName))
			myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionInteger(n, alt, desc, Integer.parseInt(optionValue), attr),tom_empty_list_concTomOption())));
		}}}}}}}}}}} }}}tom_match3_1_end1=tom_get_tail_TomOptionList(tom_match3_1_end1);} }}}} } if(tom_is_fun_sym_concTomOption(tom_match3_1) ||  false ) { { jtom.adt.options.types.TomOptionList tom_match3_1_list1=tom_match3_1; { jtom.adt.options.types.TomOptionList tom_match3_1_begin1=tom_match3_1_list1; { jtom.adt.options.types.TomOptionList tom_match3_1_end1=tom_match3_1_list1; while (!(tom_is_empty_TomOptionList(tom_match3_1_end1))) {tom_match3_1_list1=tom_match3_1_end1;{ { jtom.adt.options.types.TomOptionList av=tom_get_slice_concTomOption(tom_match3_1_begin1,tom_match3_1_end1); { jtom.adt.options.types.TomOption tom_match3_1_2=tom_get_head_TomOptionList(tom_match3_1_list1);tom_match3_1_list1=tom_get_tail_TomOptionList(tom_match3_1_list1); if(tom_is_fun_sym_OptionString(tom_match3_1_2) ||  false ) { { String  tom_match3_1_2_1=tom_get_slot_OptionString_name(tom_match3_1_2); { String  tom_match3_1_2_2=tom_get_slot_OptionString_altName(tom_match3_1_2); { String  tom_match3_1_2_3=tom_get_slot_OptionString_description(tom_match3_1_2); { String  tom_match3_1_2_4=tom_get_slot_OptionString_valueS(tom_match3_1_2); { String  tom_match3_1_2_5=tom_get_slot_OptionString_attrName(tom_match3_1_2); { String  n=tom_match3_1_2_1; { String  alt=tom_match3_1_2_2; { String  desc=tom_match3_1_2_3; { String  val=tom_match3_1_2_4; { String  attr=tom_match3_1_2_5; { jtom.adt.options.types.TomOptionList ap=tom_match3_1_list1;

 if(n.equals(optionName)||alt.equals(optionName))
			myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionString(n, alt, desc, optionValue, attr),tom_empty_list_concTomOption())));
		}}}}}}}}}}} }}}tom_match3_1_end1=tom_get_tail_TomOptionList(tom_match3_1_end1);} }}}} }}}

    }

    /* 
     * optimize:
     * remove variables which are only assigned once (but not used)
     * inline variables which are used only once
     *
     * a variable is inlined when it is used only once and
     * when the expression depends on ref-variables which
     * are not modified in the body
     */

  Replace1 replace_optimize = new Replace1() {
      public ATerm apply(ATerm subject) {
        
        if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomTerm tom_match5_1=(( jtom.adt.tomsignature.types.TomTerm)subject);{ if(tom_is_fun_sym_ExpressionToTomTerm(tom_match5_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match5_1_1=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match5_1); if(tom_is_fun_sym_TomTermToExpression(tom_match5_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_1_1_1=tom_get_slot_TomTermToExpression_astTerm(tom_match5_1_1); { jtom.adt.tomsignature.types.TomTerm t=tom_match5_1_1_1;

              return optimize(t);
            }} }} }}}

        } else if(subject instanceof Expression) {
           { jtom.adt.tomsignature.types.Expression tom_match6_1=(( jtom.adt.tomsignature.types.Expression)subject);{ if(tom_is_fun_sym_TomTermToExpression(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match6_1_1=tom_get_slot_TomTermToExpression_astTerm(tom_match6_1); if(tom_is_fun_sym_ExpressionToTomTerm(tom_match6_1_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match6_1_1_1=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match6_1_1); { jtom.adt.tomsignature.types.Expression t=tom_match6_1_1_1;

              return optimizeExpression(t);
            }} }} }}}

        } else if(subject instanceof Instruction) {
          boolean verbose = ((Boolean)getServer().getOptionValue("verbose")).booleanValue();
           { jtom.adt.tomsignature.types.Instruction tom_match7_1=(( jtom.adt.tomsignature.types.Instruction)subject);{ if(tom_is_fun_sym_LetAssign(tom_match7_1) || tom_is_fun_sym_LetRef(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match7_1_1=tom_get_slot_LetRef_variable(tom_match7_1); { jtom.adt.tomsignature.types.Expression tom_match7_1_2=tom_get_slot_LetRef_source(tom_match7_1); { jtom.adt.tomsignature.types.Instruction tom_match7_1_3=tom_get_slot_LetRef_astInstruction(tom_match7_1); if(tom_is_fun_sym_VariableStar(tom_match7_1_1) || tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match7_1_1; { jtom.adt.tomsignature.types.TomName tom_match7_1_1_2=tom_get_slot_Variable_astName(tom_match7_1_1); if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomName name=tom_match7_1_1_2; { String  tom_match7_1_1_2_1=tom_get_slot_Name_string(tom_match7_1_1_2); { String  tomName=tom_match7_1_1_2_1; { jtom.adt.tomsignature.types.Expression exp=tom_match7_1_2; { jtom.adt.tomsignature.types.Instruction body=tom_match7_1_3;





              List list  = computeOccurences(name,body);
              int mult = list.size();
              if(mult == 0) {
                Option orgTrack = findOriginTracking(var.getOption());
                environment().messageWarning(
                                             TomMessage.getString("UnusedVariable"),
                                             new Object[]{extractRealName(tomName)},
                                             orgTrack.getFileName().getString(),
                                             orgTrack.getLine());

                if(verbose) {
                  System.out.println(mult + " -> remove:     " + extractRealName(tomName));
                }
                return optimizeInstruction(body);

              } else if(mult == 1) {
                if(expConstantInBody(exp,body)) {
                  if(verbose) {
                    System.out.println(mult + " -> inline:     " + extractRealName(tomName));
                  }
                  return optimizeInstruction(inlineInstruction(var,exp,body));
                } else {
                  if(verbose) {
                    System.out.println(mult + " -> no inline:  " + extractRealName(tomName));
                      //System.out.println("exp  = " + exp);
                      //System.out.println("body = " + body);
                  }
                }

              } else {
                  /* do nothing: traversal */
                if(verbose) {
                  System.out.println(mult + " -> do nothing: " + extractRealName(tomName));
                }
              }
            }}}}} }}} }}}} } if(tom_is_fun_sym_Let(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match7_1_1=tom_get_slot_Let_variable(tom_match7_1); { jtom.adt.tomsignature.types.Expression tom_match7_1_2=tom_get_slot_Let_source(tom_match7_1); { jtom.adt.tomsignature.types.Instruction tom_match7_1_3=tom_get_slot_Let_astInstruction(tom_match7_1); if(tom_is_fun_sym_VariableStar(tom_match7_1_1) || tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match7_1_1; { jtom.adt.tomsignature.types.TomName tom_match7_1_1_2=tom_get_slot_Variable_astName(tom_match7_1_1); if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomName name=tom_match7_1_1_2; { String  tom_match7_1_1_2_1=tom_get_slot_Name_string(tom_match7_1_1_2); { String  tomName=tom_match7_1_1_2_1; { jtom.adt.tomsignature.types.Expression exp=tom_match7_1_2; { jtom.adt.tomsignature.types.Instruction body=tom_match7_1_3;


              List list  = computeOccurences(name,body);
              int mult = list.size();

              if(mult == 0) {
                Option orgTrack = findOriginTracking(var.getOption());
                environment().messageWarning(
                                             TomMessage.getString("UnusedVariable"),
                                             new Object[]{extractRealName(tomName)},
                                             orgTrack.getFileName().getString(),
                                             orgTrack.getLine());
                if(verbose) {
                  System.out.println(mult + " -> remove:     " + extractRealName(tomName));
                }
                return optimizeInstruction(body); 
              } else if(mult == 1) {
                if(expConstantInBody(exp,body)) {
                  if(verbose) {
                    System.out.println(mult + " -> inline:     " + extractRealName(tomName));
                  }
                  return optimizeInstruction(inlineInstruction(var,exp,body));
                } else {
                  if(verbose) {
                    System.out.println(mult + " -> no inline:  " + extractRealName(tomName));
                  }
                }
              } else {
                  /* do nothing: traversal */
                if(verbose) {
                  System.out.println(mult + " -> do nothing: " + extractRealName(tomName));
                }
              }
            }}}}} }}} }}}} }}}

 // end match
        } // end instanceof Instruction

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this);
      } // end apply
    };


  private String extractRealName(String name) {
    if(name.startsWith("tom_")) {
      return name.substring(4);
    }
    return name;
  }

  public TomTerm optimize(TomTerm subject) {
    return (TomTerm) replace_optimize.apply(subject); 
  }
  
  public Instruction optimizeInstruction(Instruction subject) {
    return (Instruction) replace_optimize.apply(subject); 
  }

  public Expression optimizeExpression(Expression subject) {
    return (Expression) replace_optimize.apply(subject); 
  }

    /* 
     * inline:
     * replace a variable instantiation by its content in the body
     */

  Replace3 replace_inline = new Replace3() {
      public ATerm apply(ATerm subject, Object arg1, Object arg2) {
        TomTerm variable = (TomTerm) arg1;
        TomName variableName = variable.getAstName();
        Expression expression = (Expression) arg2;
        if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomTerm tom_match8_1=(( jtom.adt.tomsignature.types.TomTerm)subject);{ if(tom_is_fun_sym_VariableStar(tom_match8_1) || tom_is_fun_sym_Variable(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_1_2=tom_get_slot_Variable_astName(tom_match8_1); { jtom.adt.tomsignature.types.TomName name=tom_match8_1_2;


              if(variableName == name) {
                return tom_make_ExpressionToTomTerm(expression);
              }
            }} } if(tom_is_fun_sym_BuildVariable(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_1_1=tom_get_slot_BuildVariable_astName(tom_match8_1); { jtom.adt.tomsignature.types.TomName name=tom_match8_1_1;               if(variableName == name) {                 return tom_make_ExpressionToTomTerm(expression);               }             }} }}}
 // end match
        } // end instanceof TomTerm

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this,arg1,arg2);
      } // end apply
    };


  public Instruction inlineInstruction(TomTerm variable, Expression expression,
                                       Instruction subject) {
    return (Instruction) replace_inline.apply(subject,variable,expression); 
  }

  private List computeOccurences(final TomName variableName, ATerm subject) {
    final List list = new ArrayList();
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
          if(t instanceof TomTerm) {
             { jtom.adt.tomsignature.types.TomTerm tom_match9_1=(( jtom.adt.tomsignature.types.TomTerm)t);{ if(tom_is_fun_sym_VariableStar(tom_match9_1) || tom_is_fun_sym_Variable(tom_match9_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match9_1_2=tom_get_slot_Variable_astName(tom_match9_1); { jtom.adt.tomsignature.types.TomName name=tom_match9_1_2;


                if(variableName == name) {
                  list.add(t);
                  return false;
                }
              }} } if(tom_is_fun_sym_BuildVariable(tom_match9_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match9_1_1=tom_get_slot_BuildVariable_astName(tom_match9_1); { jtom.adt.tomsignature.types.TomName name=tom_match9_1_1;                 if(variableName == name) {                   list.add(t);                   return false;                 }               }} }

 return true; }}

          } else {
            return true;
          }
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
    return list;
  }

  private boolean isAssigned(final TomName variableName, ATerm subject) {
    final List list = new ArrayList();
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {

            //System.out.println("isAssigned(" + variableName + "): " + t);
          if(t instanceof Instruction) {
             { jtom.adt.tomsignature.types.Instruction tom_match10_1=(( jtom.adt.tomsignature.types.Instruction)t);{ if(tom_is_fun_sym_Assign(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match10_1_1=tom_get_slot_Assign_variable(tom_match10_1); if(tom_is_fun_sym_VariableStar(tom_match10_1_1) || tom_is_fun_sym_Variable(tom_match10_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match10_1_1_2=tom_get_slot_Variable_astName(tom_match10_1_1); { jtom.adt.tomsignature.types.TomName name=tom_match10_1_1_2;

                if(variableName == name) {
                  list.add(t);
                  return false;
                }
              }} }} } if(tom_is_fun_sym_LetAssign(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match10_1_1=tom_get_slot_LetAssign_variable(tom_match10_1); if(tom_is_fun_sym_VariableStar(tom_match10_1_1) || tom_is_fun_sym_Variable(tom_match10_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match10_1_1_2=tom_get_slot_Variable_astName(tom_match10_1_1); { jtom.adt.tomsignature.types.TomName name=tom_match10_1_1_2;


                if(variableName == name) {
                  list.add(t);
                  return false;
                }
              }} }} }

 return true; }}

          } else {
            return true;
          }
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
    return list.size() > 0;
  }

  private boolean expConstantInBody(Expression exp, Instruction body) {
    boolean res = true;
    HashSet c = new HashSet();
    collectRefVariable(c,exp);
    Iterator it = c.iterator();

      //System.out.println("exp  = " + exp);
      //System.out.println("body = " + body);
    while(res && it.hasNext()) {
      TomName name = (TomName) it.next();
        //List list = computeOccurences(name,body);
        //res = res && (list.size()==0);
        //System.out.println("Ref variable: " + name);
      res = res && !isAssigned(name,body);
        //System.out.println(" assign = " + !res);

    }
    return res; 
  }

  protected void collectRefVariable(final Collection collection, ATerm subject) {
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
          //System.out.println("t = " + t);
          if(t instanceof TomTerm) {
            TomTerm annotedVariable = null;
             { jtom.adt.tomsignature.types.TomTerm tom_match11_1=(( jtom.adt.tomsignature.types.TomTerm)t);{ if(tom_is_fun_sym_Ref(tom_match11_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match11_1_1=tom_get_slot_Ref_tomTerm(tom_match11_1); if(tom_is_fun_sym_VariableStar(tom_match11_1_1) || tom_is_fun_sym_Variable(tom_match11_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match11_1_1_2=tom_get_slot_Variable_astName(tom_match11_1_1); { jtom.adt.tomsignature.types.TomName name=tom_match11_1_1_2;

                collection.add(name);
                return false;
              }} }} }

 return true; }}

          } else {
            return true;
          }
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
  }

  Replace2 replace_renameVariable = new Replace2() {
      public ATerm apply(ATerm subject, Object arg1) {
        Set context = (Set) arg1;
        if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomTerm tom_match12_1=(( jtom.adt.tomsignature.types.TomTerm)subject);{ if(tom_is_fun_sym_VariableStar(tom_match12_1) || tom_is_fun_sym_Variable(tom_match12_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match12_1; { jtom.adt.tomsignature.types.OptionList tom_match12_1_1=tom_get_slot_Variable_option(tom_match12_1); { jtom.adt.tomsignature.types.TomName tom_match12_1_2=tom_get_slot_Variable_astName(tom_match12_1); { jtom.adt.tomsignature.types.OptionList option=tom_match12_1_1; if(tom_is_fun_sym_Name(tom_match12_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomName astName=tom_match12_1_2; { String  tom_match12_1_2_1=tom_get_slot_Name_string(tom_match12_1_2); { String  name=tom_match12_1_2_1;


              if(context.contains(astName)) {
                return var.setAstName(tom_make_Name(ast().makeTomVariableName(name)));
              }
            }}} }}}}} } if(tom_is_fun_sym_BuildVariable(tom_match12_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match12_1; { jtom.adt.tomsignature.types.TomName tom_match12_1_1=tom_get_slot_BuildVariable_astName(tom_match12_1); if(tom_is_fun_sym_Name(tom_match12_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName astName=tom_match12_1_1; { String  tom_match12_1_1_1=tom_get_slot_Name_string(tom_match12_1_1); { String  name=tom_match12_1_1_1;               if(context.contains(astName)) {                 return var.setAstName(tom_make_Name(ast().makeTomVariableName(name)));               }             }}} }}} }}}

        } else if(subject instanceof Expression) {
        } else if(subject instanceof Instruction) {
           { jtom.adt.tomsignature.types.Instruction tom_match13_1=(( jtom.adt.tomsignature.types.Instruction)subject);{ if(tom_is_fun_sym_CompiledPattern(tom_match13_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match13_1_1=tom_get_slot_CompiledPattern_patternList(tom_match13_1); { jtom.adt.tomsignature.types.Instruction tom_match13_1_2=tom_get_slot_CompiledPattern_automataInst(tom_match13_1); { jtom.adt.tomsignature.types.TomList patternList=tom_match13_1_1; { jtom.adt.tomsignature.types.Instruction instruction=tom_match13_1_2;

              Map map = collectMultiplicity(patternList);
              Set newContext = new HashSet(map.keySet());
              newContext.addAll(context);
              return renameVariableInstruction(instruction,newContext);
            }}}} }}}

          
        } // end instanceof Instruction

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this,context);
      } // end apply
    };


  public TomTerm renameVariable(TomTerm subject, Set context) {
    return (TomTerm) replace_renameVariable.apply(subject,context); 
  }

  public Instruction renameVariableInstruction(Instruction subject, Set context) {
    return (Instruction) replace_renameVariable.apply(subject,context); 
  }

}
