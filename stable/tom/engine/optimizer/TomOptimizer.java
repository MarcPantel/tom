/* Generated by TOM (version 2.3rc2): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.optimizer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;

import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomsignature.*;

import tom.engine.TomMessage;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.PILFactory;
import tom.engine.tools.Tools;
import tom.library.traversal.Collect1;
import tom.library.traversal.Replace1;
import tom.library.traversal.Replace2;
import tom.library.traversal.Replace3;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import aterm.*;

import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

/**
 * The TomOptimizer plugin.
 */
public class TomOptimizer extends TomGenericPlugin {

  /* Generated by TOM (version 2.3rc2): Do not edit this file *//* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.3rc2): Do not edit this file */  /*  * basic operators  */     /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */      /*  * strategies with Id considered as failure  */      


  /** some output suffixes */
  private static final String OPTIMIZED_SUFFIX = ".tfix.optimized";

  /** the declared options string*/
  private static final String DECLARED_OPTIONS = "<options>" + 
    "<boolean name='optimize' altName='O' description='Optimized generated code' value='false'/>" +
    "<boolean name='optimize2' altName='O2' description='Optimized generated code' value='false'/>" +
    "<boolean name='prettyPIL' altName='pil' description='PrettyPrint IL' value='false'/>" +
    "</options>";

  public void optionChanged(String optionName, Object optionValue) {
    if(optionName.equals("optimize2") && ((Boolean)optionValue).booleanValue() ) { 
      setOptionValue("pretty", Boolean.TRUE);        
    }
  }

  private VisitableVisitor normStrategy;

  /** Constructor */
  public TomOptimizer() {
    super("TomOptimizer");
  }
  
  public void run() {
    if(getOptionBooleanValue("optimize") || getOptionBooleanValue("optimize2")) {
      // Initialize strategies
      
      VisitableVisitor optRule1 = new RewriteSystem1();
      VisitableVisitor optStrategy1 = tom_make_InnermostId(optRule1);

      VisitableVisitor nopElimAndFlatten = new NopElimAndFlatten();
      //nopElimAndFlatten = `RepeatId(nopElimAndFlatten);

      VisitableVisitor ifSwapping = new IfSwapping();
      VisitableVisitor blockFusion = new BlockFusion();
      VisitableVisitor ifFusion = new IfFusion();
      VisitableVisitor interBlock = new InterBlock();
      VisitableVisitor normExpr = new NormExpr();

      /*
      VisitableVisitor optStrategy2 = `Sequence(InnermostId(nopElimAndFlatten),
                               InnermostId(ChoiceId(SequenceId(RepeatId(ifSwapping),nopElimAndFlatten), 
                                                    ChoiceId(RepeatId(SequenceId(ChoiceId(blockFusion,ifFusion),nopElimAndFlatten)),
                                                             SequenceId(interBlock,nopElimAndFlatten)))));
      */

      VisitableVisitor optStrategy2 = tom_make_Sequence(tom_make_InnermostId(tom_make_ChoiceId(tom_make_RepeatId((nopElimAndFlatten)),normExpr)),tom_make_InnermostId(tom_make_ChoiceId(tom_make_Sequence(tom_make_RepeatId(ifSwapping),tom_make_RepeatId(tom_make_SequenceId(tom_make_ChoiceId(blockFusion,ifFusion),tom_make_OnceTopDownId(nopElimAndFlatten)))),tom_make_SequenceId(interBlock,tom_make_OnceTopDownId(tom_make_RepeatId(nopElimAndFlatten))))

)
                                                )







;
      normStrategy = tom_make_InnermostId(normExpr);

      long startChrono = System.currentTimeMillis();
      boolean intermediate = getOptionBooleanValue("intermediate");
      try {
        TomTerm renamedTerm   = renameIntoTomVariable( (TomTerm)getWorkingTerm(), new HashSet() );
      
        if(getOptionBooleanValue("optimize2")) {
          //System.out.println(renamedTerm);
          renamedTerm = (TomTerm) optStrategy2.visit(renamedTerm);
        }

        if(getOptionBooleanValue("optimize")) {
          renamedTerm = (TomTerm) optStrategy1.visit(renamedTerm);
        }
        setWorkingTerm(renamedTerm);

        // verbose
        getLogger().log(Level.INFO, TomMessage.tomOptimizationPhase.getMessage(),
            new Integer((int)(System.currentTimeMillis()-startChrono)) );
      } catch (Exception e) {
        getLogger().log( Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                         new Object[]{"TomOptimizer", getStreamManager().getInputFileName(), e.getMessage()} );
        
        e.printStackTrace();
        return;
      }
      if(intermediate) {
        Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix() + OPTIMIZED_SUFFIX, 
                             (ATerm)getWorkingTerm() );
      }
    } else {
      // not active plugin
      getLogger().log(Level.INFO, "The optimizer is not activated and thus WILL NOT RUN.");
    }
    if(getOptionBooleanValue("prettyPIL")) {
      PILFactory fact = new PILFactory();
      System.out.println(fact.prettyPrintCompiledMatch(fact.reduce((TomTerm)getWorkingTerm())));
    }

  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomOptimizer.DECLARED_OPTIONS);
  }

  private String extractRealName(String name) {
    if(name.startsWith("tom_")) {
      return name.substring(4);
    }
    return name;
  }


  /* 
   * inline:
   * replace a variable instantiation by its content in the body
   */

  Replace3 replace_inline = new Replace3() {
      public ATerm apply(ATerm subject, Object arg1, Object arg2) {
        TomTerm variable = (TomTerm) arg1;
        TomName variableName = variable.getAstName();
        Expression expression = (Expression) arg2;
         if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); {boolean tom_bool_match1_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName= null ; if (tom_is_fun_sym_Variable(tom_match1_1)) {tom_bool_match1_1= true ;tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); } else { if (tom_is_fun_sym_VariableStar(tom_match1_1)) {tom_bool_match1_1= true ;tom_match1_1_astName=tom_get_slot_VariableStar_astName(tom_match1_1); } } if (tom_bool_match1_1) { if ( true ) {

            if(variableName == tom_match1_1_astName) {
              return tom_make_ExpressionToTomTerm(expression);
            }
           } } } } } }
 // end match

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this,arg1,arg2);
      } // end apply
    };

  public Instruction inlineInstruction(TomTerm variable, Expression expression, Instruction subject) {
    return (Instruction) replace_inline.apply(subject,variable,expression); 
  }

  private List computeOccurences(final TomName variableName, ATerm subject) {
    final List list = new ArrayList();
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
           if(t instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match2_1=(( tom.engine.adt.tomsignature.types.Instruction)t); if (tom_is_fun_sym_TypedAction(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match2_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match2_1); if ( true ) {

              traversal().genericCollect(tom_match2_1_astInstruction, this);
              return false;
             } } } } } if(t instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1=(( tom.engine.adt.tomsignature.types.TomTerm)t); {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astName= null ; if (tom_is_fun_sym_Variable(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_Variable_astName(tom_match3_1); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_VariableStar_astName(tom_match3_1); } } if (tom_bool_match3_1) { if ( true ) {



              if(variableName == tom_match3_1_astName) {
                list.add(t);
                return false;
              }
             } } } } } }

          return true;
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
    return list;
  }

  private boolean isAssigned(final TomName variableName, ATerm subject) {
    final List list = new ArrayList();
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {

          //System.out.println("isAssigned(" + variableName + "): " + t);
           if(t instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match4_1=(( tom.engine.adt.tomsignature.types.Instruction)t); if (tom_is_fun_sym_Assign(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1_variable=tom_get_slot_Assign_variable(tom_match4_1); {boolean tom_bool_match4_1_variable= false ; { tom.engine.adt.tomsignature.types.TomName tom_match4_1_variable_astName= null ; if (tom_is_fun_sym_Variable(tom_match4_1_variable)) {tom_bool_match4_1_variable= true ;tom_match4_1_variable_astName=tom_get_slot_Variable_astName(tom_match4_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match4_1_variable)) {tom_bool_match4_1_variable= true ;tom_match4_1_variable_astName=tom_get_slot_VariableStar_astName(tom_match4_1_variable); } } if (tom_bool_match4_1_variable) { if ( true ) {

              if(variableName == tom_match4_1_variable_astName) {
                list.add(t);
                return false;
              }
             } } } } } } if (tom_is_fun_sym_LetAssign(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1_variable=tom_get_slot_LetAssign_variable(tom_match4_1); {boolean tom_bool_match4_1_variable= false ; { tom.engine.adt.tomsignature.types.TomName tom_match4_1_variable_astName= null ; if (tom_is_fun_sym_Variable(tom_match4_1_variable)) {tom_bool_match4_1_variable= true ;tom_match4_1_variable_astName=tom_get_slot_Variable_astName(tom_match4_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match4_1_variable)) {tom_bool_match4_1_variable= true ;tom_match4_1_variable_astName=tom_get_slot_VariableStar_astName(tom_match4_1_variable); } } if (tom_bool_match4_1_variable) { if ( true ) {


              if(variableName == tom_match4_1_variable_astName) {
                list.add(t);
                return false;
              }
             } } } } } } } }

          return true;
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
    return list.size() > 0;
  }

  private boolean expConstantInBody(Expression exp, Instruction body) {
    boolean res = true;
    HashSet c = new HashSet();
    collectRefVariable(c,exp);
    Iterator it = c.iterator();

    //System.out.println("exp  = " + exp);
    //System.out.println("body = " + body);
    while(res && it.hasNext()) {
      TomName name = (TomName) it.next();
      //List list = computeOccurences(name,body);
      //res = res && (list.size()==0);
      //System.out.println("Ref variable: " + name);
      res = res && !isAssigned(name,body);
      //System.out.println(" assign = " + !res);

    }
    return res; 
  }

  protected void collectRefVariable(final Collection collection, ATerm subject) {
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
          // System.out.println("t = " + t);
           if(t instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1=(( tom.engine.adt.tomsignature.types.TomTerm)t); if (tom_is_fun_sym_Ref(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match5_1); {boolean tom_bool_match5_1_tomTerm= false ; { tom.engine.adt.tomsignature.types.TomName tom_match5_1_tomTerm_astName= null ; if (tom_is_fun_sym_Variable(tom_match5_1_tomTerm)) {tom_bool_match5_1_tomTerm= true ;tom_match5_1_tomTerm_astName=tom_get_slot_Variable_astName(tom_match5_1_tomTerm); } else { if (tom_is_fun_sym_VariableStar(tom_match5_1_tomTerm)) {tom_bool_match5_1_tomTerm= true ;tom_match5_1_tomTerm_astName=tom_get_slot_VariableStar_astName(tom_match5_1_tomTerm); } } if (tom_bool_match5_1_tomTerm) { if ( true ) {

              collection.add(tom_match5_1_tomTerm_astName);
              return false;
             } } } } } } } }

          return true;
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
  }

  /*
   * add a prefix (tom_) to back-quoted variables which comes from the lhs
   */
  Replace2 replace_renameIntoTomVariable = new Replace2() {
      public ATerm apply(ATerm subject, Object arg1) {
        Set context = (Set) arg1;
         if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match6_1; {boolean tom_bool_match6_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName= null ; if (tom_is_fun_sym_Variable(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_astName=tom_get_slot_Variable_astName(tom_match6_1); } else { if (tom_is_fun_sym_VariableStar(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_astName=tom_get_slot_VariableStar_astName(tom_match6_1); } } if (tom_bool_match6_1) { if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); if ( true ) {

            if(context.contains(tom_match6_1_astName)) {
              return tom_var.setAstName(tom_make_Name(getAstFactory().makeTomVariableName(tom_match6_1_astName_string)));
            }
           } } } } } } } } }

        /*
         * collect the set of variables that correspond
         * to the lhs of this instruction
         */

         if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match7_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_CompiledPattern(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_patternList=tom_get_slot_CompiledPattern_patternList(tom_match7_1); { tom.engine.adt.tomsignature.types.Instruction tom_match7_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match7_1); if ( true ) {

            Map map = collectMultiplicity(tom_match7_1_patternList);
            Set newContext = new HashSet(map.keySet());
            newContext.addAll(context);
            return this.apply(tom_match7_1_automataInst,newContext);
           } } } } } }


          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this,context);
      } // end apply
    };


  private TomTerm renameIntoTomVariable(TomTerm subject, Set context) {
    return (TomTerm) replace_renameIntoTomVariable.apply(subject,context); 
  }


  /* 
   * rename variable1 into variable2
   */
  public Instruction renameVariable(TomTerm variable1, TomTerm variable2, Instruction subject) {
    return (Instruction) rename_variable.apply(subject,variable1,variable2); 
  }

  Replace3 rename_variable = new Replace3() {
      public ATerm apply(ATerm subject, Object arg1, Object arg2) {
        TomName variableName = ((TomTerm) arg1).getAstName();
        TomName newVariableName = ((TomTerm) arg2).getAstName();
         if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match8_1; {boolean tom_bool_match8_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match8_1_astName= null ; if (tom_is_fun_sym_Variable(tom_match8_1)) {tom_bool_match8_1= true ;tom_match8_1_astName=tom_get_slot_Variable_astName(tom_match8_1); } else { if (tom_is_fun_sym_VariableStar(tom_match8_1)) {tom_bool_match8_1= true ;tom_match8_1_astName=tom_get_slot_VariableStar_astName(tom_match8_1); } } if (tom_bool_match8_1) { if ( true ) {

            if(variableName == tom_match8_1_astName) {
              return tom_var.setAstName(newVariableName);
            }
           } } } } } } }
 // end match

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this,arg1,arg2);
      } // end apply
    };

  public boolean compare (ATerm term1, ATerm term2){
    PILFactory factory = new PILFactory();
    return factory.remove(term1)==factory.remove(term2);
  }
  
  public class RewriteSystem1 extends TomSignatureVisitableFwd {

    public RewriteSystem1() {
      super(new tom.library.strategy.mutraveler.Identity());
    }

    public jjtraveler.Visitable visit(jjtraveler.Visitable subject) throws jjtraveler.VisitFailure{

       if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if (tom_is_fun_sym_ExpressionToTomTerm(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match9_1_astExpression=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match9_1); if (tom_is_fun_sym_TomTermToExpression(tom_match9_1_astExpression) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_astExpression_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match9_1_astExpression); if ( true ) {

          return tom_match9_1_astExpression_astTerm;
         } } } } } } } if(subject instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match10_1=(( tom.engine.adt.tomsignature.types.Expression)subject); if (tom_is_fun_sym_TomTermToExpression(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match10_1); if (tom_is_fun_sym_ExpressionToTomTerm(tom_match10_1_astTerm) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match10_1_astTerm_astExpression=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match10_1_astTerm); if ( true ) {



          return tom_match10_1_astTerm_astExpression;
         } } } } } } } if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match11_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); {boolean tom_bool_match11_1= false ; { tom.engine.adt.tomsignature.types.TomTerm tom_match11_1_variable= null ; { tom.engine.adt.tomsignature.types.Expression tom_match11_1_source= null ; { tom.engine.adt.tomsignature.types.Instruction tom_match11_1_astInstruction= null ; if (tom_is_fun_sym_LetRef(tom_match11_1)) {tom_bool_match11_1= true ;tom_match11_1_variable=tom_get_slot_LetRef_variable(tom_match11_1);tom_match11_1_source=tom_get_slot_LetRef_source(tom_match11_1);tom_match11_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match11_1); } else { if (tom_is_fun_sym_LetAssign(tom_match11_1)) {tom_bool_match11_1= true ;tom_match11_1_variable=tom_get_slot_LetAssign_variable(tom_match11_1);tom_match11_1_source=tom_get_slot_LetAssign_source(tom_match11_1);tom_match11_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match11_1); } } if (tom_bool_match11_1) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match11_1_variable; {boolean tom_bool_match11_1_variable= false ; { tom.engine.adt.tomsignature.types.TomName tom_match11_1_variable_astName= null ; if (tom_is_fun_sym_Variable(tom_match11_1_variable)) {tom_bool_match11_1_variable= true ;tom_match11_1_variable_astName=tom_get_slot_Variable_astName(tom_match11_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match11_1_variable)) {tom_bool_match11_1_variable= true ;tom_match11_1_variable_astName=tom_get_slot_VariableStar_astName(tom_match11_1_variable); } } if (tom_bool_match11_1_variable) { if (tom_is_fun_sym_Name(tom_match11_1_variable_astName) ||  false ) { { String  tom_match11_1_variable_astName_string=tom_get_slot_Name_string(tom_match11_1_variable_astName); { String  tom_tomName=tom_match11_1_variable_astName_string; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match11_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match11_1_astInstruction; if ( true ) {








          List list  = computeOccurences(tom_match11_1_variable_astName,tom_body);
          int mult = list.size();
          if(mult == 0) {
            Option orgTrack = findOriginTracking(tom_var.getOption());

            getLogger().log( Level.WARNING,
                TomMessage.unusedVariable.getMessage(),
                new Object[]{orgTrack.getFileName().getString(), new Integer(orgTrack.getLine()),
                extractRealName(tom_tomName)} );
            getLogger().log( Level.INFO,
                TomMessage.remove.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });

            return tom_body;

          } else if(mult == 1) {
            if(expConstantInBody(tom_exp,tom_body)) {

              getLogger().log( Level.INFO,
                  TomMessage.inline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });

              return inlineInstruction(tom_var,tom_exp,tom_body);
            } else {
              getLogger().log( Level.INFO,
                  TomMessage.noInline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
            }

          } else {
            /* do nothing: traversal */
            getLogger().log( Level.INFO,
                TomMessage.doNothing.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
          }
         } } } } } } } } } } } } } } } if (tom_is_fun_sym_Let(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match11_1_variable=tom_get_slot_Let_variable(tom_match11_1); { tom.engine.adt.tomsignature.types.Expression tom_match11_1_source=tom_get_slot_Let_source(tom_match11_1); { tom.engine.adt.tomsignature.types.Instruction tom_match11_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match11_1); if (tom_is_fun_sym_UnamedVariableStar(tom_match11_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match11_1_variable) ||  false ) { if ( true ) {



          return tom_match11_1_astInstruction; 
         } } } } } } if (tom_is_fun_sym_Let(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match11_1_variable=tom_get_slot_Let_variable(tom_match11_1); { tom.engine.adt.tomsignature.types.Expression tom_match11_1_source=tom_get_slot_Let_source(tom_match11_1); { tom.engine.adt.tomsignature.types.Instruction tom_match11_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match11_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match11_1_variable; {boolean tom_bool_match11_1_variable= false ; { tom.engine.adt.tomsignature.types.TomName tom_match11_1_variable_astName= null ; if (tom_is_fun_sym_Variable(tom_match11_1_variable)) {tom_bool_match11_1_variable= true ;tom_match11_1_variable_astName=tom_get_slot_Variable_astName(tom_match11_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match11_1_variable)) {tom_bool_match11_1_variable= true ;tom_match11_1_variable_astName=tom_get_slot_VariableStar_astName(tom_match11_1_variable); } } if (tom_bool_match11_1_variable) { if (tom_is_fun_sym_Name(tom_match11_1_variable_astName) ||  false ) { { String  tom_match11_1_variable_astName_string=tom_get_slot_Name_string(tom_match11_1_variable_astName); { String  tom_tomName=tom_match11_1_variable_astName_string; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match11_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match11_1_astInstruction; if ( true ) {


          List list  = computeOccurences(tom_match11_1_variable_astName,tom_body);
          int mult = list.size();

          if(mult == 0) {
            Option orgTrack = findOriginTracking(tom_var.getOption());

            getLogger().log( Level.WARNING,
                TomMessage.unusedVariable.getMessage(),
                new Object[]{orgTrack.getFileName().getString(), new Integer(orgTrack.getLine()),
                extractRealName(tom_tomName)} );
            getLogger().log( Level.INFO,
                TomMessage.remove.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });

            return tom_body; 
          } else if(mult == 1) {
            if(expConstantInBody(tom_exp,tom_body)) {
              getLogger().log( Level.INFO,
                  TomMessage.inline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
              return inlineInstruction(tom_var,tom_exp,tom_body);
            } else {
              getLogger().log( Level.INFO,
                  TomMessage.noInline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
            }
          } else {
            /* do nothing: traversal */
            getLogger().log( Level.INFO,
                TomMessage.doNothing.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
          }
         } } } } } } } } } } } } } } } }

 // end match
      /*
       * Defaul case: traversal
       */
      return subject;
    }      
      
  }

  public class BaseId extends TomSignatureVisitableFwd {
    public BaseId() {
      super(new tom.library.strategy.mutraveler.Identity());
    }
  }

  public class NopElimAndFlatten extends BaseId {
    public tom.engine.adt.tomsignature.types.Instruction visit_Instruction(tom.engine.adt.tomsignature.types.Instruction subject)
      throws jjtraveler.VisitFailure{
       if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match12_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_AbstractBlock(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList=tom_get_slot_AbstractBlock_instList(tom_match12_1); if (tom_is_fun_sym_concInstruction(tom_match12_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_list1=tom_match12_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_begin1=tom_match12_1_instList_list1; { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_end1=tom_match12_1_instList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match12_1_instList_end1))) {tom_match12_1_instList_list1=tom_match12_1_instList_end1; { { tom.engine.adt.tomsignature.types.Instruction tom_match12_1_instList_2=tom_get_head_concInstruction_InstructionList(tom_match12_1_instList_list1);tom_match12_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_instList_list1); if (tom_is_fun_sym_AbstractBlock(tom_match12_1_instList_2) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_2_instList=tom_get_slot_AbstractBlock_instList(tom_match12_1_instList_2); if ( true ) {


          getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        "flatten");     
          return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_get_slice_concInstruction(tom_match12_1_instList_begin1,tom_match12_1_instList_end1),tom_append_list_concInstruction(tom_match12_1_instList_2_instList,tom_append_list_concInstruction(tom_match12_1_instList_list1,tom_empty_list_concInstruction()))));
         } } } }tom_match12_1_instList_end1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_instList_end1); } }tom_match12_1_instList_list1=tom_match12_1_instList_begin1; } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList=tom_get_slot_AbstractBlock_instList(tom_match12_1); if (tom_is_fun_sym_concInstruction(tom_match12_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_list1=tom_match12_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_begin1=tom_match12_1_instList_list1; { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_end1=tom_match12_1_instList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match12_1_instList_end1))) {tom_match12_1_instList_list1=tom_match12_1_instList_end1; { { tom.engine.adt.tomsignature.types.Instruction tom_match12_1_instList_2=tom_get_head_concInstruction_InstructionList(tom_match12_1_instList_list1);tom_match12_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_instList_list1); if (tom_is_fun_sym_Nop(tom_match12_1_instList_2) ||  false ) { if ( true ) {


          getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        "nop-elim");     
          return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_get_slice_concInstruction(tom_match12_1_instList_begin1,tom_match12_1_instList_end1),tom_append_list_concInstruction(tom_match12_1_instList_list1,tom_empty_list_concInstruction())));
         } } }tom_match12_1_instList_end1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_instList_end1); } }tom_match12_1_instList_list1=tom_match12_1_instList_begin1; } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList=tom_get_slot_AbstractBlock_instList(tom_match12_1); if (tom_is_fun_sym_concInstruction(tom_match12_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_list1=tom_match12_1_instList; if (tom_is_empty_concInstruction_InstructionList(tom_match12_1_instList_list1)) { if ( true ) {


           getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        "abstractblock-elim1");     
          return tom_make_Nop();
         } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList=tom_get_slot_AbstractBlock_instList(tom_match12_1); if (tom_is_fun_sym_concInstruction(tom_match12_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match12_1_instList_list1=tom_match12_1_instList; if (!(tom_is_empty_concInstruction_InstructionList(tom_match12_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_i=tom_get_head_concInstruction_InstructionList(tom_match12_1_instList_list1);tom_match12_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_instList_list1); if (tom_is_empty_concInstruction_InstructionList(tom_match12_1_instList_list1)) { if ( true ) {


           getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        "abstractblock-elim2");     
          return tom_i;
         } } } } } } } } } }














      // Defaul case: traversal
      return subject;
    }      

    private InstructionList flatten(InstructionList list) {
       if(list instanceof  tom.engine.adt.tomsignature.types.InstructionList) { { tom.engine.adt.tomsignature.types.InstructionList tom_match13_1=(( tom.engine.adt.tomsignature.types.InstructionList)list); if (tom_is_fun_sym_emptyInstructionList(tom_match13_1) ||  false ) { if ( true ) {
 
          return list;
         } } if (tom_is_fun_sym_manyInstructionList(tom_match13_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match13_1_head=tom_get_slot_manyInstructionList_head(tom_match13_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match13_1_tail=tom_get_slot_manyInstructionList_tail(tom_match13_1); { tom.engine.adt.tomsignature.types.Instruction tom_head=tom_match13_1_head; { tom.engine.adt.tomsignature.types.InstructionList tom_tail=tom_match13_1_tail; if ( true ) { if(tom_head instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match14_1=(( tom.engine.adt.tomsignature.types.Instruction)tom_head); if (tom_is_fun_sym_Nop(tom_match14_1) ||  false ) { if ( true ) {



 
              return flatten(tom_tail);
             } } if (tom_is_fun_sym_AbstractBlock(tom_match14_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match14_1_instList=tom_get_slot_AbstractBlock_instList(tom_match14_1); if ( true ) {

              return (InstructionList) flatten(tom_match14_1_instList).concat(tom_tail);
             } } } if ( true ) {
return tom_make_manyInstructionList(tom_head,flatten(tom_tail)); } } }


         } } } } } } } }

      return list;
    }

  }

  public class IfSwapping extends BaseId {
    public tom.engine.adt.tomsignature.types.Instruction visit_Instruction(tom.engine.adt.tomsignature.types.Instruction subject)
      throws jjtraveler.VisitFailure{

      PILFactory factory = new PILFactory(); 
      //System.out.println(factory.prettyPrint(factory.remove(subject)));

      /*
      %match(Instruction subject) {
        AbstractBlock(concInstruction(L*)) -> {
          System.out.println(factory.prettyPrint(factory.remove(subject)));
          System.out.println(`L);
        }
      }
      */

       if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match15_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_AbstractBlock(tom_match15_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match15_1_instList=tom_get_slot_AbstractBlock_instList(tom_match15_1); if (tom_is_fun_sym_concInstruction(tom_match15_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match15_1_instList_list1=tom_match15_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_match15_1_instList_begin1=tom_match15_1_instList_list1; { tom.engine.adt.tomsignature.types.InstructionList tom_match15_1_instList_end1=tom_match15_1_instList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match15_1_instList_end1))) {tom_match15_1_instList_list1=tom_match15_1_instList_end1; { { tom.engine.adt.tomsignature.types.Instruction tom_match15_1_instList_2=tom_get_head_concInstruction_InstructionList(tom_match15_1_instList_list1);tom_match15_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match15_1_instList_list1); if (tom_is_fun_sym_If(tom_match15_1_instList_2) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match15_1_instList_2_condition=tom_get_slot_If_condition(tom_match15_1_instList_2); { tom.engine.adt.tomsignature.types.Instruction tom_match15_1_instList_2_succesInst=tom_get_slot_If_succesInst(tom_match15_1_instList_2); { tom.engine.adt.tomsignature.types.Instruction tom_match15_1_instList_2_failureInst=tom_get_slot_If_failureInst(tom_match15_1_instList_2); { tom.engine.adt.tomsignature.types.Expression tom_cond1=tom_match15_1_instList_2_condition; if (tom_is_fun_sym_Nop(tom_match15_1_instList_2_failureInst) ||  false ) { if (!(tom_is_empty_concInstruction_InstructionList(tom_match15_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_match15_1_instList_3=tom_get_head_concInstruction_InstructionList(tom_match15_1_instList_list1);tom_match15_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match15_1_instList_list1); if (tom_is_fun_sym_If(tom_match15_1_instList_3) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match15_1_instList_3_condition=tom_get_slot_If_condition(tom_match15_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_match15_1_instList_3_succesInst=tom_get_slot_If_succesInst(tom_match15_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_match15_1_instList_3_failureInst=tom_get_slot_If_failureInst(tom_match15_1_instList_3); { tom.engine.adt.tomsignature.types.Expression tom_cond2=tom_match15_1_instList_3_condition; if (tom_is_fun_sym_Nop(tom_match15_1_instList_3_failureInst) ||  false ) { if ( true ) {

          String s1 = factory.prettyPrint(factory.remove(tom_cond1));
          String s2 = factory.prettyPrint(factory.remove(tom_cond2));
          //System.out.println("s1 = " + s1);
          //System.out.println("s2 = " + s2);
          //System.out.println("cmp = " + s1.compareTo(s2));
          
          if(s1.compareTo(s2) < 0) {
            Expression compatible = (Expression) normStrategy.visit(tom_make_And(tom_cond1,tom_cond2));
            if(compatible==tom_make_FalseTL()) {
                        getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        new Object[]{"if-swapping"});     
              return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_get_slice_concInstruction(tom_match15_1_instList_begin1,tom_match15_1_instList_end1),tom_cons_list_concInstruction(tom_match15_1_instList_3,tom_cons_list_concInstruction(tom_match15_1_instList_2,tom_append_list_concInstruction(tom_match15_1_instList_list1,tom_empty_list_concInstruction())))));
            }
          }
         } } } } } } } } } } } } } } } }tom_match15_1_instList_end1=tom_get_tail_concInstruction_InstructionList(tom_match15_1_instList_end1); } }tom_match15_1_instList_list1=tom_match15_1_instList_begin1; } } } } } } } } }

      // Defaul case: traversal
      return subject;
    }      
  }

  public class BlockFusion extends BaseId {
    public tom.engine.adt.tomsignature.types.Instruction visit_Instruction(tom.engine.adt.tomsignature.types.Instruction subject)
      throws jjtraveler.VisitFailure{
       if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match16_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_AbstractBlock(tom_match16_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match16_1_instList=tom_get_slot_AbstractBlock_instList(tom_match16_1); if (tom_is_fun_sym_concInstruction(tom_match16_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match16_1_instList_list1=tom_match16_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_match16_1_instList_begin1=tom_match16_1_instList_list1; { tom.engine.adt.tomsignature.types.InstructionList tom_match16_1_instList_end1=tom_match16_1_instList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match16_1_instList_end1))) {tom_match16_1_instList_list1=tom_match16_1_instList_end1; { { tom.engine.adt.tomsignature.types.InstructionList tom_X1=tom_get_slice_concInstruction(tom_match16_1_instList_begin1,tom_match16_1_instList_end1); { tom.engine.adt.tomsignature.types.Instruction tom_match16_1_instList_2=tom_get_head_concInstruction_InstructionList(tom_match16_1_instList_list1);tom_match16_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match16_1_instList_list1); if (tom_is_fun_sym_Let(tom_match16_1_instList_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match16_1_instList_2_variable=tom_get_slot_Let_variable(tom_match16_1_instList_2); { tom.engine.adt.tomsignature.types.Expression tom_match16_1_instList_2_source=tom_get_slot_Let_source(tom_match16_1_instList_2); { tom.engine.adt.tomsignature.types.Instruction tom_match16_1_instList_2_astInstruction=tom_get_slot_Let_astInstruction(tom_match16_1_instList_2); { tom.engine.adt.tomsignature.types.TomTerm tom_var1=tom_match16_1_instList_2_variable; {boolean tom_bool_match16_1_instList_2_variable= false ; { tom.engine.adt.tomsignature.types.TomName tom_match16_1_instList_2_variable_astName= null ; if (tom_is_fun_sym_Variable(tom_match16_1_instList_2_variable)) {tom_bool_match16_1_instList_2_variable= true ;tom_match16_1_instList_2_variable_astName=tom_get_slot_Variable_astName(tom_match16_1_instList_2_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match16_1_instList_2_variable)) {tom_bool_match16_1_instList_2_variable= true ;tom_match16_1_instList_2_variable_astName=tom_get_slot_VariableStar_astName(tom_match16_1_instList_2_variable); } } if (tom_bool_match16_1_instList_2_variable) { { tom.engine.adt.tomsignature.types.Expression tom_term1=tom_match16_1_instList_2_source; { tom.engine.adt.tomsignature.types.Instruction tom_body1=tom_match16_1_instList_2_astInstruction; if (!(tom_is_empty_concInstruction_InstructionList(tom_match16_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_match16_1_instList_3=tom_get_head_concInstruction_InstructionList(tom_match16_1_instList_list1);tom_match16_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match16_1_instList_list1); if (tom_is_fun_sym_Let(tom_match16_1_instList_3) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match16_1_instList_3_variable=tom_get_slot_Let_variable(tom_match16_1_instList_3); { tom.engine.adt.tomsignature.types.Expression tom_match16_1_instList_3_source=tom_get_slot_Let_source(tom_match16_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_match16_1_instList_3_astInstruction=tom_get_slot_Let_astInstruction(tom_match16_1_instList_3); { tom.engine.adt.tomsignature.types.TomTerm tom_var2=tom_match16_1_instList_3_variable; { tom.engine.adt.tomsignature.types.Instruction tom_body2=tom_match16_1_instList_3_astInstruction; { tom.engine.adt.tomsignature.types.InstructionList tom_X2=tom_match16_1_instList_list1; if ( true ) {

          /* Fusion de 2 blocs Let contigus instanciant deux variables egales */
          if(compare(tom_term1,tom_match16_1_instList_3_source)) {
            if(compare(tom_var1,tom_var2)) {
                        getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        new Object[]{"block-fusion1"});     
              return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_Let(tom_var1,tom_term1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_body1,tom_cons_list_concInstruction(tom_body2,tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
            } else {
              List list  = computeOccurences(tom_match16_1_instList_2_variable_astName,tom_body2);
              int mult = list.size();
              if(mult==0){
                         getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                         new Object[]{"block-fusion2"});     
                /*
                 * TODO: check that var1 does not appear in body2
                 */
                return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_Let(tom_var1,tom_term1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_body1,tom_cons_list_concInstruction(renameVariable(tom_var2,tom_var1,tom_body2),tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
              }
            }
          }
         } } } } } } } } } } } } } } } } } } } } } }tom_match16_1_instList_end1=tom_get_tail_concInstruction_InstructionList(tom_match16_1_instList_end1); } }tom_match16_1_instList_list1=tom_match16_1_instList_begin1; } } } } } } } } }

      // Defaul case: traversal
      return subject;
    }      
  }

  public class IfFusion extends BaseId {
    public tom.engine.adt.tomsignature.types.Instruction visit_Instruction(tom.engine.adt.tomsignature.types.Instruction subject)
      throws jjtraveler.VisitFailure{
       if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match17_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_AbstractBlock(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match17_1_instList=tom_get_slot_AbstractBlock_instList(tom_match17_1); if (tom_is_fun_sym_concInstruction(tom_match17_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match17_1_instList_list1=tom_match17_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_match17_1_instList_begin1=tom_match17_1_instList_list1; { tom.engine.adt.tomsignature.types.InstructionList tom_match17_1_instList_end1=tom_match17_1_instList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match17_1_instList_end1))) {tom_match17_1_instList_list1=tom_match17_1_instList_end1; { { tom.engine.adt.tomsignature.types.InstructionList tom_X1=tom_get_slice_concInstruction(tom_match17_1_instList_begin1,tom_match17_1_instList_end1); { tom.engine.adt.tomsignature.types.Instruction tom_match17_1_instList_2=tom_get_head_concInstruction_InstructionList(tom_match17_1_instList_list1);tom_match17_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match17_1_instList_list1); if (tom_is_fun_sym_If(tom_match17_1_instList_2) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match17_1_instList_2_condition=tom_get_slot_If_condition(tom_match17_1_instList_2); { tom.engine.adt.tomsignature.types.Instruction tom_match17_1_instList_2_succesInst=tom_get_slot_If_succesInst(tom_match17_1_instList_2); { tom.engine.adt.tomsignature.types.Instruction tom_match17_1_instList_2_failureInst=tom_get_slot_If_failureInst(tom_match17_1_instList_2); { tom.engine.adt.tomsignature.types.Expression tom_cond1=tom_match17_1_instList_2_condition; { tom.engine.adt.tomsignature.types.Instruction tom_success1=tom_match17_1_instList_2_succesInst; { tom.engine.adt.tomsignature.types.Instruction tom_failure1=tom_match17_1_instList_2_failureInst; if (!(tom_is_empty_concInstruction_InstructionList(tom_match17_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_match17_1_instList_3=tom_get_head_concInstruction_InstructionList(tom_match17_1_instList_list1);tom_match17_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match17_1_instList_list1); if (tom_is_fun_sym_If(tom_match17_1_instList_3) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match17_1_instList_3_condition=tom_get_slot_If_condition(tom_match17_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_match17_1_instList_3_succesInst=tom_get_slot_If_succesInst(tom_match17_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_match17_1_instList_3_failureInst=tom_get_slot_If_failureInst(tom_match17_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_success2=tom_match17_1_instList_3_succesInst; { tom.engine.adt.tomsignature.types.Instruction tom_failure2=tom_match17_1_instList_3_failureInst; { tom.engine.adt.tomsignature.types.InstructionList tom_X2=tom_match17_1_instList_list1; if ( true ) {

          /* Fusion de 2 blocs If gardes par la meme condition */
          if(compare(tom_cond1,tom_match17_1_instList_3_condition)) {
            if(tom_failure1.isNop() && tom_failure2.isNop()) {
        getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        new Object[]{"if-fusion1"});
              Instruction res = tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_If(tom_cond1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_success1,tom_cons_list_concInstruction(tom_success2,tom_empty_list_concInstruction()))),tom_make_Nop()),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
              //System.out.println(res);

              return res;
            } else {
         getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                       new Object[]{ "if-fusion2"});
              return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_If(tom_cond1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_success1,tom_cons_list_concInstruction(tom_success2,tom_empty_list_concInstruction()))),tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_failure1,tom_cons_list_concInstruction(tom_failure2,tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
            }
          }
         } } } } } } } } } } } } } } } } } } }tom_match17_1_instList_end1=tom_get_tail_concInstruction_InstructionList(tom_match17_1_instList_end1); } }tom_match17_1_instList_list1=tom_match17_1_instList_begin1; } } } } } } } } }

      // Defaul case: traversal
      return subject;
    }      
  }

  public class InterBlock extends BaseId {
    public tom.engine.adt.tomsignature.types.Instruction visit_Instruction(tom.engine.adt.tomsignature.types.Instruction subject)
      throws jjtraveler.VisitFailure{

       if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match18_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_AbstractBlock(tom_match18_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match18_1_instList=tom_get_slot_AbstractBlock_instList(tom_match18_1); if (tom_is_fun_sym_concInstruction(tom_match18_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match18_1_instList_list1=tom_match18_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_match18_1_instList_begin1=tom_match18_1_instList_list1; { tom.engine.adt.tomsignature.types.InstructionList tom_match18_1_instList_end1=tom_match18_1_instList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match18_1_instList_end1))) {tom_match18_1_instList_list1=tom_match18_1_instList_end1; { { tom.engine.adt.tomsignature.types.Instruction tom_match18_1_instList_2=tom_get_head_concInstruction_InstructionList(tom_match18_1_instList_list1);tom_match18_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match18_1_instList_list1); if (tom_is_fun_sym_If(tom_match18_1_instList_2) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match18_1_instList_2_condition=tom_get_slot_If_condition(tom_match18_1_instList_2); { tom.engine.adt.tomsignature.types.Instruction tom_match18_1_instList_2_succesInst=tom_get_slot_If_succesInst(tom_match18_1_instList_2); { tom.engine.adt.tomsignature.types.Instruction tom_match18_1_instList_2_failureInst=tom_get_slot_If_failureInst(tom_match18_1_instList_2); { tom.engine.adt.tomsignature.types.Expression tom_cond1=tom_match18_1_instList_2_condition; if (!(tom_is_empty_concInstruction_InstructionList(tom_match18_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_match18_1_instList_3=tom_get_head_concInstruction_InstructionList(tom_match18_1_instList_list1);tom_match18_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match18_1_instList_list1); if (tom_is_fun_sym_If(tom_match18_1_instList_3) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match18_1_instList_3_condition=tom_get_slot_If_condition(tom_match18_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_match18_1_instList_3_succesInst=tom_get_slot_If_succesInst(tom_match18_1_instList_3); { tom.engine.adt.tomsignature.types.Instruction tom_match18_1_instList_3_failureInst=tom_get_slot_If_failureInst(tom_match18_1_instList_3); { tom.engine.adt.tomsignature.types.Expression tom_cond2=tom_match18_1_instList_3_condition; if (tom_is_fun_sym_Nop(tom_match18_1_instList_3_failureInst) ||  false ) { if ( true ) {


          Expression compatible = (Expression) normStrategy.visit(tom_make_And(tom_cond1,tom_cond2));
          if(compatible==tom_make_FalseTL()) {
          getLogger().log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                        new Object[]{"inter-block"});
            return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_get_slice_concInstruction(tom_match18_1_instList_begin1,tom_match18_1_instList_end1),tom_cons_list_concInstruction(tom_make_If(tom_cond1,tom_match18_1_instList_2_succesInst,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_match18_1_instList_2_failureInst,tom_cons_list_concInstruction(tom_make_If(tom_cond2,tom_match18_1_instList_3_succesInst,tom_make_Nop()),tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_match18_1_instList_list1,tom_empty_list_concInstruction()))));
          }
         } } } } } } } } } } } } } } }tom_match18_1_instList_end1=tom_get_tail_concInstruction_InstructionList(tom_match18_1_instList_end1); } }tom_match18_1_instList_list1=tom_match18_1_instList_begin1; } } } } } } } } }

       // Defaul case: traversal
      return subject;
    }      
  }

  public class NormExpr extends BaseId {
    public tom.engine.adt.tomsignature.types.Expression visit_Expression(tom.engine.adt.tomsignature.types.Expression subject) 
      throws jjtraveler.VisitFailure {
       if(subject instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1=(( tom.engine.adt.tomsignature.types.Expression)subject); if (tom_is_fun_sym_Or(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_Or_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_Or_arg2(tom_match19_1); if (tom_is_fun_sym_TrueTL(tom_match19_1_arg2) ||  false ) { if ( true ) {

          return tom_make_TrueTL();
         } } } } } if (tom_is_fun_sym_Or(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_Or_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_Or_arg2(tom_match19_1); if (tom_is_fun_sym_TrueTL(tom_match19_1_arg1) ||  false ) { if ( true ) {

          return tom_make_TrueTL();
         } } } } } if (tom_is_fun_sym_Or(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_Or_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_Or_arg2(tom_match19_1); if (tom_is_fun_sym_FalseTL(tom_match19_1_arg2) ||  false ) { if ( true ) {

          return tom_match19_1_arg1;
         } } } } } if (tom_is_fun_sym_Or(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_Or_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_Or_arg2(tom_match19_1); if (tom_is_fun_sym_FalseTL(tom_match19_1_arg1) ||  false ) { if ( true ) {

          return tom_match19_1_arg2;
         } } } } } if (tom_is_fun_sym_And(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_And_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_And_arg2(tom_match19_1); if (tom_is_fun_sym_TrueTL(tom_match19_1_arg1) ||  false ) { if ( true ) {

          return tom_match19_1_arg2;
         } } } } } if (tom_is_fun_sym_And(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_And_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_And_arg2(tom_match19_1); if (tom_is_fun_sym_TrueTL(tom_match19_1_arg2) ||  false ) { if ( true ) {

          return tom_match19_1_arg1;
         } } } } } if (tom_is_fun_sym_And(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_And_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_And_arg2(tom_match19_1); if (tom_is_fun_sym_FalseTL(tom_match19_1_arg1) ||  false ) { if ( true ) {

          return tom_make_FalseTL();
         } } } } } if (tom_is_fun_sym_And(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_And_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_And_arg2(tom_match19_1); if (tom_is_fun_sym_TrueTL(tom_match19_1_arg1) ||  false ) { if ( true ) {

          return tom_make_FalseTL();
         } } } } } if (tom_is_fun_sym_EqualTerm(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match19_1_tomType=tom_get_slot_EqualTerm_tomType(tom_match19_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_kid1=tom_get_slot_EqualTerm_kid1(tom_match19_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_kid2=tom_get_slot_EqualTerm_kid2(tom_match19_1); if ( true ) {

          if(compare(tom_match19_1_kid1,tom_match19_1_kid2)){
            return tom_make_TrueTL();
          } else {
            return tom_match19_1;
          }
         } } } } } if (tom_is_fun_sym_And(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg1=tom_get_slot_And_arg1(tom_match19_1); { tom.engine.adt.tomsignature.types.Expression tom_match19_1_arg2=tom_get_slot_And_arg2(tom_match19_1); if (tom_is_fun_sym_EqualFunctionSymbol(tom_match19_1_arg1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match19_1_arg1_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match19_1_arg1); { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_arg1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match19_1_arg1); { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_arg1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match19_1_arg1); { tom.engine.adt.tomsignature.types.TomType tom_astType=tom_match19_1_arg1_astType; { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match19_1_arg1_exp1; { tom.engine.adt.tomsignature.types.TomTerm tom_exp1=tom_match19_1_arg1_exp2; if (tom_is_fun_sym_EqualFunctionSymbol(tom_match19_1_arg2) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match19_1_arg2_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match19_1_arg2); { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_arg2_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match19_1_arg2); { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_arg2_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match19_1_arg2); { tom.engine.adt.tomsignature.types.TomType tom_renamedvar_astType_1=tom_match19_1_arg2_astType; if (tom_terms_equal_TomType(tom_astType, tom_renamedvar_astType_1)) { { tom.engine.adt.tomsignature.types.TomTerm tom_renamedvar_exp_1=tom_match19_1_arg2_exp1; if (tom_terms_equal_TomTerm(tom_exp, tom_renamedvar_exp_1)) { { tom.engine.adt.tomsignature.types.TomTerm tom_exp2=tom_match19_1_arg2_exp2; if ( true ) {

          NameList l1 = tom_exp1.getNameList();
          NameList l2 = tom_exp2.getNameList();
          if (tom_exp1.getNameList()==tom_exp2.getNameList()){
            return tom_make_EqualFunctionSymbol(tom_astType,tom_exp,tom_exp1);
          } else if(l1.getLength()==1 && l2.getLength()==1) {
              return tom_make_FalseTL();
          } else {
            return tom_match19_1;
          }
         } } } } } } } } } } } } } } } } } } } } } }
 
      
      // Defaul case: traversal
      return subject;
    }      
      
  }

} // class TomOptimizer
