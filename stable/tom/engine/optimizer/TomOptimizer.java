/* Generated by TOM: Do not edit this file */  /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2004 INRIA
                  Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.optimizer;

import aterm.*;

import java.util.*;

import jtom.TomEnvironment;
import jtom.adt.tomsignature.types.*;
import jtom.tools.TomTask;
import jtom.checker.TomCheckerMessage;
import jtom.xml.Constants;
import jtom.exception.*;
import jtom.runtime.*;

public class TomOptimizer extends TomTask {
	
  // ------------------------------------------------------------
  /* Generated by TOM: Do not edit this file
  // ------------------------------------------------------------
		
  public TomOptimizer(TomEnvironment tomEnvironment) {
    super("Tom Optimizer", tomEnvironment);
  }

  public void initProcess() {
  } 
  
  public void process() {
    try {
      long startChrono = 0;
      boolean verbose = getInput().isVerbose();
      if(verbose) { startChrono = System.currentTimeMillis();}
      
      TomTerm renamedTerm = getInput().getTerm();
      TomTerm optimizedTerm = optimize(renamedTerm);
      
      if(verbose) {
        System.out.println("TOM optimization phase (" + (System.currentTimeMillis()-startChrono)+ " ms)");
      }
      getInput().setTerm(optimizedTerm);
      
    } catch (Exception e) {
      addError("Exception occurs in TomOptimizer: "+e.getMessage(), getInput().getInputFileName(), 0, 0);
      e.printStackTrace();
      return;
    }
  }

    /* 
     * optimize:
     * remove variables which are only assigned once (but not used)
     * inline variables which are used only once
     *
     * a variable is inlined when it is used only once and
     * when the expression depends on ref-variables which
     * are not modified in the body
     */

  Replace1 replace_optimize = new Replace1() {
      public ATerm apply(ATerm subject) {
        
        if(subject instanceof TomTerm) {
           { TomTerm tom_match1_1 =(( TomTerm)subject);{ if(tom_is_fun_sym_ExpressionToTomTerm(tom_match1_1) ||  false ) { { Expression tom_match1_1_1 =tom_get_slot_ExpressionToTomTerm_astExpression(tom_match1_1); if(tom_is_fun_sym_TomTermToExpression(tom_match1_1_1) ||  false ) { { TomTerm tom_match1_1_1_1 =tom_get_slot_TomTermToExpression_astTerm(tom_match1_1_1); { TomTerm t =tom_match1_1_1_1;
 
              return optimize(t);
            }} }} }}}
 
        } else if(subject instanceof Expression) {
           { Expression tom_match2_1 =(( Expression)subject);{ if(tom_is_fun_sym_TomTermToExpression(tom_match2_1) ||  false ) { { TomTerm tom_match2_1_1 =tom_get_slot_TomTermToExpression_astTerm(tom_match2_1); if(tom_is_fun_sym_ExpressionToTomTerm(tom_match2_1_1) ||  false ) { { Expression tom_match2_1_1_1 =tom_get_slot_ExpressionToTomTerm_astExpression(tom_match2_1_1); { Expression t =tom_match2_1_1_1;
 
              return optimizeExpression(t);
            }} }} }}}
 
        } else if(subject instanceof Instruction) {
           { Instruction tom_match3_1 =(( Instruction)subject);{ if(tom_is_fun_sym_Let(tom_match3_1) ||  false ) { { TomTerm tom_match3_1_1 =tom_get_slot_Let_variable(tom_match3_1); { Expression tom_match3_1_2 =tom_get_slot_Let_source(tom_match3_1); { Instruction tom_match3_1_3 =tom_get_slot_Let_astInstruction(tom_match3_1); if(tom_is_fun_sym_VariableStar(tom_match3_1_1) || tom_is_fun_sym_Variable(tom_match3_1_1) ||  false ) { { TomTerm var =tom_match3_1_1; { TomName tom_match3_1_1_2 =tom_get_slot_Variable_astName(tom_match3_1_1); { TomName name =tom_match3_1_1_2; { Expression exp =tom_match3_1_2; { Instruction body =tom_match3_1_3;

 
              List list  = computeOccurences(name,body);
              int mult = list.size();

              if(mult == 0) {
                Option orgTrack = findOriginTracking(var.getOption());
                messageError(orgTrack.getLine(),
                             orgTrack.getFileName().getString(),
                             orgTrack.getAstName().getString(),
                             orgTrack.getLine(),
                             "Variable `{0}` is never used",
                             new Object[]{name},
                             TomCheckerMessage.TOM_WARNING);
                System.out.println(mult + " -> remove:     " + name);
                return optimizeInstruction(body); 
              } else if(mult == 1) {
                if(expConstantInBody(exp,body)) {
                  System.out.println(mult + " -> inline:     " + name);
                  return optimizeInstruction(inlineInstruction(var,exp,body));
                } else {
                  System.out.println(mult + " -> no inline:  " + name);
                }
              } else {
                  /* do nothing: traversal */
                System.out.println(mult + " -> do nothing: " + name);
              }
            }}}}} }}}} }}}

  // end match
        } // end instanceof Instruction

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this);
      } // end apply
    };


  public TomTerm optimize(TomTerm subject) {
    return (TomTerm) replace_optimize.apply(subject); 
  }
  
  public Instruction optimizeInstruction(Instruction subject) {
    return (Instruction) replace_optimize.apply(subject); 
  }

  public Expression optimizeExpression(Expression subject) {
    return (Expression) replace_optimize.apply(subject); 
  }

    /* 
     * inline:
     * replace a variable instantiation by its content in the body
     */

  Replace3 replace_inline = new Replace3() {
      public ATerm apply(ATerm subject, Object arg1, Object arg2) {
        TomTerm variable = (TomTerm) arg1;
        TomName variableName = variable.getAstName();
        Expression expression = (Expression) arg2;
        if(subject instanceof TomTerm) {
           { TomTerm tom_match4_1 =(( TomTerm)subject);{ if(tom_is_fun_sym_VariableStar(tom_match4_1) || tom_is_fun_sym_Variable(tom_match4_1) ||  false ) { { TomName tom_match4_1_2 =tom_get_slot_Variable_astName(tom_match4_1); { TomName name =tom_match4_1_2;

 
              if(variableName == name) {
                return tom_make_ExpressionToTomTerm(expression) ;
              }
            }} } if(tom_is_fun_sym_BuildVariable(tom_match4_1) ||  false ) { { TomName tom_match4_1_1 =tom_get_slot_BuildVariable_astName(tom_match4_1); { TomName name =tom_match4_1_1;                if(variableName == name) {                 return tom_make_ExpressionToTomTerm(expression) ;               }             }} }}}
  // end match
        } // end instanceof TomTerm

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this,arg1,arg2);
      } // end apply
    };


  public Instruction inlineInstruction(TomTerm variable, Expression expression,
                                       Instruction subject) {
    return (Instruction) replace_inline.apply(subject,variable,expression); 
  }

  private List computeOccurences(final TomName variableName, ATerm subject) {
    final List list = new ArrayList();
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
          if(t instanceof TomTerm) {
             { TomTerm tom_match5_1 =(( TomTerm)t);{ if(tom_is_fun_sym_VariableStar(tom_match5_1) || tom_is_fun_sym_Variable(tom_match5_1) ||  false ) { { TomName tom_match5_1_2 =tom_get_slot_Variable_astName(tom_match5_1); { TomName name =tom_match5_1_2;

 
                if(variableName == name) {
                  list.add(t);
                  return false;
                }
              }} } if(tom_is_fun_sym_BuildVariable(tom_match5_1) ||  false ) { { TomName tom_match5_1_1 =tom_get_slot_BuildVariable_astName(tom_match5_1); { TomName name =tom_match5_1_1;                  if(variableName == name) {                   list.add(t);                   return false;                 }               }} }

  return true; }}
 
          } else {
            return true;
          }
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
    return list;
  }

  private boolean expConstantInBody(Expression exp, Instruction body) {
    boolean res = true;
    HashSet c = new HashSet();
    collectRefVariable(c,exp);
    Iterator it = c.iterator();
    while(res && it.hasNext()) {
      TomName name = (TomName) it.next();
      List list = computeOccurences(name,body);
      res = res && (list.size()==0);
    }
    return res; 
  }

  protected void collectRefVariable(final Collection collection, ATerm subject) {
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
          if(t instanceof TomTerm) {
            TomTerm annotedVariable = null;
             { TomTerm tom_match6_1 =(( TomTerm)t);{ if(tom_is_fun_sym_Ref(tom_match6_1) ||  false ) { { TomTerm tom_match6_1_1 =tom_get_slot_Ref_tomTerm(tom_match6_1); if(tom_is_fun_sym_VariableStar(tom_match6_1_1) || tom_is_fun_sym_Variable(tom_match6_1_1) ||  false ) { { TomName tom_match6_1_1_2 =tom_get_slot_Variable_astName(tom_match6_1_1); { TomName name =tom_match6_1_1_2;
 
                collection.add(name);
                return false;
              }} }} }

  return true; }}
 
          } else {
            return true;
          }
        } // end apply
      }; // end new
    
    traversal().genericCollect(subject, collect);
  }
  
}  //Class TomOptimizer
