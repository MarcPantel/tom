/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.optimizer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomname.types.tomnamelist.*;

import tom.engine.TomMessage;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.PILFactory;
import tom.engine.tools.Tools;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;
import tom.library.strategy.mutraveler.*;

/**
 * The TomOptimizer plugin.
 */
public class TomOptimizer extends TomGenericPlugin {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomSymbolList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isAbstractBlock()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_AbstractBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(t0); }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_AbstractBlock_InstList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getInstList()  ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isNop()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Nop() { return  tom.engine.adt.tominstruction.types.instruction.Nop.make(); }private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isLetAssign()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetAssign_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetAssign_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetAssign_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_LetRef( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isLetRef()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetRef_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetRef_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetRef_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isLet()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Let( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.Let.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Let_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Let_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_Let_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_Assign( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isAssign()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Assign_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Assign_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isIf()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_If( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.If.make(t0, t1, t2); }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_If_Condition( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getCondition()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_SuccesInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSuccesInst()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_FailureInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getFailureInst()  ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  (t!=null) && t.isName()  ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static boolean tom_is_fun_sym_EqualTerm( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isEqualTerm()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_EqualTerm_TomType( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getTomType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTerm_Kid1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getKid1()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTerm_Kid2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getKid2()  ;}private static boolean tom_is_fun_sym_EqualFunctionSymbol( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isEqualFunctionSymbol()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualFunctionSymbol( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualFunctionSymbol.make(t0, t1, t2); }private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_EqualFunctionSymbol_AstType( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp1()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp2()  ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isFalseTL()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_FalseTL() { return  tom.engine.adt.tomexpression.types.expression.FalseTL.make(); }private static boolean tom_is_fun_sym_TrueTL( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isTrueTL()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TrueTL() { return  tom.engine.adt.tomexpression.types.expression.TrueTL.make(); }private static boolean tom_is_fun_sym_Or( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isOr()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Or_Arg1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getArg1()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Or_Arg2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getArg2()  ;}private static boolean tom_is_fun_sym_And( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isAnd()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_And( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.And.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_And_Arg1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getArg1()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_And_Arg2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getArg2()  ;}private static boolean tom_is_fun_sym_TomTermToExpression( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isTomTermToExpression()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_TomTermToExpression_AstTerm( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstTerm()  ;}private static boolean tom_is_fun_sym_Ref( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isRef()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Ref_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static boolean tom_is_fun_sym_ExpressionToTomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isExpressionToTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ExpressionToTomTerm( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_ExpressionToTomTerm_AstExpression( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstExpression()  ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isUnamedVariableStar()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isUnamedVariable()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isVariableStar()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isVariable()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getHeadconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getTailconcInstruction()  ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.isEmptyconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(begin),end));    }   }   /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_OneId( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.OneId(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_SequenceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.SequenceId(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_ChoiceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.ChoiceId(first,then) ; }  /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Try( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDownCollect( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x"))))) ; }  /*  * strategies with Id considered as failure  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_RepeatId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_SequenceId(v,tom_make_MuVar("x"))) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_OnceTopDownId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(v,tom_make_OneId(tom_make_MuVar("x")))) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_InnermostId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("x")),tom_make_SequenceId(v,tom_make_MuVar("x")))) ; }   /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ArrayList(Object l1, Object l2) {  return  l1.equals(l2)  ;}/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_Object(Object o1, Object o2) {  return  o1.equals(o2)  ;}    /*  * We use shallow copy for the get_tail operation, so be cautious about side  * effects  */   private static java.util.ArrayList concArrayListAppend(Object o, java.util.ArrayList l) {   java.util.ArrayList res = (java.util.ArrayList)l.clone();   res.add(o);   return res; } /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Paul Brauner  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_HashSet(Object l1, Object l2) {  return  l1.equals(l2)  ;}   private static java.util.HashSet hashSetAppend(Object o, java.util.HashSet s) {   java.util.HashSet res = (java.util.HashSet) s.clone();   res.add(o);   return res; }  private static Object hashSetGetHead(java.util.HashSet s) {   java.util.Iterator it = s.iterator();   return it.next(); }  private static java.util.HashSet hashSetGetTail(java.util.HashSet s) {   java.util.HashSet res = (java.util.HashSet) s.clone();   java.util.Iterator it = s.iterator();   res.remove(it.next());   return res; }   




  /** some output suffixes */
  private static final String OPTIMIZED_SUFFIX = ".tfix.optimized";

  /** the declared options string*/
  private static final String DECLARED_OPTIONS = "<options>" + 
    "<boolean name='optimize' altName='O' description='Optimized generated code' value='false'/>" +
    "<boolean name='optimize2' altName='O2' description='Optimized generated code' value='false'/>" +
    "<boolean name='prettyPIL' altName='pil' description='PrettyPrint IL' value='false'/>" +
    "</options>";

  public void optionChanged(String optionName, Object optionValue) {
    if(optionName.equals("optimize2") && ((Boolean)optionValue).booleanValue() ) { 
      setOptionValue("pretty", Boolean.TRUE);        
    }
  }

  // this static field is necessary for %strategy instructions that generate static code
  private static PILFactory factory = new PILFactory();
  private static Logger logger = Logger.getLogger("tom.engine.optimizer.TomOptimizer");

  /** Constructor */
  public TomOptimizer() {
    super("TomOptimizer");
  }

  public void run() {
    if(getOptionBooleanValue("optimize") || getOptionBooleanValue("optimize2")) {
      // Initialize strategies

      VisitableVisitor optStrategy1 = tom_make_InnermostId(tom_make_RewriteSystem1());

      VisitableVisitor optStrategy2 = tom_make_Sequence(tom_make_InnermostId(tom_make_ChoiceId(tom_make_RepeatId((tom_make_NopElimAndFlatten())),tom_make_NormExpr())),tom_make_InnermostId(tom_make_ChoiceId(tom_make_Sequence(tom_make_RepeatId(tom_make_IfSwapping()),tom_make_RepeatId(tom_make_SequenceId(tom_make_ChoiceId(tom_make_BlockFusion(),tom_make_IfFusion()),tom_make_OnceTopDownId(tom_make_NopElimAndFlatten())))),tom_make_SequenceId(tom_make_InterBlock(),tom_make_OnceTopDownId(tom_make_RepeatId(tom_make_NopElimAndFlatten()))))
            )
          )






;

      long startChrono = System.currentTimeMillis();
      boolean intermediate = getOptionBooleanValue("intermediate");
      try {
        TomTerm renamedTerm = (TomTerm)getWorkingTerm();

        if(getOptionBooleanValue("optimize2")) {
          renamedTerm = (TomTerm) optStrategy2.visit(renamedTerm);
        }

        if(getOptionBooleanValue("optimize")) {
          renamedTerm = (TomTerm) optStrategy1.visit(renamedTerm);
        }
        setWorkingTerm(renamedTerm);

        // verbose
        logger.log(Level.INFO, TomMessage.tomOptimizationPhase.getMessage(),
            new Integer((int)(System.currentTimeMillis()-startChrono)) );
      } catch (Exception e) {
        logger.log( Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
            new Object[]{"TomOptimizer", getStreamManager().getInputFileName(), e.getMessage()} );

        e.printStackTrace();
        return;
      }
      if(intermediate) {
        Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix() + OPTIMIZED_SUFFIX, 
            (TomTerm)getWorkingTerm() );
      }
    } else {
      // not active plugin
      logger.log(Level.INFO, "The optimizer is not activated and thus WILL NOT RUN.");
    }
    if(getOptionBooleanValue("prettyPIL")) {
      System.out.println(factory.prettyPrintCompiledMatch(factory.remove((TomTerm)getWorkingTerm())));
    }

  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomOptimizer.DECLARED_OPTIONS);
  }

  private static String extractRealName(String name) {
    if(name.startsWith("tom_")) {
      return name.substring(4);
    }
    return name;
  }

  private static  jjtraveler.reflective.VisitableVisitor  tom_make_inlineInstruction( tom.engine.adt.tomname.types.TomName  variableName,  tom.engine.adt.tomexpression.types.Expression  expression) { return tom_make_TopDown(tom_make_inlineInstrOnce(variableName,expression))
; } private static class inlineInstrOnce  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   {  tom.engine.adt.tomname.types.TomName  variableName;   tom.engine.adt.tomexpression.types.Expression  expression;  public inlineInstrOnce(  tom.engine.adt.tomname.types.TomName  variableName ,   tom.engine.adt.tomexpression.types.Expression  expression ) { super(tom_make_Identity() ); this.variableName=variableName; this.expression=expression; } public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); {boolean tom_bool_match1_1= false ; { tom.engine.adt.tomname.types.TomName  tom_match1_1_AstName= null ; if (tom_is_fun_sym_Variable(tom_match1_1)) {tom_bool_match1_1= true ;tom_match1_1_AstName=tom_get_slot_Variable_AstName(tom_match1_1); } else { if (tom_is_fun_sym_VariableStar(tom_match1_1)) {tom_bool_match1_1= true ;tom_match1_1_AstName=tom_get_slot_VariableStar_AstName(tom_match1_1); } } if (tom_bool_match1_1) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_match1_1_AstName; if ( true ) {





        if(variableName == tom_name) {
          return tom_make_ExpressionToTomTerm(expression);
        }
       } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_inlineInstrOnce( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return new inlineInstrOnce(t0,t1); }private static  jjtraveler.reflective.VisitableVisitor  tom_make_computeOccurences( tom.engine.adt.tomname.types.TomName  variableName,  java.util.ArrayList  list) { return tom_make_TopDown(tom_make_findOccurence(variableName,list))




; } private static class findOccurence  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   {  tom.engine.adt.tomname.types.TomName  variableName;   java.util.ArrayList  list;  public findOccurence(  tom.engine.adt.tomname.types.TomName  variableName ,   java.util.ArrayList  list ) { super(tom_make_Identity() ); this.variableName=variableName; this.list=list; } public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match2_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match2_1; {boolean tom_bool_match2_1= false ; { tom.engine.adt.tomname.types.TomName  tom_match2_1_AstName= null ; if (tom_is_fun_sym_Variable(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_AstName=tom_get_slot_Variable_AstName(tom_match2_1); } else { if (tom_is_fun_sym_VariableStar(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_AstName=tom_get_slot_VariableStar_AstName(tom_match2_1); } } if (tom_bool_match2_1) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_match2_1_AstName; if ( true ) {





        if(variableName == tom_name) {
          list.add(tom_t);
        }
       } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_findOccurence( tom.engine.adt.tomname.types.TomName  t0,  java.util.ArrayList  t1) { return new findOccurence(t0,t1); }private static  jjtraveler.reflective.VisitableVisitor  tom_make_isAssigned( tom.engine.adt.tomname.types.TomName  variableName) { return tom_make_TopDown(tom_make_findAssignment(variableName))




; } private static class findAssignment  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   {  tom.engine.adt.tomname.types.TomName  variableName;  public findAssignment(  tom.engine.adt.tomname.types.TomName  variableName ) { super(tom_make_Identity() ); this.variableName=variableName; } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_Assign(tom_match3_1) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_Variable=tom_get_slot_Assign_Variable(tom_match3_1); {boolean tom_bool_match3_1_Variable= false ; { tom.engine.adt.tomname.types.TomName  tom_match3_1_Variable_AstName= null ; if (tom_is_fun_sym_Variable(tom_match3_1_Variable)) {tom_bool_match3_1_Variable= true ;tom_match3_1_Variable_AstName=tom_get_slot_Variable_AstName(tom_match3_1_Variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_Variable)) {tom_bool_match3_1_Variable= true ;tom_match3_1_Variable_AstName=tom_get_slot_VariableStar_AstName(tom_match3_1_Variable); } } if (tom_bool_match3_1_Variable) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_match3_1_Variable_AstName; if ( true ) {






        if(variableName == tom_name) {
          throw new VisitFailure();
        }
       } } } } } } } if (tom_is_fun_sym_LetAssign(tom_match3_1) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_Variable=tom_get_slot_LetAssign_Variable(tom_match3_1); {boolean tom_bool_match3_1_Variable= false ; { tom.engine.adt.tomname.types.TomName  tom_match3_1_Variable_AstName= null ; if (tom_is_fun_sym_Variable(tom_match3_1_Variable)) {tom_bool_match3_1_Variable= true ;tom_match3_1_Variable_AstName=tom_get_slot_Variable_AstName(tom_match3_1_Variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_Variable)) {tom_bool_match3_1_Variable= true ;tom_match3_1_Variable_AstName=tom_get_slot_VariableStar_AstName(tom_match3_1_Variable); } } if (tom_bool_match3_1_Variable) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_match3_1_Variable_AstName; if ( true ) {


        if(variableName == tom_name) {
          throw new VisitFailure();
        }
       } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_findAssignment( tom.engine.adt.tomname.types.TomName  t0) { return new findAssignment(t0); }



  private static boolean expConstantInBody(Expression exp, Instruction body) {
    HashSet c = new HashSet();
    try{
      MuTraveler.init(tom_make_TopDownCollect(tom_make_findRefVariable(c))).visit(exp);
    }catch(VisitFailure e){
      logger.log( Level.SEVERE, "Error during collecting variables in "+exp);
    }
    Iterator it = c.iterator();
    while(it.hasNext()) {
      TomName name = (TomName) it.next();
      try{
        MuTraveler.init(tom_make_isAssigned(name)).visit(body);
      }catch(VisitFailure e){return false;}
    }
    return true; 
  }

     private static class findRefVariable  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   {  java.util.HashSet  set;  public findRefVariable(  java.util.HashSet  set ) { super(tom_make_Identity() ); this.set=set; } public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if (tom_is_fun_sym_Ref(tom_match4_1) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1_TomTerm=tom_get_slot_Ref_TomTerm(tom_match4_1); {boolean tom_bool_match4_1_TomTerm= false ; { tom.engine.adt.tomname.types.TomName  tom_match4_1_TomTerm_AstName= null ; if (tom_is_fun_sym_Variable(tom_match4_1_TomTerm)) {tom_bool_match4_1_TomTerm= true ;tom_match4_1_TomTerm_AstName=tom_get_slot_Variable_AstName(tom_match4_1_TomTerm); } else { if (tom_is_fun_sym_VariableStar(tom_match4_1_TomTerm)) {tom_bool_match4_1_TomTerm= true ;tom_match4_1_TomTerm_AstName=tom_get_slot_VariableStar_AstName(tom_match4_1_TomTerm); } } if (tom_bool_match4_1_TomTerm) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_match4_1_TomTerm_AstName; if ( true ) {


          set.add(tom_name);
          //stop to visit this branch (like "return false" with traversal) 
          throw new VisitFailure();
         } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_findRefVariable( java.util.HashSet  t0) { return new findRefVariable(t0); }



    /* 
     * rename variable1 into variable2
     */

    private static  jjtraveler.reflective.VisitableVisitor  tom_make_renameVariable( tom.engine.adt.tomname.types.TomName  variable1,  tom.engine.adt.tomname.types.TomName  variable2) { return tom_make_TopDown(tom_make_renameVariableOnce(variable1,variable2))
; } private static class renameVariableOnce  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   {  tom.engine.adt.tomname.types.TomName  variable1;   tom.engine.adt.tomname.types.TomName  variable2;  public renameVariableOnce(  tom.engine.adt.tomname.types.TomName  variable1 ,   tom.engine.adt.tomname.types.TomName  variable2 ) { super(tom_make_Identity() ); this.variable1=variable1; this.variable2=variable2; } public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match5_1; {boolean tom_bool_match5_1= false ; { tom.engine.adt.tomname.types.TomName  tom_match5_1_AstName= null ; if (tom_is_fun_sym_Variable(tom_match5_1)) {tom_bool_match5_1= true ;tom_match5_1_AstName=tom_get_slot_Variable_AstName(tom_match5_1); } else { if (tom_is_fun_sym_VariableStar(tom_match5_1)) {tom_bool_match5_1= true ;tom_match5_1_AstName=tom_get_slot_VariableStar_AstName(tom_match5_1); } } if (tom_bool_match5_1) { { tom.engine.adt.tomname.types.TomName  tom_astName=tom_match5_1_AstName; if ( true ) {





          if(variable1 == tom_astName) {
            return tom_var.setAstName(variable2);
          }
         } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_renameVariableOnce( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomname.types.TomName  t1) { return new renameVariableOnce(t0,t1); }




    private static boolean compare (jjtraveler.Visitable term1, jjtraveler.Visitable term2){
      return factory.remove(term1)==factory.remove(term2);
    }

     private static class RewriteSystem1  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public RewriteSystem1( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if (tom_is_fun_sym_ExpressionToTomTerm(tom_match6_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match6_1_AstExpression=tom_get_slot_ExpressionToTomTerm_AstExpression(tom_match6_1); if (tom_is_fun_sym_TomTermToExpression(tom_match6_1_AstExpression) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_AstExpression_AstTerm=tom_get_slot_TomTermToExpression_AstTerm(tom_match6_1_AstExpression); { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match6_1_AstExpression_AstTerm; if ( true ) {


          return tom_t;
         } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } public  tom.engine.adt.tomexpression.types.Expression  visit_Expression(  tom.engine.adt.tomexpression.types.Expression  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomexpression.types.Expression ) { { tom.engine.adt.tomexpression.types.Expression  tom_match7_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg); if (tom_is_fun_sym_TomTermToExpression(tom_match7_1) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1_AstTerm=tom_get_slot_TomTermToExpression_AstTerm(tom_match7_1); if (tom_is_fun_sym_ExpressionToTomTerm(tom_match7_1_AstTerm) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match7_1_AstTerm_AstExpression=tom_get_slot_ExpressionToTomTerm_AstExpression(tom_match7_1_AstTerm); { tom.engine.adt.tomexpression.types.Expression  tom_t=tom_match7_1_AstTerm_AstExpression; if ( true ) {



          return tom_t;
         } } } } } } } } return super.visit_Expression(tom__arg) ;  } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match8_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); {boolean tom_bool_match8_1= false ; { tom.engine.adt.tomterm.types.TomTerm  tom_match8_1_Variable= null ; { tom.engine.adt.tomexpression.types.Expression  tom_match8_1_Source= null ; { tom.engine.adt.tominstruction.types.Instruction  tom_match8_1_AstInstruction= null ; if (tom_is_fun_sym_LetRef(tom_match8_1)) {tom_bool_match8_1= true ;tom_match8_1_Variable=tom_get_slot_LetRef_Variable(tom_match8_1);tom_match8_1_Source=tom_get_slot_LetRef_Source(tom_match8_1);tom_match8_1_AstInstruction=tom_get_slot_LetRef_AstInstruction(tom_match8_1); } else { if (tom_is_fun_sym_LetAssign(tom_match8_1)) {tom_bool_match8_1= true ;tom_match8_1_Variable=tom_get_slot_LetAssign_Variable(tom_match8_1);tom_match8_1_Source=tom_get_slot_LetAssign_Source(tom_match8_1);tom_match8_1_AstInstruction=tom_get_slot_LetAssign_AstInstruction(tom_match8_1); } } if (tom_bool_match8_1) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match8_1_Variable; {boolean tom_bool_match8_1_Variable= false ; { tom.engine.adt.tomname.types.TomName  tom_match8_1_Variable_AstName= null ; if (tom_is_fun_sym_Variable(tom_match8_1_Variable)) {tom_bool_match8_1_Variable= true ;tom_match8_1_Variable_AstName=tom_get_slot_Variable_AstName(tom_match8_1_Variable); } else { if (tom_is_fun_sym_VariableStar(tom_match8_1_Variable)) {tom_bool_match8_1_Variable= true ;tom_match8_1_Variable_AstName=tom_get_slot_VariableStar_AstName(tom_match8_1_Variable); } } if (tom_bool_match8_1_Variable) { if (tom_is_fun_sym_Name(tom_match8_1_Variable_AstName) ||  false ) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_match8_1_Variable_AstName; { String  tom_match8_1_Variable_AstName_String=tom_get_slot_Name_String(tom_match8_1_Variable_AstName); { String  tom_tomName=tom_match8_1_Variable_AstName_String; { tom.engine.adt.tomexpression.types.Expression  tom_exp=tom_match8_1_Source; { tom.engine.adt.tominstruction.types.Instruction  tom_body=tom_match8_1_AstInstruction; if ( true ) {








          ArrayList list  = new ArrayList();
          MuTraveler.init(tom_make_computeOccurences(tom_name,list)).visit(tom_body);
          int mult = list.size();
          if(mult == 0) {
            Option orgTrack = findOriginTracking(tom_var.getOption());

            logger.log( Level.WARNING,
                TomMessage.unusedVariable.getMessage(),
                new Object[]{orgTrack.getFileName(), new Integer(orgTrack.getLine()),
                extractRealName(tom_tomName)} );
            logger.log( Level.INFO,
                TomMessage.remove.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });

            return tom_body;

          } else if(mult == 1) {
            if(expConstantInBody(tom_exp,tom_body)) {

              logger.log( Level.INFO,
                  TomMessage.inline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });

              return (Instruction) (MuTraveler.init(tom_make_inlineInstruction(tom_name,tom_exp)).visit(tom_body));
            } else {
              logger.log( Level.INFO,
                  TomMessage.noInline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
            }

          } else {
            /* do nothing: traversal() */
            logger.log( Level.INFO,
                TomMessage.doNothing.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
          }
         } } } } } } } } } } } } } } } } if (tom_is_fun_sym_Let(tom_match8_1) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match8_1_Variable=tom_get_slot_Let_Variable(tom_match8_1); { tom.engine.adt.tomexpression.types.Expression  tom_match8_1_Source=tom_get_slot_Let_Source(tom_match8_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match8_1_AstInstruction=tom_get_slot_Let_AstInstruction(tom_match8_1); if (tom_is_fun_sym_UnamedVariableStar(tom_match8_1_Variable) || tom_is_fun_sym_UnamedVariable(tom_match8_1_Variable) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_body=tom_match8_1_AstInstruction; if ( true ) {



          return tom_body; 
         } } } } } } } if (tom_is_fun_sym_Let(tom_match8_1) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match8_1_Variable=tom_get_slot_Let_Variable(tom_match8_1); { tom.engine.adt.tomexpression.types.Expression  tom_match8_1_Source=tom_get_slot_Let_Source(tom_match8_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match8_1_AstInstruction=tom_get_slot_Let_AstInstruction(tom_match8_1); { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match8_1_Variable; {boolean tom_bool_match8_1_Variable= false ; { tom.engine.adt.tomname.types.TomName  tom_match8_1_Variable_AstName= null ; if (tom_is_fun_sym_Variable(tom_match8_1_Variable)) {tom_bool_match8_1_Variable= true ;tom_match8_1_Variable_AstName=tom_get_slot_Variable_AstName(tom_match8_1_Variable); } else { if (tom_is_fun_sym_VariableStar(tom_match8_1_Variable)) {tom_bool_match8_1_Variable= true ;tom_match8_1_Variable_AstName=tom_get_slot_VariableStar_AstName(tom_match8_1_Variable); } } if (tom_bool_match8_1_Variable) { if (tom_is_fun_sym_Name(tom_match8_1_Variable_AstName) ||  false ) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_match8_1_Variable_AstName; { String  tom_match8_1_Variable_AstName_String=tom_get_slot_Name_String(tom_match8_1_Variable_AstName); { String  tom_tomName=tom_match8_1_Variable_AstName_String; { tom.engine.adt.tomexpression.types.Expression  tom_exp=tom_match8_1_Source; { tom.engine.adt.tominstruction.types.Instruction  tom_body=tom_match8_1_AstInstruction; if ( true ) {


          ArrayList list  = new ArrayList();
          MuTraveler.init(tom_make_computeOccurences(tom_name,list)).visit(tom_body);
          int mult = list.size();

          if(mult == 0) {
            Option orgTrack = findOriginTracking(tom_var.getOption());

            logger.log( Level.WARNING,
                TomMessage.unusedVariable.getMessage(),
                new Object[]{orgTrack.getFileName(), new Integer(orgTrack.getLine()),
                extractRealName(tom_tomName)} );
            logger.log( Level.INFO,
                TomMessage.remove.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });

            return tom_body; 
          } else if(mult == 1) {
            if(expConstantInBody(tom_exp,tom_body)) {
              logger.log( Level.INFO,
                  TomMessage.inline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
              return (Instruction) (MuTraveler.init(tom_make_inlineInstruction(tom_name,tom_exp)).visit(tom_body));
            } else {
              logger.log( Level.INFO,
                  TomMessage.noInline.getMessage(),
                  new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
            }
          } else {
            /* do nothing: traversal() */
            logger.log( Level.INFO,
                TomMessage.doNothing.getMessage(),
                new Object[]{ new Integer(mult), extractRealName(tom_tomName) });
          }
         } } } } } } } } } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_RewriteSystem1() { return new RewriteSystem1(); } private static class NopElimAndFlatten  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public NopElimAndFlatten( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match9_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_AbstractBlock(tom_match9_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match9_1); if (tom_is_fun_sym_concInstruction(tom_match9_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_list1=tom_match9_1_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_begin1=tom_match9_1_InstList_list1; { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_end1=tom_match9_1_InstList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match9_1_InstList_end1))) {tom_match9_1_InstList_list1=tom_match9_1_InstList_end1; { { tom.engine.adt.tominstruction.types.InstructionList  tom_C1=tom_get_slice_concInstruction(tom_match9_1_InstList_begin1,tom_match9_1_InstList_end1); { tom.engine.adt.tominstruction.types.Instruction  tom_match9_1_InstList_2=tom_get_head_concInstruction_InstructionList(tom_match9_1_InstList_list1);tom_match9_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match9_1_InstList_list1); if (tom_is_fun_sym_AbstractBlock(tom_match9_1_InstList_2) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_2_InstList=tom_get_slot_AbstractBlock_InstList(tom_match9_1_InstList_2); { tom.engine.adt.tominstruction.types.InstructionList  tom_L1=tom_match9_1_InstList_2_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_C2=tom_match9_1_InstList_list1; if ( true ) {








          logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
              "flatten");     
          return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_C1,tom_append_list_concInstruction(tom_L1,tom_append_list_concInstruction(tom_C2,tom_empty_list_concInstruction()))));
         } } } } } } }tom_match9_1_InstList_end1=tom_get_tail_concInstruction_InstructionList(tom_match9_1_InstList_end1); } }tom_match9_1_InstList_list1=tom_match9_1_InstList_begin1; } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match9_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match9_1); if (tom_is_fun_sym_concInstruction(tom_match9_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_list1=tom_match9_1_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_begin1=tom_match9_1_InstList_list1; { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_end1=tom_match9_1_InstList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match9_1_InstList_end1))) {tom_match9_1_InstList_list1=tom_match9_1_InstList_end1; { { tom.engine.adt.tominstruction.types.InstructionList  tom_C1=tom_get_slice_concInstruction(tom_match9_1_InstList_begin1,tom_match9_1_InstList_end1); { tom.engine.adt.tominstruction.types.Instruction  tom_match9_1_InstList_2=tom_get_head_concInstruction_InstructionList(tom_match9_1_InstList_list1);tom_match9_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match9_1_InstList_list1); if (tom_is_fun_sym_Nop(tom_match9_1_InstList_2) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_C2=tom_match9_1_InstList_list1; if ( true ) {


          logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
              "nop-elim");     
          return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_C1,tom_append_list_concInstruction(tom_C2,tom_empty_list_concInstruction())));
         } } } } }tom_match9_1_InstList_end1=tom_get_tail_concInstruction_InstructionList(tom_match9_1_InstList_end1); } }tom_match9_1_InstList_list1=tom_match9_1_InstList_begin1; } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match9_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match9_1); if (tom_is_fun_sym_concInstruction(tom_match9_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_list1=tom_match9_1_InstList; if (tom_is_empty_concInstruction_InstructionList(tom_match9_1_InstList_list1)) { if ( true ) {


          logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
              "abstractblock-elim1");     
          return tom_make_Nop();
         } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match9_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match9_1); if (tom_is_fun_sym_concInstruction(tom_match9_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match9_1_InstList_list1=tom_match9_1_InstList; if (!(tom_is_empty_concInstruction_InstructionList(tom_match9_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_i=tom_get_head_concInstruction_InstructionList(tom_match9_1_InstList_list1);tom_match9_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match9_1_InstList_list1); if (tom_is_empty_concInstruction_InstructionList(tom_match9_1_InstList_list1)) { if ( true ) {


          logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
              "abstractblock-elim2");     
          return tom_i;
         } } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_NopElimAndFlatten() { return new NopElimAndFlatten(); } private static class IfSwapping  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public IfSwapping( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match10_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_AbstractBlock(tom_match10_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match10_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match10_1); if (tom_is_fun_sym_concInstruction(tom_match10_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match10_1_InstList_list1=tom_match10_1_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_match10_1_InstList_begin1=tom_match10_1_InstList_list1; { tom.engine.adt.tominstruction.types.InstructionList  tom_match10_1_InstList_end1=tom_match10_1_InstList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match10_1_InstList_end1))) {tom_match10_1_InstList_list1=tom_match10_1_InstList_end1; { { tom.engine.adt.tominstruction.types.InstructionList  tom_X1=tom_get_slice_concInstruction(tom_match10_1_InstList_begin1,tom_match10_1_InstList_end1); { tom.engine.adt.tominstruction.types.Instruction  tom_match10_1_InstList_2=tom_get_head_concInstruction_InstructionList(tom_match10_1_InstList_list1);tom_match10_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match10_1_InstList_list1); if (tom_is_fun_sym_If(tom_match10_1_InstList_2) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_I1=tom_match10_1_InstList_2; { tom.engine.adt.tomexpression.types.Expression  tom_match10_1_InstList_2_Condition=tom_get_slot_If_Condition(tom_match10_1_InstList_2); { tom.engine.adt.tominstruction.types.Instruction  tom_match10_1_InstList_2_SuccesInst=tom_get_slot_If_SuccesInst(tom_match10_1_InstList_2); { tom.engine.adt.tominstruction.types.Instruction  tom_match10_1_InstList_2_FailureInst=tom_get_slot_If_FailureInst(tom_match10_1_InstList_2); { tom.engine.adt.tomexpression.types.Expression  tom_cond1=tom_match10_1_InstList_2_Condition; if (tom_is_fun_sym_Nop(tom_match10_1_InstList_2_FailureInst) ||  false ) { if (!(tom_is_empty_concInstruction_InstructionList(tom_match10_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_match10_1_InstList_3=tom_get_head_concInstruction_InstructionList(tom_match10_1_InstList_list1);tom_match10_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match10_1_InstList_list1); if (tom_is_fun_sym_If(tom_match10_1_InstList_3) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_I2=tom_match10_1_InstList_3; { tom.engine.adt.tomexpression.types.Expression  tom_match10_1_InstList_3_Condition=tom_get_slot_If_Condition(tom_match10_1_InstList_3); { tom.engine.adt.tominstruction.types.Instruction  tom_match10_1_InstList_3_SuccesInst=tom_get_slot_If_SuccesInst(tom_match10_1_InstList_3); { tom.engine.adt.tominstruction.types.Instruction  tom_match10_1_InstList_3_FailureInst=tom_get_slot_If_FailureInst(tom_match10_1_InstList_3); { tom.engine.adt.tomexpression.types.Expression  tom_cond2=tom_match10_1_InstList_3_Condition; if (tom_is_fun_sym_Nop(tom_match10_1_InstList_3_FailureInst) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_X2=tom_match10_1_InstList_list1; if ( true ) {








          String s1 = factory.prettyPrint(factory.remove(tom_cond1));
          String s2 = factory.prettyPrint(factory.remove(tom_cond2));

          if(s1.compareTo(s2) < 0) {
            Expression compatible = (Expression) tom_make_InnermostId(tom_make_NormExpr()).visit(tom_make_And(tom_cond1,tom_cond2));
            if(compatible==tom_make_FalseTL()) {
              logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                  new Object[]{"if-swapping"});     
              return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_I2,tom_cons_list_concInstruction(tom_I1,tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction())))));
            }
          }
         } } } } } } } } } } } } } } } } } } } }tom_match10_1_InstList_end1=tom_get_tail_concInstruction_InstructionList(tom_match10_1_InstList_end1); } }tom_match10_1_InstList_list1=tom_match10_1_InstList_begin1; } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_IfSwapping() { return new IfSwapping(); } private static class BlockFusion  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public BlockFusion( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match11_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_AbstractBlock(tom_match11_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match11_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match11_1); if (tom_is_fun_sym_concInstruction(tom_match11_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match11_1_InstList_list1=tom_match11_1_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_match11_1_InstList_begin1=tom_match11_1_InstList_list1; { tom.engine.adt.tominstruction.types.InstructionList  tom_match11_1_InstList_end1=tom_match11_1_InstList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match11_1_InstList_end1))) {tom_match11_1_InstList_list1=tom_match11_1_InstList_end1; { { tom.engine.adt.tominstruction.types.InstructionList  tom_X1=tom_get_slice_concInstruction(tom_match11_1_InstList_begin1,tom_match11_1_InstList_end1); { tom.engine.adt.tominstruction.types.Instruction  tom_match11_1_InstList_2=tom_get_head_concInstruction_InstructionList(tom_match11_1_InstList_list1);tom_match11_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match11_1_InstList_list1); if (tom_is_fun_sym_Let(tom_match11_1_InstList_2) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match11_1_InstList_2_Variable=tom_get_slot_Let_Variable(tom_match11_1_InstList_2); { tom.engine.adt.tomexpression.types.Expression  tom_match11_1_InstList_2_Source=tom_get_slot_Let_Source(tom_match11_1_InstList_2); { tom.engine.adt.tominstruction.types.Instruction  tom_match11_1_InstList_2_AstInstruction=tom_get_slot_Let_AstInstruction(tom_match11_1_InstList_2); { tom.engine.adt.tomterm.types.TomTerm  tom_var1=tom_match11_1_InstList_2_Variable; {boolean tom_bool_match11_1_InstList_2_Variable= false ; { tom.engine.adt.tomname.types.TomName  tom_match11_1_InstList_2_Variable_AstName= null ; if (tom_is_fun_sym_Variable(tom_match11_1_InstList_2_Variable)) {tom_bool_match11_1_InstList_2_Variable= true ;tom_match11_1_InstList_2_Variable_AstName=tom_get_slot_Variable_AstName(tom_match11_1_InstList_2_Variable); } else { if (tom_is_fun_sym_VariableStar(tom_match11_1_InstList_2_Variable)) {tom_bool_match11_1_InstList_2_Variable= true ;tom_match11_1_InstList_2_Variable_AstName=tom_get_slot_VariableStar_AstName(tom_match11_1_InstList_2_Variable); } } if (tom_bool_match11_1_InstList_2_Variable) { { tom.engine.adt.tomname.types.TomName  tom_name1=tom_match11_1_InstList_2_Variable_AstName; { tom.engine.adt.tomexpression.types.Expression  tom_term1=tom_match11_1_InstList_2_Source; { tom.engine.adt.tominstruction.types.Instruction  tom_body1=tom_match11_1_InstList_2_AstInstruction; if (!(tom_is_empty_concInstruction_InstructionList(tom_match11_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_match11_1_InstList_3=tom_get_head_concInstruction_InstructionList(tom_match11_1_InstList_list1);tom_match11_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match11_1_InstList_list1); if (tom_is_fun_sym_Let(tom_match11_1_InstList_3) ||  false ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match11_1_InstList_3_Variable=tom_get_slot_Let_Variable(tom_match11_1_InstList_3); { tom.engine.adt.tomexpression.types.Expression  tom_match11_1_InstList_3_Source=tom_get_slot_Let_Source(tom_match11_1_InstList_3); { tom.engine.adt.tominstruction.types.Instruction  tom_match11_1_InstList_3_AstInstruction=tom_get_slot_Let_AstInstruction(tom_match11_1_InstList_3); { tom.engine.adt.tomterm.types.TomTerm  tom_var2=tom_match11_1_InstList_3_Variable; {boolean tom_bool_match11_1_InstList_3_Variable= false ; { tom.engine.adt.tomname.types.TomName  tom_match11_1_InstList_3_Variable_AstName= null ; if (tom_is_fun_sym_Variable(tom_match11_1_InstList_3_Variable)) {tom_bool_match11_1_InstList_3_Variable= true ;tom_match11_1_InstList_3_Variable_AstName=tom_get_slot_Variable_AstName(tom_match11_1_InstList_3_Variable); } else { if (tom_is_fun_sym_VariableStar(tom_match11_1_InstList_3_Variable)) {tom_bool_match11_1_InstList_3_Variable= true ;tom_match11_1_InstList_3_Variable_AstName=tom_get_slot_VariableStar_AstName(tom_match11_1_InstList_3_Variable); } } if (tom_bool_match11_1_InstList_3_Variable) { { tom.engine.adt.tomname.types.TomName  tom_name2=tom_match11_1_InstList_3_Variable_AstName; { tom.engine.adt.tomexpression.types.Expression  tom_term2=tom_match11_1_InstList_3_Source; { tom.engine.adt.tominstruction.types.Instruction  tom_body2=tom_match11_1_InstList_3_AstInstruction; { tom.engine.adt.tominstruction.types.InstructionList  tom_X2=tom_match11_1_InstList_list1; if ( true ) {






          /* Fusion de 2 blocs Let contigus instanciant deux variables egales */
          if(compare(tom_term1,tom_term2)) {
            if(compare(tom_var1,tom_var2)) {
              logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                  new Object[]{"block-fusion1"});     
              return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_Let(tom_var1,tom_term1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_body1,tom_cons_list_concInstruction(tom_body2,tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
            } else {
              ArrayList list  = new ArrayList();
              tom_make_computeOccurences(tom_name1,list).visit(tom_body2);
              int mult = list.size();
              if(mult==0){
                logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                    new Object[]{"block-fusion2"});    
                Instruction newBody2 =  (Instruction)(MuTraveler.init(tom_make_renameVariable(tom_name2,tom_name1)).visit(tom_body2));
                return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_Let(tom_var1,tom_term1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_body1,tom_cons_list_concInstruction(newBody2,tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
              }
            }
          }
         } } } } } } } } } } } } } } } } } } } } } } } } } } } }tom_match11_1_InstList_end1=tom_get_tail_concInstruction_InstructionList(tom_match11_1_InstList_end1); } }tom_match11_1_InstList_list1=tom_match11_1_InstList_begin1; } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_BlockFusion() { return new BlockFusion(); } private static class IfFusion  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public IfFusion( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_AbstractBlock(tom_match12_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match12_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match12_1); if (tom_is_fun_sym_concInstruction(tom_match12_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match12_1_InstList_list1=tom_match12_1_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_match12_1_InstList_begin1=tom_match12_1_InstList_list1; { tom.engine.adt.tominstruction.types.InstructionList  tom_match12_1_InstList_end1=tom_match12_1_InstList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match12_1_InstList_end1))) {tom_match12_1_InstList_list1=tom_match12_1_InstList_end1; { { tom.engine.adt.tominstruction.types.InstructionList  tom_X1=tom_get_slice_concInstruction(tom_match12_1_InstList_begin1,tom_match12_1_InstList_end1); { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1_InstList_2=tom_get_head_concInstruction_InstructionList(tom_match12_1_InstList_list1);tom_match12_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_InstList_list1); if (tom_is_fun_sym_If(tom_match12_1_InstList_2) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match12_1_InstList_2_Condition=tom_get_slot_If_Condition(tom_match12_1_InstList_2); { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1_InstList_2_SuccesInst=tom_get_slot_If_SuccesInst(tom_match12_1_InstList_2); { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1_InstList_2_FailureInst=tom_get_slot_If_FailureInst(tom_match12_1_InstList_2); { tom.engine.adt.tomexpression.types.Expression  tom_cond1=tom_match12_1_InstList_2_Condition; { tom.engine.adt.tominstruction.types.Instruction  tom_success1=tom_match12_1_InstList_2_SuccesInst; { tom.engine.adt.tominstruction.types.Instruction  tom_failure1=tom_match12_1_InstList_2_FailureInst; if (!(tom_is_empty_concInstruction_InstructionList(tom_match12_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1_InstList_3=tom_get_head_concInstruction_InstructionList(tom_match12_1_InstList_list1);tom_match12_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_InstList_list1); if (tom_is_fun_sym_If(tom_match12_1_InstList_3) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match12_1_InstList_3_Condition=tom_get_slot_If_Condition(tom_match12_1_InstList_3); { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1_InstList_3_SuccesInst=tom_get_slot_If_SuccesInst(tom_match12_1_InstList_3); { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1_InstList_3_FailureInst=tom_get_slot_If_FailureInst(tom_match12_1_InstList_3); { tom.engine.adt.tomexpression.types.Expression  tom_cond2=tom_match12_1_InstList_3_Condition; { tom.engine.adt.tominstruction.types.Instruction  tom_success2=tom_match12_1_InstList_3_SuccesInst; { tom.engine.adt.tominstruction.types.Instruction  tom_failure2=tom_match12_1_InstList_3_FailureInst; { tom.engine.adt.tominstruction.types.InstructionList  tom_X2=tom_match12_1_InstList_list1; if ( true ) {






          /* Fusion de 2 blocs If gardes par la meme condition */
          if(compare(tom_cond1,tom_cond2)) {
            if(tom_failure1.isNop() && tom_failure2.isNop()) {
              logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                  new Object[]{"if-fusion1"});
              Instruction res = tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_If(tom_cond1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_success1,tom_cons_list_concInstruction(tom_success2,tom_empty_list_concInstruction()))),tom_make_Nop()),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
              //System.out.println(res);

              return res;
            } else {
              logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                  new Object[]{ "if-fusion2"});
              return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_If(tom_cond1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_success1,tom_cons_list_concInstruction(tom_success2,tom_empty_list_concInstruction()))),tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_failure1,tom_cons_list_concInstruction(tom_failure2,tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));
            }
          }
         } } } } } } } } } } } } } } } } } } } }tom_match12_1_InstList_end1=tom_get_tail_concInstruction_InstructionList(tom_match12_1_InstList_end1); } }tom_match12_1_InstList_list1=tom_match12_1_InstList_begin1; } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_IfFusion() { return new IfFusion(); } private static class InterBlock  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public InterBlock( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match13_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_AbstractBlock(tom_match13_1) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match13_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match13_1); if (tom_is_fun_sym_concInstruction(tom_match13_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match13_1_InstList_list1=tom_match13_1_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_match13_1_InstList_begin1=tom_match13_1_InstList_list1; { tom.engine.adt.tominstruction.types.InstructionList  tom_match13_1_InstList_end1=tom_match13_1_InstList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match13_1_InstList_end1))) {tom_match13_1_InstList_list1=tom_match13_1_InstList_end1; { { tom.engine.adt.tominstruction.types.InstructionList  tom_X1=tom_get_slice_concInstruction(tom_match13_1_InstList_begin1,tom_match13_1_InstList_end1); { tom.engine.adt.tominstruction.types.Instruction  tom_match13_1_InstList_2=tom_get_head_concInstruction_InstructionList(tom_match13_1_InstList_list1);tom_match13_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match13_1_InstList_list1); if (tom_is_fun_sym_If(tom_match13_1_InstList_2) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match13_1_InstList_2_Condition=tom_get_slot_If_Condition(tom_match13_1_InstList_2); { tom.engine.adt.tominstruction.types.Instruction  tom_match13_1_InstList_2_SuccesInst=tom_get_slot_If_SuccesInst(tom_match13_1_InstList_2); { tom.engine.adt.tominstruction.types.Instruction  tom_match13_1_InstList_2_FailureInst=tom_get_slot_If_FailureInst(tom_match13_1_InstList_2); { tom.engine.adt.tomexpression.types.Expression  tom_cond1=tom_match13_1_InstList_2_Condition; { tom.engine.adt.tominstruction.types.Instruction  tom_suc1=tom_match13_1_InstList_2_SuccesInst; { tom.engine.adt.tominstruction.types.Instruction  tom_fail1=tom_match13_1_InstList_2_FailureInst; if (!(tom_is_empty_concInstruction_InstructionList(tom_match13_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_match13_1_InstList_3=tom_get_head_concInstruction_InstructionList(tom_match13_1_InstList_list1);tom_match13_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match13_1_InstList_list1); if (tom_is_fun_sym_If(tom_match13_1_InstList_3) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match13_1_InstList_3_Condition=tom_get_slot_If_Condition(tom_match13_1_InstList_3); { tom.engine.adt.tominstruction.types.Instruction  tom_match13_1_InstList_3_SuccesInst=tom_get_slot_If_SuccesInst(tom_match13_1_InstList_3); { tom.engine.adt.tominstruction.types.Instruction  tom_match13_1_InstList_3_FailureInst=tom_get_slot_If_FailureInst(tom_match13_1_InstList_3); { tom.engine.adt.tomexpression.types.Expression  tom_cond2=tom_match13_1_InstList_3_Condition; { tom.engine.adt.tominstruction.types.Instruction  tom_suc2=tom_match13_1_InstList_3_SuccesInst; if (tom_is_fun_sym_Nop(tom_match13_1_InstList_3_FailureInst) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_X2=tom_match13_1_InstList_list1; if ( true ) {







          Expression compatible = (Expression) tom_make_InnermostId(tom_make_NormExpr()).visit(tom_make_And(tom_cond1,tom_cond2));
          if(compatible==tom_make_FalseTL()) {
            logger.log( Level.INFO, TomMessage.tomOptimizationType.getMessage(),
                new Object[]{"inter-block"});
            return tom_make_AbstractBlock(tom_append_list_concInstruction(tom_X1,tom_cons_list_concInstruction(tom_make_If(tom_cond1,tom_suc1,tom_make_AbstractBlock(tom_cons_list_concInstruction(tom_fail1,tom_cons_list_concInstruction(tom_make_If(tom_cond2,tom_suc2,tom_make_Nop()),tom_empty_list_concInstruction())))),tom_append_list_concInstruction(tom_X2,tom_empty_list_concInstruction()))));

          }  
         } } } } } } } } } } } } } } } } } } } }tom_match13_1_InstList_end1=tom_get_tail_concInstruction_InstructionList(tom_match13_1_InstList_end1); } }tom_match13_1_InstList_list1=tom_match13_1_InstList_begin1; } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_InterBlock() { return new InterBlock(); } private static class NormExpr  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public NormExpr( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tomexpression.types.Expression  visit_Expression(  tom.engine.adt.tomexpression.types.Expression  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomexpression.types.Expression ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg); if (tom_is_fun_sym_Or(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_Or_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_Or_Arg2(tom_match14_1); if (tom_is_fun_sym_TrueTL(tom_match14_1_Arg2) ||  false ) { if ( true ) {






          return tom_make_TrueTL();
         } } } } } if (tom_is_fun_sym_Or(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_Or_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_Or_Arg2(tom_match14_1); if (tom_is_fun_sym_TrueTL(tom_match14_1_Arg1) ||  false ) { if ( true ) {

          return tom_make_TrueTL();
         } } } } } if (tom_is_fun_sym_Or(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_Or_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_Or_Arg2(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_t1=tom_match14_1_Arg1; if (tom_is_fun_sym_FalseTL(tom_match14_1_Arg2) ||  false ) { if ( true ) {

          return tom_t1;
         } } } } } } if (tom_is_fun_sym_Or(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_Or_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_Or_Arg2(tom_match14_1); if (tom_is_fun_sym_FalseTL(tom_match14_1_Arg1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_t1=tom_match14_1_Arg2; if ( true ) {

          return tom_t1;
         } } } } } } if (tom_is_fun_sym_And(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_And_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_And_Arg2(tom_match14_1); if (tom_is_fun_sym_TrueTL(tom_match14_1_Arg1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_t1=tom_match14_1_Arg2; if ( true ) {

          return tom_t1;
         } } } } } } if (tom_is_fun_sym_And(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_And_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_And_Arg2(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_t1=tom_match14_1_Arg1; if (tom_is_fun_sym_TrueTL(tom_match14_1_Arg2) ||  false ) { if ( true ) {

          return tom_t1;
         } } } } } } if (tom_is_fun_sym_And(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_And_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_And_Arg2(tom_match14_1); if (tom_is_fun_sym_FalseTL(tom_match14_1_Arg1) ||  false ) { if ( true ) {

          return tom_make_FalseTL();
         } } } } } if (tom_is_fun_sym_And(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_And_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_And_Arg2(tom_match14_1); if (tom_is_fun_sym_TrueTL(tom_match14_1_Arg1) ||  false ) { if ( true ) {

          return tom_make_FalseTL();
         } } } } } if (tom_is_fun_sym_EqualTerm(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_ref=tom_match14_1; { tom.engine.adt.tomtype.types.TomType  tom_match14_1_TomType=tom_get_slot_EqualTerm_TomType(tom_match14_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match14_1_Kid1=tom_get_slot_EqualTerm_Kid1(tom_match14_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match14_1_Kid2=tom_get_slot_EqualTerm_Kid2(tom_match14_1); { tom.engine.adt.tomterm.types.TomTerm  tom_kid1=tom_match14_1_Kid1; { tom.engine.adt.tomterm.types.TomTerm  tom_kid2=tom_match14_1_Kid2; if ( true ) {

          if(compare(tom_kid1,tom_kid2)){
            return tom_make_TrueTL();
          } else {
            return tom_ref;
          }
         } } } } } } } } if (tom_is_fun_sym_And(tom_match14_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_ref=tom_match14_1; { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg1=tom_get_slot_And_Arg1(tom_match14_1); { tom.engine.adt.tomexpression.types.Expression  tom_match14_1_Arg2=tom_get_slot_And_Arg2(tom_match14_1); if (tom_is_fun_sym_EqualFunctionSymbol(tom_match14_1_Arg1) ||  false ) { { tom.engine.adt.tomtype.types.TomType  tom_match14_1_Arg1_AstType=tom_get_slot_EqualFunctionSymbol_AstType(tom_match14_1_Arg1); { tom.engine.adt.tomterm.types.TomTerm  tom_match14_1_Arg1_Exp1=tom_get_slot_EqualFunctionSymbol_Exp1(tom_match14_1_Arg1); { tom.engine.adt.tomterm.types.TomTerm  tom_match14_1_Arg1_Exp2=tom_get_slot_EqualFunctionSymbol_Exp2(tom_match14_1_Arg1); { tom.engine.adt.tomtype.types.TomType  tom_astType=tom_match14_1_Arg1_AstType; { tom.engine.adt.tomterm.types.TomTerm  tom_exp=tom_match14_1_Arg1_Exp1; { tom.engine.adt.tomterm.types.TomTerm  tom_exp1=tom_match14_1_Arg1_Exp2; if (tom_is_fun_sym_EqualFunctionSymbol(tom_match14_1_Arg2) ||  false ) { { tom.engine.adt.tomtype.types.TomType  tom_match14_1_Arg2_AstType=tom_get_slot_EqualFunctionSymbol_AstType(tom_match14_1_Arg2); { tom.engine.adt.tomterm.types.TomTerm  tom_match14_1_Arg2_Exp1=tom_get_slot_EqualFunctionSymbol_Exp1(tom_match14_1_Arg2); { tom.engine.adt.tomterm.types.TomTerm  tom_match14_1_Arg2_Exp2=tom_get_slot_EqualFunctionSymbol_Exp2(tom_match14_1_Arg2); { tom.engine.adt.tomtype.types.TomType  tom_renamedvar_astType_1=tom_match14_1_Arg2_AstType; if (tom_terms_equal_TomType(tom_astType, tom_renamedvar_astType_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_exp_1=tom_match14_1_Arg2_Exp1; if (tom_terms_equal_TomTerm(tom_exp, tom_renamedvar_exp_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_exp2=tom_match14_1_Arg2_Exp2; if ( true ) {

          TomNameList l1 = tom_exp1.getNameList();
          TomNameList l2 = tom_exp2.getNameList();
          if (tom_exp1.getNameList()==tom_exp2.getNameList()){
            return tom_make_EqualFunctionSymbol(tom_astType,tom_exp,tom_exp1);
          } else if(((concTomName)l1).length()==1 && ((concTomName)l2).length()==1) {
            return tom_make_FalseTL();
          } else {
            return tom_ref;
          }
         } } } } } } } } } } } } } } } } } } } } } } } return super.visit_Expression(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_NormExpr() { return new NormExpr(); }



  } // class TomOptimizer
