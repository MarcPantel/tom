/* Generated By:JavaCC: Do not edit this line. TomParser.java */
/*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2003  LORIA (CNRS, INPL, INRIA, UHP, U-Nancy 2)
			     Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
    
    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.parser;

import jtom.TomBase;
import java.io.*;
import java.util.*;
import jtom.adt.*;
import jtom.exception.*;
import jtom.tools.*;
import jtom.xml.Constants;
import java.lang.reflect.Constructor;
import java.lang.Throwable;

public class TomParser implements TomTask, TomParserConstants {
  private int oldPos=0;
  private int oldLine=0;
  private int includeOffSet=0;
  private Position orgTrack;
  private TomBuffer tomBuffer;
  private SymbolTable symbolTable;
  private jtom.TomEnvironment environment;
  private TomBackQuoteParser tomBackQuoteParser;
  private File importList[];
  private HashSet includedFiles;
  private String currentFile;
  private LinkedList debuggedStructureList;
  private String text="";
  private TomTask nextTask;
  private boolean debugMode = false, xmlMode = false, debugMemory = false, noWarning = false, pretty = false, eclipse = false;

   public TomParser(TomBuffer input, jtom.TomEnvironment environment, File importList[], int includeOffSet,
                                                        String fileName)  {
          this(input, environment, importList, includeOffSet, fileName, new HashSet());
  }

  public TomParser(TomBuffer input, jtom.TomEnvironment environment, File importList[], int includeOffSet,
                                                        String fileName, HashSet alreadyParsedFiles) {
    this(input);
    this.tomBuffer = input;
    this.symbolTable = environment.getSymbolTable();
    this.environment = environment;
    this.importList = importList;
    this.includeOffSet = includeOffSet;
    this.orgTrack = makePosition(1,1);
    this.currentFile = fileName;
    this.debuggedStructureList = new LinkedList();
    this.tomBackQuoteParser = new TomBackQuoteParser(environment);
    includedFiles = alreadyParsedFiles;
  }

  private void addError(TomTaskInput taskInput, String msg, String file, int line, int level) {
        TomError err = tsf().makeTomError_Error(msg,file,line,level);
        taskInput.setErrors(tsf().makeTomErrorList(err, taskInput.getErrors()));
  }

  private void testIncludedFiles(String fileName) throws TomIncludeException {
    if(!includedFiles.contains(fileName)) {
      includedFiles.add(fileName);
    } else {
      String msg = "Re-entering included file `"+fileName+"` in `"+currentFile+"` forms a cycle. Breaking the parsing...";
      System.out.println(msg);
      throw new TomIncludeException(new Throwable(msg));
    }
  }

  public void addTask(TomTask task) {
        this.nextTask = task;
  }

  public void process(TomTaskInput input) {
        try {
            debugMode = input.isDebugMode();
            debugMemory = input.isDebugMemory();
            pretty = input.isPretty();
            noWarning = input.isNoWarning();
            eclipse = input.isEclipseMode();
                long startChrono = 0;
                boolean verbose = input.isVerbose(), intermediate = input.isIntermediate();
                if(verbose) {
                        startChrono = System.currentTimeMillis();
                }
                TomTerm parsedTerm = startParsing();
                if(verbose) {
                        System.out.println("TOM parsing phase (" + (System.currentTimeMillis()-startChrono)+ " ms)");
                }
        if(intermediate) {
            Tools.generateOutput(input.getBaseInputFileName() + TomTaskInput.parsedSuffix, parsedTerm);
            Tools.generateOutput(input.getBaseInputFileName() + TomTaskInput.parsedTableSuffix, symbolTable.toTerm());
        }

        if(input.isDebugMode()) {
                        Tools.generateOutput(input.getBaseInputFileName() + TomTaskInput.debugTableSuffix, getStructTable());
                }

                // Update taskInput
                input.setTerm(parsedTerm);
        } catch (TomIncludeException e) {
          if(eclipse) {
                addError(input, e.getMessage(), currentFile,  (new Integer(getLine())).intValue(), 0);
          }
          System.out.println(e.getMessage());
          return;
        } catch (TomException e) {
          String msg = "Parsing exception catched in file `"+currentFile+"`\n"+e.getMessage();
          System.out.println(msg);
          if(eclipse) {
                addError(input, e.getMessage(), currentFile,  (new Integer(getLine())).intValue(), 0);
          }
          return;
        } catch (ParseException e) {
          String msg = "Parsing exception catched in file `"+currentFile+"`\n"+e.getMessage();
          System.out.println(msg);
          if(eclipse) {
                addError(input, e.getMessage(), currentFile,  (new Integer(getLine())).intValue(), 0);
          }
          return;
        } catch (Exception e) {
          System.out.println("Unhandled exception occurs during parsing.");
          e.printStackTrace();
          addError(input, "Exception occurs in TomParser"+e.getMessage(), currentFile, 0, 0);
          return;
        }
        if(nextTask != null) {
      nextTask.process(input);
    }
  }

  public TomTask getTask() {
        return nextTask;
  }

  public jtom.TomEnvironment environment() {
    return environment;
  }

  public TomSignatureFactory tsf() {
    return environment.getTomSignatureFactory();
  }

  public ASTFactory ast() {
    return environment.getASTFactory();
  }

  private String getLine() {
    return  (java.lang.String.valueOf(token.beginLine+includeOffSet));
  }

  private int getPos() {
    return jj_input_stream.getBeginOffset();
  }

  private String savePosAndExtract() {
    return savePosAndExtract(0);
  }

  private String savePosAndExtract(int offset) {
    String string;
    string = tomBuffer.extractBuffer(oldPos,getPos() + offset);
    oldPos = getPos() + offset;
    return string;
  }

  private TomSymbol getSymbol(String name) {
    return symbolTable.getSymbol(name);
  }

  private void putSymbol(String name, TomSymbol symbol) {
    symbolTable.putSymbol(name,symbol);
  }

  private TomType getType(String name) {
    return symbolTable.getType(name);
  }

  private void putType(String name, TomType type) {
    symbolTable.putType(name,type);
  }

  private void switchToTomMode() {
    token_source.SwitchTo(TOM);
  }

  private void switchToDefaultMode() {
    token_source.SwitchTo(DEFAULT);
    oldPos = getPos() + token.image.length();
    oldLine = Integer.valueOf( getLine() ).intValue();
    orgTrack = makePosition(token.beginLine,token.beginColumn);
  }

  public Position makePosition(int line, int column) {
    return  tsf().makePosition_Position(line+includeOffSet, column);
  }

  private TargetLanguage makeTL(String code) {
    Position newOriginTracking = makePosition(token.beginLine,token.beginColumn);
    return tsf().makeTargetLanguage_TL(code, orgTrack, newOriginTracking);
  }

  public TomStructureTable getStructTable() {
    TomList list = ast().makeList(debuggedStructureList);
    return tsf().makeTomStructureTable_StructTable(list);
  }

  private void addPreviousCode(LinkedList list) {
    String code = savePosAndExtract();
    String pureCode = code.replace('\t', ' ');
    pureCode = pureCode.replace('\n', ' ');
    if(pureCode.matches("\\s*")) {
      return;
    }
    if (code.equals("")) {return ;}
    list.add(makeTL(code));
  }

/************************************************
 * THE TOM GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public TomTerm startParsing() throws ParseException, TomException {
  String upToEOF;
  TomTerm parseTree = null;
  LinkedList blockList = new LinkedList();
    BlockList(blockList);
      upToEOF = tomBuffer.extractBuffer(oldPos,getPos());
      blockList.add(makeTL(upToEOF));
      String comment = "Generated by TOM: Do not edit this file";
      blockList.addFirst(tsf().makeTargetLanguage_Comment(comment));
      parseTree = tsf().makeTomTerm_Tom(ast().makeList(blockList));
    jj_consume_token(0);
      {if (true) return parseTree;}
    throw new Error("Missing return statement in function");
  }

  final public void BlockList(LinkedList blockList) throws ParseException, TomException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATCH:
      case RULE:
      case BACKQUOTE_TERM:
      case VARIABLE:
      case TYPE:
      case TYPETERM:
      case TYPEINT:
      case TYPEDOUBLE:
      case TYPESTRING:
      case TYPELIST:
      case TYPEARRAY:
      case INCLUDE:
      case OPERATOR:
      case OPERATOR_LIST:
      case OPERATOR_ARRAY:
      case LBRACE:
      case OTHER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATCH:
        MatchConstruct(blockList);
        break;
      case RULE:
        RuleConstruct(blockList);
        break;
      case BACKQUOTE_TERM:
        BackQuoteTerm(blockList);
        break;
      case INCLUDE:
        IncludeConstruct(blockList);
        break;
      case VARIABLE:
        LocalVariableConstruct(blockList);
        break;
      case OPERATOR:
        Operator(blockList);
        break;
      case OPERATOR_LIST:
        OperatorList(blockList);
        break;
      case OPERATOR_ARRAY:
        OperatorArray(blockList);
        break;
      case TYPE:
      case TYPETERM:
        TypeTerm(blockList);
        break;
      case TYPEINT:
        TypeInt(blockList);
        break;
      case TYPEDOUBLE:
        TypeDouble(blockList);
        break;
      case TYPESTRING:
        TypeString(blockList);
        break;
      case TYPELIST:
        TypeList(blockList);
        break;
      case TYPEARRAY:
        TypeArray(blockList);
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        BlockList(blockList);
        jj_consume_token(RBRACE);
        break;
      case OTHER:
        jj_consume_token(OTHER);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MatchConstruct(LinkedList list) throws ParseException, TomException {
  LinkedList matchArgumentsList = new LinkedList();
  LinkedList patternActionList = new LinkedList();
  LinkedList optionList = new LinkedList();
    jj_consume_token(MATCH);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      Option orgTrack = ast().makeOriginTracking("Match",getLine(), currentFile);
      optionList.add(orgTrack);
      String debugKey = orgTrack.getFileName().getString() + orgTrack.getLine();
    jj_consume_token(TOM_LPAREN);
    MatchArguments(matchArgumentsList);
    jj_consume_token(TOM_RPAREN);
    jj_consume_token(TOM_LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
      case TOM_DOUBLE:
      case TOM_STRING:
      case XML_START:
      case XML_TEXT:
      case XML_COMMENT:
      case XML_PROC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      PatternAction(patternActionList, debugKey);
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      Option option = ast().makeOption(ast().makeOptionList(optionList));
      TomTerm_Match match = tsf().makeTomTerm_Match(tsf().makeTomTerm_SubjectList( ast().makeList(matchArgumentsList)),
                                                    tsf().makeTomTerm_PatternList( ast().makeList(patternActionList)),
                                                    option);
      list.add(match);
      if (debugMode)
        debuggedStructureList.add(match);
  }

  final public void PatternAction(LinkedList list, String debugKey) throws ParseException, TomException {
  LinkedList matchPatternsList = new LinkedList();
  LinkedList listTextPattern = new LinkedList();
  LinkedList listOrgTrackPattern = new LinkedList();
  LinkedList listOfMatchPatternsList = new LinkedList();
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option option;
  Token label = null;
  text = "";
    if (jj_2_1(2)) {
      label = jj_consume_token(TOM_IDENTIFIER);
      jj_consume_token(TOM_COLON);
    } else {
      ;
    }
    option = MatchPatterns(matchPatternsList);
      listOfMatchPatternsList.add(ast().makeList(matchPatternsList));
      matchPatternsList.clear();
      listTextPattern.add(text);text = "";
      listOrgTrackPattern.add(option);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_ALTERNATIVE:
      label_3:
      while (true) {
        jj_consume_token(TOM_ALTERNATIVE);
        MatchPatterns(matchPatternsList);
      listOfMatchPatternsList.add(ast().makeList(matchPatternsList));
      matchPatternsList.clear();
      listTextPattern.add(text);text = "";
      listOrgTrackPattern.add(option);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_ALTERNATIVE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(TOM_ARROW);
      if(debugMode) {
        blockList.add(tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.patternSuccess(\""+debugKey+"\");\n"));
        if(debugMemory) {
          blockList.add(tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.emptyStack();\n"));
        }
      }
    tlCode = GoalLanguageBlock(blockList);
      blockList.add(tlCode);
      TomList patterns;
      String patternText = "";
      LinkedList optionList = new LinkedList();
      if(label != null) {
        optionList.add(tsf().makeOption_Label(tsf().makeTomName_Name(label.image)));
      }
      for(int i=0 ;  i<listOfMatchPatternsList.size() ; i++) {
        patterns = (TomList)listOfMatchPatternsList.get(i);
        patternText = (String)listTextPattern.get(i);
          //TODO solve with xmlterm
          //if (patternText == null) patternText = "";
        optionList.add(listOrgTrackPattern.get(i));
        optionList.add(tsf().makeOption_OriginalText(tsf().makeTomName_Name(patternText)));
        option = ast().makeOption(ast().makeOptionList(optionList));;
        list.add(tsf().makeTomTerm_PatternAction(
                   tsf().makeTomTerm_TermList(patterns),
                   tsf().makeTomTerm_Tom(ast().makeList(blockList)),
                   option));
      }
  }

  final public void MatchArguments(LinkedList list) throws ParseException, TomException {
    MatchArgument(list);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(TOM_COMMA);
      MatchArgument(list);
    }
  }

  final public void MatchArgument(LinkedList list) throws ParseException, TomException {
  Token type,name;
    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
        list.add(tsf().makeTomTerm_TLVar(
                   name.image,
                   tsf().makeTomType_TomTypeAlone(type.image)));
  }

  final public Option MatchPatterns(LinkedList list) throws ParseException, TomException {
  TomTerm term;
  Option orgTrack;
    term = Term();
      list.add(term);
      orgTrack = ast().makeOriginTracking("Pattern",getLine(), currentFile);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(TOM_COMMA);
                   text += "\n";
      term = Term();
                                                list.add(term);
    }
      {if (true) return orgTrack;}
    throw new Error("Missing return statement in function");
  }

  final public TomTerm PlainTerm(TomName astAnnotedName) throws ParseException, TomException {
  LinkedList list = new LinkedList();
  Token name, slotName;
  TomTerm term;
  Option option = null;
  Option annotedName = (astAnnotedName==null)?null:tsf().makeOption_TomNameToOption(astAnnotedName);
  LinkedList optionList = new LinkedList();
  TomName tomName;
  String string;
  if(annotedName!=null) { optionList.add(annotedName); }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XML_START:
    case XML_TEXT:
    case XML_COMMENT:
    case XML_PROC:
      term = XMLChild();
                        {if (true) return term;}
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_2(2)) {
        name = jj_consume_token(TOM_IDENTIFIER);
        jj_consume_token(TOM_LBRACKET);
       optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
       text += name.image +"[";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_IDENTIFIER:
          slotName = jj_consume_token(TOM_IDENTIFIER);
          jj_consume_token(TOM_EQUAL);
                                               text += slotName.image + "=";
          term = Term();
        list.add(tsf().makeTomTerm_PairSlotAppl(tsf().makeTomName_Name(slotName.image),term));
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TOM_COMMA:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_6;
            }
            jj_consume_token(TOM_COMMA);
                     text += ",";
            slotName = jj_consume_token(TOM_IDENTIFIER);
            jj_consume_token(TOM_EQUAL);
                                                 text += slotName.image + "=";
            term = Term();
          list.add(tsf().makeTomTerm_PairSlotAppl(tsf().makeTomName_Name(slotName.image),term));
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        jj_consume_token(TOM_RBRACKET);
      text += "]";
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return tsf().makeTomTerm_RecordAppl(
        option,
        tsf().makeTomName_Name(name.image),
        ast().makeList(list));}
      } else if (jj_2_3(2)) {
        name = jj_consume_token(TOM_IDENTIFIER);
        jj_consume_token(TOM_STAR);
      text += name.image+"*";
      optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return ast().makeVariableStar(option,name.image,"unknown type");}
      } else if (jj_2_4(2)) {
        name = jj_consume_token(TOM_UNDERSCORE);
        jj_consume_token(TOM_STAR);
      text += "_"+"*";
      optionList.add(ast().makeOriginTracking("_",getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return ast().makeUnamedVariableStar(option,"unknown type");}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_IDENTIFIER:
          // f(a,...)
              name = jj_consume_token(TOM_IDENTIFIER);
       optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      text += name.image;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_LPAREN:
            jj_consume_token(TOM_LPAREN);
                    text += "(";
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TOM_UNDERSCORE:
            case TOM_INTEGER:
            case TOM_IDENTIFIER:
            case TOM_DOUBLE:
            case TOM_STRING:
            case XML_START:
            case XML_TEXT:
            case XML_COMMENT:
            case XML_PROC:
              term = Term();
                                    list.add(term);
              label_7:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case TOM_COMMA:
                  ;
                  break;
                default:
                  jj_la1[9] = jj_gen;
                  break label_7;
                }
                jj_consume_token(TOM_COMMA);
                     text += " , ";
                term = Term();
                                                     list.add(term);
              }
              break;
            default:
              jj_la1[10] = jj_gen;
              ;
            }
            jj_consume_token(TOM_RPAREN);
        text += ")";
        if(list.isEmpty()) {
          // check if it is a constant
          optionList.add(tsf().makeOption_Constructor(tsf().makeTomName_Name(name.image)));
        }
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        ast().makeList(list));}
          break;
        case TOM_UNDERSCORE:
          jj_consume_token(TOM_UNDERSCORE);
      text += "_";
      optionList.add(ast().makeOriginTracking("_",getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return tsf().makeTomTerm_Placeholder(option);}
          break;
        case TOM_INTEGER:
          // integer
              name = jj_consume_token(TOM_INTEGER);
      text += name.image;
      optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      ast().makeIntegerSymbol(symbolTable,name.image,optionList);

      {if (true) return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        tsf().makeTomList());}
          break;
        case TOM_DOUBLE:
          // double
              name = jj_consume_token(TOM_DOUBLE);
      text += name.image;
      optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      ast().makeDoubleSymbol(symbolTable,name.image,optionList);

      {if (true) return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        tsf().makeTomList());}
          break;
        case TOM_STRING:
          // string
             name = jj_consume_token(TOM_STRING);
      text += name.image;
      optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      ast().makeStringSymbol(symbolTable,name.image,optionList);

      {if (true) return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        tsf().makeTomList());}
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TomTerm Term() throws ParseException, TomException {
  Token annotedName = null;
  TomTerm term;
  TomName astAnnotedName = null;
    if (jj_2_5(2)) {
      annotedName = jj_consume_token(TOM_IDENTIFIER);
      jj_consume_token(TOM_AT);
        text += annotedName.image+"@";
      astAnnotedName = tsf().makeTomName_Name(annotedName.image);
      term = PlainTerm(astAnnotedName);
      {if (true) return term;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
      case TOM_DOUBLE:
      case TOM_STRING:
      case XML_START:
      case XML_TEXT:
      case XML_COMMENT:
      case XML_PROC:
        // PlainTerm()
            term = PlainTerm(astAnnotedName);
        {if (true) return term;}
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public TomTerm TermStringIdentifier() throws ParseException, TomException {
  boolean string = false;
  LinkedList optionList = new LinkedList();
  Option option;
  Token name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_IDENTIFIER:
      name = jj_consume_token(TOM_IDENTIFIER);
      break;
    case TOM_STRING:
      name = jj_consume_token(TOM_STRING);
                                                    string = true;
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      text += name.image;
      optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      if(string) { ast().makeStringSymbol(symbolTable,name.image,optionList); }

      {if (true) return tsf().makeTomTerm_Appl(
        option,
        tsf().makeTomName_Name(name.image),
        tsf().makeTomList());}
    throw new Error("Missing return statement in function");
  }

  final public TomTerm XMLTerm() throws ParseException, TomException {
  TomTerm term;
    term = Term();
                  {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public TomTerm XMLChild() throws ParseException, TomException {
  Token name,close;
  TomTerm term;
  TomTerm arg1;
  TomTerm arg2;
  LinkedList list = new LinkedList();
  LinkedList childs = new LinkedList();
  LinkedList optionList = new LinkedList();
  String keyword = "";
  Option option;
  boolean implicit;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XML_START:
      jj_consume_token(XML_START);
      name = jj_consume_token(TOM_IDENTIFIER);
          text += "<" + name.image;
          optionList.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
      implicit = XMLAttributes(list);
       if(implicit) { optionList.add(tsf().makeOption_ImplicitXMLAttribut()); }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XML_CLOSE_SINGLETON:
        jj_consume_token(XML_CLOSE_SINGLETON);
           text += "\\>";
           option = ast().makeOption(ast().makeOptionList(optionList));
        break;
      case XML_CLOSE:
        jj_consume_token(XML_CLOSE);
                   text+=">";
        implicit = XMLChilds(childs);
        jj_consume_token(XML_START_ENDING);
        close = jj_consume_token(TOM_IDENTIFIER);
        jj_consume_token(XML_CLOSE);
          text += "</"+ close.image +">";
          if(!name.image.equals(close.image)) {
            {if (true) throw new TomException(new Throwable("Error on closing node"));}
            {if (true) return null;}
          }
          if(implicit) { optionList.add(tsf().makeOption_ImplicitXMLChild()); }
          option = ast().makeOption(ast().makeOptionList(optionList));
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          term =  tsf().makeTomTerm_XMLAppl(
            option,
            tsf().makeTomName_Name(name.image),
            ast().makeList(list),
            ast().makeList(childs));
          {if (true) return term;}
      break;
    case XML_TEXT:
      jj_consume_token(XML_TEXT);
      jj_consume_token(TOM_LPAREN);
      arg1 = TermStringIdentifier();
      jj_consume_token(TOM_RPAREN);
      keyword = Constants.TEXT_NODE;
      list.add(arg1);
      break;
    case XML_COMMENT:
      jj_consume_token(XML_COMMENT);
      jj_consume_token(TOM_LPAREN);
      arg1 = TermStringIdentifier();
      jj_consume_token(TOM_RPAREN);
      keyword = Constants.COMMENT_NODE;
      list.add(arg1);
      break;
    case XML_PROC:
      jj_consume_token(XML_PROC);
      jj_consume_token(TOM_LPAREN);
      arg1 = TermStringIdentifier();
      jj_consume_token(TOM_COMMA);
      arg2 = TermStringIdentifier();
      jj_consume_token(TOM_RPAREN);
        keyword = Constants.PROCESSING_INSTRUCTION_NODE;
        list.add(arg1);
        list.add(arg2);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      optionList.add(ast().makeOriginTracking(keyword,getLine(), currentFile));
      option = ast().makeOption(ast().makeOptionList(optionList));
      {if (true) return tsf().makeTomTerm_Appl(option,
                                    tsf().makeTomName_Name(keyword),
                                    ast().makeList(list));}
    throw new Error("Missing return statement in function");
  }

  final public boolean XMLChilds(LinkedList list) throws ParseException, TomException {
  TomTerm term;
  Token name;
  Option option;
  LinkedList optionList = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LBRACKET:
      jj_consume_token(TOM_LBRACKET);
                 text+="[";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
      case TOM_DOUBLE:
      case TOM_STRING:
      case XML_START:
      case XML_TEXT:
      case XML_COMMENT:
      case XML_PROC:
        term = XMLTerm();
                         list.add(ast().metaEncodeXMLAppl(symbolTable,term));
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_COMMA:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_8;
          }
          jj_consume_token(TOM_COMMA);
                     text += " , ";
          term = XMLTerm();
                           list.add(ast().metaEncodeXMLAppl(symbolTable,term));
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(TOM_RBRACKET);
    text +="]";
    {if (true) return false;}
      break;
    default:
      jj_la1[21] = jj_gen;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_UNDERSCORE:
        case TOM_INTEGER:
        case TOM_IDENTIFIER:
        case TOM_DOUBLE:
        case TOM_STRING:
        case XML_START:
        case XML_TEXT:
        case XML_COMMENT:
        case XML_PROC:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        term = XMLTerm();
                        list.add(ast().metaEncodeXMLAppl(symbolTable,term));
      }
     {if (true) return true;}
    }
    throw new Error("Missing return statement in function");
  }

  final public TomTerm XMLAttribute() throws ParseException, TomException {
  LinkedList list = new LinkedList();
  TomTerm term;
  TomTerm rightTerm = null;
  Option option;
  LinkedList optionList = new LinkedList();
    term = Term();
      /*
       * encode the name and put it into the table of symbols
       */
    list.add(ast().encodeXMLAppl(symbolTable,term));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_EQUAL:
      jj_consume_token(TOM_EQUAL);
                text+="=";
      term = Term();
        // we add the specif value : _
      list.add(tsf().makeTomTerm_Placeholder(ast().makeOption()));
      list.add(ast().metaEncodeXMLAppl(symbolTable,term));
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
      if(list.size() > 1) {
        optionList.add(ast().makeOriginTracking(Constants.ATTRIBUTE_NODE,getLine(), currentFile));
        option = ast().makeOption(ast().makeOptionList(optionList));
        {if (true) return tsf().makeTomTerm_Appl(option,
                                      tsf().makeTomName_Name(Constants.ATTRIBUTE_NODE),
                                      ast().makeList(list));}
      } else {
        {if (true) return term;}
      }
    throw new Error("Missing return statement in function");
  }

  final public boolean XMLAttributes(LinkedList list) throws ParseException, TomException {
  TomTerm attribute;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LBRACKET:
      jj_consume_token(TOM_LBRACKET);
                 text+="[";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
      case TOM_DOUBLE:
      case TOM_STRING:
      case XML_START:
      case XML_TEXT:
      case XML_COMMENT:
      case XML_PROC:
        attribute = XMLAttribute();
                                   list.add(attribute);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_COMMA:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_10;
          }
          jj_consume_token(TOM_COMMA);
                     text += " , ";
          attribute = XMLAttribute();
                                                                  list.add(attribute);
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(TOM_RBRACKET);
    text +="]";
     {if (true) return false;}
      break;
    default:
      jj_la1[26] = jj_gen;
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_UNDERSCORE:
        case TOM_INTEGER:
        case TOM_IDENTIFIER:
        case TOM_DOUBLE:
        case TOM_STRING:
        case XML_START:
        case XML_TEXT:
        case XML_COMMENT:
        case XML_PROC:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_11;
        }
        attribute = XMLAttribute();
                                 list.add(attribute);
      }
     {if (true) return true;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void BackQuoteTerm(LinkedList list) throws ParseException, TomException {
  TomTerm term;
  Option orgTrack;

  Token tk;
  int parenLevel = 0;
  boolean backQuoteMode = false;
  LinkedList tokenList = new LinkedList();
    jj_consume_token(BACKQUOTE_TERM);
      addPreviousCode(list);
      orgTrack = ast().makeOriginTracking("Backquote",getLine(), currentFile);
      backQuoteMode = true;
      while(backQuoteMode) {
        tk = getNextToken();
        tokenList.add(tk);
        if(tk.kind == TOM_LPAREN) {
          parenLevel++;
        } else if(tk.kind == TOM_RPAREN) {
          parenLevel--;
          if(parenLevel==0) {
            backQuoteMode = false;
          }
        }
      }

      switchToDefaultMode(); /* switch to DEFAULT mode */
        //term = ast().buildBackQuoteTerm(tokenList);
      term = tomBackQuoteParser.buildBackQuoteTerm(tokenList);
      list.add(term);
  }

  final public void LocalVariableConstruct(LinkedList list) throws ParseException, TomException {
    jj_consume_token(VARIABLE);
    addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
    switchToDefaultMode(); /* switch to DEFAULT mode */
    list.add(tsf().makeTomTerm_LocalVariable());
  }

  final public void IncludeConstruct(LinkedList list) throws ParseException, TomException, TomIncludeException {
  String fileName;
  TomTerm astTom;
  InputStream input;
  File file;
  byte inputBuffer[];
  TomParser tomParser;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
    jj_consume_token(INCLUDE);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));

    tlCode = GoalLanguageBlock(blockList);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      fileName = tlCode.getCode().trim();
      fileName = fileName.replace('/',File.separatorChar);
      try {
        file = new File(fileName);
        if(!file.exists()) {
          boolean found = false;
          for(int i=0 ; !found && i<importList.length ; i++) {
            file = new File(importList[i],fileName);
            found = file.exists();
          }
        }

          // to get the length of the file
        inputBuffer = new byte[(int)file.length()+1];
        input       = new FileInputStream(file);
        input.read(inputBuffer);

        tomParser   = new TomParser(new TomBuffer(inputBuffer),environment(),importList, 0, fileName, includedFiles);
        tomParser.testIncludedFiles(fileName);
        astTom = tomParser.startParsing();
        astTom = tsf().makeTomTerm_TomInclude(astTom.getTomList());
        list.add(astTom);
      } catch (FileNotFoundException e1) {
        String msg = "Included file `" + fileName + "` not found at line "+getLine()+" from file `"+currentFile+"`";
        System.out.println(msg);
        {if (true) throw new TomException(new Throwable(msg));}
      }  catch (java.io.IOException e2) {
        String msg = "IOException occurs reading " + fileName + " at line "+getLine();
        System.out.println(msg);
        e2.printStackTrace();
        {if (true) throw new TomException(new Throwable(msg));}
      }
  }

  final public void RuleConstruct(LinkedList list) throws ParseException, TomException {
  TomTerm lhs, rhs;
  TomTerm pattern, subject;
  TomRuleList ruleList = tsf().makeTomRuleList();
  LinkedList listOfLhs = new LinkedList();
  LinkedList condList = new LinkedList();
  LinkedList nameTypeInRule = new LinkedList();
  Option orgTrackRuleSet;
  TomName orgText;
    jj_consume_token(RULE);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      orgTrackRuleSet = ast().makeOriginTracking("Rule",getLine(), currentFile);
      text = "";
    jj_consume_token(TOM_LBRACE);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_UNDERSCORE:
      case TOM_INTEGER:
      case TOM_IDENTIFIER:
      case TOM_DOUBLE:
      case TOM_STRING:
      case XML_START:
      case XML_TEXT:
      case XML_COMMENT:
      case XML_PROC:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      lhs = Term();
                   listOfLhs.add(lhs);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_ALTERNATIVE:
        label_13:
        while (true) {
          jj_consume_token(TOM_ALTERNATIVE);
                           text += " | ";
          lhs = Term();
                                                          listOfLhs.add(lhs);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_ALTERNATIVE:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_13;
          }
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(TOM_ARROW);
                 orgText = tsf().makeTomName_Name(text);
      rhs = PlainTerm(null);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_WHERE:
      case TOM_IF:
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_WHERE:
            jj_consume_token(TOM_WHERE);
            pattern = Term();
            jj_consume_token(TOM_COLON);
            jj_consume_token(TOM_EQUAL);
            subject = Term();
        condList.add(tsf().makeTomTerm_MatchingCondition(pattern,subject));
            break;
          case TOM_IF:
            jj_consume_token(TOM_IF);
            pattern = Term();
            jj_consume_token(TOM_EQUAL);
            jj_consume_token(TOM_EQUAL);
            subject = Term();
        condList.add(tsf().makeTomTerm_EqualityCondition(pattern,subject));
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOM_WHERE:
          case TOM_IF:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_14;
          }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      Option orgTrack = ast().makeOriginTracking("Pattern",getLine(), currentFile);
      LinkedList optionList = new LinkedList();
      optionList.add(orgTrack);
      optionList.add(tsf().makeOption_OriginalText(orgText));
      for(int i=0 ; i<listOfLhs.size() ; i++) {
        TomTerm term = (TomTerm) listOfLhs.get(i);
        ruleList = (TomRuleList) ruleList.append(
          tsf().makeTomRule_RewriteRule(
            tsf().makeTomTerm_Term(term),
            tsf().makeTomTerm_Term(rhs),
            ast().makeList(condList),
            ast().makeOption(ast().makeOptionList(optionList))));
      }
      listOfLhs.clear();
      condList.clear();
      text="";
    }
    jj_consume_token(TOM_RBRACE);
    switchToDefaultMode(); /* switch to DEFAULT mode */
    TomTerm_RuleSet rule = tsf().makeTomTerm_RuleSet(ruleList, orgTrackRuleSet);
    list.add(rule);
    if (debugMode)
      debuggedStructureList.add(rule);
  }

/*
 * Operator Declaration
 *
 * in DEFAULT mode
 */
  final public void Operator(LinkedList list) throws ParseException, TomException {
  Token type, name, typeArg, slotName;
  LinkedList blockList = new LinkedList();
  TomTypeList types = tsf().makeTomTypeList();
  LinkedList options = new LinkedList();
  LinkedList nameList = new LinkedList();
  Map mapNameDecl = new HashMap();
  Set setSlotDecl = new HashSet();
  TomName astName;
  TomSymbol astSymbol;
  String stringSlotName;
  TargetLanguage tlFsym;
  Declaration attribute;
  TomType tomType;
  SlotList slotList = tsf().makeSlotList();
    jj_consume_token(OPERATOR);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));

    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
         options.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LPAREN:
      jj_consume_token(TOM_LPAREN);
        stringSlotName = "";
      if (jj_2_6(2)) {
        slotName = jj_consume_token(TOM_IDENTIFIER);
        jj_consume_token(TOM_COLON);
                                                  stringSlotName = slotName.image;
      } else {
        ;
      }
      typeArg = jj_consume_token(TOM_IDENTIFIER);
        setSlotDecl.add(stringSlotName);
        nameList.add(ast().makeName(stringSlotName));
        types = (TomTypeList) types.append(tsf().makeTomType_TomTypeAlone(typeArg.image));
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_COMMA:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_15;
        }
        jj_consume_token(TOM_COMMA);
          stringSlotName = "";
        if (jj_2_7(2)) {
          slotName = jj_consume_token(TOM_IDENTIFIER);
          jj_consume_token(TOM_COLON);
                                                    stringSlotName = slotName.image;
        } else {
          ;
        }
        typeArg = jj_consume_token(TOM_IDENTIFIER);
          if (!stringSlotName.equals("")) {
            if (!setSlotDecl.contains(stringSlotName)) {
              setSlotDecl.add(stringSlotName);
            }
            else {
              System.out.println("\nRepeated slot '"+stringSlotName+"' in operator declaration\n-- Error occured at line "+getLine());
            }
          }
          nameList.add(ast().makeName(stringSlotName));
          types = (TomTypeList) types.append(tsf().makeTomType_TomTypeAlone(typeArg.image));
      }
      jj_consume_token(TOM_RPAREN);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(TOM_LBRACE);
    tlFsym = KeywordFsym();
      astName   = tsf().makeTomName_Name(name.image);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE:
      case TOM_GET_SLOT:
      case TOM_IS_FSYM:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE:
        attribute = KeywordMake(name.image,tsf().makeTomType_TomTypeAlone(type.image),types);
                                                                                              options.add(attribute);
        break;
      case TOM_GET_SLOT:
        attribute = KeywordGetSlot(astName, type.image);
        TomName sName = attribute.getSlotName();
        if (mapNameDecl.get(sName)==null) {
          mapNameDecl.put(sName,attribute);
        }
        else {
          System.out.println("\nGetSlot declaration 'get_slot("+sName.getString()+",...)' is repeated in operator declaration\n-- Error occured at line: "+getLine());
        }
        break;
      case TOM_IS_FSYM:
        attribute = KeywordIsFsym(astName, type.image);
                                                        options.add(attribute);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */

      for(int i=nameList.size()-1; i>=0 ; i--) {
        TomName name1 = (TomName)nameList.get(i);
        PairNameDecl pair = null;
        Declaration emptyDeclaration = tsf().makeDeclaration_EmptyDeclaration();
        if(name1.isEmptyName()) {
          pair = tsf().makePairNameDecl_Slot(name1,emptyDeclaration);
        } else {
          Declaration decl = (Declaration)mapNameDecl.get(name1);
          if(decl == null) {
            decl = emptyDeclaration;
          }
          else {
            mapNameDecl.remove(name1);
          }
          pair = tsf().makePairNameDecl_Slot(name1,decl);
        }
        slotList = tsf().makeSlotList(pair,slotList);
      }
        // Test if there are still declaration in mapNameDecl
      if ( !mapNameDecl.isEmpty()) {
        if(!noWarning) {
          System.out.println("\nSome GetSlot declaration are incompatible with operator signature");
          System.out.println("*** This concerns following slotname:"+ mapNameDecl.keySet()+" \n-- Error occured at line: "+getLine());
        }
      }

      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_SymbolDecl(astName));
      putSymbol(name.image,astSymbol);
  }

  final public void OperatorList(LinkedList list) throws ParseException, TomException {
  Token type, name, typeArg;
  LinkedList blockList = new LinkedList();
  TomTypeList types = tsf().makeTomTypeList();
  SlotList slotList = tsf().makeSlotList();
  LinkedList options = new LinkedList();
  TomSymbol astSymbol;
  TomName astName;
  TargetLanguage tlFsym;
  Declaration attribute;
    jj_consume_token(OPERATOR_LIST);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));

    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
      options.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
    jj_consume_token(TOM_LPAREN);
    typeArg = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_STAR);
    jj_consume_token(TOM_RPAREN);
      types = (TomTypeList) types.append(tsf().makeTomType_TomTypeAlone(typeArg.image));
    jj_consume_token(TOM_LBRACE);
    tlFsym = KeywordFsym();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
      case TOM_MAKE_INSERT:
      case TOM_IS_FSYM:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
        attribute = KeywordMakeEmptyList(name.image);
                                                                                 options.add(attribute);
        break;
      case TOM_MAKE_INSERT:
        attribute = KeywordMakeAddList(name.image, type.image, typeArg.image);
                                                                                 options.add(attribute);
        break;
      case TOM_IS_FSYM:
        attribute = KeywordIsFsym(tsf().makeTomName_Name(name.image), type.image);
                                                                                   options.add(attribute);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astName   = tsf().makeTomName_Name(name.image);
      slotList =tsf().makeSlotList(tsf().makePairNameDecl_Slot(tsf().makeTomName_EmptyName(), tsf().makeDeclaration_EmptyDeclaration()), slotList);
      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_ListSymbolDecl(astName));
      putSymbol(name.image,astSymbol);
  }

  final public void OperatorArray(LinkedList list) throws ParseException, TomException {
  Token type, name, typeArg;
  LinkedList blockList = new LinkedList();
  TomTypeList types = tsf().makeTomTypeList();
  SlotList slotList = tsf().makeSlotList();
  LinkedList options = new LinkedList();
  TomName astName;
  TomSymbol astSymbol;
  TargetLanguage tlFsym;
  Declaration attribute;
    jj_consume_token(OPERATOR_ARRAY);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));

    type = jj_consume_token(TOM_IDENTIFIER);
    name = jj_consume_token(TOM_IDENTIFIER);
      options.add(ast().makeOriginTracking(name.image,getLine(), currentFile));
    jj_consume_token(TOM_LPAREN);
    typeArg = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_STAR);
    jj_consume_token(TOM_RPAREN);
           types = (TomTypeList) types.append(tsf().makeTomType_TomTypeAlone(typeArg.image));
    jj_consume_token(TOM_LBRACE);
    tlFsym = KeywordFsym();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
      case TOM_MAKE_APPEND:
      case TOM_IS_FSYM:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_MAKE_EMPTY:
        attribute = KeywordMakeEmptyArray(name.image, type.image);
                                                                               options.add(attribute);
        break;
      case TOM_MAKE_APPEND:
        attribute = KeywordMakeAddArray(name.image, type.image, typeArg.image);
                                                                               options.add(attribute);
        break;
      case TOM_IS_FSYM:
        attribute = KeywordIsFsym(tsf().makeTomName_Name(name.image), type.image);
                                                                                   options.add(attribute);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astName   = tsf().makeTomName_Name(name.image);
      slotList =tsf().makeSlotList(tsf().makePairNameDecl_Slot(tsf().makeTomName_EmptyName(), tsf().makeDeclaration_EmptyDeclaration()), slotList);
      astSymbol = ast().makeSymbol(name.image, type.image, types, slotList, options, tlFsym);
      list.add(tsf().makeDeclaration_ArraySymbolDecl(astName));
      putSymbol(name.image,astSymbol);
  }

/*
 * Type Declaration
 *
 * in DEFAULT mode
 */
  final public void TypeTerm(LinkedList list) throws ParseException, TomException {
  Token type;
  LinkedList blockList = new LinkedList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPETERM:
      jj_consume_token(TYPETERM);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));

      break;
    case TYPE:
      jj_consume_token(TYPE);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      if(!noWarning) {
        System.out.println("Warning: %type is obsolete");
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    type = jj_consume_token(TOM_IDENTIFIER);
      orgTrack = ast().makeOriginTracking(type.image,getLine(), currentFile);
    jj_consume_token(TOM_LBRACE);
    implement = KeywordImplement();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_SUBTERM:
      case TOM_GET_FUN_SYM:
      case TOM_CMP_FUN_SYM:
      case TOM_EQUALS:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_FUN_SYM:
        attribute = KeywordGetFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SUBTERM:
        attribute = KeywordGetSubterm(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_CMP_FUN_SYM:
        attribute = KeywordCmpFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_EQUALS:
        attribute = KeywordEquals(type.image);
                                                  blockList.add(attribute);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      name   = tsf().makeTomName_Name(type.image);
      putType(type.image,astType);
      list.add(tsf().makeDeclaration_TypeTermDecl(name, ast().makeList(blockList), orgTrack));
  }

  final public void TypeInt(LinkedList list) throws ParseException, TomException {
    jj_consume_token(TYPEINT);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      switchToDefaultMode(); /* switch to DEFAULT mode */
      ast().makeIntegerDecl(list);
  }

  final public void TypeDouble(LinkedList list) throws ParseException, TomException {
    jj_consume_token(TYPEDOUBLE);
      addPreviousCode(list);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      ast().makeDoubleDecl(list);
  }

  final public void TypeString(LinkedList list) throws ParseException, TomException {
    jj_consume_token(TYPESTRING);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));
      switchToDefaultMode(); /* switch to DEFAULT mode */
      ast().makeStringDecl(list);
  }

  final public void TypeList(LinkedList list) throws ParseException, TomException {
  Token type;
  LinkedList blockList = new LinkedList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
    jj_consume_token(TYPELIST);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));

    type = jj_consume_token(TOM_IDENTIFIER);
      orgTrack = ast().makeOriginTracking(type.image,getLine(), currentFile);
    jj_consume_token(TOM_LBRACE);
    implement = KeywordImplement();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_SUBTERM:
      case TOM_GET_FUN_SYM:
      case TOM_CMP_FUN_SYM:
      case TOM_EQUALS:
      case TOM_GET_HEAD:
      case TOM_GET_TAIL:
      case TOM_IS_EMPTY:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_FUN_SYM:
        attribute = KeywordGetFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SUBTERM:
        attribute = KeywordGetSubterm(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_CMP_FUN_SYM:
        attribute = KeywordCmpFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_EQUALS:
        attribute = KeywordEquals(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_HEAD:
        attribute = KeywordGetHead(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_TAIL:
        attribute = KeywordGetTail(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_IS_EMPTY:
        attribute = KeywordIsEmpty(type.image);
                                                  blockList.add(attribute);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      name   = tsf().makeTomName_Name(type.image);
      putType(type.image,astType);
      list.add(tsf().makeDeclaration_TypeListDecl(name, ast().makeList(blockList), orgTrack));
  }

  final public void TypeArray(LinkedList list) throws ParseException, TomException {
  Token type;
  LinkedList blockList = new LinkedList();
  TargetLanguage implement;
  Declaration attribute;
  TomType astType;
  Option orgTrack;
  TomName name;
    jj_consume_token(TYPEARRAY);
      addPreviousCode(list);//list.add(makeTL(savePosAndExtract()));

    type = jj_consume_token(TOM_IDENTIFIER);
     orgTrack = ast().makeOriginTracking(type.image,getLine(), currentFile);
    jj_consume_token(TOM_LBRACE);
    implement = KeywordImplement();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_SUBTERM:
      case TOM_GET_FUN_SYM:
      case TOM_CMP_FUN_SYM:
      case TOM_EQUALS:
      case TOM_GET_ELEMENT:
      case TOM_GET_SIZE:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOM_GET_FUN_SYM:
        attribute = KeywordGetFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SUBTERM:
        attribute = KeywordGetSubterm(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_CMP_FUN_SYM:
        attribute = KeywordCmpFunSym(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_EQUALS:
        attribute = KeywordEquals(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_ELEMENT:
        attribute = KeywordGetElement(type.image);
                                                  blockList.add(attribute);
        break;
      case TOM_GET_SIZE:
        attribute = KeywordGetSize(type.image);
                                                  blockList.add(attribute);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TOM_RBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */
      astType = ast().makeType(type.image,implement);
      putType(type.image,astType);
      name   = tsf().makeTomName_Name(type.image);
      list.add(tsf().makeDeclaration_TypeArrayDecl(name, ast().makeList(blockList), orgTrack));
  }

/*
 * in TOM mode
 */
  final public TargetLanguage GoalLanguageBlock(LinkedList blockList) throws ParseException, TomException {
    jj_consume_token(TOM_LBRACE);
      switchToDefaultMode(); /* switch to DEFAULT mode */

    BlockList(blockList);
    jj_consume_token(RBRACE);
      switchToTomMode(); /* switch to TOM mode */
      TargetLanguage tlb = makeTL(savePosAndExtract());
      {if (true) return tlb;}
    throw new Error("Missing return statement in function");
  }

//------------------------------------------------------------
  final public TargetLanguage KeywordImplement() throws ParseException, TomException {
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
    jj_consume_token(TOM_IMPLEMENT);
    tlCode = GoalLanguageBlock(blockList);
     tlCode = ast().reworkTLCode(tlCode, pretty);
     {if (true) return tlCode;}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetFunSym(String typeString) throws ParseException, TomException {
  Token name;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_FUN_SYM);
      orgTrack = ast().makeOriginTracking("get_fun_sym", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetFunctionSymbolDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetSubterm(String typeString) throws ParseException, TomException {
  Token name1, name2;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_SUBTERM);
       orgTrack = ast().makeOriginTracking("get_subterm", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_GetSubtermDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,"int"),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordCmpFunSym(String typeString) throws ParseException, TomException {
  Token name1, name2;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_CMP_FUN_SYM);
      orgTrack = ast().makeOriginTracking("cmp_fun_sym", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_CompareFunctionSymbolDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordEquals(String typeString) throws ParseException, TomException {
  Token name1, name2;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_EQUALS);
      orgTrack = ast().makeOriginTracking("equals", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_TermsEqualDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetHead(String typeString) throws ParseException, TomException {
  Token name;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_HEAD);
      orgTrack = ast().makeOriginTracking("get_head", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetHeadDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetTail(String typeString) throws ParseException, TomException {
  Token name;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_TAIL);
      orgTrack = ast().makeOriginTracking("get_tail", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetTailDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordIsEmpty(String typeString) throws ParseException, TomException {
  Token name;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_IS_EMPTY);
      orgTrack = ast().makeOriginTracking("is_empty", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_IsEmptyDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetElement(String typeString) throws ParseException, TomException {
  Token name1, name2;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_ELEMENT);
      orgTrack = ast().makeOriginTracking("get_element", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name1 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name2 = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info1 = ast().makeOriginTracking(name1.image,getLine(), currentFile);
     Option info2 = ast().makeOriginTracking(name2.image,getLine(), currentFile);
     Option option1 = ast().makeOption(info1);
     Option option2 = ast().makeOption(info2);
     {if (true) return tsf().makeDeclaration_GetElementDecl(
                           ast().makeVariable(option1,name1.image,typeString),
                           ast().makeVariable(option2,name2.image,"int"),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetSize(String typeString) throws ParseException, TomException {
  Token name;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_SIZE);
      orgTrack = ast().makeOriginTracking("get_size", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_GetSizeDecl(
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public TargetLanguage KeywordFsym() throws ParseException, TomException {
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
    jj_consume_token(TOM_FSYM);
    tlCode = GoalLanguageBlock(blockList);
     tlCode = ast().reworkTLCode(tlCode, pretty);
     {if (true) return tlCode;}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordIsFsym(TomName astName, String typeString) throws ParseException, TomException {
  Token name;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_IS_FSYM);
      orgTrack = ast().makeOriginTracking("is_fsym", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
     Option option = ast().makeOption(info);
     {if (true) return tsf().makeDeclaration_IsFsymDecl(
                           astName,
                           ast().makeVariable(option,name.image,typeString),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordGetSlot(TomName astName, String typeString) throws ParseException, TomException {
  Token name, slotName;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_GET_SLOT);
      orgTrack = ast().makeOriginTracking("get_slot", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    slotName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    name = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
       Option info = ast().makeOriginTracking(name.image,getLine(), currentFile);
       Option option = ast().makeOption(info);
       {if (true) return tsf().makeDeclaration_GetSlotDecl(
         astName,
         tsf().makeTomName_Name(slotName.image),
         ast().makeVariable(option,name.image,typeString),
         tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMake(String opname, TomType returnType, TomTypeList types) throws ParseException, TomException {
  Token typeArg;
  Token nameArg;
  LinkedList args = new LinkedList();
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  int index = 0;
  TomType type;
  TomName name;
  Option orgTrack;
  int nbTypes = types.getLength();
    jj_consume_token(TOM_MAKE);
       orgTrack = ast().makeOriginTracking("make", getLine(), currentFile);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LPAREN:
      if (jj_2_8(2)) {
        jj_consume_token(TOM_LPAREN);
        jj_consume_token(TOM_RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TOM_LPAREN:
          jj_consume_token(TOM_LPAREN);
          nameArg = jj_consume_token(TOM_IDENTIFIER);
         if( !(nbTypes > 0) ) {
           String msg = "Bad number of arguments in 'make(...)' method: more arguments found than "+nbTypes+" as expected in term definition.\n -- Error occurs at line "+getLine()+"\n Parsing aborted";
           System.out.println(msg);
           {if (true) throw new TomException(new Throwable(msg));}
         }
         type = (TomType)types.elementAt(index++);
         name = tsf().makeTomName_Name(nameArg.image);
         Option info1 = ast().makeOriginTracking(nameArg.image,getLine(), currentFile);
         Option option1 = ast().makeOption(info1);
         args.add(tsf().makeTomTerm_Variable(option1,name, type));
          label_22:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TOM_COMMA:
              ;
              break;
            default:
              jj_la1[48] = jj_gen;
              break label_22;
            }
            jj_consume_token(TOM_COMMA);
            nameArg = jj_consume_token(TOM_IDENTIFIER);
          if( index >= nbTypes ) {
            String msg = "Bad number of arguments in 'make(...)' method: more arguments found than "+nbTypes+" as expected in term definition.\n -- Error occurs at line "+getLine()+"\n Parsing aborted";
            System.out.println(msg);
            {if (true) throw new TomException(new Throwable(msg));}
          }
          type = (TomType)types.elementAt(index++);
          name = tsf().makeTomName_Name(nameArg.image);
          Option info2 = ast().makeOriginTracking(nameArg.image,getLine(), currentFile);
          Option option2 = ast().makeOption(info2);
          args.add(tsf().makeTomTerm_Variable(option2,name, type));
          }
          jj_consume_token(TOM_RPAREN);
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
         if (index<nbTypes) {
           String msg = "Bad number of arguments in 'make(...)' method: less arguments found than "+nbTypes+" as expected in term definition.\n -- Error occurs at line "+getLine()+"\n Parsing aborted";
           System.out.println(msg);
           {if (true) throw new TomException(new Throwable(msg));}
         }
    tlCode = GoalLanguageBlock(blockList);
     {if (true) return ast().makeMakeDecl(opname,returnType,args,tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeEmptyList(String name) throws ParseException, TomException {
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_EMPTY);
      orgTrack = ast().makeOriginTracking("make_empty", getLine(), currentFile);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOM_LPAREN:
      jj_consume_token(TOM_LPAREN);
      jj_consume_token(TOM_RPAREN);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    tlCode = GoalLanguageBlock(blockList);
     {if (true) return tsf().makeDeclaration_MakeEmptyList(
                           tsf().makeTomName_Name(name),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeAddList(String name, String listType, String elementType) throws ParseException, TomException {
  Token listName, elementName;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_INSERT);
      orgTrack = ast().makeOriginTracking("make_add", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    elementName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    listName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option listInfo = ast().makeOriginTracking(listName.image,getLine(), currentFile);
     Option elementInfo = ast().makeOriginTracking(elementName.image,getLine(), currentFile);
     Option listOption = ast().makeOption(listInfo);
     Option elementOption = ast().makeOption(elementInfo);
     {if (true) return tsf().makeDeclaration_MakeAddList(
       tsf().makeTomName_Name(name),
       ast().makeVariable(elementOption,elementName.image,elementType),
       ast().makeVariable(listOption,listName.image,listType),
       tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeEmptyArray(String name, String listType) throws ParseException, TomException {
  Token listName;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_EMPTY);
      orgTrack = ast().makeOriginTracking("make_empty", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    listName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option listInfo = ast().makeOriginTracking(listName.image,getLine(), currentFile);
     Option listOption = ast().makeOption(listInfo);
     {if (true) return tsf().makeDeclaration_MakeEmptyArray(
                           tsf().makeTomName_Name(name),
                           ast().makeVariable(listOption,listName.image,listType),
                           tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration KeywordMakeAddArray(String name, String listType, String elementType) throws ParseException, TomException {
  Token listName, elementName, positionName;
  LinkedList blockList = new LinkedList();
  TargetLanguage tlCode;
  Option orgTrack;
    jj_consume_token(TOM_MAKE_APPEND);
      orgTrack = ast().makeOriginTracking("make_append", getLine(), currentFile);
    jj_consume_token(TOM_LPAREN);
    elementName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_COMMA);
    listName = jj_consume_token(TOM_IDENTIFIER);
    jj_consume_token(TOM_RPAREN);
    tlCode = GoalLanguageBlock(blockList);
     Option listInfo = ast().makeOriginTracking(listName.image,getLine(), currentFile);
     Option elementInfo = ast().makeOriginTracking(elementName.image,getLine(), currentFile);
     Option listOption = ast().makeOption(listInfo);
     Option elementOption = ast().makeOption(elementInfo);
     {if (true) return tsf().makeDeclaration_MakeAddArray(
       tsf().makeTomName_Name(name),
       ast().makeVariable(elementOption,elementName.image,elementType),
       ast().makeVariable(listOption,listName.image,listType),
       tlCode, orgTrack);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(TOM_UNDERSCORE)) return true;
    if (jj_scan_token(TOM_STAR)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_scan_token(TOM_COLON)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(TOM_LPAREN)) return true;
    if (jj_scan_token(TOM_RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_scan_token(TOM_COLON)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_scan_token(TOM_AT)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_scan_token(TOM_STAR)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_scan_token(TOM_LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(TOM_IDENTIFIER)) return true;
    if (jj_scan_token(TOM_COLON)) return true;
    return false;
  }

  public TomParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4001fff6,0x4001fff6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x40000000,0x40000,0x40000,0x80000,0x80000,0x80000,0x0,0x80000,0x40000000,0x1000000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x80000,0x40000000,0x40000000,0x4000000,0x200000,0x80000,0x40000000,0x40000000,0x4000000,0x40000000,0x40000,0x40000,0x0,0x0,0x0,0x80000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x1000000,0x1000000,0x1000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0xa3800000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0xa3800000,0x0,0x80000000,0x23800000,0xa3800000,0x21000000,0x0,0x80000000,0x0,0xa3800000,0xa3800000,0x0,0x0,0x0,0xa3800000,0xa3800000,0x0,0xa3800000,0x0,0x0,0x30,0x30,0x30,0x0,0x0,0x3040,0x3040,0x2180,0x2180,0x2280,0x2280,0x0,0x3c000,0x3c000,0x1fc000,0x1fc000,0x63c000,0x63c000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x6,0x70,0x0,0x70,0x70,0x0,0x0,0x0,0x70,0x70,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public TomParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TomParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TomParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TomParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TomParser(TomParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(TomParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[103];
    for (int i = 0; i < 103; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 103; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
