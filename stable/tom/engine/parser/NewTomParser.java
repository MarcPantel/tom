// $ANTLR 2.7.2: "tomparse.g" -> "NewTomParser.java"$

    package jtom.parser;

    import java.util.*;
    import java.util.logging.*;
    import java.text.*;

    import aterm.*;
    import aterm.pure.*;
    
    import jtom.*;
    import jtom.adt.tomsignature.*;
    import jtom.adt.tomsignature.types.*;
    import jtom.exception.*;
    import jtom.tools.*;

    import jtom.xml.Constants;

    import tom.platform.*;

    import antlr.*;

import antlr.TokenBuffer;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.ANTLRException;
import antlr.LLkParser;
import antlr.Token;
import antlr.TokenStream;
import antlr.RecognitionException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.ParserSharedInputState;
import antlr.collections.impl.BitSet;

public class NewTomParser extends antlr.LLkParser       implements NewTomParserTokenTypes
 {

    //--------------------------
    /* Generated by TOM (version 3.0alpha): Do not edit this file *//* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_Expression( jtom.adt.tomsignature.types.Expression t) { return null; }public boolean tom_cmp_fun_sym_Expression(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Expression( jtom.adt.tomsignature.types.Expression t,  int  n) { return null; }public boolean tom_terms_equal_Expression(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TomTermToExpression( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isTomTermToExpression(); }public  jtom.adt.tomsignature.types.Expression tom_make_TomTermToExpression( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeExpression_TomTermToExpression(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToExpression_astTerm( jtom.adt.tomsignature.types.Expression t) { return  t.getAstTerm(); }public boolean tom_is_fun_sym_Not( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isNot(); }public  jtom.adt.tomsignature.types.Expression tom_make_Not( jtom.adt.tomsignature.types.Expression t0) { return  getTomSignatureFactory().makeExpression_Not(t0); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_Not_arg( jtom.adt.tomsignature.types.Expression t) { return  t.getArg(); }public boolean tom_is_fun_sym_And( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isAnd(); }public  jtom.adt.tomsignature.types.Expression tom_make_And( jtom.adt.tomsignature.types.Expression t0,  jtom.adt.tomsignature.types.Expression t1) { return  getTomSignatureFactory().makeExpression_And(t0, t1); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_And_arg1( jtom.adt.tomsignature.types.Expression t) { return  t.getArg1(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_And_arg2( jtom.adt.tomsignature.types.Expression t) { return  t.getArg2(); }public boolean tom_is_fun_sym_Or( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isOr(); }public  jtom.adt.tomsignature.types.Expression tom_make_Or( jtom.adt.tomsignature.types.Expression t0,  jtom.adt.tomsignature.types.Expression t1) { return  getTomSignatureFactory().makeExpression_Or(t0, t1); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_Or_arg1( jtom.adt.tomsignature.types.Expression t) { return  t.getArg1(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_Or_arg2( jtom.adt.tomsignature.types.Expression t) { return  t.getArg2(); }public boolean tom_is_fun_sym_TrueTL( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isTrueTL(); }public  jtom.adt.tomsignature.types.Expression tom_make_TrueTL() { return  getTomSignatureFactory().makeExpression_TrueTL(); }public boolean tom_is_fun_sym_FalseTL( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isFalseTL(); }public  jtom.adt.tomsignature.types.Expression tom_make_FalseTL() { return  getTomSignatureFactory().makeExpression_FalseTL(); }public boolean tom_is_fun_sym_IsEmptyList( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isIsEmptyList(); }public  jtom.adt.tomsignature.types.Expression tom_make_IsEmptyList( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeExpression_IsEmptyList(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyList_kid1( jtom.adt.tomsignature.types.Expression t) { return  t.getKid1(); }public boolean tom_is_fun_sym_IsEmptyArray( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isIsEmptyArray(); }public  jtom.adt.tomsignature.types.Expression tom_make_IsEmptyArray( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1) { return  getTomSignatureFactory().makeExpression_IsEmptyArray(t0, t1); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyArray_kid1( jtom.adt.tomsignature.types.Expression t) { return  t.getKid1(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyArray_kid2( jtom.adt.tomsignature.types.Expression t) { return  t.getKid2(); }public boolean tom_is_fun_sym_EqualFunctionSymbol( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isEqualFunctionSymbol(); }public  jtom.adt.tomsignature.types.Expression tom_make_EqualFunctionSymbol( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeExpression_EqualFunctionSymbol(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_EqualFunctionSymbol_astType( jtom.adt.tomsignature.types.Expression t) { return  t.getAstType(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp1( jtom.adt.tomsignature.types.Expression t) { return  t.getExp1(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp2( jtom.adt.tomsignature.types.Expression t) { return  t.getExp2(); }public boolean tom_is_fun_sym_EqualTerm( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isEqualTerm(); }public  jtom.adt.tomsignature.types.Expression tom_make_EqualTerm( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeExpression_EqualTerm(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_EqualTerm_tomType( jtom.adt.tomsignature.types.Expression t) { return  t.getTomType(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid1( jtom.adt.tomsignature.types.Expression t) { return  t.getKid1(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid2( jtom.adt.tomsignature.types.Expression t) { return  t.getKid2(); }public boolean tom_is_fun_sym_Cast( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isCast(); }public  jtom.adt.tomsignature.types.Expression tom_make_Cast( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.Expression t1) { return  getTomSignatureFactory().makeExpression_Cast(t0, t1); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_Cast_astType( jtom.adt.tomsignature.types.Expression t) { return  t.getAstType(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_Cast_source( jtom.adt.tomsignature.types.Expression t) { return  t.getSource(); }public boolean tom_is_fun_sym_GetSubterm( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetSubterm(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetSubterm( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomNumber t2) { return  getTomSignatureFactory().makeExpression_GetSubterm(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_GetSubterm_codomain( jtom.adt.tomsignature.types.Expression t) { return  t.getCodomain(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSubterm_variable( jtom.adt.tomsignature.types.Expression t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_GetSubterm_number( jtom.adt.tomsignature.types.Expression t) { return  t.getNumber(); }public boolean tom_is_fun_sym_IsFsym( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isIsFsym(); }public  jtom.adt.tomsignature.types.Expression tom_make_IsFsym( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1) { return  getTomSignatureFactory().makeExpression_IsFsym(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_IsFsym_astName( jtom.adt.tomsignature.types.Expression t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_IsFsym_variable( jtom.adt.tomsignature.types.Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetSlot( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetSlot(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetSlot( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomName t1,  String  t2,  jtom.adt.tomsignature.types.TomTerm t3) { return  getTomSignatureFactory().makeExpression_GetSlot(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_GetSlot_codomain( jtom.adt.tomsignature.types.Expression t) { return  t.getCodomain(); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_GetSlot_astName( jtom.adt.tomsignature.types.Expression t) { return  t.getAstName(); }public  String  tom_get_slot_GetSlot_slotNameString( jtom.adt.tomsignature.types.Expression t) { return  t.getSlotNameString(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSlot_variable( jtom.adt.tomsignature.types.Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetHead( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetHead(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetHead( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomTerm t1) { return  getTomSignatureFactory().makeExpression_GetHead(t0, t1); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_GetHead_codomain( jtom.adt.tomsignature.types.Expression t) { return  t.getCodomain(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetHead_variable( jtom.adt.tomsignature.types.Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetTail( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetTail(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetTail( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeExpression_GetTail(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetTail_variable( jtom.adt.tomsignature.types.Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_AddOne( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isAddOne(); }public  jtom.adt.tomsignature.types.Expression tom_make_AddOne( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeExpression_AddOne(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_AddOne_variable( jtom.adt.tomsignature.types.Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetSize( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetSize(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetSize( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeExpression_GetSize(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSize_variable( jtom.adt.tomsignature.types.Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetElement( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetElement(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetElement( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeExpression_GetElement(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_GetElement_codomain( jtom.adt.tomsignature.types.Expression t) { return  t.getCodomain(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetElement_kid1( jtom.adt.tomsignature.types.Expression t) { return  t.getKid1(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetElement_kid2( jtom.adt.tomsignature.types.Expression t) { return  t.getKid2(); }public boolean tom_is_fun_sym_GetSliceList( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetSliceList(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetSliceList( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeExpression_GetSliceList(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_GetSliceList_astName( jtom.adt.tomsignature.types.Expression t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableBeginAST( jtom.adt.tomsignature.types.Expression t) { return  t.getVariableBeginAST(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableEndAST( jtom.adt.tomsignature.types.Expression t) { return  t.getVariableEndAST(); }public boolean tom_is_fun_sym_GetSliceArray( jtom.adt.tomsignature.types.Expression t) { return  (t!= null) && t.isGetSliceArray(); }public  jtom.adt.tomsignature.types.Expression tom_make_GetSliceArray( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2,  jtom.adt.tomsignature.types.TomTerm t3) { return  getTomSignatureFactory().makeExpression_GetSliceArray(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_GetSliceArray_astName( jtom.adt.tomsignature.types.Expression t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_subjectListName( jtom.adt.tomsignature.types.Expression t) { return  t.getSubjectListName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_variableBeginAST( jtom.adt.tomsignature.types.Expression t) { return  t.getVariableBeginAST(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_variableEndAST( jtom.adt.tomsignature.types.Expression t) { return  t.getVariableEndAST(); }public Object tom_get_fun_sym_Instruction( jtom.adt.tomsignature.types.Instruction t) { return null; }public boolean tom_cmp_fun_sym_Instruction(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Instruction( jtom.adt.tomsignature.types.Instruction t,  int  n) { return null; }public boolean tom_terms_equal_Instruction(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TomTermToInstruction( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isTomTermToInstruction(); }public  jtom.adt.tomsignature.types.Instruction tom_make_TomTermToInstruction( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeInstruction_TomTermToInstruction(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToInstruction_tom( jtom.adt.tomsignature.types.Instruction t) { return  t.getTom(); }public boolean tom_is_fun_sym_TargetLanguageToInstruction( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isTargetLanguageToInstruction(); }public  jtom.adt.tomsignature.types.Instruction tom_make_TargetLanguageToInstruction( jtom.adt.tomsignature.types.TargetLanguage t0) { return  getTomSignatureFactory().makeInstruction_TargetLanguageToInstruction(t0); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_TargetLanguageToInstruction_tl( jtom.adt.tomsignature.types.Instruction t) { return  t.getTl(); }public boolean tom_is_fun_sym_IfThenElse( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isIfThenElse(); }public  jtom.adt.tomsignature.types.Instruction tom_make_IfThenElse( jtom.adt.tomsignature.types.Expression t0,  jtom.adt.tomsignature.types.Instruction t1,  jtom.adt.tomsignature.types.Instruction t2) { return  getTomSignatureFactory().makeInstruction_IfThenElse(t0, t1, t2); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_IfThenElse_condition( jtom.adt.tomsignature.types.Instruction t) { return  t.getCondition(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_IfThenElse_succesInst( jtom.adt.tomsignature.types.Instruction t) { return  t.getSuccesInst(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_IfThenElse_failureInst( jtom.adt.tomsignature.types.Instruction t) { return  t.getFailureInst(); }public boolean tom_is_fun_sym_DoWhile( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isDoWhile(); }public  jtom.adt.tomsignature.types.Instruction tom_make_DoWhile( jtom.adt.tomsignature.types.Instruction t0,  jtom.adt.tomsignature.types.Expression t1) { return  getTomSignatureFactory().makeInstruction_DoWhile(t0, t1); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_DoWhile_doInst( jtom.adt.tomsignature.types.Instruction t) { return  t.getDoInst(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_DoWhile_condition( jtom.adt.tomsignature.types.Instruction t) { return  t.getCondition(); }public boolean tom_is_fun_sym_WhileDo( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isWhileDo(); }public  jtom.adt.tomsignature.types.Instruction tom_make_WhileDo( jtom.adt.tomsignature.types.Expression t0,  jtom.adt.tomsignature.types.Instruction t1) { return  getTomSignatureFactory().makeInstruction_WhileDo(t0, t1); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_WhileDo_condition( jtom.adt.tomsignature.types.Instruction t) { return  t.getCondition(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_WhileDo_doInst( jtom.adt.tomsignature.types.Instruction t) { return  t.getDoInst(); }public boolean tom_is_fun_sym_Assign( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isAssign(); }public  jtom.adt.tomsignature.types.Instruction tom_make_Assign( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.Expression t1) { return  getTomSignatureFactory().makeInstruction_Assign(t0, t1); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Assign_variable( jtom.adt.tomsignature.types.Instruction t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_Assign_source( jtom.adt.tomsignature.types.Instruction t) { return  t.getSource(); }public boolean tom_is_fun_sym_Let( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isLet(); }public  jtom.adt.tomsignature.types.Instruction tom_make_Let( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.Expression t1,  jtom.adt.tomsignature.types.Instruction t2) { return  getTomSignatureFactory().makeInstruction_Let(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Let_variable( jtom.adt.tomsignature.types.Instruction t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_Let_source( jtom.adt.tomsignature.types.Instruction t) { return  t.getSource(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_Let_astInstruction( jtom.adt.tomsignature.types.Instruction t) { return  t.getAstInstruction(); }public boolean tom_is_fun_sym_LetRef( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isLetRef(); }public  jtom.adt.tomsignature.types.Instruction tom_make_LetRef( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.Expression t1,  jtom.adt.tomsignature.types.Instruction t2) { return  getTomSignatureFactory().makeInstruction_LetRef(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_LetRef_variable( jtom.adt.tomsignature.types.Instruction t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_LetRef_source( jtom.adt.tomsignature.types.Instruction t) { return  t.getSource(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_LetRef_astInstruction( jtom.adt.tomsignature.types.Instruction t) { return  t.getAstInstruction(); }public boolean tom_is_fun_sym_LetAssign( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isLetAssign(); }public  jtom.adt.tomsignature.types.Instruction tom_make_LetAssign( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.Expression t1,  jtom.adt.tomsignature.types.Instruction t2) { return  getTomSignatureFactory().makeInstruction_LetAssign(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_LetAssign_variable( jtom.adt.tomsignature.types.Instruction t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_LetAssign_source( jtom.adt.tomsignature.types.Instruction t) { return  t.getSource(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_LetAssign_astInstruction( jtom.adt.tomsignature.types.Instruction t) { return  t.getAstInstruction(); }public boolean tom_is_fun_sym_AssignMatchSubject( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isAssignMatchSubject(); }public  jtom.adt.tomsignature.types.Instruction tom_make_AssignMatchSubject( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.Expression t1) { return  getTomSignatureFactory().makeInstruction_AssignMatchSubject(t0, t1); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_AssignMatchSubject_kid1( jtom.adt.tomsignature.types.Instruction t) { return  t.getKid1(); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_AssignMatchSubject_source( jtom.adt.tomsignature.types.Instruction t) { return  t.getSource(); }public boolean tom_is_fun_sym_Return( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isReturn(); }public  jtom.adt.tomsignature.types.Instruction tom_make_Return( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeInstruction_Return(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Return_kid1( jtom.adt.tomsignature.types.Instruction t) { return  t.getKid1(); }public boolean tom_is_fun_sym_Nop( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isNop(); }public  jtom.adt.tomsignature.types.Instruction tom_make_Nop() { return  getTomSignatureFactory().makeInstruction_Nop(); }public boolean tom_is_fun_sym_AbstractBlock( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isAbstractBlock(); }public  jtom.adt.tomsignature.types.Instruction tom_make_AbstractBlock( jtom.adt.tomsignature.types.InstructionList t0) { return  getTomSignatureFactory().makeInstruction_AbstractBlock(t0); }public  jtom.adt.tomsignature.types.InstructionList tom_get_slot_AbstractBlock_instList( jtom.adt.tomsignature.types.Instruction t) { return  t.getInstList(); }public boolean tom_is_fun_sym_UnamedBlock( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isUnamedBlock(); }public  jtom.adt.tomsignature.types.Instruction tom_make_UnamedBlock( jtom.adt.tomsignature.types.InstructionList t0) { return  getTomSignatureFactory().makeInstruction_UnamedBlock(t0); }public  jtom.adt.tomsignature.types.InstructionList tom_get_slot_UnamedBlock_instList( jtom.adt.tomsignature.types.Instruction t) { return  t.getInstList(); }public boolean tom_is_fun_sym_NamedBlock( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isNamedBlock(); }public  jtom.adt.tomsignature.types.Instruction tom_make_NamedBlock( String  t0,  jtom.adt.tomsignature.types.InstructionList t1) { return  getTomSignatureFactory().makeInstruction_NamedBlock(t0, t1); }public  String  tom_get_slot_NamedBlock_blockName( jtom.adt.tomsignature.types.Instruction t) { return  t.getBlockName(); }public  jtom.adt.tomsignature.types.InstructionList tom_get_slot_NamedBlock_instList( jtom.adt.tomsignature.types.Instruction t) { return  t.getInstList(); }public boolean tom_is_fun_sym_RuleSet( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isRuleSet(); }public  jtom.adt.tomsignature.types.Instruction tom_make_RuleSet( jtom.adt.tomsignature.types.TomRuleList t0,  jtom.adt.tomsignature.types.Option t1) { return  getTomSignatureFactory().makeInstruction_RuleSet(t0, t1); }public  jtom.adt.tomsignature.types.TomRuleList tom_get_slot_RuleSet_ruleList( jtom.adt.tomsignature.types.Instruction t) { return  t.getRuleList(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_RuleSet_orgTrack( jtom.adt.tomsignature.types.Instruction t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_Match( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isMatch(); }public  jtom.adt.tomsignature.types.Instruction tom_make_Match( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.OptionList t2) { return  getTomSignatureFactory().makeInstruction_Match(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Match_subjectList( jtom.adt.tomsignature.types.Instruction t) { return  t.getSubjectList(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Match_astPatternList( jtom.adt.tomsignature.types.Instruction t) { return  t.getAstPatternList(); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_Match_option( jtom.adt.tomsignature.types.Instruction t) { return  t.getOption(); }public boolean tom_is_fun_sym_CompiledMatch( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isCompiledMatch(); }public  jtom.adt.tomsignature.types.Instruction tom_make_CompiledMatch( jtom.adt.tomsignature.types.Instruction t0,  jtom.adt.tomsignature.types.OptionList t1) { return  getTomSignatureFactory().makeInstruction_CompiledMatch(t0, t1); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_CompiledMatch_automataInst( jtom.adt.tomsignature.types.Instruction t) { return  t.getAutomataInst(); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_CompiledMatch_option( jtom.adt.tomsignature.types.Instruction t) { return  t.getOption(); }public boolean tom_is_fun_sym_CompiledPattern( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isCompiledPattern(); }public  jtom.adt.tomsignature.types.Instruction tom_make_CompiledPattern( jtom.adt.tomsignature.types.TomList t0,  jtom.adt.tomsignature.types.Instruction t1) { return  getTomSignatureFactory().makeInstruction_CompiledPattern(t0, t1); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_CompiledPattern_patternList( jtom.adt.tomsignature.types.Instruction t) { return  t.getPatternList(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_CompiledPattern_automataInst( jtom.adt.tomsignature.types.Instruction t) { return  t.getAutomataInst(); }public boolean tom_is_fun_sym_MatchingCondition( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isMatchingCondition(); }public  jtom.adt.tomsignature.types.Instruction tom_make_MatchingCondition( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1) { return  getTomSignatureFactory().makeInstruction_MatchingCondition(t0, t1); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MatchingCondition_lhs( jtom.adt.tomsignature.types.Instruction t) { return  t.getLhs(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MatchingCondition_rhs( jtom.adt.tomsignature.types.Instruction t) { return  t.getRhs(); }public boolean tom_is_fun_sym_TypedEqualityCondition( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isTypedEqualityCondition(); }public  jtom.adt.tomsignature.types.Instruction tom_make_TypedEqualityCondition( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeInstruction_TypedEqualityCondition(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_TypedEqualityCondition_tomType( jtom.adt.tomsignature.types.Instruction t) { return  t.getTomType(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_TypedEqualityCondition_lhs( jtom.adt.tomsignature.types.Instruction t) { return  t.getLhs(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_TypedEqualityCondition_rhs( jtom.adt.tomsignature.types.Instruction t) { return  t.getRhs(); }public boolean tom_is_fun_sym_EqualityCondition( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isEqualityCondition(); }public  jtom.adt.tomsignature.types.Instruction tom_make_EqualityCondition( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1) { return  getTomSignatureFactory().makeInstruction_EqualityCondition(t0, t1); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_EqualityCondition_lhs( jtom.adt.tomsignature.types.Instruction t) { return  t.getLhs(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_EqualityCondition_rhs( jtom.adt.tomsignature.types.Instruction t) { return  t.getRhs(); }public boolean tom_is_fun_sym_LocalVariable( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isLocalVariable(); }public  jtom.adt.tomsignature.types.Instruction tom_make_LocalVariable() { return  getTomSignatureFactory().makeInstruction_LocalVariable(); }public boolean tom_is_fun_sym_EndLocalVariable( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isEndLocalVariable(); }public  jtom.adt.tomsignature.types.Instruction tom_make_EndLocalVariable() { return  getTomSignatureFactory().makeInstruction_EndLocalVariable(); }public boolean tom_is_fun_sym_MakeFunctionBegin( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isMakeFunctionBegin(); }public  jtom.adt.tomsignature.types.Instruction tom_make_MakeFunctionBegin( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1) { return  getTomSignatureFactory().makeInstruction_MakeFunctionBegin(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_MakeFunctionBegin_astName( jtom.adt.tomsignature.types.Instruction t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MakeFunctionBegin_subjectListAST( jtom.adt.tomsignature.types.Instruction t) { return  t.getSubjectListAST(); }public boolean tom_is_fun_sym_MakeFunctionEnd( jtom.adt.tomsignature.types.Instruction t) { return  (t!= null) && t.isMakeFunctionEnd(); }public  jtom.adt.tomsignature.types.Instruction tom_make_MakeFunctionEnd() { return  getTomSignatureFactory().makeInstruction_MakeFunctionEnd(); }public Object tom_get_fun_sym_InstructionList( jtom.adt.tomsignature.types.InstructionList t) { return null; }public boolean tom_cmp_fun_sym_InstructionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_InstructionList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.Instruction tom_get_head_InstructionList( jtom.adt.tomsignature.types.InstructionList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.InstructionList tom_get_tail_InstructionList( jtom.adt.tomsignature.types.InstructionList l) { return l.getTail(); }public boolean tom_is_empty_InstructionList( jtom.adt.tomsignature.types.InstructionList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concInstruction( jtom.adt.tomsignature.types.InstructionList t) { return (t!= null) && t.isSortInstructionList(); }public  jtom.adt.tomsignature.types.InstructionList tom_empty_list_concInstruction() { return getTomSignatureFactory().makeInstructionList(); }public  jtom.adt.tomsignature.types.InstructionList tom_cons_list_concInstruction( jtom.adt.tomsignature.types.Instruction e,  jtom.adt.tomsignature.types.InstructionList l) { return getTomSignatureFactory().makeInstructionList(e,l); }public  jtom.adt.tomsignature.types.InstructionList tom_append_list_concInstruction( jtom.adt.tomsignature.types.InstructionList l1,  jtom.adt.tomsignature.types.InstructionList l2) {    if(tom_is_empty_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_InstructionList(( jtom.adt.tomsignature.types.InstructionList)tom_get_tail_InstructionList(l1))) {     return ( jtom.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( jtom.adt.tomsignature.types.Instruction)tom_get_head_InstructionList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( jtom.adt.tomsignature.types.Instruction)tom_get_head_InstructionList(l1),tom_append_list_concInstruction(( jtom.adt.tomsignature.types.InstructionList)tom_get_tail_InstructionList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.InstructionList tom_get_slice_concInstruction( jtom.adt.tomsignature.types.InstructionList begin,  jtom.adt.tomsignature.types.InstructionList end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( jtom.adt.tomsignature.types.InstructionList)tom_empty_list_concInstruction();    } else {      return ( jtom.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( jtom.adt.tomsignature.types.Instruction)tom_get_head_InstructionList(begin),( jtom.adt.tomsignature.types.InstructionList)tom_get_slice_concInstruction(( jtom.adt.tomsignature.types.InstructionList)tom_get_tail_InstructionList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyInstructionList( jtom.adt.tomsignature.types.InstructionList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.InstructionList tom_make_emptyInstructionList() { return getTomSignatureFactory().makeInstructionList(); }public boolean tom_is_fun_sym_manyInstructionList( jtom.adt.tomsignature.types.InstructionList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.InstructionList tom_make_manyInstructionList( jtom.adt.tomsignature.types.Instruction e,  jtom.adt.tomsignature.types.InstructionList l) { return getTomSignatureFactory().makeInstructionList(e,l); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_manyInstructionList_head( jtom.adt.tomsignature.types.InstructionList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.InstructionList tom_get_slot_manyInstructionList_tail( jtom.adt.tomsignature.types.InstructionList t) { return  t.getTail(); }public Object tom_get_fun_sym_TargetLanguage( jtom.adt.tomsignature.types.TargetLanguage t) { return null; }public boolean tom_cmp_fun_sym_TargetLanguage(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TargetLanguage( jtom.adt.tomsignature.types.TargetLanguage t,  int  n) { return null; }public boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TL( jtom.adt.tomsignature.types.TargetLanguage t) { return  (t!= null) && t.isTL(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_make_TL( String  t0,  jtom.adt.tomsignature.types.Position t1,  jtom.adt.tomsignature.types.Position t2) { return  getTomSignatureFactory().makeTargetLanguage_TL(t0, t1, t2); }public  String  tom_get_slot_TL_code( jtom.adt.tomsignature.types.TargetLanguage t) { return  t.getCode(); }public  jtom.adt.tomsignature.types.Position tom_get_slot_TL_start( jtom.adt.tomsignature.types.TargetLanguage t) { return  t.getStart(); }public  jtom.adt.tomsignature.types.Position tom_get_slot_TL_end( jtom.adt.tomsignature.types.TargetLanguage t) { return  t.getEnd(); }public boolean tom_is_fun_sym_ITL( jtom.adt.tomsignature.types.TargetLanguage t) { return  (t!= null) && t.isITL(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_make_ITL( String  t0) { return  getTomSignatureFactory().makeTargetLanguage_ITL(t0); }public  String  tom_get_slot_ITL_code( jtom.adt.tomsignature.types.TargetLanguage t) { return  t.getCode(); }public boolean tom_is_fun_sym_Comment( jtom.adt.tomsignature.types.TargetLanguage t) { return  (t!= null) && t.isComment(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_make_Comment( String  t0) { return  getTomSignatureFactory().makeTargetLanguage_Comment(t0); }public  String  tom_get_slot_Comment_code( jtom.adt.tomsignature.types.TargetLanguage t) { return  t.getCode(); }public Object tom_get_fun_sym_Position( jtom.adt.tomsignature.types.Position t) { return null; }public boolean tom_cmp_fun_sym_Position(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Position( jtom.adt.tomsignature.types.Position t,  int  n) { return null; }public boolean tom_terms_equal_Position(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TextPosition( jtom.adt.tomsignature.types.Position t) { return  (t!= null) && t.isTextPosition(); }public  jtom.adt.tomsignature.types.Position tom_make_TextPosition( int  t0,  int  t1) { return  getTomSignatureFactory().makePosition_TextPosition(t0, t1); }public  int  tom_get_slot_TextPosition_line( jtom.adt.tomsignature.types.Position t) { return  t.getLine(); }public  int  tom_get_slot_TextPosition_column( jtom.adt.tomsignature.types.Position t) { return  t.getColumn(); }public Object tom_get_fun_sym_TomType( jtom.adt.tomsignature.types.TomType t) { return null; }public boolean tom_cmp_fun_sym_TomType(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomType( jtom.adt.tomsignature.types.TomType t,  int  n) { return null; }public boolean tom_terms_equal_TomType(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Type( jtom.adt.tomsignature.types.TomType t) { return  (t!= null) && t.isType(); }public  jtom.adt.tomsignature.types.TomType tom_make_Type( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomType t1) { return  getTomSignatureFactory().makeTomType_Type(t0, t1); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_Type_tomType( jtom.adt.tomsignature.types.TomType t) { return  t.getTomType(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_Type_tlType( jtom.adt.tomsignature.types.TomType t) { return  t.getTlType(); }public boolean tom_is_fun_sym_TypesToType( jtom.adt.tomsignature.types.TomType t) { return  (t!= null) && t.isTypesToType(); }public  jtom.adt.tomsignature.types.TomType tom_make_TypesToType( jtom.adt.tomsignature.types.TomTypeList t0,  jtom.adt.tomsignature.types.TomType t1) { return  getTomSignatureFactory().makeTomType_TypesToType(t0, t1); }public  jtom.adt.tomsignature.types.TomTypeList tom_get_slot_TypesToType_domain( jtom.adt.tomsignature.types.TomType t) { return  t.getDomain(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_TypesToType_codomain( jtom.adt.tomsignature.types.TomType t) { return  t.getCodomain(); }public boolean tom_is_fun_sym_ASTTomType( jtom.adt.tomsignature.types.TomType t) { return  (t!= null) && t.isASTTomType(); }public  jtom.adt.tomsignature.types.TomType tom_make_ASTTomType( String  t0) { return  getTomSignatureFactory().makeTomType_ASTTomType(t0); }public  String  tom_get_slot_ASTTomType_string( jtom.adt.tomsignature.types.TomType t) { return  t.getString(); }public boolean tom_is_fun_sym_TomTypeAlone( jtom.adt.tomsignature.types.TomType t) { return  (t!= null) && t.isTomTypeAlone(); }public  jtom.adt.tomsignature.types.TomType tom_make_TomTypeAlone( String  t0) { return  getTomSignatureFactory().makeTomType_TomTypeAlone(t0); }public  String  tom_get_slot_TomTypeAlone_string( jtom.adt.tomsignature.types.TomType t) { return  t.getString(); }public boolean tom_is_fun_sym_TLType( jtom.adt.tomsignature.types.TomType t) { return  (t!= null) && t.isTLType(); }public  jtom.adt.tomsignature.types.TomType tom_make_TLType( jtom.adt.tomsignature.types.TargetLanguage t0) { return  getTomSignatureFactory().makeTomType_TLType(t0); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_TLType_tl( jtom.adt.tomsignature.types.TomType t) { return  t.getTl(); }public boolean tom_is_fun_sym_EmptyType( jtom.adt.tomsignature.types.TomType t) { return  (t!= null) && t.isEmptyType(); }public  jtom.adt.tomsignature.types.TomType tom_make_EmptyType() { return  getTomSignatureFactory().makeTomType_EmptyType(); }public Object tom_get_fun_sym_TomRule( jtom.adt.tomsignature.types.TomRule t) { return null; }public boolean tom_cmp_fun_sym_TomRule(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomRule( jtom.adt.tomsignature.types.TomRule t,  int  n) { return null; }public boolean tom_terms_equal_TomRule(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_RewriteRule( jtom.adt.tomsignature.types.TomRule t) { return  (t!= null) && t.isRewriteRule(); }public  jtom.adt.tomsignature.types.TomRule tom_make_RewriteRule( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.InstructionList t2,  jtom.adt.tomsignature.types.OptionList t3) { return  getTomSignatureFactory().makeTomRule_RewriteRule(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_lhs( jtom.adt.tomsignature.types.TomRule t) { return  t.getLhs(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_rhs( jtom.adt.tomsignature.types.TomRule t) { return  t.getRhs(); }public  jtom.adt.tomsignature.types.InstructionList tom_get_slot_RewriteRule_condList( jtom.adt.tomsignature.types.TomRule t) { return  t.getCondList(); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_RewriteRule_option( jtom.adt.tomsignature.types.TomRule t) { return  t.getOption(); }public Object tom_get_fun_sym_TomSymbol( jtom.adt.tomsignature.types.TomSymbol t) { return null; }public boolean tom_cmp_fun_sym_TomSymbol(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomSymbol( jtom.adt.tomsignature.types.TomSymbol t,  int  n) { return null; }public boolean tom_terms_equal_TomSymbol(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_emptySymbol( jtom.adt.tomsignature.types.TomSymbol t) { return  (t!= null) && t.isEmptySymbol(); }public  jtom.adt.tomsignature.types.TomSymbol tom_make_emptySymbol() { return  getTomSignatureFactory().makeTomSymbol_EmptySymbol(); }public boolean tom_is_fun_sym_Symbol( jtom.adt.tomsignature.types.TomSymbol t) { return  (t!= null) && t.isSymbol(); }public  jtom.adt.tomsignature.types.TomSymbol tom_make_Symbol( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomType t1,  jtom.adt.tomsignature.types.SlotList t2,  jtom.adt.tomsignature.types.OptionList t3,  jtom.adt.tomsignature.types.TargetLanguage t4) { return  getTomSignatureFactory().makeTomSymbol_Symbol(t0, t1, t2, t3, t4); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_Symbol_astName( jtom.adt.tomsignature.types.TomSymbol t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_Symbol_typesToType( jtom.adt.tomsignature.types.TomSymbol t) { return  t.getTypesToType(); }public  jtom.adt.tomsignature.types.SlotList tom_get_slot_Symbol_slotList( jtom.adt.tomsignature.types.TomSymbol t) { return  t.getSlotList(); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_Symbol_option( jtom.adt.tomsignature.types.TomSymbol t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_Symbol_tlCode( jtom.adt.tomsignature.types.TomSymbol t) { return  t.getTlCode(); }public Object tom_get_fun_sym_PairNameDecl( jtom.adt.tomsignature.types.PairNameDecl t) { return null; }public boolean tom_cmp_fun_sym_PairNameDecl(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PairNameDecl( jtom.adt.tomsignature.types.PairNameDecl t,  int  n) { return null; }public boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Slot( jtom.adt.tomsignature.types.PairNameDecl t) { return  (t!= null) && t.isSlot(); }public  jtom.adt.tomsignature.types.PairNameDecl tom_make_Slot( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.Declaration t1) { return  getTomSignatureFactory().makePairNameDecl_Slot(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_Slot_slotName( jtom.adt.tomsignature.types.PairNameDecl t) { return  t.getSlotName(); }public  jtom.adt.tomsignature.types.Declaration tom_get_slot_Slot_slotDecl( jtom.adt.tomsignature.types.PairNameDecl t) { return  t.getSlotDecl(); }public Object tom_get_fun_sym_TomSymbolTable( jtom.adt.tomsignature.types.TomSymbolTable t) { return null; }public boolean tom_cmp_fun_sym_TomSymbolTable(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomSymbolTable( jtom.adt.tomsignature.types.TomSymbolTable t,  int  n) { return null; }public boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Table( jtom.adt.tomsignature.types.TomSymbolTable t) { return  (t!= null) && t.isTable(); }public  jtom.adt.tomsignature.types.TomSymbolTable tom_make_Table( jtom.adt.tomsignature.types.TomEntryList t0) { return  getTomSignatureFactory().makeTomSymbolTable_Table(t0); }public  jtom.adt.tomsignature.types.TomEntryList tom_get_slot_Table_entryList( jtom.adt.tomsignature.types.TomSymbolTable t) { return  t.getEntryList(); }public Object tom_get_fun_sym_TomEntry( jtom.adt.tomsignature.types.TomEntry t) { return null; }public boolean tom_cmp_fun_sym_TomEntry(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomEntry( jtom.adt.tomsignature.types.TomEntry t,  int  n) { return null; }public boolean tom_terms_equal_TomEntry(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Entry( jtom.adt.tomsignature.types.TomEntry t) { return  (t!= null) && t.isEntry(); }public  jtom.adt.tomsignature.types.TomEntry tom_make_Entry( String  t0,  jtom.adt.tomsignature.types.TomSymbol t1) { return  getTomSignatureFactory().makeTomEntry_Entry(t0, t1); }public  String  tom_get_slot_Entry_strName( jtom.adt.tomsignature.types.TomEntry t) { return  t.getStrName(); }public  jtom.adt.tomsignature.types.TomSymbol tom_get_slot_Entry_astSymbol( jtom.adt.tomsignature.types.TomEntry t) { return  t.getAstSymbol(); }public Object tom_get_fun_sym_TomStructureTable( jtom.adt.tomsignature.types.TomStructureTable t) { return null; }public boolean tom_cmp_fun_sym_TomStructureTable(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomStructureTable( jtom.adt.tomsignature.types.TomStructureTable t,  int  n) { return null; }public boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_StructTable( jtom.adt.tomsignature.types.TomStructureTable t) { return  (t!= null) && t.isStructTable(); }public  jtom.adt.tomsignature.types.TomStructureTable tom_make_StructTable( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomStructureTable_StructTable(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_StructTable_structList( jtom.adt.tomsignature.types.TomStructureTable t) { return  t.getStructList(); }public Object tom_get_fun_sym_TomRuleList( jtom.adt.tomsignature.types.TomRuleList t) { return null; }public boolean tom_cmp_fun_sym_TomRuleList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomRuleList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomRule tom_get_head_TomRuleList( jtom.adt.tomsignature.types.TomRuleList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.TomRuleList tom_get_tail_TomRuleList( jtom.adt.tomsignature.types.TomRuleList l) { return l.getTail(); }public boolean tom_is_empty_TomRuleList( jtom.adt.tomsignature.types.TomRuleList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomRule( jtom.adt.tomsignature.types.TomRuleList t) { return (t!= null) && t.isSortTomRuleList(); }public  jtom.adt.tomsignature.types.TomRuleList tom_empty_list_concTomRule() { return getTomSignatureFactory().makeTomRuleList(); }public  jtom.adt.tomsignature.types.TomRuleList tom_cons_list_concTomRule( jtom.adt.tomsignature.types.TomRule e,  jtom.adt.tomsignature.types.TomRuleList l) { return getTomSignatureFactory().makeTomRuleList(e,l); }public  jtom.adt.tomsignature.types.TomRuleList tom_append_list_concTomRule( jtom.adt.tomsignature.types.TomRuleList l1,  jtom.adt.tomsignature.types.TomRuleList l2) {    if(tom_is_empty_TomRuleList(l1)) {     return l2;    } else if(tom_is_empty_TomRuleList(l2)) {     return l1;    } else if(tom_is_empty_TomRuleList(( jtom.adt.tomsignature.types.TomRuleList)tom_get_tail_TomRuleList(l1))) {     return ( jtom.adt.tomsignature.types.TomRuleList)tom_cons_list_concTomRule(( jtom.adt.tomsignature.types.TomRule)tom_get_head_TomRuleList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.TomRuleList)tom_cons_list_concTomRule(( jtom.adt.tomsignature.types.TomRule)tom_get_head_TomRuleList(l1),tom_append_list_concTomRule(( jtom.adt.tomsignature.types.TomRuleList)tom_get_tail_TomRuleList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.TomRuleList tom_get_slice_concTomRule( jtom.adt.tomsignature.types.TomRuleList begin,  jtom.adt.tomsignature.types.TomRuleList end) {    if(tom_terms_equal_TomRuleList(begin,end)) {      return ( jtom.adt.tomsignature.types.TomRuleList)tom_empty_list_concTomRule();    } else {      return ( jtom.adt.tomsignature.types.TomRuleList)tom_cons_list_concTomRule(( jtom.adt.tomsignature.types.TomRule)tom_get_head_TomRuleList(begin),( jtom.adt.tomsignature.types.TomRuleList)tom_get_slice_concTomRule(( jtom.adt.tomsignature.types.TomRuleList)tom_get_tail_TomRuleList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomRuleList( jtom.adt.tomsignature.types.TomRuleList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.TomRuleList tom_make_emptyTomRuleList() { return getTomSignatureFactory().makeTomRuleList(); }public boolean tom_is_fun_sym_manyTomRuleList( jtom.adt.tomsignature.types.TomRuleList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.TomRuleList tom_make_manyTomRuleList( jtom.adt.tomsignature.types.TomRule e,  jtom.adt.tomsignature.types.TomRuleList l) { return getTomSignatureFactory().makeTomRuleList(e,l); }public  jtom.adt.tomsignature.types.TomRule tom_get_slot_manyTomRuleList_head( jtom.adt.tomsignature.types.TomRuleList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.TomRuleList tom_get_slot_manyTomRuleList_tail( jtom.adt.tomsignature.types.TomRuleList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomTypeList( jtom.adt.tomsignature.types.TomTypeList t) { return null; }public boolean tom_cmp_fun_sym_TomTypeList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomTypeList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomType tom_get_head_TomTypeList( jtom.adt.tomsignature.types.TomTypeList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.TomTypeList tom_get_tail_TomTypeList( jtom.adt.tomsignature.types.TomTypeList l) { return l.getTail(); }public boolean tom_is_empty_TomTypeList( jtom.adt.tomsignature.types.TomTypeList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomType( jtom.adt.tomsignature.types.TomTypeList t) { return (t!= null) && t.isSortTomTypeList(); }public  jtom.adt.tomsignature.types.TomTypeList tom_empty_list_concTomType() { return getTomSignatureFactory().makeTomTypeList(); }public  jtom.adt.tomsignature.types.TomTypeList tom_cons_list_concTomType( jtom.adt.tomsignature.types.TomType e,  jtom.adt.tomsignature.types.TomTypeList l) { return getTomSignatureFactory().makeTomTypeList(e,l); }public  jtom.adt.tomsignature.types.TomTypeList tom_append_list_concTomType( jtom.adt.tomsignature.types.TomTypeList l1,  jtom.adt.tomsignature.types.TomTypeList l2) {    if(tom_is_empty_TomTypeList(l1)) {     return l2;    } else if(tom_is_empty_TomTypeList(l2)) {     return l1;    } else if(tom_is_empty_TomTypeList(( jtom.adt.tomsignature.types.TomTypeList)tom_get_tail_TomTypeList(l1))) {     return ( jtom.adt.tomsignature.types.TomTypeList)tom_cons_list_concTomType(( jtom.adt.tomsignature.types.TomType)tom_get_head_TomTypeList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.TomTypeList)tom_cons_list_concTomType(( jtom.adt.tomsignature.types.TomType)tom_get_head_TomTypeList(l1),tom_append_list_concTomType(( jtom.adt.tomsignature.types.TomTypeList)tom_get_tail_TomTypeList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.TomTypeList tom_get_slice_concTomType( jtom.adt.tomsignature.types.TomTypeList begin,  jtom.adt.tomsignature.types.TomTypeList end) {    if(tom_terms_equal_TomTypeList(begin,end)) {      return ( jtom.adt.tomsignature.types.TomTypeList)tom_empty_list_concTomType();    } else {      return ( jtom.adt.tomsignature.types.TomTypeList)tom_cons_list_concTomType(( jtom.adt.tomsignature.types.TomType)tom_get_head_TomTypeList(begin),( jtom.adt.tomsignature.types.TomTypeList)tom_get_slice_concTomType(( jtom.adt.tomsignature.types.TomTypeList)tom_get_tail_TomTypeList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomTypeList( jtom.adt.tomsignature.types.TomTypeList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.TomTypeList tom_make_emptyTomTypeList() { return getTomSignatureFactory().makeTomTypeList(); }public boolean tom_is_fun_sym_manyTomTypeList( jtom.adt.tomsignature.types.TomTypeList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.TomTypeList tom_make_manyTomTypeList( jtom.adt.tomsignature.types.TomType e,  jtom.adt.tomsignature.types.TomTypeList l) { return getTomSignatureFactory().makeTomTypeList(e,l); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_manyTomTypeList_head( jtom.adt.tomsignature.types.TomTypeList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.TomTypeList tom_get_slot_manyTomTypeList_tail( jtom.adt.tomsignature.types.TomTypeList t) { return  t.getTail(); }public Object tom_get_fun_sym_SlotList( jtom.adt.tomsignature.types.SlotList t) { return null; }public boolean tom_cmp_fun_sym_SlotList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_SlotList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.PairNameDecl tom_get_head_SlotList( jtom.adt.tomsignature.types.SlotList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.SlotList tom_get_tail_SlotList( jtom.adt.tomsignature.types.SlotList l) { return l.getTail(); }public boolean tom_is_empty_SlotList( jtom.adt.tomsignature.types.SlotList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concPairNameDecl( jtom.adt.tomsignature.types.SlotList t) { return (t!= null) && t.isSortSlotList(); }public  jtom.adt.tomsignature.types.SlotList tom_empty_list_concPairNameDecl() { return getTomSignatureFactory().makeSlotList(); }public  jtom.adt.tomsignature.types.SlotList tom_cons_list_concPairNameDecl( jtom.adt.tomsignature.types.PairNameDecl e,  jtom.adt.tomsignature.types.SlotList l) { return getTomSignatureFactory().makeSlotList(e,l); }public  jtom.adt.tomsignature.types.SlotList tom_append_list_concPairNameDecl( jtom.adt.tomsignature.types.SlotList l1,  jtom.adt.tomsignature.types.SlotList l2) {    if(tom_is_empty_SlotList(l1)) {     return l2;    } else if(tom_is_empty_SlotList(l2)) {     return l1;    } else if(tom_is_empty_SlotList(( jtom.adt.tomsignature.types.SlotList)tom_get_tail_SlotList(l1))) {     return ( jtom.adt.tomsignature.types.SlotList)tom_cons_list_concPairNameDecl(( jtom.adt.tomsignature.types.PairNameDecl)tom_get_head_SlotList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.SlotList)tom_cons_list_concPairNameDecl(( jtom.adt.tomsignature.types.PairNameDecl)tom_get_head_SlotList(l1),tom_append_list_concPairNameDecl(( jtom.adt.tomsignature.types.SlotList)tom_get_tail_SlotList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.SlotList tom_get_slice_concPairNameDecl( jtom.adt.tomsignature.types.SlotList begin,  jtom.adt.tomsignature.types.SlotList end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( jtom.adt.tomsignature.types.SlotList)tom_empty_list_concPairNameDecl();    } else {      return ( jtom.adt.tomsignature.types.SlotList)tom_cons_list_concPairNameDecl(( jtom.adt.tomsignature.types.PairNameDecl)tom_get_head_SlotList(begin),( jtom.adt.tomsignature.types.SlotList)tom_get_slice_concPairNameDecl(( jtom.adt.tomsignature.types.SlotList)tom_get_tail_SlotList(begin),end));    }   }  public boolean tom_is_fun_sym_emptySlotList( jtom.adt.tomsignature.types.SlotList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.SlotList tom_make_emptySlotList() { return getTomSignatureFactory().makeSlotList(); }public boolean tom_is_fun_sym_manySlotList( jtom.adt.tomsignature.types.SlotList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.SlotList tom_make_manySlotList( jtom.adt.tomsignature.types.PairNameDecl e,  jtom.adt.tomsignature.types.SlotList l) { return getTomSignatureFactory().makeSlotList(e,l); }public  jtom.adt.tomsignature.types.PairNameDecl tom_get_slot_manySlotList_head( jtom.adt.tomsignature.types.SlotList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.SlotList tom_get_slot_manySlotList_tail( jtom.adt.tomsignature.types.SlotList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomEntryList( jtom.adt.tomsignature.types.TomEntryList t) { return null; }public boolean tom_cmp_fun_sym_TomEntryList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomEntryList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomEntry tom_get_head_TomEntryList( jtom.adt.tomsignature.types.TomEntryList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.TomEntryList tom_get_tail_TomEntryList( jtom.adt.tomsignature.types.TomEntryList l) { return l.getTail(); }public boolean tom_is_empty_TomEntryList( jtom.adt.tomsignature.types.TomEntryList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomEntry( jtom.adt.tomsignature.types.TomEntryList t) { return (t!= null) && t.isSortTomEntryList(); }public  jtom.adt.tomsignature.types.TomEntryList tom_empty_list_concTomEntry() { return getTomSignatureFactory().makeTomEntryList(); }public  jtom.adt.tomsignature.types.TomEntryList tom_cons_list_concTomEntry( jtom.adt.tomsignature.types.TomEntry e,  jtom.adt.tomsignature.types.TomEntryList l) { return getTomSignatureFactory().makeTomEntryList(e,l); }public  jtom.adt.tomsignature.types.TomEntryList tom_append_list_concTomEntry( jtom.adt.tomsignature.types.TomEntryList l1,  jtom.adt.tomsignature.types.TomEntryList l2) {    if(tom_is_empty_TomEntryList(l1)) {     return l2;    } else if(tom_is_empty_TomEntryList(l2)) {     return l1;    } else if(tom_is_empty_TomEntryList(( jtom.adt.tomsignature.types.TomEntryList)tom_get_tail_TomEntryList(l1))) {     return ( jtom.adt.tomsignature.types.TomEntryList)tom_cons_list_concTomEntry(( jtom.adt.tomsignature.types.TomEntry)tom_get_head_TomEntryList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.TomEntryList)tom_cons_list_concTomEntry(( jtom.adt.tomsignature.types.TomEntry)tom_get_head_TomEntryList(l1),tom_append_list_concTomEntry(( jtom.adt.tomsignature.types.TomEntryList)tom_get_tail_TomEntryList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.TomEntryList tom_get_slice_concTomEntry( jtom.adt.tomsignature.types.TomEntryList begin,  jtom.adt.tomsignature.types.TomEntryList end) {    if(tom_terms_equal_TomEntryList(begin,end)) {      return ( jtom.adt.tomsignature.types.TomEntryList)tom_empty_list_concTomEntry();    } else {      return ( jtom.adt.tomsignature.types.TomEntryList)tom_cons_list_concTomEntry(( jtom.adt.tomsignature.types.TomEntry)tom_get_head_TomEntryList(begin),( jtom.adt.tomsignature.types.TomEntryList)tom_get_slice_concTomEntry(( jtom.adt.tomsignature.types.TomEntryList)tom_get_tail_TomEntryList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomEntryList( jtom.adt.tomsignature.types.TomEntryList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.TomEntryList tom_make_emptyTomEntryList() { return getTomSignatureFactory().makeTomEntryList(); }public boolean tom_is_fun_sym_manyTomEntryList( jtom.adt.tomsignature.types.TomEntryList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.TomEntryList tom_make_manyTomEntryList( jtom.adt.tomsignature.types.TomEntry e,  jtom.adt.tomsignature.types.TomEntryList l) { return getTomSignatureFactory().makeTomEntryList(e,l); }public  jtom.adt.tomsignature.types.TomEntry tom_get_slot_manyTomEntryList_head( jtom.adt.tomsignature.types.TomEntryList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.TomEntryList tom_get_slot_manyTomEntryList_tail( jtom.adt.tomsignature.types.TomEntryList t) { return  t.getTail(); }public Object tom_get_fun_sym_SymbolList( jtom.adt.tomsignature.types.SymbolList t) { return null; }public boolean tom_cmp_fun_sym_SymbolList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_SymbolList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomSymbol tom_get_head_SymbolList( jtom.adt.tomsignature.types.SymbolList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.SymbolList tom_get_tail_SymbolList( jtom.adt.tomsignature.types.SymbolList l) { return l.getTail(); }public boolean tom_is_empty_SymbolList( jtom.adt.tomsignature.types.SymbolList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomSymbol( jtom.adt.tomsignature.types.SymbolList t) { return (t!= null) && t.isSortSymbolList(); }public  jtom.adt.tomsignature.types.SymbolList tom_empty_list_concTomSymbol() { return getTomSignatureFactory().makeSymbolList(); }public  jtom.adt.tomsignature.types.SymbolList tom_cons_list_concTomSymbol( jtom.adt.tomsignature.types.TomSymbol e,  jtom.adt.tomsignature.types.SymbolList l) { return getTomSignatureFactory().makeSymbolList(e,l); }public  jtom.adt.tomsignature.types.SymbolList tom_append_list_concTomSymbol( jtom.adt.tomsignature.types.SymbolList l1,  jtom.adt.tomsignature.types.SymbolList l2) {    if(tom_is_empty_SymbolList(l1)) {     return l2;    } else if(tom_is_empty_SymbolList(l2)) {     return l1;    } else if(tom_is_empty_SymbolList(( jtom.adt.tomsignature.types.SymbolList)tom_get_tail_SymbolList(l1))) {     return ( jtom.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( jtom.adt.tomsignature.types.TomSymbol)tom_get_head_SymbolList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( jtom.adt.tomsignature.types.TomSymbol)tom_get_head_SymbolList(l1),tom_append_list_concTomSymbol(( jtom.adt.tomsignature.types.SymbolList)tom_get_tail_SymbolList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.SymbolList tom_get_slice_concTomSymbol( jtom.adt.tomsignature.types.SymbolList begin,  jtom.adt.tomsignature.types.SymbolList end) {    if(tom_terms_equal_SymbolList(begin,end)) {      return ( jtom.adt.tomsignature.types.SymbolList)tom_empty_list_concTomSymbol();    } else {      return ( jtom.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( jtom.adt.tomsignature.types.TomSymbol)tom_get_head_SymbolList(begin),( jtom.adt.tomsignature.types.SymbolList)tom_get_slice_concTomSymbol(( jtom.adt.tomsignature.types.SymbolList)tom_get_tail_SymbolList(begin),end));    }   }  public boolean tom_is_fun_sym_emptySymbolList( jtom.adt.tomsignature.types.SymbolList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.SymbolList tom_make_emptySymbolList() { return getTomSignatureFactory().makeSymbolList(); }public boolean tom_is_fun_sym_manySymbolList( jtom.adt.tomsignature.types.SymbolList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.SymbolList tom_make_manySymbolList( jtom.adt.tomsignature.types.TomSymbol e,  jtom.adt.tomsignature.types.SymbolList l) { return getTomSignatureFactory().makeSymbolList(e,l); }public  jtom.adt.tomsignature.types.TomSymbol tom_get_slot_manySymbolList_head( jtom.adt.tomsignature.types.SymbolList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.SymbolList tom_get_slot_manySymbolList_tail( jtom.adt.tomsignature.types.SymbolList t) { return  t.getTail(); }public Object tom_get_fun_sym_NameList( jtom.adt.tomsignature.types.NameList t) { return null; }public boolean tom_cmp_fun_sym_NameList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_NameList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomName tom_get_head_NameList( jtom.adt.tomsignature.types.NameList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.NameList tom_get_tail_NameList( jtom.adt.tomsignature.types.NameList l) { return l.getTail(); }public boolean tom_is_empty_NameList( jtom.adt.tomsignature.types.NameList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomName( jtom.adt.tomsignature.types.NameList t) { return (t!= null) && t.isSortNameList(); }public  jtom.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return getTomSignatureFactory().makeNameList(); }public  jtom.adt.tomsignature.types.NameList tom_cons_list_concTomName( jtom.adt.tomsignature.types.TomName e,  jtom.adt.tomsignature.types.NameList l) { return getTomSignatureFactory().makeNameList(e,l); }public  jtom.adt.tomsignature.types.NameList tom_append_list_concTomName( jtom.adt.tomsignature.types.NameList l1,  jtom.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_NameList(l1)) {     return l2;    } else if(tom_is_empty_NameList(l2)) {     return l1;    } else if(tom_is_empty_NameList(( jtom.adt.tomsignature.types.NameList)tom_get_tail_NameList(l1))) {     return ( jtom.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( jtom.adt.tomsignature.types.TomName)tom_get_head_NameList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( jtom.adt.tomsignature.types.TomName)tom_get_head_NameList(l1),tom_append_list_concTomName(( jtom.adt.tomsignature.types.NameList)tom_get_tail_NameList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.NameList tom_get_slice_concTomName( jtom.adt.tomsignature.types.NameList begin,  jtom.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( jtom.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( jtom.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( jtom.adt.tomsignature.types.TomName)tom_get_head_NameList(begin),( jtom.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( jtom.adt.tomsignature.types.NameList)tom_get_tail_NameList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyNameList( jtom.adt.tomsignature.types.NameList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.NameList tom_make_emptyNameList() { return getTomSignatureFactory().makeNameList(); }public boolean tom_is_fun_sym_manyNameList( jtom.adt.tomsignature.types.NameList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.NameList tom_make_manyNameList( jtom.adt.tomsignature.types.TomName e,  jtom.adt.tomsignature.types.NameList l) { return getTomSignatureFactory().makeNameList(e,l); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_manyNameList_head( jtom.adt.tomsignature.types.NameList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.NameList tom_get_slot_manyNameList_tail( jtom.adt.tomsignature.types.NameList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomName( jtom.adt.tomsignature.types.TomName t) { return null; }public boolean tom_cmp_fun_sym_TomName(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomName( jtom.adt.tomsignature.types.TomName t,  int  n) { return null; }public boolean tom_terms_equal_TomName(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Name( jtom.adt.tomsignature.types.TomName t) { return  (t!= null) && t.isName(); }public  jtom.adt.tomsignature.types.TomName tom_make_Name( String  t0) { return  getTomSignatureFactory().makeTomName_Name(t0); }public  String  tom_get_slot_Name_string( jtom.adt.tomsignature.types.TomName t) { return  t.getString(); }public boolean tom_is_fun_sym_PositionName( jtom.adt.tomsignature.types.TomName t) { return  (t!= null) && t.isPositionName(); }public  jtom.adt.tomsignature.types.TomName tom_make_PositionName( jtom.adt.tomsignature.types.TomNumberList t0) { return  getTomSignatureFactory().makeTomName_PositionName(t0); }public  jtom.adt.tomsignature.types.TomNumberList tom_get_slot_PositionName_numberList( jtom.adt.tomsignature.types.TomName t) { return  t.getNumberList(); }public boolean tom_is_fun_sym_EmptyName( jtom.adt.tomsignature.types.TomName t) { return  (t!= null) && t.isEmptyName(); }public  jtom.adt.tomsignature.types.TomName tom_make_EmptyName() { return  getTomSignatureFactory().makeTomName_EmptyName(); }public Object tom_get_fun_sym_TomNumber( jtom.adt.tomsignature.types.TomNumber t) { return null; }public boolean tom_cmp_fun_sym_TomNumber(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomNumber( jtom.adt.tomsignature.types.TomNumber t,  int  n) { return null; }public boolean tom_terms_equal_TomNumber(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_MatchNumber( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isMatchNumber(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_MatchNumber( jtom.adt.tomsignature.types.TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_MatchNumber(t0); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_MatchNumber_number( jtom.adt.tomsignature.types.TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_PatternNumber( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isPatternNumber(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_PatternNumber( jtom.adt.tomsignature.types.TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_PatternNumber(t0); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_PatternNumber_number( jtom.adt.tomsignature.types.TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_ListNumber( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isListNumber(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_ListNumber( jtom.adt.tomsignature.types.TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_ListNumber(t0); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_ListNumber_number( jtom.adt.tomsignature.types.TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_IndexNumber( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isIndexNumber(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_IndexNumber( jtom.adt.tomsignature.types.TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_IndexNumber(t0); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_IndexNumber_number( jtom.adt.tomsignature.types.TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_Begin( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isBegin(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_Begin( jtom.adt.tomsignature.types.TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_Begin(t0); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_Begin_number( jtom.adt.tomsignature.types.TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_End( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isEnd(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_End( jtom.adt.tomsignature.types.TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_End(t0); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_End_number( jtom.adt.tomsignature.types.TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_Number( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isNumber(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_Number( int  t0) { return  getTomSignatureFactory().makeTomNumber_Number(t0); }public  int  tom_get_slot_Number_integer( jtom.adt.tomsignature.types.TomNumber t) { return  t.getInteger(); }public boolean tom_is_fun_sym_AbsVar( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isAbsVar(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_AbsVar( jtom.adt.tomsignature.types.TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_AbsVar(t0); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_AbsVar_number( jtom.adt.tomsignature.types.TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_RenamedVar( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isRenamedVar(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_RenamedVar( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeTomNumber_RenamedVar(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_RenamedVar_astName( jtom.adt.tomsignature.types.TomNumber t) { return  t.getAstName(); }public boolean tom_is_fun_sym_RuleVar( jtom.adt.tomsignature.types.TomNumber t) { return  (t!= null) && t.isRuleVar(); }public  jtom.adt.tomsignature.types.TomNumber tom_make_RuleVar() { return  getTomSignatureFactory().makeTomNumber_RuleVar(); }public Object tom_get_fun_sym_TomNumberList( jtom.adt.tomsignature.types.TomNumberList t) { return null; }public boolean tom_cmp_fun_sym_TomNumberList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomNumberList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomNumber tom_get_head_TomNumberList( jtom.adt.tomsignature.types.TomNumberList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.TomNumberList tom_get_tail_TomNumberList( jtom.adt.tomsignature.types.TomNumberList l) { return l.getTail(); }public boolean tom_is_empty_TomNumberList( jtom.adt.tomsignature.types.TomNumberList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomNumber( jtom.adt.tomsignature.types.TomNumberList t) { return (t!= null) && t.isSortTomNumberList(); }public  jtom.adt.tomsignature.types.TomNumberList tom_empty_list_concTomNumber() { return getTomSignatureFactory().makeTomNumberList(); }public  jtom.adt.tomsignature.types.TomNumberList tom_cons_list_concTomNumber( jtom.adt.tomsignature.types.TomNumber e,  jtom.adt.tomsignature.types.TomNumberList l) { return getTomSignatureFactory().makeTomNumberList(e,l); }public  jtom.adt.tomsignature.types.TomNumberList tom_append_list_concTomNumber( jtom.adt.tomsignature.types.TomNumberList l1,  jtom.adt.tomsignature.types.TomNumberList l2) {    if(tom_is_empty_TomNumberList(l1)) {     return l2;    } else if(tom_is_empty_TomNumberList(l2)) {     return l1;    } else if(tom_is_empty_TomNumberList(( jtom.adt.tomsignature.types.TomNumberList)tom_get_tail_TomNumberList(l1))) {     return ( jtom.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( jtom.adt.tomsignature.types.TomNumber)tom_get_head_TomNumberList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( jtom.adt.tomsignature.types.TomNumber)tom_get_head_TomNumberList(l1),tom_append_list_concTomNumber(( jtom.adt.tomsignature.types.TomNumberList)tom_get_tail_TomNumberList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.TomNumberList tom_get_slice_concTomNumber( jtom.adt.tomsignature.types.TomNumberList begin,  jtom.adt.tomsignature.types.TomNumberList end) {    if(tom_terms_equal_TomNumberList(begin,end)) {      return ( jtom.adt.tomsignature.types.TomNumberList)tom_empty_list_concTomNumber();    } else {      return ( jtom.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( jtom.adt.tomsignature.types.TomNumber)tom_get_head_TomNumberList(begin),( jtom.adt.tomsignature.types.TomNumberList)tom_get_slice_concTomNumber(( jtom.adt.tomsignature.types.TomNumberList)tom_get_tail_TomNumberList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomNumberList( jtom.adt.tomsignature.types.TomNumberList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.TomNumberList tom_make_emptyTomNumberList() { return getTomSignatureFactory().makeTomNumberList(); }public boolean tom_is_fun_sym_manyTomNumberList( jtom.adt.tomsignature.types.TomNumberList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.TomNumberList tom_make_manyTomNumberList( jtom.adt.tomsignature.types.TomNumber e,  jtom.adt.tomsignature.types.TomNumberList l) { return getTomSignatureFactory().makeTomNumberList(e,l); }public  jtom.adt.tomsignature.types.TomNumber tom_get_slot_manyTomNumberList_head( jtom.adt.tomsignature.types.TomNumberList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.TomNumberList tom_get_slot_manyTomNumberList_tail( jtom.adt.tomsignature.types.TomNumberList t) { return  t.getTail(); }public Object tom_get_fun_sym_Option( jtom.adt.tomsignature.types.Option t) { return null; }public boolean tom_cmp_fun_sym_Option(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Option( jtom.adt.tomsignature.types.Option t,  int  n) { return null; }public boolean tom_terms_equal_Option(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_DeclarationToOption( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isDeclarationToOption(); }public  jtom.adt.tomsignature.types.Option tom_make_DeclarationToOption( jtom.adt.tomsignature.types.Declaration t0) { return  getTomSignatureFactory().makeOption_DeclarationToOption(t0); }public  jtom.adt.tomsignature.types.Declaration tom_get_slot_DeclarationToOption_astDeclaration( jtom.adt.tomsignature.types.Option t) { return  t.getAstDeclaration(); }public boolean tom_is_fun_sym_TomNameToOption( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isTomNameToOption(); }public  jtom.adt.tomsignature.types.Option tom_make_TomNameToOption( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeOption_TomNameToOption(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_TomNameToOption_astName( jtom.adt.tomsignature.types.Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_TomTermToOption( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isTomTermToOption(); }public  jtom.adt.tomsignature.types.Option tom_make_TomTermToOption( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeOption_TomTermToOption(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToOption_astTerm( jtom.adt.tomsignature.types.Option t) { return  t.getAstTerm(); }public boolean tom_is_fun_sym_DefinedSymbol( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isDefinedSymbol(); }public  jtom.adt.tomsignature.types.Option tom_make_DefinedSymbol() { return  getTomSignatureFactory().makeOption_DefinedSymbol(); }public boolean tom_is_fun_sym_GeneratedMatch( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isGeneratedMatch(); }public  jtom.adt.tomsignature.types.Option tom_make_GeneratedMatch() { return  getTomSignatureFactory().makeOption_GeneratedMatch(); }public boolean tom_is_fun_sym_OriginTracking( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isOriginTracking(); }public  jtom.adt.tomsignature.types.Option tom_make_OriginTracking( jtom.adt.tomsignature.types.TomName t0,  int  t1,  jtom.adt.tomsignature.types.TomName t2) { return  getTomSignatureFactory().makeOption_OriginTracking(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_OriginTracking_astName( jtom.adt.tomsignature.types.Option t) { return  t.getAstName(); }public  int  tom_get_slot_OriginTracking_line( jtom.adt.tomsignature.types.Option t) { return  t.getLine(); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_OriginTracking_fileName( jtom.adt.tomsignature.types.Option t) { return  t.getFileName(); }public boolean tom_is_fun_sym_Constructor( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isConstructor(); }public  jtom.adt.tomsignature.types.Option tom_make_Constructor( jtom.adt.tomsignature.types.NameList t0) { return  getTomSignatureFactory().makeOption_Constructor(t0); }public  jtom.adt.tomsignature.types.NameList tom_get_slot_Constructor_nameList( jtom.adt.tomsignature.types.Option t) { return  t.getNameList(); }public boolean tom_is_fun_sym_OriginalText( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isOriginalText(); }public  jtom.adt.tomsignature.types.Option tom_make_OriginalText( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeOption_OriginalText(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_OriginalText_astName( jtom.adt.tomsignature.types.Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_Label( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isLabel(); }public  jtom.adt.tomsignature.types.Option tom_make_Label( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeOption_Label(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_Label_astName( jtom.adt.tomsignature.types.Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_Debug( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isDebug(); }public  jtom.adt.tomsignature.types.Option tom_make_Debug( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeOption_Debug(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_Debug_astName( jtom.adt.tomsignature.types.Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_ImplicitXMLAttribut( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isImplicitXMLAttribut(); }public  jtom.adt.tomsignature.types.Option tom_make_ImplicitXMLAttribut() { return  getTomSignatureFactory().makeOption_ImplicitXMLAttribut(); }public boolean tom_is_fun_sym_ImplicitXMLChild( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isImplicitXMLChild(); }public  jtom.adt.tomsignature.types.Option tom_make_ImplicitXMLChild() { return  getTomSignatureFactory().makeOption_ImplicitXMLChild(); }public boolean tom_is_fun_sym_noOption( jtom.adt.tomsignature.types.Option t) { return  (t!= null) && t.isNoOption(); }public  jtom.adt.tomsignature.types.Option tom_make_noOption() { return  getTomSignatureFactory().makeOption_NoOption(); }public Object tom_get_fun_sym_OptionList( jtom.adt.tomsignature.types.OptionList t) { return null; }public boolean tom_cmp_fun_sym_OptionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_OptionList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.Option tom_get_head_OptionList( jtom.adt.tomsignature.types.OptionList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.OptionList tom_get_tail_OptionList( jtom.adt.tomsignature.types.OptionList l) { return l.getTail(); }public boolean tom_is_empty_OptionList( jtom.adt.tomsignature.types.OptionList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concOption( jtom.adt.tomsignature.types.OptionList t) { return (t!= null) && t.isSortOptionList(); }public  jtom.adt.tomsignature.types.OptionList tom_empty_list_concOption() { return getTomSignatureFactory().makeOptionList(); }public  jtom.adt.tomsignature.types.OptionList tom_cons_list_concOption( jtom.adt.tomsignature.types.Option e,  jtom.adt.tomsignature.types.OptionList l) { return getTomSignatureFactory().makeOptionList(e,l); }public  jtom.adt.tomsignature.types.OptionList tom_append_list_concOption( jtom.adt.tomsignature.types.OptionList l1,  jtom.adt.tomsignature.types.OptionList l2) {    if(tom_is_empty_OptionList(l1)) {     return l2;    } else if(tom_is_empty_OptionList(l2)) {     return l1;    } else if(tom_is_empty_OptionList(( jtom.adt.tomsignature.types.OptionList)tom_get_tail_OptionList(l1))) {     return ( jtom.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( jtom.adt.tomsignature.types.Option)tom_get_head_OptionList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( jtom.adt.tomsignature.types.Option)tom_get_head_OptionList(l1),tom_append_list_concOption(( jtom.adt.tomsignature.types.OptionList)tom_get_tail_OptionList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.OptionList tom_get_slice_concOption( jtom.adt.tomsignature.types.OptionList begin,  jtom.adt.tomsignature.types.OptionList end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( jtom.adt.tomsignature.types.OptionList)tom_empty_list_concOption();    } else {      return ( jtom.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( jtom.adt.tomsignature.types.Option)tom_get_head_OptionList(begin),( jtom.adt.tomsignature.types.OptionList)tom_get_slice_concOption(( jtom.adt.tomsignature.types.OptionList)tom_get_tail_OptionList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyOptionList( jtom.adt.tomsignature.types.OptionList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.OptionList tom_make_emptyOptionList() { return getTomSignatureFactory().makeOptionList(); }public boolean tom_is_fun_sym_manyOptionList( jtom.adt.tomsignature.types.OptionList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.OptionList tom_make_manyOptionList( jtom.adt.tomsignature.types.Option e,  jtom.adt.tomsignature.types.OptionList l) { return getTomSignatureFactory().makeOptionList(e,l); }public  jtom.adt.tomsignature.types.Option tom_get_slot_manyOptionList_head( jtom.adt.tomsignature.types.OptionList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_manyOptionList_tail( jtom.adt.tomsignature.types.OptionList t) { return  t.getTail(); }public Object tom_get_fun_sym_Constraint( jtom.adt.tomsignature.types.Constraint t) { return null; }public boolean tom_cmp_fun_sym_Constraint(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Constraint( jtom.adt.tomsignature.types.Constraint t,  int  n) { return null; }public boolean tom_terms_equal_Constraint(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Equal( jtom.adt.tomsignature.types.Constraint t) { return  (t!= null) && t.isEqual(); }public  jtom.adt.tomsignature.types.Constraint tom_make_Equal( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeConstraint_Equal(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Equal_variable( jtom.adt.tomsignature.types.Constraint t) { return  t.getVariable(); }public boolean tom_is_fun_sym_AssignTo( jtom.adt.tomsignature.types.Constraint t) { return  (t!= null) && t.isAssignTo(); }public  jtom.adt.tomsignature.types.Constraint tom_make_AssignTo( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeConstraint_AssignTo(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_AssignTo_variable( jtom.adt.tomsignature.types.Constraint t) { return  t.getVariable(); }public Object tom_get_fun_sym_ConstraintList( jtom.adt.tomsignature.types.ConstraintList t) { return null; }public boolean tom_cmp_fun_sym_ConstraintList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_ConstraintList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.Constraint tom_get_head_ConstraintList( jtom.adt.tomsignature.types.ConstraintList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_tail_ConstraintList( jtom.adt.tomsignature.types.ConstraintList l) { return l.getTail(); }public boolean tom_is_empty_ConstraintList( jtom.adt.tomsignature.types.ConstraintList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concConstraint( jtom.adt.tomsignature.types.ConstraintList t) { return (t!= null) && t.isSortConstraintList(); }public  jtom.adt.tomsignature.types.ConstraintList tom_empty_list_concConstraint() { return getTomSignatureFactory().makeConstraintList(); }public  jtom.adt.tomsignature.types.ConstraintList tom_cons_list_concConstraint( jtom.adt.tomsignature.types.Constraint e,  jtom.adt.tomsignature.types.ConstraintList l) { return getTomSignatureFactory().makeConstraintList(e,l); }public  jtom.adt.tomsignature.types.ConstraintList tom_append_list_concConstraint( jtom.adt.tomsignature.types.ConstraintList l1,  jtom.adt.tomsignature.types.ConstraintList l2) {    if(tom_is_empty_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_ConstraintList(( jtom.adt.tomsignature.types.ConstraintList)tom_get_tail_ConstraintList(l1))) {     return ( jtom.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( jtom.adt.tomsignature.types.Constraint)tom_get_head_ConstraintList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( jtom.adt.tomsignature.types.Constraint)tom_get_head_ConstraintList(l1),tom_append_list_concConstraint(( jtom.adt.tomsignature.types.ConstraintList)tom_get_tail_ConstraintList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.ConstraintList tom_get_slice_concConstraint( jtom.adt.tomsignature.types.ConstraintList begin,  jtom.adt.tomsignature.types.ConstraintList end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( jtom.adt.tomsignature.types.ConstraintList)tom_empty_list_concConstraint();    } else {      return ( jtom.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( jtom.adt.tomsignature.types.Constraint)tom_get_head_ConstraintList(begin),( jtom.adt.tomsignature.types.ConstraintList)tom_get_slice_concConstraint(( jtom.adt.tomsignature.types.ConstraintList)tom_get_tail_ConstraintList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyConstraintList( jtom.adt.tomsignature.types.ConstraintList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.ConstraintList tom_make_emptyConstraintList() { return getTomSignatureFactory().makeConstraintList(); }public boolean tom_is_fun_sym_manyConstraintList( jtom.adt.tomsignature.types.ConstraintList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.ConstraintList tom_make_manyConstraintList( jtom.adt.tomsignature.types.Constraint e,  jtom.adt.tomsignature.types.ConstraintList l) { return getTomSignatureFactory().makeConstraintList(e,l); }public  jtom.adt.tomsignature.types.Constraint tom_get_slot_manyConstraintList_head( jtom.adt.tomsignature.types.ConstraintList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_manyConstraintList_tail( jtom.adt.tomsignature.types.ConstraintList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomAlert( jtom.adt.tomsignature.types.TomAlert t) { return null; }public boolean tom_cmp_fun_sym_TomAlert(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomAlert( jtom.adt.tomsignature.types.TomAlert t,  int  n) { return null; }public boolean tom_terms_equal_TomAlert(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Error( jtom.adt.tomsignature.types.TomAlert t) { return  (t!= null) && t.isError(); }public  jtom.adt.tomsignature.types.TomAlert tom_make_Error( String  t0,  String  t1,  int  t2) { return  getTomSignatureFactory().makeTomAlert_Error(t0, t1, t2); }public  String  tom_get_slot_Error_message( jtom.adt.tomsignature.types.TomAlert t) { return  t.getMessage(); }public  String  tom_get_slot_Error_file( jtom.adt.tomsignature.types.TomAlert t) { return  t.getFile(); }public  int  tom_get_slot_Error_line( jtom.adt.tomsignature.types.TomAlert t) { return  t.getLine(); }public boolean tom_is_fun_sym_Warning( jtom.adt.tomsignature.types.TomAlert t) { return  (t!= null) && t.isWarning(); }public  jtom.adt.tomsignature.types.TomAlert tom_make_Warning( String  t0,  String  t1,  int  t2) { return  getTomSignatureFactory().makeTomAlert_Warning(t0, t1, t2); }public  String  tom_get_slot_Warning_message( jtom.adt.tomsignature.types.TomAlert t) { return  t.getMessage(); }public  String  tom_get_slot_Warning_file( jtom.adt.tomsignature.types.TomAlert t) { return  t.getFile(); }public  int  tom_get_slot_Warning_line( jtom.adt.tomsignature.types.TomAlert t) { return  t.getLine(); }public Object tom_get_fun_sym_TomAlertList( jtom.adt.tomsignature.types.TomAlertList t) { return null; }public boolean tom_cmp_fun_sym_TomAlertList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomAlertList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomAlert tom_get_head_TomAlertList( jtom.adt.tomsignature.types.TomAlertList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.TomAlertList tom_get_tail_TomAlertList( jtom.adt.tomsignature.types.TomAlertList l) { return l.getTail(); }public boolean tom_is_empty_TomAlertList( jtom.adt.tomsignature.types.TomAlertList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomAlert( jtom.adt.tomsignature.types.TomAlertList t) { return (t!= null) && t.isSortTomAlertList(); }public  jtom.adt.tomsignature.types.TomAlertList tom_empty_list_concTomAlert() { return getTomSignatureFactory().makeTomAlertList(); }public  jtom.adt.tomsignature.types.TomAlertList tom_cons_list_concTomAlert( jtom.adt.tomsignature.types.TomAlert e,  jtom.adt.tomsignature.types.TomAlertList l) { return getTomSignatureFactory().makeTomAlertList(e,l); }public  jtom.adt.tomsignature.types.TomAlertList tom_append_list_concTomAlert( jtom.adt.tomsignature.types.TomAlertList l1,  jtom.adt.tomsignature.types.TomAlertList l2) {    if(tom_is_empty_TomAlertList(l1)) {     return l2;    } else if(tom_is_empty_TomAlertList(l2)) {     return l1;    } else if(tom_is_empty_TomAlertList(( jtom.adt.tomsignature.types.TomAlertList)tom_get_tail_TomAlertList(l1))) {     return ( jtom.adt.tomsignature.types.TomAlertList)tom_cons_list_concTomAlert(( jtom.adt.tomsignature.types.TomAlert)tom_get_head_TomAlertList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.TomAlertList)tom_cons_list_concTomAlert(( jtom.adt.tomsignature.types.TomAlert)tom_get_head_TomAlertList(l1),tom_append_list_concTomAlert(( jtom.adt.tomsignature.types.TomAlertList)tom_get_tail_TomAlertList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.TomAlertList tom_get_slice_concTomAlert( jtom.adt.tomsignature.types.TomAlertList begin,  jtom.adt.tomsignature.types.TomAlertList end) {    if(tom_terms_equal_TomAlertList(begin,end)) {      return ( jtom.adt.tomsignature.types.TomAlertList)tom_empty_list_concTomAlert();    } else {      return ( jtom.adt.tomsignature.types.TomAlertList)tom_cons_list_concTomAlert(( jtom.adt.tomsignature.types.TomAlert)tom_get_head_TomAlertList(begin),( jtom.adt.tomsignature.types.TomAlertList)tom_get_slice_concTomAlert(( jtom.adt.tomsignature.types.TomAlertList)tom_get_tail_TomAlertList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomAlertList( jtom.adt.tomsignature.types.TomAlertList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.TomAlertList tom_make_emptyTomAlertList() { return getTomSignatureFactory().makeTomAlertList(); }public boolean tom_is_fun_sym_manyTomAlertList( jtom.adt.tomsignature.types.TomAlertList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.TomAlertList tom_make_manyTomAlertList( jtom.adt.tomsignature.types.TomAlert e,  jtom.adt.tomsignature.types.TomAlertList l) { return getTomSignatureFactory().makeTomAlertList(e,l); }public  jtom.adt.tomsignature.types.TomAlert tom_get_slot_manyTomAlertList_head( jtom.adt.tomsignature.types.TomAlertList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.TomAlertList tom_get_slot_manyTomAlertList_tail( jtom.adt.tomsignature.types.TomAlertList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomTerm( jtom.adt.tomsignature.types.TomTerm t) { return null; }public boolean tom_cmp_fun_sym_TomTerm(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomTerm( jtom.adt.tomsignature.types.TomTerm t,  int  n) { return null; }public boolean tom_terms_equal_TomTerm(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Appl( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isAppl(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Appl( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.NameList t1,  jtom.adt.tomsignature.types.TomList t2,  jtom.adt.tomsignature.types.ConstraintList t3) { return  getTomSignatureFactory().makeTomTerm_Appl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_Appl_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.NameList tom_get_slot_Appl_nameList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getNameList(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_Appl_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_Appl_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_XMLAppl( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isXMLAppl(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_XMLAppl( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.NameList t1,  jtom.adt.tomsignature.types.TomList t2,  jtom.adt.tomsignature.types.TomList t3,  jtom.adt.tomsignature.types.ConstraintList t4) { return  getTomSignatureFactory().makeTomTerm_XMLAppl(t0, t1, t2, t3, t4); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_XMLAppl_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.NameList tom_get_slot_XMLAppl_nameList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getNameList(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_XMLAppl_attrList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAttrList(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_XMLAppl_childList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getChildList(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_XMLAppl_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_VariableStar( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isVariableStar(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_VariableStar( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.TomName t1,  jtom.adt.tomsignature.types.TomType t2,  jtom.adt.tomsignature.types.ConstraintList t3) { return  getTomSignatureFactory().makeTomTerm_VariableStar(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstType(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_Placeholder( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isPlaceholder(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Placeholder( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.ConstraintList t1) { return  getTomSignatureFactory().makeTomTerm_Placeholder(t0, t1); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_Placeholder_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_Placeholder_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_UnamedVariable( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isUnamedVariable(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_UnamedVariable( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.TomType t1,  jtom.adt.tomsignature.types.ConstraintList t2) { return  getTomSignatureFactory().makeTomTerm_UnamedVariable(t0, t1, t2); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariable_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_UnamedVariable_astType( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstType(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariable_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_UnamedVariableStar( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isUnamedVariableStar(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_UnamedVariableStar( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.TomType t1,  jtom.adt.tomsignature.types.ConstraintList t2) { return  getTomSignatureFactory().makeTomTerm_UnamedVariableStar(t0, t1, t2); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariableStar_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_UnamedVariableStar_astType( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstType(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariableStar_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_emptyTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isEmptyTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_emptyTerm() { return  getTomSignatureFactory().makeTomTerm_EmptyTerm(); }public boolean tom_is_fun_sym_TargetLanguageToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTargetLanguageToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_TargetLanguageToTomTerm( jtom.adt.tomsignature.types.TargetLanguage t0) { return  getTomSignatureFactory().makeTomTerm_TargetLanguageToTomTerm(t0); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_TargetLanguageToTomTerm_tl( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTl(); }public boolean tom_is_fun_sym_TomTypeToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTomTypeToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_TomTypeToTomTerm( jtom.adt.tomsignature.types.TomType t0) { return  getTomSignatureFactory().makeTomTerm_TomTypeToTomTerm(t0); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_TomTypeToTomTerm_astType( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_TomNameToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTomNameToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_TomNameToTomTerm( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeTomTerm_TomNameToTomTerm(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_TomNameToTomTerm_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public boolean tom_is_fun_sym_TomSymbolToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTomSymbolToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_TomSymbolToTomTerm( jtom.adt.tomsignature.types.TomSymbol t0) { return  getTomSignatureFactory().makeTomTerm_TomSymbolToTomTerm(t0); }public  jtom.adt.tomsignature.types.TomSymbol tom_get_slot_TomSymbolToTomTerm_astSymbol( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstSymbol(); }public boolean tom_is_fun_sym_DeclarationToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isDeclarationToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_DeclarationToTomTerm( jtom.adt.tomsignature.types.Declaration t0) { return  getTomSignatureFactory().makeTomTerm_DeclarationToTomTerm(t0); }public  jtom.adt.tomsignature.types.Declaration tom_get_slot_DeclarationToTomTerm_astDeclaration( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstDeclaration(); }public boolean tom_is_fun_sym_OptionToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isOptionToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_OptionToTomTerm( jtom.adt.tomsignature.types.OptionList t0) { return  getTomSignatureFactory().makeTomTerm_OptionToTomTerm(t0); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_OptionToTomTerm_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public boolean tom_is_fun_sym_ExpressionToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isExpressionToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_ExpressionToTomTerm( jtom.adt.tomsignature.types.Expression t0) { return  getTomSignatureFactory().makeTomTerm_ExpressionToTomTerm(t0); }public  jtom.adt.tomsignature.types.Expression tom_get_slot_ExpressionToTomTerm_astExpression( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstExpression(); }public boolean tom_is_fun_sym_InstructionToTomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isInstructionToTomTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_InstructionToTomTerm( jtom.adt.tomsignature.types.Instruction t0) { return  getTomSignatureFactory().makeTomTerm_InstructionToTomTerm(t0); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_InstructionToTomTerm_astInstruction( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstInstruction(); }public boolean tom_is_fun_sym_Tom( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTom(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Tom( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomTerm_Tom(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_Tom_tomList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_BackQuoteAppl( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBackQuoteAppl(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BackQuoteAppl( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.TomName t1,  jtom.adt.tomsignature.types.TomList t2) { return  getTomSignatureFactory().makeTomTerm_BackQuoteAppl(t0, t1, t2); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_BackQuoteAppl_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BackQuoteAppl_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_BackQuoteAppl_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_DoubleBackQuote( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isDoubleBackQuote(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_DoubleBackQuote( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomTerm_DoubleBackQuote(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_DoubleBackQuote_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_Composite( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isComposite(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Composite( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomTerm_Composite(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_Composite_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_RecordAppl( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isRecordAppl(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_RecordAppl( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.NameList t1,  jtom.adt.tomsignature.types.TomList t2,  jtom.adt.tomsignature.types.ConstraintList t3) { return  getTomSignatureFactory().makeTomTerm_RecordAppl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getNameList(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_RecordAppl_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_PairSlotAppl( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isPairSlotAppl(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_PairSlotAppl( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1) { return  getTomSignatureFactory().makeTomTerm_PairSlotAppl(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_PairSlotAppl_slotName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getSlotName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_PairSlotAppl_appl( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAppl(); }public boolean tom_is_fun_sym_SubjectList( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isSubjectList(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_SubjectList( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomTerm_SubjectList(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_SubjectList_tomList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_PatternList( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isPatternList(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_PatternList( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomTerm_PatternList(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_PatternList_tomList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_TermList( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTermList(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_TermList( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomTerm_TermList(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_TermList_tomList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_Term( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Term( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeTomTerm_Term(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Term_tomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTomTerm(); }public boolean tom_is_fun_sym_PatternAction( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isPatternAction(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_PatternAction( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.Instruction t1,  jtom.adt.tomsignature.types.OptionList t2) { return  getTomSignatureFactory().makeTomTerm_PatternAction(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_PatternAction_termList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTermList(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_PatternAction_action( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAction(); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_PatternAction_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public boolean tom_is_fun_sym_TLVar( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTLVar(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_TLVar( String  t0,  jtom.adt.tomsignature.types.TomType t1) { return  getTomSignatureFactory().makeTomTerm_TLVar(t0, t1); }public  String  tom_get_slot_TLVar_strName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getStrName(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_TLVar_astType( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_Variable( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isVariable(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Variable( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.TomName t1,  jtom.adt.tomsignature.types.TomType t2,  jtom.adt.tomsignature.types.ConstraintList t3) { return  getTomSignatureFactory().makeTomTerm_Variable(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstType(); }public  jtom.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( jtom.adt.tomsignature.types.TomTerm t) { return  t.getConstraints(); }public boolean tom_is_fun_sym_Ref( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isRef(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Ref( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeTomTerm_Ref(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_Ref_tomTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTomTerm(); }public boolean tom_is_fun_sym_BuildReducedTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildReducedTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildReducedTerm( jtom.adt.tomsignature.types.TomTerm t0) { return  getTomSignatureFactory().makeTomTerm_BuildReducedTerm(t0); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildReducedTerm_kid1( jtom.adt.tomsignature.types.TomTerm t) { return  t.getKid1(); }public boolean tom_is_fun_sym_FunctionCall( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isFunctionCall(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_FunctionCall( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomList t1) { return  getTomSignatureFactory().makeTomTerm_FunctionCall(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_FunctionCall_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_FunctionCall_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_BuildVariable( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildVariable(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildVariable( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomList t1) { return  getTomSignatureFactory().makeTomTerm_BuildVariable(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildVariable_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_BuildVariable_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_BuildTerm( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildTerm( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomList t1) { return  getTomSignatureFactory().makeTomTerm_BuildTerm(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildTerm_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_BuildTerm_args( jtom.adt.tomsignature.types.TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_BuildEmptyList( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildEmptyList(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildEmptyList( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeTomTerm_BuildEmptyList(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildEmptyList_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public boolean tom_is_fun_sym_BuildConsList( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildConsList(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildConsList( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeTomTerm_BuildConsList(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildConsList_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsList_headTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getHeadTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsList_tailTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTailTerm(); }public boolean tom_is_fun_sym_BuildAppendList( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildAppendList(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildAppendList( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeTomTerm_BuildAppendList(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildAppendList_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendList_headTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getHeadTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendList_tailTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTailTerm(); }public boolean tom_is_fun_sym_BuildEmptyArray( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildEmptyArray(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildEmptyArray( jtom.adt.tomsignature.types.TomName t0,  int  t1) { return  getTomSignatureFactory().makeTomTerm_BuildEmptyArray(t0, t1); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildEmptyArray_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  int  tom_get_slot_BuildEmptyArray_size( jtom.adt.tomsignature.types.TomTerm t) { return  t.getSize(); }public boolean tom_is_fun_sym_BuildConsArray( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildConsArray(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildConsArray( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeTomTerm_BuildConsArray(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildConsArray_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsArray_headTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getHeadTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsArray_tailTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTailTerm(); }public boolean tom_is_fun_sym_BuildAppendArray( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isBuildAppendArray(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_BuildAppendArray( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2) { return  getTomSignatureFactory().makeTomTerm_BuildAppendArray(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_BuildAppendArray_astName( jtom.adt.tomsignature.types.TomTerm t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendArray_headTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getHeadTerm(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendArray_tailTerm( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTailTerm(); }public boolean tom_is_fun_sym_TomInclude( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isTomInclude(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_TomInclude( jtom.adt.tomsignature.types.TomList t0) { return  getTomSignatureFactory().makeTomTerm_TomInclude(t0); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_TomInclude_tomList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_Automata( jtom.adt.tomsignature.types.TomTerm t) { return  (t!= null) && t.isAutomata(); }public  jtom.adt.tomsignature.types.TomTerm tom_make_Automata( jtom.adt.tomsignature.types.OptionList t0,  jtom.adt.tomsignature.types.TomList t1,  jtom.adt.tomsignature.types.TomNumberList t2,  jtom.adt.tomsignature.types.Instruction t3) { return  getTomSignatureFactory().makeTomTerm_Automata(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.OptionList tom_get_slot_Automata_option( jtom.adt.tomsignature.types.TomTerm t) { return  t.getOption(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_Automata_patternList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getPatternList(); }public  jtom.adt.tomsignature.types.TomNumberList tom_get_slot_Automata_numberList( jtom.adt.tomsignature.types.TomTerm t) { return  t.getNumberList(); }public  jtom.adt.tomsignature.types.Instruction tom_get_slot_Automata_inst( jtom.adt.tomsignature.types.TomTerm t) { return  t.getInst(); }public Object tom_get_fun_sym_TomList( jtom.adt.tomsignature.types.TomList t) { return null; }public boolean tom_cmp_fun_sym_TomList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_head_TomList( jtom.adt.tomsignature.types.TomList l) { return l.getHead(); }public  jtom.adt.tomsignature.types.TomList tom_get_tail_TomList( jtom.adt.tomsignature.types.TomList l) { return l.getTail(); }public boolean tom_is_empty_TomList( jtom.adt.tomsignature.types.TomList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomTerm( jtom.adt.tomsignature.types.TomList t) { return (t!= null) && t.isSortTomList(); }public  jtom.adt.tomsignature.types.TomList tom_empty_list_concTomTerm() { return getTomSignatureFactory().makeTomList(); }public  jtom.adt.tomsignature.types.TomList tom_cons_list_concTomTerm( jtom.adt.tomsignature.types.TomTerm e,  jtom.adt.tomsignature.types.TomList l) { return getTomSignatureFactory().makeTomList(e,l); }public  jtom.adt.tomsignature.types.TomList tom_append_list_concTomTerm( jtom.adt.tomsignature.types.TomList l1,  jtom.adt.tomsignature.types.TomList l2) {    if(tom_is_empty_TomList(l1)) {     return l2;    } else if(tom_is_empty_TomList(l2)) {     return l1;    } else if(tom_is_empty_TomList(( jtom.adt.tomsignature.types.TomList)tom_get_tail_TomList(l1))) {     return ( jtom.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( jtom.adt.tomsignature.types.TomTerm)tom_get_head_TomList(l1),l2);    } else {      return ( jtom.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( jtom.adt.tomsignature.types.TomTerm)tom_get_head_TomList(l1),tom_append_list_concTomTerm(( jtom.adt.tomsignature.types.TomList)tom_get_tail_TomList(l1),l2));    }   }  public  jtom.adt.tomsignature.types.TomList tom_get_slice_concTomTerm( jtom.adt.tomsignature.types.TomList begin,  jtom.adt.tomsignature.types.TomList end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( jtom.adt.tomsignature.types.TomList)tom_empty_list_concTomTerm();    } else {      return ( jtom.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( jtom.adt.tomsignature.types.TomTerm)tom_get_head_TomList(begin),( jtom.adt.tomsignature.types.TomList)tom_get_slice_concTomTerm(( jtom.adt.tomsignature.types.TomList)tom_get_tail_TomList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomList( jtom.adt.tomsignature.types.TomList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tomsignature.types.TomList tom_make_emptyTomList() { return getTomSignatureFactory().makeTomList(); }public boolean tom_is_fun_sym_manyTomList( jtom.adt.tomsignature.types.TomList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tomsignature.types.TomList tom_make_manyTomList( jtom.adt.tomsignature.types.TomTerm e,  jtom.adt.tomsignature.types.TomList l) { return getTomSignatureFactory().makeTomList(e,l); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_manyTomList_head( jtom.adt.tomsignature.types.TomList t) { return  t.getHead(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_manyTomList_tail( jtom.adt.tomsignature.types.TomList t) { return  t.getTail(); }public Object tom_get_fun_sym_Declaration( jtom.adt.tomsignature.types.Declaration t) { return null; }public boolean tom_cmp_fun_sym_Declaration(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Declaration( jtom.adt.tomsignature.types.Declaration t,  int  n) { return null; }public boolean tom_terms_equal_Declaration(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TypeTermDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isTypeTermDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_TypeTermDecl( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomList t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_TypeTermDecl(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_TypeTermDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_TypeTermDecl_keywordList( jtom.adt.tomsignature.types.Declaration t) { return  t.getKeywordList(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_TypeTermDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_TypeListDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isTypeListDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_TypeListDecl( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomList t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_TypeListDecl(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_TypeListDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_TypeListDecl_keywordList( jtom.adt.tomsignature.types.Declaration t) { return  t.getKeywordList(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_TypeListDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_TypeArrayDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isTypeArrayDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_TypeArrayDecl( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomList t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_TypeArrayDecl(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_TypeArrayDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_TypeArrayDecl_keywordList( jtom.adt.tomsignature.types.Declaration t) { return  t.getKeywordList(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_TypeArrayDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetFunctionSymbolDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isGetFunctionSymbolDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_GetFunctionSymbolDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TargetLanguage t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_GetFunctionSymbolDecl(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetFunctionSymbolDecl_termArg( jtom.adt.tomsignature.types.Declaration t) { return  t.getTermArg(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_GetFunctionSymbolDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_GetFunctionSymbolDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetSubtermDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isGetSubtermDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_GetSubtermDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TargetLanguage t2,  jtom.adt.tomsignature.types.Option t3) { return  getTomSignatureFactory().makeDeclaration_GetSubtermDecl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSubtermDecl_termArg( jtom.adt.tomsignature.types.Declaration t) { return  t.getTermArg(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSubtermDecl_variable( jtom.adt.tomsignature.types.Declaration t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_GetSubtermDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_GetSubtermDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_IsFsymDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isIsFsymDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_IsFsymDecl( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TargetLanguage t2,  jtom.adt.tomsignature.types.Option t3) { return  getTomSignatureFactory().makeDeclaration_IsFsymDecl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_IsFsymDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_IsFsymDecl_variable( jtom.adt.tomsignature.types.Declaration t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_IsFsymDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_IsFsymDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetSlotDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isGetSlotDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_GetSlotDecl( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomName t1,  jtom.adt.tomsignature.types.TomTerm t2,  jtom.adt.tomsignature.types.TargetLanguage t3,  jtom.adt.tomsignature.types.Option t4) { return  getTomSignatureFactory().makeDeclaration_GetSlotDecl(t0, t1, t2, t3, t4); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_slotName( jtom.adt.tomsignature.types.Declaration t) { return  t.getSlotName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSlotDecl_variable( jtom.adt.tomsignature.types.Declaration t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_GetSlotDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_GetSlotDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_CompareFunctionSymbolDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isCompareFunctionSymbolDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_CompareFunctionSymbolDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TargetLanguage t2,  jtom.adt.tomsignature.types.Option t3) { return  getTomSignatureFactory().makeDeclaration_CompareFunctionSymbolDecl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_CompareFunctionSymbolDecl_symbolArg1( jtom.adt.tomsignature.types.Declaration t) { return  t.getSymbolArg1(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_CompareFunctionSymbolDecl_symbolArg2( jtom.adt.tomsignature.types.Declaration t) { return  t.getSymbolArg2(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_CompareFunctionSymbolDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_CompareFunctionSymbolDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_TermsEqualDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isTermsEqualDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_TermsEqualDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TargetLanguage t2,  jtom.adt.tomsignature.types.Option t3) { return  getTomSignatureFactory().makeDeclaration_TermsEqualDecl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_TermsEqualDecl_termArg1( jtom.adt.tomsignature.types.Declaration t) { return  t.getTermArg1(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_TermsEqualDecl_termArg2( jtom.adt.tomsignature.types.Declaration t) { return  t.getTermArg2(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_TermsEqualDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_TermsEqualDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetHeadDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isGetHeadDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_GetHeadDecl( jtom.adt.tomsignature.types.TomType t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TargetLanguage t2,  jtom.adt.tomsignature.types.Option t3) { return  getTomSignatureFactory().makeDeclaration_GetHeadDecl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_GetHeadDecl_codomain( jtom.adt.tomsignature.types.Declaration t) { return  t.getCodomain(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetHeadDecl_variable( jtom.adt.tomsignature.types.Declaration t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_GetHeadDecl_tlcode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlcode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_GetHeadDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetTailDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isGetTailDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_GetTailDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TargetLanguage t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_GetTailDecl(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetTailDecl_variable( jtom.adt.tomsignature.types.Declaration t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_GetTailDecl_tlcode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlcode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_GetTailDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_IsEmptyDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isIsEmptyDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_IsEmptyDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TargetLanguage t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_IsEmptyDecl(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyDecl_variable( jtom.adt.tomsignature.types.Declaration t) { return  t.getVariable(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_IsEmptyDecl_tlcode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlcode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_IsEmptyDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeEmptyList( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isMakeEmptyList(); }public  jtom.adt.tomsignature.types.Declaration tom_make_MakeEmptyList( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TargetLanguage t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_MakeEmptyList(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyList_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_MakeEmptyList_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_MakeEmptyList_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeAddList( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isMakeAddList(); }public  jtom.adt.tomsignature.types.Declaration tom_make_MakeAddList( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2,  jtom.adt.tomsignature.types.TargetLanguage t3,  jtom.adt.tomsignature.types.Option t4) { return  getTomSignatureFactory().makeDeclaration_MakeAddList(t0, t1, t2, t3, t4); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_MakeAddList_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varElt( jtom.adt.tomsignature.types.Declaration t) { return  t.getVarElt(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varList( jtom.adt.tomsignature.types.Declaration t) { return  t.getVarList(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_MakeAddList_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_MakeAddList_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetElementDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isGetElementDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_GetElementDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TargetLanguage t2,  jtom.adt.tomsignature.types.Option t3) { return  getTomSignatureFactory().makeDeclaration_GetElementDecl(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetElementDecl_kid1( jtom.adt.tomsignature.types.Declaration t) { return  t.getKid1(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetElementDecl_kid2( jtom.adt.tomsignature.types.Declaration t) { return  t.getKid2(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_GetElementDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_GetElementDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetSizeDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isGetSizeDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_GetSizeDecl( jtom.adt.tomsignature.types.TomTerm t0,  jtom.adt.tomsignature.types.TargetLanguage t1,  jtom.adt.tomsignature.types.Option t2) { return  getTomSignatureFactory().makeDeclaration_GetSizeDecl(t0, t1, t2); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_GetSizeDecl_kid1( jtom.adt.tomsignature.types.Declaration t) { return  t.getKid1(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_GetSizeDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_GetSizeDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeEmptyArray( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isMakeEmptyArray(); }public  jtom.adt.tomsignature.types.Declaration tom_make_MakeEmptyArray( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TargetLanguage t2,  jtom.adt.tomsignature.types.Option t3) { return  getTomSignatureFactory().makeDeclaration_MakeEmptyArray(t0, t1, t2, t3); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyArray_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MakeEmptyArray_varSize( jtom.adt.tomsignature.types.Declaration t) { return  t.getVarSize(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_MakeEmptyArray_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_MakeEmptyArray_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeAddArray( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isMakeAddArray(); }public  jtom.adt.tomsignature.types.Declaration tom_make_MakeAddArray( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomTerm t1,  jtom.adt.tomsignature.types.TomTerm t2,  jtom.adt.tomsignature.types.TargetLanguage t3,  jtom.adt.tomsignature.types.Option t4) { return  getTomSignatureFactory().makeDeclaration_MakeAddArray(t0, t1, t2, t3, t4); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_MakeAddArray_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varElt( jtom.adt.tomsignature.types.Declaration t) { return  t.getVarElt(); }public  jtom.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varList( jtom.adt.tomsignature.types.Declaration t) { return  t.getVarList(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_MakeAddArray_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_MakeAddArray_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isMakeDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_MakeDecl( jtom.adt.tomsignature.types.TomName t0,  jtom.adt.tomsignature.types.TomType t1,  jtom.adt.tomsignature.types.TomList t2,  jtom.adt.tomsignature.types.TargetLanguage t3,  jtom.adt.tomsignature.types.Option t4) { return  getTomSignatureFactory().makeDeclaration_MakeDecl(t0, t1, t2, t3, t4); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_MakeDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public  jtom.adt.tomsignature.types.TomType tom_get_slot_MakeDecl_astType( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstType(); }public  jtom.adt.tomsignature.types.TomList tom_get_slot_MakeDecl_args( jtom.adt.tomsignature.types.Declaration t) { return  t.getArgs(); }public  jtom.adt.tomsignature.types.TargetLanguage tom_get_slot_MakeDecl_tlCode( jtom.adt.tomsignature.types.Declaration t) { return  t.getTlCode(); }public  jtom.adt.tomsignature.types.Option tom_get_slot_MakeDecl_orgTrack( jtom.adt.tomsignature.types.Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_SymbolDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isSymbolDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_SymbolDecl( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeDeclaration_SymbolDecl(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_SymbolDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public boolean tom_is_fun_sym_ListSymbolDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isListSymbolDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_ListSymbolDecl( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeDeclaration_ListSymbolDecl(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_ListSymbolDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public boolean tom_is_fun_sym_ArraySymbolDecl( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isArraySymbolDecl(); }public  jtom.adt.tomsignature.types.Declaration tom_make_ArraySymbolDecl( jtom.adt.tomsignature.types.TomName t0) { return  getTomSignatureFactory().makeDeclaration_ArraySymbolDecl(t0); }public  jtom.adt.tomsignature.types.TomName tom_get_slot_ArraySymbolDecl_astName( jtom.adt.tomsignature.types.Declaration t) { return  t.getAstName(); }public boolean tom_is_fun_sym_EmptyDeclaration( jtom.adt.tomsignature.types.Declaration t) { return  (t!= null) && t.isEmptyDeclaration(); }public  jtom.adt.tomsignature.types.Declaration tom_make_EmptyDeclaration() { return  getTomSignatureFactory().makeDeclaration_EmptyDeclaration(); }  
    //--------------------------
        
    public String currentFile(){
        return targetparser.getCurrentFile();
    }

    // the default-mode parser
    private NewTargetParser targetparser;
    protected NewBQParser bqparser;
    private NewTomLexer tomlexer;

    private Logger logger;

    private StringBuffer text = new StringBuffer("");
    
    private int lastLine; 

    private TomList debuggedStructureList = null;

    private TomFactory tomFactory;

    public NewTomParser(ParserSharedInputState state, NewTargetParser target){
        this(state);
        this.targetparser = target;
        this.debuggedStructureList = tom_make_emptyTomList();
        this.bqparser = new NewBQParser(state,this);
        this.tomFactory = new TomFactory();
        this.tomlexer = (NewTomLexer) selector().getStream("tomlexer");

        logger = Logger.getLogger(getClass().getName());
    }



    private final TomSignatureFactory getTomSignatureFactory(){
        return tsf();
    }
    
    public PluginPlatform getPluginPlatform(){
        return PluginPlatform.getInstance();
    }
    
    private TomEnvironment environment() {
       // return getPluginPlatform().getEnvironment();
        return TomEnvironment.getInstance();
    }

    private TomSignatureFactory tsf(){
        return environment().getTomSignatureFactory();
    }
    
    private jtom.tools.ASTFactory ast() {
        return environment().getASTFactory();
    }

    private void putType(String name, TomType type) {
        symbolTable().putType(name,type);
    }

    private void putSymbol(String name, TomSymbol symbol) {
        symbolTable().putSymbol(name,symbol);
    }

    private SymbolTable symbolTable() {
        return environment().getSymbolTable();
    }
    
    public TomStructureTable getStructTable() {
        return tom_make_StructTable(debuggedStructureList);
    }
/*
    public NewTomBackQuoteParser tomBQ(){
        return NewTomBackQuoteParser.getInstance();
    }
*/

    private int getLine(){
        return tomlexer.getLine();
    }
    
    public void pushLine(int line){
        targetparser.pushLine(line);
    }

    public void pushColumn(int column){
        targetparser.pushColumn(column);
    }

    public void addTargetCode(Token t){
        targetparser.addTargetCode(t);
    }

    private void setLastLine(int line){
        lastLine = line;
    }

    private void clearText(){
        text.delete(0,text.length());
    }

    protected TokenStreamSelector selector(){
        return targetparser.getSelector();
    }
    
    void p(String s){
        System.out.println(s);
    }

protected NewTomParser(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
}

public NewTomParser(TokenBuffer tokenBuf) {
  this(tokenBuf,1);
}

protected NewTomParser(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
}

public NewTomParser(TokenStream lexer) {
  this(lexer,1);
}

public NewTomParser(ParserSharedInputState state) {
  super(state,1);
  tokenNames = _tokenNames;
}

	public final Token  constant() throws RecognitionException, TokenStreamException {
		Token result;
		
		Token  t1 = null;
		Token  t2 = null;
		Token  t3 = null;
		Token  t4 = null;
		Token  t5 = null;
		Token  t6 = null;
		
		result = null;
		
		
		{
		switch ( LA(1)) {
		case NUM_INT:
		{
			t1 = LT(1);
			match(NUM_INT);
			if ( inputState.guessing==0 ) {
				result = t1;
			}
			break;
		}
		case CHARACTER:
		{
			t2 = LT(1);
			match(CHARACTER);
			if ( inputState.guessing==0 ) {
				result = t2;
			}
			break;
		}
		case STRING:
		{
			t3 = LT(1);
			match(STRING);
			if ( inputState.guessing==0 ) {
				result = t3;
			}
			break;
		}
		case NUM_FLOAT:
		{
			t4 = LT(1);
			match(NUM_FLOAT);
			if ( inputState.guessing==0 ) {
				result = t4;
			}
			break;
		}
		case NUM_LONG:
		{
			t5 = LT(1);
			match(NUM_LONG);
			if ( inputState.guessing==0 ) {
				result = t5;
			}
			break;
		}
		case NUM_DOUBLE:
		{
			t6 = LT(1);
			match(NUM_DOUBLE);
			if ( inputState.guessing==0 ) {
				result = t6;
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return result;
	}
	
	public final Instruction  matchConstruct(
		Option ot
	) throws RecognitionException, TokenStreamException, TomException {
		Instruction result;
		
		Token  t = null;
		
		result = null;
		OptionList optionList = tom_cons_list_concOption(ot,tom_empty_list_concOption());
		StringBuffer debugKey = new StringBuffer(currentFile() + ot.getLine());
		
		LinkedList argumentList = new LinkedList();
		LinkedList patternActionList = new LinkedList();
		
		
		{
		match(LPAREN);
		matchArguments(argumentList);
		match(RPAREN);
		match(LBRACE);
		{
		_loop6:
		do {
			if ((_tokenSet_0.member(LA(1)))) {
				patternAction(patternActionList,debugKey);
			}
			else {
				break _loop6;
			}
			
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		if ( inputState.guessing==0 ) {
			
			result = tom_make_Match(
			tom_make_SubjectList(ast().makeList(argumentList)),
			tom_make_PatternList(ast().makeList(patternActionList)),
			optionList
			)
			
			
			
			;
			
			if(((Boolean)getPluginPlatform().getOptionValue("debug")).booleanValue()){
			debuggedStructureList = (TomList) debuggedStructureList.append(result);
			}
			
			// update for new target block...
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			
			// Match is finished : pop the tomlexer and return in
			// the target parser.  
			selector().pop(); 
			
		}
		}
		return result;
	}
	
	public final void matchArguments(
		LinkedList list
	) throws RecognitionException, TokenStreamException {
		
		
		{
		matchArgument(list);
		{
		_loop10:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				matchArgument(list);
			}
			else {
				break _loop10;
			}
			
		} while (true);
		}
		}
	}
	
	public final void patternAction(
		LinkedList list, StringBuffer debugKey
	) throws RecognitionException, TokenStreamException, TomException {
		
		Token  label = null;
		Token  t = null;
		
		LinkedList matchPatternList = new LinkedList();
		LinkedList listOfMatchPatternList = new LinkedList();
		LinkedList listTextPattern = new LinkedList();
		LinkedList listOrgTrackPattern = new LinkedList();
		LinkedList blockList = new LinkedList();
		
		Option option = null;
		
		clearText();
		
		
		{
		{
		boolean synPredMatched18 = false;
		if (((LA(1)==ALL_ID))) {
			int _m18 = mark();
			synPredMatched18 = true;
			inputState.guessing++;
			try {
				{
				match(ALL_ID);
				match(COLON);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched18 = false;
			}
			rewind(_m18);
			inputState.guessing--;
		}
		if ( synPredMatched18 ) {
			label = LT(1);
			match(ALL_ID);
			match(COLON);
		}
		else if ((_tokenSet_0.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		option=matchPattern(matchPatternList);
		if ( inputState.guessing==0 ) {
			
			listOfMatchPatternList.add(ast().makeList(matchPatternList));
			matchPatternList.clear();
			listTextPattern.add(text.toString());
			clearText();
			listOrgTrackPattern.add(option);
			
		}
		{
		_loop20:
		do {
			if ((LA(1)==ALTERNATIVE)) {
				match(ALTERNATIVE);
				option=matchPattern(matchPatternList);
				if ( inputState.guessing==0 ) {
					
					listOfMatchPatternList.add(ast().makeList(matchPatternList));
					matchPatternList.clear();
					listTextPattern.add(text.toString());
					clearText();
					listOrgTrackPattern.add(option);
					
				}
			}
			else {
				break _loop20;
			}
			
		} while (true);
		}
		match(ARROW);
		t = LT(1);
		match(LBRACE);
		if ( inputState.guessing==0 ) {
			
			// update for new target block
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			
			if(((Boolean)getPluginPlatform().getOptionValue("debug")).booleanValue()){
			blockList.add(tom_make_ITL(
			"jtom.debug.TomDebugger.debugger.patternSuccess(\""
			+debugKey
			+"\");\n")
			
			
			
			);
			if(((Boolean)getPluginPlatform().getOptionValue("memory")).booleanValue()){
			blockList.add(
			tom_make_ITL("jtom.debug.TomDebugger.debugger.emptyStack();\n")
			);
			}
			}
			
			// actions in target language : call the target lexer and
			// call the target parser
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.targetLanguage(blockList);
			
			// target parser finished : pop the target lexer
			selector().pop();
			
			blockList.add(tlCode);
			OptionList optionList = tom_make_emptyOptionList();
			
			if(label != null){
			optionList = tom_cons_list_concOption(tom_make_Label(tom_make_Name(label.getText())),tom_empty_list_concOption());
			}
			
			TomList patterns = null;
			String patternText = null;
			for(int i=0 ;  i<listOfMatchPatternList.size() ; i++) {
			patterns = (TomList) listOfMatchPatternList.get(i);
			patternText = (String) listTextPattern.get(i);
			
			//TODO solve with xmlterm
			//if (patternText == null) patternText = "";
			
			optionList = tom_append_list_concOption(optionList,tom_cons_list_concOption( 
			(Option) listOrgTrackPattern.get(i),tom_cons_list_concOption(
			tom_make_OriginalText(tom_make_Name(patternText))
			,tom_empty_list_concOption())))
			
			
			
			;
			
			list.add(tom_make_PatternAction(
			tom_make_TermList(patterns),
			tom_make_AbstractBlock(ast().makeInstructionList(blockList)),
			optionList)
			
			
			
			);
			}
			
		}
		}
	}
	
	public final void matchArgument(
		LinkedList list
	) throws RecognitionException, TokenStreamException {
		
		Token  type = null;
		Token  name = null;
		
		{
		type = LT(1);
		match(ALL_ID);
		{
		switch ( LA(1)) {
		case BACKQUOTE:
		{
			match(BACKQUOTE);
			break;
		}
		case ALL_ID:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		name = LT(1);
		match(ALL_ID);
		}
		if ( inputState.guessing==0 ) {
			
			list.add(tom_make_TLVar(name.getText(),tom_make_TomTypeAlone(type.getText())));
			
		}
	}
	
	public final Option  matchPattern(
		LinkedList list
	) throws RecognitionException, TokenStreamException, TomException {
		Option result;
		
		
		result = null;
		TomTerm term = null;
		
		
		{
		term=annotedTerm();
		if ( inputState.guessing==0 ) {
			
			list.add(term);
			result = tom_make_OriginTracking(tom_make_Name("Pattern"),lastLine,tom_make_Name(currentFile()));
			
		}
		{
		_loop24:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				if ( inputState.guessing==0 ) {
					text.append('\n');
				}
				term=annotedTerm();
				if ( inputState.guessing==0 ) {
					list.add(term);
				}
			}
			else {
				break _loop24;
			}
			
		} while (true);
		}
		}
		return result;
	}
	
	public final TomTerm  annotedTerm() throws RecognitionException, TokenStreamException, TomException {
		TomTerm result;
		
		Token  name = null;
		
		result = null;
		TomName annotedName = null;
		int line = 0;
		
		
		{
		{
		boolean synPredMatched36 = false;
		if (((LA(1)==ALL_ID))) {
			int _m36 = mark();
			synPredMatched36 = true;
			inputState.guessing++;
			try {
				{
				match(ALL_ID);
				match(AT);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched36 = false;
			}
			rewind(_m36);
			inputState.guessing--;
		}
		if ( synPredMatched36 ) {
			name = LT(1);
			match(ALL_ID);
			match(AT);
			if ( inputState.guessing==0 ) {
				
				text.append(name.getText());
				text.append('@');
				annotedName = tom_make_Name(name.getText());
				line = name.getLine();
				
			}
		}
		else if ((_tokenSet_0.member(LA(1)))) {
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		result=plainTerm(annotedName,line);
		}
		return result;
	}
	
	public final Instruction  ruleConstruct(
		Option orgTrack
	) throws RecognitionException, TokenStreamException, TomException {
		Instruction result;
		
		Token  t = null;
		
		result = null;
		TomRuleList ruleList = tom_make_emptyTomRuleList();
		TomTerm lhs = null, rhs = null, pattern = null, subject = null;
		TomList listOfLhs = tom_make_emptyTomList();
		InstructionList conditionList = tom_make_emptyInstructionList();
		TomName orgText = null;
		
		clearText();
		
		
		match(LBRACE);
		{
		_loop31:
		do {
			if ((_tokenSet_0.member(LA(1)))) {
				lhs=annotedTerm();
				if ( inputState.guessing==0 ) {
					listOfLhs = tom_cons_list_concTomTerm(lhs,tom_empty_list_concTomTerm());
				}
				{
				_loop28:
				do {
					if ((LA(1)==ALTERNATIVE)) {
						match(ALTERNATIVE);
						if ( inputState.guessing==0 ) {
							text.append('|');
						}
						lhs=annotedTerm();
						if ( inputState.guessing==0 ) {
							listOfLhs = (TomList) listOfLhs.append(lhs);
						}
					}
					else {
						break _loop28;
					}
					
				} while (true);
				}
				match(ARROW);
				if ( inputState.guessing==0 ) {
					orgText = tom_make_Name(text.toString());
				}
				rhs=plainTerm(null,0);
				{
				_loop30:
				do {
					switch ( LA(1)) {
					case WHERE:
					{
						match(WHERE);
						pattern=annotedTerm();
						match(AFFECT);
						subject=annotedTerm();
						if ( inputState.guessing==0 ) {
							conditionList = (InstructionList) conditionList.append(tom_make_MatchingCondition(pattern,subject));
						}
						break;
					}
					case IF:
					{
						match(IF);
						pattern=annotedTerm();
						match(DOUBLEEQ);
						subject=annotedTerm();
						if ( inputState.guessing==0 ) {
							conditionList = (InstructionList) conditionList.append(tom_make_EqualityCondition(pattern,subject));
						}
						break;
					}
					default:
					{
						break _loop30;
					}
					}
				} while (true);
				}
				if ( inputState.guessing==0 ) {
					
					// get the last token's line
					int line = lastLine;
					Option ot = tom_make_OriginTracking(
					tom_make_Name("Pattern"),
					line,
					tom_make_Name(currentFile())
					)
					
					
					
					;
					OptionList optionList = tom_cons_list_concOption(ot,tom_cons_list_concOption(tom_make_OriginalText(orgText),tom_empty_list_concOption()));
					
					while(! listOfLhs.isEmpty()){
					ruleList = (TomRuleList) ruleList.append(
					tom_make_RewriteRule(
					tom_make_Term(listOfLhs.getHead()),
					tom_make_Term(rhs),
					conditionList,
					optionList
					)
					
					
					
					
					
					);
					listOfLhs = listOfLhs.getTail();
					}
					
					conditionList = tom_make_emptyInstructionList();
					clearText();
					
				}
			}
			else {
				break _loop31;
			}
			
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		if ( inputState.guessing==0 ) {
			
			
			// update for new target block...
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			
			result = tom_make_RuleSet(ruleList,orgTrack);
			
			if(((Boolean)getPluginPlatform().getOptionValue("debug")).booleanValue()){
			debuggedStructureList = (TomList) debuggedStructureList.append(result);
			}
			
			// %rule finished: go back in target parser.
			selector().pop();
			
		}
		return result;
	}
	
	public final TomTerm  plainTerm(
		TomName astAnnotedName, int line
	) throws RecognitionException, TokenStreamException, TomException {
		TomTerm result;
		
		
		result = null;
		LinkedList constraintList = new LinkedList();
		LinkedList optionList = new LinkedList();
		LinkedList secondOptionList = new LinkedList();
		TomTerm term = null;
		NameList nameList = tom_make_emptyNameList();
		TomName name = null;
		LinkedList list = new LinkedList();
		boolean implicit = false;
		boolean withArgs = false;
		
		Constraint annotedName = 
		(astAnnotedName == null)?null:ast().makeAssignTo(astAnnotedName, line, currentFile());
		if(annotedName != null)
		constraintList.add(annotedName);
		
		
		{
		if ((_tokenSet_1.member(LA(1)))) {
			result=xmlTerm(optionList, constraintList);
		}
		else {
			boolean synPredMatched40 = false;
			if (((LA(1)==ALL_ID||LA(1)==UNDERSCORE))) {
				int _m40 = mark();
				synPredMatched40 = true;
				inputState.guessing++;
				try {
					{
					variableStar(null,null);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched40 = false;
				}
				rewind(_m40);
				inputState.guessing--;
			}
			if ( synPredMatched40 ) {
				result=variableStar(optionList,constraintList);
			}
			else if ((LA(1)==UNDERSCORE)) {
				result=placeHolder(optionList,constraintList);
			}
			else if (((_tokenSet_2.member(LA(1))))&&(LA(2) != LPAREN && LA(2) != LBRACKET)) {
				name=headSymbol(optionList);
				if ( inputState.guessing==0 ) {
					
					nameList = (NameList) nameList.append(name);
					result = tom_make_Appl(
					ast().makeOptionList(optionList),
					nameList,
					ast().makeList(list),
					ast().makeConstraintList(constraintList)
					)
					
					
					
					
					;
					
				}
			}
			else if ((_tokenSet_2.member(LA(1)))) {
				name=headSymbol(optionList);
				if ( inputState.guessing==0 ) {
					nameList = (NameList) nameList.append(name);
				}
				implicit=args(list,secondOptionList);
				if ( inputState.guessing==0 ) {
					
					if(list.isEmpty())
					optionList.add(tom_make_Constructor(nameList));
					if(implicit)
					result = tom_make_RecordAppl(
					ast().makeOptionList(optionList),
					nameList,
					ast().makeList(list),
					ast().makeConstraintList(constraintList)
					)
					
					
					
					
					;
					else 
					result = tom_make_Appl(
					ast().makeOptionList(optionList),
					nameList,
					ast().makeList(list),
					ast().makeConstraintList(constraintList)
					)
					
					
					
					
					;
					
				}
			}
			else if (((LA(1)==LPAREN))&&(LA(3) == ALTERNATIVE)) {
				nameList=headSymbolList(optionList);
				{
				boolean synPredMatched43 = false;
				if (((LA(1)==LPAREN||LA(1)==LBRACKET))) {
					int _m43 = mark();
					synPredMatched43 = true;
					inputState.guessing++;
					try {
						{
						args(null,null);
						}
					}
					catch (RecognitionException pe) {
						synPredMatched43 = false;
					}
					rewind(_m43);
					inputState.guessing--;
				}
				if ( synPredMatched43 ) {
					implicit=args(list,secondOptionList);
					if ( inputState.guessing==0 ) {
						withArgs = true;
					}
				}
				else if ((_tokenSet_3.member(LA(1)))) {
				}
				else {
					throw new NoViableAltException(LT(1), getFilename());
				}
				
				}
				if ( inputState.guessing==0 ) {
					
					if(withArgs && list.isEmpty())
					optionList.add(tom_make_Constructor(nameList));
					if(implicit)
					result = tom_make_RecordAppl(
					ast().makeOptionList(optionList),
					nameList,
					ast().makeList(list),
					ast().makeConstraintList(constraintList)
					)
					
					
					
					
					;
					else 
					result = tom_make_Appl(
					ast().makeOptionList(optionList),
					nameList,
					ast().makeList(list),
					ast().makeConstraintList(constraintList)
					)
					
					
					
					
					;
					
				}
			}
			else if ((LA(1)==LPAREN||LA(1)==LBRACKET)) {
				implicit=args(list,secondOptionList);
				if ( inputState.guessing==0 ) {
					
					nameList = tom_cons_list_concTomName(tom_make_Name(""),tom_empty_list_concTomName());
					optionList.addAll(secondOptionList);
					result = tom_make_Appl(
					ast().makeOptionList(optionList),
					nameList,
					ast().makeList(list),
					ast().makeConstraintList(constraintList)
					)
					
					
					
					
					;
					
				}
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			return result;
		}
		
	public final TomTerm  xmlTerm(
		LinkedList optionList, LinkedList constraintList
	) throws RecognitionException, TokenStreamException, TomException {
		TomTerm result;
		
		Token  t = null;
		
		result = null;
		TomTerm arg1, arg2;
		LinkedList pairSlotList = new LinkedList();
		LinkedList attributeList = new LinkedList();
		LinkedList childs = new LinkedList();
		String keyword = "";
		boolean implicit;
		NameList nameList, closingNameList;
		OptionList option = null;
		ConstraintList constraint;
		
		
		{
		switch ( LA(1)) {
		case XML_START:
		{
			match(XML_START);
			if ( inputState.guessing==0 ) {
				text.append("<");
			}
			nameList=xmlNameList(optionList, true);
			implicit=xmlAttributeList(attributeList);
			if ( inputState.guessing==0 ) {
				
				if(implicit) { optionList.add(tom_make_ImplicitXMLAttribut()); }
				
			}
			{
			switch ( LA(1)) {
			case XML_CLOSE_SINGLETON:
			{
				match(XML_CLOSE_SINGLETON);
				if ( inputState.guessing==0 ) {
					
					text.append("\\>");
					option =  ast().makeOptionList(optionList);
					
				}
				break;
			}
			case XML_CLOSE:
			{
				match(XML_CLOSE);
				if ( inputState.guessing==0 ) {
					text.append(">");
				}
				implicit=xmlChilds(childs);
				match(XML_START_ENDING);
				if ( inputState.guessing==0 ) {
					text.append("</");
				}
				closingNameList=xmlNameList(optionList, false);
				t = LT(1);
				match(XML_CLOSE);
				if ( inputState.guessing==0 ) {
					text.append(">");
				}
				if ( inputState.guessing==0 ) {
					
					if(!nameList.equals(closingNameList)) {
					String found="", expected ="";
					while(!nameList.isEmpty()) {
					expected += "|"+nameList.getHead().getString();
					nameList = nameList.getTail();
					}
					while(!closingNameList.isEmpty()) {
					found += "|"+closingNameList.getHead().getString();
					closingNameList = closingNameList.getTail();
					}
					//throw new TomException("Error on closing XML pattern: expecting '"+ expected.substring(1) +"' but got '"+found.substring(1)+ "' at line "+getLine());
					// return null;
					// TODO find the orgTrack of the match
					logger.log( Level.SEVERE,
					"MalformedXMLTerm",
					new Object[]{currentFile(), new Integer(getLine()), 
					"match", new Integer(getLine()),
					expected.substring(1), found.substring(1)} );
					}
					if(implicit) {
					// Special case when XMLChilds() is reduced to a singleton
					// when XMLChilds() is reduced to a singleton
					// Appl(...,Name(""),args)
					if(tomFactory.isExplicitTermList(childs)) {
					childs = tomFactory.metaEncodeExplicitTermList(symbolTable(), (TomTerm)childs.getFirst());
					} else {
					optionList.add(tom_make_ImplicitXMLChild());
					}
					}
					option = ast().makeOptionList(optionList);    
					
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			if ( inputState.guessing==0 ) {
				
				result = tom_make_XMLAppl(
				option,
				nameList,
				ast().makeList(attributeList),
				ast().makeList(childs),
				ast().makeConstraintList(constraintList))
				
				
				
				
				;
				
			}
			break;
		}
		case XML_TEXT:
		{
			match(XML_TEXT);
			match(LPAREN);
			arg1=annotedTerm();
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				
				keyword = Constants.TEXT_NODE;
				pairSlotList.add(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_DATA),arg1));
				
				optionList.add(tom_make_OriginTracking(tom_make_Name(keyword),getLine(),tom_make_Name( currentFile())));
				option = ast().makeOptionList(optionList);
				constraint = ast().makeConstraintList(constraintList);
				nameList = tom_cons_list_concTomName(tom_make_Name(keyword),tom_empty_list_concTomName());
				result = tom_make_RecordAppl(option,
				nameList,
				ast().makeList(pairSlotList),
				constraint)
				
				
				;
				
			}
			break;
		}
		case XML_COMMENT:
		{
			match(XML_COMMENT);
			match(LPAREN);
			arg1=termStringIdentifier(null);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				
				keyword = Constants.COMMENT_NODE;
				pairSlotList.add(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_DATA),arg1));
				
				optionList.add(tom_make_OriginTracking(tom_make_Name(keyword),getLine(),tom_make_Name( currentFile())));
				option = ast().makeOptionList(optionList);
				constraint = ast().makeConstraintList(constraintList);
				nameList = tom_cons_list_concTomName(tom_make_Name(keyword),tom_empty_list_concTomName());
				result = tom_make_RecordAppl(option,
				nameList,
				ast().makeList(pairSlotList),
				constraint)
				
				
				;
				
			}
			break;
		}
		case XML_PROC:
		{
			match(XML_PROC);
			match(LPAREN);
			arg1=termStringIdentifier(null);
			match(COMMA);
			arg2=termStringIdentifier(null);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				
				keyword = Constants.PROCESSING_INSTRUCTION_NODE;
				pairSlotList.add(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_TARGET),arg1));
				pairSlotList.add(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_DATA),arg2));
				
				optionList.add(tom_make_OriginTracking(tom_make_Name(keyword),getLine(),tom_make_Name( currentFile())));
				option = ast().makeOptionList(optionList);
				constraint = ast().makeConstraintList(constraintList);
				nameList = tom_cons_list_concTomName(tom_make_Name(keyword),tom_empty_list_concTomName());
				result = tom_make_RecordAppl(option,
				nameList,
				ast().makeList(pairSlotList),
				constraint)
				
				
				;
				
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return result;
	}
	
	public final TomTerm  variableStar(
		LinkedList optionList, LinkedList constraintList
	) throws RecognitionException, TokenStreamException {
		TomTerm result;
		
		Token  name1 = null;
		Token  name2 = null;
		Token  t = null;
		
		result = null; 
		String name = null;
		int line = 0;
		OptionList options = null;
		ConstraintList constraints = null;
		
		
		{
		{
		switch ( LA(1)) {
		case ALL_ID:
		{
			name1 = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				name = name1.getText();
				line = name1.getLine();
				
			}
			break;
		}
		case UNDERSCORE:
		{
			name2 = LT(1);
			match(UNDERSCORE);
			if ( inputState.guessing==0 ) {
				
				name = name2.getText();
				line = name2.getLine();
				
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		t = LT(1);
		match(STAR);
		if ( inputState.guessing==0 ) {
			
			text.append(name);
			text.append(t.getText());
			
			// setting line number for origin tracking
			// in %rule construct
			setLastLine(t.getLine());
			
			optionList.add(tom_make_OriginTracking(tom_make_Name(name),line,tom_make_Name(currentFile())));
			options = ast().makeOptionList(optionList);
			constraints = ast().makeConstraintList(constraintList);
			if(name1 == null)
			result = tom_make_UnamedVariableStar(
			options,
			tom_make_TomTypeAlone("unknown type"),
			constraints
			)
			
			
			
			;
			else
			result = tom_make_VariableStar(
			options,
			tom_make_Name(name),
			tom_make_TomTypeAlone("unknown type"),
			constraints
			)
			
			
			
			
			;
			
		}
		}
		return result;
	}
	
	public final TomTerm  placeHolder(
		LinkedList optionList, LinkedList constraintList
	) throws RecognitionException, TokenStreamException {
		TomTerm result;
		
		Token  t = null;
		
		result = null;
		OptionList options = null;
		ConstraintList constraints = null;
		
		
		{
		t = LT(1);
		match(UNDERSCORE);
		if ( inputState.guessing==0 ) {
			
			text.append(t.getText());
			setLastLine(t.getLine());
			
			optionList.add(
			tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()))
			);
			options = ast().makeOptionList(optionList);
			constraints = ast().makeConstraintList(constraintList);
			result = tom_make_Placeholder(options, constraints);
			
		}
		}
		return result;
	}
	
	public final TomName  headSymbol(
		LinkedList optionList
	) throws RecognitionException, TokenStreamException {
		TomName result;
		
		Token  i = null;
		
		result = null; 
		int line = 0;
		String name = null;
		Token t = null;
		
		
		{
		switch ( LA(1)) {
		case ALL_ID:
		{
			i = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				name = i.getText();
				line = i.getLine();
				text.append(name);
				
			}
			break;
		}
		case NUM_INT:
		case CHARACTER:
		case STRING:
		case NUM_FLOAT:
		case NUM_LONG:
		case NUM_DOUBLE:
		{
			t=constant();
			if ( inputState.guessing==0 ) {
				
				name = t.getText();
				line = t.getLine();
				text.append(name);
				
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			
			setLastLine(line);
			result = tom_make_Name(name);
			optionList.add(tom_make_OriginTracking(result,line, tom_make_Name(currentFile())));
			
			if (t != null){
			switch(t.getType()){
			case NUM_INT:
			ast().makeIntegerSymbol(symbolTable(),t.getText(),optionList);
			break;
			case CHARACTER:
			ast().makeCharSymbol(symbolTable(),t.getText(),optionList);
			break;
			case NUM_DOUBLE:
			ast().makeDoubleSymbol(symbolTable(),t.getText(),optionList);
			break;
			case STRING:
			ast().makeStringSymbol(symbolTable(),t.getText(),optionList);
			break;
			default:
			}
			}
			
		}
		return result;
	}
	
	public final boolean  args(
		LinkedList list, LinkedList optionList
	) throws RecognitionException, TokenStreamException, TomException {
		boolean result;
		
		Token  t1 = null;
		Token  t2 = null;
		Token  t3 = null;
		Token  t4 = null;
		
		result = false;
		
		
		{
		switch ( LA(1)) {
		case LPAREN:
		{
			t1 = LT(1);
			match(LPAREN);
			if ( inputState.guessing==0 ) {
				text.append('(');
			}
			{
			switch ( LA(1)) {
			case NUM_INT:
			case CHARACTER:
			case STRING:
			case NUM_FLOAT:
			case NUM_LONG:
			case NUM_DOUBLE:
			case LPAREN:
			case ALL_ID:
			case XML_START:
			case XML_TEXT:
			case XML_COMMENT:
			case XML_PROC:
			case LBRACKET:
			case UNDERSCORE:
			{
				termList(list);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			t2 = LT(1);
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				
				// setting line number for origin tracking
				// in %rule construct
				setLastLine(t2.getLine());
				
				text.append(t2.getText());
				
				result = false;
				optionList.add(tom_make_OriginTracking(tom_make_Name(""),t1.getLine(),tom_make_Name(currentFile())));
				
			}
			break;
		}
		case LBRACKET:
		{
			t3 = LT(1);
			match(LBRACKET);
			if ( inputState.guessing==0 ) {
				text.append('[');
			}
			{
			switch ( LA(1)) {
			case ALL_ID:
			{
				pairList(list);
				break;
			}
			case RBRACKET:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			t4 = LT(1);
			match(RBRACKET);
			if ( inputState.guessing==0 ) {
				
				// setting line number for origin tracking
				// in %rule construct
				setLastLine(t4.getLine());
				text.append(t4.getText());
				
				result = true;
				optionList.add(tom_make_OriginTracking(tom_make_Name(""),t3.getLine(),tom_make_Name(currentFile())));
				
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return result;
	}
	
	public final NameList  headSymbolList(
		LinkedList optionList
	) throws RecognitionException, TokenStreamException {
		NameList result;
		
		Token  t = null;
		
		result = tom_make_emptyNameList();
		TomName name = null;
		
		
		{
		match(LPAREN);
		if ( inputState.guessing==0 ) {
			text.append('(');
		}
		name=headSymbol(optionList);
		if ( inputState.guessing==0 ) {
			result = (NameList) result.append(name);
		}
		match(ALTERNATIVE);
		if ( inputState.guessing==0 ) {
			text.append('|');
		}
		name=headSymbol(optionList);
		if ( inputState.guessing==0 ) {
			result = (NameList) result.append(name);
		}
		{
		_loop102:
		do {
			if ((LA(1)==ALTERNATIVE)) {
				match(ALTERNATIVE);
				if ( inputState.guessing==0 ) {
					text.append('|');
				}
				name=headSymbol(optionList);
				if ( inputState.guessing==0 ) {
					result = (NameList) result.append(name);
				}
			}
			else {
				break _loop102;
			}
			
		} while (true);
		}
		t = LT(1);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			text.append(t.getText());
			setLastLine(t.getLine());                
			
		}
		}
		return result;
	}
	
	public final NameList  xmlNameList(
		LinkedList optionList, boolean needOrgTrack
	) throws RecognitionException, TokenStreamException, TomException {
		NameList result;
		
		Token  name = null;
		Token  name2 = null;
		Token  name3 = null;
		Token  name4 = null;
		
		result = tom_make_emptyNameList();
		StringBuffer XMLName = new StringBuffer("");
		int decLine = 0;
		
		
		{
		switch ( LA(1)) {
		case ALL_ID:
		{
			name = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				text.append(name.getText());
				XMLName.append(name.getText());
				decLine = name.getLine();
				result = tom_cons_list_concTomName(tom_make_Name(name.getText()),tom_empty_list_concTomName());
				
			}
			break;
		}
		case UNDERSCORE:
		{
			name2 = LT(1);
			match(UNDERSCORE);
			if ( inputState.guessing==0 ) {
				
				text.append(name2.getText());
				XMLName.append(name2.getText());
				decLine = name2.getLine();
				result = tom_cons_list_concTomName(tom_make_Name(name2.getText()),tom_empty_list_concTomName());
				
			}
			break;
		}
		case LPAREN:
		{
			match(LPAREN);
			name3 = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				text.append(name3.getText());
				XMLName.append(name3.getText());
				decLine = name3.getLine();
				result = tom_cons_list_concTomName(tom_make_Name(name3.getText()),tom_empty_list_concTomName());
				
			}
			{
			_loop68:
			do {
				if ((LA(1)==ALTERNATIVE)) {
					match(ALTERNATIVE);
					name4 = LT(1);
					match(ALL_ID);
					if ( inputState.guessing==0 ) {
						
						text.append("|"+name4.getText());
						XMLName.append("|"+name4.getText());
						result = (NameList)result.append(tom_make_Name(name4.getText()));
						
					}
				}
				else {
					break _loop68;
				}
				
			} while (true);
			}
			match(RPAREN);
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			
			if(needOrgTrack) {
			optionList.add(tom_make_OriginTracking(tom_make_Name(XMLName.toString()),
			decLine,
			tom_make_Name(currentFile()))
			
			);
			}
			
		}
		return result;
	}
	
	public final boolean  xmlAttributeList(
		LinkedList list
	) throws RecognitionException, TokenStreamException, TomException {
		boolean result;
		
		
		result = false;
		TomTerm term;
		
		
		{
		switch ( LA(1)) {
		case LBRACKET:
		{
			match(LBRACKET);
			if ( inputState.guessing==0 ) {
				text.append("[");
			}
			{
			switch ( LA(1)) {
			case ALL_ID:
			case UNDERSCORE:
			{
				term=xmlAttribute();
				if ( inputState.guessing==0 ) {
					list.add(term);
				}
				{
				_loop51:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						if ( inputState.guessing==0 ) {
							text.append("(");
						}
						term=xmlAttribute();
						if ( inputState.guessing==0 ) {
							list.add(term);
						}
					}
					else {
						break _loop51;
					}
					
				} while (true);
				}
				break;
			}
			case RBRACKET:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(RBRACKET);
			if ( inputState.guessing==0 ) {
				
				text.append("]");
				result = true;
				
			}
			break;
		}
		case LPAREN:
		{
			match(LPAREN);
			if ( inputState.guessing==0 ) {
				text.append("(");
			}
			{
			switch ( LA(1)) {
			case ALL_ID:
			case UNDERSCORE:
			{
				term=xmlAttribute();
				if ( inputState.guessing==0 ) {
					list.add(term);
				}
				{
				_loop54:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						if ( inputState.guessing==0 ) {
							text.append(",");
						}
						term=xmlAttribute();
						if ( inputState.guessing==0 ) {
							list.add(term);
						}
					}
					else {
						break _loop54;
					}
					
				} while (true);
				}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(RPAREN);
			if ( inputState.guessing==0 ) {
				
				text.append(")");
				result = false;
				
			}
			break;
		}
		case ALL_ID:
		case XML_CLOSE_SINGLETON:
		case XML_CLOSE:
		case UNDERSCORE:
		{
			{
			_loop56:
			do {
				if (((LA(1)==ALL_ID||LA(1)==UNDERSCORE))&&(LA(1) != XML_CLOSE)) {
					term=xmlAttribute();
					if ( inputState.guessing==0 ) {
						list.add(term);
					}
				}
				else {
					break _loop56;
				}
				
			} while (true);
			}
			if ( inputState.guessing==0 ) {
				result = true;
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return result;
	}
	
	public final boolean  xmlChilds(
		LinkedList list
	) throws RecognitionException, TokenStreamException, TomException {
		boolean result;
		
		
		result = false;
		LinkedList childs = new LinkedList();
		Iterator it;
		
		
		{
		boolean synPredMatched81 = false;
		if (((LA(1)==LBRACKET))) {
			int _m81 = mark();
			synPredMatched81 = true;
			inputState.guessing++;
			try {
				{
				implicitTermList(null);
				}
			}
			catch (RecognitionException pe) {
				synPredMatched81 = false;
			}
			rewind(_m81);
			inputState.guessing--;
		}
		if ( synPredMatched81 ) {
			result=implicitTermList(childs);
		}
		else if ((_tokenSet_4.member(LA(1)))) {
			result=xmlTermList(childs);
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			
			it = childs.iterator();
			while(it.hasNext()) {
			list.add(tomFactory.metaEncodeXMLAppl(symbolTable(),(TomTerm)it.next()));
			}
			
		}
		return result;
	}
	
	public final TomTerm  termStringIdentifier(
		LinkedList options
	) throws RecognitionException, TokenStreamException, TomException {
		TomTerm result;
		
		Token  nameID = null;
		Token  nameString = null;
		
		result = null;
		LinkedList optionList = (options==null)?new LinkedList():options;
		OptionList option = null;
		NameList nameList = null;
		
		
		{
		switch ( LA(1)) {
		case ALL_ID:
		{
			nameID = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				text.append(nameID.getText());
				optionList.add(tom_make_OriginTracking(tom_make_Name(nameID.getText()),nameID.getLine(),tom_make_Name(currentFile())));
				option = ast().makeOptionList(optionList);
				nameList = tom_cons_list_concTomName(tom_make_Name(nameID.getText()),tom_empty_list_concTomName());
				
			}
			break;
		}
		case STRING:
		{
			nameString = LT(1);
			match(STRING);
			if ( inputState.guessing==0 ) {
				
				text.append(nameString.getText());
				optionList.add(tom_make_OriginTracking(tom_make_Name(nameString.getText()),nameString.getLine(),tom_make_Name(currentFile())));
				option = ast().makeOptionList(optionList);
				ast().makeStringSymbol(symbolTable(),nameString.getText(),optionList);
				nameList = tom_cons_list_concTomName(tom_make_Name(nameString.getText()),tom_empty_list_concTomName());
				
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			
			result = tom_make_Appl(option,nameList,tom_empty_list_concTomTerm(),tom_empty_list_concConstraint());
			
		}
		return result;
	}
	
	public final TomTerm  xmlAttribute() throws RecognitionException, TokenStreamException, TomException {
		TomTerm result;
		
		Token  id = null;
		Token  anno2 = null;
		Token  anno1 = null;
		Token  e = null;
		Token  anno3 = null;
		
		result = null;
		LinkedList list = new LinkedList();
		TomTerm term = null;
		TomTerm termName = null;
		String name;
		OptionList option = null;
		ConstraintList constraint;
		LinkedList optionList = new LinkedList();
		LinkedList constraintList = new LinkedList();
		LinkedList optionListAnno2 = new LinkedList();
		NameList nameList;
		
		
		{
		if (((LA(1)==ALL_ID||LA(1)==UNDERSCORE))&&(LA(2) == STAR)) {
			result=variableStar(optionList,constraintList);
		}
		else if (((LA(1)==ALL_ID))&&(LA(2) == EQUAL)) {
			id = LT(1);
			match(ALL_ID);
			match(EQUAL);
			if ( inputState.guessing==0 ) {
				text.append(id.getText()+"=");
			}
			{
			if (((LA(1)==ALL_ID))&&(LA(2) == AT)) {
				anno2 = LT(1);
				match(ALL_ID);
				match(AT);
				if ( inputState.guessing==0 ) {
					
					text.append(anno2.getText()+"@");
					optionListAnno2.add(tom_make_Name(anno2.getText()));
					
				}
			}
			else if ((LA(1)==STRING||LA(1)==ALL_ID||LA(1)==UNDERSCORE)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			term=unamedVariableOrTermStringIdentifier(optionListAnno2);
			if ( inputState.guessing==0 ) {
				
				name = tomFactory.encodeXMLString(symbolTable(),id.getText());
				nameList = tom_cons_list_concTomName(tom_make_Name(name),tom_empty_list_concTomName());
				termName = tom_make_Appl(ast().makeOption(),nameList,tom_empty_list_concTomTerm(),tom_empty_list_concConstraint());
				
			}
		}
		else if ((LA(1)==ALL_ID||LA(1)==UNDERSCORE)) {
			{
			switch ( LA(1)) {
			case ALL_ID:
			{
				anno1 = LT(1);
				match(ALL_ID);
				match(AT);
				if ( inputState.guessing==0 ) {
					
					text.append(anno1.getText()+"@");
					optionList.add(tom_make_Name(anno1.getText()));
					
				}
				break;
			}
			case UNDERSCORE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			termName=placeHolder(optionList,constraintList);
			e = LT(1);
			match(EQUAL);
			if ( inputState.guessing==0 ) {
				text.append("=");
			}
			{
			if (((LA(1)==ALL_ID))&&(LA(2) == AT)) {
				anno3 = LT(1);
				match(ALL_ID);
				match(AT);
				if ( inputState.guessing==0 ) {
					
					text.append(anno3.getText()+"@");
					optionListAnno2.add(tom_make_Name(anno3.getText()));
					
				}
			}
			else if ((LA(1)==STRING||LA(1)==ALL_ID||LA(1)==UNDERSCORE)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			term=unamedVariableOrTermStringIdentifier(optionListAnno2);
		}
		else {
			throw new NoViableAltException(LT(1), getFilename());
		}
		
		}
		if ( inputState.guessing==0 ) {
			
			list.add(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_NAME),termName));
			// we add the specif value : _
			list.add(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_SPECIFIED),tom_make_Placeholder(ast().makeOption(),ast().makeConstraint())));
			//list.add(tomFactory.metaEncodeXMLAppl(symbolTable(),term));
			// no longer necessary ot metaEncode Strings in attributes
			list.add(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_VALUE),term));
			optionList.add(tom_make_OriginTracking(tom_make_Name(Constants.ATTRIBUTE_NODE),getLine(),tom_make_Name( currentFile())));
			option = ast().makeOptionList(optionList);            
			constraint = ast().makeConstraintList(constraintList);
			
			nameList = tom_cons_list_concTomName(tom_make_Name(Constants.ATTRIBUTE_NODE),tom_empty_list_concTomName());
			result = tom_make_RecordAppl(option,
			nameList,
			ast().makeList(list),
			constraint)
			
			
			;
			
		}
		return result;
	}
	
	public final TomTerm  unamedVariableOrTermStringIdentifier(
		LinkedList options
	) throws RecognitionException, TokenStreamException, TomException {
		TomTerm result;
		
		Token  nameUnderscore = null;
		Token  nameID = null;
		Token  nameString = null;
		
		result = null;
		LinkedList optionList = (options==null)?new LinkedList():options;
		OptionList option = null;
		NameList nameList = null;
		
		
		{
		switch ( LA(1)) {
		case UNDERSCORE:
		{
			nameUnderscore = LT(1);
			match(UNDERSCORE);
			if ( inputState.guessing==0 ) {
				
				text.append(nameUnderscore.getText());
				optionList.add(tom_make_OriginTracking(tom_make_Name(nameUnderscore.getText()),nameUnderscore.getLine(),tom_make_Name(currentFile())));
				option = ast().makeOptionList(optionList);
				result = tom_make_UnamedVariable(option,tom_make_TomTypeAlone("unknown type"),tom_empty_list_concConstraint());
				
			}
			break;
		}
		case ALL_ID:
		{
			nameID = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				text.append(nameID.getText());
				optionList.add(tom_make_OriginTracking(tom_make_Name(nameID.getText()),nameID.getLine(),tom_make_Name(currentFile())));
				option = ast().makeOptionList(optionList);
				nameList = tom_cons_list_concTomName(tom_make_Name(nameID.getText()),tom_empty_list_concTomName());
				result = tom_make_Appl(option,nameList,tom_empty_list_concTomTerm(),tom_empty_list_concConstraint());
				
			}
			break;
		}
		case STRING:
		{
			nameString = LT(1);
			match(STRING);
			if ( inputState.guessing==0 ) {
				
				text.append(nameString.getText());
				optionList.add(tom_make_OriginTracking(tom_make_Name(nameString.getText()),nameString.getLine(),tom_make_Name(currentFile())));
				option = ast().makeOptionList(optionList);
				ast().makeStringSymbol(symbolTable(),nameString.getText(),optionList);
				nameList = tom_cons_list_concTomName(tom_make_Name(nameString.getText()),tom_empty_list_concTomName());
				result = tom_make_Appl(option,nameList,tom_empty_list_concTomTerm(),tom_empty_list_concConstraint());
				
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return result;
	}
	
	public final boolean  xmlTermList(
		LinkedList list
	) throws RecognitionException, TokenStreamException, TomException {
		boolean result;
		
		
		result = false;
		TomTerm term;
		
		
		{
		_loop64:
		do {
			if ((_tokenSet_0.member(LA(1)))) {
				term=annotedTerm();
				if ( inputState.guessing==0 ) {
					list.add(term);
				}
			}
			else {
				break _loop64;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			result = true;
		}
		return result;
	}
	
	public final boolean  implicitTermList(
		LinkedList list
	) throws RecognitionException, TokenStreamException, TomException {
		boolean result;
		
		
		result = false;
		TomTerm term;
		
		
		{
		match(LBRACKET);
		if ( inputState.guessing==0 ) {
			text.append("[");
		}
		{
		switch ( LA(1)) {
		case NUM_INT:
		case CHARACTER:
		case STRING:
		case NUM_FLOAT:
		case NUM_LONG:
		case NUM_DOUBLE:
		case LPAREN:
		case ALL_ID:
		case XML_START:
		case XML_TEXT:
		case XML_COMMENT:
		case XML_PROC:
		case LBRACKET:
		case UNDERSCORE:
		{
			term=annotedTerm();
			if ( inputState.guessing==0 ) {
				list.add(term);
			}
			{
			_loop77:
			do {
				if ((LA(1)==TOM_COMMA)) {
					match(TOM_COMMA);
					if ( inputState.guessing==0 ) {
						text.append(",");
					}
					term=annotedTerm();
					if ( inputState.guessing==0 ) {
						list.add(term);
					}
				}
				else {
					break _loop77;
				}
				
			} while (true);
			}
			break;
		}
		case RBRACKET:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		match(RBRACKET);
		if ( inputState.guessing==0 ) {
			
			text.append("]");
			result=true;
			
		}
		}
		return result;
	}
	
	public final void termList(
		LinkedList list
	) throws RecognitionException, TokenStreamException, TomException {
		
		
		TomTerm term = null;
		
		
		{
		term=annotedTerm();
		if ( inputState.guessing==0 ) {
			list.add(term);
		}
		{
		_loop89:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				if ( inputState.guessing==0 ) {
					text.append(',');
				}
				term=annotedTerm();
				if ( inputState.guessing==0 ) {
					list.add(term);
				}
			}
			else {
				break _loop89;
			}
			
		} while (true);
		}
		}
	}
	
	public final void pairList(
		LinkedList list
	) throws RecognitionException, TokenStreamException, TomException {
		
		Token  name = null;
		Token  name2 = null;
		
		TomTerm term = null;
		
		
		{
		name = LT(1);
		match(ALL_ID);
		match(EQUAL);
		if ( inputState.guessing==0 ) {
			
			text.append(name.getText());
			text.append('=');
			
		}
		term=annotedTerm();
		if ( inputState.guessing==0 ) {
			list.add(tom_make_PairSlotAppl(tom_make_Name(name.getText()),term));
		}
		{
		_loop93:
		do {
			if ((LA(1)==COMMA)) {
				match(COMMA);
				if ( inputState.guessing==0 ) {
					text.append(',');
				}
				name2 = LT(1);
				match(ALL_ID);
				match(EQUAL);
				if ( inputState.guessing==0 ) {
					
					text.append(name2.getText());
					text.append('=');
					
				}
				term=annotedTerm();
				if ( inputState.guessing==0 ) {
					list.add(tom_make_PairSlotAppl(tom_make_Name(name2.getText()),term));
				}
			}
			else {
				break _loop93;
			}
			
		} while (true);
		}
		}
	}
	
	public final TomTerm  bqTerm() throws RecognitionException, TokenStreamException {
		TomTerm result;
		
		Token  l = null;
		Token  i = null;
		
		String bqCode = null;
		LinkedList blockList = new LinkedList();
		result = null;
		
		
		{
		switch ( LA(1)) {
		case LPAREN:
		{
			l = LT(1);
			match(LPAREN);
			if ( inputState.guessing==0 ) {
				
				blockList.add(l);
				selector().push("bqlexer");
				result = bqparser.beginBqComposite();
				selector().pop();
				
			}
			break;
		}
		case ALL_ID:
		{
			i = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				if(i.getText().equals("xml")){
				bqparser.setXmlTerm(true);
				}
				blockList.add(i);
				selector().push("bqlexer");
				result = bqparser.beginBqAppl(i);
				selector().pop();
				
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		return result;
	}
	
	public final Declaration  operator() throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  type = null;
		Token  name = null;
		Token  slotName = null;
		Token  typeArg = null;
		Token  slotName2 = null;
		Token  typeArg2 = null;
		Token  t = null;
		
		result=null;
		Option ot = null;
		TomTypeList types = tom_make_emptyTomTypeList();
		LinkedList options = new LinkedList();
		LinkedList slotNameList = new LinkedList();
		SlotList slotList = tom_make_emptySlotList();
		TomName astName = null;
		String stringSlotName = null;
		Declaration attribute;
		TargetLanguage tlFsym;
		
		Map mapNameDecl = new HashMap();
		
		
		type = LT(1);
		match(ALL_ID);
		name = LT(1);
		match(ALL_ID);
		if ( inputState.guessing==0 ) {
			
			ot = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			options.add(ot);
			
		}
		{
		switch ( LA(1)) {
		case LPAREN:
		{
			match(LPAREN);
			if ( inputState.guessing==0 ) {
				stringSlotName = "";
			}
			{
			boolean synPredMatched111 = false;
			if (((LA(1)==ALL_ID))) {
				int _m111 = mark();
				synPredMatched111 = true;
				inputState.guessing++;
				try {
					{
					match(ALL_ID);
					match(COLON);
					}
				}
				catch (RecognitionException pe) {
					synPredMatched111 = false;
				}
				rewind(_m111);
				inputState.guessing--;
			}
			if ( synPredMatched111 ) {
				slotName = LT(1);
				match(ALL_ID);
				match(COLON);
				if ( inputState.guessing==0 ) {
					stringSlotName = slotName.getText();
				}
			}
			else if ((LA(1)==ALL_ID)) {
			}
			else {
				throw new NoViableAltException(LT(1), getFilename());
			}
			
			}
			typeArg = LT(1);
			match(ALL_ID);
			if ( inputState.guessing==0 ) {
				
				slotNameList.add(ast().makeName(stringSlotName)); 
				types = (TomTypeList) types.append(tom_make_TomTypeAlone(typeArg.getText()));
				
			}
			{
			_loop116:
			do {
				if ((LA(1)==COMMA)) {
					match(COMMA);
					if ( inputState.guessing==0 ) {
						stringSlotName = "";
					}
					{
					boolean synPredMatched115 = false;
					if (((LA(1)==ALL_ID))) {
						int _m115 = mark();
						synPredMatched115 = true;
						inputState.guessing++;
						try {
							{
							match(ALL_ID);
							match(COLON);
							}
						}
						catch (RecognitionException pe) {
							synPredMatched115 = false;
						}
						rewind(_m115);
						inputState.guessing--;
					}
					if ( synPredMatched115 ) {
						slotName2 = LT(1);
						match(ALL_ID);
						match(COLON);
						if ( inputState.guessing==0 ) {
							stringSlotName = slotName2.getText();
						}
					}
					else if ((LA(1)==ALL_ID)) {
					}
					else {
						throw new NoViableAltException(LT(1), getFilename());
					}
					
					}
					typeArg2 = LT(1);
					match(ALL_ID);
					if ( inputState.guessing==0 ) {
						
						astName = ast().makeName(stringSlotName);
						
						if (!stringSlotName.equals("")) {
						if(slotNameList.indexOf(astName) != -1) {
						String detailedMsg = MessageFormat.format(TomMessage.getString("RepeatedSlotName"), new Object[]{stringSlotName});
						String msg = MessageFormat.format(
						TomMessage.getString("MainErrorMessage"), 
						new Object[]{new Integer(ot.getLine()), "%op "+type.getText(), new Integer(ot.getLine()), currentFile(), detailedMsg}
						);
						throw new TomException(msg);
						}
						}
						
						slotNameList.add(astName); 
						types = (TomTypeList) types.append(tom_make_TomTypeAlone(typeArg2.getText()));
						
					}
				}
				else {
					break _loop116;
				}
				
			} while (true);
			}
			match(RPAREN);
			break;
		}
		case LBRACE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		match(LBRACE);
		tlFsym=keywordFsym();
		if ( inputState.guessing==0 ) {
			
			astName = tom_make_Name(name.getText());
			
		}
		{
		_loop118:
		do {
			switch ( LA(1)) {
			case MAKE:
			{
				attribute=keywordMake(name.getText(),tom_make_TomTypeAlone(type.getText()),types);
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			case GET_SLOT:
			{
				attribute=keywordGetSlot(astName,type.getText());
				if ( inputState.guessing==0 ) {
					
					TomName sName = attribute.getSlotName();
					if (mapNameDecl.get(sName)==null) {
					mapNameDecl.put(sName,attribute);
					}
					else {
							    logger.log( Level.WARNING,
									"WarningTwoSameSlotDecl",
									new Object[]{currentFile(), new Integer(attribute.getOrgTrack().getLine()),
										     "%op "+type.getText(), new Integer(ot.getLine()), sName.getString()} );
					
					//                     environment().messageWarning(attribute.getOrgTrack().getLine(),
					//                         currentFile(),
					//                         "%op "+type.getText(),
					//                         ot.getLine(),
					//                         TomMessage.getString("WarningTwoSameSlotDecl"), 
					//                         new Object[]{sName.getString()});
					}
					
				}
				break;
			}
			case IS_FSYM:
			{
				attribute=keywordIsFsym(astName,type.getText());
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			default:
			{
				break _loop118;
			}
			}
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		if ( inputState.guessing==0 ) {
			
			for(int i=slotNameList.size()-1; i>=0 ; i--) {
			TomName name1 = (TomName)slotNameList.get(i);
			PairNameDecl pair = null;
			Declaration emptyDeclaration = tom_make_EmptyDeclaration();
			if(name1.isEmptyName()) {
			pair = tom_make_Slot(name1,emptyDeclaration);
			} else {
			Declaration decl = (Declaration)mapNameDecl.get(name1);
			if(decl == null) {
			
						logger.log( Level.WARNING,
							    "WarningMissingSlotDecl",
							    new Object[]{currentFile(), new Integer(ot.getLine()),
									 "%op "+type.getText(), new Integer(ot.getLine()), name1.getString()} );
			
			//                         environment().messageWarning(ot.getLine(), 
			//                             currentFile(),
			//                             "%op "+type.getText(), 
			//                             ot.getLine(), 
			//                             TomMessage.getString("WarningMissingSlotDecl"),
			//                             new Object[]{name1.getString()});
			decl = emptyDeclaration;
			}
			else {
			mapNameDecl.remove(name1);
			}
			pair = tom_make_Slot(name1,decl);
			}
			slotList = tom_make_manySlotList(pair,slotList);
			}
			// Test if there are still declaration in mapNameDecl
			if ( !mapNameDecl.isEmpty()) {
			Iterator it = mapNameDecl.keySet().iterator();
			while(it.hasNext()) {
			TomName remainingSlot = (TomName) it.next();
			
					    logger.log( Level.WARNING,
							"WarningIncompatibleSlotDecl",
							new Object[]{currentFile(), 
								     new Integer(((Declaration)mapNameDecl.get(remainingSlot)).getOrgTrack().getLine()),
								     "%op "+type.getText(), new Integer(ot.getLine()), remainingSlot.getString()} );
			
			//                     environment().messageWarning(((Declaration)mapNameDecl.get(remainingSlot)).getOrgTrack().getLine(),
			//                         currentFile(),
			//                         "%op "+type.getText(),
			//                         ot.getLine(),
			//                         TomMessage.getString("WarningIncompatibleSlotDecl"), new Object[]{remainingSlot.getString()});
			}
			}
			
			TomSymbol astSymbol = ast().makeSymbol(name.getText(), type.getText(), types, slotList, options, tlFsym);
			putSymbol(name.getText(),astSymbol);
			
			result = tom_make_SymbolDecl(astName);
			
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			selector().pop(); 
			
		}
		return result;
	}
	
	public final TargetLanguage  keywordFsym() throws RecognitionException, TokenStreamException, TomException {
		TargetLanguage tlCode;
		
		
		tlCode = null;
		
		
		match(FSYM);
		if ( inputState.guessing==0 ) {
			
			selector().push("targetlexer");
			tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
		}
		return tlCode;
	}
	
	public final Declaration  keywordMake(
		String opname, TomType returnType, TomTypeList types
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  typeArg = null;
		Token  nameArg = null;
		Token  l = null;
		
		result = null;
		Option ot = null;
		TomList args = tom_make_emptyTomList();
		int index = 0;
		TomType type;
		int nbTypes = types.getLength();
		
		
		{
		t = LT(1);
		match(MAKE);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		{
		switch ( LA(1)) {
		case LPAREN:
		{
			match(LPAREN);
			{
			switch ( LA(1)) {
			case ALL_ID:
			{
				typeArg = LT(1);
				match(ALL_ID);
				if ( inputState.guessing==0 ) {
					
					if( !(nbTypes > 0) ) {
					type = tom_make_EmptyType();
					} else {
					type = (TomType)types.elementAt(index++);
					}
					Option info1 = tom_make_OriginTracking(tom_make_Name(typeArg.getText()),typeArg.getLine(),tom_make_Name(currentFile()));  
					OptionList option1 = tom_cons_list_concOption(info1,tom_empty_list_concOption());
					
					args = (TomList) args.append(tom_make_Variable(
					option1,
					tom_make_Name(typeArg.getText()),
					type,tom_make_emptyConstraintList()
					)
					
					
					
					);
					
				}
				{
				_loop166:
				do {
					if ((LA(1)==COMMA)) {
						match(COMMA);
						nameArg = LT(1);
						match(ALL_ID);
						if ( inputState.guessing==0 ) {
							
							if( index >= nbTypes ) {
							type = tom_make_EmptyType();
							} else {
							type = (TomType)types.elementAt(index++);
							}
							Option info2 = tom_make_OriginTracking(tom_make_Name(nameArg.getText()),nameArg.getLine(),tom_make_Name(currentFile()));
							OptionList option2 = tom_cons_list_concOption(info2,tom_empty_list_concOption());
							
							args = (TomList) args.append(tom_make_Variable(
							option2,
							tom_make_Name(nameArg.getText()),
							type,tom_make_emptyConstraintList()
							)
							
							
							
							);
							
						}
					}
					else {
						break _loop166;
					}
					
				} while (true);
				}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(LT(1), getFilename());
			}
			}
			}
			match(RPAREN);
			break;
		}
		case LBRACE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		l = LT(1);
		match(LBRACE);
		if ( inputState.guessing==0 ) {
			
			pushLine(l.getLine());
			pushColumn(l.getColumn());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.targetLanguage(new LinkedList());
			selector().pop();
			
			result = tom_make_MakeDecl(tom_make_Name(opname),returnType,args,tlCode,ot);
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordGetSlot(
		TomName astName, String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  slotName = null;
		Token  name = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(GET_SLOT);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		slotName = LT(1);
		match(ALL_ID);
		match(COMMA);
		name = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			OptionList option = tom_cons_list_concOption(info,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop(); 
			
			result = tom_make_GetSlotDecl(astName,
			tom_make_Name(slotName.getText()),
			tom_make_Variable(option,tom_make_Name(name.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode, ot)
			
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordIsFsym(
		TomName astName, String typeString
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name = null;
		
		result = null;
		Option ot = null;
		
		
		t = LT(1);
		match(IS_FSYM);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			OptionList option = tom_cons_list_concOption(info,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
			result = tom_make_IsFsymDecl(astName,
			tom_make_Variable(option,tom_make_Name(name.getText()),tom_make_TomTypeAlone(typeString),tom_make_emptyConstraintList()),
			tlCode,ot)
			
			;
			
		}
		return result;
	}
	
	public final Declaration  operatorList() throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  type = null;
		Token  name = null;
		Token  typeArg = null;
		Token  t = null;
		
		result = null;
		TomTypeList types = tom_make_emptyTomTypeList();
		LinkedList options = new LinkedList();
		Declaration attribute = null;
		TargetLanguage tlFsym;
		
		
		type = LT(1);
		match(ALL_ID);
		name = LT(1);
		match(ALL_ID);
		if ( inputState.guessing==0 ) {
			
			Option ot = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			options.add(ot);
			
		}
		match(LPAREN);
		typeArg = LT(1);
		match(ALL_ID);
		match(STAR);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			types = (TomTypeList) types.append(tom_make_TomTypeAlone(typeArg.getText()));
			
		}
		match(LBRACE);
		tlFsym=keywordFsym();
		{
		_loop121:
		do {
			switch ( LA(1)) {
			case MAKE_EMPTY:
			{
				attribute=keywordMakeEmptyList(name.getText());
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			case MAKE_INSERT:
			{
				attribute=keywordMakeAddList(name.getText(),type.getText(),typeArg.getText());
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			case IS_FSYM:
			{
				attribute=keywordIsFsym(tom_make_Name(name.getText()), type.getText());
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			default:
			{
				break _loop121;
			}
			}
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		if ( inputState.guessing==0 ) {
			
			SlotList slotList = tom_cons_list_concPairNameDecl(tom_make_Slot(tom_make_EmptyName(), tom_make_EmptyDeclaration()),tom_empty_list_concPairNameDecl());
			TomSymbol astSymbol = ast().makeSymbol(
			name.getText(), 
			type.getText(), 
			types, 
			slotList, 
			options, 
			tlFsym
			);
			
			putSymbol(name.getText(),astSymbol);
			
			result = tom_make_ListSymbolDecl(tom_make_Name(name.getText()));
			
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			selector().pop(); 
			
		}
		return result;
	}
	
	public final Declaration  keywordMakeEmptyList(
		String name
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		
		result = null;
		Option ot = null;
		
		
		t = LT(1);
		match(MAKE_EMPTY);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		{
		switch ( LA(1)) {
		case LPAREN:
		{
			match(LPAREN);
			match(RPAREN);
			break;
		}
		case RBRACE:
		case IS_FSYM:
		case MAKE_EMPTY:
		case MAKE_INSERT:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(LT(1), getFilename());
		}
		}
		}
		if ( inputState.guessing==0 ) {
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
			result = tom_make_MakeEmptyList(tom_make_Name(name),tlCode,ot);
			
		}
		return result;
	}
	
	public final Declaration  keywordMakeAddList(
		String name, String listType, String elementType
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  elementName = null;
		Token  listName = null;
		
		result = null;
		Option ot = null;
		
		
		t = LT(1);
		match(MAKE_INSERT);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		elementName = LT(1);
		match(ALL_ID);
		match(COMMA);
		listName = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option listInfo = tom_make_OriginTracking(tom_make_Name(listName.getText()),listName.getLine(),tom_make_Name(currentFile()));  
			Option elementInfo = tom_make_OriginTracking(tom_make_Name(elementName.getText()),elementName.getLine(),tom_make_Name(currentFile()));
			OptionList listOption = tom_cons_list_concOption(listInfo,tom_empty_list_concOption());
			OptionList elementOption = tom_cons_list_concOption(elementInfo,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
			result = tom_make_MakeAddList(tom_make_Name(name),
			tom_make_Variable(elementOption,tom_make_Name(elementName.getText()),tom_make_TomTypeAlone(elementType),tom_make_emptyConstraintList()),
			tom_make_Variable(listOption,tom_make_Name(listName.getText()),tom_make_TomTypeAlone(listType),tom_make_emptyConstraintList()),
			tlCode,ot)
			
			
			;
			
		}
		return result;
	}
	
	public final Declaration  operatorArray() throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  type = null;
		Token  name = null;
		Token  typeArg = null;
		Token  t = null;
		
		result = null;
		TomTypeList types = tom_make_emptyTomTypeList();
		LinkedList options = new LinkedList();
		Declaration attribute = null;
		TargetLanguage tlFsym;
		
		
		type = LT(1);
		match(ALL_ID);
		name = LT(1);
		match(ALL_ID);
		if ( inputState.guessing==0 ) {
			
			Option ot = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			options.add(ot);
			
		}
		match(LPAREN);
		typeArg = LT(1);
		match(ALL_ID);
		match(STAR);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			types = (TomTypeList) types.append(tom_make_TomTypeAlone(typeArg.getText()));
			
		}
		match(LBRACE);
		tlFsym=keywordFsym();
		{
		_loop124:
		do {
			switch ( LA(1)) {
			case MAKE_EMPTY:
			{
				attribute=keywordMakeEmptyArray(name.getText(),type.getText());
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			case MAKE_APPEND:
			{
				attribute=keywordMakeAddArray(name.getText(),type.getText(),typeArg.getText());
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			case IS_FSYM:
			{
				attribute=keywordIsFsym(tom_make_Name(name.getText()),type.getText());
				if ( inputState.guessing==0 ) {
					options.add(attribute);
				}
				break;
			}
			default:
			{
				break _loop124;
			}
			}
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		if ( inputState.guessing==0 ) {
			
			SlotList slotList = tom_cons_list_concPairNameDecl(tom_make_Slot(tom_make_EmptyName(), tom_make_EmptyDeclaration()),tom_empty_list_concPairNameDecl());
			TomSymbol astSymbol = ast().makeSymbol(name.getText(), type.getText(), types, slotList, options, tlFsym);
			putSymbol(name.getText(),astSymbol);
			
			result = tom_make_ArraySymbolDecl(tom_make_Name(name.getText()));
			
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			selector().pop(); 
			
		}
		return result;
	}
	
	public final Declaration  keywordMakeEmptyArray(
		String name, String listType
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  listName = null;
		
		result = null;
		Option ot = null;
		
		
		t = LT(1);
		match(MAKE_EMPTY);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		listName = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option listInfo = tom_make_OriginTracking(tom_make_Name(listName.getText()),listName.getLine(),tom_make_Name(currentFile()));  
			OptionList listOption = tom_cons_list_concOption(listInfo,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode =  targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
			result = tom_make_MakeEmptyArray(tom_make_Name(name),
			tom_make_Variable(listOption,tom_make_Name(listName.getText()),tom_make_TomTypeAlone(listType),tom_make_emptyConstraintList()),
			tlCode,ot)
			
			;
			
		}
		return result;
	}
	
	public final Declaration  keywordMakeAddArray(
		String name, String listType, String elementType
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  elementName = null;
		Token  listName = null;
		
		result = null;
		Option ot = null;
		
		
		t = LT(1);
		match(MAKE_APPEND);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		elementName = LT(1);
		match(ALL_ID);
		match(COMMA);
		listName = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
			Option listInfo = tom_make_OriginTracking(tom_make_Name(listName.getText()),listName.getLine(),tom_make_Name(currentFile()));  
			Option elementInfo = tom_make_OriginTracking(tom_make_Name(elementName.getText()),elementName.getLine(),tom_make_Name(currentFile()));
			OptionList listOption = tom_cons_list_concOption(listInfo,tom_empty_list_concOption());
			OptionList elementOption = tom_cons_list_concOption(elementInfo,tom_empty_list_concOption());
			
			result = tom_make_MakeAddArray(tom_make_Name(name),
			tom_make_Variable(elementOption,tom_make_Name(elementName.getText()),tom_make_TomTypeAlone(elementType),tom_make_emptyConstraintList()),
			tom_make_Variable(listOption,tom_make_Name(listName.getText()),tom_make_TomTypeAlone(listType),tom_make_emptyConstraintList()),
			tlCode,ot)
			
			
			;
			
		}
		return result;
	}
	
	public final Declaration  typeTerm() throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  type = null;
		Token  t = null;
		
		result = null;
		Option ot = null;
		TomList blockList = tom_make_emptyTomList();
		Declaration attribute = null;
		TargetLanguage implement = null;
		
		
		{
		type = LT(1);
		match(ALL_ID);
		if ( inputState.guessing==0 ) {
			
			ot = tom_make_OriginTracking(tom_make_Name(type.getText()), type.getLine(),tom_make_Name(currentFile()));
			
		}
		match(LBRACE);
		implement=keywordImplement();
		{
		_loop128:
		do {
			switch ( LA(1)) {
			case GET_FUN_SYM:
			{
				attribute=keywordGetFunSym(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case GET_SUBTERM:
			{
				attribute=keywordGetSubterm(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case CMP_FUN_SYM:
			{
				attribute=keywordCmpFunSym(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case EQUALS:
			{
				attribute=keywordEquals(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			default:
			{
				break _loop128;
			}
			}
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		}
		if ( inputState.guessing==0 ) {
			
			TomType astType = tom_make_Type(tom_make_ASTTomType(type.getText()),tom_make_TLType(implement));
			putType(type.getText(), astType);
			
			result = tom_make_TypeTermDecl(tom_make_Name(type.getText()),blockList,ot);
			
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			selector().pop();
			
		}
		return result;
	}
	
	public final TargetLanguage  keywordImplement() throws RecognitionException, TokenStreamException, TomException {
		TargetLanguage tlCode;
		
		
		tlCode = null;
		
		
		{
		match(IMPLEMENT);
		if ( inputState.guessing==0 ) {
			
			selector().push("targetlexer");
			tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
		}
		}
		return tlCode;
	}
	
	public final Declaration  keywordGetFunSym(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(GET_FUN_SYM);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			OptionList option = tom_cons_list_concOption(info,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();
			
			result = tom_make_GetFunctionSymbolDecl(
			tom_make_Variable(option,tom_make_Name(name.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode,ot)
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordGetSubterm(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name1 = null;
		Token  name2 = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(GET_SUBTERM);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name1 = LT(1);
		match(ALL_ID);
		match(COMMA);
		name2 = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info1 = tom_make_OriginTracking(tom_make_Name(name1.getText()),name1.getLine(),tom_make_Name(currentFile()));
			Option info2 = tom_make_OriginTracking(tom_make_Name(name2.getText()),name2.getLine(),tom_make_Name(currentFile()));
			OptionList option1 = tom_cons_list_concOption(info1,tom_empty_list_concOption());
			OptionList option2 = tom_cons_list_concOption(info2,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop(); 
			
			result = tom_make_GetSubtermDecl(
			tom_make_Variable(option1,tom_make_Name(name1.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tom_make_Variable(option2,tom_make_Name(name2.getText()),tom_make_TomTypeAlone("int"),tom_make_emptyConstraintList()),
			tlCode, ot)
			
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordCmpFunSym(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name1 = null;
		Token  name2 = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(CMP_FUN_SYM);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name1 = LT(1);
		match(ALL_ID);
		match(COMMA);
		name2 = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info1 = tom_make_OriginTracking(tom_make_Name(name1.getText()),name1.getLine(),tom_make_Name(currentFile()));
			Option info2 = tom_make_OriginTracking(tom_make_Name(name2.getText()),name2.getLine(),tom_make_Name(currentFile()));
			OptionList option1 = tom_cons_list_concOption(info1,tom_empty_list_concOption());
			OptionList option2 = tom_cons_list_concOption(info2,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop(); 
			
			result = tom_make_CompareFunctionSymbolDecl(
			tom_make_Variable(option1,tom_make_Name(name1.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tom_make_Variable(option2,tom_make_Name(name2.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode, ot)
			
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordEquals(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name1 = null;
		Token  name2 = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(EQUALS);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name1 = LT(1);
		match(ALL_ID);
		match(COMMA);
		name2 = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info1 = tom_make_OriginTracking(tom_make_Name(name1.getText()),name1.getLine(),tom_make_Name(currentFile()));
			Option info2 = tom_make_OriginTracking(tom_make_Name(name2.getText()),name2.getLine(),tom_make_Name(currentFile()));
			OptionList option1 = tom_cons_list_concOption(info1,tom_empty_list_concOption());
			OptionList option2 = tom_cons_list_concOption(info2,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();  
			
			result = tom_make_TermsEqualDecl(
			tom_make_Variable(option1,tom_make_Name(name1.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tom_make_Variable(option2,tom_make_Name(name2.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode, ot)
			
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  typeList() throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  type = null;
		Token  t = null;
		
		result = null;
		Option ot = null;
		Declaration attribute = null;
		TomList blockList = tom_make_emptyTomList();
		TargetLanguage implement = null;
		
		
		{
		type = LT(1);
		match(ALL_ID);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(type.getText()),type.getLine(),tom_make_Name(currentFile()));
		}
		match(LBRACE);
		implement=keywordImplement();
		{
		_loop132:
		do {
			switch ( LA(1)) {
			case GET_FUN_SYM:
			{
				attribute=keywordGetFunSym(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case GET_SUBTERM:
			{
				attribute=keywordGetSubterm(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case CMP_FUN_SYM:
			{
				attribute=keywordCmpFunSym(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case EQUALS:
			{
				attribute=keywordEquals(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case GET_HEAD:
			{
				attribute=keywordGetHead(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case GET_TAIL:
			{
				attribute=keywordGetTail(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case IS_EMPTY:
			{
				attribute=keywordIsEmpty(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			default:
			{
				break _loop132;
			}
			}
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		}
		if ( inputState.guessing==0 ) {
			
			TomType astType = tom_make_Type(tom_make_ASTTomType(type.getText()),tom_make_TLType(implement));
			putType(type.getText(), astType);
			
			result = tom_make_TypeListDecl(tom_make_Name(type.getText()),blockList,ot);
			
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			selector().pop();
			
		}
		return result;
	}
	
	public final Declaration  keywordGetHead(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(GET_HEAD);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			OptionList option = tom_cons_list_concOption(info,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();  
			
			result = tom_make_GetHeadDecl(
			symbolTable().getUniversalType(),
			tom_make_Variable(option,tom_make_Name(name.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode,
			ot)
			
			
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordGetTail(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(GET_TAIL);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			OptionList option = tom_cons_list_concOption(info,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();  
			
			result = tom_make_GetTailDecl(
			tom_make_Variable(option,tom_make_Name(name.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode,
			ot)
			
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordIsEmpty(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(IS_EMPTY);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			OptionList option = tom_cons_list_concOption(info,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage  tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop(); 
			
			result = tom_make_IsEmptyDecl(
			tom_make_Variable(option,tom_make_Name(name.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode,
			ot)
			
			
			; 
			
		}
		}
		return result;
	}
	
	public final Declaration  typeArray() throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  type = null;
		Token  t = null;
		
		result=null;
		Option ot = null;
		Declaration attribute = null;
		TomList blockList = tom_make_emptyTomList();
		TargetLanguage implement = null;
		
		
		{
		type = LT(1);
		match(ALL_ID);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(type.getText()),type.getLine(),tom_make_Name(currentFile()));
		}
		match(LBRACE);
		implement=keywordImplement();
		{
		_loop136:
		do {
			switch ( LA(1)) {
			case GET_FUN_SYM:
			{
				attribute=keywordGetFunSym(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case GET_SUBTERM:
			{
				attribute=keywordGetSubterm(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case CMP_FUN_SYM:
			{
				attribute=keywordCmpFunSym(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case EQUALS:
			{
				attribute=keywordEquals(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case GET_ELEMENT:
			{
				attribute=keywordGetElement(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			case GET_SIZE:
			{
				attribute=keywordGetSize(type.getText());
				if ( inputState.guessing==0 ) {
					blockList = (TomList) blockList.append(tom_make_DeclarationToTomTerm(attribute));
				}
				break;
			}
			default:
			{
				break _loop136;
			}
			}
		} while (true);
		}
		t = LT(1);
		match(RBRACE);
		}
		if ( inputState.guessing==0 ) {
			
			TomType astType = tom_make_Type(tom_make_ASTTomType(type.getText()),tom_make_TLType(implement));
			putType(type.getText(), astType);
			
			result = tom_make_TypeArrayDecl(tom_make_Name(type.getText()),blockList,ot);
			
			pushLine(t.getLine());
			pushColumn(t.getColumn());
			selector().pop();
			
		}
		return result;
	}
	
	public final Declaration  keywordGetElement(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name1 = null;
		Token  name2 = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(GET_ELEMENT);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name1 = LT(1);
		match(ALL_ID);
		match(COMMA);
		name2 = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info1 = tom_make_OriginTracking(tom_make_Name(name1.getText()),name1.getLine(),tom_make_Name(currentFile()));
			Option info2 = tom_make_OriginTracking(tom_make_Name(name2.getText()),name2.getLine(),tom_make_Name(currentFile()));
			OptionList option1 = tom_cons_list_concOption(info1,tom_empty_list_concOption());
			OptionList option2 = tom_cons_list_concOption(info2,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();  
			
			result = tom_make_GetElementDecl(
			tom_make_Variable(option1,tom_make_Name(name1.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tom_make_Variable(option2,tom_make_Name(name2.getText()),tom_make_TomTypeAlone("int"),tom_make_emptyConstraintList()),
			tlCode, ot)
			
			
			;
			
		}
		}
		return result;
	}
	
	public final Declaration  keywordGetSize(
		String type
	) throws RecognitionException, TokenStreamException, TomException {
		Declaration result;
		
		Token  t = null;
		Token  name = null;
		
		result = null;
		Option ot = null;
		
		
		{
		t = LT(1);
		match(GET_SIZE);
		if ( inputState.guessing==0 ) {
			ot = tom_make_OriginTracking(tom_make_Name(t.getText()),t.getLine(),tom_make_Name(currentFile()));
		}
		match(LPAREN);
		name = LT(1);
		match(ALL_ID);
		match(RPAREN);
		if ( inputState.guessing==0 ) {
			
			Option info = tom_make_OriginTracking(tom_make_Name(name.getText()),name.getLine(),tom_make_Name(currentFile()));
			OptionList option = tom_cons_list_concOption(info,tom_empty_list_concOption());
			
			selector().push("targetlexer");
			TargetLanguage tlCode = targetparser.goalLanguage(new LinkedList());
			selector().pop();  
			
			result = tom_make_GetSizeDecl(
			tom_make_Variable(option,tom_make_Name(name.getText()),tom_make_TomTypeAlone(type),tom_make_emptyConstraintList()),
			tlCode,ot)
			
			;
			
		}
		}
		return result;
	}
	
	
	public static final String[] _tokenNames = {
		"<0>",
		"EOF",
		"<2>",
		"NULL_TREE_LOOKAHEAD",
		"NUM_INT",
		"CHARACTER",
		"STRING",
		"NUM_FLOAT",
		"NUM_LONG",
		"NUM_DOUBLE",
		"LPAREN",
		"RPAREN",
		"LBRACE",
		"RBRACE",
		"COMMA",
		"ALL_ID",
		"BACKQUOTE",
		"COLON",
		"ALTERNATIVE",
		"ARROW",
		"\"where\"",
		"AFFECT",
		"\"if\"",
		"DOUBLEEQ",
		"AT",
		"XML_START",
		"XML_CLOSE_SINGLETON",
		"XML_CLOSE",
		"XML_START_ENDING",
		"XML_TEXT",
		"XML_COMMENT",
		"XML_PROC",
		"LBRACKET",
		"RBRACKET",
		"EQUAL",
		"UNDERSCORE",
		"TOM_COMMA",
		"STAR",
		"\"implement\"",
		"\"get_fun_sym\"",
		"\"get_subterm\"",
		"\"cmp_fun_sym\"",
		"\"equals\"",
		"\"get_head\"",
		"\"get_tail\"",
		"\"is_empty\"",
		"\"get_element\"",
		"\"get_size\"",
		"\"fsym\"",
		"\"is_fsym\"",
		"\"get_slot\"",
		"\"make\"",
		"\"make_empty\"",
		"\"make_insert\"",
		"\"make_append\"",
		"DOULEARROW",
		"DOUBLE_QUOTE",
		"WS",
		"SLCOMMENT",
		"ML_COMMENT",
		"ESC",
		"HEX_DIGIT",
		"LETTER",
		"DIGIT",
		"ID",
		"ID_MINUS",
		"MINUS",
		"PLUS",
		"QUOTE",
		"EXPONENT",
		"DOT",
		"FLOAT_SUFFIX"
	};
	
	private static final long[] mk_tokenSet_0() {
		long[] data = { 42446391280L, 0L};
		return data;
	}
	public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
	private static final long[] mk_tokenSet_1() {
		long[] data = { 3791650816L, 0L};
		return data;
	}
	public static final BitSet _tokenSet_1 = new BitSet(mk_tokenSet_1());
	private static final long[] mk_tokenSet_2() {
		long[] data = { 33776L, 0L};
		return data;
	}
	public static final BitSet _tokenSet_2 = new BitSet(mk_tokenSet_2());
	private static final long[] mk_tokenSet_3() {
		long[] data = { 120040779760L, 0L};
		return data;
	}
	public static final BitSet _tokenSet_3 = new BitSet(mk_tokenSet_3());
	private static final long[] mk_tokenSet_4() {
		long[] data = { 42714826736L, 0L};
		return data;
	}
	public static final BitSet _tokenSet_4 = new BitSet(mk_tokenSet_4());
	
	}
