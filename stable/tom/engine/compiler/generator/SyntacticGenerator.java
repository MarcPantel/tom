/* Generated by TOM (version 2.5): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler.generator;

import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.library.sl.*;
import tom.engine.tools.SymbolTable;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.TomBase;
import tom.engine.compiler.*;
import tom.engine.adt.theory.types.*;

/**
 * Syntactic Generator
 */
public class SyntacticGenerator implements IBaseGenerator {

  /* Generated by TOM (version 2.5): Do not edit this file *//* Generated by TOM (version 2.5): Do not edit this file *//* Generated by TOM (version 2.5): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5): Do not edit this file */ private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_ElementaryTheory(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ElementaryTheory(Object t) { return  t instanceof tom.engine.adt.theory.types.ElementaryTheory ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static  tom.engine.adt.theory.types.ElementaryTheory  tom_make_TrueAU() { return  tom.engine.adt.theory.types.elementarytheory.TrueAU.make() ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualTerm( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(t0, t1, t2) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsFsym( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsFsym.make(t0, t1) ; }private static boolean tom_is_fun_sym_ConstraintToExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_ConstraintToExpression_cons( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getcons() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsSort( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsSort.make(t0, t1) ; }private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TestVar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.TestVar ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_TestVar_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getVariable() ;}private static boolean tom_is_fun_sym_Subterm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Subterm ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_SlotName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Subterm_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getGroundTerm() ;}private static boolean tom_is_fun_sym_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_SymbolOf_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getGroundTerm() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildConstant( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.BuildConstant.make(t0) ; }private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if(tom_is_empty_concTomName_TomNameList(l1)) {       return l2;     } else if(tom_is_empty_concTomName_TomNameList(l2)) {       return l1;     } else if(tom_is_empty_concTomName_TomNameList(tom_get_tail_concTomName_TomNameList(l1))) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(tom_get_tail_concTomName_TomNameList(l1),l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(tom_get_tail_concTomName_TomNameList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.5): Do not edit this file */ /* Generated by TOM (version 2.5): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   
	

  public Expression generate(Expression expression) throws VisitFailure {
    return  (Expression)tom_make_TopDown(tom_make_Generator()).visit(expression);
  }

  // If we find ConstraintToExpression it means that this constraint was not processed	
  private static class Generator extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public Generator() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomexpression.types.Expression  visit_Expression( tom.engine.adt.tomexpression.types.Expression  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Expression(tom__arg)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch190NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg);if (tom_is_fun_sym_ConstraintToExpression(tomMatch190NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch190NameNumber_freshVar_0=tom_get_slot_ConstraintToExpression_cons(tomMatch190NameNumberfreshSubject_1);if (tom_is_fun_sym_MatchConstraint(tomMatch190NameNumber_freshVar_0)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_1=tom_get_slot_MatchConstraint_pattern(tomMatch190NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_2=tom_get_slot_MatchConstraint_subject(tomMatch190NameNumber_freshVar_0);if (tom_is_fun_sym_RecordAppl(tomMatch190NameNumber_freshVar_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch190NameNumber_freshVar_3=tom_get_slot_RecordAppl_NameList(tomMatch190NameNumber_freshVar_1);if (tom_is_fun_sym_concTomName(tomMatch190NameNumber_freshVar_3)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch190NameNumber_freshVar_5=tomMatch190NameNumber_freshVar_3;if (!(tom_is_empty_concTomName_TomNameList(tomMatch190NameNumber_freshVar_5))) {{  tom.engine.adt.tomname.types.TomName  tom_name=tom_get_head_concTomName_TomNameList(tomMatch190NameNumber_freshVar_5);{  tom.engine.adt.tomname.types.TomNameList  tomMatch190NameNumber_freshVar_6=tom_get_tail_concTomName_TomNameList(tomMatch190NameNumber_freshVar_5);if (tom_is_empty_concTomName_TomNameList(tomMatch190NameNumber_freshVar_6)) {if (tom_is_fun_sym_SymbolOf(tomMatch190NameNumber_freshVar_2)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_4=tom_get_slot_SymbolOf_GroundTerm(tomMatch190NameNumber_freshVar_2);if ( true ) {



        TomType termType = ConstraintCompiler.getTermTypeFromName(tom_name);        
        Expression check = buildEqualFunctionSymbol(termType,tomMatch190NameNumber_freshVar_4,tom_name,TomBase.getTheory(tomMatch190NameNumber_freshVar_1));
        return check;
      }}}}}}}}}}}}}}}}if (tom_is_fun_sym_ConstraintToExpression(tomMatch190NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch190NameNumber_freshVar_7=tom_get_slot_ConstraintToExpression_cons(tomMatch190NameNumberfreshSubject_1);if (tom_is_fun_sym_MatchConstraint(tomMatch190NameNumber_freshVar_7)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_8=tom_get_slot_MatchConstraint_pattern(tomMatch190NameNumber_freshVar_7);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_9=tom_get_slot_MatchConstraint_subject(tomMatch190NameNumber_freshVar_7);if (tom_is_fun_sym_Subterm(tomMatch190NameNumber_freshVar_8)) {{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch190NameNumber_freshVar_8;if ( true ) {


        return tom_make_EqualTerm(ConstraintCompiler.getTermTypeFromTerm(tom_t),tom_t,tomMatch190NameNumber_freshVar_9);
      }}}}}}}}if (tom_is_fun_sym_ConstraintToExpression(tomMatch190NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch190NameNumber_freshVar_10=tom_get_slot_ConstraintToExpression_cons(tomMatch190NameNumberfreshSubject_1);if (tom_is_fun_sym_MatchConstraint(tomMatch190NameNumber_freshVar_10)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_11=tom_get_slot_MatchConstraint_pattern(tomMatch190NameNumber_freshVar_10);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_12=tom_get_slot_MatchConstraint_subject(tomMatch190NameNumber_freshVar_10);if (tom_is_fun_sym_TestVar(tomMatch190NameNumber_freshVar_11)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch190NameNumber_freshVar_13=tom_get_slot_TestVar_Variable(tomMatch190NameNumber_freshVar_11);{ boolean tomMatch190NameNumber_freshVar_15= false ;{  tom.engine.adt.tomtype.types.TomType  tomMatch190NameNumber_freshVar_14= null ;if (tom_is_fun_sym_Variable(tomMatch190NameNumber_freshVar_13)) {{tomMatch190NameNumber_freshVar_15= true ;tomMatch190NameNumber_freshVar_14=tom_get_slot_Variable_AstType(tomMatch190NameNumber_freshVar_13);}} else {if (tom_is_fun_sym_VariableStar(tomMatch190NameNumber_freshVar_13)) {{tomMatch190NameNumber_freshVar_15= true ;tomMatch190NameNumber_freshVar_14=tom_get_slot_VariableStar_AstType(tomMatch190NameNumber_freshVar_13);}}}if ((tomMatch190NameNumber_freshVar_15 ==  true )) {if ( true ) {


        return tom_make_EqualTerm(tomMatch190NameNumber_freshVar_14,tomMatch190NameNumber_freshVar_13,tomMatch190NameNumber_freshVar_12);
      }}}}}}}}}}}}}return super.visit_Expression(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_Generator() { return new Generator(); }

 // end strategy	
  
  private static Expression buildEqualFunctionSymbol(TomType type, TomTerm subject,  TomName name, Theory theory) {    
    TomSymbol tomSymbol = ConstraintCompiler.getSymbolTable().getSymbolFromName(name.getString());
    if(ConstraintCompiler.getSymbolTable().isBuiltinType(TomBase.getTomType(type))) {
      if(TomBase.isListOperator(tomSymbol) || TomBase.isArrayOperator(tomSymbol) || TomBase.hasIsFsymDecl(tomSymbol)) {
        return tom_make_IsFsym(name,subject);
      } else {
        return tom_make_EqualTerm(type,tom_make_BuildConstant(name),subject);
      }
    } else if(TomBase.hasTheory(theory, tom_make_TrueAU())) {
      return tom_make_IsSort(type,subject);
    } 
    return tom_make_IsFsym(name,subject);
  }
}
