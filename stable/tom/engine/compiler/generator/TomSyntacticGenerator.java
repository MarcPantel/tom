/* Generated by TOM (version 2.5alpha): Do not edit this file */package tom.engine.compiler.generator;

import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.library.sl.*;
import tom.engine.tools.SymbolTable;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.TomBase;
import tom.engine.compiler.*;
import tom.engine.adt.theory.types.*;

/**
 * Syntactic Generator
 */
public class TomSyntacticGenerator implements TomIBaseGenerator{

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;} private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_ElementaryTheory(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ElementaryTheory(Object t) { return  t instanceof tom.engine.adt.theory.types.ElementaryTheory ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static  tom.engine.adt.theory.types.ElementaryTheory  tom_make_TrueAU() { return  tom.engine.adt.theory.types.elementarytheory.TrueAU.make() ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualTerm( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(t0, t1, t2) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsFsym( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsFsym.make(t0, t1) ; }private static boolean tom_is_fun_sym_ConstraintToExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_ConstraintToExpression_cons( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getcons() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsSort( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsSort.make(t0, t1) ; }private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TestVar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.TestVar ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_TestVar_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getVariable() ;}private static boolean tom_is_fun_sym_Subterm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Subterm ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_SlotName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Subterm_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getGroundTerm() ;}private static boolean tom_is_fun_sym_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_SymbolOf_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getGroundTerm() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildConstant( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.BuildConstant.make(t0) ; }private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if(tom_is_empty_concTomName_TomNameList(l1)) {       return l2;     } else if(tom_is_empty_concTomName_TomNameList(l2)) {       return l1;     } else if(tom_is_empty_concTomName_TomNameList(tom_get_tail_concTomName_TomNameList(l1))) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(tom_get_tail_concTomName_TomNameList(l1),l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(tom_get_tail_concTomName_TomNameList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t instanceof tom.library.sl.Identity ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   
	

  public Expression generate(Expression expression) {
    return  (Expression)tom_make_TopDown(tom_make_SyntacticGenerator()).fire(expression);
  }

  // If we find ConstraintToExpression it means that this constraint was not processed	
  private static class SyntacticGenerator extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public SyntacticGenerator() { super(tom_make_Identity());}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int i) {switch (i) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) {switch (i) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomexpression.types.Expression  visit_Expression( tom.engine.adt.tomexpression.types.Expression  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_Expression(tom__arg)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch1Position1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg);if ( ( tom_is_fun_sym_ConstraintToExpression(tomMatch1Position1) ||  false  ) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch1Position1NameNumbercons=tom_get_slot_ConstraintToExpression_cons(tomMatch1Position1);if ( ( tom_is_fun_sym_MatchConstraint(tomMatch1Position1NameNumbercons) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumberpattern=tom_get_slot_MatchConstraint_pattern(tomMatch1Position1NameNumbercons);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumbersubject=tom_get_slot_MatchConstraint_subject(tomMatch1Position1NameNumbercons);if ( ( tom_is_fun_sym_RecordAppl(tomMatch1Position1NameNumberconsNameNumberpattern) ||  false  ) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch1Position1NameNumberconsNameNumberpattern);if ( ( tom_is_fun_sym_concTomName(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameList) ||  false  ) ) {{ int tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListIndex1=0;{  tom.engine.adt.tomname.types.TomNameList  tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1=tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameList;{  tom.engine.adt.tomname.types.TomNameList  tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListSave1=tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1;{if (!(tom_is_empty_concTomName_TomNameList(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1))) {{  tom.engine.adt.tomname.types.TomName  tom_name=tom_get_head_concTomName_TomNameList(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1);tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListIndex1=tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListIndex1 + 1;tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1);if (tom_is_empty_concTomName_TomNameList(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1)) {if ( ( tom_is_fun_sym_SymbolOf(tomMatch1Position1NameNumberconsNameNumbersubject) ||  false  ) ) {if ( true ) {



        TomType termType = TomConstraintCompiler.getTermTypeFromName(tom_name);        
        Expression check = buildEqualFunctionSymbol(termType,tom_get_slot_SymbolOf_GroundTerm(tomMatch1Position1NameNumberconsNameNumbersubject),tom_name,TomBase.getTheory(tomMatch1Position1NameNumberconsNameNumberpattern));
        return check;
      }}}}}tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListList1=tomMatch1Position1NameNumberconsNameNumberpatternNameNumberNameListSave1;}}}}}}}}}}}}if ( ( tom_is_fun_sym_ConstraintToExpression(tomMatch1Position1) ||  false  ) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch1Position1NameNumbercons=tom_get_slot_ConstraintToExpression_cons(tomMatch1Position1);if ( ( tom_is_fun_sym_MatchConstraint(tomMatch1Position1NameNumbercons) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumberpattern=tom_get_slot_MatchConstraint_pattern(tomMatch1Position1NameNumbercons);if ( ( tom_is_fun_sym_Subterm(tomMatch1Position1NameNumberconsNameNumberpattern) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch1Position1NameNumberconsNameNumberpattern;if ( true ) {


        return tom_make_EqualTerm(TomConstraintCompiler.getTermTypeFromTerm(tom_t),tom_t,tom_get_slot_MatchConstraint_subject(tomMatch1Position1NameNumbercons));
      }}}}}}}if ( ( tom_is_fun_sym_ConstraintToExpression(tomMatch1Position1) ||  false  ) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch1Position1NameNumbercons=tom_get_slot_ConstraintToExpression_cons(tomMatch1Position1);if ( ( tom_is_fun_sym_MatchConstraint(tomMatch1Position1NameNumbercons) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumberpattern=tom_get_slot_MatchConstraint_pattern(tomMatch1Position1NameNumbercons);if ( ( tom_is_fun_sym_TestVar(tomMatch1Position1NameNumberconsNameNumberpattern) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable=tom_get_slot_TestVar_Variable(tomMatch1Position1NameNumberconsNameNumberpattern);{ boolean tomNameNumberboolMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable= false ;{  tom.engine.adt.tomtype.types.TomType  tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariableNameNumberAstType= null ;if (tom_is_fun_sym_Variable(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable)) {tomNameNumberboolMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable= true ;tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariableNameNumberAstType=tom_get_slot_Variable_AstType(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable);} else {if (tom_is_fun_sym_VariableStar(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable)) {tomNameNumberboolMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable= true ;tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariableNameNumberAstType=tom_get_slot_VariableStar_AstType(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable);}}if (tomNameNumberboolMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable) {if ( true ) {


        return tom_make_EqualTerm(tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariableNameNumberAstType,tomMatch1Position1NameNumberconsNameNumberpatternNameNumberVariable,tom_get_slot_MatchConstraint_subject(tomMatch1Position1NameNumbercons));
      }}}}}}}}}}}}return super.visit_Expression(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_SyntacticGenerator() { return new SyntacticGenerator(); }

 // end strategy	
  
  private static Expression buildEqualFunctionSymbol(TomType type, TomTerm subject,  TomName name, Theory theory) {    
    TomSymbol tomSymbol = TomConstraintCompiler.getSymbolTable().getSymbolFromName(name.getString());
    if(TomConstraintCompiler.getSymbolTable().isBuiltinType(TomBase.getTomType(type))) {
      if(TomBase.isListOperator(tomSymbol) || TomBase.isArrayOperator(tomSymbol) || TomBase.hasIsFsymDecl(tomSymbol)) {
        return tom_make_IsFsym(name,subject);
      } else {
        return tom_make_EqualTerm(type,tom_make_BuildConstant(name),subject);
      }
    } else if(TomBase.hasTheory(theory, tom_make_TrueAU())) {
      return tom_make_IsSort(type,subject);
    } 
    return tom_make_IsFsym(name,subject);
  }
}
