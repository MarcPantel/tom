/* Generated by TOM (version 2.5alpha): Do not edit this file */package tom.engine.compiler.generator;

import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tomexpression.types.expression.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.library.sl.*;
import tom.engine.tools.SymbolTable;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.TomBase;

import tom.engine.compiler.*;
/**
 * Variadic Generator
 */
public class TomVariadicGenerator implements TomIBaseGenerator {

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TomTermToExpression( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Negation( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomexpression.types.expression.Negation.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_And( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.And.make(t0, t1) ; }private static boolean tom_is_fun_sym_Conditional( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.Conditional ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Conditional( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tomexpression.types.Expression  t2) { return  tom.engine.adt.tomexpression.types.expression.Conditional.make(t0, t1, t2) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Conditional_Cond( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getCond() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Conditional_Then( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getThen() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Conditional_Else( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getElse() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualTerm( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(t0, t1, t2) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsFsym( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsFsym.make(t0, t1) ; }private static boolean tom_is_fun_sym_GetHead( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.GetHead ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetHead( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.GetHead.make(t0, t1, t2) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetHead_Opname( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getOpname() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_GetHead_Codomain( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getCodomain() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetHead_Variable( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetTail( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.GetTail.make(t0, t1) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSliceList( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetSliceList.make(t0, t1, t2, t3) ; }private static boolean tom_is_fun_sym_ConstraintToExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_ConstraintToExpression( tom.engine.adt.tomconstraint.types.Constraint  t0) { return  tom.engine.adt.tomexpression.types.expression.ConstraintToExpression.make(t0) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_ConstraintToExpression_cons( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getcons() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_DoWhileExpression( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.DoWhileExpression.make(t0, t1) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IfExpression( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tomexpression.types.Expression  t2) { return  tom.engine.adt.tomexpression.types.expression.IfExpression.make(t0, t1, t2) ; }private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableHeadList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableHeadList ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableHeadList_Opname( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOpname() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_VariableHeadList_Begin( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getBegin() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_VariableHeadList_End( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getEnd() ;}private static boolean tom_is_fun_sym_ListHead( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.ListHead ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_ListHead_Opname( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOpname() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_ListHead_Codomain( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getCodomain() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_ListHead_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getVariable() ;}private static boolean tom_is_fun_sym_ListTail( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.ListTail ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ListTail( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomterm.types.tomterm.ListTail.make(t0, t1) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_ListTail_Opname( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOpname() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_ListTail_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getVariable() ;}private static boolean tom_is_fun_sym_ExpressionToTomTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ExpressionToTomTerm( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_ExpressionToTomTerm_AstExpression( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstExpression() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildEmptyList( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.BuildEmptyList.make(t0) ; }private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_MatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(t0, t1) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t instanceof tom.library.sl.Identity ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   
	

  public Expression generate(Expression expression) {
    return (Expression)tom_make_TopDown(tom_make_VariadicGenerator()).fire(expression);		
  }

  // If we find ConstraintToExpression it means that this constraint was not processed	
  private static class VariadicGenerator extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public VariadicGenerator() { super(tom_make_Identity());}public int getChildCount() { return 1; }public jjtraveler.Visitable getChildAt(int i) {switch (i) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) {switch (i) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomexpression.types.Expression  visit_Expression( tom.engine.adt.tomexpression.types.Expression  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_Expression(tom__arg)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch1Position1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg);if ( ( tom_is_fun_sym_ConstraintToExpression(tomMatch1Position1) ||  false  ) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch1Position1NameNumbercons=tom_get_slot_ConstraintToExpression_cons(tomMatch1Position1);if ( ( tom_is_fun_sym_MatchConstraint(tomMatch1Position1NameNumbercons) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumberpattern=tom_get_slot_MatchConstraint_pattern(tomMatch1Position1NameNumbercons);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumbersubject=tom_get_slot_MatchConstraint_subject(tomMatch1Position1NameNumbercons);if ( ( tom_is_fun_sym_UnamedVariableStar(tomMatch1Position1NameNumberconsNameNumberpattern) ||  ( tom_is_fun_sym_VariableStar(tomMatch1Position1NameNumberconsNameNumberpattern) ||  false  )  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tom_v=tomMatch1Position1NameNumberconsNameNumberpattern;if ( ( tom_is_fun_sym_VariableHeadList(tomMatch1Position1NameNumberconsNameNumbersubject) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumbersubjectNameNumberEnd=tom_get_slot_VariableHeadList_End(tomMatch1Position1NameNumberconsNameNumbersubject);{  tom.engine.adt.tomname.types.TomName  tom_opName=tom_get_slot_VariableHeadList_Opname(tomMatch1Position1NameNumberconsNameNumbersubject);{  tom.engine.adt.tomterm.types.TomTerm  tom_begin=tom_get_slot_VariableHeadList_Begin(tomMatch1Position1NameNumberconsNameNumbersubject);if ( ( tom_is_fun_sym_VariableStar(tomMatch1Position1NameNumberconsNameNumbersubjectNameNumberEnd) ||  false  ) ) {{  tom.engine.adt.tomtype.types.TomType  tom_type=tom_get_slot_VariableStar_AstType(tomMatch1Position1NameNumberconsNameNumbersubjectNameNumberEnd);{  tom.engine.adt.tomterm.types.TomTerm  tom_end=tomMatch1Position1NameNumberconsNameNumbersubjectNameNumberEnd;if ( true ) {












        Expression doWhileTest = tom_make_Negation(tom_make_EqualTerm(tom_type,tom_end,tom_begin));
        Expression testEmpty = TomGenerationManager.genIsEmptyList(tom_opName,tom_end);
        Expression endExpression = tom_make_IfExpression(testEmpty,tom_make_EqualTerm(tom_type,tom_end,tom_begin),tom_make_EqualTerm(tom_type,tom_end,tom_make_ListTail(tom_opName,tom_end)));
        // if we have a varStar, we generate its declaration also
        if (tom_v.isVariableStar()) {
          Expression varDeclaration = tom_make_ConstraintToExpression(tom_make_MatchConstraint(tom_v,tom_make_ExpressionToTomTerm(tom_make_GetSliceList(tom_opName,tom_begin,tom_end,tom_make_BuildEmptyList(tom_opName)))));
          return tom_make_And(tom_make_DoWhileExpression(endExpression,doWhileTest),varDeclaration);
        }
        return tom_make_DoWhileExpression(endExpression,doWhileTest);		        		      
      }}}}}}}}}}}}}}}if ( ( tom_is_fun_sym_ConstraintToExpression(tomMatch1Position1) ||  false  ) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch1Position1NameNumbercons=tom_get_slot_ConstraintToExpression_cons(tomMatch1Position1);if ( ( tom_is_fun_sym_MatchConstraint(tomMatch1Position1NameNumbercons) ||  false  ) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberconsNameNumberpattern=tom_get_slot_MatchConstraint_pattern(tomMatch1Position1NameNumbercons);if ( ( tom_is_fun_sym_ExpressionToTomTerm(tomMatch1Position1NameNumberconsNameNumberpattern) ||  false  ) ) {{  tom.engine.adt.tomexpression.types.Expression  tom_getHead=tom_get_slot_ExpressionToTomTerm_AstExpression(tomMatch1Position1NameNumberconsNameNumberpattern);{  tom.engine.adt.tomterm.types.TomTerm  tom_e=tomMatch1Position1NameNumberconsNameNumberpattern;{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_get_slot_MatchConstraint_subject(tomMatch1Position1NameNumbercons);if ( true ) {if (tom_is_sort_Expression(tom_getHead)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch2Position1=(( tom.engine.adt.tomexpression.types.Expression )tom_getHead);if ( ( tom_is_fun_sym_GetHead(tomMatch2Position1) ||  false  ) ) {if ( true ) {




            return tom_make_EqualTerm(tom_get_slot_GetHead_Codomain(tomMatch2Position1),tom_e,tom_t);
          }}if ( ( tom_is_fun_sym_Conditional(tomMatch2Position1) ||  false  ) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch2Position1NameNumberThen=tom_get_slot_Conditional_Then(tomMatch2Position1);if ( ( tom_is_fun_sym_GetHead(tomMatch2Position1NameNumberThen) ||  false  ) ) {if ( true ) {

            return tom_make_EqualTerm(tom_get_slot_GetHead_Codomain(tomMatch2Position1NameNumberThen),tom_e,tom_t);
          }}}}}}

      }}}}}}}}}}}return super.visit_Expression(tom__arg); }public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg) throws jjtraveler.VisitFailure {if (tom_is_sort_TomTerm(tom__arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch3Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);if ( ( tom_is_fun_sym_ListHead(tomMatch3Position1) ||  false  ) ) {if ( true ) {




        return tom_make_ExpressionToTomTerm(genGetHead(tom_get_slot_ListHead_Opname(tomMatch3Position1),tom_get_slot_ListHead_Codomain(tomMatch3Position1),tom_get_slot_ListHead_Variable(tomMatch3Position1)));
      }}if ( ( tom_is_fun_sym_ListTail(tomMatch3Position1) ||  false  ) ) {if ( true ) {


        return tom_make_ExpressionToTomTerm(genGetTail(tom_get_slot_ListTail_Opname(tomMatch3Position1),tom_get_slot_ListTail_Variable(tomMatch3Position1)));
      }}}}return super.visit_TomTerm(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_VariadicGenerator() { return new VariadicGenerator(); }

 // end strategy	
  
  /**
   * return the head of the list
   * when domain=codomain, the test is extended to:
   *   is_fsym_f(t)?get_head(t):t 
   *   the element itself is returned when it is not a list operator
   *   this occurs because the last element of a loop may not be a list
   */ 
  private static Expression genGetHead(TomName opName, TomType type, TomTerm var) {
    TomSymbol tomSymbol = TomConstraintCompiler.getSymbolTable().getSymbolFromName(((Name)opName).getString());
    TomType domain = TomBase.getSymbolDomain(tomSymbol).getHeadconcTomType();
    TomType codomain = TomBase.getSymbolCodomain(tomSymbol);
    if(domain==codomain) {
      return tom_make_Conditional(tom_make_IsFsym(opName,var),tom_make_GetHead(opName,type,var),tom_make_TomTermToExpression(var));
    }
    return tom_make_GetHead(opName,type,var);
  }

  /**
   * return the tail of the list
   * when domain=codomain, the test is extended to:
   *   is_fsym_f(t)?get_tail(t):make_empty() 
   *   the neutral element is returned when it is not a list operator
   *   this occurs because the last element of a loop may not be a list
   */ 
  private static Expression genGetTail(TomName opName, TomTerm var) {
    TomSymbol tomSymbol = TomConstraintCompiler.getSymbolTable().getSymbolFromName(((Name)opName).getString());
    TomType domain = TomBase.getSymbolDomain(tomSymbol).getHeadconcTomType();
    TomType codomain = TomBase.getSymbolCodomain(tomSymbol);
    if(domain==codomain) {
      return tom_make_Conditional(tom_make_IsFsym(opName,var),tom_make_GetTail(opName,var),tom_make_TomTermToExpression(tom_make_BuildEmptyList(opName)));
    }
    return tom_make_GetTail(opName,var);
  }
}
