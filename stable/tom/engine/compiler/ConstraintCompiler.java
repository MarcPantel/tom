/* Generated by TOM (version 2.5rc1): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler;

import tom.engine.tools.TomGenericPlugin;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.library.sl.*;
import tom.engine.tools.SymbolTable;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.TomBase;
import tom.engine.adt.tomconstraint.types.*;

/**
 * Tom compiler based on constraints.
 * 
 * It controls different phases of compilation:
 * - propagation of constraints
 * - instruction generation from constraints
 * - ...   
 */
public class ConstraintCompiler {

  /* Generated by TOM (version 2.5rc1): Do not edit this file *//* Generated by TOM (version 2.5rc1): Do not edit this file *//* Generated by TOM (version 2.5rc1): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5rc1): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Instruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Instruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.Instruction ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_InstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.InstructionList ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomNumber(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumber(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumber ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumberList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumberList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_PatternInstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PatternInstructionList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.PatternInstructionList ;}private static boolean tom_equal_term_PatternInstruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PatternInstruction(Object t) { return  t instanceof tom.engine.adt.tomterm.types.PatternInstruction ;}private static boolean tom_equal_term_Pattern(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Pattern(Object t) { return  t instanceof tom.engine.adt.tomterm.types.Pattern ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomList ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.engine.adt.tomoption.types.Option ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_If( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.If.make(t0, t1, t2) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_LetRef( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.LetRef.make(t0, t1, t2) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Nop() { return  tom.engine.adt.tominstruction.types.instruction.Nop.make() ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_AbstractBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(t0) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_NamedBlock( String  t0,  tom.engine.adt.tominstruction.types.InstructionList  t1) { return  tom.engine.adt.tominstruction.types.instruction.NamedBlock.make(t0, t1) ; }private static boolean tom_is_fun_sym_Match( tom.engine.adt.tominstruction.types.Instruction  t) { return  t instanceof tom.engine.adt.tominstruction.types.instruction.Match ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Match_SubjectList( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getSubjectList() ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_Match_AstPatternInstructionList( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Match_Option( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getOption() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_CompiledMatch( tom.engine.adt.tominstruction.types.Instruction  t0,  tom.engine.adt.tomoption.types.OptionList  t1) { return  tom.engine.adt.tominstruction.types.instruction.CompiledMatch.make(t0, t1) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_CompiledPattern( tom.engine.adt.tomterm.types.TomList  t0,  tom.engine.adt.tominstruction.types.Instruction  t1) { return  tom.engine.adt.tominstruction.types.instruction.CompiledPattern.make(t0, t1) ; }private static  tom.engine.adt.tomtype.types.TomType  tom_make_EmptyType() { return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make() ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_MatchNumber( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.MatchNumber.make(t0) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_PatternNumber( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.PatternNumber.make(t0) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_NameNumber( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomname.types.tomnumber.NameNumber.make(t0) ; }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  t instanceof tom.engine.adt.tomname.types.tomname.Name ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_Name( String  t0) { return  tom.engine.adt.tomname.types.tomname.Name.make(t0) ; }private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_PositionName( tom.engine.adt.tomname.types.TomNumberList  t0) { return  tom.engine.adt.tomname.types.tomname.PositionName.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TomTermToExpression( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Cast( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.Cast.make(t0, t1) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsSort( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsSort.make(t0, t1) ; }private static boolean tom_is_fun_sym_PatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t instanceof tom.engine.adt.tomterm.types.patterninstruction.PatternInstruction ;}private static  tom.engine.adt.tomterm.types.Pattern  tom_get_slot_PatternInstruction_Pattern( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t.getPattern() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_PatternInstruction_Action( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t.getAction() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_PatternInstruction_Option( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t.getOption() ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomterm.types.Pattern  t) { return  t instanceof tom.engine.adt.tomterm.types.pattern.Pattern ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_SubjectList( tom.engine.adt.tomterm.types.Pattern  t) { return  t.getSubjectList() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_TomList( tom.engine.adt.tomterm.types.Pattern  t) { return  t.getTomList() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_Guards( tom.engine.adt.tomterm.types.Pattern  t) { return  t.getGuards() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Variable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.Variable.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_VariableStar( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.VariableStar.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_SubjectList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.SubjectList ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_SubjectList_TomList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getTomList() ;}private static boolean tom_is_fun_sym_Automata( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Automata ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Automata( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomterm.types.TomList  t1,  tom.engine.adt.tomname.types.TomNumberList  t2,  tom.engine.adt.tominstruction.types.Instruction  t3) { return  tom.engine.adt.tomterm.types.tomterm.Automata.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Automata_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Automata_PatternList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getPatternList() ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_Automata_NumberList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNumberList() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_Automata_Inst( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getInst() ;}private static boolean tom_is_fun_sym_FunctionCall( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.FunctionCall ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_FunctionCall_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_FunctionCall_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_FunctionCall_Args( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getArgs() ;}private static boolean tom_is_fun_sym_BuildConstant( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildConstant ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_BuildConstant_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static boolean tom_is_fun_sym_BuildTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildTerm ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_BuildTerm_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_BuildTerm_Args( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getArgs() ;}private static  String  tom_get_slot_BuildTerm_ModuleName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getModuleName() ;}private static boolean tom_is_fun_sym_Label( tom.engine.adt.tomoption.types.Option  t) { return  t instanceof tom.engine.adt.tomoption.types.option.Label ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Label_AstName( tom.engine.adt.tomoption.types.Option  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_MatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(t0, t1) ; }private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) { return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getHeadconcInstruction() ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getTailconcInstruction() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.isEmptyconcInstruction() ;}   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {     if(tom_is_empty_concInstruction_InstructionList(l1)) {       return l2;     } else if(tom_is_empty_concInstruction_InstructionList(l2)) {       return l1;     } else if(tom_is_empty_concInstruction_InstructionList(tom_get_tail_concInstruction_InstructionList(l1))) {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(l1),l2);     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(tom_get_tail_concInstruction_InstructionList(l1),l2));     }   }   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end, tom.engine.adt.tominstruction.types.InstructionList  tail) {     if(tom_equal_term_InstructionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(tom_get_tail_concInstruction_InstructionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  t) { return  t instanceof tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber || t instanceof tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_empty_list_concTomNumber() { return  tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber.make() ; }private static  tom.engine.adt.tomname.types.TomNumberList  tom_cons_list_concTomNumber( tom.engine.adt.tomname.types.TomNumber  e,  tom.engine.adt.tomname.types.TomNumberList  l) { return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_get_head_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) { return  l.getHeadconcTomNumber() ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_tail_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) { return  l.getTailconcTomNumber() ;}private static boolean tom_is_empty_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) { return  l.isEmptyconcTomNumber() ;}   private static   tom.engine.adt.tomname.types.TomNumberList  tom_append_list_concTomNumber( tom.engine.adt.tomname.types.TomNumberList l1,  tom.engine.adt.tomname.types.TomNumberList  l2) {     if(tom_is_empty_concTomNumber_TomNumberList(l1)) {       return l2;     } else if(tom_is_empty_concTomNumber_TomNumberList(l2)) {       return l1;     } else if(tom_is_empty_concTomNumber_TomNumberList(tom_get_tail_concTomNumber_TomNumberList(l1))) {       return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(tom_get_head_concTomNumber_TomNumberList(l1),l2);     } else {       return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(tom_get_head_concTomNumber_TomNumberList(l1),tom_append_list_concTomNumber(tom_get_tail_concTomNumber_TomNumberList(l1),l2));     }   }   private static   tom.engine.adt.tomname.types.TomNumberList  tom_get_slice_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  begin,  tom.engine.adt.tomname.types.TomNumberList  end, tom.engine.adt.tomname.types.TomNumberList  tail) {     if(tom_equal_term_TomNumberList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(tom_get_head_concTomNumber_TomNumberList(begin),( tom.engine.adt.tomname.types.TomNumberList )tom_get_slice_concTomNumber(tom_get_tail_concTomNumber_TomNumberList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  t) { return  t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction || t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_empty_list_concPatternInstruction() { return  tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction.make() ; }private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_cons_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  e,  tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction.make(e,l) ; }private static  tom.engine.adt.tomterm.types.PatternInstruction  tom_get_head_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  l.getHeadconcPatternInstruction() ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_tail_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  l.getTailconcPatternInstruction() ;}private static boolean tom_is_empty_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  l.isEmptyconcPatternInstruction() ;}   private static   tom.engine.adt.tomterm.types.PatternInstructionList  tom_append_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList l1,  tom.engine.adt.tomterm.types.PatternInstructionList  l2) {     if(tom_is_empty_concPatternInstruction_PatternInstructionList(l1)) {       return l2;     } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(l2)) {       return l1;     } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(tom_get_tail_concPatternInstruction_PatternInstructionList(l1))) {       return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(tom_get_head_concPatternInstruction_PatternInstructionList(l1),l2);     } else {       return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(tom_get_head_concPatternInstruction_PatternInstructionList(l1),tom_append_list_concPatternInstruction(tom_get_tail_concPatternInstruction_PatternInstructionList(l1),l2));     }   }   private static   tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slice_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  begin,  tom.engine.adt.tomterm.types.PatternInstructionList  end, tom.engine.adt.tomterm.types.PatternInstructionList  tail) {     if(tom_equal_term_PatternInstructionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(tom_get_head_concPatternInstruction_PatternInstructionList(begin),( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_slice_concPatternInstruction(tom_get_tail_concPatternInstruction_PatternInstructionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomterm.types.TomList  t) { return  t instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm || t instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm ;}private static  tom.engine.adt.tomterm.types.TomList  tom_empty_list_concTomTerm() { return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ; }private static  tom.engine.adt.tomterm.types.TomList  tom_cons_list_concTomTerm( tom.engine.adt.tomterm.types.TomTerm  e,  tom.engine.adt.tomterm.types.TomList  l) { return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(e,l) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_head_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.getHeadconcTomTerm() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.getTailconcTomTerm() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.isEmptyconcTomTerm() ;}   private static   tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList l1,  tom.engine.adt.tomterm.types.TomList  l2) {     if(tom_is_empty_concTomTerm_TomList(l1)) {       return l2;     } else if(tom_is_empty_concTomTerm_TomList(l2)) {       return l1;     } else if(tom_is_empty_concTomTerm_TomList(tom_get_tail_concTomTerm_TomList(l1))) {       return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(tom_get_head_concTomTerm_TomList(l1),l2);     } else {       return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(tom_get_tail_concTomTerm_TomList(l1),l2));     }   }   private static   tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end, tom.engine.adt.tomterm.types.TomList  tail) {     if(tom_equal_term_TomList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm(tom_get_tail_concTomTerm_TomList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) { return  t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption || t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.getHeadconcOption() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.getTailconcOption() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.isEmptyconcOption() ;}   private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if(tom_is_empty_concOption_OptionList(l1)) {       return l2;     } else if(tom_is_empty_concOption_OptionList(l2)) {       return l1;     } else if(tom_is_empty_concOption_OptionList(tom_get_tail_concOption_OptionList(l1))) {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(tom_get_head_concOption_OptionList(l1),l2);     } else {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(tom_get_tail_concOption_OptionList(l1),l2));     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if(tom_equal_term_OptionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(tom_get_tail_concOption_OptionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if(tom_is_empty_AndConstraint_Constraint(l1)) {       return l2;     } else if(tom_is_empty_AndConstraint_Constraint(l2)) {       return l1;     } else if(tom_is_fun_sym_AndConstraint(l1)) {       if(tom_is_empty_AndConstraint_Constraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()))) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),tom_append_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_head_AndConstraint_Constraint(begin):begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_tail_AndConstraint_Constraint(begin):tom_empty_list_AndConstraint()),end,tail));     }   }   private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getHeadconcConstraint() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getTailconcConstraint() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.isEmptyconcConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if(tom_is_empty_concConstraint_ConstraintList(l1)) {       return l2;     } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {       return l1;     } else if(tom_is_empty_concConstraint_ConstraintList(tom_get_tail_concConstraint_ConstraintList(l1))) {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(l1),l2);     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(tom_get_tail_concConstraint_ConstraintList(l1),l2));     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if(tom_equal_term_ConstraintList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(tom_get_tail_concConstraint_ConstraintList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5rc1): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5rc1): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }   private static boolean tom_is_fun_sym_SequenceId( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.SequenceId) ;}private static  tom.library.sl.Strategy  tom_empty_list_SequenceId() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_SequenceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.SequenceId(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.THEN) ;}private static boolean tom_is_empty_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_SequenceId_Strategy(l1)) {       return l2;     } else if(tom_is_empty_SequenceId_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_SequenceId(l1)) {       if(tom_is_empty_SequenceId_Strategy(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()))) {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),tom_append_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_head_SequenceId_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_tail_SequenceId_Strategy(begin):tom_empty_list_SequenceId()),end,tail));     }   }    /* Generated by TOM (version 2.5rc1): Do not edit this file */ /* Generated by TOM (version 2.5rc1): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_InnermostId( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_cons_list_Sequence(tom_cons_list_SequenceId(v,tom_cons_list_SequenceId(tom_make_MuVar("_x"),tom_empty_list_SequenceId())),tom_empty_list_Sequence()))) ; }   


  private static SymbolTable symbolTable = null;
  private static TomNumberList rootpath = null;
  // keeps track of the match number to insure distinct variables' 
  // names for distinct match constructs
  private static int matchNumber = 0;
  // keeps track of the subject number to insure distinct variables' 
  // names when renaming subjects
  private static int freshSubjectCounter = 0;	
  private static int freshVarCounter = 0;
  private static final String freshVarPrefix = "_freshVar_";
  private static final String freshBeginPrefix = "_begin_";
  private static final String freshEndPrefix = "_end_";

  public static TomTerm compile(TomTerm termToCompile,SymbolTable symbolTable) throws VisitFailure {
    ConstraintCompiler.symbolTable = symbolTable;
    return  (TomTerm)tom_make_InnermostId(tom_make_CompileMatch()).visit(termToCompile);		
  }

  // looks for a 'Match' instruction:
  // 1. transforms each sequence of patterns into a conjuction of MatchConstraint
  // 2. launch PropagationManager
  // 3. launch PreGenerator
  // 4. launch GenerationManager
  // 5. launch PostGenerator  
  // 6. transforms resulted expression into a CompiledMatch
  private static class CompileMatch extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public CompileMatch() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch133NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_Match(tomMatch133NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch133NameNumber_freshVar_0=tom_get_slot_Match_SubjectList(tomMatch133NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch133NameNumber_freshVar_1=tom_get_slot_Match_AstPatternInstructionList(tomMatch133NameNumberfreshSubject_1);{  tom.engine.adt.tomoption.types.OptionList  tomMatch133NameNumber_freshVar_2=tom_get_slot_Match_Option(tomMatch133NameNumberfreshSubject_1);if (tom_is_fun_sym_SubjectList(tomMatch133NameNumber_freshVar_0)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch133NameNumber_freshVar_3=tom_get_slot_SubjectList_TomList(tomMatch133NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomList  tom_subjectList=tomMatch133NameNumber_freshVar_3;{  tom.engine.adt.tomterm.types.PatternInstructionList  tom_patternInstructionList=tomMatch133NameNumber_freshVar_1;if ( true ) {

				
        matchNumber++;
        rootpath = tom_cons_list_concTomNumber(tom_make_MatchNumber(matchNumber),tom_empty_list_concTomNumber());
        freshSubjectCounter = 0;
        freshVarCounter = 0;
        int actionNumber = 0;
        TomList automataList = tom_empty_list_concTomTerm();	
        // get the new names for subjects (for further casts if needed - especially for lists)
        TomList renamedSubjects = renameSubjects(tom_subjectList);
        // for each pattern action <term>,...,<term> -> { action }
        // build a matching automata
        if (tom_is_sort_PatternInstructionList(tom_patternInstructionList)) {{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch132NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_patternInstructionList);if (tom_is_fun_sym_concPatternInstruction(tomMatch132NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch132NameNumber_freshVar_0=tomMatch132NameNumberfreshSubject_1;{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch132NameNumber_begin_2=tomMatch132NameNumber_freshVar_0;{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch132NameNumber_end_3=tomMatch132NameNumber_freshVar_0;do {{{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch132NameNumber_freshVar_1=tomMatch132NameNumber_end_3;if (!(tom_is_empty_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_freshVar_1))) {if (tom_is_fun_sym_PatternInstruction(tom_get_head_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_freshVar_1))) {{  tom.engine.adt.tomterm.types.Pattern  tomMatch132NameNumber_freshVar_6=tom_get_slot_PatternInstruction_Pattern(tom_get_head_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_freshVar_1));{  tom.engine.adt.tominstruction.types.Instruction  tomMatch132NameNumber_freshVar_7=tom_get_slot_PatternInstruction_Action(tom_get_head_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_freshVar_1));{  tom.engine.adt.tomoption.types.OptionList  tomMatch132NameNumber_freshVar_8=tom_get_slot_PatternInstruction_Option(tom_get_head_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_freshVar_1));if (tom_is_fun_sym_Pattern(tomMatch132NameNumber_freshVar_6)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch132NameNumber_freshVar_9=tom_get_slot_Pattern_TomList(tomMatch132NameNumber_freshVar_6);{  tom.engine.adt.tomterm.types.TomList  tom_patternList=tomMatch132NameNumber_freshVar_9;{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch132NameNumber_freshVar_4=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_freshVar_1);if ( true ) {

            Constraint constraint = ConstraintCompiler.buildConstraintConjunction(tom_patternList,renamedSubjects);            
            try {
              actionNumber++;
              
              Constraint propagationResult = ConstraintPropagator.performPropagations(constraint);
              Expression preGeneratedExpr = PreGenerator.performPreGenerationTreatment(propagationResult);
              Instruction matchingAutomata = ConstraintGenerator.performGenerations(preGeneratedExpr, tomMatch132NameNumber_freshVar_7);
              Instruction postGenerationAutomata = PostGenerator.performPostGenerationTreatment(matchingAutomata);              
                            
              TomNumberList numberList = tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_PatternNumber(actionNumber),tom_empty_list_concTomNumber()));
              TomTerm automata = tom_make_Automata(tomMatch132NameNumber_freshVar_8,tom_patternList,numberList,postGenerationAutomata);
              automataList = tom_append_list_concTomTerm(automataList,tom_cons_list_concTomTerm(automata,tom_empty_list_concTomTerm())); //append(automata,automataList);
            } catch(Exception e) {
              e.printStackTrace();
              throw new TomRuntimeException("Propagation or generation exception:" + e);
            }																	    						
          }}}}}}}}}}}if (tom_is_empty_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_end_3)) {tomMatch132NameNumber_end_3=tomMatch132NameNumber_begin_2;} else {tomMatch132NameNumber_end_3=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch132NameNumber_end_3);}}} while(!(tom_equal_term_PatternInstructionList(tomMatch132NameNumber_end_3, tomMatch132NameNumber_begin_2)));}}}}}}
// end %match				
        /*
         * return the compiled Match construction
         */
        InstructionList astAutomataList = ConstraintCompiler.automataListCompileMatchingList(automataList);
        return tom_make_CompiledMatch(collectVariableFromSubjectList(tom_subjectList,renamedSubjects,tom_make_AbstractBlock(astAutomataList)),tomMatch133NameNumber_freshVar_2);
      }}}}}}}}}}}return super.visit_Instruction(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_CompileMatch() { return new CompileMatch(); }

// end strategy

  /**
   * collects match variables (from match(t1,...,tn)) and
   * 1. checks their instance type 
   * 2. create new renamed subjects with corresponding casts	 
   */
  private static Instruction collectVariableFromSubjectList(TomList subjectList, TomList renamedSubjects, Instruction body) {
    if (tom_is_sort_TomList(subjectList)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch134NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )subjectList);if (tom_is_fun_sym_concTomTerm(tomMatch134NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch134NameNumber_freshVar_0=tomMatch134NameNumberfreshSubject_1;if (tom_is_empty_concTomTerm_TomList(tomMatch134NameNumber_freshVar_0)) {if ( true ) {
 return body; }}}}if (tom_is_fun_sym_concTomTerm(tomMatch134NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch134NameNumber_freshVar_3=tomMatch134NameNumberfreshSubject_1;if (!(tom_is_empty_concTomTerm_TomList(tomMatch134NameNumber_freshVar_3))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch134NameNumber_freshVar_1=tom_get_head_concTomTerm_TomList(tomMatch134NameNumber_freshVar_3);{  tom.engine.adt.tomterm.types.TomList  tomMatch134NameNumber_freshVar_4=tom_get_tail_concTomTerm_TomList(tomMatch134NameNumber_freshVar_3);if (tom_is_fun_sym_Variable(tomMatch134NameNumber_freshVar_1)) {{  tom.engine.adt.tomtype.types.TomType  tomMatch134NameNumber_freshVar_2=tom_get_slot_Variable_AstType(tomMatch134NameNumber_freshVar_1);{  tom.engine.adt.tomtype.types.TomType  tom_variableType=tomMatch134NameNumber_freshVar_2;{  tom.engine.adt.tomterm.types.TomTerm  tom_subjectVar=tomMatch134NameNumber_freshVar_1;if ( true ) {

        body = collectVariableFromSubjectList(tomMatch134NameNumber_freshVar_4,renamedSubjects.getTailconcTomTerm(),body);		        
        Expression source = tom_make_Cast(tom_variableType,tom_make_TomTermToExpression(tom_subjectVar));
        Instruction let = tom_make_LetRef(renamedSubjects.getHeadconcTomTerm(),source,body);
        // Check that the matched variable has the correct type
        return tom_make_If(tom_make_IsSort(tom_variableType,tom_subjectVar),let,tom_make_Nop());
      }}}}}}}}}}if (tom_is_fun_sym_concTomTerm(tomMatch134NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch134NameNumber_freshVar_25=tomMatch134NameNumberfreshSubject_1;if (!(tom_is_empty_concTomTerm_TomList(tomMatch134NameNumber_freshVar_25))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch134NameNumber_freshVar_24=tom_get_head_concTomTerm_TomList(tomMatch134NameNumber_freshVar_25);{  tom.engine.adt.tomterm.types.TomList  tomMatch134NameNumber_freshVar_26=tom_get_tail_concTomTerm_TomList(tomMatch134NameNumber_freshVar_25);{ boolean tomMatch134NameNumber_freshVar_46= false ;if (tom_is_fun_sym_Variable(tomMatch134NameNumber_freshVar_24)) {tomMatch134NameNumber_freshVar_46= true ;}if ((tomMatch134NameNumber_freshVar_46 ==  false )) {if ( true ) {


        body = collectVariableFromSubjectList(tomMatch134NameNumber_freshVar_26,renamedSubjects.getTailconcTomTerm(),body);
        Expression source = tom_make_Cast(((Variable)renamedSubjects.getHeadconcTomTerm()).getAstType(),tom_make_TomTermToExpression(tomMatch134NameNumber_freshVar_24));
        return tom_make_LetRef(renamedSubjects.getHeadconcTomTerm(),source,body);
      }}}}}}}}}}

    throw new TomRuntimeException("collectVariableFromSubjectList: strange term: " + subjectList);
  }

  /**
   * given the list of match variables (from match(t1,...,tn)), it renames them and returns the new list 
   */
  private static TomList renameSubjects(TomList subjectList) {
    TomList renamedSubjects = tom_empty_list_concTomTerm();
    if (tom_is_sort_TomList(subjectList)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )subjectList);if (tom_is_fun_sym_concTomTerm(tomMatch136NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch136NameNumber_freshVar_0=tomMatch136NameNumberfreshSubject_1;{  tom.engine.adt.tomterm.types.TomList  tomMatch136NameNumber_begin_2=tomMatch136NameNumber_freshVar_0;{  tom.engine.adt.tomterm.types.TomList  tomMatch136NameNumber_end_3=tomMatch136NameNumber_freshVar_0;do {{{  tom.engine.adt.tomterm.types.TomList  tomMatch136NameNumber_freshVar_1=tomMatch136NameNumber_end_3;if (!(tom_is_empty_concTomTerm_TomList(tomMatch136NameNumber_freshVar_1))) {{  tom.engine.adt.tomterm.types.TomTerm  tom_subject=tom_get_head_concTomTerm_TomList(tomMatch136NameNumber_freshVar_1);{  tom.engine.adt.tomterm.types.TomList  tomMatch136NameNumber_freshVar_4=tom_get_tail_concTomTerm_TomList(tomMatch136NameNumber_freshVar_1);if ( true ) {

        TomName freshSubjectName  = tom_make_PositionName(tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_make_Name("freshSubject_" + (++freshSubjectCounter))),tom_empty_list_concTomNumber())));
        TomType freshSubjectType = tom_make_EmptyType();
        if (tom_is_sort_TomTerm(tom_subject)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch135NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_subject);{ boolean tomMatch135NameNumber_freshVar_1= false ;{  tom.engine.adt.tomtype.types.TomType  tomMatch135NameNumber_freshVar_0= null ;if (tom_is_fun_sym_Variable(tomMatch135NameNumberfreshSubject_1)) {{tomMatch135NameNumber_freshVar_1= true ;tomMatch135NameNumber_freshVar_0=tom_get_slot_Variable_AstType(tomMatch135NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_VariableStar(tomMatch135NameNumberfreshSubject_1)) {{tomMatch135NameNumber_freshVar_1= true ;tomMatch135NameNumber_freshVar_0=tom_get_slot_VariableStar_AstType(tomMatch135NameNumberfreshSubject_1);}}}if ((tomMatch135NameNumber_freshVar_1 ==  true )) {if ( true ) {
 
            freshSubjectType = tomMatch135NameNumber_freshVar_0;
          }}}}{  tom.engine.adt.tomterm.types.TomTerm  tomMatch135NameNumber_freshVar_2=tomMatch135NameNumberfreshSubject_1;{ boolean tomMatch135NameNumber_freshVar_5= false ;{  tom.engine.adt.tomname.types.TomName  tomMatch135NameNumber_freshVar_3= null ;if (tom_is_fun_sym_BuildTerm(tomMatch135NameNumber_freshVar_2)) {{tomMatch135NameNumber_freshVar_5= true ;tomMatch135NameNumber_freshVar_3=tom_get_slot_BuildTerm_AstName(tomMatch135NameNumber_freshVar_2);}} else {if (tom_is_fun_sym_FunctionCall(tomMatch135NameNumber_freshVar_2)) {{tomMatch135NameNumber_freshVar_5= true ;tomMatch135NameNumber_freshVar_3=tom_get_slot_FunctionCall_AstName(tomMatch135NameNumber_freshVar_2);}} else {if (tom_is_fun_sym_BuildConstant(tomMatch135NameNumber_freshVar_2)) {{tomMatch135NameNumber_freshVar_5= true ;tomMatch135NameNumber_freshVar_3=tom_get_slot_BuildConstant_AstName(tomMatch135NameNumber_freshVar_2);}}}}if ((tomMatch135NameNumber_freshVar_5 ==  true )) {if (tom_is_fun_sym_Name(tomMatch135NameNumber_freshVar_3)) {{  String  tomMatch135NameNumber_freshVar_4=tom_get_slot_Name_String(tomMatch135NameNumber_freshVar_3);{  tom.engine.adt.tomterm.types.TomTerm  tom_sv=tomMatch135NameNumber_freshVar_2;if ( true ) {

            TomSymbol tomSymbol = symbolTable.getSymbolFromName(tomMatch135NameNumber_freshVar_4);				        
            if(tomSymbol != null) {
              freshSubjectType = TomBase.getSymbolCodomain(tomSymbol);
            } else if(tom_sv.isFunctionCall()) {
              freshSubjectType =tom_sv.getAstType();
            }
          }}}}}}}}}}
// end match
        TomTerm renamedVar = tom_make_Variable(tom_empty_list_concOption(),freshSubjectName,freshSubjectType,tom_empty_list_concConstraint());  
        renamedSubjects = tom_cons_list_concTomTerm(renamedVar,tom_append_list_concTomTerm(renamedSubjects,tom_empty_list_concTomTerm()));
      }}}}}if (tom_is_empty_concTomTerm_TomList(tomMatch136NameNumber_end_3)) {tomMatch136NameNumber_end_3=tomMatch136NameNumber_begin_2;} else {tomMatch136NameNumber_end_3=tom_get_tail_concTomTerm_TomList(tomMatch136NameNumber_end_3);}}} while(!(tom_equal_term_TomList(tomMatch136NameNumber_end_3, tomMatch136NameNumber_begin_2)));}}}}}}
// end match
    return renamedSubjects.reverse();
  }

  /**
   * takes a list of patterns (p1...pn) and a list of subjects (s1...sn)
   * and generates p1 << s1 /\ .... /\ pn << sn
   */
  private static Constraint buildConstraintConjunction(TomList patternList, TomList subjectList) {
    Constraint constraint = tom_empty_list_AndConstraint();
    while(!patternList.isEmptyconcTomTerm()) {
      TomTerm pattern = patternList.getHeadconcTomTerm();
      TomTerm subject = subjectList.getHeadconcTomTerm();
      
      constraint = tom_cons_list_AndConstraint(tom_make_MatchConstraint(pattern,subject),tom_append_list_AndConstraint(constraint,tom_empty_list_AndConstraint()));

      patternList= patternList.getTailconcTomTerm();
      subjectList= subjectList.getTailconcTomTerm();
    }// end while
    return constraint;
  }	

  /**
   * builds a list of instructions from a list of automata
   */
  private static InstructionList automataListCompileMatchingList(TomList automataList) {
    if (tom_is_sort_TomList(automataList)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch138NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )automataList);if (tom_is_fun_sym_concTomTerm(tomMatch138NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch138NameNumber_freshVar_0=tomMatch138NameNumberfreshSubject_1;if (tom_is_empty_concTomTerm_TomList(tomMatch138NameNumber_freshVar_0)) {if ( true ) {
 return tom_empty_list_concInstruction(); }}}}if (tom_is_fun_sym_concTomTerm(tomMatch138NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch138NameNumber_freshVar_1=tomMatch138NameNumberfreshSubject_1;if (!(tom_is_empty_concTomTerm_TomList(tomMatch138NameNumber_freshVar_1))) {if (tom_is_fun_sym_Automata(tom_get_head_concTomTerm_TomList(tomMatch138NameNumber_freshVar_1))) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch138NameNumber_freshVar_14=tom_get_slot_Automata_Option(tom_get_head_concTomTerm_TomList(tomMatch138NameNumber_freshVar_1));{  tom.engine.adt.tomterm.types.TomList  tomMatch138NameNumber_freshVar_15=tom_get_slot_Automata_PatternList(tom_get_head_concTomTerm_TomList(tomMatch138NameNumber_freshVar_1));{  tom.engine.adt.tomname.types.TomNumberList  tomMatch138NameNumber_freshVar_16=tom_get_slot_Automata_NumberList(tom_get_head_concTomTerm_TomList(tomMatch138NameNumber_freshVar_1));{  tom.engine.adt.tominstruction.types.Instruction  tomMatch138NameNumber_freshVar_17=tom_get_slot_Automata_Inst(tom_get_head_concTomTerm_TomList(tomMatch138NameNumber_freshVar_1));{  tom.engine.adt.tomoption.types.OptionList  tom_optionList=tomMatch138NameNumber_freshVar_14;{  tom.engine.adt.tominstruction.types.Instruction  tom_instruction=tomMatch138NameNumber_freshVar_17;{  tom.engine.adt.tomterm.types.TomList  tomMatch138NameNumber_freshVar_2=tom_get_tail_concTomTerm_TomList(tomMatch138NameNumber_freshVar_1);if ( true ) {

        InstructionList newList = automataListCompileMatchingList(tomMatch138NameNumber_freshVar_2);				
        // if a label is assigned to a pattern (label:pattern ->
        // action) we generate corresponding labeled-block				 
        if (tom_is_sort_OptionList(tom_optionList)) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch137NameNumberfreshSubject_1=(( tom.engine.adt.tomoption.types.OptionList )tom_optionList);if (tom_is_fun_sym_concOption(tomMatch137NameNumberfreshSubject_1)) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch137NameNumber_freshVar_0=tomMatch137NameNumberfreshSubject_1;{  tom.engine.adt.tomoption.types.OptionList  tomMatch137NameNumber_begin_2=tomMatch137NameNumber_freshVar_0;{  tom.engine.adt.tomoption.types.OptionList  tomMatch137NameNumber_end_3=tomMatch137NameNumber_freshVar_0;do {{{  tom.engine.adt.tomoption.types.OptionList  tomMatch137NameNumber_freshVar_1=tomMatch137NameNumber_end_3;if (!(tom_is_empty_concOption_OptionList(tomMatch137NameNumber_freshVar_1))) {if (tom_is_fun_sym_Label(tom_get_head_concOption_OptionList(tomMatch137NameNumber_freshVar_1))) {{  tom.engine.adt.tomname.types.TomName  tomMatch137NameNumber_freshVar_6=tom_get_slot_Label_AstName(tom_get_head_concOption_OptionList(tomMatch137NameNumber_freshVar_1));if (tom_is_fun_sym_Name(tomMatch137NameNumber_freshVar_6)) {{  String  tomMatch137NameNumber_freshVar_7=tom_get_slot_Name_String(tomMatch137NameNumber_freshVar_6);{  tom.engine.adt.tomoption.types.OptionList  tomMatch137NameNumber_freshVar_4=tom_get_tail_concOption_OptionList(tomMatch137NameNumber_freshVar_1);if ( true ) {tom_instruction

= tom_make_NamedBlock(tomMatch137NameNumber_freshVar_7,tom_cons_list_concInstruction(tom_instruction,tom_empty_list_concInstruction()));
          }}}}}}}}if (tom_is_empty_concOption_OptionList(tomMatch137NameNumber_end_3)) {tomMatch137NameNumber_end_3=tomMatch137NameNumber_begin_2;} else {tomMatch137NameNumber_end_3=tom_get_tail_concOption_OptionList(tomMatch137NameNumber_end_3);}}} while(!(tom_equal_term_OptionList(tomMatch137NameNumber_end_3, tomMatch137NameNumber_begin_2)));}}}}}}
				
        return tom_cons_list_concInstruction(tom_make_CompiledPattern(tomMatch138NameNumber_freshVar_15,tom_instruction),tom_append_list_concInstruction(newList,tom_empty_list_concInstruction()));
      }}}}}}}}}}}}}}

    return null;
  }
  
  /**
   * helper functions - mostly related to free var generation
   */

  public static TomNumberList getRootpath() {
    return rootpath;
  }

  public static SymbolTable getSymbolTable(){
    return symbolTable;
  }

  public static TomType getTermTypeFromName(TomName tomName) {
    String stringName = ((Name)tomName).getString();
    TomSymbol tomSymbol = symbolTable.getSymbolFromName(stringName);    
    return tomSymbol.getTypesToType().getCodomain();
  }
  
  public static TomType getSlotType(TomName tomName, TomName slotName) {
    String stringName = ((Name)tomName).getString();
    TomSymbol tomSymbol = symbolTable.getSymbolFromName(stringName);
    return TomBase.getSlotType(tomSymbol,slotName);    
  } 
 
// [pem] really useful ?
  public static TomType getIntType() {
    return symbolTable.getIntType();
  }
  
// [pem] really useful ?
  public static TomType getBooleanType() {
    return symbolTable.getBooleanType();
  }
  
  public static TomType getTermTypeFromTerm(TomTerm tomTerm) {    
    return TomBase.getTermType(tomTerm,symbolTable);    
  }
  
  public static TomTerm getFreshVariable(TomType type) {
    return getFreshVariable(freshVarPrefix + (freshVarCounter++), type);    
  }
  
  public static TomTerm getFreshVariable(String name, TomType type) {
    TomNumberList path = getRootpath();
    TomName freshVarName  = tom_make_PositionName(tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_make_Name(name)),tom_empty_list_concTomNumber())));
    return tom_make_Variable(tom_empty_list_concOption(),freshVarName,type,tom_empty_list_concConstraint());
  }
  
  public static TomTerm getFreshVariableStar(TomType type) {
    return getFreshVariableStar(freshVarPrefix + (freshVarCounter++), type);
  }
  
  public static TomTerm getFreshVariableStar(String name, TomType type) {
    TomNumberList path = getRootpath();
    TomName freshVarName  = tom_make_PositionName(tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_make_Name(name)),tom_empty_list_concTomNumber())));
    return tom_make_VariableStar(tom_empty_list_concOption(),freshVarName,type,tom_empty_list_concConstraint());
  }
  
  public static TomTerm getBeginVariableStar(TomType type) {
    return getFreshVariableStar(freshBeginPrefix + (freshVarCounter++),type);
  }

  public static TomTerm getEndVariableStar(TomType type) {
    return ConstraintCompiler.getFreshVariableStar(freshEndPrefix + (freshVarCounter++),type);
  }
}
