
























package tom.engine.compiler.propagator;



import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.engine.adt.code.types.*;
import tom.library.sl.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.compiler.*;
import tom.engine.TomBase;
import tom.engine.exception.TomRuntimeException;
import java.util.ArrayList;
import tom.engine.compiler.Compiler;
import tom.engine.tools.TomConstraintPrettyPrinter;
import tom.engine.tools.ASTFactory;






public class ACPropagator implements IBasePropagator {


     private static   tom.engine.adt.code.types.BQTermList  tom_append_list_concBQTerm( tom.engine.adt.code.types.BQTermList l1,  tom.engine.adt.code.types.BQTermList  l2) {     if( l1.isEmptyconcBQTerm() ) {       return l2;     } else if( l2.isEmptyconcBQTerm() ) {       return l1;     } else if(  l1.getTailconcBQTerm() .isEmptyconcBQTerm() ) {       return  tom.engine.adt.code.types.bqtermlist.ConsconcBQTerm.make( l1.getHeadconcBQTerm() ,l2) ;     } else {       return  tom.engine.adt.code.types.bqtermlist.ConsconcBQTerm.make( l1.getHeadconcBQTerm() ,tom_append_list_concBQTerm( l1.getTailconcBQTerm() ,l2)) ;     }   }   private static   tom.engine.adt.code.types.BQTermList  tom_get_slice_concBQTerm( tom.engine.adt.code.types.BQTermList  begin,  tom.engine.adt.code.types.BQTermList  end, tom.engine.adt.code.types.BQTermList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcBQTerm()  ||  (end== tom.engine.adt.code.types.bqtermlist.EmptyconcBQTerm.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.code.types.bqtermlist.ConsconcBQTerm.make( begin.getHeadconcBQTerm() ,( tom.engine.adt.code.types.BQTermList )tom_get_slice_concBQTerm( begin.getTailconcBQTerm() ,end,tail)) ;   }      private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2)) ;     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomName()  ||  (end== tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail)) ;   }      private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcSlot()  ||  (end== tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;   }      private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if( l1.isEmptyconcOption() ) {       return l2;     } else if( l2.isEmptyconcOption() ) {       return l1;     } else if(  l1.getTailconcOption() .isEmptyconcOption() ) {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,l2) ;     } else {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,tom_append_list_concOption( l1.getTailconcOption() ,l2)) ;     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcOption()  ||  (end== tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( begin.getHeadconcOption() ,( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption( begin.getTailconcOption() ,end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if(  l1.getTailAndConstraint() .isEmptyAndConstraint() ) {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( l1.getHeadAndConstraint() ,l2) ;       } else {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( l1.getHeadAndConstraint() ,tom_append_list_AndConstraint( l1.getTailAndConstraint() ,l2)) ;       }     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyAndConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ),end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;   }      private static   tom.engine.adt.theory.types.Theory  tom_append_list_concElementaryTheory( tom.engine.adt.theory.types.Theory l1,  tom.engine.adt.theory.types.Theory  l2) {     if( l1.isEmptyconcElementaryTheory() ) {       return l2;     } else if( l2.isEmptyconcElementaryTheory() ) {       return l1;     } else if(  l1.getTailconcElementaryTheory() .isEmptyconcElementaryTheory() ) {       return  tom.engine.adt.theory.types.theory.ConsconcElementaryTheory.make( l1.getHeadconcElementaryTheory() ,l2) ;     } else {       return  tom.engine.adt.theory.types.theory.ConsconcElementaryTheory.make( l1.getHeadconcElementaryTheory() ,tom_append_list_concElementaryTheory( l1.getTailconcElementaryTheory() ,l2)) ;     }   }   private static   tom.engine.adt.theory.types.Theory  tom_get_slice_concElementaryTheory( tom.engine.adt.theory.types.Theory  begin,  tom.engine.adt.theory.types.Theory  end, tom.engine.adt.theory.types.Theory  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcElementaryTheory()  ||  (end== tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.theory.types.theory.ConsconcElementaryTheory.make( begin.getHeadconcElementaryTheory() ,( tom.engine.adt.theory.types.Theory )tom_get_slice_concElementaryTheory( begin.getTailconcElementaryTheory() ,end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Sequence )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ) == null )) {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),l2) ;       } else {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),tom_append_list_Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Sequence.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Sequence.make(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Choice )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ) ==null )) {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),l2) ;       } else {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),tom_append_list_Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Choice.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Choice.make(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.SequenceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ) == null )) {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),tom_append_list_SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.SequenceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.SequenceId.make(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.ChoiceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ) ==null )) {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),tom_append_list_ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.ChoiceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.ChoiceId.make(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ): null ),end,tail)) ;   }   private static  tom.library.sl.Strategy  tom_make_AUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("x") ), tom.library.sl.Choice.make(s2, tom.library.sl.Choice.make( tom.library.sl.Sequence.make( tom.library.sl.Sequence.make(s1, tom.library.sl.Sequence.make(( new tom.library.sl.All(( new tom.library.sl.MuVar("x") )) ), null ) ) , tom.library.sl.Sequence.make(( new tom.library.sl.One(( new tom.library.sl.Identity() )) ), null ) ) , null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_EUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("x") ), tom.library.sl.Choice.make(s2, tom.library.sl.Choice.make( tom.library.sl.Sequence.make(s1, tom.library.sl.Sequence.make(( new tom.library.sl.One(( new tom.library.sl.MuVar("x") )) ), null ) ) , null ) ) ) ));}private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  s) { return (  tom.library.sl.Choice.make(s, tom.library.sl.Choice.make(( new tom.library.sl.Identity() ), null ) )  );}private static  tom.library.sl.Strategy  tom_make_Repeat( tom.library.sl.Strategy  s) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Choice.make( tom.library.sl.Sequence.make(s, tom.library.sl.Sequence.make(( new tom.library.sl.MuVar("_x") ), null ) ) , tom.library.sl.Choice.make(( new tom.library.sl.Identity() ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Sequence.make(v, tom.library.sl.Sequence.make(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Choice.make(v, tom.library.sl.Choice.make(( new tom.library.sl.One(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_RepeatId( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.SequenceId.make(v, tom.library.sl.SequenceId.make(( new tom.library.sl.MuVar("_x") ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.ChoiceId.make(v, tom.library.sl.ChoiceId.make(( new tom.library.sl.OneId(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}








  private Compiler compiler;  
  private ConstraintPropagator constraintPropagator; 
 
  public Compiler getCompiler() {
    return this.compiler;
  }
 
  public ACPropagator(Compiler compiler, ConstraintPropagator constraintPropagator) {
    this.compiler = compiler;
    this.constraintPropagator = constraintPropagator;
  }

  public Constraint propagate(Constraint constraint) throws VisitFailure {
    Constraint result = constraint;
    result = tom_make_RepeatId(tom_make_TopDown( new RemoveNonVariableStar(this) )).visitLight(result);		
    result = tom_make_RepeatId(tom_make_TopDown( new RemoveNonLinearVariableStar(this) )).visitLight(result);		
    result = tom_make_RepeatId(tom_make_TopDown( new PerformAbstraction(this) )).visitLight(result);		
    result = tom_make_TopDown( new CleanSingleVariable() ).visitLight(result);		
    
    if(result!=constraint) {
      
      
      
    }
    return result;
  }	

  
  public static class RemoveNonVariableStar extends tom.library.sl.AbstractStrategyBasic {private  ACPropagator  acp;public RemoveNonVariableStar( ACPropagator  acp) {super(( new tom.library.sl.Identity() ));this.acp=acp;}public  ACPropagator  getacp() {return acp;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch218_1= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch218_1) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomoption.types.OptionList  tomMatch218_6= tomMatch218_1.getOptions() ; tom.engine.adt.tomname.types.TomNameList  tomMatch218_7= tomMatch218_1.getNameList() ;if ( (((( tom.engine.adt.tomoption.types.OptionList )tomMatch218_6) instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption) || ((( tom.engine.adt.tomoption.types.OptionList )tomMatch218_6) instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption)) ) { tom.engine.adt.tomoption.types.OptionList  tomMatch218_end_14=tomMatch218_6;do {{ /* unamed block */if (!( tomMatch218_end_14.isEmptyconcOption() )) { tom.engine.adt.tomoption.types.Option  tomMatch218_20= tomMatch218_end_14.getHeadconcOption() ;if ( ((( tom.engine.adt.tomoption.types.Option )tomMatch218_20) instanceof tom.engine.adt.tomoption.types.option.MatchingTheory) ) { tom.engine.adt.theory.types.Theory  tomMatch218_19= tomMatch218_20.getTheory() ;if ( (((( tom.engine.adt.theory.types.Theory )tomMatch218_19) instanceof tom.engine.adt.theory.types.theory.ConsconcElementaryTheory) || ((( tom.engine.adt.theory.types.Theory )tomMatch218_19) instanceof tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory)) ) { tom.engine.adt.theory.types.Theory  tomMatch218_end_28=tomMatch218_19;do {{ /* unamed block */if (!( tomMatch218_end_28.isEmptyconcElementaryTheory() )) {if ( ((( tom.engine.adt.theory.types.ElementaryTheory ) tomMatch218_end_28.getHeadconcElementaryTheory() ) instanceof tom.engine.adt.theory.types.elementarytheory.AC) ) {if ( (((( tom.engine.adt.tomname.types.TomNameList )tomMatch218_7) instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || ((( tom.engine.adt.tomname.types.TomNameList )tomMatch218_7) instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) { tom.engine.adt.tomname.types.TomNameList  tom___namelist=tomMatch218_7;if (!( tomMatch218_7.isEmptyconcTomName() )) { tom.engine.adt.tomname.types.TomName  tomMatch218_23= tomMatch218_7.getHeadconcTomName() ;if ( ((( tom.engine.adt.tomname.types.TomName )tomMatch218_23) instanceof tom.engine.adt.tomname.types.tomname.Name) ) { String  tom___tomName= tomMatch218_23.getString() ;if (  tomMatch218_7.getTailconcTomName() .isEmptyconcTomName() ) { tom.engine.adt.tomslot.types.SlotList  tom___slots= tomMatch218_1.getSlots() ; tom.engine.adt.tomtype.types.TomType  tom___aType= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getAstType() ;





        OptionList optWithoutAC = tom_append_list_concOption(tom_get_slice_concOption(tomMatch218_6,tomMatch218_end_14, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ), tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( tom.engine.adt.tomoption.types.option.MatchingTheory.make(tom_append_list_concElementaryTheory(tom_get_slice_concElementaryTheory(tomMatch218_19,tomMatch218_end_28, tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() ),tom_append_list_concElementaryTheory( tomMatch218_end_28.getTailconcElementaryTheory() , tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() ))) ,tom_append_list_concOption( tomMatch218_end_14.getTailconcOption() , tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() )) );

        { /* unamed block */{ /* unamed block */if ( (tom___slots instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) { tom.engine.adt.tomslot.types.SlotList  tomMatch219_end_4=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);do {{ /* unamed block */if (!( tomMatch219_end_4.isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tomMatch219_9= tomMatch219_end_4.getHeadconcSlot() ;if ( ((( tom.engine.adt.tomslot.types.Slot )tomMatch219_9) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) { tom.engine.adt.tomname.types.TomName  tom___slotname= tomMatch219_9.getSlotName() ;boolean tomMatch219_13= false ;if ( ((( tom.engine.adt.tomterm.types.TomTerm ) tomMatch219_9.getAppl() ) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {tomMatch219_13= true ;}if (!(tomMatch219_13)) {




            
            

            
            BQTerm X1 = acp.getCompiler().getFreshVariableStar(tom___aType);			
            BQTerm X2 = acp.getCompiler().getFreshVariableStar(tom___aType);
            BQTerm X3 = acp.getCompiler().getFreshVariableStar(tom___aType);
            Constraint c1 =  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(optWithoutAC, tom___namelist,  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(tom___slotname, TomBase.convertFromBQVarToVar(X1)) , tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tomMatch219_end_4.getHeadconcSlot() , tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(tom___slotname, TomBase.convertFromBQVarToVar(X2)) , tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) ) ) ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ,  (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() , tom___aType) 


;

            
            TomSymbol tomSymbol = acp.getCompiler().getSymbolTable().getSymbolFromName(tom___tomName);
            BQTerm newSubject = null;
            if(TomBase.isListOperator(tomSymbol)) { /* unamed block */
              newSubject = ASTFactory.buildList( tom.engine.adt.tomname.types.tomname.Name.make(tom___tomName) , tom.engine.adt.code.types.bqtermlist.ConsconcBQTerm.make(X1, tom.engine.adt.code.types.bqtermlist.ConsconcBQTerm.make(X2, tom.engine.adt.code.types.bqtermlist.EmptyconcBQTerm.make() ) ) ,acp.getCompiler().getSymbolTable());
            } else if(TomBase.isArrayOperator(tomSymbol)) { /* unamed block */
              newSubject = ASTFactory.buildArray( tom.engine.adt.tomname.types.tomname.Name.make(tom___tomName) , tom.engine.adt.code.types.bqtermlist.ConsconcBQTerm.make(X1, tom.engine.adt.code.types.bqtermlist.ConsconcBQTerm.make(X2, tom.engine.adt.code.types.bqtermlist.EmptyconcBQTerm.make() ) ) ,acp.getCompiler().getSymbolTable());
            }
            Constraint c2 =
               tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(tomMatch218_6, tom___namelist, tom_append_list_concSlot(tom_get_slice_concSlot((( tom.engine.adt.tomslot.types.SlotList )tom___slots),tomMatch219_end_4, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ),tom_append_list_concSlot( tomMatch219_end_4.getTailconcSlot() , tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() )),  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) , newSubject, tom___aType) 
;

            Constraint result =  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(c1, tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(c2, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) ) ;
            
            
            return result;
          }}}if ( tomMatch219_end_4.isEmptyconcSlot() ) {tomMatch219_end_4=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);} else {tomMatch219_end_4= tomMatch219_end_4.getTailconcSlot() ;}}} while(!( (tomMatch219_end_4==(( tom.engine.adt.tomslot.types.SlotList )tom___slots)) ));}}}}}}}}}}if ( tomMatch218_end_28.isEmptyconcElementaryTheory() ) {tomMatch218_end_28=tomMatch218_19;} else {tomMatch218_end_28= tomMatch218_end_28.getTailconcElementaryTheory() ;}}} while(!( (tomMatch218_end_28==tomMatch218_19) ));}}}if ( tomMatch218_end_14.isEmptyconcOption() ) {tomMatch218_end_14=tomMatch218_6;} else {tomMatch218_end_14= tomMatch218_end_14.getTailconcOption() ;}}} while(!( (tomMatch218_end_14==tomMatch218_6) ));}}}}}}return _visit_Constraint(tom__arg,introspector);}}public static class RemoveNonLinearVariableStar extends tom.library.sl.AbstractStrategyBasic {private  ACPropagator  acp;public RemoveNonLinearVariableStar( ACPropagator  acp) {super(( new tom.library.sl.Identity() ));this.acp=acp;}public  ACPropagator  getacp() {return acp;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch220_1= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch220_1) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomoption.types.OptionList  tomMatch220_6= tomMatch220_1.getOptions() ; tom.engine.adt.tomname.types.TomNameList  tomMatch220_7= tomMatch220_1.getNameList() ;if ( (((( tom.engine.adt.tomoption.types.OptionList )tomMatch220_6) instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption) || ((( tom.engine.adt.tomoption.types.OptionList )tomMatch220_6) instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption)) ) { tom.engine.adt.tomoption.types.OptionList  tom___optWithAC=tomMatch220_6; tom.engine.adt.tomoption.types.OptionList  tomMatch220_end_14=tomMatch220_6;do {{ /* unamed block */if (!( tomMatch220_end_14.isEmptyconcOption() )) { tom.engine.adt.tomoption.types.Option  tomMatch220_20= tomMatch220_end_14.getHeadconcOption() ;if ( ((( tom.engine.adt.tomoption.types.Option )tomMatch220_20) instanceof tom.engine.adt.tomoption.types.option.MatchingTheory) ) { tom.engine.adt.theory.types.Theory  tomMatch220_19= tomMatch220_20.getTheory() ;if ( (((( tom.engine.adt.theory.types.Theory )tomMatch220_19) instanceof tom.engine.adt.theory.types.theory.ConsconcElementaryTheory) || ((( tom.engine.adt.theory.types.Theory )tomMatch220_19) instanceof tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory)) ) { tom.engine.adt.theory.types.Theory  tomMatch220_end_27=tomMatch220_19;do {{ /* unamed block */if (!( tomMatch220_end_27.isEmptyconcElementaryTheory() )) {if ( ((( tom.engine.adt.theory.types.ElementaryTheory ) tomMatch220_end_27.getHeadconcElementaryTheory() ) instanceof tom.engine.adt.theory.types.elementarytheory.AC) ) {if ( (((( tom.engine.adt.tomname.types.TomNameList )tomMatch220_7) instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || ((( tom.engine.adt.tomname.types.TomNameList )tomMatch220_7) instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) { tom.engine.adt.tomname.types.TomNameList  tom___namelist=tomMatch220_7;if (!( tomMatch220_7.isEmptyconcTomName() )) {if ( ((( tom.engine.adt.tomname.types.TomName ) tomMatch220_7.getHeadconcTomName() ) instanceof tom.engine.adt.tomname.types.tomname.Name) ) {if (  tomMatch220_7.getTailconcTomName() .isEmptyconcTomName() ) { tom.engine.adt.tomslot.types.SlotList  tom___slots= tomMatch220_1.getSlots() ; tom.engine.adt.tomtype.types.TomType  tom___aType= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getAstType() ;

















          if(tom___slots.length() > 2) { /* unamed block */{ /* unamed block */{ /* unamed block */if ( (tom___slots instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) { tom.engine.adt.tomslot.types.SlotList  tomMatch221_end_4=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);do {{ /* unamed block */if (!( tomMatch221_end_4.isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tomMatch221_13= tomMatch221_end_4.getHeadconcSlot() ;if ( ((( tom.engine.adt.tomslot.types.Slot )tomMatch221_13) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch221_12= tomMatch221_13.getAppl() ; tom.engine.adt.tomname.types.TomName  tom___slotname= tomMatch221_13.getSlotName() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch221_12) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) { tom.engine.adt.tomname.types.TomName  tom___Xname= tomMatch221_12.getAstName() ; tom.engine.adt.tomslot.types.SlotList  tomMatch221_5= tomMatch221_end_4.getTailconcSlot() ; tom.engine.adt.tomslot.types.SlotList  tomMatch221_end_8=tomMatch221_5;do {{ /* unamed block */if (!( tomMatch221_end_8.isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tomMatch221_20= tomMatch221_end_8.getHeadconcSlot() ;if ( ((( tom.engine.adt.tomslot.types.Slot )tomMatch221_20) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch221_19= tomMatch221_20.getAppl() ;if ( (tom___slotname== tomMatch221_20.getSlotName() ) ) {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch221_19) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {if ( (tom___Xname== tomMatch221_19.getAstName() ) ) {







                  
                  

                  SlotList slotXn =  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ;
                  SlotList slotContext =  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ;
                  for(Slot s:tom___slots.getCollectionconcSlot()) { /* unamed block */{ /* unamed block */{ /* unamed block */if ( (s instanceof tom.engine.adt.tomslot.types.Slot) ) {if ( ((( tom.engine.adt.tomslot.types.Slot )s) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch222_2= (( tom.engine.adt.tomslot.types.Slot )s).getAppl() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch222_2) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {



                        if(tom___slotname ==  (( tom.engine.adt.tomslot.types.Slot )s).getSlotName()  && tom___Xname== tomMatch222_2.getAstName() ) { /* unamed block */
                          
                          slotXn =  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(s,tom_append_list_concSlot(slotXn, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() )) ;
                        } else { /* unamed block */
                          
                          slotContext = tom_append_list_concSlot(slotContext, tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(s, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) );
                        }}}}}}}




                  
                  TomType listType = acp.getCompiler().getTermTypeFromTerm(tomMatch220_1);
                  BQTerm Z = acp.getCompiler().getFreshVariableStar(listType);				
                  Constraint c1 = 
                     tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(tom___optWithAC, tom___namelist,  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(tom___slotname, TomBase.convertFromBQVarToVar(Z)) ,tom_append_list_concSlot(slotXn, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() )) ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ,  (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() , tom___aType) 

;
                  
                  Constraint c2 =  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(tom___optWithAC, tom___namelist, slotContext,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) , Z, tom___aType) 
;
                  Constraint result =  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(c1, tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(c2, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) ) ;

                  if(slotContext.length() > 1) { /* unamed block */
                    
                    
                    
                    return result;
                  }}}}}}if ( tomMatch221_end_8.isEmptyconcSlot() ) {tomMatch221_end_8=tomMatch221_5;} else {tomMatch221_end_8= tomMatch221_end_8.getTailconcSlot() ;}}} while(!( (tomMatch221_end_8==tomMatch221_5) ));}}}if ( tomMatch221_end_4.isEmptyconcSlot() ) {tomMatch221_end_4=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);} else {tomMatch221_end_4= tomMatch221_end_4.getTailconcSlot() ;}}} while(!( (tomMatch221_end_4==(( tom.engine.adt.tomslot.types.SlotList )tom___slots)) ));}}}}}}}}}}}if ( tomMatch220_end_27.isEmptyconcElementaryTheory() ) {tomMatch220_end_27=tomMatch220_19;} else {tomMatch220_end_27= tomMatch220_end_27.getTailconcElementaryTheory() ;}}} while(!( (tomMatch220_end_27==tomMatch220_19) ));}}}if ( tomMatch220_end_14.isEmptyconcOption() ) {tomMatch220_end_14=tomMatch220_6;} else {tomMatch220_end_14= tomMatch220_end_14.getTailconcOption() ;}}} while(!( (tomMatch220_end_14==tomMatch220_6) ));}}}}}}return _visit_Constraint(tom__arg,introspector);}}public static class PerformAbstraction extends tom.library.sl.AbstractStrategyBasic {private  ACPropagator  acp;public PerformAbstraction( ACPropagator  acp) {super(( new tom.library.sl.Identity() ));this.acp=acp;}public  ACPropagator  getacp() {return acp;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch223_1= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch223_1) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomoption.types.OptionList  tomMatch223_6= tomMatch223_1.getOptions() ; tom.engine.adt.tomname.types.TomNameList  tomMatch223_7= tomMatch223_1.getNameList() ;if ( (((( tom.engine.adt.tomoption.types.OptionList )tomMatch223_6) instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption) || ((( tom.engine.adt.tomoption.types.OptionList )tomMatch223_6) instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption)) ) { tom.engine.adt.tomoption.types.OptionList  tom___optWithAC=tomMatch223_6; tom.engine.adt.tomoption.types.OptionList  tomMatch223_end_14=tomMatch223_6;do {{ /* unamed block */if (!( tomMatch223_end_14.isEmptyconcOption() )) { tom.engine.adt.tomoption.types.Option  tomMatch223_20= tomMatch223_end_14.getHeadconcOption() ;if ( ((( tom.engine.adt.tomoption.types.Option )tomMatch223_20) instanceof tom.engine.adt.tomoption.types.option.MatchingTheory) ) { tom.engine.adt.theory.types.Theory  tomMatch223_19= tomMatch223_20.getTheory() ;if ( (((( tom.engine.adt.theory.types.Theory )tomMatch223_19) instanceof tom.engine.adt.theory.types.theory.ConsconcElementaryTheory) || ((( tom.engine.adt.theory.types.Theory )tomMatch223_19) instanceof tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory)) ) { tom.engine.adt.theory.types.Theory  tomMatch223_end_27=tomMatch223_19;do {{ /* unamed block */if (!( tomMatch223_end_27.isEmptyconcElementaryTheory() )) {if ( ((( tom.engine.adt.theory.types.ElementaryTheory ) tomMatch223_end_27.getHeadconcElementaryTheory() ) instanceof tom.engine.adt.theory.types.elementarytheory.AC) ) {if ( (((( tom.engine.adt.tomname.types.TomNameList )tomMatch223_7) instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || ((( tom.engine.adt.tomname.types.TomNameList )tomMatch223_7) instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) { tom.engine.adt.tomname.types.TomNameList  tom___namelist=tomMatch223_7;if (!( tomMatch223_7.isEmptyconcTomName() )) {if ( ((( tom.engine.adt.tomname.types.TomName ) tomMatch223_7.getHeadconcTomName() ) instanceof tom.engine.adt.tomname.types.tomname.Name) ) {if (  tomMatch223_7.getTailconcTomName() .isEmptyconcTomName() ) { tom.engine.adt.tomslot.types.SlotList  tom___slots= tomMatch223_1.getSlots() ; tom.engine.adt.tomtype.types.TomType  tom___aType= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getAstType() ;


















        if(tom___slots.length() > 2) { /* unamed block */{ /* unamed block */{ /* unamed block */if ( (tom___slots instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) { tom.engine.adt.tomslot.types.SlotList  tomMatch224_end_5=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);do {{ /* unamed block */ tom.engine.adt.tomslot.types.SlotList  tom___C1=tom_get_slice_concSlot((( tom.engine.adt.tomslot.types.SlotList )tom___slots),tomMatch224_end_5, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() );if (!( tomMatch224_end_5.isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tomMatch224_10= tomMatch224_end_5.getHeadconcSlot() ;if ( ((( tom.engine.adt.tomslot.types.Slot )tomMatch224_10) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) { tom.engine.adt.tomname.types.TomName  tom___slotname= tomMatch224_10.getSlotName() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm ) tomMatch224_10.getAppl() ) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) { tom.engine.adt.tomslot.types.SlotList  tom___C2= tomMatch224_end_5.getTailconcSlot() ; tom.engine.adt.tomslot.types.SlotList  tomMatch224_1=tom_append_list_concSlot(tom___C1,tom_append_list_concSlot(tom___C2, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ));if ( (tomMatch224_1 instanceof tom.engine.adt.tomslot.types.SlotList) ) {boolean tomMatch224_27= false ;if ( (((( tom.engine.adt.tomslot.types.SlotList )tomMatch224_1) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tomMatch224_1) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) { tom.engine.adt.tomslot.types.SlotList  tomMatch224_end_17=(( tom.engine.adt.tomslot.types.SlotList )tomMatch224_1);do {{ /* unamed block */if (!( tomMatch224_end_17.isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tomMatch224_22= tomMatch224_end_17.getHeadconcSlot() ;if ( ((( tom.engine.adt.tomslot.types.Slot )tomMatch224_22) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) {if ( (tom___slotname== tomMatch224_22.getSlotName() ) ) {if ( ((( tom.engine.adt.tomterm.types.TomTerm ) tomMatch224_22.getAppl() ) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {tomMatch224_27= true ;}}}}if ( tomMatch224_end_17.isEmptyconcSlot() ) {tomMatch224_end_17=(( tom.engine.adt.tomslot.types.SlotList )tomMatch224_1);} else {tomMatch224_end_17= tomMatch224_end_17.getTailconcSlot() ;}}} while(!( (tomMatch224_end_17==(( tom.engine.adt.tomslot.types.SlotList )tomMatch224_1)) ));}if (!(tomMatch224_27)) {







              
              
              TomType listType = acp.getCompiler().getTermTypeFromTerm(tomMatch223_1);
              BQTerm X1 = acp.getCompiler().getFreshVariableStar(listType);				
              Constraint c1 = 
                 tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(tom___optWithAC, tom___namelist,  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tomMatch224_end_5.getHeadconcSlot() , tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(tom___slotname, TomBase.convertFromBQVarToVar(X1)) , tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) ) ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ,  (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() , tom___aType) 

;
              
              Constraint c2 =  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(tom___optWithAC, tom___namelist, tom_append_list_concSlot(tom___C1,tom_append_list_concSlot(tom___C2, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() )),  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) , X1, tom___aType) 
;
              Constraint result =  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(c1, tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(c2, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) ) ;

              
              System.out.println(TomConstraintPrettyPrinter.prettyPrint(result));
              return result;
            }}}}}if ( tomMatch224_end_5.isEmptyconcSlot() ) {tomMatch224_end_5=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);} else {tomMatch224_end_5= tomMatch224_end_5.getTailconcSlot() ;}}} while(!( (tomMatch224_end_5==(( tom.engine.adt.tomslot.types.SlotList )tom___slots)) ));}}}}}}}}}}}if ( tomMatch223_end_27.isEmptyconcElementaryTheory() ) {tomMatch223_end_27=tomMatch223_19;} else {tomMatch223_end_27= tomMatch223_end_27.getTailconcElementaryTheory() ;}}} while(!( (tomMatch223_end_27==tomMatch223_19) ));}}}if ( tomMatch223_end_14.isEmptyconcOption() ) {tomMatch223_end_14=tomMatch223_6;} else {tomMatch223_end_14= tomMatch223_end_14.getTailconcOption() ;}}} while(!( (tomMatch223_end_14==tomMatch223_6) ));}}}}}}return _visit_Constraint(tom__arg,introspector);}}public static class CleanSingleVariable extends tom.library.sl.AbstractStrategyBasic {public CleanSingleVariable() {super(( new tom.library.sl.Identity() ));}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch225_3= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch225_3) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomoption.types.OptionList  tomMatch225_8= tomMatch225_3.getOptions() ; tom.engine.adt.tomname.types.TomNameList  tomMatch225_9= tomMatch225_3.getNameList() ;if ( (((( tom.engine.adt.tomoption.types.OptionList )tomMatch225_8) instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption) || ((( tom.engine.adt.tomoption.types.OptionList )tomMatch225_8) instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption)) ) { tom.engine.adt.tomoption.types.OptionList  tomMatch225_end_16=tomMatch225_8;do {{ /* unamed block */ tom.engine.adt.tomoption.types.OptionList  tom___T1=tom_get_slice_concOption(tomMatch225_8,tomMatch225_end_16, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() );if (!( tomMatch225_end_16.isEmptyconcOption() )) { tom.engine.adt.tomoption.types.Option  tomMatch225_25= tomMatch225_end_16.getHeadconcOption() ;if ( ((( tom.engine.adt.tomoption.types.Option )tomMatch225_25) instanceof tom.engine.adt.tomoption.types.option.MatchingTheory) ) { tom.engine.adt.theory.types.Theory  tomMatch225_24= tomMatch225_25.getTheory() ;if ( (((( tom.engine.adt.theory.types.Theory )tomMatch225_24) instanceof tom.engine.adt.theory.types.theory.ConsconcElementaryTheory) || ((( tom.engine.adt.theory.types.Theory )tomMatch225_24) instanceof tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory)) ) { tom.engine.adt.theory.types.Theory  tomMatch225_end_37=tomMatch225_24;do {{ /* unamed block */ tom.engine.adt.theory.types.Theory  tom___T2=tom_get_slice_concElementaryTheory(tomMatch225_24,tomMatch225_end_37, tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() );if (!( tomMatch225_end_37.isEmptyconcElementaryTheory() )) {if ( ((( tom.engine.adt.theory.types.ElementaryTheory ) tomMatch225_end_37.getHeadconcElementaryTheory() ) instanceof tom.engine.adt.theory.types.elementarytheory.AC) ) { tom.engine.adt.theory.types.Theory  tom___T3= tomMatch225_end_37.getTailconcElementaryTheory() ; tom.engine.adt.tomoption.types.OptionList  tom___T4= tomMatch225_end_16.getTailconcOption() ;if ( (((( tom.engine.adt.tomname.types.TomNameList )tomMatch225_9) instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || ((( tom.engine.adt.tomname.types.TomNameList )tomMatch225_9) instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) { tom.engine.adt.tomname.types.TomNameList  tom___namelist=tomMatch225_9;if (!( tomMatch225_9.isEmptyconcTomName() )) {if ( ((( tom.engine.adt.tomname.types.TomName ) tomMatch225_9.getHeadconcTomName() ) instanceof tom.engine.adt.tomname.types.tomname.Name) ) {if (  tomMatch225_9.getTailconcTomName() .isEmptyconcTomName() ) { tom.engine.adt.tomslot.types.SlotList  tom___slots= tomMatch225_3.getSlots() ; tom.engine.adt.code.types.BQTerm  tom___subject= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() ; tom.engine.adt.tomtype.types.TomType  tom___aType= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getAstType() ;if ( (tom___slots instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) {if ( (( tom.engine.adt.tomslot.types.SlotList )tom___slots).isEmptyconcSlot() ) {
























          
          
          OptionList optWithoutAC = tom_append_list_concOption(tom___T1, tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( tom.engine.adt.tomoption.types.option.MatchingTheory.make(tom_append_list_concElementaryTheory(tom___T2,tom_append_list_concElementaryTheory(tom___T3, tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() ))) ,tom_append_list_concOption(tom___T4, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() )) );
          Constraint result =  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(optWithoutAC, tom___namelist, tom___slots,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) , tom___subject, tom___aType) 

;
          
          return result;
        }}}if ( (tom___slots instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tom___slots) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) {if (!( (( tom.engine.adt.tomslot.types.SlotList )tom___slots).isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tomMatch225_30= (( tom.engine.adt.tomslot.types.SlotList )tom___slots).getHeadconcSlot() ;if ( ((( tom.engine.adt.tomslot.types.Slot )tomMatch225_30) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) {if ( ((( tom.engine.adt.tomterm.types.TomTerm ) tomMatch225_30.getAppl() ) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {if (  (( tom.engine.adt.tomslot.types.SlotList )tom___slots).getTailconcSlot() .isEmptyconcSlot() ) {                                 OptionList optWithoutAC = tom_append_list_concOption(tom___T1, tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( tom.engine.adt.tomoption.types.option.MatchingTheory.make(tom_append_list_concElementaryTheory(tom___T2,tom_append_list_concElementaryTheory(tom___T3, tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() ))) ,tom_append_list_concOption(tom___T4, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() )) );           Constraint result =  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(optWithoutAC, tom___namelist, tom___slots,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) , tom___subject, tom___aType) ;                      return result;         }}}}}}}}}}}}if ( tomMatch225_end_37.isEmptyconcElementaryTheory() ) {tomMatch225_end_37=tomMatch225_24;} else {tomMatch225_end_37= tomMatch225_end_37.getTailconcElementaryTheory() ;}}} while(!( (tomMatch225_end_37==tomMatch225_24) ));}}}if ( tomMatch225_end_16.isEmptyconcOption() ) {tomMatch225_end_16=tomMatch225_8;} else {tomMatch225_end_16= tomMatch225_end_16.getTailconcOption() ;}}} while(!( (tomMatch225_end_16==tomMatch225_8) ));}}}}}}return _visit_Constraint(tom__arg,introspector);}}



}
