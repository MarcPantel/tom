/* Generated by TOM (version 2.5rc2): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler.propagator;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.library.sl.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.compiler.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.TomBase;

/**
 * Syntactic propagator
 */
public class ArrayPropagator implements IBasePropagator {

//--------------------------------------------------------	
  /* Generated by TOM (version 2.5rc2): Do not edit this file *//* Generated by TOM (version 2.5rc2): Do not edit this file *//* Generated by TOM (version 2.5rc2): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5rc2): Do not edit this file */ private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TargetLanguage(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TargetLanguage(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TargetLanguage ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumberList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumberList ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.engine.adt.tomslot.types.Slot ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage  tom_make_ITL( String  t0) { return  tom.engine.adt.tomsignature.types.targetlanguage.ITL.make(t0) ; }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  t instanceof tom.engine.adt.tomname.types.tomname.Name ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomname.types.TomName  t) { return  t instanceof tom.engine.adt.tomname.types.tomname.PositionName ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_PositionName_NumberList( tom.engine.adt.tomname.types.TomName  t) { return  t.getNumberList() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_AddOne( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomexpression.types.expression.AddOne.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSize( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.GetSize.make(t0, t1) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetElement( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetElement.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSliceArray( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetSliceArray.make(t0, t1, t2, t3) ; }private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_VariableHeadArray( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomterm.types.tomterm.VariableHeadArray.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TestVar( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.TestVar.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TargetLanguageToTomTerm( tom.engine.adt.tomsignature.types.TargetLanguage  t0) { return  tom.engine.adt.tomterm.types.tomterm.TargetLanguageToTomTerm.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ExpressionToTomTerm( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make(t0) ; }private static boolean tom_is_fun_sym_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.SymbolOf.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_SymbolOf_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getGroundTerm() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_Negate( tom.engine.adt.tomconstraint.types.Constraint  t0) { return  tom.engine.adt.tomconstraint.types.constraint.Negate.make(t0) ; }private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_MatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(t0, t1) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_EmptyArrayConstraint( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomconstraint.types.constraint.EmptyArrayConstraint.make(t0, t1, t2) ; }private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomslot.types.Slot  t) { return  t instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairSlotAppl_SlotName( tom.engine.adt.tomslot.types.Slot  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_PairSlotAppl_Appl( tom.engine.adt.tomslot.types.Slot  t) { return  t.getAppl() ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if(tom_is_empty_concTomName_TomNameList(l1)) {       return l2;     } else if(tom_is_empty_concTomName_TomNameList(l2)) {       return l1;     } else if(tom_is_empty_concTomName_TomNameList(tom_get_tail_concTomName_TomNameList(l1))) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(tom_get_tail_concTomName_TomNameList(l1),l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(tom_get_tail_concTomName_TomNameList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if(tom_is_empty_AndConstraint_Constraint(l1)) {       return l2;     } else if(tom_is_empty_AndConstraint_Constraint(l2)) {       return l1;     } else if(tom_is_fun_sym_AndConstraint(l1)) {       if(tom_is_empty_AndConstraint_Constraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()))) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),tom_append_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_head_AndConstraint_Constraint(begin):begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_tail_AndConstraint_Constraint(begin):tom_empty_list_AndConstraint()),end,tail));     }   }   private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) { return  t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot || t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getHeadconcSlot() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getTailconcSlot() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.isEmptyconcSlot() ;}   private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if(tom_is_empty_concSlot_SlotList(l1)) {       return l2;     } else if(tom_is_empty_concSlot_SlotList(l2)) {       return l1;     } else if(tom_is_empty_concSlot_SlotList(tom_get_tail_concSlot_SlotList(l1))) {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(l1),l2);     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(tom_get_tail_concSlot_SlotList(l1),l2));     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if(tom_equal_term_SlotList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(tom_get_tail_concSlot_SlotList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5rc2): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5rc2): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }   private static boolean tom_is_fun_sym_SequenceId( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.SequenceId) ;}private static  tom.library.sl.Strategy  tom_empty_list_SequenceId() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_SequenceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.SequenceId(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.THEN) ;}private static boolean tom_is_empty_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_SequenceId_Strategy(l1)) {       return l2;     } else if(tom_is_empty_SequenceId_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_SequenceId(l1)) {       if(tom_is_empty_SequenceId_Strategy(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()))) {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),tom_append_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_head_SequenceId_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_tail_SequenceId_Strategy(begin):tom_empty_list_SequenceId()),end,tail));     }   }   private static boolean tom_is_fun_sym_ChoiceId( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.ChoiceId) ;}private static  tom.library.sl.Strategy  tom_empty_list_ChoiceId() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_ChoiceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.ChoiceId(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.THEN) ;}private static boolean tom_is_empty_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  t ==null ;}   private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_ChoiceId_Strategy(l1)) {       return l2;     } else if(tom_is_empty_ChoiceId_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_ChoiceId(l1)) {       if(tom_is_empty_ChoiceId_Strategy(((tom_is_fun_sym_ChoiceId(l1))?tom_get_tail_ChoiceId_Strategy(l1):tom_empty_list_ChoiceId()))) {         return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_head_ChoiceId_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_head_ChoiceId_Strategy(l1):l1),tom_append_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_tail_ChoiceId_Strategy(l1):tom_empty_list_ChoiceId()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(begin))?tom_get_head_ChoiceId_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((tom_is_fun_sym_ChoiceId(begin))?tom_get_tail_ChoiceId_Strategy(begin):tom_empty_list_ChoiceId()),end,tail));     }   }   private static  tom.library.sl.Strategy  tom_make_OneId( tom.library.sl.Strategy  v) { return  new tom.library.sl.OneId(v) ; } /* Generated by TOM (version 2.5rc2): Do not edit this file */ /* Generated by TOM (version 2.5rc2): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_InnermostId( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_cons_list_Sequence(tom_cons_list_SequenceId(v,tom_cons_list_SequenceId(tom_make_MuVar("_x"),tom_empty_list_SequenceId())),tom_empty_list_Sequence()))) ; }private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_ChoiceId(v,tom_cons_list_ChoiceId(tom_make_OneId(tom_make_MuVar("_x")),tom_empty_list_ChoiceId()))) ; }   

//--------------------------------------------------------

  public Constraint propagate(Constraint constraint) throws VisitFailure {
    return (Constraint)tom_make_InnermostId(tom_make_ArrayPatternMatching()).visit(constraint);		
  }	

  private static class ArrayPatternMatching extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public ArrayPatternMatching() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumber_freshVar_0=tomMatch198NameNumberfreshSubject_1;if (tom_is_fun_sym_MatchConstraint(tomMatch198NameNumber_freshVar_0)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch198NameNumber_freshVar_5=tom_get_slot_MatchConstraint_pattern(tomMatch198NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch198NameNumber_freshVar_6=tom_get_slot_MatchConstraint_subject(tomMatch198NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch198NameNumber_freshVar_1=tomMatch198NameNumber_freshVar_5;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch198NameNumber_freshVar_4=tomMatch198NameNumber_freshVar_6;if (tom_is_fun_sym_RecordAppl(tomMatch198NameNumber_freshVar_1)) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch198NameNumber_freshVar_7=tom_get_slot_RecordAppl_Option(tomMatch198NameNumber_freshVar_1);{  tom.engine.adt.tomname.types.TomNameList  tomMatch198NameNumber_freshVar_8=tom_get_slot_RecordAppl_NameList(tomMatch198NameNumber_freshVar_1);{  tom.engine.adt.tomslot.types.SlotList  tomMatch198NameNumber_freshVar_9=tom_get_slot_RecordAppl_Slots(tomMatch198NameNumber_freshVar_1);{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch198NameNumber_freshVar_10=tom_get_slot_RecordAppl_Constraints(tomMatch198NameNumber_freshVar_1);{  tom.engine.adt.tomname.types.TomNameList  tomMatch198NameNumber_freshVar_2=tomMatch198NameNumber_freshVar_8;{  tom.engine.adt.tomslot.types.SlotList  tom_slots=tomMatch198NameNumber_freshVar_9;if (tom_is_fun_sym_concTomName(tomMatch198NameNumber_freshVar_2)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch198NameNumber_freshVar_12=tomMatch198NameNumber_freshVar_2;if (!(tom_is_empty_concTomName_TomNameList(tomMatch198NameNumber_freshVar_12))) {{  tom.engine.adt.tomname.types.TomName  tomMatch198NameNumber_freshVar_3=tom_get_head_concTomName_TomNameList(tomMatch198NameNumber_freshVar_12);{  tom.engine.adt.tomname.types.TomNameList  tomMatch198NameNumber_freshVar_13=tom_get_tail_concTomName_TomNameList(tomMatch198NameNumber_freshVar_12);if (tom_is_fun_sym_Name(tomMatch198NameNumber_freshVar_3)) {{  String  tomMatch198NameNumber_freshVar_11=tom_get_slot_Name_String(tomMatch198NameNumber_freshVar_3);{  tom.engine.adt.tomname.types.TomName  tom_name=tomMatch198NameNumber_freshVar_3;{  tom.engine.adt.tomterm.types.TomTerm  tom_g=tomMatch198NameNumber_freshVar_4;{ boolean tomMatch198NameNumber_freshVar_15= false ;if (tom_is_fun_sym_SymbolOf(tomMatch198NameNumber_freshVar_4)) {tomMatch198NameNumber_freshVar_15= true ;}if ((tomMatch198NameNumber_freshVar_15 ==  false )) {if ( true ) {







      
            // if this is not an array, nothing to do
            if(!TomBase.isArrayOperator(ConstraintCompiler.getSymbolTable().
                getSymbolFromName(tomMatch198NameNumber_freshVar_11))) {return tomMatch198NameNumber_freshVar_0;}        
            TomType termType = ConstraintCompiler.getTermTypeFromTerm(tomMatch198NameNumber_freshVar_1);
            // declare fresh index = 0            
            TomTerm freshIndex = getFreshIndex();				
            Constraint freshIndexDeclaration = tom_make_MatchConstraint(freshIndex,tom_make_TargetLanguageToTomTerm(tom_make_ITL("0")));
            Constraint l = tom_empty_list_AndConstraint();
    match:  if (tom_is_sort_SlotList(tom_slots)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch197NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.SlotList )tom_slots);if (tom_is_fun_sym_concSlot(tomMatch197NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch197NameNumber_freshVar_0=tomMatch197NameNumberfreshSubject_1;if (tom_is_empty_concSlot_SlotList(tomMatch197NameNumber_freshVar_0)) {if ( true ) {

                l = tom_append_list_AndConstraint(l,tom_cons_list_AndConstraint(tom_make_EmptyArrayConstraint(tom_name,tom_g,freshIndex),tom_empty_list_AndConstraint()));
              }}}}if (tom_is_fun_sym_concSlot(tomMatch197NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch197NameNumber_freshVar_1=tomMatch197NameNumberfreshSubject_1;{  tom.engine.adt.tomslot.types.SlotList  tomMatch197NameNumber_begin_3=tomMatch197NameNumber_freshVar_1;{  tom.engine.adt.tomslot.types.SlotList  tomMatch197NameNumber_end_4=tomMatch197NameNumber_freshVar_1;do {{{  tom.engine.adt.tomslot.types.SlotList  tomMatch197NameNumber_freshVar_2=tomMatch197NameNumber_end_4;if (!(tom_is_empty_concSlot_SlotList(tomMatch197NameNumber_freshVar_2))) {if (tom_is_fun_sym_PairSlotAppl(tom_get_head_concSlot_SlotList(tomMatch197NameNumber_freshVar_2))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch197NameNumber_freshVar_25=tom_get_slot_PairSlotAppl_Appl(tom_get_head_concSlot_SlotList(tomMatch197NameNumber_freshVar_2));{  tom.engine.adt.tomterm.types.TomTerm  tom_appl=tomMatch197NameNumber_freshVar_25;{  tom.engine.adt.tomslot.types.SlotList  tomMatch197NameNumber_freshVar_5=tom_get_tail_concSlot_SlotList(tomMatch197NameNumber_freshVar_2);{  tom.engine.adt.tomslot.types.SlotList  tom_X=tomMatch197NameNumber_freshVar_5;if ( true ) {

                TomTerm newFreshIndex = getFreshIndex();                
          mAppl:if (tom_is_sort_TomTerm(tom_appl)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch196NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_appl);{ boolean tomMatch196NameNumber_freshVar_0= false ;if (tom_is_fun_sym_VariableStar(tomMatch196NameNumberfreshSubject_1)) {tomMatch196NameNumber_freshVar_0= true ;} else {if (tom_is_fun_sym_UnamedVariableStar(tomMatch196NameNumberfreshSubject_1)) {tomMatch196NameNumber_freshVar_0= true ;}}if ((tomMatch196NameNumber_freshVar_0 ==  true )) {if ( true ) {


                    // if it is the last element               
// [pem] same remark: move the test outside the match
                    if(tom_X.length() == 0) {
                      // and if it is a varStar we should only assign it, without generating a loop
                      // (if it is unamed, we do nothing)
                      if((tom_appl).isVariableStar()) {
                        l = tom_append_list_AndConstraint(l,tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_appl,tom_make_ExpressionToTomTerm(tom_make_GetSliceArray(tom_name,tom_g,freshIndex,tom_make_ExpressionToTomTerm(tom_make_GetSize(tom_name,tom_g))))),tom_empty_list_AndConstraint()))
;
                      }
                    } else {
                      TomTerm beginIndex = getBeginIndex();
                      TomTerm endIndex = getEndIndex();
                      l = tom_append_list_AndConstraint(l,tom_cons_list_AndConstraint(tom_make_MatchConstraint(beginIndex,freshIndex),tom_cons_list_AndConstraint(tom_make_MatchConstraint(endIndex,freshIndex),tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_appl,tom_make_VariableHeadArray(tom_name,tom_g,beginIndex,endIndex)),tom_cons_list_AndConstraint(tom_make_MatchConstraint(newFreshIndex,endIndex),tom_empty_list_AndConstraint())))))



;     
                    }
                    break mAppl;
                  }}}if ( true ) {

                    l = tom_append_list_AndConstraint(l,tom_cons_list_AndConstraint(tom_make_Negate(tom_make_EmptyArrayConstraint(tom_name,tom_g,freshIndex)),tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_appl,tom_make_ExpressionToTomTerm(tom_make_GetElement(tom_name,termType,tom_g,freshIndex))),tom_cons_list_AndConstraint(tom_make_MatchConstraint(newFreshIndex,tom_make_ExpressionToTomTerm(tom_make_AddOne(freshIndex))),tom_empty_list_AndConstraint()))))


;
                    // for the last element, we should also check that the list ends
                    if(tom_X.length() == 0) {                  
                      l = tom_append_list_AndConstraint(l,tom_cons_list_AndConstraint(tom_make_EmptyArrayConstraint(tom_name,tom_g,newFreshIndex),tom_empty_list_AndConstraint()));
                    }
                  }}}
// end match
                freshIndex = newFreshIndex;
              }}}}}}}}if (tom_is_empty_concSlot_SlotList(tomMatch197NameNumber_end_4)) {tomMatch197NameNumber_end_4=tomMatch197NameNumber_begin_3;} else {tomMatch197NameNumber_end_4=tom_get_tail_concSlot_SlotList(tomMatch197NameNumber_end_4);}}} while(!(tom_equal_term_SlotList(tomMatch197NameNumber_end_4, tomMatch197NameNumber_begin_3)));}}}}}}
// end match                        
            // add head equality condition + fresh var declaration
            l = tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_make_RecordAppl(tomMatch198NameNumber_freshVar_7,tomMatch198NameNumber_freshVar_2,tom_empty_list_concSlot(),tomMatch198NameNumber_freshVar_10),tom_make_SymbolOf(tom_g)),tom_cons_list_AndConstraint(freshIndexDeclaration,tom_append_list_AndConstraint(l,tom_empty_list_AndConstraint())))
;
            return l;
          }}}}}}}}}}}}}}}}}}}}}}}}}if (tom_is_fun_sym_AndConstraint(tomMatch198NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumber_freshVar_22=tomMatch198NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumber_begin_24=tomMatch198NameNumber_freshVar_22;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumber_end_25=tomMatch198NameNumber_freshVar_22;do {{{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumber_freshVar_23=tomMatch198NameNumber_end_25;if (!( ( tom_is_empty_AndConstraint_Constraint(tomMatch198NameNumber_freshVar_23) || tom_equal_term_Constraint(tomMatch198NameNumber_freshVar_23, tom_empty_list_AndConstraint()) ) )) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumber_freshVar_16=((tom_is_fun_sym_AndConstraint(tomMatch198NameNumber_freshVar_23))?(tom_get_head_AndConstraint_Constraint(tomMatch198NameNumber_freshVar_23)):(tomMatch198NameNumber_freshVar_23));{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch198NameNumber_freshVar_26=((tom_is_fun_sym_AndConstraint(tomMatch198NameNumber_freshVar_23))?(tom_get_tail_AndConstraint_Constraint(tomMatch198NameNumber_freshVar_23)):(tom_empty_list_AndConstraint()));if (tom_is_fun_sym_MatchConstraint(tomMatch198NameNumber_freshVar_16)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch198NameNumber_freshVar_18=tom_get_slot_MatchConstraint_pattern(tomMatch198NameNumber_freshVar_16);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch198NameNumber_freshVar_19=tom_get_slot_MatchConstraint_subject(tomMatch198NameNumber_freshVar_16);if (tom_is_fun_sym_VariableStar(tomMatch198NameNumber_freshVar_18)) {{  tom.engine.adt.tomname.types.TomName  tomMatch198NameNumber_freshVar_20=tom_get_slot_VariableStar_AstName(tomMatch198NameNumber_freshVar_18);{  tom.engine.adt.tomtype.types.TomType  tomMatch198NameNumber_freshVar_21=tom_get_slot_VariableStar_AstType(tomMatch198NameNumber_freshVar_18);{  tom.engine.adt.tomname.types.TomName  tomMatch198NameNumber_freshVar_17=tomMatch198NameNumber_freshVar_20;{ boolean tomMatch198NameNumber_freshVar_74= false ;if (tom_is_fun_sym_PositionName(tomMatch198NameNumber_freshVar_17)) {tomMatch198NameNumber_freshVar_74= true ;}if ((tomMatch198NameNumber_freshVar_74 ==  false )) {if ( true ) {



        Constraint toApplyOn = tom_append_list_AndConstraint(tomMatch198NameNumber_freshVar_26,tom_empty_list_AndConstraint());            
        TomTerm freshVar = ConstraintCompiler.getFreshVariableStar(tomMatch198NameNumber_freshVar_21);
        Constraint res = (Constraint)tom_make_OnceTopDownId(tom_make_ReplaceMatchConstraint(tomMatch198NameNumber_freshVar_17,freshVar)).visit(toApplyOn);
        if(res != toApplyOn) {
          return tom_append_list_AndConstraint(tom_get_slice_AndConstraint(tomMatch198NameNumber_begin_24,tomMatch198NameNumber_end_25,tom_empty_list_AndConstraint()),tom_cons_list_AndConstraint(tomMatch198NameNumber_freshVar_16,tom_cons_list_AndConstraint(res,tom_empty_list_AndConstraint())));
        }
      }}}}}}}}}}}}}}if ( ( tom_is_empty_AndConstraint_Constraint(tomMatch198NameNumber_end_25) || tom_equal_term_Constraint(tomMatch198NameNumber_end_25, tom_empty_list_AndConstraint()) ) ) {tomMatch198NameNumber_end_25=tomMatch198NameNumber_begin_24;} else {tomMatch198NameNumber_end_25=((tom_is_fun_sym_AndConstraint(tomMatch198NameNumber_end_25))?(tom_get_tail_AndConstraint_Constraint(tomMatch198NameNumber_end_25)):(tom_empty_list_AndConstraint()));}}} while(!(tom_equal_term_Constraint(tomMatch198NameNumber_end_25, tomMatch198NameNumber_begin_24)));}}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ArrayPatternMatching() { return new ArrayPatternMatching(); }

// end %strategy

  private static class ReplaceMatchConstraint extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  tom.engine.adt.tomname.types.TomName  varName; private  tom.engine.adt.tomterm.types.TomTerm  freshVar; public ReplaceMatchConstraint( tom.engine.adt.tomname.types.TomName  varName,  tom.engine.adt.tomterm.types.TomTerm  freshVar) { super(tom_make_Identity());this.varName=varName;this.freshVar=freshVar;}public  tom.engine.adt.tomname.types.TomName  getvarName() { return varName;}public  tom.engine.adt.tomterm.types.TomTerm  getfreshVar() { return freshVar;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch199NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch199NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch199NameNumber_freshVar_1=tom_get_slot_MatchConstraint_pattern(tomMatch199NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch199NameNumber_freshVar_2=tom_get_slot_MatchConstraint_subject(tomMatch199NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch199NameNumber_freshVar_0=tomMatch199NameNumber_freshVar_1;if (tom_is_fun_sym_VariableStar(tomMatch199NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomName  tomMatch199NameNumber_freshVar_3=tom_get_slot_VariableStar_AstName(tomMatch199NameNumber_freshVar_0);if ( true ) {


        if(tomMatch199NameNumber_freshVar_3== varName) {					
          return tom_cons_list_AndConstraint(tom_make_MatchConstraint(freshVar,tomMatch199NameNumber_freshVar_2),tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_make_TestVar(freshVar),tomMatch199NameNumber_freshVar_0),tom_empty_list_AndConstraint()));
        }				  
      }}}}}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ReplaceMatchConstraint( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return new ReplaceMatchConstraint(t0,t1); }



  private static TomTerm getBeginIndex() {
    return ConstraintCompiler.getBeginVariableStar(ConstraintCompiler.getIntType());
  }

  private static TomTerm getEndIndex() {
    return ConstraintCompiler.getEndVariableStar(ConstraintCompiler.getIntType());
  }

  private static TomTerm getFreshIndex() {
    return ConstraintCompiler.getFreshVariableStar(ConstraintCompiler.getIntType());    
  }
}
