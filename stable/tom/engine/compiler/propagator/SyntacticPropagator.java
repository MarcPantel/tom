/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler.propagator;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomname.types.*;
import tom.library.sl.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.tools.SymbolTable;
import tom.engine.compiler.*;
import tom.engine.TomBase;
import java.util.*;
import tom.engine.exception.TomRuntimeException;

/**
 * Syntactic propagator
 */
public class SyntacticPropagator implements IBasePropagator {

//--------------------------------------------------------
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */ private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumberList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumberList ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_NumericConstraintType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_NumericConstraintType(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.engine.adt.tomslot.types.Slot ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.Name) ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.PositionName) ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_PositionName_NumberList( tom.engine.adt.tomname.types.TomName  t) { return  t.getNumberList() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TestVar( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.TestVar.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Subterm( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomterm.types.tomterm.Subterm.make(t0, t1, t2) ; }private static boolean tom_is_fun_sym_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.SymbolOf.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_SymbolOf_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getGroundTerm() ;}private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_MatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(t0, t1) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static boolean tom_is_fun_sym_AntiMatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_AntiMatchConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getConstraint() ;}private static boolean tom_is_fun_sym_NumericConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.NumericConstraint) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_NumericConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomconstraint.types.NumericConstraintType  t2) { return  tom.engine.adt.tomconstraint.types.constraint.NumericConstraint.make(t0, t1, t2) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_NumericConstraint_Left( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getLeft() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_NumericConstraint_Right( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getRight() ;}private static  tom.engine.adt.tomconstraint.types.NumericConstraintType  tom_get_slot_NumericConstraint_Type( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getType() ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomslot.types.Slot  t) { return  (t instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairSlotAppl_SlotName( tom.engine.adt.tomslot.types.Slot  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_PairSlotAppl_Appl( tom.engine.adt.tomslot.types.Slot  t) { return  t.getAppl() ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  ((t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( l1.getHeadconcTomName() ,l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail));     }   }   private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()).isEmptyAndConstraint() ) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),tom_append_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() :tom_empty_list_AndConstraint()),end,tail));     }   }   private static boolean tom_is_fun_sym_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_OrConstraintDisjunction() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_OrConstraintDisjunction_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadOrConstraintDisjunction() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_OrConstraintDisjunction_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailOrConstraintDisjunction() ;}private static boolean tom_is_empty_OrConstraintDisjunction_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyOrConstraintDisjunction() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyOrConstraintDisjunction() ) {       return l2;     } else if( l2.isEmptyOrConstraintDisjunction() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) )? l1.getTailOrConstraintDisjunction() :tom_empty_list_OrConstraintDisjunction()).isEmptyOrConstraintDisjunction() ) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) )? l1.getHeadOrConstraintDisjunction() :l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) )? l1.getHeadOrConstraintDisjunction() :l1),tom_append_list_OrConstraintDisjunction((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) )? l1.getTailOrConstraintDisjunction() :tom_empty_list_OrConstraintDisjunction()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) )? begin.getHeadOrConstraintDisjunction() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_OrConstraintDisjunction((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction)) )? begin.getTailOrConstraintDisjunction() :tom_empty_list_OrConstraintDisjunction()),end,tail));     }   }   private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getHeadconcConstraint() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getTailconcConstraint() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.isEmptyconcConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( l1.getHeadconcConstraint() ,l2);     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2));     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if(tom_equal_term_ConstraintList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail));     }   }   private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) { return  ((t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || (t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getHeadconcSlot() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getTailconcSlot() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.isEmptyconcSlot() ;}   private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot( l1.getHeadconcSlot() ,l2);     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2));     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if(tom_equal_term_SlotList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot( begin.getHeadconcSlot() ,( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   
	
//--------------------------------------------------------
  
  // contains variables that were already replaced (for optimizing reasons)
  private static ArrayList replacedVariables = null; 

  public Constraint propagate(Constraint constraint) throws VisitFailure {   
    replacedVariables = new ArrayList(); 
    return  (Constraint)tom_make_TopDown(tom_make_SyntacticPatternMatching()).visitLight(constraint);
  }	

  private static class SyntacticPatternMatching extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public SyntacticPatternMatching() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch224NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch224NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch224NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch224NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch224NameNumberfreshSubject_1);if (tom_is_fun_sym_RecordAppl(tomMatch224NameNumber_freshVar_0)) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch224NameNumber_freshVar_2=tom_get_slot_RecordAppl_Option(tomMatch224NameNumber_freshVar_0);{  tom.engine.adt.tomname.types.TomNameList  tomMatch224NameNumber_freshVar_3=tom_get_slot_RecordAppl_NameList(tomMatch224NameNumber_freshVar_0);{  tom.engine.adt.tomslot.types.SlotList  tomMatch224NameNumber_freshVar_4=tom_get_slot_RecordAppl_Slots(tomMatch224NameNumber_freshVar_0);{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch224NameNumber_freshVar_5=tom_get_slot_RecordAppl_Constraints(tomMatch224NameNumber_freshVar_0);if (tom_is_fun_sym_concTomName(tomMatch224NameNumber_freshVar_3)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch224NameNumber_freshVar_6=tomMatch224NameNumber_freshVar_3;{  tom.engine.adt.tomname.types.TomNameList  tom_nameList=tomMatch224NameNumber_freshVar_3;if (!(tom_is_empty_concTomName_TomNameList(tomMatch224NameNumber_freshVar_6))) {if (tom_is_fun_sym_Name(tom_get_head_concTomName_TomNameList(tomMatch224NameNumber_freshVar_6))) {{  String  tomMatch224NameNumber_freshVar_9=tom_get_slot_Name_String(tom_get_head_concTomName_TomNameList(tomMatch224NameNumber_freshVar_6));{  tom.engine.adt.tomname.types.TomNameList  tomMatch224NameNumber_freshVar_7=tom_get_tail_concTomName_TomNameList(tomMatch224NameNumber_freshVar_6);{  tom.engine.adt.tomslot.types.SlotList  tom_slots=tomMatch224NameNumber_freshVar_4;{  tom.engine.adt.tomterm.types.TomTerm  tom_g=tomMatch224NameNumber_freshVar_1;{  tom.engine.adt.tomconstraint.types.Constraint  tom_m=tomMatch224NameNumberfreshSubject_1;{ boolean tomMatch224NameNumber_freshVar_10= false ;if (tom_is_fun_sym_SymbolOf(tomMatch224NameNumber_freshVar_1)) {if (tom_equal_term_TomTerm(tomMatch224NameNumber_freshVar_1, tomMatch224NameNumber_freshVar_1)) {tomMatch224NameNumber_freshVar_10= true ;}}if ((tomMatch224NameNumber_freshVar_10 ==  false )) {if ( true ) {



















        // if this a list or array, nothing to do
        if(!TomBase.isSyntacticOperator(
            ConstraintCompiler.getSymbolTable().getSymbolFromName(tomMatch224NameNumber_freshVar_9))) { return tom_m; }
        
        Constraint lastPart = tom_empty_list_AndConstraint();
        ArrayList<TomTerm> freshVarList = new ArrayList<TomTerm>();
        // we build the last part only once, and we store the fresh variables we generate
        if (tom_is_sort_SlotList(tom_slots)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch225NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.SlotList )tom_slots);if (tom_is_fun_sym_concSlot(tomMatch225NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch225NameNumber_freshVar_0=tomMatch225NameNumberfreshSubject_1;{  tom.engine.adt.tomslot.types.SlotList  tomMatch225NameNumber_begin_2=tomMatch225NameNumber_freshVar_0;{  tom.engine.adt.tomslot.types.SlotList  tomMatch225NameNumber_end_3=tomMatch225NameNumber_freshVar_0;do {{{  tom.engine.adt.tomslot.types.SlotList  tomMatch225NameNumber_freshVar_1=tomMatch225NameNumber_end_3;if (!(tom_is_empty_concSlot_SlotList(tomMatch225NameNumber_freshVar_1))) {if (tom_is_fun_sym_PairSlotAppl(tom_get_head_concSlot_SlotList(tomMatch225NameNumber_freshVar_1))) {{  tom.engine.adt.tomname.types.TomName  tomMatch225NameNumber_freshVar_6=tom_get_slot_PairSlotAppl_SlotName(tom_get_head_concSlot_SlotList(tomMatch225NameNumber_freshVar_1));{  tom.engine.adt.tomterm.types.TomTerm  tomMatch225NameNumber_freshVar_7=tom_get_slot_PairSlotAppl_Appl(tom_get_head_concSlot_SlotList(tomMatch225NameNumber_freshVar_1));{  tom.engine.adt.tomslot.types.SlotList  tomMatch225NameNumber_freshVar_4=tom_get_tail_concSlot_SlotList(tomMatch225NameNumber_freshVar_1);if ( true ) {

            TomTerm freshVar = ConstraintCompiler.getFreshVariable(ConstraintCompiler.getSlotType(tom_get_head_concTomName_TomNameList(tomMatch224NameNumber_freshVar_6),tomMatch225NameNumber_freshVar_6));
            // store the fresh variable
            freshVarList.add(freshVar);
            // build the last part
            lastPart = tom_append_list_AndConstraint(lastPart,tom_cons_list_AndConstraint(tom_make_MatchConstraint(tomMatch225NameNumber_freshVar_7,freshVar),tom_empty_list_AndConstraint()));              
          }}}}}}}if (tom_is_empty_concSlot_SlotList(tomMatch225NameNumber_end_3)) {tomMatch225NameNumber_end_3=tomMatch225NameNumber_begin_2;} else {tomMatch225NameNumber_end_3=tom_get_tail_concSlot_SlotList(tomMatch225NameNumber_end_3);}}} while(!(tom_equal_term_SlotList(tomMatch225NameNumber_end_3, tomMatch225NameNumber_begin_2)));}}}}}}

        // take each symbol and build the disjunction
        Constraint l = tom_empty_list_OrConstraintDisjunction();
        if (tom_is_sort_TomNameList(tom_nameList)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch226NameNumberfreshSubject_1=(( tom.engine.adt.tomname.types.TomNameList )tom_nameList);if (tom_is_fun_sym_concTomName(tomMatch226NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch226NameNumber_freshVar_0=tomMatch226NameNumberfreshSubject_1;{  tom.engine.adt.tomname.types.TomNameList  tomMatch226NameNumber_begin_2=tomMatch226NameNumber_freshVar_0;{  tom.engine.adt.tomname.types.TomNameList  tomMatch226NameNumber_end_3=tomMatch226NameNumber_freshVar_0;do {{{  tom.engine.adt.tomname.types.TomNameList  tomMatch226NameNumber_freshVar_1=tomMatch226NameNumber_end_3;if (!(tom_is_empty_concTomName_TomNameList(tomMatch226NameNumber_freshVar_1))) {{  tom.engine.adt.tomname.types.TomName  tom_name=tom_get_head_concTomName_TomNameList(tomMatch226NameNumber_freshVar_1);{  tom.engine.adt.tomname.types.TomNameList  tomMatch226NameNumber_freshVar_4=tom_get_tail_concTomName_TomNameList(tomMatch226NameNumber_freshVar_1);if ( true ) {

            // the 'and' conjunction for each name
            Constraint andForName = tom_empty_list_AndConstraint();
            // add condition for symbolOf
            andForName = tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_make_RecordAppl(tomMatch224NameNumber_freshVar_2,tom_cons_list_concTomName(tom_name,tom_empty_list_concTomName()),tom_empty_list_concSlot(),tom_empty_list_concConstraint()),tom_make_SymbolOf(tom_g)),tom_empty_list_AndConstraint());
            int counter = 0;          
            // for each slot
            if (tom_is_sort_SlotList(tom_slots)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch227NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.SlotList )tom_slots);if (tom_is_fun_sym_concSlot(tomMatch227NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch227NameNumber_freshVar_0=tomMatch227NameNumberfreshSubject_1;{  tom.engine.adt.tomslot.types.SlotList  tomMatch227NameNumber_begin_2=tomMatch227NameNumber_freshVar_0;{  tom.engine.adt.tomslot.types.SlotList  tomMatch227NameNumber_end_3=tomMatch227NameNumber_freshVar_0;do {{{  tom.engine.adt.tomslot.types.SlotList  tomMatch227NameNumber_freshVar_1=tomMatch227NameNumber_end_3;if (!(tom_is_empty_concSlot_SlotList(tomMatch227NameNumber_freshVar_1))) {if (tom_is_fun_sym_PairSlotAppl(tom_get_head_concSlot_SlotList(tomMatch227NameNumber_freshVar_1))) {{  tom.engine.adt.tomname.types.TomName  tomMatch227NameNumber_freshVar_6=tom_get_slot_PairSlotAppl_SlotName(tom_get_head_concSlot_SlotList(tomMatch227NameNumber_freshVar_1));{  tom.engine.adt.tomterm.types.TomTerm  tomMatch227NameNumber_freshVar_7=tom_get_slot_PairSlotAppl_Appl(tom_get_head_concSlot_SlotList(tomMatch227NameNumber_freshVar_1));{  tom.engine.adt.tomslot.types.SlotList  tomMatch227NameNumber_freshVar_4=tom_get_tail_concSlot_SlotList(tomMatch227NameNumber_freshVar_1);if ( true ) {
                                          
                TomTerm freshVar = freshVarList.get(counter);          
                andForName = tom_append_list_AndConstraint(andForName,tom_cons_list_AndConstraint(tom_make_MatchConstraint(freshVar,tom_make_Subterm(tom_name,tomMatch227NameNumber_freshVar_6,tom_g)),tom_empty_list_AndConstraint()));
                counter++;
              }}}}}}}if (tom_is_empty_concSlot_SlotList(tomMatch227NameNumber_end_3)) {tomMatch227NameNumber_end_3=tomMatch227NameNumber_begin_2;} else {tomMatch227NameNumber_end_3=tom_get_tail_concSlot_SlotList(tomMatch227NameNumber_end_3);}}} while(!(tom_equal_term_SlotList(tomMatch227NameNumber_end_3, tomMatch227NameNumber_begin_2)));}}}}}}
// match slots
            l = tom_append_list_OrConstraintDisjunction(l,tom_cons_list_OrConstraintDisjunction(andForName,tom_empty_list_OrConstraintDisjunction()));
          }}}}}if (tom_is_empty_concTomName_TomNameList(tomMatch226NameNumber_end_3)) {tomMatch226NameNumber_end_3=tomMatch226NameNumber_begin_2;} else {tomMatch226NameNumber_end_3=tom_get_tail_concTomName_TomNameList(tomMatch226NameNumber_end_3);}}} while(!(tom_equal_term_TomNameList(tomMatch226NameNumber_end_3, tomMatch226NameNumber_begin_2)));}}}}}}

        return tom_append_list_AndConstraint(l,tom_append_list_AndConstraint(lastPart,tom_cons_list_AndConstraint(ConstraintPropagator.performDetach(tom_m),tom_empty_list_AndConstraint())));
      }}}}}}}}}}}}}}}}}}}}}if (tom_is_fun_sym_AndConstraint(tomMatch224NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_11=tomMatch224NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_begin_13=tomMatch224NameNumber_freshVar_11;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_end_14=tomMatch224NameNumber_freshVar_11;do {{{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_12=tomMatch224NameNumber_end_14;if (!( ( tom_is_empty_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_12) || tom_equal_term_Constraint(tomMatch224NameNumber_freshVar_12, tom_empty_list_AndConstraint()) ) )) {if (tom_is_fun_sym_AntiMatchConstraint(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_12))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_12)):(tomMatch224NameNumber_freshVar_12)))) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_15=((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_12))?(tom_get_tail_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_12)):(tom_empty_list_AndConstraint()));{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_begin_17=tomMatch224NameNumber_freshVar_15;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_end_18=tomMatch224NameNumber_freshVar_15;do {{{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_16=tomMatch224NameNumber_end_18;if (!( ( tom_is_empty_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_16) || tom_equal_term_Constraint(tomMatch224NameNumber_freshVar_16, tom_empty_list_AndConstraint()) ) )) {if (tom_is_fun_sym_MatchConstraint(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_16))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_16)):(tomMatch224NameNumber_freshVar_16)))) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_19=((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_16))?(tom_get_tail_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_16)):(tom_empty_list_AndConstraint()));if ( true ) {







        return tom_append_list_AndConstraint(tom_get_slice_AndConstraint(tomMatch224NameNumber_begin_13,tomMatch224NameNumber_end_14,tom_empty_list_AndConstraint()),tom_append_list_AndConstraint(tom_get_slice_AndConstraint(tomMatch224NameNumber_begin_17,tomMatch224NameNumber_end_18,tom_empty_list_AndConstraint()),tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_16))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_16)):(tomMatch224NameNumber_freshVar_16)),tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_12))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_12)):(tomMatch224NameNumber_freshVar_12)),tom_append_list_AndConstraint(tomMatch224NameNumber_freshVar_19,tom_empty_list_AndConstraint())))));        
      }}}}}if ( ( tom_is_empty_AndConstraint_Constraint(tomMatch224NameNumber_end_18) || tom_equal_term_Constraint(tomMatch224NameNumber_end_18, tom_empty_list_AndConstraint()) ) ) {tomMatch224NameNumber_end_18=tomMatch224NameNumber_begin_17;} else {tomMatch224NameNumber_end_18=((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_end_18))?(tom_get_tail_AndConstraint_Constraint(tomMatch224NameNumber_end_18)):(tom_empty_list_AndConstraint()));}}} while(!(tom_equal_term_Constraint(tomMatch224NameNumber_end_18, tomMatch224NameNumber_begin_17)));}}}}}}if ( ( tom_is_empty_AndConstraint_Constraint(tomMatch224NameNumber_end_14) || tom_equal_term_Constraint(tomMatch224NameNumber_end_14, tom_empty_list_AndConstraint()) ) ) {tomMatch224NameNumber_end_14=tomMatch224NameNumber_begin_13;} else {tomMatch224NameNumber_end_14=((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_end_14))?(tom_get_tail_AndConstraint_Constraint(tomMatch224NameNumber_end_14)):(tom_empty_list_AndConstraint()));}}} while(!(tom_equal_term_Constraint(tomMatch224NameNumber_end_14, tomMatch224NameNumber_begin_13)));}}}}if (tom_is_fun_sym_AndConstraint(tomMatch224NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_27=tomMatch224NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_begin_29=tomMatch224NameNumber_freshVar_27;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_end_30=tomMatch224NameNumber_freshVar_27;do {{{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_28=tomMatch224NameNumber_end_30;if (!( ( tom_is_empty_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_28) || tom_equal_term_Constraint(tomMatch224NameNumber_freshVar_28, tom_empty_list_AndConstraint()) ) )) {if (tom_is_fun_sym_MatchConstraint(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_28))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_28)):(tomMatch224NameNumber_freshVar_28)))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch224NameNumber_freshVar_35=tom_get_slot_MatchConstraint_pattern(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_28))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_28)):(tomMatch224NameNumber_freshVar_28)));{  tom.engine.adt.tomterm.types.TomTerm  tomMatch224NameNumber_freshVar_36=tom_get_slot_MatchConstraint_subject(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_28))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_28)):(tomMatch224NameNumber_freshVar_28)));if (tom_is_fun_sym_Variable(tomMatch224NameNumber_freshVar_35)) {{  tom.engine.adt.tomname.types.TomName  tomMatch224NameNumber_freshVar_37=tom_get_slot_Variable_AstName(tomMatch224NameNumber_freshVar_35);{  tom.engine.adt.tomname.types.TomName  tom_z=tomMatch224NameNumber_freshVar_37;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch224NameNumber_freshVar_31=((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_28))?(tom_get_tail_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_28)):(tom_empty_list_AndConstraint()));if ( true ) {





     
        // for optimizing reasons
        if (!replacedVariables.contains(tom_z)){ 
          replacedVariables.add(tom_z);
          Constraint toApplyOn = tom_append_list_AndConstraint(tomMatch224NameNumber_freshVar_31,tom_empty_list_AndConstraint());
          Constraint res = (Constraint)tom_make_TopDown(tom_make_ReplaceVariable(tom_z,tomMatch224NameNumber_freshVar_36)).visitLight(toApplyOn);
          if(res != toApplyOn) {
            return tom_append_list_AndConstraint(tom_get_slice_AndConstraint(tomMatch224NameNumber_begin_29,tomMatch224NameNumber_end_30,tom_empty_list_AndConstraint()),tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_freshVar_28))?(tom_get_head_AndConstraint_Constraint(tomMatch224NameNumber_freshVar_28)):(tomMatch224NameNumber_freshVar_28)),tom_cons_list_AndConstraint(res,tom_empty_list_AndConstraint())));
          }
        }
      }}}}}}}}}}if ( ( tom_is_empty_AndConstraint_Constraint(tomMatch224NameNumber_end_30) || tom_equal_term_Constraint(tomMatch224NameNumber_end_30, tom_empty_list_AndConstraint()) ) ) {tomMatch224NameNumber_end_30=tomMatch224NameNumber_begin_29;} else {tomMatch224NameNumber_end_30=((tom_is_fun_sym_AndConstraint(tomMatch224NameNumber_end_30))?(tom_get_tail_AndConstraint_Constraint(tomMatch224NameNumber_end_30)):(tom_empty_list_AndConstraint()));}}} while(!(tom_equal_term_Constraint(tomMatch224NameNumber_end_30, tomMatch224NameNumber_begin_29)));}}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_SyntacticPatternMatching() { return new SyntacticPatternMatching(); }

// end %strategy

  private static class ReplaceVariable extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  tom.engine.adt.tomname.types.TomName  varName; private  tom.engine.adt.tomterm.types.TomTerm  value; public ReplaceVariable( tom.engine.adt.tomname.types.TomName  varName,  tom.engine.adt.tomterm.types.TomTerm  value) { super(tom_make_Identity());this.varName=varName;this.value=value;}public  tom.engine.adt.tomname.types.TomName  getvarName() { return varName;}public  tom.engine.adt.tomterm.types.TomTerm  getvalue() { return value;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch228NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch228NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch228NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch228NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch228NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch228NameNumberfreshSubject_1);if (tom_is_fun_sym_Variable(tomMatch228NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomName  tomMatch228NameNumber_freshVar_2=tom_get_slot_Variable_AstName(tomMatch228NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch228NameNumber_freshVar_1;if ( true ) {


        if(tomMatch228NameNumber_freshVar_2== varName) {
          // if we propagate a variable, this should lead to en equality test
          // otherwise, it is a just a match
          return value.isVariable() ? tom_make_MatchConstraint(tom_make_TestVar(value),tom_t) : tom_make_MatchConstraint(value,tom_t); 
        }
      }}}}}}}if (tom_is_fun_sym_NumericConstraint(tomMatch228NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch228NameNumber_freshVar_3=tom_get_slot_NumericConstraint_Left(tomMatch228NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch228NameNumber_freshVar_4=tom_get_slot_NumericConstraint_Right(tomMatch228NameNumberfreshSubject_1);{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch228NameNumber_freshVar_5=tom_get_slot_NumericConstraint_Type(tomMatch228NameNumberfreshSubject_1);if (tom_is_fun_sym_Variable(tomMatch228NameNumber_freshVar_3)) {{  tom.engine.adt.tomname.types.TomName  tomMatch228NameNumber_freshVar_6=tom_get_slot_Variable_AstName(tomMatch228NameNumber_freshVar_3);if ( true ) {

        if(tomMatch228NameNumber_freshVar_6== varName) {          
          return tom_make_NumericConstraint(value,tomMatch228NameNumber_freshVar_4,tomMatch228NameNumber_freshVar_5); 
        }
      }}}}}}}if (tom_is_fun_sym_MatchConstraint(tomMatch228NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch228NameNumber_freshVar_7=tom_get_slot_MatchConstraint_pattern(tomMatch228NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch228NameNumber_freshVar_8=tom_get_slot_MatchConstraint_subject(tomMatch228NameNumberfreshSubject_1);if (tom_is_fun_sym_VariableStar(tomMatch228NameNumber_freshVar_7)) {{  tom.engine.adt.tomname.types.TomName  tomMatch228NameNumber_freshVar_9=tom_get_slot_VariableStar_AstName(tomMatch228NameNumber_freshVar_7);{  tom.engine.adt.tomtype.types.TomType  tomMatch228NameNumber_freshVar_10=tom_get_slot_VariableStar_AstType(tomMatch228NameNumber_freshVar_7);{ boolean tomMatch228NameNumber_freshVar_11= false ;if (tom_is_fun_sym_PositionName(tomMatch228NameNumber_freshVar_9)) {if (tom_equal_term_TomName(tomMatch228NameNumber_freshVar_9, tomMatch228NameNumber_freshVar_9)) {tomMatch228NameNumber_freshVar_11= true ;}}if ((tomMatch228NameNumber_freshVar_11 ==  false )) {if ( true ) {


        
        if(tomMatch228NameNumber_freshVar_9== varName) {           
          TomTerm freshVar = ConstraintCompiler.getFreshVariableStar(tomMatch228NameNumber_freshVar_10);
          return tom_cons_list_AndConstraint(tom_make_MatchConstraint(freshVar,tomMatch228NameNumber_freshVar_8),tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_make_TestVar(freshVar),tomMatch228NameNumber_freshVar_7),tom_empty_list_AndConstraint()));
        }                                 
      }}}}}}}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ReplaceVariable( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return new ReplaceVariable(t0,t1); }

// end strategy
}
