/*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2016, Universite de Lorraine, Inria
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler.propagator;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.code.types.*;
import tom.library.sl.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.tools.SymbolTable;
import tom.engine.compiler.*;
import tom.engine.TomBase;
import tom.engine.tools.SymbolTable;
import java.util.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.compiler.Compiler;

/**
 * A propagator that contains rules that don't depend on the theory (or that are applicable for more than one)
 */
public class GeneralPurposePropagator implements IBasePropagator {

//--------------------------------------------------------
        private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2)) ;     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomName()  ||  (end== tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail)) ;   }      private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcSlot()  ||  (end== tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if(  l1.getTailAndConstraint() .isEmptyAndConstraint() ) {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( l1.getHeadAndConstraint() ,l2) ;       } else {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( l1.getHeadAndConstraint() ,tom_append_list_AndConstraint( l1.getTailAndConstraint() ,l2)) ;       }     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyAndConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ),end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;   }         private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Sequence )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ) == null )) {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),l2) ;       } else {         return  tom.library.sl.Sequence.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ),tom_append_list_Sequence(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Sequence.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Sequence.make(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( begin instanceof tom.library.sl.Sequence ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.Choice )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ) ==null )) {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),l2) ;       } else {         return  tom.library.sl.Choice.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ),tom_append_list_Choice(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.Choice.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.Choice.make(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( begin instanceof tom.library.sl.Choice ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.SequenceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ) == null )) {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.SequenceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ),tom_append_list_SequenceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.SequenceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.SequenceId.make(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( begin instanceof tom.library.sl.SequenceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ): null ),end,tail)) ;   }      private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( l1 instanceof tom.library.sl.ChoiceId )) {       if(( ( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ) ==null )) {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),l2) ;       } else {         return  tom.library.sl.ChoiceId.make(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ),tom_append_list_ChoiceId(( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ),l2)) ;       }     } else {       return  tom.library.sl.ChoiceId.make(l1,l2) ;     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals( null )) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.library.sl.ChoiceId.make(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( begin instanceof tom.library.sl.ChoiceId ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ): null ),end,tail)) ;   }      private static  tom.library.sl.Strategy  tom_make_AUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("x") ), tom.library.sl.Choice.make(s2, tom.library.sl.Choice.make( tom.library.sl.Sequence.make( tom.library.sl.Sequence.make(s1, tom.library.sl.Sequence.make(( new tom.library.sl.All(( new tom.library.sl.MuVar("x") )) ), null ) ) , tom.library.sl.Sequence.make(( new tom.library.sl.One(( new tom.library.sl.Identity() )) ), null ) ) , null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_EUCtl( tom.library.sl.Strategy  s1,  tom.library.sl.Strategy  s2) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("x") ), tom.library.sl.Choice.make(s2, tom.library.sl.Choice.make( tom.library.sl.Sequence.make(s1, tom.library.sl.Sequence.make(( new tom.library.sl.One(( new tom.library.sl.MuVar("x") )) ), null ) ) , null ) ) ) ));} private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  s) { return (  tom.library.sl.Choice.make(s, tom.library.sl.Choice.make(( new tom.library.sl.Identity() ), null ) )  );}private static  tom.library.sl.Strategy  tom_make_Repeat( tom.library.sl.Strategy  s) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Choice.make( tom.library.sl.Sequence.make(s, tom.library.sl.Sequence.make(( new tom.library.sl.MuVar("_x") ), null ) ) , tom.library.sl.Choice.make(( new tom.library.sl.Identity() ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Sequence.make(v, tom.library.sl.Sequence.make(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.Choice.make(v, tom.library.sl.Choice.make(( new tom.library.sl.One(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_RepeatId( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.SequenceId.make(v, tom.library.sl.SequenceId.make(( new tom.library.sl.MuVar("_x") ), null ) ) ) ) );}private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ), tom.library.sl.ChoiceId.make(v, tom.library.sl.ChoiceId.make(( new tom.library.sl.OneId(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) ) );}     private static Strategy makeTopDownWhenConstraint(Strategy s) {   return ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),( makeWhenConstraint( tom.library.sl.Sequence.make(s, tom.library.sl.Sequence.make(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ), null ) ) ) )) );  }  public static class WhenConstraint extends tom.library.sl.AbstractStrategyBasic {    private  tom.library.sl.Strategy  s;      public WhenConstraint( tom.library.sl.Strategy  s) {     super(( new tom.library.sl.Identity() ));     this.s=s;   }      public  tom.library.sl.Strategy  gets() {     return s;   }    public tom.library.sl.Visitable[] getChildren() {     tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];     stratChildren[0] = super.getChildAt(0);     stratChildren[1] = gets();     return stratChildren;   }    public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {     super.setChildAt(0, children[0]);     s = ( tom.library.sl.Strategy ) children[1];     return this;   }    public int getChildCount() {     return 2;   }    public tom.library.sl.Visitable getChildAt(int index) {     switch (index) {       case 0: return super.getChildAt(0);       case 1: return gets();       default: throw new IndexOutOfBoundsException();      }   }    public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {     switch (index) {       case 0: return super.setChildAt(0, child);       case 1: s = ( tom.library.sl.Strategy )child;               return this;       default: throw new IndexOutOfBoundsException();     }   }    public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {     if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {       return s.visitLight(v,introspector);     }     return any.visitLight(v,introspector);   }  }    private static  tom.library.sl.Strategy  makeWhenConstraint( tom.library.sl.Strategy  t0) { return new WhenConstraint(t0);}     

	
//--------------------------------------------------------

  




  private Compiler compiler;  
  private ConstraintPropagator constraintPropagator; 

  public GeneralPurposePropagator(Compiler myCompiler, ConstraintPropagator myConstraintPropagator) {
    this.compiler = myCompiler;
    this.constraintPropagator = myConstraintPropagator;
  }

  public Compiler getCompiler() {
    return this.compiler;
  }

  public ConstraintPropagator getConstraintPropagator() {
    return this.constraintPropagator;
  }

  public Constraint propagate(Constraint constraint) throws VisitFailure {
    return ( makeTopDownWhenConstraint(tom_make_GeneralPropagations(this)) ).visitLight(constraint);
  }	

  public static class GeneralPropagations extends tom.library.sl.AbstractStrategyBasic {private  GeneralPurposePropagator  gpp;public GeneralPropagations( GeneralPurposePropagator  gpp) {super(( new tom.library.sl.Identity() ));this.gpp=gpp;}public  GeneralPurposePropagator  getgpp() {return gpp;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch229_1= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch229_1) instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch229_6= tomMatch229_1.getTomTerm() ;boolean tomMatch229_12= false ; tom.engine.adt.tomterm.types.TomTerm  tomMatch229_10= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch229_11= null ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch229_6) instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{ /* unamed block */tomMatch229_12= true ;tomMatch229_10=tomMatch229_6;}} else {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch229_6) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{ /* unamed block */tomMatch229_12= true ;tomMatch229_11=tomMatch229_6;}}}if (tomMatch229_12) { tom.engine.adt.tomterm.types.TomTerm  tom___term=tomMatch229_6; tom.engine.adt.code.types.BQTerm  tom___s= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() ; tom.engine.adt.tomtype.types.TomType  tom___aType= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getAstType() ;







        
        return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tom___term, tom___s, tom___aType) ) , tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(gpp.getConstraintPropagator().performDetach( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tom___term, tom___s, tom___aType) ), tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) ) 
;
      }}}}}{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( (((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) { tom.engine.adt.tomconstraint.types.Constraint  tomMatch229_end_17=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);do {{ /* unamed block */if (!( (  tomMatch229_end_17.isEmptyAndConstraint()  ||  (tomMatch229_end_17== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) )) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )(( ((tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_17.getHeadAndConstraint() ):(tomMatch229_end_17))) instanceof tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint) ) { tom.engine.adt.tomconstraint.types.Constraint  tomMatch229_18=(( ((tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_17.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )); tom.engine.adt.tomconstraint.types.Constraint  tomMatch229_end_21=tomMatch229_18;do {{ /* unamed block */if (!( (  tomMatch229_end_21.isEmptyAndConstraint()  ||  (tomMatch229_end_21== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) )) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )(( ((tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_21.getHeadAndConstraint() ):(tomMatch229_end_21))) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {







        //TODO : rename variables
        return tom_append_list_AndConstraint(tom_get_slice_AndConstraint((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg),tomMatch229_end_17, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ),tom_append_list_AndConstraint(tom_get_slice_AndConstraint(tomMatch229_18,tomMatch229_end_21, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ), tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_21.getHeadAndConstraint() ):(tomMatch229_end_21)), tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_17.getHeadAndConstraint() ):(tomMatch229_end_17)),tom_append_list_AndConstraint((( ((tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_21.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )), tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )) ) ));        
      }}if ( (  tomMatch229_end_21.isEmptyAndConstraint()  ||  (tomMatch229_end_21== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) ) {tomMatch229_end_21=tomMatch229_18;} else {tomMatch229_end_21=(( ((tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_21 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_21.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ));}}} while(!( (tomMatch229_end_21==tomMatch229_18) ));}}if ( (  tomMatch229_end_17.isEmptyAndConstraint()  ||  (tomMatch229_end_17== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) ) {tomMatch229_end_17=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);} else {tomMatch229_end_17=(( ((tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_17 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_17.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ));}}} while(!( (tomMatch229_end_17==(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg)) ));}}}{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( (((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) { tom.engine.adt.tomconstraint.types.Constraint  tomMatch229_end_32=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);do {{ /* unamed block */if (!( (  tomMatch229_end_32.isEmptyAndConstraint()  ||  (tomMatch229_end_32== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) )) { tom.engine.adt.tomconstraint.types.Constraint  tomMatch229_36=(( ((tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_32.getHeadAndConstraint() ):(tomMatch229_end_32));if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tomMatch229_36) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch229_35= tomMatch229_36.getPattern() ;boolean tomMatch229_46= false ; tom.engine.adt.tomname.types.TomName  tomMatch229_38= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch229_40= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch229_41= null ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch229_35) instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{ /* unamed block */tomMatch229_46= true ;tomMatch229_40=tomMatch229_35;tomMatch229_38= tomMatch229_40.getAstName() ;}} else {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch229_35) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{ /* unamed block */tomMatch229_46= true ;tomMatch229_41=tomMatch229_35;tomMatch229_38= tomMatch229_41.getAstName() ;}}}if (tomMatch229_46) { tom.engine.adt.tomname.types.TomName  tom___varName=tomMatch229_38; tom.engine.adt.tomconstraint.types.Constraint  tom___Y=(( ((tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_32.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ));boolean tomMatch229_45= false ;if ( ((( tom.engine.adt.tomname.types.TomName )tomMatch229_38) instanceof tom.engine.adt.tomname.types.tomname.PositionName) ) {if ( (tom___varName==tomMatch229_38) ) {tomMatch229_45= true ;}}if (!(tomMatch229_45)) {























        // we cannot cache already renamed variables, because disjunctions have to be taken into account
        // for example: g(x) || f(x,x) -> ...
        Constraint res = (Constraint)( makeTopDownWhenConstraint(tom_make_ReplaceMatchConstraint(tom___varName,gpp)) ).visitLight(tom___Y);
        if(res != tom___Y) {
          return tom_append_list_AndConstraint(tom_get_slice_AndConstraint((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg),tomMatch229_end_32, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ), tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_32.getHeadAndConstraint() ):(tomMatch229_end_32)),tom_append_list_AndConstraint(res, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )) );
        }
      }}}}if ( (  tomMatch229_end_32.isEmptyAndConstraint()  ||  (tomMatch229_end_32== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) ) {tomMatch229_end_32=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);} else {tomMatch229_end_32=(( ((tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch229_end_32 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch229_end_32.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ));}}} while(!( (tomMatch229_end_32==(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg)) ));}}}{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch229_48= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;boolean tomMatch229_59= false ; tom.engine.adt.tomterm.types.TomTerm  tomMatch229_56= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch229_55= null ; tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch229_53= null ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch229_48) instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{ /* unamed block */tomMatch229_59= true ;tomMatch229_55=tomMatch229_48;tomMatch229_53= tomMatch229_55.getConstraints() ;}} else {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch229_48) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{ /* unamed block */tomMatch229_59= true ;tomMatch229_56=tomMatch229_48;tomMatch229_53= tomMatch229_56.getConstraints() ;}}}if (tomMatch229_59) { tom.engine.adt.tomterm.types.TomTerm  tom___term=tomMatch229_48;boolean tomMatch229_58= false ;if ( (((( tom.engine.adt.tomconstraint.types.ConstraintList )tomMatch229_53) instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || ((( tom.engine.adt.tomconstraint.types.ConstraintList )tomMatch229_53) instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ) {if ( tomMatch229_53.isEmptyconcConstraint() ) {tomMatch229_58= true ;}}if (!(tomMatch229_58)) {








        Constraint result = gpp.getConstraintPropagator().performDetach((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg));
        if(tom___term.isVariable()) {
          result =
             tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tom___term.setConstraints( tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ),  (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() ,  (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getAstType() ) , tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(result, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) ) ;
        }
        return result;
      }}}}}}return _visit_Constraint(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_GeneralPropagations( GeneralPurposePropagator  t0) { return new GeneralPropagations(t0);}








// end %strategy

  /**
   * Detach sublists
   * 
   * Make sure that the sublists in a list are replaced by star variables 
   * this is only happening when the lists and the sublists have the same name
   * 
   * conc(X*,conc(some_pattern),Y*) << t -> conc(X*,Z*,Y*) << t /\ conc(some_pattern) << Z*  
   * 
   */ 
  public Constraint detachSublists(Constraint constraint) {
    // will hold the new slots of t
    SlotList newSlots =  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ;
    Constraint constraintList =  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ;
    { /* unamed block */{ /* unamed block */if ( (constraint instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )constraint) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch230_1= (( tom.engine.adt.tomconstraint.types.Constraint )constraint).getPattern() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch230_1) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomname.types.TomNameList  tomMatch230_6= tomMatch230_1.getNameList() ; tom.engine.adt.tomslot.types.SlotList  tomMatch230_7= tomMatch230_1.getSlots() ;if ( (((( tom.engine.adt.tomname.types.TomNameList )tomMatch230_6) instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || ((( tom.engine.adt.tomname.types.TomNameList )tomMatch230_6) instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch230_6.isEmptyconcTomName() )) {if ( ((( tom.engine.adt.tomname.types.TomName ) tomMatch230_6.getHeadconcTomName() ) instanceof tom.engine.adt.tomname.types.tomname.Name) ) { tom.engine.adt.tomname.types.TomName  tom___name= tomMatch230_6.getHeadconcTomName() ;if (  tomMatch230_6.getTailconcTomName() .isEmptyconcTomName() ) { tom.engine.adt.tomslot.types.SlotList  tom___slots=tomMatch230_7; tom.engine.adt.tomterm.types.TomTerm  tom___t=tomMatch230_1; tom.engine.adt.tomtype.types.TomType  tom___aType= (( tom.engine.adt.tomconstraint.types.Constraint )constraint).getAstType() ;boolean tomMatch230_16= false ;if ( (((( tom.engine.adt.tomslot.types.SlotList )tomMatch230_7) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tomMatch230_7) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) {if ( (tom___slots==tomMatch230_7) ) {if ( tomMatch230_7.isEmptyconcSlot() ) {tomMatch230_16= true ;}}}if (!(tomMatch230_16)) {{ /* unamed block */{ /* unamed block */if ( (tom___slots instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )(( tom.engine.adt.tomslot.types.SlotList )tom___slots)) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )(( tom.engine.adt.tomslot.types.SlotList )tom___slots)) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) { tom.engine.adt.tomslot.types.SlotList  tomMatch231_end_4=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);do {{ /* unamed block */if (!( tomMatch231_end_4.isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tom___slot= tomMatch231_end_4.getHeadconcSlot() ;




matchSlot:  { /* unamed block */{ /* unamed block */if ( (tom___slot instanceof tom.engine.adt.tomslot.types.Slot) ) {if ( ((( tom.engine.adt.tomslot.types.Slot )tom___slot) instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) { tom.engine.adt.tomterm.types.TomTerm  tom___appl= (( tom.engine.adt.tomslot.types.Slot )tom___slot).getAppl() ; tom.engine.adt.tomslot.types.Slot  tom___ps=(( tom.engine.adt.tomslot.types.Slot )tom___slot);if ( (tom___name instanceof tom.engine.adt.tomname.types.TomName) ) { tom.engine.adt.tomname.types.TomName  tom___childName=(( tom.engine.adt.tomname.types.TomName )tom___name);if ( (tom___appl instanceof tom.engine.adt.tomterm.types.TomTerm) ) {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tom___appl) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomname.types.TomNameList  tomMatch232_7= (( tom.engine.adt.tomterm.types.TomTerm )tom___appl).getNameList() ;if ( (((( tom.engine.adt.tomname.types.TomNameList )tomMatch232_7) instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || ((( tom.engine.adt.tomname.types.TomNameList )tomMatch232_7) instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch232_7.isEmptyconcTomName() )) {if ( (tom___childName== tomMatch232_7.getHeadconcTomName() ) ) {if (  tomMatch232_7.getTailconcTomName() .isEmptyconcTomName() ) {


                  BQTerm freshVariable = getCompiler().getFreshVariableStar(getCompiler().getTermTypeFromTerm(tom___t));                
                  constraintList =
                     tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tom___appl, freshVariable, tom___aType) ,tom_append_list_AndConstraint(constraintList, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )) ;
                  newSlots = tom_append_list_concSlot(newSlots, tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(tom___ps.setAppl(TomBase.convertFromBQVarToVar(freshVariable)), tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) );
                  break matchSlot;
                }}}}}}if ( (tom___appl instanceof tom.engine.adt.tomterm.types.TomTerm) ) {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tom___appl) instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch232_10= (( tom.engine.adt.tomterm.types.TomTerm )tom___appl).getTomTerm() ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch232_10) instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomname.types.TomNameList  tomMatch232_13= tomMatch232_10.getNameList() ;if ( (((( tom.engine.adt.tomname.types.TomNameList )tomMatch232_13) instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || ((( tom.engine.adt.tomname.types.TomNameList )tomMatch232_13) instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch232_13.isEmptyconcTomName() )) {if ( (tom___childName== tomMatch232_13.getHeadconcTomName() ) ) {if (  tomMatch232_13.getTailconcTomName() .isEmptyconcTomName() ) {                   BQTerm freshVariable = getCompiler().getFreshVariableStar(getCompiler().getTermTypeFromTerm(tom___t));                                   constraintList =                      tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tom___appl, freshVariable, tom___aType) ,tom_append_list_AndConstraint(constraintList, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )) ;                   newSlots = tom_append_list_concSlot(newSlots, tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(tom___ps.setAppl(TomBase.convertFromBQVarToVar(freshVariable)), tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) );                   break matchSlot;                 }}}}}}}}}}}{ /* unamed block */if ( (tom___slot instanceof tom.engine.adt.tomslot.types.Slot) ) {if ( (tom___name instanceof tom.engine.adt.tomname.types.TomName) ) {


                newSlots = tom_append_list_concSlot(newSlots, tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make((( tom.engine.adt.tomslot.types.Slot )tom___slot), tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) );
              }}}}

          }if ( tomMatch231_end_4.isEmptyconcSlot() ) {tomMatch231_end_4=(( tom.engine.adt.tomslot.types.SlotList )tom___slots);} else {tomMatch231_end_4= tomMatch231_end_4.getTailconcSlot() ;}}} while(!( (tomMatch231_end_4==(( tom.engine.adt.tomslot.types.SlotList )tom___slots)) ));}}}}

        return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tom___t.setSlots(newSlots),  (( tom.engine.adt.tomconstraint.types.Constraint )constraint).getSubject() , tom___aType) ,tom_append_list_AndConstraint(constraintList, tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )) ;   
      }}}}}}}}}}

    // never gets here
    throw new TomRuntimeException("GeneralPurposePropagator:detachSublists - unexpected result");
  }

  /*
   * x << s -> fresh << s ^ fresh==x
   */
  public static class ReplaceMatchConstraint extends tom.library.sl.AbstractStrategyBasic {private  tom.engine.adt.tomname.types.TomName  varName;private  GeneralPurposePropagator  gpp;public ReplaceMatchConstraint( tom.engine.adt.tomname.types.TomName  varName,  GeneralPurposePropagator  gpp) {super(( new tom.library.sl.Identity() ));this.varName=varName;this.gpp=gpp;}public  tom.engine.adt.tomname.types.TomName  getvarName() {return varName;}public  GeneralPurposePropagator  getgpp() {return gpp;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch233_1= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;boolean tomMatch233_11= false ; tom.engine.adt.tomtype.types.TomType  tomMatch233_7= null ; tom.engine.adt.tomname.types.TomName  tomMatch233_6= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch233_10= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch233_9= null ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch233_1) instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{ /* unamed block */tomMatch233_11= true ;tomMatch233_9=tomMatch233_1;tomMatch233_6= tomMatch233_9.getAstName() ;tomMatch233_7= tomMatch233_9.getAstType() ;}} else {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch233_1) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{ /* unamed block */tomMatch233_11= true ;tomMatch233_10=tomMatch233_1;tomMatch233_6= tomMatch233_10.getAstName() ;tomMatch233_7= tomMatch233_10.getAstType() ;}}}if (tomMatch233_11) { tom.engine.adt.tomtype.types.TomType  tom___type=tomMatch233_7; tom.engine.adt.tomterm.types.TomTerm  tom___var=tomMatch233_1; tom.engine.adt.tomtype.types.TomType  tom___aType= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getAstType() ;if ( (varName==tomMatch233_6) ) {



        
        BQTerm freshVar = tom___var.isVariable() ? gpp.getCompiler().getFreshVariable(tom___type) : gpp.getCompiler().getFreshVariableStar(tom___type);
        return
           tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(TomBase.convertFromBQVarToVar(freshVar),  (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() , tom___aType) , tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.TestVar.make(TomBase.convertFromBQVarToVar(freshVar)) , TomBase.convertFromVarToBQVar(tom___var), tom___aType) , tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) ) ;
      }}}}}}return _visit_Constraint(tom__arg,introspector);}}private static  tom.library.sl.Strategy  tom_make_ReplaceMatchConstraint( tom.engine.adt.tomname.types.TomName  t0,  GeneralPurposePropagator  t1) { return new ReplaceMatchConstraint(t0,t1);}



  /*
   * x << s -> fresh << s 
   */
  public static class ReplaceAntiMatchConstraint extends tom.library.sl.AbstractStrategyBasic {private  tom.engine.adt.tomname.types.TomName  varName;private  GeneralPurposePropagator  gpp;public ReplaceAntiMatchConstraint( tom.engine.adt.tomname.types.TomName  varName,  GeneralPurposePropagator  gpp) {super(( new tom.library.sl.Identity() ));this.varName=varName;this.gpp=gpp;}public  tom.engine.adt.tomname.types.TomName  getvarName() {return varName;}public  GeneralPurposePropagator  getgpp() {return gpp;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChildren = new tom.library.sl.Visitable[getChildCount()];stratChildren[0] = super.getChildAt(0);return stratChildren;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}@SuppressWarnings("unchecked")public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!(( null  == environment))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!(( null  == environment))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);}}@SuppressWarnings("unchecked")public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{ /* unamed block */{ /* unamed block */if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint) ) { tom.engine.adt.tomconstraint.types.Constraint  tomMatch234_1= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getConstraint() ;if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tomMatch234_1) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch234_4= tomMatch234_1.getPattern() ;boolean tomMatch234_14= false ; tom.engine.adt.tomtype.types.TomType  tomMatch234_10= null ; tom.engine.adt.tomname.types.TomName  tomMatch234_9= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch234_12= null ; tom.engine.adt.tomterm.types.TomTerm  tomMatch234_13= null ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch234_4) instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{ /* unamed block */tomMatch234_14= true ;tomMatch234_12=tomMatch234_4;tomMatch234_9= tomMatch234_12.getAstName() ;tomMatch234_10= tomMatch234_12.getAstType() ;}} else {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch234_4) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{ /* unamed block */tomMatch234_14= true ;tomMatch234_13=tomMatch234_4;tomMatch234_9= tomMatch234_13.getAstName() ;tomMatch234_10= tomMatch234_13.getAstType() ;}}}if (tomMatch234_14) { tom.engine.adt.tomtype.types.TomType  tom___type=tomMatch234_10;if ( (varName==tomMatch234_9) ) {



        
        BQTerm freshVar = tomMatch234_4.isVariable() ? gpp.getCompiler().getFreshVariable(tom___type) : gpp.getCompiler().getFreshVariableStar(tom___type);
        return
           tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(TomBase.convertFromBQVarToVar(freshVar),  tomMatch234_1.getSubject() ,  tomMatch234_1.getAstType() ) ) ;
      }}}}}}}return _visit_Constraint(tom__arg,introspector);}}



}
