/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler.propagator;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomname.types.*;
import tom.library.sl.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.tools.SymbolTable;
import tom.engine.compiler.*;
import tom.engine.TomBase;
import tom.engine.tools.SymbolTable;
import java.util.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;

/**
 * A propagator that contains rules that don't depend on the theory (or that are applicable for more than one)
 */
public class GeneralPurposePropagator implements IBasePropagator {

//--------------------------------------------------------
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Instruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Instruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.Instruction ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_InstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.InstructionList ;}private static boolean tom_equal_term_ConstraintInstruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintInstruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.ConstraintInstruction ;}private static boolean tom_equal_term_ConstraintInstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintInstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.ConstraintInstructionList ;}private static boolean tom_equal_term_TomTypeList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTypeList(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomTypeList ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomTypeDefinition(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTypeDefinition(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomTypeDefinition ;}private static boolean tom_equal_term_TomForwardType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomForwardType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomForwardType ;}private static boolean tom_equal_term_TomSymbolList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomSymbolList(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomSymbolList ;}private static boolean tom_equal_term_TomVisit(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomVisit(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomVisit ;}private static boolean tom_equal_term_TomStructureTable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomStructureTable(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomStructureTable ;}private static boolean tom_equal_term_Position(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Position(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.Position ;}private static boolean tom_equal_term_TomEntry(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomEntry(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomEntry ;}private static boolean tom_equal_term_TomEntryList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomEntryList(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomEntryList ;}private static boolean tom_equal_term_TomVisitList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomVisitList(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomVisitList ;}private static boolean tom_equal_term_TargetLanguage(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TargetLanguage(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TargetLanguage ;}private static boolean tom_equal_term_TomSymbolTable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomSymbolTable(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomSymbolTable ;}private static boolean tom_equal_term_TomSymbol(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomSymbol(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomSymbol ;}private static boolean tom_equal_term_KeyEntry(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_KeyEntry(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.KeyEntry ;}private static boolean tom_equal_term_ElementaryTheory(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ElementaryTheory(Object t) { return  t instanceof tom.engine.adt.theory.types.ElementaryTheory ;}private static boolean tom_equal_term_Theory(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Theory(Object t) { return  t instanceof tom.engine.adt.theory.types.Theory ;}private static boolean tom_equal_term_DeclarationList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_DeclarationList(Object t) { return  t instanceof tom.engine.adt.tomdeclaration.types.DeclarationList ;}private static boolean tom_equal_term_Declaration(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Declaration(Object t) { return  t instanceof tom.engine.adt.tomdeclaration.types.Declaration ;}private static boolean tom_equal_term_TomNumber(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumber(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumber ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumberList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumberList ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomList ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.engine.adt.tomoption.types.Option ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_NumericConstraintType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_NumericConstraintType(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_PairNameDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PairNameDecl(Object t) { return  t instanceof tom.engine.adt.tomslot.types.PairNameDecl ;}private static boolean tom_equal_term_PairNameDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PairNameDeclList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.PairNameDeclList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.engine.adt.tomslot.types.Slot ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.Name) ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.PositionName) ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_PositionName_NumberList( tom.engine.adt.tomname.types.TomName  t) { return  t.getNumberList() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TestVar( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.TestVar.make(t0) ; }private static boolean tom_is_fun_sym_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AntiTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_MatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(t0, t1) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AntiMatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t0) { return  tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint.make(t0) ; }private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomslot.types.Slot  t) { return  (t instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairSlotAppl_SlotName( tom.engine.adt.tomslot.types.Slot  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_PairSlotAppl_Appl( tom.engine.adt.tomslot.types.Slot  t) { return  t.getAppl() ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  ((t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2)) ;     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()).isEmptyAndConstraint() ) {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),l2) ;       } else {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),tom_append_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()),l2)) ;       }     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() :tom_empty_list_AndConstraint()),end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getHeadconcConstraint() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getTailconcConstraint() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.isEmptyconcConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;     }   }   private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) { return  ((t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || (t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getHeadconcSlot() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getTailconcSlot() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.isEmptyconcSlot() ;}   private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return tom_cons_list_Sequence(l1,l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(begin.equals(end)) {       return tail;     } else {       return tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }   private static boolean tom_is_fun_sym_ChoiceId( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.ChoiceId) ;}private static  tom.library.sl.Strategy  tom_empty_list_ChoiceId() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_ChoiceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.ChoiceId(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.THEN) ;}private static boolean tom_is_empty_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  t ==null ;}   private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_ChoiceId_Strategy(l1)) {       return l2;     } else if(tom_is_empty_ChoiceId_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_ChoiceId(l1)) {       if(tom_is_empty_ChoiceId_Strategy(((tom_is_fun_sym_ChoiceId(l1))?tom_get_tail_ChoiceId_Strategy(l1):tom_empty_list_ChoiceId()))) {         return tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_head_ChoiceId_Strategy(l1):l1),l2);       } else {         return tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_head_ChoiceId_Strategy(l1):l1),tom_append_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_tail_ChoiceId_Strategy(l1):tom_empty_list_ChoiceId()),l2));       }     } else {       return tom_cons_list_ChoiceId(l1,l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(begin.equals(end)) {       return tail;     } else {       return tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(begin))?tom_get_head_ChoiceId_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((tom_is_fun_sym_ChoiceId(begin))?tom_get_tail_ChoiceId_Strategy(begin):tom_empty_list_ChoiceId()),end,tail));     }   }   private static  tom.library.sl.Strategy  tom_make_OneId( tom.library.sl.Strategy  v) { return  new tom.library.sl.OneId(v) ; } /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }private static  tom.library.sl.Strategy  tom_make_OnceTopDownId( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_ChoiceId(v,tom_cons_list_ChoiceId(tom_make_OneId(tom_make_MuVar("_x")),tom_empty_list_ChoiceId()))) ; }   
	
//--------------------------------------------------------

  // contains variables that were already replaced (for optimizing reasons)
  private static ArrayList replacedVariables = null; 

  public Constraint propagate(Constraint constraint) throws VisitFailure {
    replacedVariables = new ArrayList();
    return  (Constraint)tom_make_TopDown(tom_make_GeneralPropagations()).visitLight(constraint);
  }	

  private static class GeneralPropagations extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public GeneralPropagations() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch219NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch219NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch219NameNumberfreshSubject_1);if (tom_is_fun_sym_AntiTerm(tomMatch219NameNumber_freshVar_0)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_2=tom_get_slot_AntiTerm_TomTerm(tomMatch219NameNumber_freshVar_0);{ boolean tomMatch219NameNumber_freshVar_3= false ;if (tom_is_fun_sym_Variable(tomMatch219NameNumber_freshVar_2)) {tomMatch219NameNumber_freshVar_3= true ;} else {if (tom_is_fun_sym_RecordAppl(tomMatch219NameNumber_freshVar_2)) {tomMatch219NameNumber_freshVar_3= true ;}}if ((tomMatch219NameNumber_freshVar_3 ==  true )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_term=tomMatch219NameNumber_freshVar_2;{  tom.engine.adt.tomterm.types.TomTerm  tom_s=tomMatch219NameNumber_freshVar_1;if ( true ) {







        
        return tom_cons_list_AndConstraint(tom_make_AntiMatchConstraint(tom_make_MatchConstraint(tom_term,tom_s)),tom_cons_list_AndConstraint(ConstraintPropagator.performDetach(tom_make_MatchConstraint(tom_term,tom_s)),tom_empty_list_AndConstraint()))
;
      }}}}}}}}}}if (tom_is_fun_sym_AndConstraint(tomMatch219NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch219NameNumber_freshVar_4=tomMatch219NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch219NameNumber_begin_6=tomMatch219NameNumber_freshVar_4;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch219NameNumber_end_7=tomMatch219NameNumber_freshVar_4;do {{{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch219NameNumber_freshVar_5=tomMatch219NameNumber_end_7;if (!( ( tom_is_empty_AndConstraint_Constraint(tomMatch219NameNumber_freshVar_5) || tom_equal_term_Constraint(tomMatch219NameNumber_freshVar_5, tom_empty_list_AndConstraint()) ) )) {if (tom_is_fun_sym_MatchConstraint(((tom_is_fun_sym_AndConstraint(tomMatch219NameNumber_freshVar_5))?(tom_get_head_AndConstraint_Constraint(tomMatch219NameNumber_freshVar_5)):(tomMatch219NameNumber_freshVar_5)))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_12=tom_get_slot_MatchConstraint_pattern(((tom_is_fun_sym_AndConstraint(tomMatch219NameNumber_freshVar_5))?(tom_get_head_AndConstraint_Constraint(tomMatch219NameNumber_freshVar_5)):(tomMatch219NameNumber_freshVar_5)));{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_13=tom_get_slot_MatchConstraint_subject(((tom_is_fun_sym_AndConstraint(tomMatch219NameNumber_freshVar_5))?(tom_get_head_AndConstraint_Constraint(tomMatch219NameNumber_freshVar_5)):(tomMatch219NameNumber_freshVar_5)));if (tom_is_fun_sym_VariableStar(tomMatch219NameNumber_freshVar_12)) {{  tom.engine.adt.tomname.types.TomName  tomMatch219NameNumber_freshVar_14=tom_get_slot_VariableStar_AstName(tomMatch219NameNumber_freshVar_12);{  tom.engine.adt.tomtype.types.TomType  tomMatch219NameNumber_freshVar_15=tom_get_slot_VariableStar_AstType(tomMatch219NameNumber_freshVar_12);{  tom.engine.adt.tomname.types.TomName  tom_x=tomMatch219NameNumber_freshVar_14;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch219NameNumber_freshVar_8=((tom_is_fun_sym_AndConstraint(tomMatch219NameNumber_freshVar_5))?(tom_get_tail_AndConstraint_Constraint(tomMatch219NameNumber_freshVar_5)):(tom_empty_list_AndConstraint()));{ boolean tomMatch219NameNumber_freshVar_22= false ;if (tom_is_fun_sym_PositionName(tomMatch219NameNumber_freshVar_14)) {if (tom_equal_term_TomName(tomMatch219NameNumber_freshVar_14, tomMatch219NameNumber_freshVar_14)) {tomMatch219NameNumber_freshVar_22= true ;}}if ((tomMatch219NameNumber_freshVar_22 ==  false )) {if ( true ) {






        if (!replacedVariables.contains(tom_x)){
          replacedVariables.add(tom_x);
          Constraint toApplyOn = tom_append_list_AndConstraint(tomMatch219NameNumber_freshVar_8,tom_empty_list_AndConstraint());        
          TomTerm freshVar = ConstraintCompiler.getFreshVariableStar(tomMatch219NameNumber_freshVar_15);
          Constraint res = (Constraint)tom_make_OnceTopDownId(tom_make_ReplaceMatchConstraint(tom_x,freshVar)).visitLight(toApplyOn);
          if(res != toApplyOn) {
            return tom_append_list_AndConstraint(tom_get_slice_AndConstraint(tomMatch219NameNumber_begin_6,tomMatch219NameNumber_end_7,tom_empty_list_AndConstraint()),tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(tomMatch219NameNumber_freshVar_5))?(tom_get_head_AndConstraint_Constraint(tomMatch219NameNumber_freshVar_5)):(tomMatch219NameNumber_freshVar_5)),tom_cons_list_AndConstraint(res,tom_empty_list_AndConstraint())));
          }
        }
      }}}}}}}}}}}}}if ( ( tom_is_empty_AndConstraint_Constraint(tomMatch219NameNumber_end_7) || tom_equal_term_Constraint(tomMatch219NameNumber_end_7, tom_empty_list_AndConstraint()) ) ) {tomMatch219NameNumber_end_7=tomMatch219NameNumber_begin_6;} else {tomMatch219NameNumber_end_7=((tom_is_fun_sym_AndConstraint(tomMatch219NameNumber_end_7))?(tom_get_tail_AndConstraint_Constraint(tomMatch219NameNumber_end_7)):(tom_empty_list_AndConstraint()));}}} while(!(tom_equal_term_Constraint(tomMatch219NameNumber_end_7, tomMatch219NameNumber_begin_6)));}}}}if (tom_is_fun_sym_MatchConstraint(tomMatch219NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_23=tom_get_slot_MatchConstraint_pattern(tomMatch219NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_24=tom_get_slot_MatchConstraint_subject(tomMatch219NameNumberfreshSubject_1);{ boolean tomMatch219NameNumber_freshVar_28= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch219NameNumber_freshVar_25= null ;if (tom_is_fun_sym_Variable(tomMatch219NameNumber_freshVar_23)) {{tomMatch219NameNumber_freshVar_28= true ;tomMatch219NameNumber_freshVar_25=tom_get_slot_Variable_Constraints(tomMatch219NameNumber_freshVar_23);}} else {if (tom_is_fun_sym_VariableStar(tomMatch219NameNumber_freshVar_23)) {{tomMatch219NameNumber_freshVar_28= true ;tomMatch219NameNumber_freshVar_25=tom_get_slot_VariableStar_Constraints(tomMatch219NameNumber_freshVar_23);}} else {if (tom_is_fun_sym_UnamedVariableStar(tomMatch219NameNumber_freshVar_23)) {{tomMatch219NameNumber_freshVar_28= true ;tomMatch219NameNumber_freshVar_25=tom_get_slot_UnamedVariableStar_Constraints(tomMatch219NameNumber_freshVar_23);}} else {if (tom_is_fun_sym_UnamedVariable(tomMatch219NameNumber_freshVar_23)) {{tomMatch219NameNumber_freshVar_28= true ;tomMatch219NameNumber_freshVar_25=tom_get_slot_UnamedVariable_Constraints(tomMatch219NameNumber_freshVar_23);}}}}}if ((tomMatch219NameNumber_freshVar_28 ==  true )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_term=tomMatch219NameNumber_freshVar_23;{ boolean tomMatch219NameNumber_freshVar_27= false ;if (tom_is_fun_sym_concConstraint(tomMatch219NameNumber_freshVar_25)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch219NameNumber_freshVar_26=tomMatch219NameNumber_freshVar_25;if (tom_is_empty_concConstraint_ConstraintList(tomMatch219NameNumber_freshVar_26)) {tomMatch219NameNumber_freshVar_27= true ;}}}if ((tomMatch219NameNumber_freshVar_27 ==  false )) {if ( true ) {







        Constraint result = ConstraintPropagator.performDetach(tomMatch219NameNumberfreshSubject_1);
        if (tom_term.isVariable()) {
          result = tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_term.setConstraints(tom_empty_list_concConstraint()),tomMatch219NameNumber_freshVar_24),tom_cons_list_AndConstraint(result,tom_empty_list_AndConstraint()));
        }
        return result;
      }}}}}}}}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_GeneralPropagations() { return new GeneralPropagations(); }


// end %strategy
  
  /**
   * Detach sublists
   * 
   * Make sure that the sublists in a list are replaced by star variables - this is only happening 
   * when the lists and the sublists have the same name
   * 
   * conc(X*,conc(some_pattern),Y*) << t -> conc(X*,Z*,Y*) << t /\ conc(some_pattern) << Z*  
   * 
   */ 
  public static Constraint detachSublists(Constraint constraint) {
    // will hold the new slots of t
    SlotList newSlots = tom_empty_list_concSlot();
    Constraint constraintList = tom_empty_list_AndConstraint();
    if (tom_is_sort_Constraint(constraint)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch220NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )constraint);if (tom_is_fun_sym_MatchConstraint(tomMatch220NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch220NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch220NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch220NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch220NameNumberfreshSubject_1);if (tom_is_fun_sym_RecordAppl(tomMatch220NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch220NameNumber_freshVar_2=tom_get_slot_RecordAppl_NameList(tomMatch220NameNumber_freshVar_0);{  tom.engine.adt.tomslot.types.SlotList  tomMatch220NameNumber_freshVar_3=tom_get_slot_RecordAppl_Slots(tomMatch220NameNumber_freshVar_0);if (tom_is_fun_sym_concTomName(tomMatch220NameNumber_freshVar_2)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch220NameNumber_freshVar_4=tomMatch220NameNumber_freshVar_2;if (!(tom_is_empty_concTomName_TomNameList(tomMatch220NameNumber_freshVar_4))) {if (tom_is_fun_sym_Name(tom_get_head_concTomName_TomNameList(tomMatch220NameNumber_freshVar_4))) {{  tom.engine.adt.tomname.types.TomName  tom_name=tom_get_head_concTomName_TomNameList(tomMatch220NameNumber_freshVar_4);{  tom.engine.adt.tomname.types.TomNameList  tomMatch220NameNumber_freshVar_5=tom_get_tail_concTomName_TomNameList(tomMatch220NameNumber_freshVar_4);if (tom_is_empty_concTomName_TomNameList(tomMatch220NameNumber_freshVar_5)) {{  tom.engine.adt.tomslot.types.SlotList  tom_slots=tomMatch220NameNumber_freshVar_3;{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch220NameNumber_freshVar_0;{ boolean tomMatch220NameNumber_freshVar_7= false ;if (tom_is_fun_sym_concSlot(tomMatch220NameNumber_freshVar_3)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch220NameNumber_freshVar_6=tomMatch220NameNumber_freshVar_3;if (tom_equal_term_SlotList(tomMatch220NameNumber_freshVar_3, tomMatch220NameNumber_freshVar_3)) {if (tom_is_empty_concSlot_SlotList(tomMatch220NameNumber_freshVar_6)) {tomMatch220NameNumber_freshVar_7= true ;}}}}if ((tomMatch220NameNumber_freshVar_7 ==  false )) {if ( true ) {if (tom_is_sort_SlotList(tom_slots)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch221NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.SlotList )tom_slots);if (tom_is_fun_sym_concSlot(tomMatch221NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch221NameNumber_freshVar_0=tomMatch221NameNumberfreshSubject_1;{  tom.engine.adt.tomslot.types.SlotList  tomMatch221NameNumber_begin_2=tomMatch221NameNumber_freshVar_0;{  tom.engine.adt.tomslot.types.SlotList  tomMatch221NameNumber_end_3=tomMatch221NameNumber_freshVar_0;do {{{  tom.engine.adt.tomslot.types.SlotList  tomMatch221NameNumber_freshVar_1=tomMatch221NameNumber_end_3;if (!(tom_is_empty_concSlot_SlotList(tomMatch221NameNumber_freshVar_1))) {{  tom.engine.adt.tomslot.types.Slot  tom_slot=tom_get_head_concSlot_SlotList(tomMatch221NameNumber_freshVar_1);{  tom.engine.adt.tomslot.types.SlotList  tomMatch221NameNumber_freshVar_4=tom_get_tail_concSlot_SlotList(tomMatch221NameNumber_freshVar_1);if ( true ) {



matchSlot:  if (tom_is_sort_Slot(tom_slot)) {{  tom.engine.adt.tomslot.types.Slot  tomMatch222NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.Slot )tom_slot);if (tom_is_sort_TomName(tom_name)) {{  tom.engine.adt.tomname.types.TomName  tomMatch222NameNumberfreshSubject_2=(( tom.engine.adt.tomname.types.TomName )tom_name);if (tom_is_fun_sym_PairSlotAppl(tomMatch222NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch222NameNumber_freshVar_0=tom_get_slot_PairSlotAppl_Appl(tomMatch222NameNumberfreshSubject_1);if (tom_is_fun_sym_RecordAppl(tomMatch222NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch222NameNumber_freshVar_1=tom_get_slot_RecordAppl_NameList(tomMatch222NameNumber_freshVar_0);if (tom_is_fun_sym_concTomName(tomMatch222NameNumber_freshVar_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch222NameNumber_freshVar_2=tomMatch222NameNumber_freshVar_1;if (!(tom_is_empty_concTomName_TomNameList(tomMatch222NameNumber_freshVar_2))) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch222NameNumber_freshVar_3=tom_get_tail_concTomName_TomNameList(tomMatch222NameNumber_freshVar_2);if (tom_is_empty_concTomName_TomNameList(tomMatch222NameNumber_freshVar_3)) {if (tom_equal_term_TomName(tom_get_head_concTomName_TomNameList(tomMatch222NameNumber_freshVar_2), tomMatch222NameNumberfreshSubject_2)) {if ( true ) {

              TomTerm freshVariable = ConstraintCompiler.getFreshVariableStar(ConstraintCompiler.getTermTypeFromTerm(tom_t));                
              constraintList = tom_cons_list_AndConstraint(tom_make_MatchConstraint(tomMatch222NameNumber_freshVar_0,freshVariable),tom_append_list_AndConstraint(constraintList,tom_empty_list_AndConstraint()));
              newSlots = tom_append_list_concSlot(newSlots,tom_cons_list_concSlot(tomMatch222NameNumberfreshSubject_1.setAppl(freshVariable),tom_empty_list_concSlot()));
              break matchSlot;
            }}}}}}}}}}}if (tom_is_fun_sym_PairSlotAppl(tomMatch222NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch222NameNumber_freshVar_4=tom_get_slot_PairSlotAppl_Appl(tomMatch222NameNumberfreshSubject_1);if (tom_is_fun_sym_AntiTerm(tomMatch222NameNumber_freshVar_4)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch222NameNumber_freshVar_5=tom_get_slot_AntiTerm_TomTerm(tomMatch222NameNumber_freshVar_4);if (tom_is_fun_sym_RecordAppl(tomMatch222NameNumber_freshVar_5)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch222NameNumber_freshVar_6=tom_get_slot_RecordAppl_NameList(tomMatch222NameNumber_freshVar_5);if (tom_is_fun_sym_concTomName(tomMatch222NameNumber_freshVar_6)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch222NameNumber_freshVar_7=tomMatch222NameNumber_freshVar_6;if (!(tom_is_empty_concTomName_TomNameList(tomMatch222NameNumber_freshVar_7))) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch222NameNumber_freshVar_8=tom_get_tail_concTomName_TomNameList(tomMatch222NameNumber_freshVar_7);if (tom_is_empty_concTomName_TomNameList(tomMatch222NameNumber_freshVar_8)) {if (tom_equal_term_TomName(tom_get_head_concTomName_TomNameList(tomMatch222NameNumber_freshVar_7), tomMatch222NameNumberfreshSubject_2)) {if ( true ) {


              TomTerm freshVariable = ConstraintCompiler.getFreshVariableStar(ConstraintCompiler.getTermTypeFromTerm(tom_t)); 
              constraintList = tom_cons_list_AndConstraint(tom_make_MatchConstraint(tomMatch222NameNumber_freshVar_4,freshVariable),tom_append_list_AndConstraint(constraintList,tom_empty_list_AndConstraint()));
              newSlots = tom_append_list_concSlot(newSlots,tom_cons_list_concSlot(tomMatch222NameNumberfreshSubject_1.setAppl(freshVariable),tom_empty_list_concSlot()));
              break matchSlot;
            }}}}}}}}}}}}}if ( true ) {


              newSlots = tom_append_list_concSlot(newSlots,tom_cons_list_concSlot(tomMatch222NameNumberfreshSubject_1,tom_empty_list_concSlot()));
            }}}}}
            
        }}}}}if (tom_is_empty_concSlot_SlotList(tomMatch221NameNumber_end_3)) {tomMatch221NameNumber_end_3=tomMatch221NameNumber_begin_2;} else {tomMatch221NameNumber_end_3=tom_get_tail_concSlot_SlotList(tomMatch221NameNumber_end_3);}}} while(!(tom_equal_term_SlotList(tomMatch221NameNumber_end_3, tomMatch221NameNumber_begin_2)));}}}}}}
  
      return tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_t.setSlots(newSlots),tomMatch220NameNumber_freshVar_1),tom_append_list_AndConstraint(constraintList,tom_empty_list_AndConstraint()));   
    }}}}}}}}}}}}}}}}}}}}

    // never gets here
    return null;
  }
  
  
  private static class ReplaceMatchConstraint extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  tom.engine.adt.tomname.types.TomName  varName; private  tom.engine.adt.tomterm.types.TomTerm  freshVar; public ReplaceMatchConstraint( tom.engine.adt.tomname.types.TomName  varName,  tom.engine.adt.tomterm.types.TomTerm  freshVar) { super(tom_make_Identity());this.varName=varName;this.freshVar=freshVar;}public  tom.engine.adt.tomname.types.TomName  getvarName() { return varName;}public  tom.engine.adt.tomterm.types.TomTerm  getfreshVar() { return freshVar;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch223NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch223NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch223NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch223NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch223NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch223NameNumberfreshSubject_1);{ boolean tomMatch223NameNumber_freshVar_3= false ;{  tom.engine.adt.tomname.types.TomName  tomMatch223NameNumber_freshVar_2= null ;if (tom_is_fun_sym_Variable(tomMatch223NameNumber_freshVar_0)) {{tomMatch223NameNumber_freshVar_3= true ;tomMatch223NameNumber_freshVar_2=tom_get_slot_Variable_AstName(tomMatch223NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_VariableStar(tomMatch223NameNumber_freshVar_0)) {{tomMatch223NameNumber_freshVar_3= true ;tomMatch223NameNumber_freshVar_2=tom_get_slot_VariableStar_AstName(tomMatch223NameNumber_freshVar_0);}}}if ((tomMatch223NameNumber_freshVar_3 ==  true )) {if ( true ) {



        
        if(tomMatch223NameNumber_freshVar_2== varName) {                                  
          return tom_cons_list_AndConstraint(tom_make_MatchConstraint(freshVar,tomMatch223NameNumber_freshVar_1),tom_cons_list_AndConstraint(tom_make_MatchConstraint(tom_make_TestVar(freshVar),tomMatch223NameNumber_freshVar_0),tom_empty_list_AndConstraint()));
        }                                 
      }}}}}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ReplaceMatchConstraint( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return new ReplaceMatchConstraint(t0,t1); }



}
