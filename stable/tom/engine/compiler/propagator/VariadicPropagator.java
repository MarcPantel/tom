/* Generated by TOM (version 2.6): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2008, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler.propagator;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.library.sl.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.compiler.*;
import tom.engine.tools.*;
import tom.engine.TomBase;
import tom.engine.exception.TomRuntimeException;
import java.util.*;
import tom.engine.compiler.Compiler;

/**
 * Syntactic propagator
 */
public class VariadicPropagator implements IBasePropagator {

//--------------------------------------------------------	
  /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */  /* Generated by TOM (version 2.6): Do not edit this file */    public static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   public static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcSlot()  ||  (end== tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;   }      public static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2)) ;     }   }   public static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomName()  ||  (end== tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail)) ;   }      public static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   public static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;   }    /* Generated by TOM (version 2.6): Do not edit this file *//* Generated by TOM (version 2.6): Do not edit this file */   public static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Sequence) )) {       if(( ((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )) == null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Sequence(l1,l2) );     }   }   public static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(( null ))) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin):new tom.library.sl.Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)) );   }    /* Generated by TOM (version 2.6): Do not edit this file */ /* Generated by TOM (version 2.6): Do not edit this file */   /* Generated by TOM (version 2.6): Do not edit this file */public static  tom.library.sl.Strategy  tom_make_TopDownWhenConstraint( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),tom_make_WhenConstraint(( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) ))) ) );}public static class WhenConstraint extends tom.library.sl.BasicStrategy {private  tom.library.sl.Strategy  s;public WhenConstraint( tom.library.sl.Strategy  s) {super(( new tom.library.sl.Identity() ));this.s=s;}public  tom.library.sl.Strategy  gets() {return s;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);stratChilds[1] = gets();return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);s = ( tom.library.sl.Strategy ) children[1];return this;}public int getChildCount() {return 2;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);case 1: return gets();default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);case 1: s = ( tom.library.sl.Strategy )child; return this;default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) { return s.visitLight((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg)); }}}return _visit_Constraint(tom__arg,introspector); }public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}public static  tom.library.sl.Strategy  tom_make_WhenConstraint( tom.library.sl.Strategy  t0) { return new WhenConstraint(t0);} 

	
//--------------------------------------------------------

  









  private Compiler compiler;  
  private GeneralPurposePropagator generalPurposePropagator; 
  private ConstraintPropagator constraintPropagator; 
 
  public VariadicPropagator(Compiler myCompiler, ConstraintPropagator myConstraintPropagator) {
    this.compiler = myCompiler;
    this.constraintPropagator = myConstraintPropagator;
    this.generalPurposePropagator = new GeneralPurposePropagator(this.compiler, this.constraintPropagator);
  }

  public Compiler getCompiler() {
    return this.compiler;
  }
 
  public GeneralPurposePropagator getGeneralPurposePropagator() {
    return this.generalPurposePropagator;
  }
 
  public ConstraintPropagator getConstraintPropagator() {
    return this.constraintPropagator;
  }
 
  public Constraint propagate(Constraint constraint) throws VisitFailure {
    Constraint res =  (Constraint)tom_make_TopDownWhenConstraint(tom_make_VariadicPatternMatching(this)).visitLight(constraint);		
    return res;
  }	

  public static class VariadicPatternMatching extends tom.library.sl.BasicStrategy {private  VariadicPropagator  vp;public VariadicPatternMatching( VariadicPropagator  vp) {super(( new tom.library.sl.Identity() ));this.vp=vp;}public  VariadicPropagator  getvp() {return vp;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{{if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch181NameNumber_freshVar_1= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ;if ( (tomMatch181NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomname.types.TomNameList  tomMatch181NameNumber_freshVar_4= tomMatch181NameNumber_freshVar_1.getNameList() ; tom.engine.adt.tomslot.types.SlotList  tomMatch181NameNumber_freshVar_5= tomMatch181NameNumber_freshVar_1.getSlots() ;if ( ((tomMatch181NameNumber_freshVar_4 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch181NameNumber_freshVar_4 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch181NameNumber_freshVar_4.isEmptyconcTomName() )) { tom.engine.adt.tomname.types.TomName  tomMatch181NameNumber_freshVar_10= tomMatch181NameNumber_freshVar_4.getHeadconcTomName() ;if ( (tomMatch181NameNumber_freshVar_10 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {if (  tomMatch181NameNumber_freshVar_4.getTailconcTomName() .isEmptyconcTomName() ) {boolean tomMatch181NameNumber_freshVar_12= false ;if ( ((tomMatch181NameNumber_freshVar_5 instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || (tomMatch181NameNumber_freshVar_5 instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) {if ( tomMatch181NameNumber_freshVar_5.isEmptyconcSlot() ) {tomMatch181NameNumber_freshVar_12= true ;}}if ((tomMatch181NameNumber_freshVar_12 ==  false )) {











        // if this is not a list, nothing to do
        TomSymbol symb = vp.getCompiler().getSymbolTable().getSymbolFromName( tomMatch181NameNumber_freshVar_10.getString() );
        if(!TomBase.isListOperator(symb)) {
          return (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); 
        }
        Constraint detachedConstr = vp.getGeneralPurposePropagator().detachSublists((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg));
        if(detachedConstr != (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg)) {
          return detachedConstr; 
        }
      }}}}}}}}}{if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {if ( ((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg) instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch181NameNumber_freshVar_14= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getPattern() ; tom.engine.adt.tomterm.types.TomTerm  tomMatch181NameNumber_freshVar_15= (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg).getSubject() ;if ( (tomMatch181NameNumber_freshVar_14 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) { tom.engine.adt.tomname.types.TomNameList  tomMatch181NameNumber_freshVar_18= tomMatch181NameNumber_freshVar_14.getNameList() ; tom.engine.adt.tomslot.types.SlotList  tomMatch181NameNumber_freshVar_19= tomMatch181NameNumber_freshVar_14.getSlots() ;if ( ((tomMatch181NameNumber_freshVar_18 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch181NameNumber_freshVar_18 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch181NameNumber_freshVar_18.isEmptyconcTomName() )) { tom.engine.adt.tomname.types.TomName  tomMatch181NameNumber_freshVar_26= tomMatch181NameNumber_freshVar_18.getHeadconcTomName() ;if ( (tomMatch181NameNumber_freshVar_26 instanceof tom.engine.adt.tomname.types.tomname.Name) ) { tom.engine.adt.tomname.types.TomName  tom_name= tomMatch181NameNumber_freshVar_18.getHeadconcTomName() ;boolean tomMatch181NameNumber_freshVar_29= false ;if ( (tomMatch181NameNumber_freshVar_15 instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf) ) {if ( (tomMatch181NameNumber_freshVar_15==tomMatch181NameNumber_freshVar_15) ) {tomMatch181NameNumber_freshVar_29= true ;}}if ((tomMatch181NameNumber_freshVar_29 ==  false )) {

















        // if this is not a list, nothing to do
        TomSymbol symb = vp.getCompiler().getSymbolTable().getSymbolFromName( tomMatch181NameNumber_freshVar_26.getString() );
        if(!TomBase.isListOperator(symb)) {
          return (( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);
        }        
        // declare fresh variable
        TomType listType = vp.getCompiler().getTermTypeFromTerm(tomMatch181NameNumber_freshVar_14);
        TomTerm freshVariable = vp.getCompiler().getFreshVariableStar(listType);				
        Constraint freshVarDeclaration =  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(freshVariable, tomMatch181NameNumber_freshVar_15) ;
        Constraint isSymbolConstr =  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make( tom.engine.adt.tomterm.types.tomterm.RecordAppl.make( tomMatch181NameNumber_freshVar_14.getOption() , tomMatch181NameNumber_freshVar_18,  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ,  tom.engine.adt.tomterm.types.tomterm.SymbolOf.make(freshVariable) ) ;
        List<Constraint> l = new ArrayList<Constraint>();
        {{if ( (tomMatch181NameNumber_freshVar_19 instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) {if ( (( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19).isEmptyconcSlot() ) {

            l.add( tom.engine.adt.tomconstraint.types.constraint.EmptyListConstraint.make(tom_name, freshVariable) );
          }}}}{if ( (tomMatch181NameNumber_freshVar_19 instanceof tom.engine.adt.tomslot.types.SlotList) ) {if ( (((( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19) instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot) || ((( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19) instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot)) ) { tom.engine.adt.tomslot.types.SlotList  tomMatch182NameNumber_end_6=(( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19);do {{if (!( tomMatch182NameNumber_end_6.isEmptyconcSlot() )) { tom.engine.adt.tomslot.types.Slot  tomMatch182NameNumber_freshVar_10= tomMatch182NameNumber_end_6.getHeadconcSlot() ;if ( (tomMatch182NameNumber_freshVar_10 instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) { tom.engine.adt.tomterm.types.TomTerm  tomMatch182NameNumber_freshVar_9= tomMatch182NameNumber_freshVar_10.getAppl() ; tom.engine.adt.tomslot.types.SlotList  tomMatch182NameNumber_freshVar_7= tomMatch182NameNumber_end_6.getTailconcSlot() ;

            TomTerm newFreshVarList = vp.getCompiler().getFreshVariableStar(listType);            
mAppl:      {{if ( (tomMatch182NameNumber_freshVar_9 instanceof tom.engine.adt.tomterm.types.TomTerm) ) {boolean tomMatch183NameNumber_freshVar_2= false ;if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch182NameNumber_freshVar_9) instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {tomMatch183NameNumber_freshVar_2= true ;} else {if ( ((( tom.engine.adt.tomterm.types.TomTerm )tomMatch182NameNumber_freshVar_9) instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ) {tomMatch183NameNumber_freshVar_2= true ;}}if ((tomMatch183NameNumber_freshVar_2 ==  true )) {

                
                // if it is the last element               
                if(tomMatch182NameNumber_freshVar_7.length() == 0) {
                  // we should only assign it, without generating a loop
                  l.add( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tomMatch182NameNumber_freshVar_9, freshVariable) );
                } else {
                  TomTerm beginSublist = vp.getCompiler().getBeginVariableStar(listType);
                  TomTerm endSublist = vp.getCompiler().getEndVariableStar(listType);              
                  l.add( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(beginSublist, freshVariable) );
                  l.add( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(endSublist, freshVariable) );
                  l.add( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tomMatch182NameNumber_freshVar_9,  tom.engine.adt.tomterm.types.tomterm.VariableHeadList.make(tom_name, beginSublist, endSublist) ) );
                  l.add( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(newFreshVarList, endSublist) );
                }
                break mAppl;
              }}}{if ( (tomMatch182NameNumber_freshVar_9 instanceof tom.engine.adt.tomterm.types.TomTerm) ) {

                l.add( tom.engine.adt.tomconstraint.types.constraint.Negate.make( tom.engine.adt.tomconstraint.types.constraint.EmptyListConstraint.make(tom_name, freshVariable) ) );
                l.add( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tomMatch182NameNumber_freshVar_9,  tom.engine.adt.tomterm.types.tomterm.ListHead.make(tom_name, vp.getCompiler().getTermTypeFromTerm(tomMatch182NameNumber_freshVar_9), freshVariable) ) );
                l.add( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(newFreshVarList,  tom.engine.adt.tomterm.types.tomterm.ListTail.make(tom_name, freshVariable) ) );
                // for the last element, we should also check that the list ends
                if(tomMatch182NameNumber_freshVar_7.length() == 0) {                  
                  l.add( tom.engine.adt.tomconstraint.types.constraint.EmptyListConstraint.make(tom_name, newFreshVarList) );
                }
              }}}
// end match
            freshVariable = newFreshVarList;
          }}if ( tomMatch182NameNumber_end_6.isEmptyconcSlot() ) {tomMatch182NameNumber_end_6=(( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19);} else {tomMatch182NameNumber_end_6= tomMatch182NameNumber_end_6.getTailconcSlot() ;}}} while(!( (tomMatch182NameNumber_end_6==(( tom.engine.adt.tomslot.types.SlotList )tomMatch181NameNumber_freshVar_19)) ));}}}}
// end match
        // fresh var declaration + add head equality condition + detached constraints
        l.add(0,vp.getConstraintPropagator().performDetach((( tom.engine.adt.tomconstraint.types.Constraint )tom__arg)));
        l.add(0,isSymbolConstr);
        l.add(0,freshVarDeclaration);
        return ASTFactory.makeAndConstraint(l);
        //return `AndConstraint(freshVarDeclaration, isSymbolConstr, vp.getConstraintPropagator().performDetach(m),l*);
      }}}}}}}}}return _visit_Constraint(tom__arg,introspector); }public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return any.visitLight(arg,introspector);} }public <T> T visitLight(T v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return ((T)visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector));}if (!((environment ==  null ))) {return ((T)any.visit(environment,introspector));} else {return any.visitLight(v,introspector);} }}public static  tom.library.sl.Strategy  tom_make_VariadicPatternMatching( VariadicPropagator  t0) { return new VariadicPatternMatching(t0);}

// end %strategy

}
