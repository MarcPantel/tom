/* Generated by TOM: Do not edit this file */ /*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom.compiler;
  
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.HashSet;

import jtom.TomBase;
import jtom.adt.tomsignature.types.*;
import jtom.runtime.Replace1;
import jtom.runtime.Replace2;
import aterm.*;
import jtom.exception.TomRuntimeException;

public class TomKernelExpander extends TomBase {

  public TomKernelExpander() {
    super();
  }

  // ------------------------------------------------------------
  /* Generated by TOM: Do not edit this file *//* Generated by TOM: Do not edit this file */ /*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM: Do not edit this file */ /*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/       /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM: Do not edit this file */ /*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/    /* Generated by TOM: Do not edit this file */ /*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/        
  // ------------------------------------------------------------
  
  /*
   * The "expandVariable" phase expands Appl into Variable
   * we focus on
   * - RewriteRule
   * - MatchingCondition
   * - EqualityCondition
   * - Match
   *
   * Variable and Appl are are expanded in the TomTerm case
   */

  protected Replace2 replace_expandVariable = new Replace2() { 
      public ATerm apply(ATerm subject, Object arg1) {
        TomTerm contextSubject = (TomTerm)arg1;

        if(contextSubject == null) {
          throw new TomRuntimeException(new Throwable("expandVariable: null contextSubject"));
        }

          //System.out.println("expandVariable:\n\t" + subject );
        if(subject instanceof Option) {
           { Option tom_match1_1=(( Option)subject);{ if(tom_is_fun_sym_OriginTracking(tom_match1_1) ||  false ) { 
 return subject;  }}} 

        } else if(subject instanceof TargetLanguage) {
           { TargetLanguage tom_match2_1=(( TargetLanguage)subject);{ if(tom_is_fun_sym_TL(tom_match2_1) ||  false ) { 
 return subject;  } if(tom_is_fun_sym_ITL(tom_match2_1) ||  false ) { 
 return subject;  } if(tom_is_fun_sym_Comment(tom_match2_1) ||  false ) { 
 return subject;  }}} 

        } else if(subject instanceof TomType) {
           { TomType tom_match3_1=(( TomType)subject);{ if(tom_is_fun_sym_TomTypeAlone(tom_match3_1) ||  false ) { { String  tom_match3_1_1=tom_get_slot_TomTypeAlone_string(tom_match3_1); { String  tomType=tom_match3_1_1; 

              TomType type = getType(tomType );
              if(type != null) {
                return type;
              } else {
                return subject; // useful for TomTypeAlone("unknown type")
              }
            }} }}} 

        } else if(subject instanceof TomRule) {
           { TomTerm tom_match4_1=(( TomTerm)contextSubject);{ { TomRule tom_match4_2=(( TomRule)subject);{ { TomTerm context=tom_match4_1; if(tom_is_fun_sym_RewriteRule(tom_match4_2) ||  false ) { { TomTerm tom_match4_2_1=tom_get_slot_RewriteRule_lhs(tom_match4_2); { TomTerm tom_match4_2_2=tom_get_slot_RewriteRule_rhs(tom_match4_2); { InstructionList tom_match4_2_3=tom_get_slot_RewriteRule_condList(tom_match4_2); { OptionList tom_match4_2_4=tom_get_slot_RewriteRule_option(tom_match4_2); if(tom_is_fun_sym_Term(tom_match4_2_1) ||  false ) { { TomTerm tom_match4_2_1_1=tom_get_slot_Term_tomTerm(tom_match4_2_1); if(tom_is_fun_sym_Appl(tom_match4_2_1_1) ||  false ) { { TomTerm lhs=tom_match4_2_1_1; { OptionList tom_match4_2_1_1_1=tom_get_slot_Appl_option(tom_match4_2_1_1); { NameList tom_match4_2_1_1_2=tom_get_slot_Appl_nameList(tom_match4_2_1_1); { OptionList optionList=tom_match4_2_1_1_1; if(tom_is_fun_sym_concTomName(tom_match4_2_1_1_2) ||  false ) { { NameList tom_match4_2_1_1_2_list1=tom_match4_2_1_1_2; if(!(tom_is_empty_NameList(tom_match4_2_1_1_2_list1))) { { TomName tom_match4_2_1_1_2_1=tom_get_head_NameList(tom_match4_2_1_1_2_list1);tom_match4_2_1_1_2_list1=tom_get_tail_NameList(tom_match4_2_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match4_2_1_1_2_1) ||  false ) { { String  tom_match4_2_1_1_2_1_1=tom_get_slot_Name_string(tom_match4_2_1_1_2_1); { String  tomName=tom_match4_2_1_1_2_1_1; if(tom_is_empty_NameList(tom_match4_2_1_1_2_list1)) { if(tom_is_fun_sym_Term(tom_match4_2_2) ||  false ) { { TomTerm tom_match4_2_2_1=tom_get_slot_Term_tomTerm(tom_match4_2_2); { TomTerm rhs=tom_match4_2_2_1; { InstructionList condList=tom_match4_2_3; { OptionList option=tom_match4_2_4; 



 
               // System.out.println("expandVariable.13: Rule(" + lhs + "," + rhs + ")");
               TomSymbol tomSymbol = getSymbol(tomName );
               TomType symbolType = getSymbolCodomain(tomSymbol);
               TomTerm newLhs = tom_make_Term(expandVariable(context,lhs)) ;
               TomTerm newRhs = tom_make_Term(expandVariable(tom_make_TomTypeToTomTerm(symbolType),rhs)) ;

               //System.out.println("newLhs = \n" + newLhs);
               //System.out.println("newRhs = \n" + newRhs);

               // build the list of variables that occur in the lhs
               HashSet set = new HashSet();
               collectVariable(set,newLhs);
               TomList varList = ast().makeList(set);
               InstructionList newCondList = tom_make_emptyInstructionList() ;
               while(!condList .isEmpty()) {
                 Instruction cond = condList .getHead();
                 Instruction newCond = expandVariableInstruction(tom_make_Tom(varList) ,cond);
                 newCondList = tom_make_manyInstructionList(newCond,newCondList) ;
                 collectVariable(set,newCond); 
                 varList = ast().makeList(set);
                 condList  = condList .getTail();
               }
              
               return tom_make_RewriteRule(newLhs,newRhs,newCondList,option) ;
             }}}} } }}} }} }} }}}}} }} }}}}} }}}}}} 
 // end match
        } else if(subject instanceof Instruction) {
           { TomTerm tom_match5_1=(( TomTerm)contextSubject);{ { Instruction tom_match5_2=(( Instruction)subject);{ if(tom_is_fun_sym_Tom(tom_match5_1) ||  false ) { { TomList tom_match5_1_1=tom_get_slot_Tom_tomList(tom_match5_1); { TomList varList=tom_match5_1_1; if(tom_is_fun_sym_MatchingCondition(tom_match5_2) ||  false ) { { TomTerm tom_match5_2_1=tom_get_slot_MatchingCondition_lhs(tom_match5_2); { TomTerm tom_match5_2_2=tom_get_slot_MatchingCondition_rhs(tom_match5_2); if(tom_is_fun_sym_Appl(tom_match5_2_1) ||  false ) { { TomTerm lhs=tom_match5_2_1; { NameList tom_match5_2_1_2=tom_get_slot_Appl_nameList(tom_match5_2_1); if(tom_is_fun_sym_concTomName(tom_match5_2_1_2) ||  false ) { { NameList tom_match5_2_1_2_list1=tom_match5_2_1_2; if(!(tom_is_empty_NameList(tom_match5_2_1_2_list1))) { { TomName tom_match5_2_1_2_1=tom_get_head_NameList(tom_match5_2_1_2_list1);tom_match5_2_1_2_list1=tom_get_tail_NameList(tom_match5_2_1_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_1_2_1) ||  false ) { { String  tom_match5_2_1_2_1_1=tom_get_slot_Name_string(tom_match5_2_1_2_1); { String  lhsName=tom_match5_2_1_2_1_1; if(tom_is_fun_sym_Appl(tom_match5_2_2) ||  false ) { { TomTerm rhs=tom_match5_2_2; { NameList tom_match5_2_2_2=tom_get_slot_Appl_nameList(tom_match5_2_2); if(tom_is_fun_sym_concTomName(tom_match5_2_2_2) ||  false ) { { NameList tom_match5_2_2_2_list1=tom_match5_2_2_2; if(!(tom_is_empty_NameList(tom_match5_2_2_2_list1))) { { TomName tom_match5_2_2_2_1=tom_get_head_NameList(tom_match5_2_2_2_list1);tom_match5_2_2_2_list1=tom_get_tail_NameList(tom_match5_2_2_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_2_2_1) ||  false ) { { String  tom_match5_2_2_2_1_1=tom_get_slot_Name_string(tom_match5_2_2_2_1); { String  rhsName=tom_match5_2_2_2_1_1; if(tom_is_empty_NameList(tom_match5_2_2_2_list1)) { 


               TomSymbol lhsSymbol = getSymbol(lhsName );
               TomSymbol rhsSymbol = getSymbol(rhsName );
               TomType type;
              
               if(lhsSymbol != null) {
                 type = getSymbolCodomain(lhsSymbol);
               } else if(rhsSymbol != null) {
                 type = getSymbolCodomain(rhsSymbol);
               } else {
                 // both lhs and rhs are variables
                 // since lhs is a fresh variable, we look for rhs
                 type = getTypeFromVariableList(tom_make_Name(rhsName) ,varList );
               }
              
               TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs) ;
               TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs) ;
               return tom_make_MatchingCondition(newLhs,newRhs) ;
              }}} }} }} }}} }}} }} }} }}} }}} }}} } if(tom_is_fun_sym_Tom(tom_match5_1) ||  false ) { { TomList tom_match5_1_1=tom_get_slot_Tom_tomList(tom_match5_1); { TomList varList=tom_match5_1_1; if(tom_is_fun_sym_EqualityCondition(tom_match5_2) ||  false ) { { TomTerm tom_match5_2_1=tom_get_slot_EqualityCondition_lhs(tom_match5_2); { TomTerm tom_match5_2_2=tom_get_slot_EqualityCondition_rhs(tom_match5_2); if(tom_is_fun_sym_Appl(tom_match5_2_1) ||  false ) { { TomTerm lhs=tom_match5_2_1; { NameList tom_match5_2_1_2=tom_get_slot_Appl_nameList(tom_match5_2_1); if(tom_is_fun_sym_concTomName(tom_match5_2_1_2) ||  false ) { { NameList tom_match5_2_1_2_list1=tom_match5_2_1_2; if(!(tom_is_empty_NameList(tom_match5_2_1_2_list1))) { { TomName tom_match5_2_1_2_1=tom_get_head_NameList(tom_match5_2_1_2_list1);tom_match5_2_1_2_list1=tom_get_tail_NameList(tom_match5_2_1_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_1_2_1) ||  false ) { { String  tom_match5_2_1_2_1_1=tom_get_slot_Name_string(tom_match5_2_1_2_1); { String  lhsName=tom_match5_2_1_2_1_1; if(tom_is_empty_NameList(tom_match5_2_1_2_list1)) { if(tom_is_fun_sym_Appl(tom_match5_2_2) ||  false ) { { TomTerm rhs=tom_match5_2_2; { NameList tom_match5_2_2_2=tom_get_slot_Appl_nameList(tom_match5_2_2); if(tom_is_fun_sym_concTomName(tom_match5_2_2_2) ||  false ) { { NameList tom_match5_2_2_2_list1=tom_match5_2_2_2; if(!(tom_is_empty_NameList(tom_match5_2_2_2_list1))) { { TomName tom_match5_2_2_2_1=tom_get_head_NameList(tom_match5_2_2_2_list1);tom_match5_2_2_2_list1=tom_get_tail_NameList(tom_match5_2_2_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_2_2_1) ||  false ) { { String  tom_match5_2_2_2_1_1=tom_get_slot_Name_string(tom_match5_2_2_2_1); { String  rhsName=tom_match5_2_2_2_1_1; if(tom_is_empty_NameList(tom_match5_2_2_2_list1)) { 



               TomSymbol lhsSymbol = getSymbol(lhsName );
               TomSymbol rhsSymbol = getSymbol(rhsName );
               TomType type;
              
               if(lhsSymbol != null) {
                 type = getSymbolCodomain(lhsSymbol);
               } else if(rhsSymbol != null) {
                 type = getSymbolCodomain(rhsSymbol);
               } else {
                 // both lhs and rhs are variables
                 type = getTypeFromVariableList(tom_make_Name(lhsName) ,varList );
               }
              
               //System.out.println("EqualityCondition type = " + type);
              
               TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs) ;
               TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs) ;
                
               //System.out.println("lhs    = " + lhs);
               //System.out.println("newLhs = " + newLhs);
              
               return tom_make_EqualityCondition(newLhs,newRhs) ;
              }}} }} }} }}} } }}} }} }} }}} }}} }}} } { TomTerm context=tom_match5_1; if(tom_is_fun_sym_Match(tom_match5_2) ||  false ) { { TomTerm tom_match5_2_1=tom_get_slot_Match_subjectList(tom_match5_2); { TomTerm tom_match5_2_2=tom_get_slot_Match_astPatternList(tom_match5_2); { OptionList tom_match5_2_3=tom_get_slot_Match_option(tom_match5_2); { TomTerm tomSubjectList=tom_match5_2_1; { TomTerm patternList=tom_match5_2_2; { OptionList option=tom_match5_2_3; 


               //System.out.println("tomSubjectList = " + tomSubjectList);
               TomTerm newSubjectList = expandVariable(context ,tomSubjectList );
               //System.out.println("newSubjectList = " + newSubjectList);
               TomTerm newPatternList = expandVariable(newSubjectList,patternList );
               return tom_make_Match(newSubjectList,newPatternList,option) ;
             }}}}}} }}}}}} 
 // end match
        } else if(subject instanceof TomTerm) {
           { TomTerm tom_match6_1=(( TomTerm)contextSubject);{ { TomTerm tom_match6_2=(( TomTerm)subject);{ if(tom_is_fun_sym_TomTypeToTomTerm(tom_match6_1) ||  false ) { { TomType tom_match6_1_1=tom_get_slot_TomTypeToTomTerm_astType(tom_match6_1); if(tom_is_fun_sym_Type(tom_match6_1_1) ||  false ) { { TomType type=tom_match6_1_1; if(tom_is_fun_sym_Appl(tom_match6_2) ||  false ) { { OptionList tom_match6_2_1=tom_get_slot_Appl_option(tom_match6_2); { NameList tom_match6_2_2=tom_get_slot_Appl_nameList(tom_match6_2); { TomList tom_match6_2_3=tom_get_slot_Appl_args(tom_match6_2); { ConstraintList tom_match6_2_4=tom_get_slot_Appl_constraints(tom_match6_2); { OptionList option=tom_match6_2_1; if(tom_is_fun_sym_concTomName(tom_match6_2_2) ||  false ) { { NameList nameList=tom_match6_2_2; { NameList tom_match6_2_2_list1=tom_match6_2_2; if(!(tom_is_empty_NameList(tom_match6_2_2_list1))) { { TomName tom_match6_2_2_1=tom_get_head_NameList(tom_match6_2_2_list1);tom_match6_2_2_list1=tom_get_tail_NameList(tom_match6_2_2_list1); if(tom_is_fun_sym_Name(tom_match6_2_2_1) ||  false ) { { String  tom_match6_2_2_1_1=tom_get_slot_Name_string(tom_match6_2_2_1); { String  strName=tom_match6_2_2_1_1; { TomList l=tom_match6_2_3; { ConstraintList constraints=tom_match6_2_4; 

             
               //System.out.println("expandVariable.1: Type(" + type);
               //System.out.println("--> " + subject);

               // create a constant or a variable
               TomSymbol tomSymbol;
               if(strName .equals("")) {
                 tomSymbol = getSymbol(type );
                 if(tomSymbol==null) {
                   throw new TomRuntimeException(new Throwable("no symbol found for type '" + type  + "'"));
                 } else {
                   nameList  = tom_cons_list_concTomName(tomSymbol.getAstName(),tom_empty_list_concTomName()) ;
                 }
               } else {
                 tomSymbol = getSymbol(strName );
               }

               if(tomSymbol != null) {
                 TomList subterm = expandVariableList(tomSymbol, l );
                 ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(getSymbolCodomain(tomSymbol)) ,constraints );
                 return tom_make_Appl(option,nameList,subterm,newConstraints) ;
               } else {
                 if(l .isEmpty()  && !hasConstructor(option )) {
                   ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type) ,constraints );
                   return tom_make_Variable(option,nameList.getHead(),type,newConstraints) ;
                 } else {
                   TomList subterm = expandVariableList(tom_make_emptySymbol() , l );
                   ConstraintList newConstraints = expandVariableConstraintList(tom_make_emptyTerm() ,constraints );
                   return tom_make_Appl(option,nameList,subterm,newConstraints) ;
                 }
               }
             }}}} }} }}} }}}}}} }} }} } if(tom_is_fun_sym_Variable(tom_match6_1) ||  false ) { { OptionList tom_match6_1_1=tom_get_slot_Variable_option(tom_match6_1); { TomName tom_match6_1_2=tom_get_slot_Variable_astName(tom_match6_1); { TomType tom_match6_1_3=tom_get_slot_Variable_astType(tom_match6_1); { OptionList option1=tom_match6_1_1; { TomName name1=tom_match6_1_2; { TomType type1=tom_match6_1_3; if(tom_is_fun_sym_Appl(tom_match6_2) ||  false ) { { OptionList tom_match6_2_1=tom_get_slot_Appl_option(tom_match6_2); { NameList tom_match6_2_2=tom_get_slot_Appl_nameList(tom_match6_2); { TomList tom_match6_2_3=tom_get_slot_Appl_args(tom_match6_2); { ConstraintList tom_match6_2_4=tom_get_slot_Appl_constraints(tom_match6_2); { OptionList option=tom_match6_2_1; if(tom_is_fun_sym_concTomName(tom_match6_2_2) ||  false ) { { NameList nameList=tom_match6_2_2; { NameList tom_match6_2_2_list1=tom_match6_2_2; if(!(tom_is_empty_NameList(tom_match6_2_2_list1))) { { TomName tom_match6_2_2_1=tom_get_head_NameList(tom_match6_2_2_list1);tom_match6_2_2_list1=tom_get_tail_NameList(tom_match6_2_2_list1); if(tom_is_fun_sym_Name(tom_match6_2_2_1) ||  false ) { { String  tom_match6_2_2_1_1=tom_get_slot_Name_string(tom_match6_2_2_1); { String  strName=tom_match6_2_2_1_1; { TomList l=tom_match6_2_3; { ConstraintList constraints=tom_match6_2_4; 


               // System.out.println("expandVariable.3: Variable(" + option1 + "," + name1 + "," + type1 + ")");
               // under a match construct
               // create a constant or a variable
               //TomSymbol tomSymbol = getSymbol(strName);
               TomSymbol tomSymbol;
               if(strName .equals("")) {
                 tomSymbol = getSymbol(type1 );
                 nameList  = tom_cons_list_concTomName(tomSymbol.getAstName(),tom_empty_list_concTomName()) ;
               } else {
                 tomSymbol = getSymbol(strName );
               }
            
               ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type1) ,constraints );
               //System.out.println("newConstraints2.1 = " + newConstraints);
               if(tomSymbol != null) {
                 TomList subterm = expandVariableList(tomSymbol, l );
                 return tom_make_Appl(option,nameList,subterm,newConstraints) ;
               } else {
                 if(l .isEmpty()  && !hasConstructor(option )) {
                   return tom_make_Variable(option,nameList.getHead(),type1,newConstraints) ;
                 } else {
                   TomList subterm = expandVariableList(tom_make_emptySymbol() , l );
                   return tom_make_Appl(option,nameList,subterm,newConstraints) ;
                 }
               }
             }}}} }} }}} }}}}}} }}}}}}} } { TomTerm context=tom_match6_1; if(tom_is_fun_sym_Appl(tom_match6_2) ||  false ) { { TomTerm appl=tom_match6_2; { OptionList tom_match6_2_1=tom_get_slot_Appl_option(tom_match6_2); { NameList tom_match6_2_2=tom_get_slot_Appl_nameList(tom_match6_2); { TomList tom_match6_2_3=tom_get_slot_Appl_args(tom_match6_2); { ConstraintList tom_match6_2_4=tom_get_slot_Appl_constraints(tom_match6_2); { OptionList optionList=tom_match6_2_1; if(tom_is_fun_sym_concTomName(tom_match6_2_2) ||  false ) { { NameList nameList=tom_match6_2_2; { NameList tom_match6_2_2_list1=tom_match6_2_2; if(!(tom_is_empty_NameList(tom_match6_2_2_list1))) { { TomName tom_match6_2_2_1=tom_get_head_NameList(tom_match6_2_2_list1);tom_match6_2_2_list1=tom_get_tail_NameList(tom_match6_2_2_list1); if(tom_is_fun_sym_Name(tom_match6_2_2_1) ||  false ) { { String  tom_match6_2_2_1_1=tom_get_slot_Name_string(tom_match6_2_2_1); { String  tomName=tom_match6_2_2_1_1; { TomList l=tom_match6_2_3; { ConstraintList constraints=tom_match6_2_4; 


               //System.out.println("expandVariable.6: Appl(Name(" + tomName + ")," + l + ")");
               // create a  symbol
               TomSymbol tomSymbol = getSymbol(tomName );
               if(tomSymbol != null) {
                 TomList subterm = expandVariableList(tomSymbol, l );
                 ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(getSymbolCodomain(tomSymbol)) ,constraints );
                 //System.out.println("newConstraints3.1 = " + newConstraints);
                 //System.out.println("***** expandVariable.6: expandVariableList = " + subterm);
                 //System.out.println("***** expandVariable.6: appl        = " + appl);
                 //System.out.println("***** expandVariable.6: constraints = " + constraints);
                 return tom_make_Appl(optionList,nameList,subterm,newConstraints) ;
               } else {
                 // do nothing
                 //System.out.println("***** expandVariable.6: do nothing: " + constraints);
               }
             }}}} }} }}} }}}}}}} }} if(tom_is_fun_sym_TomTypeToTomTerm(tom_match6_1) ||  false ) { { TomTerm context=tom_match6_1; { TomType tom_match6_1_1=tom_get_slot_TomTypeToTomTerm_astType(tom_match6_1); if(tom_is_fun_sym_Type(tom_match6_1_1) ||  false ) { { TomType type=tom_match6_1_1; if(tom_is_fun_sym_Variable(tom_match6_2) ||  false ) { { OptionList tom_match6_2_1=tom_get_slot_Variable_option(tom_match6_2); { TomName tom_match6_2_2=tom_get_slot_Variable_astName(tom_match6_2); { TomType tom_match6_2_3=tom_get_slot_Variable_astType(tom_match6_2); { ConstraintList tom_match6_2_4=tom_get_slot_Variable_constraints(tom_match6_2); { OptionList option=tom_match6_2_1; { TomName astName=tom_match6_2_2; if(tom_is_fun_sym_TomTypeAlone(tom_match6_2_3) ||  false ) { { ConstraintList constraints=tom_match6_2_4; 


               // create a variable
               return tom_make_Variable(option,astName,type,expandVariableConstraintList(context,constraints)) ;
             } }}}}}}} }} }}} } { TomTerm context=tom_match6_1; if(tom_is_fun_sym_Variable(tom_match6_2) ||  false ) { { TomTerm var=tom_match6_2; { OptionList tom_match6_2_1=tom_get_slot_Variable_option(tom_match6_2); { TomName tom_match6_2_2=tom_get_slot_Variable_astName(tom_match6_2); { TomType tom_match6_2_3=tom_get_slot_Variable_astType(tom_match6_2); { ConstraintList tom_match6_2_4=tom_get_slot_Variable_constraints(tom_match6_2); { OptionList option=tom_match6_2_1; if(tom_is_fun_sym_Name(tom_match6_2_2) ||  false ) { { String  tom_match6_2_2_1=tom_get_slot_Name_string(tom_match6_2_2); { String  strName=tom_match6_2_2_1; if(tom_is_fun_sym_TomTypeAlone(tom_match6_2_3) ||  false ) { { String  tom_match6_2_3_1=tom_get_slot_TomTypeAlone_string(tom_match6_2_3); { String  tomType=tom_match6_2_3_1; { ConstraintList constraints=tom_match6_2_4; 


               // create a variable
               TomType localType = getType(tomType );
               if(localType != null) {
                 return tom_make_Variable(option,tom_make_Name(strName),localType,constraints) ;
               } else {
                 // do nothing
               }
             }}} }}} }}}}}}} }} if(tom_is_fun_sym_TomTypeToTomTerm(tom_match6_1) ||  false ) { { TomType tom_match6_1_1=tom_get_slot_TomTypeToTomTerm_astType(tom_match6_1); if(tom_is_fun_sym_Type(tom_match6_1_1) ||  false ) { { TomType type=tom_match6_1_1; if(tom_is_fun_sym_Placeholder(tom_match6_2) ||  false ) { { TomTerm p=tom_match6_2; { OptionList tom_match6_2_1=tom_get_slot_Placeholder_option(tom_match6_2); { ConstraintList tom_match6_2_2=tom_get_slot_Placeholder_constraints(tom_match6_2); { OptionList option=tom_match6_2_1; { ConstraintList constraints=tom_match6_2_2; 


               ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type) ,constraints );
               // create an unamed variable
               return tom_make_UnamedVariable(option,type,newConstraints) ;
             }}}}} }} }} } if(tom_is_fun_sym_Variable(tom_match6_1) ||  false ) { { OptionList tom_match6_1_1=tom_get_slot_Variable_option(tom_match6_1); { TomName tom_match6_1_2=tom_get_slot_Variable_astName(tom_match6_1); { TomType tom_match6_1_3=tom_get_slot_Variable_astType(tom_match6_1); { OptionList option1=tom_match6_1_1; { TomName name1=tom_match6_1_2; { TomType type1=tom_match6_1_3; if(tom_is_fun_sym_Placeholder(tom_match6_2) ||  false ) { { TomTerm p=tom_match6_2; { OptionList tom_match6_2_1=tom_get_slot_Placeholder_option(tom_match6_2); { ConstraintList tom_match6_2_2=tom_get_slot_Placeholder_constraints(tom_match6_2); { OptionList option=tom_match6_2_1; { ConstraintList constraints=tom_match6_2_2; 


               ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type1) ,constraints );
               // create an unamed variable
               return tom_make_UnamedVariable(option,type1,newConstraints) ;
             }}}}} }}}}}}} } { TomTerm context=tom_match6_1; if(tom_is_fun_sym_TLVar(tom_match6_2) ||  false ) { { String  tom_match6_2_1=tom_get_slot_TLVar_strName(tom_match6_2); { TomType tom_match6_2_2=tom_get_slot_TLVar_astType(tom_match6_2); { String  strName=tom_match6_2_1; if(tom_is_fun_sym_TomTypeAlone(tom_match6_2_2) ||  false ) { { String  tom_match6_2_2_1=tom_get_slot_TomTypeAlone_string(tom_match6_2_2); { String  tomType=tom_match6_2_2_1; 


               //debugPrintln("expandVariable.8: TLVar(" + strName + "," + tomType + ")");
               // create a variable: its type is ensured by checker
               TomType localType = getType(tomType );
               OptionList option = ast().makeOption();
               return tom_make_Variable(option,tom_make_Name(strName),localType,tom_empty_list_concConstraint()) ;
             }} }}}} }} { TomTerm context=tom_match6_1; if(tom_is_fun_sym_TLVar(tom_match6_2) ||  false ) { { String  tom_match6_2_1=tom_get_slot_TLVar_strName(tom_match6_2); { TomType tom_match6_2_2=tom_get_slot_TLVar_astType(tom_match6_2); { String  strName=tom_match6_2_1; if(tom_is_fun_sym_Type(tom_match6_2_2) ||  false ) { { TomType localType=tom_match6_2_2; 


               //debugPrintln("expandVariable.8: TLVar(" + strName + "," + tomType + ")");
               // create a variable: its type is ensured by checker
               OptionList option = ast().makeOption();
               return tom_make_Variable(option,tom_make_Name(strName),localType,tom_empty_list_concConstraint()) ;
             } }}}} }} if(tom_is_fun_sym_SubjectList(tom_match6_1) ||  false ) { { TomList tom_match6_1_1=tom_get_slot_SubjectList_tomList(tom_match6_1); { TomList l1=tom_match6_1_1; if(tom_is_fun_sym_TermList(tom_match6_2) ||  false ) { { TomList tom_match6_2_1=tom_get_slot_TermList_tomList(tom_match6_2); { TomList subjectList=tom_match6_2_1; 


               //System.out.println("expandVariable.9: "+l1+"(" + subjectList + ")");
                
               // process a list of subterms
               ArrayList list = new ArrayList();
               while(!subjectList .isEmpty()) {
                 list.add(expandVariable(l1 .getHead(), subjectList .getHead()));
                 subjectList  = subjectList .getTail();
                 l1  = l1 .getTail();
               }
               return tom_make_TermList(ast().makeList(list)) ;
             }} }}} }}}}} 
 // end match
        } // end instanceof TomTerm
          //System.out.println("TomKernelCompiler.expandVariable default:\n\t" + subject );
          //System.out.println("subject: " + subject);
          //System.out.println("context: " + contextSubject);
        return traversal().genericTraversal(subject,this,contextSubject);
      } // end apply
    }; // end new

  protected TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return (TomTerm) replace_expandVariable.apply(subject,contextSubject); 
  }

  private Instruction expandVariableInstruction(TomTerm contextSubject, Instruction subject) {
    return (Instruction) replace_expandVariable.apply(subject,contextSubject); 
  }

  protected ConstraintList expandVariableConstraintList(TomTerm contextSubject, ConstraintList subject) {
    return (ConstraintList) replace_expandVariable.apply(subject,contextSubject); 
  }

  private TomType getTypeFromVariableList(TomName name, TomList list) {

    //System.out.println("name = " + name);
    //System.out.println("list = " + list);
    
     { TomName tom_match7_1=(( TomName)name);{ { TomList tom_match7_2=(( TomList)list);{ if(tom_is_fun_sym_emptyTomList(tom_match7_2) ||  false ) { 

         System.out.println("getTypeFromVariableList. Stange case '" + name + "' not found");
         throw new TomRuntimeException(new Throwable("getTypeFromVariableList. Stange case '" + name + "' not found"));
        } { TomName varName=tom_match7_1; if(tom_is_fun_sym_manyTomList(tom_match7_2) ||  false ) { { TomTerm tom_match7_2_1=tom_get_slot_manyTomList_head(tom_match7_2); { TomList tom_match7_2_2=tom_get_slot_manyTomList_tail(tom_match7_2); if(tom_is_fun_sym_Variable(tom_match7_2_1) ||  false ) { { TomName tom_match7_2_1_2=tom_get_slot_Variable_astName(tom_match7_2_1); { TomType tom_match7_2_1_3=tom_get_slot_Variable_astType(tom_match7_2_1); { TomName tom_renamedvar_varName_1=tom_match7_2_1_2; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match7_2_1_3) ||  false ) { { TomType type=tom_match7_2_1_3; { TomList tail=tom_match7_2_2; 

 return type ; }} } }}}} }}} }} { TomName varName=tom_match7_1; if(tom_is_fun_sym_manyTomList(tom_match7_2) ||  false ) { { TomTerm tom_match7_2_1=tom_get_slot_manyTomList_head(tom_match7_2); { TomList tom_match7_2_2=tom_get_slot_manyTomList_tail(tom_match7_2); if(tom_is_fun_sym_VariableStar(tom_match7_2_1) ||  false ) { { TomName tom_match7_2_1_2=tom_get_slot_VariableStar_astName(tom_match7_2_1); { TomType tom_match7_2_1_3=tom_get_slot_VariableStar_astType(tom_match7_2_1); { TomName tom_renamedvar_varName_1=tom_match7_2_1_2; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match7_2_1_3) ||  false ) { { TomType type=tom_match7_2_1_3; { TomList tail=tom_match7_2_2; 
 return type ; }} } }}}} }}} }} if(tom_is_fun_sym_manyTomList(tom_match7_2) ||  false ) { { TomTerm tom_match7_2_1=tom_get_slot_manyTomList_head(tom_match7_2); { TomList tom_match7_2_2=tom_get_slot_manyTomList_tail(tom_match7_2); { TomTerm t=tom_match7_2_1; { TomList tail=tom_match7_2_2; 
 return getTypeFromVariableList(name,tail ); }}}} }}}}} 


    return null;
  }
 

  private TomList expandVariableList(TomSymbol subject, TomList subjectList) {
    if(subject == null) {
      throw new TomRuntimeException(new Throwable("expandVariableList: null subject"));
    }
    
    //System.out.println("symbol = " + subject.getAstName());
     { TomSymbol tom_match8_1=(( TomSymbol)subject);{ if(tom_is_fun_sym_emptySymbol(tom_match8_1) ||  false ) { 

        /*
         * If the top symbol is unknown, the subterms
         * are expanded in an empty context
         */
        ArrayList list = new ArrayList();
        while(!subjectList.isEmpty()) {
          list.add(expandVariable(tom_make_emptyTerm() , subjectList.getHead()));
          subjectList = subjectList.getTail();
        }
        return ast().makeList(list);
       } if(tom_is_fun_sym_Symbol(tom_match8_1) ||  false ) { { TomSymbol symb=tom_match8_1; { TomType tom_match8_1_2=tom_get_slot_Symbol_typesToType(tom_match8_1); if(tom_is_fun_sym_TypesToType(tom_match8_1_2) ||  false ) { { TomTypeList tom_match8_1_2_1=tom_get_slot_TypesToType_domain(tom_match8_1_2); { TomType tom_match8_1_2_2=tom_get_slot_TypesToType_codomain(tom_match8_1_2); { TomTypeList typeList=tom_match8_1_2_1; { TomType codomain=tom_match8_1_2_2; 


          
        // process a list of subterms and a list of types
        TomList result = null;
        ArrayList list = new ArrayList();
        if(isListOperator(symb ) || isArrayOperator(symb )) {
          /*
           * TODO:
           * when the symbol is an associative operator,
           * the signature has the form: List conc( Element* )
           * the list of types is reduced to the singleton { Element }
           *
           * consider a pattern: conc(E1*,x,E2*,y,E3*)
           *  assign the type "Element" to each subterm: x and y
           *  assign the type "List" to each subtermList: E1*,E2* and E3*
           */

          //System.out.println("listOperator: " + symb);
          //System.out.println("subjectList: " + subjectList);
          
          TomType domainType = typeList .getHead();
          while(!subjectList.isEmpty()) {
            TomTerm subterm = subjectList.getHead();
            //System.out.println("subterm:\n" + subterm);
            matchBlock: {
               { TomTerm tom_match9_1=(( TomTerm)subterm);{ if(tom_is_fun_sym_VariableStar(tom_match9_1) ||  false ) { { OptionList tom_match9_1_1=tom_get_slot_VariableStar_option(tom_match9_1); { TomName tom_match9_1_2=tom_get_slot_VariableStar_astName(tom_match9_1); { ConstraintList tom_match9_1_4=tom_get_slot_VariableStar_constraints(tom_match9_1); { OptionList option=tom_match9_1_1; { TomName name=tom_match9_1_2; { ConstraintList constraints=tom_match9_1_4; 

                  ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(codomain) ,constraints );
                  list.add(tom_make_VariableStar(option,name,codomain,newConstraints) );
                  //System.out.println("*** break: " + subterm);
                  break matchBlock;
                }}}}}} } if(tom_is_fun_sym_UnamedVariableStar(tom_match9_1) ||  false ) { { OptionList tom_match9_1_1=tom_get_slot_UnamedVariableStar_option(tom_match9_1); { ConstraintList tom_match9_1_3=tom_get_slot_UnamedVariableStar_constraints(tom_match9_1); { OptionList option=tom_match9_1_1; { ConstraintList constraints=tom_match9_1_3; 


                  ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(codomain) ,constraints );
                  list.add(tom_make_UnamedVariableStar(option,codomain,newConstraints) );
                  break matchBlock;
                }}}} } 


                  list.add(expandVariable(tom_make_TomTypeToTomTerm(domainType) , subterm));
                  break matchBlock;
                }} 

            }
            subjectList = subjectList.getTail();
          }
        } else {
          while(!subjectList.isEmpty()) {
            //System.out.println("type = " + typeList.getHead());
            //System.out.println("head = " + subjectList.getHead());
            list.add(expandVariable(tom_make_TomTypeToTomTerm(typeList.getHead()) , subjectList.getHead()));
            subjectList = subjectList.getTail();
            typeList     = typeList .getTail();
          }
        }
       
        result = ast().makeList(list);
        return result;
      }}}} }}} } 


        System.out.println("expandVariableList: strange case: '" + subject + "'");
        throw new TomRuntimeException(new Throwable("expandVariableList: strange case: '" + subject + "'"));
      }} 

  }

  /*
   * updateSymbol is called after a first syntax expansion phase
   * this phase updates the symbolTable according to the typeTable
   * this is performed by recursively traversing each symbol
   * each TomTypeAlone is replace by the corresponding TomType
   */
  public void updateSymbolTable() {
    Iterator it = symbolTable().keySymbolIterator();
    while(it.hasNext()) {
      String tomName = (String)it.next();
      TomTerm emptyContext = tom_make_emptyTerm() ;
      TomSymbol tomSymbol = getSymbol(tomName);
      tomSymbol = expandVariable(emptyContext,tom_make_TomSymbolToTomTerm(tomSymbol) ).getAstSymbol();
      symbolTable().putSymbol(tomName,tomSymbol);
    }
  }

  private TomType getType(String tomName) {
    TomType tomType = symbolTable().getType(tomName);
    return tomType;
  }


  /*
   * Replace pattern with only variables or underscore (UnamedVariables)
   * By DefaultPattern
   */
  public TomTerm expandMatchPattern(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof Instruction) {
             { Instruction tom_match10_1=(( Instruction)subject);{ if(tom_is_fun_sym_Match(tom_match10_1) ||  false ) { { TomTerm tom_match10_1_1=tom_get_slot_Match_subjectList(tom_match10_1); { TomTerm tom_match10_1_2=tom_get_slot_Match_astPatternList(tom_match10_1); { OptionList tom_match10_1_3=tom_get_slot_Match_option(tom_match10_1); { TomTerm subjectList=tom_match10_1_1; { TomTerm patternList=tom_match10_1_2; { OptionList option=tom_match10_1_3; 

                // find other match in PA list
                TomTerm newPatternList = expandMatchPattern(patternList );
                return expandPattern(tom_make_Match(subjectList,newPatternList,option) ); 
              }}}}}} } 

                return traversal().genericTraversal(subject,this);
              }} 
 // end match
          } else {
            return traversal().genericTraversal(subject,this);
          }
        } // end apply
      }; // end new
    
    return (TomTerm) replace.apply(subject); 
  }

  private Instruction expandPattern(Instruction match) {
     { Instruction tom_match11_1=(( Instruction)match);{ if(tom_is_fun_sym_Match(tom_match11_1) ||  false ) { { TomTerm tom_match11_1_1=tom_get_slot_Match_subjectList(tom_match11_1); { TomTerm tom_match11_1_2=tom_get_slot_Match_astPatternList(tom_match11_1); { OptionList tom_match11_1_3=tom_get_slot_Match_option(tom_match11_1); { TomTerm subjectList=tom_match11_1_1; if(tom_is_fun_sym_PatternList(tom_match11_1_2) ||  false ) { { TomList tom_match11_1_2_1=tom_get_slot_PatternList_tomList(tom_match11_1_2); { TomList list=tom_match11_1_2_1; { OptionList option=tom_match11_1_3; 

        boolean needModification = false;
        TomList newPatternList = empty();
        while(!list .isEmpty()) {
          TomTerm pa = list .getHead();
          if( isDefaultPattern(pa.getTermList().getTomList()) ) {
            OptionList newPatternActionOption =  tom_make_manyOptionList(tom_make_DefaultCase(),pa.getOption()) ;
            newPatternList = cons(tom_make_PatternAction(pa.getTermList(),pa.getAction(),newPatternActionOption) , newPatternList);
            needModification = true;
            if(!list .getTail().isEmpty()) {
              // the default pattern is not the latest one!!
              System.out.println("Default pattern issue"+pa.getOption());
            }
          } else {
            // we keep the PA
            newPatternList = cons(list .getHead(), newPatternList);
          }
          list  = list .getTail();
        }
        if(needModification) {
          newPatternList = reverse(newPatternList);
          OptionList newMatchOption =tom_make_manyOptionList(tom_make_DefaultCase(),option) ;
          return tom_make_Match(subjectList,tom_make_PatternList(newPatternList),newMatchOption) ;
        } else {
          return match;
        }
      }}} }}}}} } 

        System.out.println("Strange Match in expandMatchPattern"+match);
        throw new TomRuntimeException(new Throwable("Strange Match in expandMatchPattern"+match));
      }} 

  }

  private boolean isDefaultPattern(TomList pList) {
    TomTerm term;
    while(!pList.isEmpty()) {
      term = pList.getHead();
       { TomTerm tom_match12_1=(( TomTerm)term);{ if(tom_is_fun_sym_Appl(tom_match12_1) ||  false ) { 

          return false;
         }}} 

      pList = pList.getTail();
    }
    
    ArrayList variableList = new ArrayList();
    collectVariable(variableList,tom_make_PatternList(pList) );
    
    // compute multiplicities
    HashMap multiplicityMap = new HashMap();
    Iterator it = variableList.iterator();
    while(it.hasNext()) {
      TomTerm variable = (TomTerm)it.next();
      TomName name = variable.getAstName();
      if(multiplicityMap.containsKey(name)) {
        Integer value = (Integer)multiplicityMap.get(name);
        return false;
      } else {
        multiplicityMap.put(name, new Integer(1));
      }
    }
    return true;
  }
  
} // Class TomKernelExpander
