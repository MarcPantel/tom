/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import tom.engine.TomBase;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.tools.SymbolTable;
import tom.engine.tools.ASTFactory;
import aterm.ATerm;

import tom.library.strategy.mutraveler.MuTraveler;
import tom.library.strategy.mutraveler.Identity;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;


public class TomKernelExpander extends TomBase {

  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_ChoiceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.ChoiceId(first,then) ; }  /*  * basic probabilistic operators  */      /*  * strategies  */      /*  * strategies with Id considered as failure  */       






  private SymbolTable symbolTable;

  public TomKernelExpander() {
    super();
  }

  public void setSymbolTable(SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
  }

  private SymbolTable getSymbolTable() {
    return symbolTable;
  }

  protected TomSymbol getSymbolFromName(String tomName) {
    return getSymbolFromName(tomName, getSymbolTable());
  }

  protected TomSymbol getSymbolFromType(TomType tomType) {
    return getSymbolFromType(tomType, getSymbolTable());
  }
  // ------------------------------------------------------------
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_EqualityCondition( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isEqualityCondition() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualityCondition_lhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getLhs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualityCondition_rhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getRhs() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_TypedEqualityCondition( tom.engine.adt.tomsignature.types.TomType t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_TypedEqualityCondition(t0, t1, t2); }private static boolean tom_is_fun_sym_MatchingCondition( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isMatchingCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_MatchingCondition( tom.engine.adt.tomsignature.types.TomTerm t0,  tom.engine.adt.tomsignature.types.TomTerm t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_MatchingCondition(t0, t1); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MatchingCondition_lhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getLhs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MatchingCondition_rhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getRhs() ;}private static boolean tom_is_fun_sym_Match( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isMatch() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_Match( tom.engine.adt.tomsignature.types.TomTerm t0,  tom.engine.adt.tomsignature.types.PatternInstructionList t1,  tom.engine.adt.tomsignature.types.OptionList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Match(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Match_subjectList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slot_Match_astPatternInstructionList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Match_option( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getOption() ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_make_emptyInstructionList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(); }private static  tom.engine.adt.tomsignature.types.InstructionList tom_make_manyInstructionList( tom.engine.adt.tomsignature.types.Instruction e,  tom.engine.adt.tomsignature.types.InstructionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(e,l); }private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Symbol( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  (t!= null) && t.isSymbol() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Symbol_astName( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Symbol_typesToType( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getTypesToType() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_slot_Symbol_pairNameDeclList( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getPairNameDeclList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Symbol_option( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getOption() ;}private static boolean tom_is_fun_sym_emptySymbol( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  (t!= null) && t.isEmptySymbol() ;}private static  tom.engine.adt.tomsignature.types.TomSymbol tom_make_emptySymbol() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomSymbol_EmptySymbol(); }private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_VisitTerm( tom.engine.adt.tomsignature.types.TomVisit t) {  return  (t!= null) && t.isVisitTerm() ;}private static  tom.engine.adt.tomsignature.types.TomVisit tom_make_VisitTerm( tom.engine.adt.tomsignature.types.TomType t0,  tom.engine.adt.tomsignature.types.PatternInstructionList t1,  tom.engine.adt.tomsignature.types.OptionList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomVisit_VisitTerm(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VisitTerm_vNode( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getVNode() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slot_VisitTerm_astPatternInstructionList( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VisitTerm_option( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_RewriteRule( tom.engine.adt.tomsignature.types.TomRule t) {  return  (t!= null) && t.isRewriteRule() ;}private static  tom.engine.adt.tomsignature.types.TomRule tom_make_RewriteRule( tom.engine.adt.tomsignature.types.TomTerm t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.InstructionList t2,  tom.engine.adt.tomsignature.types.OptionList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRule_RewriteRule(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_lhs( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getLhs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_rhs( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getRhs() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_RewriteRule_condList( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getCondList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RewriteRule_option( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getOption() ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Comment( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isComment() ;}private static  String  tom_get_slot_Comment_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static boolean tom_is_fun_sym_ITL( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isITL() ;}private static  String  tom_get_slot_ITL_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static boolean tom_is_fun_sym_TL( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isTL() ;}private static  String  tom_get_slot_TL_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static  tom.engine.adt.tomsignature.types.Position tom_get_slot_TL_start( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getStart() ;}private static  tom.engine.adt.tomsignature.types.Position tom_get_slot_TL_end( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getEnd() ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_make_Name( String  t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_Name(t0); }private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomsignature.types.SlotList t) {  return (t!= null) && t.isSortSlotList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_empty_list_concSlot() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static  tom.engine.adt.tomsignature.types.SlotList tom_cons_list_concSlot( tom.engine.adt.tomsignature.types.Slot e,  tom.engine.adt.tomsignature.types.SlotList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private static  tom.engine.adt.tomsignature.types.Slot tom_get_head_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_tail_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getTail() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_append_list_concSlot( tom.engine.adt.tomsignature.types.SlotList l1,  tom.engine.adt.tomsignature.types.SlotList l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slice_concSlot( tom.engine.adt.tomsignature.types.SlotList begin,  tom.engine.adt.tomsignature.types.SlotList end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomsignature.types.SlotList)tom_get_slice_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static  tom.engine.adt.tomsignature.types.SlotList tom_make_emptySlotList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static boolean tom_is_fun_sym_manySlotList( tom.engine.adt.tomsignature.types.SlotList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_make_manySlotList( tom.engine.adt.tomsignature.types.Slot e,  tom.engine.adt.tomsignature.types.SlotList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private static  tom.engine.adt.tomsignature.types.Slot tom_get_slot_manySlotList_head( tom.engine.adt.tomsignature.types.SlotList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_manySlotList_tail( tom.engine.adt.tomsignature.types.SlotList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomsignature.types.Slot t) {  return  (t!= null) && t.isPairSlotAppl() ;}private static  tom.engine.adt.tomsignature.types.Slot tom_make_PairSlotAppl( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_PairSlotAppl(t0, t1); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_PairSlotAppl_slotName( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_PairSlotAppl_appl( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getAppl() ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_empty_list_concConstraint() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(); }private static  tom.engine.adt.tomsignature.types.ConstraintList tom_cons_list_concConstraint( tom.engine.adt.tomsignature.types.Constraint e,  tom.engine.adt.tomsignature.types.ConstraintList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(e,l); }private static  tom.engine.adt.tomsignature.types.Constraint tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getTail() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_append_list_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList l1,  tom.engine.adt.tomsignature.types.ConstraintList l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slice_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList begin,  tom.engine.adt.tomsignature.types.ConstraintList end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_slice_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_OriginTracking( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isOriginTracking() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_OriginTracking_astName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstName() ;}private static  int  tom_get_slot_OriginTracking_line( tom.engine.adt.tomsignature.types.Option t) {  return  t.getLine() ;}private static  String  tom_get_slot_OriginTracking_fileName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getFileName() ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TypesToType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTypesToType() ;}private static  tom.engine.adt.tomsignature.types.TomTypeList tom_get_slot_TypesToType_domain( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getDomain() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TypesToType_codomain( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getCodomain() ;}private static boolean tom_is_fun_sym_TomTypeAlone( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTomTypeAlone() ;}private static  String  tom_get_slot_TomTypeAlone_string( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getString() ;}private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tomType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tlType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTlType() ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomsignature.types.TomList t) {  return (t!= null) && t.isSortTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_empty_list_concTomTerm() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static  tom.engine.adt.tomsignature.types.TomList tom_cons_list_concTomTerm( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_head_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_append_list_concTomTerm( tom.engine.adt.tomsignature.types.TomList l1,  tom.engine.adt.tomsignature.types.TomList l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomList tom_get_slice_concTomTerm( tom.engine.adt.tomsignature.types.TomList begin,  tom.engine.adt.tomsignature.types.TomList end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomList)tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomsignature.types.TomList)tom_get_slice_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_is_fun_sym_emptyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isEmpty() ;}private static boolean tom_is_fun_sym_manyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_manyTomList_head( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_manyTomList_tail( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomsignature.types.Pattern t) {  return  (t!= null) && t.isPattern() ;}private static  tom.engine.adt.tomsignature.types.Pattern tom_make_Pattern( tom.engine.adt.tomsignature.types.TomList t0,  tom.engine.adt.tomsignature.types.TomList t1,  tom.engine.adt.tomsignature.types.TomList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePattern_Pattern(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_subjectList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_tomList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_guards( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getGuards() ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TLVar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTLVar() ;}private static  String  tom_get_slot_TLVar_strName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getStrName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TLVar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static boolean tom_is_fun_sym_Term( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_Term( tom.engine.adt.tomsignature.types.TomTerm t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Term(t0); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Term_tomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_SubjectList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_SubjectList_tomList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomList() ;}private static boolean tom_is_fun_sym_Tom( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTom() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Tom_tomList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomList() ;}private static boolean tom_is_fun_sym_TomTypeToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTomTypeToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_TomTypeToTomTerm( tom.engine.adt.tomsignature.types.TomType t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TomTypeToTomTerm(t0); }private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TomTypeToTomTerm_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_emptyTerm() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_EmptyTerm(); }private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariableStar() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_UnamedVariableStar( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomType t1,  tom.engine.adt.tomsignature.types.ConstraintList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_UnamedVariableStar(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_UnamedVariable( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomType t1,  tom.engine.adt.tomsignature.types.ConstraintList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_UnamedVariable(t0, t1, t2); }private static boolean tom_is_fun_sym_Placeholder( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isPlaceholder() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Placeholder_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Placeholder_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariableStar() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_VariableStar( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomName t1,  tom.engine.adt.tomsignature.types.TomType t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_VariableStar(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_Variable( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomName t1,  tom.engine.adt.tomsignature.types.TomType t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Variable(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_RecordAppl( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.NameList t1,  tom.engine.adt.tomsignature.types.SlotList t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_RecordAppl(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}  
  // ------------------------------------------------------------

  /*
   * The "expandVariable" phase expands RecordAppl into Variable
   * we focus on
   * - RewriteRule
   * - MatchingCondition
   * - EqualityCondition
   * - Match
   *
   * Variable and TermAppl are are expanded in the TomTerm case
   */

   private static class replace_expandVariable  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  tom.engine.adt.tomsignature.types.TomTerm contextSubject;   TomKernelExpander  expander;  public replace_expandVariable(  tom.engine.adt.tomsignature.types.TomTerm contextSubject ,   TomKernelExpander  expander ) { super(tom_make_Identity() ); this.contextSubject=contextSubject; this.expander=expander; } public  tom.engine.adt.tomsignature.types.Option visit_Option(  tom.engine.adt.tomsignature.types.Option tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match1_1=(( tom.engine.adt.tomsignature.types.Option)tom__arg); if (tom_is_fun_sym_OriginTracking(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_subject=tom_match1_1; if ( true ) {


 return tom_subject;  } } } } } return super.visit_Option(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TargetLanguage visit_TargetLanguage(  tom.engine.adt.tomsignature.types.TargetLanguage tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TargetLanguage) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match2_1=(( tom.engine.adt.tomsignature.types.TargetLanguage)tom__arg); if (tom_is_fun_sym_TL(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_subject=tom_match2_1; if ( true ) {



 return tom_subject;  } } } if (tom_is_fun_sym_ITL(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_subject=tom_match2_1; if ( true ) {
 return tom_subject;  } } } if (tom_is_fun_sym_Comment(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_subject=tom_match2_1; if ( true ) {
 return tom_subject;  } } } } } return super.visit_TargetLanguage(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TomType visit_TomType(  tom.engine.adt.tomsignature.types.TomType tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomType) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1=(( tom.engine.adt.tomsignature.types.TomType)tom__arg); if (tom_is_fun_sym_TomTypeAlone(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_subject=tom_match3_1; { String  tom_match3_1_string=tom_get_slot_TomTypeAlone_string(tom_match3_1); { String  tom_tomType=tom_match3_1_string; if ( true ) {




        TomType type = expander.getType(tom_tomType);
        if(type != null) {
          return type;
        } else {
          return tom_subject; // useful for TomTypeAlone("unknown type")
        }
       } } } } } } } return super.visit_TomType(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TomRule visit_TomRule(  tom.engine.adt.tomsignature.types.TomRule tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomRule) { { tom.engine.adt.tomsignature.types.TomRule tom_match4_1=(( tom.engine.adt.tomsignature.types.TomRule)tom__arg); if (tom_is_fun_sym_RewriteRule(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1_lhs=tom_get_slot_RewriteRule_lhs(tom_match4_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1_rhs=tom_get_slot_RewriteRule_rhs(tom_match4_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match4_1_condList=tom_get_slot_RewriteRule_condList(tom_match4_1); { tom.engine.adt.tomsignature.types.OptionList tom_match4_1_option=tom_get_slot_RewriteRule_option(tom_match4_1); if (tom_is_fun_sym_Term(tom_match4_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1_lhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match4_1_lhs); if (tom_is_fun_sym_RecordAppl(tom_match4_1_lhs_tomTerm) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match4_1_lhs_tomTerm; { tom.engine.adt.tomsignature.types.NameList tom_match4_1_lhs_tomTerm_nameList=tom_get_slot_RecordAppl_nameList(tom_match4_1_lhs_tomTerm); if (tom_is_fun_sym_concTomName(tom_match4_1_lhs_tomTerm_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_lhs_tomTerm_nameList_list1=tom_match4_1_lhs_tomTerm_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match4_1_lhs_tomTerm_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_lhs_tomTerm_nameList_1=tom_get_head_concTomName_NameList(tom_match4_1_lhs_tomTerm_nameList_list1);tom_match4_1_lhs_tomTerm_nameList_list1=tom_get_tail_concTomName_NameList(tom_match4_1_lhs_tomTerm_nameList_list1); if (tom_is_fun_sym_Name(tom_match4_1_lhs_tomTerm_nameList_1) ||  false ) { { String  tom_match4_1_lhs_tomTerm_nameList_1_string=tom_get_slot_Name_string(tom_match4_1_lhs_tomTerm_nameList_1); { String  tom_tomName=tom_match4_1_lhs_tomTerm_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match4_1_lhs_tomTerm_nameList_list1)) { if (tom_is_fun_sym_Term(tom_match4_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1_rhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match4_1_rhs); { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match4_1_rhs_tomTerm; { tom.engine.adt.tomsignature.types.InstructionList tom_condList=tom_match4_1_condList; { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match4_1_option; if ( true ) {







        TomSymbol tomSymbol = expander.getSymbolFromName(tom_tomName);
        TomType symbolType = getSymbolCodomain(tomSymbol);
        TomTerm newLhs = tom_make_Term(expander.expandVariable(contextSubject,tom_lhs));
        // build the list of variables that occur in the lhs
        HashSet set = new HashSet();
        collectVariable(set,newLhs);
        TomList varList = ASTFactory.makeList(set);
        InstructionList newCondList = tom_make_emptyInstructionList();
        while(!tom_condList.isEmpty()) {
          Instruction cond = tom_condList.getHead();

          Instruction newCond = expander.replaceInstantiatedVariableInstruction(varList,cond);
          newCond = (Instruction) expander.expandVariableInstruction(contextSubject,newCond);

          newCondList = tom_make_manyInstructionList(newCond,newCondList);
          collectVariable(set,newCond);
          varList = ASTFactory.makeList(set);
          tom_condList= tom_condList.getTail();
        }

        TomTerm newRhs = expander.replaceInstantiatedVariable(varList,tom_rhs);
        newRhs = tom_make_Term(expander.expandVariable(tom_make_TomTypeToTomTerm(symbolType),newRhs));

        return tom_make_RewriteRule(newLhs,newRhs,newCondList,tom_option);
       } } } } } } } } } } } } } } } } } } } } } } } } } } return super.visit_TomRule(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TomVisit visit_TomVisit(  tom.engine.adt.tomsignature.types.TomVisit tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomVisit) { { tom.engine.adt.tomsignature.types.TomVisit tom_match5_1=(( tom.engine.adt.tomsignature.types.TomVisit)tom__arg); if (tom_is_fun_sym_VisitTerm(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match5_1_vNode=tom_get_slot_VisitTerm_vNode(tom_match5_1); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match5_1_astPatternInstructionList=tom_get_slot_VisitTerm_astPatternInstructionList(tom_match5_1); { tom.engine.adt.tomsignature.types.OptionList tom_match5_1_option=tom_get_slot_VisitTerm_option(tom_match5_1); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match5_1_vNode; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_patternInstructionList=tom_match5_1_astPatternInstructionList; { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match5_1_option; if ( true ) {




        TomType newType = expander.expandType(contextSubject,tom_type);
        PatternInstructionList newPatternInstructionList = expander.expandVariablePatternInstructionList(tom_make_TomTypeToTomTerm(newType),tom_patternInstructionList);
        return tom_make_VisitTerm(newType,newPatternInstructionList,tom_options);
       } } } } } } } } } } return super.visit_TomVisit(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_MatchingCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_MatchingCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_MatchingCondition_rhs(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_astName=tom_get_slot_Variable_astName(tom_match6_1_lhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_lhs_astType=tom_get_slot_Variable_astType(tom_match6_1_lhs); if (tom_is_fun_sym_Name(tom_match6_1_lhs_astName) ||  false ) { { String  tom_match6_1_lhs_astName_string=tom_get_slot_Name_string(tom_match6_1_lhs_astName); if (tom_is_fun_sym_Variable(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_astName=tom_get_slot_Variable_astName(tom_match6_1_rhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_rhs_astType=tom_get_slot_Variable_astType(tom_match6_1_rhs); if (tom_is_fun_sym_Name(tom_match6_1_rhs_astName) ||  false ) { { String  tom_match6_1_rhs_astName_string=tom_get_slot_Name_string(tom_match6_1_rhs_astName); { tom.engine.adt.tomsignature.types.TomType tom_rhsType=tom_match6_1_rhs_astType; if ( true ) {




          TomTerm newLhs = expander.expandVariable(tom_make_TomTypeToTomTerm(tom_rhsType),tom_lhs);
          return tom_make_MatchingCondition(newLhs,tom_rhs);
         } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MatchingCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_MatchingCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_MatchingCondition_rhs(tom_match6_1); if (tom_is_fun_sym_RecordAppl(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_lhs); if (tom_is_fun_sym_concTomName(tom_match6_1_lhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList_list1=tom_match6_1_lhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_lhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_lhs_nameList_list1);tom_match6_1_lhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_lhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_lhs_nameList_1) ||  false ) { { String  tom_match6_1_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_lhs_nameList_1); { String  tom_lhsName=tom_match6_1_lhs_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match6_1_lhs_nameList_list1)) { if (tom_is_fun_sym_Variable(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_astName=tom_get_slot_Variable_astName(tom_match6_1_rhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_rhs_astType=tom_get_slot_Variable_astType(tom_match6_1_rhs); if (tom_is_fun_sym_Name(tom_match6_1_rhs_astName) ||  false ) { { String  tom_match6_1_rhs_astName_string=tom_get_slot_Name_string(tom_match6_1_rhs_astName); { tom.engine.adt.tomsignature.types.TomType tom_rhsType=tom_match6_1_rhs_astType; if ( true ) {



          TomSymbol lhsSymbol = expander.getSymbolFromName(tom_lhsName);
          TomType type;
          if(lhsSymbol != null) {
            type = getSymbolCodomain(lhsSymbol);
          } else {
            throw new TomRuntimeException("lhs has an unknown sort: " + tom_lhsName);
          }

          TomTerm newLhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_lhs);
          TomTerm newRhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_rhs);
          return tom_make_MatchingCondition(newLhs,newRhs);
         } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MatchingCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_MatchingCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_MatchingCondition_rhs(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_astName=tom_get_slot_Variable_astName(tom_match6_1_lhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_lhs_astType=tom_get_slot_Variable_astType(tom_match6_1_lhs); if (tom_is_fun_sym_Name(tom_match6_1_lhs_astName) ||  false ) { { String  tom_match6_1_lhs_astName_string=tom_get_slot_Name_string(tom_match6_1_lhs_astName); { tom.engine.adt.tomsignature.types.TomType tom_lhsType=tom_match6_1_lhs_astType; if (tom_is_fun_sym_RecordAppl(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_rhs); if (tom_is_fun_sym_concTomName(tom_match6_1_rhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList_list1=tom_match6_1_rhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_rhs_nameList_list1);tom_match6_1_rhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_rhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_rhs_nameList_1) ||  false ) { { String  tom_match6_1_rhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_rhs_nameList_1); { String  tom_rhsName=tom_match6_1_rhs_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1)) { if ( true ) {



          TomSymbol rhsSymbol = expander.getSymbolFromName(tom_rhsName);
          TomType type;
          if(rhsSymbol != null) {
            type = getSymbolCodomain(rhsSymbol);
          } else {
            throw new TomRuntimeException("rhs has an unknown sort: " + tom_rhsName);
          }

          TomTerm newLhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_lhs);
          TomTerm newRhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_rhs);
          return tom_make_MatchingCondition(newLhs,newRhs);
         } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MatchingCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_MatchingCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_MatchingCondition_rhs(tom_match6_1); if (tom_is_fun_sym_RecordAppl(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_lhs); if (tom_is_fun_sym_concTomName(tom_match6_1_lhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList_list1=tom_match6_1_lhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_lhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_lhs_nameList_list1);tom_match6_1_lhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_lhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_lhs_nameList_1) ||  false ) { { String  tom_match6_1_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_lhs_nameList_1); { String  tom_lhsName=tom_match6_1_lhs_nameList_1_string; if (tom_is_fun_sym_RecordAppl(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_rhs); if (tom_is_fun_sym_concTomName(tom_match6_1_rhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList_list1=tom_match6_1_rhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_rhs_nameList_list1);tom_match6_1_rhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_rhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_rhs_nameList_1) ||  false ) { { String  tom_match6_1_rhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_rhs_nameList_1); { String  tom_rhsName=tom_match6_1_rhs_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1)) { if ( true ) {



          TomSymbol lhsSymbol = expander.getSymbolFromName(tom_lhsName);
          TomSymbol rhsSymbol = expander.getSymbolFromName(tom_rhsName);
          TomType type;
          // rhs is an application
          if(lhsSymbol != null) {
            type = getSymbolCodomain(lhsSymbol);
          } else if(rhsSymbol != null) {
            type = getSymbolCodomain(rhsSymbol);
          } else {
            // lhs is a variable, but rhs has an unknown top symbol
            // since lhs is a fresh variable, we look for rhs type
            throw new TomRuntimeException("rhs has an unknown sort: " + tom_rhsName);
          }

          TomTerm newLhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_lhs);
          TomTerm newRhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_rhs);
          return tom_make_MatchingCondition(newLhs,newRhs);
         } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_EqualityCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_EqualityCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_EqualityCondition_rhs(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_astName=tom_get_slot_Variable_astName(tom_match6_1_lhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_lhs_astType=tom_get_slot_Variable_astType(tom_match6_1_lhs); if (tom_is_fun_sym_Name(tom_match6_1_lhs_astName) ||  false ) { { String  tom_match6_1_lhs_astName_string=tom_get_slot_Name_string(tom_match6_1_lhs_astName); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match6_1_lhs_astType; if (tom_is_fun_sym_Variable(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_astName=tom_get_slot_Variable_astName(tom_match6_1_rhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_rhs_astType=tom_get_slot_Variable_astType(tom_match6_1_rhs); if (tom_is_fun_sym_Name(tom_match6_1_rhs_astName) ||  false ) { { String  tom_match6_1_rhs_astName_string=tom_get_slot_Name_string(tom_match6_1_rhs_astName); { tom.engine.adt.tomsignature.types.TomType tom_renamedvar_type_1=tom_match6_1_rhs_astType; if (tom_terms_equal_TomType(tom_type, tom_renamedvar_type_1)) { if ( true ) {



          return tom_make_TypedEqualityCondition(tom_type,tom_lhs,tom_rhs);
         } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_EqualityCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_EqualityCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_EqualityCondition_rhs(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_astName=tom_get_slot_Variable_astName(tom_match6_1_lhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_lhs_astType=tom_get_slot_Variable_astType(tom_match6_1_lhs); if (tom_is_fun_sym_Name(tom_match6_1_lhs_astName) ||  false ) { { String  tom_match6_1_lhs_astName_string=tom_get_slot_Name_string(tom_match6_1_lhs_astName); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match6_1_lhs_astType; if (tom_is_fun_sym_RecordAppl(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_rhs); if (tom_is_fun_sym_concTomName(tom_match6_1_rhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList_list1=tom_match6_1_rhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_rhs_nameList_list1);tom_match6_1_rhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_rhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_rhs_nameList_1) ||  false ) { { String  tom_match6_1_rhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_rhs_nameList_1); if (tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1)) { if ( true ) {



          TomTerm newRhs = expander.expandVariable(tom_make_TomTypeToTomTerm(tom_type),tom_rhs);
          return tom_make_TypedEqualityCondition(tom_type,tom_lhs,newRhs);
         } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_EqualityCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_EqualityCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_EqualityCondition_rhs(tom_match6_1); if (tom_is_fun_sym_RecordAppl(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_lhs); if (tom_is_fun_sym_concTomName(tom_match6_1_lhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList_list1=tom_match6_1_lhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_lhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_lhs_nameList_list1);tom_match6_1_lhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_lhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_lhs_nameList_1) ||  false ) { { String  tom_match6_1_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_lhs_nameList_1); if (tom_is_empty_concTomName_NameList(tom_match6_1_lhs_nameList_list1)) { if (tom_is_fun_sym_Variable(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_astName=tom_get_slot_Variable_astName(tom_match6_1_rhs); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_rhs_astType=tom_get_slot_Variable_astType(tom_match6_1_rhs); if (tom_is_fun_sym_Name(tom_match6_1_rhs_astName) ||  false ) { { String  tom_match6_1_rhs_astName_string=tom_get_slot_Name_string(tom_match6_1_rhs_astName); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match6_1_rhs_astType; if ( true ) {



          TomTerm newLhs = expander.expandVariable(tom_make_TomTypeToTomTerm(tom_type),tom_lhs);
          return tom_make_TypedEqualityCondition(tom_type,newLhs,tom_rhs);
         } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_EqualityCondition(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_lhs=tom_get_slot_EqualityCondition_lhs(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_rhs=tom_get_slot_EqualityCondition_rhs(tom_match6_1); if (tom_is_fun_sym_RecordAppl(tom_match6_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match6_1_lhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_lhs); if (tom_is_fun_sym_concTomName(tom_match6_1_lhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_lhs_nameList_list1=tom_match6_1_lhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_lhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_lhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_lhs_nameList_list1);tom_match6_1_lhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_lhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_lhs_nameList_1) ||  false ) { { String  tom_match6_1_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_lhs_nameList_1); { String  tom_lhsName=tom_match6_1_lhs_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match6_1_lhs_nameList_list1)) { if (tom_is_fun_sym_RecordAppl(tom_match6_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match6_1_rhs; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_rhs); if (tom_is_fun_sym_concTomName(tom_match6_1_rhs_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_rhs_nameList_list1=tom_match6_1_rhs_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_rhs_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_rhs_nameList_list1);tom_match6_1_rhs_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_rhs_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_rhs_nameList_1) ||  false ) { { String  tom_match6_1_rhs_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_rhs_nameList_1); { String  tom_rhsName=tom_match6_1_rhs_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match6_1_rhs_nameList_list1)) { if ( true ) {



          TomSymbol lhsSymbol = expander.getSymbolFromName(tom_lhsName);
          TomSymbol rhsSymbol = expander.getSymbolFromName(tom_rhsName);
          TomType type;

          if(lhsSymbol != null) {
            type = getSymbolCodomain(lhsSymbol);
          } else if(rhsSymbol != null) {
            type = getSymbolCodomain(rhsSymbol);
          } else {
            // lhs and rhs have an unknown top symbol
            throw new TomRuntimeException("lhs and rhs have an unknown sort: " + tom_lhsName+ ",  " + tom_rhsName);
          }

          //System.out.println("EqualityCondition type = " + type);

          TomTerm newLhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_lhs);
          TomTerm newRhs = expander.expandVariable(tom_make_TomTypeToTomTerm(type),tom_rhs);

          //System.out.println("lhs    = " + lhs);
          //System.out.println("newLhs = " + newLhs);

          return tom_make_TypedEqualityCondition(type,newLhs,newRhs);
         } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_Match(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_subjectList=tom_get_slot_Match_subjectList(tom_match6_1); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match6_1_astPatternInstructionList=tom_get_slot_Match_astPatternInstructionList(tom_match6_1); { tom.engine.adt.tomsignature.types.OptionList tom_match6_1_option=tom_get_slot_Match_option(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_tomSubjectList=tom_match6_1_subjectList; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_patternInstructionList=tom_match6_1_astPatternInstructionList; { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match6_1_option; if ( true ) {


        //System.out.println("tomSubjectList = " + tomSubjectList);
        TomTerm newSubjectList = expander.expandVariable(contextSubject,tom_tomSubjectList);
        //System.out.println("newSubjectList = " + newSubjectList);
        PatternInstructionList newPatternInstructionList = expander.expandVariablePatternInstructionList(newSubjectList,tom_patternInstructionList);
        return tom_make_Match(newSubjectList,newPatternInstructionList,tom_option);
       } } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Pattern visit_Pattern(  tom.engine.adt.tomsignature.types.Pattern tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Pattern) { { tom.engine.adt.tomsignature.types.Pattern tom_match7_1=(( tom.engine.adt.tomsignature.types.Pattern)tom__arg); if (tom_is_fun_sym_Pattern(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_subjectList=tom_get_slot_Pattern_subjectList(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tomList=tom_get_slot_Pattern_tomList(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_guards=tom_get_slot_Pattern_guards(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_subjectList=tom_match7_1_subjectList; { tom.engine.adt.tomsignature.types.TomList tom_termList=tom_match7_1_tomList; { tom.engine.adt.tomsignature.types.TomList tom_guardList=tom_match7_1_guards; if ( true ) { if(contextSubject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1=(( tom.engine.adt.tomsignature.types.TomTerm)contextSubject); if (tom_is_fun_sym_SubjectList(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_1_tomList=tom_get_slot_SubjectList_tomList(tom_match8_1); { tom.engine.adt.tomsignature.types.TomList tom_l1=tom_match8_1_tomList; if ( true ) {






            //System.out.println("expandVariable.9: "+l1+"(" + termList + ")");

            // process a list of subterms
            ArrayList list = new ArrayList();
            while(!tom_termList.isEmpty()) {
              list.add(expander.expandVariable(tom_l1.getHead(), tom_termList.getHead()));
              tom_termList= tom_termList.getTail();
              tom_l1= tom_l1.getTail();
            }
            TomList newTermList = ASTFactory.makeList(list);

            // process a list of guards
            list.clear();
            // build the list of variables that occur in the lhs
            HashSet set = new HashSet();
            collectVariable(set,newTermList);
            TomList varList = ASTFactory.makeList(set);
            //System.out.println("varList = " + varList);
            while(!tom_guardList.isEmpty()) {
              list.add(expander.replaceInstantiatedVariable(varList, tom_guardList.getHead()));
              tom_guardList= tom_guardList.getTail();
            }
            TomList newGuardList = ASTFactory.makeList(list);
            //System.out.println("newGuardList = " + newGuardList);
            return tom_make_Pattern(tom_subjectList,newTermList,newGuardList);
           } } } } } }

       } } } } } } } } } } return super.visit_Pattern(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); if (tom_is_fun_sym_RecordAppl(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_option=tom_get_slot_RecordAppl_option(tom_match9_1); { tom.engine.adt.tomsignature.types.NameList tom_match9_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match9_1); { tom.engine.adt.tomsignature.types.SlotList tom_match9_1_slots=tom_get_slot_RecordAppl_slots(tom_match9_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints=tom_get_slot_RecordAppl_constraints(tom_match9_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match9_1_option; if (tom_is_fun_sym_concTomName(tom_match9_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match9_1_nameList; { tom.engine.adt.tomsignature.types.NameList tom_match9_1_nameList_list1=tom_match9_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match9_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match9_1_nameList_1=tom_get_head_concTomName_NameList(tom_match9_1_nameList_list1);tom_match9_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match9_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match9_1_nameList_1) ||  false ) { { String  tom_match9_1_nameList_1_string=tom_get_slot_Name_string(tom_match9_1_nameList_1); { String  tom_tomName=tom_match9_1_nameList_1_string; { tom.engine.adt.tomsignature.types.SlotList tom_slotList=tom_match9_1_slots; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match9_1_constraints; if ( true ) {



        TomSymbol tomSymbol = null;
        if(tom_tomName.equals("")) {
          if(contextSubject.hasAstType()) {
            tomSymbol = expander.getSymbolFromType(contextSubject.getAstType());
            if(tomSymbol==null) {
              throw new TomRuntimeException("No symbol found for type '" + contextSubject.getAstType() + "'");
            }
            tom_nameList= tom_cons_list_concTomName(tomSymbol.getAstName(),tom_empty_list_concTomName());
          }
        } else {
          tomSymbol = expander.getSymbolFromName(tom_tomName);
        }

        if(tomSymbol != null) {
          SlotList subterm = expander.expandVariableList(tomSymbol, tom_slotList);
          ConstraintList newConstraints = expander.expandVariableConstraintList(tom_make_TomTypeToTomTerm(getSymbolCodomain(tomSymbol)),tom_constraints);
          return tom_make_RecordAppl(tom_option,tom_nameList,subterm,newConstraints);
        } else {
           if(contextSubject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1=(( tom.engine.adt.tomsignature.types.TomTerm)contextSubject); if (tom_is_fun_sym_TomTypeToTomTerm(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match10_1_astType=tom_get_slot_TomTypeToTomTerm_astType(tom_match10_1); if (tom_is_fun_sym_Type(tom_match10_1_astType) ||  false ) { if ( true ) {

              SlotList subterm = expander.expandVariableList(tom_make_emptySymbol(), tom_slotList);
              ConstraintList newConstraints = expander.expandVariableConstraintList(tom_make_emptyTerm(),tom_constraints);
              return tom_make_RecordAppl(tom_option,tom_nameList,subterm,newConstraints);
             } } } } if (tom_is_fun_sym_Variable(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match10_1_astType=tom_get_slot_Variable_astType(tom_match10_1); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match10_1_astType; if ( true ) {

              ConstraintList newConstraints = expander.expandVariableConstraintList(tom_make_TomTypeToTomTerm(tom_type),tom_constraints);
              SlotList subterm = expander.expandVariableList(tom_make_emptySymbol(), tom_slotList);
              return tom_make_RecordAppl(tom_option,tom_nameList,subterm,newConstraints);
             } } } } if (tom_is_fun_sym_Tom(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_tomList=tom_get_slot_Tom_tomList(tom_match10_1); if (tom_is_fun_sym_concTomTerm(tom_match10_1_tomList) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_tomList_list1=tom_match10_1_tomList; { tom.engine.adt.tomsignature.types.TomList tom_match10_1_tomList_begin1=tom_match10_1_tomList_list1; { tom.engine.adt.tomsignature.types.TomList tom_match10_1_tomList_end1=tom_match10_1_tomList_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match10_1_tomList_end1))) {tom_match10_1_tomList_list1=tom_match10_1_tomList_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_tomList_2=tom_get_head_concTomTerm_TomList(tom_match10_1_tomList_list1);tom_match10_1_tomList_list1=tom_get_tail_concTomTerm_TomList(tom_match10_1_tomList_list1); if (tom_is_fun_sym_Variable(tom_match10_1_tomList_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_tomList_2_astName=tom_get_slot_Variable_astName(tom_match10_1_tomList_2); if (tom_is_fun_sym_Name(tom_match10_1_tomList_2_astName) ||  false ) { { String  tom_match10_1_tomList_2_astName_string=tom_get_slot_Name_string(tom_match10_1_tomList_2_astName); if ( true ) {

              ConstraintList newConstraints = expander.expandVariableConstraintList(contextSubject,tom_constraints);
              SlotList subterm = expander.expandVariableList(tom_make_emptySymbol(), tom_slotList);
              return tom_make_RecordAppl(tom_option,tom_nameList,subterm,newConstraints);
             } } } } } }tom_match10_1_tomList_end1=tom_get_tail_concTomTerm_TomList(tom_match10_1_tomList_end1); } }tom_match10_1_tomList_list1=tom_match10_1_tomList_begin1; } } } } } } } if ( true ) {


              // do nothing

              //System.out.println("contextSubject = " + contextSubject);
              //System.out.println("subject        = " + subject);

             } } }

        }
       } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_Variable(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_option=tom_get_slot_Variable_option(tom_match9_1); { tom.engine.adt.tomsignature.types.TomName tom_match9_1_astName=tom_get_slot_Variable_astName(tom_match9_1); { tom.engine.adt.tomsignature.types.TomType tom_match9_1_astType=tom_get_slot_Variable_astType(tom_match9_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints=tom_get_slot_Variable_constraints(tom_match9_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match9_1_option; { tom.engine.adt.tomsignature.types.TomName tom_astName=tom_match9_1_astName; if (tom_is_fun_sym_TomTypeAlone(tom_match9_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match9_1_constraints; if ( true ) { if(contextSubject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match11_1=(( tom.engine.adt.tomsignature.types.TomTerm)contextSubject); if (tom_is_fun_sym_TomTypeToTomTerm(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_context=tom_match11_1; { tom.engine.adt.tomsignature.types.TomType tom_match11_1_astType=tom_get_slot_TomTypeToTomTerm_astType(tom_match11_1); if (tom_is_fun_sym_Type(tom_match11_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match11_1_astType; if ( true ) {





            // create a variable
            return tom_make_Variable(tom_option,tom_astName,tom_type,expander.expandVariableConstraintList(tom_context,tom_constraints));
           } } } } } } } }

       } } } } } } } } } } if (tom_is_fun_sym_Variable(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_option=tom_get_slot_Variable_option(tom_match9_1); { tom.engine.adt.tomsignature.types.TomName tom_match9_1_astName=tom_get_slot_Variable_astName(tom_match9_1); { tom.engine.adt.tomsignature.types.TomType tom_match9_1_astType=tom_get_slot_Variable_astType(tom_match9_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints=tom_get_slot_Variable_constraints(tom_match9_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match9_1_option; { tom.engine.adt.tomsignature.types.TomName tom_astName=tom_match9_1_astName; if (tom_is_fun_sym_TomTypeAlone(tom_match9_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match9_1_constraints; if ( true ) { if(contextSubject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match12_1=(( tom.engine.adt.tomsignature.types.TomTerm)contextSubject); if (tom_is_fun_sym_Variable(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match12_1_astType=tom_get_slot_Variable_astType(tom_match12_1); { tom.engine.adt.tomsignature.types.TomType tom_type1=tom_match12_1_astType; if ( true ) {




            ConstraintList newConstraints = expander.expandVariableConstraintList(tom_make_TomTypeToTomTerm(tom_type1),tom_constraints);
            // create a variable
            return tom_make_Variable(tom_option,tom_astName,tom_type1,newConstraints);
           } } } } } }

       } } } } } } } } } } if (tom_is_fun_sym_Variable(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_option=tom_get_slot_Variable_option(tom_match9_1); { tom.engine.adt.tomsignature.types.TomName tom_match9_1_astName=tom_get_slot_Variable_astName(tom_match9_1); { tom.engine.adt.tomsignature.types.TomType tom_match9_1_astType=tom_get_slot_Variable_astType(tom_match9_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints=tom_get_slot_Variable_constraints(tom_match9_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match9_1_option; if (tom_is_fun_sym_Name(tom_match9_1_astName) ||  false ) { { String  tom_match9_1_astName_string=tom_get_slot_Name_string(tom_match9_1_astName); { String  tom_strName=tom_match9_1_astName_string; if (tom_is_fun_sym_TomTypeAlone(tom_match9_1_astType) ||  false ) { { String  tom_match9_1_astType_string=tom_get_slot_TomTypeAlone_string(tom_match9_1_astType); { String  tom_tomType=tom_match9_1_astType_string; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match9_1_constraints; if ( true ) {


        // create a variable
        TomType localType = expander.getType(tom_tomType);
        if(localType != null) {
          return tom_make_Variable(tom_option,tom_make_Name(tom_strName),localType,tom_constraints);
        } else {
          // do nothing
        }
       } } } } } } } } } } } } } } if (tom_is_fun_sym_Placeholder(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_option=tom_get_slot_Placeholder_option(tom_match9_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints=tom_get_slot_Placeholder_constraints(tom_match9_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match9_1_option; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match9_1_constraints; if ( true ) { if(contextSubject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match13_1=(( tom.engine.adt.tomsignature.types.TomTerm)contextSubject); if (tom_is_fun_sym_TomTypeToTomTerm(tom_match13_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match13_1_astType=tom_get_slot_TomTypeToTomTerm_astType(tom_match13_1); if (tom_is_fun_sym_Type(tom_match13_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match13_1_astType; if ( true ) {



 
            ConstraintList newConstraints = expander.expandVariableConstraintList(tom_make_TomTypeToTomTerm(tom_type),tom_constraints);
            // create an unamed variable
            return tom_make_UnamedVariable(tom_option,tom_type,newConstraints);
           } } } } } } }

       } } } } } } if (tom_is_fun_sym_Placeholder(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_option=tom_get_slot_Placeholder_option(tom_match9_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints=tom_get_slot_Placeholder_constraints(tom_match9_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match9_1_option; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match9_1_constraints; if ( true ) { if(contextSubject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match14_1=(( tom.engine.adt.tomsignature.types.TomTerm)contextSubject); if (tom_is_fun_sym_Variable(tom_match14_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match14_1_astType=tom_get_slot_Variable_astType(tom_match14_1); { tom.engine.adt.tomsignature.types.TomType tom_type1=tom_match14_1_astType; if ( true ) {




            ConstraintList newConstraints = expander.expandVariableConstraintList(tom_make_TomTypeToTomTerm(tom_type1),tom_constraints);
            // create an unamed variable
            return tom_make_UnamedVariable(tom_option,tom_type1,newConstraints);
           } } } } } }

       } } } } } } if (tom_is_fun_sym_TLVar(tom_match9_1) ||  false ) { { String  tom_match9_1_strName=tom_get_slot_TLVar_strName(tom_match9_1); { tom.engine.adt.tomsignature.types.TomType tom_match9_1_astType=tom_get_slot_TLVar_astType(tom_match9_1); { String  tom_strName=tom_match9_1_strName; if (tom_is_fun_sym_TomTypeAlone(tom_match9_1_astType) ||  false ) { { String  tom_match9_1_astType_string=tom_get_slot_TomTypeAlone_string(tom_match9_1_astType); { String  tom_tomType=tom_match9_1_astType_string; if ( true ) {


        // create a variable: its type is ensured by checker
        TomType localType = expander.getType(tom_tomType);
        OptionList option = ASTFactory.makeOption();
        return tom_make_Variable(option,tom_make_Name(tom_strName),localType,tom_empty_list_concConstraint());
       } } } } } } } } if (tom_is_fun_sym_TLVar(tom_match9_1) ||  false ) { { String  tom_match9_1_strName=tom_get_slot_TLVar_strName(tom_match9_1); { tom.engine.adt.tomsignature.types.TomType tom_match9_1_astType=tom_get_slot_TLVar_astType(tom_match9_1); { String  tom_strName=tom_match9_1_strName; if (tom_is_fun_sym_Type(tom_match9_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_localType=tom_match9_1_astType; if ( true ) {


        // create a variable: its type is ensured by checker
        OptionList option = ASTFactory.makeOption();
        return tom_make_Variable(option,tom_make_Name(tom_strName),tom_localType,tom_empty_list_concConstraint());
       } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_replace_expandVariable( tom.engine.adt.tomsignature.types.TomTerm t0,  TomKernelExpander  t1) { return new replace_expandVariable(t0,t1); }




  protected TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    if(contextSubject == null) {
      throw new TomRuntimeException("expandVariable: null contextSubject");
    }
    try{
      return  (TomTerm) MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_replace_expandVariable(contextSubject,this),tom_make_All(tom_make_MuVar("x"))))).visit(subject);
    }catch(VisitFailure e){return subject;}
  }

  protected TomType expandType(TomTerm contextSubject, TomType subject) {
    if(contextSubject == null) {
      throw new TomRuntimeException("expandVariable: null contextSubject");
    }
    try{
      return  (TomType) MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_replace_expandVariable(contextSubject,this),tom_make_All(tom_make_MuVar("x"))))).visit(subject);
    }catch(VisitFailure e){return subject;}
  }

  private Instruction expandVariableInstruction(TomTerm contextSubject, Instruction subject) {
    if(contextSubject == null) {
      throw new TomRuntimeException("expandVariable: null contextSubject");
    }
    try{
      return  (Instruction) MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_replace_expandVariable(contextSubject,this),tom_make_All(tom_make_MuVar("x"))))).visit(subject);
    }catch(VisitFailure e){return subject;}
  }

  protected ConstraintList expandVariableConstraintList(TomTerm contextSubject, ConstraintList subject) {
    if(contextSubject == null) {
      throw new TomRuntimeException("expandVariable: null contextSubject");
    }
    try{
      return  (ConstraintList) MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_replace_expandVariable(contextSubject,this),tom_make_All(tom_make_MuVar("x"))))).visit(subject);
    }catch(VisitFailure e){return subject;}
  }

  protected PatternInstructionList expandVariablePatternInstructionList(TomTerm contextSubject, PatternInstructionList subject) {
    if(contextSubject == null) {
      throw new TomRuntimeException("expandVariable: null contextSubject");
    }
    try{
      return  (PatternInstructionList) MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_replace_expandVariable(contextSubject,this),tom_make_All(tom_make_MuVar("x"))))).visit(subject);
    }catch(VisitFailure e){return subject;}
  }


  private TomType getTypeFromVariableList(TomName name, TomList list) {

    //System.out.println("name = " + name);
    //System.out.println("list = " + list);

     if(name instanceof  tom.engine.adt.tomsignature.types.TomName) { { tom.engine.adt.tomsignature.types.TomName tom_match15_1=(( tom.engine.adt.tomsignature.types.TomName)name); if(list instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match15_2=(( tom.engine.adt.tomsignature.types.TomList)list); if (tom_is_fun_sym_emptyTomList(tom_match15_2) ||  false ) { if ( true ) {

        System.out.println("getTypeFromVariableList. Stange case '" + name + "' not found");
        throw new TomRuntimeException("getTypeFromVariableList. Stange case '" + name + "' not found");
       } } { tom.engine.adt.tomsignature.types.TomName tom_varName=tom_match15_1; if (tom_is_fun_sym_manyTomList(tom_match15_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match15_2_head=tom_get_slot_manyTomList_head(tom_match15_2); { tom.engine.adt.tomsignature.types.TomList tom_match15_2_tail=tom_get_slot_manyTomList_tail(tom_match15_2); if (tom_is_fun_sym_Variable(tom_match15_2_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match15_2_head_astName=tom_get_slot_Variable_astName(tom_match15_2_head); { tom.engine.adt.tomsignature.types.TomType tom_match15_2_head_astType=tom_get_slot_Variable_astType(tom_match15_2_head); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_varName_1=tom_match15_2_head_astName; if (tom_terms_equal_TomName(tom_varName, tom_renamedvar_varName_1)) { if (tom_is_fun_sym_Type(tom_match15_2_head_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match15_2_head_astType; if ( true ) {

 return tom_type;  } } } } } } } } } } } } { tom.engine.adt.tomsignature.types.TomName tom_varName=tom_match15_1; if (tom_is_fun_sym_manyTomList(tom_match15_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match15_2_head=tom_get_slot_manyTomList_head(tom_match15_2); { tom.engine.adt.tomsignature.types.TomList tom_match15_2_tail=tom_get_slot_manyTomList_tail(tom_match15_2); if (tom_is_fun_sym_VariableStar(tom_match15_2_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match15_2_head_astName=tom_get_slot_VariableStar_astName(tom_match15_2_head); { tom.engine.adt.tomsignature.types.TomType tom_match15_2_head_astType=tom_get_slot_VariableStar_astType(tom_match15_2_head); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_varName_1=tom_match15_2_head_astName; if (tom_terms_equal_TomName(tom_varName, tom_renamedvar_varName_1)) { if (tom_is_fun_sym_Type(tom_match15_2_head_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match15_2_head_astType; if ( true ) {
 return tom_type;  } } } } } } } } } } } } if (tom_is_fun_sym_manyTomList(tom_match15_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match15_2_head=tom_get_slot_manyTomList_head(tom_match15_2); { tom.engine.adt.tomsignature.types.TomList tom_match15_2_tail=tom_get_slot_manyTomList_tail(tom_match15_2); { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match15_2_tail; if ( true ) {
 return getTypeFromVariableList(name,tom_tail);  } } } } } } } } }


    return null;
  }

  /*
   * perform type inference of subterms (subtermList)
   * under a given operator (symbol)
   */
  private SlotList expandVariableList(TomSymbol symbol, SlotList subtermList) {
    if(symbol == null) {
      throw new TomRuntimeException("expandVariableList: null symbol");
    }

    if(subtermList.isEmpty()) {
      return tom_make_emptySlotList();
    }

    //System.out.println("symbol = " + subject.getastname());
     if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match16_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol); if(subtermList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match16_2=(( tom.engine.adt.tomsignature.types.SlotList)subtermList); if (tom_is_fun_sym_emptySymbol(tom_match16_1) ||  false ) { if (tom_is_fun_sym_manySlotList(tom_match16_2) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match16_2_head=tom_get_slot_manySlotList_head(tom_match16_2); { tom.engine.adt.tomsignature.types.SlotList tom_match16_2_tail=tom_get_slot_manySlotList_tail(tom_match16_2); if (tom_is_fun_sym_PairSlotAppl(tom_match16_2_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match16_2_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match16_2_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match16_2_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match16_2_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match16_2_head_slotName; { tom.engine.adt.tomsignature.types.TomTerm tom_slotAppl=tom_match16_2_head_appl; { tom.engine.adt.tomsignature.types.SlotList tom_tail=tom_match16_2_tail; if ( true ) {

        /*
         * if the top symbol is unknown, the subterms
         * are expanded in an empty context
         */
        return tom_make_manySlotList(tom_make_PairSlotAppl(tom_slotName,expandVariable(tom_make_emptyTerm(),tom_slotAppl)),expandVariableList(symbol,tom_tail));
       } } } } } } } } } } } if (tom_is_fun_sym_Symbol(tom_match16_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomSymbol tom_symb=tom_match16_1; { tom.engine.adt.tomsignature.types.TomType tom_match16_1_typesToType=tom_get_slot_Symbol_typesToType(tom_match16_1); if (tom_is_fun_sym_TypesToType(tom_match16_1_typesToType) ||  false ) { { tom.engine.adt.tomsignature.types.TomTypeList tom_match16_1_typesToType_domain=tom_get_slot_TypesToType_domain(tom_match16_1_typesToType); { tom.engine.adt.tomsignature.types.TomType tom_match16_1_typesToType_codomain=tom_get_slot_TypesToType_codomain(tom_match16_1_typesToType); { tom.engine.adt.tomsignature.types.TomTypeList tom_typelist=tom_match16_1_typesToType_domain; { tom.engine.adt.tomsignature.types.TomType tom_codomain=tom_match16_1_typesToType_codomain; if (tom_is_fun_sym_manySlotList(tom_match16_2) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match16_2_head=tom_get_slot_manySlotList_head(tom_match16_2); { tom.engine.adt.tomsignature.types.SlotList tom_match16_2_tail=tom_get_slot_manySlotList_tail(tom_match16_2); if (tom_is_fun_sym_PairSlotAppl(tom_match16_2_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match16_2_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match16_2_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match16_2_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match16_2_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match16_2_head_slotName; { tom.engine.adt.tomsignature.types.TomTerm tom_slotAppl=tom_match16_2_head_appl; { tom.engine.adt.tomsignature.types.SlotList tom_tail=tom_match16_2_tail; if ( true ) {



          // process a list of subterms and a list of types
          if(isListOperator(tom_symb) || isArrayOperator(tom_symb)) {
            /*
             * todo:
             * when the symbol is an associative operator,
             * the signature has the form: list conc( element* )
             * the list of types is reduced to the singleton { element }
             *
             * consider a pattern: conc(e1*,x,e2*,y,e3*)
             *  assign the type "element" to each subterm: x and y
             *  assign the type "list" to each subtermlist: e1*,e2* and e3*
             */

            //System.out.println("listoperator: " + symb);
            //System.out.println("subtermlist: " + subtermlist);

             if(tom_slotAppl instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match17_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom_slotAppl); if (tom_is_fun_sym_VariableStar(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match17_1_option=tom_get_slot_VariableStar_option(tom_match17_1); { tom.engine.adt.tomsignature.types.TomName tom_match17_1_astName=tom_get_slot_VariableStar_astName(tom_match17_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1_constraints=tom_get_slot_VariableStar_constraints(tom_match17_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match17_1_option; { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match17_1_astName; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match17_1_constraints; if ( true ) {

                ConstraintList newconstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(tom_codomain),tom_constraints);
                return tom_make_manySlotList(tom_make_PairSlotAppl(tom_slotName,tom_make_VariableStar(tom_option,tom_name,tom_codomain,newconstraints)),expandVariableList(symbol,tom_tail));
               } } } } } } } } if (tom_is_fun_sym_UnamedVariableStar(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match17_1_option=tom_get_slot_UnamedVariableStar_option(tom_match17_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1_constraints=tom_get_slot_UnamedVariableStar_constraints(tom_match17_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match17_1_option; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match17_1_constraints; if ( true ) {


                ConstraintList newconstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(tom_codomain),tom_constraints);
                return tom_make_manySlotList(tom_make_PairSlotAppl(tom_slotName,tom_make_UnamedVariableStar(tom_option,tom_codomain,newconstraints)),expandVariableList(symbol,tom_tail));
               } } } } } } if ( true ) {


                TomType domaintype = tom_typelist.getHead();
                return tom_make_manySlotList(tom_make_PairSlotAppl(tom_slotName,expandVariable(tom_make_TomTypeToTomTerm(domaintype),tom_slotAppl)),expandVariableList(symbol,tom_tail));

               } } }

          } else {
            //TomType type = `typelist.getHead();
            return tom_make_manySlotList(tom_make_PairSlotAppl(tom_slotName,expandVariable(tom_make_TomTypeToTomTerm(getSlotType(tom_symb,tom_slotName)),tom_slotAppl)),expandVariableList(symbol,tom_tail));
          }
         } } } } } } } } } } } } } } } } } } } } } }

    System.out.println("expandVariableList: strange case: '" + symbol + "'");
    throw new TomRuntimeException("expandVariableList: strange case: '" + symbol + "'");
  }

   private static class replace_replaceInstantiatedVariable  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  tom.engine.adt.tomsignature.types.TomList instantiatedVariable;  public replace_replaceInstantiatedVariable(  tom.engine.adt.tomsignature.types.TomList instantiatedVariable ) { super(tom_make_Identity() ); this.instantiatedVariable=instantiatedVariable; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match18_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); { tom.engine.adt.tomsignature.types.TomTerm tom_subject=tom_match18_1; if ( true ) { if(tom_subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom_subject); if(instantiatedVariable instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match19_2=(( tom.engine.adt.tomsignature.types.TomList)instantiatedVariable); if (tom_is_fun_sym_RecordAppl(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match19_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match19_1); { tom.engine.adt.tomsignature.types.SlotList tom_match19_1_slots=tom_get_slot_RecordAppl_slots(tom_match19_1); if (tom_is_fun_sym_concTomName(tom_match19_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match19_1_nameList_list1=tom_match19_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match19_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_get_head_concTomName_NameList(tom_match19_1_nameList_list1);tom_match19_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match19_1_nameList_list1); if (tom_is_empty_concTomName_NameList(tom_match19_1_nameList_list1)) { if (tom_is_fun_sym_concSlot(tom_match19_1_slots) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match19_1_slots_list1=tom_match19_1_slots; if (tom_is_empty_concSlot_SlotList(tom_match19_1_slots_list1)) { if (tom_is_fun_sym_concTomTerm(tom_match19_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match19_2_list1=tom_match19_2; { tom.engine.adt.tomsignature.types.TomList tom_match19_2_begin1=tom_match19_2_list1; { tom.engine.adt.tomsignature.types.TomList tom_match19_2_end1=tom_match19_2_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match19_2_end1))) {tom_match19_2_list1=tom_match19_2_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match19_2_2=tom_get_head_concTomTerm_TomList(tom_match19_2_list1);tom_match19_2_list1=tom_get_tail_concTomTerm_TomList(tom_match19_2_list1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match19_2_2; {boolean tom_bool_match19_2_2= false ; { tom.engine.adt.tomsignature.types.TomName tom_match19_2_2_astName= null ; if (tom_is_fun_sym_Variable(tom_match19_2_2)) {tom_bool_match19_2_2= true ;tom_match19_2_2_astName=tom_get_slot_Variable_astName(tom_match19_2_2); } else { if (tom_is_fun_sym_VariableStar(tom_match19_2_2)) {tom_bool_match19_2_2= true ;tom_match19_2_2_astName=tom_get_slot_VariableStar_astName(tom_match19_2_2); } } if (tom_bool_match19_2_2) { { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_opNameAST_1=tom_match19_2_2_astName; if (tom_terms_equal_TomName(tom_opNameAST, tom_renamedvar_opNameAST_1)) { if ( true ) {




            return tom_var;
           } } } } } } } }tom_match19_2_end1=tom_get_tail_concTomTerm_TomList(tom_match19_2_end1); } }tom_match19_2_list1=tom_match19_2_begin1; } } } } } } } } } } } } } } } } if (tom_is_fun_sym_Variable(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match19_1_astName=tom_get_slot_Variable_astName(tom_match19_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match19_1_astName; if (tom_is_fun_sym_concTomTerm(tom_match19_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match19_2_list1=tom_match19_2; { tom.engine.adt.tomsignature.types.TomList tom_match19_2_begin1=tom_match19_2_list1; { tom.engine.adt.tomsignature.types.TomList tom_match19_2_end1=tom_match19_2_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match19_2_end1))) {tom_match19_2_list1=tom_match19_2_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match19_2_2=tom_get_head_concTomTerm_TomList(tom_match19_2_list1);tom_match19_2_list1=tom_get_tail_concTomTerm_TomList(tom_match19_2_list1); if (tom_is_fun_sym_Variable(tom_match19_2_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match19_2_2; { tom.engine.adt.tomsignature.types.TomName tom_match19_2_2_astName=tom_get_slot_Variable_astName(tom_match19_2_2); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_opNameAST_1=tom_match19_2_2_astName; if (tom_terms_equal_TomName(tom_opNameAST, tom_renamedvar_opNameAST_1)) { if ( true ) {

            return tom_var;
           } } } } } } }tom_match19_2_end1=tom_get_tail_concTomTerm_TomList(tom_match19_2_end1); } }tom_match19_2_list1=tom_match19_2_begin1; } } } } } } } } if (tom_is_fun_sym_VariableStar(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match19_1_astName=tom_get_slot_VariableStar_astName(tom_match19_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match19_1_astName; if (tom_is_fun_sym_concTomTerm(tom_match19_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match19_2_list1=tom_match19_2; { tom.engine.adt.tomsignature.types.TomList tom_match19_2_begin1=tom_match19_2_list1; { tom.engine.adt.tomsignature.types.TomList tom_match19_2_end1=tom_match19_2_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match19_2_end1))) {tom_match19_2_list1=tom_match19_2_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match19_2_2=tom_get_head_concTomTerm_TomList(tom_match19_2_list1);tom_match19_2_list1=tom_get_tail_concTomTerm_TomList(tom_match19_2_list1); if (tom_is_fun_sym_VariableStar(tom_match19_2_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match19_2_2; { tom.engine.adt.tomsignature.types.TomName tom_match19_2_2_astName=tom_get_slot_VariableStar_astName(tom_match19_2_2); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_opNameAST_1=tom_match19_2_2_astName; if (tom_terms_equal_TomName(tom_opNameAST, tom_renamedvar_opNameAST_1)) { if ( true ) {

            return tom_var;
           } } } } } } }tom_match19_2_end1=tom_get_tail_concTomTerm_TomList(tom_match19_2_end1); } }tom_match19_2_list1=tom_match19_2_begin1; } } } } } } } } } } } }

       } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_replace_replaceInstantiatedVariable( tom.engine.adt.tomsignature.types.TomList t0) { return new replace_replaceInstantiatedVariable(t0); }



  protected TomTerm replaceInstantiatedVariable(TomList instantiatedVariable, TomTerm subject) {
    if(instantiatedVariable == null) {
      throw new TomRuntimeException("replaceInstantiatedVariable: null instantiatedVariable");
    }
    try{
      return (TomTerm) MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_replace_replaceInstantiatedVariable(instantiatedVariable),tom_make_All(tom_make_MuVar("x"))))).visit(subject);
    }catch(VisitFailure e){
      return subject;}
  }
  protected Instruction replaceInstantiatedVariableInstruction(TomList instantiatedVariable, Instruction subject) {

    if(instantiatedVariable == null) {
      throw new TomRuntimeException("replaceInstantiatedVariable: null instantiatedVariable");
    }
    try{
      return (Instruction) MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_replace_replaceInstantiatedVariable(instantiatedVariable),tom_make_All(tom_make_MuVar("x"))))).visit(subject);
    }catch(VisitFailure e){
      return subject;
    }
  }

  private TomType getType(String tomName) {
    TomType tomType = getSymbolTable().getType(tomName);
    return tomType;
  }

}
