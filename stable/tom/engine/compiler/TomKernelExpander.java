/* Generated by TOM (version 2.2rc1): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2005, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom.compiler;
  
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import jtom.TomBase;
import jtom.adt.tomsignature.types.*;
import jtom.exception.TomRuntimeException;
import jtom.tools.SymbolTable;
import tom.library.traversal.Replace2;
import aterm.ATerm;

public class TomKernelExpander extends TomBase {

  private SymbolTable symbolTable;
  
  public TomKernelExpander() {
    super();
  }

  public void setSymbolTable(SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
  }

  private SymbolTable getSymbolTable() {
    return symbolTable;
  }

  protected TomSymbol getSymbolFromName(String tomName) {
    return getSymbolFromName(tomName, getSymbolTable());
  }
  
  protected TomSymbol getSymbolFromType(TomType tomType) {
    return getSymbolFromType(tomType, getSymbolTable());
  }
  // ------------------------------------------------------------
  /* Generated by TOM (version 2.2rc1): Do not edit this file *//* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/      
  // ------------------------------------------------------------
  
  /*
   * The "expandVariable" phase expands RecordAppl into Variable
   * we focus on
   * - RewriteRule
   * - MatchingCondition
   * - EqualityCondition
   * - Match
   *
   * Variable and TermAppl are are expanded in the TomTerm case
   */

  protected Replace2 replace_expandVariable = new Replace2() { 
      public ATerm apply(ATerm subject, Object arg1) {
        TomTerm contextSubject = (TomTerm)arg1;

        if(contextSubject == null) {
          throw new TomRuntimeException("expandVariable: null contextSubject");
        }

          //System.out.println("expandVariable:\n\t" + subject );
        if(subject instanceof Option) {
           { jtom.adt.tomsignature.types.Option tom_match1_1=(( jtom.adt.tomsignature.types.Option)subject); if(tom_is_fun_sym_OriginTracking(tom_match1_1) ||  false ) {
 return subject;  }}

        } else if(subject instanceof TargetLanguage) {
           { jtom.adt.tomsignature.types.TargetLanguage tom_match2_1=(( jtom.adt.tomsignature.types.TargetLanguage)subject); if(tom_is_fun_sym_TL(tom_match2_1) ||  false ) {
 return subject;  } if(tom_is_fun_sym_ITL(tom_match2_1) ||  false ) {
 return subject;  } if(tom_is_fun_sym_Comment(tom_match2_1) ||  false ) {
 return subject;  }}

        } else if(subject instanceof TomType) {
           { jtom.adt.tomsignature.types.TomType tom_match3_1=(( jtom.adt.tomsignature.types.TomType)subject); if(tom_is_fun_sym_TomTypeAlone(tom_match3_1) ||  false ) { { String  tom_match3_1_string=tom_get_slot_TomTypeAlone_string(tom_match3_1); { String  tomType=tom_match3_1_string;

              TomType type = getType(tomType);
              if(type != null) {
                return type;
              } else {
                return subject; // useful for TomTypeAlone("unknown type")
              }
            }} }}

        } else if(subject instanceof TomRule) {
           { jtom.adt.tomsignature.types.TomRule tom_match4_1=(( jtom.adt.tomsignature.types.TomRule)subject); if(tom_is_fun_sym_RewriteRule(tom_match4_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_lhs=tom_get_slot_RewriteRule_lhs(tom_match4_1); { jtom.adt.tomsignature.types.TomTerm tom_match4_1_rhs=tom_get_slot_RewriteRule_rhs(tom_match4_1); { jtom.adt.tomsignature.types.InstructionList tom_match4_1_condList=tom_get_slot_RewriteRule_condList(tom_match4_1); { jtom.adt.tomsignature.types.OptionList tom_match4_1_option=tom_get_slot_RewriteRule_option(tom_match4_1); if(tom_is_fun_sym_Term(tom_match4_1_lhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_lhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match4_1_lhs); if(tom_is_fun_sym_RecordAppl(tom_match4_1_lhs_tomTerm) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match4_1_lhs_tomTerm; { jtom.adt.tomsignature.types.OptionList tom_match4_1_lhs_tomTerm_option=tom_get_slot_RecordAppl_option(tom_match4_1_lhs_tomTerm); { jtom.adt.tomsignature.types.NameList tom_match4_1_lhs_tomTerm_nameList=tom_get_slot_RecordAppl_nameList(tom_match4_1_lhs_tomTerm); { jtom.adt.tomsignature.types.OptionList optionList=tom_match4_1_lhs_tomTerm_option; if(tom_is_fun_sym_concTomName(tom_match4_1_lhs_tomTerm_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match4_1_lhs_tomTerm_nameList_list1=tom_match4_1_lhs_tomTerm_nameList; if(!(tom_is_empty_NameList(tom_match4_1_lhs_tomTerm_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match4_1_lhs_tomTerm_nameList_1=tom_get_head_NameList(tom_match4_1_lhs_tomTerm_nameList_list1);tom_match4_1_lhs_tomTerm_nameList_list1=tom_get_tail_NameList(tom_match4_1_lhs_tomTerm_nameList_list1); if(tom_is_fun_sym_Name(tom_match4_1_lhs_tomTerm_nameList_1) ||  false ) { { String  tom_match4_1_lhs_tomTerm_nameList_1_string=tom_get_slot_Name_string(tom_match4_1_lhs_tomTerm_nameList_1); { String  tomName=tom_match4_1_lhs_tomTerm_nameList_1_string; if(tom_is_empty_NameList(tom_match4_1_lhs_tomTerm_nameList_list1)) { if(tom_is_fun_sym_Term(tom_match4_1_rhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_rhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match4_1_rhs); { jtom.adt.tomsignature.types.TomTerm rhs=tom_match4_1_rhs_tomTerm; { jtom.adt.tomsignature.types.InstructionList condList=tom_match4_1_condList; { jtom.adt.tomsignature.types.OptionList option=tom_match4_1_option;



 
              TomSymbol tomSymbol = getSymbolFromName(tomName);
              TomType symbolType = getSymbolCodomain(tomSymbol);
              TomTerm newLhs = tom_make_Term(expandVariable(contextSubject,lhs));
              // build the list of variables that occur in the lhs
              HashSet set = new HashSet();
              collectVariable(set,newLhs);
              TomList varList = getAstFactory().makeList(set);
              InstructionList newCondList = tom_make_emptyInstructionList();
              while(!condList.isEmpty()) {
                Instruction cond = condList.getHead();

                Instruction newCond = replaceInstantiatedVariableInstruction(varList,cond);
                newCond = expandVariableInstruction(contextSubject,newCond);

                newCondList = tom_make_manyInstructionList(newCond,newCondList);
                collectVariable(set,newCond); 
                varList = getAstFactory().makeList(set);
                condList = condList.getTail();
              }

              TomTerm newRhs = replaceInstantiatedVariable(varList,rhs);
              newRhs = tom_make_Term(expandVariable(tom_make_TomTypeToTomTerm(symbolType),newRhs));
              
              return tom_make_RewriteRule(newLhs,newRhs,newCondList,option);
            }}}} } }}} }} }} }}}}} }} }}}}} }}
 // end match
        } else if(subject instanceof Instruction) {
           { jtom.adt.tomsignature.types.TomTerm tom_match5_1=(( jtom.adt.tomsignature.types.TomTerm)contextSubject); { jtom.adt.tomsignature.types.Instruction tom_match5_2=(( jtom.adt.tomsignature.types.Instruction)subject); { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_MatchingCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_lhs=tom_get_slot_MatchingCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_rhs=tom_get_slot_MatchingCondition_rhs(tom_match5_2); if(tom_is_fun_sym_RecordAppl(tom_match5_2_lhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_lhs; { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_2_lhs); if(tom_is_fun_sym_concTomName(tom_match5_2_lhs_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList_list1=tom_match5_2_lhs_nameList; if(!(tom_is_empty_NameList(tom_match5_2_lhs_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_lhs_nameList_1=tom_get_head_NameList(tom_match5_2_lhs_nameList_list1);tom_match5_2_lhs_nameList_list1=tom_get_tail_NameList(tom_match5_2_lhs_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_2_lhs_nameList_1) ||  false ) { { String  tom_match5_2_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match5_2_lhs_nameList_1); { String  lhsName=tom_match5_2_lhs_nameList_1_string; if(tom_is_empty_NameList(tom_match5_2_lhs_nameList_list1)) { if(tom_is_fun_sym_Variable(tom_match5_2_rhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_rhs; { jtom.adt.tomsignature.types.TomName tom_match5_2_rhs_astName=tom_get_slot_Variable_astName(tom_match5_2_rhs); { jtom.adt.tomsignature.types.TomType tom_match5_2_rhs_astType=tom_get_slot_Variable_astType(tom_match5_2_rhs); if(tom_is_fun_sym_Name(tom_match5_2_rhs_astName) ||  false ) { { String  tom_match5_2_rhs_astName_string=tom_get_slot_Name_string(tom_match5_2_rhs_astName); { String  rhsName=tom_match5_2_rhs_astName_string; { jtom.adt.tomsignature.types.TomType type=tom_match5_2_rhs_astType;


              // rhs is a variable
              TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs);
              return tom_make_MatchingCondition(newLhs,rhs);
            }}} }}}} } }}} }} }} }}} }}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_MatchingCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_lhs=tom_get_slot_MatchingCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_rhs=tom_get_slot_MatchingCondition_rhs(tom_match5_2); if(tom_is_fun_sym_RecordAppl(tom_match5_2_lhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_lhs; { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_2_lhs); if(tom_is_fun_sym_concTomName(tom_match5_2_lhs_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList_list1=tom_match5_2_lhs_nameList; if(!(tom_is_empty_NameList(tom_match5_2_lhs_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_lhs_nameList_1=tom_get_head_NameList(tom_match5_2_lhs_nameList_list1);tom_match5_2_lhs_nameList_list1=tom_get_tail_NameList(tom_match5_2_lhs_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_2_lhs_nameList_1) ||  false ) { { String  tom_match5_2_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match5_2_lhs_nameList_1); { String  lhsName=tom_match5_2_lhs_nameList_1_string; if(tom_is_fun_sym_RecordAppl(tom_match5_2_rhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_rhs; { jtom.adt.tomsignature.types.NameList tom_match5_2_rhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_2_rhs); if(tom_is_fun_sym_concTomName(tom_match5_2_rhs_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_rhs_nameList_list1=tom_match5_2_rhs_nameList; if(!(tom_is_empty_NameList(tom_match5_2_rhs_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_rhs_nameList_1=tom_get_head_NameList(tom_match5_2_rhs_nameList_list1);tom_match5_2_rhs_nameList_list1=tom_get_tail_NameList(tom_match5_2_rhs_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_2_rhs_nameList_1) ||  false ) { { String  tom_match5_2_rhs_nameList_1_string=tom_get_slot_Name_string(tom_match5_2_rhs_nameList_1); { String  rhsName=tom_match5_2_rhs_nameList_1_string; if(tom_is_empty_NameList(tom_match5_2_rhs_nameList_list1)) {



               TomSymbol lhsSymbol = getSymbolFromName(lhsName);
               TomSymbol rhsSymbol = getSymbolFromName(rhsName);
               TomType type;
               // rhs is an application
               if(lhsSymbol != null) {
                 type = getSymbolCodomain(lhsSymbol);
               } else if(rhsSymbol != null) {
                 type = getSymbolCodomain(rhsSymbol);
               } else {
                 // lhs is a variable, but rhs has an unknown top symbol
                 // since lhs is a fresh variable, we look for rhs type
                 throw new TomRuntimeException("rhs has an unknown sort: " + rhsName);
               }
              
               TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs);
               TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs);
               return tom_make_MatchingCondition(newLhs,newRhs);
             }}} }} }} }}} }}} }} }} }}} }}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_EqualityCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_lhs=tom_get_slot_EqualityCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_rhs=tom_get_slot_EqualityCondition_rhs(tom_match5_2); if(tom_is_fun_sym_Variable(tom_match5_2_lhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_lhs; { jtom.adt.tomsignature.types.TomName tom_match5_2_lhs_astName=tom_get_slot_Variable_astName(tom_match5_2_lhs); { jtom.adt.tomsignature.types.TomType tom_match5_2_lhs_astType=tom_get_slot_Variable_astType(tom_match5_2_lhs); if(tom_is_fun_sym_Name(tom_match5_2_lhs_astName) ||  false ) { { String  tom_match5_2_lhs_astName_string=tom_get_slot_Name_string(tom_match5_2_lhs_astName); { String  lhsName=tom_match5_2_lhs_astName_string; { jtom.adt.tomsignature.types.TomType type=tom_match5_2_lhs_astType; if(tom_is_fun_sym_Variable(tom_match5_2_rhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_rhs; { jtom.adt.tomsignature.types.TomName tom_match5_2_rhs_astName=tom_get_slot_Variable_astName(tom_match5_2_rhs); { jtom.adt.tomsignature.types.TomType tom_match5_2_rhs_astType=tom_get_slot_Variable_astType(tom_match5_2_rhs); if(tom_is_fun_sym_Name(tom_match5_2_rhs_astName) ||  false ) { { String  tom_match5_2_rhs_astName_string=tom_get_slot_Name_string(tom_match5_2_rhs_astName); { String  rhsName=tom_match5_2_rhs_astName_string; { jtom.adt.tomsignature.types.TomType tom_renamedvar_type_1=tom_match5_2_rhs_astType; if(tom_terms_equal_TomType(type, tom_renamedvar_type_1)) {



              return tom_make_TypedEqualityCondition(type,lhs,rhs);
             }}}} }}}} }}}} }}}} }}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_EqualityCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_lhs=tom_get_slot_EqualityCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_rhs=tom_get_slot_EqualityCondition_rhs(tom_match5_2); if(tom_is_fun_sym_Variable(tom_match5_2_lhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_lhs; { jtom.adt.tomsignature.types.TomName tom_match5_2_lhs_astName=tom_get_slot_Variable_astName(tom_match5_2_lhs); { jtom.adt.tomsignature.types.TomType tom_match5_2_lhs_astType=tom_get_slot_Variable_astType(tom_match5_2_lhs); if(tom_is_fun_sym_Name(tom_match5_2_lhs_astName) ||  false ) { { String  tom_match5_2_lhs_astName_string=tom_get_slot_Name_string(tom_match5_2_lhs_astName); { String  lhsName=tom_match5_2_lhs_astName_string; { jtom.adt.tomsignature.types.TomType type=tom_match5_2_lhs_astType; if(tom_is_fun_sym_RecordAppl(tom_match5_2_rhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_rhs; { jtom.adt.tomsignature.types.NameList tom_match5_2_rhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_2_rhs); if(tom_is_fun_sym_concTomName(tom_match5_2_rhs_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_rhs_nameList_list1=tom_match5_2_rhs_nameList; if(!(tom_is_empty_NameList(tom_match5_2_rhs_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_rhs_nameList_1=tom_get_head_NameList(tom_match5_2_rhs_nameList_list1);tom_match5_2_rhs_nameList_list1=tom_get_tail_NameList(tom_match5_2_rhs_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_2_rhs_nameList_1) ||  false ) { { String  tom_match5_2_rhs_nameList_1_string=tom_get_slot_Name_string(tom_match5_2_rhs_nameList_1); { String  rhsName=tom_match5_2_rhs_nameList_1_string; if(tom_is_empty_NameList(tom_match5_2_rhs_nameList_list1)) {



              TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs);
              return tom_make_TypedEqualityCondition(type,lhs,newRhs);
             }}} }} }} }}} }}}} }}}} }}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_EqualityCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_lhs=tom_get_slot_EqualityCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_rhs=tom_get_slot_EqualityCondition_rhs(tom_match5_2); if(tom_is_fun_sym_RecordAppl(tom_match5_2_lhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_lhs; { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_2_lhs); if(tom_is_fun_sym_concTomName(tom_match5_2_lhs_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList_list1=tom_match5_2_lhs_nameList; if(!(tom_is_empty_NameList(tom_match5_2_lhs_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_lhs_nameList_1=tom_get_head_NameList(tom_match5_2_lhs_nameList_list1);tom_match5_2_lhs_nameList_list1=tom_get_tail_NameList(tom_match5_2_lhs_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_2_lhs_nameList_1) ||  false ) { { String  tom_match5_2_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match5_2_lhs_nameList_1); { String  lhsName=tom_match5_2_lhs_nameList_1_string; if(tom_is_empty_NameList(tom_match5_2_lhs_nameList_list1)) { if(tom_is_fun_sym_Variable(tom_match5_2_rhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_rhs; { jtom.adt.tomsignature.types.TomName tom_match5_2_rhs_astName=tom_get_slot_Variable_astName(tom_match5_2_rhs); { jtom.adt.tomsignature.types.TomType tom_match5_2_rhs_astType=tom_get_slot_Variable_astType(tom_match5_2_rhs); if(tom_is_fun_sym_Name(tom_match5_2_rhs_astName) ||  false ) { { String  tom_match5_2_rhs_astName_string=tom_get_slot_Name_string(tom_match5_2_rhs_astName); { String  rhsName=tom_match5_2_rhs_astName_string; { jtom.adt.tomsignature.types.TomType type=tom_match5_2_rhs_astType;



              TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs);
              return tom_make_TypedEqualityCondition(type,newLhs,rhs);
            }}} }}}} } }}} }} }} }}} }}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_EqualityCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_lhs=tom_get_slot_EqualityCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_rhs=tom_get_slot_EqualityCondition_rhs(tom_match5_2); if(tom_is_fun_sym_RecordAppl(tom_match5_2_lhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_lhs; { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_2_lhs); if(tom_is_fun_sym_concTomName(tom_match5_2_lhs_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_lhs_nameList_list1=tom_match5_2_lhs_nameList; if(!(tom_is_empty_NameList(tom_match5_2_lhs_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_lhs_nameList_1=tom_get_head_NameList(tom_match5_2_lhs_nameList_list1);tom_match5_2_lhs_nameList_list1=tom_get_tail_NameList(tom_match5_2_lhs_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_2_lhs_nameList_1) ||  false ) { { String  tom_match5_2_lhs_nameList_1_string=tom_get_slot_Name_string(tom_match5_2_lhs_nameList_1); { String  lhsName=tom_match5_2_lhs_nameList_1_string; if(tom_is_empty_NameList(tom_match5_2_lhs_nameList_list1)) { if(tom_is_fun_sym_RecordAppl(tom_match5_2_rhs) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_rhs; { jtom.adt.tomsignature.types.NameList tom_match5_2_rhs_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_2_rhs); if(tom_is_fun_sym_concTomName(tom_match5_2_rhs_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_rhs_nameList_list1=tom_match5_2_rhs_nameList; if(!(tom_is_empty_NameList(tom_match5_2_rhs_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_rhs_nameList_1=tom_get_head_NameList(tom_match5_2_rhs_nameList_list1);tom_match5_2_rhs_nameList_list1=tom_get_tail_NameList(tom_match5_2_rhs_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_2_rhs_nameList_1) ||  false ) { { String  tom_match5_2_rhs_nameList_1_string=tom_get_slot_Name_string(tom_match5_2_rhs_nameList_1); { String  rhsName=tom_match5_2_rhs_nameList_1_string; if(tom_is_empty_NameList(tom_match5_2_rhs_nameList_list1)) {



               TomSymbol lhsSymbol = getSymbolFromName(lhsName);
               TomSymbol rhsSymbol = getSymbolFromName(rhsName);
               TomType type;
              
               if(lhsSymbol != null) {
                 type = getSymbolCodomain(lhsSymbol);
               } else if(rhsSymbol != null) {
                 type = getSymbolCodomain(rhsSymbol);
               } else {
                 // lhs and rhs have an unknown top symbol
                 throw new TomRuntimeException("lhs and rhs have an unknown sort: " + lhsName + ",  " + rhsName);
               }
              
               //System.out.println("EqualityCondition type = " + type);
              
               TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs);
               TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs);
                
               //System.out.println("lhs    = " + lhs);
               //System.out.println("newLhs = " + newLhs);
              
               return tom_make_TypedEqualityCondition(type,newLhs,newRhs);
              }}} }} }} }}} } }}} }} }} }}} }}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_Match(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_subjectList=tom_get_slot_Match_subjectList(tom_match5_2); { jtom.adt.tomsignature.types.PatternInstructionList tom_match5_2_astPatternInstructionList=tom_get_slot_Match_astPatternInstructionList(tom_match5_2); { jtom.adt.tomsignature.types.OptionList tom_match5_2_option=tom_get_slot_Match_option(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tomSubjectList=tom_match5_2_subjectList; { jtom.adt.tomsignature.types.PatternInstructionList patternInstructionList=tom_match5_2_astPatternInstructionList; { jtom.adt.tomsignature.types.OptionList option=tom_match5_2_option;


               //System.out.println("tomSubjectList = " + tomSubjectList);
               TomTerm newSubjectList = expandVariable(context,tomSubjectList);
               //System.out.println("newSubjectList = " + newSubjectList);
               PatternInstructionList newPatternInstructionList = expandVariablePatternInstructionList(newSubjectList,patternInstructionList);

               /*
                * expansion of RawAction into TypedAction
                */
               PatternInstructionList typedActionPatternInstructionList = tom_empty_list_concPatternInstruction();
               PatternList negativePattern = tom_empty_list_concPattern();
               while(!newPatternInstructionList.isEmpty()) {
                 PatternInstruction head = newPatternInstructionList.getHead();
                  { jtom.adt.tomsignature.types.PatternInstruction tom_match6_1=(( jtom.adt.tomsignature.types.PatternInstruction)head); if(tom_is_fun_sym_PatternInstruction(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.Pattern tom_match6_1_pattern=tom_get_slot_PatternInstruction_pattern(tom_match6_1); { jtom.adt.tomsignature.types.Instruction tom_match6_1_action=tom_get_slot_PatternInstruction_action(tom_match6_1); { jtom.adt.tomsignature.types.OptionList tom_match6_1_option=tom_get_slot_PatternInstruction_option(tom_match6_1); { jtom.adt.tomsignature.types.Pattern pattern=tom_match6_1_pattern; if(tom_is_fun_sym_RawAction(tom_match6_1_action) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match6_1_action_astInstruction=tom_get_slot_RawAction_astInstruction(tom_match6_1_action); { jtom.adt.tomsignature.types.Instruction actionInst=tom_match6_1_action_astInstruction; { jtom.adt.tomsignature.types.OptionList piOption=tom_match6_1_option;

                     Instruction typedAction = tom_make_TypedAction(actionInst,tom_cons_list_concPattern(pattern,tom_empty_list_concPattern()),negativePattern);
                     typedActionPatternInstructionList = (PatternInstructionList) typedActionPatternInstructionList.append(tom_make_PatternInstruction(pattern,typedAction,piOption));
                     negativePattern = (PatternList) negativePattern.append(pattern);
                   }}} }}}}} }}

                 newPatternInstructionList = newPatternInstructionList.getTail();
               }

               return tom_make_Match(newSubjectList,typedActionPatternInstructionList,option);
             }}}}}} }}}}
 // end match
        } else if(subject instanceof Pattern) {
           { jtom.adt.tomsignature.types.TomTerm tom_match7_1=(( jtom.adt.tomsignature.types.TomTerm)contextSubject); { jtom.adt.tomsignature.types.Pattern tom_match7_2=(( jtom.adt.tomsignature.types.Pattern)subject); if(tom_is_fun_sym_SubjectList(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match7_1_tomList=tom_get_slot_SubjectList_tomList(tom_match7_1); { jtom.adt.tomsignature.types.TomList l1=tom_match7_1_tomList; if(tom_is_fun_sym_Pattern(tom_match7_2) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match7_2_tomList=tom_get_slot_Pattern_tomList(tom_match7_2); { jtom.adt.tomsignature.types.TomList tom_match7_2_guards=tom_get_slot_Pattern_guards(tom_match7_2); { jtom.adt.tomsignature.types.TomList subjectList=tom_match7_2_tomList; { jtom.adt.tomsignature.types.TomList guardList=tom_match7_2_guards;

               //System.out.println("expandVariable.9: "+l1+"(" + subjectList + ")");
                
               // process a list of subterms
               ArrayList list = new ArrayList();
               while(!subjectList.isEmpty()) {
                 list.add(expandVariable(l1.getHead(), subjectList.getHead()));
                 subjectList = subjectList.getTail();
                 l1 = l1.getTail();
               }
               TomList newSubjectList = getAstFactory().makeList(list);

               // process a list of guards
               list.clear();
              // build the list of variables that occur in the lhs
              HashSet set = new HashSet();
              collectVariable(set,newSubjectList);
              TomList varList = getAstFactory().makeList(set);
              //System.out.println("varList = " + varList);
               while(!guardList.isEmpty()) {
                 list.add(replaceInstantiatedVariable(varList, guardList.getHead()));
                 guardList = guardList.getTail();
               }
               TomList newGuardList = getAstFactory().makeList(list);
               //System.out.println("newGuardList = " + newGuardList);
               return tom_make_Pattern(newSubjectList,newGuardList);
             }}}} }}} }}}
 // end match
        } else if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomTerm tom_match8_1=(( jtom.adt.tomsignature.types.TomTerm)contextSubject); { jtom.adt.tomsignature.types.TomTerm tom_match8_2=(( jtom.adt.tomsignature.types.TomTerm)subject); { jtom.adt.tomsignature.types.TomTerm context=tom_match8_1; if(tom_is_fun_sym_RecordAppl(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match8_2_option=tom_get_slot_RecordAppl_option(tom_match8_2); { jtom.adt.tomsignature.types.NameList tom_match8_2_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_2); { jtom.adt.tomsignature.types.SlotList tom_match8_2_slots=tom_get_slot_RecordAppl_slots(tom_match8_2); { jtom.adt.tomsignature.types.ConstraintList tom_match8_2_constraints=tom_get_slot_RecordAppl_constraints(tom_match8_2); { jtom.adt.tomsignature.types.OptionList option=tom_match8_2_option; if(tom_is_fun_sym_concTomName(tom_match8_2_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList nameList=tom_match8_2_nameList; { jtom.adt.tomsignature.types.NameList tom_match8_2_nameList_list1=tom_match8_2_nameList; if(!(tom_is_empty_NameList(tom_match8_2_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_2_nameList_1=tom_get_head_NameList(tom_match8_2_nameList_list1);tom_match8_2_nameList_list1=tom_get_tail_NameList(tom_match8_2_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_2_nameList_1) ||  false ) { { String  tom_match8_2_nameList_1_string=tom_get_slot_Name_string(tom_match8_2_nameList_1); { String  tomName=tom_match8_2_nameList_1_string; { jtom.adt.tomsignature.types.SlotList slotList=tom_match8_2_slots; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match8_2_constraints;

               TomSymbol tomSymbol = null;
               if(tomName.equals("")) {
                 if(contextSubject.hasAstType()) {
                   tomSymbol = getSymbolFromType(contextSubject.getAstType());
                   nameList = tom_cons_list_concTomName(tomSymbol.getAstName(),tom_empty_list_concTomName());
                   if(tomSymbol==null) {
                     throw new TomRuntimeException("No symbol found for type '" + contextSubject.getAstType() + "'");
                   } 
                 }
               } else {
                 tomSymbol = getSymbolFromName(tomName);
               }

               if(tomSymbol != null) {
                 SlotList subterm = expandVariableList(tomSymbol, slotList);
                 ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(getSymbolCodomain(tomSymbol)),constraints);
                 return tom_make_RecordAppl(option,nameList,subterm,newConstraints);
               } else {
                  { jtom.adt.tomsignature.types.TomTerm tom_match9_1=(( jtom.adt.tomsignature.types.TomTerm)contextSubject); if(tom_is_fun_sym_TomTypeToTomTerm(tom_match9_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match9_1_astType=tom_get_slot_TomTypeToTomTerm_astType(tom_match9_1); if(tom_is_fun_sym_Type(tom_match9_1_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match9_1_astType;

                     if(slotList.isEmpty()  && !hasConstructor(option)) {
                       ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type),constraints);
                       return tom_make_Variable(option,nameList.getHead(),type,newConstraints);
                     } else {
                       SlotList subterm = expandVariableList(tom_make_emptySymbol(), slotList);
                       ConstraintList newConstraints = expandVariableConstraintList(tom_make_emptyTerm(),constraints);
                       return tom_make_RecordAppl(option,nameList,subterm,newConstraints);
                     }
                   } }} } if(tom_is_fun_sym_Variable(tom_match9_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match9_1_astType=tom_get_slot_Variable_astType(tom_match9_1); { jtom.adt.tomsignature.types.TomType type=tom_match9_1_astType;

                     ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type),constraints);
                     if(slotList.isEmpty()  && !hasConstructor(option)) {
                       return tom_make_Variable(option,nameList.getHead(),type,newConstraints);
                     } else {
                       SlotList subterm = expandVariableList(tom_make_emptySymbol(), slotList);
                       return tom_make_RecordAppl(option,nameList,subterm,newConstraints);
                     }
                   }} } if(tom_is_fun_sym_Tom(tom_match9_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match9_1_tomList=tom_get_slot_Tom_tomList(tom_match9_1); if(tom_is_fun_sym_concTomTerm(tom_match9_1_tomList) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match9_1_tomList_list1=tom_match9_1_tomList; { jtom.adt.tomsignature.types.TomList tom_match9_1_tomList_begin1=tom_match9_1_tomList_list1; { jtom.adt.tomsignature.types.TomList tom_match9_1_tomList_end1=tom_match9_1_tomList_list1;{ while (!(tom_is_empty_TomList(tom_match9_1_tomList_end1))) {tom_match9_1_tomList_list1=tom_match9_1_tomList_end1;{ { jtom.adt.tomsignature.types.TomTerm tom_match9_1_tomList_2=tom_get_head_TomList(tom_match9_1_tomList_list1);tom_match9_1_tomList_list1=tom_get_tail_TomList(tom_match9_1_tomList_list1); if(tom_is_fun_sym_Variable(tom_match9_1_tomList_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match9_1_tomList_2; { jtom.adt.tomsignature.types.TomName tom_match9_1_tomList_2_astName=tom_get_slot_Variable_astName(tom_match9_1_tomList_2); if(tom_is_fun_sym_Name(tom_match9_1_tomList_2_astName) ||  false ) { { String  tom_match9_1_tomList_2_astName_string=tom_get_slot_Name_string(tom_match9_1_tomList_2_astName); { String  varName=tom_match9_1_tomList_2_astName_string;

                     ConstraintList newConstraints = expandVariableConstraintList(contextSubject,constraints);
                     if(slotList.isEmpty()  && !hasConstructor(option) && tomName==varName) {
                       return var;
                     } else {
                       SlotList subterm = expandVariableList(tom_make_emptySymbol(), slotList);
                       return tom_make_RecordAppl(option,nameList,subterm,newConstraints);
                     }
                   }} }}} }}tom_match9_1_tomList_end1=tom_get_tail_TomList(tom_match9_1_tomList_end1);} }tom_match9_1_tomList_list1=tom_match9_1_tomList_begin1;}}}} }} }


                     // do nothing
                     
                     //System.out.println("contextSubject = " + contextSubject);
                     //System.out.println("subject        = " + subject);

                   }

               }
             }}}} }} }}} }}}}}} }} if(tom_is_fun_sym_TomTypeToTomTerm(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm context=tom_match8_1; { jtom.adt.tomsignature.types.TomType tom_match8_1_astType=tom_get_slot_TomTypeToTomTerm_astType(tom_match8_1); if(tom_is_fun_sym_Type(tom_match8_1_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match8_1_astType; if(tom_is_fun_sym_Variable(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match8_2_option=tom_get_slot_Variable_option(tom_match8_2); { jtom.adt.tomsignature.types.TomName tom_match8_2_astName=tom_get_slot_Variable_astName(tom_match8_2); { jtom.adt.tomsignature.types.TomType tom_match8_2_astType=tom_get_slot_Variable_astType(tom_match8_2); { jtom.adt.tomsignature.types.ConstraintList tom_match8_2_constraints=tom_get_slot_Variable_constraints(tom_match8_2); { jtom.adt.tomsignature.types.OptionList option=tom_match8_2_option; { jtom.adt.tomsignature.types.TomName astName=tom_match8_2_astName; if(tom_is_fun_sym_TomTypeAlone(tom_match8_2_astType) ||  false ) { { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match8_2_constraints;



               // create a variable
               return tom_make_Variable(option,astName,type,expandVariableConstraintList(context,constraints));
             } }}}}}}} }} }}} } { jtom.adt.tomsignature.types.TomTerm context=tom_match8_1; if(tom_is_fun_sym_Variable(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match8_2; { jtom.adt.tomsignature.types.OptionList tom_match8_2_option=tom_get_slot_Variable_option(tom_match8_2); { jtom.adt.tomsignature.types.TomName tom_match8_2_astName=tom_get_slot_Variable_astName(tom_match8_2); { jtom.adt.tomsignature.types.TomType tom_match8_2_astType=tom_get_slot_Variable_astType(tom_match8_2); { jtom.adt.tomsignature.types.ConstraintList tom_match8_2_constraints=tom_get_slot_Variable_constraints(tom_match8_2); { jtom.adt.tomsignature.types.OptionList option=tom_match8_2_option; if(tom_is_fun_sym_Name(tom_match8_2_astName) ||  false ) { { String  tom_match8_2_astName_string=tom_get_slot_Name_string(tom_match8_2_astName); { String  strName=tom_match8_2_astName_string; if(tom_is_fun_sym_TomTypeAlone(tom_match8_2_astType) ||  false ) { { String  tom_match8_2_astType_string=tom_get_slot_TomTypeAlone_string(tom_match8_2_astType); { String  tomType=tom_match8_2_astType_string; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match8_2_constraints;


               // create a variable
               TomType localType = getType(tomType);
               if(localType != null) {
                 return tom_make_Variable(option,tom_make_Name(strName),localType,constraints);
               } else {
                 // do nothing
               }
             }}} }}} }}}}}}} }} if(tom_is_fun_sym_TomTypeToTomTerm(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match8_1_astType=tom_get_slot_TomTypeToTomTerm_astType(tom_match8_1); if(tom_is_fun_sym_Type(tom_match8_1_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match8_1_astType; if(tom_is_fun_sym_Placeholder(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm p=tom_match8_2; { jtom.adt.tomsignature.types.OptionList tom_match8_2_option=tom_get_slot_Placeholder_option(tom_match8_2); { jtom.adt.tomsignature.types.ConstraintList tom_match8_2_constraints=tom_get_slot_Placeholder_constraints(tom_match8_2); { jtom.adt.tomsignature.types.OptionList option=tom_match8_2_option; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match8_2_constraints;


               ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type),constraints);
               // create an unamed variable
               return tom_make_UnamedVariable(option,type,newConstraints);
             }}}}} }} }} } if(tom_is_fun_sym_Variable(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match8_1_option=tom_get_slot_Variable_option(tom_match8_1); { jtom.adt.tomsignature.types.TomName tom_match8_1_astName=tom_get_slot_Variable_astName(tom_match8_1); { jtom.adt.tomsignature.types.TomType tom_match8_1_astType=tom_get_slot_Variable_astType(tom_match8_1); { jtom.adt.tomsignature.types.OptionList option1=tom_match8_1_option; { jtom.adt.tomsignature.types.TomName name1=tom_match8_1_astName; { jtom.adt.tomsignature.types.TomType type1=tom_match8_1_astType; if(tom_is_fun_sym_Placeholder(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm p=tom_match8_2; { jtom.adt.tomsignature.types.OptionList tom_match8_2_option=tom_get_slot_Placeholder_option(tom_match8_2); { jtom.adt.tomsignature.types.ConstraintList tom_match8_2_constraints=tom_get_slot_Placeholder_constraints(tom_match8_2); { jtom.adt.tomsignature.types.OptionList option=tom_match8_2_option; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match8_2_constraints;


               ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type1),constraints);
               // create an unamed variable
               return tom_make_UnamedVariable(option,type1,newConstraints);
             }}}}} }}}}}}} } { jtom.adt.tomsignature.types.TomTerm context=tom_match8_1; if(tom_is_fun_sym_TLVar(tom_match8_2) ||  false ) { { String  tom_match8_2_strName=tom_get_slot_TLVar_strName(tom_match8_2); { jtom.adt.tomsignature.types.TomType tom_match8_2_astType=tom_get_slot_TLVar_astType(tom_match8_2); { String  strName=tom_match8_2_strName; if(tom_is_fun_sym_TomTypeAlone(tom_match8_2_astType) ||  false ) { { String  tom_match8_2_astType_string=tom_get_slot_TomTypeAlone_string(tom_match8_2_astType); { String  tomType=tom_match8_2_astType_string;


               // create a variable: its type is ensured by checker
               TomType localType = getType(tomType);
               OptionList option = getAstFactory().makeOption();
               return tom_make_Variable(option,tom_make_Name(strName),localType,tom_empty_list_concConstraint());
             }} }}}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match8_1; if(tom_is_fun_sym_TLVar(tom_match8_2) ||  false ) { { String  tom_match8_2_strName=tom_get_slot_TLVar_strName(tom_match8_2); { jtom.adt.tomsignature.types.TomType tom_match8_2_astType=tom_get_slot_TLVar_astType(tom_match8_2); { String  strName=tom_match8_2_strName; if(tom_is_fun_sym_Type(tom_match8_2_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType localType=tom_match8_2_astType;


               // create a variable: its type is ensured by checker
               OptionList option = getAstFactory().makeOption();
               return tom_make_Variable(option,tom_make_Name(strName),localType,tom_empty_list_concConstraint());
             } }}}} }}}}

 // end match
        } // end instanceof TomTerm
          //System.out.println("TomKernelCompiler.expandVariable default:\n\t" + subject );
          //System.out.println("subject: " + subject);
          //System.out.println("context: " + contextSubject);
        return traversal().genericTraversal(subject,this,contextSubject);
      } // end apply
    }; // end new

  protected TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return (TomTerm) replace_expandVariable.apply(subject,contextSubject); 
  }

  private Instruction expandVariableInstruction(TomTerm contextSubject, Instruction subject) {
    return (Instruction) replace_expandVariable.apply(subject,contextSubject); 
  }

  protected ConstraintList expandVariableConstraintList(TomTerm contextSubject, ConstraintList subject) {
    return (ConstraintList) replace_expandVariable.apply(subject,contextSubject); 
  }

  protected PatternInstructionList expandVariablePatternInstructionList(TomTerm contextSubject, PatternInstructionList subject) {
    return (PatternInstructionList) replace_expandVariable.apply(subject,contextSubject); 
  }

  private TomType getTypeFromVariableList(TomName name, TomList list) {

    //System.out.println("name = " + name);
    //System.out.println("list = " + list);
    
     { jtom.adt.tomsignature.types.TomName tom_match10_1=(( jtom.adt.tomsignature.types.TomName)name); { jtom.adt.tomsignature.types.TomList tom_match10_2=(( jtom.adt.tomsignature.types.TomList)list); if(tom_is_fun_sym_emptyTomList(tom_match10_2) ||  false ) {

         System.out.println("getTypeFromVariableList. Stange case '" + name + "' not found");
         throw new TomRuntimeException("getTypeFromVariableList. Stange case '" + name + "' not found");
        } { jtom.adt.tomsignature.types.TomName varName=tom_match10_1; if(tom_is_fun_sym_manyTomList(tom_match10_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match10_2_head=tom_get_slot_manyTomList_head(tom_match10_2); { jtom.adt.tomsignature.types.TomList tom_match10_2_tail=tom_get_slot_manyTomList_tail(tom_match10_2); if(tom_is_fun_sym_Variable(tom_match10_2_head) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match10_2_head_astName=tom_get_slot_Variable_astName(tom_match10_2_head); { jtom.adt.tomsignature.types.TomType tom_match10_2_head_astType=tom_get_slot_Variable_astType(tom_match10_2_head); { jtom.adt.tomsignature.types.TomName tom_renamedvar_varName_1=tom_match10_2_head_astName; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match10_2_head_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match10_2_head_astType; { jtom.adt.tomsignature.types.TomList tail=tom_match10_2_tail;

 return type; }} } }}}} }}} }} { jtom.adt.tomsignature.types.TomName varName=tom_match10_1; if(tom_is_fun_sym_manyTomList(tom_match10_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match10_2_head=tom_get_slot_manyTomList_head(tom_match10_2); { jtom.adt.tomsignature.types.TomList tom_match10_2_tail=tom_get_slot_manyTomList_tail(tom_match10_2); if(tom_is_fun_sym_VariableStar(tom_match10_2_head) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match10_2_head_astName=tom_get_slot_VariableStar_astName(tom_match10_2_head); { jtom.adt.tomsignature.types.TomType tom_match10_2_head_astType=tom_get_slot_VariableStar_astType(tom_match10_2_head); { jtom.adt.tomsignature.types.TomName tom_renamedvar_varName_1=tom_match10_2_head_astName; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match10_2_head_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match10_2_head_astType; { jtom.adt.tomsignature.types.TomList tail=tom_match10_2_tail;
 return type; }} } }}}} }}} }} if(tom_is_fun_sym_manyTomList(tom_match10_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match10_2_head=tom_get_slot_manyTomList_head(tom_match10_2); { jtom.adt.tomsignature.types.TomList tom_match10_2_tail=tom_get_slot_manyTomList_tail(tom_match10_2); { jtom.adt.tomsignature.types.TomTerm t=tom_match10_2_head; { jtom.adt.tomsignature.types.TomList tail=tom_match10_2_tail;
 return getTypeFromVariableList(name,tail); }}}} }}}


    return null;
  }
 
  /*
   * perform type inference of subterms (subtermList) 
   * under a given operator (symbol) 
   */
  private SlotList expandVariableList(TomSymbol symbol, SlotList subtermList) {
    if(symbol == null) {
      throw new TomRuntimeException("expandVariableList: null symbol");
    }

    if(subtermList.isEmpty()) {
      return tom_make_emptySlotList();
    }

    //System.out.println("symbol = " + subject.getAstName());
     { jtom.adt.tomsignature.types.TomSymbol tom_match11_1=(( jtom.adt.tomsignature.types.TomSymbol)symbol); { jtom.adt.tomsignature.types.SlotList tom_match11_2=(( jtom.adt.tomsignature.types.SlotList)subtermList); if(tom_is_fun_sym_emptySymbol(tom_match11_1) ||  false ) { if(tom_is_fun_sym_manySlotList(tom_match11_2) ||  false ) { { jtom.adt.tomsignature.types.Slot tom_match11_2_head=tom_get_slot_manySlotList_head(tom_match11_2); { jtom.adt.tomsignature.types.SlotList tom_match11_2_tail=tom_get_slot_manySlotList_tail(tom_match11_2); if(tom_is_fun_sym_PairSlotAppl(tom_match11_2_head) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match11_2_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match11_2_head); { jtom.adt.tomsignature.types.TomTerm tom_match11_2_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match11_2_head); { jtom.adt.tomsignature.types.TomName slotName=tom_match11_2_head_slotName; { jtom.adt.tomsignature.types.TomTerm slotAppl=tom_match11_2_head_appl; { jtom.adt.tomsignature.types.SlotList tail=tom_match11_2_tail;

        /*
         * If the top symbol is unknown, the subterms
         * are expanded in an empty context
         */
        return tom_make_manySlotList(tom_make_PairSlotAppl(slotName,expandVariable(tom_make_emptyTerm(),slotAppl)),expandVariableList(symbol,tail));
      }}}}} }}} } } if(tom_is_fun_sym_Symbol(tom_match11_1) ||  false ) { { jtom.adt.tomsignature.types.TomSymbol symb=tom_match11_1; { jtom.adt.tomsignature.types.TomType tom_match11_1_typesToType=tom_get_slot_Symbol_typesToType(tom_match11_1); { jtom.adt.tomsignature.types.PairNameDeclList tom_match11_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match11_1); if(tom_is_fun_sym_TypesToType(tom_match11_1_typesToType) ||  false ) { { jtom.adt.tomsignature.types.TomTypeList tom_match11_1_typesToType_domain=tom_get_slot_TypesToType_domain(tom_match11_1_typesToType); { jtom.adt.tomsignature.types.TomType tom_match11_1_typesToType_codomain=tom_get_slot_TypesToType_codomain(tom_match11_1_typesToType); { jtom.adt.tomsignature.types.TomTypeList typeList=tom_match11_1_typesToType_domain; { jtom.adt.tomsignature.types.TomType codomain=tom_match11_1_typesToType_codomain; { jtom.adt.tomsignature.types.PairNameDeclList pairNameDeclList=tom_match11_1_pairNameDeclList; if(tom_is_fun_sym_manySlotList(tom_match11_2) ||  false ) { { jtom.adt.tomsignature.types.Slot tom_match11_2_head=tom_get_slot_manySlotList_head(tom_match11_2); { jtom.adt.tomsignature.types.SlotList tom_match11_2_tail=tom_get_slot_manySlotList_tail(tom_match11_2); if(tom_is_fun_sym_PairSlotAppl(tom_match11_2_head) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match11_2_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match11_2_head); { jtom.adt.tomsignature.types.TomTerm tom_match11_2_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match11_2_head); { jtom.adt.tomsignature.types.TomName slotName=tom_match11_2_head_slotName; { jtom.adt.tomsignature.types.TomTerm slotAppl=tom_match11_2_head_appl; { jtom.adt.tomsignature.types.SlotList tail=tom_match11_2_tail;



        // process a list of subterms and a list of types
        if(isListOperator(symb) || isArrayOperator(symb)) {
          /*
           * TODO:
           * when the symbol is an associative operator,
           * the signature has the form: List conc( Element* )
           * the list of types is reduced to the singleton { Element }
           *
           * consider a pattern: conc(E1*,x,E2*,y,E3*)
           *  assign the type "Element" to each subterm: x and y
           *  assign the type "List" to each subtermList: E1*,E2* and E3*
           */

          //System.out.println("listOperator: " + symb);
          //System.out.println("subtermList: " + subtermList);
          
           { jtom.adt.tomsignature.types.TomTerm tom_match12_1=(( jtom.adt.tomsignature.types.TomTerm)slotAppl); if(tom_is_fun_sym_VariableStar(tom_match12_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match12_1_option=tom_get_slot_VariableStar_option(tom_match12_1); { jtom.adt.tomsignature.types.TomName tom_match12_1_astName=tom_get_slot_VariableStar_astName(tom_match12_1); { jtom.adt.tomsignature.types.ConstraintList tom_match12_1_constraints=tom_get_slot_VariableStar_constraints(tom_match12_1); { jtom.adt.tomsignature.types.OptionList option=tom_match12_1_option; { jtom.adt.tomsignature.types.TomName name=tom_match12_1_astName; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match12_1_constraints;

              ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(codomain),constraints);
              return tom_make_manySlotList(tom_make_PairSlotAppl(slotName,tom_make_VariableStar(option,name,codomain,newConstraints)),expandVariableList(symbol,tail));
            }}}}}} } if(tom_is_fun_sym_UnamedVariableStar(tom_match12_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match12_1_option=tom_get_slot_UnamedVariableStar_option(tom_match12_1); { jtom.adt.tomsignature.types.ConstraintList tom_match12_1_constraints=tom_get_slot_UnamedVariableStar_constraints(tom_match12_1); { jtom.adt.tomsignature.types.OptionList option=tom_match12_1_option; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match12_1_constraints;


              ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(codomain),constraints);
              return tom_make_manySlotList(tom_make_PairSlotAppl(slotName,tom_make_UnamedVariableStar(option,codomain,newConstraints)),expandVariableList(symbol,tail));
            }}}} }


              TomType domainType = typeList.getHead();
              return tom_make_manySlotList(tom_make_PairSlotAppl(slotName,expandVariable(tom_make_TomTypeToTomTerm(domainType),slotAppl)),expandVariableList(symbol,tail));

            }

        } else {
          TomType type = typeList.getHead();
          return tom_make_manySlotList(tom_make_PairSlotAppl(slotName,expandVariable(tom_make_TomTypeToTomTerm(getSlotType(symb,slotName)),slotAppl)),expandVariableList(symbol,tail));
        }
      }}}}} }}} }}}}}} }}}} }


        System.out.println("expandVariableList: strange case: '" + symbol + "'");
        throw new TomRuntimeException("expandVariableList: strange case: '" + symbol + "'");
      }}

  }

  protected Replace2 replace_replaceInstantiatedVariable = new Replace2() { 
      public ATerm apply(ATerm subject, Object arg1) {
        TomList instantiatedVariable = (TomList)arg1;

        if(instantiatedVariable == null) {
          throw new TomRuntimeException("replaceInstantiatedVariable: null instantiatedVariable");
        }

        if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomList tom_match13_1=(( jtom.adt.tomsignature.types.TomList)instantiatedVariable); { jtom.adt.tomsignature.types.TomTerm tom_match13_2=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match13_1_list1=tom_match13_1; { jtom.adt.tomsignature.types.TomList tom_match13_1_begin1=tom_match13_1_list1; { jtom.adt.tomsignature.types.TomList tom_match13_1_end1=tom_match13_1_list1;{ while (!(tom_is_empty_TomList(tom_match13_1_end1))) {tom_match13_1_list1=tom_match13_1_end1;{ { jtom.adt.tomsignature.types.TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_Variable(tom_match13_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match13_1_2; { jtom.adt.tomsignature.types.TomName tom_match13_1_2_astName=tom_get_slot_Variable_astName(tom_match13_1_2); { jtom.adt.tomsignature.types.TomName opNameAST=tom_match13_1_2_astName; if(tom_is_fun_sym_RecordAppl(tom_match13_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match13_2_nameList=tom_get_slot_RecordAppl_nameList(tom_match13_2); { jtom.adt.tomsignature.types.SlotList tom_match13_2_slots=tom_get_slot_RecordAppl_slots(tom_match13_2); if(tom_is_fun_sym_concTomName(tom_match13_2_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match13_2_nameList_list1=tom_match13_2_nameList; if(!(tom_is_empty_NameList(tom_match13_2_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_renamedvar_opNameAST_1=tom_get_head_NameList(tom_match13_2_nameList_list1); if(tom_terms_equal_TomName(opNameAST, tom_renamedvar_opNameAST_1)) {tom_match13_2_nameList_list1=tom_get_tail_NameList(tom_match13_2_nameList_list1); if(tom_is_empty_NameList(tom_match13_2_nameList_list1)) { if(tom_is_fun_sym_concSlot(tom_match13_2_slots) ||  false ) { { jtom.adt.tomsignature.types.SlotList tom_match13_2_slots_list1=tom_match13_2_slots; if(tom_is_empty_SlotList(tom_match13_2_slots_list1)) {

              return var;
             }} } } }} }} }}} }}}} }}tom_match13_1_end1=tom_get_tail_TomList(tom_match13_1_end1);} }tom_match13_1_list1=tom_match13_1_begin1;}}}} }}}

        }

        return traversal().genericTraversal(subject,this,instantiatedVariable);
      } // end apply
    }; // end new


  protected TomTerm replaceInstantiatedVariable(TomList instantiatedVariable, TomTerm subject) {
    return (TomTerm) replace_replaceInstantiatedVariable.apply(subject,instantiatedVariable); 
  }
  protected Instruction replaceInstantiatedVariableInstruction(TomList instantiatedVariable, Instruction subject) {
    return (Instruction) replace_replaceInstantiatedVariable.apply(subject,instantiatedVariable); 
  }

  private TomType getType(String tomName) {
    TomType tomType = getSymbolTable().getType(tomName);
    return tomType;
  }

  
} // Class TomKernelExpander
