/* Generated by TOM: Do not edit this file */ /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2004 INRIA
			    Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.compiler;
  
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import jtom.TomBase;
import jtom.adt.tomsignature.types.*;
import jtom.runtime.Replace1;
import jtom.runtime.Replace2;
import aterm.*;
import jtom.exception.TomRuntimeException;

public class TomKernelExpander extends TomBase {

  public TomKernelExpander(jtom.TomEnvironment environment) {
    super(environment);
  }

// ------------------------------------------------------------
  /* Generated by TOM: Do not edit this file
// ------------------------------------------------------------
  
    /*
     * replace Name by Symbol
     * replace Name by Variable
     */
  protected Replace2 replace_expandVariable = new Replace2() { 
      public ATerm apply(ATerm subject, Object arg1) {
        TomTerm contextSubject = (TomTerm)arg1;

        if(contextSubject == null) {
          throw new TomRuntimeException(new Throwable("expandVariable: null contextSubject"));
        }

          //System.out.println("expandVariable:\n\t" + subject );

        if(!(subject instanceof TomTerm)) {
            //debugPrintln("expandVariable not a tomTerm: " );
            //System.out.println("expandVariable not a tomTerm:\n\t" + subject );
          if(subject instanceof TomType) {
             { TomType tom_match1_1 =(( TomType)subject);{ if(tom_is_fun_sym_TomTypeAlone(tom_match1_1) ||  false ) { { String tom_match1_1_1 =tom_get_slot_TomTypeAlone_string(tom_match1_1); { String tomType =tom_match1_1_1;
 
                TomType type = getType(tomType);
                if(type != null) {
                  return type;
                } else {
                  return subject; // useful for TomTypeAlone("unknown type")
                }
              }} }}}
 
          } else if(subject instanceof Instruction) {
             { TomTerm tom_match2_1 =(( TomTerm)contextSubject);{ { Instruction tom_match2_2 =(( Instruction)subject);{ { TomTerm context =tom_match2_1; if(tom_is_fun_sym_Match(tom_match2_2) ||  false ) { { TomTerm tom_match2_2_1 =tom_get_slot_Match_subjectList(tom_match2_2); { TomTerm tom_match2_2_2 =tom_get_slot_Match_patternList(tom_match2_2); { OptionList tom_match2_2_3 =tom_get_slot_Match_option(tom_match2_2); { TomTerm tomSubjectList =tom_match2_2_1; { TomTerm patternList =tom_match2_2_2; { OptionList option =tom_match2_2_3;
 
                  //System.out.println("tomSubjectList = " + tomSubjectList);
                TomTerm newSubjectList = expandVariable(context,tomSubjectList);
                  //System.out.println("newSubjectList = " + newSubjectList);
                TomTerm newPatternList = expandVariable(newSubjectList,patternList);
                return tom_make_Match(newSubjectList,newPatternList,option) ;
              }}}}}} }}}}}}
 
          }
          return traversal().genericTraversal(subject,this,contextSubject);
        }

          //System.out.println("expandVariable is a tomTerm:\n\t" + subject );
        
         { TomTerm tom_match3_1 =(( TomTerm)contextSubject);{ { TomTerm tom_match3_2 =(( TomTerm)subject);{ if(tom_is_fun_sym_TomTypeToTomTerm(tom_match3_1) ||  false ) { { TomType tom_match3_1_1 =tom_get_slot_TomTypeToTomTerm_astType(tom_match3_1); if(tom_is_fun_sym_Type(tom_match3_1_1) ||  false ) { { TomType type =tom_match3_1_1; if(tom_is_fun_sym_Appl(tom_match3_2) ||  false ) { { OptionList tom_match3_2_1 =tom_get_slot_Appl_option(tom_match3_2); { NameList tom_match3_2_2 =tom_get_slot_Appl_nameList(tom_match3_2); { TomList tom_match3_2_3 =tom_get_slot_Appl_args(tom_match3_2); { OptionList optionList =tom_match3_2_1; if(tom_is_fun_sym_concTomName(tom_match3_2_2) ||  false ) { { NameList nameList =tom_match3_2_2; { NameList tom_match3_2_2_list1 =tom_match3_2_2; if(!(tom_is_empty_NameList(tom_match3_2_2_list1))) { { TomName tom_match3_2_2_1 =(( TomName)tom_get_head_NameList(tom_match3_2_2_list1));{ tom_match3_2_2_list1=tom_get_tail_NameList(tom_match3_2_2_list1); if(tom_is_fun_sym_Name(tom_match3_2_2_1) ||  false ) { { String tom_match3_2_2_1_1 =tom_get_slot_Name_string(tom_match3_2_2_1); { String strName =tom_match3_2_2_1_1; { TomList l =tom_match3_2_3;
 
              //debugPrintln("expandVariable.1: Type(" + tomType + "," + glType + ")");
            Option orgTrack = findOriginTracking(optionList);
            OptionList option = replaceAnnotedName(optionList,type,orgTrack) ;
              // create a constant or a variable

              //TomSymbol tomSymbol = getSymbol(strName);
            TomSymbol tomSymbol;
            if(strName.equals("")) {
              tomSymbol = getSymbol(type);
              nameList = tom_make_insert_concTomName(tomSymbol .getAstName(),tom_make_empty_concTomName()) ;
            } else {
              tomSymbol = getSymbol(strName);
            }

            if(tomSymbol != null) {
              TomList subterm = expandVariableList(tomSymbol, l);
              return tom_make_Appl(option,nameList,subterm) ;
            } else {
              if(l.isEmpty()  && !hasConstructor(optionList)) {
                return tom_make_Variable(option,nameList .getHead(),type,tom_make_empty_concConstraint()) ;
              } else {
                TomList subterm = expandVariableList(tom_make_emptySymbol() , l);
                return tom_make_Appl(option,nameList,subterm) ;
              }
            }
          }}} }}} }}} }}}}} }} }} } if(tom_is_fun_sym_Variable(tom_match3_1) ||  false ) { { OptionList tom_match3_1_1 =tom_get_slot_Variable_option(tom_match3_1); { TomName tom_match3_1_2 =tom_get_slot_Variable_astName(tom_match3_1); { TomType tom_match3_1_3 =tom_get_slot_Variable_astType(tom_match3_1); { OptionList option1 =tom_match3_1_1; { TomName name1 =tom_match3_1_2; { TomType type1 =tom_match3_1_3; if(tom_is_fun_sym_Appl(tom_match3_2) ||  false ) { { OptionList tom_match3_2_1 =tom_get_slot_Appl_option(tom_match3_2); { NameList tom_match3_2_2 =tom_get_slot_Appl_nameList(tom_match3_2); { TomList tom_match3_2_3 =tom_get_slot_Appl_args(tom_match3_2); { OptionList optionList =tom_match3_2_1; if(tom_is_fun_sym_concTomName(tom_match3_2_2) ||  false ) { { NameList nameList =tom_match3_2_2; { NameList tom_match3_2_2_list1 =tom_match3_2_2; if(!(tom_is_empty_NameList(tom_match3_2_2_list1))) { { TomName tom_match3_2_2_1 =(( TomName)tom_get_head_NameList(tom_match3_2_2_list1));{ tom_match3_2_2_list1=tom_get_tail_NameList(tom_match3_2_2_list1); if(tom_is_fun_sym_Name(tom_match3_2_2_1) ||  false ) { { String tom_match3_2_2_1_1 =tom_get_slot_Name_string(tom_match3_2_2_1); { String strName =tom_match3_2_2_1_1; { TomList l =tom_match3_2_3;

 
              //System.out.println("expandVariable.3: Variable(" + option1 + "," + name1 + "," + type1 + ")");
            Option orgTrack = findOriginTracking(optionList);
            OptionList option = replaceAnnotedName(optionList,type1,orgTrack) ;
              // under a match construct
              // create a constant or a variable
              //TomSymbol tomSymbol = getSymbol(strName);
            TomSymbol tomSymbol;
            if(strName.equals("")) {
              tomSymbol = getSymbol(type1);
              nameList = tom_make_insert_concTomName(tomSymbol .getAstName(),tom_make_empty_concTomName()) ;
            } else {
              tomSymbol = getSymbol(strName);
            }

            if(tomSymbol != null) {
              TomList subterm = expandVariableList(tomSymbol, l);
              return tom_make_Appl(option,nameList,subterm) ;
            } else {
              if(l.isEmpty()  && !hasConstructor(optionList)) {
                return tom_make_Variable(option,nameList .getHead(),type1,tom_make_empty_concConstraint()) ;
              } else {
                TomList subterm = expandVariableList(tom_make_emptySymbol() , l);
                return tom_make_Appl(option,nameList,subterm) ;
              }
            }
          }}} }}} }}} }}}}} }}}}}}} } if(tom_is_fun_sym_TomTypeToTomTerm(tom_match3_1) ||  false ) { { TomType tom_match3_1_1 =tom_get_slot_TomTypeToTomTerm_astType(tom_match3_1); if(tom_is_fun_sym_Type(tom_match3_1_1) ||  false ) { { TomType type =tom_match3_1_1; { TomType tom_match3_1_1_1 =tom_get_slot_Type_tomType(tom_match3_1_1); { TomType tom_match3_1_1_2 =tom_get_slot_Type_tlType(tom_match3_1_1); { TomType tomType =tom_match3_1_1_1; { TomType glType =tom_match3_1_1_2; if(tom_is_fun_sym_Placeholder(tom_match3_2) ||  false ) { { TomTerm p =tom_match3_2; { OptionList tom_match3_2_1 =tom_get_slot_Placeholder_option(tom_match3_2); { OptionList optionList =tom_match3_2_1;

 
            Option orgTrack = findOriginTracking(optionList);
            OptionList option = replaceAnnotedName(optionList,type,orgTrack) ;
              // create an unamed variable
            return tom_make_UnamedVariable(option,type) ;
          }}} }}}}}} }} } if(tom_is_fun_sym_Variable(tom_match3_1) ||  false ) { { OptionList tom_match3_1_1 =tom_get_slot_Variable_option(tom_match3_1); { TomName tom_match3_1_2 =tom_get_slot_Variable_astName(tom_match3_1); { TomType tom_match3_1_3 =tom_get_slot_Variable_astType(tom_match3_1); { OptionList option1 =tom_match3_1_1; { TomName name1 =tom_match3_1_2; { TomType type1 =tom_match3_1_3; if(tom_is_fun_sym_Placeholder(tom_match3_2) ||  false ) { { TomTerm p =tom_match3_2; { OptionList tom_match3_2_1 =tom_get_slot_Placeholder_option(tom_match3_2); { OptionList optionList =tom_match3_2_1;

 
            Option orgTrack = findOriginTracking(optionList);
            OptionList option = replaceAnnotedName(optionList,type1,orgTrack) ;
              // create an unamed variable
            return tom_make_UnamedVariable(option,type1) ;
          }}} }}}}}}} } { TomTerm context =tom_match3_1; if(tom_is_fun_sym_Appl(tom_match3_2) ||  false ) { { TomTerm appl =tom_match3_2; { OptionList tom_match3_2_1 =tom_get_slot_Appl_option(tom_match3_2); { NameList tom_match3_2_2 =tom_get_slot_Appl_nameList(tom_match3_2); { TomList tom_match3_2_3 =tom_get_slot_Appl_args(tom_match3_2); { OptionList optionList =tom_match3_2_1; if(tom_is_fun_sym_concTomName(tom_match3_2_2) ||  false ) { { NameList nameList =tom_match3_2_2; { NameList tom_match3_2_2_list1 =tom_match3_2_2; if(!(tom_is_empty_NameList(tom_match3_2_2_list1))) { { TomName tom_match3_2_2_1 =(( TomName)tom_get_head_NameList(tom_match3_2_2_list1));{ tom_match3_2_2_list1=tom_get_tail_NameList(tom_match3_2_2_list1); if(tom_is_fun_sym_Name(tom_match3_2_2_1) ||  false ) { { String tom_match3_2_2_1_1 =tom_get_slot_Name_string(tom_match3_2_2_1); { String tomName =tom_match3_2_2_1_1; { TomList l =tom_match3_2_3;

 
               //System.out.println("expandVariable.6: Appl(Name(" + tomName + ")," + l + ")");
              // create a  symbol
            TomSymbol tomSymbol = getSymbol(tomName);
            if(tomSymbol != null) {
              TomList subterm = expandVariableList(tomSymbol, l);
                //System.out.println("***** expandVariable.6: expandVariableList = " + subterm);
              Option orgTrack = findOriginTracking(optionList);
              OptionList option = replaceAnnotedName(optionList,getSymbolCodomain(tomSymbol),orgTrack) ;
              return tom_make_Appl(option,nameList,subterm) ;
            } else {
                // do nothing
            }
          }}} }}} }}} }}}}}} }} { TomTerm context =tom_match3_1; if(tom_is_fun_sym_Variable(tom_match3_2) ||  false ) { { OptionList tom_match3_2_1 =tom_get_slot_Variable_option(tom_match3_2); { TomName tom_match3_2_2 =tom_get_slot_Variable_astName(tom_match3_2); { TomType tom_match3_2_3 =tom_get_slot_Variable_astType(tom_match3_2); { OptionList option =tom_match3_2_1; if(tom_is_fun_sym_Name(tom_match3_2_2) ||  false ) { { String tom_match3_2_2_1 =tom_get_slot_Name_string(tom_match3_2_2); { String strName =tom_match3_2_2_1; if(tom_is_fun_sym_TomTypeAlone(tom_match3_2_3) ||  false ) { { String tom_match3_2_3_1 =tom_get_slot_TomTypeAlone_string(tom_match3_2_3); { String tomType =tom_match3_2_3_1;

 
              // create a variable
            TomType localType = getType(tomType);
            return tom_make_Variable(option,tom_make_Name(strName),localType,tom_make_empty_concConstraint()) ;
          }} }}} }}}}} }} { TomTerm context =tom_match3_1; if(tom_is_fun_sym_TLVar(tom_match3_2) ||  false ) { { String tom_match3_2_1 =tom_get_slot_TLVar_strName(tom_match3_2); { TomType tom_match3_2_2 =tom_get_slot_TLVar_astType(tom_match3_2); { String strName =tom_match3_2_1; if(tom_is_fun_sym_TomTypeAlone(tom_match3_2_2) ||  false ) { { String tom_match3_2_2_1 =tom_get_slot_TomTypeAlone_string(tom_match3_2_2); { String tomType =tom_match3_2_2_1;

 
              //debugPrintln("expandVariable.8: TLVar(" + strName + "," + tomType + ")");
              // create a variable: its type is ensured by checker
            TomType localType = getType(tomType);
            OptionList option = ast().makeOption();
            return tom_make_Variable(option,tom_make_Name(strName),localType,tom_make_empty_concConstraint()) ;
          }} }}}} }} { TomTerm context =tom_match3_1; if(tom_is_fun_sym_TLVar(tom_match3_2) ||  false ) { { String tom_match3_2_1 =tom_get_slot_TLVar_strName(tom_match3_2); { TomType tom_match3_2_2 =tom_get_slot_TLVar_astType(tom_match3_2); { String strName =tom_match3_2_1; if(tom_is_fun_sym_Type(tom_match3_2_2) ||  false ) { { TomType localType =tom_match3_2_2;

 
              //debugPrintln("expandVariable.8: TLVar(" + strName + "," + tomType + ")");
              // create a variable: its type is ensured by checker
            OptionList option = ast().makeOption();
            return tom_make_Variable(option,tom_make_Name(strName),localType,tom_make_empty_concConstraint()) ;
          } }}}} }} if(tom_is_fun_sym_SubjectList(tom_match3_1) ||  false ) { { TomList tom_match3_1_1 =tom_get_slot_SubjectList_tomList(tom_match3_1); { TomList l1 =tom_match3_1_1; if(tom_is_fun_sym_TermList(tom_match3_2) ||  false ) { { TomList tom_match3_2_1 =tom_get_slot_TermList_tomList(tom_match3_2); { TomList subjectList =tom_match3_2_1;

 
            //System.out.println("expandVariable.9: "+l1+"(" + subjectList + ")");
                
              // process a list of subterms
            ArrayList list = new ArrayList();
            while(!subjectList.isEmpty()) {
              list.add(expandVariable(l1.getHead(), subjectList.getHead()));
              subjectList = subjectList.getTail();
              l1 = l1.getTail();
            }
            return tom_make_TermList(ast() .makeList(list)) ;
          }} }}} } { TomTerm context =tom_match3_1; { TomTerm t =tom_match3_2;


 
            //debugPrintln("expandVariable.11 default: " );
            //System.out.println("TomKernelCompiler.expandVariable default:\n\t" + subject );
            return traversal().genericTraversal(subject,this,contextSubject);
          }}}}}}
  // end match
      } // end apply
    }; // end new

  protected TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return (TomTerm) replace_expandVariable.apply(subject,contextSubject); 
  }

  private TomList expandVariableList(TomSymbol subject, TomList subjectList) {
    if(subject == null) {
      throw new TomRuntimeException(new Throwable("expandVariableList: null subject"));
    }
    
     { TomSymbol tom_match4_1 =(( TomSymbol)subject);{ if(tom_is_fun_sym_emptySymbol(tom_match4_1) ||  false ) {
 
          /*
           * If the top symbol is unknown, the subterms
           * are expanded in an empty context
           */
        ArrayList list = new ArrayList();
        while(!subjectList.isEmpty()) {
          list.add(expandVariable(tom_make_emptyTerm() , subjectList.getHead()));
          subjectList = subjectList.getTail();
        }
        return ast().makeList(list);
       } if(tom_is_fun_sym_Symbol(tom_match4_1) ||  false ) { { TomSymbol symb =tom_match4_1; { TomType tom_match4_1_2 =tom_get_slot_Symbol_typesToType(tom_match4_1); if(tom_is_fun_sym_TypesToType(tom_match4_1_2) ||  false ) { { TomTypeList tom_match4_1_2_1 =tom_get_slot_TypesToType_domain(tom_match4_1_2); { TomType tom_match4_1_2_2 =tom_get_slot_TypesToType_codomain(tom_match4_1_2); { TomTypeList typeList =tom_match4_1_2_1; { TomType codomainType =tom_match4_1_2_2;

 
          
          // process a list of subterms and a list of types
        TomList result = null;
        ArrayList list = new ArrayList();
        if(isListOperator(symb) || isArrayOperator(symb)) {
          /*
           * TODO:
           * when the symbol is an associative operator,
           * the signature has the form: List conc( Element* )
           * the list of types is reduced to the singleton { Element }
           *
           * consider a pattern: conc(E1*,x,E2*,y,E3*)
           *  assign the type "Element" to each subterm: x and y
           *  assign the type "List" to each subtermList: E1*,E2* and E3*
           */

          //System.out.println("listOperator: " + symb);
          //System.out.println("subjectList: " + subjectList);
          
          TomType domainType = typeList.getHead();
          while(!subjectList.isEmpty()) {
            TomTerm subterm = subjectList.getHead();
              //System.out.println("subterm:\n" + subterm);
            matchBlock: {
               { TomTerm tom_match5_1 =(( TomTerm)subterm);{ if(tom_is_fun_sym_VariableStar(tom_match5_1) ||  false ) { { OptionList tom_match5_1_1 =tom_get_slot_VariableStar_option(tom_match5_1); { TomName tom_match5_1_2 =tom_get_slot_VariableStar_astName(tom_match5_1); { OptionList optionList =tom_match5_1_1; { TomName name =tom_match5_1_2;
 
                  Option orgTrack = findOriginTracking(optionList);
                  OptionList option = replaceAnnotedName(optionList,codomainType,orgTrack) ;
                  list.add(tom_make_VariableStar(option,name,codomainType,tom_make_empty_concConstraint()) );
                    //System.out.println("*** break: " + subterm);
                  break matchBlock;
                }}}} } if(tom_is_fun_sym_UnamedVariableStar(tom_match5_1) ||  false ) { { OptionList tom_match5_1_1 =tom_get_slot_UnamedVariableStar_option(tom_match5_1); { OptionList optionList =tom_match5_1_1;

 
                  Option orgTrack = findOriginTracking(optionList);
                  OptionList option = replaceAnnotedName(optionList,codomainType,orgTrack) ;
                  list.add(tom_make_UnamedVariableStar(option,codomainType) );
                  break matchBlock;
                }} }

 
                  list.add(expandVariable(tom_make_TomTypeToTomTerm(domainType) , subterm));
                  break matchBlock;
                }}
 
            }
            subjectList = subjectList.getTail();
          }
        } else {
          while(!subjectList.isEmpty()) {
            list.add(expandVariable(tom_make_TomTypeToTomTerm(typeList .getHead()) , subjectList.getHead()));
            subjectList = subjectList.getTail();
            typeList    = typeList.getTail();
          }
        }
       
        result = ast().makeList(list);
        return result;
      }}}} }}} }

 
        System.out.println("expandVariableList: strange case: '" + subject + "'");
        throw new TomRuntimeException(new Throwable("expandVariableList: strange case: '" + subject + "'"));
      }}
 
  }

    /*
     * updateSymbol is called after a first syntax expansion phase
     * this phase updates the symbolTable according to the typeTable
     * this is performed by recursively traversing each symbol
     * each TomTypeAlone is replace by the corresponding TomType
     */
  public void updateSymbolTable() {
    Iterator it = symbolTable().keySymbolIterator();
    while(it.hasNext()) {
      String tomName = (String)it.next();
      TomTerm emptyContext = tom_make_emptyTerm() ;
      TomSymbol tomSymbol = getSymbol(tomName);
      tomSymbol = expandVariable(emptyContext,tom_make_TomSymbolToTomTerm(tomSymbol) ).getAstSymbol();
      symbolTable().putSymbol(tomName,tomSymbol);
    }
  }

  private TomType getType(String tomName) {
    TomType tomType = symbolTable().getType(tomName);
    return tomType;
  }


  private OptionList replaceAnnotedName(OptionList subjectList, TomType type, Option orgTrack) {
    //%variable
     { OptionList tom_match6_1 =(( OptionList)subjectList);{ if(tom_is_fun_sym_emptyOptionList(tom_match6_1) ||  false ) {
  return subjectList;  } if(tom_is_fun_sym_manyOptionList(tom_match6_1) ||  false ) { { Option tom_match6_1_1 =tom_get_slot_manyOptionList_head(tom_match6_1); { OptionList tom_match6_1_2 =tom_get_slot_manyOptionList_tail(tom_match6_1); if(tom_is_fun_sym_TomNameToOption(tom_match6_1_1) ||  false ) { { TomName tom_match6_1_1_1 =tom_get_slot_TomNameToOption_astName(tom_match6_1_1); if(tom_is_fun_sym_Name(tom_match6_1_1_1) ||  false ) { { TomName name =tom_match6_1_1_1; { OptionList l =tom_match6_1_2;
 
        return tom_make_manyOptionList(tom_make_TomTermToOption(tom_make_Variable(ast() .makeOption(orgTrack),name,type,tom_make_empty_concConstraint())),replaceAnnotedName(l,type,orgTrack))

 ;
      }} }} }}} } if(tom_is_fun_sym_manyOptionList(tom_match6_1) ||  false ) { { Option tom_match6_1_1 =tom_get_slot_manyOptionList_head(tom_match6_1); { OptionList tom_match6_1_2 =tom_get_slot_manyOptionList_tail(tom_match6_1); { Option t =tom_match6_1_1; { OptionList l =tom_match6_1_2;
 
        return tom_make_manyOptionList(t,replaceAnnotedName(l,type,orgTrack)) ;
      }}}} }}}
 
    return null;
  }
  
    /*
     * Replace pattern with only variables or underscore (UnamedVariables)
     * By DefaultPattern
     */
  public TomTerm expandMatchPattern(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof Instruction) {
             { Instruction tom_match7_1 =(( Instruction)subject);{ if(tom_is_fun_sym_Match(tom_match7_1) ||  false ) { { TomTerm tom_match7_1_1 =tom_get_slot_Match_subjectList(tom_match7_1); { TomTerm tom_match7_1_2 =tom_get_slot_Match_patternList(tom_match7_1); { OptionList tom_match7_1_3 =tom_get_slot_Match_option(tom_match7_1); { TomTerm subjectList =tom_match7_1_1; { TomTerm patternList =tom_match7_1_2; { OptionList option =tom_match7_1_3;
 
                  // find other match in PA list
                TomTerm newPatternList = expandMatchPattern(patternList);
                return expandPattern(tom_make_Match(subjectList,newPatternList,option) ); 
              }}}}}} }
 
                return traversal().genericTraversal(subject,this);
              }}
  // end match
          } else {
            return traversal().genericTraversal(subject,this);
          }
        } // end apply
      }; // end new
    
    return (TomTerm) replace.apply(subject); 
  }

  private Instruction expandPattern(Instruction match) {
     { Instruction tom_match8_1 =(( Instruction)match);{ if(tom_is_fun_sym_Match(tom_match8_1) ||  false ) { { TomTerm tom_match8_1_1 =tom_get_slot_Match_subjectList(tom_match8_1); { TomTerm tom_match8_1_2 =tom_get_slot_Match_patternList(tom_match8_1); { OptionList tom_match8_1_3 =tom_get_slot_Match_option(tom_match8_1); { TomTerm subjectList =tom_match8_1_1; if(tom_is_fun_sym_PatternList(tom_match8_1_2) ||  false ) { { TomList tom_match8_1_2_1 =tom_get_slot_PatternList_tomList(tom_match8_1_2); { TomList list =tom_match8_1_2_1; { OptionList option =tom_match8_1_3;
 
        boolean needModification = false;
        TomList newPatternList = empty();
        while(!list.isEmpty()) {
          TomTerm pa = list.getHead();
          if( isDefaultPattern(pa.getTermList().getTomList()) ) {
            OptionList newPatternActionOption =  tom_make_manyOptionList(tom_make_DefaultCase(),pa .getOption()) ;
            newPatternList = cons(tom_make_PatternAction(pa .getTermList(),pa .getAction(),newPatternActionOption) , newPatternList);
            needModification = true;
            if(!list.getTail().isEmpty()) {
                // the default pattern is not the latest one!!
              System.out.println("Default pattern issue"+pa.getOption());
            }
          } else {
              // we keep the PA
            newPatternList = cons(list.getHead(), newPatternList);
          }
          list = list.getTail();
        }
        if(needModification) {
          newPatternList = reverse(newPatternList);
          OptionList newMatchOption =tom_make_manyOptionList(tom_make_DefaultCase(),option) ;
          return tom_make_Match(subjectList,tom_make_PatternList(newPatternList),newMatchOption) ;
        } else {
          return match;
        }
      }}} }}}}} }
 
        System.out.println("Strange Match in expandMatchPattern"+match);
        throw new TomRuntimeException(new Throwable("Strange Match in expandMatchPattern"+match));
      }}
 
  }

  private boolean isDefaultPattern(TomList pList) {
    TomTerm term;
    while(!pList.isEmpty()) {
      term = pList.getHead();
       { TomTerm tom_match9_1 =(( TomTerm)term);{ if(tom_is_fun_sym_Appl(tom_match9_1) ||  false ) {
 
          return false;
         }}}
 
      pList = pList.getTail();
    }
    
    ArrayList variableList = new ArrayList();
    collectVariable(variableList,tom_make_PatternList(pList) );
    
      // compute multiplicities
    HashMap multiplicityMap = new HashMap();
    Iterator it = variableList.iterator();
    while(it.hasNext()) {
      TomTerm variable = (TomTerm)it.next();
      TomName name = variable.getAstName();
      if(multiplicityMap.containsKey(name)) {
        Integer value = (Integer)multiplicityMap.get(name);
        return false;
      } else {
        multiplicityMap.put(name, new Integer(1));
      }
    }
    return true;
  }
  
} // Class TomKernelExpander
