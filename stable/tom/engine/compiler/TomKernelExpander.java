/* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom.compiler;
  
import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashSet;

import jtom.TomBase;
import jtom.adt.tomsignature.types.*;
import tom.library.traversal.Replace2;
import aterm.*;
import jtom.exception.TomRuntimeException;

public class TomKernelExpander extends TomBase {

  public TomKernelExpander() {
    super();
  }

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/      
  // ------------------------------------------------------------
  
  /*
   * The "expandVariable" phase expands Appl into Variable
   * we focus on
   * - RewriteRule
   * - MatchingCondition
   * - EqualityCondition
   * - Match
   *
   * Variable and Appl are are expanded in the TomTerm case
   */

  protected Replace2 replace_expandVariable = new Replace2() { 
      public ATerm apply(ATerm subject, Object arg1) {
        TomTerm contextSubject = (TomTerm)arg1;

        if(contextSubject == null) {
          throw new TomRuntimeException("expandVariable: null contextSubject");
        }

          //System.out.println("expandVariable:\n\t" + subject );
        if(subject instanceof Option) {
           { jtom.adt.tomsignature.types.Option tom_match1_1=(( jtom.adt.tomsignature.types.Option)subject);{ if(tom_is_fun_sym_OriginTracking(tom_match1_1) ||  false ) {
 return subject;  }}}

        } else if(subject instanceof TargetLanguage) {
           { jtom.adt.tomsignature.types.TargetLanguage tom_match2_1=(( jtom.adt.tomsignature.types.TargetLanguage)subject);{ if(tom_is_fun_sym_TL(tom_match2_1) ||  false ) {
 return subject;  } if(tom_is_fun_sym_ITL(tom_match2_1) ||  false ) {
 return subject;  } if(tom_is_fun_sym_Comment(tom_match2_1) ||  false ) {
 return subject;  }}}

        } else if(subject instanceof TomType) {
           { jtom.adt.tomsignature.types.TomType tom_match3_1=(( jtom.adt.tomsignature.types.TomType)subject);{ if(tom_is_fun_sym_TomTypeAlone(tom_match3_1) ||  false ) { { String  tom_match3_1_1=tom_get_slot_TomTypeAlone_string(tom_match3_1); { String  tomType=tom_match3_1_1;

              TomType type = getType(tomType);
              if(type != null) {
                return type;
              } else {
                return subject; // useful for TomTypeAlone("unknown type")
              }
            }} }}}

        } else if(subject instanceof TomRule) {
           { jtom.adt.tomsignature.types.TomRule tom_match4_1=(( jtom.adt.tomsignature.types.TomRule)subject);{ if(tom_is_fun_sym_RewriteRule(tom_match4_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_1=tom_get_slot_RewriteRule_lhs(tom_match4_1); { jtom.adt.tomsignature.types.TomTerm tom_match4_1_2=tom_get_slot_RewriteRule_rhs(tom_match4_1); { jtom.adt.tomsignature.types.InstructionList tom_match4_1_3=tom_get_slot_RewriteRule_condList(tom_match4_1); { jtom.adt.tomsignature.types.OptionList tom_match4_1_4=tom_get_slot_RewriteRule_option(tom_match4_1); if(tom_is_fun_sym_Term(tom_match4_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_1_1=tom_get_slot_Term_tomTerm(tom_match4_1_1); if(tom_is_fun_sym_Appl(tom_match4_1_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match4_1_1_1; { jtom.adt.tomsignature.types.OptionList tom_match4_1_1_1_1=tom_get_slot_Appl_option(tom_match4_1_1_1); { jtom.adt.tomsignature.types.NameList tom_match4_1_1_1_2=tom_get_slot_Appl_nameList(tom_match4_1_1_1); { jtom.adt.tomsignature.types.OptionList optionList=tom_match4_1_1_1_1; if(tom_is_fun_sym_concTomName(tom_match4_1_1_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match4_1_1_1_2_list1=tom_match4_1_1_1_2; if(!(tom_is_empty_NameList(tom_match4_1_1_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match4_1_1_1_2_1=tom_get_head_NameList(tom_match4_1_1_1_2_list1);tom_match4_1_1_1_2_list1=tom_get_tail_NameList(tom_match4_1_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match4_1_1_1_2_1) ||  false ) { { String  tom_match4_1_1_1_2_1_1=tom_get_slot_Name_string(tom_match4_1_1_1_2_1); { String  tomName=tom_match4_1_1_1_2_1_1; if(tom_is_empty_NameList(tom_match4_1_1_1_2_list1)) { if(tom_is_fun_sym_Term(tom_match4_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_2_1=tom_get_slot_Term_tomTerm(tom_match4_1_2); { jtom.adt.tomsignature.types.TomTerm rhs=tom_match4_1_2_1; { jtom.adt.tomsignature.types.InstructionList condList=tom_match4_1_3; { jtom.adt.tomsignature.types.OptionList option=tom_match4_1_4;



 
              TomSymbol tomSymbol = getSymbol(tomName);
              TomType symbolType = getSymbolCodomain(tomSymbol);
              TomTerm newLhs = tom_make_Term(expandVariable(contextSubject,lhs));
              TomTerm newRhs = tom_make_Term(expandVariable(tom_make_TomTypeToTomTerm(symbolType),rhs));
              // build the list of variables that occur in the lhs
              HashSet set = new HashSet();
              collectVariable(set,newLhs);
              TomList varList = getAstFactory().makeList(set);
              InstructionList newCondList = tom_make_emptyInstructionList();
              while(!condList.isEmpty()) {
                Instruction cond = condList.getHead();
                Instruction newCond = expandVariableInstruction(tom_make_Tom(varList),cond);
                newCondList = tom_make_manyInstructionList(newCond,newCondList);
                collectVariable(set,newCond); 
                varList = getAstFactory().makeList(set);
                condList= condList.getTail();
              }
              
              return tom_make_RewriteRule(newLhs,newRhs,newCondList,option);
            }}}} } }}} }} }} }}}}} }} }}}}} }}}
 // end match
        } else if(subject instanceof Instruction) {
           { jtom.adt.tomsignature.types.TomTerm tom_match5_1=(( jtom.adt.tomsignature.types.TomTerm)contextSubject);{ { jtom.adt.tomsignature.types.Instruction tom_match5_2=(( jtom.adt.tomsignature.types.Instruction)subject);{ if(tom_is_fun_sym_Tom(tom_match5_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match5_1_1=tom_get_slot_Tom_tomList(tom_match5_1); { jtom.adt.tomsignature.types.TomList varList=tom_match5_1_1; if(tom_is_fun_sym_MatchingCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_1=tom_get_slot_MatchingCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_2=tom_get_slot_MatchingCondition_rhs(tom_match5_2); if(tom_is_fun_sym_Appl(tom_match5_2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_1; { jtom.adt.tomsignature.types.NameList tom_match5_2_1_2=tom_get_slot_Appl_nameList(tom_match5_2_1); if(tom_is_fun_sym_concTomName(tom_match5_2_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_1_2_list1=tom_match5_2_1_2; if(!(tom_is_empty_NameList(tom_match5_2_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_1_2_1=tom_get_head_NameList(tom_match5_2_1_2_list1);tom_match5_2_1_2_list1=tom_get_tail_NameList(tom_match5_2_1_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_1_2_1) ||  false ) { { String  tom_match5_2_1_2_1_1=tom_get_slot_Name_string(tom_match5_2_1_2_1); { String  lhsName=tom_match5_2_1_2_1_1; if(tom_is_fun_sym_Appl(tom_match5_2_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_2; { jtom.adt.tomsignature.types.NameList tom_match5_2_2_2=tom_get_slot_Appl_nameList(tom_match5_2_2); if(tom_is_fun_sym_concTomName(tom_match5_2_2_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_2_2_list1=tom_match5_2_2_2; if(!(tom_is_empty_NameList(tom_match5_2_2_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_2_2_1=tom_get_head_NameList(tom_match5_2_2_2_list1);tom_match5_2_2_2_list1=tom_get_tail_NameList(tom_match5_2_2_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_2_2_1) ||  false ) { { String  tom_match5_2_2_2_1_1=tom_get_slot_Name_string(tom_match5_2_2_2_1); { String  rhsName=tom_match5_2_2_2_1_1; if(tom_is_empty_NameList(tom_match5_2_2_2_list1)) {


               TomSymbol lhsSymbol = getSymbol(lhsName);
               TomSymbol rhsSymbol = getSymbol(rhsName);
               TomType type;
              
               if(lhsSymbol != null) {
                 type = getSymbolCodomain(lhsSymbol);
               } else if(rhsSymbol != null) {
                 type = getSymbolCodomain(rhsSymbol);
               } else {
                 // both lhs and rhs are variables
                 // since lhs is a fresh variable, we look for rhs
                 type = getTypeFromVariableList(tom_make_Name(rhsName),varList);
               }
              
               TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs);
               TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs);
               return tom_make_MatchingCondition(newLhs,newRhs);
              }}} }} }} }}} }}} }} }} }}} }}} }}} } if(tom_is_fun_sym_Tom(tom_match5_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match5_1_1=tom_get_slot_Tom_tomList(tom_match5_1); { jtom.adt.tomsignature.types.TomList varList=tom_match5_1_1; if(tom_is_fun_sym_EqualityCondition(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_1=tom_get_slot_EqualityCondition_lhs(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_2=tom_get_slot_EqualityCondition_rhs(tom_match5_2); if(tom_is_fun_sym_Appl(tom_match5_2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_2_1; { jtom.adt.tomsignature.types.NameList tom_match5_2_1_2=tom_get_slot_Appl_nameList(tom_match5_2_1); if(tom_is_fun_sym_concTomName(tom_match5_2_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_1_2_list1=tom_match5_2_1_2; if(!(tom_is_empty_NameList(tom_match5_2_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_1_2_1=tom_get_head_NameList(tom_match5_2_1_2_list1);tom_match5_2_1_2_list1=tom_get_tail_NameList(tom_match5_2_1_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_1_2_1) ||  false ) { { String  tom_match5_2_1_2_1_1=tom_get_slot_Name_string(tom_match5_2_1_2_1); { String  lhsName=tom_match5_2_1_2_1_1; if(tom_is_empty_NameList(tom_match5_2_1_2_list1)) { if(tom_is_fun_sym_Appl(tom_match5_2_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_2_2; { jtom.adt.tomsignature.types.NameList tom_match5_2_2_2=tom_get_slot_Appl_nameList(tom_match5_2_2); if(tom_is_fun_sym_concTomName(tom_match5_2_2_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match5_2_2_2_list1=tom_match5_2_2_2; if(!(tom_is_empty_NameList(tom_match5_2_2_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match5_2_2_2_1=tom_get_head_NameList(tom_match5_2_2_2_list1);tom_match5_2_2_2_list1=tom_get_tail_NameList(tom_match5_2_2_2_list1); if(tom_is_fun_sym_Name(tom_match5_2_2_2_1) ||  false ) { { String  tom_match5_2_2_2_1_1=tom_get_slot_Name_string(tom_match5_2_2_2_1); { String  rhsName=tom_match5_2_2_2_1_1; if(tom_is_empty_NameList(tom_match5_2_2_2_list1)) {



               TomSymbol lhsSymbol = getSymbol(lhsName);
               TomSymbol rhsSymbol = getSymbol(rhsName);
               TomType type;
              
               if(lhsSymbol != null) {
                 type = getSymbolCodomain(lhsSymbol);
               } else if(rhsSymbol != null) {
                 type = getSymbolCodomain(rhsSymbol);
               } else {
                 // both lhs and rhs are variables
                 type = getTypeFromVariableList(tom_make_Name(lhsName),varList);
               }
              
               //System.out.println("EqualityCondition type = " + type);
              
               TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs);
               TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs);
                
               //System.out.println("lhs    = " + lhs);
               //System.out.println("newLhs = " + newLhs);
              
               return tom_make_TypedEqualityCondition(type,newLhs,newRhs);
              }}} }} }} }}} } }}} }} }} }}} }}} }}} } { jtom.adt.tomsignature.types.TomTerm context=tom_match5_1; if(tom_is_fun_sym_Match(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_2_1=tom_get_slot_Match_subjectList(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_2=tom_get_slot_Match_astPatternList(tom_match5_2); { jtom.adt.tomsignature.types.OptionList tom_match5_2_3=tom_get_slot_Match_option(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tomSubjectList=tom_match5_2_1; { jtom.adt.tomsignature.types.TomTerm patternList=tom_match5_2_2; { jtom.adt.tomsignature.types.OptionList option=tom_match5_2_3;


               //System.out.println("tomSubjectList = " + tomSubjectList);
               TomTerm newSubjectList = expandVariable(context,tomSubjectList);
               //System.out.println("newSubjectList = " + newSubjectList);
               TomTerm newPatternList = expandVariable(newSubjectList,patternList);
               return tom_make_Match(newSubjectList,newPatternList,option);
             }}}}}} }}}}}}
 // end match
        } else if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomTerm tom_match6_1=(( jtom.adt.tomsignature.types.TomTerm)contextSubject);{ { jtom.adt.tomsignature.types.TomTerm tom_match6_2=(( jtom.adt.tomsignature.types.TomTerm)subject);{ { jtom.adt.tomsignature.types.TomTerm context=tom_match6_1; if(tom_is_fun_sym_Appl(tom_match6_2) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match6_2_1=tom_get_slot_Appl_option(tom_match6_2); { jtom.adt.tomsignature.types.NameList tom_match6_2_2=tom_get_slot_Appl_nameList(tom_match6_2); { jtom.adt.tomsignature.types.TomList tom_match6_2_3=tom_get_slot_Appl_args(tom_match6_2); { jtom.adt.tomsignature.types.ConstraintList tom_match6_2_4=tom_get_slot_Appl_constraints(tom_match6_2); { jtom.adt.tomsignature.types.OptionList option=tom_match6_2_1; if(tom_is_fun_sym_concTomName(tom_match6_2_2) ||  false ) { { jtom.adt.tomsignature.types.NameList nameList=tom_match6_2_2; { jtom.adt.tomsignature.types.NameList tom_match6_2_2_list1=tom_match6_2_2; if(!(tom_is_empty_NameList(tom_match6_2_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match6_2_2_1=tom_get_head_NameList(tom_match6_2_2_list1);tom_match6_2_2_list1=tom_get_tail_NameList(tom_match6_2_2_list1); if(tom_is_fun_sym_Name(tom_match6_2_2_1) ||  false ) { { String  tom_match6_2_2_1_1=tom_get_slot_Name_string(tom_match6_2_2_1); { String  tomName=tom_match6_2_2_1_1; { jtom.adt.tomsignature.types.TomList l=tom_match6_2_3; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_2_4;

               TomSymbol tomSymbol = null;
               if(tomName.equals("")) {
                 if(contextSubject.hasAstType()) {
                   tomSymbol = getSymbol(contextSubject.getAstType());
                   nameList= tom_cons_list_concTomName(tomSymbol.getAstName(),tom_empty_list_concTomName());
                   if(tomSymbol==null) {
                     throw new TomRuntimeException("no symbol found for type '" + contextSubject.getAstType() + "'");
                   } 
                 }
               } else {
                 tomSymbol = getSymbol(tomName);
               }

               if(tomSymbol != null) {
                 TomList subterm = expandVariableList(tomSymbol, l);
                 ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(getSymbolCodomain(tomSymbol)),constraints);
                 return tom_make_Appl(option,nameList,subterm,newConstraints);
               } else {
                  { jtom.adt.tomsignature.types.TomTerm tom_match7_1=(( jtom.adt.tomsignature.types.TomTerm)contextSubject);{ if(tom_is_fun_sym_TomTypeToTomTerm(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match7_1_1=tom_get_slot_TomTypeToTomTerm_astType(tom_match7_1); if(tom_is_fun_sym_Type(tom_match7_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match7_1_1;

                     if(l.isEmpty()  && !hasConstructor(option)) {
                       ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type),constraints);
                       return tom_make_Variable(option,nameList.getHead(),type,newConstraints);
                     } else {
                       TomList subterm = expandVariableList(tom_make_emptySymbol(), l);
                       ConstraintList newConstraints = expandVariableConstraintList(tom_make_emptyTerm(),constraints);
                       return tom_make_Appl(option,nameList,subterm,newConstraints);
                     }
                   } }} } if(tom_is_fun_sym_Variable(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match7_1_3=tom_get_slot_Variable_astType(tom_match7_1); { jtom.adt.tomsignature.types.TomType type=tom_match7_1_3;

                     ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type),constraints);
                     if(l.isEmpty()  && !hasConstructor(option)) {
                       return tom_make_Variable(option,nameList.getHead(),type,newConstraints);
                     } else {
                       TomList subterm = expandVariableList(tom_make_emptySymbol(), l);
                       return tom_make_Appl(option,nameList,subterm,newConstraints);
                     }
                   }} }

                     // do nothing
                   }}

               }
             }}}} }} }}} }}}}}} }} if(tom_is_fun_sym_TomTypeToTomTerm(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm context=tom_match6_1; { jtom.adt.tomsignature.types.TomType tom_match6_1_1=tom_get_slot_TomTypeToTomTerm_astType(tom_match6_1); if(tom_is_fun_sym_Type(tom_match6_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match6_1_1; if(tom_is_fun_sym_Variable(tom_match6_2) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match6_2_1=tom_get_slot_Variable_option(tom_match6_2); { jtom.adt.tomsignature.types.TomName tom_match6_2_2=tom_get_slot_Variable_astName(tom_match6_2); { jtom.adt.tomsignature.types.TomType tom_match6_2_3=tom_get_slot_Variable_astType(tom_match6_2); { jtom.adt.tomsignature.types.ConstraintList tom_match6_2_4=tom_get_slot_Variable_constraints(tom_match6_2); { jtom.adt.tomsignature.types.OptionList option=tom_match6_2_1; { jtom.adt.tomsignature.types.TomName astName=tom_match6_2_2; if(tom_is_fun_sym_TomTypeAlone(tom_match6_2_3) ||  false ) { { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_2_4;



               // create a variable
               return tom_make_Variable(option,astName,type,expandVariableConstraintList(context,constraints));
             } }}}}}}} }} }}} } { jtom.adt.tomsignature.types.TomTerm context=tom_match6_1; if(tom_is_fun_sym_Variable(tom_match6_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match6_2; { jtom.adt.tomsignature.types.OptionList tom_match6_2_1=tom_get_slot_Variable_option(tom_match6_2); { jtom.adt.tomsignature.types.TomName tom_match6_2_2=tom_get_slot_Variable_astName(tom_match6_2); { jtom.adt.tomsignature.types.TomType tom_match6_2_3=tom_get_slot_Variable_astType(tom_match6_2); { jtom.adt.tomsignature.types.ConstraintList tom_match6_2_4=tom_get_slot_Variable_constraints(tom_match6_2); { jtom.adt.tomsignature.types.OptionList option=tom_match6_2_1; if(tom_is_fun_sym_Name(tom_match6_2_2) ||  false ) { { String  tom_match6_2_2_1=tom_get_slot_Name_string(tom_match6_2_2); { String  strName=tom_match6_2_2_1; if(tom_is_fun_sym_TomTypeAlone(tom_match6_2_3) ||  false ) { { String  tom_match6_2_3_1=tom_get_slot_TomTypeAlone_string(tom_match6_2_3); { String  tomType=tom_match6_2_3_1; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_2_4;


               // create a variable
               TomType localType = getType(tomType);
               if(localType != null) {
                 return tom_make_Variable(option,tom_make_Name(strName),localType,constraints);
               } else {
                 // do nothing
               }
             }}} }}} }}}}}}} }} if(tom_is_fun_sym_TomTypeToTomTerm(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_1=tom_get_slot_TomTypeToTomTerm_astType(tom_match6_1); if(tom_is_fun_sym_Type(tom_match6_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match6_1_1; if(tom_is_fun_sym_Placeholder(tom_match6_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm p=tom_match6_2; { jtom.adt.tomsignature.types.OptionList tom_match6_2_1=tom_get_slot_Placeholder_option(tom_match6_2); { jtom.adt.tomsignature.types.ConstraintList tom_match6_2_2=tom_get_slot_Placeholder_constraints(tom_match6_2); { jtom.adt.tomsignature.types.OptionList option=tom_match6_2_1; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_2_2;


               ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type),constraints);
               // create an unamed variable
               return tom_make_UnamedVariable(option,type,newConstraints);
             }}}}} }} }} } if(tom_is_fun_sym_Variable(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match6_1_1=tom_get_slot_Variable_option(tom_match6_1); { jtom.adt.tomsignature.types.TomName tom_match6_1_2=tom_get_slot_Variable_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomType tom_match6_1_3=tom_get_slot_Variable_astType(tom_match6_1); { jtom.adt.tomsignature.types.OptionList option1=tom_match6_1_1; { jtom.adt.tomsignature.types.TomName name1=tom_match6_1_2; { jtom.adt.tomsignature.types.TomType type1=tom_match6_1_3; if(tom_is_fun_sym_Placeholder(tom_match6_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm p=tom_match6_2; { jtom.adt.tomsignature.types.OptionList tom_match6_2_1=tom_get_slot_Placeholder_option(tom_match6_2); { jtom.adt.tomsignature.types.ConstraintList tom_match6_2_2=tom_get_slot_Placeholder_constraints(tom_match6_2); { jtom.adt.tomsignature.types.OptionList option=tom_match6_2_1; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_2_2;


               ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(type1),constraints);
               // create an unamed variable
               return tom_make_UnamedVariable(option,type1,newConstraints);
             }}}}} }}}}}}} } { jtom.adt.tomsignature.types.TomTerm context=tom_match6_1; if(tom_is_fun_sym_TLVar(tom_match6_2) ||  false ) { { String  tom_match6_2_1=tom_get_slot_TLVar_strName(tom_match6_2); { jtom.adt.tomsignature.types.TomType tom_match6_2_2=tom_get_slot_TLVar_astType(tom_match6_2); { String  strName=tom_match6_2_1; if(tom_is_fun_sym_TomTypeAlone(tom_match6_2_2) ||  false ) { { String  tom_match6_2_2_1=tom_get_slot_TomTypeAlone_string(tom_match6_2_2); { String  tomType=tom_match6_2_2_1;


               // create a variable: its type is ensured by checker
               TomType localType = getType(tomType);
               OptionList option = getAstFactory().makeOption();
               return tom_make_Variable(option,tom_make_Name(strName),localType,tom_empty_list_concConstraint());
             }} }}}} }} { jtom.adt.tomsignature.types.TomTerm context=tom_match6_1; if(tom_is_fun_sym_TLVar(tom_match6_2) ||  false ) { { String  tom_match6_2_1=tom_get_slot_TLVar_strName(tom_match6_2); { jtom.adt.tomsignature.types.TomType tom_match6_2_2=tom_get_slot_TLVar_astType(tom_match6_2); { String  strName=tom_match6_2_1; if(tom_is_fun_sym_Type(tom_match6_2_2) ||  false ) { { jtom.adt.tomsignature.types.TomType localType=tom_match6_2_2;


               // create a variable: its type is ensured by checker
               OptionList option = getAstFactory().makeOption();
               return tom_make_Variable(option,tom_make_Name(strName),localType,tom_empty_list_concConstraint());
             } }}}} }} if(tom_is_fun_sym_SubjectList(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match6_1_1=tom_get_slot_SubjectList_tomList(tom_match6_1); { jtom.adt.tomsignature.types.TomList l1=tom_match6_1_1; if(tom_is_fun_sym_TermList(tom_match6_2) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match6_2_1=tom_get_slot_TermList_tomList(tom_match6_2); { jtom.adt.tomsignature.types.TomList subjectList=tom_match6_2_1;


               //System.out.println("expandVariable.9: "+l1+"(" + subjectList + ")");
                
               // process a list of subterms
               ArrayList list = new ArrayList();
               while(!subjectList.isEmpty()) {
                 list.add(expandVariable(l1.getHead(), subjectList.getHead()));
                 subjectList= subjectList.getTail();
                 l1= l1.getTail();
               }
               return tom_make_TermList(getAstFactory().makeList(list));
             }} }}} }}}}}
 // end match
        } // end instanceof TomTerm
          //System.out.println("TomKernelCompiler.expandVariable default:\n\t" + subject );
          //System.out.println("subject: " + subject);
          //System.out.println("context: " + contextSubject);
        return traversal().genericTraversal(subject,this,contextSubject);
      } // end apply
    }; // end new

  protected TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return (TomTerm) replace_expandVariable.apply(subject,contextSubject); 
  }

  private Instruction expandVariableInstruction(TomTerm contextSubject, Instruction subject) {
    return (Instruction) replace_expandVariable.apply(subject,contextSubject); 
  }

  protected ConstraintList expandVariableConstraintList(TomTerm contextSubject, ConstraintList subject) {
    return (ConstraintList) replace_expandVariable.apply(subject,contextSubject); 
  }

  private TomType getTypeFromVariableList(TomName name, TomList list) {

    //System.out.println("name = " + name);
    //System.out.println("list = " + list);
    
     { jtom.adt.tomsignature.types.TomName tom_match8_1=(( jtom.adt.tomsignature.types.TomName)name);{ { jtom.adt.tomsignature.types.TomList tom_match8_2=(( jtom.adt.tomsignature.types.TomList)list);{ if(tom_is_fun_sym_emptyTomList(tom_match8_2) ||  false ) {

         System.out.println("getTypeFromVariableList. Stange case '" + name + "' not found");
         throw new TomRuntimeException("getTypeFromVariableList. Stange case '" + name + "' not found");
        } { jtom.adt.tomsignature.types.TomName varName=tom_match8_1; if(tom_is_fun_sym_manyTomList(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_2_1=tom_get_slot_manyTomList_head(tom_match8_2); { jtom.adt.tomsignature.types.TomList tom_match8_2_2=tom_get_slot_manyTomList_tail(tom_match8_2); if(tom_is_fun_sym_Variable(tom_match8_2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_2_1_2=tom_get_slot_Variable_astName(tom_match8_2_1); { jtom.adt.tomsignature.types.TomType tom_match8_2_1_3=tom_get_slot_Variable_astType(tom_match8_2_1); { jtom.adt.tomsignature.types.TomName tom_renamedvar_varName_1=tom_match8_2_1_2; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match8_2_1_3) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match8_2_1_3; { jtom.adt.tomsignature.types.TomList tail=tom_match8_2_2;

 return type; }} } }}}} }}} }} { jtom.adt.tomsignature.types.TomName varName=tom_match8_1; if(tom_is_fun_sym_manyTomList(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_2_1=tom_get_slot_manyTomList_head(tom_match8_2); { jtom.adt.tomsignature.types.TomList tom_match8_2_2=tom_get_slot_manyTomList_tail(tom_match8_2); if(tom_is_fun_sym_VariableStar(tom_match8_2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_2_1_2=tom_get_slot_VariableStar_astName(tom_match8_2_1); { jtom.adt.tomsignature.types.TomType tom_match8_2_1_3=tom_get_slot_VariableStar_astType(tom_match8_2_1); { jtom.adt.tomsignature.types.TomName tom_renamedvar_varName_1=tom_match8_2_1_2; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match8_2_1_3) ||  false ) { { jtom.adt.tomsignature.types.TomType type=tom_match8_2_1_3; { jtom.adt.tomsignature.types.TomList tail=tom_match8_2_2;
 return type; }} } }}}} }}} }} if(tom_is_fun_sym_manyTomList(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_2_1=tom_get_slot_manyTomList_head(tom_match8_2); { jtom.adt.tomsignature.types.TomList tom_match8_2_2=tom_get_slot_manyTomList_tail(tom_match8_2); { jtom.adt.tomsignature.types.TomTerm t=tom_match8_2_1; { jtom.adt.tomsignature.types.TomList tail=tom_match8_2_2;
 return getTypeFromVariableList(name,tail); }}}} }}}}}


    return null;
  }
 

  private TomList expandVariableList(TomSymbol subject, TomList subjectList) {
    if(subject == null) {
      throw new TomRuntimeException("expandVariableList: null subject");
    }
    
    //System.out.println("symbol = " + subject.getAstName());
     { jtom.adt.tomsignature.types.TomSymbol tom_match9_1=(( jtom.adt.tomsignature.types.TomSymbol)subject);{ if(tom_is_fun_sym_emptySymbol(tom_match9_1) ||  false ) {

        /*
         * If the top symbol is unknown, the subterms
         * are expanded in an empty context
         */
        ArrayList list = new ArrayList();
        while(!subjectList.isEmpty()) {
          list.add(expandVariable(tom_make_emptyTerm(), subjectList.getHead()));
          subjectList = subjectList.getTail();
        }
        return getAstFactory().makeList(list);
       } if(tom_is_fun_sym_Symbol(tom_match9_1) ||  false ) { { jtom.adt.tomsignature.types.TomSymbol symb=tom_match9_1; { jtom.adt.tomsignature.types.TomType tom_match9_1_2=tom_get_slot_Symbol_typesToType(tom_match9_1); if(tom_is_fun_sym_TypesToType(tom_match9_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomTypeList tom_match9_1_2_1=tom_get_slot_TypesToType_domain(tom_match9_1_2); { jtom.adt.tomsignature.types.TomType tom_match9_1_2_2=tom_get_slot_TypesToType_codomain(tom_match9_1_2); { jtom.adt.tomsignature.types.TomTypeList typeList=tom_match9_1_2_1; { jtom.adt.tomsignature.types.TomType codomain=tom_match9_1_2_2;


          
        // process a list of subterms and a list of types
        TomList result = null;
        ArrayList list = new ArrayList();
        if(isListOperator(symb) || isArrayOperator(symb)) {
          /*
           * TODO:
           * when the symbol is an associative operator,
           * the signature has the form: List conc( Element* )
           * the list of types is reduced to the singleton { Element }
           *
           * consider a pattern: conc(E1*,x,E2*,y,E3*)
           *  assign the type "Element" to each subterm: x and y
           *  assign the type "List" to each subtermList: E1*,E2* and E3*
           */

          //System.out.println("listOperator: " + symb);
          //System.out.println("subjectList: " + subjectList);
          
          TomType domainType = typeList.getHead();
          while(!subjectList.isEmpty()) {
            TomTerm subterm = subjectList.getHead();
            //System.out.println("subterm:\n" + subterm);
            matchBlock: {
               { jtom.adt.tomsignature.types.TomTerm tom_match10_1=(( jtom.adt.tomsignature.types.TomTerm)subterm);{ if(tom_is_fun_sym_VariableStar(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match10_1_1=tom_get_slot_VariableStar_option(tom_match10_1); { jtom.adt.tomsignature.types.TomName tom_match10_1_2=tom_get_slot_VariableStar_astName(tom_match10_1); { jtom.adt.tomsignature.types.ConstraintList tom_match10_1_4=tom_get_slot_VariableStar_constraints(tom_match10_1); { jtom.adt.tomsignature.types.OptionList option=tom_match10_1_1; { jtom.adt.tomsignature.types.TomName name=tom_match10_1_2; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match10_1_4;

                  ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(codomain),constraints);
                  list.add(tom_make_VariableStar(option,name,codomain,newConstraints));
                  //System.out.println("*** break: " + subterm);
                  break matchBlock;
                }}}}}} } if(tom_is_fun_sym_UnamedVariableStar(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match10_1_1=tom_get_slot_UnamedVariableStar_option(tom_match10_1); { jtom.adt.tomsignature.types.ConstraintList tom_match10_1_3=tom_get_slot_UnamedVariableStar_constraints(tom_match10_1); { jtom.adt.tomsignature.types.OptionList option=tom_match10_1_1; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match10_1_3;


                  ConstraintList newConstraints = expandVariableConstraintList(tom_make_TomTypeToTomTerm(codomain),constraints);
                  list.add(tom_make_UnamedVariableStar(option,codomain,newConstraints));
                  break matchBlock;
                }}}} }


                  list.add(expandVariable(tom_make_TomTypeToTomTerm(domainType), subterm));
                  break matchBlock;
                }}

            }
            subjectList = subjectList.getTail();
          }
        } else {
          while(!subjectList.isEmpty()) {
            //System.out.println("type = " + typeList.getHead());
            //System.out.println("head = " + subjectList.getHead());
            list.add(expandVariable(tom_make_TomTypeToTomTerm(typeList.getHead()), subjectList.getHead()));
            subjectList = subjectList.getTail();
            typeList= typeList.getTail();
          }
        }
       
        result = getAstFactory().makeList(list);
        return result;
      }}}} }}} }


        System.out.println("expandVariableList: strange case: '" + subject + "'");
        throw new TomRuntimeException("expandVariableList: strange case: '" + subject + "'");
      }}

  }

  /*
   * updateSymbol is called after a first syntax expansion phase
   * this phase updates the symbolTable according to the typeTable
   * this is performed by recursively traversing each symbol
   * each TomTypeAlone is replace by the corresponding TomType
   */
  public void updateSymbolTable() {
    Iterator it = symbolTable().keySymbolIterator();
    while(it.hasNext()) {
      String tomName = (String)it.next();
      TomTerm emptyContext = tom_make_emptyTerm();
      TomSymbol tomSymbol = getSymbol(tomName);
      tomSymbol = expandVariable(emptyContext,tom_make_TomSymbolToTomTerm(tomSymbol)).getAstSymbol();
      symbolTable().putSymbol(tomName,tomSymbol);
    }
  }

  private TomType getType(String tomName) {
    TomType tomType = symbolTable().getType(tomName);
    return tomType;
  }

  
} // Class TomKernelExpander
