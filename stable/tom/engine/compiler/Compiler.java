/* Generated by TOM (version 2.5rc2): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import java.util.*;
import java.util.logging.Level;

import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.tools.ASTFactory;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.Tools;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import tom.library.sl.*;

/**
 * The Compiler plugin.
 */
public class Compiler extends TomGenericPlugin {

  /* Generated by TOM (version 2.5rc2): Do not edit this file *//* Generated by TOM (version 2.5rc2): Do not edit this file *//* Generated by TOM (version 2.5rc2): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5rc2): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Instruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Instruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.Instruction ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_InstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.InstructionList ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomForwardType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomForwardType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomForwardType ;}private static boolean tom_equal_term_TomVisit(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomVisit(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomVisit ;}private static boolean tom_equal_term_TomVisitList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomVisitList(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomVisitList ;}private static boolean tom_equal_term_DeclarationList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_DeclarationList(Object t) { return  t instanceof tom.engine.adt.tomdeclaration.types.DeclarationList ;}private static boolean tom_equal_term_Declaration(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Declaration(Object t) { return  t instanceof tom.engine.adt.tomdeclaration.types.Declaration ;}private static boolean tom_equal_term_TomNumber(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumber(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumber ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumberList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumberList ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_PatternInstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PatternInstructionList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.PatternInstructionList ;}private static boolean tom_equal_term_PatternInstruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PatternInstruction(Object t) { return  t instanceof tom.engine.adt.tomterm.types.PatternInstruction ;}private static boolean tom_equal_term_Pattern(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Pattern(Object t) { return  t instanceof tom.engine.adt.tomterm.types.Pattern ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomList ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_PatternList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PatternList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.PatternList ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.engine.adt.tomoption.types.Option ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.engine.adt.tomslot.types.Slot ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_If( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.If.make(t0, t1, t2) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Return( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tominstruction.types.instruction.Return.make(t0) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Nop() { return  tom.engine.adt.tominstruction.types.instruction.Nop.make() ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_AbstractBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(t0) ; }private static boolean tom_is_fun_sym_Match( tom.engine.adt.tominstruction.types.Instruction  t) { return  t instanceof tom.engine.adt.tominstruction.types.instruction.Match ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Match( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.PatternInstructionList  t1,  tom.engine.adt.tomoption.types.OptionList  t2) { return  tom.engine.adt.tominstruction.types.instruction.Match.make(t0, t1, t2) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Match_SubjectList( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getSubjectList() ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_Match_AstPatternInstructionList( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Match_Option( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getOption() ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tominstruction.types.Instruction  t) { return  t instanceof tom.engine.adt.tominstruction.types.instruction.CompiledPattern ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_CompiledPattern_PatternList( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getPatternList() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CompiledPattern_AutomataInst( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAutomataInst() ;}private static boolean tom_is_fun_sym_RawAction( tom.engine.adt.tominstruction.types.Instruction  t) { return  t instanceof tom.engine.adt.tominstruction.types.instruction.RawAction ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_RawAction_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAstInstruction() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_TypedAction( tom.engine.adt.tominstruction.types.Instruction  t0,  tom.engine.adt.tomterm.types.Pattern  t1,  tom.engine.adt.tomterm.types.PatternList  t2) { return  tom.engine.adt.tominstruction.types.instruction.TypedAction.make(t0, t1, t2) ; }private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomtype.types.TomType  t) { return  t instanceof tom.engine.adt.tomtype.types.tomtype.Type ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Type_TomType( tom.engine.adt.tomtype.types.TomType  t) { return  t.getTomType() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Type_TlType( tom.engine.adt.tomtype.types.TomType  t) { return  t.getTlType() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_TomTypeAlone( String  t0) { return  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make(t0) ; }private static boolean tom_is_fun_sym_ASTTomType( tom.engine.adt.tomtype.types.TomType  t) { return  t instanceof tom.engine.adt.tomtype.types.tomtype.ASTTomType ;}private static  String  tom_get_slot_ASTTomType_String( tom.engine.adt.tomtype.types.TomType  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_VisitTerm( tom.engine.adt.tomsignature.types.TomVisit  t) { return  t instanceof tom.engine.adt.tomsignature.types.tomvisit.VisitTerm ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VisitTerm_VNode( tom.engine.adt.tomsignature.types.TomVisit  t) { return  t.getVNode() ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_VisitTerm_AstPatternInstructionList( tom.engine.adt.tomsignature.types.TomVisit  t) { return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VisitTerm_Option( tom.engine.adt.tomsignature.types.TomVisit  t) { return  t.getOption() ;}private static boolean tom_is_fun_sym_Strategy( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.Strategy ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Strategy_SName( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getSName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Strategy_ExtendsTerm( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getExtendsTerm() ;}private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_get_slot_Strategy_VisitList( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getVisitList() ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_Strategy_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getOrgTrack() ;}private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_make_MethodDef( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomList  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomtype.types.TomType  t3,  tom.engine.adt.tominstruction.types.Instruction  t4) { return  tom.engine.adt.tomdeclaration.types.declaration.MethodDef.make(t0, t1, t2, t3, t4) ; }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_make_Class( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomForwardType  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomdeclaration.types.Declaration  t3) { return  tom.engine.adt.tomdeclaration.types.declaration.Class.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_make_AbstractDecl( tom.engine.adt.tomdeclaration.types.DeclarationList  t0) { return  tom.engine.adt.tomdeclaration.types.declaration.AbstractDecl.make(t0) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_AbsVar( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.AbsVar.make(t0) ; }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  t instanceof tom.engine.adt.tomname.types.tomname.Name ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_Name( String  t0) { return  tom.engine.adt.tomname.types.tomname.Name.make(t0) ; }private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_PositionName( tom.engine.adt.tomname.types.TomNumberList  t0) { return  tom.engine.adt.tomname.types.tomname.PositionName.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TrueTL() { return  tom.engine.adt.tomexpression.types.expression.TrueTL.make() ; }private static boolean tom_is_fun_sym_PatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t instanceof tom.engine.adt.tomterm.types.patterninstruction.PatternInstruction ;}private static  tom.engine.adt.tomterm.types.PatternInstruction  tom_make_PatternInstruction( tom.engine.adt.tomterm.types.Pattern  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tomoption.types.OptionList  t2) { return  tom.engine.adt.tomterm.types.patterninstruction.PatternInstruction.make(t0, t1, t2) ; }private static  tom.engine.adt.tomterm.types.Pattern  tom_get_slot_PatternInstruction_Pattern( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t.getPattern() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_PatternInstruction_Action( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t.getAction() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_PatternInstruction_Option( tom.engine.adt.tomterm.types.PatternInstruction  t) { return  t.getOption() ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomterm.types.Pattern  t) { return  t instanceof tom.engine.adt.tomterm.types.pattern.Pattern ;}private static  tom.engine.adt.tomterm.types.Pattern  tom_make_Pattern( tom.engine.adt.tomterm.types.TomList  t0,  tom.engine.adt.tomterm.types.TomList  t1,  tom.engine.adt.tomterm.types.TomList  t2) { return  tom.engine.adt.tomterm.types.pattern.Pattern.make(t0, t1, t2) ; }private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_SubjectList( tom.engine.adt.tomterm.types.Pattern  t) { return  t.getSubjectList() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_TomList( tom.engine.adt.tomterm.types.Pattern  t) { return  t.getTomList() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_Guards( tom.engine.adt.tomterm.types.Pattern  t) { return  t.getGuards() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Variable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.Variable.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_SubjectList( tom.engine.adt.tomterm.types.TomList  t0) { return  tom.engine.adt.tomterm.types.tomterm.SubjectList.make(t0) ; }private static boolean tom_is_fun_sym_BuildReducedTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildReducedTerm( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomtype.types.TomType  t1) { return  tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm.make(t0, t1) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_BuildReducedTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getTomTerm() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_BuildReducedTerm_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_FunctionCall( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomterm.types.TomList  t2) { return  tom.engine.adt.tomterm.types.tomterm.FunctionCall.make(t0, t1, t2) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildConstant( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.BuildConstant.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildTerm( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomList  t1,  String  t2) { return  tom.engine.adt.tomterm.types.tomterm.BuildTerm.make(t0, t1, t2) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_make_PairSlotAppl( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(t0, t1) ; }private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) { return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getHeadconcInstruction() ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getTailconcInstruction() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.isEmptyconcInstruction() ;}   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {     if(tom_is_empty_concInstruction_InstructionList(l1)) {       return l2;     } else if(tom_is_empty_concInstruction_InstructionList(l2)) {       return l1;     } else if(tom_is_empty_concInstruction_InstructionList(tom_get_tail_concInstruction_InstructionList(l1))) {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(l1),l2);     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(tom_get_tail_concInstruction_InstructionList(l1),l2));     }   }   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end, tom.engine.adt.tominstruction.types.InstructionList  tail) {     if(tom_equal_term_InstructionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(tom_get_tail_concInstruction_InstructionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  t) { return  t instanceof tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration || t instanceof tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_empty_list_concDeclaration() { return  tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ; }private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_cons_list_concDeclaration( tom.engine.adt.tomdeclaration.types.Declaration  e,  tom.engine.adt.tomdeclaration.types.DeclarationList  l) { return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make(e,l) ; }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_get_head_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) { return  l.getHeadconcDeclaration() ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_tail_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) { return  l.getTailconcDeclaration() ;}private static boolean tom_is_empty_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) { return  l.isEmptyconcDeclaration() ;}   private static   tom.engine.adt.tomdeclaration.types.DeclarationList  tom_append_list_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList l1,  tom.engine.adt.tomdeclaration.types.DeclarationList  l2) {     if(tom_is_empty_concDeclaration_DeclarationList(l1)) {       return l2;     } else if(tom_is_empty_concDeclaration_DeclarationList(l2)) {       return l1;     } else if(tom_is_empty_concDeclaration_DeclarationList(tom_get_tail_concDeclaration_DeclarationList(l1))) {       return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(tom_get_head_concDeclaration_DeclarationList(l1),l2);     } else {       return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(tom_get_head_concDeclaration_DeclarationList(l1),tom_append_list_concDeclaration(tom_get_tail_concDeclaration_DeclarationList(l1),l2));     }   }   private static   tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_slice_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  begin,  tom.engine.adt.tomdeclaration.types.DeclarationList  end, tom.engine.adt.tomdeclaration.types.DeclarationList  tail) {     if(tom_equal_term_DeclarationList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(tom_get_head_concDeclaration_DeclarationList(begin),( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_slice_concDeclaration(tom_get_tail_concDeclaration_DeclarationList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  t) { return  t instanceof tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber || t instanceof tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_empty_list_concTomNumber() { return  tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber.make() ; }private static  tom.engine.adt.tomname.types.TomNumberList  tom_cons_list_concTomNumber( tom.engine.adt.tomname.types.TomNumber  e,  tom.engine.adt.tomname.types.TomNumberList  l) { return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_get_head_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) { return  l.getHeadconcTomNumber() ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_tail_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) { return  l.getTailconcTomNumber() ;}private static boolean tom_is_empty_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) { return  l.isEmptyconcTomNumber() ;}   private static   tom.engine.adt.tomname.types.TomNumberList  tom_append_list_concTomNumber( tom.engine.adt.tomname.types.TomNumberList l1,  tom.engine.adt.tomname.types.TomNumberList  l2) {     if(tom_is_empty_concTomNumber_TomNumberList(l1)) {       return l2;     } else if(tom_is_empty_concTomNumber_TomNumberList(l2)) {       return l1;     } else if(tom_is_empty_concTomNumber_TomNumberList(tom_get_tail_concTomNumber_TomNumberList(l1))) {       return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(tom_get_head_concTomNumber_TomNumberList(l1),l2);     } else {       return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(tom_get_head_concTomNumber_TomNumberList(l1),tom_append_list_concTomNumber(tom_get_tail_concTomNumber_TomNumberList(l1),l2));     }   }   private static   tom.engine.adt.tomname.types.TomNumberList  tom_get_slice_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  begin,  tom.engine.adt.tomname.types.TomNumberList  end, tom.engine.adt.tomname.types.TomNumberList  tail) {     if(tom_equal_term_TomNumberList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(tom_get_head_concTomNumber_TomNumberList(begin),( tom.engine.adt.tomname.types.TomNumberList )tom_get_slice_concTomNumber(tom_get_tail_concTomNumber_TomNumberList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if(tom_is_empty_concTomName_TomNameList(l1)) {       return l2;     } else if(tom_is_empty_concTomName_TomNameList(l2)) {       return l1;     } else if(tom_is_empty_concTomName_TomNameList(tom_get_tail_concTomName_TomNameList(l1))) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(tom_get_tail_concTomName_TomNameList(l1),l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(tom_get_tail_concTomName_TomNameList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  t) { return  t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction || t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_empty_list_concPatternInstruction() { return  tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction.make() ; }private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_cons_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  e,  tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction.make(e,l) ; }private static  tom.engine.adt.tomterm.types.PatternInstruction  tom_get_head_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  l.getHeadconcPatternInstruction() ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_tail_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  l.getTailconcPatternInstruction() ;}private static boolean tom_is_empty_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  l.isEmptyconcPatternInstruction() ;}   private static   tom.engine.adt.tomterm.types.PatternInstructionList  tom_append_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList l1,  tom.engine.adt.tomterm.types.PatternInstructionList  l2) {     if(tom_is_empty_concPatternInstruction_PatternInstructionList(l1)) {       return l2;     } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(l2)) {       return l1;     } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(tom_get_tail_concPatternInstruction_PatternInstructionList(l1))) {       return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(tom_get_head_concPatternInstruction_PatternInstructionList(l1),l2);     } else {       return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(tom_get_head_concPatternInstruction_PatternInstructionList(l1),tom_append_list_concPatternInstruction(tom_get_tail_concPatternInstruction_PatternInstructionList(l1),l2));     }   }   private static   tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slice_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  begin,  tom.engine.adt.tomterm.types.PatternInstructionList  end, tom.engine.adt.tomterm.types.PatternInstructionList  tail) {     if(tom_equal_term_PatternInstructionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(tom_get_head_concPatternInstruction_PatternInstructionList(begin),( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_slice_concPatternInstruction(tom_get_tail_concPatternInstruction_PatternInstructionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomterm.types.TomList  t) { return  t instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm || t instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm ;}private static  tom.engine.adt.tomterm.types.TomList  tom_empty_list_concTomTerm() { return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ; }private static  tom.engine.adt.tomterm.types.TomList  tom_cons_list_concTomTerm( tom.engine.adt.tomterm.types.TomTerm  e,  tom.engine.adt.tomterm.types.TomList  l) { return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(e,l) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_head_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.getHeadconcTomTerm() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.getTailconcTomTerm() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.isEmptyconcTomTerm() ;}   private static   tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList l1,  tom.engine.adt.tomterm.types.TomList  l2) {     if(tom_is_empty_concTomTerm_TomList(l1)) {       return l2;     } else if(tom_is_empty_concTomTerm_TomList(l2)) {       return l1;     } else if(tom_is_empty_concTomTerm_TomList(tom_get_tail_concTomTerm_TomList(l1))) {       return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(tom_get_head_concTomTerm_TomList(l1),l2);     } else {       return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(tom_get_tail_concTomTerm_TomList(l1),l2));     }   }   private static   tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end, tom.engine.adt.tomterm.types.TomList  tail) {     if(tom_equal_term_TomList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm(tom_get_tail_concTomTerm_TomList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concPattern( tom.engine.adt.tomterm.types.PatternList  t) { return  t instanceof tom.engine.adt.tomterm.types.patternlist.ConsconcPattern || t instanceof tom.engine.adt.tomterm.types.patternlist.EmptyconcPattern ;}private static  tom.engine.adt.tomterm.types.PatternList  tom_empty_list_concPattern() { return  tom.engine.adt.tomterm.types.patternlist.EmptyconcPattern.make() ; }private static  tom.engine.adt.tomterm.types.PatternList  tom_cons_list_concPattern( tom.engine.adt.tomterm.types.Pattern  e,  tom.engine.adt.tomterm.types.PatternList  l) { return  tom.engine.adt.tomterm.types.patternlist.ConsconcPattern.make(e,l) ; }private static  tom.engine.adt.tomterm.types.Pattern  tom_get_head_concPattern_PatternList( tom.engine.adt.tomterm.types.PatternList  l) { return  l.getHeadconcPattern() ;}private static  tom.engine.adt.tomterm.types.PatternList  tom_get_tail_concPattern_PatternList( tom.engine.adt.tomterm.types.PatternList  l) { return  l.getTailconcPattern() ;}private static boolean tom_is_empty_concPattern_PatternList( tom.engine.adt.tomterm.types.PatternList  l) { return  l.isEmptyconcPattern() ;}   private static   tom.engine.adt.tomterm.types.PatternList  tom_append_list_concPattern( tom.engine.adt.tomterm.types.PatternList l1,  tom.engine.adt.tomterm.types.PatternList  l2) {     if(tom_is_empty_concPattern_PatternList(l1)) {       return l2;     } else if(tom_is_empty_concPattern_PatternList(l2)) {       return l1;     } else if(tom_is_empty_concPattern_PatternList(tom_get_tail_concPattern_PatternList(l1))) {       return ( tom.engine.adt.tomterm.types.PatternList )tom_cons_list_concPattern(tom_get_head_concPattern_PatternList(l1),l2);     } else {       return ( tom.engine.adt.tomterm.types.PatternList )tom_cons_list_concPattern(tom_get_head_concPattern_PatternList(l1),tom_append_list_concPattern(tom_get_tail_concPattern_PatternList(l1),l2));     }   }   private static   tom.engine.adt.tomterm.types.PatternList  tom_get_slice_concPattern( tom.engine.adt.tomterm.types.PatternList  begin,  tom.engine.adt.tomterm.types.PatternList  end, tom.engine.adt.tomterm.types.PatternList  tail) {     if(tom_equal_term_PatternList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomterm.types.PatternList )tom_cons_list_concPattern(tom_get_head_concPattern_PatternList(begin),( tom.engine.adt.tomterm.types.PatternList )tom_get_slice_concPattern(tom_get_tail_concPattern_PatternList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) { return  t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption || t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.getHeadconcOption() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.getTailconcOption() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.isEmptyconcOption() ;}   private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if(tom_is_empty_concOption_OptionList(l1)) {       return l2;     } else if(tom_is_empty_concOption_OptionList(l2)) {       return l1;     } else if(tom_is_empty_concOption_OptionList(tom_get_tail_concOption_OptionList(l1))) {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(tom_get_head_concOption_OptionList(l1),l2);     } else {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(tom_get_tail_concOption_OptionList(l1),l2));     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if(tom_equal_term_OptionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(tom_get_tail_concOption_OptionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getHeadconcConstraint() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getTailconcConstraint() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.isEmptyconcConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if(tom_is_empty_concConstraint_ConstraintList(l1)) {       return l2;     } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {       return l1;     } else if(tom_is_empty_concConstraint_ConstraintList(tom_get_tail_concConstraint_ConstraintList(l1))) {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(l1),l2);     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(tom_get_tail_concConstraint_ConstraintList(l1),l2));     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if(tom_equal_term_ConstraintList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(tom_get_tail_concConstraint_ConstraintList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) { return  t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot || t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getHeadconcSlot() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getTailconcSlot() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.isEmptyconcSlot() ;}   private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if(tom_is_empty_concSlot_SlotList(l1)) {       return l2;     } else if(tom_is_empty_concSlot_SlotList(l2)) {       return l1;     } else if(tom_is_empty_concSlot_SlotList(tom_get_tail_concSlot_SlotList(l1))) {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(l1),l2);     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(tom_get_tail_concSlot_SlotList(l1),l2));     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if(tom_equal_term_SlotList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(tom_get_tail_concSlot_SlotList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5rc2): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5rc2): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }   private static boolean tom_is_fun_sym_ChoiceId( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.ChoiceId) ;}private static  tom.library.sl.Strategy  tom_empty_list_ChoiceId() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_ChoiceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.ChoiceId(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.ChoiceId.THEN) ;}private static boolean tom_is_empty_ChoiceId_Strategy( tom.library.sl.Strategy  t) { return  t ==null ;}   private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_ChoiceId_Strategy(l1)) {       return l2;     } else if(tom_is_empty_ChoiceId_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_ChoiceId(l1)) {       if(tom_is_empty_ChoiceId_Strategy(((tom_is_fun_sym_ChoiceId(l1))?tom_get_tail_ChoiceId_Strategy(l1):tom_empty_list_ChoiceId()))) {         return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_head_ChoiceId_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_head_ChoiceId_Strategy(l1):l1),tom_append_list_ChoiceId(((tom_is_fun_sym_ChoiceId(l1))?tom_get_tail_ChoiceId_Strategy(l1):tom_empty_list_ChoiceId()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_ChoiceId(((tom_is_fun_sym_ChoiceId(begin))?tom_get_head_ChoiceId_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((tom_is_fun_sym_ChoiceId(begin))?tom_get_tail_ChoiceId_Strategy(begin):tom_empty_list_ChoiceId()),end,tail));     }   }    /* Generated by TOM (version 2.5rc2): Do not edit this file */ /* Generated by TOM (version 2.5rc2): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.5rc2): Do not edit this file */private static boolean tom_equal_term_Collection(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_Collection(Object t) { return  t instanceof java.util.Collection ;} /* Generated by TOM (version 2.5rc2): Do not edit this file */ private static boolean tom_is_sort_Compiler(Object t) { return 







 t instanceof Compiler ;}private static  tom.library.sl.Strategy  tom_make_ChoiceTopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("x"),tom_cons_list_ChoiceId(v,tom_cons_list_ChoiceId(tom_make_All(tom_make_MuVar("x")),tom_empty_list_ChoiceId())))



 ; }


  /** some output suffixes */
  public static final String COMPILED_SUFFIX = ".tfix.compiled";

  /** the declared options string*/
  public static final String DECLARED_OPTIONS = "<options><boolean name='compile' altName='' description='Compiler (activated by default)' value='true'/></options>";

  /** unicity var counter*/
  private static int absVarNumber;

  /** Constructor*/
  public Compiler() {
    super("Compiler");
  }

  public void run() {
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");
    try {
      // reinit absVarNumber to generate reproducible output
      absVarNumber = 0;
      TomTerm preCompiledTerm = (TomTerm) tom_make_preProcessing(this).visitLight((TomTerm)getWorkingTerm());
      //System.out.println("preCompiledTerm = \n" + preCompiledTerm);
      TomTerm compiledTerm = ConstraintCompiler.compile(preCompiledTerm,getStreamManager().getSymbolTable());
      //System.out.println("compiledTerm = \n" + compiledTerm);            
      Collection hashSet = new HashSet();
      TomTerm renamedTerm = (TomTerm) tom_make_TopDown(tom_make_findRenameVariable(hashSet)).visitLight(compiledTerm);
      //System.out.println("renamedTerm = \n" + renamedTerm);
      // verbose
      getLogger().log(Level.INFO, TomMessage.tomCompilationPhase.getMessage(),
          new Integer((int)(System.currentTimeMillis()-startChrono)) );
      setWorkingTerm(renamedTerm);
      if(intermediate) {
        Tools.generateOutput(getStreamManager().getOutputFileName() + COMPILED_SUFFIX, (TomTerm)getWorkingTerm());
      }
    } catch (Exception e) {
      getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
          new Object[]{getStreamManager().getInputFileName(), "Compiler", e.getMessage()} );
      e.printStackTrace();
    }
  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(Compiler.DECLARED_OPTIONS);
  }

  /*
   * preProcessing:
   * replaces BuildReducedTerm by BuildList, BuildArray or BuildTerm
   *
   * abstract list-matching patterns
   */

  private static  tom.library.sl.Strategy  tom_make_preProcessing( Compiler  compiler) { return tom_make_ChoiceTopDown(tom_make_preProcessing_once(compiler))
 ; }private static class preProcessing_once extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  Compiler  compiler; public preProcessing_once( Compiler  compiler) { super(tom_make_Identity());this.compiler=compiler;}public  Compiler  getcompiler() { return compiler;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_TomTerm(tom__arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch120NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);if (tom_is_fun_sym_BuildReducedTerm(tomMatch120NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch120NameNumber_freshVar_1=tom_get_slot_BuildReducedTerm_TomTerm(tomMatch120NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch120NameNumber_freshVar_0=tomMatch120NameNumber_freshVar_1;{ boolean tomMatch120NameNumber_freshVar_2= false ;if (tom_is_fun_sym_Variable(tomMatch120NameNumber_freshVar_0)) {tomMatch120NameNumber_freshVar_2= true ;} else {if (tom_is_fun_sym_VariableStar(tomMatch120NameNumber_freshVar_0)) {tomMatch120NameNumber_freshVar_2= true ;}}if ((tomMatch120NameNumber_freshVar_2 ==  true )) {if ( true ) {





        return tomMatch120NameNumber_freshVar_0;
      }}}}}}if (tom_is_fun_sym_BuildReducedTerm(tomMatch120NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch120NameNumber_freshVar_4=tom_get_slot_BuildReducedTerm_TomTerm(tomMatch120NameNumberfreshSubject_1);{  tom.engine.adt.tomtype.types.TomType  tomMatch120NameNumber_freshVar_5=tom_get_slot_BuildReducedTerm_AstType(tomMatch120NameNumberfreshSubject_1);if (tom_is_fun_sym_RecordAppl(tomMatch120NameNumber_freshVar_4)) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch120NameNumber_freshVar_6=tom_get_slot_RecordAppl_Option(tomMatch120NameNumber_freshVar_4);{  tom.engine.adt.tomname.types.TomNameList  tomMatch120NameNumber_freshVar_7=tom_get_slot_RecordAppl_NameList(tomMatch120NameNumber_freshVar_4);{  tom.engine.adt.tomslot.types.SlotList  tomMatch120NameNumber_freshVar_8=tom_get_slot_RecordAppl_Slots(tomMatch120NameNumber_freshVar_4);{  tom.engine.adt.tomoption.types.OptionList  tom_optionList=tomMatch120NameNumber_freshVar_6;if (tom_is_fun_sym_concTomName(tomMatch120NameNumber_freshVar_7)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch120NameNumber_freshVar_10=tomMatch120NameNumber_freshVar_7;if (!(tom_is_empty_concTomName_TomNameList(tomMatch120NameNumber_freshVar_10))) {{  tom.engine.adt.tomname.types.TomName  tomMatch120NameNumber_freshVar_3=tom_get_head_concTomName_TomNameList(tomMatch120NameNumber_freshVar_10);{  tom.engine.adt.tomname.types.TomNameList  tomMatch120NameNumber_freshVar_11=tom_get_tail_concTomName_TomNameList(tomMatch120NameNumber_freshVar_10);if (tom_is_empty_concTomName_TomNameList(tomMatch120NameNumber_freshVar_11)) {if (tom_is_fun_sym_Name(tomMatch120NameNumber_freshVar_3)) {{  String  tomMatch120NameNumber_freshVar_9=tom_get_slot_Name_String(tomMatch120NameNumber_freshVar_3);{  tom.engine.adt.tomname.types.TomName  tom_name=tomMatch120NameNumber_freshVar_3;if ( true ) {


        TomSymbol tomSymbol = compiler.symbolTable().getSymbolFromName(tomMatch120NameNumber_freshVar_9);
        SlotList newTermArgs = (SlotList) tom_make_preProcessing_makeTerm(compiler).visitLight(tomMatch120NameNumber_freshVar_8);
        TomList tomListArgs = TomBase.slotListToTomList(newTermArgs);

        if(TomBase.hasConstant(tom_optionList)) {
          return tom_make_BuildConstant(tom_name);
        } else if(tomSymbol != null) {
          if(TomBase.isListOperator(tomSymbol)) {
            return ASTFactory.buildList(tom_name,tomListArgs,compiler.symbolTable());
          } else if(TomBase.isArrayOperator(tomSymbol)) {
            return ASTFactory.buildArray(tom_name,tomListArgs,compiler.symbolTable());
          } else if(TomBase.isDefinedSymbol(tomSymbol)) {
            return tom_make_FunctionCall(tom_name,TomBase.getSymbolCodomain(tomSymbol),tomListArgs);
          } else {
            String moduleName = TomBase.getModuleName(tom_optionList);
            if(moduleName==null) {
              moduleName = TomBase.DEFAULT_MODULE_NAME;
            }
            return tom_make_BuildTerm(tom_name,tomListArgs,moduleName);
          }
        } else {
          return tom_make_FunctionCall(tom_name,tomMatch120NameNumber_freshVar_5,tomListArgs);
        }

      }}}}}}}}}}}}}}}}}}}}return super.visit_TomTerm(tom__arg); }public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch123NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_Match(tomMatch123NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch123NameNumber_freshVar_0=tom_get_slot_Match_SubjectList(tomMatch123NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch123NameNumber_freshVar_1=tom_get_slot_Match_AstPatternInstructionList(tomMatch123NameNumberfreshSubject_1);{  tom.engine.adt.tomoption.types.OptionList  tomMatch123NameNumber_freshVar_2=tom_get_slot_Match_Option(tomMatch123NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.PatternInstructionList  tom_patternInstructionList=tomMatch123NameNumber_freshVar_1;{  tom.engine.adt.tomoption.types.OptionList  tom_matchOptionList=tomMatch123NameNumber_freshVar_2;if ( true ) {





        Option orgTrack = TomBase.findOriginTracking(tom_matchOptionList);
        PatternInstructionList newPatternInstructionList = tom_empty_list_concPatternInstruction();
        PatternList negativePattern = tom_empty_list_concPattern();
        TomTerm newMatchSubjectList = (TomTerm) tom_make_preProcessing(compiler).visitLight(tomMatch123NameNumber_freshVar_0);
        while(!tom_patternInstructionList.isEmptyconcPatternInstruction()) {
          /*
           * the call to preProcessing performs the recursive expansion
           * of nested match constructs
           */
          PatternInstruction newPatternInstruction = (PatternInstruction) tom_make_preProcessing(compiler).visitLight(tom_patternInstructionList.getHeadconcPatternInstruction());

matchBlock: {
              if (tom_is_sort_PatternInstruction(newPatternInstruction)) {{  tom.engine.adt.tomterm.types.PatternInstruction  tomMatch122NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.PatternInstruction )newPatternInstruction);if (tom_is_fun_sym_PatternInstruction(tomMatch122NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.Pattern  tomMatch122NameNumber_freshVar_1=tom_get_slot_PatternInstruction_Pattern(tomMatch122NameNumberfreshSubject_1);{  tom.engine.adt.tominstruction.types.Instruction  tomMatch122NameNumber_freshVar_2=tom_get_slot_PatternInstruction_Action(tomMatch122NameNumberfreshSubject_1);{  tom.engine.adt.tomoption.types.OptionList  tomMatch122NameNumber_freshVar_3=tom_get_slot_PatternInstruction_Option(tomMatch122NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.Pattern  tomMatch122NameNumber_freshVar_0=tomMatch122NameNumber_freshVar_1;{  tom.engine.adt.tominstruction.types.Instruction  tom_actionInst=tomMatch122NameNumber_freshVar_2;if (tom_is_fun_sym_Pattern(tomMatch122NameNumber_freshVar_0)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch122NameNumber_freshVar_4=tom_get_slot_Pattern_SubjectList(tomMatch122NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomList  tomMatch122NameNumber_freshVar_5=tom_get_slot_Pattern_TomList(tomMatch122NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.Pattern  tom_pattern=tomMatch122NameNumber_freshVar_0;if ( true ) {

                  Instruction newAction = tom_actionInst;
                  /* expansion of RawAction into TypedAction */
                  if (tom_is_sort_Instruction(tom_actionInst)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch121NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom_actionInst);if (tom_is_fun_sym_RawAction(tomMatch121NameNumberfreshSubject_1)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch121NameNumber_freshVar_0=tom_get_slot_RawAction_AstInstruction(tomMatch121NameNumberfreshSubject_1);if ( true ) {

                      newAction=tom_make_TypedAction(tom_make_If(tom_make_TrueTL(),tomMatch121NameNumber_freshVar_0,tom_make_Nop()),tom_pattern,negativePattern);
                    }}}}}

                  negativePattern = tom_append_list_concPattern(negativePattern,tom_cons_list_concPattern(tom_pattern,tom_empty_list_concPattern()));

                  /* generate equality checks */
                  newPatternInstruction = tom_make_PatternInstruction(tom_make_Pattern(tomMatch122NameNumber_freshVar_4,tomMatch122NameNumber_freshVar_5,tom_empty_list_concTomTerm()),newAction,tomMatch122NameNumber_freshVar_3);
                  /* do nothing */
                  break matchBlock;
                }}}}}}}}}}}if ( true ) {


                  System.out.println("preProcessing: strange PatternInstruction: " + newPatternInstruction);
                  throw new TomRuntimeException("preProcessing: strange PatternInstruction: " + newPatternInstruction);
                }}}

            } // end matchBlock

            newPatternInstructionList = tom_append_list_concPatternInstruction(newPatternInstructionList,tom_cons_list_concPatternInstruction(newPatternInstruction,tom_empty_list_concPatternInstruction()));
            tom_patternInstructionList= tom_patternInstructionList.getTailconcPatternInstruction();
        }

        Instruction newMatch = tom_make_Match(newMatchSubjectList,newPatternInstructionList,tom_matchOptionList);
        return newMatch;
      }}}}}}}}}return super.visit_Instruction(tom__arg); }public  tom.engine.adt.tomdeclaration.types.Declaration  visit_Declaration( tom.engine.adt.tomdeclaration.types.Declaration  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Declaration(tom__arg)) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch125NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg);if (tom_is_fun_sym_Strategy(tomMatch125NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch125NameNumber_freshVar_0=tom_get_slot_Strategy_SName(tomMatch125NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch125NameNumber_freshVar_1=tom_get_slot_Strategy_ExtendsTerm(tomMatch125NameNumberfreshSubject_1);{  tom.engine.adt.tomsignature.types.TomVisitList  tomMatch125NameNumber_freshVar_2=tom_get_slot_Strategy_VisitList(tomMatch125NameNumberfreshSubject_1);{  tom.engine.adt.tomoption.types.Option  tomMatch125NameNumber_freshVar_3=tom_get_slot_Strategy_OrgTrack(tomMatch125NameNumberfreshSubject_1);if ( true ) {





        DeclarationList l = tom_empty_list_concDeclaration();//represents compiled Strategy
        TomVisitList jVisitList = tomMatch125NameNumber_freshVar_2;
        TomForwardType visitorFwd = null;
        while(!jVisitList.isEmptyconcTomVisit()) {
          TomList subjectListAST = tom_empty_list_concTomTerm();
          TomVisit visit = jVisitList.getHeadconcTomVisit();
          if (tom_is_sort_TomVisit(visit)) {{  tom.engine.adt.tomsignature.types.TomVisit  tomMatch124NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomVisit )visit);if (tom_is_fun_sym_VisitTerm(tomMatch124NameNumberfreshSubject_1)) {{  tom.engine.adt.tomtype.types.TomType  tomMatch124NameNumber_freshVar_1=tom_get_slot_VisitTerm_VNode(tomMatch124NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch124NameNumber_freshVar_2=tom_get_slot_VisitTerm_AstPatternInstructionList(tomMatch124NameNumberfreshSubject_1);{  tom.engine.adt.tomoption.types.OptionList  tomMatch124NameNumber_freshVar_3=tom_get_slot_VisitTerm_Option(tomMatch124NameNumberfreshSubject_1);{  tom.engine.adt.tomtype.types.TomType  tomMatch124NameNumber_freshVar_0=tomMatch124NameNumber_freshVar_1;if (tom_is_fun_sym_Type(tomMatch124NameNumber_freshVar_0)) {{  tom.engine.adt.tomtype.types.TomType  tomMatch124NameNumber_freshVar_4=tom_get_slot_Type_TomType(tomMatch124NameNumber_freshVar_0);if (tom_is_fun_sym_ASTTomType(tomMatch124NameNumber_freshVar_4)) {{  String  tomMatch124NameNumber_freshVar_5=tom_get_slot_ASTTomType_String(tomMatch124NameNumber_freshVar_4);{  String  tom_type=tomMatch124NameNumber_freshVar_5;{  tom.engine.adt.tomtype.types.TomType  tom_vType=tomMatch124NameNumber_freshVar_0;if ( true ) {

              if(visitorFwd == null) {//first time in loop
                visitorFwd = compiler.symbolTable().getForwardType(tom_type);//do the job only once
              }
              TomTerm arg = tom_make_Variable(tom_empty_list_concOption(),tom_make_Name("tom__arg"),tom_vType,tom_empty_list_concConstraint());//arg subjectList
              subjectListAST = tom_append_list_concTomTerm(subjectListAST,tom_cons_list_concTomTerm(arg,tom_empty_list_concTomTerm()));
              String funcName = "visit_" + tom_type;//function name
              Instruction matchStatement = tom_make_Match(tom_make_SubjectList(subjectListAST),tomMatch124NameNumber_freshVar_2,tom_cons_list_concOption(tomMatch125NameNumber_freshVar_3,tom_empty_list_concOption()));
              //return default strategy.visitLight(arg)
              Instruction returnStatement = tom_make_Return(tom_make_FunctionCall(tom_make_Name("super." + funcName),tom_vType,subjectListAST));
              InstructionList instructions = tom_cons_list_concInstruction(matchStatement,tom_cons_list_concInstruction(returnStatement,tom_empty_list_concInstruction()));
              l = tom_append_list_concDeclaration(l,tom_cons_list_concDeclaration(tom_make_MethodDef(tom_make_Name(funcName),tom_cons_list_concTomTerm(arg,tom_empty_list_concTomTerm()),tom_vType,tom_make_TomTypeAlone("tom.library.sl.VisitFailure"),tom_make_AbstractBlock(instructions)),tom_empty_list_concDeclaration()));
            }}}}}}}}}}}}}}

          jVisitList = jVisitList.getTailconcTomVisit();
        }
        return (Declaration) tom_make_preProcessing(compiler).visitLight(tom_make_Class(tomMatch125NameNumber_freshVar_0,visitorFwd,tomMatch125NameNumber_freshVar_1,tom_make_AbstractDecl(l)));
      }}}}}}}}return super.visit_Declaration(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_preProcessing_once( Compiler  t0) { return new preProcessing_once(t0); }

 // end strategy

  private static  tom.library.sl.Strategy  tom_make_preProcessing_makeTerm( Compiler  compiler) { return tom_make_ChoiceTopDown(tom_make_preProcessing_makeTerm_once(compiler))
 ; }private static class preProcessing_makeTerm_once extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  Compiler  compiler; public preProcessing_makeTerm_once( Compiler  compiler) { super(tom_make_Identity());this.compiler=compiler;}public  Compiler  getcompiler() { return compiler;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_TomTerm(tom__arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch126NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch126NameNumberfreshSubject_1;if ( true ) {




return (TomTerm) tom_make_preProcessing(compiler).visitLight(tom_make_BuildReducedTerm(tom_t,compiler.getTermType(tom_t)));}}}}return super.visit_TomTerm(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_preProcessing_makeTerm_once( Compiler  t0) { return new preProcessing_makeTerm_once(t0); }



  private TomTerm abstractPattern(TomTerm subject, ArrayList abstractedPattern, ArrayList introducedVariable)  {
    TomTerm abstractedTerm = subject;
    if (tom_is_sort_TomTerm(subject)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch128NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);if (tom_is_fun_sym_RecordAppl(tomMatch128NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch128NameNumber_freshVar_0=tom_get_slot_RecordAppl_NameList(tomMatch128NameNumberfreshSubject_1);{  tom.engine.adt.tomslot.types.SlotList  tomMatch128NameNumber_freshVar_1=tom_get_slot_RecordAppl_Slots(tomMatch128NameNumberfreshSubject_1);if (tom_is_fun_sym_concTomName(tomMatch128NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch128NameNumber_freshVar_2=tomMatch128NameNumber_freshVar_0;if (!(tom_is_empty_concTomName_TomNameList(tomMatch128NameNumber_freshVar_2))) {if (tom_is_fun_sym_Name(tom_get_head_concTomName_TomNameList(tomMatch128NameNumber_freshVar_2))) {{  String  tomMatch128NameNumber_freshVar_5=tom_get_slot_Name_String(tom_get_head_concTomName_TomNameList(tomMatch128NameNumber_freshVar_2));{  tom.engine.adt.tomname.types.TomNameList  tomMatch128NameNumber_freshVar_3=tom_get_tail_concTomName_TomNameList(tomMatch128NameNumber_freshVar_2);{  tom.engine.adt.tomslot.types.SlotList  tom_arguments=tomMatch128NameNumber_freshVar_1;if ( true ) {

        TomSymbol tomSymbol = symbolTable().getSymbolFromName(tomMatch128NameNumber_freshVar_5);

        SlotList newArgs = tom_empty_list_concSlot();
        if(TomBase.isListOperator(tomSymbol) || TomBase.isArrayOperator(tomSymbol)) {
          SlotList args = tom_arguments;
          while(!args.isEmptyconcSlot()) {
            Slot elt = args.getHeadconcSlot();
            TomTerm newElt = elt.getAppl();
            if (tom_is_sort_TomTerm(newElt)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch127NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )newElt);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch127NameNumber_freshVar_0=tomMatch127NameNumberfreshSubject_1;if (tom_is_fun_sym_RecordAppl(tomMatch127NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch127NameNumber_freshVar_1=tom_get_slot_RecordAppl_NameList(tomMatch127NameNumber_freshVar_0);if (tom_is_fun_sym_concTomName(tomMatch127NameNumber_freshVar_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch127NameNumber_freshVar_2=tomMatch127NameNumber_freshVar_1;if (!(tom_is_empty_concTomName_TomNameList(tomMatch127NameNumber_freshVar_2))) {if (tom_is_fun_sym_Name(tom_get_head_concTomName_TomNameList(tomMatch127NameNumber_freshVar_2))) {{  String  tomMatch127NameNumber_freshVar_5=tom_get_slot_Name_String(tom_get_head_concTomName_TomNameList(tomMatch127NameNumber_freshVar_2));{  tom.engine.adt.tomname.types.TomNameList  tomMatch127NameNumber_freshVar_3=tom_get_tail_concTomName_TomNameList(tomMatch127NameNumber_freshVar_2);if ( true ) {

                /*
                 * we no longer abstract syntactic subterm
                 * they are compiled by the KernelCompiler
                 */

                //System.out.println("Abstract: " + appl);
                TomSymbol tomSymbol2 = symbolTable().getSymbolFromName(tomMatch127NameNumber_freshVar_5);
                if(TomBase.isListOperator(tomSymbol2) || TomBase.isArrayOperator(tomSymbol2)) {
                  TomType type2 = tomSymbol2.getTypesToType().getCodomain();
                  abstractedPattern.add(tomMatch127NameNumber_freshVar_0);

                  TomNumberList path = tom_empty_list_concTomNumber();
                  absVarNumber++;
                  path = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_AbsVar(absVarNumber),tom_empty_list_concTomNumber()));

                  TomTerm newVariable = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(path),type2,tom_empty_list_concConstraint());

                  //System.out.println("newVariable = " + newVariable);

                  introducedVariable.add(newVariable);
                  newElt = newVariable;
                }
              }}}}}}}}}}}}

            newArgs = tom_append_list_concSlot(newArgs,tom_cons_list_concSlot(tom_make_PairSlotAppl(elt.getSlotName(),newElt),tom_empty_list_concSlot()));
            args = args.getTailconcSlot();
          }
        } else {
          newArgs = TomBase.mergeTomListWithSlotList(abstractPatternList(TomBase.slotListToTomList(tom_arguments),abstractedPattern,introducedVariable),tom_arguments);
        }
        abstractedTerm = subject.setSlots(newArgs);
      }}}}}}}}}}}}}
 // end match
    return abstractedTerm;
  }

  private TomList abstractPatternList(TomList subjectList, ArrayList abstractedPattern, ArrayList introducedVariable)  {
    if (tom_is_sort_TomList(subjectList)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch129NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )subjectList);if (tom_is_fun_sym_concTomTerm(tomMatch129NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch129NameNumber_freshVar_0=tomMatch129NameNumberfreshSubject_1;if (tom_is_empty_concTomTerm_TomList(tomMatch129NameNumber_freshVar_0)) {if ( true ) {
 return subjectList; }}}}if (tom_is_fun_sym_concTomTerm(tomMatch129NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch129NameNumber_freshVar_1=tomMatch129NameNumberfreshSubject_1;if (!(tom_is_empty_concTomTerm_TomList(tomMatch129NameNumber_freshVar_1))) {{  tom.engine.adt.tomterm.types.TomList  tomMatch129NameNumber_freshVar_2=tom_get_tail_concTomTerm_TomList(tomMatch129NameNumber_freshVar_1);if ( true ) {

        TomTerm newElt = abstractPattern(tom_get_head_concTomTerm_TomList(tomMatch129NameNumber_freshVar_1),abstractedPattern,introducedVariable);
        TomList tl = abstractPatternList(tomMatch129NameNumber_freshVar_2,abstractedPattern,introducedVariable);
        return tom_cons_list_concTomTerm(newElt,tom_append_list_concTomTerm(tl,tom_empty_list_concTomTerm()));
      }}}}}}}

    throw new TomRuntimeException("abstractPatternList: " + subjectList);
  }  
  
  /*
   * add a prefix (tom_) to back-quoted variables which comes from the lhs
   */
  private static class findRenameVariable extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  context; public findRenameVariable( java.util.Collection  context) { super(tom_make_Identity());this.context=context;}public  java.util.Collection  getcontext() { return context;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_TomTerm(tom__arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch130NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch130NameNumber_freshVar_0=tomMatch130NameNumberfreshSubject_1;{ boolean tomMatch130NameNumber_freshVar_4= false ;{  tom.engine.adt.tomname.types.TomName  tomMatch130NameNumber_freshVar_2= null ;if (tom_is_fun_sym_Variable(tomMatch130NameNumber_freshVar_0)) {{tomMatch130NameNumber_freshVar_4= true ;tomMatch130NameNumber_freshVar_2=tom_get_slot_Variable_AstName(tomMatch130NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_VariableStar(tomMatch130NameNumber_freshVar_0)) {{tomMatch130NameNumber_freshVar_4= true ;tomMatch130NameNumber_freshVar_2=tom_get_slot_VariableStar_AstName(tomMatch130NameNumber_freshVar_0);}}}if ((tomMatch130NameNumber_freshVar_4 ==  true )) {{  tom.engine.adt.tomname.types.TomName  tomMatch130NameNumber_freshVar_1=tomMatch130NameNumber_freshVar_2;if (tom_is_fun_sym_Name(tomMatch130NameNumber_freshVar_1)) {{  String  tomMatch130NameNumber_freshVar_3=tom_get_slot_Name_String(tomMatch130NameNumber_freshVar_1);if ( true ) {


        if(context.contains(tomMatch130NameNumber_freshVar_1)) {
          return tomMatch130NameNumber_freshVar_0.setAstName(tom_make_Name(ASTFactory.makeTomVariableName(tomMatch130NameNumber_freshVar_3)));
        }
      }}}}}}}}}}return super.visit_TomTerm(tom__arg); }public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch131NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_CompiledPattern(tomMatch131NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch131NameNumber_freshVar_0=tom_get_slot_CompiledPattern_PatternList(tomMatch131NameNumberfreshSubject_1);{  tom.engine.adt.tominstruction.types.Instruction  tomMatch131NameNumber_freshVar_1=tom_get_slot_CompiledPattern_AutomataInst(tomMatch131NameNumberfreshSubject_1);if ( true ) {




        Map map = TomBase.collectMultiplicity(tomMatch131NameNumber_freshVar_0);
        Collection newContext = new HashSet(map.keySet());
        newContext.addAll(context);
        //System.out.println("newContext = " + newContext);
        return (Instruction)tom_make_TopDown(tom_make_findRenameVariable(newContext)).visitLight(tomMatch131NameNumber_freshVar_1);
      }}}}}}return super.visit_Instruction(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_findRenameVariable( java.util.Collection  t0) { return new findRenameVariable(t0); }


}
