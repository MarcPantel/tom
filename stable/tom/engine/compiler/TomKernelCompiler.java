/* Generated by TOM (version 2.3): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import tom.engine.TomBase;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.tools.SymbolTable;
import tom.library.traversal.Replace1;
import aterm.ATerm;
import java.util.logging.Level;
import java.util.logging.Logger;

public class TomKernelCompiler extends TomBase {

  private SymbolTable symbolTable;
  
  public TomKernelCompiler(SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
  }

  private SymbolTable getSymbolTable(String moduleName) {
    //TODO//
    //Using of the moduleName
    ////////
    return symbolTable;
  }

// ------------------------------------------------------------
  /* Generated by TOM (version 2.3): Do not edit this file *//* Generated by TOM (version 2.3): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.3): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  /* Generated by TOM (version 2.3): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     
// ------------------------------------------------------------
 
  private int matchNumber = 0;

  private OptionList option() {
    return getAstFactory().makeOption();
  }

  private TomName getLabel(OptionList list) {
     if(list instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match1_1=(( tom.engine.adt.tomsignature.types.OptionList)list); if (tom_is_fun_sym_concOption(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_list1=tom_match1_1; { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_begin1=tom_match1_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_end1=tom_match1_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match1_1_2=tom_get_head_concOption_OptionList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concOption_OptionList(tom_match1_1_list1); if (tom_is_fun_sym_Label(tom_match1_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_2_astName=tom_get_slot_Label_astName(tom_match1_1_2); if (tom_is_fun_sym_Name(tom_match1_1_2_astName) ||  false ) { if ( true ) {
 return tom_match1_1_2_astName;  } } } } }tom_match1_1_end1=tom_get_tail_concOption_OptionList(tom_match1_1_end1); } }tom_match1_1_list1=tom_match1_1_begin1; } } } } } } }

    return null;
  }
  
    /* 
     * compileMatching:
     * compiles the Match construct into a matching automaton: CompiledMatch
     */

  private Replace1 replace_compileMatching = new Replace1() {
      public ATerm apply(ATerm subject) {
				 if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match2_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_Match(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_subjectList=tom_get_slot_Match_subjectList(tom_match2_1); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match2_1_astPatternInstructionList=tom_get_slot_Match_astPatternInstructionList(tom_match2_1); { tom.engine.adt.tomsignature.types.OptionList tom_match2_1_option=tom_get_slot_Match_option(tom_match2_1); if (tom_is_fun_sym_SubjectList(tom_match2_1_subjectList) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match2_1_subjectList_tomList=tom_get_slot_SubjectList_tomList(tom_match2_1_subjectList); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_patternInstructionList=tom_match2_1_astPatternInstructionList; if ( true ) {

            //TODO
            String moduleName = "default";
						TomNumberList rootpath = tsf().makeTomNumberList();
						matchNumber++;
						rootpath = (TomNumberList) rootpath.append(tom_make_MatchNumber(makeNumber(matchNumber)));

						/*
						 * for each pattern action (<term>,...,<term> -> <action>)
						 * build a matching automata
						 */
						TomList automataList = empty();
						int actionNumber = 0;
						while(!tom_patternInstructionList.isEmpty()) {
							actionNumber++;
							PatternInstruction pa = tom_patternInstructionList.getHead();
							SlotList patternList = tomListToSlotList(pa.getPattern().getTomList());
							Instruction actionInst = pa.getAction();
							if(patternList==null || actionInst==null) {
								System.out.println("TomKernelCompiler: null value");
								throw new TomRuntimeException("TomKernelCompiler: null value");
							}

							/*
							 * compile nested match constructs
							 * given a list of pattern: we build a matching automaton
							 */
							actionInst = (Instruction) this.apply(actionInst);
							Instruction matchingAutomata = genSyntacticMatchingAutomata(actionInst,patternList,rootpath,moduleName);
							OptionList automataOptionList = tom_empty_list_concOption();
							TomName label = getLabel(pa.getOption());
							if(label != null) {
								automataOptionList = tom_make_manyOptionList(tom_make_Label(label),automataOptionList);
							}
							TomNumberList numberList = (TomNumberList) rootpath.append(tom_make_PatternNumber(makeNumber(actionNumber)));
							TomTerm automata = tom_make_Automata(automataOptionList,slotListToTomList(patternList),numberList,matchingAutomata);
							//System.out.println("automata = " + automata);

							automataList = append(automata,automataList);
							tom_patternInstructionList= tom_patternInstructionList.getTail();
						}

						/*
						 * return the compiled Match construction
						 */
						InstructionList astAutomataList = automataListCompileMatchingList(automataList);
						SlotList slots = tomListToSlotList(tom_match2_1_subjectList_tomList);
						Instruction astAutomata = collectVariableFromSubjectList(slots,rootpath,tom_make_AbstractBlock(astAutomataList),moduleName);
						return tom_make_CompiledMatch(astAutomata,tom_match2_1_option);
					 } } } } } } } } } }
 // end match
				return traversal().genericTraversal(subject,this);
      } // end apply
    }; // end new

  public TomTerm compileMatching(TomTerm subject) {
    return (TomTerm) replace_compileMatching.apply(subject);
  }

    /*
     * collect match variables (from match(t1,...,tn))
     * create a list of declaration/assignement: v1=t1 ... vn=tn in body
     * generate a check_stamp
     */
  private Instruction collectVariableFromSubjectList(SlotList subjectList, TomNumberList path, Instruction body, String moduleName) {
     if(subjectList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match3_1=(( tom.engine.adt.tomsignature.types.SlotList)subjectList); if (tom_is_fun_sym_emptySlotList(tom_match3_1) ||  false ) { if ( true ) {
 return body;  } } if (tom_is_fun_sym_manySlotList(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match3_1_head=tom_get_slot_manySlotList_head(tom_match3_1); { tom.engine.adt.tomsignature.types.SlotList tom_match3_1_tail=tom_get_slot_manySlotList_tail(tom_match3_1); if (tom_is_fun_sym_PairSlotAppl(tom_match3_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match3_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match3_1_head); if (tom_is_fun_sym_Variable(tom_match3_1_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_subjectVar=tom_match3_1_head_appl; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_head_appl_option=tom_get_slot_Variable_option(tom_match3_1_head_appl); { tom.engine.adt.tomsignature.types.TomType tom_match3_1_head_appl_astType=tom_get_slot_Variable_astType(tom_match3_1_head_appl); { tom.engine.adt.tomsignature.types.TomType tom_variableType=tom_match3_1_head_appl_astType; if ( true ) {

        body = collectVariableFromSubjectList(tom_match3_1_tail,path,body,moduleName);
        TomTerm variable = tom_make_Variable(tom_match3_1_head_appl_option,tom_make_PositionName(path.append(tom_make_NameNumber(tom_match3_1_head_slotName))),tom_variableType,tom_empty_list_concConstraint());
        Expression source = tom_make_Cast(tom_variableType,tom_make_TomTermToExpression(tom_subjectVar));
          // the UnamedBlock encapsulation is needed for Caml
				Instruction let = tom_make_Let(variable,source,tom_make_AbstractBlock(concatInstruction(tom_make_CheckStamp(variable),body)));
				// If is the variable has the correct type
        return tom_make_CheckInstance(tom_variableType,tom_make_TomTermToExpression(tom_subjectVar),let);
       } } } } } } } } } } } } if (tom_is_fun_sym_manySlotList(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match3_1_head=tom_get_slot_manySlotList_head(tom_match3_1); { tom.engine.adt.tomsignature.types.SlotList tom_match3_1_tail=tom_get_slot_manySlotList_tail(tom_match3_1); if (tom_is_fun_sym_PairSlotAppl(tom_match3_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match3_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match3_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_subjectVar=tom_match3_1_head_appl; {boolean tom_bool_match3_1_head_appl= false ; { tom.engine.adt.tomsignature.types.TomName tom_match3_1_head_appl_astName= null ; { tom.engine.adt.tomsignature.types.TomList tom_match3_1_head_appl_args= null ; if (tom_is_fun_sym_BuildTerm(tom_match3_1_head_appl)) {tom_bool_match3_1_head_appl= true ;tom_match3_1_head_appl_astName=tom_get_slot_BuildTerm_astName(tom_match3_1_head_appl);tom_match3_1_head_appl_args=tom_get_slot_BuildTerm_args(tom_match3_1_head_appl); } else { if (tom_is_fun_sym_FunctionCall(tom_match3_1_head_appl)) {tom_bool_match3_1_head_appl= true ;tom_match3_1_head_appl_astName=tom_get_slot_FunctionCall_astName(tom_match3_1_head_appl);tom_match3_1_head_appl_args=tom_get_slot_FunctionCall_args(tom_match3_1_head_appl); } } if (tom_bool_match3_1_head_appl) { if (tom_is_fun_sym_Name(tom_match3_1_head_appl_astName) ||  false ) { { String  tom_match3_1_head_appl_astName_string=tom_get_slot_Name_string(tom_match3_1_head_appl_astName); if ( true ) {


        body = collectVariableFromSubjectList(tom_match3_1_tail,path,body,moduleName);

        // ModuleName
        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_match3_1_head_appl_astName_string);
        TomType tomType = getSymbolCodomain(tomSymbol);
        TomTerm variable = tom_make_Variable(option(),tom_make_PositionName(path.append(tom_make_NameNumber(tom_match3_1_head_slotName))),tomType,tom_empty_list_concConstraint());
        Expression source = tom_make_TomTermToExpression(tom_subjectVar);
        Instruction checkStamp = tom_make_CheckStamp(variable);
        return tom_make_Let(variable,source,tom_make_AbstractBlock(concatInstruction(checkStamp,body)));
       } } } } } } } } } } } } } } } }

    throw new TomRuntimeException("collectVariableFromSubjectList: strange term: " + subjectList);
  }

  private InstructionList concatInstruction(Instruction i1, Instruction i2) {
     if(i1 instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match4_1=(( tom.engine.adt.tomsignature.types.Instruction)i1); if(i2 instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match4_2=(( tom.engine.adt.tomsignature.types.Instruction)i2); if (tom_is_fun_sym_AbstractBlock(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match4_1_instList=tom_get_slot_AbstractBlock_instList(tom_match4_1); if (tom_is_fun_sym_AbstractBlock(tom_match4_2) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match4_2_instList=tom_get_slot_AbstractBlock_instList(tom_match4_2); if ( true ) {
 return tom_append_list_concInstruction(tom_match4_1_instList,tom_append_list_concInstruction(tom_match4_2_instList,tom_empty_list_concInstruction()));  } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match4_1_instList=tom_get_slot_AbstractBlock_instList(tom_match4_1); if ( true ) {
 return tom_append_list_concInstruction(tom_match4_1_instList,tom_cons_list_concInstruction(tom_match4_2,tom_empty_list_concInstruction()));  } } } if (tom_is_fun_sym_AbstractBlock(tom_match4_2) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match4_2_instList=tom_get_slot_AbstractBlock_instList(tom_match4_2); if ( true ) {
 return tom_cons_list_concInstruction(tom_match4_1,tom_append_list_concInstruction(tom_match4_2_instList,tom_empty_list_concInstruction()));  } } } } } } }

      return tom_cons_list_concInstruction(i1,tom_cons_list_concInstruction(i2,tom_empty_list_concInstruction()));
  }

    /*
     * build a list of instructions from a list of automata
     */
  private InstructionList automataListCompileMatchingList(TomList automataList) {
     if(automataList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match5_1=(( tom.engine.adt.tomsignature.types.TomList)automataList); if (tom_is_fun_sym_emptyTomList(tom_match5_1) ||  false ) { if ( true ) {
 return tom_make_emptyInstructionList();  } } if (tom_is_fun_sym_manyTomList(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_head=tom_get_slot_manyTomList_head(tom_match5_1); { tom.engine.adt.tomsignature.types.TomList tom_match5_1_tail=tom_get_slot_manyTomList_tail(tom_match5_1); if (tom_is_fun_sym_Automata(tom_match5_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match5_1_head_option=tom_get_slot_Automata_option(tom_match5_1_head); { tom.engine.adt.tomsignature.types.TomList tom_match5_1_head_patternList=tom_get_slot_Automata_patternList(tom_match5_1_head); { tom.engine.adt.tomsignature.types.TomNumberList tom_match5_1_head_numberList=tom_get_slot_Automata_numberList(tom_match5_1_head); { tom.engine.adt.tomsignature.types.Instruction tom_match5_1_head_inst=tom_get_slot_Automata_inst(tom_match5_1_head); { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match5_1_head_option; { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match5_1_head_inst; if ( true ) {

        InstructionList newList = automataListCompileMatchingList(tom_match5_1_tail);
        if(getLabel(tom_optionList) != null) {
            /*
             * if a label is assigned to a pattern (label:pattern -> action)
             * we generate corresponding labeled-block
             */
          tom_instruction= tom_make_NamedBlock(getLabel(tom_optionList).getString(),tom_cons_list_concInstruction(tom_instruction,tom_empty_list_concInstruction()))
;
                     
        }
        return tom_cons_list_concInstruction(tom_make_CompiledPattern(tom_match5_1_head_patternList,tom_instruction),tom_append_list_concInstruction(newList,tom_empty_list_concInstruction()));
       } } } } } } } } } } } } }

    return null;
  }
  
    /*
     * ------------------------------------------------------------
     * Generate a matching automaton
     * ------------------------------------------------------------
     */
  
    /*
     * given a pattern, this function generates the discrimitation test on the root symbol
     * and recursively calls the algorithm on subterms
     */
  Instruction genSyntacticMatchingAutomata(Instruction action,
                                           SlotList termList,
                                           TomNumberList rootpath,
                                           String moduleName) {
     if(termList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match6_1=(( tom.engine.adt.tomsignature.types.SlotList)termList); if (tom_is_fun_sym_emptySlotList(tom_match6_1) ||  false ) { if ( true ) {
 
        return action;
       } } if (tom_is_fun_sym_manySlotList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match6_1_head=tom_get_slot_manySlotList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.SlotList tom_match6_1_tail=tom_get_slot_manySlotList_tail(tom_match6_1); if (tom_is_fun_sym_PairSlotAppl(tom_match6_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match6_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match6_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match6_1_head_appl; {boolean tom_bool_match6_1_head_appl= false ; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_head_appl_astType= null ; if (tom_is_fun_sym_Variable(tom_match6_1_head_appl)) {tom_bool_match6_1_head_appl= true ;tom_match6_1_head_appl_astType=tom_get_slot_Variable_astType(tom_match6_1_head_appl); } else { if (tom_is_fun_sym_UnamedVariable(tom_match6_1_head_appl)) {tom_bool_match6_1_head_appl= true ;tom_match6_1_head_appl_astType=tom_get_slot_UnamedVariable_astType(tom_match6_1_head_appl); } } if (tom_bool_match6_1_head_appl) { if ( true ) {



        Instruction subAction = genSyntacticMatchingAutomata(action,tom_match6_1_tail,rootpath,moduleName);
        TomNumberList path  = (TomNumberList) rootpath.append(tom_make_NameNumber(tom_match6_1_head_slotName));

        Expression source = tom_make_TomTermToExpression(tom_make_Variable(option(),tom_make_PositionName(path),tom_match6_1_head_appl_astType,tom_empty_list_concConstraint()));
        return buildLet(tom_var, source, subAction, moduleName);
       } } } } } } } } } } } if (tom_is_fun_sym_manySlotList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match6_1_head=tom_get_slot_manySlotList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.SlotList tom_match6_1_tail=tom_get_slot_manySlotList_tail(tom_match6_1); if (tom_is_fun_sym_PairSlotAppl(tom_match6_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match6_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match6_1_head); if (tom_is_fun_sym_RecordAppl(tom_match6_1_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_currentTerm=tom_match6_1_head_appl; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_head_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1_head_appl); { tom.engine.adt.tomsignature.types.SlotList tom_match6_1_head_appl_slots=tom_get_slot_RecordAppl_slots(tom_match6_1_head_appl); if (tom_is_fun_sym_concTomName(tom_match6_1_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_head_appl_nameList_list1=tom_match6_1_head_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_head_appl_nameList_list1);tom_match6_1_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_head_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_head_appl_nameList_1) ||  false ) { { String  tom_match6_1_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_head_appl_nameList_1); { tom.engine.adt.tomsignature.types.SlotList tom_termArgs=tom_match6_1_head_appl_slots; if ( true ) {





        // recursively call the algorithm on termTail
        Instruction subAction = genSyntacticMatchingAutomata(action,tom_match6_1_tail,rootpath,moduleName);
        // find the codomain of (f|g) [* should be the same *]

        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_match6_1_head_appl_nameList_1_string);
				//System.out.println("name: " + `tomName);
				//System.out.println("symb: " + tomSymbol);
        TomType codomain = tomSymbol.getTypesToType().getCodomain();
        
          // perform the compilation, according to 3 cases:
          // - (f|g) is a list operator
          // - (f|g) is an array operator
          // - (f|g) is a syntactic operator
        TomNumberList path  = (TomNumberList) rootpath.append(tom_make_NameNumber(tom_match6_1_head_slotName));
        TomTerm subjectVariableAST =  tom_make_Variable(option(),tom_make_PositionName(path),codomain,tom_empty_list_concConstraint());
        Instruction automataInstruction;
        if(isListOperator(tomSymbol)) {
          // case: list operator
            /*
             * store the subject into an internal variable
             * call genListMatchingAutomata with the new internal variable
             */
          int indexSubterm = 1;
          TomNumberList newPath = (TomNumberList) path.append(tom_make_ListNumber(makeNumber(indexSubterm)));
          TomTerm newSubjectVariableAST =  tom_make_VariableStar(option(),tom_make_PositionName(newPath),codomain,tom_empty_list_concConstraint());
          boolean ensureNotEmptyList = true;
          Instruction automata = genListMatchingAutomata(new MatchingParameter(
                                                           tomSymbol,path,subAction,
                                                           newSubjectVariableAST,
                                                           newSubjectVariableAST),
                                                         tom_termArgs,
                                                         indexSubterm,
                                                         ensureNotEmptyList,
                                                         moduleName);
          automataInstruction = tom_make_LetRef(newSubjectVariableAST,tom_make_TomTermToExpression(subjectVariableAST),automata)

;
        } else if(isArrayOperator(tomSymbol)) {
          // case: array operator
          int indexSubterm = 1;
          TomNumberList newPathList = (TomNumberList) path.append(tom_make_ListNumber(makeNumber(indexSubterm)));
          TomNumberList newPathIndex = (TomNumberList) path.append(tom_make_IndexNumber(makeNumber(indexSubterm)));
          TomTerm newVariableListAST = tom_make_VariableStar(option(),tom_make_PositionName(newPathList),codomain,tom_empty_list_concConstraint());
          TomTerm newVariableIndexAST = tom_make_Variable(option(),tom_make_PositionName(newPathIndex),getSymbolTable(moduleName).getIntType(),tom_empty_list_concConstraint());
          boolean ensureNotEmptyList = true;
          Instruction automata = genArrayMatchingAutomata(new MatchingParameter(
                                                            tomSymbol,path,subAction,
                                                            newVariableListAST, newVariableIndexAST),
                                                          tom_termArgs,
                                                          indexSubterm,
                                                          ensureNotEmptyList,moduleName);
          Expression glZero = tom_make_TomTermToExpression(tom_make_TargetLanguageToTomTerm(tom_make_ITL("0")));
          automataInstruction = tom_make_LetRef(newVariableIndexAST,glZero,tom_make_Let(newVariableListAST,tom_make_TomTermToExpression(subjectVariableAST),automata))


;
        } else {
          // case: syntactic operator
          Instruction automata = genSyntacticMatchingAutomata(subAction,tom_termArgs,path,moduleName);
          TomTypeList termTypeList = tomSymbol.getTypesToType().getDomain();
          if(tom_match6_1_head_appl_nameList.getLength()==1 || tom_termArgs.isEmpty()) {
              automataInstruction = collectSubtermFromTomSymbol(tom_termArgs,tomSymbol,subjectVariableAST,path,automata,moduleName); 
          } else { 
            // generate is_fsym(t,f) || is_fsym(t,g)
            automataInstruction = collectSubtermFromSubjectList(tom_currentTerm,subjectVariableAST,path,automata,moduleName); 
            automataInstruction = compileConstraint(tom_currentTerm,tom_make_TomTermToExpression(subjectVariableAST),automataInstruction,moduleName);
            return automataInstruction;
          }
        }
        // generate is_fsym(t,f) || is_fsym(t,g)
        Expression cond = expandDisjunction(tom_make_EqualFunctionSymbol(codomain,subjectVariableAST,tom_currentTerm),moduleName);
        automataInstruction = compileConstraint(tom_currentTerm,tom_make_TomTermToExpression(subjectVariableAST),automataInstruction,moduleName);
        return tom_make_If(cond,automataInstruction,tom_make_Nop());
       } } } } } } } } } } } } } } } } } } } }

		System.out.println("GenSyntacticMatchingAutomata strange term: " + termList);
		throw new TomRuntimeException("GenSyntacticMatchingAutomata strange term: " + termList);
  }

    /*
     * function which compiles list-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  Instruction genListMatchingAutomata(MatchingParameter p,
                                      SlotList termList,
                                      int indexTerm,
                                      boolean ensureNotEmptyList,
                                      String moduleName) {
		//getSymbolTable(moduleName).setUsedSymbolDestructor(p.symbol);
     if(termList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match7_1=(( tom.engine.adt.tomsignature.types.SlotList)termList); if (tom_is_fun_sym_emptySlotList(tom_match7_1) ||  false ) { if ( true ) {

          /*
           * nothing to compile
           * just check that the subject is empty
           */
        return genCheckEmptyList(p.symbol,p.subjectListName,p.action,tom_make_Nop());
       } } if (tom_is_fun_sym_manySlotList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match7_1_head=tom_get_slot_manySlotList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.SlotList tom_match7_1_tail=tom_get_slot_manySlotList_tail(tom_match7_1); if (tom_is_fun_sym_PairSlotAppl(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match7_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match7_1_head_appl; {boolean tom_bool_match7_1_head_appl= false ; { tom.engine.adt.tomsignature.types.TomType tom_match7_1_head_appl_astType= null ; if (tom_is_fun_sym_Variable(tom_match7_1_head_appl)) {tom_bool_match7_1_head_appl= true ;tom_match7_1_head_appl_astType=tom_get_slot_Variable_astType(tom_match7_1_head_appl); } else { if (tom_is_fun_sym_UnamedVariable(tom_match7_1_head_appl)) {tom_bool_match7_1_head_appl= true ;tom_match7_1_head_appl_astType=tom_get_slot_UnamedVariable_astType(tom_match7_1_head_appl); } } if (tom_bool_match7_1_head_appl) { if ( true ) {


          /*
           * get an element and store it
           */
        Instruction subAction = genListMatchingAutomata(p,tom_match7_1_tail,indexTerm+1,true,moduleName);
        return genGetElementList(p.symbol, p.subjectListName, tom_var, tom_match7_1_head_appl_astType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } } } } } if (tom_is_fun_sym_manySlotList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match7_1_head=tom_get_slot_manySlotList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.SlotList tom_match7_1_tail=tom_get_slot_manySlotList_tail(tom_match7_1); if (tom_is_fun_sym_PairSlotAppl(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match7_1_head); if (tom_is_fun_sym_RecordAppl(tom_match7_1_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match7_1_head_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match7_1_head_appl); if (tom_is_fun_sym_concTomName(tom_match7_1_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match7_1_head_appl_nameList_list1=tom_match7_1_head_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match7_1_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match7_1_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match7_1_head_appl_nameList_list1);tom_match7_1_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match7_1_head_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match7_1_head_appl_nameList_1) ||  false ) { { String  tom_match7_1_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match7_1_head_appl_nameList_1); if ( true ) {


          /*
           * get an element
           * perform syntactic matching
           */
        Instruction subAction = genListMatchingAutomata(p,tom_match7_1_tail,indexTerm+1,true,moduleName);

        TomName slotName = tom_make_PositionName(tom_cons_list_concTomNumber(tom_make_Number(indexTerm),tom_empty_list_concTomNumber()));
        subAction = genSyntacticMatchingAutomata(subAction,tom_cons_list_concSlot(tom_make_PairSlotAppl(slotName,tom_match7_1_head_appl),tom_empty_list_concSlot()),p.path,moduleName);
        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_match7_1_head_appl_nameList_1_string);
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        TomNumberList newPath  = appendNumber(indexTerm,p.path);
        TomTerm var =  tom_make_Variable(option(),tom_make_PositionName(newPath),termType,tom_empty_list_concConstraint());
        return genGetElementList(p.symbol, p.subjectListName, var, termType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } } } } } } } } } if (tom_is_fun_sym_manySlotList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match7_1_head=tom_get_slot_manySlotList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.SlotList tom_match7_1_tail=tom_get_slot_manySlotList_tail(tom_match7_1); if (tom_is_fun_sym_PairSlotAppl(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match7_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match7_1_head_appl; {boolean tom_bool_match7_1_head_appl= false ; { tom.engine.adt.tomsignature.types.TomType tom_match7_1_head_appl_astType= null ; if (tom_is_fun_sym_VariableStar(tom_match7_1_head_appl)) {tom_bool_match7_1_head_appl= true ;tom_match7_1_head_appl_astType=tom_get_slot_VariableStar_astType(tom_match7_1_head_appl); } else { if (tom_is_fun_sym_UnamedVariableStar(tom_match7_1_head_appl)) {tom_bool_match7_1_head_appl= true ;tom_match7_1_head_appl_astType=tom_get_slot_UnamedVariableStar_astType(tom_match7_1_head_appl); } } if (tom_bool_match7_1_head_appl) { { tom.engine.adt.tomsignature.types.TomType tom_termType=tom_match7_1_head_appl_astType; { tom.engine.adt.tomsignature.types.SlotList tom_termTail=tom_match7_1_tail; if ( true ) {


          /*
           * 3 cases:
           * - tail = emptyList
           * - tail = only VariableStar or UnamedVariableStar
           * - tail = other
           */
        if(tom_termTail.isEmpty()) {
            /*
             * generate:
             * ---------
             * Let E_n = subjectList;
             * ...
             */
          Expression source = tom_make_TomTermToExpression(tom_make_Ref(p.subjectListName));
          return buildLet(tom_var, source, p.action, moduleName);
        } else {
            /*
             * generate:
             * ---------
             * Let begin_i = subjectList;
             * LetRef end_i   = subjectList;
             * ...
             */
          Instruction subAction = genListMatchingAutomata(p,tom_termTail,indexTerm+1,false,moduleName);
          TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)));
          TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)));
          TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),tom_termType,tom_empty_list_concConstraint());
          TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),tom_termType,tom_empty_list_concConstraint());

          Expression source = tom_make_GetSliceList(p.symbol.getAstName(),variableBeginAST,tom_make_Ref(variableEndAST));
          Instruction let = buildLet(tom_var, source, subAction, moduleName);
          Instruction tailExp = tom_make_Assign(variableEndAST,genGetTail(p.symbol,tom_make_Ref(variableEndAST)));
          Instruction loop;
          if(containOnlyVariableStar(tom_termTail)) {
              /*
               * do {
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
               *   ...
               *   if(!IS_EMPTY_TomList(end_i) )
               *     end_i = (TomList) GET_TAIL_TomList(end_i);
               *   else *** use this impossible value to indicate the end of the loop ***
               *     end_i = begin_i
               *   subjectList = end_i;
               * } while( end_i != begin_i )  
               * *** subjectList is reseted to begin_i when the loop stops
               */
            Instruction stopIter = tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(variableBeginAST));
            Instruction assign1 = genCheckEmptyList(p.symbol,tom_make_Ref(variableEndAST),stopIter,tailExp);
            Instruction assign2 = tom_make_Assign(p.subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)));
            loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_cons_list_concInstruction(assign2,tom_empty_list_concInstruction())))),tom_make_Negation(tom_make_EqualTerm(tom_termType,tom_make_Ref(variableEndAST),variableBeginAST)));
          } else {
              /*
               * case (X*,y,...)
               * no longer necessary to check if the list is not empty
               * to extract the 'y'
               */
            
              /*
               * while( !IS_EMPTY_TomList(end_i) ) {
               *   subjectList = end_i;
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
               *   ...
               *   end_i = (TomList) GET_TAIL_TomList(end_i);
               * }
               * subjectList = begin_i 
               */

            Instruction assign1 = tailExp;
            Instruction letAssign = tom_make_LetAssign(p.subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_empty_list_concInstruction()))));
            loop = tom_make_WhileDo(tom_make_Negation(genIsEmptyList(p.symbol,tom_make_Ref(variableEndAST))),letAssign);
            loop = tom_make_UnamedBlock(tom_cons_list_concInstruction(loop,tom_cons_list_concInstruction(tom_make_LetAssign(p.subjectListName,tom_make_TomTermToExpression(variableBeginAST),tom_make_Nop()),tom_empty_list_concInstruction())));
          }

          Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListName)),loop)

;
          Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListName)),letEnd)

;
          return letBegin;
        }
       } } } } } } } } } } } } } }

		System.out.println("GenListMatchingAutomata strange termList: " + termList);
		throw new TomRuntimeException("GenListMatchingAutomata strange termList: " + termList);
  }

  private boolean containOnlyVariableStar(SlotList termList) {
     if(termList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match8_1=(( tom.engine.adt.tomsignature.types.SlotList)termList); if (tom_is_fun_sym_emptySlotList(tom_match8_1) ||  false ) { if ( true ) {

        return true;
       } } if (tom_is_fun_sym_manySlotList(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match8_1_head=tom_get_slot_manySlotList_head(tom_match8_1); { tom.engine.adt.tomsignature.types.SlotList tom_match8_1_tail=tom_get_slot_manySlotList_tail(tom_match8_1); if (tom_is_fun_sym_PairSlotAppl(tom_match8_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match8_1_head); if (tom_is_fun_sym_UnamedVariableStar(tom_match8_1_head_appl) || tom_is_fun_sym_VariableStar(tom_match8_1_head_appl) ||  false ) { if ( true ) {


        return containOnlyVariableStar(tom_match8_1_tail);
       } } } } } } } } }

    return false;
  }

  
  private Instruction genCheckEmptyList(TomSymbol tomSymbol, TomTerm subjectListName,
                                        Instruction succes, Instruction failure) {
      /*
       * generate:
       * ---------
       * if(IS_EMPTY_TomList(subjectList)) {
       *   ...
       * }
       */
    return tom_make_If(genIsEmptyList(tomSymbol,tom_make_Ref(subjectListName)),succes,failure);
  }


  private Instruction genGetElementList(TomSymbol tomSymbol, TomTerm subjectListName, TomTerm var,
                                        TomType termType, Instruction subAction, boolean notEmptyList, String moduleName) {
      /*
       * generate:
       * ---------
       * if(!IS_EMPTY_TomList(subjectList)) {
       *   Let TomTerm var = (TomTerm) GET_HEAD_TomList(subjectList);
       *   subjectList = (TomList) GET_TAIL_TomList(subjectList);
       *   ...
       * }
       */
    Instruction body = tom_make_LetAssign(subjectListName,genGetTail(tomSymbol,tom_make_Ref(subjectListName)),subAction);
    Expression source = genGetHead(tomSymbol,termType,tom_make_Ref(subjectListName));
    Instruction let = buildLet(var, source, body, moduleName);
    if(notEmptyList) {
      return genCheckEmptyList(tomSymbol,subjectListName,tom_make_Nop(),let);
    } else {
      return let;
    }
  }
  
  private Expression genGetHead(TomSymbol tomSymbol, TomType type, TomTerm var) {
    TomName opNameAST = tomSymbol.getAstName();
    return tom_make_GetHead(opNameAST,type,var);
  }

  private Expression genGetTail(TomSymbol tomSymbol, TomTerm var) {
    TomName opNameAST = tomSymbol.getAstName();
    return tom_make_GetTail(opNameAST,var);
  }

  private Expression genIsEmptyList(TomSymbol tomSymbol, TomTerm var) {
    TomName opNameAST = tomSymbol.getAstName();
    return tom_make_IsEmptyList(opNameAST,var);
  }

    /*
     * function which compiles array-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  Instruction genArrayMatchingAutomata(MatchingParameter p,
                                       SlotList termList,
                                       int indexTerm,
                                       boolean ensureNotEmptyList,
                                       String moduleName) {
		//getSymbolTable(moduleName).setUsedSymbolDestructor(p.symbol);
     if(termList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match9_1=(( tom.engine.adt.tomsignature.types.SlotList)termList); if (tom_is_fun_sym_emptySlotList(tom_match9_1) ||  false ) { if ( true ) {

          /*
           * nothing to compile
           * just check that the subject is empty
           */
        return genIsEmptyArray(p.symbol,p.subjectListName,p.subjectListIndex,p.action,tom_make_Nop());
       } } if (tom_is_fun_sym_manySlotList(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match9_1_head=tom_get_slot_manySlotList_head(tom_match9_1); { tom.engine.adt.tomsignature.types.SlotList tom_match9_1_tail=tom_get_slot_manySlotList_tail(tom_match9_1); if (tom_is_fun_sym_PairSlotAppl(tom_match9_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match9_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match9_1_head_appl; {boolean tom_bool_match9_1_head_appl= false ; { tom.engine.adt.tomsignature.types.TomType tom_match9_1_head_appl_astType= null ; if (tom_is_fun_sym_Variable(tom_match9_1_head_appl)) {tom_bool_match9_1_head_appl= true ;tom_match9_1_head_appl_astType=tom_get_slot_Variable_astType(tom_match9_1_head_appl); } else { if (tom_is_fun_sym_UnamedVariable(tom_match9_1_head_appl)) {tom_bool_match9_1_head_appl= true ;tom_match9_1_head_appl_astType=tom_get_slot_UnamedVariable_astType(tom_match9_1_head_appl); } } if (tom_bool_match9_1_head_appl) { if ( true ) {


          /*
           * get an element and store it
           */
        Instruction subAction = genArrayMatchingAutomata(p,tom_match9_1_tail,indexTerm+1,true,moduleName);
        return genGetElementArray(p.symbol,p.subjectListName, p.subjectListIndex, tom_var, tom_match9_1_head_appl_astType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } } } } } if (tom_is_fun_sym_manySlotList(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match9_1_head=tom_get_slot_manySlotList_head(tom_match9_1); { tom.engine.adt.tomsignature.types.SlotList tom_match9_1_tail=tom_get_slot_manySlotList_tail(tom_match9_1); if (tom_is_fun_sym_PairSlotAppl(tom_match9_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match9_1_head); if (tom_is_fun_sym_RecordAppl(tom_match9_1_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match9_1_head_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match9_1_head_appl); if (tom_is_fun_sym_concTomName(tom_match9_1_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match9_1_head_appl_nameList_list1=tom_match9_1_head_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match9_1_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match9_1_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match9_1_head_appl_nameList_list1);tom_match9_1_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match9_1_head_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match9_1_head_appl_nameList_1) ||  false ) { { String  tom_match9_1_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match9_1_head_appl_nameList_1); if ( true ) {


          /*
           * get an element
           * perform syntactic matching
           */
        Instruction subAction = genArrayMatchingAutomata(p,tom_match9_1_tail,indexTerm+1,true,moduleName);

        TomName slotName = tom_make_PositionName(tom_cons_list_concTomNumber(tom_make_Number(indexTerm),tom_empty_list_concTomNumber()));
        subAction = genSyntacticMatchingAutomata(subAction,tom_cons_list_concSlot(tom_make_PairSlotAppl(slotName,tom_match9_1_head_appl),tom_empty_list_concSlot()),p.path,moduleName);
        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_match9_1_head_appl_nameList_1_string);
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        TomNumberList newPath  = appendNumber(indexTerm,p.path);
        TomTerm var =  tom_make_Variable(option(),tom_make_PositionName(newPath),termType,tom_empty_list_concConstraint());

        return genGetElementArray(p.symbol,p.subjectListName, p.subjectListIndex, var, termType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } } } } } } } } } if (tom_is_fun_sym_manySlotList(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match9_1_head=tom_get_slot_manySlotList_head(tom_match9_1); { tom.engine.adt.tomsignature.types.SlotList tom_match9_1_tail=tom_get_slot_manySlotList_tail(tom_match9_1); if (tom_is_fun_sym_PairSlotAppl(tom_match9_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match9_1_head); if (tom_is_fun_sym_UnamedVariableStar(tom_match9_1_head_appl) || tom_is_fun_sym_VariableStar(tom_match9_1_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match9_1_head_appl; { tom.engine.adt.tomsignature.types.SlotList tom_termTail=tom_match9_1_tail; if ( true ) {


          /*
           * 3 cases:
           * - tail = emptyList
           * - tail = only VariableStar or UnamedVariableStar
           * - tail = other
           */
        if(tom_termTail.isEmpty()) {
            /*
             * generate:
             * ---------
             * Let E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));
             * ...
             */
          Expression source = tom_make_GetSliceArray(p.symbol.getAstName(),tom_make_Ref(p.subjectListName),tom_make_Ref(p.subjectListIndex),tom_make_ExpressionToTomTerm(tom_make_GetSize(p.symbol.getAstName(),p.subjectListName))
                                             )



;
          Instruction let = buildLet(tom_var, source, p.action, moduleName);
          return let;
        } else {
          /*
           * generate:
           * ---------
           * int begin_i = subjectIndex;
           * int end_i   = subjectIndex;
           * ...
           */
          Instruction subAction = genArrayMatchingAutomata(p,tom_termTail,indexTerm+1,false,moduleName);
          TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)));
          TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)));
          TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),getSymbolTable(moduleName).getIntType(),tom_empty_list_concConstraint());
          TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),getSymbolTable(moduleName).getIntType(),tom_empty_list_concConstraint());

          Expression source = tom_make_GetSliceArray(p.symbol.getAstName(),tom_make_Ref(p.subjectListName),variableBeginAST,tom_make_Ref(variableEndAST))


;

          Instruction let = buildLet(tom_var, source, subAction, moduleName);
          Instruction increment = tom_make_Assign(variableEndAST,tom_make_AddOne(tom_make_Ref(variableEndAST)));
          Instruction loop;
          if(containOnlyVariableStar(tom_termTail)) {
            /*
             * do {
             *   * SUBSTITUTION: E_i
             *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
             *   ...
             *   end_i++;
             *   subjectIndex = end_i;
             * } while( subjectIndex <= GET_SIZE(subjectList) )
             * subjectIndex = begin_i
             *
             * *** we need <= instead of < to make the algorithm complete ***
             */
            Instruction assign = tom_make_Assign(p.subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)));
            
            loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_cons_list_concInstruction(assign,tom_empty_list_concInstruction())))),tom_make_Negation(tom_make_GreaterThan(tom_make_TomTermToExpression(tom_make_Ref(p.subjectListIndex)),tom_make_GetSize(p.symbol.getAstName(),tom_make_Ref(p.subjectListName)))))
;
            loop = tom_make_UnamedBlock(tom_cons_list_concInstruction(loop,tom_cons_list_concInstruction(tom_make_LetAssign(p.subjectListIndex,tom_make_TomTermToExpression(variableBeginAST),tom_make_Nop()),tom_empty_list_concInstruction())));
          } else {
            /*
             * while( !IS_EMPTY_TomList(end_i,subjectList) ) {
             *   subjectIndex = end_i;
             *   * SUBSTITUTION: E_i
             *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
             *   ...
             *   end_i++;
             * } 
             * subjectIndex = begin_i
             */
            Instruction letAssign = tom_make_LetAssign(p.subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_empty_list_concInstruction()))));
            loop = tom_make_WhileDo(tom_make_Negation(tom_make_IsEmptyArray(p.symbol.getAstName(),tom_make_Ref(p.subjectListName),tom_make_Ref(variableEndAST))),letAssign)
;
            loop = tom_make_UnamedBlock(tom_cons_list_concInstruction(loop,tom_cons_list_concInstruction(tom_make_LetAssign(p.subjectListIndex,tom_make_TomTermToExpression(variableBeginAST),tom_make_Nop()),tom_empty_list_concInstruction())));
          }
          Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListIndex)),loop)

;
          Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListIndex)),letEnd)

;
          return letBegin;
        }
       } } } } } } } } } } }

		System.out.println("GenArrayMatchingAutomata strange termList: " + termList);
		throw new TomRuntimeException("GenArrayMatchingAutomata strange termList: " + termList);
  }

  private Instruction genIsEmptyArray(TomSymbol tomSymbol,
                                      TomTerm subjectListName,
                                      TomTerm subjectListIndex,
                                     Instruction succes, Instruction failure) {
      /*
       * generate:
       * ---------
       * if(IS_EMPTY_TomList(subjectList,subjectIndex)) {
       *   ...
       * }
       */
    TomName opNameAST = tomSymbol.getAstName();
    
    return tom_make_If(tom_make_IsEmptyArray(opNameAST,tom_make_Ref(subjectListName),tom_make_Ref(subjectListIndex)),succes,failure);
  }


  private Instruction genGetElementArray(TomSymbol tomSymbol,
                                         TomTerm subjectListName, 
                                         TomTerm subjectListIndex, 
                                         TomTerm var,
                                         TomType termType,
                                         Instruction subAction, 
                                         boolean notEmptyList,
                                         String moduleName) {
      /*
       * generate:
       * ---------
       * if(!IS_EMPTY_TomList(subjectList,subjectIndex)) {
       *   Let TomTerm var = (TomTerm) GET_HEAD_TomList(subjectList);
       *   subjectList = (TomList) GET_TAIL_TomList(subjectList);
       *   ...
       * }
       */
    Instruction body = tom_make_LetAssign(subjectListIndex,tom_make_AddOne(tom_make_Ref(subjectListIndex)),subAction);
    Expression source = tom_make_GetElement(tomSymbol.getAstName(),termType,subjectListName,tom_make_Ref(subjectListIndex));
    Instruction let = buildLet(var, source, body, moduleName);
    if(notEmptyList) {
      return genIsEmptyArray(tomSymbol,subjectListName,subjectListIndex,tom_make_Nop(),let);
    } else {
      return let;
    }
  }


    /*
     * given a list of slots [s1=t1],...,[sn=tn]
     * declare/assign internal matching variables: match_path_i = ti
     */
  private Instruction collectSubtermFromSubjectList(TomTerm currentTerm,
                                                    TomTerm subjectVariableAST, 
                                                    TomNumberList path, Instruction body, String moduleName) {
     if(currentTerm instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1=(( tom.engine.adt.tomsignature.types.TomTerm)currentTerm); if (tom_is_fun_sym_RecordAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_1); { tom.engine.adt.tomsignature.types.SlotList tom_match10_1_slots=tom_get_slot_RecordAppl_slots(tom_match10_1); if (tom_is_fun_sym_concTomName(tom_match10_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_nameList_list1=tom_match10_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_nameList_1=tom_get_head_concTomName_NameList(tom_match10_1_nameList_list1);tom_match10_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_1_nameList_1) ||  false ) { { String  tom_match10_1_nameList_1_string=tom_get_slot_Name_string(tom_match10_1_nameList_1); { tom.engine.adt.tomsignature.types.SlotList tom_termArgList=tom_match10_1_slots; if ( true ) {

        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_match10_1_nameList_1_string);

        // check that variables are no longer Bottom 
        TomType booleanType = getSymbolTable(moduleName).getBooleanType();
        TomTerm booleanVariable = tom_make_Variable(option(),tom_make_PositionName(tom_make_manyTomNumberList(tom_make_NameNumber(tom_make_Name("bool")),path)),booleanType,tom_empty_list_concConstraint());
        Instruction ifBody = collectSubtermIf(tom_match10_1_nameList,booleanVariable,currentTerm,tom_termArgList,subjectVariableAST,path,moduleName);
        Instruction checkBody = tom_make_If(tom_make_TomTermToExpression(booleanVariable),body,tom_make_Nop()); 
        Instruction newBody = collectSubtermLetRefBottom(tom_termArgList,tomSymbol,path,tom_make_AbstractBlock(concatInstruction(ifBody,checkBody)));

        return tom_make_LetRef(booleanVariable,tom_make_FalseTL(),newBody);

       } } } } } } } } } } } } }

    return body;
  }

    /*
     * given a list of symbol names
     * generated nested if, for each symbol name
     */
  private Instruction collectSubtermIf(NameList nameList,
                                       TomTerm booleanVariable,
                                       TomTerm currentTerm,
                                       SlotList termArgList,
                                       TomTerm subjectVariableAST, 
                                       TomNumberList path,
                                       String moduleName) {
     if(nameList instanceof  tom.engine.adt.tomsignature.types.NameList) { { tom.engine.adt.tomsignature.types.NameList tom_match11_1=(( tom.engine.adt.tomsignature.types.NameList)nameList); if (tom_is_fun_sym_emptyNameList(tom_match11_1) ||  false ) { if ( true ) {

        return tom_make_Nop();
       } } if (tom_is_fun_sym_manyNameList(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match11_1_head=tom_get_slot_manyNameList_head(tom_match11_1); { tom.engine.adt.tomsignature.types.NameList tom_match11_1_tail=tom_get_slot_manyNameList_tail(tom_match11_1); if (tom_is_fun_sym_Name(tom_match11_1_head) ||  false ) { { String  tom_match11_1_head_string=tom_get_slot_Name_string(tom_match11_1_head); if ( true ) {


        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_match11_1_head_string);
        TomType codomain = tomSymbol.getTypesToType().getCodomain();
        Instruction elseBody = collectSubtermIf(tom_match11_1_tail,booleanVariable,currentTerm,termArgList,subjectVariableAST,path,moduleName);
        Instruction assign = collectSubtermLetAssign(termArgList,tomSymbol,subjectVariableAST,path,tom_make_Nop(),moduleName);
        Expression cond = tom_make_EqualFunctionSymbol(codomain,subjectVariableAST,currentTerm.setNameList(tom_cons_list_concTomName(tom_match11_1_head,tom_empty_list_concTomName())));
        return  tom_make_If(cond,tom_make_LetAssign(booleanVariable,tom_make_TrueTL(),assign),elseBody);
       } } } } } } } }

    return tom_make_Nop();
  }

   /*
    * given a list of slots
    * generate assignements for each subterm
    */
  private Instruction collectSubtermLetAssign(SlotList termArgList,
                                              TomSymbol tomSymbol,
                                              TomTerm subjectVariableAST, 
                                              TomNumberList path, Instruction body,
																							String moduleName) {
    TomName opNameAST = tomSymbol.getAstName();
     if(termArgList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match12_1=(( tom.engine.adt.tomsignature.types.SlotList)termArgList); if (tom_is_fun_sym_emptySlotList(tom_match12_1) ||  false ) { if ( true ) {
 return body;  } } if (tom_is_fun_sym_manySlotList(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match12_1_head=tom_get_slot_manySlotList_head(tom_match12_1); { tom.engine.adt.tomsignature.types.SlotList tom_match12_1_tail=tom_get_slot_manySlotList_tail(tom_match12_1); if (tom_is_fun_sym_PairSlotAppl(tom_match12_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match12_1_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match12_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match12_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match12_1_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match12_1_head_slotName; if ( true ) {


        body = collectSubtermLetAssign(tom_match12_1_tail,tomSymbol,subjectVariableAST,path,body,moduleName);
        TomType subtermType = getSlotType(tomSymbol,tom_slotName);

        if(!isDefinedGetSlot(tomSymbol,tom_slotName)) {
          Logger.getLogger(getClass().getName()).log( Level.SEVERE,
              "ErrorMissingSlotDecl",
              new Object[]{tomSymbol.getAstName().getString(),tom_slotName.getString()});
        }

        Expression getSlotAST = tom_make_GetSlot(subtermType,opNameAST,tom_slotName.getString(),subjectVariableAST);
				// to mark the symbol as alive
				//getSymbolTable(moduleName).setUsedSymbolDestructor(tomSymbol);
				
        TomNumberList newPath  = (TomNumberList) path.append(tom_make_NameNumber(tom_slotName));
        TomTerm newVariableAST = tom_make_Variable(option(),tom_make_PositionName(newPath),subtermType,tom_empty_list_concConstraint());
        return tom_make_LetAssign(newVariableAST,getSlotAST,body);
       } } } } } } } } } }

    return tom_make_Nop();
  }
 
  /*
   * given a list of slot
   * declare/initialize each slot to "bottom"
   */
  private Instruction collectSubtermLetRefBottom(SlotList termArgList,
                                                 TomSymbol tomSymbol,
                                                 TomNumberList path, Instruction body) {
     if(termArgList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match13_1=(( tom.engine.adt.tomsignature.types.SlotList)termArgList); if (tom_is_fun_sym_emptySlotList(tom_match13_1) ||  false ) { if ( true ) {

        return body;
       } } if (tom_is_fun_sym_manySlotList(tom_match13_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match13_1_head=tom_get_slot_manySlotList_head(tom_match13_1); { tom.engine.adt.tomsignature.types.SlotList tom_match13_1_tail=tom_get_slot_manySlotList_tail(tom_match13_1); if (tom_is_fun_sym_PairSlotAppl(tom_match13_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match13_1_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match13_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match13_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match13_1_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match13_1_head_slotName; if ( true ) {


        body = collectSubtermLetRefBottom(tom_match13_1_tail,tomSymbol,path,body);
        TomType subtermType = getSlotType(tomSymbol,tom_slotName);
        TomNumberList newPath  = (TomNumberList) path.append(tom_make_NameNumber(tom_slotName));
        TomTerm newVariableAST = tom_make_Variable(option(),tom_make_PositionName(newPath),subtermType,tom_empty_list_concConstraint());
        return tom_make_LetRef(newVariableAST,tom_make_Bottom(),body);
       } } } } } } } } } }

    return tom_make_Nop();
  }

    /*
     * given a list of subject t1,...,tn
     * declare/assign internal matching variables: match_path_i = ti
     */
  private Instruction collectSubtermFromTomSymbol(SlotList termArgList, TomSymbol tomSymbol,
			TomTerm subjectVariableAST, TomNumberList path, Instruction body, String moduleName) {
    TomName opNameAST = tomSymbol.getAstName();
     if(termArgList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match14_1=(( tom.engine.adt.tomsignature.types.SlotList)termArgList); if (tom_is_fun_sym_emptySlotList(tom_match14_1) ||  false ) { if ( true ) {
 return body;  } } if (tom_is_fun_sym_manySlotList(tom_match14_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match14_1_head=tom_get_slot_manySlotList_head(tom_match14_1); { tom.engine.adt.tomsignature.types.SlotList tom_match14_1_tail=tom_get_slot_manySlotList_tail(tom_match14_1); if (tom_is_fun_sym_PairSlotAppl(tom_match14_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match14_1_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match14_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match14_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match14_1_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match14_1_head_slotName; if ( true ) {


        body = collectSubtermFromTomSymbol(tom_match14_1_tail,tomSymbol,subjectVariableAST,path,body,moduleName);
        TomType subtermType = getSlotType(tomSymbol,tom_slotName);
        if(!isDefinedGetSlot(tomSymbol,tom_slotName)) {
          Logger.getLogger(getClass().getName()).log( Level.SEVERE,
              "ErrorMissingSlotDecl",
              new Object[]{tomSymbol.getAstName().getString(),tom_slotName.getString()});
        }

        Expression getSubtermAST = tom_make_GetSlot(subtermType,opNameAST,tom_slotName.getString(),subjectVariableAST);
				// to mark the symbol as alive
				//getSymbolTable(moduleName).setUsedSymbolDestructor(tomSymbol);
        TomNumberList newPath  = (TomNumberList) path.append(tom_make_NameNumber(tom_slotName));
        TomTerm newVariableAST = tom_make_Variable(option(),tom_make_PositionName(newPath),subtermType,tom_empty_list_concConstraint());
        return tom_make_Let(newVariableAST,getSubtermAST,body);
       } } } } } } } } } }

    return tom_make_Nop();
  }

  private Expression expandDisjunction(Expression exp, String moduleName) {
    Expression cond = tom_make_FalseTL();
     if(exp instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match15_1=(( tom.engine.adt.tomsignature.types.Expression)exp); if (tom_is_fun_sym_EqualFunctionSymbol(tom_match15_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match15_1_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match15_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match15_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match15_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match15_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match15_1); if (tom_is_fun_sym_RecordAppl(tom_match15_1_exp2) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match15_1_exp2_option=tom_get_slot_RecordAppl_option(tom_match15_1_exp2); { tom.engine.adt.tomsignature.types.NameList tom_match15_1_exp2_nameList=tom_get_slot_RecordAppl_nameList(tom_match15_1_exp2); { tom.engine.adt.tomsignature.types.SlotList tom_match15_1_exp2_slots=tom_get_slot_RecordAppl_slots(tom_match15_1_exp2); { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match15_1_exp2_nameList; if ( true ) {

        while(!tom_nameList.isEmpty()) {
          TomName name = tom_nameList.getHead();
          Expression check = tom_make_EqualFunctionSymbol(tom_match15_1_astType,tom_match15_1_exp1,tom_make_RecordAppl(tom_match15_1_exp2_option,tom_cons_list_concTomName(name,tom_empty_list_concTomName()),tom_match15_1_exp2_slots,tom_empty_list_concConstraint()));
					// to mark the symbol as alive
					//getSymbolTable(moduleName).setUsedSymbolDestructor(name.getString());
          cond = tom_make_Or(check,cond);
          tom_nameList= tom_nameList.getTail();
        }
       } } } } } } } } } } } }

    return cond;
  }

  private Instruction buildLet(TomTerm dest,
                               Expression source,
                               Instruction body,
                               String moduleName) {
      // Take care of constraints
    body = compileConstraint(dest,source,body,moduleName);
    //return `Let(dest,source,body);
    /*
     * this optimisation is not good since it avoids some optimisations
     * in particular, f(x,y) and f(x,_) cannot be merged
     *
     */
    if(dest.isUnamedVariable() || dest.isUnamedVariableStar()) {
      // This is an optimisation 
      // Do not assign an UnamedVariable or an UnamedVariableStar
      return body;
    } else {
      return tom_make_Let(dest,source,body);
    }
    
  }

  private Instruction compileConstraint(TomTerm subject, Expression source, Instruction body, String moduleName) {
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match16_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); {boolean tom_bool_match16_1= false ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match16_1_constraints= null ; if (tom_is_fun_sym_Variable(tom_match16_1)) {tom_bool_match16_1= true ;tom_match16_1_constraints=tom_get_slot_Variable_constraints(tom_match16_1); } else { if (tom_is_fun_sym_VariableStar(tom_match16_1)) {tom_bool_match16_1= true ;tom_match16_1_constraints=tom_get_slot_VariableStar_constraints(tom_match16_1); } } if (tom_bool_match16_1) { if ( true ) {

        return buildConstraint(tom_match16_1_constraints,tom_make_TomTermToExpression(subject),body,moduleName);
       } } } } {boolean tom_bool_match16_1= false ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match16_1_constraints= null ; if (tom_is_fun_sym_UnamedVariable(tom_match16_1)) {tom_bool_match16_1= true ;tom_match16_1_constraints=tom_get_slot_UnamedVariable_constraints(tom_match16_1); } else { if (tom_is_fun_sym_UnamedVariableStar(tom_match16_1)) {tom_bool_match16_1= true ;tom_match16_1_constraints=tom_get_slot_UnamedVariableStar_constraints(tom_match16_1); } } if (tom_bool_match16_1) { if ( true ) {


        return buildConstraint(tom_match16_1_constraints,source,body,moduleName);
       } } } } if (tom_is_fun_sym_RecordAppl(tom_match16_1) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match16_1_constraints=tom_get_slot_RecordAppl_constraints(tom_match16_1); if ( true ) {


        return buildConstraint(tom_match16_1_constraints,source,body,moduleName);
       } } } } }

		throw new TomRuntimeException("compileConstraint: strange subject: " + subject);
  }

  private Instruction buildConstraint(ConstraintList constraints, Expression source, Instruction body, String moduleName) {
     if(constraints instanceof  tom.engine.adt.tomsignature.types.ConstraintList) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1=(( tom.engine.adt.tomsignature.types.ConstraintList)constraints); if (tom_is_fun_sym_concConstraint(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1_list1=tom_match17_1; if (tom_is_empty_concConstraint_ConstraintList(tom_match17_1_list1)) { if ( true ) {

        return body;
       } } } } if (tom_is_fun_sym_concConstraint(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1_list1=tom_match17_1; if (!(tom_is_empty_concConstraint_ConstraintList(tom_match17_1_list1))) { { tom.engine.adt.tomsignature.types.Constraint tom_match17_1_1=tom_get_head_concConstraint_ConstraintList(tom_match17_1_list1);tom_match17_1_list1=tom_get_tail_concConstraint_ConstraintList(tom_match17_1_list1); if (tom_is_fun_sym_Equal(tom_match17_1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match17_1_1_variable=tom_get_slot_Equal_variable(tom_match17_1_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match17_1_1_variable; if ( true ) {


        //System.out.println("constraint: " + source + " EqualTo " + `var);
        Instruction subBody = compileConstraint(tom_var,source,body,moduleName);
        return buildConstraint(tom_match17_1_list1,source,tom_make_If(tom_make_EqualTerm(getTermType(tom_var,getSymbolTable(moduleName)),tom_var,tom_make_ExpressionToTomTerm(source)),subBody,tom_make_Nop()),moduleName);
       } } } } } } } } if (tom_is_fun_sym_concConstraint(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1_list1=tom_match17_1; if (!(tom_is_empty_concConstraint_ConstraintList(tom_match17_1_list1))) { { tom.engine.adt.tomsignature.types.Constraint tom_match17_1_1=tom_get_head_concConstraint_ConstraintList(tom_match17_1_list1);tom_match17_1_list1=tom_get_tail_concConstraint_ConstraintList(tom_match17_1_list1); if (tom_is_fun_sym_AssignTo(tom_match17_1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match17_1_1_variable=tom_get_slot_AssignTo_variable(tom_match17_1_1); if (tom_is_fun_sym_VariableStar(tom_match17_1_1_variable) || tom_is_fun_sym_Variable(tom_match17_1_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match17_1_1_variable; if ( true ) {


        //System.out.println("constraint: " + source + " AssignTo " + `var);
        Instruction subBody = compileConstraint(tom_var,source,body,moduleName);
        return buildConstraint(tom_match17_1_list1,source,tom_make_Let(tom_var,source,subBody),moduleName);
       } } } } } } } } } if (tom_is_fun_sym_concConstraint(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1_list1=tom_match17_1; if (!(tom_is_empty_concConstraint_ConstraintList(tom_match17_1_list1))) { { tom.engine.adt.tomsignature.types.Constraint tom_match17_1_1=tom_get_head_concConstraint_ConstraintList(tom_match17_1_list1);tom_match17_1_list1=tom_get_tail_concConstraint_ConstraintList(tom_match17_1_list1); if (tom_is_fun_sym_Ensure(tom_match17_1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match17_1_1_variable=tom_get_slot_Ensure_variable(tom_match17_1_1); if ( true ) {


        //System.out.println("constraint: " + source + " Ensure " + `exp);
        //Instruction subBody = compileConstraint(`exp,source,body);
        TomType type = getSymbolTable(moduleName).getBooleanType();
        Expression equality = tom_make_EqualTerm(type,tom_make_ExpressionToTomTerm(tom_make_TrueTL()),tom_match17_1_1_variable);
        Instruction generatedTest = tom_make_If(equality,body,tom_make_Nop());
        return buildConstraint(tom_match17_1_list1,source,generatedTest,moduleName);
       } } } } } } } if (tom_is_fun_sym_concConstraint(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match17_1_list1=tom_match17_1; if (!(tom_is_empty_concConstraint_ConstraintList(tom_match17_1_list1))) { { tom.engine.adt.tomsignature.types.Constraint tom_head=tom_get_head_concConstraint_ConstraintList(tom_match17_1_list1);tom_match17_1_list1=tom_get_tail_concConstraint_ConstraintList(tom_match17_1_list1); if ( true ) {


        throw new TomRuntimeException("buildConstraint: unknown constraint: " + tom_head);
       } } } } } } }

    throw new TomRuntimeException("buildConstraint: unknown constraints: " + constraints);
  }


  static private class MatchingParameter {
      /*
       * This object is used by matching-algorithms to store common parameters
       * which are not modified during the matching process
       *
       * symbol:           root symbol
       * path:             path up-to the root symbol
       * action:           list of actions to be fired when matching
       * subjectListName:  name of the internal variable supposed to store the subject
       * subjectListIndex: name of the internal variable supposed to store the index
       */
    public TomSymbol symbol;
    public TomNumberList path;
    public Instruction action;
    public TomTerm subjectListName;
    public TomTerm subjectListIndex;

    MatchingParameter(TomSymbol symbol, 
                      TomNumberList path,
                      Instruction action,
                      TomTerm subjectListName,
                      TomTerm subjectListIndex) {
      this.symbol=symbol;
      this.path=path;
      this.action=action;
      this.subjectListName=subjectListName;
      this.subjectListIndex=subjectListIndex;
    }

  }
  
} // end of class
