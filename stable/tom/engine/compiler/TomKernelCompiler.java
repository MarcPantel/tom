/*  Generated by TOM: Do not edit this file */  /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2003 INRIA
			    Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.compiler;
  
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

import jtom.TomBase;
import jtom.adt.tomsignature.*;
import jtom.adt.tomsignature.types.*;
import jtom.runtime.Collect1;
import jtom.runtime.Replace1;
import aterm.ATerm;
import jtom.exception.TomRuntimeException;

public class TomKernelCompiler extends TomBase {

  private boolean supportedBlock = false, supportedGoto = false, debugMode = false;

  public TomKernelCompiler(jtom.TomEnvironment environment,
                           boolean supportedBlock,
                           boolean supportedGoto, 
                           boolean debugMode) {
    super(environment);
    this.supportedBlock = supportedBlock;
    this.supportedGoto = supportedGoto;
    this.debugMode = debugMode;
  }

// ------------------------------------------------------------
  /*  Generated by TOM: Do not edit this file */   
// ------------------------------------------------------------
 
    /* 
     * preProcessing:
     *
     * replaces MakeTerm
     */

  private int matchNumber = 0;

  private OptionList option() {
    return ast().makeOption();
  }

  Replace1 replace_preProcessing = new Replace1() {
      public ATerm apply(ATerm t) { return preProcessing((TomTerm)t); }
    };
  
  Replace1 replace_preProcessing_makeTerm = new Replace1() {
      public ATerm apply(ATerm t) {
        TomTerm subject = (TomTerm)t;
        return preProcessing(tom_make_MakeTerm(subject) );
      }
    }; 

  public TomTerm preProcessing(TomTerm subject) {
      //%variable
      //System.out.println("preProcessing subject: " + subject);
     {  TomTerm tom_match1_1 = null; tom_match1_1 = ( TomTerm) subject;_match1_pattern1: {  TomList l = null; if(tom_is_fun_sym_Tom(tom_match1_1) ||  false ) {  TomList tom_match1_1_1 = null; tom_match1_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match1_1); l = ( TomList) tom_match1_1_1;
 
        return tom_make_Tom(tomListMap(l, replace_preProcessing)) ;
       }}_match1_pattern2: {  TomName name = null;  TomTerm var = null; if(tom_is_fun_sym_MakeTerm(tom_match1_1) ||  false ) {  TomTerm tom_match1_1_1 = null; tom_match1_1_1 = ( TomTerm) tom_get_slot_MakeTerm_kid1(tom_match1_1); if(tom_is_fun_sym_Variable(tom_match1_1_1) ||  false ) {  TomName tom_match1_1_1_2 = null; tom_match1_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match1_1_1); var = ( TomTerm) tom_match1_1_1; name = ( TomName) tom_match1_1_1_2;

 
        return var;
       } }}_match1_pattern3: {  TomTerm var = null;  TomName name = null; if(tom_is_fun_sym_MakeTerm(tom_match1_1) ||  false ) {  TomTerm tom_match1_1_1 = null; tom_match1_1_1 = ( TomTerm) tom_get_slot_MakeTerm_kid1(tom_match1_1); if(tom_is_fun_sym_VariableStar(tom_match1_1_1) ||  false ) {  TomName tom_match1_1_1_2 = null; tom_match1_1_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match1_1_1); var = ( TomTerm) tom_match1_1_1; name = ( TomName) tom_match1_1_1_2;

 
        return var;
       } }}_match1_pattern4: {  TomList termArgs = null;  TomName tom_absvar1 = null;  OptionList optionList = null; if(tom_is_fun_sym_MakeTerm(tom_match1_1) ||  false ) {  TomTerm tom_match1_1_1 = null; tom_match1_1_1 = ( TomTerm) tom_get_slot_MakeTerm_kid1(tom_match1_1); if(tom_is_fun_sym_Appl(tom_match1_1_1) ||  false ) {  OptionList tom_match1_1_1_1 = null;  NameList tom_match1_1_1_2 = null;  TomList tom_match1_1_1_3 = null; tom_match1_1_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match1_1_1); tom_match1_1_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match1_1_1); tom_match1_1_1_3 = ( TomList) tom_get_slot_Appl_args(tom_match1_1_1); optionList = ( OptionList) tom_match1_1_1_1; if(tom_is_fun_sym_concTomName(tom_match1_1_1_2) ||  false ) {  NameList tom_match1_1_1_2_list1 = null; tom_match1_1_1_2_list1 = ( NameList) tom_match1_1_1_2; if(!(tom_is_empty_NameList(tom_match1_1_1_2_list1))) { tom_absvar1 = ( TomName) tom_get_head_NameList(tom_match1_1_1_2_list1); tom_match1_1_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match1_1_1_2_list1); if(tom_is_empty_NameList(tom_match1_1_1_2_list1)) { termArgs = ( TomList) tom_match1_1_1_3; {  TomName tom_match2_1 = null; tom_match2_1 = ( TomName) tom_absvar1;_match2_pattern1: {  String tomName = null;  TomName name = null; if(tom_is_fun_sym_Name(tom_match2_1) ||  false ) {  String tom_match2_1_1 = null; tom_match2_1_1 = ( String) tom_get_slot_Name_string(tom_match2_1); name = ( TomName) tom_match2_1; tomName = ( String) tom_match2_1_1;

 
        TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
        TomList newTermArgs = tomListMap(termArgs,replace_preProcessing_makeTerm);

        if(tomSymbol==null || isDefinedSymbol(tomSymbol)) {
          return tom_make_FunctionCall(name,newTermArgs) ;
        } else {
          if(isListOperator(tomSymbol)) {
            return tom_make_BuildList(name,newTermArgs) ;
          } else if(isArrayOperator(tomSymbol)) {
            return tom_make_BuildArray(name,newTermArgs) ;
          } else {
            return tom_make_BuildTerm(name,newTermArgs) ;
          }
        }
       }} } } } } } }}_match1_pattern5: {  TomTerm t = null; t = ( TomTerm) tom_match1_1;


 
          //System.out.println("preProcessing default: " + t);
        return t;
      } }
 
  }

  private TomName getLabel(OptionList list) {
    while(!list.isEmpty()) {
      Option subject = list.getHead();
       {  Option tom_match3_1 = null; tom_match3_1 = ( Option) subject;_match3_pattern1: {  TomName name = null; if(tom_is_fun_sym_Label(tom_match3_1) ||  false ) {  TomName tom_match3_1_1 = null; tom_match3_1_1 = ( TomName) tom_get_slot_Label_astName(tom_match3_1); if(tom_is_fun_sym_Name(tom_match3_1_1) ||  false ) { name = ( TomName) tom_match3_1_1;
  return name;  } }}_match3_pattern2: {
  list = list.getTail(); } }
 
    }
    return null;
  }
  
    /* 
     * compileMatching:
     *
     * compiles Match into and automaton
     */
 
  public TomTerm compileMatching(TomTerm subject) {
      //%variable
    Replace1 replace_compileMatching = new Replace1() {
        public ATerm apply(ATerm t) { return compileMatching((TomTerm)t); }
      }; 

     {  TomTerm tom_match4_1 = null; tom_match4_1 = ( TomTerm) subject;_match4_pattern1: {  TomList l = null; if(tom_is_fun_sym_Tom(tom_match4_1) ||  false ) {  TomList tom_match4_1_1 = null; tom_match4_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match4_1); l = ( TomList) tom_match4_1_1;
 
        return tom_make_Tom(tomListMap(l, replace_compileMatching)) ;
       }}_match4_pattern2: {  TomList l = null; if(tom_is_fun_sym_TomInclude(tom_match4_1) ||  false ) {  TomList tom_match4_1_1 = null; tom_match4_1_1 = ( TomList) tom_get_slot_TomInclude_tomList(tom_match4_1); l = ( TomList) tom_match4_1_1;

 
        return tom_make_TomInclude(tomListMap(l, replace_compileMatching)) ;
       }}_match4_pattern3: {  TomList l2 = null;  OptionList optionList = null;  TomList l1 = null; if(tom_is_fun_sym_Match(tom_match4_1) ||  false ) {  TomTerm tom_match4_1_1 = null;  TomTerm tom_match4_1_2 = null;  OptionList tom_match4_1_3 = null; tom_match4_1_1 = ( TomTerm) tom_get_slot_Match_subjectList(tom_match4_1); tom_match4_1_2 = ( TomTerm) tom_get_slot_Match_patternList(tom_match4_1); tom_match4_1_3 = ( OptionList) tom_get_slot_Match_option(tom_match4_1); if(tom_is_fun_sym_SubjectList(tom_match4_1_1) ||  false ) {  TomList tom_match4_1_1_1 = null; tom_match4_1_1_1 = ( TomList) tom_get_slot_SubjectList_tomList(tom_match4_1_1); l1 = ( TomList) tom_match4_1_1_1; if(tom_is_fun_sym_PatternList(tom_match4_1_2) ||  false ) {  TomList tom_match4_1_2_1 = null; tom_match4_1_2_1 = ( TomList) tom_get_slot_PatternList_tomList(tom_match4_1_2); l2 = ( TomList) tom_match4_1_2_1; optionList = ( OptionList) tom_match4_1_3;

 
        boolean generatedMatch = false;
        String currentDebugKey = "noDebug";
        if(debugMode) {
          generatedMatch = hasGeneratedMatch(optionList);
          Option orgTrack = findOriginTracking(optionList);
          currentDebugKey = orgTrack.getFileName().getString() + orgTrack.getLine();
        }
        
        TomList patternList, actionList;
        TomList automataList = empty();
        ArrayList list;
        TomNumberList path = tsf().makeTomNumberList();

        matchNumber++;
        path = (TomNumberList) path.append(tom_make_MatchNumber(makeNumber(matchNumber)) );
        
          /*
           * create a list of declaration
           * collect and declare TOM variables (from patterns)
           * collect match variables (from match(t1,...,tn))
           * declare and assign intern variable (_1 = t1,..., _n=tn)
           */
        TomList matchDeclarationList = empty();
        TomList matchAssignementList = empty();
        int index = 1;

        while(!l1.isEmpty()) {
          TomTerm tlVariable = l1.getHead();
          matchBlock: {
             {  TomTerm tom_match5_1 = null; tom_match5_1 = ( TomTerm) tlVariable;_match5_pattern1: {  OptionList option = null;  TomType variableType = null; if(tom_is_fun_sym_Variable(tom_match5_1) ||  false ) {  OptionList tom_match5_1_1 = null;  TomType tom_match5_1_3 = null; tom_match5_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match5_1); tom_match5_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match5_1); option = ( OptionList) tom_match5_1_1; variableType = ( TomType) tom_match5_1_3;
 
                TomTerm variable = tom_make_Variable(option,tom_make_PositionName(appendNumber(index, path)),variableType) ;
                matchDeclarationList = append(tom_make_Declaration(variable) ,matchDeclarationList);
                if (!generatedMatch) {
                  matchAssignementList = appendInstruction(tom_make_AssignMatchSubject(variable,tom_make_TomTermToExpression(tlVariable)) ,matchAssignementList);
                } else {
                  matchAssignementList = appendInstruction(tom_make_Assign(variable,tom_make_TomTermToExpression(tlVariable)) ,matchAssignementList);
                }
                break matchBlock;
               }}_match5_pattern2: {  String tomName = null; if(tom_is_fun_sym_BuildTerm(tom_match5_1) ||  false ) {  TomName tom_match5_1_1 = null; tom_match5_1_1 = ( TomName) tom_get_slot_BuildTerm_astName(tom_match5_1); if(tom_is_fun_sym_Name(tom_match5_1_1) ||  false ) {  String tom_match5_1_1_1 = null; tom_match5_1_1_1 = ( String) tom_get_slot_Name_string(tom_match5_1_1); tomName = ( String) tom_match5_1_1_1;



 
                TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
                TomType tomType = getSymbolCodomain(tomSymbol);
                TomTerm variable = tom_make_Variable(option(),tom_make_PositionName(appendNumber(index, path)),tomType) ;
                matchDeclarationList = append(tom_make_Declaration(variable) ,matchDeclarationList);
                matchAssignementList = appendInstruction(tom_make_Assign(variable,tom_make_TomTermToExpression(tlVariable)) ,matchAssignementList);
                break matchBlock;
               } }}_match5_pattern3: {  String tomName = null; if(tom_is_fun_sym_BuildList(tom_match5_1) ||  false ) {  TomName tom_match5_1_1 = null; tom_match5_1_1 = ( TomName) tom_get_slot_BuildList_astName(tom_match5_1); if(tom_is_fun_sym_Name(tom_match5_1_1) ||  false ) {  String tom_match5_1_1_1 = null; tom_match5_1_1_1 = ( String) tom_get_slot_Name_string(tom_match5_1_1); tomName = ( String) tom_match5_1_1_1;                  TomSymbol tomSymbol = symbolTable().getSymbol(tomName);                 TomType tomType = getSymbolCodomain(tomSymbol);                 TomTerm variable = tom_make_Variable(option(),tom_make_PositionName(appendNumber(index, path)),tomType) ;                 matchDeclarationList = append(tom_make_Declaration(variable) ,matchDeclarationList);                 matchAssignementList = appendInstruction(tom_make_Assign(variable,tom_make_TomTermToExpression(tlVariable)) ,matchAssignementList);                 break matchBlock;                } }}_match5_pattern4: {  String tomName = null; if(tom_is_fun_sym_FunctionCall(tom_match5_1) ||  false ) {  TomName tom_match5_1_1 = null; tom_match5_1_1 = ( TomName) tom_get_slot_FunctionCall_astName(tom_match5_1); if(tom_is_fun_sym_Name(tom_match5_1_1) ||  false ) {  String tom_match5_1_1_1 = null; tom_match5_1_1_1 = ( String) tom_get_slot_Name_string(tom_match5_1_1); tomName = ( String) tom_match5_1_1_1;                  TomSymbol tomSymbol = symbolTable().getSymbol(tomName);                 TomType tomType = getSymbolCodomain(tomSymbol);                 TomTerm variable = tom_make_Variable(option(),tom_make_PositionName(appendNumber(index, path)),tomType) ;                 matchDeclarationList = append(tom_make_Declaration(variable) ,matchDeclarationList);                 matchAssignementList = appendInstruction(tom_make_Assign(variable,tom_make_TomTermToExpression(tlVariable)) ,matchAssignementList);                 break matchBlock;                } }}_match5_pattern5: {

 
                System.out.println("compileMatching: strange term: " + tlVariable);
                break matchBlock;
              } }
 
          } // end matchBlock
          index++;
          l1 = l1.getTail();
        }
        
        matchDeclarationList = concat(matchDeclarationList,matchAssignementList);
  
          /*
           * for each pattern action (<term> -> <action>)
           * build a matching automata
           */
        int actionNumber = 0;
        boolean firstCall=true;
        boolean defaultPA =false;
        while(!l2.isEmpty()) {
          actionNumber++;
          TomTerm pa = l2.getHead();
          defaultPA = hasDefaultCase(pa.getOption());
          patternList = pa.getTermList().getTomList();
          if (debugMode && defaultPA) {
              // replace success by leaving structure
            TargetLanguage tl = tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.patternSuccess(\""+currentDebugKey+"\");\njtom.debug.TomDebugger.debugger.leavingStructure(\""+currentDebugKey+"\");\n");
            TomList tail = pa.getTom().getTomList().getTail();
            actionList = tom_make_manyTomList(tom_make_TargetLanguageToTomTerm(tl),tail) ;
          } else {
            actionList = pa.getTom().getTomList();
          }
          
          
            //System.out.println("patternList   = " + patternList);
            //System.out.println("actionList = " + actionList);
          if(patternList==null || actionList==null) {
            System.out.println("TomKernelCompiler: null value");
			throw new TomRuntimeException(new Throwable("TomKernelCompiler: null value"));
          }
          
            // compile nested match constructs
          actionList = tomListMap(actionList,replace_compileMatching);
            //System.out.println("patternList      = " + patternList);
            //System.out.println("actionNumber  = " + actionNumber);
            //System.out.println("action        = " + actionList);
          TomList patternsDeclarationList = empty();
          Collection variableCollection = new HashSet();
          collectVariable(variableCollection,tom_make_Tom(patternList) );
          
          Iterator it = variableCollection.iterator();
          while(it.hasNext()) {
            TomTerm tmpsubject = (TomTerm)it.next();
            patternsDeclarationList = append(tom_make_Declaration(tmpsubject) ,patternsDeclarationList);
              //System.out.println("*** " + patternsDeclarationList);
          }


           TomNumberList numberList = (TomNumberList) path.append(tom_make_PatternNumber(makeNumber(actionNumber)) );
         
          TomList instructionList;
          instructionList = genMatchingAutomataFromPatternList(patternList,path,1,actionList,true);
            //firstCall = false;
          TomList declarationInstructionList; 
          declarationInstructionList = concat(patternsDeclarationList,instructionList);
          OptionList automataOptionList = tom_make_insert_concOption(tom_make_Debug(tom_make_Name(currentDebugKey)),( OptionList) tom_make_empty_concOption()) ;

          TomName label = getLabel(pa.getOption());
          if(label != null) {
            automataOptionList = tom_make_manyOptionList(tom_make_Label(label),automataOptionList) ;
          }
          if(defaultPA) {
            automataOptionList = tom_make_manyOptionList(tom_make_DefaultCase(),automataOptionList) ;
          }
          
          TomTerm automata = tom_make_Automata(automataOptionList,numberList,declarationInstructionList) ;
            //System.out.println("automata = " + automata);
          
          automataList = append(automata,automataList);
          l2 = l2.getTail();
        }

          /*
           * return the compiled MATCH construction
           */

        TomList astAutomataList = automataListCompileMatchingList(automataList, generatedMatch);
        return tom_make_CompiledMatch(matchDeclarationList,astAutomataList,optionList) ;
       } } }}_match4_pattern4: {  TomTerm t = null; t = ( TomTerm) tom_match4_1;


 
          //System.out.println("default: " + t);
        return t;
      } }
 
  }

  private TomList automataListCompileMatchingList(TomList automataList, boolean generatedMatch) {
      //%variable
    
     {  TomList tom_match6_1 = null; tom_match6_1 = ( TomList) automataList;_match6_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match6_1) ||  false ) {


  return empty();  }}_match6_pattern2: {  TomNumberList numberList = null;  TomList l = null;  OptionList optionList = null;  TomList instList = null; if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) {  TomTerm tom_match6_1_1 = null;  TomList tom_match6_1_2 = null; tom_match6_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match6_1); tom_match6_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match6_1); if(tom_is_fun_sym_Automata(tom_match6_1_1) ||  false ) {  OptionList tom_match6_1_1_1 = null;  TomNumberList tom_match6_1_1_2 = null;  TomList tom_match6_1_1_3 = null; tom_match6_1_1_1 = ( OptionList) tom_get_slot_Automata_option(tom_match6_1_1); tom_match6_1_1_2 = ( TomNumberList) tom_get_slot_Automata_numberList(tom_match6_1_1); tom_match6_1_1_3 = ( TomList) tom_get_slot_Automata_instList(tom_match6_1_1); optionList = ( OptionList) tom_match6_1_1_1; numberList = ( TomNumberList) tom_match6_1_1_2; instList = ( TomList) tom_match6_1_1_3; l = ( TomList) tom_match6_1_2;
 
        TomList newList = automataListCompileMatchingList(l, generatedMatch);
        if(supportedGoto) {
          if(!generatedMatch && debugMode) {
            String debugKey = getDebug(optionList);
            boolean defaultCase = hasDefaultCase(optionList);
            TargetLanguage tl = tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.enteringPattern(\""+debugKey+"\");\n");
            instList = cons(tom_make_TargetLanguageToTomTerm(tl), instList) ;
            if(!defaultCase) {
              tl = tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.leavingPattern(\""+debugKey+"\");\n");
              TomList list = cons(tom_make_TargetLanguageToTomTerm(tl), tom_make_emptyTomList()) ;
              instList = concat(instList, list);
            }
          }

          Instruction namedBlock = tom_make_NamedBlock(getBlockName(numberList),instList) ;
          TomName label = getLabel(optionList);
          if(label != null) {
            namedBlock = tom_make_NamedBlock(label .getString(),cons(tom_make_InstructionToTomTerm(namedBlock), empty())) ;
          }
          TomList list = cons(tom_make_InstructionToTomTerm(namedBlock) ,empty());
          return cons(tom_make_CompiledPattern(list) , newList);
        } else {
          TomList result = empty();
          TomTerm variableAST = getBlockVariable(numberList);
          result = append(tom_make_Declaration(variableAST) ,result);
          result = appendInstruction(tom_make_Assign(variableAST,tom_make_TrueTL()) ,result);
          if(supportedBlock) { // Test
            result = appendInstruction(tom_make_OpenBlock() ,result);
          }
          result = concat(result,instList);
          if(supportedBlock) { // Test
            result = appendInstruction(tom_make_CloseBlock() ,result);
          }
          result = cons(tom_make_CompiledPattern(result) ,newList);
          return result;
        }
       } }} }
 
    return null;
  }

  private String getBlockName(TomNumberList numberList) {
    String name = numberListToIdentifier(numberList);
    return name;
  }

  private TomTerm getBlockVariable(TomNumberList numberList) {
    String name = numberListToIdentifier(numberList);
    return tom_make_Variable(option(),tom_make_Name(name),getBoolType()) ;
  }
  
    /*
     * ------------------------------------------------------------
     * Generate a matching automaton
     * ------------------------------------------------------------
     */

  TomList genMatchingAutomataFromPatternList(TomList termList,
                                             TomNumberList path,
                                             int indexTerm,
                                             TomList actionList,
                                             boolean gsa) {
    TomList result = empty();
      //%variable
    if(termList.isEmpty()) {
      if(gsa) {
          // insert the semantic action
        Instruction action = tom_make_Action(actionList) ;
        result = appendInstruction(action,result);
      }
    } else {
      TomTerm head = termList.getHead();
      TomList tail = termList.getTail();
      TomList newSubActionList = genMatchingAutomataFromPatternList(tail,path,indexTerm+1,actionList,gsa);
      TomNumberList newPath    = appendNumber(indexTerm,path);
      TomList newActionList    = genMatchingAutomataFromPattern(head,newPath,newSubActionList,gsa);
      result                   = concat(result,newActionList);
    }
    return result;
  }

  TomList genMatchingAutomataFromPattern(TomTerm term,
                                         TomNumberList path,
                                         TomList actionList,
                                         boolean gsa) {
    TomList result = empty();
      //%variable
    matchBlock: {
       {  TomTerm tom_match7_1 = null; tom_match7_1 = ( TomTerm) term;_match7_pattern1: {  TomTerm var = null;  OptionList optionList = null;  TomType termType = null; if(tom_is_fun_sym_Variable(tom_match7_1) ||  false ) {  OptionList tom_match7_1_1 = null;  TomType tom_match7_1_3 = null; tom_match7_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1); tom_match7_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1); var = ( TomTerm) tom_match7_1; optionList = ( OptionList) tom_match7_1_1; termType = ( TomType) tom_match7_1_3;

 
          Expression source = tom_make_TomTermToExpression(tom_make_Variable(option(),tom_make_PositionName(path),termType)) ;
          result = addAnnotedAssignement(optionList, source, var, result);
          if(gsa) {
            result = appendInstruction(tom_make_Action(actionList) ,result);
          }
          break matchBlock; 
         }}_match7_pattern2: {  TomTerm var = null;  TomType termType = null;  OptionList optionList = null; if(tom_is_fun_sym_UnamedVariable(tom_match7_1) ||  false ) {  OptionList tom_match7_1_1 = null;  TomType tom_match7_1_2 = null; tom_match7_1_1 = ( OptionList) tom_get_slot_UnamedVariable_option(tom_match7_1); tom_match7_1_2 = ( TomType) tom_get_slot_UnamedVariable_astType(tom_match7_1); var = ( TomTerm) tom_match7_1; optionList = ( OptionList) tom_match7_1_1; termType = ( TomType) tom_match7_1_2;            Expression source = tom_make_TomTermToExpression(tom_make_Variable(option(),tom_make_PositionName(path),termType)) ;           result = addAnnotedAssignement(optionList, source, var, result);           if(gsa) {             result = appendInstruction(tom_make_Action(actionList) ,result);           }           break matchBlock;           }}_match7_pattern3: {  TomName tom_absvar2 = null;  OptionList optionList = null;  NameList nameList = null;  TomList termArgs = null; if(tom_is_fun_sym_Appl(tom_match7_1) ||  false ) {  OptionList tom_match7_1_1 = null;  NameList tom_match7_1_2 = null;  TomList tom_match7_1_3 = null; tom_match7_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match7_1); tom_match7_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match7_1); tom_match7_1_3 = ( TomList) tom_get_slot_Appl_args(tom_match7_1); optionList = ( OptionList) tom_match7_1_1; if(tom_is_fun_sym_concTomName(tom_match7_1_2) ||  false ) { nameList = ( NameList) tom_match7_1_2;  NameList tom_match7_1_2_list1 = null; tom_match7_1_2_list1 = ( NameList) tom_match7_1_2; if(!(tom_is_empty_NameList(tom_match7_1_2_list1))) { tom_absvar2 = ( TomName) tom_get_head_NameList(tom_match7_1_2_list1); tom_match7_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match7_1_2_list1); termArgs = ( TomList) tom_match7_1_3; {  TomName tom_match8_1 = null; tom_match8_1 = ( TomName) tom_absvar2;_match8_pattern1: {  String tomName = null; if(tom_is_fun_sym_Name(tom_match8_1) ||  false ) {  String tom_match8_1_1 = null; tom_match8_1_1 = ( String) tom_get_slot_Name_string(tom_match8_1); tomName = ( String) tom_match8_1_1;

 
          TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
          TomName termNameAST = tomSymbol.getAstName();
          TomTypeList termTypeList = tomSymbol.getTypesToType().getDomain();
          TomType termType = tomSymbol.getTypesToType().getCodomain();
          OptionList termOptionList = tomSymbol.getOption();
          
          TomTerm annotedVariable = getAnnotedVariable(optionList);

            // SUCCES
          TomList declarationList = empty();
          TomList assignementList = empty();
          TomList annotedAssignementList = empty();
          
          int indexSubterm = 0;
          TomTerm subjectVariableAST =  tom_make_Variable(option(),tom_make_PositionName(path),termType) ;

          TomList automataList  = null;
          TomList succesList    = empty();
          
          if(isListOperator(tomSymbol)) {
            int tmpIndexSubterm = 1;
            automataList = genListMatchingAutomata(tomSymbol,
                                                   termArgs,path,actionList,
                                                   gsa,subjectVariableAST, tmpIndexSubterm);
          } else if(isArrayOperator(tomSymbol)) {
            int tmpIndexSubterm = 1;
            automataList = genArrayMatchingAutomata(tomSymbol,
                                                    termArgs,path,actionList,
                                                    gsa,subjectVariableAST, subjectVariableAST,
                                                    tmpIndexSubterm);
          } else {
            automataList = genMatchingAutomataFromPatternList(termArgs,path,1,actionList,gsa);
          
            TomList termArgList = termArgs;
            while(!termTypeList.isEmpty()) {
              TomType subtermType    = termTypeList.getHead();
              TomTerm subtermArg     = termArgList.getHead();

              if(subtermArg == null) {
                System.out.println("term         = " + term);
                System.out.println("termTypeList = " + termTypeList);
                System.out.println("termArgList  = " + termArgList);
              }
              
              if(subtermArg.isUnamedVariable() && !isAnnotedVariable(subtermArg)) {
                  /* This is an optimisation */
                  /* Do not assign the subterm: skip the subterm */
              } else {
                TomNumberList newPath  = appendNumber(indexSubterm+1,path);
                TomTerm newVariableAST = tom_make_Variable(option(),tom_make_PositionName(newPath),subtermType) ;
                TomTerm declaration    = tom_make_Declaration(newVariableAST) ;
                declarationList        = append(declaration,declarationList);
                
                Expression getSubtermAST;
                TomName slotName = getSlotName(tomSymbol, indexSubterm);
                if(slotName == null) {
                  getSubtermAST = tom_make_GetSubterm(subjectVariableAST,makeNumber(indexSubterm)) ;
                } else {
                  getSubtermAST = tom_make_GetSlot(termNameAST,slotName .getString(),subjectVariableAST) ;
                }
                
                Instruction assignement = tom_make_Assign(newVariableAST,getSubtermAST) ;
                assignementList = appendInstruction(assignement,assignementList);
              }
              indexSubterm++;
              termTypeList = termTypeList.getTail();
              termArgList = termArgList.getTail();
            }
            
            succesList = concat(succesList,declarationList);
            succesList = concat(succesList,assignementList);
          }
          
            // generate an assignement for annoted variables
          if(annotedVariable != null) {
            Instruction assignement = tom_make_Assign(annotedVariable,tom_make_TomTermToExpression(subjectVariableAST)) ;
            annotedAssignementList = appendInstruction(assignement,annotedAssignementList);
          }
          
          succesList = concat(succesList,annotedAssignementList);
          succesList = concat(succesList,automataList);
          
          Expression cond = expandDisjunction(tom_make_EqualFunctionSymbol(subjectVariableAST,term)) ;
          Instruction test = tom_make_IfThenElse(cond,succesList,empty()) ;
          result = appendInstruction(test,result);
          
          break matchBlock;
         }} } } } }}_match7_pattern4: {

 
          System.out.println("GenTermMatchingAutomata strange term: " + term);
          throw new TomRuntimeException(new Throwable("GenTermMatchingAutomata strange term: " + term));
        } }
 
    } // end matchBlock 

      //System.out.println("*** result = " + result);
    return result;
  }

  private Expression expandDisjunction(Expression exp) {
    Expression cond = tom_make_FalseTL() ;
     {  Expression tom_match9_1 = null; tom_match9_1 = ( Expression) exp;_match9_pattern1: {  TomTerm var = null;  OptionList option = null;  NameList nameList = null;  TomList l = null; if(tom_is_fun_sym_EqualFunctionSymbol(tom_match9_1) ||  false ) {  TomTerm tom_match9_1_1 = null;  TomTerm tom_match9_1_2 = null; tom_match9_1_1 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid1(tom_match9_1); tom_match9_1_2 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid2(tom_match9_1); if(tom_is_fun_sym_Variable(tom_match9_1_1) ||  false ) { var = ( TomTerm) tom_match9_1_1; if(tom_is_fun_sym_Appl(tom_match9_1_2) ||  false ) {  OptionList tom_match9_1_2_1 = null;  NameList tom_match9_1_2_2 = null;  TomList tom_match9_1_2_3 = null; tom_match9_1_2_1 = ( OptionList) tom_get_slot_Appl_option(tom_match9_1_2); tom_match9_1_2_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match9_1_2); tom_match9_1_2_3 = ( TomList) tom_get_slot_Appl_args(tom_match9_1_2); option = ( OptionList) tom_match9_1_2_1; nameList = ( NameList) tom_match9_1_2_2; l = ( TomList) tom_match9_1_2_3;

 
        while(!nameList.isEmpty()) {
          TomName name = nameList.getHead();
          Expression check = tom_make_EqualFunctionSymbol(var,tom_make_Appl(option,tom_make_insert_concTomName(name,( NameList) tom_make_empty_concTomName()),l)) ;
          cond = tom_make_Or(check,cond) ;
          nameList = nameList.getTail();
        }
       } } }} }
 
    return cond;
  }
  
  private TomList addAnnotedAssignement(OptionList optionList,
                                        Expression source,
                                        TomTerm dest,
                                        TomList result) {
    TomTerm annotedVariable = getAnnotedVariable(optionList);
    if(annotedVariable != null) {
      result = appendInstruction(tom_make_Assign(annotedVariable,source) ,result);
    }
    result = appendInstruction(tom_make_Assign(dest,source) ,result);
    return result;
  }
  
  TomList genListMatchingAutomata(TomSymbol symbol,
                                  TomList termList,
                                  TomNumberList oldPath,
                                  TomList actionList,
                                  boolean generateSemanticAction,
                                  TomTerm subjectListName,
                                  int indexTerm) {
    TomTerm term;
    TomList result = empty();
    TomTerm variableListAST = null;
    if(indexTerm > 1) {
      variableListAST = subjectListName;
    } else {
      TomNumberList pathList = (TomNumberList) oldPath.append(tom_make_ListNumber(makeNumber(indexTerm)) );
      
       {  TomTerm tom_match10_1 = null; tom_match10_1 = ( TomTerm) subjectListName;_match10_pattern1: {  OptionList option = null;  TomType termType = null; if(tom_is_fun_sym_Variable(tom_match10_1) ||  false ) {  OptionList tom_match10_1_1 = null;  TomType tom_match10_1_3 = null; tom_match10_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match10_1); tom_match10_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match10_1); option = ( OptionList) tom_match10_1_1; termType = ( TomType) tom_match10_1_3;
 
          variableListAST = tom_make_Variable(option(),tom_make_PositionName(pathList),termType) ;
         }} }
 
      result = append(tom_make_Declaration(variableListAST) ,result);
      result = appendInstruction(tom_make_Assign(variableListAST,tom_make_TomTermToExpression(subjectListName)) ,result);

      subjectListName = variableListAST;
    } 
    
    TomList subList;
    if(termList.isEmpty()) {
      subList = empty();
    } else {
      subList = genListMatchingAutomata(symbol,
                                        termList.getTail(), oldPath, actionList,
                                        generateSemanticAction,variableListAST,indexTerm+1);
    }
      //System.out.println("\ntermList = " + termList);
      //System.out.println("*** genListMatchingAutomata"); 
    matchBlock: {
       {  TomList tom_match11_1 = null; tom_match11_1 = ( TomList) termList;_match11_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match11_1) ||  false ) {
 
            /*
             * generate:
             * ---------
             * if(IS_EMPTY_TomList(subjectList)) {
             *   ...
             * }
             */
          if(indexTerm > 1) {
            break matchBlock;
          } else {
            if(generateSemanticAction) {
              subList = appendInstruction(tom_make_Action(actionList) ,subList);
            }
            Expression cond = tom_make_IsEmptyList(subjectListName) ;
            Instruction test = tom_make_IfThenElse(cond,subList,empty()) ;
            result = appendInstruction(test,result);
            break matchBlock;
          }
         }}_match11_pattern2: {  TomType termType = null;  TomTerm var = null;  OptionList optionList = null;  TomList termTail = null; if(tom_is_fun_sym_manyTomList(tom_match11_1) ||  false ) {  TomTerm tom_match11_1_1 = null;  TomList tom_match11_1_2 = null; tom_match11_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match11_1); tom_match11_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match11_1); if(tom_is_fun_sym_Variable(tom_match11_1_1) ||  false ) {  OptionList tom_match11_1_1_1 = null;  TomType tom_match11_1_1_3 = null; tom_match11_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match11_1_1); tom_match11_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match11_1_1); var = ( TomTerm) tom_match11_1_1; optionList = ( OptionList) tom_match11_1_1_1; termType = ( TomType) tom_match11_1_1_3; termTail = ( TomList) tom_match11_1_2;


 
            /*
             * generate:
             * ---------
             * if(!IS_EMPTY_TomList(subjectList)) {
             *   TomTerm x_j = (TomTerm) GET_HEAD_TomList(subjectList);
             *   subjectList =  (TomList) GET_TAIL_TomList(subjectList);
             *   ...
             * }
             */            
          Expression source = tom_make_GetHead(subjectListName) ;
          TomList assignementList = empty();
          assignementList = addAnnotedAssignement(optionList, source, var, assignementList);
          assignementList = appendInstruction(tom_make_Assign(subjectListName,tom_make_GetTail(subjectListName)) ,assignementList);
          TomList succesList;
          if(termTail.isEmpty()) {
              /*
               *   if(IS_EMPTY_TomList(subjectList)) {
               *     ...
               *   }
               */
            if(generateSemanticAction) {
              subList = appendInstruction(tom_make_Action(actionList) ,subList);
            }
            Instruction test = tom_make_IfThenElse(tom_make_IsEmptyList(subjectListName),subList,empty())
 ;
            succesList = appendInstruction(test,assignementList);
          } else {
            succesList = concat(assignementList,subList);
          }
          
          Instruction test = tom_make_IfThenElse(tom_make_Not(tom_make_IsEmptyList(subjectListName)),succesList,empty())
 ;
          result = appendInstruction(test,result);
          break matchBlock;
         } }}_match11_pattern3: {  TomTerm var = null;  TomType termType = null;  TomList termTail = null;  OptionList optionList = null; if(tom_is_fun_sym_manyTomList(tom_match11_1) ||  false ) {  TomTerm tom_match11_1_1 = null;  TomList tom_match11_1_2 = null; tom_match11_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match11_1); tom_match11_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match11_1); if(tom_is_fun_sym_UnamedVariable(tom_match11_1_1) ||  false ) {  OptionList tom_match11_1_1_1 = null;  TomType tom_match11_1_1_2 = null; tom_match11_1_1_1 = ( OptionList) tom_get_slot_UnamedVariable_option(tom_match11_1_1); tom_match11_1_1_2 = ( TomType) tom_get_slot_UnamedVariable_astType(tom_match11_1_1); var = ( TomTerm) tom_match11_1_1; optionList = ( OptionList) tom_match11_1_1_1; termType = ( TomType) tom_match11_1_1_2; termTail = ( TomList) tom_match11_1_2;              /*              * generate:              * ---------              * if(!IS_EMPTY_TomList(subjectList)) {              *   TomTerm x_j = (TomTerm) GET_HEAD_TomList(subjectList);              *   subjectList =  (TomList) GET_TAIL_TomList(subjectList);              *   ...              * }              */                       Expression source = tom_make_GetHead(subjectListName) ;           TomList assignementList = empty();           assignementList = addAnnotedAssignement(optionList, source, var, assignementList);           assignementList = appendInstruction(tom_make_Assign(subjectListName,tom_make_GetTail(subjectListName)) ,assignementList);           TomList succesList;           if(termTail.isEmpty()) {               /*                *   if(IS_EMPTY_TomList(subjectList)) {                *     ...                *   }                */             if(generateSemanticAction) {               subList = appendInstruction(tom_make_Action(actionList) ,subList);             }             Instruction test = tom_make_IfThenElse(tom_make_IsEmptyList(subjectListName),subList,empty()) ;             succesList = appendInstruction(test,assignementList);           } else {             succesList = concat(assignementList,subList);           }                      Instruction test = tom_make_IfThenElse(tom_make_Not(tom_make_IsEmptyList(subjectListName)),succesList,empty()) ;           result = appendInstruction(test,result);           break matchBlock;          } }}_match11_pattern4: {  TomTerm var = null;  OptionList optionList = null;  TomList termTail = null;  TomType termType = null; if(tom_is_fun_sym_manyTomList(tom_match11_1) ||  false ) {  TomTerm tom_match11_1_1 = null;  TomList tom_match11_1_2 = null; tom_match11_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match11_1); tom_match11_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match11_1); if(tom_is_fun_sym_VariableStar(tom_match11_1_1) ||  false ) {  OptionList tom_match11_1_1_1 = null;  TomType tom_match11_1_1_3 = null; tom_match11_1_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match11_1_1); tom_match11_1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match11_1_1); var = ( TomTerm) tom_match11_1_1; optionList = ( OptionList) tom_match11_1_1_1; termType = ( TomType) tom_match11_1_1_3; termTail = ( TomList) tom_match11_1_2;


 
          if(termTail.isEmpty()) {
              /*
               * generate:
               * ---------
               * E_n = subjectList;
               * ...
               */
            if(generateSemanticAction) {
              subList = appendInstruction(tom_make_Action(actionList) ,subList);
            }
            Expression source = tom_make_TomTermToExpression(subjectListName) ;
            result = addAnnotedAssignement(optionList, source, var, result);
            result = concat(result,subList);
            break matchBlock;
          } else {
              /*
               * generate:
               * ---------
               * TomList begin_i = subjectList;
               * TomList end_i   = subjectList;
               * do {
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
               *   ...
               *   if(!IS_EMPTY_TomList(end_i) )
               *     end_i = (TomList) GET_TAIL_TomList(end_i);
               *   subjectList = end_i;
               * } while( !IS_EMPTY_TomList(subjectList) )
               */
            TomNumberList pathBegin = (TomNumberList) oldPath.append(tom_make_Begin(makeNumber(indexTerm)) );
            TomNumberList pathEnd = (TomNumberList) oldPath.append(tom_make_End(makeNumber(indexTerm)) );
            TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),termType) ;
            TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),termType) ;
            TomList declarationList = empty();
            declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);
            declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);
            TomList assignementList = empty();
            assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(subjectListName)) ,assignementList);
            assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(subjectListName)) ,assignementList);
            
            Expression source = tom_make_GetSliceList(symbol .getAstName(),variableBeginAST,variableEndAST) ;
            TomList doList = empty();
            doList = addAnnotedAssignement(optionList, source, var, doList);
            doList = concat(doList,subList);

            Expression cond1 = tom_make_Not(tom_make_IsEmptyList(variableEndAST)) ;
            Instruction test1 = tom_make_IfThenElse(cond1,cons(tom_make_InstructionToTomTerm(tom_make_Assign(variableEndAST,tom_make_GetTail(variableEndAST))), empty()),empty()) ;
            doList = appendInstruction(test1,doList);
            doList = appendInstruction(tom_make_Assign(subjectListName,tom_make_TomTermToExpression(variableEndAST)) ,doList);
            
            Expression cond2 = tom_make_Not(tom_make_IsEmptyList(subjectListName)) ;
            Instruction doWhile = tom_make_DoWhile(doList,cond2) ;
            
            result = appendInstruction(doWhile,concat(concat(declarationList,result),assignementList));

            break matchBlock;
          }

         } }}_match11_pattern5: {  TomType termType = null;  TomTerm var = null;  OptionList optionList = null;  TomList termTail = null; if(tom_is_fun_sym_manyTomList(tom_match11_1) ||  false ) {  TomTerm tom_match11_1_1 = null;  TomList tom_match11_1_2 = null; tom_match11_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match11_1); tom_match11_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match11_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match11_1_1) ||  false ) {  OptionList tom_match11_1_1_1 = null;  TomType tom_match11_1_1_2 = null; tom_match11_1_1_1 = ( OptionList) tom_get_slot_UnamedVariableStar_option(tom_match11_1_1); tom_match11_1_1_2 = ( TomType) tom_get_slot_UnamedVariableStar_astType(tom_match11_1_1); var = ( TomTerm) tom_match11_1_1; optionList = ( OptionList) tom_match11_1_1_1; termType = ( TomType) tom_match11_1_1_2; termTail = ( TomList) tom_match11_1_2;            if(termTail.isEmpty()) {               /*                * generate:                * ---------                * E_n = subjectList;                * ...                */             if(generateSemanticAction) {               subList = appendInstruction(tom_make_Action(actionList) ,subList);             }             Expression source = tom_make_TomTermToExpression(subjectListName) ;             result = addAnnotedAssignement(optionList, source, var, result);             result = concat(result,subList);             break matchBlock;           } else {               /*                * generate:                * ---------                * TomList begin_i = subjectList;                * TomList end_i   = subjectList;                * do {                *   * SUBSTITUTION: E_i                *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);                *   ...                *   if(!IS_EMPTY_TomList(end_i) )                *     end_i = (TomList) GET_TAIL_TomList(end_i);                *   subjectList = end_i;                * } while( !IS_EMPTY_TomList(subjectList) )                */             TomNumberList pathBegin = (TomNumberList) oldPath.append(tom_make_Begin(makeNumber(indexTerm)) );             TomNumberList pathEnd = (TomNumberList) oldPath.append(tom_make_End(makeNumber(indexTerm)) );             TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),termType) ;             TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),termType) ;             TomList declarationList = empty();             declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);             declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);             TomList assignementList = empty();             assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(subjectListName)) ,assignementList);             assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(subjectListName)) ,assignementList);                          Expression source = tom_make_GetSliceList(symbol .getAstName(),variableBeginAST,variableEndAST) ;             TomList doList = empty();             doList = addAnnotedAssignement(optionList, source, var, doList);             doList = concat(doList,subList);              Expression cond1 = tom_make_Not(tom_make_IsEmptyList(variableEndAST)) ;             Instruction test1 = tom_make_IfThenElse(cond1,cons(tom_make_InstructionToTomTerm(tom_make_Assign(variableEndAST,tom_make_GetTail(variableEndAST))), empty()),empty()) ;             doList = appendInstruction(test1,doList);             doList = appendInstruction(tom_make_Assign(subjectListName,tom_make_TomTermToExpression(variableEndAST)) ,doList);                          Expression cond2 = tom_make_Not(tom_make_IsEmptyList(subjectListName)) ;             Instruction doWhile = tom_make_DoWhile(doList,cond2) ;                          result = appendInstruction(doWhile,concat(concat(declarationList,result),assignementList));              break matchBlock;           }           } }}_match11_pattern6: {

 
          System.out.println("GenListMatchingAutomata strange termList: " + termList);
          throw new TomRuntimeException(new Throwable("GenListMatchingAutomata strange termList: " + termList));
        } }
 
    } // end matchBlock
    return result;
  }

  TomList genArrayMatchingAutomata(TomSymbol symbol,
                                   TomList termList,
                                   TomNumberList oldPath,
                                   TomList actionList,
                                   boolean generateSemanticAction,
                                   TomTerm subjectListName,
                                   TomTerm subjectListIndex,
                                   int indexTerm) {
    TomTerm term;
    TomList result = empty();
      //%variable
    
    if(termList.isEmpty()) {
      return result;
    }
    
    TomTerm variableListAST = null;
    TomTerm variableIndexAST = null;
    Expression glZero = tom_make_TomTermToExpression(tom_make_TargetLanguageToTomTerm(tom_make_ITL( "0"))) ;
    if(indexTerm > 1) {
      variableListAST = subjectListName;
      variableIndexAST = subjectListIndex;
    } else {
      TomNumberList pathList = (TomNumberList) oldPath.append(tom_make_ListNumber(makeNumber(indexTerm)) );
      TomNumberList pathIndex = (TomNumberList) oldPath.append(tom_make_IndexNumber(makeNumber(indexTerm)) );

      matchBlock: {
         {  TomTerm tom_match12_1 = null; tom_match12_1 = ( TomTerm) subjectListName;_match12_pattern1: {  OptionList option = null;  TomType termType = null; if(tom_is_fun_sym_Variable(tom_match12_1) ||  false ) {  OptionList tom_match12_1_1 = null;  TomType tom_match12_1_3 = null; tom_match12_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match12_1); tom_match12_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match12_1); option = ( OptionList) tom_match12_1_1; termType = ( TomType) tom_match12_1_3;
 
            variableListAST = tom_make_Variable(option(),tom_make_PositionName(pathList),termType) ;
              /* TODO: other termType */
            variableIndexAST = tom_make_Variable(option(),tom_make_PositionName(pathIndex),getIntType()) ;
            break matchBlock;
           }}_match12_pattern2: {
 
            System.out.println("GenArrayMatchingAutomata strange subjectListName: " + subjectListName);
            throw new TomRuntimeException(new Throwable("GenArrayMatchingAutomata strange subjectListName: " + subjectListName));
          } }
 
      }
      result = append(tom_make_Declaration(variableListAST) ,result);
      result = append(tom_make_Declaration(variableIndexAST) ,result);
      result = appendInstruction(tom_make_Assign(variableListAST,tom_make_TomTermToExpression(subjectListName)) ,result);
      result = appendInstruction(tom_make_Assign(variableIndexAST,glZero) ,result);

      subjectListName  = variableListAST;
      subjectListIndex = variableIndexAST;
    } 
    
    TomList subList = genArrayMatchingAutomata(symbol,
                                               termList.getTail(), oldPath, actionList,
                                               generateSemanticAction,
                                               variableListAST,variableIndexAST,indexTerm+1);
      //System.out.println("\ntermList = " + termList);
      //System.out.println("*** genArrayMatchingAutomata");
    matchBlock: {
       {  TomList tom_match13_1 = null; tom_match13_1 = ( TomList) termList;_match13_pattern1: {  TomTerm var = null;  TomType termType = null;  OptionList optionList = null;  TomList termTail = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_Variable(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_3 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match13_1_1); tom_match13_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_3; termTail = ( TomList) tom_match13_1_2;


 
          if(termTail.isEmpty()) {
              /*
               * generate:
               * ---------
               * if(_match1_1_index_1 < GET_SIZE_L(_match1_1_list_1)) {
               *   TomTerm x_j = (TomTerm) GET_ELEMENT_L(_match1_1_list_1,_match1_1_index_1);
               *   _match1_1_index_1++;;
               *   if(_match1_1_index_1 = GET_SIZE_L(_match1_1_list_1)) {
               *     ...
               *   }
               * }
               */
            Expression source = tom_make_GetElement(subjectListName,subjectListIndex) ;
            TomList assignementList = empty();
            assignementList = addAnnotedAssignement(optionList, source, var, assignementList);
            assignementList = appendInstruction(tom_make_Increment(subjectListIndex) ,assignementList);
            
            if(generateSemanticAction) {
              subList = appendInstruction(tom_make_Action(actionList) ,subList);
            }
            
            Expression cond = tom_make_IsEmptyArray(subjectListName,subjectListIndex) ;
            Instruction test = tom_make_IfThenElse(cond,subList,empty()) ;
            TomList succesList = appendInstruction(test,assignementList);
            
            cond = tom_make_Not(tom_make_IsEmptyArray(subjectListName,subjectListIndex)) ;
            test = tom_make_IfThenElse(cond,succesList,empty()) ;
            result = appendInstruction(test,result);
            break matchBlock;
          } else {
              /*
               * generate:
               * ---------
               * if(!IS_EMPTY_TomList(subjectList,subjectIndex)) {
               *   TomTerm x_j = (TomTerm) GET_ELEMENT_TomList(subjectList,subjectIndex);
               *   subjectIndex++;
               *   ...
               * }
               */
            TomList assignementList = empty();
            TomList succesList      = empty();

            Expression source = tom_make_GetElement(subjectListName,subjectListIndex) ;
            assignementList = addAnnotedAssignement(optionList, source, var, assignementList);
            assignementList = appendInstruction(tom_make_Increment(subjectListIndex) ,assignementList);
            
            succesList = concat(concat(succesList,assignementList),subList);
            Expression cond = tom_make_Not(tom_make_IsEmptyArray(subjectListName,subjectListIndex)) ;
            Instruction test = tom_make_IfThenElse(cond,succesList,empty()) ;
            
            result = appendInstruction(test,result);
            break matchBlock;
          }
         } }}_match13_pattern2: {  TomType termType = null;  OptionList optionList = null;  TomList termTail = null;  TomTerm var = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_UnamedVariable(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_2 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_UnamedVariable_option(tom_match13_1_1); tom_match13_1_1_2 = ( TomType) tom_get_slot_UnamedVariable_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_2; termTail = ( TomList) tom_match13_1_2;            if(termTail.isEmpty()) {               /*                * generate:                * ---------                * if(_match1_1_index_1 < GET_SIZE_L(_match1_1_list_1)) {                *   TomTerm x_j = (TomTerm) GET_ELEMENT_L(_match1_1_list_1,_match1_1_index_1);                *   _match1_1_index_1++;;                *   if(_match1_1_index_1 = GET_SIZE_L(_match1_1_list_1)) {                *     ...                *   }                * }                */             Expression source = tom_make_GetElement(subjectListName,subjectListIndex) ;             TomList assignementList = empty();             assignementList = addAnnotedAssignement(optionList, source, var, assignementList);             assignementList = appendInstruction(tom_make_Increment(subjectListIndex) ,assignementList);                          if(generateSemanticAction) {               subList = appendInstruction(tom_make_Action(actionList) ,subList);             }                          Expression cond = tom_make_IsEmptyArray(subjectListName,subjectListIndex) ;             Instruction test = tom_make_IfThenElse(cond,subList,empty()) ;             TomList succesList = appendInstruction(test,assignementList);                          cond = tom_make_Not(tom_make_IsEmptyArray(subjectListName,subjectListIndex)) ;             test = tom_make_IfThenElse(cond,succesList,empty()) ;             result = appendInstruction(test,result);             break matchBlock;           } else {               /*                * generate:                * ---------                * if(!IS_EMPTY_TomList(subjectList,subjectIndex)) {                *   TomTerm x_j = (TomTerm) GET_ELEMENT_TomList(subjectList,subjectIndex);                *   subjectIndex++;                *   ...                * }                */             TomList assignementList = empty();             TomList succesList      = empty();              Expression source = tom_make_GetElement(subjectListName,subjectListIndex) ;             assignementList = addAnnotedAssignement(optionList, source, var, assignementList);             assignementList = appendInstruction(tom_make_Increment(subjectListIndex) ,assignementList);                          succesList = concat(concat(succesList,assignementList),subList);             Expression cond = tom_make_Not(tom_make_IsEmptyArray(subjectListName,subjectListIndex)) ;             Instruction test = tom_make_IfThenElse(cond,succesList,empty()) ;                          result = appendInstruction(test,result);             break matchBlock;           }          } }}_match13_pattern3: {  TomTerm var = null;  OptionList optionList = null;  TomType termType = null;  TomList termTail = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_VariableStar(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_3 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match13_1_1); tom_match13_1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_3; termTail = ( TomList) tom_match13_1_2;


 
          if(termTail.isEmpty()) {
              /*
               * generate:
               * ---------
               * E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));
               * ...
               */
            if(generateSemanticAction) {
              subList = appendInstruction(tom_make_Action(actionList) ,subList);
            }
            
            Expression source = tom_make_GetSliceArray(symbol .getAstName(),subjectListName,subjectListIndex,tom_make_ExpressionToTomTerm(tom_make_GetSize(subjectListName)))



 ;
            result = addAnnotedAssignement(optionList, source, var, result);
            result = concat(result,subList);
            break matchBlock;
          } else {
              /*
               * generate:
               * ---------
               * int begin_i = subjectIndex;
               * int end_i   = subjectIndex;
               * do {
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
               *   ...
               *   end_i++;
               *   subjectIndex = end_i;
               * } while( !IS_EMPTY_TomList(subjectList) )
               */

            TomNumberList pathBegin = (TomNumberList) oldPath.append(tom_make_Begin(makeNumber(indexTerm)) );
            TomNumberList pathEnd = (TomNumberList) oldPath.append(tom_make_End(makeNumber(indexTerm)) );
              /* TODO: termType */
            TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),getIntType()) ;
            TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),getIntType()) ;
            TomList declarationList = empty();
            declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);
            declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);
            TomList assignementList = empty();
            assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(subjectListIndex)) ,assignementList);
            assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(subjectListIndex)) ,assignementList);
            
            Expression source = tom_make_GetSliceArray(symbol .getAstName(),subjectListName,variableBeginAST,variableEndAST)

 ;
            TomList doList = empty();
            doList = addAnnotedAssignement(optionList, source, var, doList);
            doList = concat(doList,subList);
            doList = appendInstruction(tom_make_Increment(variableEndAST) ,doList);
            doList = appendInstruction(tom_make_Assign(subjectListIndex,tom_make_TomTermToExpression(variableEndAST)) ,doList); 
            
            Expression cond = tom_make_Not(tom_make_IsEmptyArray(subjectListName,subjectListIndex)) ;
            Instruction doWhile = tom_make_DoWhile(doList,cond) ;
            
            TomList tmpResult = empty();
            if(supportedBlock) {
              tmpResult = appendInstruction(tom_make_OpenBlock() ,tmpResult);
            }
            tmpResult = concat(tmpResult,declarationList);
            tmpResult = concat(tmpResult,result);
            tmpResult = concat(tmpResult,assignementList);
            tmpResult = appendInstruction(doWhile,tmpResult);
            if(supportedBlock) {
              tmpResult = appendInstruction(tom_make_CloseBlock() ,tmpResult);
            }
            result = tmpResult;
            break matchBlock;
          }
         } }}_match13_pattern4: {  TomTerm var = null;  TomType termType = null;  OptionList optionList = null;  TomList termTail = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_2 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_UnamedVariableStar_option(tom_match13_1_1); tom_match13_1_1_2 = ( TomType) tom_get_slot_UnamedVariableStar_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_2; termTail = ( TomList) tom_match13_1_2;            if(termTail.isEmpty()) {               /*                * generate:                * ---------                * E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));                * ...                */             if(generateSemanticAction) {               subList = appendInstruction(tom_make_Action(actionList) ,subList);             }                          Expression source = tom_make_GetSliceArray(symbol .getAstName(),subjectListName,subjectListIndex,tom_make_ExpressionToTomTerm(tom_make_GetSize(subjectListName))) ;             result = addAnnotedAssignement(optionList, source, var, result);             result = concat(result,subList);             break matchBlock;           } else {               /*                * generate:                * ---------                * int begin_i = subjectIndex;                * int end_i   = subjectIndex;                * do {                *   * SUBSTITUTION: E_i                *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);                *   ...                *   end_i++;                *   subjectIndex = end_i;                * } while( !IS_EMPTY_TomList(subjectList) )                */              TomNumberList pathBegin = (TomNumberList) oldPath.append(tom_make_Begin(makeNumber(indexTerm)) );             TomNumberList pathEnd = (TomNumberList) oldPath.append(tom_make_End(makeNumber(indexTerm)) );               /* TODO: termType */             TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),getIntType()) ;             TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),getIntType()) ;             TomList declarationList = empty();             declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);             declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);             TomList assignementList = empty();             assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(subjectListIndex)) ,assignementList);             assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(subjectListIndex)) ,assignementList);                          Expression source = tom_make_GetSliceArray(symbol .getAstName(),subjectListName,variableBeginAST,variableEndAST) ;             TomList doList = empty();             doList = addAnnotedAssignement(optionList, source, var, doList);             doList = concat(doList,subList);             doList = appendInstruction(tom_make_Increment(variableEndAST) ,doList);             doList = appendInstruction(tom_make_Assign(subjectListIndex,tom_make_TomTermToExpression(variableEndAST)) ,doList);                           Expression cond = tom_make_Not(tom_make_IsEmptyArray(subjectListName,subjectListIndex)) ;             Instruction doWhile = tom_make_DoWhile(doList,cond) ;                          TomList tmpResult = empty();             if(supportedBlock) {               tmpResult = appendInstruction(tom_make_OpenBlock() ,tmpResult);             }             tmpResult = concat(tmpResult,declarationList);             tmpResult = concat(tmpResult,result);             tmpResult = concat(tmpResult,assignementList);             tmpResult = appendInstruction(doWhile,tmpResult);             if(supportedBlock) {               tmpResult = appendInstruction(tom_make_CloseBlock() ,tmpResult);             }             result = tmpResult;             break matchBlock;           }          } }}_match13_pattern5: {

 
          System.out.println("GenArrayMatchingAutomata strange termList: " + termList);
		  throw new TomRuntimeException(new Throwable("GenArrayMatchingAutomata strange termList: " + termList));
        } }
 
    } // end matchBlock
    return result;
  }


    /* 
     * postProcessing: passCompiledTermTransformation
     *
     * transform a compiledTerm
     * 2 phases:
     *   - collection of Declaration
     *   - replace LocalVariable and remove Declaration
     */
  
  public TomTerm postProcessing(TomTerm subject) {
    TomTerm res;
    ArrayList list = new ArrayList();
    traversalCollectDeclaration(list,subject);
      //System.out.println("list size = " + list.size());
    res = traversalReplaceLocalVariable(list,subject);
    return res;
  }
    
  private TomTerm traversalCollectDeclaration(ArrayList list, TomTerm subject) {
      //%variable
     {  TomTerm tom_match14_1 = null; tom_match14_1 = ( TomTerm) subject;_match14_pattern1: {  TomList l = null; if(tom_is_fun_sym_Tom(tom_match14_1) ||  false ) {  TomList tom_match14_1_1 = null; tom_match14_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match14_1); l = ( TomList) tom_match14_1_1;
 
        return tom_make_Tom(traversalCollectDeclarationList(list, l)) ;
       }}_match14_pattern2: { if(tom_is_fun_sym_LocalVariable(tom_match14_1) ||  false ) {

 
          //System.out.println("Detect LocalVariable");
        
        Collection c = new HashSet();
        list.add(c);
        collectDeclaration(c,subject);
        return null;
       }}_match14_pattern3: {  TomTerm t = null; t = ( TomTerm) tom_match14_1;

 
          //System.out.println("default: " + t);
        if(!list.isEmpty()) {
          Collection c = (Collection) list.get(list.size()-1);
          collectDeclaration(c,subject);
        }
        return t;
      } }
 
  }

  public void collectDeclaration(final Collection collection, TomTerm subject) {
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
            //%variable
           {  TomTerm tom_match15_1 = null; tom_match15_1 = ( TomTerm) t;_match15_pattern1: { if(tom_is_fun_sym_Declaration(tom_match15_1) ||  false ) {
 
              collection.add(t);
              return false;
             }}_match15_pattern2: {
  return true; } }
 
        } 
      }; // end new
    
    traversal().genericCollect(subject, collect); 
  } 

  private boolean removeDeclaration = false;
  private TomTerm traversalReplaceLocalVariable(ArrayList list, TomTerm subject) {
      //%variable
     {  TomTerm tom_match16_1 = null; tom_match16_1 = ( TomTerm) subject;_match16_pattern1: {  TomList l = null; if(tom_is_fun_sym_Tom(tom_match16_1) ||  false ) {  TomList tom_match16_1_1 = null; tom_match16_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match16_1); l = ( TomList) tom_match16_1_1;
 
        return tom_make_Tom(traversalReplaceLocalVariableList(list, l)) ;
       }}_match16_pattern2: { if(tom_is_fun_sym_LocalVariable(tom_match16_1) ||  false ) {

 
          //System.out.println("Replace LocalVariable");

        Map map = (Map)list.get(0);
        list.remove(0);

        Collection c = map.values();
        Iterator it = c.iterator();
        TomList declarationList = empty();
        while(it.hasNext()) {
          declarationList = cons((TomTerm)it.next(),declarationList);
        }

          //System.out.println("declarationList = " + declarationList);
        removeDeclaration = true;
        return tom_make_Tom(declarationList) ;
       }}_match16_pattern3: {  TomTerm t = null; t = ( TomTerm) tom_match16_1;






 
        TomTerm res = t;
          //res = removeDeclaration(t);
        
        if(removeDeclaration) {
          res = removeDeclaration(t);
        }
        
          //System.out.println("\ndefault:\nt   = " + t + "\nres = " + res);
        return res;
      } }
 
  }

    private TomList traversalCollectDeclarationList(ArrayList list,TomList subject) {
      //%variable
    if(subject.isEmpty()) {
      return subject;
    }
    TomTerm t = subject.getHead();
    TomList l = subject.getTail();
    return cons(traversalCollectDeclaration(list,t),
                traversalCollectDeclarationList(list,l));
  }

  private TomList traversalReplaceLocalVariableList(ArrayList list,TomList subject) {
      //%variable
    if(subject.isEmpty()) {
      return subject;
    }
    TomTerm t = subject.getHead();
    TomList l = subject.getTail();
    return cons(traversalReplaceLocalVariable(list,t),
                traversalReplaceLocalVariableList(list,l));
  }
   
  public TomTerm removeDeclaration(TomTerm subject) {
    TomTerm res = subject;
      //System.out.println("*** removeDeclaration");
                  
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm t) {
            //%variable
           {  TomTerm tom_match17_1 = null; tom_match17_1 = ( TomTerm) t;_match17_pattern1: { if(tom_is_fun_sym_Declaration(tom_match17_1) ||  false ) {
 
                //System.out.println("Remove Declaration");
              return tom_make_Tom(empty()) ;
             }}_match17_pattern2: {  TomTerm other = null; other = ( TomTerm) tom_match17_1;

 
              System.out.println("removeDeclaration this = " + this);
                //return other;
              return (TomTerm) traversal().genericTraversal(other,this);
            } }
 
        } 
      }; // end new
    
      //return genericReplace(subject, replace);
    try {
      res = (TomTerm) replace.apply(subject);
    } catch(Exception e) {
      System.out.println("removeDeclaration: error");
      throw new TomRuntimeException(new Throwable("removeDeclaration: error"));
    }
    return res;
  }
  
} // end of class
  


    
