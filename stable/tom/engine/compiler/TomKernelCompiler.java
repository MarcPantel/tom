/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomconstraint.types.constraint.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tominstruction.types.instruction.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomoption.*;
import tom.engine.adt.tomoption.types.option.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.tools.SymbolTable;
import tom.engine.tools.ASTFactory;
import aterm.ATerm;
import java.util.logging.Level;
import java.util.logging.Logger;
import tom.library.strategy.mutraveler.MuTraveler;
import tom.library.strategy.mutraveler.Identity;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

import tom.platform.*;

import tom.engine.compiler.antipattern.*;
import tom.engine.adt.tomterm.types.tomterm.*;

public class TomKernelCompiler extends TomBase {

  private SymbolTable symbolTable;
  // boolean flag used for anti-pattern matching
  private static final String ANTI_FLAG_NAME = "tom_anti_constraints_status";
  
  private static TomType antiFlagType = null;
  private static TomTerm antiFlagVariable = null;
  
  public TomKernelCompiler(SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
    // initialize anti flag
    antiFlagType = symbolTable.getBooleanType();     
  }

  private SymbolTable getSymbolTable(String moduleName) {
    //TODO//
    //Using of the moduleName
    ////////
    return symbolTable;
  }

// ------------------------------------------------------------
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_sort_String(String t) {  return  t instanceof String  ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) {  return  (t1==t2)  ;} private static boolean tom_equal_term_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Instruction(Object t) {  return  t instanceof tom.engine.adt.tominstruction.types.Instruction  ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_InstructionList(Object t) {  return  t instanceof tom.engine.adt.tominstruction.types.InstructionList  ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomType(Object t) {  return  t instanceof tom.engine.adt.tomtype.types.TomType  ;}private static boolean tom_equal_term_TargetLanguage(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TargetLanguage(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TargetLanguage  ;}private static boolean tom_equal_term_TomNumber(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNumber(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNumber  ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNumberList(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNumberList  ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNameList(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNameList  ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomName(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomName  ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Expression(Object t) {  return  t instanceof tom.engine.adt.tomexpression.types.Expression  ;}private static boolean tom_equal_term_PatternInstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PatternInstructionList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.PatternInstructionList  ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomList  ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomTerm(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomTerm  ;}private static boolean tom_equal_term_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Option(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.Option  ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_OptionList(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.OptionList  ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Constraint(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.Constraint  ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_ConstraintList(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList  ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotList(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.SlotList  ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Slot(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.Slot  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_If( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.If.make(t0, t1, t2); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_DoWhile( tom.engine.adt.tominstruction.types.Instruction  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tominstruction.types.instruction.DoWhile.make(t0, t1); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_WhileDo( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tominstruction.types.Instruction  t1) { return  tom.engine.adt.tominstruction.types.instruction.WhileDo.make(t0, t1); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Assign( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tominstruction.types.instruction.Assign.make(t0, t1); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Let( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.Let.make(t0, t1, t2); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_LetRef( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.LetRef.make(t0, t1, t2); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_LetAssign( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.LetAssign.make(t0, t1, t2); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Nop() { return  tom.engine.adt.tominstruction.types.instruction.Nop.make(); }private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.AbstractBlock  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_AbstractBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(t0); }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_AbstractBlock_InstList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getInstList()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_UnamedBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.UnamedBlock.make(t0); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_NamedBlock( String  t0,  tom.engine.adt.tominstruction.types.InstructionList  t1) { return  tom.engine.adt.tominstruction.types.instruction.NamedBlock.make(t0, t1); }private static boolean tom_is_fun_sym_Match( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.Match  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Match_SubjectList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_Match_AstPatternInstructionList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstPatternInstructionList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Match_Option( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_CompiledMatch( tom.engine.adt.tominstruction.types.Instruction  t0,  tom.engine.adt.tomoption.types.OptionList  t1) { return  tom.engine.adt.tominstruction.types.instruction.CompiledMatch.make(t0, t1); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_CompiledPattern( tom.engine.adt.tomterm.types.TomList  t0,  tom.engine.adt.tominstruction.types.Instruction  t1) { return  tom.engine.adt.tominstruction.types.instruction.CompiledPattern.make(t0, t1); }private static  tom.engine.adt.tomtype.types.TomType  tom_make_EmptyType() { return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make(); }private static  tom.engine.adt.tomsignature.types.TargetLanguage  tom_make_ITL( String  t0) { return  tom.engine.adt.tomsignature.types.targetlanguage.ITL.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_MatchNumber( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.MatchNumber.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_PatternNumber( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.PatternNumber.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_ListNumber( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.ListNumber.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_IndexNumber( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.IndexNumber.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_Begin( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.Begin.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_End( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.End.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_Save( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.Save.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_Position( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.Position.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_NameNumber( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomname.types.tomnumber.NameNumber.make(t0); }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.Name  ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_Name( String  t0) { return  tom.engine.adt.tomname.types.tomname.Name.make(t0); }private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_PositionName( tom.engine.adt.tomname.types.TomNumberList  t0) { return  tom.engine.adt.tomname.types.tomname.PositionName.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TomTermToExpression( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Bottom( tom.engine.adt.tomtype.types.TomType  t0) { return  tom.engine.adt.tomexpression.types.expression.Bottom.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Negation( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomexpression.types.expression.Negation.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_And( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.And.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Or( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.Or.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GreaterThan( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.GreaterThan.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TrueTL() { return  tom.engine.adt.tomexpression.types.expression.TrueTL.make(); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_FalseTL() { return  tom.engine.adt.tomexpression.types.expression.FalseTL.make(); }private static boolean tom_is_fun_sym_EqualFunctionSymbol( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.EqualFunctionSymbol  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualFunctionSymbol( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualFunctionSymbol.make(t0, t1, t2); }private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_EqualFunctionSymbol_AstType( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp1()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp2()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualTerm( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(t0, t1, t2); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Cast( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.Cast.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSlot( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomname.types.TomName  t1,  String  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetSlot.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetHead( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.GetHead.make(t0, t1, t2); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetTail( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.GetTail.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsEmptyList( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsEmptyList.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsEmptyArray( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.IsEmptyArray.make(t0, t1, t2); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_AddOne( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomexpression.types.expression.AddOne.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSize( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.GetSize.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetElement( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetElement.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSliceList( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.GetSliceList.make(t0, t1, t2); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSliceArray( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetSliceArray.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsSort( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsSort.make(t0, t1); }private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Variable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.Variable.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_VariableStar( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.VariableStar.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TargetLanguageToTomTerm( tom.engine.adt.tomsignature.types.TargetLanguage  t0) { return  tom.engine.adt.tomterm.types.tomterm.TargetLanguageToTomTerm.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ExpressionToTomTerm( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make(t0); }private static boolean tom_is_fun_sym_SubjectList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.SubjectList  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_SubjectList_TomList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomList()  ;}private static boolean tom_is_fun_sym_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AntiTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Ref( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.Ref.make(t0); }private static boolean tom_is_fun_sym_Automata( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Automata  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Automata( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomterm.types.TomList  t1,  tom.engine.adt.tomname.types.TomNumberList  t2,  tom.engine.adt.tominstruction.types.Instruction  t3) { return  tom.engine.adt.tomterm.types.tomterm.Automata.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Automata_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Automata_PatternList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getPatternList()  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_Automata_NumberList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNumberList()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_Automata_Inst( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getInst()  ;}private static boolean tom_is_fun_sym_FunctionCall( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.FunctionCall  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_FunctionCall_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_FunctionCall_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_FunctionCall_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static boolean tom_is_fun_sym_BuildConstant( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildConstant  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_BuildConstant_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_BuildTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildTerm  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_BuildTerm_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_BuildTerm_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static  String  tom_get_slot_BuildTerm_ModuleName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getModuleName()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_make_OriginTracking( tom.engine.adt.tomname.types.TomName  t0,  int  t1,  String  t2) { return  tom.engine.adt.tomoption.types.option.OriginTracking.make(t0, t1, t2); }private static boolean tom_is_fun_sym_Label( tom.engine.adt.tomoption.types.Option  t) {  return  t instanceof tom.engine.adt.tomoption.types.option.Label  ;}private static  tom.engine.adt.tomoption.types.Option  tom_make_Label( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomoption.types.option.Label.make(t0); }private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Label_AstName( tom.engine.adt.tomoption.types.Option  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_Ensure( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.Ensure  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Ensure_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getVariable()  ;}private static boolean tom_is_fun_sym_Equal( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.Equal  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Equal_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getVariable()  ;}private static boolean tom_is_fun_sym_AssignTo( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AssignTo  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AssignTo_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getVariable()  ;}private static boolean tom_is_fun_sym_AssignPositionTo( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AssignPositionTo  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AssignPositionTo_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getVariable()  ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomslot.types.Slot  t) {  return  t instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl  ;}private static  tom.engine.adt.tomslot.types.Slot  tom_make_PairSlotAppl( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(t0, t1); }private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairSlotAppl_SlotName( tom.engine.adt.tomslot.types.Slot  t) {  return  t.getSlotName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_PairSlotAppl_Appl( tom.engine.adt.tomslot.types.Slot  t) {  return  t.getAppl()  ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getHeadconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getTailconcInstruction()  ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.isEmptyconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end) {    if(tom_equal_term_InstructionList(begin,end)) {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber || t instanceof tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_empty_list_concTomNumber() { return  tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber.make() ; }private static  tom.engine.adt.tomname.types.TomNumberList  tom_cons_list_concTomNumber( tom.engine.adt.tomname.types.TomNumber  e,  tom.engine.adt.tomname.types.TomNumberList  l) { return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_get_head_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.getHeadconcTomNumber()  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_tail_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.getTailconcTomNumber()  ;}private static boolean tom_is_empty_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.isEmptyconcTomNumber()  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_append_list_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  l1,  tom.engine.adt.tomname.types.TomNumberList  l2) {    if(tom_is_empty_concTomNumber_TomNumberList(l1)) {     return l2;    } else if(tom_is_empty_concTomNumber_TomNumberList(l2)) {     return l1;    } else if(tom_is_empty_concTomNumber_TomNumberList(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(l1))) {     return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(l1),tom_append_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slice_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  begin,  tom.engine.adt.tomname.types.TomNumberList  end) {    if(tom_equal_term_TomNumberList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_empty_list_concTomNumber();    } else {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(begin),( tom.engine.adt.tomname.types.TomNumberList )tom_get_slice_concTomNumber(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_equal_term_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomterm.types.TomList  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm || t instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_empty_list_concTomTerm() { return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ; }private static  tom.engine.adt.tomterm.types.TomList  tom_cons_list_concTomTerm( tom.engine.adt.tomterm.types.TomTerm  e,  tom.engine.adt.tomterm.types.TomList  l) { return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(e,l) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_head_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getHeadconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getTailconcTomTerm()  ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.isEmptyconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList  l1,  tom.engine.adt.tomterm.types.TomList  l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end) {    if(tom_equal_term_TomList(begin,end)) {      return ( tom.engine.adt.tomterm.types.TomList )tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) {  return  t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption || t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getHeadconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getTailconcOption()  ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.isEmptyconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList  l1,  tom.engine.adt.tomoption.types.OptionList  l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end) {    if(tom_equal_term_OptionList(begin,end)) {      return ( tom.engine.adt.tomoption.types.OptionList )tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_is_fun_sym_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndAntiConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndAntiConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndAntiConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndAntiConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndAntiConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndAntiConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) {  return  l.getHeadAndAntiConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndAntiConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) {  return  l.getTailAndAntiConstraint()  ;}private static boolean tom_is_empty_AndAntiConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) {  return  l.isEmptyAndAntiConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {    if(tom_is_empty_AndAntiConstraint_Constraint(l1)) {     return l2;    } else if(tom_is_empty_AndAntiConstraint_Constraint(l2)) {     return l1;    } else if(tom_is_empty_AndAntiConstraint_Constraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_tail_AndAntiConstraint_Constraint(l1))) {     return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_AndAntiConstraint_Constraint(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_AndAntiConstraint_Constraint(l1),tom_append_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_tail_AndAntiConstraint_Constraint(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end) {    if(tom_equal_term_Constraint(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.Constraint )tom_empty_list_AndAntiConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_AndAntiConstraint_Constraint(begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_tail_AndAntiConstraint_Constraint(begin),end));    }   }  private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getHeadconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getTailconcConstraint()  ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.isEmptyconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end) {    if(tom_equal_term_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) {  return  t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot || t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList  l1,  tom.engine.adt.tomslot.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end) {    if(tom_equal_term_SlotList(begin,end)) {      return ( tom.engine.adt.tomslot.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_sort_Strategy(Object t) {  return  t instanceof tom.library.strategy.mutraveler.MuStrategy  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ChoiceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.ChoiceId(first,then) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */   

// ------------------------------------------------------------
 
  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ChoiceTopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(v,tom_make_All(tom_make_MuVar("x"))))




 ; }


  public int matchNumber = 0;

  private TomName getLabel(OptionList list) {
     if (tom_is_sort_OptionList(list)) { { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1=(( tom.engine.adt.tomoption.types.OptionList )list); if ( ( tom_is_fun_sym_concOption(tomMatch1Position1) ||  false  ) ) { {int tomMatch1Position1Index1=0; { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1List1=tomMatch1Position1; { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1Begin1=tomMatch1Position1List1; { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1End1=tomMatch1Position1List1; { while (!(tom_is_empty_concOption_OptionList(tomMatch1Position1End1))) {tomMatch1Position1List1=tomMatch1Position1End1; { { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1Save2=tomMatch1Position1List1; { { tom.engine.adt.tomoption.types.Option  tomMatch1Position1Position2=tom_get_head_concOption_OptionList(tomMatch1Position1List1);tomMatch1Position1Index1=tomMatch1Position1Index1 + 1;tomMatch1Position1List1=tom_get_tail_concOption_OptionList(tomMatch1Position1List1); if ( ( tom_is_fun_sym_Label(tomMatch1Position1Position2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch1Position1Position2NameNumberAstName=tom_get_slot_Label_AstName(tomMatch1Position1Position2); if ( ( tom_is_fun_sym_Name(tomMatch1Position1Position2NameNumberAstName) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_name=tomMatch1Position1Position2NameNumberAstName; if ( true ) {
 return tom_name;  } } } } } }tomMatch1Position1List1=tomMatch1Position1Save2; } }tomMatch1Position1End1=tom_get_tail_concOption_OptionList(tomMatch1Position1End1); } }tomMatch1Position1List1=tomMatch1Position1Begin1; } } } } } } } }

    return null;
  }
  
    /* 
     * compileMatching:
     * compiles the Match construct into a matching automaton: CompiledMatch
     */

   private static class replace_compileMatching  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  TomKernelCompiler  compiler;  public replace_compileMatching(  TomKernelCompiler  compiler ) { super(tom_make_Identity() ); this.compiler=compiler; } public  TomKernelCompiler  getcompiler() { return compiler;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_Instruction(tom__arg)) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch2Position1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if ( ( tom_is_fun_sym_Match(tomMatch2Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch2Position1NameNumberSubjectList=tom_get_slot_Match_SubjectList(tomMatch2Position1); if ( ( tom_is_fun_sym_SubjectList(tomMatch2Position1NameNumberSubjectList) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_l1=tom_get_slot_SubjectList_TomList(tomMatch2Position1NameNumberSubjectList); { tom.engine.adt.tomterm.types.PatternInstructionList  tom_patternInstructionList=tom_get_slot_Match_AstPatternInstructionList(tomMatch2Position1); { tom.engine.adt.tomoption.types.OptionList  tom_optionList=tom_get_slot_Match_Option(tomMatch2Position1); if ( true ) {

    	  
	//TODO
	String moduleName = "default";
	TomNumberList rootpath = tom_empty_list_concTomNumber();
	compiler.matchNumber++;
	rootpath = tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_MatchNumber(compiler.matchNumber),tom_empty_list_concTomNumber()));

	/*
	 * for each pattern action (<term>,...,<term> -> <action>)
	 * build a matching automata
	 */
	TomList automataList = tom_empty_list_concTomTerm();
	int actionNumber = 0;
	VisitableVisitor compileStrategy = tom_make_ChoiceTopDown(tom_make_replace_compileMatching(compiler));
	while(!tom_patternInstructionList.isEmptyconcPatternInstruction()) {
	  actionNumber++;
	  PatternInstruction pa = tom_patternInstructionList.getHeadconcPatternInstruction();
	  SlotList patternList = tomListToSlotList(pa.getPattern().getTomList());
	  Instruction actionInst = pa.getAction();
	  if(patternList==null || actionInst==null) {
	    System.out.println("TomKernelCompiler: null value");
	    throw new TomRuntimeException("TomKernelCompiler: null value");
	  }

	  /*
	   * compile nested match constructs
	   * given a list of pattern: we build a matching automaton
	   */	  
	  actionInst = (Instruction) compileStrategy.visit(actionInst);
	  Instruction matchingAutomata = null;
	  // if we have anti-patterns, we should use a boolean flag
	  if(TomAntiPatternUtils.hasAntiTerms(patternList)) {
	    // anti flag
	    TomName antiFlagName = tom_make_PositionName(tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_make_Name(ANTI_FLAG_NAME)),tom_empty_list_concTomNumber())));      
	    antiFlagVariable = tom_make_Variable(tom_cons_list_concOption(tom_make_OriginTracking(antiFlagName,0,""),tom_empty_list_concOption()),antiFlagName,antiFlagType,tom_empty_list_concConstraint())

;
	    TomAntiPatternTransformNew.initialize();      
	    // final test
	    Instruction finalTest = tom_make_If(tom_make_EqualTerm(antiFlagType,tom_make_Ref(antiFlagVariable),tom_make_ExpressionToTomTerm(tom_make_TrueTL())),actionInst,tom_make_Nop())


;
	    //LetAssign(antiFlagVariable,TrueTL(),Nop()));      
	    matchingAutomata = compiler.genSyntacticMatchingAutomata( finalTest, tom_make_Nop(), patternList,rootpath,moduleName,null);
	    // glue the flag declaration
	    matchingAutomata = tom_make_LetRef(antiFlagVariable,tom_make_TrueTL(),matchingAutomata);
	  } else {
	    matchingAutomata = compiler.genSyntacticMatchingAutomata(actionInst,tom_make_Nop(), patternList,rootpath,moduleName,null);
	  }
	  OptionList automataOptionList = tom_empty_list_concOption();
	  TomName label = compiler.getLabel(pa.getOption());
	  if(label != null) {
	    automataOptionList = tom_cons_list_concOption(tom_make_Label(label),tom_append_list_concOption(automataOptionList,tom_empty_list_concOption()));
	  }
	  TomNumberList numberList = tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_PatternNumber(actionNumber),tom_empty_list_concTomNumber()));
	  TomTerm automata = tom_make_Automata(automataOptionList,slotListToTomList(patternList),numberList,matchingAutomata);

	  automataList = append(automata,automataList);
	  tom_patternInstructionList= tom_patternInstructionList.getTailconcPatternInstruction();
	}

	/*
	 * return the compiled Match construction
	 */
	InstructionList astAutomataList = compiler.automataListCompileMatchingList(automataList);
	SlotList slots = tomListToSlotList(tom_l1);
	Instruction astAutomata = compiler.collectVariableFromSubjectList(slots,rootpath,tom_make_AbstractBlock(astAutomataList),moduleName);
	//           System.out.println("Matching compiled: " + `CompiledMatch(astAutomata, optionList));
	return tom_make_CompiledMatch(astAutomata,tom_optionList);
       } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_replace_compileMatching( TomKernelCompiler  t0) { return new replace_compileMatching(t0); }

 

  public TomTerm compileMatching(TomTerm subject) {
    try{
      return (TomTerm) tom_make_ChoiceTopDown(tom_make_replace_compileMatching(this)).visit(subject);
    } catch(VisitFailure e) {
      return subject;
    }
  }

    /*
     * collect match variables (from match(t1,...,tn))
     * create a list of declaration/assignment: v1=t1 ... vn=tn in body
     */
  private Instruction collectVariableFromSubjectList(SlotList subjectList, TomNumberList path, Instruction body, String moduleName) {
     if (tom_is_sort_SlotList(subjectList)) { { tom.engine.adt.tomslot.types.SlotList  tomMatch3Position1=(( tom.engine.adt.tomslot.types.SlotList )subjectList); if ( ( tom_is_fun_sym_concSlot(tomMatch3Position1) ||  false  ) ) { {int tomMatch3Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch3Position1List1=tomMatch3Position1; if (tom_is_empty_concSlot_SlotList(tomMatch3Position1List1)) { if ( true ) {
 return body;  } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch3Position1) ||  false  ) ) { {int tomMatch3Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch3Position1List1=tomMatch3Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch3Position1Save1=tomMatch3Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch3Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch3Position1Position1=tom_get_head_concSlot_SlotList(tomMatch3Position1List1);tomMatch3Position1Index1=tomMatch3Position1Index1 + 1;tomMatch3Position1List1=tom_get_tail_concSlot_SlotList(tomMatch3Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch3Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch3Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch3Position1Position1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch3Position1Position1); if ( ( tom_is_fun_sym_Variable(tomMatch3Position1Position1NameNumberAppl) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_option=tom_get_slot_Variable_Option(tomMatch3Position1Position1NameNumberAppl); { tom.engine.adt.tomtype.types.TomType  tom_variableType=tom_get_slot_Variable_AstType(tomMatch3Position1Position1NameNumberAppl); { tom.engine.adt.tomterm.types.TomTerm  tom_subjectVar=tomMatch3Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_tail=tomMatch3Position1List1; if ( true ) {

        body = collectVariableFromSubjectList(tom_tail,path,body,moduleName);
	TomNumberList newPath = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_slotName),tom_empty_list_concTomNumber()));
        TomTerm variable = tom_make_Variable(tom_option,tom_make_PositionName(newPath),tom_variableType,tom_empty_list_concConstraint());
        Expression source = tom_make_Cast(tom_variableType,tom_make_TomTermToExpression(tom_subjectVar));
          // the UnamedBlock encapsulation is needed for Caml
        Instruction let = tom_make_Let(variable,source,body);
        // Check that the matched variable has the correct type
        return tom_make_If(tom_make_IsSort(tom_variableType,tom_subjectVar),let,tom_make_Nop());
       } } } } } } } } } } }tomMatch3Position1List1=tomMatch3Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch3Position1) ||  false  ) ) { {int tomMatch3Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch3Position1List1=tomMatch3Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch3Position1Save1=tomMatch3Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch3Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch3Position1Position1=tom_get_head_concSlot_SlotList(tomMatch3Position1List1);tomMatch3Position1Index1=tomMatch3Position1Index1 + 1;tomMatch3Position1List1=tom_get_tail_concSlot_SlotList(tomMatch3Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch3Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch3Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch3Position1Position1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch3Position1Position1); {boolean tomNameNumberboolMatch3Position1Position1NameNumberAppl= false ; { tom.engine.adt.tomname.types.TomName  tomMatch3Position1Position1NameNumberApplNameNumberAstName= null ; if (tom_is_fun_sym_BuildTerm(tomMatch3Position1Position1NameNumberAppl)) {tomNameNumberboolMatch3Position1Position1NameNumberAppl= true ;tomMatch3Position1Position1NameNumberApplNameNumberAstName=tom_get_slot_BuildTerm_AstName(tomMatch3Position1Position1NameNumberAppl); } else { if (tom_is_fun_sym_FunctionCall(tomMatch3Position1Position1NameNumberAppl)) {tomNameNumberboolMatch3Position1Position1NameNumberAppl= true ;tomMatch3Position1Position1NameNumberApplNameNumberAstName=tom_get_slot_FunctionCall_AstName(tomMatch3Position1Position1NameNumberAppl); } else { if (tom_is_fun_sym_BuildConstant(tomMatch3Position1Position1NameNumberAppl)) {tomNameNumberboolMatch3Position1Position1NameNumberAppl= true ;tomMatch3Position1Position1NameNumberApplNameNumberAstName=tom_get_slot_BuildConstant_AstName(tomMatch3Position1Position1NameNumberAppl); } } } if (tomNameNumberboolMatch3Position1Position1NameNumberAppl) { if ( ( tom_is_fun_sym_Name(tomMatch3Position1Position1NameNumberApplNameNumberAstName) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch3Position1Position1NameNumberApplNameNumberAstName); { tom.engine.adt.tomterm.types.TomTerm  tom_subjectVar=tomMatch3Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_tail=tomMatch3Position1List1; if ( true ) {


        body = collectVariableFromSubjectList(tom_tail,path,body,moduleName);
        // ModuleName
        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_tomName);
	TomType tomType = tom_make_EmptyType();
	if(tomSymbol!=null) {
	  tomType = getSymbolCodomain(tomSymbol);
	} else if(tom_subjectVar.isFunctionCall()) {
	  tomType=tom_subjectVar.getAstType();
	}
	TomNumberList newPath = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_slotName),tom_empty_list_concTomNumber()));
        TomTerm variable = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(newPath),tomType,tom_empty_list_concConstraint());
        Expression source = tom_make_TomTermToExpression(tom_subjectVar);
        return tom_make_Let(variable,source,body);
       } } } } } } } } } } } } }tomMatch3Position1List1=tomMatch3Position1Save1; } } } } } } }

    throw new TomRuntimeException("collectVariableFromSubjectList: strange term: " + subjectList);
  }

  private InstructionList concatInstruction(Instruction i1, Instruction i2) {
     if (tom_is_sort_Instruction(i1)) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch4Position1=(( tom.engine.adt.tominstruction.types.Instruction )i1); if (tom_is_sort_Instruction(i2)) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch4Position2=(( tom.engine.adt.tominstruction.types.Instruction )i2); if ( ( tom_is_fun_sym_AbstractBlock(tomMatch4Position1) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_l1=tom_get_slot_AbstractBlock_InstList(tomMatch4Position1); if ( ( tom_is_fun_sym_AbstractBlock(tomMatch4Position2) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_l2=tom_get_slot_AbstractBlock_InstList(tomMatch4Position2); if ( true ) {
 return tom_append_list_concInstruction(tom_l1,tom_append_list_concInstruction(tom_l2,tom_empty_list_concInstruction()));  } } } } } if ( ( tom_is_fun_sym_AbstractBlock(tomMatch4Position1) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_l1=tom_get_slot_AbstractBlock_InstList(tomMatch4Position1); { tom.engine.adt.tominstruction.types.Instruction  tom_y=tomMatch4Position2; if ( true ) {
 return tom_append_list_concInstruction(tom_l1,tom_cons_list_concInstruction(tom_y,tom_empty_list_concInstruction()));  } } } } { tom.engine.adt.tominstruction.types.Instruction  tom_x=tomMatch4Position1; if ( ( tom_is_fun_sym_AbstractBlock(tomMatch4Position2) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_l2=tom_get_slot_AbstractBlock_InstList(tomMatch4Position2); if ( true ) {
 return tom_cons_list_concInstruction(tom_x,tom_append_list_concInstruction(tom_l2,tom_empty_list_concInstruction()));  } } } } } } } }

      return tom_cons_list_concInstruction(i1,tom_cons_list_concInstruction(i2,tom_empty_list_concInstruction()));
  }

    /*
     * build a list of instructions from a list of automata
     */
  private InstructionList automataListCompileMatchingList(TomList automataList) {
     if (tom_is_sort_TomList(automataList)) { { tom.engine.adt.tomterm.types.TomList  tomMatch5Position1=(( tom.engine.adt.tomterm.types.TomList )automataList); if ( ( tom_is_fun_sym_concTomTerm(tomMatch5Position1) ||  false  ) ) { {int tomMatch5Position1Index1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch5Position1List1=tomMatch5Position1; if (tom_is_empty_concTomTerm_TomList(tomMatch5Position1List1)) { if ( true ) {
 return tom_empty_list_concInstruction();  } } } } } if ( ( tom_is_fun_sym_concTomTerm(tomMatch5Position1) ||  false  ) ) { {int tomMatch5Position1Index1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch5Position1List1=tomMatch5Position1; { tom.engine.adt.tomterm.types.TomList  tomMatch5Position1Save1=tomMatch5Position1List1; { if (!(tom_is_empty_concTomTerm_TomList(tomMatch5Position1List1))) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1Position1=tom_get_head_concTomTerm_TomList(tomMatch5Position1List1);tomMatch5Position1Index1=tomMatch5Position1Index1 + 1;tomMatch5Position1List1=tom_get_tail_concTomTerm_TomList(tomMatch5Position1List1); if ( ( tom_is_fun_sym_Automata(tomMatch5Position1Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_optionList=tom_get_slot_Automata_Option(tomMatch5Position1Position1); { tom.engine.adt.tomterm.types.TomList  tom_patternList=tom_get_slot_Automata_PatternList(tomMatch5Position1Position1); { tom.engine.adt.tominstruction.types.Instruction  tom_instruction=tom_get_slot_Automata_Inst(tomMatch5Position1Position1); { tom.engine.adt.tomterm.types.TomList  tom_l=tomMatch5Position1List1; if ( true ) {

        InstructionList newList = automataListCompileMatchingList(tom_l);
        if(getLabel(tom_optionList) != null) {
            /*
             * if a label is assigned to a pattern (label:pattern -> action)
             * we generate corresponding labeled-block
             */
          tom_instruction= tom_make_NamedBlock(getLabel(tom_optionList).getString(),tom_cons_list_concInstruction(tom_instruction,tom_empty_list_concInstruction()))
;
                     
        }
        return tom_cons_list_concInstruction(tom_make_CompiledPattern(tom_patternList,tom_instruction),tom_append_list_concInstruction(newList,tom_empty_list_concInstruction()));
       } } } } } } } }tomMatch5Position1List1=tomMatch5Position1Save1; } } } } } } }

    return null;
  }

    /*
     * ------------------------------------------------------------
     * Generate a matching automaton
     * ------------------------------------------------------------
     */
  
    /*
     * given a pattern, this function generates the discrimination test on the root symbol
     * and recursively calls the algorithm on subterms
     */
  Instruction genSyntacticMatchingAutomata(Instruction action,
                                           Instruction elseAction,	
                                           SlotList termList,
                                           TomNumberList rootpath,
                                           String moduleName,
					   TomTerm subject) {
     if (tom_is_sort_SlotList(termList)) { { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1=(( tom.engine.adt.tomslot.types.SlotList )termList); if ( ( tom_is_fun_sym_concSlot(tomMatch6Position1) ||  false  ) ) { {int tomMatch6Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1List1=tomMatch6Position1; if (tom_is_empty_concSlot_SlotList(tomMatch6Position1List1)) { if ( true ) {
    	  
	return action;        
       } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch6Position1) ||  false  ) ) { {int tomMatch6Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1List1=tomMatch6Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1Save1=tomMatch6Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch6Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch6Position1Position1=tom_get_head_concSlot_SlotList(tomMatch6Position1List1);tomMatch6Position1Index1=tomMatch6Position1Index1 + 1;tomMatch6Position1List1=tom_get_tail_concSlot_SlotList(tomMatch6Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch6Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch6Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch6Position1Position1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch6Position1Position1); {boolean tomNameNumberboolMatch6Position1Position1NameNumberAppl= false ; { tom.engine.adt.tomtype.types.TomType  tomMatch6Position1Position1NameNumberApplNameNumberAstType= null ; if (tom_is_fun_sym_Variable(tomMatch6Position1Position1NameNumberAppl)) {tomNameNumberboolMatch6Position1Position1NameNumberAppl= true ;tomMatch6Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_Variable_AstType(tomMatch6Position1Position1NameNumberAppl); } else { if (tom_is_fun_sym_UnamedVariable(tomMatch6Position1Position1NameNumberAppl)) {tomNameNumberboolMatch6Position1Position1NameNumberAppl= true ;tomMatch6Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_UnamedVariable_AstType(tomMatch6Position1Position1NameNumberAppl); } } if (tomNameNumberboolMatch6Position1Position1NameNumberAppl) { { tom.engine.adt.tomtype.types.TomType  tom_termType=tomMatch6Position1Position1NameNumberApplNameNumberAstType; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch6Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch6Position1List1; if ( true ) {

        
	Instruction subAction = genSyntacticMatchingAutomata(action,elseAction,tom_termTail,rootpath,moduleName,subject);       

	Expression source = null;
	if(subject !=null) {
	  source = tom_make_TomTermToExpression(subject);        	
	} else {
	  TomNumberList path  = tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_slotName),tom_empty_list_concTomNumber()));
	  source = tom_make_TomTermToExpression(tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(path),tom_termType,tom_empty_list_concConstraint()));
	}
	return buildLet(tom_var, source, rootpath, subAction, elseAction, moduleName);
       } } } } } } } } } } } }tomMatch6Position1List1=tomMatch6Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch6Position1) ||  false  ) ) { {int tomMatch6Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1List1=tomMatch6Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1Save1=tomMatch6Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch6Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch6Position1Position1=tom_get_head_concSlot_SlotList(tomMatch6Position1List1);tomMatch6Position1Index1=tomMatch6Position1Index1 + 1;tomMatch6Position1List1=tom_get_tail_concSlot_SlotList(tomMatch6Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch6Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch6Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch6Position1Position1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch6Position1Position1); if ( ( tom_is_fun_sym_AntiTerm(tomMatch6Position1Position1NameNumberAppl) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch6Position1Position1NameNumberApplNameNumberTomTerm=tom_get_slot_AntiTerm_TomTerm(tomMatch6Position1Position1NameNumberAppl); if ( ( tom_is_fun_sym_Variable(tomMatch6Position1Position1NameNumberApplNameNumberTomTerm) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberAstName=tom_get_slot_Variable_AstName(tomMatch6Position1Position1NameNumberApplNameNumberTomTerm); { tom.engine.adt.tomoption.types.OptionList  tom_option=tom_get_slot_Variable_Option(tomMatch6Position1Position1NameNumberApplNameNumberTomTerm); if ( ( tom_is_fun_sym_Name(tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberAstName); if ( true ) {


	OriginTracking or = (OriginTracking)tom_option.getHeadconcOption();     	
	// this will generate directly false
	Logger.getLogger(getClass().getName()).log( 
	    new PlatformLogRecord(Level.WARNING, TomMessage.noCodeGeneration, new Object[]{("!" + tom_name)},
	      or.getFileName(), or.getLine()));
	return tom_make_Nop();		  
       } } } } } } } } } } } } }tomMatch6Position1List1=tomMatch6Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch6Position1) ||  false  ) ) { {int tomMatch6Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1List1=tomMatch6Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1Save1=tomMatch6Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch6Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch6Position1Position1=tom_get_head_concSlot_SlotList(tomMatch6Position1List1);tomMatch6Position1Index1=tomMatch6Position1Index1 + 1;tomMatch6Position1List1=tom_get_tail_concSlot_SlotList(tomMatch6Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch6Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch6Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch6Position1Position1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch6Position1Position1); if ( ( tom_is_fun_sym_AntiTerm(tomMatch6Position1Position1NameNumberAppl) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch6Position1Position1NameNumberApplNameNumberTomTerm=tom_get_slot_AntiTerm_TomTerm(tomMatch6Position1Position1NameNumberAppl); if ( ( tom_is_fun_sym_RecordAppl(tomMatch6Position1Position1NameNumberApplNameNumberTomTerm) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch6Position1Position1NameNumberApplNameNumberTomTerm); if ( ( tom_is_fun_sym_concTomName(tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameList) ||  false  ) ) { {int tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListList1=tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListSave1=tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListList1);tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListIndex1=tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListIndex1 + 1;tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListPosition1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_currentTerm=tomMatch6Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch6Position1List1; if ( true ) {




	// transform term to eliminate anti
	TomTerm transformedTerm = TomAntiPatternTransformNew.getConstrainedTerm(
	    tom_currentTerm,getSymbolTable(moduleName));                   	 
	// recursive call with the transformed term                            	 
	return genSyntacticMatchingAutomata(action,elseAction,tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_slotName,transformedTerm),tom_append_list_concSlot(tom_termTail,tom_empty_list_concSlot()))
,rootpath,moduleName,subject);                            	 
       } } } } } }tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListList1=tomMatch6Position1Position1NameNumberApplNameNumberTomTermNameNumberNameListSave1; } } } } } } } } } } } } } }tomMatch6Position1List1=tomMatch6Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch6Position1) ||  false  ) ) { {int tomMatch6Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1List1=tomMatch6Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch6Position1Save1=tomMatch6Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch6Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch6Position1Position1=tom_get_head_concSlot_SlotList(tomMatch6Position1List1);tomMatch6Position1Index1=tomMatch6Position1Index1 + 1;tomMatch6Position1List1=tom_get_tail_concSlot_SlotList(tomMatch6Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch6Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch6Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch6Position1Position1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch6Position1Position1); if ( ( tom_is_fun_sym_RecordAppl(tomMatch6Position1Position1NameNumberAppl) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch6Position1Position1NameNumberApplNameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch6Position1Position1NameNumberAppl); { tom.engine.adt.tomoption.types.OptionList  tom_optionList=tom_get_slot_RecordAppl_Option(tomMatch6Position1Position1NameNumberAppl); if ( ( tom_is_fun_sym_concTomName(tomMatch6Position1Position1NameNumberApplNameNumberNameList) ||  false  ) ) { {int tomMatch6Position1Position1NameNumberApplNameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch6Position1Position1NameNumberApplNameNumberNameListList1=tomMatch6Position1Position1NameNumberApplNameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch6Position1Position1NameNumberApplNameNumberNameListSave1=tomMatch6Position1Position1NameNumberApplNameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch6Position1Position1NameNumberApplNameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tom_headName=tom_get_head_concTomName_TomNameList(tomMatch6Position1Position1NameNumberApplNameNumberNameListList1);tomMatch6Position1Position1NameNumberApplNameNumberNameListIndex1=tomMatch6Position1Position1NameNumberApplNameNumberNameListIndex1 + 1;tomMatch6Position1Position1NameNumberApplNameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch6Position1Position1NameNumberApplNameNumberNameListList1); { tom.engine.adt.tomname.types.TomNameList  tom_nameList=tomMatch6Position1Position1NameNumberApplNameNumberNameList; { tom.engine.adt.tomslot.types.SlotList  tom_termArgs=tom_get_slot_RecordAppl_Slots(tomMatch6Position1Position1NameNumberAppl); { tom.engine.adt.tomterm.types.TomTerm  tom_currentTerm=tomMatch6Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch6Position1List1; if ( true ) {




	// handle the case when the head symbol has a negation
	String tomName = null;
	if((tom_headName) instanceof AntiName) {
	  tomName = ((AntiName)tom_headName).getName().getString();
	} else {
	  tomName = ((Name)tom_headName).getString();
	}                                        	  
	// if the termList contains antipatterns then the term should  
	// be transformed - do not look for anti in the constraints
	if(TomAntiPatternUtils.hasAntiTerms(tom_currentTerm.setConstraints(tom_empty_list_concConstraint()))) {
	  // transform term to eliminate anti
	  TomTerm transformedTerm = TomAntiPatternTransformNew.getConstrainedTerm(
	      tom_currentTerm,getSymbolTable(moduleName));
	  // recursive call with the transformed term
	  return genSyntacticMatchingAutomata(action,elseAction,tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_slotName,transformedTerm),tom_append_list_concSlot(tom_termTail,tom_empty_list_concSlot()))
,rootpath,moduleName,subject);
	}                                       	  

	// recursively call the algorithm on termTail
	Instruction subAction = genSyntacticMatchingAutomata(action,elseAction,tom_termTail,rootpath,moduleName,subject);        

	// find the codomain of (f|g) [* should be the same *]
	TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tomName);
	TomType codomain = tomSymbol.getTypesToType().getCodomain();

	// perform the compilation, according to 3 cases:
	// - (f|g) is a list operator
	// - (f|g) is an array operator
	// - (f|g) is a syntactic operator
	TomNumberList path  = tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_slotName),tom_empty_list_concTomNumber()));
	TomTerm subjectVariableAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(path),codomain,tom_empty_list_concConstraint());

	// if we have a subject, use that one
	if(subject != null) {
	  subjectVariableAST = subject;
	}        
	// handle the constraints        
	Instruction constraintAutomata = compileConstraint(tom_currentTerm,tom_make_TomTermToExpression(subjectVariableAST),path,subAction,elseAction,moduleName);
	Instruction automataInstruction;
	if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
	  int indexSubterm = 1;
	  TomNumberList newPathList = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_ListNumber(indexSubterm),tom_empty_list_concTomNumber()));
	  TomNumberList newPathIndex = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_IndexNumber(indexSubterm),tom_empty_list_concTomNumber()));
	  TomTerm newVariableListAST = tom_make_VariableStar(tom_empty_list_concOption(),tom_make_PositionName(newPathList),codomain,tom_empty_list_concConstraint());
	  TomTerm newVariableIndexAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(newPathIndex),getSymbolTable(moduleName).getIntType(),tom_empty_list_concConstraint());
	  boolean ensureNotEmptyList = true;
	  MatchingParameter p = new MatchingParameter(tomSymbol,path,constraintAutomata,elseAction,newVariableListAST,newVariableIndexAST,tom_optionList);
	  Instruction automata = (isListOperator(tomSymbol))?
	    // case: list operator
	    genListMatchingAutomata(p,tom_termArgs, indexSubterm, ensureNotEmptyList, moduleName):
	    // case: array operator
	    genArrayMatchingAutomata(p, tom_termArgs, indexSubterm, ensureNotEmptyList,moduleName);
	  automataInstruction = tom_make_LetRef(newVariableListAST,tom_make_TomTermToExpression(subjectVariableAST),automata);
	  Expression glZero = tom_make_TomTermToExpression(tom_make_TargetLanguageToTomTerm(tom_make_ITL("0")));
	  automataInstruction = tom_make_LetRef(newVariableIndexAST,glZero,automataInstruction);
	} else {
	  // case: syntactic operator
	  Instruction automata = genSyntacticMatchingAutomata(constraintAutomata,elseAction,tom_termArgs,path,moduleName,null);        
	  // if there is no disjunction or no arguments
	  if(tom_nameList.length()==1 || tom_termArgs.isEmptyconcSlot()) {        	  
	    automataInstruction = collectSubtermFromTomSymbol(tom_termArgs,tomSymbol,subjectVariableAST,path,automata,moduleName);        	  
	  } else {        	  
	    automataInstruction = collectSubtermFromSubjectList(tom_currentTerm,subjectVariableAST,path,automata,moduleName);
	    return automataInstruction;
	  }
	}
	// generate is_fsym(t,f) || is_fsym(t,g)
	Expression cond = expandDisjunction(tom_make_EqualFunctionSymbol(codomain,subjectVariableAST,tom_currentTerm),moduleName);
	return tom_make_If(cond,automataInstruction,elseAction);
       } } } } } } }tomMatch6Position1Position1NameNumberApplNameNumberNameListList1=tomMatch6Position1Position1NameNumberApplNameNumberNameListSave1; } } } } } } } } } } } } }tomMatch6Position1List1=tomMatch6Position1Save1; } } } } } } }
 // end match
    System.out.println("GenSyntacticMatchingAutomata strange term: " + termList);
    throw new TomRuntimeException("GenSyntacticMatchingAutomata strange term: " + termList);
  }
  
    /*
     * function which compiles list-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  Instruction genListMatchingAutomata(MatchingParameter p,
                                      SlotList termList,
                                      int indexTerm,
                                      boolean ensureNotEmptyList,
                                      String moduleName) {
     if (tom_is_sort_SlotList(termList)) { { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1=(( tom.engine.adt.tomslot.types.SlotList )termList); if ( ( tom_is_fun_sym_concSlot(tomMatch7Position1) ||  false  ) ) { {int tomMatch7Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1List1=tomMatch7Position1; if (tom_is_empty_concSlot_SlotList(tomMatch7Position1List1)) { if ( true ) {

          /*
           * nothing to compile
           * just check that the subject is empty
           */
        return genCheckEmptyList(p.symbol,p.subjectListName,p.action,tom_make_Nop());
       } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch7Position1) ||  false  ) ) { {int tomMatch7Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1List1=tomMatch7Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1Save1=tomMatch7Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch7Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch7Position1Position1=tom_get_head_concSlot_SlotList(tomMatch7Position1List1);tomMatch7Position1Index1=tomMatch7Position1Index1 + 1;tomMatch7Position1List1=tom_get_tail_concSlot_SlotList(tomMatch7Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch7Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch7Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch7Position1Position1); {boolean tomNameNumberboolMatch7Position1Position1NameNumberAppl= false ; { tom.engine.adt.tomtype.types.TomType  tomMatch7Position1Position1NameNumberApplNameNumberAstType= null ; if (tom_is_fun_sym_Variable(tomMatch7Position1Position1NameNumberAppl)) {tomNameNumberboolMatch7Position1Position1NameNumberAppl= true ;tomMatch7Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_Variable_AstType(tomMatch7Position1Position1NameNumberAppl); } else { if (tom_is_fun_sym_UnamedVariable(tomMatch7Position1Position1NameNumberAppl)) {tomNameNumberboolMatch7Position1Position1NameNumberAppl= true ;tomMatch7Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_UnamedVariable_AstType(tomMatch7Position1Position1NameNumberAppl); } } if (tomNameNumberboolMatch7Position1Position1NameNumberAppl) { { tom.engine.adt.tomtype.types.TomType  tom_termType=tomMatch7Position1Position1NameNumberApplNameNumberAstType; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch7Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch7Position1List1; if ( true ) {


          /*
           * get an element and store it
           */
        Instruction subAction = genListMatchingAutomata(p,tom_termTail,indexTerm+1,true,moduleName);
        return genGetElementList(p, indexTerm, tom_var, tom_termType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } } } } } }tomMatch7Position1List1=tomMatch7Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch7Position1) ||  false  ) ) { {int tomMatch7Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1List1=tomMatch7Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1Save1=tomMatch7Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch7Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch7Position1Position1=tom_get_head_concSlot_SlotList(tomMatch7Position1List1);tomMatch7Position1Index1=tomMatch7Position1Index1 + 1;tomMatch7Position1List1=tom_get_tail_concSlot_SlotList(tomMatch7Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch7Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch7Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch7Position1Position1); if ( ( tom_is_fun_sym_RecordAppl(tomMatch7Position1Position1NameNumberAppl) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch7Position1Position1NameNumberApplNameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch7Position1Position1NameNumberAppl); if ( ( tom_is_fun_sym_concTomName(tomMatch7Position1Position1NameNumberApplNameNumberNameList) ||  false  ) ) { {int tomMatch7Position1Position1NameNumberApplNameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch7Position1Position1NameNumberApplNameNumberNameListList1=tomMatch7Position1Position1NameNumberApplNameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch7Position1Position1NameNumberApplNameNumberNameListSave1=tomMatch7Position1Position1NameNumberApplNameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch7Position1Position1NameNumberApplNameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch7Position1Position1NameNumberApplNameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch7Position1Position1NameNumberApplNameNumberNameListList1);tomMatch7Position1Position1NameNumberApplNameNumberNameListIndex1=tomMatch7Position1Position1NameNumberApplNameNumberNameListIndex1 + 1;tomMatch7Position1Position1NameNumberApplNameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch7Position1Position1NameNumberApplNameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch7Position1Position1NameNumberApplNameNumberNameListPosition1) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch7Position1Position1NameNumberApplNameNumberNameListPosition1); { tom.engine.adt.tomterm.types.TomTerm  tom_term=tomMatch7Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch7Position1List1; if ( true ) {


          /*
           * get an element and perform syntactic matching
           */
        Instruction subAction = genListMatchingAutomata(p,tom_termTail,indexTerm+1,true,moduleName);

        TomName slotName = tom_make_PositionName(tom_cons_list_concTomNumber(tom_make_Position(indexTerm),tom_empty_list_concTomNumber()));
        subAction = genSyntacticMatchingAutomata(subAction,p.elseAction,tom_cons_list_concSlot(tom_make_PairSlotAppl(slotName,tom_term),tom_empty_list_concSlot()),p.path,moduleName,null);
        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_tomName);
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        TomNumberList newPath = appendNumber(indexTerm,p.path);
        TomTerm var = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(newPath),termType,tom_empty_list_concConstraint());
        return genGetElementList(p, indexTerm, var, termType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } }tomMatch7Position1Position1NameNumberApplNameNumberNameListList1=tomMatch7Position1Position1NameNumberApplNameNumberNameListSave1; } } } } } } } } } } }tomMatch7Position1List1=tomMatch7Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch7Position1) ||  false  ) ) { {int tomMatch7Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1List1=tomMatch7Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch7Position1Save1=tomMatch7Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch7Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch7Position1Position1=tom_get_head_concSlot_SlotList(tomMatch7Position1List1);tomMatch7Position1Index1=tomMatch7Position1Index1 + 1;tomMatch7Position1List1=tom_get_tail_concSlot_SlotList(tomMatch7Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch7Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch7Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch7Position1Position1); {boolean tomNameNumberboolMatch7Position1Position1NameNumberAppl= false ; { tom.engine.adt.tomtype.types.TomType  tomMatch7Position1Position1NameNumberApplNameNumberAstType= null ; if (tom_is_fun_sym_VariableStar(tomMatch7Position1Position1NameNumberAppl)) {tomNameNumberboolMatch7Position1Position1NameNumberAppl= true ;tomMatch7Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_VariableStar_AstType(tomMatch7Position1Position1NameNumberAppl); } else { if (tom_is_fun_sym_UnamedVariableStar(tomMatch7Position1Position1NameNumberAppl)) {tomNameNumberboolMatch7Position1Position1NameNumberAppl= true ;tomMatch7Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_UnamedVariableStar_AstType(tomMatch7Position1Position1NameNumberAppl); } } if (tomNameNumberboolMatch7Position1Position1NameNumberAppl) { { tom.engine.adt.tomtype.types.TomType  tom_termType=tomMatch7Position1Position1NameNumberApplNameNumberAstType; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch7Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch7Position1List1; if ( true ) {


          /*
           * 3 cases:
           * - tail = emptyList
           * - tail = only VariableStar or UnamedVariableStar
           * - tail = other
           */
        if(tom_termTail.isEmptyconcSlot()) {
            /*
             * generate:
             * ---------
             * Let E_n = subjectList;
             * ...
             */
          Expression source = tom_make_TomTermToExpression(tom_make_Ref(p.subjectListName));
          return buildLet(tom_var, source, p.path, p.action, p.elseAction, moduleName);
        } else {
            /*
             * generate:
             * ---------
             * Let begin_i = subjectList;
             * LetRef end_i   = subjectList;
             * ...
             */
          Instruction subAction = genListMatchingAutomata(p,tom_termTail,indexTerm+1,false,moduleName);
	  TomNumberList ppath = p.path;
          TomNumberList pathBegin = tom_append_list_concTomNumber(ppath,tom_cons_list_concTomNumber(tom_make_Begin(indexTerm),tom_empty_list_concTomNumber()));
          TomNumberList pathEnd = tom_append_list_concTomNumber(ppath,tom_cons_list_concTomNumber(tom_make_End(indexTerm),tom_empty_list_concTomNumber()));
          TomTerm variableBeginAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(pathBegin),tom_termType,tom_empty_list_concConstraint());
          TomTerm variableEndAST   = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(pathEnd),tom_termType,tom_empty_list_concConstraint());

          Expression source = tom_make_GetSliceList(p.symbol.getAstName(),variableBeginAST,tom_make_Ref(variableEndAST));
          Instruction let = buildLet(tom_var, source, p.path, subAction, p.elseAction, moduleName);
          Instruction tailExp = tom_make_Assign(variableEndAST,genGetTail(p.symbol,tom_make_Ref(variableEndAST)));
          Instruction loop;
          if(containOnlyVariableStar(tom_termTail)) {
              /*
               * do {
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
               *   ...
               *   if(IS_EMPTY_TomList(end_i) )
               *     end_i = begin_i
               *   else *** use this impossible value to indicate the end of the loop ***
               *     end_i = (TomList) GET_TAIL_TomList(end_i);
               *   subjectList = end_i;
               * } while( end_i != begin_i )  
               * *** subjectList is reseted to begin_i when the loop stops
               */
            Instruction stopIter = tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(variableBeginAST));
            Instruction assign1 = genCheckEmptyList(p.symbol,tom_make_Ref(variableEndAST),stopIter,tailExp);
            Instruction assign2 = tom_make_Assign(p.subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)));
            loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_cons_list_concInstruction(assign2,tom_empty_list_concInstruction())))),tom_make_Negation(tom_make_EqualTerm(tom_termType,tom_make_Ref(variableEndAST),variableBeginAST)))

;
          } else {
              /*
               * case (X*,y,...)
               * no longer necessary to check if the list is not empty
               * to extract the 'y'
               */
            
              /*
               * while( !IS_EMPTY_TomList(end_i) ) {
               *   subjectList = end_i;
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
               *   ...
               *   end_i = (TomList) GET_TAIL_TomList(end_i);
               * }
               * subjectList = begin_i 
               */

            Instruction assign1 = tailExp;
            Instruction letAssign = tom_make_LetAssign(p.subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_empty_list_concInstruction()))));
            loop = tom_make_WhileDo(tom_make_Negation(genIsEmptyList(p.symbol,tom_make_Ref(variableEndAST))),letAssign);
            loop = tom_make_UnamedBlock(tom_cons_list_concInstruction(loop,tom_cons_list_concInstruction(tom_make_LetAssign(p.subjectListName,tom_make_TomTermToExpression(variableBeginAST),tom_make_Nop()),tom_empty_list_concInstruction())));
          }

          Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListName)),loop)

;
          Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListName)),letEnd)

;
          return letBegin;
        }
       } } } } } } } } } } }tomMatch7Position1List1=tomMatch7Position1Save1; } } } } } } }

    System.out.println("GenListMatchingAutomata strange termList: " + termList);
    throw new TomRuntimeException("GenListMatchingAutomata strange termList: " + termList);
  }

  private boolean containOnlyVariableStar(SlotList termList) {
     if (tom_is_sort_SlotList(termList)) { {boolean tomMatch8NameNumbertom_anti_constraints_status= true ; { tom.engine.adt.tomslot.types.SlotList  _tom_fresh_var_0=(( tom.engine.adt.tomslot.types.SlotList )termList); { if ( ( tom_is_fun_sym_concSlot(_tom_fresh_var_0) ||  false  ) ) { {int tomMatch9NameNumberANTIIndex1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch9NameNumberANTIList1=_tom_fresh_var_0; { tom.engine.adt.tomslot.types.SlotList  tomMatch9NameNumberANTIBegin1=tomMatch9NameNumberANTIList1; { tom.engine.adt.tomslot.types.SlotList  tomMatch9NameNumberANTIEnd1=tomMatch9NameNumberANTIList1; { while (!(tom_is_empty_concSlot_SlotList(tomMatch9NameNumberANTIEnd1))) {tomMatch9NameNumberANTIList1=tomMatch9NameNumberANTIEnd1; { { tom.engine.adt.tomslot.types.SlotList  tomMatch9NameNumberANTISave2=tomMatch9NameNumberANTIList1; { { tom.engine.adt.tomslot.types.Slot  _tom_fresh_var_2=tom_get_head_concSlot_SlotList(tomMatch9NameNumberANTIList1);tomMatch9NameNumberANTIIndex1=tomMatch9NameNumberANTIIndex1 + 1;tomMatch9NameNumberANTIList1=tom_get_tail_concSlot_SlotList(tomMatch9NameNumberANTIList1); { if ( ( tom_is_fun_sym_PairSlotAppl(_tom_fresh_var_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch10NameNumberANTINameNumberAppl=tom_get_slot_PairSlotAppl_Appl(_tom_fresh_var_2); if ( ( tom_is_fun_sym_UnamedVariableStar(tomMatch10NameNumberANTINameNumberAppl) ||  ( tom_is_fun_sym_VariableStar(tomMatch10NameNumberANTINameNumberAppl) ||  false  )  ) ) {tomMatch8NameNumbertom_anti_constraints_status= (  true  && tomMatch8NameNumbertom_anti_constraints_status ) ; } else {tomMatch8NameNumbertom_anti_constraints_status= (  false  && tomMatch8NameNumbertom_anti_constraints_status ) ; } } } else {tomMatch8NameNumbertom_anti_constraints_status= (  false  && tomMatch8NameNumbertom_anti_constraints_status ) ; } } }tomMatch9NameNumberANTIList1=tomMatch9NameNumberANTISave2; } }tomMatch9NameNumberANTIEnd1=tom_get_tail_concSlot_SlotList(tomMatch9NameNumberANTIEnd1); } }tomMatch9NameNumberANTIList1=tomMatch9NameNumberANTIBegin1; } } } } } } else {tomMatch8NameNumbertom_anti_constraints_status= (  true  && tomMatch8NameNumbertom_anti_constraints_status ) ; } if ((tomMatch8NameNumbertom_anti_constraints_status ==  true )) { if ( true ) {

    	  return true;
       } }tomMatch8NameNumbertom_anti_constraints_status= true ; } } } }

    return false;
  }

  
  private Instruction genCheckEmptyList(TomSymbol tomSymbol, TomTerm subjectListName,
                                        Instruction succes, Instruction failure) {
      /*
       * generate:
       * ---------
       * if(IS_EMPTY_TomList(subjectList)) {
       *   ...
       * }
       */
    return tom_make_If(genIsEmptyList(tomSymbol,tom_make_Ref(subjectListName)),succes,failure);
  }

  private Instruction genGetElementList(MatchingParameter p, int indexTerm, TomTerm var,
      TomType termType, Instruction subAction, boolean notEmptyList, String moduleName) {
      /*
       * generate:
       * ---------
       * Let save_i = subjectList
       * if(!IS_EMPTY_TomList(subjectList)) {
       *   Let _var_index = _var_index + 1
       *   Let TomTerm var = (TomTerm) GET_HEAD_TomList(subjectList);
       *   subjectList = (TomList) GET_TAIL_TomList(subjectList);
       *   ...
       * }
       * subjectList = save_i;
       */

    Instruction body = tom_make_LetAssign(p.subjectListName,genGetTail(p.symbol,tom_make_Ref(p.subjectListName)),subAction);
    // compute the index position 
    body = tom_make_LetAssign(p.subjectListIndex,tom_make_AddOne(tom_make_Ref(p.subjectListIndex)),body);
    Expression source = genGetHead(p.symbol,termType,tom_make_Ref(p.subjectListName));
    Instruction let = buildLet(var, source, p.path, body, tom_make_Nop(), moduleName);
    if(notEmptyList) {
      let = genCheckEmptyList(p.symbol,p.subjectListName,tom_make_Nop(),let);
    }

    TomNumberList ppath = p.path;
    TomNumberList pathSave = tom_append_list_concTomNumber(ppath,tom_cons_list_concTomNumber(tom_make_Save(indexTerm),tom_empty_list_concTomNumber()));
    TomType listType = p.symbol.getTypesToType().getCodomain();
    TomTerm variableSaveAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(pathSave),listType,tom_empty_list_concConstraint());
    Instruction letRestore = tom_make_Assign(p.subjectListName,tom_make_TomTermToExpression(variableSaveAST));
    Instruction letSave = tom_make_Let(variableSaveAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListName)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(letRestore,tom_empty_list_concInstruction()))));
    return letSave;
  }
 
  /*
   * return the head of the list
   */ 
  private Expression genGetHead(TomSymbol tomSymbol, TomType type, TomTerm var) {
    TomName opNameAST = tomSymbol.getAstName();
    return tom_make_GetHead(opNameAST,type,var);
  }

  /*
   * return the tail of the list
   */ 
  private Expression genGetTail(TomSymbol tomSymbol, TomTerm var) {
    TomName opNameAST = tomSymbol.getAstName();
    return tom_make_GetTail(opNameAST,var);
  }

  private Expression genIsEmptyList(TomSymbol tomSymbol, TomTerm var) {
    TomName opNameAST = tomSymbol.getAstName();
    return tom_make_IsEmptyList(opNameAST,var);
  }

    /*
     * function which compiles array-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  Instruction genArrayMatchingAutomata(MatchingParameter p,
                                       SlotList termList,
                                       int indexTerm,
                                       boolean ensureNotEmptyList,
                                       String moduleName) {
     if (tom_is_sort_SlotList(termList)) { { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1=(( tom.engine.adt.tomslot.types.SlotList )termList); if ( ( tom_is_fun_sym_concSlot(tomMatch11Position1) ||  false  ) ) { {int tomMatch11Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1List1=tomMatch11Position1; if (tom_is_empty_concSlot_SlotList(tomMatch11Position1List1)) { if ( true ) {

          /*
           * nothing to compile
           * just check that the subject is empty
           */
        return genIsEmptyArray(p.symbol,p.subjectListName,p.subjectListIndex,p.action,tom_make_Nop());
       } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch11Position1) ||  false  ) ) { {int tomMatch11Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1List1=tomMatch11Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1Save1=tomMatch11Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch11Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch11Position1Position1=tom_get_head_concSlot_SlotList(tomMatch11Position1List1);tomMatch11Position1Index1=tomMatch11Position1Index1 + 1;tomMatch11Position1List1=tom_get_tail_concSlot_SlotList(tomMatch11Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch11Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch11Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch11Position1Position1); {boolean tomNameNumberboolMatch11Position1Position1NameNumberAppl= false ; { tom.engine.adt.tomtype.types.TomType  tomMatch11Position1Position1NameNumberApplNameNumberAstType= null ; if (tom_is_fun_sym_Variable(tomMatch11Position1Position1NameNumberAppl)) {tomNameNumberboolMatch11Position1Position1NameNumberAppl= true ;tomMatch11Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_Variable_AstType(tomMatch11Position1Position1NameNumberAppl); } else { if (tom_is_fun_sym_UnamedVariable(tomMatch11Position1Position1NameNumberAppl)) {tomNameNumberboolMatch11Position1Position1NameNumberAppl= true ;tomMatch11Position1Position1NameNumberApplNameNumberAstType=tom_get_slot_UnamedVariable_AstType(tomMatch11Position1Position1NameNumberAppl); } } if (tomNameNumberboolMatch11Position1Position1NameNumberAppl) { { tom.engine.adt.tomtype.types.TomType  tom_termType=tomMatch11Position1Position1NameNumberApplNameNumberAstType; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch11Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch11Position1List1; if ( true ) {


          /*
           * get an element and store it
           */
        Instruction subAction = genArrayMatchingAutomata(p,tom_termTail,indexTerm+1,true,moduleName);
        return genGetElementArray(p,indexTerm, tom_var, tom_termType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } } } } } }tomMatch11Position1List1=tomMatch11Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch11Position1) ||  false  ) ) { {int tomMatch11Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1List1=tomMatch11Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1Save1=tomMatch11Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch11Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch11Position1Position1=tom_get_head_concSlot_SlotList(tomMatch11Position1List1);tomMatch11Position1Index1=tomMatch11Position1Index1 + 1;tomMatch11Position1List1=tom_get_tail_concSlot_SlotList(tomMatch11Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch11Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch11Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch11Position1Position1); if ( ( tom_is_fun_sym_RecordAppl(tomMatch11Position1Position1NameNumberAppl) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch11Position1Position1NameNumberApplNameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch11Position1Position1NameNumberAppl); if ( ( tom_is_fun_sym_concTomName(tomMatch11Position1Position1NameNumberApplNameNumberNameList) ||  false  ) ) { {int tomMatch11Position1Position1NameNumberApplNameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch11Position1Position1NameNumberApplNameNumberNameListList1=tomMatch11Position1Position1NameNumberApplNameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch11Position1Position1NameNumberApplNameNumberNameListSave1=tomMatch11Position1Position1NameNumberApplNameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch11Position1Position1NameNumberApplNameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch11Position1Position1NameNumberApplNameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch11Position1Position1NameNumberApplNameNumberNameListList1);tomMatch11Position1Position1NameNumberApplNameNumberNameListIndex1=tomMatch11Position1Position1NameNumberApplNameNumberNameListIndex1 + 1;tomMatch11Position1Position1NameNumberApplNameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch11Position1Position1NameNumberApplNameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch11Position1Position1NameNumberApplNameNumberNameListPosition1) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch11Position1Position1NameNumberApplNameNumberNameListPosition1); { tom.engine.adt.tomterm.types.TomTerm  tom_term=tomMatch11Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch11Position1List1; if ( true ) {


          /*
           * get an element
           * perform syntactic matching
           */
        Instruction subAction = genArrayMatchingAutomata(p,tom_termTail,indexTerm+1,true,moduleName);

        TomName slotName = tom_make_PositionName(tom_cons_list_concTomNumber(tom_make_Position(indexTerm),tom_empty_list_concTomNumber()));
        subAction = genSyntacticMatchingAutomata(subAction,tom_make_Nop(),tom_cons_list_concSlot(tom_make_PairSlotAppl(slotName,tom_term),tom_empty_list_concSlot()),p.path,moduleName,null);
        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_tomName);
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        TomNumberList newPath  = appendNumber(indexTerm,p.path);
        TomTerm var =  tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(newPath),termType,tom_empty_list_concConstraint());

        return genGetElementArray(p, indexTerm, var, termType, subAction, ensureNotEmptyList, moduleName);
       } } } } } } }tomMatch11Position1Position1NameNumberApplNameNumberNameListList1=tomMatch11Position1Position1NameNumberApplNameNumberNameListSave1; } } } } } } } } } } }tomMatch11Position1List1=tomMatch11Position1Save1; } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch11Position1) ||  false  ) ) { {int tomMatch11Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1List1=tomMatch11Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch11Position1Save1=tomMatch11Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch11Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch11Position1Position1=tom_get_head_concSlot_SlotList(tomMatch11Position1List1);tomMatch11Position1Index1=tomMatch11Position1Index1 + 1;tomMatch11Position1List1=tom_get_tail_concSlot_SlotList(tomMatch11Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch11Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch11Position1Position1NameNumberAppl=tom_get_slot_PairSlotAppl_Appl(tomMatch11Position1Position1); if ( ( tom_is_fun_sym_UnamedVariableStar(tomMatch11Position1Position1NameNumberAppl) ||  ( tom_is_fun_sym_VariableStar(tomMatch11Position1Position1NameNumberAppl) ||  false  )  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch11Position1Position1NameNumberAppl; { tom.engine.adt.tomslot.types.SlotList  tom_termTail=tomMatch11Position1List1; if ( true ) {


          /*
           * 3 cases:
           * - tail = emptyList
           * - tail = only VariableStar or UnamedVariableStar
           * - tail = other
           */
        if(tom_termTail.isEmptyconcSlot()) {
            /*
             * generate:
             * ---------
             * Let E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));
             * ...
             */
          Expression source = tom_make_GetSliceArray(p.symbol.getAstName(),tom_make_Ref(p.subjectListName),tom_make_Ref(p.subjectListIndex),tom_make_ExpressionToTomTerm(tom_make_GetSize(p.symbol.getAstName(),p.subjectListName))
                                             )



;
          Instruction let = buildLet(tom_var, source, p.path, p.action, tom_make_Nop(), moduleName);
          return let;
        } else {
          /*
           * generate:
           * ---------
           * int begin_i = subjectIndex;
           * int end_i   = subjectIndex;
           * ...
           */
          Instruction subAction = genArrayMatchingAutomata(p,tom_termTail,indexTerm+1,false,moduleName);
          TomNumberList ppath = p.path;
          TomNumberList pathBegin = tom_append_list_concTomNumber(ppath,tom_cons_list_concTomNumber(tom_make_Begin(indexTerm),tom_empty_list_concTomNumber()));
          TomNumberList pathEnd = tom_append_list_concTomNumber(ppath,tom_cons_list_concTomNumber(tom_make_End(indexTerm),tom_empty_list_concTomNumber()));
          TomTerm variableBeginAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(pathBegin),getSymbolTable(moduleName).getIntType(),tom_empty_list_concConstraint());
          TomTerm variableEndAST   = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(pathEnd),getSymbolTable(moduleName).getIntType(),tom_empty_list_concConstraint());

          Expression source = tom_make_GetSliceArray(p.symbol.getAstName(),tom_make_Ref(p.subjectListName),variableBeginAST,tom_make_Ref(variableEndAST))


;

          Instruction let = buildLet(tom_var, source, p.path, subAction, tom_make_Nop(), moduleName);
          Instruction increment = tom_make_Assign(variableEndAST,tom_make_AddOne(tom_make_Ref(variableEndAST)));
          Instruction loop;
          if(containOnlyVariableStar(tom_termTail)) {
            /*
             * do {
             *   * SUBSTITUTION: E_i
             *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
             *   ...
             *   end_i++;
             *   subjectIndex = end_i;
             * } while( subjectIndex <= GET_SIZE(subjectList) )
             * subjectIndex = begin_i
             *
             * *** we need <= instead of < to make the algorithm complete ***
             */
            Instruction assign = tom_make_Assign(p.subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)));
            
            loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_cons_list_concInstruction(assign,tom_empty_list_concInstruction())))),tom_make_Negation(tom_make_GreaterThan(tom_make_TomTermToExpression(tom_make_Ref(p.subjectListIndex)),tom_make_GetSize(p.symbol.getAstName(),tom_make_Ref(p.subjectListName)))))
;
            loop = tom_make_UnamedBlock(tom_cons_list_concInstruction(loop,tom_cons_list_concInstruction(tom_make_LetAssign(p.subjectListIndex,tom_make_TomTermToExpression(variableBeginAST),tom_make_Nop()),tom_empty_list_concInstruction())));
          } else {
            /*
             * while( !IS_EMPTY_TomList(end_i,subjectList) ) {
             *   subjectIndex = end_i;
             *   * SUBSTITUTION: E_i
             *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
             *   ...
             *   end_i++;
             * } 
             * subjectIndex = begin_i
             */
            Instruction letAssign = tom_make_LetAssign(p.subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_empty_list_concInstruction()))));
            loop = tom_make_WhileDo(tom_make_Negation(tom_make_IsEmptyArray(p.symbol.getAstName(),tom_make_Ref(p.subjectListName),tom_make_Ref(variableEndAST))),letAssign)
;
            loop = tom_make_UnamedBlock(tom_cons_list_concInstruction(loop,tom_cons_list_concInstruction(tom_make_LetAssign(p.subjectListIndex,tom_make_TomTermToExpression(variableBeginAST),tom_make_Nop()),tom_empty_list_concInstruction())));
          }
          Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListIndex)),loop)

;
          Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListIndex)),letEnd)

;
          return letBegin;
        }
       } } } } } } } }tomMatch11Position1List1=tomMatch11Position1Save1; } } } } } } }

    System.out.println("GenArrayMatchingAutomata strange termList: " + termList);
    throw new TomRuntimeException("GenArrayMatchingAutomata strange termList: " + termList);
  }

  private Instruction genIsEmptyArray(TomSymbol tomSymbol,
                                      TomTerm subjectListName,
                                      TomTerm subjectListIndex,
                                     Instruction succes, Instruction failure) {
      /*
       * generate:
       * ---------
       * if(IS_EMPTY_TomList(subjectList,subjectIndex)) {
       *   ...
       * }
       */
    TomName opNameAST = tomSymbol.getAstName();
    
    return tom_make_If(tom_make_IsEmptyArray(opNameAST,tom_make_Ref(subjectListName),tom_make_Ref(subjectListIndex)),succes,failure);
  }


  private Instruction genGetElementArray(MatchingParameter p, int indexTerm, TomTerm var,
                                         TomType termType,
                                         Instruction subAction, 
                                         boolean notEmptyList,
                                         String moduleName) {
      /*
       * generate:
       * ---------
       * Let save_i = subjectListIndex
       * if(!IS_EMPTY_TomList(subjectList,subjectIndex)) {
       *   Let TomTerm var = (TomTerm) GET_ELEMENT(subjectList, sibjectListIndex);
       *   subjectListIndex++;
       *   ...
       * }
       * subjectListIndex = save_i;
       */
    Instruction body = tom_make_LetAssign(p.subjectListIndex,tom_make_AddOne(tom_make_Ref(p.subjectListIndex)),subAction);
    Expression source = tom_make_GetElement(p.symbol.getAstName(),termType,p.subjectListName,tom_make_Ref(p.subjectListIndex));
    Instruction let = buildLet(var, source, p.path, body, tom_make_Nop(), moduleName);
    if(notEmptyList) {
      let = genIsEmptyArray(p.symbol,p.subjectListName,p.subjectListIndex,tom_make_Nop(),let);
    }

    TomNumberList ppath = p.path;
    TomNumberList pathEnd = tom_append_list_concTomNumber(ppath,tom_cons_list_concTomNumber(tom_make_End(indexTerm),tom_empty_list_concTomNumber()));
    TomType intType = getSymbolTable(moduleName).getIntType();
    TomTerm variableEndAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(pathEnd),intType,tom_empty_list_concConstraint());
    Instruction letRestore = tom_make_Assign(p.subjectListIndex,tom_make_TomTermToExpression(variableEndAST));
    Instruction letSave = tom_make_Let(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p.subjectListIndex)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(letRestore,tom_empty_list_concInstruction()))));
    return letSave;
  }

    /*
     * given a list of slots [s1=t1],...,[sn=tn]
     * declare/assign internal matching variables: match_path_i = ti
     */
  private Instruction collectSubtermFromSubjectList(TomTerm currentTerm,
                                                    TomTerm subjectVariableAST, 
                                                    TomNumberList path, Instruction body, String moduleName) {
     if (tom_is_sort_TomTerm(currentTerm)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch12Position1=(( tom.engine.adt.tomterm.types.TomTerm )currentTerm); if ( ( tom_is_fun_sym_RecordAppl(tomMatch12Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch12Position1NameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch12Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch12Position1NameNumberNameList) ||  false  ) ) { {int tomMatch12Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch12Position1NameNumberNameListList1=tomMatch12Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch12Position1NameNumberNameListSave1=tomMatch12Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch12Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch12Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch12Position1NameNumberNameListList1);tomMatch12Position1NameNumberNameListIndex1=tomMatch12Position1NameNumberNameListIndex1 + 1;tomMatch12Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch12Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch12Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch12Position1NameNumberNameListPosition1); { tom.engine.adt.tomname.types.TomNameList  tom_nameList=tomMatch12Position1NameNumberNameList; { tom.engine.adt.tomslot.types.SlotList  tom_termArgList=tom_get_slot_RecordAppl_Slots(tomMatch12Position1); if ( true ) {

        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_tomName);

        // check that variables are no longer Bottom 
        TomType booleanType = getSymbolTable(moduleName).getBooleanType();
        TomTerm booleanVariable = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(tom_cons_list_concTomNumber(tom_make_NameNumber(tom_make_Name("bool")),tom_append_list_concTomNumber(path,tom_empty_list_concTomNumber()))),booleanType,tom_empty_list_concConstraint());
        Instruction ifBody = collectSubtermIf(tom_nameList,booleanVariable,currentTerm,tom_termArgList,subjectVariableAST,path,moduleName);
        Instruction checkBody = tom_make_If(tom_make_TomTermToExpression(booleanVariable),body,tom_make_Nop()); 
        Instruction newBody = collectSubtermLetRefBottom(tom_termArgList,tomSymbol,path,tom_make_AbstractBlock(concatInstruction(ifBody,checkBody)));

        return tom_make_LetRef(booleanVariable,tom_make_FalseTL(),newBody);

       } } } } } } }tomMatch12Position1NameNumberNameListList1=tomMatch12Position1NameNumberNameListSave1; } } } } } } } } }

    return body;
  }

    /*
     * given a list of symbol names
     * generated nested if, for each symbol name
     */
  private Instruction collectSubtermIf(TomNameList nameList,
                                       TomTerm booleanVariable,
                                       TomTerm currentTerm,
                                       SlotList termArgList,
                                       TomTerm subjectVariableAST, 
                                       TomNumberList path,
                                       String moduleName) {
     if (tom_is_sort_TomNameList(nameList)) { { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1=(( tom.engine.adt.tomname.types.TomNameList )nameList); if ( ( tom_is_fun_sym_concTomName(tomMatch13Position1) ||  false  ) ) { {int tomMatch13Position1Index1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1List1=tomMatch13Position1; if (tom_is_empty_concTomName_TomNameList(tomMatch13Position1List1)) { if ( true ) {

        return tom_make_Nop();
       } } } } } if ( ( tom_is_fun_sym_concTomName(tomMatch13Position1) ||  false  ) ) { {int tomMatch13Position1Index1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1List1=tomMatch13Position1; { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1Save1=tomMatch13Position1List1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch13Position1List1))) { { tom.engine.adt.tomname.types.TomName  tomMatch13Position1Position1=tom_get_head_concTomName_TomNameList(tomMatch13Position1List1);tomMatch13Position1Index1=tomMatch13Position1Index1 + 1;tomMatch13Position1List1=tom_get_tail_concTomName_TomNameList(tomMatch13Position1List1); if ( ( tom_is_fun_sym_Name(tomMatch13Position1Position1) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch13Position1Position1); { tom.engine.adt.tomname.types.TomName  tom_name=tomMatch13Position1Position1; { tom.engine.adt.tomname.types.TomNameList  tom_tail=tomMatch13Position1List1; if ( true ) {


        TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_tomName);
        TomType codomain = tomSymbol.getTypesToType().getCodomain();
        Instruction elseBody = collectSubtermIf(tom_tail,booleanVariable,currentTerm,termArgList,subjectVariableAST,path,moduleName);
        Instruction assign = collectSubtermLetAssign(termArgList,tomSymbol,subjectVariableAST,path,tom_make_Nop(),moduleName);
        Expression cond = tom_make_EqualFunctionSymbol(codomain,subjectVariableAST,currentTerm.setNameList(tom_cons_list_concTomName(tom_name,tom_empty_list_concTomName())));
        return  tom_make_If(cond,tom_make_LetAssign(booleanVariable,tom_make_TrueTL(),assign),elseBody);
       } } } } } } }tomMatch13Position1List1=tomMatch13Position1Save1; } } } } } } }

    return tom_make_Nop();
  }

   /*
    * given a list of slots
    * generate assignements for each subterm
    */
  private Instruction collectSubtermLetAssign(SlotList termArgList,
                                              TomSymbol tomSymbol,
                                              TomTerm subjectVariableAST, 
                                              TomNumberList path, Instruction body,
                                              String moduleName) {
    TomName opNameAST = tomSymbol.getAstName();
     if (tom_is_sort_SlotList(termArgList)) { { tom.engine.adt.tomslot.types.SlotList  tomMatch14Position1=(( tom.engine.adt.tomslot.types.SlotList )termArgList); if ( ( tom_is_fun_sym_concSlot(tomMatch14Position1) ||  false  ) ) { {int tomMatch14Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch14Position1List1=tomMatch14Position1; if (tom_is_empty_concSlot_SlotList(tomMatch14Position1List1)) { if ( true ) {
 return body;  } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch14Position1) ||  false  ) ) { {int tomMatch14Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch14Position1List1=tomMatch14Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch14Position1Save1=tomMatch14Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch14Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch14Position1Position1=tom_get_head_concSlot_SlotList(tomMatch14Position1List1);tomMatch14Position1Index1=tomMatch14Position1Index1 + 1;tomMatch14Position1List1=tom_get_tail_concSlot_SlotList(tomMatch14Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch14Position1Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch14Position1Position1); { tom.engine.adt.tomslot.types.SlotList  tom_tail=tomMatch14Position1List1; if ( true ) {


        body = collectSubtermLetAssign(tom_tail,tomSymbol,subjectVariableAST,path,body,moduleName);
        TomType subtermType = getSlotType(tomSymbol,tom_slotName);

        if(!isDefinedGetSlot(tomSymbol,tom_slotName)) {
          Logger.getLogger(getClass().getName()).log( Level.SEVERE,
              TomMessage.errorMissingSlotDecl.getMessage(),
              new Object[]{tomSymbol.getAstName().getString(),tom_slotName.getString()});
        }

        Expression getSlotAST = tom_make_GetSlot(subtermType,opNameAST,tom_slotName.getString(),subjectVariableAST);

        TomNumberList newPath  = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_slotName),tom_empty_list_concTomNumber()));
        TomTerm newVariableAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(newPath),subtermType,tom_empty_list_concConstraint());
        return tom_make_LetAssign(newVariableAST,getSlotAST,body);
       } } } } } }tomMatch14Position1List1=tomMatch14Position1Save1; } } } } } } }

    return tom_make_Nop();
  }
 
  /*
   * given a list of slot
   * declare/initialize each slot to "bottom"
   */
  private Instruction collectSubtermLetRefBottom(SlotList termArgList,
                                                 TomSymbol tomSymbol,
                                                 TomNumberList path,
                                                 Instruction body) {
     if (tom_is_sort_SlotList(termArgList)) { { tom.engine.adt.tomslot.types.SlotList  tomMatch15Position1=(( tom.engine.adt.tomslot.types.SlotList )termArgList); if ( ( tom_is_fun_sym_concSlot(tomMatch15Position1) ||  false  ) ) { {int tomMatch15Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch15Position1List1=tomMatch15Position1; if (tom_is_empty_concSlot_SlotList(tomMatch15Position1List1)) { if ( true ) {

        return body;
       } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch15Position1) ||  false  ) ) { {int tomMatch15Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch15Position1List1=tomMatch15Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch15Position1Save1=tomMatch15Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch15Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch15Position1Position1=tom_get_head_concSlot_SlotList(tomMatch15Position1List1);tomMatch15Position1Index1=tomMatch15Position1Index1 + 1;tomMatch15Position1List1=tom_get_tail_concSlot_SlotList(tomMatch15Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch15Position1Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch15Position1Position1); { tom.engine.adt.tomslot.types.SlotList  tom_tail=tomMatch15Position1List1; if ( true ) {


        body = collectSubtermLetRefBottom(tom_tail,tomSymbol,path,body);
        TomType subtermType = getSlotType(tomSymbol,tom_slotName);
        TomNumberList newPath  = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_slotName),tom_empty_list_concTomNumber()));
        TomTerm newVariableAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(newPath),subtermType,tom_empty_list_concConstraint());
        return tom_make_LetRef(newVariableAST,tom_make_Bottom(subtermType),body);
       } } } } } }tomMatch15Position1List1=tomMatch15Position1Save1; } } } } } } }

    return tom_make_Nop();
  }

    /*
     * given a list of subject t1,...,tn
     * declare/assign internal matching variables: match_path_i = ti
     */
  private Instruction collectSubtermFromTomSymbol(SlotList termArgList, TomSymbol tomSymbol,
      TomTerm subjectVariableAST, TomNumberList path, Instruction body, String moduleName) {	  
    TomName opNameAST = tomSymbol.getAstName();
     if (tom_is_sort_SlotList(termArgList)) { { tom.engine.adt.tomslot.types.SlotList  tomMatch16Position1=(( tom.engine.adt.tomslot.types.SlotList )termArgList); if ( ( tom_is_fun_sym_concSlot(tomMatch16Position1) ||  false  ) ) { {int tomMatch16Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch16Position1List1=tomMatch16Position1; if (tom_is_empty_concSlot_SlotList(tomMatch16Position1List1)) { if ( true ) {
 return body;  } } } } } if ( ( tom_is_fun_sym_concSlot(tomMatch16Position1) ||  false  ) ) { {int tomMatch16Position1Index1=0; { tom.engine.adt.tomslot.types.SlotList  tomMatch16Position1List1=tomMatch16Position1; { tom.engine.adt.tomslot.types.SlotList  tomMatch16Position1Save1=tomMatch16Position1List1; { if (!(tom_is_empty_concSlot_SlotList(tomMatch16Position1List1))) { { tom.engine.adt.tomslot.types.Slot  tomMatch16Position1Position1=tom_get_head_concSlot_SlotList(tomMatch16Position1List1);tomMatch16Position1Index1=tomMatch16Position1Index1 + 1;tomMatch16Position1List1=tom_get_tail_concSlot_SlotList(tomMatch16Position1List1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch16Position1Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch16Position1Position1); { tom.engine.adt.tomslot.types.SlotList  tom_tail=tomMatch16Position1List1; if ( true ) {


        body = collectSubtermFromTomSymbol(tom_tail,tomSymbol,subjectVariableAST,path,body,moduleName);
        TomType subtermType = getSlotType(tomSymbol,tom_slotName);
        if(!isDefinedGetSlot(tomSymbol,tom_slotName)) {
          Logger.getLogger(getClass().getName()).log( Level.SEVERE,
              TomMessage.errorMissingSlotDecl.getMessage(),
              new Object[]{tomSymbol.getAstName().getString(),tom_slotName.getString()});
        }

        Expression getSubtermAST = tom_make_GetSlot(subtermType,opNameAST,tom_slotName.getString(),subjectVariableAST);
        TomNumberList newPath  = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_NameNumber(tom_slotName),tom_empty_list_concTomNumber()));
        TomTerm newVariableAST = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(newPath),subtermType,tom_empty_list_concConstraint());
        return tom_make_Let(newVariableAST,getSubtermAST,body);
       } } } } } }tomMatch16Position1List1=tomMatch16Position1Save1; } } } } } } }

    return tom_make_Nop();
  }

  public Expression expandDisjunction(Expression exp, String moduleName) {
    Expression cond = tom_make_FalseTL();
     if (tom_is_sort_Expression(exp)) { { tom.engine.adt.tomexpression.types.Expression  tomMatch17Position1=(( tom.engine.adt.tomexpression.types.Expression )exp); if ( ( tom_is_fun_sym_EqualFunctionSymbol(tomMatch17Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch17Position1NameNumberExp2=tom_get_slot_EqualFunctionSymbol_Exp2(tomMatch17Position1); { tom.engine.adt.tomtype.types.TomType  tom_termType=tom_get_slot_EqualFunctionSymbol_AstType(tomMatch17Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_exp1=tom_get_slot_EqualFunctionSymbol_Exp1(tomMatch17Position1); if ( ( tom_is_fun_sym_RecordAppl(tomMatch17Position1NameNumberExp2) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_option=tom_get_slot_RecordAppl_Option(tomMatch17Position1NameNumberExp2); { tom.engine.adt.tomname.types.TomNameList  tom_nameList=tom_get_slot_RecordAppl_NameList(tomMatch17Position1NameNumberExp2); { tom.engine.adt.tomslot.types.SlotList  tom_l=tom_get_slot_RecordAppl_Slots(tomMatch17Position1NameNumberExp2); if ( true ) {

        while(!tom_nameList.isEmptyconcTomName()) {
          TomName name = tom_nameList.getHeadconcTomName();
          boolean isAnti = (name instanceof AntiName);
          if(isAnti) {
	    name = name.getName();
          }
          Expression check = tom_make_EqualFunctionSymbol(tom_termType,tom_exp1,tom_make_RecordAppl(tom_option,tom_cons_list_concTomName(name,tom_empty_list_concTomName()),tom_l,tom_empty_list_concConstraint()));
          
          if(isAnti) {
	    check = tom_make_Negation(check);
          }
          cond = tom_make_Or(check,cond);
          tom_nameList= tom_nameList.getTailconcTomName();
        }
       } } } } } } } } } } }

    return cond;
  }

  private Instruction buildLet(TomTerm dest,
                               Expression source,
			       TomNumberList sourcePath,
                               Instruction body,
                               Instruction elseBody,
                               String moduleName) {
    // Take care of constraints	 
    body = compileConstraint(dest,source,sourcePath,body,elseBody,moduleName);    
    //return `Let(dest,source,body);
    /*
     * this optimisation is not good since it avoids some optimisations
     * in particular, f(x,y) and f(x,_) cannot be merged
     *
     */
    if(dest.isUnamedVariable() || dest.isUnamedVariableStar()) {
      // This is an optimisation 
      // Do not assign an UnamedVariable or an UnamedVariableStar
      return body;
    } else {
      return tom_make_Let(dest,source,body);
    }
  }

  private Instruction compileConstraint(TomTerm subject, Expression source, TomNumberList sourcePath,
      Instruction body, Instruction elseBody, String moduleName) {
     if (tom_is_sort_TomTerm(subject)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch18Position1=(( tom.engine.adt.tomterm.types.TomTerm )subject); {boolean tomNameNumberboolMatch18Position1= false ; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch18Position1NameNumberConstraints= null ; if (tom_is_fun_sym_Variable(tomMatch18Position1)) {tomNameNumberboolMatch18Position1= true ;tomMatch18Position1NameNumberConstraints=tom_get_slot_Variable_Constraints(tomMatch18Position1); } else { if (tom_is_fun_sym_VariableStar(tomMatch18Position1)) {tomNameNumberboolMatch18Position1= true ;tomMatch18Position1NameNumberConstraints=tom_get_slot_VariableStar_Constraints(tomMatch18Position1); } } if (tomNameNumberboolMatch18Position1) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch18Position1NameNumberConstraints; if ( true ) {

        return buildConstraint(tom_constraints,tom_make_TomTermToExpression(subject.setConstraints(tom_empty_list_concConstraint())),sourcePath,body,elseBody,moduleName);
       } } } } } {boolean tomNameNumberboolMatch18Position1= false ; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch18Position1NameNumberConstraints= null ; if (tom_is_fun_sym_UnamedVariable(tomMatch18Position1)) {tomNameNumberboolMatch18Position1= true ;tomMatch18Position1NameNumberConstraints=tom_get_slot_UnamedVariable_Constraints(tomMatch18Position1); } else { if (tom_is_fun_sym_UnamedVariableStar(tomMatch18Position1)) {tomNameNumberboolMatch18Position1= true ;tomMatch18Position1NameNumberConstraints=tom_get_slot_UnamedVariableStar_Constraints(tomMatch18Position1); } } if (tomNameNumberboolMatch18Position1) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch18Position1NameNumberConstraints; if ( true ) {


        return buildConstraint(tom_constraints,source,sourcePath,body,elseBody,moduleName);
       } } } } } if ( ( tom_is_fun_sym_RecordAppl(tomMatch18Position1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tom_get_slot_RecordAppl_Constraints(tomMatch18Position1); if ( true ) {


        return buildConstraint(tom_constraints,source,sourcePath,body,elseBody,moduleName);
       } } } } }

    throw new TomRuntimeException("compileConstraint: strange subject: " + subject);
  }

  private Instruction buildConstraint(ConstraintList constraints, Expression source, TomNumberList sourcePath,
      Instruction body, Instruction elseBody, String moduleName) {
     if (tom_is_sort_ConstraintList(constraints)) { { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1=(( tom.engine.adt.tomconstraint.types.ConstraintList )constraints); if ( ( tom_is_fun_sym_concConstraint(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1List1=tomMatch19Position1; if (tom_is_empty_concConstraint_ConstraintList(tomMatch19Position1List1)) { if ( true ) {

        return body;
       } } } } } if ( ( tom_is_fun_sym_concConstraint(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1List1=tomMatch19Position1; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1Save1=tomMatch19Position1List1; { if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch19Position1List1))) { { tom.engine.adt.tomconstraint.types.Constraint  tomMatch19Position1Position1=tom_get_head_concConstraint_ConstraintList(tomMatch19Position1List1);tomMatch19Position1Index1=tomMatch19Position1Index1 + 1;tomMatch19Position1List1=tom_get_tail_concConstraint_ConstraintList(tomMatch19Position1List1); if ( ( tom_is_fun_sym_Equal(tomMatch19Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_get_slot_Equal_Variable(tomMatch19Position1Position1); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_tail=tomMatch19Position1List1; if ( true ) {


        //System.out.println("constraint: " + source + " EqualTo " + `var);
        Instruction subBody = compileConstraint(tom_var,source,sourcePath,body,elseBody,moduleName);
        return buildConstraint(tom_tail,source,sourcePath,tom_make_If(tom_make_EqualTerm(getTermType(tom_var,getSymbolTable(moduleName)),tom_var,tom_make_ExpressionToTomTerm(source)),subBody,elseBody),elseBody,moduleName)
;
       } } } } } }tomMatch19Position1List1=tomMatch19Position1Save1; } } } } } if ( ( tom_is_fun_sym_concConstraint(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1List1=tomMatch19Position1; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1Save1=tomMatch19Position1List1; { if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch19Position1List1))) { { tom.engine.adt.tomconstraint.types.Constraint  tomMatch19Position1Position1=tom_get_head_concConstraint_ConstraintList(tomMatch19Position1List1);tomMatch19Position1Index1=tomMatch19Position1Index1 + 1;tomMatch19Position1List1=tom_get_tail_concConstraint_ConstraintList(tomMatch19Position1List1); if ( ( tom_is_fun_sym_AssignTo(tomMatch19Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch19Position1Position1NameNumberVariable=tom_get_slot_AssignTo_Variable(tomMatch19Position1Position1); if ( ( tom_is_fun_sym_VariableStar(tomMatch19Position1Position1NameNumberVariable) ||  ( tom_is_fun_sym_Variable(tomMatch19Position1Position1NameNumberVariable) ||  false  )  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch19Position1Position1NameNumberVariable; { tom.engine.adt.tomconstraint.types.ConstraintList  tom_tail=tomMatch19Position1List1; if ( true ) {


        //System.out.println("constraint: " + source + " AssignTo " + `var);
        Instruction subBody = compileConstraint(tom_var,source,sourcePath,body,elseBody,moduleName);
        return buildConstraint(tom_tail,source,sourcePath,tom_make_Let(tom_var,source,subBody),elseBody,moduleName);
       } } } } } } } }tomMatch19Position1List1=tomMatch19Position1Save1; } } } } } if ( ( tom_is_fun_sym_concConstraint(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1List1=tomMatch19Position1; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1Save1=tomMatch19Position1List1; { if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch19Position1List1))) { { tom.engine.adt.tomconstraint.types.Constraint  tomMatch19Position1Position1=tom_get_head_concConstraint_ConstraintList(tomMatch19Position1List1);tomMatch19Position1Index1=tomMatch19Position1Index1 + 1;tomMatch19Position1List1=tom_get_tail_concConstraint_ConstraintList(tomMatch19Position1List1); if ( ( tom_is_fun_sym_AssignPositionTo(tomMatch19Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch19Position1Position1NameNumberVariable=tom_get_slot_AssignPositionTo_Variable(tomMatch19Position1Position1); if ( ( tom_is_fun_sym_VariableStar(tomMatch19Position1Position1NameNumberVariable) ||  ( tom_is_fun_sym_Variable(tomMatch19Position1Position1NameNumberVariable) ||  false  )  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch19Position1Position1NameNumberVariable; { tom.engine.adt.tomconstraint.types.ConstraintList  tom_tail=tomMatch19Position1List1; if ( true ) {


        //System.out.println("AssignPositionTo " + `var);
	System.out.println("AssignPositionTo sourcePath=" + sourcePath);
        Instruction subBody = compileConstraint(tom_var,source,sourcePath,body,elseBody,moduleName);
        return buildConstraint(tom_tail,source,sourcePath,tom_make_Let(tom_var,source,subBody),elseBody,moduleName);
       } } } } } } } }tomMatch19Position1List1=tomMatch19Position1Save1; } } } } } if ( ( tom_is_fun_sym_concConstraint(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1List1=tomMatch19Position1; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1Save1=tomMatch19Position1List1; { if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch19Position1List1))) { { tom.engine.adt.tomconstraint.types.Constraint  tomMatch19Position1Position1=tom_get_head_concConstraint_ConstraintList(tomMatch19Position1List1);tomMatch19Position1Index1=tomMatch19Position1Index1 + 1;tomMatch19Position1List1=tom_get_tail_concConstraint_ConstraintList(tomMatch19Position1List1); if ( ( tom_is_fun_sym_Ensure(tomMatch19Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_exp=tom_get_slot_Ensure_Variable(tomMatch19Position1Position1); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_tail=tomMatch19Position1List1; if ( true ) {


        //System.out.println("constraint: " + source + " Ensure " + `exp);
        //Instruction subBody = compileConstraint(`exp,source,body);
        TomType type = getSymbolTable(moduleName).getBooleanType();
        Expression equality = tom_make_EqualTerm(type,tom_make_ExpressionToTomTerm(tom_make_TrueTL()),tom_exp);
        Instruction generatedTest = tom_make_If(equality,body,elseBody);
        return buildConstraint(tom_tail,source,sourcePath,generatedTest,elseBody,moduleName);
       } } } } } }tomMatch19Position1List1=tomMatch19Position1Save1; } } } } } if ( ( tom_is_fun_sym_concConstraint(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1List1=tomMatch19Position1; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1Save1=tomMatch19Position1List1; { if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch19Position1List1))) { { tom.engine.adt.tomconstraint.types.Constraint  tomAbsVar1=tom_get_head_concConstraint_ConstraintList(tomMatch19Position1List1);tomMatch19Position1Index1=tomMatch19Position1Index1 + 1;tomMatch19Position1List1=tom_get_tail_concConstraint_ConstraintList(tomMatch19Position1List1); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_tail=tomMatch19Position1List1; if (tom_is_sort_Constraint(tomAbsVar1)) { { tom.engine.adt.tomconstraint.types.Constraint  tomMatch20Position1=(( tom.engine.adt.tomconstraint.types.Constraint )tomAbsVar1); if ( ( tom_is_fun_sym_AndAntiConstraint(tomMatch20Position1) ||  false  ) ) { {int tomMatch20Position1Index1=0; { tom.engine.adt.tomconstraint.types.Constraint  tomMatch20Position1List1=tomMatch20Position1; { tom.engine.adt.tomconstraint.types.Constraint  tom_c=tomMatch20Position1; if ( true ) {


    	Instruction antiMatchBlock = null;    	  
    	antiMatchBlock = buildAntiMatchBlockConstraint((AndAntiConstraint)tom_c,source,body,moduleName);
    	return buildConstraint(tom_tail,source,sourcePath,antiMatchBlock,elseBody,moduleName);
       } } } } } } } } } }tomMatch19Position1List1=tomMatch19Position1Save1; } } } } } if ( ( tom_is_fun_sym_concConstraint(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1List1=tomMatch19Position1; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch19Position1Save1=tomMatch19Position1List1; { if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch19Position1List1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_head=tom_get_head_concConstraint_ConstraintList(tomMatch19Position1List1);tomMatch19Position1Index1=tomMatch19Position1Index1 + 1;tomMatch19Position1List1=tom_get_tail_concConstraint_ConstraintList(tomMatch19Position1List1); if ( true ) {


        throw new TomRuntimeException("buildConstraint: unknown constraint: " + tom_head);
       } } }tomMatch19Position1List1=tomMatch19Position1Save1; } } } } } } }
    
    throw new TomRuntimeException("buildConstraint: unknown constraints: " + constraints);
  } 
  
  /*
   * [PEM: 23/02/2007]
   * Not very clear: the algorithm should be explained
   */ 
  private Instruction buildAntiMatchBlockConstraint(AndAntiConstraint consList, 
      Expression source, Instruction body, String moduleName) {

    InstructionList instructionList = null;
    Instruction antiInstruction = null; 
    Constraint antiMatchConstraint = null;

    Instruction assignAntiFlagTrue = tom_make_LetAssign(antiFlagVariable,tom_make_And(tom_make_TrueTL(),tom_make_TomTermToExpression(tom_make_Ref(antiFlagVariable))),tom_make_Nop())


;
    Instruction assignAntiFlagFalse = tom_make_LetAssign(antiFlagVariable,tom_make_And(tom_make_FalseTL(),tom_make_TomTermToExpression(tom_make_Ref(antiFlagVariable))),tom_make_Nop())


;

    // actions that will be performed on if and on else
    Instruction ifAction = null, elseAction = null;

    // compute all anti constraints	  
    antiMatchConstraint = consList.getHeadAndAntiConstraint();
    boolean actionOnIf = antiMatchConstraint.getActionOnIf() == 1;
    if(actionOnIf) {
      ifAction = assignAntiFlagTrue;
      elseAction = assignAntiFlagFalse;
    } else {
      ifAction = assignAntiFlagFalse;
      elseAction = assignAntiFlagTrue;
    }

    antiInstruction = buildAntiMatchConstraint((AntiMatchConstraint)antiMatchConstraint, source,ifAction,elseAction,moduleName);
    instructionList = tom_cons_list_concInstruction(antiInstruction,tom_empty_list_concInstruction());
    consList = (AndAntiConstraint)consList.getTailAndAntiConstraint();
    // this evaluates all constraints at the same 'not' level as the above one
    while(!consList.isEmptyAndAntiConstraint()) {
      antiMatchConstraint = consList.getHeadAndAntiConstraint();
      antiInstruction = buildAntiMatchConstraint((AntiMatchConstraint)antiMatchConstraint, source, ifAction, elseAction, moduleName);

      if(antiMatchConstraint.getActionOnIf() == 0) {
        antiInstruction = tom_make_If(tom_make_EqualTerm(antiFlagType,tom_make_Ref(antiFlagVariable),tom_make_ExpressionToTomTerm(tom_make_TrueTL())),antiInstruction,tom_make_Nop())


;
      } else {
        antiInstruction = tom_make_If(tom_make_EqualTerm(antiFlagType,tom_make_Ref(antiFlagVariable),tom_make_ExpressionToTomTerm(tom_make_TrueTL())),tom_make_Nop(),antiInstruction)


;
      }		  
      // add intruction to the list
      instructionList = tom_append_list_concInstruction(instructionList,tom_cons_list_concInstruction(antiInstruction,tom_empty_list_concInstruction()));

      consList = (AndAntiConstraint)consList.getTailAndAntiConstraint();		  					  
    }
    // add the body to the list if the body is not the flag assignement
    // quite ugly ... should be changed
    if (!(body instanceof LetAssign)) {
    	// also reset the flag
    	Instruction flagReset = tom_make_LetAssign(antiFlagVariable,tom_make_TrueTL(),tom_make_Nop());
    	instructionList = tom_append_list_concInstruction(instructionList,tom_cons_list_concInstruction(body,tom_cons_list_concInstruction(flagReset,tom_empty_list_concInstruction())));
    }
    return tom_make_UnamedBlock(instructionList);
  }

  private Instruction buildAntiMatchConstraint(AntiMatchConstraint constraint, 
      Expression source, Instruction ifAction, Instruction elseAction, String moduleName) {
    //SlotList slotList = tomListToSlotList(`concTomTerm(constraint.getPattern())); 
    TomNumberList rootpath = tom_empty_list_concTomNumber();
    this.matchNumber++;
    rootpath = tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_MatchNumber(this.matchNumber),tom_empty_list_concTomNumber()));

    return genSyntacticMatchingAutomata(ifAction,elseAction,
	tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name("ANTI"),constraint.getPattern()),tom_empty_list_concSlot()),rootpath,moduleName,
	constraint.getSubject());       
  }
  
  private static class MatchingParameter {
      /*
       * This object is used by matching-algorithms to store common parameters
       * which are not modified during the matching process
       *
       * symbol:           root symbol
       * path:             path up-to the root symbol
       * action:           list of actions to be fired when matching
       * subjectListName:  name of the internal variable supposed to store the subject
       * subjectListIndex: name of the internal variable supposed to store the index
       * optionList
       */
    public TomSymbol symbol;
    public TomNumberList path;
    public Instruction action;
    public Instruction elseAction;
    public TomTerm subjectListName;
    public TomTerm subjectListIndex;
    public OptionList optionList;

    MatchingParameter(TomSymbol symbol, 
                      TomNumberList path,
                      Instruction action,
                      Instruction elseAction,
                      TomTerm subjectListName,
                      TomTerm subjectListIndex,
                      OptionList optionList) {
      this.symbol=symbol;
      this.path=path;
      this.action=action;
      this.elseAction=elseAction;
      this.subjectListName=subjectListName;
      this.subjectListIndex=subjectListIndex;
      this.optionList = optionList;
    }

  }
  
} // end of class
