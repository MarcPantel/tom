/* Generated by TOM: Do not edit this file */ /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2004 INRIA
			    Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.compiler;
  
import jtom.TomBase;
import jtom.adt.tomsignature.types.*;
import jtom.runtime.Replace1;
import aterm.*;
import jtom.exception.TomRuntimeException;

public class TomKernelCompiler extends TomBase {

  private boolean debugMode = false;

  public TomKernelCompiler(jtom.TomEnvironment environment, boolean debugMode) {
    super(environment);
    this.debugMode = debugMode;
  }

// ------------------------------------------------------------
  /* Generated by TOM: Do not edit this file *//* Generated by TOM: Do not edit this file *//* Generated by TOM: Do not edit this file */                        /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM: Do not edit this file */     /* Generated by TOM: Do not edit this file
// ------------------------------------------------------------
 
  private int matchNumber = 0;

  private OptionList option() {
    return ast().makeOption();
  }

  private TomName getLabel(OptionList list) {
     { OptionList tom_match1_1=(( OptionList)list);{ if(tom_is_fun_sym_concOption(tom_match1_1) ||  false ) { { OptionList tom_match1_1_list1=tom_match1_1; { OptionList tom_match1_1_begin1=tom_match1_1_list1; { OptionList tom_match1_1_end1=tom_match1_1_list1; while (!(tom_is_empty_OptionList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1;{ { Option tom_match1_1_2=tom_get_head_OptionList(tom_match1_1_list1); if(tom_is_fun_sym_Label(tom_match1_1_2) ||  false ) { { TomName tom_match1_1_2_1=tom_get_slot_Label_astName(tom_match1_1_2); if(tom_is_fun_sym_Name(tom_match1_1_2_1) ||  false ) {
  return tom_match1_1_2_1 ;  }} }}tom_match1_1_end1=tom_get_tail_OptionList(tom_match1_1_end1);} }}}} }}}
 
    return null;
  }
  
    /* 
     * compileMatching:
     * compiles the Match construct into a matching automaton: CompiledMatch
     */

  private Replace1 replace_compileMatching = new Replace1() {
      public ATerm apply(ATerm subject) {
        if(subject instanceof Instruction) {
           { Instruction tom_match2_1=(( Instruction)subject);{ if(tom_is_fun_sym_Match(tom_match2_1) ||  false ) { { TomTerm tom_match2_1_1=tom_get_slot_Match_subjectList(tom_match2_1); { TomTerm tom_match2_1_2=tom_get_slot_Match_astPatternList(tom_match2_1); if(tom_is_fun_sym_SubjectList(tom_match2_1_1) ||  false ) { if(tom_is_fun_sym_PatternList(tom_match2_1_2) ||  false ) { { TomList tom_l2=tom_get_slot_PatternList_tomList(tom_match2_1_2); { OptionList tom_optionList=tom_get_slot_Match_option(tom_match2_1);
 
              boolean generatedMatch = false;
              String currentDebugKey = "noDebug";
              if(debugMode) {
                generatedMatch = hasGeneratedMatch(tom_optionList );
                Option orgTrack = findOriginTracking(tom_optionList );
                currentDebugKey = orgTrack.getFileName().getString() + orgTrack.getLine();
              }
                
              TomList patternList = null;
              Instruction actionInst = null;
              TomList automataList = empty();
              TomNumberList rootpath = tsf().makeTomNumberList();
              matchNumber++;
              rootpath = (TomNumberList) rootpath.append(tom_make_MatchNumber(makeNumber(matchNumber)) );
                
                /*
                 * for each pattern action (<term>,...,<term> -> <action>)
                 * build a matching automata
                 */
              int actionNumber = 0;
              boolean defaultPA =false;
              while(!tom_l2 .isEmpty()) {
                actionNumber++;
                TomTerm pa = tom_l2 .getHead();
                defaultPA = hasDefaultCase(pa.getOption());
                patternList = pa.getTermList().getTomList();
                if (debugMode && defaultPA) {
                    // replace success by leaving structure
                  TargetLanguage tl = tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.patternSuccess(\""+currentDebugKey+"\");\njtom.debug.TomDebugger.debugger.leavingStructure(\""+currentDebugKey+"\");\n");
                  actionInst = tom_make_UnamedBlock(tom_cons_list_concInstruction(pa .getAction(),tom_cons_list_concInstruction(tom_make_TargetLanguageToInstruction(tl),tom_empty_list_concInstruction()))) ;
                } else {
                  actionInst = pa.getAction();
                }
                if(patternList==null || actionInst==null) {
                  System.out.println("TomKernelCompiler: null value");
                  throw new TomRuntimeException(new Throwable("TomKernelCompiler: null value"));
                }
                  
                  /*
                   * compile nested match constructs
                   * given a list of pattern: we build a matching automaton
                   */
                actionInst = (Instruction) this.apply(actionInst);
                Instruction matchingAutomata = genSyntacticMatchingAutomata(actionInst,
                                                                            patternList,rootpath,1);
                OptionList automataOptionList = tom_cons_list_concOption(tom_make_Debug(tom_make_Name(currentDebugKey)),tom_empty_list_concOption()) ;
                TomName label = getLabel(pa.getOption());
                if(label != null) {
                  automataOptionList = tom_make_manyOptionList(tom_make_Label(label),automataOptionList) ;
                }
                if(defaultPA) {
                  automataOptionList = tom_make_manyOptionList(tom_make_DefaultCase(),automataOptionList) ;
                }
                TomNumberList numberList = (TomNumberList) rootpath.append(tom_make_PatternNumber(makeNumber(actionNumber)) );
                TomTerm automata = tom_make_Automata(automataOptionList,patternList,numberList,matchingAutomata) ;
                  //System.out.println("automata = " + automata);
                  
                automataList = append(automata,automataList);
                tom_l2  = tom_l2 .getTail();
              }
                
                /*
                 * return the compiled Match construction
                 */
              InstructionList astAutomataList = automataListCompileMatchingList(automataList, generatedMatch);
              Instruction astAutomata = collectVariableFromSubjectList(tom_get_slot_SubjectList_tomList(tom_match2_1_1) ,1,rootpath,tom_make_AbstractBlock(astAutomataList) );
              return tom_make_CompiledMatch(astAutomata,tom_optionList) ;
            }} } }}} }


 
              return traversal().genericTraversal(subject,this);
            }}
  // end match
        } else { // not instance of TomTerm
          return traversal().genericTraversal(subject,this);
        }
      } // end apply
    }; // end new

  public TomTerm compileMatching(TomTerm subject) {
    return (TomTerm) replace_compileMatching.apply(subject);
  }

    /*
     * collect match variables (from match(t1,...,tn))
     * create a list of declaration/assignement: v1=t1 ... vn=tn in body
     */
  private Instruction collectVariableFromSubjectList(TomList subjectList, int index, TomNumberList path, Instruction body) {
     { TomList tom_match3_1=(( TomList)subjectList);{ if(tom_is_fun_sym_emptyTomList(tom_match3_1) ||  false ) {
  return body;  } if(tom_is_fun_sym_manyTomList(tom_match3_1) ||  false ) { { TomTerm tom_match3_1_1=tom_get_slot_manyTomList_head(tom_match3_1); if(tom_is_fun_sym_Variable(tom_match3_1_1) ||  false ) { { TomType tom_variableType=tom_get_slot_Variable_astType(tom_match3_1_1);
 
        body = collectVariableFromSubjectList(tom_get_slot_manyTomList_tail(tom_match3_1) ,index+1,path,body);
        TomTerm variable = tom_make_Variable(tom_get_slot_Variable_option(tom_match3_1_1),tom_make_PositionName(appendNumber(index,path)),tom_variableType,tom_empty_list_concConstraint()) ;
          // the UnamedBlock encapsulation is needed for Caml
        return tom_make_Let(variable,tom_make_Cast(tom_variableType,tom_make_TomTermToExpression(tom_match3_1_1)),tom_make_UnamedBlock(tom_cons_list_concInstruction(body,tom_empty_list_concInstruction()))) ;
      } }} } if(tom_is_fun_sym_manyTomList(tom_match3_1) ||  false ) { { TomTerm tom_match3_1_1=tom_get_slot_manyTomList_head(tom_match3_1); if(tom_is_fun_sym_FunctionCall(tom_match3_1_1) || tom_is_fun_sym_BuildTerm(tom_match3_1_1) ||  false ) { { TomName tom_match3_1_1_1=tom_get_slot_BuildTerm_astName(tom_match3_1_1); if(tom_is_fun_sym_Name(tom_match3_1_1_1) ||  false ) {

 
        body = collectVariableFromSubjectList(tom_get_slot_manyTomList_tail(tom_match3_1) ,index+1,path,body);
        TomSymbol tomSymbol = symbolTable().getSymbol(tom_get_slot_Name_string(tom_match3_1_1_1) );
        TomType tomType = getSymbolCodomain(tomSymbol);
        TomTerm variable = tom_make_Variable(option(),tom_make_PositionName(appendNumber(index,path)),tomType,tom_empty_list_concConstraint()) ;
        return tom_make_Let(variable,tom_make_TomTermToExpression(tom_match3_1_1),body) ;
       }} }} } if(tom_is_fun_sym_manyTomList(tom_match3_1) ||  false ) {

 
        throw new TomRuntimeException(new Throwable("collectVariableFromSubjectList: strange term: " + tom_get_slot_manyTomList_head(tom_match3_1) ));
       }}}

 
    return tom_make_Nop() ;
  }

    /*
     * build a list of instructions from a list of automata
     */
  private InstructionList automataListCompileMatchingList(TomList automataList, boolean generatedMatch) {
     { TomList tom_match4_1=(( TomList)automataList);{ if(tom_is_fun_sym_emptyTomList(tom_match4_1) ||  false ) {
  return tom_make_emptyInstructionList() ;  } if(tom_is_fun_sym_manyTomList(tom_match4_1) ||  false ) { { TomTerm tom_match4_1_1=tom_get_slot_manyTomList_head(tom_match4_1); if(tom_is_fun_sym_Automata(tom_match4_1_1) ||  false ) { { OptionList tom_optionList=tom_get_slot_Automata_option(tom_match4_1_1); { Instruction tom_instruction=tom_get_slot_Automata_inst(tom_match4_1_1);
 
        InstructionList newList = automataListCompileMatchingList(tom_get_slot_manyTomList_tail(tom_match4_1) , generatedMatch);

        if(!generatedMatch && debugMode) {
          String debugKey = getDebug(tom_optionList );
          Instruction tl1 = tom_make_TargetLanguageToInstruction(tom_make_ITL( "jtom.debug.TomDebugger.debugger.enteringPattern(\"" +debugKey + "\");\n")) ;
          Instruction tl2 = tom_make_TargetLanguageToInstruction(tom_make_ITL( "jtom.debug.TomDebugger.debugger.leavingPattern(\"" +debugKey + "\");\n")) ;
          if(!hasDefaultCase(tom_optionList )) {
            tom_instruction  = tom_make_UnamedBlock(tom_cons_list_concInstruction(tl1,tom_cons_list_concInstruction(tom_instruction,tom_cons_list_concInstruction(tl2,tom_empty_list_concInstruction())))) ;
          } else {
            tom_instruction  = tom_make_UnamedBlock(tom_cons_list_concInstruction(tl1,tom_cons_list_concInstruction(tom_instruction,tom_empty_list_concInstruction()))) ;
          }
        }
         
        if(getLabel(tom_optionList ) != null) {
            /*
             * if a label is assigned to a pattern (label:pattern -> action)
             * we generate corresponding labeled-block
             */
          tom_instruction  = tom_make_NamedBlock(getLabel(tom_optionList) .getString(),tom_cons_list_concInstruction(tom_instruction,tom_empty_list_concInstruction()))
 ;
          					 
        }
        return tom_cons_list_concInstruction(tom_make_CompiledPattern(tom_get_slot_Automata_patternList(tom_match4_1_1),tom_instruction),tom_append_list_concInstruction(newList,tom_empty_list_concInstruction())) ;
      }} }} }}}
 
    return null;
  }
  
    /*
     * ------------------------------------------------------------
     * Generate a matching automaton
     * ------------------------------------------------------------
     */
  
    /*
     * given a pattern, this function generatesthe discrimitation test on the root symbol
     * and recursively calls the algorithm on subterms
     */
  Instruction genSyntacticMatchingAutomata(Instruction action,
                                           TomList termList,
                                           TomNumberList rootpath,
                                           int indexTerm) {
    TomNumberList path = appendNumber(indexTerm,rootpath);
        
     { TomList tom_match5_1=(( TomList)termList);{ if(tom_is_fun_sym_emptyTomList(tom_match5_1) ||  false ) {
  
        return action;
       } if(tom_is_fun_sym_manyTomList(tom_match5_1) ||  false ) { { TomTerm tom_match5_1_1=tom_get_slot_manyTomList_head(tom_match5_1); if(tom_is_fun_sym_Variable(tom_match5_1_1) ||  false ) {


 
        Instruction subAction = genSyntacticMatchingAutomata(action,tom_get_slot_manyTomList_tail(tom_match5_1) ,rootpath,indexTerm+1);
        Expression source = tom_make_TomTermToExpression(tom_make_Variable(option(),tom_make_PositionName(path),tom_get_slot_Variable_astType(tom_match5_1_1),tom_empty_list_concConstraint())) ;
        return buildLet(tom_match5_1_1 , source, subAction);
       }} } if(tom_is_fun_sym_manyTomList(tom_match5_1) ||  false ) { { TomTerm tom_match5_1_1=tom_get_slot_manyTomList_head(tom_match5_1); if(tom_is_fun_sym_UnamedVariable(tom_match5_1_1) ||  false ) {          Instruction subAction = genSyntacticMatchingAutomata(action,tom_get_slot_manyTomList_tail(tom_match5_1) ,rootpath,indexTerm+1);         Expression source = tom_make_TomTermToExpression(tom_make_Variable(option(),tom_make_PositionName(path),tom_get_slot_UnamedVariable_astType(tom_match5_1_1),tom_empty_list_concConstraint())) ;         return buildLet(tom_match5_1_1 , source, subAction);        }} } if(tom_is_fun_sym_manyTomList(tom_match5_1) ||  false ) { { TomTerm tom_match5_1_1=tom_get_slot_manyTomList_head(tom_match5_1); if(tom_is_fun_sym_Appl(tom_match5_1_1) ||  false ) { { TomTerm tom_currentTerm=tom_match5_1_1; { NameList tom_match5_1_1_2=tom_get_slot_Appl_nameList(tom_match5_1_1); if(tom_is_fun_sym_concTomName(tom_match5_1_1_2) ||  false ) { { NameList tom_match5_1_1_2_list1=tom_match5_1_1_2; if(!(tom_is_empty_NameList(tom_match5_1_1_2_list1))) { { TomName tom_match5_1_1_2_1=tom_get_head_NameList(tom_match5_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match5_1_1_2_1) ||  false ) { { TomList tom_termArgs=tom_get_slot_Appl_args(tom_match5_1_1);

 
        Instruction subAction = genSyntacticMatchingAutomata(action,tom_get_slot_manyTomList_tail(tom_match5_1) ,rootpath,indexTerm+1);
        TomSymbol tomSymbol = symbolTable().getSymbol(tom_get_slot_Name_string(tom_match5_1_1_2_1) );
        TomTypeList termTypeList = tomSymbol.getTypesToType().getDomain();
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        
          // SUCCES
        TomTerm subjectVariableAST =  tom_make_Variable(option(),tom_make_PositionName(path),termType,tom_empty_list_concConstraint()) ;
        Instruction automataInstruction;
        if(isListOperator(tomSymbol)) {
            /*
             * store the subject into an internal variable
             * call genListMatchingAutomata with the new internal variable
             */
          int indexSubterm = 1;
          TomNumberList newPath = (TomNumberList) path.append(tom_make_ListNumber(makeNumber(indexSubterm)) );
          TomTerm newSubjectVariableAST =  tom_make_VariableStar(option(),tom_make_PositionName(newPath),termType,tom_empty_list_concConstraint()) ;
          boolean ensureNotEmptyList = true;
          Instruction automata = genListMatchingAutomata(new MatchingParameter(
                                                           tomSymbol,path,subAction,
                                                           newSubjectVariableAST,
                                                           newSubjectVariableAST),
                                                         tom_termArgs ,
                                                         indexSubterm,
                                                         ensureNotEmptyList);
          automataInstruction = tom_make_LetRef(newSubjectVariableAST,tom_make_TomTermToExpression(subjectVariableAST),automata)

 ;
        } else if(isArrayOperator(tomSymbol)) {
          int indexSubterm = 1;
          TomNumberList newPathList = (TomNumberList) path.append(tom_make_ListNumber(makeNumber(indexSubterm)) );
          TomNumberList newPathIndex = (TomNumberList) path.append(tom_make_IndexNumber(makeNumber(indexSubterm)) );
          TomTerm newVariableListAST = tom_make_VariableStar(option(),tom_make_PositionName(newPathList),termType,tom_empty_list_concConstraint()) ;
          TomTerm newVariableIndexAST = tom_make_Variable(option(),tom_make_PositionName(newPathIndex),symbolTable() .getIntType(),tom_empty_list_concConstraint()) ;
          boolean ensureNotEmptyList = true;
          Instruction automata = genArrayMatchingAutomata(new MatchingParameter(
                                                            tomSymbol,path,subAction,
                                                            newVariableListAST, newVariableIndexAST),
                                                          tom_termArgs ,
                                                          indexSubterm,
                                                          ensureNotEmptyList);
          Expression glZero = tom_make_TomTermToExpression(tom_make_TargetLanguageToTomTerm(tom_make_ITL( "0"))) ;
          automataInstruction = tom_make_Let(newVariableIndexAST,glZero,tom_make_Let(newVariableListAST,tom_make_TomTermToExpression(subjectVariableAST),automata))


 ;
        } else {
          int indexSubterm = 0;
          Instruction automata = genSyntacticMatchingAutomata(subAction,tom_termArgs ,path,indexSubterm+1);
          automataInstruction = collectSubtermFromSubjectList(tom_termArgs,termTypeList,tomSymbol,subjectVariableAST,indexSubterm,path,automata) ; 
        }
        
          /* TODO:remove old things
             TomTerm annotedVariable = getAnnotedVariable(optionList);
             if(annotedVariable != null) {
             automataInstruction = buildLet(annotedVariable,`TomTermToExpression(subjectVariableAST),automataInstruction);
             }
          */

        automataInstruction = compileConstraint(tom_currentTerm ,tom_make_TomTermToExpression(subjectVariableAST) ,automataInstruction);

        Expression cond = expandDisjunction(tom_make_EqualFunctionSymbol(termType,subjectVariableAST,tom_currentTerm)) ;
        Instruction test = tom_make_IfThenElse(cond,automataInstruction,tom_make_Nop()) ;
        return test;
      } }} }} }}} }} }

 
        System.out.println("GenSyntacticMatchingAutomata strange term: " + termList);
        throw new TomRuntimeException(new Throwable("GenSyntacticMatchingAutomata strange term: " + termList));
      }}
 
  }

    /*
     * function which compiles list-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  Instruction genListMatchingAutomata(MatchingParameter p,
                                      TomList termList,
                                      int indexTerm,
                                      boolean ensureNotEmptyList) {
     { TomList tom_match6_1=(( TomList)termList);{ if(tom_is_fun_sym_emptyTomList(tom_match6_1) ||  false ) {
 
          /*
           * nothing to compile
           * just check that the subject is empty
           */
        return genIsEmptyList(p .subjectListName,p .action,tom_make_Nop()) ;
       } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { TomTerm tom_match6_1_1=tom_get_slot_manyTomList_head(tom_match6_1); if(tom_is_fun_sym_Variable(tom_match6_1_1) ||  false ) {


 
          /*
           * get an element and store it
           */
        Instruction subAction = genListMatchingAutomata(p,tom_get_slot_manyTomList_tail(tom_match6_1) ,indexTerm+1,true);
        return genGetElementList(p.subjectListName, tom_match6_1_1 , tom_get_slot_Variable_astType(tom_match6_1_1) , subAction, ensureNotEmptyList);
       }} } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { TomTerm tom_match6_1_1=tom_get_slot_manyTomList_head(tom_match6_1); if(tom_is_fun_sym_UnamedVariable(tom_match6_1_1) ||  false ) {            /*            * get an element and store it            */         Instruction subAction = genListMatchingAutomata(p,tom_get_slot_manyTomList_tail(tom_match6_1) ,indexTerm+1,true);         return genGetElementList(p.subjectListName, tom_match6_1_1 , tom_get_slot_UnamedVariable_astType(tom_match6_1_1) , subAction, ensureNotEmptyList);        }} } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { TomTerm tom_match6_1_1=tom_get_slot_manyTomList_head(tom_match6_1); if(tom_is_fun_sym_Appl(tom_match6_1_1) ||  false ) { { NameList tom_match6_1_1_2=tom_get_slot_Appl_nameList(tom_match6_1_1); if(tom_is_fun_sym_concTomName(tom_match6_1_1_2) ||  false ) { { NameList tom_match6_1_1_2_list1=tom_match6_1_1_2; if(!(tom_is_empty_NameList(tom_match6_1_1_2_list1))) { { TomName tom_match6_1_1_2_1=tom_get_head_NameList(tom_match6_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match6_1_1_2_1) ||  false ) {

 
          /*
           * get an element
           * perform syntactic matching
           */
        Instruction subAction = genListMatchingAutomata(p,tom_get_slot_manyTomList_tail(tom_match6_1) ,indexTerm+1,true);

        subAction = genSyntacticMatchingAutomata(subAction,tom_cons_list_concTomTerm(tom_match6_1_1,tom_empty_list_concTomTerm()),p .path,indexTerm) ;
        TomSymbol tomSymbol = symbolTable().getSymbol(tom_get_slot_Name_string(tom_match6_1_1_2_1) );
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        TomNumberList newPath  = appendNumber(indexTerm,p.path);
        TomTerm var =  tom_make_Variable(option(),tom_make_PositionName(newPath),termType,tom_empty_list_concConstraint()) ;
        return genGetElementList(p.subjectListName, var, termType, subAction, ensureNotEmptyList);
       }} }} }} }} } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { TomTerm tom_match6_1_1=tom_get_slot_manyTomList_head(tom_match6_1); if(tom_is_fun_sym_VariableStar(tom_match6_1_1) ||  false ) { { TomTerm tom_var=tom_match6_1_1; { TomType tom_termType=tom_get_slot_VariableStar_astType(tom_match6_1_1); { TomList tom_termTail=tom_get_slot_manyTomList_tail(tom_match6_1);


 
          /*
           * 3 cases:
           * - tail = emptyList
           * - tail = only VariableStar or UnamedVariableStar
           * - tail = other
           */
        if(tom_termTail .isEmpty()) {
            /*
             * generate:
             * ---------
             * Let E_n = subjectList;
             * ...
             */
          Expression source = tom_make_TomTermToExpression(tom_make_Ref(p .subjectListName)) ;
          return buildLet(tom_var , source, p.action);
        } else {
            /*
             * generate:
             * ---------
             * Let begin_i = subjectList;
             * LetRef end_i   = subjectList;
             * ...
             */
          Instruction subAction = genListMatchingAutomata(p,tom_termTail ,indexTerm+1,false);
          TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );
          TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );
          TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),tom_termType,tom_empty_list_concConstraint()) ;
          TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),tom_termType,tom_empty_list_concConstraint()) ;

          Expression source = tom_make_GetSliceList(p .symbol .getAstName(),variableBeginAST,tom_make_Ref(variableEndAST)) ;
          Instruction let = buildLet(tom_var , source, subAction);
          Instruction tailExp = tom_make_Assign(variableEndAST,tom_make_GetTail(tom_make_Ref(variableEndAST))) ;
          Instruction loop;
          if(containOnlyVariableStar(tom_termTail )) {
              /*
               * do {
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
               *   ...
               *   if(!IS_EMPTY_TomList(end_i) )
               *     end_i = (TomList) GET_TAIL_TomList(end_i);
               *   subjectList = end_i;
               * } while( !IS_EMPTY_TomList(end_i) )
               */
            Instruction assign1 = genIsEmptyList(tom_make_Ref(variableEndAST),tom_make_Nop(),tailExp) ;
            Instruction assign2 = tom_make_Assign(p .subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST))) ;
            loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_cons_list_concInstruction(assign2,tom_empty_list_concInstruction())))),tom_make_Not(tom_make_IsEmptyList(tom_make_Ref(variableEndAST)))) ;
          } else {
              /*
               * case (X*,y,...)
               * no longer necessary to check if the list is not empty
               * to extract the 'y'
               */
            
              /*
               * while( !IS_EMPTY_TomList(end_i) ) {
               *   subjectList = end_i;
               *   * SUBSTITUTION: E_i
               *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
               *   ...
               *   end_i = (TomList) GET_TAIL_TomList(end_i);
               * } 
               */

            Instruction assign1 = tailExp;
            Instruction letAssign = tom_make_LetAssign(p .subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_empty_list_concInstruction())))) ;
            loop = tom_make_WhileDo(tom_make_Not(tom_make_IsEmptyList(tom_make_Ref(variableEndAST))),letAssign) ;
          }
          Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListName)),loop)

 ;
          Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListName)),letEnd)

 ;
          return letBegin;
        }
      }}} }} } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { TomTerm tom_match6_1_1=tom_get_slot_manyTomList_head(tom_match6_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match6_1_1) ||  false ) { { TomTerm tom_var=tom_match6_1_1; { TomType tom_termType=tom_get_slot_UnamedVariableStar_astType(tom_match6_1_1); { TomList tom_termTail=tom_get_slot_manyTomList_tail(tom_match6_1);            /*            * 3 cases:            * - tail = emptyList            * - tail = only VariableStar or UnamedVariableStar            * - tail = other            */         if(tom_termTail .isEmpty()) {             /*              * generate:              * ---------              * Let E_n = subjectList;              * ...              */           Expression source = tom_make_TomTermToExpression(tom_make_Ref(p .subjectListName)) ;           return buildLet(tom_var , source, p.action);         } else {             /*              * generate:              * ---------              * Let begin_i = subjectList;              * LetRef end_i   = subjectList;              * ...              */           Instruction subAction = genListMatchingAutomata(p,tom_termTail ,indexTerm+1,false);           TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );           TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );           TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),tom_termType,tom_empty_list_concConstraint()) ;           TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),tom_termType,tom_empty_list_concConstraint()) ;            Expression source = tom_make_GetSliceList(p .symbol .getAstName(),variableBeginAST,tom_make_Ref(variableEndAST)) ;           Instruction let = buildLet(tom_var , source, subAction);           Instruction tailExp = tom_make_Assign(variableEndAST,tom_make_GetTail(tom_make_Ref(variableEndAST))) ;           Instruction loop;           if(containOnlyVariableStar(tom_termTail )) {               /*                * do {                *   * SUBSTITUTION: E_i                *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);                *   ...                *   if(!IS_EMPTY_TomList(end_i) )                *     end_i = (TomList) GET_TAIL_TomList(end_i);                *   subjectList = end_i;                * } while( !IS_EMPTY_TomList(end_i) )                */             Instruction assign1 = genIsEmptyList(tom_make_Ref(variableEndAST),tom_make_Nop(),tailExp) ;             Instruction assign2 = tom_make_Assign(p .subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST))) ;             loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_cons_list_concInstruction(assign2,tom_empty_list_concInstruction())))),tom_make_Not(tom_make_IsEmptyList(tom_make_Ref(variableEndAST)))) ;           } else {               /*                * case (X*,y,...)                * no longer necessary to check if the list is not empty                * to extract the 'y'                */                            /*                * while( !IS_EMPTY_TomList(end_i) ) {                *   subjectList = end_i;                *   * SUBSTITUTION: E_i                *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);                *   ...                *   end_i = (TomList) GET_TAIL_TomList(end_i);                * }                 */              Instruction assign1 = tailExp;             Instruction letAssign = tom_make_LetAssign(p .subjectListName,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(assign1,tom_empty_list_concInstruction())))) ;             loop = tom_make_WhileDo(tom_make_Not(tom_make_IsEmptyList(tom_make_Ref(variableEndAST))),letAssign) ;           }           Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListName)),loop) ;           Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListName)),letEnd) ;           return letBegin;         }       }}} }} }

 
        System.out.println("GenListMatchingAutomata strange termList: " + termList);
        throw new TomRuntimeException(new Throwable("GenListMatchingAutomata strange termList: " + termList));
      }}
 
  }

  private boolean containOnlyVariableStar(TomList termList) {
     { TomList tom_match7_1=(( TomList)termList);{ if(tom_is_fun_sym_emptyTomList(tom_match7_1) ||  false ) {
 
        return true;
       } if(tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { if(tom_is_fun_sym_VariableStar(tom_get_slot_manyTomList_head(tom_match7_1)) ||  false ) {


 
        return containOnlyVariableStar(tom_get_slot_manyTomList_tail(tom_match7_1) );
       } } if(tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { if(tom_is_fun_sym_UnamedVariableStar(tom_get_slot_manyTomList_head(tom_match7_1)) ||  false ) {          return containOnlyVariableStar(tom_get_slot_manyTomList_tail(tom_match7_1) );        } }}}
 
    return false;
  }

  
  private Instruction genIsEmptyList(TomTerm subjectListName,
                                     Instruction succes, Instruction failure) {
      /*
       * generate:
       * ---------
       * if(IS_EMPTY_TomList(subjectList)) {
       *   ...
       * }
       */
    return tom_make_IfThenElse(tom_make_IsEmptyList(tom_make_Ref(subjectListName)),succes,failure) ;
  }


  private Instruction genGetElementList(TomTerm subjectListName, TomTerm var,
                                    TomType termType,
                                    Instruction subAction, boolean notEmptyList) {
      /*
       * generate:
       * ---------
       * if(!IS_EMPTY_TomList(subjectList)) {
       *   Let TomTerm var = (TomTerm) GET_HEAD_TomList(subjectList);
       *   subjectList = (TomList) GET_TAIL_TomList(subjectList);
       *   ...
       * }
       */
    Instruction body = tom_make_LetAssign(subjectListName,tom_make_GetTail(tom_make_Ref(subjectListName)),subAction) ;
    Expression source = tom_make_GetHead(termType,tom_make_Ref(subjectListName)) ;
    Instruction let = buildLet(var, source, body);
    if(notEmptyList) {
      return genIsEmptyList(subjectListName,tom_make_Nop(),let) ;
    } else {
      return let;
    }
  }
  
    /*
     * function which compiles array-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  Instruction genArrayMatchingAutomata(MatchingParameter p,
                                       TomList termList,
                                       int indexTerm,
                                       boolean ensureNotEmptyList) {
     { TomList tom_match8_1=(( TomList)termList);{ if(tom_is_fun_sym_emptyTomList(tom_match8_1) ||  false ) {
 
          /*
           * nothing to compile
           * just check that the subject is empty
           */
        return genIsEmptyArray(p .subjectListName,p .subjectListIndex,p .action,tom_make_Nop()) ;
       } if(tom_is_fun_sym_manyTomList(tom_match8_1) ||  false ) { { TomTerm tom_match8_1_1=tom_get_slot_manyTomList_head(tom_match8_1); if(tom_is_fun_sym_Variable(tom_match8_1_1) ||  false ) {


 
          /*
           * get an element and store it
           */
        Instruction subAction = genArrayMatchingAutomata(p,tom_get_slot_manyTomList_tail(tom_match8_1) ,indexTerm+1,true);
        return genGetElementArray(p.subjectListName, p.subjectListIndex, tom_match8_1_1 , tom_get_slot_Variable_astType(tom_match8_1_1) , subAction, ensureNotEmptyList);
       }} } if(tom_is_fun_sym_manyTomList(tom_match8_1) ||  false ) { { TomTerm tom_match8_1_1=tom_get_slot_manyTomList_head(tom_match8_1); if(tom_is_fun_sym_UnamedVariable(tom_match8_1_1) ||  false ) {            /*            * get an element and store it            */         Instruction subAction = genArrayMatchingAutomata(p,tom_get_slot_manyTomList_tail(tom_match8_1) ,indexTerm+1,true);         return genGetElementArray(p.subjectListName, p.subjectListIndex, tom_match8_1_1 , tom_get_slot_UnamedVariable_astType(tom_match8_1_1) , subAction, ensureNotEmptyList);        }} } if(tom_is_fun_sym_manyTomList(tom_match8_1) ||  false ) { { TomTerm tom_match8_1_1=tom_get_slot_manyTomList_head(tom_match8_1); if(tom_is_fun_sym_Appl(tom_match8_1_1) ||  false ) { { NameList tom_match8_1_1_2=tom_get_slot_Appl_nameList(tom_match8_1_1); if(tom_is_fun_sym_concTomName(tom_match8_1_1_2) ||  false ) { { NameList tom_match8_1_1_2_list1=tom_match8_1_1_2; if(!(tom_is_empty_NameList(tom_match8_1_1_2_list1))) { { TomName tom_match8_1_1_2_1=tom_get_head_NameList(tom_match8_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_1_2_1) ||  false ) {

 
          /*
           * get an element
           * perform syntactic matching
           */
        Instruction subAction = genArrayMatchingAutomata(p,tom_get_slot_manyTomList_tail(tom_match8_1) ,indexTerm+1,true);

        subAction = genSyntacticMatchingAutomata(subAction,tom_cons_list_concTomTerm(tom_match8_1_1,tom_empty_list_concTomTerm()),p .path,indexTerm) ;
        TomSymbol tomSymbol = symbolTable().getSymbol(tom_get_slot_Name_string(tom_match8_1_1_2_1) );
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        TomNumberList newPath  = appendNumber(indexTerm,p.path);
        TomTerm var =  tom_make_Variable(option(),tom_make_PositionName(newPath),termType,tom_empty_list_concConstraint()) ;

        return genGetElementArray(p.subjectListName, p.subjectListIndex, var, termType, subAction, ensureNotEmptyList);
       }} }} }} }} } if(tom_is_fun_sym_manyTomList(tom_match8_1) ||  false ) { { TomTerm tom_match8_1_1=tom_get_slot_manyTomList_head(tom_match8_1); if(tom_is_fun_sym_VariableStar(tom_match8_1_1) ||  false ) { { TomTerm tom_var=tom_match8_1_1; { TomList tom_termTail=tom_get_slot_manyTomList_tail(tom_match8_1);


 
          /*
           * 3 cases:
           * - tail = emptyList
           * - tail = only VariableStar or UnamedVariableStar
           * - tail = other
           */
        if(tom_termTail .isEmpty()) {
            /*
             * generate:
             * ---------
             * Let E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));
             * ...
             */
          Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),tom_make_Ref(p .subjectListName),tom_make_Ref(p .subjectListIndex),tom_make_ExpressionToTomTerm(tom_make_GetSize(p .subjectListName)))



 ;
          Instruction let = buildLet(tom_var , source, p.action);
          return let;
        } else {
          /*
           * generate:
           * ---------
           * int begin_i = subjectIndex;
           * int end_i   = subjectIndex;
           * ...
           */
          Instruction subAction = genArrayMatchingAutomata(p,tom_termTail ,indexTerm+1,false);
          TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );
          TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );
          TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),symbolTable() .getIntType(),tom_empty_list_concConstraint()) ;
          TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),symbolTable() .getIntType(),tom_empty_list_concConstraint()) ;

          Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),tom_make_Ref(p .subjectListName),variableBeginAST,tom_make_Ref(variableEndAST))


 ;

          Instruction let = buildLet(tom_var , source, subAction);
          Instruction increment = tom_make_Assign(variableEndAST,tom_make_AddOne(tom_make_Ref(variableEndAST))) ;
          Instruction loop;
          if(containOnlyVariableStar(tom_termTail )) {
            /*
             * do {
             *   * SUBSTITUTION: E_i
             *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
             *   ...
             *   end_i++;
             *   subjectIndex = end_i;
             * } while( !IS_EMPTY_TomList(subjectList) )
             */
            Instruction assign = tom_make_Assign(p .subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST))) ;
            
            loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_cons_list_concInstruction(assign,tom_empty_list_concInstruction())))),tom_make_Not(tom_make_IsEmptyArray(tom_make_Ref(p .subjectListName),tom_make_Ref(p .subjectListIndex))))
 ;
          } else {
            /*
             * while( !IS_EMPTY_TomList(end_isubjectList) ) {
             *   * SUBSTITUTION: E_i
             *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
             *   ...
             *   end_i++;
             *   subjectIndex = end_i;
             * } 
             */
            Instruction letAssign = tom_make_LetAssign(p .subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_empty_list_concInstruction())))) ;
            loop = tom_make_WhileDo(tom_make_Not(tom_make_IsEmptyArray(tom_make_Ref(p .subjectListName),tom_make_Ref(variableEndAST))),letAssign)
 ;
            
          }
          Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListIndex)),loop)

 ;
          Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListIndex)),letEnd)

 ;
          return letBegin;
        }
      }} }} } if(tom_is_fun_sym_manyTomList(tom_match8_1) ||  false ) { { TomTerm tom_match8_1_1=tom_get_slot_manyTomList_head(tom_match8_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match8_1_1) ||  false ) { { TomTerm tom_var=tom_match8_1_1; { TomList tom_termTail=tom_get_slot_manyTomList_tail(tom_match8_1);            /*            * 3 cases:            * - tail = emptyList            * - tail = only VariableStar or UnamedVariableStar            * - tail = other            */         if(tom_termTail .isEmpty()) {             /*              * generate:              * ---------              * Let E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));              * ...              */           Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),tom_make_Ref(p .subjectListName),tom_make_Ref(p .subjectListIndex),tom_make_ExpressionToTomTerm(tom_make_GetSize(p .subjectListName))) ;           Instruction let = buildLet(tom_var , source, p.action);           return let;         } else {           /*            * generate:            * ---------            * int begin_i = subjectIndex;            * int end_i   = subjectIndex;            * ...            */           Instruction subAction = genArrayMatchingAutomata(p,tom_termTail ,indexTerm+1,false);           TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );           TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );           TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),symbolTable() .getIntType(),tom_empty_list_concConstraint()) ;           TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),symbolTable() .getIntType(),tom_empty_list_concConstraint()) ;            Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),tom_make_Ref(p .subjectListName),variableBeginAST,tom_make_Ref(variableEndAST)) ;            Instruction let = buildLet(tom_var , source, subAction);           Instruction increment = tom_make_Assign(variableEndAST,tom_make_AddOne(tom_make_Ref(variableEndAST))) ;           Instruction loop;           if(containOnlyVariableStar(tom_termTail )) {             /*              * do {              *   * SUBSTITUTION: E_i              *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);              *   ...              *   end_i++;              *   subjectIndex = end_i;              * } while( !IS_EMPTY_TomList(subjectList) )              */             Instruction assign = tom_make_Assign(p .subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST))) ;                          loop = tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_cons_list_concInstruction(assign,tom_empty_list_concInstruction())))),tom_make_Not(tom_make_IsEmptyArray(tom_make_Ref(p .subjectListName),tom_make_Ref(p .subjectListIndex)))) ;           } else {             /*              * while( !IS_EMPTY_TomList(end_isubjectList) ) {              *   * SUBSTITUTION: E_i              *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);              *   ...              *   end_i++;              *   subjectIndex = end_i;              * }               */             Instruction letAssign = tom_make_LetAssign(p .subjectListIndex,tom_make_TomTermToExpression(tom_make_Ref(variableEndAST)),tom_make_UnamedBlock(tom_cons_list_concInstruction(let,tom_cons_list_concInstruction(increment,tom_empty_list_concInstruction())))) ;             loop = tom_make_WhileDo(tom_make_Not(tom_make_IsEmptyArray(tom_make_Ref(p .subjectListName),tom_make_Ref(variableEndAST))),letAssign) ;                        }           Instruction letEnd = tom_make_LetRef(variableEndAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListIndex)),loop) ;           Instruction letBegin = tom_make_Let(variableBeginAST,tom_make_TomTermToExpression(tom_make_Ref(p .subjectListIndex)),letEnd) ;           return letBegin;         }       }} }} }


 
        System.out.println("GenArrayMatchingAutomata strange termList: " + termList);
        throw new TomRuntimeException(new Throwable("GenArrayMatchingAutomata strange termList: " + termList));
      }}
 
  }

  private Instruction genIsEmptyArray(TomTerm subjectListName,
                                      TomTerm subjectListIndex,
                                     Instruction succes, Instruction failure) {
      /*
       * generate:
       * ---------
       * if(IS_EMPTY_TomList(subjectList,subjectIndex)) {
       *   ...
       * }
       */
    return tom_make_IfThenElse(tom_make_IsEmptyArray(tom_make_Ref(subjectListName),tom_make_Ref(subjectListIndex)),succes,failure) ;
  }


  private Instruction genGetElementArray(TomTerm subjectListName, 
                                         TomTerm subjectListIndex, 
                                         TomTerm var,
                                         TomType termType,
                                         Instruction subAction, 
                                         boolean notEmptyList) {
      /*
       * generate:
       * ---------
       * if(!IS_EMPTY_TomList(subjectList,subjectIndex)) {
       *   Let TomTerm var = (TomTerm) GET_HEAD_TomList(subjectList);
       *   subjectList = (TomList) GET_TAIL_TomList(subjectList);
       *   ...
       * }
       */
    Instruction body = tom_make_LetAssign(subjectListIndex,tom_make_AddOne(tom_make_Ref(subjectListIndex)),subAction) ;
    Expression source = tom_make_GetElement(termType,subjectListName,subjectListIndex) ;
    Instruction let = buildLet(var, source, body);
    if(notEmptyList) {
      return genIsEmptyArray(subjectListName,subjectListIndex,tom_make_Nop(),let) ;
    } else {
      return let;
    }
  }


    /*
     * given a list of subject t1,...,tn
     * declare/assign internal matching variables: match_path_i = ti
     */
  private Instruction collectSubtermFromSubjectList(TomList termArgList, TomTypeList termTypeList,
                                                    TomSymbol tomSymbol,TomTerm subjectVariableAST, 
                                                    int indexSubterm, TomNumberList path, Instruction body) {
    TomName termNameAST = tomSymbol.getAstName();
     { TomList tom_match9_1=(( TomList)termArgList);{ if(tom_is_fun_sym_emptyTomList(tom_match9_1) ||  false ) {
  return body;  } if(tom_is_fun_sym_manyTomList(tom_match9_1) ||  false ) { { TomTerm tom_subtermArg=tom_get_slot_manyTomList_head(tom_match9_1);

 
        body = collectSubtermFromSubjectList(tom_get_slot_manyTomList_tail(tom_match9_1) ,termTypeList.getTail(),
                                             tomSymbol,subjectVariableAST,
                                             indexSubterm+1,path,body);
        if(tom_subtermArg .isUnamedVariable() && !isAnnotedVariable(tom_subtermArg )) {
            // This is an optimisation 
            // Do not assign the subterm: skip the subterm 
          return body;
        } else {
          TomType subtermType = termTypeList.getHead();
          Expression getSubtermAST;
          TomName slotName = getSlotName(tomSymbol, indexSubterm);
          if(slotName == null) {
            getSubtermAST = tom_make_GetSubterm(subtermType,subjectVariableAST,makeNumber(indexSubterm)) ;
          } else {
            getSubtermAST = tom_make_GetSlot(subtermType,termNameAST,slotName .getString(),subjectVariableAST) ;
          }
          TomNumberList newPath  = appendNumber(indexSubterm+1,path);
          TomTerm newVariableAST = tom_make_Variable(option(),tom_make_PositionName(newPath),subtermType,tom_empty_list_concConstraint()) ;
          return tom_make_Let(newVariableAST,getSubtermAST,body) ;
        }
      } }}}

 
    return tom_make_Nop() ;
  }

  private Expression expandDisjunction(Expression exp) {
    Expression cond = tom_make_FalseTL() ;
     { Expression tom_match10_1=(( Expression)exp);{ if(tom_is_fun_sym_EqualFunctionSymbol(tom_match10_1) ||  false ) { { TomTerm tom_match10_1_3=tom_get_slot_EqualFunctionSymbol_exp2(tom_match10_1); if(tom_is_fun_sym_Appl(tom_match10_1_3) ||  false ) { { NameList tom_nameList=tom_get_slot_Appl_nameList(tom_match10_1_3);
 
        while(!tom_nameList .isEmpty()) {
          TomName name = tom_nameList .getHead();
          Expression check = tom_make_EqualFunctionSymbol(tom_get_slot_EqualFunctionSymbol_astType(tom_match10_1),tom_get_slot_EqualFunctionSymbol_exp1(tom_match10_1),tom_make_Appl(tom_get_slot_Appl_option(tom_match10_1_3),tom_cons_list_concTomName(name,tom_empty_list_concTomName()),tom_get_slot_Appl_args(tom_match10_1_3),tom_empty_list_concConstraint())) ;
          cond = tom_make_Or(check,cond) ;
          tom_nameList  = tom_nameList .getTail();
        }
      } }} }}}
 
    return cond;
  }

	private Instruction buildLet(TomTerm dest,
                               Expression source,
                               Instruction body) {
      // Take care of constraints
    body = compileConstraint(dest,source,body);
		return tom_make_Let(dest,source,body) ;
  }

	private Instruction compileConstraint(TomTerm subject, Expression source, Instruction body) {
     { TomTerm tom_match11_1=(( TomTerm)subject);{ if(tom_is_fun_sym_VariableStar(tom_match11_1) || tom_is_fun_sym_Variable(tom_match11_1) ||  false ) {
 
				return buildConstraint(tom_get_slot_Variable_constraints(tom_match11_1) ,tom_make_TomTermToExpression(subject) ,body);
       } if(tom_is_fun_sym_UnamedVariableStar(tom_match11_1) || tom_is_fun_sym_UnamedVariable(tom_match11_1) ||  false ) {

 
				return buildConstraint(tom_get_slot_UnamedVariable_constraints(tom_match11_1) ,source,body);
       } if(tom_is_fun_sym_Appl(tom_match11_1) ||  false ) {

 
				return buildConstraint(tom_get_slot_Appl_constraints(tom_match11_1) ,source,body);
       }

 
        throw new TomRuntimeException(new Throwable("compileConstraint: strange subject: " + subject));
      }}
 
  }

	private Instruction buildConstraint(ConstraintList constraints, Expression source, Instruction body) {
     { ConstraintList tom_match12_1=(( ConstraintList)constraints);{ if(tom_is_fun_sym_concConstraint(tom_match12_1) ||  false ) { if(tom_is_empty_ConstraintList(tom_match12_1)) {
 
        return body;
       } } if(tom_is_fun_sym_concConstraint(tom_match12_1) ||  false ) { { ConstraintList tom_match12_1_list1=tom_match12_1; if(!(tom_is_empty_ConstraintList(tom_match12_1_list1))) { { Constraint tom_match12_1_1=tom_get_head_ConstraintList(tom_match12_1_list1); if(tom_is_fun_sym_Equal(tom_match12_1_1) ||  false ) { { TomTerm tom_var=tom_get_slot_Equal_variable(tom_match12_1_1);

 
          //System.out.println("constraint: " + source + " EqualTo " + var);
        Instruction subBody = compileConstraint(tom_var ,source,body);
        return buildConstraint(tom_get_tail_ConstraintList(tom_match12_1_list1),source,tom_make_IfThenElse(tom_make_EqualTerm(tom_var,tom_make_ExpressionToTomTerm(source)),subBody,tom_make_Nop())) ;
      } }} }} } if(tom_is_fun_sym_concConstraint(tom_match12_1) ||  false ) { { ConstraintList tom_match12_1_list1=tom_match12_1; if(!(tom_is_empty_ConstraintList(tom_match12_1_list1))) { { Constraint tom_match12_1_1=tom_get_head_ConstraintList(tom_match12_1_list1); if(tom_is_fun_sym_AssignTo(tom_match12_1_1) ||  false ) { { TomTerm tom_match12_1_1_1=tom_get_slot_AssignTo_variable(tom_match12_1_1); if(tom_is_fun_sym_VariableStar(tom_match12_1_1_1) || tom_is_fun_sym_Variable(tom_match12_1_1_1) ||  false ) { { TomTerm tom_var=tom_match12_1_1_1;

 
          //System.out.println("constraint: " + source + " AssignTo " + var);
        Instruction subBody = compileConstraint(tom_var ,source,body);
        return buildConstraint(tom_get_tail_ConstraintList(tom_match12_1_list1),source,tom_make_Let(tom_var,source,subBody)) ;
      } }} }} }} } if(tom_is_fun_sym_concConstraint(tom_match12_1) ||  false ) { { ConstraintList tom_match12_1_list1=tom_match12_1; if(!(tom_is_empty_ConstraintList(tom_match12_1_list1))) { { Constraint tom_head=tom_get_head_ConstraintList(tom_match12_1_list1);

 
        throw new TomRuntimeException(new Throwable("buildConstraint: unknown constraint: " + tom_head ));
      } }} }}}
 
    throw new TomRuntimeException(new Throwable("buildConstraint: unknown constraints: " + constraints));
	}


  private class MatchingParameter {
      /*
       * This object is used by matching-algorithms to store common parameters
       * which are not modified during the matching process
       *
       * symbol:           root symbol
       * path:             path up-to the root symbol
       * action:           list of actions to be fired when matching
       * subjectListName:  name of the internal variable supposed to store the subject
       * subjectListIndex: name of the internal variable supposed to store the index
       */
    public TomSymbol symbol;
    public TomNumberList path;
    public Instruction action;
    public TomTerm subjectListName;
    public TomTerm subjectListIndex;

    MatchingParameter(TomSymbol symbol, 
                      TomNumberList path,
                      Instruction action,
                      TomTerm subjectListName,
                      TomTerm subjectListIndex) {
      this.symbol=symbol;
      this.path=path;
      this.action=action;
      this.subjectListName=subjectListName;
      this.subjectListIndex=subjectListIndex;
    }

  }
  
} // end of class
