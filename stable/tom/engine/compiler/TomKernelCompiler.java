/*  Generated by TOM: Do not edit this file */  /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2004 INRIA
			    Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.compiler;
  
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

import jtom.TomBase;
import jtom.adt.tomsignature.types.*;
import jtom.runtime.Collect1;
import jtom.runtime.Replace1;
import aterm.*;
import jtom.exception.TomRuntimeException;

public class TomKernelCompiler extends TomBase {

  private boolean debugMode = false;

  public TomKernelCompiler(jtom.TomEnvironment environment, boolean debugMode) {
    super(environment);
    this.debugMode = debugMode;
  }

// ------------------------------------------------------------
  /*  Generated by TOM: Do not edit this file */ public Object tom_get_fun_sym_String( String t) { return t; }public boolean tom_cmp_fun_sym_String(Object s1, Object s2) { return  s1.equals(s2); }public Object tom_get_subterm_String( String t,  int n) { return null; }public boolean tom_terms_equal_String(Object t1, Object t2) { return t1.equals(t2); }public  int tom_get_fun_sym_int( int t) { return t; }public boolean tom_cmp_fun_sym_int( int s1,  int s2) { return  (s1 == s2); }public Object tom_get_subterm_int( int t,  int n) { return null; }public boolean tom_terms_equal_int( int t1,  int t2) { return (t1 == t2); }public  double tom_get_fun_sym_double( double t) { return t; }public boolean tom_cmp_fun_sym_double( double s1,  double s2) { return  (s1 == s2); }public Object tom_get_subterm_double( double t,  int n) { return null; }public boolean tom_terms_equal_double( double t1,  double t2) { return (t1 == t2); }public Object tom_get_fun_sym_ATerm( aterm.ATerm t) { return ((t instanceof ATermAppl)?((ATermAppl)t).getAFun():null); }public boolean tom_cmp_fun_sym_ATerm(Object s1, Object s2) { return  s1==s2; }public Object tom_get_subterm_ATerm( aterm.ATerm t,  int n) { return (((ATermAppl)t).getArgument(n)); }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_fun_sym_ATermList( aterm.ATermList t) { return ((t instanceof ATermList)?getTomSignatureFactory().getPureFactory().makeAFun("conc",1,false):null); }public boolean tom_cmp_fun_sym_ATermList(Object s1, Object s2) { return  s1==s2; }public boolean tom_terms_equal_ATermList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_ATermList( aterm.ATermList l) { return l.getFirst(); }public  aterm.ATermList tom_get_tail_ATermList( aterm.ATermList l) { return l.getNext(); }public boolean tom_is_empty_ATermList( aterm.ATermList l) { return l.isEmpty(); }public Object tom_get_fun_sym_Declaration( Declaration t) { return null; }public boolean tom_cmp_fun_sym_Declaration(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Declaration( Declaration t,  int n) { return null; }public boolean tom_terms_equal_Declaration(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TypeTermDecl( Declaration t) { return  (t!= null) && t.isTypeTermDecl(); }public  Declaration tom_make_TypeTermDecl( TomName t0,  TomList t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_TypeTermDecl(t0, t1, t2); }public  TomName tom_get_slot_TypeTermDecl_astName( Declaration t) { return  t.getAstName(); }public  TomList tom_get_slot_TypeTermDecl_keywordList( Declaration t) { return  t.getKeywordList(); }public  Option tom_get_slot_TypeTermDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_TypeListDecl( Declaration t) { return  (t!= null) && t.isTypeListDecl(); }public  Declaration tom_make_TypeListDecl( TomName t0,  TomList t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_TypeListDecl(t0, t1, t2); }public  TomName tom_get_slot_TypeListDecl_astName( Declaration t) { return  t.getAstName(); }public  TomList tom_get_slot_TypeListDecl_keywordList( Declaration t) { return  t.getKeywordList(); }public  Option tom_get_slot_TypeListDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_TypeArrayDecl( Declaration t) { return  (t!= null) && t.isTypeArrayDecl(); }public  Declaration tom_make_TypeArrayDecl( TomName t0,  TomList t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_TypeArrayDecl(t0, t1, t2); }public  TomName tom_get_slot_TypeArrayDecl_astName( Declaration t) { return  t.getAstName(); }public  TomList tom_get_slot_TypeArrayDecl_keywordList( Declaration t) { return  t.getKeywordList(); }public  Option tom_get_slot_TypeArrayDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetFunctionSymbolDecl( Declaration t) { return  (t!= null) && t.isGetFunctionSymbolDecl(); }public  Declaration tom_make_GetFunctionSymbolDecl( TomTerm t0,  TargetLanguage t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_GetFunctionSymbolDecl(t0, t1, t2); }public  TomTerm tom_get_slot_GetFunctionSymbolDecl_termArg( Declaration t) { return  t.getTermArg(); }public  TargetLanguage tom_get_slot_GetFunctionSymbolDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_GetFunctionSymbolDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetSubtermDecl( Declaration t) { return  (t!= null) && t.isGetSubtermDecl(); }public  Declaration tom_make_GetSubtermDecl( TomTerm t0,  TomTerm t1,  TargetLanguage t2,  Option t3) { return  getTomSignatureFactory().makeDeclaration_GetSubtermDecl(t0, t1, t2, t3); }public  TomTerm tom_get_slot_GetSubtermDecl_termArg( Declaration t) { return  t.getTermArg(); }public  TomTerm tom_get_slot_GetSubtermDecl_variable( Declaration t) { return  t.getVariable(); }public  TargetLanguage tom_get_slot_GetSubtermDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_GetSubtermDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_IsFsymDecl( Declaration t) { return  (t!= null) && t.isIsFsymDecl(); }public  Declaration tom_make_IsFsymDecl( TomName t0,  TomTerm t1,  TargetLanguage t2,  Option t3) { return  getTomSignatureFactory().makeDeclaration_IsFsymDecl(t0, t1, t2, t3); }public  TomName tom_get_slot_IsFsymDecl_astName( Declaration t) { return  t.getAstName(); }public  TomTerm tom_get_slot_IsFsymDecl_variable( Declaration t) { return  t.getVariable(); }public  TargetLanguage tom_get_slot_IsFsymDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_IsFsymDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetSlotDecl( Declaration t) { return  (t!= null) && t.isGetSlotDecl(); }public  Declaration tom_make_GetSlotDecl( TomName t0,  TomName t1,  TomTerm t2,  TargetLanguage t3,  Option t4) { return  getTomSignatureFactory().makeDeclaration_GetSlotDecl(t0, t1, t2, t3, t4); }public  TomName tom_get_slot_GetSlotDecl_astName( Declaration t) { return  t.getAstName(); }public  TomName tom_get_slot_GetSlotDecl_slotName( Declaration t) { return  t.getSlotName(); }public  TomTerm tom_get_slot_GetSlotDecl_variable( Declaration t) { return  t.getVariable(); }public  TargetLanguage tom_get_slot_GetSlotDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_GetSlotDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_CompareFunctionSymbolDecl( Declaration t) { return  (t!= null) && t.isCompareFunctionSymbolDecl(); }public  Declaration tom_make_CompareFunctionSymbolDecl( TomTerm t0,  TomTerm t1,  TargetLanguage t2,  Option t3) { return  getTomSignatureFactory().makeDeclaration_CompareFunctionSymbolDecl(t0, t1, t2, t3); }public  TomTerm tom_get_slot_CompareFunctionSymbolDecl_symbolArg1( Declaration t) { return  t.getSymbolArg1(); }public  TomTerm tom_get_slot_CompareFunctionSymbolDecl_symbolArg2( Declaration t) { return  t.getSymbolArg2(); }public  TargetLanguage tom_get_slot_CompareFunctionSymbolDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_CompareFunctionSymbolDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_TermsEqualDecl( Declaration t) { return  (t!= null) && t.isTermsEqualDecl(); }public  Declaration tom_make_TermsEqualDecl( TomTerm t0,  TomTerm t1,  TargetLanguage t2,  Option t3) { return  getTomSignatureFactory().makeDeclaration_TermsEqualDecl(t0, t1, t2, t3); }public  TomTerm tom_get_slot_TermsEqualDecl_termArg1( Declaration t) { return  t.getTermArg1(); }public  TomTerm tom_get_slot_TermsEqualDecl_termArg2( Declaration t) { return  t.getTermArg2(); }public  TargetLanguage tom_get_slot_TermsEqualDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_TermsEqualDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetHeadDecl( Declaration t) { return  (t!= null) && t.isGetHeadDecl(); }public  Declaration tom_make_GetHeadDecl( TomTerm t0,  TargetLanguage t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_GetHeadDecl(t0, t1, t2); }public  TomTerm tom_get_slot_GetHeadDecl_var( Declaration t) { return  t.getVar(); }public  TargetLanguage tom_get_slot_GetHeadDecl_tlcode( Declaration t) { return  t.getTlcode(); }public  Option tom_get_slot_GetHeadDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetTailDecl( Declaration t) { return  (t!= null) && t.isGetTailDecl(); }public  Declaration tom_make_GetTailDecl( TomTerm t0,  TargetLanguage t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_GetTailDecl(t0, t1, t2); }public  TomTerm tom_get_slot_GetTailDecl_var( Declaration t) { return  t.getVar(); }public  TargetLanguage tom_get_slot_GetTailDecl_tlcode( Declaration t) { return  t.getTlcode(); }public  Option tom_get_slot_GetTailDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_IsEmptyDecl( Declaration t) { return  (t!= null) && t.isIsEmptyDecl(); }public  Declaration tom_make_IsEmptyDecl( TomTerm t0,  TargetLanguage t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_IsEmptyDecl(t0, t1, t2); }public  TomTerm tom_get_slot_IsEmptyDecl_var( Declaration t) { return  t.getVar(); }public  TargetLanguage tom_get_slot_IsEmptyDecl_tlcode( Declaration t) { return  t.getTlcode(); }public  Option tom_get_slot_IsEmptyDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeEmptyList( Declaration t) { return  (t!= null) && t.isMakeEmptyList(); }public  Declaration tom_make_MakeEmptyList( TomName t0,  TargetLanguage t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_MakeEmptyList(t0, t1, t2); }public  TomName tom_get_slot_MakeEmptyList_astName( Declaration t) { return  t.getAstName(); }public  TargetLanguage tom_get_slot_MakeEmptyList_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_MakeEmptyList_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeAddList( Declaration t) { return  (t!= null) && t.isMakeAddList(); }public  Declaration tom_make_MakeAddList( TomName t0,  TomTerm t1,  TomTerm t2,  TargetLanguage t3,  Option t4) { return  getTomSignatureFactory().makeDeclaration_MakeAddList(t0, t1, t2, t3, t4); }public  TomName tom_get_slot_MakeAddList_astName( Declaration t) { return  t.getAstName(); }public  TomTerm tom_get_slot_MakeAddList_varElt( Declaration t) { return  t.getVarElt(); }public  TomTerm tom_get_slot_MakeAddList_varList( Declaration t) { return  t.getVarList(); }public  TargetLanguage tom_get_slot_MakeAddList_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_MakeAddList_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetElementDecl( Declaration t) { return  (t!= null) && t.isGetElementDecl(); }public  Declaration tom_make_GetElementDecl( TomTerm t0,  TomTerm t1,  TargetLanguage t2,  Option t3) { return  getTomSignatureFactory().makeDeclaration_GetElementDecl(t0, t1, t2, t3); }public  TomTerm tom_get_slot_GetElementDecl_kid1( Declaration t) { return  t.getKid1(); }public  TomTerm tom_get_slot_GetElementDecl_kid2( Declaration t) { return  t.getKid2(); }public  TargetLanguage tom_get_slot_GetElementDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_GetElementDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_GetSizeDecl( Declaration t) { return  (t!= null) && t.isGetSizeDecl(); }public  Declaration tom_make_GetSizeDecl( TomTerm t0,  TargetLanguage t1,  Option t2) { return  getTomSignatureFactory().makeDeclaration_GetSizeDecl(t0, t1, t2); }public  TomTerm tom_get_slot_GetSizeDecl_kid1( Declaration t) { return  t.getKid1(); }public  TargetLanguage tom_get_slot_GetSizeDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_GetSizeDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeEmptyArray( Declaration t) { return  (t!= null) && t.isMakeEmptyArray(); }public  Declaration tom_make_MakeEmptyArray( TomName t0,  TomTerm t1,  TargetLanguage t2,  Option t3) { return  getTomSignatureFactory().makeDeclaration_MakeEmptyArray(t0, t1, t2, t3); }public  TomName tom_get_slot_MakeEmptyArray_astName( Declaration t) { return  t.getAstName(); }public  TomTerm tom_get_slot_MakeEmptyArray_varSize( Declaration t) { return  t.getVarSize(); }public  TargetLanguage tom_get_slot_MakeEmptyArray_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_MakeEmptyArray_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeAddArray( Declaration t) { return  (t!= null) && t.isMakeAddArray(); }public  Declaration tom_make_MakeAddArray( TomName t0,  TomTerm t1,  TomTerm t2,  TargetLanguage t3,  Option t4) { return  getTomSignatureFactory().makeDeclaration_MakeAddArray(t0, t1, t2, t3, t4); }public  TomName tom_get_slot_MakeAddArray_astName( Declaration t) { return  t.getAstName(); }public  TomTerm tom_get_slot_MakeAddArray_varElt( Declaration t) { return  t.getVarElt(); }public  TomTerm tom_get_slot_MakeAddArray_varList( Declaration t) { return  t.getVarList(); }public  TargetLanguage tom_get_slot_MakeAddArray_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_MakeAddArray_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_MakeDecl( Declaration t) { return  (t!= null) && t.isMakeDecl(); }public  Declaration tom_make_MakeDecl( TomName t0,  TomType t1,  TomList t2,  TargetLanguage t3,  Option t4) { return  getTomSignatureFactory().makeDeclaration_MakeDecl(t0, t1, t2, t3, t4); }public  TomName tom_get_slot_MakeDecl_astName( Declaration t) { return  t.getAstName(); }public  TomType tom_get_slot_MakeDecl_astType( Declaration t) { return  t.getAstType(); }public  TomList tom_get_slot_MakeDecl_args( Declaration t) { return  t.getArgs(); }public  TargetLanguage tom_get_slot_MakeDecl_tlCode( Declaration t) { return  t.getTlCode(); }public  Option tom_get_slot_MakeDecl_orgTrack( Declaration t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_SymbolDecl( Declaration t) { return  (t!= null) && t.isSymbolDecl(); }public  Declaration tom_make_SymbolDecl( TomName t0) { return  getTomSignatureFactory().makeDeclaration_SymbolDecl(t0); }public  TomName tom_get_slot_SymbolDecl_astName( Declaration t) { return  t.getAstName(); }public boolean tom_is_fun_sym_ListSymbolDecl( Declaration t) { return  (t!= null) && t.isListSymbolDecl(); }public  Declaration tom_make_ListSymbolDecl( TomName t0) { return  getTomSignatureFactory().makeDeclaration_ListSymbolDecl(t0); }public  TomName tom_get_slot_ListSymbolDecl_astName( Declaration t) { return  t.getAstName(); }public boolean tom_is_fun_sym_ArraySymbolDecl( Declaration t) { return  (t!= null) && t.isArraySymbolDecl(); }public  Declaration tom_make_ArraySymbolDecl( TomName t0) { return  getTomSignatureFactory().makeDeclaration_ArraySymbolDecl(t0); }public  TomName tom_get_slot_ArraySymbolDecl_astName( Declaration t) { return  t.getAstName(); }public boolean tom_is_fun_sym_EmptyDeclaration( Declaration t) { return  (t!= null) && t.isEmptyDeclaration(); }public  Declaration tom_make_EmptyDeclaration() { return  getTomSignatureFactory().makeDeclaration_EmptyDeclaration(); }public Object tom_get_fun_sym_Option( Option t) { return null; }public boolean tom_cmp_fun_sym_Option(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Option( Option t,  int n) { return null; }public boolean tom_terms_equal_Option(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_DeclarationToOption( Option t) { return  (t!= null) && t.isDeclarationToOption(); }public  Option tom_make_DeclarationToOption( Declaration t0) { return  getTomSignatureFactory().makeOption_DeclarationToOption(t0); }public  Declaration tom_get_slot_DeclarationToOption_astDeclaration( Option t) { return  t.getAstDeclaration(); }public boolean tom_is_fun_sym_TomNameToOption( Option t) { return  (t!= null) && t.isTomNameToOption(); }public  Option tom_make_TomNameToOption( TomName t0) { return  getTomSignatureFactory().makeOption_TomNameToOption(t0); }public  TomName tom_get_slot_TomNameToOption_astName( Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_TomTermToOption( Option t) { return  (t!= null) && t.isTomTermToOption(); }public  Option tom_make_TomTermToOption( TomTerm t0) { return  getTomSignatureFactory().makeOption_TomTermToOption(t0); }public  TomTerm tom_get_slot_TomTermToOption_astTerm( Option t) { return  t.getAstTerm(); }public boolean tom_is_fun_sym_DefinedSymbol( Option t) { return  (t!= null) && t.isDefinedSymbol(); }public  Option tom_make_DefinedSymbol() { return  getTomSignatureFactory().makeOption_DefinedSymbol(); }public boolean tom_is_fun_sym_DefaultCase( Option t) { return  (t!= null) && t.isDefaultCase(); }public  Option tom_make_DefaultCase() { return  getTomSignatureFactory().makeOption_DefaultCase(); }public boolean tom_is_fun_sym_GeneratedMatch( Option t) { return  (t!= null) && t.isGeneratedMatch(); }public  Option tom_make_GeneratedMatch() { return  getTomSignatureFactory().makeOption_GeneratedMatch(); }public boolean tom_is_fun_sym_OriginTracking( Option t) { return  (t!= null) && t.isOriginTracking(); }public  Option tom_make_OriginTracking( TomName t0,  int t1,  TomName t2) { return  getTomSignatureFactory().makeOption_OriginTracking(t0, t1, t2); }public  TomName tom_get_slot_OriginTracking_astName( Option t) { return  t.getAstName(); }public  int tom_get_slot_OriginTracking_line( Option t) { return  t.getLine(); }public  TomName tom_get_slot_OriginTracking_fileName( Option t) { return  t.getFileName(); }public boolean tom_is_fun_sym_Constructor( Option t) { return  (t!= null) && t.isConstructor(); }public  Option tom_make_Constructor( NameList t0) { return  getTomSignatureFactory().makeOption_Constructor(t0); }public  NameList tom_get_slot_Constructor_nameList( Option t) { return  t.getNameList(); }public boolean tom_is_fun_sym_OriginalText( Option t) { return  (t!= null) && t.isOriginalText(); }public  Option tom_make_OriginalText( TomName t0) { return  getTomSignatureFactory().makeOption_OriginalText(t0); }public  TomName tom_get_slot_OriginalText_astName( Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_Label( Option t) { return  (t!= null) && t.isLabel(); }public  Option tom_make_Label( TomName t0) { return  getTomSignatureFactory().makeOption_Label(t0); }public  TomName tom_get_slot_Label_astName( Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_Debug( Option t) { return  (t!= null) && t.isDebug(); }public  Option tom_make_Debug( TomName t0) { return  getTomSignatureFactory().makeOption_Debug(t0); }public  TomName tom_get_slot_Debug_astName( Option t) { return  t.getAstName(); }public boolean tom_is_fun_sym_ImplicitXMLAttribut( Option t) { return  (t!= null) && t.isImplicitXMLAttribut(); }public  Option tom_make_ImplicitXMLAttribut() { return  getTomSignatureFactory().makeOption_ImplicitXMLAttribut(); }public boolean tom_is_fun_sym_ImplicitXMLChild( Option t) { return  (t!= null) && t.isImplicitXMLChild(); }public  Option tom_make_ImplicitXMLChild() { return  getTomSignatureFactory().makeOption_ImplicitXMLChild(); }public boolean tom_is_fun_sym_noOption( Option t) { return  (t!= null) && t.isNoOption(); }public  Option tom_make_noOption() { return  getTomSignatureFactory().makeOption_NoOption(); }public Object tom_get_fun_sym_Expression( Expression t) { return null; }public boolean tom_cmp_fun_sym_Expression(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Expression( Expression t,  int n) { return null; }public boolean tom_terms_equal_Expression(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TomTermToExpression( Expression t) { return  (t!= null) && t.isTomTermToExpression(); }public  Expression tom_make_TomTermToExpression( TomTerm t0) { return  getTomSignatureFactory().makeExpression_TomTermToExpression(t0); }public  TomTerm tom_get_slot_TomTermToExpression_astTerm( Expression t) { return  t.getAstTerm(); }public boolean tom_is_fun_sym_Not( Expression t) { return  (t!= null) && t.isNot(); }public  Expression tom_make_Not( Expression t0) { return  getTomSignatureFactory().makeExpression_Not(t0); }public  Expression tom_get_slot_Not_arg( Expression t) { return  t.getArg(); }public boolean tom_is_fun_sym_And( Expression t) { return  (t!= null) && t.isAnd(); }public  Expression tom_make_And( Expression t0,  Expression t1) { return  getTomSignatureFactory().makeExpression_And(t0, t1); }public  Expression tom_get_slot_And_arg1( Expression t) { return  t.getArg1(); }public  Expression tom_get_slot_And_arg2( Expression t) { return  t.getArg2(); }public boolean tom_is_fun_sym_Or( Expression t) { return  (t!= null) && t.isOr(); }public  Expression tom_make_Or( Expression t0,  Expression t1) { return  getTomSignatureFactory().makeExpression_Or(t0, t1); }public  Expression tom_get_slot_Or_arg1( Expression t) { return  t.getArg1(); }public  Expression tom_get_slot_Or_arg2( Expression t) { return  t.getArg2(); }public boolean tom_is_fun_sym_TrueTL( Expression t) { return  (t!= null) && t.isTrueTL(); }public  Expression tom_make_TrueTL() { return  getTomSignatureFactory().makeExpression_TrueTL(); }public boolean tom_is_fun_sym_FalseTL( Expression t) { return  (t!= null) && t.isFalseTL(); }public  Expression tom_make_FalseTL() { return  getTomSignatureFactory().makeExpression_FalseTL(); }public boolean tom_is_fun_sym_IsEmptyList( Expression t) { return  (t!= null) && t.isIsEmptyList(); }public  Expression tom_make_IsEmptyList( TomTerm t0) { return  getTomSignatureFactory().makeExpression_IsEmptyList(t0); }public  TomTerm tom_get_slot_IsEmptyList_kid1( Expression t) { return  t.getKid1(); }public boolean tom_is_fun_sym_IsEmptyArray( Expression t) { return  (t!= null) && t.isIsEmptyArray(); }public  Expression tom_make_IsEmptyArray( TomTerm t0,  TomTerm t1) { return  getTomSignatureFactory().makeExpression_IsEmptyArray(t0, t1); }public  TomTerm tom_get_slot_IsEmptyArray_kid1( Expression t) { return  t.getKid1(); }public  TomTerm tom_get_slot_IsEmptyArray_kid2( Expression t) { return  t.getKid2(); }public boolean tom_is_fun_sym_EqualFunctionSymbol( Expression t) { return  (t!= null) && t.isEqualFunctionSymbol(); }public  Expression tom_make_EqualFunctionSymbol( TomTerm t0,  TomTerm t1) { return  getTomSignatureFactory().makeExpression_EqualFunctionSymbol(t0, t1); }public  TomTerm tom_get_slot_EqualFunctionSymbol_kid1( Expression t) { return  t.getKid1(); }public  TomTerm tom_get_slot_EqualFunctionSymbol_kid2( Expression t) { return  t.getKid2(); }public boolean tom_is_fun_sym_EqualTerm( Expression t) { return  (t!= null) && t.isEqualTerm(); }public  Expression tom_make_EqualTerm( TomTerm t0,  TomTerm t1) { return  getTomSignatureFactory().makeExpression_EqualTerm(t0, t1); }public  TomTerm tom_get_slot_EqualTerm_kid1( Expression t) { return  t.getKid1(); }public  TomTerm tom_get_slot_EqualTerm_kid2( Expression t) { return  t.getKid2(); }public boolean tom_is_fun_sym_GetSubterm( Expression t) { return  (t!= null) && t.isGetSubterm(); }public  Expression tom_make_GetSubterm( TomTerm t0,  TomNumber t1) { return  getTomSignatureFactory().makeExpression_GetSubterm(t0, t1); }public  TomTerm tom_get_slot_GetSubterm_variable( Expression t) { return  t.getVariable(); }public  TomNumber tom_get_slot_GetSubterm_number( Expression t) { return  t.getNumber(); }public boolean tom_is_fun_sym_IsFsym( Expression t) { return  (t!= null) && t.isIsFsym(); }public  Expression tom_make_IsFsym( TomName t0,  TomTerm t1) { return  getTomSignatureFactory().makeExpression_IsFsym(t0, t1); }public  TomName tom_get_slot_IsFsym_astName( Expression t) { return  t.getAstName(); }public  TomTerm tom_get_slot_IsFsym_variable( Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetSlot( Expression t) { return  (t!= null) && t.isGetSlot(); }public  Expression tom_make_GetSlot( TomName t0,  String t1,  TomTerm t2) { return  getTomSignatureFactory().makeExpression_GetSlot(t0, t1, t2); }public  TomName tom_get_slot_GetSlot_astName( Expression t) { return  t.getAstName(); }public  String tom_get_slot_GetSlot_slotNameString( Expression t) { return  t.getSlotNameString(); }public  TomTerm tom_get_slot_GetSlot_variable( Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetHead( Expression t) { return  (t!= null) && t.isGetHead(); }public  Expression tom_make_GetHead( TomTerm t0) { return  getTomSignatureFactory().makeExpression_GetHead(t0); }public  TomTerm tom_get_slot_GetHead_variable( Expression t) { return  t.getVariable(); }public boolean tom_is_fun_sym_GetTail( Expression t) { return  (t!= null) && t.isGetTail(); }public  Expression tom_make_GetTail( TomTerm t0) { return  getTomSignatureFactory().makeExpression_GetTail(t0); }public  TomTerm tom_get_slot_GetTail_kid1( Expression t) { return  t.getKid1(); }public boolean tom_is_fun_sym_GetSize( Expression t) { return  (t!= null) && t.isGetSize(); }public  Expression tom_make_GetSize( TomTerm t0) { return  getTomSignatureFactory().makeExpression_GetSize(t0); }public  TomTerm tom_get_slot_GetSize_kid1( Expression t) { return  t.getKid1(); }public boolean tom_is_fun_sym_GetElement( Expression t) { return  (t!= null) && t.isGetElement(); }public  Expression tom_make_GetElement( TomTerm t0,  TomTerm t1) { return  getTomSignatureFactory().makeExpression_GetElement(t0, t1); }public  TomTerm tom_get_slot_GetElement_kid1( Expression t) { return  t.getKid1(); }public  TomTerm tom_get_slot_GetElement_kid2( Expression t) { return  t.getKid2(); }public boolean tom_is_fun_sym_GetSliceList( Expression t) { return  (t!= null) && t.isGetSliceList(); }public  Expression tom_make_GetSliceList( TomName t0,  TomTerm t1,  TomTerm t2) { return  getTomSignatureFactory().makeExpression_GetSliceList(t0, t1, t2); }public  TomName tom_get_slot_GetSliceList_astName( Expression t) { return  t.getAstName(); }public  TomTerm tom_get_slot_GetSliceList_variableBeginAST( Expression t) { return  t.getVariableBeginAST(); }public  TomTerm tom_get_slot_GetSliceList_variableEndAST( Expression t) { return  t.getVariableEndAST(); }public boolean tom_is_fun_sym_GetSliceArray( Expression t) { return  (t!= null) && t.isGetSliceArray(); }public  Expression tom_make_GetSliceArray( TomName t0,  TomTerm t1,  TomTerm t2,  TomTerm t3) { return  getTomSignatureFactory().makeExpression_GetSliceArray(t0, t1, t2, t3); }public  TomName tom_get_slot_GetSliceArray_astName( Expression t) { return  t.getAstName(); }public  TomTerm tom_get_slot_GetSliceArray_subjectListName( Expression t) { return  t.getSubjectListName(); }public  TomTerm tom_get_slot_GetSliceArray_variableBeginAST( Expression t) { return  t.getVariableBeginAST(); }public  TomTerm tom_get_slot_GetSliceArray_variableEndAST( Expression t) { return  t.getVariableEndAST(); }public Object tom_get_fun_sym_TargetLanguage( TargetLanguage t) { return null; }public boolean tom_cmp_fun_sym_TargetLanguage(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TargetLanguage( TargetLanguage t,  int n) { return null; }public boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TL( TargetLanguage t) { return  (t!= null) && t.isTL(); }public  TargetLanguage tom_make_TL( String t0,  Position t1,  Position t2) { return  getTomSignatureFactory().makeTargetLanguage_TL(t0, t1, t2); }public  String tom_get_slot_TL_code( TargetLanguage t) { return  t.getCode(); }public  Position tom_get_slot_TL_start( TargetLanguage t) { return  t.getStart(); }public  Position tom_get_slot_TL_end( TargetLanguage t) { return  t.getEnd(); }public boolean tom_is_fun_sym_ITL( TargetLanguage t) { return  (t!= null) && t.isITL(); }public  TargetLanguage tom_make_ITL( String t0) { return  getTomSignatureFactory().makeTargetLanguage_ITL(t0); }public  String tom_get_slot_ITL_code( TargetLanguage t) { return  t.getCode(); }public boolean tom_is_fun_sym_Comment( TargetLanguage t) { return  (t!= null) && t.isComment(); }public  TargetLanguage tom_make_Comment( String t0) { return  getTomSignatureFactory().makeTargetLanguage_Comment(t0); }public  String tom_get_slot_Comment_code( TargetLanguage t) { return  t.getCode(); }public Object tom_get_fun_sym_Position( Position t) { return null; }public boolean tom_cmp_fun_sym_Position(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Position( Position t,  int n) { return null; }public boolean tom_terms_equal_Position(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_TextPosition( Position t) { return  (t!= null) && t.isTextPosition(); }public  Position tom_make_TextPosition( int t0,  int t1) { return  getTomSignatureFactory().makePosition_TextPosition(t0, t1); }public  int tom_get_slot_TextPosition_line( Position t) { return  t.getLine(); }public  int tom_get_slot_TextPosition_column( Position t) { return  t.getColumn(); }public Object tom_get_fun_sym_TomType( TomType t) { return null; }public boolean tom_cmp_fun_sym_TomType(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomType( TomType t,  int n) { return null; }public boolean tom_terms_equal_TomType(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Type( TomType t) { return  (t!= null) && t.isType(); }public  TomType tom_make_Type( TomType t0,  TomType t1) { return  getTomSignatureFactory().makeTomType_Type(t0, t1); }public  TomType tom_get_slot_Type_tomType( TomType t) { return  t.getTomType(); }public  TomType tom_get_slot_Type_tlType( TomType t) { return  t.getTlType(); }public boolean tom_is_fun_sym_TypesToType( TomType t) { return  (t!= null) && t.isTypesToType(); }public  TomType tom_make_TypesToType( TomTypeList t0,  TomType t1) { return  getTomSignatureFactory().makeTomType_TypesToType(t0, t1); }public  TomTypeList tom_get_slot_TypesToType_domain( TomType t) { return  t.getDomain(); }public  TomType tom_get_slot_TypesToType_codomain( TomType t) { return  t.getCodomain(); }public boolean tom_is_fun_sym_ASTTomType( TomType t) { return  (t!= null) && t.isASTTomType(); }public  TomType tom_make_ASTTomType( String t0) { return  getTomSignatureFactory().makeTomType_ASTTomType(t0); }public  String tom_get_slot_ASTTomType_string( TomType t) { return  t.getString(); }public boolean tom_is_fun_sym_TomTypeAlone( TomType t) { return  (t!= null) && t.isTomTypeAlone(); }public  TomType tom_make_TomTypeAlone( String t0) { return  getTomSignatureFactory().makeTomType_TomTypeAlone(t0); }public  String tom_get_slot_TomTypeAlone_string( TomType t) { return  t.getString(); }public boolean tom_is_fun_sym_TLType( TomType t) { return  (t!= null) && t.isTLType(); }public  TomType tom_make_TLType( TargetLanguage t0) { return  getTomSignatureFactory().makeTomType_TLType(t0); }public  TargetLanguage tom_get_slot_TLType_tl( TomType t) { return  t.getTl(); }public boolean tom_is_fun_sym_EmptyType( TomType t) { return  (t!= null) && t.isEmptyType(); }public  TomType tom_make_EmptyType() { return  getTomSignatureFactory().makeTomType_EmptyType(); }public Object tom_get_fun_sym_TomName( TomName t) { return null; }public boolean tom_cmp_fun_sym_TomName(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomName( TomName t,  int n) { return null; }public boolean tom_terms_equal_TomName(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Name( TomName t) { return  (t!= null) && t.isName(); }public  TomName tom_make_Name( String t0) { return  getTomSignatureFactory().makeTomName_Name(t0); }public  String tom_get_slot_Name_string( TomName t) { return  t.getString(); }public boolean tom_is_fun_sym_PositionName( TomName t) { return  (t!= null) && t.isPositionName(); }public  TomName tom_make_PositionName( TomNumberList t0) { return  getTomSignatureFactory().makeTomName_PositionName(t0); }public  TomNumberList tom_get_slot_PositionName_numberList( TomName t) { return  t.getNumberList(); }public boolean tom_is_fun_sym_EmptyName( TomName t) { return  (t!= null) && t.isEmptyName(); }public  TomName tom_make_EmptyName() { return  getTomSignatureFactory().makeTomName_EmptyName(); }public Object tom_get_fun_sym_TomTerm( TomTerm t) { return null; }public boolean tom_cmp_fun_sym_TomTerm(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomTerm( TomTerm t,  int n) { return null; }public boolean tom_terms_equal_TomTerm(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Appl( TomTerm t) { return  (t!= null) && t.isAppl(); }public  TomTerm tom_make_Appl( OptionList t0,  NameList t1,  TomList t2) { return  getTomSignatureFactory().makeTomTerm_Appl(t0, t1, t2); }public  OptionList tom_get_slot_Appl_option( TomTerm t) { return  t.getOption(); }public  NameList tom_get_slot_Appl_nameList( TomTerm t) { return  t.getNameList(); }public  TomList tom_get_slot_Appl_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_XMLAppl( TomTerm t) { return  (t!= null) && t.isXMLAppl(); }public  TomTerm tom_make_XMLAppl( OptionList t0,  NameList t1,  TomList t2,  TomList t3) { return  getTomSignatureFactory().makeTomTerm_XMLAppl(t0, t1, t2, t3); }public  OptionList tom_get_slot_XMLAppl_option( TomTerm t) { return  t.getOption(); }public  NameList tom_get_slot_XMLAppl_nameList( TomTerm t) { return  t.getNameList(); }public  TomList tom_get_slot_XMLAppl_attrList( TomTerm t) { return  t.getAttrList(); }public  TomList tom_get_slot_XMLAppl_childList( TomTerm t) { return  t.getChildList(); }public boolean tom_is_fun_sym_VariableStar( TomTerm t) { return  (t!= null) && t.isVariableStar(); }public  TomTerm tom_make_VariableStar( OptionList t0,  TomName t1,  TomType t2) { return  getTomSignatureFactory().makeTomTerm_VariableStar(t0, t1, t2); }public  OptionList tom_get_slot_VariableStar_option( TomTerm t) { return  t.getOption(); }public  TomName tom_get_slot_VariableStar_astName( TomTerm t) { return  t.getAstName(); }public  TomType tom_get_slot_VariableStar_astType( TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_Placeholder( TomTerm t) { return  (t!= null) && t.isPlaceholder(); }public  TomTerm tom_make_Placeholder( OptionList t0) { return  getTomSignatureFactory().makeTomTerm_Placeholder(t0); }public  OptionList tom_get_slot_Placeholder_option( TomTerm t) { return  t.getOption(); }public boolean tom_is_fun_sym_UnamedVariable( TomTerm t) { return  (t!= null) && t.isUnamedVariable(); }public  TomTerm tom_make_UnamedVariable( OptionList t0,  TomType t1) { return  getTomSignatureFactory().makeTomTerm_UnamedVariable(t0, t1); }public  OptionList tom_get_slot_UnamedVariable_option( TomTerm t) { return  t.getOption(); }public  TomType tom_get_slot_UnamedVariable_astType( TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_UnamedVariableStar( TomTerm t) { return  (t!= null) && t.isUnamedVariableStar(); }public  TomTerm tom_make_UnamedVariableStar( OptionList t0,  TomType t1) { return  getTomSignatureFactory().makeTomTerm_UnamedVariableStar(t0, t1); }public  OptionList tom_get_slot_UnamedVariableStar_option( TomTerm t) { return  t.getOption(); }public  TomType tom_get_slot_UnamedVariableStar_astType( TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_emptyTerm( TomTerm t) { return  (t!= null) && t.isEmptyTerm(); }public  TomTerm tom_make_emptyTerm() { return  getTomSignatureFactory().makeTomTerm_EmptyTerm(); }public boolean tom_is_fun_sym_TargetLanguageToTomTerm( TomTerm t) { return  (t!= null) && t.isTargetLanguageToTomTerm(); }public  TomTerm tom_make_TargetLanguageToTomTerm( TargetLanguage t0) { return  getTomSignatureFactory().makeTomTerm_TargetLanguageToTomTerm(t0); }public  TargetLanguage tom_get_slot_TargetLanguageToTomTerm_tl( TomTerm t) { return  t.getTl(); }public boolean tom_is_fun_sym_TomTypeToTomTerm( TomTerm t) { return  (t!= null) && t.isTomTypeToTomTerm(); }public  TomTerm tom_make_TomTypeToTomTerm( TomType t0) { return  getTomSignatureFactory().makeTomTerm_TomTypeToTomTerm(t0); }public  TomType tom_get_slot_TomTypeToTomTerm_astType( TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_TomNameToTomTerm( TomTerm t) { return  (t!= null) && t.isTomNameToTomTerm(); }public  TomTerm tom_make_TomNameToTomTerm( TomName t0) { return  getTomSignatureFactory().makeTomTerm_TomNameToTomTerm(t0); }public  TomName tom_get_slot_TomNameToTomTerm_astName( TomTerm t) { return  t.getAstName(); }public boolean tom_is_fun_sym_TomSymbolToTomTerm( TomTerm t) { return  (t!= null) && t.isTomSymbolToTomTerm(); }public  TomTerm tom_make_TomSymbolToTomTerm( TomSymbol t0) { return  getTomSignatureFactory().makeTomTerm_TomSymbolToTomTerm(t0); }public  TomSymbol tom_get_slot_TomSymbolToTomTerm_astSymbol( TomTerm t) { return  t.getAstSymbol(); }public boolean tom_is_fun_sym_DeclarationToTomTerm( TomTerm t) { return  (t!= null) && t.isDeclarationToTomTerm(); }public  TomTerm tom_make_DeclarationToTomTerm( Declaration t0) { return  getTomSignatureFactory().makeTomTerm_DeclarationToTomTerm(t0); }public  Declaration tom_get_slot_DeclarationToTomTerm_astDeclaration( TomTerm t) { return  t.getAstDeclaration(); }public boolean tom_is_fun_sym_OptionToTomTerm( TomTerm t) { return  (t!= null) && t.isOptionToTomTerm(); }public  TomTerm tom_make_OptionToTomTerm( OptionList t0) { return  getTomSignatureFactory().makeTomTerm_OptionToTomTerm(t0); }public  OptionList tom_get_slot_OptionToTomTerm_option( TomTerm t) { return  t.getOption(); }public boolean tom_is_fun_sym_ExpressionToTomTerm( TomTerm t) { return  (t!= null) && t.isExpressionToTomTerm(); }public  TomTerm tom_make_ExpressionToTomTerm( Expression t0) { return  getTomSignatureFactory().makeTomTerm_ExpressionToTomTerm(t0); }public  Expression tom_get_slot_ExpressionToTomTerm_astExpression( TomTerm t) { return  t.getAstExpression(); }public boolean tom_is_fun_sym_InstructionToTomTerm( TomTerm t) { return  (t!= null) && t.isInstructionToTomTerm(); }public  TomTerm tom_make_InstructionToTomTerm( Instruction t0) { return  getTomSignatureFactory().makeTomTerm_InstructionToTomTerm(t0); }public  Instruction tom_get_slot_InstructionToTomTerm_astInstruction( TomTerm t) { return  t.getAstInstruction(); }public boolean tom_is_fun_sym_Tom( TomTerm t) { return  (t!= null) && t.isTom(); }public  TomTerm tom_make_Tom( TomList t0) { return  getTomSignatureFactory().makeTomTerm_Tom(t0); }public  TomList tom_get_slot_Tom_tomList( TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_TomInclude( TomTerm t) { return  (t!= null) && t.isTomInclude(); }public  TomTerm tom_make_TomInclude( TomList t0) { return  getTomSignatureFactory().makeTomTerm_TomInclude(t0); }public  TomList tom_get_slot_TomInclude_tomList( TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_MakeTerm( TomTerm t) { return  (t!= null) && t.isMakeTerm(); }public  TomTerm tom_make_MakeTerm( TomTerm t0) { return  getTomSignatureFactory().makeTomTerm_MakeTerm(t0); }public  TomTerm tom_get_slot_MakeTerm_kid1( TomTerm t) { return  t.getKid1(); }public boolean tom_is_fun_sym_FunctionCall( TomTerm t) { return  (t!= null) && t.isFunctionCall(); }public  TomTerm tom_make_FunctionCall( TomName t0,  TomList t1) { return  getTomSignatureFactory().makeTomTerm_FunctionCall(t0, t1); }public  TomName tom_get_slot_FunctionCall_astName( TomTerm t) { return  t.getAstName(); }public  TomList tom_get_slot_FunctionCall_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_MakeFunctionBegin( TomTerm t) { return  (t!= null) && t.isMakeFunctionBegin(); }public  TomTerm tom_make_MakeFunctionBegin( TomName t0,  TomTerm t1) { return  getTomSignatureFactory().makeTomTerm_MakeFunctionBegin(t0, t1); }public  TomName tom_get_slot_MakeFunctionBegin_astName( TomTerm t) { return  t.getAstName(); }public  TomTerm tom_get_slot_MakeFunctionBegin_subjectListAST( TomTerm t) { return  t.getSubjectListAST(); }public boolean tom_is_fun_sym_MakeFunctionEnd( TomTerm t) { return  (t!= null) && t.isMakeFunctionEnd(); }public  TomTerm tom_make_MakeFunctionEnd() { return  getTomSignatureFactory().makeTomTerm_MakeFunctionEnd(); }public boolean tom_is_fun_sym_BackQuoteAppl( TomTerm t) { return  (t!= null) && t.isBackQuoteAppl(); }public  TomTerm tom_make_BackQuoteAppl( OptionList t0,  TomName t1,  TomList t2) { return  getTomSignatureFactory().makeTomTerm_BackQuoteAppl(t0, t1, t2); }public  OptionList tom_get_slot_BackQuoteAppl_option( TomTerm t) { return  t.getOption(); }public  TomName tom_get_slot_BackQuoteAppl_astName( TomTerm t) { return  t.getAstName(); }public  TomList tom_get_slot_BackQuoteAppl_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_DoubleBackQuote( TomTerm t) { return  (t!= null) && t.isDoubleBackQuote(); }public  TomTerm tom_make_DoubleBackQuote( TomList t0) { return  getTomSignatureFactory().makeTomTerm_DoubleBackQuote(t0); }public  TomList tom_get_slot_DoubleBackQuote_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_Composite( TomTerm t) { return  (t!= null) && t.isComposite(); }public  TomTerm tom_make_Composite( TomList t0) { return  getTomSignatureFactory().makeTomTerm_Composite(t0); }public  TomList tom_get_slot_Composite_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_RecordAppl( TomTerm t) { return  (t!= null) && t.isRecordAppl(); }public  TomTerm tom_make_RecordAppl( OptionList t0,  NameList t1,  TomList t2) { return  getTomSignatureFactory().makeTomTerm_RecordAppl(t0, t1, t2); }public  OptionList tom_get_slot_RecordAppl_option( TomTerm t) { return  t.getOption(); }public  NameList tom_get_slot_RecordAppl_nameList( TomTerm t) { return  t.getNameList(); }public  TomList tom_get_slot_RecordAppl_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_PairSlotAppl( TomTerm t) { return  (t!= null) && t.isPairSlotAppl(); }public  TomTerm tom_make_PairSlotAppl( TomName t0,  TomTerm t1) { return  getTomSignatureFactory().makeTomTerm_PairSlotAppl(t0, t1); }public  TomName tom_get_slot_PairSlotAppl_slotName( TomTerm t) { return  t.getSlotName(); }public  TomTerm tom_get_slot_PairSlotAppl_appl( TomTerm t) { return  t.getAppl(); }public boolean tom_is_fun_sym_Match( TomTerm t) { return  (t!= null) && t.isMatch(); }public  TomTerm tom_make_Match( TomTerm t0,  TomTerm t1,  OptionList t2) { return  getTomSignatureFactory().makeTomTerm_Match(t0, t1, t2); }public  TomTerm tom_get_slot_Match_subjectList( TomTerm t) { return  t.getSubjectList(); }public  TomTerm tom_get_slot_Match_patternList( TomTerm t) { return  t.getPatternList(); }public  OptionList tom_get_slot_Match_option( TomTerm t) { return  t.getOption(); }public boolean tom_is_fun_sym_MatchingCondition( TomTerm t) { return  (t!= null) && t.isMatchingCondition(); }public  TomTerm tom_make_MatchingCondition( TomTerm t0,  TomTerm t1) { return  getTomSignatureFactory().makeTomTerm_MatchingCondition(t0, t1); }public  TomTerm tom_get_slot_MatchingCondition_lhs( TomTerm t) { return  t.getLhs(); }public  TomTerm tom_get_slot_MatchingCondition_rhs( TomTerm t) { return  t.getRhs(); }public boolean tom_is_fun_sym_EqualityCondition( TomTerm t) { return  (t!= null) && t.isEqualityCondition(); }public  TomTerm tom_make_EqualityCondition( TomTerm t0,  TomTerm t1) { return  getTomSignatureFactory().makeTomTerm_EqualityCondition(t0, t1); }public  TomTerm tom_get_slot_EqualityCondition_lhs( TomTerm t) { return  t.getLhs(); }public  TomTerm tom_get_slot_EqualityCondition_rhs( TomTerm t) { return  t.getRhs(); }public boolean tom_is_fun_sym_RuleSet( TomTerm t) { return  (t!= null) && t.isRuleSet(); }public  TomTerm tom_make_RuleSet( TomRuleList t0,  Option t1) { return  getTomSignatureFactory().makeTomTerm_RuleSet(t0, t1); }public  TomRuleList tom_get_slot_RuleSet_ruleList( TomTerm t) { return  t.getRuleList(); }public  Option tom_get_slot_RuleSet_orgTrack( TomTerm t) { return  t.getOrgTrack(); }public boolean tom_is_fun_sym_SubjectList( TomTerm t) { return  (t!= null) && t.isSubjectList(); }public  TomTerm tom_make_SubjectList( TomList t0) { return  getTomSignatureFactory().makeTomTerm_SubjectList(t0); }public  TomList tom_get_slot_SubjectList_tomList( TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_PatternList( TomTerm t) { return  (t!= null) && t.isPatternList(); }public  TomTerm tom_make_PatternList( TomList t0) { return  getTomSignatureFactory().makeTomTerm_PatternList(t0); }public  TomList tom_get_slot_PatternList_tomList( TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_TermList( TomTerm t) { return  (t!= null) && t.isTermList(); }public  TomTerm tom_make_TermList( TomList t0) { return  getTomSignatureFactory().makeTomTerm_TermList(t0); }public  TomList tom_get_slot_TermList_tomList( TomTerm t) { return  t.getTomList(); }public boolean tom_is_fun_sym_Term( TomTerm t) { return  (t!= null) && t.isTerm(); }public  TomTerm tom_make_Term( TomTerm t0) { return  getTomSignatureFactory().makeTomTerm_Term(t0); }public  TomTerm tom_get_slot_Term_tomTerm( TomTerm t) { return  t.getTomTerm(); }public boolean tom_is_fun_sym_PatternAction( TomTerm t) { return  (t!= null) && t.isPatternAction(); }public  TomTerm tom_make_PatternAction( TomTerm t0,  TomTerm t1,  OptionList t2) { return  getTomSignatureFactory().makeTomTerm_PatternAction(t0, t1, t2); }public  TomTerm tom_get_slot_PatternAction_termList( TomTerm t) { return  t.getTermList(); }public  TomTerm tom_get_slot_PatternAction_tom( TomTerm t) { return  t.getTom(); }public  OptionList tom_get_slot_PatternAction_option( TomTerm t) { return  t.getOption(); }public boolean tom_is_fun_sym_TLVar( TomTerm t) { return  (t!= null) && t.isTLVar(); }public  TomTerm tom_make_TLVar( String t0,  TomType t1) { return  getTomSignatureFactory().makeTomTerm_TLVar(t0, t1); }public  String tom_get_slot_TLVar_strName( TomTerm t) { return  t.getStrName(); }public  TomType tom_get_slot_TLVar_astType( TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_Declaration( TomTerm t) { return  (t!= null) && t.isDeclaration(); }public  TomTerm tom_make_Declaration( TomTerm t0) { return  getTomSignatureFactory().makeTomTerm_Declaration(t0); }public  TomTerm tom_get_slot_Declaration_variable( TomTerm t) { return  t.getVariable(); }public boolean tom_is_fun_sym_Variable( TomTerm t) { return  (t!= null) && t.isVariable(); }public  TomTerm tom_make_Variable( OptionList t0,  TomName t1,  TomType t2) { return  getTomSignatureFactory().makeTomTerm_Variable(t0, t1, t2); }public  OptionList tom_get_slot_Variable_option( TomTerm t) { return  t.getOption(); }public  TomName tom_get_slot_Variable_astName( TomTerm t) { return  t.getAstName(); }public  TomType tom_get_slot_Variable_astType( TomTerm t) { return  t.getAstType(); }public boolean tom_is_fun_sym_LocalVariable( TomTerm t) { return  (t!= null) && t.isLocalVariable(); }public  TomTerm tom_make_LocalVariable() { return  getTomSignatureFactory().makeTomTerm_LocalVariable(); }public boolean tom_is_fun_sym_EndLocalVariable( TomTerm t) { return  (t!= null) && t.isEndLocalVariable(); }public  TomTerm tom_make_EndLocalVariable() { return  getTomSignatureFactory().makeTomTerm_EndLocalVariable(); }public boolean tom_is_fun_sym_BuildVariable( TomTerm t) { return  (t!= null) && t.isBuildVariable(); }public  TomTerm tom_make_BuildVariable( TomName t0) { return  getTomSignatureFactory().makeTomTerm_BuildVariable(t0); }public  TomName tom_get_slot_BuildVariable_astName( TomTerm t) { return  t.getAstName(); }public boolean tom_is_fun_sym_BuildTerm( TomTerm t) { return  (t!= null) && t.isBuildTerm(); }public  TomTerm tom_make_BuildTerm( TomName t0,  TomList t1) { return  getTomSignatureFactory().makeTomTerm_BuildTerm(t0, t1); }public  TomName tom_get_slot_BuildTerm_astName( TomTerm t) { return  t.getAstName(); }public  TomList tom_get_slot_BuildTerm_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_BuildList( TomTerm t) { return  (t!= null) && t.isBuildList(); }public  TomTerm tom_make_BuildList( TomName t0,  TomList t1) { return  getTomSignatureFactory().makeTomTerm_BuildList(t0, t1); }public  TomName tom_get_slot_BuildList_astName( TomTerm t) { return  t.getAstName(); }public  TomList tom_get_slot_BuildList_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_BuildArray( TomTerm t) { return  (t!= null) && t.isBuildArray(); }public  TomTerm tom_make_BuildArray( TomName t0,  TomList t1) { return  getTomSignatureFactory().makeTomTerm_BuildArray(t0, t1); }public  TomName tom_get_slot_BuildArray_astName( TomTerm t) { return  t.getAstName(); }public  TomList tom_get_slot_BuildArray_args( TomTerm t) { return  t.getArgs(); }public boolean tom_is_fun_sym_CompiledMatch( TomTerm t) { return  (t!= null) && t.isCompiledMatch(); }public  TomTerm tom_make_CompiledMatch( TomList t0,  OptionList t1) { return  getTomSignatureFactory().makeTomTerm_CompiledMatch(t0, t1); }public  TomList tom_get_slot_CompiledMatch_automataList( TomTerm t) { return  t.getAutomataList(); }public  OptionList tom_get_slot_CompiledMatch_option( TomTerm t) { return  t.getOption(); }public boolean tom_is_fun_sym_CompiledPattern( TomTerm t) { return  (t!= null) && t.isCompiledPattern(); }public  TomTerm tom_make_CompiledPattern( TomList t0) { return  getTomSignatureFactory().makeTomTerm_CompiledPattern(t0); }public  TomList tom_get_slot_CompiledPattern_instList( TomTerm t) { return  t.getInstList(); }public boolean tom_is_fun_sym_AssignedVariable( TomTerm t) { return  (t!= null) && t.isAssignedVariable(); }public  TomTerm tom_make_AssignedVariable( String t0,  Expression t1,  int t2,  Expression t3,  Expression t4) { return  getTomSignatureFactory().makeTomTerm_AssignedVariable(t0, t1, t2, t3, t4); }public  String tom_get_slot_AssignedVariable_varName( TomTerm t) { return  t.getVarName(); }public  Expression tom_get_slot_AssignedVariable_source( TomTerm t) { return  t.getSource(); }public  int tom_get_slot_AssignedVariable_nbUse( TomTerm t) { return  t.getNbUse(); }public  Expression tom_get_slot_AssignedVariable_usedInDoWhile( TomTerm t) { return  t.getUsedInDoWhile(); }public  Expression tom_get_slot_AssignedVariable_removable( TomTerm t) { return  t.getRemovable(); }public boolean tom_is_fun_sym_Automata( TomTerm t) { return  (t!= null) && t.isAutomata(); }public  TomTerm tom_make_Automata( OptionList t0,  TomNumberList t1,  TomList t2) { return  getTomSignatureFactory().makeTomTerm_Automata(t0, t1, t2); }public  OptionList tom_get_slot_Automata_option( TomTerm t) { return  t.getOption(); }public  TomNumberList tom_get_slot_Automata_numberList( TomTerm t) { return  t.getNumberList(); }public  TomList tom_get_slot_Automata_instList( TomTerm t) { return  t.getInstList(); }public Object tom_get_fun_sym_TomNumber( TomNumber t) { return null; }public boolean tom_cmp_fun_sym_TomNumber(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomNumber( TomNumber t,  int n) { return null; }public boolean tom_terms_equal_TomNumber(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_MatchNumber( TomNumber t) { return  (t!= null) && t.isMatchNumber(); }public  TomNumber tom_make_MatchNumber( TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_MatchNumber(t0); }public  TomNumber tom_get_slot_MatchNumber_number( TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_PatternNumber( TomNumber t) { return  (t!= null) && t.isPatternNumber(); }public  TomNumber tom_make_PatternNumber( TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_PatternNumber(t0); }public  TomNumber tom_get_slot_PatternNumber_number( TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_ListNumber( TomNumber t) { return  (t!= null) && t.isListNumber(); }public  TomNumber tom_make_ListNumber( TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_ListNumber(t0); }public  TomNumber tom_get_slot_ListNumber_number( TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_IndexNumber( TomNumber t) { return  (t!= null) && t.isIndexNumber(); }public  TomNumber tom_make_IndexNumber( TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_IndexNumber(t0); }public  TomNumber tom_get_slot_IndexNumber_number( TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_Begin( TomNumber t) { return  (t!= null) && t.isBegin(); }public  TomNumber tom_make_Begin( TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_Begin(t0); }public  TomNumber tom_get_slot_Begin_number( TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_End( TomNumber t) { return  (t!= null) && t.isEnd(); }public  TomNumber tom_make_End( TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_End(t0); }public  TomNumber tom_get_slot_End_number( TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_Number( TomNumber t) { return  (t!= null) && t.isNumber(); }public  TomNumber tom_make_Number( int t0) { return  getTomSignatureFactory().makeTomNumber_Number(t0); }public  int tom_get_slot_Number_integer( TomNumber t) { return  t.getInteger(); }public boolean tom_is_fun_sym_AbsVar( TomNumber t) { return  (t!= null) && t.isAbsVar(); }public  TomNumber tom_make_AbsVar( TomNumber t0) { return  getTomSignatureFactory().makeTomNumber_AbsVar(t0); }public  TomNumber tom_get_slot_AbsVar_number( TomNumber t) { return  t.getNumber(); }public boolean tom_is_fun_sym_RenamedVar( TomNumber t) { return  (t!= null) && t.isRenamedVar(); }public  TomNumber tom_make_RenamedVar( TomName t0) { return  getTomSignatureFactory().makeTomNumber_RenamedVar(t0); }public  TomName tom_get_slot_RenamedVar_astName( TomNumber t) { return  t.getAstName(); }public boolean tom_is_fun_sym_RuleVar( TomNumber t) { return  (t!= null) && t.isRuleVar(); }public  TomNumber tom_make_RuleVar() { return  getTomSignatureFactory().makeTomNumber_RuleVar(); }public Object tom_get_fun_sym_TomRule( TomRule t) { return null; }public boolean tom_cmp_fun_sym_TomRule(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomRule( TomRule t,  int n) { return null; }public boolean tom_terms_equal_TomRule(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_RewriteRule( TomRule t) { return  (t!= null) && t.isRewriteRule(); }public  TomRule tom_make_RewriteRule( TomTerm t0,  TomTerm t1,  TomList t2,  OptionList t3) { return  getTomSignatureFactory().makeTomRule_RewriteRule(t0, t1, t2, t3); }public  TomTerm tom_get_slot_RewriteRule_lhs( TomRule t) { return  t.getLhs(); }public  TomTerm tom_get_slot_RewriteRule_rhs( TomRule t) { return  t.getRhs(); }public  TomList tom_get_slot_RewriteRule_condList( TomRule t) { return  t.getCondList(); }public  OptionList tom_get_slot_RewriteRule_option( TomRule t) { return  t.getOption(); }public Object tom_get_fun_sym_Instruction( Instruction t) { return null; }public boolean tom_cmp_fun_sym_Instruction(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Instruction( Instruction t,  int n) { return null; }public boolean tom_terms_equal_Instruction(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_IfThenElse( Instruction t) { return  (t!= null) && t.isIfThenElse(); }public  Instruction tom_make_IfThenElse( Expression t0,  TomList t1,  TomList t2) { return  getTomSignatureFactory().makeInstruction_IfThenElse(t0, t1, t2); }public  Expression tom_get_slot_IfThenElse_condition( Instruction t) { return  t.getCondition(); }public  TomList tom_get_slot_IfThenElse_succesList( Instruction t) { return  t.getSuccesList(); }public  TomList tom_get_slot_IfThenElse_failureList( Instruction t) { return  t.getFailureList(); }public boolean tom_is_fun_sym_DoWhile( Instruction t) { return  (t!= null) && t.isDoWhile(); }public  Instruction tom_make_DoWhile( TomList t0,  Expression t1) { return  getTomSignatureFactory().makeInstruction_DoWhile(t0, t1); }public  TomList tom_get_slot_DoWhile_instList( Instruction t) { return  t.getInstList(); }public  Expression tom_get_slot_DoWhile_condition( Instruction t) { return  t.getCondition(); }public boolean tom_is_fun_sym_Assign( Instruction t) { return  (t!= null) && t.isAssign(); }public  Instruction tom_make_Assign( TomTerm t0,  Expression t1) { return  getTomSignatureFactory().makeInstruction_Assign(t0, t1); }public  TomTerm tom_get_slot_Assign_variable( Instruction t) { return  t.getVariable(); }public  Expression tom_get_slot_Assign_source( Instruction t) { return  t.getSource(); }public boolean tom_is_fun_sym_Let( Instruction t) { return  (t!= null) && t.isLet(); }public  Instruction tom_make_Let( TomTerm t0,  Expression t1,  Instruction t2) { return  getTomSignatureFactory().makeInstruction_Let(t0, t1, t2); }public  TomTerm tom_get_slot_Let_variable( Instruction t) { return  t.getVariable(); }public  Expression tom_get_slot_Let_source( Instruction t) { return  t.getSource(); }public  Instruction tom_get_slot_Let_astInstruction( Instruction t) { return  t.getAstInstruction(); }public boolean tom_is_fun_sym_AssignMatchSubject( Instruction t) { return  (t!= null) && t.isAssignMatchSubject(); }public  Instruction tom_make_AssignMatchSubject( TomTerm t0,  Expression t1) { return  getTomSignatureFactory().makeInstruction_AssignMatchSubject(t0, t1); }public  TomTerm tom_get_slot_AssignMatchSubject_kid1( Instruction t) { return  t.getKid1(); }public  Expression tom_get_slot_AssignMatchSubject_source( Instruction t) { return  t.getSource(); }public boolean tom_is_fun_sym_Increment( Instruction t) { return  (t!= null) && t.isIncrement(); }public  Instruction tom_make_Increment( TomTerm t0) { return  getTomSignatureFactory().makeInstruction_Increment(t0); }public  TomTerm tom_get_slot_Increment_kid1( Instruction t) { return  t.getKid1(); }public boolean tom_is_fun_sym_Action( Instruction t) { return  (t!= null) && t.isAction(); }public  Instruction tom_make_Action( TomList t0) { return  getTomSignatureFactory().makeInstruction_Action(t0); }public  TomList tom_get_slot_Action_instList( Instruction t) { return  t.getInstList(); }public boolean tom_is_fun_sym_Return( Instruction t) { return  (t!= null) && t.isReturn(); }public  Instruction tom_make_Return( TomTerm t0) { return  getTomSignatureFactory().makeInstruction_Return(t0); }public  TomTerm tom_get_slot_Return_kid1( Instruction t) { return  t.getKid1(); }public boolean tom_is_fun_sym_OpenBlock( Instruction t) { return  (t!= null) && t.isOpenBlock(); }public  Instruction tom_make_OpenBlock() { return  getTomSignatureFactory().makeInstruction_OpenBlock(); }public boolean tom_is_fun_sym_CloseBlock( Instruction t) { return  (t!= null) && t.isCloseBlock(); }public  Instruction tom_make_CloseBlock() { return  getTomSignatureFactory().makeInstruction_CloseBlock(); }public boolean tom_is_fun_sym_Nop( Instruction t) { return  (t!= null) && t.isNop(); }public  Instruction tom_make_Nop() { return  getTomSignatureFactory().makeInstruction_Nop(); }public boolean tom_is_fun_sym_UnamedBlock( Instruction t) { return  (t!= null) && t.isUnamedBlock(); }public  Instruction tom_make_UnamedBlock( TomList t0) { return  getTomSignatureFactory().makeInstruction_UnamedBlock(t0); }public  TomList tom_get_slot_UnamedBlock_instList( Instruction t) { return  t.getInstList(); }public boolean tom_is_fun_sym_NamedBlock( Instruction t) { return  (t!= null) && t.isNamedBlock(); }public  Instruction tom_make_NamedBlock( String t0,  TomList t1) { return  getTomSignatureFactory().makeInstruction_NamedBlock(t0, t1); }public  String tom_get_slot_NamedBlock_blockName( Instruction t) { return  t.getBlockName(); }public  TomList tom_get_slot_NamedBlock_instList( Instruction t) { return  t.getInstList(); }public Object tom_get_fun_sym_TomSymbol( TomSymbol t) { return null; }public boolean tom_cmp_fun_sym_TomSymbol(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomSymbol( TomSymbol t,  int n) { return null; }public boolean tom_terms_equal_TomSymbol(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_emptySymbol( TomSymbol t) { return  (t!= null) && t.isEmptySymbol(); }public  TomSymbol tom_make_emptySymbol() { return  getTomSignatureFactory().makeTomSymbol_EmptySymbol(); }public boolean tom_is_fun_sym_Symbol( TomSymbol t) { return  (t!= null) && t.isSymbol(); }public  TomSymbol tom_make_Symbol( TomName t0,  TomType t1,  SlotList t2,  OptionList t3,  TargetLanguage t4) { return  getTomSignatureFactory().makeTomSymbol_Symbol(t0, t1, t2, t3, t4); }public  TomName tom_get_slot_Symbol_astName( TomSymbol t) { return  t.getAstName(); }public  TomType tom_get_slot_Symbol_typesToType( TomSymbol t) { return  t.getTypesToType(); }public  SlotList tom_get_slot_Symbol_slotList( TomSymbol t) { return  t.getSlotList(); }public  OptionList tom_get_slot_Symbol_option( TomSymbol t) { return  t.getOption(); }public  TargetLanguage tom_get_slot_Symbol_tlCode( TomSymbol t) { return  t.getTlCode(); }public Object tom_get_fun_sym_PairNameDecl( PairNameDecl t) { return null; }public boolean tom_cmp_fun_sym_PairNameDecl(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PairNameDecl( PairNameDecl t,  int n) { return null; }public boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Slot( PairNameDecl t) { return  (t!= null) && t.isSlot(); }public  PairNameDecl tom_make_Slot( TomName t0,  Declaration t1) { return  getTomSignatureFactory().makePairNameDecl_Slot(t0, t1); }public  TomName tom_get_slot_Slot_slotName( PairNameDecl t) { return  t.getSlotName(); }public  Declaration tom_get_slot_Slot_slotDecl( PairNameDecl t) { return  t.getSlotDecl(); }public Object tom_get_fun_sym_TomSymbolTable( TomSymbolTable t) { return null; }public boolean tom_cmp_fun_sym_TomSymbolTable(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomSymbolTable( TomSymbolTable t,  int n) { return null; }public boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Table( TomSymbolTable t) { return  (t!= null) && t.isTable(); }public  TomSymbolTable tom_make_Table( TomEntryList t0) { return  getTomSignatureFactory().makeTomSymbolTable_Table(t0); }public  TomEntryList tom_get_slot_Table_entryList( TomSymbolTable t) { return  t.getEntryList(); }public Object tom_get_fun_sym_TomEntry( TomEntry t) { return null; }public boolean tom_cmp_fun_sym_TomEntry(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomEntry( TomEntry t,  int n) { return null; }public boolean tom_terms_equal_TomEntry(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Entry( TomEntry t) { return  (t!= null) && t.isEntry(); }public  TomEntry tom_make_Entry( String t0,  TomSymbol t1) { return  getTomSignatureFactory().makeTomEntry_Entry(t0, t1); }public  String tom_get_slot_Entry_strName( TomEntry t) { return  t.getStrName(); }public  TomSymbol tom_get_slot_Entry_astSymbol( TomEntry t) { return  t.getAstSymbol(); }public Object tom_get_fun_sym_TomStructureTable( TomStructureTable t) { return null; }public boolean tom_cmp_fun_sym_TomStructureTable(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomStructureTable( TomStructureTable t,  int n) { return null; }public boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_StructTable( TomStructureTable t) { return  (t!= null) && t.isStructTable(); }public  TomStructureTable tom_make_StructTable( TomList t0) { return  getTomSignatureFactory().makeTomStructureTable_StructTable(t0); }public  TomList tom_get_slot_StructTable_structList( TomStructureTable t) { return  t.getStructList(); }public Object tom_get_fun_sym_TomError( TomError t) { return null; }public boolean tom_cmp_fun_sym_TomError(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomError( TomError t,  int n) { return null; }public boolean tom_terms_equal_TomError(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_Error( TomError t) { return  (t!= null) && t.isError(); }public  TomError tom_make_Error( String t0,  String t1,  int t2,  int t3) { return  getTomSignatureFactory().makeTomError_Error(t0, t1, t2, t3); }public  String tom_get_slot_Error_message( TomError t) { return  t.getMessage(); }public  String tom_get_slot_Error_file( TomError t) { return  t.getFile(); }public  int tom_get_slot_Error_line( TomError t) { return  t.getLine(); }public  int tom_get_slot_Error_level( TomError t) { return  t.getLevel(); }public Object tom_get_fun_sym_TomList( TomList t) { return null; }public boolean tom_cmp_fun_sym_TomList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_TomList( TomList l) { return l.getHead(); }public  TomList tom_get_tail_TomList( TomList l) { return l.getTail(); }public boolean tom_is_empty_TomList( TomList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomTerm( TomList t) { return (t!= null) && t.isSortTomList(); }public Object tom_make_empty_concTomTerm() { return getTomSignatureFactory().makeTomList(); }public  TomList tom_make_insert_concTomTerm( TomTerm e,  TomList l) { return getTomSignatureFactory().makeTomList(e,l); } public  TomList tom_reverse_concTomTerm( TomList l) {     TomList result = ( TomList)tom_make_empty_concTomTerm();     while(!tom_is_empty_TomList(l) ) {       result = ( TomList)tom_make_insert_concTomTerm(( TomTerm)tom_get_head_TomList(l),result);       l = ( TomList)tom_get_tail_TomList(l);     }     return result;   }  public  TomList tom_insert_list_concTomTerm( TomList l1,  TomList l2) {    if(tom_is_empty_TomList(l1)) {     return l2;    } else if(tom_is_empty_TomList(l2)) {     return l1;    } else if(tom_is_empty_TomList(( TomList)tom_get_tail_TomList(l1))) {     return ( TomList)tom_make_insert_concTomTerm(( TomTerm)tom_get_head_TomList(l1),l2);    } else {      return ( TomList)tom_make_insert_concTomTerm(( TomTerm)tom_get_head_TomList(l1),tom_insert_list_concTomTerm(( TomList)tom_get_tail_TomList(l1),l2));    }   }  public  TomList tom_get_slice_concTomTerm( TomList begin,  TomList end) {     TomList result = ( TomList)tom_make_empty_concTomTerm();     while(!tom_terms_equal_TomList(begin,end)) {       result = ( TomList)tom_make_insert_concTomTerm(( TomTerm)tom_get_head_TomList(begin),result);       begin = ( TomList)tom_get_tail_TomList(begin);      }     result = ( TomList)tom_reverse_concTomTerm(result);     return result;   } public boolean tom_is_fun_sym_emptyTomList( TomList t) { return  (t!= null) && t.isEmpty(); }public  TomList tom_make_emptyTomList() { return getTomSignatureFactory().makeTomList(); }public boolean tom_is_fun_sym_manyTomList( TomList t) { return  (t!= null) && t.isMany(); }public  TomList tom_make_manyTomList( TomTerm e,  TomList l) { return getTomSignatureFactory().makeTomList(e,l); }public  TomTerm tom_get_slot_manyTomList_head( TomList t) { return  t.getHead(); }public  TomList tom_get_slot_manyTomList_tail( TomList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomNumberList( TomNumberList t) { return null; }public boolean tom_cmp_fun_sym_TomNumberList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomNumberList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_TomNumberList( TomNumberList l) { return l.getHead(); }public  TomNumberList tom_get_tail_TomNumberList( TomNumberList l) { return l.getTail(); }public boolean tom_is_empty_TomNumberList( TomNumberList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomNumber( TomNumberList t) { return (t!= null) && t.isSortTomNumberList(); }public Object tom_make_empty_concTomNumber() { return getTomSignatureFactory().makeTomNumberList(); }public  TomNumberList tom_make_insert_concTomNumber( TomNumber e,  TomNumberList l) { return getTomSignatureFactory().makeTomNumberList(e,l); } public  TomNumberList tom_reverse_concTomNumber( TomNumberList l) {     TomNumberList result = ( TomNumberList)tom_make_empty_concTomNumber();     while(!tom_is_empty_TomNumberList(l) ) {       result = ( TomNumberList)tom_make_insert_concTomNumber(( TomNumber)tom_get_head_TomNumberList(l),result);       l = ( TomNumberList)tom_get_tail_TomNumberList(l);     }     return result;   }  public  TomNumberList tom_insert_list_concTomNumber( TomNumberList l1,  TomNumberList l2) {    if(tom_is_empty_TomNumberList(l1)) {     return l2;    } else if(tom_is_empty_TomNumberList(l2)) {     return l1;    } else if(tom_is_empty_TomNumberList(( TomNumberList)tom_get_tail_TomNumberList(l1))) {     return ( TomNumberList)tom_make_insert_concTomNumber(( TomNumber)tom_get_head_TomNumberList(l1),l2);    } else {      return ( TomNumberList)tom_make_insert_concTomNumber(( TomNumber)tom_get_head_TomNumberList(l1),tom_insert_list_concTomNumber(( TomNumberList)tom_get_tail_TomNumberList(l1),l2));    }   }  public  TomNumberList tom_get_slice_concTomNumber( TomNumberList begin,  TomNumberList end) {     TomNumberList result = ( TomNumberList)tom_make_empty_concTomNumber();     while(!tom_terms_equal_TomNumberList(begin,end)) {       result = ( TomNumberList)tom_make_insert_concTomNumber(( TomNumber)tom_get_head_TomNumberList(begin),result);       begin = ( TomNumberList)tom_get_tail_TomNumberList(begin);      }     result = ( TomNumberList)tom_reverse_concTomNumber(result);     return result;   } public boolean tom_is_fun_sym_emptyTomNumberList( TomNumberList t) { return  (t!= null) && t.isEmpty(); }public  TomNumberList tom_make_emptyTomNumberList() { return getTomSignatureFactory().makeTomNumberList(); }public boolean tom_is_fun_sym_manyTomNumberList( TomNumberList t) { return  (t!= null) && t.isMany(); }public  TomNumberList tom_make_manyTomNumberList( TomNumber e,  TomNumberList l) { return getTomSignatureFactory().makeTomNumberList(e,l); }public  TomNumber tom_get_slot_manyTomNumberList_head( TomNumberList t) { return  t.getHead(); }public  TomNumberList tom_get_slot_manyTomNumberList_tail( TomNumberList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomRuleList( TomRuleList t) { return null; }public boolean tom_cmp_fun_sym_TomRuleList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomRuleList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_TomRuleList( TomRuleList l) { return l.getHead(); }public  TomRuleList tom_get_tail_TomRuleList( TomRuleList l) { return l.getTail(); }public boolean tom_is_empty_TomRuleList( TomRuleList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomRule( TomRuleList t) { return (t!= null) && t.isSortTomRuleList(); }public Object tom_make_empty_concTomRule() { return getTomSignatureFactory().makeTomRuleList(); }public  TomRuleList tom_make_insert_concTomRule( TomRule e,  TomRuleList l) { return getTomSignatureFactory().makeTomRuleList(e,l); } public  TomRuleList tom_reverse_concTomRule( TomRuleList l) {     TomRuleList result = ( TomRuleList)tom_make_empty_concTomRule();     while(!tom_is_empty_TomRuleList(l) ) {       result = ( TomRuleList)tom_make_insert_concTomRule(( TomRule)tom_get_head_TomRuleList(l),result);       l = ( TomRuleList)tom_get_tail_TomRuleList(l);     }     return result;   }  public  TomRuleList tom_insert_list_concTomRule( TomRuleList l1,  TomRuleList l2) {    if(tom_is_empty_TomRuleList(l1)) {     return l2;    } else if(tom_is_empty_TomRuleList(l2)) {     return l1;    } else if(tom_is_empty_TomRuleList(( TomRuleList)tom_get_tail_TomRuleList(l1))) {     return ( TomRuleList)tom_make_insert_concTomRule(( TomRule)tom_get_head_TomRuleList(l1),l2);    } else {      return ( TomRuleList)tom_make_insert_concTomRule(( TomRule)tom_get_head_TomRuleList(l1),tom_insert_list_concTomRule(( TomRuleList)tom_get_tail_TomRuleList(l1),l2));    }   }  public  TomRuleList tom_get_slice_concTomRule( TomRuleList begin,  TomRuleList end) {     TomRuleList result = ( TomRuleList)tom_make_empty_concTomRule();     while(!tom_terms_equal_TomRuleList(begin,end)) {       result = ( TomRuleList)tom_make_insert_concTomRule(( TomRule)tom_get_head_TomRuleList(begin),result);       begin = ( TomRuleList)tom_get_tail_TomRuleList(begin);      }     result = ( TomRuleList)tom_reverse_concTomRule(result);     return result;   } public boolean tom_is_fun_sym_emptyTomRuleList( TomRuleList t) { return  (t!= null) && t.isEmpty(); }public  TomRuleList tom_make_emptyTomRuleList() { return getTomSignatureFactory().makeTomRuleList(); }public boolean tom_is_fun_sym_manyTomRuleList( TomRuleList t) { return  (t!= null) && t.isMany(); }public  TomRuleList tom_make_manyTomRuleList( TomRule e,  TomRuleList l) { return getTomSignatureFactory().makeTomRuleList(e,l); }public  TomRule tom_get_slot_manyTomRuleList_head( TomRuleList t) { return  t.getHead(); }public  TomRuleList tom_get_slot_manyTomRuleList_tail( TomRuleList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomTypeList( TomTypeList t) { return null; }public boolean tom_cmp_fun_sym_TomTypeList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomTypeList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_TomTypeList( TomTypeList l) { return l.getHead(); }public  TomTypeList tom_get_tail_TomTypeList( TomTypeList l) { return l.getTail(); }public boolean tom_is_empty_TomTypeList( TomTypeList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomType( TomTypeList t) { return (t!= null) && t.isSortTomTypeList(); }public Object tom_make_empty_concTomType() { return getTomSignatureFactory().makeTomTypeList(); }public  TomTypeList tom_make_insert_concTomType( TomType e,  TomTypeList l) { return getTomSignatureFactory().makeTomTypeList(e,l); } public  TomTypeList tom_reverse_concTomType( TomTypeList l) {     TomTypeList result = ( TomTypeList)tom_make_empty_concTomType();     while(!tom_is_empty_TomTypeList(l) ) {       result = ( TomTypeList)tom_make_insert_concTomType(( TomType)tom_get_head_TomTypeList(l),result);       l = ( TomTypeList)tom_get_tail_TomTypeList(l);     }     return result;   }  public  TomTypeList tom_insert_list_concTomType( TomTypeList l1,  TomTypeList l2) {    if(tom_is_empty_TomTypeList(l1)) {     return l2;    } else if(tom_is_empty_TomTypeList(l2)) {     return l1;    } else if(tom_is_empty_TomTypeList(( TomTypeList)tom_get_tail_TomTypeList(l1))) {     return ( TomTypeList)tom_make_insert_concTomType(( TomType)tom_get_head_TomTypeList(l1),l2);    } else {      return ( TomTypeList)tom_make_insert_concTomType(( TomType)tom_get_head_TomTypeList(l1),tom_insert_list_concTomType(( TomTypeList)tom_get_tail_TomTypeList(l1),l2));    }   }  public  TomTypeList tom_get_slice_concTomType( TomTypeList begin,  TomTypeList end) {     TomTypeList result = ( TomTypeList)tom_make_empty_concTomType();     while(!tom_terms_equal_TomTypeList(begin,end)) {       result = ( TomTypeList)tom_make_insert_concTomType(( TomType)tom_get_head_TomTypeList(begin),result);       begin = ( TomTypeList)tom_get_tail_TomTypeList(begin);      }     result = ( TomTypeList)tom_reverse_concTomType(result);     return result;   } public boolean tom_is_fun_sym_emptyTomTypeList( TomTypeList t) { return  (t!= null) && t.isEmpty(); }public  TomTypeList tom_make_emptyTomTypeList() { return getTomSignatureFactory().makeTomTypeList(); }public boolean tom_is_fun_sym_manyTomTypeList( TomTypeList t) { return  (t!= null) && t.isMany(); }public  TomTypeList tom_make_manyTomTypeList( TomType e,  TomTypeList l) { return getTomSignatureFactory().makeTomTypeList(e,l); }public  TomType tom_get_slot_manyTomTypeList_head( TomTypeList t) { return  t.getHead(); }public  TomTypeList tom_get_slot_manyTomTypeList_tail( TomTypeList t) { return  t.getTail(); }public Object tom_get_fun_sym_OptionList( OptionList t) { return null; }public boolean tom_cmp_fun_sym_OptionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_OptionList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_OptionList( OptionList l) { return l.getHead(); }public  OptionList tom_get_tail_OptionList( OptionList l) { return l.getTail(); }public boolean tom_is_empty_OptionList( OptionList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concOption( OptionList t) { return (t!= null) && t.isSortOptionList(); }public Object tom_make_empty_concOption() { return getTomSignatureFactory().makeOptionList(); }public  OptionList tom_make_insert_concOption( Option e,  OptionList l) { return getTomSignatureFactory().makeOptionList(e,l); } public  OptionList tom_reverse_concOption( OptionList l) {     OptionList result = ( OptionList)tom_make_empty_concOption();     while(!tom_is_empty_OptionList(l) ) {       result = ( OptionList)tom_make_insert_concOption(( Option)tom_get_head_OptionList(l),result);       l = ( OptionList)tom_get_tail_OptionList(l);     }     return result;   }  public  OptionList tom_insert_list_concOption( OptionList l1,  OptionList l2) {    if(tom_is_empty_OptionList(l1)) {     return l2;    } else if(tom_is_empty_OptionList(l2)) {     return l1;    } else if(tom_is_empty_OptionList(( OptionList)tom_get_tail_OptionList(l1))) {     return ( OptionList)tom_make_insert_concOption(( Option)tom_get_head_OptionList(l1),l2);    } else {      return ( OptionList)tom_make_insert_concOption(( Option)tom_get_head_OptionList(l1),tom_insert_list_concOption(( OptionList)tom_get_tail_OptionList(l1),l2));    }   }  public  OptionList tom_get_slice_concOption( OptionList begin,  OptionList end) {     OptionList result = ( OptionList)tom_make_empty_concOption();     while(!tom_terms_equal_OptionList(begin,end)) {       result = ( OptionList)tom_make_insert_concOption(( Option)tom_get_head_OptionList(begin),result);       begin = ( OptionList)tom_get_tail_OptionList(begin);      }     result = ( OptionList)tom_reverse_concOption(result);     return result;   } public boolean tom_is_fun_sym_emptyOptionList( OptionList t) { return  (t!= null) && t.isEmpty(); }public  OptionList tom_make_emptyOptionList() { return getTomSignatureFactory().makeOptionList(); }public boolean tom_is_fun_sym_manyOptionList( OptionList t) { return  (t!= null) && t.isMany(); }public  OptionList tom_make_manyOptionList( Option e,  OptionList l) { return getTomSignatureFactory().makeOptionList(e,l); }public  Option tom_get_slot_manyOptionList_head( OptionList t) { return  t.getHead(); }public  OptionList tom_get_slot_manyOptionList_tail( OptionList t) { return  t.getTail(); }public Object tom_get_fun_sym_InstructionList( InstructionList t) { return null; }public boolean tom_cmp_fun_sym_InstructionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_InstructionList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_InstructionList( InstructionList l) { return l.getHead(); }public  InstructionList tom_get_tail_InstructionList( InstructionList l) { return l.getTail(); }public boolean tom_is_empty_InstructionList( InstructionList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concInstruction( InstructionList t) { return (t!= null) && t.isSortInstructionList(); }public Object tom_make_empty_concInstruction() { return getTomSignatureFactory().makeInstructionList(); }public  InstructionList tom_make_insert_concInstruction( Instruction e,  InstructionList l) { return getTomSignatureFactory().makeInstructionList(e,l); } public  InstructionList tom_reverse_concInstruction( InstructionList l) {     InstructionList result = ( InstructionList)tom_make_empty_concInstruction();     while(!tom_is_empty_InstructionList(l) ) {       result = ( InstructionList)tom_make_insert_concInstruction(( Instruction)tom_get_head_InstructionList(l),result);       l = ( InstructionList)tom_get_tail_InstructionList(l);     }     return result;   }  public  InstructionList tom_insert_list_concInstruction( InstructionList l1,  InstructionList l2) {    if(tom_is_empty_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_InstructionList(( InstructionList)tom_get_tail_InstructionList(l1))) {     return ( InstructionList)tom_make_insert_concInstruction(( Instruction)tom_get_head_InstructionList(l1),l2);    } else {      return ( InstructionList)tom_make_insert_concInstruction(( Instruction)tom_get_head_InstructionList(l1),tom_insert_list_concInstruction(( InstructionList)tom_get_tail_InstructionList(l1),l2));    }   }  public  InstructionList tom_get_slice_concInstruction( InstructionList begin,  InstructionList end) {     InstructionList result = ( InstructionList)tom_make_empty_concInstruction();     while(!tom_terms_equal_InstructionList(begin,end)) {       result = ( InstructionList)tom_make_insert_concInstruction(( Instruction)tom_get_head_InstructionList(begin),result);       begin = ( InstructionList)tom_get_tail_InstructionList(begin);      }     result = ( InstructionList)tom_reverse_concInstruction(result);     return result;   } public boolean tom_is_fun_sym_emptyInstructionList( InstructionList t) { return  (t!= null) && t.isEmpty(); }public  InstructionList tom_make_emptyInstructionList() { return getTomSignatureFactory().makeInstructionList(); }public boolean tom_is_fun_sym_manyInstructionList( InstructionList t) { return  (t!= null) && t.isMany(); }public  InstructionList tom_make_manyInstructionList( Instruction e,  InstructionList l) { return getTomSignatureFactory().makeInstructionList(e,l); }public  Instruction tom_get_slot_manyInstructionList_head( InstructionList t) { return  t.getHead(); }public  InstructionList tom_get_slot_manyInstructionList_tail( InstructionList t) { return  t.getTail(); }public Object tom_get_fun_sym_SlotList( SlotList t) { return null; }public boolean tom_cmp_fun_sym_SlotList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_SlotList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_SlotList( SlotList l) { return l.getHead(); }public  SlotList tom_get_tail_SlotList( SlotList l) { return l.getTail(); }public boolean tom_is_empty_SlotList( SlotList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concPairNameDecl( SlotList t) { return (t!= null) && t.isSortSlotList(); }public Object tom_make_empty_concPairNameDecl() { return getTomSignatureFactory().makeSlotList(); }public  SlotList tom_make_insert_concPairNameDecl( PairNameDecl e,  SlotList l) { return getTomSignatureFactory().makeSlotList(e,l); } public  SlotList tom_reverse_concPairNameDecl( SlotList l) {     SlotList result = ( SlotList)tom_make_empty_concPairNameDecl();     while(!tom_is_empty_SlotList(l) ) {       result = ( SlotList)tom_make_insert_concPairNameDecl(( PairNameDecl)tom_get_head_SlotList(l),result);       l = ( SlotList)tom_get_tail_SlotList(l);     }     return result;   }  public  SlotList tom_insert_list_concPairNameDecl( SlotList l1,  SlotList l2) {    if(tom_is_empty_SlotList(l1)) {     return l2;    } else if(tom_is_empty_SlotList(l2)) {     return l1;    } else if(tom_is_empty_SlotList(( SlotList)tom_get_tail_SlotList(l1))) {     return ( SlotList)tom_make_insert_concPairNameDecl(( PairNameDecl)tom_get_head_SlotList(l1),l2);    } else {      return ( SlotList)tom_make_insert_concPairNameDecl(( PairNameDecl)tom_get_head_SlotList(l1),tom_insert_list_concPairNameDecl(( SlotList)tom_get_tail_SlotList(l1),l2));    }   }  public  SlotList tom_get_slice_concPairNameDecl( SlotList begin,  SlotList end) {     SlotList result = ( SlotList)tom_make_empty_concPairNameDecl();     while(!tom_terms_equal_SlotList(begin,end)) {       result = ( SlotList)tom_make_insert_concPairNameDecl(( PairNameDecl)tom_get_head_SlotList(begin),result);       begin = ( SlotList)tom_get_tail_SlotList(begin);      }     result = ( SlotList)tom_reverse_concPairNameDecl(result);     return result;   } public boolean tom_is_fun_sym_emptySlotList( SlotList t) { return  (t!= null) && t.isEmpty(); }public  SlotList tom_make_emptySlotList() { return getTomSignatureFactory().makeSlotList(); }public boolean tom_is_fun_sym_manySlotList( SlotList t) { return  (t!= null) && t.isMany(); }public  SlotList tom_make_manySlotList( PairNameDecl e,  SlotList l) { return getTomSignatureFactory().makeSlotList(e,l); }public  PairNameDecl tom_get_slot_manySlotList_head( SlotList t) { return  t.getHead(); }public  SlotList tom_get_slot_manySlotList_tail( SlotList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomEntryList( TomEntryList t) { return null; }public boolean tom_cmp_fun_sym_TomEntryList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomEntryList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_TomEntryList( TomEntryList l) { return l.getHead(); }public  TomEntryList tom_get_tail_TomEntryList( TomEntryList l) { return l.getTail(); }public boolean tom_is_empty_TomEntryList( TomEntryList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomEntry( TomEntryList t) { return (t!= null) && t.isSortTomEntryList(); }public Object tom_make_empty_concTomEntry() { return getTomSignatureFactory().makeTomEntryList(); }public  TomEntryList tom_make_insert_concTomEntry( TomEntry e,  TomEntryList l) { return getTomSignatureFactory().makeTomEntryList(e,l); } public  TomEntryList tom_reverse_concTomEntry( TomEntryList l) {     TomEntryList result = ( TomEntryList)tom_make_empty_concTomEntry();     while(!tom_is_empty_TomEntryList(l) ) {       result = ( TomEntryList)tom_make_insert_concTomEntry(( TomEntry)tom_get_head_TomEntryList(l),result);       l = ( TomEntryList)tom_get_tail_TomEntryList(l);     }     return result;   }  public  TomEntryList tom_insert_list_concTomEntry( TomEntryList l1,  TomEntryList l2) {    if(tom_is_empty_TomEntryList(l1)) {     return l2;    } else if(tom_is_empty_TomEntryList(l2)) {     return l1;    } else if(tom_is_empty_TomEntryList(( TomEntryList)tom_get_tail_TomEntryList(l1))) {     return ( TomEntryList)tom_make_insert_concTomEntry(( TomEntry)tom_get_head_TomEntryList(l1),l2);    } else {      return ( TomEntryList)tom_make_insert_concTomEntry(( TomEntry)tom_get_head_TomEntryList(l1),tom_insert_list_concTomEntry(( TomEntryList)tom_get_tail_TomEntryList(l1),l2));    }   }  public  TomEntryList tom_get_slice_concTomEntry( TomEntryList begin,  TomEntryList end) {     TomEntryList result = ( TomEntryList)tom_make_empty_concTomEntry();     while(!tom_terms_equal_TomEntryList(begin,end)) {       result = ( TomEntryList)tom_make_insert_concTomEntry(( TomEntry)tom_get_head_TomEntryList(begin),result);       begin = ( TomEntryList)tom_get_tail_TomEntryList(begin);      }     result = ( TomEntryList)tom_reverse_concTomEntry(result);     return result;   } public boolean tom_is_fun_sym_emptyTomEntryList( TomEntryList t) { return  (t!= null) && t.isEmpty(); }public  TomEntryList tom_make_emptyTomEntryList() { return getTomSignatureFactory().makeTomEntryList(); }public boolean tom_is_fun_sym_manyTomEntryList( TomEntryList t) { return  (t!= null) && t.isMany(); }public  TomEntryList tom_make_manyTomEntryList( TomEntry e,  TomEntryList l) { return getTomSignatureFactory().makeTomEntryList(e,l); }public  TomEntry tom_get_slot_manyTomEntryList_head( TomEntryList t) { return  t.getHead(); }public  TomEntryList tom_get_slot_manyTomEntryList_tail( TomEntryList t) { return  t.getTail(); }public Object tom_get_fun_sym_TomErrorList( TomErrorList t) { return null; }public boolean tom_cmp_fun_sym_TomErrorList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomErrorList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_TomErrorList( TomErrorList l) { return l.getHead(); }public  TomErrorList tom_get_tail_TomErrorList( TomErrorList l) { return l.getTail(); }public boolean tom_is_empty_TomErrorList( TomErrorList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomError( TomErrorList t) { return (t!= null) && t.isSortTomErrorList(); }public Object tom_make_empty_concTomError() { return getTomSignatureFactory().makeTomErrorList(); }public  TomErrorList tom_make_insert_concTomError( TomError e,  TomErrorList l) { return getTomSignatureFactory().makeTomErrorList(e,l); } public  TomErrorList tom_reverse_concTomError( TomErrorList l) {     TomErrorList result = ( TomErrorList)tom_make_empty_concTomError();     while(!tom_is_empty_TomErrorList(l) ) {       result = ( TomErrorList)tom_make_insert_concTomError(( TomError)tom_get_head_TomErrorList(l),result);       l = ( TomErrorList)tom_get_tail_TomErrorList(l);     }     return result;   }  public  TomErrorList tom_insert_list_concTomError( TomErrorList l1,  TomErrorList l2) {    if(tom_is_empty_TomErrorList(l1)) {     return l2;    } else if(tom_is_empty_TomErrorList(l2)) {     return l1;    } else if(tom_is_empty_TomErrorList(( TomErrorList)tom_get_tail_TomErrorList(l1))) {     return ( TomErrorList)tom_make_insert_concTomError(( TomError)tom_get_head_TomErrorList(l1),l2);    } else {      return ( TomErrorList)tom_make_insert_concTomError(( TomError)tom_get_head_TomErrorList(l1),tom_insert_list_concTomError(( TomErrorList)tom_get_tail_TomErrorList(l1),l2));    }   }  public  TomErrorList tom_get_slice_concTomError( TomErrorList begin,  TomErrorList end) {     TomErrorList result = ( TomErrorList)tom_make_empty_concTomError();     while(!tom_terms_equal_TomErrorList(begin,end)) {       result = ( TomErrorList)tom_make_insert_concTomError(( TomError)tom_get_head_TomErrorList(begin),result);       begin = ( TomErrorList)tom_get_tail_TomErrorList(begin);      }     result = ( TomErrorList)tom_reverse_concTomError(result);     return result;   } public boolean tom_is_fun_sym_emptyTomErrorList( TomErrorList t) { return  (t!= null) && t.isEmpty(); }public  TomErrorList tom_make_emptyTomErrorList() { return getTomSignatureFactory().makeTomErrorList(); }public boolean tom_is_fun_sym_manyTomErrorList( TomErrorList t) { return  (t!= null) && t.isMany(); }public  TomErrorList tom_make_manyTomErrorList( TomError e,  TomErrorList l) { return getTomSignatureFactory().makeTomErrorList(e,l); }public  TomError tom_get_slot_manyTomErrorList_head( TomErrorList t) { return  t.getHead(); }public  TomErrorList tom_get_slot_manyTomErrorList_tail( TomErrorList t) { return  t.getTail(); }public Object tom_get_fun_sym_SymbolList( SymbolList t) { return null; }public boolean tom_cmp_fun_sym_SymbolList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_SymbolList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_SymbolList( SymbolList l) { return l.getHead(); }public  SymbolList tom_get_tail_SymbolList( SymbolList l) { return l.getTail(); }public boolean tom_is_empty_SymbolList( SymbolList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomSymbol( SymbolList t) { return (t!= null) && t.isSortSymbolList(); }public Object tom_make_empty_concTomSymbol() { return getTomSignatureFactory().makeSymbolList(); }public  SymbolList tom_make_insert_concTomSymbol( TomSymbol e,  SymbolList l) { return getTomSignatureFactory().makeSymbolList(e,l); } public  SymbolList tom_reverse_concTomSymbol( SymbolList l) {     SymbolList result = ( SymbolList)tom_make_empty_concTomSymbol();     while(!tom_is_empty_SymbolList(l) ) {       result = ( SymbolList)tom_make_insert_concTomSymbol(( TomSymbol)tom_get_head_SymbolList(l),result);       l = ( SymbolList)tom_get_tail_SymbolList(l);     }     return result;   }  public  SymbolList tom_insert_list_concTomSymbol( SymbolList l1,  SymbolList l2) {    if(tom_is_empty_SymbolList(l1)) {     return l2;    } else if(tom_is_empty_SymbolList(l2)) {     return l1;    } else if(tom_is_empty_SymbolList(( SymbolList)tom_get_tail_SymbolList(l1))) {     return ( SymbolList)tom_make_insert_concTomSymbol(( TomSymbol)tom_get_head_SymbolList(l1),l2);    } else {      return ( SymbolList)tom_make_insert_concTomSymbol(( TomSymbol)tom_get_head_SymbolList(l1),tom_insert_list_concTomSymbol(( SymbolList)tom_get_tail_SymbolList(l1),l2));    }   }  public  SymbolList tom_get_slice_concTomSymbol( SymbolList begin,  SymbolList end) {     SymbolList result = ( SymbolList)tom_make_empty_concTomSymbol();     while(!tom_terms_equal_SymbolList(begin,end)) {       result = ( SymbolList)tom_make_insert_concTomSymbol(( TomSymbol)tom_get_head_SymbolList(begin),result);       begin = ( SymbolList)tom_get_tail_SymbolList(begin);      }     result = ( SymbolList)tom_reverse_concTomSymbol(result);     return result;   } public boolean tom_is_fun_sym_emptySymbolList( SymbolList t) { return  (t!= null) && t.isEmpty(); }public  SymbolList tom_make_emptySymbolList() { return getTomSignatureFactory().makeSymbolList(); }public boolean tom_is_fun_sym_manySymbolList( SymbolList t) { return  (t!= null) && t.isMany(); }public  SymbolList tom_make_manySymbolList( TomSymbol e,  SymbolList l) { return getTomSignatureFactory().makeSymbolList(e,l); }public  TomSymbol tom_get_slot_manySymbolList_head( SymbolList t) { return  t.getHead(); }public  SymbolList tom_get_slot_manySymbolList_tail( SymbolList t) { return  t.getTail(); }public Object tom_get_fun_sym_NameList( NameList t) { return null; }public boolean tom_cmp_fun_sym_NameList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_NameList(Object t1, Object t2) { return t1.equals(t2); }public Object tom_get_head_NameList( NameList l) { return l.getHead(); }public  NameList tom_get_tail_NameList( NameList l) { return l.getTail(); }public boolean tom_is_empty_NameList( NameList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomName( NameList t) { return (t!= null) && t.isSortNameList(); }public Object tom_make_empty_concTomName() { return getTomSignatureFactory().makeNameList(); }public  NameList tom_make_insert_concTomName( TomName e,  NameList l) { return getTomSignatureFactory().makeNameList(e,l); } public  NameList tom_reverse_concTomName( NameList l) {     NameList result = ( NameList)tom_make_empty_concTomName();     while(!tom_is_empty_NameList(l) ) {       result = ( NameList)tom_make_insert_concTomName(( TomName)tom_get_head_NameList(l),result);       l = ( NameList)tom_get_tail_NameList(l);     }     return result;   }  public  NameList tom_insert_list_concTomName( NameList l1,  NameList l2) {    if(tom_is_empty_NameList(l1)) {     return l2;    } else if(tom_is_empty_NameList(l2)) {     return l1;    } else if(tom_is_empty_NameList(( NameList)tom_get_tail_NameList(l1))) {     return ( NameList)tom_make_insert_concTomName(( TomName)tom_get_head_NameList(l1),l2);    } else {      return ( NameList)tom_make_insert_concTomName(( TomName)tom_get_head_NameList(l1),tom_insert_list_concTomName(( NameList)tom_get_tail_NameList(l1),l2));    }   }  public  NameList tom_get_slice_concTomName( NameList begin,  NameList end) {     NameList result = ( NameList)tom_make_empty_concTomName();     while(!tom_terms_equal_NameList(begin,end)) {       result = ( NameList)tom_make_insert_concTomName(( TomName)tom_get_head_NameList(begin),result);       begin = ( NameList)tom_get_tail_NameList(begin);      }     result = ( NameList)tom_reverse_concTomName(result);     return result;   } public boolean tom_is_fun_sym_emptyNameList( NameList t) { return  (t!= null) && t.isEmpty(); }public  NameList tom_make_emptyNameList() { return getTomSignatureFactory().makeNameList(); }public boolean tom_is_fun_sym_manyNameList( NameList t) { return  (t!= null) && t.isMany(); }public  NameList tom_make_manyNameList( TomName e,  NameList l) { return getTomSignatureFactory().makeNameList(e,l); }public  TomName tom_get_slot_manyNameList_head( NameList t) { return  t.getHead(); }public  NameList tom_get_slot_manyNameList_tail( NameList t) { return  t.getTail(); }   
// ------------------------------------------------------------
 
  private int matchNumber = 0;

  private OptionList option() {
    return ast().makeOption();
  }

  Replace1 replace_preProcessing = new Replace1() {
      public ATerm apply(ATerm t) { return preProcessing((TomTerm)t); }
    };
  
  Replace1 replace_preProcessing_makeTerm = new Replace1() {
      public ATerm apply(ATerm t) {
        TomTerm subject = (TomTerm)t;
        return preProcessing(tom_make_MakeTerm(subject) );
      }
    }; 


    /* 
     * preProcessing:
     * replaces MakeTerm by BuildList, BuildArray or BuildTerm
     */

  public TomTerm preProcessing(TomTerm subject) {
      //%variable
      //System.out.println("preProcessing subject: " + subject);
     {  TomTerm tom_match1_1 = null; tom_match1_1 = ( TomTerm) subject;_match1_pattern1: {  TomList l = null; if(tom_is_fun_sym_Tom(tom_match1_1) ||  false ) {  TomList tom_match1_1_1 = null; tom_match1_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match1_1); l = ( TomList) tom_match1_1_1;
 
        return tom_make_Tom(tomListMap(l, replace_preProcessing)) ;
       }}_match1_pattern2: {  TomTerm var = null;  TomName name = null; if(tom_is_fun_sym_MakeTerm(tom_match1_1) ||  false ) {  TomTerm tom_match1_1_1 = null; tom_match1_1_1 = ( TomTerm) tom_get_slot_MakeTerm_kid1(tom_match1_1); if(tom_is_fun_sym_Variable(tom_match1_1_1) ||  false ) {  TomName tom_match1_1_1_2 = null; tom_match1_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match1_1_1); var = ( TomTerm) tom_match1_1_1; name = ( TomName) tom_match1_1_1_2;

 
        return var;
       } }}_match1_pattern3: {  TomName name = null;  TomTerm var = null; if(tom_is_fun_sym_MakeTerm(tom_match1_1) ||  false ) {  TomTerm tom_match1_1_1 = null; tom_match1_1_1 = ( TomTerm) tom_get_slot_MakeTerm_kid1(tom_match1_1); if(tom_is_fun_sym_VariableStar(tom_match1_1_1) ||  false ) {  TomName tom_match1_1_1_2 = null; tom_match1_1_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match1_1_1); var = ( TomTerm) tom_match1_1_1; name = ( TomName) tom_match1_1_1_2;

 
        return var;
       } }}_match1_pattern4: {  TomList termArgs = null;  OptionList optionList = null;  TomName tom_absvar1 = null; if(tom_is_fun_sym_MakeTerm(tom_match1_1) ||  false ) {  TomTerm tom_match1_1_1 = null; tom_match1_1_1 = ( TomTerm) tom_get_slot_MakeTerm_kid1(tom_match1_1); if(tom_is_fun_sym_Appl(tom_match1_1_1) ||  false ) {  OptionList tom_match1_1_1_1 = null;  NameList tom_match1_1_1_2 = null;  TomList tom_match1_1_1_3 = null; tom_match1_1_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match1_1_1); tom_match1_1_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match1_1_1); tom_match1_1_1_3 = ( TomList) tom_get_slot_Appl_args(tom_match1_1_1); optionList = ( OptionList) tom_match1_1_1_1; if(tom_is_fun_sym_concTomName(tom_match1_1_1_2) ||  false ) {  NameList tom_match1_1_1_2_list1 = null; tom_match1_1_1_2_list1 = ( NameList) tom_match1_1_1_2; if(!(tom_is_empty_NameList(tom_match1_1_1_2_list1))) { tom_absvar1 = ( TomName) tom_get_head_NameList(tom_match1_1_1_2_list1); tom_match1_1_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match1_1_1_2_list1); if(tom_is_empty_NameList(tom_match1_1_1_2_list1)) { termArgs = ( TomList) tom_match1_1_1_3; {  TomName tom_match2_1 = null; tom_match2_1 = ( TomName) tom_absvar1;_match2_pattern1: {  TomName name = null;  String tomName = null; if(tom_is_fun_sym_Name(tom_match2_1) ||  false ) {  String tom_match2_1_1 = null; tom_match2_1_1 = ( String) tom_get_slot_Name_string(tom_match2_1); name = ( TomName) tom_match2_1; tomName = ( String) tom_match2_1_1;

 
        TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
        TomList newTermArgs = tomListMap(termArgs,replace_preProcessing_makeTerm);

        if(tomSymbol==null || isDefinedSymbol(tomSymbol)) {
          return tom_make_FunctionCall(name,newTermArgs) ;
        } else {
          if(isListOperator(tomSymbol)) {
            return tom_make_BuildList(name,newTermArgs) ;
          } else if(isArrayOperator(tomSymbol)) {
            return tom_make_BuildArray(name,newTermArgs) ;
          } else {
            return tom_make_BuildTerm(name,newTermArgs) ;
          }
        }
       }} } } } } } }}_match1_pattern5: {  TomTerm t = null; t = ( TomTerm) tom_match1_1;


 
          //System.out.println("preProcessing default: " + t);
        return t;
      } }
 
  }

  private TomName getLabel(OptionList list) {
    while(!list.isEmpty()) {
      Option subject = list.getHead();
       {  Option tom_match3_1 = null; tom_match3_1 = ( Option) subject;_match3_pattern1: {  TomName name = null; if(tom_is_fun_sym_Label(tom_match3_1) ||  false ) {  TomName tom_match3_1_1 = null; tom_match3_1_1 = ( TomName) tom_get_slot_Label_astName(tom_match3_1); if(tom_is_fun_sym_Name(tom_match3_1_1) ||  false ) { name = ( TomName) tom_match3_1_1;
  return name;  } }}_match3_pattern2: {
  list = list.getTail(); } }
 
    }
    return null;
  }
  
    /* 
     * compileMatching:
     * compiles the Match construct into a matching automaton: CompiledMatch
     */
 
  public TomTerm compileMatching(TomTerm subject) {
    Replace1 replace_compileMatching = new Replace1() {
        public ATerm apply(ATerm subject) {
          if(subject instanceof TomTerm) { 
             {  TomTerm tom_match4_1 = null; tom_match4_1 = ( TomTerm) subject;_match4_pattern1: {  OptionList optionList = null;  TomList l2 = null;  TomList l1 = null; if(tom_is_fun_sym_Match(tom_match4_1) ||  false ) {  TomTerm tom_match4_1_1 = null;  TomTerm tom_match4_1_2 = null;  OptionList tom_match4_1_3 = null; tom_match4_1_1 = ( TomTerm) tom_get_slot_Match_subjectList(tom_match4_1); tom_match4_1_2 = ( TomTerm) tom_get_slot_Match_patternList(tom_match4_1); tom_match4_1_3 = ( OptionList) tom_get_slot_Match_option(tom_match4_1); if(tom_is_fun_sym_SubjectList(tom_match4_1_1) ||  false ) {  TomList tom_match4_1_1_1 = null; tom_match4_1_1_1 = ( TomList) tom_get_slot_SubjectList_tomList(tom_match4_1_1); l1 = ( TomList) tom_match4_1_1_1; if(tom_is_fun_sym_PatternList(tom_match4_1_2) ||  false ) {  TomList tom_match4_1_2_1 = null; tom_match4_1_2_1 = ( TomList) tom_get_slot_PatternList_tomList(tom_match4_1_2); l2 = ( TomList) tom_match4_1_2_1; optionList = ( OptionList) tom_match4_1_3;
 

                boolean generatedMatch = false;
                String currentDebugKey = "noDebug";
                if(debugMode) {
                  generatedMatch = hasGeneratedMatch(optionList);
                  Option orgTrack = findOriginTracking(optionList);
                  currentDebugKey = orgTrack.getFileName().getString() + orgTrack.getLine();
                }
                
                TomList patternList, actionList;
                TomList automataList = empty();
                TomNumberList rootpath = tsf().makeTomNumberList();
                matchNumber++;
                rootpath = (TomNumberList) rootpath.append(tom_make_MatchNumber(makeNumber(matchNumber)) );
                
                  /*
                   * for each pattern action (<term>,...,<term> -> <action>)
                   * build a matching automata
                   */
                int actionNumber = 0;
                boolean defaultPA =false;
                while(!l2.isEmpty()) {
                  actionNumber++;
                  TomTerm pa = l2.getHead();
                  defaultPA = hasDefaultCase(pa.getOption());
                  patternList = pa.getTermList().getTomList();
                  if (debugMode && defaultPA) {
                      // replace success by leaving structure
                    TargetLanguage tl = tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.patternSuccess(\""+currentDebugKey+"\");\njtom.debug.TomDebugger.debugger.leavingStructure(\""+currentDebugKey+"\");\n");
                    TomList tail = pa.getTom().getTomList().getTail();
                    actionList = tom_make_manyTomList(tom_make_TargetLanguageToTomTerm(tl),tail) ;
                  } else {
                    actionList = pa.getTom().getTomList();
                  }
                  if(patternList==null || actionList==null) {
                    System.out.println("TomKernelCompiler: null value");
                    throw new TomRuntimeException(new Throwable("TomKernelCompiler: null value"));
                  }
                  
                  /*
                   * compile nested match constructs
                   * given a list of pattern: we build a matching automaton
                   */
                  actionList = tomListMap(actionList,this);
                  TomList instructionList = genMatchingAutomataFromPatternList(patternList,rootpath,1,actionList);
                  OptionList automataOptionList = tom_make_insert_concOption(tom_make_Debug(tom_make_Name(currentDebugKey)),( OptionList) tom_make_empty_concOption()) ;
                  TomName label = getLabel(pa.getOption());
                  if(label != null) {
                    automataOptionList = tom_make_manyOptionList(tom_make_Label(label),automataOptionList) ;
                  }
                  if(defaultPA) {
                    automataOptionList = tom_make_manyOptionList(tom_make_DefaultCase(),automataOptionList) ;
                  }
                  TomNumberList numberList = (TomNumberList) rootpath.append(tom_make_PatternNumber(makeNumber(actionNumber)) );
                  TomTerm automata = tom_make_Automata(automataOptionList,numberList,instructionList) ;
                    //System.out.println("automata = " + automata);
                  
                  automataList = append(automata,automataList);
                  l2 = l2.getTail();
                }
                
                /*
                 * return the compiled Match construction
                 */
                TomList astAutomataList1 = automataListCompileMatchingList(automataList, generatedMatch);
                TomList astAutomataList2 = tom_make_insert_concTomTerm(tom_make_InstructionToTomTerm(collectVariableFromSubjectList(l1,  1, rootpath, tom_make_UnamedBlock(astAutomataList1))),( TomList) tom_make_empty_concTomTerm()) ;

                return tom_make_CompiledMatch(astAutomataList2,optionList) ;
               } } }}_match4_pattern2: {


 
                return traversal().genericTraversal(subject,this);
              } }
  // end match
          } else { // not instance of TomTerm
            return traversal().genericTraversal(subject,this);
          }
        } // end apply
      }; // end new
    
    return (TomTerm) replace_compileMatching.apply(subject);
  }

    /*
     * collect match variables (from match(t1,...,tn))
     * create a list of declaration/assignement: v1=t1 ... vn=tn in body
     */
  private Instruction collectVariableFromSubjectList(TomList subjectList, int index, TomNumberList path, Instruction body) {
     {  TomList tom_match5_1 = null; tom_match5_1 = ( TomList) subjectList;_match5_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match5_1) ||  false ) {
  return body;  }}_match5_pattern2: {  TomTerm subjectVar = null;  TomType variableType = null;  OptionList option = null;  TomList tail = null; if(tom_is_fun_sym_manyTomList(tom_match5_1) ||  false ) {  TomTerm tom_match5_1_1 = null;  TomList tom_match5_1_2 = null; tom_match5_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match5_1); tom_match5_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match5_1); if(tom_is_fun_sym_Variable(tom_match5_1_1) ||  false ) {  OptionList tom_match5_1_1_1 = null;  TomType tom_match5_1_1_3 = null; tom_match5_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match5_1_1); tom_match5_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match5_1_1); subjectVar = ( TomTerm) tom_match5_1_1; option = ( OptionList) tom_match5_1_1_1; variableType = ( TomType) tom_match5_1_1_3; tail = ( TomList) tom_match5_1_2;
 
        body = collectVariableFromSubjectList(tail,index+1,path,body);
        TomTerm variable = tom_make_Variable(option,tom_make_PositionName(appendNumber(index, path)),variableType) ;
        return tom_make_Let(variable,tom_make_TomTermToExpression(subjectVar),body) ;
       } }}_match5_pattern3: {  String tomName = null;  TomTerm subjectVar = null;  TomList tail = null; if(tom_is_fun_sym_manyTomList(tom_match5_1) ||  false ) {  TomTerm tom_match5_1_1 = null;  TomList tom_match5_1_2 = null; tom_match5_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match5_1); tom_match5_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match5_1); if(tom_is_fun_sym_FunctionCall(tom_match5_1_1) || tom_is_fun_sym_BuildList(tom_match5_1_1) || tom_is_fun_sym_BuildTerm(tom_match5_1_1) ||  false ) {  TomName tom_match5_1_1_1 = null; tom_match5_1_1_1 = ( TomName) tom_get_slot_BuildTerm_astName(tom_match5_1_1); subjectVar = ( TomTerm) tom_match5_1_1; if(tom_is_fun_sym_Name(tom_match5_1_1_1) ||  false ) {  String tom_match5_1_1_1_1 = null; tom_match5_1_1_1_1 = ( String) tom_get_slot_Name_string(tom_match5_1_1_1); tomName = ( String) tom_match5_1_1_1_1; tail = ( TomList) tom_match5_1_2;

 
        body = collectVariableFromSubjectList(tail,index+1,path,body);
        TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
        TomType tomType = getSymbolCodomain(tomSymbol);
        TomTerm variable = tom_make_Variable(option(),tom_make_PositionName(appendNumber(index, path)),tomType) ;
        return tom_make_Let(variable,tom_make_TomTermToExpression(subjectVar),body) ;
       } } }}_match5_pattern4: {  TomTerm subjectVar = null;  TomList tail = null; if(tom_is_fun_sym_manyTomList(tom_match5_1) ||  false ) {  TomTerm tom_match5_1_1 = null;  TomList tom_match5_1_2 = null; tom_match5_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match5_1); tom_match5_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match5_1); subjectVar = ( TomTerm) tom_match5_1_1; tail = ( TomList) tom_match5_1_2;

 
        System.out.println("collectVariableFromSubjectList: strange term: " + subjectVar);
       }} }

 
    return tom_make_Nop() ;
  }

  /*
   * build a list of instructions from a list of automata
   */
  private TomList automataListCompileMatchingList(TomList automataList, boolean generatedMatch) {
     {  TomList tom_match6_1 = null; tom_match6_1 = ( TomList) automataList;_match6_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match6_1) ||  false ) {
  return empty();  }}_match6_pattern2: {  TomList l = null;  TomList instList = null;  OptionList optionList = null;  TomNumberList numberList = null; if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) {  TomTerm tom_match6_1_1 = null;  TomList tom_match6_1_2 = null; tom_match6_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match6_1); tom_match6_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match6_1); if(tom_is_fun_sym_Automata(tom_match6_1_1) ||  false ) {  OptionList tom_match6_1_1_1 = null;  TomNumberList tom_match6_1_1_2 = null;  TomList tom_match6_1_1_3 = null; tom_match6_1_1_1 = ( OptionList) tom_get_slot_Automata_option(tom_match6_1_1); tom_match6_1_1_2 = ( TomNumberList) tom_get_slot_Automata_numberList(tom_match6_1_1); tom_match6_1_1_3 = ( TomList) tom_get_slot_Automata_instList(tom_match6_1_1); optionList = ( OptionList) tom_match6_1_1_1; numberList = ( TomNumberList) tom_match6_1_1_2; instList = ( TomList) tom_match6_1_1_3; l = ( TomList) tom_match6_1_2;
 
        TomList newList = automataListCompileMatchingList(l, generatedMatch);
        if(!generatedMatch && debugMode) {
          String debugKey = getDebug(optionList);
          boolean defaultCase = hasDefaultCase(optionList);
          TargetLanguage tl = tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.enteringPattern(\""+debugKey+"\");\n");
          instList = cons(tom_make_TargetLanguageToTomTerm(tl), instList) ;
          if(!defaultCase) {
            tl = tsf().makeTargetLanguage_ITL("jtom.debug.TomDebugger.debugger.leavingPattern(\""+debugKey+"\");\n");
            TomList list = cons(tom_make_TargetLanguageToTomTerm(tl), tom_make_emptyTomList()) ;
            instList = concat(instList, list);
          }
        }
        
        Instruction namedBlock = tom_make_NamedBlock(getBlockName(numberList),instList) ;
        TomName label = getLabel(optionList);
        if(label != null) {
            /*
             * if a label is assigned to a pattern (label:pattern -> action)
             * we generate corresponding labeled-block
             */
          namedBlock = tom_make_NamedBlock(label .getString(),cons(tom_make_InstructionToTomTerm(namedBlock), empty())) ;
        }
        TomList list = cons(tom_make_InstructionToTomTerm(namedBlock) ,empty());
        return cons(tom_make_CompiledPattern(list) , newList);
       } }} }
 
    return null;
  }

  private String getBlockName(TomNumberList numberList) {
    String name = numberListToIdentifier(numberList);
    return name;
  }

  private TomTerm getBlockVariable(TomNumberList numberList) {
    String name = numberListToIdentifier(numberList);
    return tom_make_Variable(option(),tom_make_Name(name),getBoolType()) ;
  }
  
    /*
     * ------------------------------------------------------------
     * Generate a matching automaton
     * ------------------------------------------------------------
     */

  TomList genMatchingAutomataFromPatternList(TomList termList,
                                             TomNumberList path,
                                             int indexTerm,
                                             TomList actionList) {
     {  TomList tom_match7_1 = null; tom_match7_1 = ( TomList) termList;_match7_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match7_1) ||  false ) {
  
        // insert the semantic action
        return actionList;
       }}_match7_pattern2: {  TomTerm head = null;  TomList tail = null; if(tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) {  TomTerm tom_match7_1_1 = null;  TomList tom_match7_1_2 = null; tom_match7_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match7_1); tom_match7_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match7_1); head = ( TomTerm) tom_match7_1_1; tail = ( TomList) tom_match7_1_2;
 
        TomList newSubActionList = genMatchingAutomataFromPatternList(tail,path,indexTerm+1,actionList);
        TomNumberList newPath    = appendNumber(indexTerm,path);
        TomList newActionList    = genMatchingAutomataFromPattern(head,newPath,newSubActionList);
        return newActionList;
       }} }
 
    return termList;
  }

  /*
   * given a pattern, this function generatesthe discrimitation test on the root symbol
   * and recursively calls the algorithm on subterms
   */
  TomList genMatchingAutomataFromPattern(TomTerm term,
                                         TomNumberList path,
                                         TomList actionList) {
     {  TomTerm tom_match8_1 = null; tom_match8_1 = ( TomTerm) term;_match8_pattern1: {  TomTerm var = null;  OptionList optionList = null;  TomType termType = null; if(tom_is_fun_sym_Variable(tom_match8_1) ||  false ) {  OptionList tom_match8_1_1 = null;  TomType tom_match8_1_3 = null; tom_match8_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match8_1); tom_match8_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match8_1); var = ( TomTerm) tom_match8_1; optionList = ( OptionList) tom_match8_1_1; termType = ( TomType) tom_match8_1_3;

 
        Expression source = tom_make_TomTermToExpression(tom_make_Variable(option(),tom_make_PositionName(path),termType)) ;
        Instruction body = tom_make_Action(actionList) ;
        return appendInstruction(buildAnnotedLet(optionList, source, var, body),empty());
       }}_match8_pattern2: {  OptionList optionList = null;  TomTerm var = null;  TomType termType = null; if(tom_is_fun_sym_UnamedVariable(tom_match8_1) ||  false ) {  OptionList tom_match8_1_1 = null;  TomType tom_match8_1_2 = null; tom_match8_1_1 = ( OptionList) tom_get_slot_UnamedVariable_option(tom_match8_1); tom_match8_1_2 = ( TomType) tom_get_slot_UnamedVariable_astType(tom_match8_1); var = ( TomTerm) tom_match8_1; optionList = ( OptionList) tom_match8_1_1; termType = ( TomType) tom_match8_1_2;          Expression source = tom_make_TomTermToExpression(tom_make_Variable(option(),tom_make_PositionName(path),termType)) ;         Instruction body = tom_make_Action(actionList) ;         return appendInstruction(buildAnnotedLet(optionList, source, var, body),empty());        }}_match8_pattern3: {  TomName tom_absvar2 = null;  TomList termArgs = null;  NameList nameList = null;  OptionList optionList = null; if(tom_is_fun_sym_Appl(tom_match8_1) ||  false ) {  OptionList tom_match8_1_1 = null;  NameList tom_match8_1_2 = null;  TomList tom_match8_1_3 = null; tom_match8_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match8_1); tom_match8_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match8_1); tom_match8_1_3 = ( TomList) tom_get_slot_Appl_args(tom_match8_1); optionList = ( OptionList) tom_match8_1_1; if(tom_is_fun_sym_concTomName(tom_match8_1_2) ||  false ) { nameList = ( NameList) tom_match8_1_2;  NameList tom_match8_1_2_list1 = null; tom_match8_1_2_list1 = ( NameList) tom_match8_1_2; if(!(tom_is_empty_NameList(tom_match8_1_2_list1))) { tom_absvar2 = ( TomName) tom_get_head_NameList(tom_match8_1_2_list1); tom_match8_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match8_1_2_list1); termArgs = ( TomList) tom_match8_1_3; {  TomName tom_match9_1 = null; tom_match9_1 = ( TomName) tom_absvar2;_match9_pattern1: {  String tomName = null; if(tom_is_fun_sym_Name(tom_match9_1) ||  false ) {  String tom_match9_1_1 = null; tom_match9_1_1 = ( String) tom_get_slot_Name_string(tom_match9_1); tomName = ( String) tom_match9_1_1;

 
        TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
        TomTypeList termTypeList = tomSymbol.getTypesToType().getDomain();
        TomType termType = tomSymbol.getTypesToType().getCodomain();
        
        // SUCCES
        TomTerm subjectVariableAST =  tom_make_Variable(option(),tom_make_PositionName(path),termType) ;
        Instruction automataInstruction;
        if(isListOperator(tomSymbol)) {
          /*
           * store the subject into an internal variable
           * call genListMatchingAutomata with the new internal variable
           */
          int indexSubterm = 1;
          TomNumberList newPath = (TomNumberList) path.append(tom_make_ListNumber(makeNumber(indexSubterm)) );
          TomTerm newSubjectVariableAST =  tom_make_Variable(option(),tom_make_PositionName(newPath),termType) ;
          TomList automataList = genListMatchingAutomata(new MatchingParameter(
                                                           tomSymbol,path,actionList,
                                                           newSubjectVariableAST,
                                                           newSubjectVariableAST),
                                                         termArgs,indexSubterm);
          automataInstruction = tom_make_Let(newSubjectVariableAST,tom_make_TomTermToExpression(subjectVariableAST),tom_make_UnamedBlock(automataList))

 ;
        } else if(isArrayOperator(tomSymbol)) {
          int indexSubterm = 1;
          TomNumberList newPathList = (TomNumberList) path.append(tom_make_ListNumber(makeNumber(indexSubterm)) );
          TomNumberList newPathIndex = (TomNumberList) path.append(tom_make_IndexNumber(makeNumber(indexSubterm)) );
          TomTerm newVariableListAST = tom_make_Variable(option(),tom_make_PositionName(newPathList),termType) ;
          TomTerm newVariableIndexAST = tom_make_Variable(option(),tom_make_PositionName(newPathIndex),getIntType()) ;
          TomList automataList = genArrayMatchingAutomata(new MatchingParameter(
                                                            tomSymbol,path,actionList,
                                                            newVariableListAST, newVariableIndexAST),
                                                          termArgs,indexSubterm
                                                          );
          Expression glZero = tom_make_TomTermToExpression(tom_make_TargetLanguageToTomTerm(tom_make_ITL( "0"))) ;
          automataInstruction = tom_make_Let(newVariableIndexAST,glZero,tom_make_Let(newVariableListAST,tom_make_TomTermToExpression(subjectVariableAST),tom_make_UnamedBlock(automataList)))


 ;
        } else {
          int indexSubterm = 0;
          TomList automataList = genMatchingAutomataFromPatternList(termArgs,path,1,actionList);
          automataInstruction = collectSubtermFromSubjectList(termArgs, termTypeList, tomSymbol, subjectVariableAST, indexSubterm, path, tom_make_UnamedBlock(automataList)) ; 
        }
        
        TomTerm annotedVariable = getAnnotedVariable(optionList);
        if(annotedVariable != null) {
          automataInstruction = tom_make_Let(annotedVariable,tom_make_TomTermToExpression(subjectVariableAST),automataInstruction) ;
        }
        
        TomList succesList = append(tom_make_InstructionToTomTerm(automataInstruction) ,empty());
        Expression cond = expandDisjunction(tom_make_EqualFunctionSymbol(subjectVariableAST,term)) ;
        Instruction test = tom_make_IfThenElse(cond,succesList,empty()) ;
        return appendInstruction(test,empty());
       }} } } } }}_match8_pattern4: {

 
        System.out.println("GenTermMatchingAutomata strange term: " + term);
        throw new TomRuntimeException(new Throwable("GenTermMatchingAutomata strange term: " + term));
      } }
 
  }

    /*
     * given a list of subject t1,...,tn
     * declare/assign internal matching variables: match_path_i = ti
     */
  private Instruction collectSubtermFromSubjectList(TomList termArgList, TomTypeList termTypeList,
                                                    TomSymbol tomSymbol,TomTerm subjectVariableAST, 
                                                    int indexSubterm, TomNumberList path, Instruction body) {
    TomName termNameAST = tomSymbol.getAstName();
     {  TomList tom_match10_1 = null; tom_match10_1 = ( TomList) termArgList;_match10_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match10_1) ||  false ) {
  return body;  }}_match10_pattern2: {  TomTerm subtermArg = null;  TomList tail = null; if(tom_is_fun_sym_manyTomList(tom_match10_1) ||  false ) {  TomTerm tom_match10_1_1 = null;  TomList tom_match10_1_2 = null; tom_match10_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match10_1); tom_match10_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match10_1); subtermArg = ( TomTerm) tom_match10_1_1; tail = ( TomList) tom_match10_1_2;

 
        body = collectSubtermFromSubjectList(tail,termTypeList.getTail(),
                                             tomSymbol,subjectVariableAST,
                                             indexSubterm+1,path,body);
        if(subtermArg.isUnamedVariable() && !isAnnotedVariable(subtermArg)) {
            // This is an optimisation 
            // Do not assign the subterm: skip the subterm 
          return body;
        } else {
          TomType subtermType    = termTypeList.getHead();
          Expression getSubtermAST;
          TomName slotName = getSlotName(tomSymbol, indexSubterm);
          if(slotName == null) {
            getSubtermAST = tom_make_GetSubterm(subjectVariableAST,makeNumber(indexSubterm)) ;
          } else {
            getSubtermAST = tom_make_GetSlot(termNameAST,slotName .getString(),subjectVariableAST) ;
          }
          TomNumberList newPath  = appendNumber(indexSubterm+1,path);
          TomTerm newVariableAST = tom_make_Variable(option(),tom_make_PositionName(newPath),subtermType) ;
          return tom_make_Let(newVariableAST,getSubtermAST,body) ;
        }
       }} }

 
    return tom_make_Nop() ;
  }

  private Expression expandDisjunction(Expression exp) {
    Expression cond = tom_make_FalseTL() ;
     {  Expression tom_match11_1 = null; tom_match11_1 = ( Expression) exp;_match11_pattern1: {  NameList nameList = null;  TomTerm var = null;  OptionList option = null;  TomList l = null; if(tom_is_fun_sym_EqualFunctionSymbol(tom_match11_1) ||  false ) {  TomTerm tom_match11_1_1 = null;  TomTerm tom_match11_1_2 = null; tom_match11_1_1 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid1(tom_match11_1); tom_match11_1_2 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid2(tom_match11_1); if(tom_is_fun_sym_Variable(tom_match11_1_1) ||  false ) { var = ( TomTerm) tom_match11_1_1; if(tom_is_fun_sym_Appl(tom_match11_1_2) ||  false ) {  OptionList tom_match11_1_2_1 = null;  NameList tom_match11_1_2_2 = null;  TomList tom_match11_1_2_3 = null; tom_match11_1_2_1 = ( OptionList) tom_get_slot_Appl_option(tom_match11_1_2); tom_match11_1_2_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match11_1_2); tom_match11_1_2_3 = ( TomList) tom_get_slot_Appl_args(tom_match11_1_2); option = ( OptionList) tom_match11_1_2_1; nameList = ( NameList) tom_match11_1_2_2; l = ( TomList) tom_match11_1_2_3;
 
        while(!nameList.isEmpty()) {
          TomName name = nameList.getHead();
          Expression check = tom_make_EqualFunctionSymbol(var,tom_make_Appl(option,tom_make_insert_concTomName(name,( NameList) tom_make_empty_concTomName()),l)) ;
          cond = tom_make_Or(check,cond) ;
          nameList = nameList.getTail();
        }
       } } }} }
 
    return cond;
  }

  private Instruction buildAnnotedLet(OptionList optionList,
                                      Expression source,
                                      TomTerm dest,
                                      Instruction body) {
    TomTerm annotedVariable = getAnnotedVariable(optionList);
    if(annotedVariable != null) {
      body = tom_make_Let(annotedVariable,source,body) ;
    }
    return tom_make_Let(dest,source,body) ;
  }

    /*
     * function which compiles list-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  TomList genListMatchingAutomata(MatchingParameter p,TomList termList,int indexTerm) {
     {  TomList tom_match12_1 = null; tom_match12_1 = ( TomList) termList;_match12_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match12_1) ||  false ) {
 
        /*
         * generate:
         * ---------
         * if(IS_EMPTY_TomList(subjectList)) {
         *   ...
         * }
         */
        Expression cond = tom_make_IsEmptyList(p .subjectListName) ;
        Instruction test = tom_make_IfThenElse(cond,p .actionList,empty()) ;
        return appendInstruction(test,empty());
       }}_match12_pattern2: {  TomType termType = null;  OptionList optionList = null;  TomList termTail = null;  TomTerm var = null; if(tom_is_fun_sym_manyTomList(tom_match12_1) ||  false ) {  TomTerm tom_match12_1_1 = null;  TomList tom_match12_1_2 = null; tom_match12_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match12_1); tom_match12_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match12_1); if(tom_is_fun_sym_Variable(tom_match12_1_1) ||  false ) {  OptionList tom_match12_1_1_1 = null;  TomType tom_match12_1_1_3 = null; tom_match12_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match12_1_1); tom_match12_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match12_1_1); var = ( TomTerm) tom_match12_1_1; optionList = ( OptionList) tom_match12_1_1_1; termType = ( TomType) tom_match12_1_1_3; termTail = ( TomList) tom_match12_1_2;


 
        /*
         * generate:
         * ---------
         * if(!IS_EMPTY_TomList(subjectList)) {
         *   Let TomTerm x_j = (TomTerm) GET_HEAD_TomList(subjectList);
         *   subjectList =  (TomList) GET_TAIL_TomList(subjectList);
         *   ...
         * }
         */       
        TomList subActionList = genListMatchingAutomata(p,termTail,indexTerm+1);
     
        TomList bodyList = appendInstruction(tom_make_Assign(p .subjectListName,tom_make_GetTail(p .subjectListName)) ,empty());
        Instruction body = tom_make_UnamedBlock(concat(bodyList, subActionList)) ;
        Expression source = tom_make_GetHead(p .subjectListName) ;
        Instruction let = buildAnnotedLet(optionList, source, var, body);
        TomList succes = appendInstruction(let,empty());
        Instruction test = tom_make_IfThenElse(tom_make_Not(tom_make_IsEmptyList(p .subjectListName)),succes,empty())
 ;
        return appendInstruction(test,empty());
       } }}_match12_pattern3: {  TomList termTail = null;  TomType termType = null;  TomTerm var = null;  OptionList optionList = null; if(tom_is_fun_sym_manyTomList(tom_match12_1) ||  false ) {  TomTerm tom_match12_1_1 = null;  TomList tom_match12_1_2 = null; tom_match12_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match12_1); tom_match12_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match12_1); if(tom_is_fun_sym_UnamedVariable(tom_match12_1_1) ||  false ) {  OptionList tom_match12_1_1_1 = null;  TomType tom_match12_1_1_2 = null; tom_match12_1_1_1 = ( OptionList) tom_get_slot_UnamedVariable_option(tom_match12_1_1); tom_match12_1_1_2 = ( TomType) tom_get_slot_UnamedVariable_astType(tom_match12_1_1); var = ( TomTerm) tom_match12_1_1; optionList = ( OptionList) tom_match12_1_1_1; termType = ( TomType) tom_match12_1_1_2; termTail = ( TomList) tom_match12_1_2;          /*          * generate:          * ---------          * if(!IS_EMPTY_TomList(subjectList)) {          *   Let TomTerm x_j = (TomTerm) GET_HEAD_TomList(subjectList);          *   subjectList =  (TomList) GET_TAIL_TomList(subjectList);          *   ...          * }          */                TomList subActionList = genListMatchingAutomata(p,termTail,indexTerm+1);               TomList bodyList = appendInstruction(tom_make_Assign(p .subjectListName,tom_make_GetTail(p .subjectListName)) ,empty());         Instruction body = tom_make_UnamedBlock(concat(bodyList, subActionList)) ;         Expression source = tom_make_GetHead(p .subjectListName) ;         Instruction let = buildAnnotedLet(optionList, source, var, body);         TomList succes = appendInstruction(let,empty());         Instruction test = tom_make_IfThenElse(tom_make_Not(tom_make_IsEmptyList(p .subjectListName)),succes,empty()) ;         return appendInstruction(test,empty());        } }}_match12_pattern4: {  TomList termTail = null;  OptionList optionList = null;  TomType termType = null;  TomTerm var = null; if(tom_is_fun_sym_manyTomList(tom_match12_1) ||  false ) {  TomTerm tom_match12_1_1 = null;  TomList tom_match12_1_2 = null; tom_match12_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match12_1); tom_match12_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match12_1); if(tom_is_fun_sym_VariableStar(tom_match12_1_1) ||  false ) {  OptionList tom_match12_1_1_1 = null;  TomType tom_match12_1_1_3 = null; tom_match12_1_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match12_1_1); tom_match12_1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match12_1_1); var = ( TomTerm) tom_match12_1_1; optionList = ( OptionList) tom_match12_1_1_1; termType = ( TomType) tom_match12_1_1_3; termTail = ( TomList) tom_match12_1_2;


 
        if(termTail.isEmpty()) {
          /*
           * generate:
           * ---------
           * Let E_n = subjectList;
           * ...
           */
          Expression source = tom_make_TomTermToExpression(p .subjectListName) ;
          Instruction let = buildAnnotedLet(optionList, source, var, tom_make_UnamedBlock(p .actionList) );
          return  appendInstruction(let,empty());
        } else {
          TomList subActionList = genListMatchingAutomata(p,termTail,indexTerm+1);
          /*
           * generate:
           * ---------
           * TomList begin_i = subjectList;
           * TomList end_i   = subjectList;
           * do {
           *   * SUBSTITUTION: E_i
           *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);
           *   ...
           *   if(!IS_EMPTY_TomList(end_i) )
           *     end_i = (TomList) GET_TAIL_TomList(end_i);
           *   subjectList = end_i;
           * } while( !IS_EMPTY_TomList(subjectList) )
           */
          TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );
          TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );
          TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),termType) ;
          TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),termType) ;
          TomList declarationList = empty();
          declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);
          declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);
          TomList assignementList = empty();
          assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(p .subjectListName)) ,assignementList);
          assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(p .subjectListName)) ,assignementList);
          
          Expression source = tom_make_GetSliceList(p .symbol .getAstName(),variableBeginAST,variableEndAST) ;
          TomList doList = appendInstruction(buildAnnotedLet(optionList, source, var, tom_make_Action(subActionList) ),empty());

          Expression cond1 = tom_make_Not(tom_make_IsEmptyList(variableEndAST)) ;
          Instruction test1 = tom_make_IfThenElse(cond1,cons(tom_make_InstructionToTomTerm(tom_make_Assign(variableEndAST,tom_make_GetTail(variableEndAST))), empty()),empty()) ;
          doList = appendInstruction(test1,doList);
          doList = appendInstruction(tom_make_Assign(p .subjectListName,tom_make_TomTermToExpression(variableEndAST)) ,doList);
          
          Expression cond2 = tom_make_Not(tom_make_IsEmptyList(p .subjectListName)) ;
          Instruction doWhile = tom_make_DoWhile(doList,cond2) ;
          
          return appendInstruction(doWhile,concat(declarationList,assignementList));
        }
       } }}_match12_pattern5: {  TomTerm var = null;  TomType termType = null;  OptionList optionList = null;  TomList termTail = null; if(tom_is_fun_sym_manyTomList(tom_match12_1) ||  false ) {  TomTerm tom_match12_1_1 = null;  TomList tom_match12_1_2 = null; tom_match12_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match12_1); tom_match12_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match12_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match12_1_1) ||  false ) {  OptionList tom_match12_1_1_1 = null;  TomType tom_match12_1_1_2 = null; tom_match12_1_1_1 = ( OptionList) tom_get_slot_UnamedVariableStar_option(tom_match12_1_1); tom_match12_1_1_2 = ( TomType) tom_get_slot_UnamedVariableStar_astType(tom_match12_1_1); var = ( TomTerm) tom_match12_1_1; optionList = ( OptionList) tom_match12_1_1_1; termType = ( TomType) tom_match12_1_1_2; termTail = ( TomList) tom_match12_1_2;          if(termTail.isEmpty()) {           /*            * generate:            * ---------            * Let E_n = subjectList;            * ...            */           Expression source = tom_make_TomTermToExpression(p .subjectListName) ;           Instruction let = buildAnnotedLet(optionList, source, var, tom_make_UnamedBlock(p .actionList) );           return  appendInstruction(let,empty());         } else {           TomList subActionList = genListMatchingAutomata(p,termTail,indexTerm+1);           /*            * generate:            * ---------            * TomList begin_i = subjectList;            * TomList end_i   = subjectList;            * do {            *   * SUBSTITUTION: E_i            *   TomList E_i = GET_SLICE_TomList(begin_i,end_i);            *   ...            *   if(!IS_EMPTY_TomList(end_i) )            *     end_i = (TomList) GET_TAIL_TomList(end_i);            *   subjectList = end_i;            * } while( !IS_EMPTY_TomList(subjectList) )            */           TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );           TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );           TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),termType) ;           TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),termType) ;           TomList declarationList = empty();           declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);           declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);           TomList assignementList = empty();           assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(p .subjectListName)) ,assignementList);           assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(p .subjectListName)) ,assignementList);                      Expression source = tom_make_GetSliceList(p .symbol .getAstName(),variableBeginAST,variableEndAST) ;           TomList doList = appendInstruction(buildAnnotedLet(optionList, source, var, tom_make_Action(subActionList) ),empty());            Expression cond1 = tom_make_Not(tom_make_IsEmptyList(variableEndAST)) ;           Instruction test1 = tom_make_IfThenElse(cond1,cons(tom_make_InstructionToTomTerm(tom_make_Assign(variableEndAST,tom_make_GetTail(variableEndAST))), empty()),empty()) ;           doList = appendInstruction(test1,doList);           doList = appendInstruction(tom_make_Assign(p .subjectListName,tom_make_TomTermToExpression(variableEndAST)) ,doList);                      Expression cond2 = tom_make_Not(tom_make_IsEmptyList(p .subjectListName)) ;           Instruction doWhile = tom_make_DoWhile(doList,cond2) ;                      return appendInstruction(doWhile,concat(declarationList,assignementList));         }        } }}_match12_pattern6: {

 
        System.out.println("GenListMatchingAutomata strange termList: " + termList);
        throw new TomRuntimeException(new Throwable("GenListMatchingAutomata strange termList: " + termList));
      } }
 
  }

    /*
     * function which compiles array-matching
     * 
     * p:         parameters (which are not modified during the matching process)
     * termList:  list of subterms
     * indexTerm: index of the considered subterm (indexTerm=1 for the first call)
     */
  TomList genArrayMatchingAutomata(MatchingParameter p,TomList termList,int indexTerm) {
     {  TomList tom_match13_1 = null; tom_match13_1 = ( TomList) termList;_match13_pattern1: { if(tom_is_fun_sym_emptyTomList(tom_match13_1) ||  false ) {
 
        /*
         * generate:
         * ---------
         * if(IS_EMPTY_TomList(subjectList,subjectIndex)) {
         *   ...
         * }
         */
        Expression cond = tom_make_IsEmptyArray(p .subjectListName,p .subjectListIndex) ;
        Instruction test = tom_make_IfThenElse(cond,p .actionList,empty()) ;
        return appendInstruction(test,empty());
       }}_match13_pattern2: {  TomTerm var = null;  TomType termType = null;  TomList termTail = null;  OptionList optionList = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_Variable(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_3 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match13_1_1); tom_match13_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_3; termTail = ( TomList) tom_match13_1_2;


 
          /*
           * generate:
           * ---------
           * if(!IS_EMPTY_TomList(subjectList,subjectIndex)) {
           *   Let TomTerm x_j = (TomTerm) GET_ELEMENT_L(subjectList,subjectIndex);
           *   subjectIndex++;;
           *     ...
           * }
           */
        TomList subActionList = genArrayMatchingAutomata(p,termTail,indexTerm+1);
        TomList bodyList = appendInstruction(tom_make_Increment(p .subjectListIndex) ,empty());
        Instruction body = tom_make_UnamedBlock(concat(bodyList, subActionList)) ;
        Expression source = tom_make_GetElement(p .subjectListName,p .subjectListIndex) ;
        Instruction let = buildAnnotedLet(optionList, source, var, body);
        TomList succes = appendInstruction(let,empty());
        Instruction test = tom_make_IfThenElse(tom_make_Not(tom_make_IsEmptyArray(p .subjectListName,p .subjectListIndex)),succes,empty())
 ;
        return appendInstruction(test,empty());
       } }}_match13_pattern3: {  TomType termType = null;  TomTerm var = null;  TomList termTail = null;  OptionList optionList = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_UnamedVariable(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_2 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_UnamedVariable_option(tom_match13_1_1); tom_match13_1_1_2 = ( TomType) tom_get_slot_UnamedVariable_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_2; termTail = ( TomList) tom_match13_1_2;            /*            * generate:            * ---------            * if(!IS_EMPTY_TomList(subjectList,subjectIndex)) {            *   Let TomTerm x_j = (TomTerm) GET_ELEMENT_L(subjectList,subjectIndex);            *   subjectIndex++;;            *     ...            * }            */         TomList subActionList = genArrayMatchingAutomata(p,termTail,indexTerm+1);         TomList bodyList = appendInstruction(tom_make_Increment(p .subjectListIndex) ,empty());         Instruction body = tom_make_UnamedBlock(concat(bodyList, subActionList)) ;         Expression source = tom_make_GetElement(p .subjectListName,p .subjectListIndex) ;         Instruction let = buildAnnotedLet(optionList, source, var, body);         TomList succes = appendInstruction(let,empty());         Instruction test = tom_make_IfThenElse(tom_make_Not(tom_make_IsEmptyArray(p .subjectListName,p .subjectListIndex)),succes,empty()) ;         return appendInstruction(test,empty());        } }}_match13_pattern4: {  TomType termType = null;  OptionList optionList = null;  TomTerm var = null;  TomList termTail = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_VariableStar(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_3 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match13_1_1); tom_match13_1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_3; termTail = ( TomList) tom_match13_1_2;


 
        if(termTail.isEmpty()) {
            /*
             * generate:
             * ---------
             * Let E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));
             * ...
             */
          Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),p .subjectListName,p .subjectListIndex,tom_make_ExpressionToTomTerm(tom_make_GetSize(p .subjectListName)))



 ;
          Instruction let = buildAnnotedLet(optionList, source, var, tom_make_UnamedBlock(p .actionList) );
          return  appendInstruction(let,empty());
        } else {
            /*
             * generate:
             * ---------
             * int begin_i = subjectIndex;
             * int end_i   = subjectIndex;
             * do {
             *   * SUBSTITUTION: E_i
             *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);
             *   ...
             *   end_i++;
             *   subjectIndex = end_i;
             * } while( !IS_EMPTY_TomList(subjectList) )
             */
          TomList subActionList = genArrayMatchingAutomata(p,termTail,indexTerm+1);
          TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );
          TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );
            /* TODO: termType */
          TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),getIntType()) ;
          TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),getIntType()) ;
          TomList declarationList = empty();
          declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);
          declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);
          TomList assignementList = empty();
          assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(p .subjectListIndex)) ,assignementList);
          assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(p .subjectListIndex)) ,assignementList);
            
          Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),p .subjectListName,variableBeginAST,variableEndAST)

 ;

          TomList doList = appendInstruction(buildAnnotedLet(optionList, source, var, tom_make_Action(subActionList) ),empty());
          doList = appendInstruction(tom_make_Increment(variableEndAST) ,doList);
          doList = appendInstruction(tom_make_Assign(p .subjectListIndex,tom_make_TomTermToExpression(variableEndAST)) ,doList); 
            
          Expression cond = tom_make_Not(tom_make_IsEmptyArray(p .subjectListName,p .subjectListIndex)) ;
          Instruction doWhile = tom_make_DoWhile(doList,cond) ;
          return appendInstruction(doWhile,concat(declarationList,assignementList));
        }
       } }}_match13_pattern5: {  TomList termTail = null;  TomType termType = null;  OptionList optionList = null;  TomTerm var = null; if(tom_is_fun_sym_manyTomList(tom_match13_1) ||  false ) {  TomTerm tom_match13_1_1 = null;  TomList tom_match13_1_2 = null; tom_match13_1_1 = ( TomTerm) tom_get_slot_manyTomList_head(tom_match13_1); tom_match13_1_2 = ( TomList) tom_get_slot_manyTomList_tail(tom_match13_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match13_1_1) ||  false ) {  OptionList tom_match13_1_1_1 = null;  TomType tom_match13_1_1_2 = null; tom_match13_1_1_1 = ( OptionList) tom_get_slot_UnamedVariableStar_option(tom_match13_1_1); tom_match13_1_1_2 = ( TomType) tom_get_slot_UnamedVariableStar_astType(tom_match13_1_1); var = ( TomTerm) tom_match13_1_1; optionList = ( OptionList) tom_match13_1_1_1; termType = ( TomType) tom_match13_1_1_2; termTail = ( TomList) tom_match13_1_2;          if(termTail.isEmpty()) {             /*              * generate:              * ---------              * Let E_n = GET_SLICE_L(subjectList,subjectIndex,GET_SIZE_L(subjectList));              * ...              */           Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),p .subjectListName,p .subjectListIndex,tom_make_ExpressionToTomTerm(tom_make_GetSize(p .subjectListName))) ;           Instruction let = buildAnnotedLet(optionList, source, var, tom_make_UnamedBlock(p .actionList) );           return  appendInstruction(let,empty());         } else {             /*              * generate:              * ---------              * int begin_i = subjectIndex;              * int end_i   = subjectIndex;              * do {              *   * SUBSTITUTION: E_i              *   TomList E_i = GET_SLICE_TomList(subjectList,begin_i,end_i);              *   ...              *   end_i++;              *   subjectIndex = end_i;              * } while( !IS_EMPTY_TomList(subjectList) )              */           TomList subActionList = genArrayMatchingAutomata(p,termTail,indexTerm+1);           TomNumberList pathBegin = (TomNumberList) p.path.append(tom_make_Begin(makeNumber(indexTerm)) );           TomNumberList pathEnd = (TomNumberList) p.path.append(tom_make_End(makeNumber(indexTerm)) );             /* TODO: termType */           TomTerm variableBeginAST = tom_make_Variable(option(),tom_make_PositionName(pathBegin),getIntType()) ;           TomTerm variableEndAST   = tom_make_Variable(option(),tom_make_PositionName(pathEnd),getIntType()) ;           TomList declarationList = empty();           declarationList = append(tom_make_Declaration(variableBeginAST) ,declarationList);           declarationList = append(tom_make_Declaration(variableEndAST) ,declarationList);           TomList assignementList = empty();           assignementList = appendInstruction(tom_make_Assign(variableBeginAST,tom_make_TomTermToExpression(p .subjectListIndex)) ,assignementList);           assignementList = appendInstruction(tom_make_Assign(variableEndAST,tom_make_TomTermToExpression(p .subjectListIndex)) ,assignementList);                        Expression source = tom_make_GetSliceArray(p .symbol .getAstName(),p .subjectListName,variableBeginAST,variableEndAST) ;            TomList doList = appendInstruction(buildAnnotedLet(optionList, source, var, tom_make_Action(subActionList) ),empty());           doList = appendInstruction(tom_make_Increment(variableEndAST) ,doList);           doList = appendInstruction(tom_make_Assign(p .subjectListIndex,tom_make_TomTermToExpression(variableEndAST)) ,doList);                         Expression cond = tom_make_Not(tom_make_IsEmptyArray(p .subjectListName,p .subjectListIndex)) ;           Instruction doWhile = tom_make_DoWhile(doList,cond) ;           return appendInstruction(doWhile,concat(declarationList,assignementList));         }        } }}_match13_pattern6: {

 
        System.out.println("GenArrayMatchingAutomata strange termList: " + termList);
        throw new TomRuntimeException(new Throwable("GenArrayMatchingAutomata strange termList: " + termList));
      } }
 
  }

    /* 
     * postProcessing: passCompiledTermTransformation
     *
     * transform a compiledTerm
     * 2 phases:
     *   - collection of Declaration
     *   - replace LocalVariable and remove Declaration
     */
  
  public TomTerm postProcessing(TomTerm subject) {
    TomTerm res;
    ArrayList list = new ArrayList();
    traversalCollectDeclaration(list,subject);
      //System.out.println("list size = " + list.size());
    res = traversalReplaceLocalVariable(list,subject);
    return res;
  }
    
  private TomTerm traversalCollectDeclaration(ArrayList list, TomTerm subject) {
      //%variable
     {  TomTerm tom_match14_1 = null; tom_match14_1 = ( TomTerm) subject;_match14_pattern1: {  TomList l = null; if(tom_is_fun_sym_Tom(tom_match14_1) ||  false ) {  TomList tom_match14_1_1 = null; tom_match14_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match14_1); l = ( TomList) tom_match14_1_1;
 
        return tom_make_Tom(traversalCollectDeclarationList(list, l)) ;
       }}_match14_pattern2: { if(tom_is_fun_sym_LocalVariable(tom_match14_1) ||  false ) {

 
          //System.out.println("Detect LocalVariable");
        
        Collection c = new HashSet();
        list.add(c);
        collectDeclaration(c,subject);
        return null;
       }}_match14_pattern3: {  TomTerm t = null; t = ( TomTerm) tom_match14_1;

 
          //System.out.println("default: " + t);
        if(!list.isEmpty()) {
          Collection c = (Collection) list.get(list.size()-1);
          collectDeclaration(c,subject);
        }
        return t;
      } }
 
  }

  public void collectDeclaration(final Collection collection, TomTerm subject) {
    Collect1 collect = new Collect1() { 
        public boolean apply(ATerm t) {
            //%variable
           {  TomTerm tom_match15_1 = null; tom_match15_1 = ( TomTerm) t;_match15_pattern1: { if(tom_is_fun_sym_Declaration(tom_match15_1) ||  false ) {
 
              collection.add(t);
              return false;
             }}_match15_pattern2: {
  return true; } }
 
        } 
      }; // end new
    
    traversal().genericCollect(subject, collect); 
  } 

  private boolean removeDeclaration = false;
  private TomTerm traversalReplaceLocalVariable(ArrayList list, TomTerm subject) {
      //%variable
     {  TomTerm tom_match16_1 = null; tom_match16_1 = ( TomTerm) subject;_match16_pattern1: {  TomList l = null; if(tom_is_fun_sym_Tom(tom_match16_1) ||  false ) {  TomList tom_match16_1_1 = null; tom_match16_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match16_1); l = ( TomList) tom_match16_1_1;
 
        return tom_make_Tom(traversalReplaceLocalVariableList(list, l)) ;
       }}_match16_pattern2: { if(tom_is_fun_sym_LocalVariable(tom_match16_1) ||  false ) {

 
          //System.out.println("Replace LocalVariable");

        Map map = (Map)list.get(0);
        list.remove(0);

        Collection c = map.values();
        Iterator it = c.iterator();
        TomList declarationList = empty();
        while(it.hasNext()) {
          declarationList = cons((TomTerm)it.next(),declarationList);
        }

          //System.out.println("declarationList = " + declarationList);
        removeDeclaration = true;
        return tom_make_Tom(declarationList) ;
       }}_match16_pattern3: {  TomTerm t = null; t = ( TomTerm) tom_match16_1;






 
        TomTerm res = t;
          //res = removeDeclaration(t);
        
        if(removeDeclaration) {
          res = removeDeclaration(t);
        }
        
          //System.out.println("\ndefault:\nt   = " + t + "\nres = " + res);
        return res;
      } }
 
  }

  private TomList traversalCollectDeclarationList(ArrayList list,TomList subject) {
      //%variable
    if(subject.isEmpty()) {
      return subject;
    }
    TomTerm t = subject.getHead();
    TomList l = subject.getTail();
    return cons(traversalCollectDeclaration(list,t),
                traversalCollectDeclarationList(list,l));
  }

  private TomList traversalReplaceLocalVariableList(ArrayList list,TomList subject) {
      //%variable
    if(subject.isEmpty()) {
      return subject;
    }
    TomTerm t = subject.getHead();
    TomList l = subject.getTail();
    return cons(traversalReplaceLocalVariable(list,t),
                traversalReplaceLocalVariableList(list,l));
  }
   
  public TomTerm removeDeclaration(TomTerm subject) {
    TomTerm res = subject;
      //System.out.println("*** removeDeclaration");
                  
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm t) {
            //%variable
           {  TomTerm tom_match17_1 = null; tom_match17_1 = ( TomTerm) t;_match17_pattern1: { if(tom_is_fun_sym_Declaration(tom_match17_1) ||  false ) {
 
                //System.out.println("Remove Declaration");
              return tom_make_Tom(empty()) ;
             }}_match17_pattern2: {  TomTerm other = null; other = ( TomTerm) tom_match17_1;

 
              System.out.println("removeDeclaration this = " + this);
                //return other;
              return (TomTerm) traversal().genericTraversal(other,this);
            } }
 
        } 
      }; // end new
    
      //return genericReplace(subject, replace);
    try {
      res = (TomTerm) replace.apply(subject);
    } catch(Exception e) {
      System.out.println("removeDeclaration: error");
      throw new TomRuntimeException(new Throwable("removeDeclaration: error"));
    }
    return res;
  }

  private class MatchingParameter {
      /*
       * This object is used by matching-algorithms to store common parameters
       * which are not modified during the matching process
       *
       * symbol:           root symbol
       * path:             path up-to the root symbol
       * actionList:       list of actions to be fired when matching
       * subjectListName:  name of the internal variable supposed to store the subject
       * subjectListIndex: name of the internal variable supposed to store the index
       */
    public TomSymbol symbol;
    public TomNumberList path;
    public TomList actionList;
    public TomTerm subjectListName;
    public TomTerm subjectListIndex;

    MatchingParameter(TomSymbol symbol, 
                      TomNumberList path,
                      TomList actionList,
                      TomTerm subjectListName,
                      TomTerm subjectListIndex) {
      this.symbol=symbol;
      this.path=path;
      this.actionList=actionList;
      this.subjectListName=subjectListName;
      this.subjectListIndex=subjectListIndex;
    }

  }
  
} // end of class
  


    
