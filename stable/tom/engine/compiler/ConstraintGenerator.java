/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2008, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler;

import java.util.ArrayList;
import java.util.Iterator;

import tom.engine.TomBase;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomconstraint.types.constraint.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.tools.SymbolTable;
import tom.engine.compiler.generator.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.library.sl.*;


/**
 * This class is in charge with launching all the generators,
 * until no more generations can be made 
 */
public class ConstraintGenerator {

//------------------------------------------------------------	
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {     if( l1.isEmptyconcInstruction() ) {       return l2;     } else if( l2.isEmptyconcInstruction() ) {       return l1;     } else if(  l1.getTailconcInstruction() .isEmptyconcInstruction() ) {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( l1.getHeadconcInstruction() ,l2) ;     } else {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( l1.getHeadconcInstruction() ,tom_append_list_concInstruction( l1.getTailconcInstruction() ,l2)) ;     }   }   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end, tom.engine.adt.tominstruction.types.InstructionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( begin.getHeadconcInstruction() ,( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction( begin.getTailconcInstruction() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomexpression.types.Expression  tom_append_list_OrExpressionDisjunction( tom.engine.adt.tomexpression.types.Expression  l1,  tom.engine.adt.tomexpression.types.Expression  l2) {     if( l1.isEmptyOrExpressionDisjunction() ) {       return l2;     } else if( l2.isEmptyOrExpressionDisjunction() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )? l1.getTailOrExpressionDisjunction() : tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ).isEmptyOrExpressionDisjunction() ) {         return  tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction.make((( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )? l1.getHeadOrExpressionDisjunction() :l1),l2) ;       } else {         return  tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction.make((( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )? l1.getHeadOrExpressionDisjunction() :l1),tom_append_list_OrExpressionDisjunction((( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )? l1.getTailOrExpressionDisjunction() : tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ),l2)) ;       }     } else {       return  tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomexpression.types.Expression  tom_get_slice_OrExpressionDisjunction( tom.engine.adt.tomexpression.types.Expression  begin,  tom.engine.adt.tomexpression.types.Expression  end, tom.engine.adt.tomexpression.types.Expression  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction.make((( ((begin instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (begin instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )? begin.getHeadOrExpressionDisjunction() :begin),( tom.engine.adt.tomexpression.types.Expression )tom_get_slice_OrExpressionDisjunction((( ((begin instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (begin instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )? begin.getTailOrExpressionDisjunction() : tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ),end,tail)) ;     }   }      private static   tom.engine.adt.tomexpression.types.Expression  tom_append_list_OrConnector( tom.engine.adt.tomexpression.types.Expression  l1,  tom.engine.adt.tomexpression.types.Expression  l2) {     if( l1.isEmptyOrConnector() ) {       return l2;     } else if( l2.isEmptyOrConnector() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )? l1.getTailOrConnector() : tom.engine.adt.tomexpression.types.expression.EmptyOrConnector.make() ).isEmptyOrConnector() ) {         return  tom.engine.adt.tomexpression.types.expression.ConsOrConnector.make((( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )? l1.getHeadOrConnector() :l1),l2) ;       } else {         return  tom.engine.adt.tomexpression.types.expression.ConsOrConnector.make((( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )? l1.getHeadOrConnector() :l1),tom_append_list_OrConnector((( ((l1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (l1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )? l1.getTailOrConnector() : tom.engine.adt.tomexpression.types.expression.EmptyOrConnector.make() ),l2)) ;       }     } else {       return  tom.engine.adt.tomexpression.types.expression.ConsOrConnector.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomexpression.types.Expression  tom_get_slice_OrConnector( tom.engine.adt.tomexpression.types.Expression  begin,  tom.engine.adt.tomexpression.types.Expression  end, tom.engine.adt.tomexpression.types.Expression  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomexpression.types.expression.ConsOrConnector.make((( ((begin instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (begin instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )? begin.getHeadOrConnector() :begin),( tom.engine.adt.tomexpression.types.Expression )tom_get_slice_OrConnector((( ((begin instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (begin instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )? begin.getTailOrConnector() : tom.engine.adt.tomexpression.types.expression.EmptyOrConnector.make() ),end,tail)) ;     }   }      private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if( l1.isEmptyconcOption() ) {       return l2;     } else if( l2.isEmptyconcOption() ) {       return l1;     } else if(  l1.getTailconcOption() .isEmptyconcOption() ) {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,l2) ;     } else {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,tom_append_list_concOption( l1.getTailconcOption() ,l2)) ;     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( begin.getHeadconcOption() ,( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption( begin.getTailconcOption() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Sequence) )) {       if(( ((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )) == null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Sequence(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else {       return ( (( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin):new tom.library.sl.Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)) );     }   }      private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Choice) )) {       if(( ((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )) ==null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1):new tom.library.sl.Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1):new tom.library.sl.Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1),tom_append_list_Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Choice(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else {       return ( (( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin):new tom.library.sl.Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):( null )),end,tail)) );     }   }      private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.SequenceId) )) {       if(( ((( (l1 instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ):( null )) == null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ):l1):new tom.library.sl.SequenceId(((( (l1 instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_SequenceId(((( (l1 instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ):l1):new tom.library.sl.SequenceId(((( (l1 instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.FIRST) ):l1),tom_append_list_SequenceId(((( (l1 instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.SequenceId.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.SequenceId(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else {       return ( (( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin):new tom.library.sl.SequenceId(((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((( (begin instanceof tom.library.sl.SequenceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.SequenceId.THEN) ):( null )),end,tail)) );     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  v) { return ( ( (( (( null )==null)?( new tom.library.sl.Identity() ):new tom.library.sl.Choice(( new tom.library.sl.Identity() ),( null )) )==null)?v:new tom.library.sl.Choice(v,( (( null )==null)?( new tom.library.sl.Identity() ):new tom.library.sl.Choice(( new tom.library.sl.Identity() ),( null )) )) ) ); }private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) )) ) ); }private static  tom.library.sl.Strategy  tom_make_TopDownCollect( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),tom_make_Try(( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) ))) ) ); }private static  tom.library.sl.Strategy  tom_make_InnermostId( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),( (( (( null )==null)?( (( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )==null)?v:new tom.library.sl.SequenceId(v,( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )) ):new tom.library.sl.Sequence(( (( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )==null)?v:new tom.library.sl.SequenceId(v,( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )) ),( null )) )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( (( null )==null)?( (( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )==null)?v:new tom.library.sl.SequenceId(v,( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )) ):new tom.library.sl.Sequence(( (( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )==null)?v:new tom.library.sl.SequenceId(v,( (( null )==null)?( new tom.library.sl.MuVar("_x") ):new tom.library.sl.SequenceId(( new tom.library.sl.MuVar("_x") ),( null )) )) ),( null )) )) )) ) ); }   


//------------------------------------------------------------	
 
  private static final String generatorsPackage = "tom.engine.compiler.generator.";
  // the list of all generators
  private static final String[] generatorsNames = {"SyntacticGenerator","VariadicGenerator","ArrayGenerator"};

  public static Instruction performGenerations(Expression expression, Instruction action) 
       throws ClassNotFoundException,InstantiationException,IllegalAccessException,VisitFailure{		
    // counts the generators that didn't change the instruction
    int genCounter = 0;
    int genNb = generatorsNames.length;
    
    Expression result = null;
    // cache the generators
    IBaseGenerator[] gen = new IBaseGenerator[genNb];
    for(int i=0 ; i < genNb ; i++) {
      gen[i] = (IBaseGenerator)Class.forName(generatorsPackage + generatorsNames[i]).newInstance();
    }
    
    // iterate until all generators are applied and nothing was changed 
    mainLoop: while(true){		
      for(int i=0 ; i < genNb ; i++){        
        result = gen[i].generate(expression);
        // if nothing was done, start counting 
        genCounter = (result == expression) ? (genCounter + 1) : 0;        				
        // if we applied all the generators and nothing changed,
        // it's time to stop
        if (genCounter == genNb) { break mainLoop; }
        // reinitialize
        expression = result; 
      }
    } // end while
    //System.out.println("result: " + result);
    return buildInstructionFromExpression(result,action);
  }
  
  /**
   * Converts the resulted expression (after generation) into instructions
   */
  private static Instruction buildInstructionFromExpression(Expression expression, Instruction action)
      throws VisitFailure {		
    // it is done innermost because the expression is also simplified		
    expression = (Expression)tom_make_InnermostId(tom_make_ReplaceSubterms()).visit(expression);
    // generate automata
    Instruction automata = generateAutomata(expression,action);    
    return automata;
  }

  /**
   * Generates the automata from the expression
   */
  private static Instruction generateAutomata(Expression expression, Instruction action) throws VisitFailure {
    {if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.And) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_0= tomMatch136NameNumberfreshSubject_1.getArg1() ;{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_1= tomMatch136NameNumberfreshSubject_1.getArg2() ;if ( true ) {

        Instruction subInstruction = generateAutomata(tomMatch136NameNumber_freshVar_1,action);
        return generateAutomata(tomMatch136NameNumber_freshVar_0,subInstruction);
      }}}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( ((tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_2=tomMatch136NameNumberfreshSubject_1;if ( true ) {
        
        return buildConstraintDisjunction(tomMatch136NameNumberfreshSubject_1,action);
      }}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch136NameNumber_freshVar_4= tomMatch136NameNumberfreshSubject_1.getcons() ;if ( (tomMatch136NameNumber_freshVar_4 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_5= tomMatch136NameNumber_freshVar_4.getpattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_6= tomMatch136NameNumber_freshVar_4.getsubject() ;{ boolean tomMatch136NameNumber_freshVar_7= false ;if ( (tomMatch136NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch136NameNumber_freshVar_7= true ;} else {if ( (tomMatch136NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {tomMatch136NameNumber_freshVar_7= true ;}}if ((tomMatch136NameNumber_freshVar_7 ==  true )) {if ( true ) {


        return  tom.engine.adt.tominstruction.types.instruction.LetRef.make(tomMatch136NameNumber_freshVar_5,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(tomMatch136NameNumber_freshVar_6) , action) ;
      }}}}}}}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch136NameNumber_freshVar_8= tomMatch136NameNumberfreshSubject_1.getcons() ;if ( (tomMatch136NameNumber_freshVar_8 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_9= tomMatch136NameNumber_freshVar_8.getpattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_10= tomMatch136NameNumber_freshVar_8.getsubject() ;{ boolean tomMatch136NameNumber_freshVar_11= false ;if ( (tomMatch136NameNumber_freshVar_9 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ) {tomMatch136NameNumber_freshVar_11= true ;} else {if ( (tomMatch136NameNumber_freshVar_9 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ) {tomMatch136NameNumber_freshVar_11= true ;}}if ((tomMatch136NameNumber_freshVar_11 ==  true )) {if ( true ) {

       
        return action;      
      }}}}}}}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch136NameNumber_freshVar_12= tomMatch136NameNumberfreshSubject_1.getcons() ;if ( (tomMatch136NameNumber_freshVar_12 instanceof tom.engine.adt.tomconstraint.types.constraint.NumericConstraint) ) {if ( true ) {


        return buildNumericCondition(tomMatch136NameNumber_freshVar_12,action);
      }}}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.DoWhileExpression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_13= tomMatch136NameNumberfreshSubject_1.getEndExpression() ;{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_14= tomMatch136NameNumberfreshSubject_1.getLoopCondition() ;if ( true ) {


        Instruction subInstruction = generateAutomata(tomMatch136NameNumber_freshVar_13, tom.engine.adt.tominstruction.types.instruction.Nop.make() );
        return  tom.engine.adt.tominstruction.types.instruction.DoWhile.make( tom.engine.adt.tominstruction.types.instruction.UnamedBlock.make( tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(action, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(subInstruction, tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ) , tomMatch136NameNumber_freshVar_14) ;
      }}}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.IfExpression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_15= tomMatch136NameNumberfreshSubject_1.getCondition() ;{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_16= tomMatch136NameNumberfreshSubject_1.getThenExpression() ;{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_17= tomMatch136NameNumberfreshSubject_1.getElseExpression() ;if ( (tomMatch136NameNumber_freshVar_16 instanceof tom.engine.adt.tomexpression.types.expression.EqualTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_18= tomMatch136NameNumber_freshVar_16.getKid1() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_19= tomMatch136NameNumber_freshVar_16.getKid2() ;if ( (tomMatch136NameNumber_freshVar_17 instanceof tom.engine.adt.tomexpression.types.expression.EqualTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_20= tomMatch136NameNumber_freshVar_17.getKid1() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch136NameNumber_freshVar_21= tomMatch136NameNumber_freshVar_17.getKid2() ;if ( true ) {


        return  tom.engine.adt.tominstruction.types.instruction.If.make(tomMatch136NameNumber_freshVar_15,  tom.engine.adt.tominstruction.types.instruction.LetAssign.make(tomMatch136NameNumber_freshVar_18,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(tomMatch136NameNumber_freshVar_19) ,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ,  tom.engine.adt.tominstruction.types.instruction.LetAssign.make(tomMatch136NameNumber_freshVar_20,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(tomMatch136NameNumber_freshVar_21) ,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ) ;
      }}}}}}}}}}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( ((tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_22=tomMatch136NameNumberfreshSubject_1;if ( true ) {


        return buildExpressionDisjunction(tomMatch136NameNumberfreshSubject_1,action);
      }}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( (tomMatch136NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.AntiMatchExpression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumber_freshVar_24= tomMatch136NameNumberfreshSubject_1.getExpression() ;if ( true ) {


        return buildAntiMatchInstruction(tomMatch136NameNumber_freshVar_24,action);
      }}}}}if ( (expression instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch136NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if ( true ) {


        return  tom.engine.adt.tominstruction.types.instruction.If.make(tomMatch136NameNumberfreshSubject_1, action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;
      }}}}

    throw new TomRuntimeException("ConstraintGenerator.generateAutomata - strange expression:" + expression);
  }
 
  /**
   * Converts 'Subterm' to 'GetSlot'
   */
  private static class ReplaceSubterms extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public ReplaceSubterms() { super(( new tom.library.sl.Identity() ));}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch137NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);if ( (tomMatch137NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomterm.Subterm) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch137NameNumber_freshVar_0= tomMatch137NameNumberfreshSubject_1.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch137NameNumber_freshVar_1= tomMatch137NameNumberfreshSubject_1.getSlotName() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch137NameNumber_freshVar_2= tomMatch137NameNumberfreshSubject_1.getGroundTerm() ;if ( (tomMatch137NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch137NameNumber_freshVar_3= tomMatch137NameNumber_freshVar_0.getString() ;{  tom.engine.adt.tomname.types.TomName  tom_slotName=tomMatch137NameNumber_freshVar_1;if ( true ) {


        TomSymbol tomSymbol = Compiler.getSymbolTable().getSymbolFromName(tomMatch137NameNumber_freshVar_3);
        TomType subtermType = TomBase.getSlotType(tomSymbol, tom_slotName);	        	
        return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.GetSlot.make(subtermType, tomMatch137NameNumber_freshVar_0, tom_slotName.getString(), tomMatch137NameNumber_freshVar_2) ) ;
      }}}}}}}}}}}return super.visit_TomTerm(tom__arg,introspector); }}private static  tom.library.sl.Strategy  tom_make_ReplaceSubterms() { return new ReplaceSubterms(); }


  
  /*
   * Takes the OrConnector and generates the tests
   * (this is for the OrConstraint - the disjunction of constraints)
   * 
   * boolean flag = false;
   * var1 = null; // all the free variables
   * var2 = null;
   * ....
   * varm = null;
   * int counter = 0;
   * do{ // n is the number of 'or'
   *    if (counter >= 0 && counter <=0 ) { //generated like this because if we use "counter == 0", we have to include "int.tom" 
   *        if ( code_for_first_constraint_in_disjunction ){
   *            flag = true;
   *        }
   *    }
   *    ....
   *    if (counter >= n-1 && counter <= n-1) {
   *        if ( code_for_n_constraint_in_disjunction ){
   *            flag = true;
   *        }
   *    }    
   *    if (flag == true) ...
   *    counter++;
   * } while (counter < n)
   *  
   */
  private static Instruction buildConstraintDisjunction(Expression orConnector, Instruction action) throws VisitFailure {    
    TomTerm flag = Compiler.getFreshVariable(Compiler.getBooleanType());
    Instruction assignFlagTrue =  tom.engine.adt.tominstruction.types.instruction.LetAssign.make(flag,  tom.engine.adt.tomexpression.types.expression.TrueTL.make() ,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;
    TomType intType = Compiler.getIntType();
    TomTerm counter = Compiler.getFreshVariable(intType);    
    Instruction instruction =  tom.engine.adt.tominstruction.types.instruction.Nop.make() ;
    int cnt = 0;
    {if ( (orConnector instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch138NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )orConnector);if ( ((tomMatch138NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (tomMatch138NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch138NameNumber_freshVar_0=tomMatch138NameNumberfreshSubject_1;{  tom.engine.adt.tomexpression.types.Expression  tomMatch138NameNumber_begin_2=tomMatch138NameNumber_freshVar_0;{  tom.engine.adt.tomexpression.types.Expression  tomMatch138NameNumber_end_3=tomMatch138NameNumber_freshVar_0;do {{{  tom.engine.adt.tomexpression.types.Expression  tomMatch138NameNumber_freshVar_1=tomMatch138NameNumber_end_3;if (!( (  tomMatch138NameNumber_freshVar_1.isEmptyOrConnector()  ||  tomMatch138NameNumber_freshVar_1.equals( tom.engine.adt.tomexpression.types.expression.EmptyOrConnector.make() )  ) )) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch138NameNumber_freshVar_4=(( ((tomMatch138NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (tomMatch138NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )?( tomMatch138NameNumber_freshVar_1.getTailOrConnector() ):( tom.engine.adt.tomexpression.types.expression.EmptyOrConnector.make() ));if ( true ) {

        TomTerm counterValue =  tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make(cnt+"") , intType,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ;
        instruction =  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make( tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(instruction, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.And.make( tom.engine.adt.tomexpression.types.expression.GreaterOrEqualThan.make( tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(counter) ,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(counterValue) ) ,  tom.engine.adt.tomexpression.types.expression.LessOrEqualThan.make( tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(counter) ,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(counterValue) ) ) , generateAutomata((( ((tomMatch138NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (tomMatch138NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )?( tomMatch138NameNumber_freshVar_1.getHeadOrConnector() ):(tomMatch138NameNumber_freshVar_1)),assignFlagTrue),  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) , tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ) 


;
        cnt++;
      }}}}if ( (  tomMatch138NameNumber_end_3.isEmptyOrConnector()  ||  tomMatch138NameNumber_end_3.equals( tom.engine.adt.tomexpression.types.expression.EmptyOrConnector.make() )  ) ) {tomMatch138NameNumber_end_3=tomMatch138NameNumber_begin_2;} else {tomMatch138NameNumber_end_3=(( ((tomMatch138NameNumber_end_3 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrConnector) || (tomMatch138NameNumber_end_3 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrConnector)) )?( tomMatch138NameNumber_end_3.getTailOrConnector() ):( tom.engine.adt.tomexpression.types.expression.EmptyOrConnector.make() ));}}} while(!( tomMatch138NameNumber_end_3.equals(tomMatch138NameNumber_begin_2) ));}}}}}}}

    // add the final test
    instruction =  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make( tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(instruction, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.EqualTerm.make(Compiler.getBooleanType(), flag,  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.TrueTL.make() ) ) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) , tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ) 
;
    // counter++ : expression at the end of the loop 
    Instruction counterIncrement =  tom.engine.adt.tominstruction.types.instruction.LetRef.make(counter,  tom.engine.adt.tomexpression.types.expression.AddOne.make(counter) ,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;    
    instruction =  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make( tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(instruction, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(counterIncrement, tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ) ;
    instruction =  tom.engine.adt.tominstruction.types.instruction.DoWhile.make(instruction,  tom.engine.adt.tomexpression.types.expression.LessThan.make( tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(counter) ,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make( tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make(cnt+"") , intType,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ) ) ) ;
    
    // add fresh variables' declarations
    ArrayList<TomTerm> freshVarList = new ArrayList<TomTerm>();
    // collect free variables    
    tom_make_TopDownCollect(tom_make_CollectFreeVar(freshVarList)).visitLight(orConnector);
    for(TomTerm var:freshVarList){
      instruction =  tom.engine.adt.tominstruction.types.instruction.LetRef.make(var,  tom.engine.adt.tomexpression.types.expression.Bottom.make(var.getAstType()) , instruction) ;
    }
    // stick the counter declaration
    instruction =  tom.engine.adt.tominstruction.types.instruction.LetRef.make(counter,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make( tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make(0+"") , intType,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ) , instruction) ;
    // stick the flag declaration 
    return  tom.engine.adt.tominstruction.types.instruction.LetRef.make(flag,  tom.engine.adt.tomexpression.types.expression.FalseTL.make() , instruction) ;
  }
  
  /*
   * Takes the OrConstraintDisjunction and generates the tests
   * (this is for the disjunction of symbols)
   * 
   * boolean flag = false;
   * var1 = null;
   * var2 = null;
   * ....
   * if (is_fsym(f1)){
   *    flag = true;
   *    var1 = subterm1_f1();
   *    var2 = subterm2_f1();
   *    .....    
   * }else if (is_fsym(f2)) {
   *    flag = true;
   *    var1 = subterm1_f2();
   *    var2 = subterm2_f2();
   *    ..... 
   * } ....
   * if (flag == true) ...
   *  
   */
  private static Instruction buildExpressionDisjunction(Expression orDisjunction,Instruction action)
         throws VisitFailure {     
    TomTerm flag = Compiler.getFreshVariable(Compiler.getBooleanType());
    Instruction assignFlagTrue =  tom.engine.adt.tominstruction.types.instruction.LetAssign.make(flag,  tom.engine.adt.tomexpression.types.expression.TrueTL.make() ,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;
    ArrayList<TomTerm> freshVarList = new ArrayList<TomTerm>();
    // collect variables    
    tom_make_TopDown(tom_make_CollectVar(freshVarList)).visitLight(orDisjunction);    
    Instruction instruction = buildDisjunctionIfElse(orDisjunction,assignFlagTrue);
    // add the final test
    instruction =  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make( tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(instruction, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.EqualTerm.make(Compiler.getBooleanType(), flag,  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.TrueTL.make() ) ) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) , tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ) 
;    
    // add fresh variables' declarations
    for(TomTerm var:freshVarList){
      instruction =  tom.engine.adt.tominstruction.types.instruction.LetRef.make(var,  tom.engine.adt.tomexpression.types.expression.Bottom.make(var.getAstType()) , instruction) ;
    }
    // stick the flag declaration also
    return  tom.engine.adt.tominstruction.types.instruction.LetRef.make(flag,  tom.engine.adt.tomexpression.types.expression.FalseTL.make() , instruction) ;
  }

  private static Instruction buildDisjunctionIfElse(Expression orDisjunction,Instruction assignFlagTrue)
      throws VisitFailure {    
    {if ( (orDisjunction instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )orDisjunction);if ( ((tomMatch139NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumber_freshVar_0=tomMatch139NameNumberfreshSubject_1;if ( (  tomMatch139NameNumber_freshVar_0.isEmptyOrExpressionDisjunction()  ||  tomMatch139NameNumber_freshVar_0.equals( tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() )  ) ) {if ( true ) {

        return  tom.engine.adt.tominstruction.types.instruction.Nop.make() ;
      }}}}}}if ( (orDisjunction instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )orDisjunction);if ( ((tomMatch139NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumber_freshVar_1=tomMatch139NameNumberfreshSubject_1;if (!( (  tomMatch139NameNumber_freshVar_1.isEmptyOrExpressionDisjunction()  ||  tomMatch139NameNumber_freshVar_1.equals( tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() )  ) )) {if ( ((( ((tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )?( tomMatch139NameNumber_freshVar_1.getHeadOrExpressionDisjunction() ):(tomMatch139NameNumber_freshVar_1)) instanceof tom.engine.adt.tomexpression.types.expression.And) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumber_freshVar_4= (( ((tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )?( tomMatch139NameNumber_freshVar_1.getHeadOrExpressionDisjunction() ):(tomMatch139NameNumber_freshVar_1)).getArg1() ;{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumber_freshVar_5= (( ((tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )?( tomMatch139NameNumber_freshVar_1.getHeadOrExpressionDisjunction() ):(tomMatch139NameNumber_freshVar_1)).getArg2() ;{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumber_freshVar_2=(( ((tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumber_freshVar_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )?( tomMatch139NameNumber_freshVar_1.getTailOrExpressionDisjunction() ):( tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ));if ( true ) {
        
        Instruction subtest = buildDisjunctionIfElse(tom_append_list_OrExpressionDisjunction(tomMatch139NameNumber_freshVar_2, tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ),assignFlagTrue);
        return  tom.engine.adt.tominstruction.types.instruction.If.make(tomMatch139NameNumber_freshVar_4,  tom.engine.adt.tominstruction.types.instruction.UnamedBlock.make( tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(assignFlagTrue, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(generateAutomata(tomMatch139NameNumber_freshVar_5, tom.engine.adt.tominstruction.types.instruction.Nop.make() ), tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ) , subtest) ;
      }}}}}}}}}}if ( (orDisjunction instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )orDisjunction);if ( ((tomMatch139NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumber_freshVar_6=tomMatch139NameNumberfreshSubject_1;if (!( (  tomMatch139NameNumber_freshVar_6.isEmptyOrExpressionDisjunction()  ||  tomMatch139NameNumber_freshVar_6.equals( tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() )  ) )) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch139NameNumber_freshVar_7=(( ((tomMatch139NameNumber_freshVar_6 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumber_freshVar_6 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )?( tomMatch139NameNumber_freshVar_6.getTailOrExpressionDisjunction() ):( tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ));if ( true ) {
        
        Instruction subtest = buildDisjunctionIfElse(tom_append_list_OrExpressionDisjunction(tomMatch139NameNumber_freshVar_7, tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ),assignFlagTrue);
        return  tom.engine.adt.tominstruction.types.instruction.If.make((( ((tomMatch139NameNumber_freshVar_6 instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction) || (tomMatch139NameNumber_freshVar_6 instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction)) )?( tomMatch139NameNumber_freshVar_6.getHeadOrExpressionDisjunction() ):(tomMatch139NameNumber_freshVar_6)), assignFlagTrue, subtest) ;
      }}}}}}}}

    throw new TomRuntimeException("ConstraintGenerator.buildDisjunctionIfElse - strange expression:" + orDisjunction);
  }

  /**
   * generates:
   * 
   * bool matchSuccessful = false;
   * if (expression){
   *    matchSuccessful = true;
   * }
   * if (matchSuccessful == false){
   *    action;
   * }
   */
  private static Instruction buildAntiMatchInstruction(Expression expression, Instruction action)
      throws VisitFailure {
    TomTerm flag = Compiler.getFreshVariable(Compiler.getBooleanType());    
    Instruction assignFlagTrue =  tom.engine.adt.tominstruction.types.instruction.LetAssign.make(flag,  tom.engine.adt.tomexpression.types.expression.TrueTL.make() ,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;
    Instruction automata = generateAutomata(expression, assignFlagTrue);    
    // add the final test
    Instruction result =  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make( tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(automata, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.EqualTerm.make(Compiler.getBooleanType(), flag,  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.FalseTL.make() ) ) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) , tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ) 
;
    return  tom.engine.adt.tominstruction.types.instruction.LetRef.make(flag,  tom.engine.adt.tomexpression.types.expression.FalseTL.make() , result) ;
  }

  /**
   * Collect the variables in a term   
   */
  private static class CollectVar extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  varList; public CollectVar( java.util.Collection  varList) { super(( new tom.library.sl.Identity() ));this.varList=varList;}public  java.util.Collection  getvarList() { return varList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch140NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if ( (tomMatch140NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch140NameNumber_freshVar_0= tomMatch140NameNumberfreshSubject_1.getpattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch140NameNumber_freshVar_1= tomMatch140NameNumberfreshSubject_1.getsubject() ;if ( (tomMatch140NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomterm.types.TomTerm  tom_v=tomMatch140NameNumber_freshVar_0;if ( true ) {

        
        if (!varList.contains(tom_v)) { varList.add(tom_v); }        
      }}}}}}}}}return super.visit_Constraint(tom__arg,introspector); }}private static  tom.library.sl.Strategy  tom_make_CollectVar( java.util.Collection  t0) { return new CollectVar(t0); }

// end strategy   
  
  /**
   * Collect the free variables in an expression (do not inspect under a anti)  
   */
  private static class CollectFreeVar extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  varList; public CollectFreeVar( java.util.Collection  varList) { super(( new tom.library.sl.Identity() ));this.varList=varList;}public  java.util.Collection  getvarList() { return varList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomexpression.types.Expression  visit_Expression( tom.engine.adt.tomexpression.types.Expression  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch141NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg);if ( (tomMatch141NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch141NameNumber_freshVar_0= tomMatch141NameNumberfreshSubject_1.getcons() ;if ( (tomMatch141NameNumber_freshVar_0 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch141NameNumber_freshVar_1= tomMatch141NameNumber_freshVar_0.getpattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch141NameNumber_freshVar_2= tomMatch141NameNumber_freshVar_0.getsubject() ;if ( (tomMatch141NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomterm.types.TomTerm  tom_v=tomMatch141NameNumber_freshVar_1;if ( true ) {


        if (!varList.contains(tom_v)) { varList.add(tom_v); }     
        throw new VisitFailure();
      }}}}}}}}}}if ( (tom__arg instanceof tom.engine.adt.tomexpression.types.Expression) ) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch141NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg);if ( (tomMatch141NameNumberfreshSubject_1 instanceof tom.engine.adt.tomexpression.types.expression.AntiMatchExpression) ) {if ( true ) {
        
        throw new VisitFailure();
      }}}}}return super.visit_Expression(tom__arg,introspector); }}private static  tom.library.sl.Strategy  tom_make_CollectFreeVar( java.util.Collection  t0) { return new CollectFreeVar(t0); }


  
  /**
   * check that the list is empty
   * when domain=codomain, the test is extended to:
   *   is_empty(l) || l==make_empty()
   *   this is needed because get_tail() may return the neutral element 
   */ 
  public static Expression genIsEmptyList(TomName opName, TomTerm var) {
    TomSymbol tomSymbol = Compiler.getSymbolTable().getSymbolFromName(((Name)opName).getString());
    TomType domain = TomBase.getSymbolDomain(tomSymbol).getHeadconcTomType();
    TomType codomain = TomBase.getSymbolCodomain(tomSymbol);
    if(domain==codomain) {
      return  tom.engine.adt.tomexpression.types.expression.Or.make( tom.engine.adt.tomexpression.types.expression.IsEmptyList.make(opName, var) ,  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(codomain, var,  tom.engine.adt.tomterm.types.tomterm.BuildEmptyList.make(opName) ) ) ;
    }
    return  tom.engine.adt.tomexpression.types.expression.IsEmptyList.make(opName, var) ;
  }
  
  private static Instruction buildNumericCondition(Constraint c, Instruction action) {
    {if ( (c instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch142NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )c);if ( (tomMatch142NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraint.NumericConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch142NameNumber_freshVar_0= tomMatch142NameNumberfreshSubject_1.getLeft() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch142NameNumber_freshVar_1= tomMatch142NameNumberfreshSubject_1.getRight() ;{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch142NameNumber_freshVar_2= tomMatch142NameNumberfreshSubject_1.getType() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_left=tomMatch142NameNumber_freshVar_0;{  tom.engine.adt.tomterm.types.TomTerm  tom_right=tomMatch142NameNumber_freshVar_1;{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tom_type=tomMatch142NameNumber_freshVar_2;if ( true ) {
        
        TomType tomType = Compiler.getTermTypeFromTerm(tom_left);
        Expression leftExpr =  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(tom_left) ;
        Expression rightExpr =  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(tom_right) ;
        {if ( (tom_type instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType) ) {{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch143NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.NumericConstraintType )tom_type);if ( (tomMatch143NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.numericconstrainttype.NumLessThan) ) {if ( true ) {
 return  tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.LessThan.make(leftExpr, rightExpr) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;}}}}if ( (tom_type instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType) ) {{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch143NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.NumericConstraintType )tom_type);if ( (tomMatch143NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.numericconstrainttype.NumLessOrEqualThan) ) {if ( true ) {
 return  tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.LessOrEqualThan.make(leftExpr, rightExpr) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;}}}}if ( (tom_type instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType) ) {{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch143NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.NumericConstraintType )tom_type);if ( (tomMatch143NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.numericconstrainttype.NumGreaterThan) ) {if ( true ) {
 return  tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.GreaterThan.make(leftExpr, rightExpr) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;}}}}if ( (tom_type instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType) ) {{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch143NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.NumericConstraintType )tom_type);if ( (tomMatch143NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.numericconstrainttype.NumGreaterOrEqualThan) ) {if ( true ) {
 return  tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.GreaterOrEqualThan.make(leftExpr, rightExpr) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;}}}}if ( (tom_type instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType) ) {{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch143NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.NumericConstraintType )tom_type);if ( (tomMatch143NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.numericconstrainttype.NumEqual) ) {if ( true ) {
 return  tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.EqualTerm.make(tomType, tom_right, tom_left) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;}}}}if ( (tom_type instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType) ) {{  tom.engine.adt.tomconstraint.types.NumericConstraintType  tomMatch143NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.NumericConstraintType )tom_type);if ( (tomMatch143NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.numericconstrainttype.NumDifferent) ) {if ( true ) {
 return  tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.Negation.make( tom.engine.adt.tomexpression.types.expression.EqualTerm.make(tomType, tom_right, tom_left) ) , action,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;}}}}}

      }}}}}}}}}}}

    // should never reach here
    throw new TomRuntimeException("Untreated numeric constraint: " + c);
  }
}
