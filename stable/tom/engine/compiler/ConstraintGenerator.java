/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler;

import java.util.ArrayList;
import java.util.Iterator;

import tom.engine.TomBase;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomconstraint.types.constraint.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.tools.SymbolTable;
import tom.engine.compiler.generator.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.library.sl.Visitable;


/**
 * This class is in charge with launching all the generators,
 * until no more generations can be made 
 */
public class ConstraintGenerator {

//------------------------------------------------------------	
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_Instruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Instruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.Instruction ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_InstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.InstructionList ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_If( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.If.make(t0, t1, t2) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_DoWhile( tom.engine.adt.tominstruction.types.Instruction  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tominstruction.types.instruction.DoWhile.make(t0, t1) ; }private static boolean tom_is_fun_sym_LetRef( tom.engine.adt.tominstruction.types.Instruction  t) { return  t instanceof tom.engine.adt.tominstruction.types.instruction.LetRef ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_LetRef( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.LetRef.make(t0, t1, t2) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetRef_Variable( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetRef_Source( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getSource() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetRef_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAstInstruction() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_LetAssign( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.LetAssign.make(t0, t1, t2) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Nop() { return  tom.engine.adt.tominstruction.types.instruction.Nop.make() ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_AbstractBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(t0) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_UnamedBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.UnamedBlock.make(t0) ; }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  t instanceof tom.engine.adt.tomname.types.tomname.Name ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TomTermToExpression( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Bottom( tom.engine.adt.tomtype.types.TomType  t0) { return  tom.engine.adt.tomexpression.types.expression.Bottom.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Negation( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomexpression.types.expression.Negation.make(t0) ; }private static boolean tom_is_fun_sym_And( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.And ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_And( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.And.make(t0, t1) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_And_Arg1( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getArg1() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_And_Arg2( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getArg2() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Or( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.Or.make(t0, t1) ; }private static boolean tom_is_fun_sym_AntiMatchExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.AntiMatchExpression ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_AntiMatchExpression( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomexpression.types.expression.AntiMatchExpression.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_AntiMatchExpression_Expression( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getExpression() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TrueTL() { return  tom.engine.adt.tomexpression.types.expression.TrueTL.make() ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_FalseTL() { return  tom.engine.adt.tomexpression.types.expression.FalseTL.make() ; }private static boolean tom_is_fun_sym_EqualTerm( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.EqualTerm ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualTerm( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(t0, t1, t2) ; }private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_EqualTerm_TomType( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getTomType() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTerm_Kid1( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getKid1() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTerm_Kid2( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getKid2() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSlot( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomname.types.TomName  t1,  String  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetSlot.make(t0, t1, t2, t3) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsEmptyList( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomexpression.types.expression.IsEmptyList.make(t0, t1) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_IsEmptyArray( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.IsEmptyArray.make(t0, t1, t2) ; }private static boolean tom_is_fun_sym_ConstraintToExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.ConstraintToExpression ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_ConstraintToExpression( tom.engine.adt.tomconstraint.types.Constraint  t0) { return  tom.engine.adt.tomexpression.types.expression.ConstraintToExpression.make(t0) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_ConstraintToExpression_cons( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getcons() ;}private static boolean tom_is_fun_sym_DoWhileExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.DoWhileExpression ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_DoWhileExpression_EndExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getEndExpression() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_DoWhileExpression_LoopCondition( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getLoopCondition() ;}private static boolean tom_is_fun_sym_IfExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.IfExpression ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_IfExpression_Condition( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getCondition() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_IfExpression_ThenExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getThenExpression() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_IfExpression_ElseExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getElseExpression() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ExpressionToTomTerm( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make(t0) ; }private static boolean tom_is_fun_sym_Subterm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Subterm ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_SlotName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Subterm_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getGroundTerm() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Ref( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.Ref.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildEmptyList( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.BuildEmptyList.make(t0) ; }private static boolean tom_is_fun_sym_Negate( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.Negate ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_Negate_c( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getc() ;}private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static boolean tom_is_fun_sym_AntiMatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_AntiMatchConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getConstraint() ;}private static boolean tom_is_fun_sym_EmptyListConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyListConstraint ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_EmptyListConstraint_Opname( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getOpname() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EmptyListConstraint_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getVariable() ;}private static boolean tom_is_fun_sym_EmptyArrayConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyArrayConstraint ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_EmptyArrayConstraint_Opname( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getOpname() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EmptyArrayConstraint_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EmptyArrayConstraint_Index( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getIndex() ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) { return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getHeadconcInstruction() ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getTailconcInstruction() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.isEmptyconcInstruction() ;}   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {     if(tom_is_empty_concInstruction_InstructionList(l1)) {       return l2;     } else if(tom_is_empty_concInstruction_InstructionList(l2)) {       return l1;     } else if(tom_is_empty_concInstruction_InstructionList(tom_get_tail_concInstruction_InstructionList(l1))) {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(l1),l2);     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(tom_get_tail_concInstruction_InstructionList(l1),l2));     }   }   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end, tom.engine.adt.tominstruction.types.InstructionList  tail) {     if(tom_equal_term_InstructionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(tom_get_tail_concInstruction_InstructionList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_OrExpressionDisjunction( tom.engine.adt.tomexpression.types.Expression  t) { return  t instanceof tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction || t instanceof tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_empty_list_OrExpressionDisjunction() { return  tom.engine.adt.tomexpression.types.expression.EmptyOrExpressionDisjunction.make() ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_cons_list_OrExpressionDisjunction( tom.engine.adt.tomexpression.types.Expression  e,  tom.engine.adt.tomexpression.types.Expression  l) { return  tom.engine.adt.tomexpression.types.expression.ConsOrExpressionDisjunction.make(e,l) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_head_OrExpressionDisjunction_Expression( tom.engine.adt.tomexpression.types.Expression  l) { return  l.getHeadOrExpressionDisjunction() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_tail_OrExpressionDisjunction_Expression( tom.engine.adt.tomexpression.types.Expression  l) { return  l.getTailOrExpressionDisjunction() ;}private static boolean tom_is_empty_OrExpressionDisjunction_Expression( tom.engine.adt.tomexpression.types.Expression  l) { return  l.isEmptyOrExpressionDisjunction() ;}   private static   tom.engine.adt.tomexpression.types.Expression  tom_append_list_OrExpressionDisjunction( tom.engine.adt.tomexpression.types.Expression l1,  tom.engine.adt.tomexpression.types.Expression  l2) {     if(tom_is_empty_OrExpressionDisjunction_Expression(l1)) {       return l2;     } else if(tom_is_empty_OrExpressionDisjunction_Expression(l2)) {       return l1;     } else if(tom_is_fun_sym_OrExpressionDisjunction(l1)) {       if(tom_is_empty_OrExpressionDisjunction_Expression(((tom_is_fun_sym_OrExpressionDisjunction(l1))?tom_get_tail_OrExpressionDisjunction_Expression(l1):tom_empty_list_OrExpressionDisjunction()))) {         return ( tom.engine.adt.tomexpression.types.Expression )tom_cons_list_OrExpressionDisjunction(((tom_is_fun_sym_OrExpressionDisjunction(l1))?tom_get_head_OrExpressionDisjunction_Expression(l1):l1),l2);       } else {         return ( tom.engine.adt.tomexpression.types.Expression )tom_cons_list_OrExpressionDisjunction(((tom_is_fun_sym_OrExpressionDisjunction(l1))?tom_get_head_OrExpressionDisjunction_Expression(l1):l1),tom_append_list_OrExpressionDisjunction(((tom_is_fun_sym_OrExpressionDisjunction(l1))?tom_get_tail_OrExpressionDisjunction_Expression(l1):tom_empty_list_OrExpressionDisjunction()),l2));       }     } else {       return ( tom.engine.adt.tomexpression.types.Expression )tom_cons_list_OrExpressionDisjunction(l1, l2);     }   }   private static   tom.engine.adt.tomexpression.types.Expression  tom_get_slice_OrExpressionDisjunction( tom.engine.adt.tomexpression.types.Expression  begin,  tom.engine.adt.tomexpression.types.Expression  end, tom.engine.adt.tomexpression.types.Expression  tail) {     if(tom_equal_term_Expression(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomexpression.types.Expression )tom_cons_list_OrExpressionDisjunction(((tom_is_fun_sym_OrExpressionDisjunction(begin))?tom_get_head_OrExpressionDisjunction_Expression(begin):begin),( tom.engine.adt.tomexpression.types.Expression )tom_get_slice_OrExpressionDisjunction(((tom_is_fun_sym_OrExpressionDisjunction(begin))?tom_get_tail_OrExpressionDisjunction_Expression(begin):tom_empty_list_OrExpressionDisjunction()),end,tail));     }   }   private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if(tom_is_empty_AndConstraint_Constraint(l1)) {       return l2;     } else if(tom_is_empty_AndConstraint_Constraint(l2)) {       return l1;     } else if(tom_is_fun_sym_AndConstraint(l1)) {       if(tom_is_empty_AndConstraint_Constraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()))) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),tom_append_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_head_AndConstraint_Constraint(begin):begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_tail_AndConstraint_Constraint(begin):tom_empty_list_AndConstraint()),end,tail));     }   }   private static boolean tom_is_fun_sym_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction || t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_OrConstraintDisjunction() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraintDisjunction.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraintDisjunction.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_OrConstraintDisjunction_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadOrConstraintDisjunction() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_OrConstraintDisjunction_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailOrConstraintDisjunction() ;}private static boolean tom_is_empty_OrConstraintDisjunction_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyOrConstraintDisjunction() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if(tom_is_empty_OrConstraintDisjunction_Constraint(l1)) {       return l2;     } else if(tom_is_empty_OrConstraintDisjunction_Constraint(l2)) {       return l1;     } else if(tom_is_fun_sym_OrConstraintDisjunction(l1)) {       if(tom_is_empty_OrConstraintDisjunction_Constraint(((tom_is_fun_sym_OrConstraintDisjunction(l1))?tom_get_tail_OrConstraintDisjunction_Constraint(l1):tom_empty_list_OrConstraintDisjunction()))) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction(((tom_is_fun_sym_OrConstraintDisjunction(l1))?tom_get_head_OrConstraintDisjunction_Constraint(l1):l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction(((tom_is_fun_sym_OrConstraintDisjunction(l1))?tom_get_head_OrConstraintDisjunction_Constraint(l1):l1),tom_append_list_OrConstraintDisjunction(((tom_is_fun_sym_OrConstraintDisjunction(l1))?tom_get_tail_OrConstraintDisjunction_Constraint(l1):tom_empty_list_OrConstraintDisjunction()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_OrConstraintDisjunction( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraintDisjunction(((tom_is_fun_sym_OrConstraintDisjunction(begin))?tom_get_head_OrConstraintDisjunction_Constraint(begin):begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_OrConstraintDisjunction(((tom_is_fun_sym_OrConstraintDisjunction(begin))?tom_get_tail_OrConstraintDisjunction_Constraint(begin):tom_empty_list_OrConstraintDisjunction()),end,tail));     }   }    /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Collection(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_Collection(Object t) { return  t instanceof java.util.Collection ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t instanceof tom.library.sl.Identity ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }   private static boolean tom_is_fun_sym_SequenceId( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.SequenceId) ;}private static  tom.library.sl.Strategy  tom_empty_list_SequenceId() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_cons_list_SequenceId( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  new tom.library.sl.SequenceId(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.SequenceId.THEN) ;}private static boolean tom_is_empty_SequenceId_Strategy( tom.library.sl.Strategy  t) { return  t instanceof tom.library.sl.Identity ;}   private static   tom.library.sl.Strategy  tom_append_list_SequenceId( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_SequenceId_Strategy(l1)) {       return l2;     } else if(tom_is_empty_SequenceId_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_SequenceId(l1)) {       if(tom_is_empty_SequenceId_Strategy(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()))) {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_head_SequenceId_Strategy(l1):l1),tom_append_list_SequenceId(((tom_is_fun_sym_SequenceId(l1))?tom_get_tail_SequenceId_Strategy(l1):tom_empty_list_SequenceId()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_SequenceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_head_SequenceId_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_SequenceId(((tom_is_fun_sym_SequenceId(begin))?tom_get_tail_SequenceId_Strategy(begin):tom_empty_list_SequenceId()),end,tail));     }   }    /* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }private static  tom.library.sl.Strategy  tom_make_InnermostId( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_cons_list_Sequence(tom_cons_list_SequenceId(v,tom_cons_list_SequenceId(tom_make_MuVar("_x"),tom_empty_list_SequenceId())),tom_empty_list_Sequence()))) ; }   


//------------------------------------------------------------	
 
  private static final String generatorsPackage = "tom.engine.compiler.generator.";
  // the list of all generators
  private static final String[] generatorsNames = {"SyntacticGenerator","VariadicGenerator","ArrayGenerator"};

  public static Instruction performGenerations(Constraint constraint, Instruction action) 
  throws ClassNotFoundException,InstantiationException,IllegalAccessException{		
    // counts the generators that didn't change the instruction
    int genCounter = 0;
    int genNb = generatorsNames.length;
    
    Expression result = null;    
    Expression expression = prepareGeneration(constraint);
    // cache the generators
    IBaseGenerator[] gen = new IBaseGenerator[genNb];
    for(int i=0 ; i < genNb ; i++) {
      gen[i] = (IBaseGenerator)Class.forName(generatorsPackage + generatorsNames[i]).newInstance();
    }
    
    // iterate until all propagators are applied and nothing was changed 
    mainLoop: while(true){		
      for(int i=0 ; i < genNb ; i++){        
        result = gen[i].generate(expression);
        // if nothing was done, start counting 
        genCounter = (result == expression) ? (genCounter + 1) : 0;        				
        // if we applied all the generators and nothing changed,
        // it's time to stop
        if (genCounter == genNb) { break mainLoop; }
        // reinitialize
        expression = result; 
      }
    } // end while
    //System.out.println("result: " + result);
    return buildInstructionFromExpression(result,action);
  }

  /**
   * Prepares the generation phase: globally translates constraints into expressions
   *   
   */
  private static Expression prepareGeneration(Constraint constraint){    
    if (tom_is_sort_Constraint(constraint)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )constraint);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_0=tomMatch63NameNumberfreshSubject_1;if (tom_is_fun_sym_AndConstraint(tomMatch63NameNumber_freshVar_0)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_1=tomMatch63NameNumber_freshVar_0;if (!( ( tom_is_empty_AndConstraint_Constraint(tomMatch63NameNumber_freshVar_1) || tom_equal_term_Constraint(tomMatch63NameNumber_freshVar_1, tom_empty_list_AndConstraint()) ) )) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_2=((tom_is_fun_sym_AndConstraint(tomMatch63NameNumber_freshVar_1))?(tom_get_tail_AndConstraint_Constraint(tomMatch63NameNumber_freshVar_1)):(tom_empty_list_AndConstraint()));if ( true ) {
        
        //TODO - erase the test when the match non-au will be available
        if ((tomMatch63NameNumber_freshVar_0) instanceof AndConstraint){
          return tom_make_And(prepareGeneration(((tom_is_fun_sym_AndConstraint(tomMatch63NameNumber_freshVar_1))?(tom_get_head_AndConstraint_Constraint(tomMatch63NameNumber_freshVar_1)):(tomMatch63NameNumber_freshVar_1))),prepareGeneration(tom_append_list_AndConstraint(tomMatch63NameNumber_freshVar_2,tom_empty_list_AndConstraint())))
;
        }
      }}}}}}if (tom_is_fun_sym_OrConstraintDisjunction(tomMatch63NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_25=tomMatch63NameNumberfreshSubject_1;if (!( ( tom_is_empty_OrConstraintDisjunction_Constraint(tomMatch63NameNumber_freshVar_25) || tom_equal_term_Constraint(tomMatch63NameNumber_freshVar_25, tom_empty_list_OrConstraintDisjunction()) ) )) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_26=((tom_is_fun_sym_OrConstraintDisjunction(tomMatch63NameNumber_freshVar_25))?(tom_get_tail_OrConstraintDisjunction_Constraint(tomMatch63NameNumber_freshVar_25)):(tom_empty_list_OrConstraintDisjunction()));if ( true ) {
        
        return tom_cons_list_OrExpressionDisjunction(prepareGeneration(((tom_is_fun_sym_OrConstraintDisjunction(tomMatch63NameNumber_freshVar_25))?(tom_get_head_OrConstraintDisjunction_Constraint(tomMatch63NameNumber_freshVar_25)):(tomMatch63NameNumber_freshVar_25))),tom_cons_list_OrExpressionDisjunction(prepareGeneration(tom_append_list_OrConstraintDisjunction(tomMatch63NameNumber_freshVar_26,tom_empty_list_OrConstraintDisjunction())),tom_empty_list_OrExpressionDisjunction()))
;
      }}}}}{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_43=tomMatch63NameNumberfreshSubject_1;if (tom_is_fun_sym_MatchConstraint(tomMatch63NameNumber_freshVar_43)) {if ( true ) {
        
        return tom_make_ConstraintToExpression(tomMatch63NameNumber_freshVar_43);
      }}}if (tom_is_fun_sym_AntiMatchConstraint(tomMatch63NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_44=tom_get_slot_AntiMatchConstraint_Constraint(tomMatch63NameNumberfreshSubject_1);if ( true ) {

        return tom_make_AntiMatchExpression(prepareGeneration(tomMatch63NameNumber_freshVar_44));
      }}}if (tom_is_fun_sym_Negate(tomMatch63NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch63NameNumber_freshVar_45=tom_get_slot_Negate_c(tomMatch63NameNumberfreshSubject_1);if ( true ) {

        return tom_make_Negation(prepareGeneration(tomMatch63NameNumber_freshVar_45));
      }}}if (tom_is_fun_sym_EmptyListConstraint(tomMatch63NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch63NameNumber_freshVar_46=tom_get_slot_EmptyListConstraint_Opname(tomMatch63NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch63NameNumber_freshVar_47=tom_get_slot_EmptyListConstraint_Variable(tomMatch63NameNumberfreshSubject_1);if ( true ) {
				
        return genIsEmptyList(tomMatch63NameNumber_freshVar_46,tomMatch63NameNumber_freshVar_47);
      }}}}if (tom_is_fun_sym_EmptyArrayConstraint(tomMatch63NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch63NameNumber_freshVar_48=tom_get_slot_EmptyArrayConstraint_Opname(tomMatch63NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch63NameNumber_freshVar_49=tom_get_slot_EmptyArrayConstraint_Variable(tomMatch63NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch63NameNumber_freshVar_50=tom_get_slot_EmptyArrayConstraint_Index(tomMatch63NameNumberfreshSubject_1);if ( true ) {
                          
        return tom_make_IsEmptyArray(tomMatch63NameNumber_freshVar_48,tom_make_Ref(tomMatch63NameNumber_freshVar_49),tom_make_Ref(tomMatch63NameNumber_freshVar_50));
      }}}}}}}
			
    throw new TomRuntimeException("ConstraintGenerator.prepareGeneration - strange constraint:" + constraint);
  }	

  /**
   * Converts the resulted expression (after generation) into instructions
   */
  private static Instruction buildInstructionFromExpression(Expression expression, Instruction action){		
    // it is done innermost because the expression is also simplified		
    try {
    expression = (Expression)tom_make_InnermostId(tom_make_ReplaceSubterms()).visit(expression);
    } catch (tom.library.sl.VisitFailure e) {
    throw new TomRuntimeException("Unexpected strategy failure!");
    }
    // generate automata
    Instruction automata = generateAutomata(expression,action);    
    // make sure that each variable is declared only once
    ArrayList<TomName> declaredVariables = new ArrayList<TomName>(); 		
    try {
      automata = (Instruction)tom_make_TopDown(tom_make_ChangeVarDeclarations(declaredVariables)).visit(automata);    
    } catch (tom.library.sl.VisitFailure e) {
      throw new TomRuntimeException("Unexpected strategy failure!");
    }
    return automata;
  }

  /**
   * Generates the automata from the expression
   */
  private static Instruction generateAutomata(Expression expression, Instruction action){
    if (tom_is_sort_Expression(expression)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )expression);if (tom_is_fun_sym_And(tomMatch64NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_0=tom_get_slot_And_Arg1(tomMatch64NameNumberfreshSubject_1);{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_1=tom_get_slot_And_Arg2(tomMatch64NameNumberfreshSubject_1);if ( true ) {

        Instruction subInstruction = generateAutomata(tomMatch64NameNumber_freshVar_1,action);
        return generateAutomata(tomMatch64NameNumber_freshVar_0,subInstruction);
      }}}}if (tom_is_fun_sym_ConstraintToExpression(tomMatch64NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch64NameNumber_freshVar_3=tom_get_slot_ConstraintToExpression_cons(tomMatch64NameNumberfreshSubject_1);if (tom_is_fun_sym_MatchConstraint(tomMatch64NameNumber_freshVar_3)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch64NameNumber_freshVar_4=tom_get_slot_MatchConstraint_pattern(tomMatch64NameNumber_freshVar_3);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch64NameNumber_freshVar_5=tom_get_slot_MatchConstraint_subject(tomMatch64NameNumber_freshVar_3);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch64NameNumber_freshVar_2=tomMatch64NameNumber_freshVar_4;{ boolean tomMatch64NameNumber_freshVar_6= false ;if (tom_is_fun_sym_Variable(tomMatch64NameNumber_freshVar_2)) {tomMatch64NameNumber_freshVar_6= true ;} else {if (tom_is_fun_sym_UnamedVariable(tomMatch64NameNumber_freshVar_2)) {tomMatch64NameNumber_freshVar_6= true ;} else {if (tom_is_fun_sym_VariableStar(tomMatch64NameNumber_freshVar_2)) {tomMatch64NameNumber_freshVar_6= true ;}}}if ((tomMatch64NameNumber_freshVar_6 ==  true )) {if ( true ) {


        return tom_make_LetRef(tomMatch64NameNumber_freshVar_2,tom_make_TomTermToExpression(tomMatch64NameNumber_freshVar_5),action);
      }}}}}}}}}if (tom_is_fun_sym_DoWhileExpression(tomMatch64NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_7=tom_get_slot_DoWhileExpression_EndExpression(tomMatch64NameNumberfreshSubject_1);{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_8=tom_get_slot_DoWhileExpression_LoopCondition(tomMatch64NameNumberfreshSubject_1);if ( true ) {


        Instruction subInstruction = generateAutomata(tomMatch64NameNumber_freshVar_7,tom_make_Nop());
        return tom_make_DoWhile(tom_make_UnamedBlock(tom_cons_list_concInstruction(action,tom_cons_list_concInstruction(subInstruction,tom_empty_list_concInstruction()))),tomMatch64NameNumber_freshVar_8);
      }}}}if (tom_is_fun_sym_IfExpression(tomMatch64NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_9=tom_get_slot_IfExpression_Condition(tomMatch64NameNumberfreshSubject_1);{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_10=tom_get_slot_IfExpression_ThenExpression(tomMatch64NameNumberfreshSubject_1);{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_11=tom_get_slot_IfExpression_ElseExpression(tomMatch64NameNumberfreshSubject_1);if (tom_is_fun_sym_EqualTerm(tomMatch64NameNumber_freshVar_10)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch64NameNumber_freshVar_12=tom_get_slot_EqualTerm_Kid1(tomMatch64NameNumber_freshVar_10);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch64NameNumber_freshVar_13=tom_get_slot_EqualTerm_Kid2(tomMatch64NameNumber_freshVar_10);if (tom_is_fun_sym_EqualTerm(tomMatch64NameNumber_freshVar_11)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch64NameNumber_freshVar_14=tom_get_slot_EqualTerm_Kid1(tomMatch64NameNumber_freshVar_11);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch64NameNumber_freshVar_15=tom_get_slot_EqualTerm_Kid2(tomMatch64NameNumber_freshVar_11);if ( true ) {


        return tom_make_If(tomMatch64NameNumber_freshVar_9,tom_make_LetAssign(tomMatch64NameNumber_freshVar_12,tom_make_TomTermToExpression(tomMatch64NameNumber_freshVar_13),tom_make_Nop()),tom_make_LetAssign(tomMatch64NameNumber_freshVar_14,tom_make_TomTermToExpression(tomMatch64NameNumber_freshVar_15),tom_make_Nop()));
      }}}}}}}}}}}{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_16=tomMatch64NameNumberfreshSubject_1;if (tom_is_fun_sym_OrExpressionDisjunction(tomMatch64NameNumber_freshVar_16)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_17=tomMatch64NameNumber_freshVar_16;if ( true ) {


        return buildExpressionDisjunction(tomMatch64NameNumber_freshVar_16,action);
      }}}}if (tom_is_fun_sym_AntiMatchExpression(tomMatch64NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch64NameNumber_freshVar_19=tom_get_slot_AntiMatchExpression_Expression(tomMatch64NameNumberfreshSubject_1);if ( true ) {


        return buildAntiMatchInstruction(tomMatch64NameNumber_freshVar_19,action);
      }}}if ( true ) {


        return tom_make_If(tomMatch64NameNumberfreshSubject_1,action,tom_make_Nop());
      }}}

    throw new TomRuntimeException("ConstraintGenerator.generateAutomata - strange expression:" + expression);
  }
 
  /**
   * Makes sure that no variable is declared if the same variable was declared above  
   */
  private static class ChangeVarDeclarations extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  declaredVariables; public ChangeVarDeclarations( java.util.Collection  declaredVariables) { super(tom_make_Identity());this.declaredVariables=declaredVariables;}public  java.util.Collection  getdeclaredVariables() { return declaredVariables;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch65NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_LetRef(tomMatch65NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch65NameNumber_freshVar_1=tom_get_slot_LetRef_Variable(tomMatch65NameNumberfreshSubject_1);{  tom.engine.adt.tomexpression.types.Expression  tomMatch65NameNumber_freshVar_2=tom_get_slot_LetRef_Source(tomMatch65NameNumberfreshSubject_1);{  tom.engine.adt.tominstruction.types.Instruction  tomMatch65NameNumber_freshVar_3=tom_get_slot_LetRef_AstInstruction(tomMatch65NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch65NameNumber_freshVar_0=tomMatch65NameNumber_freshVar_1;{ boolean tomMatch65NameNumber_freshVar_5= false ;{  tom.engine.adt.tomname.types.TomName  tomMatch65NameNumber_freshVar_4= null ;if (tom_is_fun_sym_Variable(tomMatch65NameNumber_freshVar_0)) {{tomMatch65NameNumber_freshVar_5= true ;tomMatch65NameNumber_freshVar_4=tom_get_slot_Variable_AstName(tomMatch65NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_VariableStar(tomMatch65NameNumber_freshVar_0)) {{tomMatch65NameNumber_freshVar_5= true ;tomMatch65NameNumber_freshVar_4=tom_get_slot_VariableStar_AstName(tomMatch65NameNumber_freshVar_0);}}}if ((tomMatch65NameNumber_freshVar_5 ==  true )) {if ( true ) {


        ArrayList<Boolean> list = new ArrayList<Boolean>();
        Visitable root = getEnvironment().getRoot();
        if (root != getEnvironment().getSubject()) {
          try {
            getEnvironment().getPosition().getOmegaPath(tom_make_CheckVarExistence(tomMatch65NameNumber_freshVar_4,list)).visit(root); 
          } catch (tom.library.sl.VisitFailure e) {
            throw new TomRuntimeException("Unexpected strategy failure!");
          }
          if (list.size() > 0){
            return tom_make_LetAssign(tomMatch65NameNumber_freshVar_0,tomMatch65NameNumber_freshVar_2,tomMatch65NameNumber_freshVar_3);
          }		
        }
      }}}}}}}}}}}return super.visit_Instruction(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ChangeVarDeclarations( java.util.Collection  t0) { return new ChangeVarDeclarations(t0); }

// end strategy

  // TODO - change this with a more appropriate method
  private static class CheckVarExistence extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  tom.engine.adt.tomname.types.TomName  varName; private  java.util.Collection  bag; public CheckVarExistence( tom.engine.adt.tomname.types.TomName  varName,  java.util.Collection  bag) { super(tom_make_Identity());this.varName=varName;this.bag=bag;}public  tom.engine.adt.tomname.types.TomName  getvarName() { return varName;}public  java.util.Collection  getbag() { return bag;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch66NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_LetRef(tomMatch66NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch66NameNumber_freshVar_1=tom_get_slot_LetRef_Variable(tomMatch66NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch66NameNumber_freshVar_0=tomMatch66NameNumber_freshVar_1;{ boolean tomMatch66NameNumber_freshVar_3= false ;{  tom.engine.adt.tomname.types.TomName  tomMatch66NameNumber_freshVar_2= null ;if (tom_is_fun_sym_Variable(tomMatch66NameNumber_freshVar_0)) {{tomMatch66NameNumber_freshVar_3= true ;tomMatch66NameNumber_freshVar_2=tom_get_slot_Variable_AstName(tomMatch66NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_VariableStar(tomMatch66NameNumber_freshVar_0)) {{tomMatch66NameNumber_freshVar_3= true ;tomMatch66NameNumber_freshVar_2=tom_get_slot_VariableStar_AstName(tomMatch66NameNumber_freshVar_0);}}}if ((tomMatch66NameNumber_freshVar_3 ==  true )) {if ( true ) {


        if (varName == (tomMatch66NameNumber_freshVar_2) ){
          bag.add(new Boolean(true));
        }
      }}}}}}}}}return super.visit_Instruction(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_CheckVarExistence( tom.engine.adt.tomname.types.TomName  t0,  java.util.Collection  t1) { return new CheckVarExistence(t0,t1); }

// end strategy


  /**
   * Converts 'Subterm' to 'GetSlot'
   */
  private static class ReplaceSubterms extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public ReplaceSubterms() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_TomTerm(tom__arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch67NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch67NameNumber_freshVar_0=tomMatch67NameNumberfreshSubject_1;if (tom_is_fun_sym_Subterm(tomMatch67NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomName  tomMatch67NameNumber_freshVar_2=tom_get_slot_Subterm_AstName(tomMatch67NameNumber_freshVar_0);{  tom.engine.adt.tomname.types.TomName  tomMatch67NameNumber_freshVar_3=tom_get_slot_Subterm_SlotName(tomMatch67NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch67NameNumber_freshVar_4=tom_get_slot_Subterm_GroundTerm(tomMatch67NameNumber_freshVar_0);{  tom.engine.adt.tomname.types.TomName  tomMatch67NameNumber_freshVar_1=tomMatch67NameNumber_freshVar_2;{  tom.engine.adt.tomname.types.TomName  tom_slotName=tomMatch67NameNumber_freshVar_3;if (tom_is_fun_sym_Name(tomMatch67NameNumber_freshVar_1)) {{  String  tomMatch67NameNumber_freshVar_5=tom_get_slot_Name_String(tomMatch67NameNumber_freshVar_1);if ( true ) {


        TomSymbol tomSymbol = ConstraintCompiler.getSymbolTable().getSymbolFromName(tomMatch67NameNumber_freshVar_5);
        TomType subtermType = TomBase.getSlotType(tomSymbol, tom_slotName);	        	
        return tom_make_ExpressionToTomTerm(tom_make_GetSlot(subtermType,tomMatch67NameNumber_freshVar_1,tom_slotName.getString(),tomMatch67NameNumber_freshVar_4));
      }}}}}}}}}}}}return super.visit_TomTerm(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ReplaceSubterms() { return new ReplaceSubterms(); }


  
  /*
   * Takes the OrConstraintDisjunction and generates the tests
   * 
   * boolean flag = false;
   * var1 = null;
   * var2 = null;
   * ....
   * if (is_fsym(f1)){
   *    flag = true;
   *    var1 = subterm1_f1();
   *    var2 = subterm2_f1();
   *    .....    
   * }else if (is_fsym(f2)) {
   *    flag = true;
   *    var1 = subterm1_f2();
   *    var2 = subterm2_f2();
   *    ..... 
   * } ....
   * if (flag == true) ...
   *  
   */
  private static Instruction buildExpressionDisjunction(Expression orDisjunction,Instruction action){     
    TomTerm flag = ConstraintCompiler.getFreshVariable(ConstraintCompiler.getBooleanType());
    Instruction assignFlagTrue = tom_make_LetAssign(flag,tom_make_TrueTL(),tom_make_Nop());
    ArrayList<TomTerm> freshVarList = new ArrayList<TomTerm>();
    // collect variables
    try {
      tom_make_TopDown(tom_make_CollectVar(freshVarList)).visit(orDisjunction);
    } catch (tom.library.sl.VisitFailure e) {
      throw new TomRuntimeException("Unexpected strategy failure!");
    }
    Instruction instruction = buildDisjunctionIfElse(orDisjunction,assignFlagTrue);
    // add the final test
    instruction = tom_make_AbstractBlock(tom_cons_list_concInstruction(instruction,tom_cons_list_concInstruction(tom_make_If(tom_make_EqualTerm(ConstraintCompiler.getBooleanType(),flag,tom_make_ExpressionToTomTerm(tom_make_TrueTL())),action,tom_make_Nop()),tom_empty_list_concInstruction())))
;    
    // add fresh variables' declarations
    for(TomTerm var:freshVarList){
      instruction = tom_make_LetRef(var,tom_make_Bottom(var.getAstType()),instruction);
    }
    // stick the flag declaration also
    return tom_make_LetRef(flag,tom_make_FalseTL(),instruction);
  }

  private static Instruction buildDisjunctionIfElse(Expression orDisjunction,Instruction assignFlagTrue){    
    if (tom_is_sort_Expression(orDisjunction)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )orDisjunction);if (tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumber_freshVar_0=tomMatch68NameNumberfreshSubject_1;if ( ( tom_is_empty_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_0) || tom_equal_term_Expression(tomMatch68NameNumber_freshVar_0, tom_empty_list_OrExpressionDisjunction()) ) ) {if ( true ) {

        return tom_make_Nop();
      }}}}if (tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumber_freshVar_1=tomMatch68NameNumberfreshSubject_1;if (!( ( tom_is_empty_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_1) || tom_equal_term_Expression(tomMatch68NameNumber_freshVar_1, tom_empty_list_OrExpressionDisjunction()) ) )) {if (tom_is_fun_sym_And(((tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_1))?(tom_get_head_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_1)):(tomMatch68NameNumber_freshVar_1)))) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumber_freshVar_14=tom_get_slot_And_Arg1(((tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_1))?(tom_get_head_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_1)):(tomMatch68NameNumber_freshVar_1)));{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumber_freshVar_15=tom_get_slot_And_Arg2(((tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_1))?(tom_get_head_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_1)):(tomMatch68NameNumber_freshVar_1)));{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumber_freshVar_2=((tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_1))?(tom_get_tail_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_1)):(tom_empty_list_OrExpressionDisjunction()));if ( true ) {
        
        Instruction subtest = buildDisjunctionIfElse(tom_append_list_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_2,tom_empty_list_OrExpressionDisjunction()),assignFlagTrue);
        return tom_make_If(tomMatch68NameNumber_freshVar_14,tom_make_UnamedBlock(tom_cons_list_concInstruction(assignFlagTrue,tom_cons_list_concInstruction(generateAutomata(tomMatch68NameNumber_freshVar_15,tom_make_Nop()),tom_empty_list_concInstruction()))),subtest);
      }}}}}}}}if (tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumber_freshVar_34=tomMatch68NameNumberfreshSubject_1;if (!( ( tom_is_empty_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_34) || tom_equal_term_Expression(tomMatch68NameNumber_freshVar_34, tom_empty_list_OrExpressionDisjunction()) ) )) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch68NameNumber_freshVar_35=((tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_34))?(tom_get_tail_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_34)):(tom_empty_list_OrExpressionDisjunction()));if ( true ) {
        
        Instruction subtest = buildDisjunctionIfElse(tom_append_list_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_35,tom_empty_list_OrExpressionDisjunction()),assignFlagTrue);
        return tom_make_If(((tom_is_fun_sym_OrExpressionDisjunction(tomMatch68NameNumber_freshVar_34))?(tom_get_head_OrExpressionDisjunction_Expression(tomMatch68NameNumber_freshVar_34)):(tomMatch68NameNumber_freshVar_34)),assignFlagTrue,subtest);
      }}}}}}}

    throw new TomRuntimeException("ConstraintGenerator.buildDisjunctionIfElse - strange expression:" + orDisjunction);
  }

  /**
   * generates:
   * 
   * bool matchSuccessful = false;
   * if (expression){
   *    matchSuccessful = true;
   * }
   * if (matchSuccessful == false){
   *    action;
   * }
   */
  private static Instruction buildAntiMatchInstruction(Expression expression, Instruction action){
    TomTerm flag = ConstraintCompiler.getFreshVariable(ConstraintCompiler.getBooleanType());    
    Instruction assignFlagTrue = tom_make_LetAssign(flag,tom_make_TrueTL(),tom_make_Nop());
    Instruction automata = generateAutomata(expression, assignFlagTrue);    
    // add the final test
    Instruction result = tom_make_AbstractBlock(tom_cons_list_concInstruction(automata,tom_cons_list_concInstruction(tom_make_If(tom_make_EqualTerm(ConstraintCompiler.getBooleanType(),flag,tom_make_ExpressionToTomTerm(tom_make_FalseTL())),action,tom_make_Nop()),tom_empty_list_concInstruction())))
;
    return tom_make_LetRef(flag,tom_make_FalseTL(),result);
  }

  /**
   * Collect the variables in a term   
   */
  private static class CollectVar extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  varList; public CollectVar( java.util.Collection  varList) { super(tom_make_Identity());this.varList=varList;}public  java.util.Collection  getvarList() { return varList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch69NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch69NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch69NameNumber_freshVar_1=tom_get_slot_MatchConstraint_pattern(tomMatch69NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch69NameNumber_freshVar_2=tom_get_slot_MatchConstraint_subject(tomMatch69NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch69NameNumber_freshVar_0=tomMatch69NameNumber_freshVar_1;if (tom_is_fun_sym_Variable(tomMatch69NameNumber_freshVar_0)) {{  tom.engine.adt.tomterm.types.TomTerm  tom_v=tomMatch69NameNumber_freshVar_0;if ( true ) {

        
        if (!varList.contains(tom_v)) { varList.add(tom_v); }        
      }}}}}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_CollectVar( java.util.Collection  t0) { return new CollectVar(t0); }

// end strategy 

  /**
   * check that the list is empty
   * when domain=codomain, the test is extended to:
   *   is_empty(l) || l==make_empty()
   *   this is needed because get_tail() may return the neutral element 
   */ 
  public static Expression genIsEmptyList(TomName opName, TomTerm var) {
    TomSymbol tomSymbol = ConstraintCompiler.getSymbolTable().getSymbolFromName(((Name)opName).getString());
    TomType domain = TomBase.getSymbolDomain(tomSymbol).getHeadconcTomType();
    TomType codomain = TomBase.getSymbolCodomain(tomSymbol);
    if(domain==codomain) {
      return tom_make_Or(tom_make_IsEmptyList(opName,var),tom_make_EqualTerm(codomain,var,tom_make_BuildEmptyList(opName)));
    }
    return tom_make_IsEmptyList(opName,var);
  }
}
