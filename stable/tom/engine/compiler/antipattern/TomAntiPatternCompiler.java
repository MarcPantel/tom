/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * Copyright (c) 2005-2006, INRIA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: 
 *  - Redistributions of source code must retain the above copyright
 *  notice, this list of conditions and the following disclaimer.  
 *  - Redistributions in binary form must reproduce the above copyright
 *  notice, this list of conditions and the following disclaimer in the
 *  documentation and/or other materials provided with the distribution.
 *  - Neither the name of the INRIA nor the names of its
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package tom.engine.compiler.antipattern;

import aterm.*;
import aterm.pure.*;

import java.io.*;
import java.util.*;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.library.strategy.mutraveler.MuStrategy;
import jjtraveler.VisitFailure;

public class TomAntiPatternCompiler{
	
//	------------------------------------------------------------
	/* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_AConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.SymbolOf.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_SymbolOf_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getGroundTerm()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Subterm( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomterm.types.tomterm.Subterm.make(t0, t1, t2); }private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_EqualConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.EqualConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_EqualConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.EqualConstraint.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getpattern()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualConstraint_genTerm( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getgenTerm()  ;}private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AndConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AndConstraint( tom.engine.adt.tomconstraint.types.AConstraintList  t0) { return  tom.engine.adt.tomconstraint.types.constraint.AndConstraint.make(t0); }private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_slot_AndConstraint_cla( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getcla()  ;}private static boolean tom_is_fun_sym_Neg( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.Neg  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_Neg_c( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getc()  ;}private static boolean tom_is_fun_sym_FalseConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.FalseConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_FalseConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.FalseConstraint.make(); }private static boolean tom_is_fun_sym_TrueConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.TrueConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_TrueConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.TrueConstraint.make(); }private static boolean tom_is_fun_sym_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd || t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_empty_list_concAnd() { return  tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd.make() ; }private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_cons_list_concAnd( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.AConstraintList  l) { return  tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getHeadconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_tail_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getTailconcAnd()  ;}private static boolean tom_is_empty_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.isEmptyconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_append_list_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  l1,  tom.engine.adt.tomconstraint.types.AConstraintList  l2) {    if(tom_is_empty_concAnd_AConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concAnd_AConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concAnd_AConstraintList(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),tom_append_list_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_slice_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  begin,  tom.engine.adt.tomconstraint.types.AConstraintList  end) {    if(tom_terms_equal_AConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_empty_list_concAnd();    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(begin),( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_slice_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(begin),end));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList  l1,  tom.engine.adt.tomslot.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomslot.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }   /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Sequence( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_SequenceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.SequenceId(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("_x")))) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_BottomUp( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("_x")),v)) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_InnermostId( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_make_SequenceId(v,tom_make_MuVar("_x")))) ; }  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Collection(Object l1, Object l2) {  return  l1.equals(l2)  ;} 

	
//	------------------------------------------------------------
	
	
	public static Constraint compile(Constraint c, Collection quantifiedVarList,
			Collection freeVarList) {
		
		Constraint classicalMatch = null; 
		Constraint replacedVariables = null;
		Constraint quantifierFree = null;
		Constraint optimizedCode = null;
		Constraint result = null;		
		
		classicalMatch = (Constraint)tom_make_InnermostId(tom_make_ClassicalPatternMatching()).apply(c);
//		System.out.println("After classical match: " +  tools.formatConstraint(classicalMatch));
		replacedVariables = (Constraint)tom_make_TopDown(tom_make_ReplaceVariables()).apply(classicalMatch);
//		System.out.println("After variable replacement: " +  tools.formatConstraint(replacedVariables));
		quantifierFree = (Constraint)tom_make_TopDown(tom_make_EliminateQuantifiedVars(quantifiedVarList,freeVarList)).apply(replacedVariables);
//		System.out.println("After quantified vars' elimination: " +  tools.formatConstraint(quantifierFree));
		optimizedCode = (Constraint)tom_make_TopDown(tom_make_ReplaceEquation()).apply(quantifierFree);			
//		System.out.println("After optimization: " +  tools.formatConstraint(optimizedCode));
		result = (Constraint)tom_make_InnermostId(tom_make_Cleaning()).apply(optimizedCode);			
		
//		System.out.println("Final result: " + result);
		
		return result;
	}	
	
	
	 private static class ClassicalPatternMatching  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { public ClassicalPatternMatching( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_e=tom_match1_1; { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1); if ( ( tom_is_fun_sym_RecordAppl(tom_match1_1_pattern) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_match1_1_pattern_Option=tom_get_slot_RecordAppl_Option(tom_match1_1_pattern); { tom.engine.adt.tomname.types.TomNameList  tom_match1_1_pattern_NameList=tom_get_slot_RecordAppl_NameList(tom_match1_1_pattern); { tom.engine.adt.tomslot.types.SlotList  tom_match1_1_pattern_Slots=tom_get_slot_RecordAppl_Slots(tom_match1_1_pattern); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_match1_1_pattern_Constraints=tom_get_slot_RecordAppl_Constraints(tom_match1_1_pattern); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_match1_1_pattern_Option; { tom.engine.adt.tomname.types.TomNameList  tom_name=tom_match1_1_pattern_NameList; { tom.engine.adt.tomslot.types.SlotList  tom_a1=tom_match1_1_pattern_Slots; { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tom_match1_1_pattern_Constraints; { tom.engine.adt.tomterm.types.TomTerm  tom_g=tom_match1_1_genTerm; if ( true ) { if(tom_g instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match2_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_g); if ( ( tom_is_fun_sym_SymbolOf(tom_match2_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match2_1_GroundTerm=tom_get_slot_SymbolOf_GroundTerm(tom_match2_1); if ( true ) {







return tom_e; } } } } }
				
				
				AConstraintList l = tom_empty_list_concAnd();
				SlotList args1 = tom_a1;
				
				int counter = 0;
				
				while(!args1.isEmptyconcSlot()) {
					Slot headSlot = args1.getHeadconcSlot();
					l = tom_cons_list_concAnd(tom_make_EqualConstraint(headSlot.getAppl(),tom_make_Subterm(tom_name.getHeadconcTomName()
							,headSlot.getSlotName(),tom_g)),tom_append_list_concAnd(l,tom_empty_list_concAnd()))
;					
					args1 = args1.getTailconcSlot();										
				}
				
				l = l.reverse();
				
				l = tom_cons_list_concAnd(tom_make_EqualConstraint(tom_make_RecordAppl(tom_options,tom_name,tom_empty_list_concSlot(),tom_constraints),tom_make_SymbolOf(tom_g)),tom_append_list_concAnd(l,tom_empty_list_concAnd()));
				
				return tom_make_AndConstraint(l);
			 } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_eq=tom_match1_1_cla_2; { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_2_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_2_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_2_pattern); { tom.engine.adt.tomname.types.TomName  tom_z=tom_match1_1_cla_2_pattern_AstName; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_get_slice_concAnd(tom_match1_1_cla_begin3,tom_match1_1_cla_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_4); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_4_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_4_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_4_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_z_1=tom_match1_1_cla_4_pattern_AstName; if (tom_terms_equal_TomName(tom_z, tom_renamedvar_z_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_u=tom_match1_1_cla_4_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; if ( true ) {


				
				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_cons_list_concAnd(tom_eq,tom_append_list_concAnd(tom_Y,tom_cons_list_concAnd(tom_make_EqualConstraint(tom_t,tom_u),tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd()))))));
			 } } } } } } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match1_1_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match1_1_genTerm; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { if ( true ) {


				
				return tom_make_TrueConstraint();
			 } } } } } } } if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1); if ( ( tom_is_fun_sym_RecordAppl(tom_match1_1_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match1_1_pattern_NameList=tom_get_slot_RecordAppl_NameList(tom_match1_1_pattern); { tom.engine.adt.tomname.types.TomNameList  tom_name1=tom_match1_1_pattern_NameList; if ( ( tom_is_fun_sym_RecordAppl(tom_match1_1_genTerm) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match1_1_genTerm_NameList=tom_get_slot_RecordAppl_NameList(tom_match1_1_genTerm); { tom.engine.adt.tomname.types.TomNameList  tom_name2=tom_match1_1_genTerm_NameList; if ( true ) {



				if(tom_name1!= tom_name2) {					
					return tom_make_FalseConstraint();
				}
			 } } } } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_FalseConstraint(tom_match1_1_cla_2) ||  false  ) ) { if ( true ) {



				return tom_make_FalseConstraint();
			 } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_TrueConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match1_1_cla_list1; if ( true ) {



				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd())));
			 } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; if (tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_list1)) { if ( true ) {



				return tom_make_TrueConstraint();
			 } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; if (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_t=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if (tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_list1)) { if ( true ) {

				return tom_t;
			 } } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_2_cla=tom_get_slot_AndConstraint_cla(tom_match1_1_cla_2); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla_2_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_2_cla_list1=tom_match1_1_cla_2_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match1_1_cla_2_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; if ( true ) {

				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd()))));
			 } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ClassicalPatternMatching() { return new ClassicalPatternMatching(); } private static class ReplaceVariables  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { public ReplaceVariables( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match3_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); if ( ( tom_is_fun_sym_AndConstraint(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla=tom_get_slot_AndConstraint_cla(tom_match3_1); if ( ( tom_is_fun_sym_concAnd(tom_match3_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla_list1=tom_match3_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla_begin1=tom_match3_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla_end1=tom_match3_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match3_1_cla_end1))) {tom_match3_1_cla_list1=tom_match3_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match3_1_cla_begin1,tom_match3_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match3_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match3_1_cla_list1);tom_match3_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match3_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match3_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_eq=tom_match3_1_cla_2; { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match3_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match3_1_cla_2); if ( ( tom_is_fun_sym_Variable(tom_match3_1_cla_2_pattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match3_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_s=tom_match3_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match3_1_cla_list1; if ( true ) {








				
				Constraint consToSearchIn = tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd())));
				
				Constraint res = (Constraint)tom_make_BottomUp(tom_make_Replace(tom_var,tom_s,null)).apply(consToSearchIn);
				// if we replaced something
				if (res != consToSearchIn){
					return tom_make_AndConstraint(tom_cons_list_concAnd(tom_eq,tom_cons_list_concAnd(res,tom_empty_list_concAnd())));
				}
			 } } } } } } } } } } }tom_match3_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match3_1_cla_end1); } }tom_match3_1_cla_list1=tom_match3_1_cla_begin1; } } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ReplaceVariables() { return new ReplaceVariables(); }


	
	// replaces all equalities that contain 
	// quantified variables with true 
	 private static class EliminateQuantifiedVars  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { private  java.util.Collection  quantifiedVarList;  private  java.util.Collection  freeVarList;  public EliminateQuantifiedVars(  java.util.Collection  quantifiedVarList ,   java.util.Collection  freeVarList ) { super(tom_make_Identity() ); this.quantifiedVarList=quantifiedVarList; this.freeVarList=freeVarList; } public  java.util.Collection  getquantifiedVarList() { return quantifiedVarList;} public  java.util.Collection  getfreeVarList() { return freeVarList;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match4_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); if ( ( tom_is_fun_sym_EqualConstraint(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match4_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match4_1); if ( ( tom_is_fun_sym_Variable(tom_match4_1_pattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match4_1_pattern; if ( true ) {



				
				if (quantifiedVarList.contains(tom_var) 
						&& !freeVarList.contains(tom_var)){
					return tom_make_TrueConstraint();
				}            
			 } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_EliminateQuantifiedVars( java.util.Collection  t0,  java.util.Collection  t1) { return new EliminateQuantifiedVars(t0,t1); } private static class Cleaning  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { public Cleaning( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match5_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); if ( ( tom_is_fun_sym_EqualConstraint(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match5_1_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match5_1_genTerm; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { if ( true ) {









				return tom_make_TrueConstraint();
			 } } } } } } } if ( ( tom_is_fun_sym_EqualConstraint(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match5_1); if ( ( tom_is_fun_sym_RecordAppl(tom_match5_1_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_pattern_NameList=tom_get_slot_RecordAppl_NameList(tom_match5_1_pattern); { tom.engine.adt.tomname.types.TomNameList  tom_name1=tom_match5_1_pattern_NameList; if ( ( tom_is_fun_sym_RecordAppl(tom_match5_1_genTerm) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_genTerm_NameList=tom_get_slot_RecordAppl_NameList(tom_match5_1_genTerm); { tom.engine.adt.tomname.types.TomNameList  tom_name2=tom_match5_1_genTerm_NameList; if ( true ) {



				if(tom_name1!= tom_name2) {
					return tom_make_FalseConstraint();
				}
			 } } } } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla=tom_get_slot_AndConstraint_cla(tom_match5_1); if ( ( tom_is_fun_sym_concAnd(tom_match5_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla_list1=tom_match5_1_cla; if (tom_is_empty_concAnd_AConstraintList(tom_match5_1_cla_list1)) { if ( true ) {



				return tom_make_TrueConstraint();
			 } } } } } } if ( ( tom_is_fun_sym_Neg(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match5_1_c=tom_get_slot_Neg_c(tom_match5_1); if ( ( tom_is_fun_sym_TrueConstraint(tom_match5_1_c) ||  false  ) ) { if ( true ) {



				return tom_make_FalseConstraint();
			 } } } } if ( ( tom_is_fun_sym_Neg(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match5_1_c=tom_get_slot_Neg_c(tom_match5_1); if ( ( tom_is_fun_sym_FalseConstraint(tom_match5_1_c) ||  false  ) ) { if ( true ) {



				return tom_make_TrueConstraint();
			 } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla=tom_get_slot_AndConstraint_cla(tom_match5_1); if ( ( tom_is_fun_sym_concAnd(tom_match5_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla_list1=tom_match5_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla_begin1=tom_match5_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla_end1=tom_match5_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match5_1_cla_end1))) {tom_match5_1_cla_list1=tom_match5_1_cla_end1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match5_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match5_1_cla_list1);tom_match5_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match5_1_cla_list1); if ( ( tom_is_fun_sym_FalseConstraint(tom_match5_1_cla_2) ||  false  ) ) { if ( true ) {



				return tom_make_FalseConstraint();
			 } } }tom_match5_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match5_1_cla_end1); } }tom_match5_1_cla_list1=tom_match5_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla=tom_get_slot_AndConstraint_cla(tom_match5_1); if ( ( tom_is_fun_sym_concAnd(tom_match5_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla_list1=tom_match5_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla_begin1=tom_match5_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match5_1_cla_end1=tom_match5_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match5_1_cla_end1))) {tom_match5_1_cla_list1=tom_match5_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match5_1_cla_begin1,tom_match5_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match5_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match5_1_cla_list1);tom_match5_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match5_1_cla_list1); if ( ( tom_is_fun_sym_TrueConstraint(tom_match5_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match5_1_cla_list1; if ( true ) {



				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd())));
			 } } } } }tom_match5_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match5_1_cla_end1); } }tom_match5_1_cla_list1=tom_match5_1_cla_begin1; } } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Cleaning() { return new Cleaning(); } private static class Replace  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { private  tom.engine.adt.tomterm.types.TomTerm  variable;  private  tom.engine.adt.tomterm.types.TomTerm  value;  private  tom.engine.adt.tomconstraint.types.Constraint  constraint;  public Replace(  tom.engine.adt.tomterm.types.TomTerm  variable ,   tom.engine.adt.tomterm.types.TomTerm  value ,   tom.engine.adt.tomconstraint.types.Constraint  constraint ) { super(tom_make_Identity() ); this.variable=variable; this.value=value; this.constraint=constraint; } public  tom.engine.adt.tomterm.types.TomTerm  getvariable() { return variable;} public  tom.engine.adt.tomterm.types.TomTerm  getvalue() { return value;} public  tom.engine.adt.tomconstraint.types.Constraint  getconstraint() { return constraint;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match6_1; if ( true ) {








				if (tom_t== variable){
					return value;
				}
			 } } } } return super.visit_TomTerm(tom__arg) ;  } public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match7_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); { tom.engine.adt.tomconstraint.types.Constraint  tom_t=tom_match7_1; if ( true ) {




				if (tom_t== constraint){
					return tom_make_TrueConstraint();
				}
			 } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Replace( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomconstraint.types.Constraint  t2) { return new Replace(t0,t1,t2); } private static class ReplaceEquation  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { public ReplaceEquation( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match8_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); if ( ( tom_is_fun_sym_AndConstraint(tom_match8_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match8_1_cla=tom_get_slot_AndConstraint_cla(tom_match8_1); if ( ( tom_is_fun_sym_concAnd(tom_match8_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match8_1_cla_list1=tom_match8_1_cla; if (!(tom_is_empty_concAnd_AConstraintList(tom_match8_1_cla_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match8_1_cla_1=tom_get_head_concAnd_AConstraintList(tom_match8_1_cla_list1);tom_match8_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match8_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match8_1_cla_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_eq=tom_match8_1_cla_1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match8_1_cla_list1; if ( true ) {







				
				Constraint consToSearchIn = tom_make_AndConstraint(tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd()));
				
				Constraint res = (Constraint)tom_make_TopDown(tom_make_Replace(null,null,tom_eq)).apply(consToSearchIn);
				// if we replaced something
				if (res != consToSearchIn){
					return tom_make_AndConstraint(tom_cons_list_concAnd(tom_eq,tom_cons_list_concAnd(res,tom_empty_list_concAnd())));
				}
			 } } } } } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ReplaceEquation() { return new ReplaceEquation(); }


	
} // end class
