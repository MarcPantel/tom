/* Generated by TOM (version 2.4rc2): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz  e-mail: Radu.Kopetz@loria.fr
 *
 **/

package tom.engine.compiler.antipattern;

import java.io.*;
import java.util.*;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.exception.*;

import tom.library.strategy.mutraveler.MuTraveler;

import jjtraveler.reflective.VisitableVisitor;
import tom.library.strategy.mutraveler.MuStrategy;
import jjtraveler.VisitFailure;

/**
 * Tom constraint compiler
 */
public class TomConstraintCompiler{
	
//	------------------------------------------------------------
	/* Generated by TOM (version 2.4rc2): Do not edit this file *//* Generated by TOM (version 2.4rc2): Do not edit this file *//* Generated by TOM (version 2.4rc2): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4rc2): Do not edit this file */ private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_AConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.SymbolOf.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_SymbolOf_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getGroundTerm()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Subterm( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomterm.types.tomterm.Subterm.make(t0, t1, t2); }private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_ForAll( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ForAll  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_ForAll( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomconstraint.types.Constraint  t1) { return  tom.engine.adt.tomconstraint.types.constraint.ForAll.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_ForAll_var( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getvar()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_ForAll_cons( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getcons()  ;}private static boolean tom_is_fun_sym_Exists( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.Exists  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_Exists( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomconstraint.types.Constraint  t1) { return  tom.engine.adt.tomconstraint.types.constraint.Exists.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Exists_var( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getvar()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_Exists_cons( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getcons()  ;}private static boolean tom_is_fun_sym_NEqualConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.NEqualConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_NEqualConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.NEqualConstraint.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_NEqualConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getpattern()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_NEqualConstraint_genTerm( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getgenTerm()  ;}private static boolean tom_is_fun_sym_EqualConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.EqualConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_EqualConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.EqualConstraint.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getpattern()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualConstraint_genTerm( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getgenTerm()  ;}private static boolean tom_is_fun_sym_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.OrConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_OrConstraint( tom.engine.adt.tomconstraint.types.OConstraintList  t0) { return  tom.engine.adt.tomconstraint.types.constraint.OrConstraint.make(t0); }private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_get_slot_OrConstraint_clo( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getclo()  ;}private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AndConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AndConstraint( tom.engine.adt.tomconstraint.types.AConstraintList  t0) { return  tom.engine.adt.tomconstraint.types.constraint.AndConstraint.make(t0); }private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_slot_AndConstraint_cla( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getcla()  ;}private static boolean tom_is_fun_sym_FalseConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.FalseConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_FalseConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.FalseConstraint.make(); }private static boolean tom_is_fun_sym_TrueConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.TrueConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_TrueConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.TrueConstraint.make(); }private static boolean tom_is_fun_sym_concOr( tom.engine.adt.tomconstraint.types.OConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.oconstraintlist.ConsconcOr || t instanceof tom.engine.adt.tomconstraint.types.oconstraintlist.EmptyconcOr  ;}private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_empty_list_concOr() { return  tom.engine.adt.tomconstraint.types.oconstraintlist.EmptyconcOr.make() ; }private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_cons_list_concOr( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.OConstraintList  l) { return  tom.engine.adt.tomconstraint.types.oconstraintlist.ConsconcOr.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concOr_OConstraintList( tom.engine.adt.tomconstraint.types.OConstraintList  l) {  return  l.getHeadconcOr()  ;}private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_get_tail_concOr_OConstraintList( tom.engine.adt.tomconstraint.types.OConstraintList  l) {  return  l.getTailconcOr()  ;}private static boolean tom_is_empty_concOr_OConstraintList( tom.engine.adt.tomconstraint.types.OConstraintList  l) {  return  l.isEmptyconcOr()  ;}private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_append_list_concOr( tom.engine.adt.tomconstraint.types.OConstraintList  l1,  tom.engine.adt.tomconstraint.types.OConstraintList  l2) {    if(tom_is_empty_concOr_OConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concOr_OConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concOr_OConstraintList(( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_tail_concOr_OConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_cons_list_concOr(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concOr_OConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_cons_list_concOr(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concOr_OConstraintList(l1),tom_append_list_concOr(( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_tail_concOr_OConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_get_slice_concOr( tom.engine.adt.tomconstraint.types.OConstraintList  begin,  tom.engine.adt.tomconstraint.types.OConstraintList  end) {    if(tom_terms_equal_OConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_empty_list_concOr();    } else {      return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_cons_list_concOr(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concOr_OConstraintList(begin),( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_slice_concOr(( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_tail_concOr_OConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd || t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_empty_list_concAnd() { return  tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd.make() ; }private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_cons_list_concAnd( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.AConstraintList  l) { return  tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getHeadconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_tail_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getTailconcAnd()  ;}private static boolean tom_is_empty_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.isEmptyconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_append_list_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  l1,  tom.engine.adt.tomconstraint.types.AConstraintList  l2) {    if(tom_is_empty_concAnd_AConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concAnd_AConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concAnd_AConstraintList(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),tom_append_list_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_slice_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  begin,  tom.engine.adt.tomconstraint.types.AConstraintList  end) {    if(tom_terms_equal_AConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_empty_list_concAnd();    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(begin),( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_slice_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(begin),end));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList  l1,  tom.engine.adt.tomslot.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomslot.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }   /* Generated by TOM (version 2.4rc2): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.4rc2): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Sequence( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_SequenceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.SequenceId(first,then) ; } /* Generated by TOM (version 2.4rc2): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_BottomUp( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("_x")),v)) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_InnermostId( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_make_SequenceId(v,tom_make_MuVar("_x")))) ; }   
	
//	------------------------------------------------------------
	
	/**
	 * Receives a constraint and tries to compile it using the disunification
	 * rules
	 * 
	 * @param consToCompile
	 *            The constraint to compile
	 * @return The compiled constraint
	 */
	public static Constraint compile(Constraint consToCompile) {
		
		// apply the disunification rules
		Constraint compiledConstraint = null;		
		
		try {		
			compiledConstraint = (Constraint) MuTraveler.init(tom_make_InnermostId(tom_make_SimplifyWithDisunification())).visit(consToCompile);
		} catch (VisitFailure e) {
			throw new TomRuntimeException("Compile failed on: " + consToCompile + 
					"\nException:" + e.getMessage());
		}
		
//		System.out.println("Compiled constraint: " + TomAntiPatternUtils.formatConstraint(compiledConstraint));
		
		return compiledConstraint;
	}
	
	/**
	 *  Strategy that contains the disunification rules
	 */
	 private static class SimplifyWithDisunification  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { public SimplifyWithDisunification( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); if ( ( tom_is_fun_sym_Exists(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_Exists_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_Exists_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_var_AstName=tom_get_slot_Variable_AstName(tom_match1_1_var); { tom.engine.adt.tomname.types.TomName  tom_a=tom_match1_1_var_AstName; {boolean tom_bool_match1_1_cons= false ; { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cons_pattern= null ; { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cons_genTerm= null ; if (tom_is_fun_sym_EqualConstraint(tom_match1_1_cons)) {tom_bool_match1_1_cons= true ;tom_match1_1_cons_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cons);tom_match1_1_cons_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cons); } else { if (tom_is_fun_sym_NEqualConstraint(tom_match1_1_cons)) {tom_bool_match1_1_cons= true ;tom_match1_1_cons_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_cons);tom_match1_1_cons_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_cons); } } if (tom_bool_match1_1_cons) { if ( ( tom_is_fun_sym_Variable(tom_match1_1_cons_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cons_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cons_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_a_1=tom_match1_1_cons_pattern_AstName; if (tom_terms_equal_TomName(tom_a, tom_renamedvar_a_1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {




				
				return tom_make_TrueConstraint();
			 } } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_Exists(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_Exists_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_Exists_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match1_1_var; { tom.engine.adt.tomconstraint.types.Constraint  tom_constr=tom_match1_1_cons; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				// eliminates the quantificator when the
				// constraint does not contains the variable
				
				if (!TomAntiPatternUtils.containsVariable(tom_constr,tom_v)){				
					return tom_constr;
				}
				
			 } } } } } } } } } if ( ( tom_is_fun_sym_ForAll(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_ForAll_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_ForAll_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_var_AstName=tom_get_slot_Variable_AstName(tom_match1_1_var); { tom.engine.adt.tomname.types.TomName  tom_a=tom_match1_1_var_AstName; if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cons) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cons_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cons); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cons_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cons); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cons_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cons_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cons_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_a_1=tom_match1_1_cons_pattern_AstName; if (tom_terms_equal_TomName(tom_a, tom_renamedvar_a_1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				return tom_make_FalseConstraint();
			 } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_ForAll(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_ForAll_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_ForAll_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_var_AstName=tom_get_slot_Variable_AstName(tom_match1_1_var); { tom.engine.adt.tomname.types.TomName  tom_a=tom_match1_1_var_AstName; if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_cons) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cons_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_cons); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cons_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_cons); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cons_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cons_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cons_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_a_1=tom_match1_1_cons_pattern_AstName; if (tom_terms_equal_TomName(tom_a, tom_renamedvar_a_1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				return tom_make_FalseConstraint();
			 } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_ForAll(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_ForAll_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_ForAll_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match1_1_var; { tom.engine.adt.tomconstraint.types.Constraint  tom_constr=tom_match1_1_cons; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				// eliminates the quantificator when the
				// constraint does not contains the variable
				
				if (!TomAntiPatternUtils.containsVariable(tom_constr,tom_v)){
					return tom_constr;
				}				
			 } } } } } } } } } if ( ( tom_is_fun_sym_Exists(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_Exists_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_Exists_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match1_1_var; if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1_cons) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cons_cla=tom_get_slot_AndConstraint_cla(tom_match1_1_cons); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_list=tom_match1_1_cons_cla; {boolean tom_match1_tom_anti_constraints_status= true ; { tom.engine.adt.tomconstraint.types.Constraint  tom_e=tom_match1_1; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {






				
				AConstraintList l = tom_list;
				AConstraintList nonQuantifiedConstraints = tom_empty_list_concAnd();
				AConstraintList quantifiedConstraints = tom_empty_list_concAnd();
				
				while(!l.isEmptyconcAnd()){
					Constraint c = l.getHeadconcAnd();
					
					// if the c doesn't contain the variable, we
					// can put it outside the expresion that is quantified
					if ( !TomAntiPatternUtils.containsVariable(c,tom_v) ) {
						nonQuantifiedConstraints = tom_cons_list_concAnd(c,tom_append_list_concAnd(nonQuantifiedConstraints,tom_empty_list_concAnd()));
					}else{
						quantifiedConstraints = tom_cons_list_concAnd(c,tom_append_list_concAnd(quantifiedConstraints,tom_empty_list_concAnd()));
					}				
					
					// nonquantifiedConstraints = `concAnd(Exists(v,l.getHeadconcAnd()),nonquantifiedConstraints*);
					l = l.getTailconcAnd();
				}
				
				// if couldn't do anything, return the same thing
				if (nonQuantifiedConstraints.isEmptyconcAnd()){
					return tom_e;
				}
				
				nonQuantifiedConstraints = nonQuantifiedConstraints.reverse();
				quantifiedConstraints = quantifiedConstraints.reverse();
				
				// if all were separated
		        if (quantifiedConstraints.isEmptyconcAnd()){
		          return tom_make_AndConstraint(nonQuantifiedConstraints);
		        }
		        // we quantify and mix both lists
		        return tom_make_AndConstraint(tom_cons_list_concAnd(tom_make_Exists(tom_v,tom_make_AndConstraint(quantifiedConstraints)),tom_append_list_concAnd(nonQuantifiedConstraints,tom_empty_list_concAnd())));
			 } } } } } } } } } } } } if ( ( tom_is_fun_sym_Exists(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_Exists_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_Exists_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match1_1_var; if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1_cons) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_cons_clo=tom_get_slot_OrConstraint_clo(tom_match1_1_cons); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_list=tom_match1_1_cons_clo; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				
				OConstraintList l = tom_list;
				OConstraintList result = tom_empty_list_concOr();
				
				while(!l.isEmptyconcOr()){
					result = tom_cons_list_concOr(tom_make_Exists(tom_v,l.getHeadconcOr()),tom_append_list_concOr(result,tom_empty_list_concOr()));
					l = l.getTailconcOr();
				}
				result.reverse();
				return tom_make_OrConstraint(result);
        // return `OrConstraint(map(addExist).visit(list));
        // return `OrConstraint(map(?"x";!Exists(v,!"x")).visit(list));
			 } } } } } } } } } } } if ( ( tom_is_fun_sym_ForAll(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_ForAll_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_ForAll_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match1_1_var; if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1_cons) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cons_cla=tom_get_slot_AndConstraint_cla(tom_match1_1_cons); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_list=tom_match1_1_cons_cla; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				
				AConstraintList l = tom_list;
				AConstraintList result = tom_empty_list_concAnd();
				
				while(!l.isEmptyconcAnd()){
					result = tom_cons_list_concAnd(tom_make_ForAll(tom_v,l.getHeadconcAnd()),tom_append_list_concAnd(result,tom_empty_list_concAnd()));
					l = l.getTailconcAnd();
				}
				result.reverse();
				return tom_make_AndConstraint(result);
			 } } } } } } } } } } } if ( ( tom_is_fun_sym_ForAll(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_var=tom_get_slot_ForAll_var(tom_match1_1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cons=tom_get_slot_ForAll_cons(tom_match1_1); if ( ( tom_is_fun_sym_Variable(tom_match1_1_var) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match1_1_var; if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1_cons) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_cons_clo=tom_get_slot_OrConstraint_clo(tom_match1_1_cons); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_list=tom_match1_1_cons_clo; {boolean tom_match1_tom_anti_constraints_status= true ; { tom.engine.adt.tomconstraint.types.Constraint  tom_f=tom_match1_1; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				
				OConstraintList l = tom_list;
				OConstraintList nonQuantifiedConstraints = tom_empty_list_concOr();
				OConstraintList quantifiedConstraints = tom_empty_list_concOr();
				
				while(!l.isEmptyconcOr()){
					
					Constraint c = l.getHeadconcOr();
					
					// if the c doesn't contain the variable, we
					// can put it outside the expresion that is quantified
					if ( !TomAntiPatternUtils.containsVariable(c,tom_v) ) {					
						nonQuantifiedConstraints = tom_cons_list_concOr(c,tom_append_list_concOr(nonQuantifiedConstraints,tom_empty_list_concOr()));
					}else{
						quantifiedConstraints = tom_cons_list_concOr(c,tom_append_list_concOr(quantifiedConstraints,tom_empty_list_concOr()));
					}			
					
					l = l.getTailconcOr();
				}
				
				// if couldn't do anything, return the same thing
				if (nonQuantifiedConstraints.isEmptyconcOr()){
					return tom_f;
				}
				
				nonQuantifiedConstraints = nonQuantifiedConstraints.reverse();
				quantifiedConstraints = quantifiedConstraints.reverse();
				
				// if all were separated
				if (quantifiedConstraints.isEmptyconcOr()){
					return tom_make_OrConstraint(nonQuantifiedConstraints);	
				}
				
				// we quantify and mix both lists
				return tom_make_OrConstraint(tom_cons_list_concOr(tom_make_ForAll(tom_v,tom_make_OrConstraint(quantifiedConstraints)),tom_append_list_concOr(nonQuantifiedConstraints,tom_empty_list_concOr())));				
			 } } } } } } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match1_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_b=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_cla_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match1_1_cla_4_pattern; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_b_1=tom_match1_1_cla_4_genTerm; if (tom_terms_equal_TomTerm(tom_b, tom_renamedvar_b_1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {




				
				return tom_make_FalseConstraint();
			 } } } } } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match1_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_b=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match1_1_cla_4_pattern; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_b_1=tom_match1_1_cla_4_genTerm; if (tom_terms_equal_TomTerm(tom_b, tom_renamedvar_b_1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {
				
				return tom_make_FalseConstraint();
			 } } } } } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match1_1_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match1_1_genTerm; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {



				return tom_make_TrueConstraint();
			 } } } } } } } } } if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match1_1_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match1_1_genTerm; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				return tom_make_FalseConstraint();
			 } } } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_x=tom_match1_1_clo_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match1_1_clo_2_genTerm; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin3=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end3=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end3))) {tom_match1_1_clo_list1=tom_match1_1_clo_end3; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_get_slice_concOr(tom_match1_1_clo_begin3,tom_match1_1_clo_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_4=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1_clo_4) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_clo_4_cla=tom_get_slot_AndConstraint_cla(tom_match1_1_clo_4); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_clo_4_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_clo_4_cla_list1=tom_match1_1_clo_4_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_clo_4_cla_begin1=tom_match1_1_clo_4_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_clo_4_cla_end1=tom_match1_1_clo_4_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_clo_4_cla_end1))) {tom_match1_1_clo_4_cla_list1=tom_match1_1_clo_4_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_T=tom_get_slice_concAnd(tom_match1_1_clo_4_cla_begin1,tom_match1_1_clo_4_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_4_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_clo_4_cla_list1);tom_match1_1_clo_4_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_clo_4_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_clo_4_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_clo_4_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_clo_4_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_x_1=tom_match1_1_clo_4_cla_2_pattern; if (tom_terms_equal_TomTerm(tom_x, tom_renamedvar_x_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match1_1_clo_4_cla_2_genTerm; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_U=tom_match1_1_clo_4_cla_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Z=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {



				return tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_cons_list_concOr(tom_make_NEqualConstraint(tom_x,tom_a),tom_append_list_concOr(tom_Y,tom_cons_list_concOr(tom_make_AndConstraint(tom_append_list_concAnd(tom_T,tom_append_list_concAnd(tom_U,tom_empty_list_concAnd()))),tom_append_list_concOr(tom_Z,tom_empty_list_concOr()))))));
			 } } } } } } } } } } } } } }tom_match1_1_clo_4_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_clo_4_cla_end1); } }tom_match1_1_clo_4_cla_list1=tom_match1_1_clo_4_cla_begin1; } } } } } } } } }tom_match1_1_clo_end3=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end3); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin3; } } } } } } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_x=tom_match1_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_a=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_get_slice_concAnd(tom_match1_1_cla_begin3,tom_match1_1_cla_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1_cla_4) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_cla_4_clo=tom_get_slot_OrConstraint_clo(tom_match1_1_cla_4); if ( ( tom_is_fun_sym_concOr(tom_match1_1_cla_4_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_cla_4_clo_list1=tom_match1_1_cla_4_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_cla_4_clo_begin1=tom_match1_1_cla_4_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_cla_4_clo_end1=tom_match1_1_cla_4_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_cla_4_clo_end1))) {tom_match1_1_cla_4_clo_list1=tom_match1_1_cla_4_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_T=tom_get_slice_concOr(tom_match1_1_cla_4_clo_begin1,tom_match1_1_cla_4_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_cla_4_clo_list1);tom_match1_1_cla_4_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_cla_4_clo_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_cla_4_clo_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_clo_2_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_cla_4_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_clo_2_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_cla_4_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_x_1=tom_match1_1_cla_4_clo_2_pattern; if (tom_terms_equal_TomTerm(tom_x, tom_renamedvar_x_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_renamedvar_a_1=tom_match1_1_cla_4_clo_2_genTerm; if (tom_terms_equal_TomTerm(tom_a, tom_renamedvar_a_1)) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_U=tom_match1_1_cla_4_clo_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_cons_list_concAnd(tom_make_EqualConstraint(tom_x,tom_a),tom_append_list_concAnd(tom_Y,tom_cons_list_concAnd(tom_make_OrConstraint(tom_append_list_concOr(tom_T,tom_append_list_concOr(tom_U,tom_empty_list_concOr()))),tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd()))))));
			 } } } } } } } } } } } } } }tom_match1_1_cla_4_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_cla_4_clo_end1); } }tom_match1_1_cla_4_clo_list1=tom_match1_1_cla_4_clo_begin1; } } } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_FalseConstraint(tom_match1_1_cla_2) ||  false  ) ) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {



				return tom_make_FalseConstraint();
			 } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_FalseConstraint(tom_match1_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_append_list_concOr(tom_Y,tom_empty_list_concOr())));
			 } } } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_TrueConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {



				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd())));
			 } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_TrueConstraint(tom_match1_1_clo_2) ||  false  ) ) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

			
				return tom_make_TrueConstraint();
			 } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_2_cla=tom_get_slot_AndConstraint_cla(tom_match1_1_cla_2); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla_2_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_2_cla_list1=tom_match1_1_cla_2_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match1_1_cla_2_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {



				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd()))));
			 } } } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_2_clo=tom_get_slot_OrConstraint_clo(tom_match1_1_clo_2); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo_2_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_2_clo_list1=tom_match1_1_clo_2_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_match1_1_clo_2_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Z=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_append_list_concOr(tom_Y,tom_append_list_concOr(tom_Z,tom_empty_list_concOr()))));
			 } } } } } } } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_a=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_get_slice_concAnd(tom_match1_1_cla_begin3,tom_match1_1_cla_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_renamedvar_a_1=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1); if (tom_terms_equal_Constraint(tom_a, tom_renamedvar_a_1)) {tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				
				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_cons_list_concAnd(tom_a,tom_append_list_concAnd(tom_Y,tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd())))));
			 } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_a=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin3=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end3=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end3))) {tom_match1_1_clo_list1=tom_match1_1_clo_end3; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_get_slice_concOr(tom_match1_1_clo_begin3,tom_match1_1_clo_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_renamedvar_a_1=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1); if (tom_terms_equal_Constraint(tom_a, tom_renamedvar_a_1)) {tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Z=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				
				return tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_cons_list_concOr(tom_a,tom_append_list_concOr(tom_Y,tom_append_list_concOr(tom_Z,tom_empty_list_concOr())))));
			 } } } } } } }tom_match1_1_clo_end3=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end3); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin3; } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; if (tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_list1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_make_TrueConstraint();
			 } } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; if (tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_list1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_make_FalseConstraint();
			 } } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; if (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_x=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if (tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_list1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_x;
			 } } } } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; if (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_x=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if (tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_list1)) { {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_x;
			 } } } } } } } } } } if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1); if ( ( tom_is_fun_sym_RecordAppl(tom_match1_1_pattern) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_match1_1_pattern_Option=tom_get_slot_RecordAppl_Option(tom_match1_1_pattern); { tom.engine.adt.tomname.types.TomNameList  tom_match1_1_pattern_NameList=tom_get_slot_RecordAppl_NameList(tom_match1_1_pattern); { tom.engine.adt.tomslot.types.SlotList  tom_match1_1_pattern_Slots=tom_get_slot_RecordAppl_Slots(tom_match1_1_pattern); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_match1_1_pattern_Constraints=tom_get_slot_RecordAppl_Constraints(tom_match1_1_pattern); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_match1_1_pattern_Option; { tom.engine.adt.tomname.types.TomNameList  tom_name=tom_match1_1_pattern_NameList; { tom.engine.adt.tomslot.types.SlotList  tom_a1=tom_match1_1_pattern_Slots; { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tom_match1_1_pattern_Constraints; { tom.engine.adt.tomterm.types.TomTerm  tom_g=tom_match1_1_genTerm; {boolean tom_match1_tom_anti_constraints_status= true ; { tom.engine.adt.tomconstraint.types.Constraint  tom_e=tom_match1_1; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) { if(tom_g instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match2_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_g); if ( ( tom_is_fun_sym_SymbolOf(tom_match2_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match2_1_GroundTerm=tom_get_slot_SymbolOf_GroundTerm(tom_match2_1); {boolean tom_match2_tom_anti_constraints_status= true ; if ((tom_match2_tom_anti_constraints_status ==  true )) { if ( true ) {






return tom_e; } } } } } } }
				
				
				AConstraintList l = tom_empty_list_concAnd();
				SlotList args1 = tom_a1;
				
				int counter = 0;
				
				while(!args1.isEmptyconcSlot()) {
					Slot headSlot = args1.getHeadconcSlot();
					l = tom_cons_list_concAnd(tom_make_EqualConstraint(headSlot.getAppl(),tom_make_Subterm(tom_name.getHeadconcTomName()
							,headSlot.getSlotName(),tom_g)),tom_append_list_concAnd(l,tom_empty_list_concAnd()))
;					
					args1 = args1.getTailconcSlot();										
				}
				
				l = l.reverse();
				
				l = tom_cons_list_concAnd(tom_make_EqualConstraint(tom_make_RecordAppl(tom_options,tom_name,tom_empty_list_concSlot(),tom_constraints),tom_make_SymbolOf(tom_g)),tom_append_list_concAnd(l,tom_empty_list_concAnd()));
				
				return tom_make_AndConstraint(l);
			 } } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1); if ( ( tom_is_fun_sym_RecordAppl(tom_match1_1_pattern) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_match1_1_pattern_Option=tom_get_slot_RecordAppl_Option(tom_match1_1_pattern); { tom.engine.adt.tomname.types.TomNameList  tom_match1_1_pattern_NameList=tom_get_slot_RecordAppl_NameList(tom_match1_1_pattern); { tom.engine.adt.tomslot.types.SlotList  tom_match1_1_pattern_Slots=tom_get_slot_RecordAppl_Slots(tom_match1_1_pattern); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_match1_1_pattern_Constraints=tom_get_slot_RecordAppl_Constraints(tom_match1_1_pattern); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_match1_1_pattern_Option; { tom.engine.adt.tomname.types.TomNameList  tom_name=tom_match1_1_pattern_NameList; { tom.engine.adt.tomslot.types.SlotList  tom_a1=tom_match1_1_pattern_Slots; { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tom_match1_1_pattern_Constraints; { tom.engine.adt.tomterm.types.TomTerm  tom_g=tom_match1_1_genTerm; {boolean tom_match1_tom_anti_constraints_status= true ; { tom.engine.adt.tomconstraint.types.Constraint  tom_e=tom_match1_1; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) { if(tom_g instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_g); if ( ( tom_is_fun_sym_SymbolOf(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_GroundTerm=tom_get_slot_SymbolOf_GroundTerm(tom_match3_1); {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {




return tom_e; } } } } } } }
				
				
				OConstraintList l = tom_empty_list_concOr();
				SlotList args1 = tom_a1;
				
				int counter = 0;
				
				while(!args1.isEmptyconcSlot()) {
					Slot headSlot = args1.getHeadconcSlot();
					l = tom_cons_list_concOr(tom_make_NEqualConstraint(headSlot.getAppl(),tom_make_Subterm(tom_name.getHeadconcTomName()
							,headSlot.getSlotName(),tom_g)),tom_append_list_concOr(l,tom_empty_list_concOr()))
;					
					args1 = args1.getTailconcSlot();										
				}
				
				l = l.reverse();
				
				l = tom_cons_list_concOr(tom_make_NEqualConstraint(tom_make_RecordAppl(tom_options,tom_name,tom_empty_list_concSlot(),tom_constraints),tom_make_SymbolOf(tom_g)),tom_append_list_concOr(l,tom_empty_list_concOr()));
				
				return tom_make_OrConstraint(l);
			 } } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_2_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_2_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_2_pattern); { tom.engine.adt.tomname.types.TomName  tom_z=tom_match1_1_cla_2_pattern_AstName; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_get_slice_concAnd(tom_match1_1_cla_begin3,tom_match1_1_cla_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_4); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_4_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_4_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_4_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_z_1=tom_match1_1_cla_4_pattern_AstName; if (tom_terms_equal_TomName(tom_z, tom_renamedvar_z_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_u=tom_match1_1_cla_4_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {







				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_cons_list_concAnd(tom_make_EqualConstraint(tom_var,tom_t),tom_append_list_concAnd(tom_Y,tom_cons_list_concAnd(tom_make_EqualConstraint(tom_t,tom_u),tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd()))))));
			 } } } } } } } } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_clo_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_clo_2_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_clo_2_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_clo_2_pattern); { tom.engine.adt.tomname.types.TomName  tom_z=tom_match1_1_clo_2_pattern_AstName; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_clo_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match1_1_clo_2_genTerm; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin3=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end3=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end3))) {tom_match1_1_clo_list1=tom_match1_1_clo_end3; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_get_slice_concOr(tom_match1_1_clo_begin3,tom_match1_1_clo_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_4=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_clo_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_clo_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_clo_4); if ( ( tom_is_fun_sym_Variable(tom_match1_1_clo_4_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_clo_4_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_clo_4_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_z_1=tom_match1_1_clo_4_pattern_AstName; if (tom_terms_equal_TomName(tom_z, tom_renamedvar_z_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_u=tom_match1_1_clo_4_genTerm; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Z=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_cons_list_concOr(tom_make_NEqualConstraint(tom_var,tom_t),tom_append_list_concOr(tom_Y,tom_cons_list_concOr(tom_make_NEqualConstraint(tom_t,tom_u),tom_append_list_concOr(tom_Z,tom_empty_list_concOr()))))));
			 } } } } } } } } } } } } } }tom_match1_1_clo_end3=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end3); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin3; } } } } } } } } } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_2_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_2_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_2_pattern); { tom.engine.adt.tomname.types.TomName  tom_z=tom_match1_1_cla_2_pattern_AstName; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_get_slice_concAnd(tom_match1_1_cla_begin3,tom_match1_1_cla_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_cla_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_cla_4); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_4_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_4_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_4_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_z_1=tom_match1_1_cla_4_pattern_AstName; if (tom_terms_equal_TomName(tom_z, tom_renamedvar_z_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_u=tom_match1_1_cla_4_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_cons_list_concAnd(tom_make_EqualConstraint(tom_var,tom_t),tom_append_list_concAnd(tom_Y,tom_cons_list_concAnd(tom_make_NEqualConstraint(tom_t,tom_u),tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd()))))));
			 } } } } } } } } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_cla_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_2_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_2_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_2_pattern); { tom.engine.adt.tomname.types.TomName  tom_z=tom_match1_1_cla_2_pattern_AstName; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_u=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin3=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end3=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end3))) {tom_match1_1_cla_list1=tom_match1_1_cla_end3; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_get_slice_concAnd(tom_match1_1_cla_begin3,tom_match1_1_cla_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_4=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_4_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_4); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_4_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_cla_4_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_cla_4_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_z_1=tom_match1_1_cla_4_pattern_AstName; if (tom_terms_equal_TomName(tom_z, tom_renamedvar_z_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match1_1_cla_4_genTerm; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_cons_list_concAnd(tom_make_EqualConstraint(tom_var,tom_t),tom_append_list_concAnd(tom_Y,tom_cons_list_concAnd(tom_make_NEqualConstraint(tom_t,tom_u),tom_append_list_concAnd(tom_Z,tom_empty_list_concAnd()))))));
			 } } } } } } } } } } } } } }tom_match1_1_cla_end3=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end3); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin3; } } } } } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_clo_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_clo_2_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_clo_2_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_clo_2_pattern); { tom.engine.adt.tomname.types.TomName  tom_z=tom_match1_1_clo_2_pattern_AstName; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_clo_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match1_1_clo_2_genTerm; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin3=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end3=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end3))) {tom_match1_1_clo_list1=tom_match1_1_clo_end3; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_get_slice_concOr(tom_match1_1_clo_begin3,tom_match1_1_clo_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_4=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_clo_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_clo_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_clo_4); if ( ( tom_is_fun_sym_Variable(tom_match1_1_clo_4_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_clo_4_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_clo_4_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_z_1=tom_match1_1_clo_4_pattern_AstName; if (tom_terms_equal_TomName(tom_z, tom_renamedvar_z_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_u=tom_match1_1_clo_4_genTerm; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Z=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {


				return tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_cons_list_concOr(tom_make_EqualConstraint(tom_t,tom_u),tom_append_list_concOr(tom_Y,tom_cons_list_concOr(tom_make_NEqualConstraint(tom_var,tom_u),tom_append_list_concOr(tom_Z,tom_empty_list_concOr()))))));
			 } } } } } } } } } } } } } }tom_match1_1_clo_end3=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end3); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin3; } } } } } } } } } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_clo_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_clo_2_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_clo_2_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_clo_2_pattern); { tom.engine.adt.tomname.types.TomName  tom_z=tom_match1_1_clo_2_pattern_AstName; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_clo_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_u=tom_match1_1_clo_2_genTerm; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin3=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end3=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end3))) {tom_match1_1_clo_list1=tom_match1_1_clo_end3; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_get_slice_concOr(tom_match1_1_clo_begin3,tom_match1_1_clo_end3); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_4=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_clo_4) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_clo_4); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_4_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_clo_4); if ( ( tom_is_fun_sym_Variable(tom_match1_1_clo_4_pattern) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_clo_4_pattern_AstName=tom_get_slot_Variable_AstName(tom_match1_1_clo_4_pattern); { tom.engine.adt.tomname.types.TomName  tom_renamedvar_z_1=tom_match1_1_clo_4_pattern_AstName; if (tom_terms_equal_TomName(tom_z, tom_renamedvar_z_1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match1_1_clo_4_genTerm; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Z=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

				return tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_cons_list_concOr(tom_make_EqualConstraint(tom_t,tom_u),tom_append_list_concOr(tom_Y,tom_cons_list_concOr(tom_make_NEqualConstraint(tom_var,tom_u),tom_append_list_concOr(tom_Z,tom_empty_list_concOr()))))));
			 } } } } } } } } } } } } } }tom_match1_1_clo_end3=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end3); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin3; } } } } } } } } } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla=tom_get_slot_AndConstraint_cla(tom_match1_1); if ( ( tom_is_fun_sym_concAnd(tom_match1_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_list1=tom_match1_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_begin1=tom_match1_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match1_1_cla_end1=tom_match1_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match1_1_cla_end1))) {tom_match1_1_cla_list1=tom_match1_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match1_1_cla_begin1,tom_match1_1_cla_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match1_1_cla_list1);tom_match1_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match1_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match1_1_cla_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_cla_2_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match1_1_cla_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_cla_2_pattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_s=tom_match1_1_cla_2_genTerm; { tom.engine.adt.tomconstraint.types.Constraint  tom_eq=tom_match1_1_cla_2; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match1_1_cla_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {





			//And(concAnd(X*,eq@Equal(var,s),Y*)) -> {
				            
	            Constraint res = (Constraint) MuTraveler.init(
	            		tom_make_BottomUp(tom_make_ReplaceTerm(tom_var,tom_s))).visit(tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd()))));
	            if (res != tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd())))){
	            	return tom_make_AndConstraint(tom_cons_list_concAnd(tom_eq,tom_cons_list_concAnd(res,tom_empty_list_concAnd())));
	            }
	         } } } } } } } } } } } } }tom_match1_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match1_1_cla_end1); } }tom_match1_1_cla_list1=tom_match1_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo=tom_get_slot_OrConstraint_clo(tom_match1_1); if ( ( tom_is_fun_sym_concOr(tom_match1_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_list1=tom_match1_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_begin1=tom_match1_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match1_1_clo_end1=tom_match1_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match1_1_clo_end1))) {tom_match1_1_clo_list1=tom_match1_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match1_1_clo_begin1,tom_match1_1_clo_end1); { tom.engine.adt.tomconstraint.types.Constraint  tom_match1_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match1_1_clo_list1);tom_match1_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_list1); if ( ( tom_is_fun_sym_NEqualConstraint(tom_match1_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match1_1_clo_2); { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1_clo_2_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match1_1_clo_2); if ( ( tom_is_fun_sym_Variable(tom_match1_1_clo_2_pattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match1_1_clo_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_s=tom_match1_1_clo_2_genTerm; { tom.engine.adt.tomconstraint.types.Constraint  tom_eq=tom_match1_1_clo_2; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_match1_1_clo_list1; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {



				            
	            Constraint res = (Constraint) MuTraveler.init(
	            		tom_make_BottomUp(tom_make_ReplaceTerm(tom_var,tom_s))).visit(tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_append_list_concOr(tom_Y,tom_empty_list_concOr()))));
	            if (res != tom_make_OrConstraint(tom_append_list_concOr(tom_X,tom_append_list_concOr(tom_Y,tom_empty_list_concOr())))){
	            	return tom_make_OrConstraint(tom_cons_list_concOr(tom_eq,tom_cons_list_concOr(res,tom_empty_list_concOr())));
	            }
	         } } } } } } } } } } } } }tom_match1_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match1_1_clo_end1); } }tom_match1_1_clo_list1=tom_match1_1_clo_begin1; } } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_SimplifyWithDisunification() { return new SimplifyWithDisunification(); }





 // end strategy
	
	/**
	 * Replaces the occurence of all the terms equal with 'variable'
	 * with 'value'
	 */
	 private static class ReplaceTerm  extends  tom.engine.adt.tomconstraint.TomConstraintBasicStrategy   { private  tom.engine.adt.tomterm.types.TomTerm  variable;  private  tom.engine.adt.tomterm.types.TomTerm  value;  public ReplaceTerm(  tom.engine.adt.tomterm.types.TomTerm  variable ,   tom.engine.adt.tomterm.types.TomTerm  value ) { super(tom_make_Identity() ); this.variable=variable; this.value=value; } public  tom.engine.adt.tomterm.types.TomTerm  getvariable() { return variable;} public  tom.engine.adt.tomterm.types.TomTerm  getvalue() { return value;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match4_1; {boolean tom_match4_tom_anti_constraints_status= true ; if ((tom_match4_tom_anti_constraints_status ==  true )) { if ( true ) {


				if (tom_t== variable){
					return value;
				}
			 } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ReplaceTerm( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return new ReplaceTerm(t0,t1); }


	
} // end class
