/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz  e-mail: Radu.Kopetz@loria.fr
 *
 **/

package tom.engine.compiler.antipattern;

import java.io.*;
import java.util.*;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomconstraint.types.constraint.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.exception.*;
import tom.engine.tools.SymbolTable;
import tom.engine.TomBase;

import tom.library.strategy.mutraveler.MuTraveler;

import jjtraveler.reflective.VisitableVisitor;
import tom.library.strategy.mutraveler.MuStrategy;
import jjtraveler.VisitFailure;

/**
 * Contains methods for transforming an anti-pattern problem into a
 * disunification one
 */
public class TomAntiPatternTransformNew {	

//	------------------------------------------------------------
	/* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_sort_String(String t) {  return  t instanceof String  ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) {  return  (t1==t2)  ;} private static boolean tom_equal_term_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomType(Object t) {  return  t instanceof tom.engine.adt.tomtype.types.TomType  ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNameList(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNameList  ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomName(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomName  ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomList  ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomTerm(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomTerm  ;}private static boolean tom_equal_term_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Option(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.Option  ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_OptionList(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.OptionList  ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Constraint(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.Constraint  ;}private static boolean tom_equal_term_AConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_AConstraintList(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.AConstraintList  ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_ConstraintList(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList  ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotList(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.SlotList  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_EmptyType() { return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make(); }private static  tom.engine.adt.tomname.types.TomName  tom_make_Name( String  t0) { return  tom.engine.adt.tomname.types.tomname.Name.make(t0); }private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_XMLAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.XMLAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_XMLAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_XMLAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_XMLAppl_AttrList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAttrList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_XMLAppl_ChildList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getChildList()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_XMLAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Variable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.Variable.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AntiTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static boolean tom_is_fun_sym_OriginTracking( tom.engine.adt.tomoption.types.Option  t) {  return  t instanceof tom.engine.adt.tomoption.types.option.OriginTracking  ;}private static  tom.engine.adt.tomoption.types.Option  tom_make_OriginTracking( tom.engine.adt.tomname.types.TomName  t0,  int  t1,  String  t2) { return  tom.engine.adt.tomoption.types.option.OriginTracking.make(t0, t1, t2); }private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_OriginTracking_AstName( tom.engine.adt.tomoption.types.Option  t) {  return  t.getAstName()  ;}private static  int  tom_get_slot_OriginTracking_Line( tom.engine.adt.tomoption.types.Option  t) {  return  t.getLine()  ;}private static  String  tom_get_slot_OriginTracking_FileName( tom.engine.adt.tomoption.types.Option  t) {  return  t.getFileName()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_Neg( tom.engine.adt.tomconstraint.types.Constraint  t0) { return  tom.engine.adt.tomconstraint.types.constraint.Neg.make(t0); }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AndConstraint( tom.engine.adt.tomconstraint.types.AConstraintList  t0) { return  tom.engine.adt.tomconstraint.types.constraint.AndConstraint.make(t0); }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AntiMatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  int  t2) { return  tom.engine.adt.tomconstraint.types.constraint.AntiMatchConstraint.make(t0, t1, t2); }private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) {  return  t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption || t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getHeadconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getTailconcOption()  ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.isEmptyconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList  l1,  tom.engine.adt.tomoption.types.OptionList  l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end) {    if(tom_equal_term_OptionList(begin,end)) {      return ( tom.engine.adt.tomoption.types.OptionList )tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_is_fun_sym_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndAntiConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndAntiConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndAntiConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndAntiConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndAntiConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndAntiConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) {  return  l.getHeadAndAntiConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndAntiConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) {  return  l.getTailAndAntiConstraint()  ;}private static boolean tom_is_empty_AndAntiConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) {  return  l.isEmptyAndAntiConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {    if(tom_is_empty_AndAntiConstraint_Constraint(l1)) {     return l2;    } else if(tom_is_empty_AndAntiConstraint_Constraint(l2)) {     return l1;    } else if(tom_is_fun_sym_AndAntiConstraint(l1)) {       if(tom_is_empty_AndAntiConstraint_Constraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_tail_AndAntiConstraint_Constraint(l1))) {        return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_AndAntiConstraint_Constraint(l1),l2);      } else {        return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_AndAntiConstraint_Constraint(l1),tom_append_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_tail_AndAntiConstraint_Constraint(l1),l2));      }    } else {      return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndAntiConstraint(l1 , l2);    }   }  private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndAntiConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end) {    if(tom_equal_term_Constraint(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.Constraint )tom_empty_list_AndAntiConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_AndAntiConstraint_Constraint(begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndAntiConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_tail_AndAntiConstraint_Constraint(begin),end));    }   }  private static boolean tom_is_fun_sym_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd || t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_empty_list_concAnd() { return  tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd.make() ; }private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_cons_list_concAnd( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.AConstraintList  l) { return  tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getHeadconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_tail_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getTailconcAnd()  ;}private static boolean tom_is_empty_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.isEmptyconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_append_list_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  l1,  tom.engine.adt.tomconstraint.types.AConstraintList  l2) {    if(tom_is_empty_concAnd_AConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concAnd_AConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concAnd_AConstraintList(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),tom_append_list_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_slice_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  begin,  tom.engine.adt.tomconstraint.types.AConstraintList  end) {    if(tom_equal_term_AConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_empty_list_concAnd();    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(begin),( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_slice_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getHeadconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getTailconcConstraint()  ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.isEmptyconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end) {    if(tom_equal_term_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_sort_Strategy(Object t) {  return  t instanceof tom.library.strategy.mutraveler.MuStrategy  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static boolean tom_is_fun_sym_Sequence( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (t instanceof tom.library.strategy.mutraveler.Sequence)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_empty_list_Sequence() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_cons_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  head,  tom.library.strategy.mutraveler.MuStrategy  tail) { return  new tom.library.strategy.mutraveler.Sequence(head,tail) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_head_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.FIRST)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_tail_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.THEN)  ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  t instanceof tom.library.strategy.mutraveler.Identity  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_append_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  l1,  tom.library.strategy.mutraveler.MuStrategy  l2) {    if(tom_is_empty_Sequence_Strategy(l1)) {     return l2;    } else if(tom_is_empty_Sequence_Strategy(l2)) {     return l1;    } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1))) {        return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),l2);      } else {        return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),tom_append_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1),l2));      }    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(l1 , l2);    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_slice_Sequence( tom.library.strategy.mutraveler.MuStrategy  begin,  tom.library.strategy.mutraveler.MuStrategy  end) {    if(tom_equal_term_Strategy(begin,end)) {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_empty_list_Sequence();    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(begin),( tom.library.strategy.mutraveler.MuStrategy )tom_get_slice_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(begin),end));    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Choice( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_OneId( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.OneId(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_SequenceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.SequenceId(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ChoiceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.ChoiceId(first,then) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Try( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TopDownCollect( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Try(tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence())))) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_OnceTopDownId( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_ChoiceId(v,tom_make_OneId(tom_make_MuVar("_x")))) ; }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Collection(Object l1, Object l2) {  return  l1.equals(l2)  ;}private static boolean tom_is_sort_Collection(Object t) {  return  t instanceof java.util.Collection  ;} 

	
//	------------------------------------------------------------

	// TODO - change this
	// flag that specifies if the action will be performed on the 'if then' 
	// or on the 'else' branch
	// - if one not is above, than action is on 'else'; if two, action on 'if then' 
	// and so on
	private static int actionOnIf = 0;
	private static int varCounter = 0;
	private static final String FRESH_VAR_NAME = "_tom_fresh_var_";
	private static SymbolTable symbolTable = null;

	/**
	 * for the given term, abstracts all anti terms contained
	 * 
	 * @return a term in which all the anti terms are abstracted with variables
	 * 			and with one match constraint for each anti-term that was abstracted 
	 */
	public static TomTerm getConstrainedTerm(TomTerm tomTerm, SymbolTable symbolTable) {
		TomAntiPatternTransformNew.symbolTable = symbolTable;
		int termLine = 0;
		String fileName = null;		
		// get the file name and line number
		TomTerm tmpTomTerm = (tomTerm instanceof AntiTerm)?((AntiTerm)tomTerm).getTomTerm():tomTerm;
		 if (tom_is_sort_TomTerm(tmpTomTerm)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1=(( tom.engine.adt.tomterm.types.TomTerm )tmpTomTerm); {boolean tomNameNumberboolMatch1Position1= false ; { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1NameNumberOption= null ; if (tom_is_fun_sym_Variable(tomMatch1Position1)) {tomNameNumberboolMatch1Position1= true ;tomMatch1Position1NameNumberOption=tom_get_slot_Variable_Option(tomMatch1Position1); } else { if (tom_is_fun_sym_RecordAppl(tomMatch1Position1)) {tomNameNumberboolMatch1Position1= true ;tomMatch1Position1NameNumberOption=tom_get_slot_RecordAppl_Option(tomMatch1Position1); } else { if (tom_is_fun_sym_XMLAppl(tomMatch1Position1)) {tomNameNumberboolMatch1Position1= true ;tomMatch1Position1NameNumberOption=tom_get_slot_XMLAppl_Option(tomMatch1Position1); } } } if (tomNameNumberboolMatch1Position1) { if ( ( tom_is_fun_sym_concOption(tomMatch1Position1NameNumberOption) ||  false  ) ) { {int tomMatch1Position1NameNumberOptionIndex1=0; { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1NameNumberOptionList1=tomMatch1Position1NameNumberOption; { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1NameNumberOptionBegin1=tomMatch1Position1NameNumberOptionList1; { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1NameNumberOptionEnd1=tomMatch1Position1NameNumberOptionList1; { while (!(tom_is_empty_concOption_OptionList(tomMatch1Position1NameNumberOptionEnd1))) {tomMatch1Position1NameNumberOptionList1=tomMatch1Position1NameNumberOptionEnd1; { { tom.engine.adt.tomoption.types.OptionList  tomMatch1Position1NameNumberOptionSave2=tomMatch1Position1NameNumberOptionList1; { { tom.engine.adt.tomoption.types.Option  tomMatch1Position1NameNumberOptionPosition2=tom_get_head_concOption_OptionList(tomMatch1Position1NameNumberOptionList1);tomMatch1Position1NameNumberOptionIndex1=tomMatch1Position1NameNumberOptionIndex1 + 1;tomMatch1Position1NameNumberOptionList1=tom_get_tail_concOption_OptionList(tomMatch1Position1NameNumberOptionList1); if ( ( tom_is_fun_sym_OriginTracking(tomMatch1Position1NameNumberOptionPosition2) ||  false  ) ) { { int  tom_termLine=tom_get_slot_OriginTracking_Line(tomMatch1Position1NameNumberOptionPosition2); { String  tom_fileName=tom_get_slot_OriginTracking_FileName(tomMatch1Position1NameNumberOptionPosition2); if ( true ) {

				termLine = tom_termLine;
				fileName = tom_fileName;
			 } } } } }tomMatch1Position1NameNumberOptionList1=tomMatch1Position1NameNumberOptionSave2; } }tomMatch1Position1NameNumberOptionEnd1=tom_get_tail_concOption_OptionList(tomMatch1Position1NameNumberOptionEnd1); } }tomMatch1Position1NameNumberOptionList1=tomMatch1Position1NameNumberOptionBegin1; } } } } } } } } } } }


		//System.out.println("Entered with: " + tomTerm);
		Constraint andAntiCons = tom_empty_list_AndAntiConstraint();		
		ArrayList replacedTerms = new ArrayList();
		TomTerm termAntiReplaced = tomTerm;
		while(true) {		
			// get the term with a variable instead of anti
			String varName = FRESH_VAR_NAME + (varCounter++);
			TomTerm abstractVariable = tom_make_Variable(tom_cons_list_concOption(tom_make_OriginTracking(tom_make_Name(varName),termLine,fileName),tom_empty_list_concOption()),tom_make_Name(varName),tom_make_EmptyType(),tom_empty_list_concConstraint())
;		
			TomTerm tmp = (TomTerm) tom_make_OnceTopDownId(tom_make_AbstractTerm(abstractVariable,replacedTerms)).apply(termAntiReplaced);
			// if nothing was done
			if(tmp != termAntiReplaced) {
				termAntiReplaced = tmp;
			} else {
				break;
			}
			TomTerm replacedTerm = (TomTerm)replacedTerms.get(0);			
			// give the variable the correct type
			TomType type = TomBase.getTermType(replacedTerm,symbolTable);
			abstractVariable = abstractVariable.setAstType(type);
			// add the new anti constraint
			andAntiCons = tom_cons_list_AndAntiConstraint(tom_make_AntiMatchConstraint(replacedTerm,abstractVariable,actionOnIf),tom_append_list_AndAntiConstraint(andAntiCons,tom_empty_list_AndAntiConstraint()));
			//System.out.println("andAntiCons = " + andAntiCons);

			// reinitialize
			replacedTerms.clear();
		}

		// existing constraints
		ConstraintList constraints = (tomTerm instanceof AntiTerm)?tomTerm.getTomTerm().getConstraints():tomTerm.getConstraints();
		// add the newly created constraints
		if(!andAntiCons.isEmptyAndAntiConstraint()) {
			constraints = tom_append_list_concConstraint(constraints,tom_cons_list_concConstraint(andAntiCons,tom_empty_list_concConstraint()));
		}
		termAntiReplaced = termAntiReplaced.setConstraints(constraints);

		// change the level
		actionOnIf = (actionOnIf==0)?1:0;
		return termAntiReplaced; 		
	}


	/**
	 * transforms the anti-pattern problem received 
	 * in order to eliminate the anti symbols
	 * 
	 * @param c
	 *            the anti-pattern problem to transform
	 * @return corresponding disunification problem
	 */
	public static Constraint transform(Constraint c, Collection quantifiedVarList,
			Collection freeVarList) {	

		// replace all unamed variables by named ones
		c = (Constraint)tom_make_TopDown(tom_make_ReplaceUnamedVariables()).apply(c);

		// get the free variables of the pattern
		tom_make_TopDownCollect(tom_make_CollectPositiveVariable(freeVarList)).apply(c);

		// eliminate anti
		return applyMainRule(c, quantifiedVarList);	
	}

	/**
	 * applies the main rule that transforms ap problems into dis-unification
	 * ones
	 */
	private static Constraint applyMainRule(Constraint c, Collection quantifiedVarList) {
		/*
		 * to improve the efficiency, we should first, abstract anti symbols,
		 * and get cAntiReplaced store the tuple (abstractedTerm, variable)
		 * during the abstraction then, re-instantiate the abstractedVariables
		 * to deduce cNoAnti this would avoid the double recursive traversal
		 */

		// first get the constraint without the anti
		Constraint cNoAnti = (Constraint) tom_make_OnceTopDownId(tom_make_ElimAnti()).apply(c);
		// if nothing changed, time to exit
		if(cNoAnti == c) {
			return c;
		} 
		cNoAnti = tom_make_Neg(applyMainRule(cNoAnti,quantifiedVarList));

		/*
		 * find an Anti(...) an then collect (under this Anti) variables which
		 * are not under another Anti 
		 * TODO: this is strange since we do not
		 * collect variables which are in other branches
		 */
		tom_make_OnceTopDownId(tom_make_SequenceId(tom_make_ElimAnti(),tom_make_TopDownCollect(tom_make_CollectPositiveVariable(quantifiedVarList)))).apply(c);

		// System.out.println("quantifiedVarList = " + quantifiedVarList);				

		// get the constraint with a variable instead of anti
		String varName = FRESH_VAR_NAME + (varCounter++);
		TomTerm abstractVariable = tom_make_Variable(tom_empty_list_concOption(),tom_make_Name(varName),tom_make_EmptyType(),tom_empty_list_concConstraint());
		// we need to have all quantified variables stored in the list 
		quantifiedVarList.add(abstractVariable);

		ArrayList tmp = new ArrayList();

		Constraint cAntiReplaced = (Constraint) tom_make_OnceTopDownId(tom_make_AbstractTerm(abstractVariable,tmp)).apply(c);
		cAntiReplaced = applyMainRule(cAntiReplaced,quantifiedVarList);

		return tom_make_AndConstraint(tom_cons_list_concAnd(cAntiReplaced,tom_cons_list_concAnd(cNoAnti,tom_empty_list_concAnd())));
	}

	// collect variables, a do not inspect under an AntiTerm
	 private static class CollectPositiveVariable  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  java.util.Collection  bag;  public CollectPositiveVariable(  java.util.Collection  bag ) { super(tom_make_Identity() ); this.bag=bag; } public  java.util.Collection  getbag() { return bag;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch2Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_AntiTerm(tomMatch2Position1) ||  false  ) ) { if ( true ) {


				throw new VisitFailure();
			 } } if ( ( tom_is_fun_sym_Variable(tomMatch2Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_v=tomMatch2Position1; if ( true ) {


				if (!bag.contains(tom_v)){
					bag.add(tom_v);
				}
				throw new VisitFailure();
			 } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_CollectPositiveVariable( java.util.Collection  t0) { return new CollectPositiveVariable(t0); }



	// replaces all unamed variables with named ones
	 private static class ReplaceUnamedVariables  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public ReplaceUnamedVariables( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch3Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_UnamedVariable(tomMatch3Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_option=tom_get_slot_UnamedVariable_Option(tomMatch3Position1); { tom.engine.adt.tomtype.types.TomType  tom_astType=tom_get_slot_UnamedVariable_AstType(tomMatch3Position1); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tom_get_slot_UnamedVariable_Constraints(tomMatch3Position1); if ( true ) {

 
				return tom_make_Variable(tom_option,tom_make_Name(FRESH_VAR_NAME+ (varCounter++)),tom_astType,tom_constraints); 
			 } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ReplaceUnamedVariables() { return new ReplaceUnamedVariables(); }




	// remove an anti-symbol
	 private static class ElimAnti  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public ElimAnti( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch4Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_AntiTerm(tomMatch4Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_p=tom_get_slot_AntiTerm_TomTerm(tomMatch4Position1); if ( true ) {

 return tom_p;  } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ElimAnti() { return new ElimAnti(); }



	// replace a term by another (a variable)
	 private static class AbstractTerm  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  tom.engine.adt.tomterm.types.TomTerm  variable;  private  java.util.Collection  bag;  public AbstractTerm(  tom.engine.adt.tomterm.types.TomTerm  variable ,   java.util.Collection  bag ) { super(tom_make_Identity() ); this.variable=variable; this.bag=bag; } public  tom.engine.adt.tomterm.types.TomTerm  getvariable() { return variable;} public  java.util.Collection  getbag() { return bag;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_AntiTerm(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_get_slot_AntiTerm_TomTerm(tomMatch5Position1); if ( true ) {


				// move the assign constraints from this terms to the variable
				// that replaces it and leave all the other constraints
				ConstraintList assignConstraints = tom_empty_list_concConstraint();
				ConstraintList otherConstraints = tom_empty_list_concConstraint();
				ConstraintList cList = tom_t.getConstraints();
				while(!cList.isEmptyconcConstraint()){
					Constraint head = cList.getHeadconcConstraint();					
					if (head instanceof AssignTo ){
						assignConstraints = tom_append_list_concConstraint(assignConstraints,tom_cons_list_concConstraint(head,tom_empty_list_concConstraint()));
					}else{
						otherConstraints = tom_append_list_concConstraint(otherConstraints,tom_cons_list_concConstraint(head,tom_empty_list_concConstraint()));
					}
					cList = cList.getTailconcConstraint(); 
				}
				bag.add(tom_t.setConstraints(otherConstraints));				
				// return the variable with the correct type
				return variable.setAstType(TomBase.getTermType(tom_t,symbolTable)).setConstraints(assignConstraints);				
			 } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_AbstractTerm( tom.engine.adt.tomterm.types.TomTerm  t0,  java.util.Collection  t1) { return new AbstractTerm(t0,t1); }

	

	public static int getActionOnIf(){
		return actionOnIf;
	}

	public static void initialize(){
		actionOnIf = 0;
		varCounter = 0;
	}
} // end class
