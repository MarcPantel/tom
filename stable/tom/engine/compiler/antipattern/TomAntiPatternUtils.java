/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz  e-mail: Radu.Kopetz@loria.fr
 *
 **/

package tom.engine.compiler.antipattern;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomconstraint.types.constraint.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tomexpression.types.expression.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.engine.adt.tomterm.types.tomlist.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.library.strategy.mutraveler.MuTraveler;
import tom.library.strategy.mutraveler.MuStrategy;

import tom.engine.exception.*;
import tom.engine.compiler.*;
import tom.engine.tools.*;
import tom.engine.TomBase;

import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;
import jjtraveler.Visitable;

import java.util.*;

/**
 * Class that contains utility functions used for antipattern compilation
 */
public class TomAntiPatternUtils {
	
// ------------------------------------------------------------
	/* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_AConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Let( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomexpression.types.Expression  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.Let.make(t0, t1, t2); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_NameNumber( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomname.types.tomnumber.NameNumber.make(t0); }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.Name  ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_PositionName( tom.engine.adt.tomname.types.TomNumberList  t0) { return  tom.engine.adt.tomname.types.tomname.PositionName.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TomTermToExpression( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Negation( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomexpression.types.expression.Negation.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_And( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.And.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Or( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tomexpression.types.Expression  t1) { return  tom.engine.adt.tomexpression.types.expression.Or.make(t0, t1); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TrueTL() { return  tom.engine.adt.tomexpression.types.expression.TrueTL.make(); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_FalseTL() { return  tom.engine.adt.tomexpression.types.expression.FalseTL.make(); }private static boolean tom_is_fun_sym_EqualFunctionSymbol( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.EqualFunctionSymbol  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualFunctionSymbol( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualFunctionSymbol.make(t0, t1, t2); }private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_EqualFunctionSymbol_AstType( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp1()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp2()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualTerm( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(t0, t1, t2); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_GetSlot( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomname.types.TomName  t1,  String  t2,  tom.engine.adt.tomterm.types.TomTerm  t3) { return  tom.engine.adt.tomexpression.types.expression.GetSlot.make(t0, t1, t2, t3); }private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Variable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.Variable.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ExpressionToTomTerm( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make(t0); }private static boolean tom_is_fun_sym_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AntiTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static boolean tom_is_fun_sym_Subterm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Subterm  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Subterm_SlotName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlotName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Subterm_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getGroundTerm()  ;}private static boolean tom_is_fun_sym_SymbolOf( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.SymbolOf  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_SymbolOf_GroundTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getGroundTerm()  ;}private static boolean tom_is_fun_sym_TrueConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.TrueConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_TrueConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.TrueConstraint.make(); }private static boolean tom_is_fun_sym_FalseConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.FalseConstraint  ;}private static boolean tom_is_fun_sym_Neg( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.Neg  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_Neg_c( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getc()  ;}private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AndConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AndConstraint( tom.engine.adt.tomconstraint.types.AConstraintList  t0) { return  tom.engine.adt.tomconstraint.types.constraint.AndConstraint.make(t0); }private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_slot_AndConstraint_cla( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getcla()  ;}private static boolean tom_is_fun_sym_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.OrConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_OrConstraint( tom.engine.adt.tomconstraint.types.OConstraintList  t0) { return  tom.engine.adt.tomconstraint.types.constraint.OrConstraint.make(t0); }private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_get_slot_OrConstraint_clo( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getclo()  ;}private static boolean tom_is_fun_sym_EqualConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.EqualConstraint  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_EqualConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.EqualConstraint.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getpattern()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualConstraint_genTerm( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getgenTerm()  ;}private static boolean tom_is_fun_sym_NEqualConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.NEqualConstraint  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_NEqualConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getpattern()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_NEqualConstraint_genTerm( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getgenTerm()  ;}private static boolean tom_is_fun_sym_Exists( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.Exists  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Exists_var( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getvar()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_Exists_cons( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getcons()  ;}private static boolean tom_is_fun_sym_ForAll( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ForAll  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_ForAll_var( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getvar()  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_ForAll_cons( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getcons()  ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomslot.types.Slot  t) {  return  t instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairSlotAppl_SlotName( tom.engine.adt.tomslot.types.Slot  t) {  return  t.getSlotName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_PairSlotAppl_Appl( tom.engine.adt.tomslot.types.Slot  t) {  return  t.getAppl()  ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_terms_equal_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber || t instanceof tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_empty_list_concTomNumber() { return  tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber.make() ; }private static  tom.engine.adt.tomname.types.TomNumberList  tom_cons_list_concTomNumber( tom.engine.adt.tomname.types.TomNumber  e,  tom.engine.adt.tomname.types.TomNumberList  l) { return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_get_head_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.getHeadconcTomNumber()  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_tail_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.getTailconcTomNumber()  ;}private static boolean tom_is_empty_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.isEmptyconcTomNumber()  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_append_list_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  l1,  tom.engine.adt.tomname.types.TomNumberList  l2) {    if(tom_is_empty_concTomNumber_TomNumberList(l1)) {     return l2;    } else if(tom_is_empty_concTomNumber_TomNumberList(l2)) {     return l1;    } else if(tom_is_empty_concTomNumber_TomNumberList(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(l1))) {     return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(l1),tom_append_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slice_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  begin,  tom.engine.adt.tomname.types.TomNumberList  end) {    if(tom_terms_equal_TomNumberList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_empty_list_concTomNumber();    } else {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(begin),( tom.engine.adt.tomname.types.TomNumberList )tom_get_slice_concTomNumber(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(begin),end));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getHeadconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getTailconcOption()  ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.isEmptyconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList  l1,  tom.engine.adt.tomoption.types.OptionList  l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomoption.types.OptionList )tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concOr( tom.engine.adt.tomconstraint.types.OConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.oconstraintlist.ConsconcOr || t instanceof tom.engine.adt.tomconstraint.types.oconstraintlist.EmptyconcOr  ;}private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_empty_list_concOr() { return  tom.engine.adt.tomconstraint.types.oconstraintlist.EmptyconcOr.make() ; }private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_cons_list_concOr( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.OConstraintList  l) { return  tom.engine.adt.tomconstraint.types.oconstraintlist.ConsconcOr.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concOr_OConstraintList( tom.engine.adt.tomconstraint.types.OConstraintList  l) {  return  l.getHeadconcOr()  ;}private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_get_tail_concOr_OConstraintList( tom.engine.adt.tomconstraint.types.OConstraintList  l) {  return  l.getTailconcOr()  ;}private static boolean tom_is_empty_concOr_OConstraintList( tom.engine.adt.tomconstraint.types.OConstraintList  l) {  return  l.isEmptyconcOr()  ;}private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_append_list_concOr( tom.engine.adt.tomconstraint.types.OConstraintList  l1,  tom.engine.adt.tomconstraint.types.OConstraintList  l2) {    if(tom_is_empty_concOr_OConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concOr_OConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concOr_OConstraintList(( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_tail_concOr_OConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_cons_list_concOr(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concOr_OConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_cons_list_concOr(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concOr_OConstraintList(l1),tom_append_list_concOr(( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_tail_concOr_OConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.OConstraintList  tom_get_slice_concOr( tom.engine.adt.tomconstraint.types.OConstraintList  begin,  tom.engine.adt.tomconstraint.types.OConstraintList  end) {    if(tom_terms_equal_OConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_empty_list_concOr();    } else {      return ( tom.engine.adt.tomconstraint.types.OConstraintList )tom_cons_list_concOr(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concOr_OConstraintList(begin),( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_slice_concOr(( tom.engine.adt.tomconstraint.types.OConstraintList )tom_get_tail_concOr_OConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd || t instanceof tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_empty_list_concAnd() { return  tom.engine.adt.tomconstraint.types.aconstraintlist.EmptyconcAnd.make() ; }private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_cons_list_concAnd( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.AConstraintList  l) { return  tom.engine.adt.tomconstraint.types.aconstraintlist.ConsconcAnd.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getHeadconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_tail_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.getTailconcAnd()  ;}private static boolean tom_is_empty_concAnd_AConstraintList( tom.engine.adt.tomconstraint.types.AConstraintList  l) {  return  l.isEmptyconcAnd()  ;}private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_append_list_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  l1,  tom.engine.adt.tomconstraint.types.AConstraintList  l2) {    if(tom_is_empty_concAnd_AConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concAnd_AConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concAnd_AConstraintList(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(l1),tom_append_list_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.AConstraintList  tom_get_slice_concAnd( tom.engine.adt.tomconstraint.types.AConstraintList  begin,  tom.engine.adt.tomconstraint.types.AConstraintList  end) {    if(tom_terms_equal_AConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_empty_list_concAnd();    } else {      return ( tom.engine.adt.tomconstraint.types.AConstraintList )tom_cons_list_concAnd(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concAnd_AConstraintList(begin),( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_slice_concAnd(( tom.engine.adt.tomconstraint.types.AConstraintList )tom_get_tail_concAnd_AConstraintList(begin),end));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getHeadconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getTailconcConstraint()  ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.isEmptyconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) {  return  t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot || t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList  l1,  tom.engine.adt.tomslot.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomslot.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static boolean tom_is_fun_sym_Sequence( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (t instanceof tom.library.strategy.mutraveler.Sequence)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_empty_list_Sequence() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_cons_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  head,  tom.library.strategy.mutraveler.MuStrategy  tail) { return  new tom.library.strategy.mutraveler.Sequence(head,tail) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_head_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.FIRST)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_tail_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.THEN)  ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  t instanceof tom.library.strategy.mutraveler.Identity  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_append_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  l1,  tom.library.strategy.mutraveler.MuStrategy  l2) {    if(tom_is_empty_Sequence_Strategy(l1)) {     return l2;    } else if(tom_is_empty_Sequence_Strategy(l2)) {     return l1;    } else if(tom_is_empty_Sequence_Strategy(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1))) {     return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),l2);    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),tom_append_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1),l2));    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_slice_Sequence( tom.library.strategy.mutraveler.MuStrategy  begin,  tom.library.strategy.mutraveler.MuStrategy  end) {    if(tom_terms_equal_Strategy(begin,end)) {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_empty_list_Sequence();    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(begin),( tom.library.strategy.mutraveler.MuStrategy )tom_get_slice_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(begin),end));    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Choice( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_One( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.One(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_OneId( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.OneId(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_SequenceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.SequenceId(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ChoiceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.ChoiceId(first,then) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_OnceTopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Choice(v,tom_make_One(tom_make_MuVar("_x")))) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_OnceTopDownId( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_ChoiceId(v,tom_make_OneId(tom_make_MuVar("_x")))) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_InnermostId( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_cons_list_Sequence(tom_make_SequenceId(v,tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_ArrayList(Object l1, Object l2) {  return  l1.equals(l2)  ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */   private static java.util.ArrayList concArrayListAppend(Object o, java.util.ArrayList l) {   java.util.ArrayList res = (java.util.ArrayList)l.clone();   res.add(o);   return res; } 


// ------------------------------------------------------------
	
	private static boolean tom_terms_equal_SymbolTable(Object t1, Object t2) {  return 

 (t1.equals(t2))  ;}

	
	// contains the assignments for each free variable of pattern (if any)	
	private static Instruction varAssignments = null;
	
	/**
	 * Checks to see if the parameter received contains antipatterns
	 * 
	 * @param tomTerm
	 *            The TomTerm to search
	 * @return true if tomTerm contains anti-symbols false otherwise
	 */	
	public static boolean hasAntiTerms(Visitable tomTerm){
		MuStrategy findAnti = tom_make_OnceTopDownId(tom_make_FindAnti());
		if (tomTerm == findAnti.apply(tomTerm)){
			return false;
		}
		return true;    
	}
	
	/**
	 * search an anti symbol
	 */  
	 private static class FindAnti  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public FindAnti( ) { super(tom_make_Identity() ); } public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_AntiTerm(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_get_slot_AntiTerm_TomTerm(tom_match1_1); if ( true ) {

 return tom_t;  } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_FindAnti() { return new FindAnti(); }


	
//	/**
//	 * Compiles the anti-pattern matching constraint that it received
//	 * 
//	 * 
//	 * @param constraint 
//	 * @param moduleName
//	 * @param symbolTable
//	 * @param kernelCompiler
//	 * @return compiled expresion
//	 */	
//	public static Expression compileAntiMatchConstraint( Constraint constraint,
//			String moduleName,
//			SymbolTable symbolTable,			
//			TomKernelCompiler kernelCompiler) {
//			
//		Collection quantifiedVarList = new ArrayList();
//		Collection freeVarList = new ArrayList();
//		//		((concTomTerm)((MatchConstraint)constraint).getGlobalFreeVarList()).toArray());
//		
//		TomList tomList = ((MatchConstraint)constraint).getGlobalFreeVarList();
//		while(!tomList.isEmptyconcTomTerm()){
//			freeVarList.add(tomList.getHeadconcTomTerm());
//			tomList = tomList.getTailconcTomTerm();
//		}
//		
//		Constraint transformedProblem = TomAntiPatternTransformNew.transform(
//				`EqualConstraint(((MatchConstraint)constraint).getPattern(),
//						((MatchConstraint)constraint).getSubject()),quantifiedVarList,freeVarList);
//		
//		// launch the antipattern compiler
//		Constraint compiledApProblem = TomAntiPatternCompiler.compile(transformedProblem,quantifiedVarList,freeVarList);					
//			
//		%match(compiledApProblem){
//			TrueConstraint() ->{
//				return `TrueTL();				 
//			}
//			FalseConstraint()->{
//				return `FalseTL();				
//			}
//		}
//		return getTomMappingForConstraint(compiledApProblem,symbolTable,moduleName,kernelCompiler);
//		
//	}
	
	/**
	 * Compiles the anti-pattern matching problem that it received
	 * 
	 * @param action
	 * @param tomTerm
	 * @param rootpath
	 * @param moduleName
	 * @return compiled expresion
	 */	
	public static Expression getAntiPatternMatchExpression(Instruction action,
			TomTerm tomTerm,
			TomNumberList rootpath,
			TomName slotName,
			String moduleName,
			SymbolTable symbolTable,
			Instruction subAction,
			TomKernelCompiler kernelCompiler) {
		
		// resent container 
		varAssignments = null;
				
		// subject to be matched
		TomTerm subject = null;		
		subject = getSubjectVariableAST(tomTerm,rootpath,symbolTable,slotName,moduleName);
		
		// transform the anti-pattern match problem into
		// a disunification one
//		Constraint disunificationProblem = TomAntiPatternTransform.transform(
//				`EqualConstraint(tomTerm,subject));
//		// launch the constraint compiler
//		Constraint compiledApProblem = TomConstraintCompiler.compile(disunificationProblem);
		
		Collection quantifiedVarList = new ArrayList();
		Collection freeVarList = new ArrayList();
		Constraint transformedProblem = TomAntiPatternTransformNew.transform(
				tom_make_EqualConstraint(tomTerm,subject),quantifiedVarList,freeVarList);
		
		// launch the antipattern compiler
		Constraint compiledApProblem = TomAntiPatternCompiler.compile(transformedProblem,quantifiedVarList,freeVarList);					
		
		ArrayList variablesList = new ArrayList();
		ArrayList assignedValues = new ArrayList();
		ArrayList constraintsList = new ArrayList();
		ArrayList constraintsListAssign = new ArrayList();
			
		compiledApProblem = (Constraint)tom_make_InnermostId(tom_make_ExtractVariablesAndAssignments(variablesList,assignedValues,constraintsList,constraintsListAssign,symbolTable,moduleName))
.apply(compiledApProblem);
				
//		System.out.println("No variables constraint:" + /*TomAntiPatternUtils.formatConstraint(*/compiledApProblem);
		
		// builds the variables' assignment
		if (!variablesList.isEmpty()){
			varAssignments = buildVariableAssignment(variablesList,assignedValues,subAction);
		}
		// builds the assignment for the annotations
		if (!constraintsList.isEmpty()){
			varAssignments = buildVariableAssignment(constraintsList,constraintsListAssign,
					varAssignments == null ? subAction : varAssignments);
		}
		
		 if(compiledApProblem instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match2_1=(( tom.engine.adt.tomconstraint.types.Constraint )compiledApProblem); if ( ( tom_is_fun_sym_TrueConstraint(tom_match2_1) ||  false  ) ) { if ( true ) {

				return tom_make_TrueTL();				 
			 } } if ( ( tom_is_fun_sym_FalseConstraint(tom_match2_1) ||  false  ) ) { if ( true ) {

				return tom_make_FalseTL();				
			 } } } }

		return getTomMappingForConstraint(compiledApProblem,symbolTable,moduleName,kernelCompiler);
		
	}	
	
	/**
	 * returns the AST variable to be matched
	 */
	private static TomTerm getSubjectVariableAST(TomTerm tomTerm, 
			TomNumberList rootpath,
			SymbolTable symbolTable,
			TomName slotName,
			String moduleName) {		
    TomType codomain = TomBase.getTermType(tomTerm,symbolTable);
    TomNumberList path  = tom_append_list_concTomNumber(rootpath,tom_cons_list_concTomNumber(tom_make_NameNumber(slotName),tom_empty_list_concTomNumber()));
    TomTerm subjectVariableAST =  tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(path),codomain,tom_empty_list_concConstraint());
        
    return subjectVariableAST;
	}
	
	/**
	 * Extracts the variables and the annotated terms (for the assigments) 
	 */
	 private static class ExtractVariablesAndAssignments  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  java.util.ArrayList  varList;  private  java.util.ArrayList  assignedValues;  private  java.util.ArrayList  constraintsList;  private  java.util.ArrayList  constraintsListAssign;  private  SymbolTable  symbolTable;  private  String  moduleName;  public ExtractVariablesAndAssignments(  java.util.ArrayList  varList ,   java.util.ArrayList  assignedValues ,   java.util.ArrayList  constraintsList ,   java.util.ArrayList  constraintsListAssign ,   SymbolTable  symbolTable ,   String  moduleName ) { super(tom_make_Identity() ); this.varList=varList; this.assignedValues=assignedValues; this.constraintsList=constraintsList; this.constraintsListAssign=constraintsListAssign; this.symbolTable=symbolTable; this.moduleName=moduleName; } public  java.util.ArrayList  getvarList() { return varList;} public  java.util.ArrayList  getassignedValues() { return assignedValues;} public  java.util.ArrayList  getconstraintsList() { return constraintsList;} public  java.util.ArrayList  getconstraintsListAssign() { return constraintsListAssign;} public  SymbolTable  getsymbolTable() { return symbolTable;} public  String  getmoduleName() { return moduleName;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match3_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); if ( ( tom_is_fun_sym_AndConstraint(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla=tom_get_slot_AndConstraint_cla(tom_match3_1); if ( ( tom_is_fun_sym_concAnd(tom_match3_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla_list1=tom_match3_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla_begin1=tom_match3_1_cla_list1; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla_end1=tom_match3_1_cla_list1; { while (!(tom_is_empty_concAnd_AConstraintList(tom_match3_1_cla_end1))) {tom_match3_1_cla_list1=tom_match3_1_cla_end1; { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_X=tom_get_slice_concAnd(tom_match3_1_cla_begin1,tom_match3_1_cla_end1); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match3_1_cla_end2=tom_match3_1_cla_list1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match3_1_cla_2=tom_get_head_concAnd_AConstraintList(tom_match3_1_cla_list1);tom_match3_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match3_1_cla_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match3_1_cla_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_cla_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match3_1_cla_2); if ( ( tom_is_fun_sym_Variable(tom_match3_1_cla_2_pattern) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons=tom_get_slot_Variable_Constraints(tom_match3_1_cla_2_pattern); { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match3_1_cla_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_get_slot_EqualConstraint_genTerm(tom_match3_1_cla_2); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Y=tom_match3_1_cla_list1; if ( true ) {





				varList.add(tom_v);
				Expression transTerm = transformTerm(tom_t,symbolTable,moduleName);
				assignedValues.add(transTerm);
				
				if (tom_cons!= null && !tom_cons.isEmptyconcConstraint()){
					
					TomTerm assignedVar = ((AssignTo)tom_cons.getHeadconcConstraint()).getVariable();
					
					if (!constraintsList.contains(assignedVar)){					
						constraintsList.add(assignedVar);
						constraintsListAssign.add(transTerm);					
					}
				}
				
				return tom_make_AndConstraint(tom_append_list_concAnd(tom_X,tom_append_list_concAnd(tom_Y,tom_empty_list_concAnd())));
			 } } } } } } } } }tom_match3_1_cla_list1=tom_match3_1_cla_end2; } } }tom_match3_1_cla_end1=tom_get_tail_concAnd_AConstraintList(tom_match3_1_cla_end1); } }tom_match3_1_cla_list1=tom_match3_1_cla_begin1; } } } } } } } if ( ( tom_is_fun_sym_EqualConstraint(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match3_1); if ( ( tom_is_fun_sym_RecordAppl(tom_match3_1_pattern) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons=tom_get_slot_RecordAppl_Constraints(tom_match3_1_pattern); { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_get_slot_EqualConstraint_genTerm(tom_match3_1); if ( true ) {

				
				if (tom_cons!= null && !tom_cons.isEmptyconcConstraint()){
					
					TomTerm assignedVar = ((AssignTo)tom_cons.getHeadconcConstraint()).getVariable();
					
					if (!constraintsList.contains(assignedVar)){
					
						constraintsList.add(assignedVar);
						if (tom_t
instanceof SymbolOf){
							constraintsListAssign.add(transformTerm(((SymbolOf)tom_t).getGroundTerm(),symbolTable,moduleName));
						}else{
							constraintsListAssign.add(transformTerm(tom_t,symbolTable,moduleName));
						}
					}					
				} 
			 } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match3_1_clo=tom_get_slot_OrConstraint_clo(tom_match3_1); if ( ( tom_is_fun_sym_concOr(tom_match3_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match3_1_clo_list1=tom_match3_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match3_1_clo_begin1=tom_match3_1_clo_list1; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match3_1_clo_end1=tom_match3_1_clo_list1; { while (!(tom_is_empty_concOr_OConstraintList(tom_match3_1_clo_end1))) {tom_match3_1_clo_list1=tom_match3_1_clo_end1; { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_X=tom_get_slice_concOr(tom_match3_1_clo_begin1,tom_match3_1_clo_end1); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match3_1_clo_end2=tom_match3_1_clo_list1; { { tom.engine.adt.tomconstraint.types.Constraint  tom_match3_1_clo_2=tom_get_head_concOr_OConstraintList(tom_match3_1_clo_list1);tom_match3_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match3_1_clo_list1); if ( ( tom_is_fun_sym_EqualConstraint(tom_match3_1_clo_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_clo_2_pattern=tom_get_slot_EqualConstraint_pattern(tom_match3_1_clo_2); if ( ( tom_is_fun_sym_Variable(tom_match3_1_clo_2_pattern) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons=tom_get_slot_Variable_Constraints(tom_match3_1_clo_2_pattern); { tom.engine.adt.tomterm.types.TomTerm  tom_v=tom_match3_1_clo_2_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_get_slot_EqualConstraint_genTerm(tom_match3_1_clo_2); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Y=tom_match3_1_clo_list1; if ( true ) {

				varList.add(tom_v);
				Expression transTerm = transformTerm(tom_t,symbolTable,moduleName);
				assignedValues.add(transTerm);
				
				if (tom_cons!= null && !tom_cons.isEmptyconcConstraint()){
					constraintsList.add(((AssignTo)tom_cons.getHeadconcConstraint()).getVariable());
					constraintsListAssign.add(transTerm);
				}
				
				return tom_make_TrueConstraint();
				//return `OrConstraint(concOr(X*,Y*));
			 } } } } } } } } }tom_match3_1_clo_list1=tom_match3_1_clo_end2; } } }tom_match3_1_clo_end1=tom_get_tail_concOr_OConstraintList(tom_match3_1_clo_end1); } }tom_match3_1_clo_list1=tom_match3_1_clo_begin1; } } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ExtractVariablesAndAssignments( java.util.ArrayList  t0,  java.util.ArrayList  t1,  java.util.ArrayList  t2,  java.util.ArrayList  t3,  SymbolTable  t4,  String  t5) { return new ExtractVariablesAndAssignments(t0,t1,t2,t3,t4,t5); }


	
	private static Instruction buildVariableAssignment(ArrayList varList, 
			ArrayList varValues,			
			Instruction subAction){
		
		if (varList.isEmpty()) {
			return subAction;
		}
		
		TomTerm var = (TomTerm)varList.get(0);
		Expression expr = (Expression)varValues.get(0);
		varList.remove(0);
		varValues.remove(0);
		
		return tom_make_Let(var,expr,buildVariableAssignment(varList,varValues,subAction));
	}
	
	private static Expression getTomMappingForConstraint(Constraint c,
			SymbolTable symbolTable,
			String moduleName,
			TomKernelCompiler kernelCompiler) {
		
		 if(c instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match4_1=(( tom.engine.adt.tomconstraint.types.Constraint )c); if ( ( tom_is_fun_sym_AndConstraint(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match4_1_cla=tom_get_slot_AndConstraint_cla(tom_match4_1); if ( ( tom_is_fun_sym_concAnd(tom_match4_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match4_1_cla_list1=tom_match4_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match4_1_cla_end1=tom_match4_1_cla_list1; { if (!(tom_is_empty_concAnd_AConstraintList(tom_match4_1_cla_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_x=tom_get_head_concAnd_AConstraintList(tom_match4_1_cla_list1);tom_match4_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match4_1_cla_list1); if (tom_is_empty_concAnd_AConstraintList(tom_match4_1_cla_list1)) { if ( true ) {

				return getTomMappingForConstraint(tom_x,symbolTable,moduleName,kernelCompiler);
		     } } } }tom_match4_1_cla_list1=tom_match4_1_cla_end1; } } } } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match4_1_cla=tom_get_slot_AndConstraint_cla(tom_match4_1); if ( ( tom_is_fun_sym_concAnd(tom_match4_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match4_1_cla_list1=tom_match4_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match4_1_cla_end1=tom_match4_1_cla_list1; { if (!(tom_is_empty_concAnd_AConstraintList(tom_match4_1_cla_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_a=tom_get_head_concAnd_AConstraintList(tom_match4_1_cla_list1);tom_match4_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match4_1_cla_list1); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_b=tom_match4_1_cla_list1; if ( true ) {

				return tom_make_And(getTomMappingForConstraint(tom_a,symbolTable,moduleName,kernelCompiler),getTomMappingForConstraint(tom_make_AndConstraint(tom_append_list_concAnd(tom_b,tom_empty_list_concAnd())),symbolTable,moduleName,kernelCompiler))
;
			 } } } }tom_match4_1_cla_list1=tom_match4_1_cla_end1; } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match4_1_clo=tom_get_slot_OrConstraint_clo(tom_match4_1); if ( ( tom_is_fun_sym_concOr(tom_match4_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match4_1_clo_list1=tom_match4_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match4_1_clo_end1=tom_match4_1_clo_list1; { if (!(tom_is_empty_concOr_OConstraintList(tom_match4_1_clo_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_a=tom_get_head_concOr_OConstraintList(tom_match4_1_clo_list1);tom_match4_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match4_1_clo_list1); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_b=tom_match4_1_clo_list1; if ( true ) {




				return tom_make_Or(getTomMappingForConstraint(tom_a,symbolTable,moduleName,kernelCompiler),getTomMappingForConstraint(tom_make_OrConstraint(tom_append_list_concOr(tom_b,tom_empty_list_concOr())),symbolTable,moduleName,kernelCompiler))
;
			 } } } }tom_match4_1_clo_list1=tom_match4_1_clo_end1; } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match4_1_clo=tom_get_slot_OrConstraint_clo(tom_match4_1); if ( ( tom_is_fun_sym_concOr(tom_match4_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match4_1_clo_list1=tom_match4_1_clo; if (tom_is_empty_concOr_OConstraintList(tom_match4_1_clo_list1)) { if ( true ) {

				return tom_make_FalseTL();
			 } } } } } } {boolean tom_bool_match4_1= false ; { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1_pattern= null ; { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1_genTerm= null ; if (tom_is_fun_sym_EqualConstraint(tom_match4_1)) {tom_bool_match4_1= true ;tom_match4_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match4_1);tom_match4_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match4_1); } else { if (tom_is_fun_sym_NEqualConstraint(tom_match4_1)) {tom_bool_match4_1= true ;tom_match4_1_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match4_1);tom_match4_1_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match4_1); } } if (tom_bool_match4_1) { { tom.engine.adt.tomterm.types.TomTerm  tom_t=tom_match4_1_pattern; if ( ( tom_is_fun_sym_SymbolOf(tom_match4_1_genTerm) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_term=tom_get_slot_SymbolOf_GroundTerm(tom_match4_1_genTerm); { tom.engine.adt.tomconstraint.types.Constraint  tom_pattern=tom_match4_1; if ( true ) {

				
				TomType type = null;
				TomTerm transformedTerm = null;
				
				// if it is a Subterm
				if (tom_term
instanceof Subterm){
					Expression exprTrans = transformTerm(tom_term,symbolTable,moduleName);
					transformedTerm = tom_make_ExpressionToTomTerm(exprTrans);
					type = exprTrans.getCodomain();
				}else{ 
					type = TomBase.getTermType(tom_term,symbolTable);
					transformedTerm = tom_term;
				}
				
				Expression result = kernelCompiler.expandDisjunction(tom_make_EqualFunctionSymbol(type,transformedTerm,tom_t),moduleName);
				
				return (tom_pattern
instanceof EqualConstraint) ? result : tom_make_Negation(result);				
			 } } } } } } } } } if ( ( tom_is_fun_sym_Neg(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_constraint=tom_get_slot_Neg_c(tom_match4_1); if ( true ) {

				return tom_make_Negation(getTomMappingForConstraint(tom_constraint,symbolTable,moduleName,kernelCompiler))
;
							
			 } } } {boolean tom_bool_match4_1= false ; { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1_pattern= null ; { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1_genTerm= null ; if (tom_is_fun_sym_EqualConstraint(tom_match4_1)) {tom_bool_match4_1= true ;tom_match4_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match4_1);tom_match4_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match4_1); } else { if (tom_is_fun_sym_NEqualConstraint(tom_match4_1)) {tom_bool_match4_1= true ;tom_match4_1_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match4_1);tom_match4_1_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match4_1); } } if (tom_bool_match4_1) { { tom.engine.adt.tomterm.types.TomTerm  tom_t1=tom_match4_1_pattern; { tom.engine.adt.tomterm.types.TomTerm  tom_t2=tom_match4_1_genTerm; { tom.engine.adt.tomconstraint.types.Constraint  tom_pattern=tom_match4_1; if ( true ) {

				
				Expression transformedT1 = transformTerm(tom_t1,symbolTable,moduleName);
				Expression transformedT2 = transformTerm(tom_t2,symbolTable,moduleName);
				
				TomType type = null;
				
				// if the term was transformed in a GetSlot,
				// retreive the type directly 
				if (transformedT1 instanceof GetSlot){
					type = ((GetSlot)transformedT1).getCodomain();
				}else{
					type = TomBase.getTermType(tom_t1,symbolTable);
				}
				
				// type	should be the same
				if (tom_pattern
instanceof EqualConstraint){
					return tom_make_EqualTerm(type,tom_make_ExpressionToTomTerm(transformedT1),tom_make_ExpressionToTomTerm(transformedT2))

;
				}
				
				return tom_make_Negation(tom_make_EqualTerm(type,tom_make_ExpressionToTomTerm(transformedT1),tom_make_ExpressionToTomTerm(transformedT2)))

;
			 } } } } } } } } } }


		
		throw new TomRuntimeException("Strange constraint:" + c);
	}
	
	/**
	 * Transforms from "Subterm" to "GetSlot"
	 * @param t term to transform
	 * @return corresponding "GetSlot"
	 */
	private static Expression transformTerm(TomTerm t, 
			SymbolTable symbolTable,
			String moduleName) {		
		
		 if(t instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1=(( tom.engine.adt.tomterm.types.TomTerm )t); if ( ( tom_is_fun_sym_Subterm(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_constructorName=tom_get_slot_Subterm_AstName(tom_match5_1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_get_slot_Subterm_SlotName(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_currentTerm=tom_get_slot_Subterm_GroundTerm(tom_match5_1); if ( true ) {

                 		        
        	   
        	   // get the transformed term 
        	   Expression transformedTerm = transformTerm(tom_currentTerm,symbolTable,moduleName);
        	   
        	   // get the type for the subterm
        	   String tomName = null;
        	   if (tom_constructorName
instanceof AntiName){
        		   tomName = ((AntiName)tom_constructorName).getName().getString(); 
        	   }else{
        		   tomName = ((TomName)tom_constructorName).getString();
        	   } 
        	   TomSymbol tomSymbol = symbolTable.getSymbolFromName(tomName);
        	   TomType subtermType = TomBase.getSlotType(tomSymbol, tom_slotName);
        	   
        	   TomTerm var = null;
        	   
        	   // if we find just a wrapper, throw it away
        	   var = (transformedTerm instanceof TomTermToExpression) ? transformedTerm.getAstTerm():
        		   tom_make_ExpressionToTomTerm(transformedTerm);
        	   
        	   return tom_make_GetSlot(subtermType,tom_constructorName,tom_slotName.getString(),var)
;
		    } } } } } if ( ( tom_is_fun_sym_Variable(tom_match5_1) ||  ( tom_is_fun_sym_RecordAppl(tom_match5_1) ||  false  )  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_term=tom_match5_1; if ( true ) {
        	   
        	   return tom_make_TomTermToExpression(tom_term);        	   
            } } } } }

		throw new TomRuntimeException("Unable to transform term: " + t);
	}
	
	public static boolean containsVariable(Constraint c, TomTerm v){
		try {		
			MuTraveler.init(tom_make_OnceTopDown(tom_make_ConstraintContainsVariable(v))).visit(c);
      return true;
		} catch(jjtraveler.VisitFailure e) {
      return false;
		}
	}
	
	 private static class ConstraintContainsVariable  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  tom.engine.adt.tomterm.types.TomTerm  v;  public ConstraintContainsVariable(  tom.engine.adt.tomterm.types.TomTerm  v ) { super(tom_make_Fail() ); this.v=v; } public  tom.engine.adt.tomterm.types.TomTerm  getv() { return v;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint(  tom.engine.adt.tomconstraint.types.Constraint  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match6_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg); {boolean tom_bool_match6_1= false ; { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_pattern= null ; { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_genTerm= null ; if (tom_is_fun_sym_EqualConstraint(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_pattern=tom_get_slot_EqualConstraint_pattern(tom_match6_1);tom_match6_1_genTerm=tom_get_slot_EqualConstraint_genTerm(tom_match6_1); } else { if (tom_is_fun_sym_NEqualConstraint(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match6_1);tom_match6_1_genTerm=tom_get_slot_NEqualConstraint_genTerm(tom_match6_1); } } if (tom_bool_match6_1) { { tom.engine.adt.tomterm.types.TomTerm  tom_p=tom_match6_1_pattern; { tom.engine.adt.tomconstraint.types.Constraint  tom_c=tom_match6_1; if ( true ) {


				MuTraveler.init(tom_make_OnceTopDown(tom_make_TermContainsVariable(v))).visit(tom_p);
        return tom_c;
			 } } } } } } } } } return super.visit_Constraint(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ConstraintContainsVariable( tom.engine.adt.tomterm.types.TomTerm  t0) { return new ConstraintContainsVariable(t0); } private static class TermContainsVariable  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  tom.engine.adt.tomterm.types.TomTerm  v;  public TermContainsVariable(  tom.engine.adt.tomterm.types.TomTerm  v ) { super(tom_make_Fail() ); this.v=v; } public  tom.engine.adt.tomterm.types.TomTerm  getv() { return v;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_Variable(tom_match7_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tom_match7_1; if ( true ) {






				if (tom_var== v) {					
					return v;
				}
			 } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TermContainsVariable( tom.engine.adt.tomterm.types.TomTerm  t0) { return new TermContainsVariable(t0); }


	
	public static Instruction getVarAssignments(){
		return varAssignments;
	}
	
	/**
	 * Duplication of the method from TomKernelCompiler
	 *  - when it becomes static
	 */
	private Expression expandDisjunction(Expression exp, String moduleName) {
	    Expression cond = tom_make_FalseTL();
	     if(exp instanceof  tom.engine.adt.tomexpression.types.Expression ) { { tom.engine.adt.tomexpression.types.Expression  tom_match8_1=(( tom.engine.adt.tomexpression.types.Expression )exp); if ( ( tom_is_fun_sym_EqualFunctionSymbol(tom_match8_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match8_1_Exp2=tom_get_slot_EqualFunctionSymbol_Exp2(tom_match8_1); { tom.engine.adt.tomtype.types.TomType  tom_termType=tom_get_slot_EqualFunctionSymbol_AstType(tom_match8_1); { tom.engine.adt.tomterm.types.TomTerm  tom_exp1=tom_get_slot_EqualFunctionSymbol_Exp1(tom_match8_1); if ( ( tom_is_fun_sym_RecordAppl(tom_match8_1_Exp2) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_option=tom_get_slot_RecordAppl_Option(tom_match8_1_Exp2); { tom.engine.adt.tomname.types.TomNameList  tom_nameList=tom_get_slot_RecordAppl_NameList(tom_match8_1_Exp2); { tom.engine.adt.tomslot.types.SlotList  tom_l=tom_get_slot_RecordAppl_Slots(tom_match8_1_Exp2); if ( true ) {

	        while(!tom_nameList.isEmptyconcTomName()) {
	          TomName name = tom_nameList.getHeadconcTomName();
	          Expression check = tom_make_EqualFunctionSymbol(tom_termType,tom_exp1,tom_make_RecordAppl(tom_option,tom_cons_list_concTomName(name,tom_empty_list_concTomName()),tom_l,tom_empty_list_concConstraint()));
	          // to mark the symbol as alive
	          //getSymbolTable(moduleName).setUsedSymbolDestructor(name.getString());
	          cond = tom_make_Or(check,cond);
	          tom_nameList= tom_nameList.getTailconcTomName();
	        }
	       } } } } } } } } } } }

	    return cond;
	  }
	
	/**
	 * Given a constraint, it performs some formatting on it for better 
	 * readability (for debug purpose)
	 * 
	 * @param c 
	 * 			The constraint to format
	 * @return 
	 * 			Formatted constraint
	 */
	public static String formatConstraint(Constraint c){
		
		 if(c instanceof  tom.engine.adt.tomconstraint.types.Constraint ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_match9_1=(( tom.engine.adt.tomconstraint.types.Constraint )c); if ( ( tom_is_fun_sym_TrueConstraint(tom_match9_1) ||  false  ) ) { if ( true ) {

				return "T";	
			 } } if ( ( tom_is_fun_sym_FalseConstraint(tom_match9_1) ||  false  ) ) { if ( true ) {

				return "F";
			 } } if ( ( tom_is_fun_sym_Neg(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.Constraint  tom_cons=tom_get_slot_Neg_c(tom_match9_1); if ( true ) {

				return "Neg(" + formatConstraint(tom_cons) + ")";
			 } } } if ( ( tom_is_fun_sym_AndConstraint(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match9_1_cla=tom_get_slot_AndConstraint_cla(tom_match9_1); if ( ( tom_is_fun_sym_concAnd(tom_match9_1_cla) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match9_1_cla_list1=tom_match9_1_cla; { tom.engine.adt.tomconstraint.types.AConstraintList  tom_match9_1_cla_end1=tom_match9_1_cla_list1; { if (!(tom_is_empty_concAnd_AConstraintList(tom_match9_1_cla_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_x=tom_get_head_concAnd_AConstraintList(tom_match9_1_cla_list1);tom_match9_1_cla_list1=tom_get_tail_concAnd_AConstraintList(tom_match9_1_cla_list1); { tom.engine.adt.tomconstraint.types.AConstraintList  tom_Z=tom_match9_1_cla_list1; if ( true ) {

				
				AConstraintList l = tom_Z;
				String result = formatConstraint(tom_x);
				
				while(!l.isEmptyconcAnd()){
					result ="(" + result + " and " + formatConstraint(l.getHeadconcAnd()) +")";
					l = l.getTailconcAnd();
				}
				
				return result; 
			 } } } }tom_match9_1_cla_list1=tom_match9_1_cla_end1; } } } } } } if ( ( tom_is_fun_sym_OrConstraint(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match9_1_clo=tom_get_slot_OrConstraint_clo(tom_match9_1); if ( ( tom_is_fun_sym_concOr(tom_match9_1_clo) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match9_1_clo_list1=tom_match9_1_clo; { tom.engine.adt.tomconstraint.types.OConstraintList  tom_match9_1_clo_end1=tom_match9_1_clo_list1; { if (!(tom_is_empty_concOr_OConstraintList(tom_match9_1_clo_list1))) { { tom.engine.adt.tomconstraint.types.Constraint  tom_x=tom_get_head_concOr_OConstraintList(tom_match9_1_clo_list1);tom_match9_1_clo_list1=tom_get_tail_concOr_OConstraintList(tom_match9_1_clo_list1); { tom.engine.adt.tomconstraint.types.OConstraintList  tom_Z=tom_match9_1_clo_list1; if ( true ) {

				
				OConstraintList l = tom_Z;
				String result = formatConstraint(tom_x);
				
				while(!l.isEmptyconcOr()){
					result ="(" + result + " or " + formatConstraint(l.getHeadconcOr()) + ")";
					l = l.getTailconcOr();
				}
				
				return result; 
			 } } } }tom_match9_1_clo_list1=tom_match9_1_clo_end1; } } } } } } if ( ( tom_is_fun_sym_EqualConstraint(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_pattern=tom_get_slot_EqualConstraint_pattern(tom_match9_1); { tom.engine.adt.tomterm.types.TomTerm  tom_subject=tom_get_slot_EqualConstraint_genTerm(tom_match9_1); if ( true ) {

				return formatTerm(tom_pattern) + "=" + formatTerm(tom_subject); 
			 } } } } if ( ( tom_is_fun_sym_NEqualConstraint(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_pattern=tom_get_slot_NEqualConstraint_pattern(tom_match9_1); { tom.engine.adt.tomterm.types.TomTerm  tom_subject=tom_get_slot_NEqualConstraint_genTerm(tom_match9_1); if ( true ) {

				return formatTerm(tom_pattern) + "!=" + formatTerm(tom_subject); 
			 } } } } if ( ( tom_is_fun_sym_Exists(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match9_1_var=tom_get_slot_Exists_var(tom_match9_1); if ( ( tom_is_fun_sym_Variable(tom_match9_1_var) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_get_slot_Variable_AstName(tom_match9_1_var); { tom.engine.adt.tomconstraint.types.Constraint  tom_cons=tom_get_slot_Exists_cons(tom_match9_1); if ( true ) {

				return "exists " + tom_name+ ", ( " + formatConstraint(tom_cons) + " ) "; 
			 } } } } } } if ( ( tom_is_fun_sym_ForAll(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match9_1_var=tom_get_slot_ForAll_var(tom_match9_1); if ( ( tom_is_fun_sym_Variable(tom_match9_1_var) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_get_slot_Variable_AstName(tom_match9_1_var); { tom.engine.adt.tomconstraint.types.Constraint  tom_cons=tom_get_slot_ForAll_cons(tom_match9_1); if ( true ) {
				
				return "for all " + tom_name+ ", ( " + formatConstraint(tom_cons) + " ) ";				
			 } } } } } } } }




		
		return c.toString();
	}
	
	/**
	 * Given a TomTerm, it performs some formatting on it for better 
	 * readability (for debug purpose)
	 * 
	 * @param t 
	 * 			The term to format
	 * @return 
	 * 			Formatted term
	 */
	public static String formatTerm(TomTerm t){
		
		 if(t instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match10_1=(( tom.engine.adt.tomterm.types.TomTerm )t); if ( ( tom_is_fun_sym_Variable(tom_match10_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match10_1_AstName=tom_get_slot_Variable_AstName(tom_match10_1); if ( ( tom_is_fun_sym_Name(tom_match10_1_AstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tom_match10_1_AstName); if ( true ) {

				return tom_name;
			 } } } } } if ( ( tom_is_fun_sym_RecordAppl(tom_match10_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match10_1_NameList=tom_get_slot_RecordAppl_NameList(tom_match10_1); { tom.engine.adt.tomslot.types.SlotList  tom_match10_1_Slots=tom_get_slot_RecordAppl_Slots(tom_match10_1); if ( ( tom_is_fun_sym_concTomName(tom_match10_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match10_1_NameList_list1=tom_match10_1_NameList; { tom.engine.adt.tomname.types.TomNameList  tom_match10_1_NameList_end1=tom_match10_1_NameList_list1; { if (!(tom_is_empty_concTomName_TomNameList(tom_match10_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match10_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match10_1_NameList_list1);tom_match10_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match10_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match10_1_NameList_1) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tom_match10_1_NameList_1); if ( ( tom_is_fun_sym_concSlot(tom_match10_1_Slots) ||  false  ) ) { { tom.engine.adt.tomslot.types.SlotList  tom_match10_1_Slots_list1=tom_match10_1_Slots; if (tom_is_empty_concSlot_SlotList(tom_match10_1_Slots_list1)) { if ( true ) {

				return tom_name;
			 } } } } } } } }tom_match10_1_NameList_list1=tom_match10_1_NameList_end1; } } } } } } } if ( ( tom_is_fun_sym_AntiTerm(tom_match10_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_apl=tom_get_slot_AntiTerm_TomTerm(tom_match10_1); if ( true ) {

				return "!" + formatTerm(tom_apl);
			 } } } if ( ( tom_is_fun_sym_RecordAppl(tom_match10_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match10_1_NameList=tom_get_slot_RecordAppl_NameList(tom_match10_1); { tom.engine.adt.tomslot.types.SlotList  tom_match10_1_Slots=tom_get_slot_RecordAppl_Slots(tom_match10_1); if ( ( tom_is_fun_sym_concTomName(tom_match10_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match10_1_NameList_list1=tom_match10_1_NameList; { tom.engine.adt.tomname.types.TomNameList  tom_match10_1_NameList_end1=tom_match10_1_NameList_list1; { if (!(tom_is_empty_concTomName_TomNameList(tom_match10_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match10_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match10_1_NameList_list1);tom_match10_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match10_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match10_1_NameList_1) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tom_match10_1_NameList_1); if ( ( tom_is_fun_sym_concSlot(tom_match10_1_Slots) ||  false  ) ) { { tom.engine.adt.tomslot.types.SlotList  tom_match10_1_Slots_list1=tom_match10_1_Slots; { tom.engine.adt.tomslot.types.SlotList  tom_match10_1_Slots_end1=tom_match10_1_Slots_list1; { if (!(tom_is_empty_concSlot_SlotList(tom_match10_1_Slots_list1))) { { tom.engine.adt.tomslot.types.Slot  tom_match10_1_Slots_1=tom_get_head_concSlot_SlotList(tom_match10_1_Slots_list1);tom_match10_1_Slots_list1=tom_get_tail_concSlot_SlotList(tom_match10_1_Slots_list1); if ( ( tom_is_fun_sym_PairSlotAppl(tom_match10_1_Slots_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_x=tom_get_slot_PairSlotAppl_Appl(tom_match10_1_Slots_1); { tom.engine.adt.tomslot.types.SlotList  tom_Z=tom_match10_1_Slots_list1; if ( true ) {







				
				SlotList l = tom_Z;
				String result = formatTerm(tom_x);
				
				while(!l.isEmptyconcSlot()){
					result = result + "," + formatTerm(l.getHeadconcSlot().getAppl());
					l = l.getTailconcSlot();
				}
				
				return tom_name+ "(" + result + ")"; 
			 } } } } } }tom_match10_1_Slots_list1=tom_match10_1_Slots_end1; } } } } } } } }tom_match10_1_NameList_list1=tom_match10_1_NameList_end1; } } } } } } } } }


		
		return t.toString();
	}
	
}
