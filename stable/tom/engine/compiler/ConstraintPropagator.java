/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler;

import java.util.ArrayList;

import tom.engine.TomBase;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.compiler.propagator.*;
import tom.engine.exception.TomRuntimeException;
import tom.library.sl.*;

/**
 * This class is in charge with launching all the propagators,
 * until no more propagations can be made 
 */
public class ConstraintPropagator {

//------------------------------------------------------	
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */   /* Generated by TOM (version 2.6alpha): Do not edit this file */ private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_AssignTo( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.AssignTo) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AssignTo_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getVariable() ;}private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_MatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(t0, t1) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()).isEmptyAndConstraint() ) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),tom_append_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() :tom_empty_list_AndConstraint()),end,tail));     }   }   private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getHeadconcConstraint() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getTailconcConstraint() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.isEmptyconcConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( l1.getHeadconcConstraint() ,l2);     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2));     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if(tom_equal_term_ConstraintList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */             /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */   /* Generated by TOM (version 2.6alpha): Do not edit this file */ 



//------------------------------------------------------

  private static final String propagatorsPackage = "tom.engine.compiler.propagator.";

  private static final String[] propagatorsNames = {"SyntacticPropagator","VariadicPropagator","ArrayPropagator","GeneralPurposePropagator"};

  public static Constraint performPropagations(Constraint constraintToCompile) 
    throws ClassNotFoundException,InstantiationException,IllegalAccessException,VisitFailure{
    
    // counts the propagators that didn't change the expression
    int propCounter = 0;
    int propNb = propagatorsNames.length;    	

    // cache the propagators
    IBasePropagator[] prop = new IBasePropagator[propNb];
    for(int i=0 ; i < propNb ; i++) {
      prop[i] = (IBasePropagator)Class.forName(propagatorsPackage + propagatorsNames[i]).newInstance();
    }
    
    Constraint result= null;
    mainLoop: while(true) {
      for(int i=0 ; i < propNb ; i++) {
        result = prop[i].propagate(constraintToCompile);
        // if nothing was done, start counting 
        propCounter = (result == constraintToCompile) ? (propCounter+1) : 0;        
        // if we applied all the propagators and nothing changed,
        // it's time to stop
        if(propCounter == propNb) { break mainLoop; }
        // reinitialize
        constraintToCompile = result;
      }
    } // end while    
    return result;
  }
    
  /**
   * Detaches the annotations
   * 
   * a@...b@g(y) << t -> g(y) << t /\ a << t /\ ... /\ b << t
   * 
   * For variableStars: a@...b@X* << t -> Z* << t /\ X* << Z* /\ a << Z* /\ ... /\ b << Z*  
   * This is because the varStars can have at the rhs something that will generate loops,
   * and we don't want to duplicate that to the constraints  
   */
  public static Constraint performDetach(Constraint subject) {    
    Constraint result = tom_empty_list_AndConstraint(); 
    if (tom_is_sort_Constraint(subject)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch154NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )subject);if (tom_is_fun_sym_MatchConstraint(tomMatch154NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch154NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch154NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch154NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch154NameNumberfreshSubject_1);{ boolean tomMatch154NameNumber_freshVar_5= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch154NameNumber_freshVar_2= null ;if (tom_is_fun_sym_RecordAppl(tomMatch154NameNumber_freshVar_0)) {{tomMatch154NameNumber_freshVar_5= true ;tomMatch154NameNumber_freshVar_2=tom_get_slot_RecordAppl_Constraints(tomMatch154NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_Variable(tomMatch154NameNumber_freshVar_0)) {{tomMatch154NameNumber_freshVar_5= true ;tomMatch154NameNumber_freshVar_2=tom_get_slot_Variable_Constraints(tomMatch154NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_UnamedVariable(tomMatch154NameNumber_freshVar_0)) {{tomMatch154NameNumber_freshVar_5= true ;tomMatch154NameNumber_freshVar_2=tom_get_slot_UnamedVariable_Constraints(tomMatch154NameNumber_freshVar_0);}}}}if ((tomMatch154NameNumber_freshVar_5 ==  true )) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch154NameNumber_freshVar_2;{ boolean tomMatch154NameNumber_freshVar_4= false ;if (tom_is_fun_sym_concConstraint(tomMatch154NameNumber_freshVar_2)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch154NameNumber_freshVar_3=tomMatch154NameNumber_freshVar_2;if (tom_equal_term_ConstraintList(tomMatch154NameNumber_freshVar_2, tomMatch154NameNumber_freshVar_2)) {if (tom_is_empty_concConstraint_ConstraintList(tomMatch154NameNumber_freshVar_3)) {tomMatch154NameNumber_freshVar_4= true ;}}}}if ((tomMatch154NameNumber_freshVar_4 ==  false )) {if ( true ) {if (tom_is_sort_ConstraintList(tom_constraints)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_constraints);if (tom_is_fun_sym_concConstraint(tomMatch155NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_freshVar_0=tomMatch155NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_begin_2=tomMatch155NameNumber_freshVar_0;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_end_3=tomMatch155NameNumber_freshVar_0;do {{{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_freshVar_1=tomMatch155NameNumber_end_3;if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch155NameNumber_freshVar_1))) {if (tom_is_fun_sym_AssignTo(tom_get_head_concConstraint_ConstraintList(tomMatch155NameNumber_freshVar_1))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch155NameNumber_freshVar_6=tom_get_slot_AssignTo_Variable(tom_get_head_concConstraint_ConstraintList(tomMatch155NameNumber_freshVar_1));{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_freshVar_4=tom_get_tail_concConstraint_ConstraintList(tomMatch155NameNumber_freshVar_1);if ( true ) {



            // add constraint to the list
            result = tom_cons_list_AndConstraint(tom_make_MatchConstraint(tomMatch155NameNumber_freshVar_6,tomMatch154NameNumber_freshVar_1),tom_append_list_AndConstraint(result,tom_empty_list_AndConstraint()));                                                                                                                       
          }}}}}}if (tom_is_empty_concConstraint_ConstraintList(tomMatch155NameNumber_end_3)) {tomMatch155NameNumber_end_3=tomMatch155NameNumber_begin_2;} else {tomMatch155NameNumber_end_3=tom_get_tail_concConstraint_ConstraintList(tomMatch155NameNumber_end_3);}}} while(!(tom_equal_term_ConstraintList(tomMatch155NameNumber_end_3, tomMatch155NameNumber_begin_2)));}}}}}}
// end match   
      }}}}}}}}}}if (tom_is_fun_sym_MatchConstraint(tomMatch154NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch154NameNumber_freshVar_6=tom_get_slot_MatchConstraint_pattern(tomMatch154NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch154NameNumber_freshVar_7=tom_get_slot_MatchConstraint_subject(tomMatch154NameNumberfreshSubject_1);{ boolean tomMatch154NameNumber_freshVar_12= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch154NameNumber_freshVar_9= null ;{  tom.engine.adt.tomtype.types.TomType  tomMatch154NameNumber_freshVar_8= null ;if (tom_is_fun_sym_VariableStar(tomMatch154NameNumber_freshVar_6)) {{tomMatch154NameNumber_freshVar_12= true ;tomMatch154NameNumber_freshVar_8=tom_get_slot_VariableStar_AstType(tomMatch154NameNumber_freshVar_6);tomMatch154NameNumber_freshVar_9=tom_get_slot_VariableStar_Constraints(tomMatch154NameNumber_freshVar_6);}} else {if (tom_is_fun_sym_UnamedVariableStar(tomMatch154NameNumber_freshVar_6)) {{tomMatch154NameNumber_freshVar_12= true ;tomMatch154NameNumber_freshVar_8=tom_get_slot_UnamedVariableStar_AstType(tomMatch154NameNumber_freshVar_6);tomMatch154NameNumber_freshVar_9=tom_get_slot_UnamedVariableStar_Constraints(tomMatch154NameNumber_freshVar_6);}}}if ((tomMatch154NameNumber_freshVar_12 ==  true )) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch154NameNumber_freshVar_9;{ boolean tomMatch154NameNumber_freshVar_11= false ;if (tom_is_fun_sym_concConstraint(tomMatch154NameNumber_freshVar_9)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch154NameNumber_freshVar_10=tomMatch154NameNumber_freshVar_9;if (tom_equal_term_ConstraintList(tomMatch154NameNumber_freshVar_9, tomMatch154NameNumber_freshVar_9)) {if (tom_is_empty_concConstraint_ConstraintList(tomMatch154NameNumber_freshVar_10)) {tomMatch154NameNumber_freshVar_11= true ;}}}}if ((tomMatch154NameNumber_freshVar_11 ==  false )) {if ( true ) {
        
        TomTerm freshVariable = ConstraintCompiler.getFreshVariableStar(tomMatch154NameNumber_freshVar_8);
        if (tom_is_sort_ConstraintList(tom_constraints)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_constraints);if (tom_is_fun_sym_concConstraint(tomMatch156NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_freshVar_0=tomMatch156NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_begin_2=tomMatch156NameNumber_freshVar_0;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_end_3=tomMatch156NameNumber_freshVar_0;do {{{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_freshVar_1=tomMatch156NameNumber_end_3;if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch156NameNumber_freshVar_1))) {if (tom_is_fun_sym_AssignTo(tom_get_head_concConstraint_ConstraintList(tomMatch156NameNumber_freshVar_1))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch156NameNumber_freshVar_6=tom_get_slot_AssignTo_Variable(tom_get_head_concConstraint_ConstraintList(tomMatch156NameNumber_freshVar_1));{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_freshVar_4=tom_get_tail_concConstraint_ConstraintList(tomMatch156NameNumber_freshVar_1);if ( true ) {

            result = tom_cons_list_AndConstraint(tom_make_MatchConstraint(tomMatch156NameNumber_freshVar_6,freshVariable),tom_append_list_AndConstraint(result,tom_empty_list_AndConstraint()));                                                                                                                       
          }}}}}}if (tom_is_empty_concConstraint_ConstraintList(tomMatch156NameNumber_end_3)) {tomMatch156NameNumber_end_3=tomMatch156NameNumber_begin_2;} else {tomMatch156NameNumber_end_3=tom_get_tail_concConstraint_ConstraintList(tomMatch156NameNumber_end_3);}}} while(!(tom_equal_term_ConstraintList(tomMatch156NameNumber_end_3, tomMatch156NameNumber_begin_2)));}}}}}}
// end match   
        result = tom_cons_list_AndConstraint(tom_make_MatchConstraint(freshVariable,tomMatch154NameNumber_freshVar_7),tom_cons_list_AndConstraint(tom_make_MatchConstraint(tomMatch154NameNumber_freshVar_6.setConstraints(tom_empty_list_concConstraint()),freshVariable),tom_append_list_AndConstraint(result,tom_empty_list_AndConstraint())))
;
      }}}}}}}}}}}}}

    return result;
  }  
}
