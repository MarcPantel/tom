/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler;

import java.util.ArrayList;

import tom.engine.TomBase;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.compiler.propagator.*;
import tom.engine.exception.TomRuntimeException;
import tom.library.sl.*;

/**
 * This class is in charge with launching all the propagators,
 * until no more propagations can be made 
 */
public class ConstraintPropagator {

//------------------------------------------------------	
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_char(char t) { return  true ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_int(int t) { return  true ;} private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()).isEmptyAndConstraint() ) {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),l2) ;       } else {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),tom_append_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()),l2)) ;       }     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() :tom_empty_list_AndConstraint()),end,tail)) ;     }   }   private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */             /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */   /* Generated by TOM (version 2.6alpha): Do not edit this file */ 



//------------------------------------------------------

  private static final String propagatorsPackage = "tom.engine.compiler.propagator.";

  private static final String[] propagatorsNames = {"SyntacticPropagator","VariadicPropagator","ArrayPropagator","GeneralPurposePropagator"};

  public static Constraint performPropagations(Constraint constraintToCompile) 
    throws ClassNotFoundException,InstantiationException,IllegalAccessException,VisitFailure{
    
    // counts the propagators that didn't change the expression
    int propCounter = 0;
    int propNb = propagatorsNames.length;    	

    // cache the propagators
    IBasePropagator[] prop = new IBasePropagator[propNb];
    for(int i=0 ; i < propNb ; i++) {
      prop[i] = (IBasePropagator)Class.forName(propagatorsPackage + propagatorsNames[i]).newInstance();
    }
    
    Constraint result= null;
    mainLoop: while(true) {
      for(int i=0 ; i < propNb ; i++) {
        result = prop[i].propagate(constraintToCompile);
        // if nothing was done, start counting 
        propCounter = (result == constraintToCompile) ? (propCounter+1) : 0;        
        // if we applied all the propagators and nothing changed,
        // it's time to stop
        if(propCounter == propNb) { break mainLoop; }
        // reinitialize
        constraintToCompile = result;
      }
    } // end while    
    return result;
  }
    
  /**
   * Detaches the annotations
   * 
   * a@...b@g(y) << t -> g(y) << t /\ a << t /\ ... /\ b << t
   * 
   * For variableStars: a@...b@X* << t -> Z* << t /\ X* << Z* /\ a << Z* /\ ... /\ b << Z*  
   * This is because the varStars can have at the rhs something that will generate loops,
   * and we don't want to duplicate that to the constraints  
   */
  public static Constraint performDetach(Constraint subject) {    
    Constraint result = tom_empty_list_AndConstraint(); 
    if ( subject instanceof tom.engine.adt.tomconstraint.types.Constraint ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch155NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )subject);if ( (tomMatch155NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch155NameNumber_freshVar_0= tomMatch155NameNumberfreshSubject_1.getpattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch155NameNumber_freshVar_1= tomMatch155NameNumberfreshSubject_1.getsubject() ;{ boolean tomMatch155NameNumber_freshVar_5= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_freshVar_2= null ;if ( (tomMatch155NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{tomMatch155NameNumber_freshVar_5= true ;tomMatch155NameNumber_freshVar_2= tomMatch155NameNumber_freshVar_0.getConstraints() ;}} else {if ( (tomMatch155NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{tomMatch155NameNumber_freshVar_5= true ;tomMatch155NameNumber_freshVar_2= tomMatch155NameNumber_freshVar_0.getConstraints() ;}} else {if ( (tomMatch155NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ) {{tomMatch155NameNumber_freshVar_5= true ;tomMatch155NameNumber_freshVar_2= tomMatch155NameNumber_freshVar_0.getConstraints() ;}}}}if ((tomMatch155NameNumber_freshVar_5 ==  true )) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch155NameNumber_freshVar_2;{ boolean tomMatch155NameNumber_freshVar_4= false ;if ( ((tomMatch155NameNumber_freshVar_2 instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (tomMatch155NameNumber_freshVar_2 instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_freshVar_3=tomMatch155NameNumber_freshVar_2;if ( tomMatch155NameNumber_freshVar_2.equals(tomMatch155NameNumber_freshVar_2) ) {if ( tomMatch155NameNumber_freshVar_3.isEmptyconcConstraint() ) {tomMatch155NameNumber_freshVar_4= true ;}}}}if ((tomMatch155NameNumber_freshVar_4 ==  false )) {if ( true ) {if ( tom_constraints instanceof tom.engine.adt.tomconstraint.types.ConstraintList ) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_constraints);if ( ((tomMatch156NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (tomMatch156NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_freshVar_0=tomMatch156NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_begin_2=tomMatch156NameNumber_freshVar_0;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_end_3=tomMatch156NameNumber_freshVar_0;do {{{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_freshVar_1=tomMatch156NameNumber_end_3;if (!( tomMatch156NameNumber_freshVar_1.isEmptyconcConstraint() )) {if ( ( tomMatch156NameNumber_freshVar_1.getHeadconcConstraint()  instanceof tom.engine.adt.tomconstraint.types.constraint.AssignTo) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch156NameNumber_freshVar_6=  tomMatch156NameNumber_freshVar_1.getHeadconcConstraint() .getVariable() ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch156NameNumber_freshVar_4= tomMatch156NameNumber_freshVar_1.getTailconcConstraint() ;if ( true ) {



            // add constraint to the list
            result =  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tomMatch156NameNumber_freshVar_6, tomMatch155NameNumber_freshVar_1) ,tom_append_list_AndConstraint(result,tom_empty_list_AndConstraint())) ;                                                                                                                       
          }}}}}}if ( tomMatch156NameNumber_end_3.isEmptyconcConstraint() ) {tomMatch156NameNumber_end_3=tomMatch156NameNumber_begin_2;} else {tomMatch156NameNumber_end_3= tomMatch156NameNumber_end_3.getTailconcConstraint() ;}}} while(!( tomMatch156NameNumber_end_3.equals(tomMatch156NameNumber_begin_2) ));}}}}}}
// end match   
      }}}}}}}}}}if ( (tomMatch155NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch155NameNumber_freshVar_6= tomMatch155NameNumberfreshSubject_1.getpattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch155NameNumber_freshVar_7= tomMatch155NameNumberfreshSubject_1.getsubject() ;{ boolean tomMatch155NameNumber_freshVar_12= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_freshVar_9= null ;{  tom.engine.adt.tomtype.types.TomType  tomMatch155NameNumber_freshVar_8= null ;if ( (tomMatch155NameNumber_freshVar_6 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{tomMatch155NameNumber_freshVar_12= true ;tomMatch155NameNumber_freshVar_8= tomMatch155NameNumber_freshVar_6.getAstType() ;tomMatch155NameNumber_freshVar_9= tomMatch155NameNumber_freshVar_6.getConstraints() ;}} else {if ( (tomMatch155NameNumber_freshVar_6 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ) {{tomMatch155NameNumber_freshVar_12= true ;tomMatch155NameNumber_freshVar_8= tomMatch155NameNumber_freshVar_6.getAstType() ;tomMatch155NameNumber_freshVar_9= tomMatch155NameNumber_freshVar_6.getConstraints() ;}}}if ((tomMatch155NameNumber_freshVar_12 ==  true )) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch155NameNumber_freshVar_9;{ boolean tomMatch155NameNumber_freshVar_11= false ;if ( ((tomMatch155NameNumber_freshVar_9 instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (tomMatch155NameNumber_freshVar_9 instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch155NameNumber_freshVar_10=tomMatch155NameNumber_freshVar_9;if ( tomMatch155NameNumber_freshVar_9.equals(tomMatch155NameNumber_freshVar_9) ) {if ( tomMatch155NameNumber_freshVar_10.isEmptyconcConstraint() ) {tomMatch155NameNumber_freshVar_11= true ;}}}}if ((tomMatch155NameNumber_freshVar_11 ==  false )) {if ( true ) {
        
        TomTerm freshVariable = ConstraintCompiler.getFreshVariableStar(tomMatch155NameNumber_freshVar_8);
        if ( tom_constraints instanceof tom.engine.adt.tomconstraint.types.ConstraintList ) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch157NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_constraints);if ( ((tomMatch157NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (tomMatch157NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch157NameNumber_freshVar_0=tomMatch157NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch157NameNumber_begin_2=tomMatch157NameNumber_freshVar_0;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch157NameNumber_end_3=tomMatch157NameNumber_freshVar_0;do {{{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch157NameNumber_freshVar_1=tomMatch157NameNumber_end_3;if (!( tomMatch157NameNumber_freshVar_1.isEmptyconcConstraint() )) {if ( ( tomMatch157NameNumber_freshVar_1.getHeadconcConstraint()  instanceof tom.engine.adt.tomconstraint.types.constraint.AssignTo) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch157NameNumber_freshVar_6=  tomMatch157NameNumber_freshVar_1.getHeadconcConstraint() .getVariable() ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch157NameNumber_freshVar_4= tomMatch157NameNumber_freshVar_1.getTailconcConstraint() ;if ( true ) {

            result =  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tomMatch157NameNumber_freshVar_6, freshVariable) ,tom_append_list_AndConstraint(result,tom_empty_list_AndConstraint())) ;                                                                                                                       
          }}}}}}if ( tomMatch157NameNumber_end_3.isEmptyconcConstraint() ) {tomMatch157NameNumber_end_3=tomMatch157NameNumber_begin_2;} else {tomMatch157NameNumber_end_3= tomMatch157NameNumber_end_3.getTailconcConstraint() ;}}} while(!( tomMatch157NameNumber_end_3.equals(tomMatch157NameNumber_begin_2) ));}}}}}}
// end match   
        result =  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(freshVariable, tomMatch155NameNumber_freshVar_7) , tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make( tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(tomMatch155NameNumber_freshVar_6.setConstraints(tom_empty_list_concConstraint()), freshVariable) ,tom_append_list_AndConstraint(result,tom_empty_list_AndConstraint())) ) 
;
      }}}}}}}}}}}}}

    return result;
  }  
}
