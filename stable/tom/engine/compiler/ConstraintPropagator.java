/* Generated by TOM (version 2.5): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Radu Kopetz e-mail: Radu.Kopetz@loria.fr
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/
package tom.engine.compiler;

import java.util.ArrayList;

import tom.engine.TomBase;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.compiler.propagator.*;
import tom.engine.exception.TomRuntimeException;
import tom.library.sl.*;

/**
 * This class is in charge with launching all the propagators,
 * until no more propagations can be made 
 */
public class ConstraintPropagator {

//------------------------------------------------------	
  /* Generated by TOM (version 2.5): Do not edit this file *//* Generated by TOM (version 2.5): Do not edit this file *//* Generated by TOM (version 2.5): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5): Do not edit this file */ private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.engine.adt.tomslot.types.Slot ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  t instanceof tom.engine.adt.tomname.types.tomname.Name ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.AntiTerm.make(t0) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AntiTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_AssignTo( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AssignTo ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AssignTo_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_MatchConstraint( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomconstraint.types.constraint.MatchConstraint.make(t0, t1) ; }private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomslot.types.Slot  t) { return  t instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairSlotAppl_SlotName( tom.engine.adt.tomslot.types.Slot  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_PairSlotAppl_Appl( tom.engine.adt.tomslot.types.Slot  t) { return  t.getAppl() ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if(tom_is_empty_concTomName_TomNameList(l1)) {       return l2;     } else if(tom_is_empty_concTomName_TomNameList(l2)) {       return l1;     } else if(tom_is_empty_concTomName_TomNameList(tom_get_tail_concTomName_TomNameList(l1))) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(tom_get_tail_concTomName_TomNameList(l1),l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(tom_get_tail_concTomName_TomNameList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if(tom_is_empty_AndConstraint_Constraint(l1)) {       return l2;     } else if(tom_is_empty_AndConstraint_Constraint(l2)) {       return l1;     } else if(tom_is_fun_sym_AndConstraint(l1)) {       if(tom_is_empty_AndConstraint_Constraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()))) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_head_AndConstraint_Constraint(l1):l1),tom_append_list_AndConstraint(((tom_is_fun_sym_AndConstraint(l1))?tom_get_tail_AndConstraint_Constraint(l1):tom_empty_list_AndConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_head_AndConstraint_Constraint(begin):begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint(((tom_is_fun_sym_AndConstraint(begin))?tom_get_tail_AndConstraint_Constraint(begin):tom_empty_list_AndConstraint()),end,tail));     }   }   private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) { return  t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getHeadconcConstraint() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getTailconcConstraint() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.isEmptyconcConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if(tom_is_empty_concConstraint_ConstraintList(l1)) {       return l2;     } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {       return l1;     } else if(tom_is_empty_concConstraint_ConstraintList(tom_get_tail_concConstraint_ConstraintList(l1))) {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(l1),l2);     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(tom_get_tail_concConstraint_ConstraintList(l1),l2));     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if(tom_equal_term_ConstraintList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(tom_get_tail_concConstraint_ConstraintList(begin),end,tail));     }   }   private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) { return  t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot || t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getHeadconcSlot() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.getTailconcSlot() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) { return  l.isEmptyconcSlot() ;}   private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if(tom_is_empty_concSlot_SlotList(l1)) {       return l2;     } else if(tom_is_empty_concSlot_SlotList(l2)) {       return l1;     } else if(tom_is_empty_concSlot_SlotList(tom_get_tail_concSlot_SlotList(l1))) {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(l1),l2);     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(tom_get_tail_concSlot_SlotList(l1),l2));     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if(tom_equal_term_SlotList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(tom_get_tail_concSlot_SlotList(begin),end,tail));     }   }    /* Generated by TOM (version 2.5): Do not edit this file */             /* Generated by TOM (version 2.5): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.5): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.5): Do not edit this file */ /* Generated by TOM (version 2.5): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.5): Do not edit this file */private static boolean tom_equal_term_ArrayList(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_ArrayList(Object t) { return  t instanceof java.util.ArrayList ;} 



//------------------------------------------------------

  private static final String propagatorsPackage = "tom.engine.compiler.propagator.";

  private static final String[] propagatorsNames = {"SyntacticPropagator","VariadicPropagator","ArrayPropagator"};

  public static Constraint performPropagations(Constraint constraintToCompile) 
    throws ClassNotFoundException,InstantiationException,IllegalAccessException,VisitFailure{
    
    // counts the propagators that didn't change the expression
    int propCounter = 0;
    int propNb = propagatorsNames.length;    	

    // some preparations
    constraintToCompile = preparePropagations(constraintToCompile);
    // cache the propagators
    IBasePropagator[] prop = new IBasePropagator[propNb];
    for(int i=0 ; i < propNb ; i++) {
      prop[i] = (IBasePropagator)Class.forName(propagatorsPackage + propagatorsNames[i]).newInstance();
    }
    
    Constraint result= null;
    mainLoop: while(true) {
      for(int i=0 ; i < propNb ; i++) {
        result = prop[i].propagate(constraintToCompile);
        // if nothing was done, start counting 
        propCounter = (result == constraintToCompile) ? (propCounter+1) : 0;        
        // if we applied all the propagators and nothing changed,
        // it's time to stop
        if(propCounter == propNb) { break mainLoop; }
        // reinitialize
        constraintToCompile = result;
      }
    } // end while    
    return result;
  }

  /**
   * Before propagations
   * - make sure sublists in a list are managed
   * - make sure that all constraints attached to terms are handled
   */
  private static Constraint preparePropagations(Constraint constraintToCompile) throws VisitFailure {
    // detach sublists
    Constraint result = detach(constraintToCompile,"DetachSublists");
    // detach constraints
    result = detach(result,"DetachConstraints");  
    return result;
  }
  
  /**
   * Applies the strategyName strategy in a TopDown manner to constraintToCompile, giving a collection as an argument. 
   * Returns the conjunction between the result of the strategy and the constraints in the conjunction 
   * 
   */
  private static Constraint detach(Constraint constraintToCompile, String strategyName) throws VisitFailure {
    ArrayList<Constraint> constraintList = new ArrayList<Constraint>();
    Constraint newConstr = null;
match:if ( true ) {{  String  tomMatch143NameNumberfreshSubject_1=(( String )strategyName);if (tom_equal_term_String("DetachConstraints", tomMatch143NameNumberfreshSubject_1)) {if ( true ) {
 newConstr = (Constraint)tom_make_TopDown(tom_make_DetachConstraints(constraintList)).visit(constraintToCompile); break match;}}if (tom_equal_term_String("DetachSublists", tomMatch143NameNumberfreshSubject_1)) {if ( true ) {
 newConstr = (Constraint)tom_make_TopDown(tom_make_DetachSublists(constraintList)).visit(constraintToCompile); }}}}
    
    Constraint andList = tom_empty_list_AndConstraint();
    for(Constraint constr: constraintList) {
      andList = tom_append_list_AndConstraint(andList,tom_cons_list_AndConstraint(constr,tom_empty_list_AndConstraint()));
    }    
    return tom_cons_list_AndConstraint(newConstr,tom_append_list_AndConstraint(andList,tom_empty_list_AndConstraint()));
  }
  /**
   * Make sure that the sublists in a list are replaced by star variables - this is only happening 
   * when the lists and the sublists have the same name
   * 
   * conc(X*,conc(some_pattern),Y*) << t -> conc(X*,Z*,Y*) << t /\ conc(some_pattern) << Z*  
   * 
   */  
  private static class DetachSublists extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.ArrayList  bag; public DetachSublists( java.util.ArrayList  bag) { super(tom_make_Identity());this.bag=bag;}public  java.util.ArrayList  getbag() { return bag;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_TomTerm(tom__arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch146NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch146NameNumber_freshVar_0=tomMatch146NameNumberfreshSubject_1;if (tom_is_fun_sym_RecordAppl(tomMatch146NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch146NameNumber_freshVar_2=tom_get_slot_RecordAppl_NameList(tomMatch146NameNumber_freshVar_0);{  tom.engine.adt.tomslot.types.SlotList  tomMatch146NameNumber_freshVar_3=tom_get_slot_RecordAppl_Slots(tomMatch146NameNumber_freshVar_0);if (tom_is_fun_sym_concTomName(tomMatch146NameNumber_freshVar_2)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch146NameNumber_freshVar_5=tomMatch146NameNumber_freshVar_2;if (!(tom_is_empty_concTomName_TomNameList(tomMatch146NameNumber_freshVar_5))) {{  tom.engine.adt.tomname.types.TomName  tomMatch146NameNumber_freshVar_1=tom_get_head_concTomName_TomNameList(tomMatch146NameNumber_freshVar_5);{  tom.engine.adt.tomname.types.TomNameList  tomMatch146NameNumber_freshVar_6=tom_get_tail_concTomName_TomNameList(tomMatch146NameNumber_freshVar_5);if (tom_is_empty_concTomName_TomNameList(tomMatch146NameNumber_freshVar_6)) {{  tom.engine.adt.tomslot.types.SlotList  tom_slots=tomMatch146NameNumber_freshVar_3;if (tom_is_fun_sym_Name(tomMatch146NameNumber_freshVar_1)) {{  String  tomMatch146NameNumber_freshVar_4=tom_get_slot_Name_String(tomMatch146NameNumber_freshVar_1);{  tom.engine.adt.tomname.types.TomName  tom_name=tomMatch146NameNumber_freshVar_1;{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch146NameNumber_freshVar_0;if ( true ) {



        if (!TomBase.isListOperator(ConstraintCompiler.getSymbolTable().
            getSymbolFromName(tomMatch146NameNumber_freshVar_4))) {
          return tom_t;
        }
        SlotList newSlots = tom_empty_list_concSlot();
        if (tom_is_sort_SlotList(tom_slots)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch145NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.SlotList )tom_slots);if (tom_is_fun_sym_concSlot(tomMatch145NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch145NameNumber_freshVar_0=tomMatch145NameNumberfreshSubject_1;{  tom.engine.adt.tomslot.types.SlotList  tomMatch145NameNumber_begin_2=tomMatch145NameNumber_freshVar_0;{  tom.engine.adt.tomslot.types.SlotList  tomMatch145NameNumber_end_3=tomMatch145NameNumber_freshVar_0;do {{{  tom.engine.adt.tomslot.types.SlotList  tomMatch145NameNumber_freshVar_1=tomMatch145NameNumber_end_3;if (!(tom_is_empty_concSlot_SlotList(tomMatch145NameNumber_freshVar_1))) {{  tom.engine.adt.tomslot.types.Slot  tom_slot=tom_get_head_concSlot_SlotList(tomMatch145NameNumber_freshVar_1);{  tom.engine.adt.tomslot.types.SlotList  tomMatch145NameNumber_freshVar_4=tom_get_tail_concSlot_SlotList(tomMatch145NameNumber_freshVar_1);if ( true ) {

matchSlot:  if (tom_is_sort_Slot(tom_slot)) {{  tom.engine.adt.tomslot.types.Slot  tomMatch144NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.Slot )tom_slot);if (tom_is_sort_TomName(tom_name)) {{  tom.engine.adt.tomname.types.TomName  tomMatch144NameNumberfreshSubject_2=(( tom.engine.adt.tomname.types.TomName )tom_name);{  tom.engine.adt.tomslot.types.Slot  tomMatch144NameNumber_freshVar_0=tomMatch144NameNumberfreshSubject_1;if (tom_is_fun_sym_PairSlotAppl(tomMatch144NameNumber_freshVar_0)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch144NameNumber_freshVar_3=tom_get_slot_PairSlotAppl_Appl(tomMatch144NameNumber_freshVar_0);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch144NameNumber_freshVar_1=tomMatch144NameNumber_freshVar_3;if (tom_is_fun_sym_RecordAppl(tomMatch144NameNumber_freshVar_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_4=tom_get_slot_RecordAppl_NameList(tomMatch144NameNumber_freshVar_1);{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_2=tomMatch144NameNumber_freshVar_4;if (tom_is_fun_sym_concTomName(tomMatch144NameNumber_freshVar_2)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_5=tomMatch144NameNumber_freshVar_2;if (!(tom_is_empty_concTomName_TomNameList(tomMatch144NameNumber_freshVar_5))) {if (tom_equal_term_TomName(tomMatch144NameNumberfreshSubject_2, tom_get_head_concTomName_TomNameList(tomMatch144NameNumber_freshVar_5))) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_6=tom_get_tail_concTomName_TomNameList(tomMatch144NameNumber_freshVar_5);if (tom_is_empty_concTomName_TomNameList(tomMatch144NameNumber_freshVar_6)) {{  tom.engine.adt.tomterm.types.TomTerm  tom_appl=tomMatch144NameNumber_freshVar_1;if ( true ) {



                TomTerm freshVariable = ConstraintCompiler.getFreshVariableStar(ConstraintCompiler.getTermTypeFromTerm(tom_t));
                // make sure to apply on its subterms also 
                bag.add(detach(tom_make_MatchConstraint(tom_appl,freshVariable),"DetachSublists"));
                bag.add(tom_make_MatchConstraint(tom_appl,freshVariable));
                newSlots = tom_append_list_concSlot(newSlots,tom_cons_list_concSlot(tomMatch144NameNumber_freshVar_0.setAppl(freshVariable),tom_empty_list_concSlot()));
                break matchSlot;
              }}}}}}}}}}}}}}}{  tom.engine.adt.tomslot.types.Slot  tomMatch144NameNumber_freshVar_7=tomMatch144NameNumberfreshSubject_1;if (tom_is_fun_sym_PairSlotAppl(tomMatch144NameNumber_freshVar_7)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch144NameNumber_freshVar_10=tom_get_slot_PairSlotAppl_Appl(tomMatch144NameNumber_freshVar_7);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch144NameNumber_freshVar_8=tomMatch144NameNumber_freshVar_10;if (tom_is_fun_sym_AntiTerm(tomMatch144NameNumber_freshVar_8)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch144NameNumber_freshVar_11=tom_get_slot_AntiTerm_TomTerm(tomMatch144NameNumber_freshVar_8);if (tom_is_fun_sym_RecordAppl(tomMatch144NameNumber_freshVar_11)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_12=tom_get_slot_RecordAppl_NameList(tomMatch144NameNumber_freshVar_11);{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_9=tomMatch144NameNumber_freshVar_12;if (tom_is_fun_sym_concTomName(tomMatch144NameNumber_freshVar_9)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_13=tomMatch144NameNumber_freshVar_9;if (!(tom_is_empty_concTomName_TomNameList(tomMatch144NameNumber_freshVar_13))) {if (tom_equal_term_TomName(tomMatch144NameNumberfreshSubject_2, tom_get_head_concTomName_TomNameList(tomMatch144NameNumber_freshVar_13))) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch144NameNumber_freshVar_14=tom_get_tail_concTomName_TomNameList(tomMatch144NameNumber_freshVar_13);if (tom_is_empty_concTomName_TomNameList(tomMatch144NameNumber_freshVar_14)) {{  tom.engine.adt.tomterm.types.TomTerm  tom_appl=tomMatch144NameNumber_freshVar_8;if ( true ) {


                TomTerm freshVariable = ConstraintCompiler.getFreshVariableStar(ConstraintCompiler.getTermTypeFromTerm(tom_t));
                // make sure to apply on its subterms also 
                bag.add(detach(tom_make_MatchConstraint(tom_appl,freshVariable),"DetachSublists"));
                bag.add(tom_make_MatchConstraint(tom_appl,freshVariable));
                newSlots = tom_append_list_concSlot(newSlots,tom_cons_list_concSlot(tomMatch144NameNumber_freshVar_7.setAppl(freshVariable),tom_empty_list_concSlot()));
                break matchSlot;
              }}}}}}}}}}}}}}}}}if ( true ) {


                newSlots = tom_append_list_concSlot(newSlots,tom_cons_list_concSlot(tomMatch144NameNumberfreshSubject_1,tom_empty_list_concSlot()));
              }}}}}
            
          }}}}}if (tom_is_empty_concSlot_SlotList(tomMatch145NameNumber_end_3)) {tomMatch145NameNumber_end_3=tomMatch145NameNumber_begin_2;} else {tomMatch145NameNumber_end_3=tom_get_tail_concSlot_SlotList(tomMatch145NameNumber_end_3);}}} while(!(tom_equal_term_SlotList(tomMatch145NameNumber_end_3, tomMatch145NameNumber_begin_2)));}}}}}}

        return tom_t.setSlots(newSlots);
      }}}}}}}}}}}}}}}}}}return super.visit_TomTerm(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_DetachSublists( java.util.ArrayList  t0) { return new DetachSublists(t0); }

 // end strategy  

  /**
  * Handle constraints' detachment
  *   
  * f(x,a@b@g(y)) << t -> f(x,z) << t /\ g(y) << z /\ a << z /\ b << z
  */ 
  private static class DetachConstraints extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.ArrayList  bag; public DetachConstraints( java.util.ArrayList  bag) { super(tom_make_Identity());this.bag=bag;}public  java.util.ArrayList  getbag() { return bag;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];for (int i = 0; i < getChildCount(); i++) {stratChilds[i]=getChildAt(i);}return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {for (int i = 0; i < getChildCount(); i++) {setChildAt(i,children[i]);}return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_TomTerm(tom__arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch147NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch147NameNumber_freshVar_0=tomMatch147NameNumberfreshSubject_1;{ boolean tomMatch147NameNumber_freshVar_5= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch147NameNumber_freshVar_2= null ;if (tom_is_fun_sym_RecordAppl(tomMatch147NameNumber_freshVar_0)) {{tomMatch147NameNumber_freshVar_5= true ;tomMatch147NameNumber_freshVar_2=tom_get_slot_RecordAppl_Constraints(tomMatch147NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_Variable(tomMatch147NameNumber_freshVar_0)) {{tomMatch147NameNumber_freshVar_5= true ;tomMatch147NameNumber_freshVar_2=tom_get_slot_Variable_Constraints(tomMatch147NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_UnamedVariable(tomMatch147NameNumber_freshVar_0)) {{tomMatch147NameNumber_freshVar_5= true ;tomMatch147NameNumber_freshVar_2=tom_get_slot_UnamedVariable_Constraints(tomMatch147NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_VariableStar(tomMatch147NameNumber_freshVar_0)) {{tomMatch147NameNumber_freshVar_5= true ;tomMatch147NameNumber_freshVar_2=tom_get_slot_VariableStar_Constraints(tomMatch147NameNumber_freshVar_0);}} else {if (tom_is_fun_sym_UnamedVariableStar(tomMatch147NameNumber_freshVar_0)) {{tomMatch147NameNumber_freshVar_5= true ;tomMatch147NameNumber_freshVar_2=tom_get_slot_UnamedVariableStar_Constraints(tomMatch147NameNumber_freshVar_0);}}}}}}if ((tomMatch147NameNumber_freshVar_5 ==  true )) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch147NameNumber_freshVar_1=tomMatch147NameNumber_freshVar_2;{ boolean tomMatch147NameNumber_freshVar_4= false ;if (tom_is_fun_sym_concConstraint(tomMatch147NameNumber_freshVar_1)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch147NameNumber_freshVar_3=tomMatch147NameNumber_freshVar_1;if (tom_is_empty_concConstraint_ConstraintList(tomMatch147NameNumber_freshVar_3)) {tomMatch147NameNumber_freshVar_4= true ;}}}if ((tomMatch147NameNumber_freshVar_4 ==  false )) {if ( true ) {



        return performDetach(bag,tomMatch147NameNumber_freshVar_0.setConstraints(tom_empty_list_concConstraint()),tomMatch147NameNumber_freshVar_1,false);
      }}}}}}}}if (tom_is_fun_sym_AntiTerm(tomMatch147NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch147NameNumber_freshVar_8=tom_get_slot_AntiTerm_TomTerm(tomMatch147NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch147NameNumber_freshVar_6=tomMatch147NameNumber_freshVar_8;{ boolean tomMatch147NameNumber_freshVar_12= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch147NameNumber_freshVar_9= null ;if (tom_is_fun_sym_RecordAppl(tomMatch147NameNumber_freshVar_6)) {{tomMatch147NameNumber_freshVar_12= true ;tomMatch147NameNumber_freshVar_9=tom_get_slot_RecordAppl_Constraints(tomMatch147NameNumber_freshVar_6);}} else {if (tom_is_fun_sym_Variable(tomMatch147NameNumber_freshVar_6)) {{tomMatch147NameNumber_freshVar_12= true ;tomMatch147NameNumber_freshVar_9=tom_get_slot_Variable_Constraints(tomMatch147NameNumber_freshVar_6);}} else {if (tom_is_fun_sym_VariableStar(tomMatch147NameNumber_freshVar_6)) {{tomMatch147NameNumber_freshVar_12= true ;tomMatch147NameNumber_freshVar_9=tom_get_slot_VariableStar_Constraints(tomMatch147NameNumber_freshVar_6);}}}}if ((tomMatch147NameNumber_freshVar_12 ==  true )) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch147NameNumber_freshVar_7=tomMatch147NameNumber_freshVar_9;{ boolean tomMatch147NameNumber_freshVar_11= false ;if (tom_is_fun_sym_concConstraint(tomMatch147NameNumber_freshVar_7)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch147NameNumber_freshVar_10=tomMatch147NameNumber_freshVar_7;if (tom_is_empty_concConstraint_ConstraintList(tomMatch147NameNumber_freshVar_10)) {tomMatch147NameNumber_freshVar_11= true ;}}}if ((tomMatch147NameNumber_freshVar_11 ==  false )) {if ( true ) {

        return performDetach(bag,tomMatch147NameNumber_freshVar_6.setConstraints(tom_empty_list_concConstraint()),tomMatch147NameNumber_freshVar_7,true);
      }}}}}}}}}}}}return super.visit_TomTerm(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_DetachConstraints( java.util.ArrayList  t0) { return new DetachConstraints(t0); }

 // end strategy
    
  /**
   * a@...b@g(y) << t -> g(y) << z /\ a << z /\ ... /\ b << z
   * a@...b@!g(y) << t -> !g(y) << z /\ a << z /\ ... /\ b << z
   *
   */
  private static TomTerm performDetach(ArrayList bag, TomTerm subject, ConstraintList constraints, boolean isAnti) throws VisitFailure {
    TomType freshVarType = ConstraintCompiler.getTermTypeFromTerm(subject);
    TomTerm freshVariable = null;
    // make sure that if we had a varStar, we replace with a varStar also
    if (needsVarStar(subject)){      
      freshVariable = ConstraintCompiler.getFreshVariableStar(freshVarType);
    }else{      
      freshVariable = ConstraintCompiler.getFreshVariable(freshVarType);
    }
    //make sure to apply on its subterms also    
    subject = isAnti ? tom_make_AntiTerm(subject) : subject;
    bag.add(detach(tom_make_MatchConstraint(subject,freshVariable),"DetachConstraints"));
    // for each constraint
    if (tom_is_sort_ConstraintList(constraints)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch148NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.ConstraintList )constraints);if (tom_is_fun_sym_concConstraint(tomMatch148NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch148NameNumber_freshVar_0=tomMatch148NameNumberfreshSubject_1;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch148NameNumber_begin_2=tomMatch148NameNumber_freshVar_0;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch148NameNumber_end_3=tomMatch148NameNumber_freshVar_0;do {{{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch148NameNumber_freshVar_1=tomMatch148NameNumber_end_3;if (!(tom_is_empty_concConstraint_ConstraintList(tomMatch148NameNumber_freshVar_1))) {if (tom_is_fun_sym_AssignTo(tom_get_head_concConstraint_ConstraintList(tomMatch148NameNumber_freshVar_1))) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch148NameNumber_freshVar_6=tom_get_slot_AssignTo_Variable(tom_get_head_concConstraint_ConstraintList(tomMatch148NameNumber_freshVar_1));{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch148NameNumber_freshVar_4=tom_get_tail_concConstraint_ConstraintList(tomMatch148NameNumber_freshVar_1);if ( true ) {

        // add constraint to bag and delete it from the term
        bag.add(tom_make_MatchConstraint(tomMatch148NameNumber_freshVar_6,freshVariable));                                                                                                                       
      }}}}}}if (tom_is_empty_concConstraint_ConstraintList(tomMatch148NameNumber_end_3)) {tomMatch148NameNumber_end_3=tomMatch148NameNumber_begin_2;} else {tomMatch148NameNumber_end_3=tom_get_tail_concConstraint_ConstraintList(tomMatch148NameNumber_end_3);}}} while(!(tom_equal_term_ConstraintList(tomMatch148NameNumber_end_3, tomMatch148NameNumber_begin_2)));}}}}}}
// end match                   
    return freshVariable;      
  }
  
  private static boolean needsVarStar(TomTerm subject) {
    if (tom_is_sort_TomTerm(subject)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch149NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{ boolean tomMatch149NameNumber_freshVar_0= false ;if (tom_is_fun_sym_VariableStar(tomMatch149NameNumberfreshSubject_1)) {tomMatch149NameNumber_freshVar_0= true ;} else {if (tom_is_fun_sym_UnamedVariableStar(tomMatch149NameNumberfreshSubject_1)) {tomMatch149NameNumber_freshVar_0= true ;}}if ((tomMatch149NameNumber_freshVar_0 ==  true )) {if ( true ) {

        return true;
      }}}}}

    return false;
  }
  
}
