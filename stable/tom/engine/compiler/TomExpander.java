/* Generated by TOM: Do not edit this file */ /*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom.compiler;

import jtom.adt.tomsignature.types.*;
import jtom.runtime.Replace1;
import aterm.*;
import jtom.tools.*;
import jtom.xml.Constants;
import jtom.exception.TomRuntimeException;
import jtom.TomEnvironment;
import jtom.checker.TomCheckerMessage;

public class TomExpander extends TomTask {
	
  private TomKernelExpander tomKernelExpander;
  private TomFactory tomFactory;
  
  public TomExpander(TomEnvironment environment,
                     TomKernelExpander tomKernelExpander) {
    super("Tom Expander", environment);
    this.tomKernelExpander = tomKernelExpander;
    this.tomFactory = new TomFactory(environment);
  }

// ------------------------------------------------------------
  /* Generated by TOM: Do not edit this file *//* Generated by TOM: Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM: Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/                          /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM: Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/       /* Generated by TOM: Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
// ------------------------------------------------------------
		
  public void process() {
    try {
      long startChrono = 0;
      boolean verbose = getInput().isVerbose(), intermediate = getInput().isIntermediate(),
        debugMode = getInput().isDebugMode();
      if(verbose) { startChrono = System.currentTimeMillis(); }
      
      TomTerm syntaxExpandedTerm = expandTomSyntax(getInput().getTerm());
      tomKernelExpander.updateSymbolTable();
      TomTerm context = tom_make_emptyTerm() ;
      TomTerm variableExpandedTerm = expandVariable(context, syntaxExpandedTerm);
      TomTerm stringExpandedTerm   = expandString(variableExpandedTerm);
      TomTerm expandedTerm         = updateCodomain(stringExpandedTerm);
      
      if(debugMode) {
        tomKernelExpander.expandMatchPattern(expandedTerm);
      }
      if(verbose) {
        System.out.println("TOM expansion phase (" + (System.currentTimeMillis()-startChrono)+ " ms)");
      }
      if(intermediate) {
        Tools.generateOutput(getInput().getBaseInputFileName() + TomTaskInput.expandedSuffix, expandedTerm);
        Tools.generateOutput(getInput().getBaseInputFileName() + TomTaskInput.expandedTableSuffix, symbolTable().toTerm());
      }
      getInput().setTerm(expandedTerm);
      
    } catch (Exception e) {
      addError("Exception occurs in TomExpander: "+e.getMessage(), getInput().getInputFileName(), TomCheckerMessage.DEFAULT_ERROR_LINE_NUMBER, TomCheckerMessage.TOM_ERROR);
      e.printStackTrace();
      return;
    }
  }

  private TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return tomKernelExpander.expandVariable(contextSubject,subject); 
  }
 
  /*
   * The 'expandTomSyntax' phase replaces:
   * -each 'RecordAppl' by its expanded term form:
   *   (unused slots a replaced by placeholders)
   * - each BackQuoteTerm by its compiled form
   */
  
  public TomTerm expandTomSyntax(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof TomTerm) {
             { TomTerm tom_match1_1=(( TomTerm)subject);{ if(tom_is_fun_sym_DoubleBackQuote(tom_match1_1) ||  false ) { { TomList tom_match1_1_1=tom_get_slot_DoubleBackQuote_args(tom_match1_1); if(tom_is_fun_sym_concTomTerm(tom_match1_1_1) ||  false ) { { TomList tom_match1_1_1_list1=tom_match1_1_1; { TomList tom_match1_1_1_begin1=tom_match1_1_1_list1; { TomList tom_match1_1_1_end1=tom_match1_1_1_list1; while (!(tom_is_empty_TomList(tom_match1_1_1_end1))) {tom_match1_1_1_list1=tom_match1_1_1_end1;{ { TomList tom_context=tom_get_slice_concTomTerm(tom_match1_1_1_begin1,tom_match1_1_1_end1); { TomTerm tom_backQuoteTerm=tom_get_head_TomList(tom_match1_1_1_list1); if(tom_is_empty_TomList(tom_get_tail_TomList(tom_match1_1_1_list1))) {
 
                if(!tom_context .isEmpty()) {
                  tom_context  = aggregateContext(tom_context );
                  //System.out.println("context = " + `context);
                }
                TomTerm t = expandTomSyntax(tom_backQuoteTerm );
                t = expandBackQuoteXMLAppl(tom_context ,t);
                return t;
               }}}tom_match1_1_1_end1=tom_get_tail_TomList(tom_match1_1_1_end1);} }}}} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match1_1) ||  false ) {

 
                TomTerm t = expandBackQuoteAppl(tom_match1_1 );
                  //System.out.println("t = " + t);
                return t;
               } if(tom_is_fun_sym_RecordAppl(tom_match1_1) ||  false ) {

 
                return expandRecordAppl(tom_get_slot_RecordAppl_option(tom_match1_1) ,tom_get_slot_RecordAppl_nameList(tom_match1_1) ,tom_get_slot_RecordAppl_args(tom_match1_1) ,tom_get_slot_RecordAppl_constraints(tom_match1_1) );
               } if(tom_is_fun_sym_XMLAppl(tom_match1_1) ||  false ) {

 
                //System.out.println("expandXML in:\n" + subject);
                return expandXMLAppl(tom_get_slot_XMLAppl_option(tom_match1_1) , tom_get_slot_XMLAppl_nameList(tom_match1_1) , tom_get_slot_XMLAppl_attrList(tom_match1_1) , tom_get_slot_XMLAppl_childList(tom_match1_1) ,tom_get_slot_XMLAppl_constraints(tom_match1_1) );
               }

 
                return traversal().genericTraversal(subject,this);
              }}
  // end match
          } else {
            return traversal().genericTraversal(subject,this);
          }
        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * this post-processing phase replaces untyped (universalType) codomain
   * by their precise type (according to the symbolTable)
   */
  private TomTerm updateCodomain(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof Declaration) {
             { Declaration tom_match2_1=(( Declaration)subject);{ if(tom_is_fun_sym_GetHeadDecl(tom_match2_1) ||  false ) { { TomTerm tom_match2_1_2=tom_get_slot_GetHeadDecl_variable(tom_match2_1); if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) {
 
                TomSymbol tomSymbol = getSymbol(tom_get_slot_Variable_astType(tom_match2_1_2) );
                if(tomSymbol != null) {
                  TomTypeList codomain = getSymbolDomain(tomSymbol);
                  //System.out.println("tomSymbol = " + tomSymbol);
                  //System.out.println("domain    = " + domain);
                  //System.out.println("codomain  = " + codomain);
                  
                  if(codomain.isSingle()) {
                    Declaration t = (Declaration)subject;
                    t = t.setCodomain(codomain.getHead());
                    return t;
                  } else {
                    throw new TomRuntimeException(new Throwable("updateCodomain: bad codomain: " + codomain));
                  }
                }
               }} }


 
                return traversal().genericTraversal(subject,this);
              }}
  // end match
          } else {
            // not instance of Declaration
            return traversal().genericTraversal(subject,this);
          }

        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * replace 'abc' by conc('a','b','c')
   */
  private TomTerm expandString(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof TomTerm) {
             { TomTerm tom_match3_1=(( TomTerm)subject);{ if(tom_is_fun_sym_Appl(tom_match3_1) ||  false ) { { NameList tom_match3_1_2=tom_get_slot_Appl_nameList(tom_match3_1); if(tom_is_fun_sym_concTomName(tom_match3_1_2) ||  false ) { { NameList tom_match3_1_2_list1=tom_match3_1_2; if(!(tom_is_empty_NameList(tom_match3_1_2_list1))) { { TomName tom_match3_1_2_1=tom_get_head_NameList(tom_match3_1_2_list1); if(tom_is_fun_sym_Name(tom_match3_1_2_1) ||  false ) { { TomList tom_args=tom_get_slot_Appl_args(tom_match3_1);
 
                TomSymbol tomSymbol = getSymbol(tom_get_slot_Name_string(tom_match3_1_2_1) );
                //System.out.println("appl = " + subject);
                if(tomSymbol != null) {
                  if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
                    //System.out.println("appl = " + subject);
                    TomList newArgs = expandChar(tom_args );
                    if(newArgs!=tom_args ) {
                      return tom_match3_1 .setArgs(newArgs);
                    }
                  }
                }
              } }} }} }} }


 
                return traversal().genericTraversal(subject,this);
              }}
  // end match
          } else {
            // not instance of Declaration
            return traversal().genericTraversal(subject,this);
          }

        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * detect ill-formed char: 'abc'
   * and expand it into a list of char: 'a','b','c'
   */
  private TomList expandChar(TomList args) {
    if(args.isEmpty()) {
      return args;
    } else {
      TomTerm head = args.getHead();
      TomList tail = expandChar(args.getTail());
       { TomTerm tom_match4_1=(( TomTerm)head);{ if(tom_is_fun_sym_Appl(tom_match4_1) ||  false ) { { NameList tom_match4_1_2=tom_get_slot_Appl_nameList(tom_match4_1); { TomList tom_match4_1_3=tom_get_slot_Appl_args(tom_match4_1); if(tom_is_fun_sym_concTomName(tom_match4_1_2) ||  false ) { { NameList tom_match4_1_2_list1=tom_match4_1_2; if(!(tom_is_empty_NameList(tom_match4_1_2_list1))) { { TomName tom_match4_1_2_1=tom_get_head_NameList(tom_match4_1_2_list1); if(tom_is_fun_sym_Name(tom_match4_1_2_1) ||  false ) { { String  tom_tomName=tom_get_slot_Name_string(tom_match4_1_2_1); if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match4_1_2_list1))) { if(tom_is_fun_sym_concTomTerm(tom_match4_1_3) ||  false ) { if(tom_is_empty_TomList(tom_match4_1_3)) {
 
          /*
           * ensure that the argument contains at least 1 character and 2 single quotes
           */
          TomSymbol tomSymbol = getSymbol(tom_tomName );
          TomType termType = tomSymbol.getTypesToType().getCodomain();
          String type = termType.getTomType().getString();
          if(symbolTable().isCharType(type) && tom_tomName .length()>3) {
            if(tom_tomName .charAt(0)=='\'' && tom_tomName .charAt(tom_tomName .length()-1)=='\'') {
              TomList newArgs = tail;
              //System.out.println("bingo -> " + tomSymbol);
              for(int i=tom_tomName .length()-2 ; i>0 ;  i--) {
                char c = tom_tomName .charAt(i);
                String newName = "'" + c + "'";
                TomSymbol newSymbol = tomSymbol.setAstName(tom_make_Name(newName) );
                newSymbol = newSymbol.setTlCode(tom_make_ITL(newName) );
                symbolTable().putSymbol(newName,newSymbol);
                TomTerm newHead = head.setNameList(tom_cons_list_concTomName(tom_make_Name(newName),tom_empty_list_concTomName()) );
                newArgs = tom_make_manyTomList(newHead,newArgs) ;
                //System.out.println("newHead = " + newHead);
                //System.out.println("newSymb = " + getSymbol(newName));
              }
              return newArgs;
            } else {
              throw new TomRuntimeException(new Throwable("expandChar: strange char: " + tom_tomName ));
            }
          }
         } } }} }} }} }}} }

 
          return tom_make_manyTomList(head,tail) ;
        }}
 

    }
  }

  protected TomTerm expandRecordAppl(OptionList option, NameList nameList, TomList args, ConstraintList constraints) {
    TomSymbol tomSymbol = getSymbol(nameList.getHead().getString());
    SlotList slotList = tomSymbol.getSlotList();
    TomList subtermList = empty();
      // For each slotName (from tomSymbol)
    while(!slotList.isEmpty()) {
      TomName slotName = slotList.getHead().getSlotName();
      TomList pairList = args;
      TomTerm newSubterm = null;
      if(!slotName.isEmptyName()) {
          // look for a same name (from record)
        whileBlock: {
          while(newSubterm==null && !pairList.isEmpty()) {
            TomTerm pairSlotName = pairList.getHead();
             { TomName tom_match5_1=(( TomName)slotName);{ { TomTerm tom_match5_2=(( TomTerm)pairSlotName);{ if(tom_is_fun_sym_Name(tom_match5_1) ||  false ) { { String  tom_name=tom_get_slot_Name_string(tom_match5_1); if(tom_is_fun_sym_PairSlotAppl(tom_match5_2) ||  false ) { { TomName tom_match5_2_1=tom_get_slot_PairSlotAppl_slotName(tom_match5_2); if(tom_is_fun_sym_Name(tom_match5_2_1) ||  false ) { if(tom_terms_equal_String(tom_name, tom_get_slot_Name_string(tom_match5_2_1))) {
 
                  // bingo
                newSubterm = expandTomSyntax(tom_get_slot_PairSlotAppl_appl(tom_match5_2) );
                break whileBlock;
               } }} }} }
 pairList = pairList.getTail();}}}}
 
          }
        } // end whileBlock
      }
      
      if(newSubterm == null) {
        newSubterm = tom_make_Placeholder(emptyOption(),tom_empty_list_concConstraint()) ;
      }
      subtermList = append(newSubterm,subtermList);
      slotList = slotList.getTail();
    }
    
    return tom_make_Appl(option,nameList,subtermList,constraints) ;
  }

  protected TomTerm expandBackQuoteAppl(TomTerm t) {
    Replace1 replaceSymbol = new Replace1() {
        public ATerm apply(ATerm t) {
          if(t instanceof TomTerm) {
             { TomTerm tom_match6_1=(( TomTerm)t);{ if(tom_is_fun_sym_BackQuoteAppl(tom_match6_1) ||  false ) { { TomName tom_match6_1_2=tom_get_slot_BackQuoteAppl_astName(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_2) ||  false ) { { TomName tom_name=tom_match6_1_2;
 
                TomSymbol tomSymbol = getSymbol(tom_get_slot_Name_string(tom_match6_1_2) );
                TomList args  = (TomList) traversal().genericTraversal(tom_get_slot_BackQuoteAppl_args(tom_match6_1) ,this);
                
                  //System.out.println("BackQuoteTerm: " + `tomName);
                  //System.out.println("tomSymbol: " + tomSymbol);

                if(tomSymbol != null) {
                  if(isListOperator(tomSymbol)) {
                    return tomFactory.buildList(tom_name ,args);
                  } else if(isArrayOperator(tomSymbol)) {
                    return tomFactory.buildArray(tom_name ,args);
                  } else if(isStringOperator(tomSymbol)) {
                    return tom_make_BuildVariable(tom_name) ;
                  } else {
                    return tom_make_BuildTerm(tom_name,args) ;
                  }
                } else if(args.isEmpty() && !hasConstructor(tom_get_slot_BackQuoteAppl_option(tom_match6_1) )) {
                  return tom_make_BuildVariable(tom_name) ;
                } else {
                  return tom_make_FunctionCall(tom_name,args) ;
                }
              } }} }}}
  // end match 
          }
          return traversal().genericTraversal(t,this);
        } // end apply
      }; // end replaceSymbol
    return (TomTerm) replaceSymbol.apply(t);
  }

  private TomList sortAttributeList(TomList attrList) {
     { TomList tom_match7_1=(( TomList)attrList);{ if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { if(tom_is_empty_TomList(tom_match7_1)) {
  return attrList;  } } if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { { TomList tom_match7_1_list1=tom_match7_1; { TomList tom_match7_1_begin1=tom_match7_1_list1; { TomList tom_match7_1_end1=tom_match7_1_list1; while (!(tom_is_empty_TomList(tom_match7_1_end1))) {tom_match7_1_list1=tom_match7_1_end1;{ { TomList tom_X1=tom_get_slice_concTomTerm(tom_match7_1_begin1,tom_match7_1_end1); { TomTerm tom_e1=tom_get_head_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_TomList(tom_match7_1_list1); { TomList tom_match7_1_begin3=tom_match7_1_list1; { TomList tom_match7_1_end3=tom_match7_1_list1; while (!(tom_is_empty_TomList(tom_match7_1_end3))) {tom_match7_1_list1=tom_match7_1_end3;{ { TomList tom_X2=tom_get_slice_concTomTerm(tom_match7_1_begin3,tom_match7_1_end3); { TomTerm tom_e2=tom_get_head_TomList(tom_match7_1_list1); { TomList tom_X3=tom_get_tail_TomList(tom_match7_1_list1); { TomTerm tom_match8_1=(( TomTerm)tom_e1);{ { TomTerm tom_match8_2=(( TomTerm)tom_e2);{ if(tom_is_fun_sym_Appl(tom_match8_1) ||  false ) { { TomList tom_match8_1_3=tom_get_slot_Appl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_Appl(tom_match8_1_3_1) ||  false ) { { NameList tom_match8_1_3_1_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2) ||  false ) { { NameList tom_match8_1_3_1_2_list1=tom_match8_1_3_1_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_list1))) { { TomName tom_match8_1_3_1_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_1) ||  false ) { if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match8_1_3_1_2_list1))) { if(tom_is_fun_sym_Appl(tom_match8_2) ||  false ) { { TomList tom_match8_2_3=tom_get_slot_Appl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_Appl(tom_match8_2_3_1) ||  false ) { { NameList tom_match8_2_3_1_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2) ||  false ) { { NameList tom_match8_2_3_1_2_list1=tom_match8_2_3_1_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_list1))) { { TomName tom_match8_2_3_1_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_1) ||  false ) { if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match8_2_3_1_2_list1))) {



 
            if(tom_get_slot_Name_string(tom_match8_1_3_1_2_1) .compareTo(tom_get_slot_Name_string(tom_match8_2_3_1_2_1) ) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm())))))) ;
            }
           } }} }} }} }} }} } } }} }} }} }} }} } if(tom_is_fun_sym_RecordAppl(tom_match8_1) ||  false ) { { TomList tom_match8_1_3=tom_get_slot_RecordAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_PairSlotAppl(tom_match8_1_3_1) ||  false ) { { TomTerm tom_match8_1_3_1_2=tom_get_slot_PairSlotAppl_appl(tom_match8_1_3_1); { TomName tom_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match8_1_3_1); if(tom_is_fun_sym_Appl(tom_match8_1_3_1_2) ||  false ) { { NameList tom_match8_1_3_1_2_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1_2); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2_2) ||  false ) { { NameList tom_match8_1_3_1_2_2_list1=tom_match8_1_3_1_2_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_2_list1))) { { TomName tom_match8_1_3_1_2_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_2_1) ||  false ) { if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match8_1_3_1_2_2_list1))) { if(tom_is_fun_sym_RecordAppl(tom_match8_2) ||  false ) { { TomList tom_match8_2_3=tom_get_slot_RecordAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_PairSlotAppl(tom_match8_2_3_1) ||  false ) { { TomTerm tom_match8_2_3_1_2=tom_get_slot_PairSlotAppl_appl(tom_match8_2_3_1); if(tom_terms_equal_TomName(tom_slotName, tom_get_slot_PairSlotAppl_slotName(tom_match8_2_3_1))) { if(tom_is_fun_sym_Appl(tom_match8_2_3_1_2) ||  false ) { { NameList tom_match8_2_3_1_2_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1_2); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2_2) ||  false ) { { NameList tom_match8_2_3_1_2_2_list1=tom_match8_2_3_1_2_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_2_list1))) { { TomName tom_match8_2_3_1_2_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_2_1) ||  false ) { if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match8_2_3_1_2_2_list1))) {


 
            if(tom_get_slot_Name_string(tom_match8_1_3_1_2_2_1) .compareTo(tom_get_slot_Name_string(tom_match8_2_3_1_2_2_1) ) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm())))))) ;
            }
           } }} }} }} } }} }} }} } } }} }} }} }}} }} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { TomList tom_match8_1_3=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_Appl(tom_match8_1_3_1) ||  false ) { { NameList tom_match8_1_3_1_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2) ||  false ) { { NameList tom_match8_1_3_1_2_list1=tom_match8_1_3_1_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_list1))) { { TomName tom_match8_1_3_1_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_1) ||  false ) { if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match8_1_3_1_2_list1))) { if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { TomList tom_match8_2_3=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_Appl(tom_match8_2_3_1) ||  false ) { { NameList tom_match8_2_3_1_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2) ||  false ) { { NameList tom_match8_2_3_1_2_list1=tom_match8_2_3_1_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_list1))) { { TomName tom_match8_2_3_1_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_1) ||  false ) { if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match8_2_3_1_2_list1))) {


 
            if(tom_get_slot_Name_string(tom_match8_1_3_1_2_1) .compareTo(tom_get_slot_Name_string(tom_match8_2_3_1_2_1) ) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm())))))) ;
            }
           } }} }} }} }} }} } } }} }} }} }} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { TomList tom_match8_1_3=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1_3_1) ||  false ) { { TomName tom_match8_1_3_1_2=tom_get_slot_BackQuoteAppl_astName(tom_match8_1_3_1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2) ||  false ) { if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { TomList tom_match8_2_3=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2_3_1) ||  false ) { { TomName tom_match8_2_3_1_2=tom_get_slot_BackQuoteAppl_astName(tom_match8_2_3_1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2) ||  false ) {


 
            if(tom_get_slot_Name_string(tom_match8_1_3_1_2) .compareTo(tom_get_slot_Name_string(tom_match8_2_3_1_2) ) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm())))))) ;
            }
           }} }} }} } }} }} }} }}}}}
 
      }}}tom_match7_1_end3=tom_get_tail_TomList(tom_match7_1_end3);} }}}}}tom_match7_1_end1=tom_get_tail_TomList(tom_match7_1_end1);} }}}} }}}
 
    return attrList;
  }

  private TomList aggregateContext(TomList context) {
    TomList newContext = tom_empty_list_concTomTerm() ;
     { TomList tom_match9_1=(( TomList)context);{ if(tom_is_fun_sym_concTomTerm(tom_match9_1) ||  false ) { { TomList tom_match9_1_list1=tom_match9_1; { TomList tom_match9_1_begin1=tom_match9_1_list1; { TomList tom_match9_1_end1=tom_match9_1_list1; while (!(tom_is_empty_TomList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1;{ { TomTerm tom_match9_1_2=tom_get_head_TomList(tom_match9_1_list1); if(tom_is_fun_sym_Composite(tom_match9_1_2) ||  false ) { { TomList tom_match9_1_2_1=tom_get_slot_Composite_args(tom_match9_1_2); if(tom_is_fun_sym_concTomTerm(tom_match9_1_2_1) ||  false ) { { TomList tom_match9_1_2_1_list1=tom_match9_1_2_1; if(!(tom_is_empty_TomList(tom_match9_1_2_1_list1))) { { TomTerm tom_match9_1_2_1_1=tom_get_head_TomList(tom_match9_1_2_1_list1); if(tom_is_fun_sym_BackQuoteAppl(tom_match9_1_2_1_1) ||  false ) { if(tom_is_empty_TomList(tom_get_tail_TomList(tom_match9_1_2_1_list1))) {
 
        newContext = tom_append_list_concTomTerm(newContext,tom_cons_list_concTomTerm(tom_match9_1_2_1_1,tom_empty_list_concTomTerm())) ;
       } }} }} }} }}tom_match9_1_end1=tom_get_tail_TomList(tom_match9_1_end1);} }}}} }}}
 
    return newContext;
  }

  private OptionList convertOriginTracking(String name,OptionList optionList) {
    Option originTracking = findOriginTracking(optionList);
     { Option tom_match10_1=(( Option)originTracking);{ if(tom_is_fun_sym_OriginTracking(tom_match10_1) ||  false ) {
 
        return tom_cons_list_concOption(tom_make_OriginTracking(tom_make_Name(name),tom_get_slot_OriginTracking_line(tom_match10_1),tom_get_slot_OriginTracking_fileName(tom_match10_1)),tom_empty_list_concOption()) ;
       }}}
 
    System.out.println("Warning: no OriginTracking information");
    return emptyOption();
  }

  
  protected TomTerm expandXMLAppl(OptionList optionList, NameList nameList,
                                  TomList attrList, TomList childList, ConstraintList constraints) {
    boolean implicitAttribute = hasImplicitXMLAttribut(optionList);
    boolean implicitChild     = hasImplicitXMLChild(optionList);
    
    TomList newAttrList  = tom_make_emptyTomList() ;
    TomList newChildList = tom_make_emptyTomList() ;

    TomTerm star = ast().makeUnamedVariableStar(convertOriginTracking("_*",optionList),"unknown type",tom_empty_list_concConstraint() );
    if(implicitAttribute) { newAttrList  = tom_make_manyTomList(star,newAttrList) ; }
    if(implicitChild)     { newChildList = tom_make_manyTomList(star,newChildList) ; }

    /*
     * the list of attributes should not be expanded before the sort
     * the sortAttribute is extended to compare RecordAppl
     */
    attrList = sortAttributeList(attrList);

    while(!attrList.isEmpty()) {
      TomTerm newPattern = expandTomSyntax(attrList.getHead());
      newAttrList = tom_make_manyTomList(newPattern,newAttrList) ;
      if(implicitAttribute) { newAttrList = tom_make_manyTomList(star,newAttrList) ; }
      attrList = attrList.getTail();
    }
    newAttrList = (TomList) newAttrList.reverse();
    //System.out.println("attr: " + newAttrList);
    
    while(!childList.isEmpty()) {
      TomTerm newPattern = expandTomSyntax(childList.getHead());
      newChildList = tom_make_manyTomList(newPattern,newChildList) ;
      if(implicitChild) {
        if(newPattern.isVariableStar()) {
            // remove the previously inserted pattern
          newChildList = newChildList.getTail();
          if(newChildList.getHead().isUnamedVariableStar()) {
            // remove the previously inserted star
            newChildList = newChildList.getTail();
          }
            // re-insert the pattern
          newChildList = tom_make_manyTomList(newPattern,newChildList) ;
        } else {
          newChildList = tom_make_manyTomList(star,newChildList) ;
        }
      }
      childList = childList.getTail();
    }
    newChildList = (TomList) newChildList.reverse();

      /*
       * encode the name and put it into the table of symbols
       */

    NameList newNameList = tom_empty_list_concTomName() ;
    matchBlock: {
       { NameList tom_match11_1=(( NameList)nameList);{ if(tom_is_fun_sym_concTomName(tom_match11_1) ||  false ) { { NameList tom_match11_1_list1=tom_match11_1; if(!(tom_is_empty_NameList(tom_match11_1_list1))) { { TomName tom_match11_1_1=tom_get_head_NameList(tom_match11_1_list1); if(tom_is_fun_sym_Name(tom_match11_1_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_Name_string(tom_match11_1_1)) , "_") ||  false ) { if(tom_is_empty_NameList(tom_get_tail_NameList(tom_match11_1_list1))) {
 
          break matchBlock;
         } } }} }} } if(tom_is_fun_sym_concTomName(tom_match11_1) ||  false ) { { NameList tom_match11_1_list1=tom_match11_1; { NameList tom_match11_1_begin1=tom_match11_1_list1; { NameList tom_match11_1_end1=tom_match11_1_list1; while (!(tom_is_empty_NameList(tom_match11_1_end1))) {tom_match11_1_list1=tom_match11_1_end1;{ { TomName tom_match11_1_2=tom_get_head_NameList(tom_match11_1_list1); if(tom_is_fun_sym_Name(tom_match11_1_2) ||  false ) {

 
          newNameList = (NameList)newNameList.append(tom_make_Name(tomFactory .encodeXMLString(symbolTable(),tom_get_slot_Name_string(tom_match11_1_2))) );
         }}tom_match11_1_end1=tom_get_tail_NameList(tom_match11_1_end1);} }}}} }}}
 
    }

      /*
       * a single "_" is converted into a Placeholder to match
       * any XML node
       */
    TomTerm xmlHead;

    if(newNameList.isEmpty()){
      xmlHead = tom_make_Placeholder(emptyOption(),tom_empty_list_concConstraint()) ;
    } else { 
      xmlHead = tom_make_Appl(convertOriginTracking(newNameList .getHead() .getString(),optionList),newNameList,empty(),tom_empty_list_concConstraint()) ;
    }

    TomList newArgs = tom_cons_list_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants .SLOT_NAME),xmlHead),tom_cons_list_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants .SLOT_ATTRLIST),tom_make_Appl(convertOriginTracking( "CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants .CONC_TNODE),tom_empty_list_concTomName()),newAttrList,tom_empty_list_concConstraint())),tom_cons_list_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants .SLOT_CHILDLIST),tom_make_Appl(convertOriginTracking( "CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants .CONC_TNODE),tom_empty_list_concTomName()),newChildList,tom_empty_list_concConstraint())),tom_empty_list_concTomTerm())))


 ;
    
    TomTerm result = expandTomSyntax(tom_make_RecordAppl(optionList,tom_cons_list_concTomName(tom_make_Name(Constants .ELEMENT_NODE),tom_empty_list_concTomName()),newArgs,constraints)) ;


      //System.out.println("expandXML out:\n" + result);
    return result;
   
  }

  protected TomTerm expandBackQuoteXMLAppl(final TomList context,TomTerm subject) {
    Replace1 replaceSymbol = new Replace1() {
        public ATerm apply(ATerm t) {
          if(t instanceof TomTerm) {
             { TomTerm tom_match12_1=(( TomTerm)t);{ if(tom_is_fun_sym_Composite(tom_match12_1) ||  false ) { { TomList tom_list=tom_get_slot_Composite_args(tom_match12_1);tom_list

  = parseBackQuoteXMLAppl(context,tom_list );
                tom_list  = (TomList) traversal().genericTraversal(tom_list ,this);
                return tom_make_Composite(tom_list) ;
              } }}}
  // end match 
          } 
          return traversal().genericTraversal(t,this);
        } // end apply
      }; // end replaceSymbol
    return (TomTerm) replaceSymbol.apply(subject);
  }

  private TomList parseBackQuoteXMLAppl(TomList context,TomList list) {
     { TomList tom_match13_1=(( TomList)list);{ if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_1) ||  false ) { { TargetLanguage tom_match13_1_1_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_1); if(tom_is_fun_sym_ITL(tom_match13_1_1_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_1_1)) , "#TEXT") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_2) ||  false ) { { TargetLanguage tom_match13_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_2); if(tom_is_fun_sym_ITL(tom_match13_1_2_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_2_1)) , "(") ||  false ) { { TomList tom_match13_1_begin3=tom_match13_1_list1; { TomList tom_match13_1_end3=tom_match13_1_list1; while (!(tom_is_empty_TomList(tom_match13_1_end3))) {tom_match13_1_list1=tom_match13_1_end3;{ { TomTerm tom_match13_1_4=tom_get_head_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_4) ||  false ) { { TargetLanguage tom_match13_1_4_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_4); if(tom_is_fun_sym_ITL(tom_match13_1_4_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_4_1)) , ")") ||  false ) {






 
        TomTerm newBackQuoteAppl = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .TEXT_NODE),tom_append_list_concTomTerm(context,tom_cons_list_concTomTerm(tom_make_Composite(tom_get_slice_concTomTerm(tom_match13_1_begin3,tom_match13_1_end3)),tom_empty_list_concTomTerm()))) ;
        TomList newTail = parseBackQuoteXMLAppl(context,tom_get_tail_TomList(tom_match13_1_list1) );
        return tom_cons_list_concTomTerm(newBackQuoteAppl,tom_append_list_concTomTerm(newTail,tom_empty_list_concTomTerm())) ;
       } }} }}tom_match13_1_end3=tom_get_tail_TomList(tom_match13_1_end3);} }}} } }} }} } } }} }} }} } if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_1) ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_2) ||  false ) { { TargetLanguage tom_match13_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_2); if(tom_is_fun_sym_ITL(tom_match13_1_2_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_2_1)) , "*") ||  false ) {





 
        TomTerm term = tom_make_VariableStar(emptyOption(),tom_get_slot_BuildVariable_astName(tom_match13_1_1),tom_make_TomTypeAlone( "unknown type"),tom_empty_list_concConstraint()) ;
        TomList newTail = parseBackQuoteXMLAppl(context,tom_get_tail_TomList(tom_match13_1_list1) );
        return tom_cons_list_concTomTerm(term,tom_append_list_concTomTerm(newTail,tom_empty_list_concTomTerm())) ;
       } }} }} } }} }} }label2: { if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_1) ||  false ) { { TargetLanguage tom_match13_1_1_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_1); if(tom_is_fun_sym_ITL(tom_match13_1_1_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_1_1)) , "<") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_2) ||  false ) { { TomName tom_name=tom_get_slot_BuildVariable_astName(tom_match13_1_2); { TomList tom_match13_1_begin3=tom_match13_1_list1; { TomList tom_match13_1_end3=tom_match13_1_list1; while (!(tom_is_empty_TomList(tom_match13_1_end3))) {tom_match13_1_list1=tom_match13_1_end3;{ { TomList tom_Attributes=tom_get_slice_concTomTerm(tom_match13_1_begin3,tom_match13_1_end3); { TomTerm tom_match13_1_4=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_4) ||  false ) { { TargetLanguage tom_match13_1_4_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_4); if(tom_is_fun_sym_ITL(tom_match13_1_4_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_4_1)) , ">") ||  false ) { { TomList tom_match13_1_begin5=tom_match13_1_list1; { TomList tom_match13_1_end5=tom_match13_1_list1; while (!(tom_is_empty_TomList(tom_match13_1_end5))) {tom_match13_1_list1=tom_match13_1_end5;{ { TomTerm tom_match13_1_6=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_6) ||  false ) { { TargetLanguage tom_match13_1_6_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_6); if(tom_is_fun_sym_ITL(tom_match13_1_6_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_6_1)) , "</") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_7=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_7) ||  false ) { if(tom_terms_equal_TomName(tom_name, tom_get_slot_BuildVariable_astName(tom_match13_1_7))) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_8=tom_get_head_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_8) ||  false ) { { TargetLanguage tom_match13_1_8_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_8); if(tom_is_fun_sym_ITL(tom_match13_1_8_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_8_1)) , ">") ||  false ) {











 
        if(containClosingBracket(tom_Attributes )) {
          break label2;
        }

          //System.out.println("Attributes = " + Attributes);
          //System.out.println("Body = " + Body);
        
        TomTerm newName = tom_make_BackQuoteAppl(emptyOption(),encodeName(tom_name),empty()) ;
        TomTerm newAttribute = metaEncodeTNodeList(aggregateXMLAttribute(context,tom_Attributes ));
        //System.out.println("aggregate: " + newAttribute);

        TomTerm newBody = metaEncodeTNodeList(aggregateXMLBody(context,tom_get_slice_concTomTerm(tom_match13_1_begin5,tom_match13_1_end5) ));

        //System.out.println("newbody = " + newBody);
        //System.out.println("context = " + context);

        TomTerm newBackQuoteAppl = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .ELEMENT_NODE),tom_append_list_concTomTerm(context,tom_cons_list_concTomTerm(newName,tom_cons_list_concTomTerm(newAttribute,tom_cons_list_concTomTerm(newBody,tom_empty_list_concTomTerm()))))) ;
          //System.out.println("newBackQuoteAppl1 = " + newBackQuoteAppl);
        newBackQuoteAppl = expandTomSyntax(newBackQuoteAppl);
          //System.out.println("newBackQuoteAppl2 = " + newBackQuoteAppl);
          //TomList newTail = aggregateXMLBody(context,tail);
        TomList newTail = parseBackQuoteXMLAppl(context,tom_get_tail_TomList(tom_match13_1_list1) );
        return tom_cons_list_concTomTerm(newBackQuoteAppl,tom_append_list_concTomTerm(newTail,tom_empty_list_concTomTerm())) ;
       } }} }} } } }} } } }} }}tom_match13_1_end5=tom_get_tail_TomList(tom_match13_1_end5);} }}} } }} }}}tom_match13_1_end3=tom_get_tail_TomList(tom_match13_1_end3);} }}}} }} } } }} }} }} }}label3: { if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_1) ||  false ) { { TargetLanguage tom_match13_1_1_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_1); if(tom_is_fun_sym_ITL(tom_match13_1_1_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_1_1)) , "<") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_2) ||  false ) { { TomList tom_match13_1_begin3=tom_match13_1_list1; { TomList tom_match13_1_end3=tom_match13_1_list1; while (!(tom_is_empty_TomList(tom_match13_1_end3))) {tom_match13_1_list1=tom_match13_1_end3;{ { TomList tom_Attributes=tom_get_slice_concTomTerm(tom_match13_1_begin3,tom_match13_1_end3); { TomTerm tom_match13_1_4=tom_get_head_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_4) ||  false ) { { TargetLanguage tom_match13_1_4_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_4); if(tom_is_fun_sym_ITL(tom_match13_1_4_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match13_1_4_1)) , "/>") ||  false ) {







 
        if(containClosingBracket(tom_Attributes )) {
          break label3;
        }
          //System.out.println("SingleNode(" + name +")");
          //System.out.println("Attributes = " + Attributes);

        TomTerm newName = tom_make_BackQuoteAppl(emptyOption(),encodeName(tom_get_slot_BuildVariable_astName(tom_match13_1_2)),empty()) ;
        TomTerm newAttribute = metaEncodeTNodeList(aggregateXMLAttribute(context,tom_Attributes ));
        //System.out.println("aggregate: " + newAttribute);

        TomTerm newBody = metaEncodeTNodeList(tom_empty_list_concTomTerm() );
        TomTerm newBackQuoteAppl = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .ELEMENT_NODE),tom_append_list_concTomTerm(context,tom_cons_list_concTomTerm(newName,tom_cons_list_concTomTerm(newAttribute,tom_cons_list_concTomTerm(newBody,tom_empty_list_concTomTerm()))))) ;
          //System.out.println("newBackQuoteAppl1 = " + newBackQuoteAppl);
        newBackQuoteAppl = expandTomSyntax(newBackQuoteAppl);
          //System.out.println("newBackQuoteAppl2 = " + newBackQuoteAppl);
          //TomList newTail = aggregateXMLBody(context,tail);
        TomList newTail = parseBackQuoteXMLAppl(context,tom_get_tail_TomList(tom_match13_1_list1) );
        return tom_cons_list_concTomTerm(newBackQuoteAppl,tom_append_list_concTomTerm(newTail,tom_empty_list_concTomTerm())) ;

       } }} }}}tom_match13_1_end3=tom_get_tail_TomList(tom_match13_1_end3);} }}} }} } } }} }} }} }} if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { if(tom_is_empty_TomList(tom_match13_1)) {

 
        return tom_empty_list_concTomTerm() ;
       } } if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_head=tom_get_head_TomList(tom_match13_1_list1);

 
        TomList newTail = parseBackQuoteXMLAppl(context,tom_get_tail_TomList(tom_match13_1_list1) );
        return tom_cons_list_concTomTerm(tom_head,tom_append_list_concTomTerm(newTail,tom_empty_list_concTomTerm())) ;
      } }} }}}


 
    return list;
  }

  private boolean containClosingBracket(TomList list) {
     { TomList tom_match14_1=(( TomList)list);{ if(tom_is_fun_sym_concTomTerm(tom_match14_1) ||  false ) { { TomList tom_match14_1_list1=tom_match14_1; { TomList tom_match14_1_begin1=tom_match14_1_list1; { TomList tom_match14_1_end1=tom_match14_1_list1; while (!(tom_is_empty_TomList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1;{ { TomTerm tom_match14_1_2=tom_get_head_TomList(tom_match14_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match14_1_2) ||  false ) { { TargetLanguage tom_match14_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match14_1_2); if(tom_is_fun_sym_ITL(tom_match14_1_2_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match14_1_2_1)) , ">") ||  false ) {
 
        return true;
       } }} }}tom_match14_1_end1=tom_get_tail_TomList(tom_match14_1_end1);} }}}} } if(tom_is_fun_sym_concTomTerm(tom_match14_1) ||  false ) { { TomList tom_match14_1_list1=tom_match14_1; { TomList tom_match14_1_begin1=tom_match14_1_list1; { TomList tom_match14_1_end1=tom_match14_1_list1; while (!(tom_is_empty_TomList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1;{ { TomTerm tom_match14_1_2=tom_get_head_TomList(tom_match14_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match14_1_2) ||  false ) { { TargetLanguage tom_match14_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match14_1_2); if(tom_is_fun_sym_ITL(tom_match14_1_2_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match14_1_2_1)) , "/>") ||  false ) {
 
        return true;
       } }} }}tom_match14_1_end1=tom_get_tail_TomList(tom_match14_1_end1);} }}}} }}}
 
    return false;
  }
  
  private TomTerm metaEncodeTNodeList(TomList list) {
    return tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .CONC_TNODE),list) ;
  }
  
  private TomList aggregateXMLBody(TomList context, TomList subjectList) {
    TomTerm composite = expandBackQuoteXMLAppl(context,tom_make_Composite(subjectList) );
      //System.out.println("composite = " + composite);
    return composite.getArgs();
  }

  private TomName encodeName(TomName name) {
    return tom_make_Name( "\"" +name .getString() + "\"") ;
  }
  
  private TomList aggregateXMLAttribute(TomList context,TomList subjectList) {
    TomList list = tom_empty_list_concTomTerm() ;
     { TomList tom_match15_1=(( TomList)subjectList);{ if(tom_is_fun_sym_concTomTerm(tom_match15_1) ||  false ) { { TomList tom_match15_1_list1=tom_match15_1; { TomList tom_match15_1_begin1=tom_match15_1_list1; { TomList tom_match15_1_end1=tom_match15_1_list1; while (!(tom_is_empty_TomList(tom_match15_1_end1))) {tom_match15_1_list1=tom_match15_1_end1;{ { TomTerm tom_match15_1_2=tom_get_head_TomList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match15_1_2) ||  false ) { if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm tom_match15_1_3=tom_get_head_TomList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match15_1_3) ||  false ) { { TargetLanguage tom_match15_1_3_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match15_1_3); if(tom_is_fun_sym_ITL(tom_match15_1_3_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match15_1_3_1)) , "=") ||  false ) { if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm tom_value=tom_get_head_TomList(tom_match15_1_list1);



 
          //TomTerm newValue = `BackQuoteAppl(emptyOption(),Name(Constants.TEXT_NODE),concTomTerm(value));
          // no longer necessary to encode string attributes
        TomTerm newValue = tom_value ;
        
        TomList args = tom_append_list_concTomTerm(context,tom_cons_list_concTomTerm(tom_make_BackQuoteAppl(emptyOption(),encodeName(tom_get_slot_BuildVariable_astName(tom_match15_1_2)),tom_empty_list_concTomTerm()),tom_cons_list_concTomTerm(tom_make_BackQuoteAppl(emptyOption(),tom_make_Name( "\"true\""),tom_empty_list_concTomTerm()),tom_cons_list_concTomTerm(newValue,tom_empty_list_concTomTerm()))))



 ;
        TomTerm attributeNode = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .ATTRIBUTE_NODE),args)

 ;
        list = tom_make_manyTomList(attributeNode,list) ;
      } } } }} }} } }}tom_match15_1_end1=tom_get_tail_TomList(tom_match15_1_end1);} }}}} } if(tom_is_fun_sym_concTomTerm(tom_match15_1) ||  false ) { { TomList tom_match15_1_list1=tom_match15_1; { TomList tom_match15_1_begin1=tom_match15_1_list1; { TomList tom_match15_1_end1=tom_match15_1_list1; while (!(tom_is_empty_TomList(tom_match15_1_end1))) {tom_match15_1_list1=tom_match15_1_end1;{ { TomTerm tom_match15_1_2=tom_get_head_TomList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match15_1_2) ||  false ) { if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm tom_match15_1_3=tom_get_head_TomList(tom_match15_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match15_1_3) ||  false ) { { TargetLanguage tom_match15_1_3_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match15_1_3); if(tom_is_fun_sym_ITL(tom_match15_1_3_1) ||  false ) { if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_get_slot_ITL_code(tom_match15_1_3_1)) , "*") ||  false ) {





 
        TomTerm attributeNode = tom_make_VariableStar(emptyOption(),tom_get_slot_BuildVariable_astName(tom_match15_1_2),tom_make_TomTypeAlone( "unknown type"),tom_empty_list_concConstraint()) ;
        list = tom_make_manyTomList(attributeNode,list) ;
       } }} }} } }}tom_match15_1_end1=tom_get_tail_TomList(tom_match15_1_end1);} }}}} }}}
 

    //list = (TomList) sortAttributeList(list).reverse();
    list = sortAttributeList(list);
    return list;
  }

  
} // Class TomExpander


  
