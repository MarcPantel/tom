/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import java.util.logging.Level;
import java.util.Iterator;
import java.util.ArrayList;

import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.tools.ASTFactory;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.Tools;
import tom.engine.tools.SymbolTable;
import tom.engine.xml.Constants;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import aterm.ATerm;

import tom.library.strategy.mutraveler.MuTraveler;
import tom.library.strategy.mutraveler.Identity;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;


/**
 * The TomExpander plugin.
 * Perform syntax expansion and more.
 */
public class TomExpander extends TomGenericPlugin {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Expression tom_make_FalseTL() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_FalseTL(); }private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_Return( tom.engine.adt.tomsignature.types.TomTerm t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Return(t0); }private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Symbol( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  (t!= null) && t.isSymbol() ;}private static  tom.engine.adt.tomsignature.types.TomSymbol tom_make_Symbol( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomType t1,  tom.engine.adt.tomsignature.types.PairNameDeclList t2,  tom.engine.adt.tomsignature.types.OptionList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomSymbol_Symbol(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Symbol_astName( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Symbol_typesToType( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getTypesToType() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_slot_Symbol_pairNameDeclList( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getPairNameDeclList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Symbol_option( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomName tom_make_EmptyName() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_EmptyName(); }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_make_Name( String  t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_Name(t0); }private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomsignature.types.SlotList t) {  return (t!= null) && t.isSortSlotList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_empty_list_concSlot() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static  tom.engine.adt.tomsignature.types.SlotList tom_cons_list_concSlot( tom.engine.adt.tomsignature.types.Slot e,  tom.engine.adt.tomsignature.types.SlotList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private static  tom.engine.adt.tomsignature.types.Slot tom_get_head_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_tail_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getTail() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_append_list_concSlot( tom.engine.adt.tomsignature.types.SlotList l1,  tom.engine.adt.tomsignature.types.SlotList l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slice_concSlot( tom.engine.adt.tomsignature.types.SlotList begin,  tom.engine.adt.tomsignature.types.SlotList end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomsignature.types.SlotList)tom_get_slice_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static  tom.engine.adt.tomsignature.types.SlotList tom_make_emptySlotList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static boolean tom_is_fun_sym_manySlotList( tom.engine.adt.tomsignature.types.SlotList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_make_manySlotList( tom.engine.adt.tomsignature.types.Slot e,  tom.engine.adt.tomsignature.types.SlotList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private static  tom.engine.adt.tomsignature.types.Slot tom_get_slot_manySlotList_head( tom.engine.adt.tomsignature.types.SlotList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_manySlotList_tail( tom.engine.adt.tomsignature.types.SlotList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomsignature.types.Slot t) {  return  (t!= null) && t.isPairSlotAppl() ;}private static  tom.engine.adt.tomsignature.types.Slot tom_make_PairSlotAppl( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_PairSlotAppl(t0, t1); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_PairSlotAppl_slotName( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_PairSlotAppl_appl( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getAppl() ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_empty_list_concConstraint() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(); }private static  tom.engine.adt.tomsignature.types.ConstraintList tom_cons_list_concConstraint( tom.engine.adt.tomsignature.types.Constraint e,  tom.engine.adt.tomsignature.types.ConstraintList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(e,l); }private static  tom.engine.adt.tomsignature.types.Constraint tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getTail() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_append_list_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList l1,  tom.engine.adt.tomsignature.types.ConstraintList l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slice_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList begin,  tom.engine.adt.tomsignature.types.ConstraintList end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_slice_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomsignature.types.OptionList t) {  return (t!= null) && t.isSortOptionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_empty_list_concOption() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(); }private static  tom.engine.adt.tomsignature.types.OptionList tom_cons_list_concOption( tom.engine.adt.tomsignature.types.Option e,  tom.engine.adt.tomsignature.types.OptionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l); }private static  tom.engine.adt.tomsignature.types.Option tom_get_head_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_tail_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_append_list_concOption( tom.engine.adt.tomsignature.types.OptionList l1,  tom.engine.adt.tomsignature.types.OptionList l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slice_concOption( tom.engine.adt.tomsignature.types.OptionList begin,  tom.engine.adt.tomsignature.types.OptionList end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomsignature.types.OptionList)tom_get_slice_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_OriginTracking( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isOriginTracking() ;}private static  tom.engine.adt.tomsignature.types.Option tom_make_OriginTracking( tom.engine.adt.tomsignature.types.TomName t0,  int  t1,  String  t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_OriginTracking(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_OriginTracking_astName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstName() ;}private static  int  tom_get_slot_OriginTracking_line( tom.engine.adt.tomsignature.types.Option t) {  return  t.getLine() ;}private static  String  tom_get_slot_OriginTracking_fileName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getFileName() ;}private static boolean tom_is_fun_sym_DeclarationToOption( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isDeclarationToOption() ;}private static  tom.engine.adt.tomsignature.types.Option tom_make_DeclarationToOption( tom.engine.adt.tomsignature.types.Declaration t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_DeclarationToOption(t0); }private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_DeclarationToOption_astDeclaration( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstDeclaration() ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TypesToType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTypesToType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_TypesToType( tom.engine.adt.tomsignature.types.TomTypeList t0,  tom.engine.adt.tomsignature.types.TomType t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_TypesToType(t0, t1); }private static  tom.engine.adt.tomsignature.types.TomTypeList tom_get_slot_TypesToType_domain( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getDomain() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TypesToType_codomain( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getCodomain() ;}private static boolean tom_is_fun_sym_Codomain( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Codomain_astName( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getAstName() ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomsignature.types.TomList t) {  return (t!= null) && t.isSortTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_empty_list_concTomTerm() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static  tom.engine.adt.tomsignature.types.TomList tom_cons_list_concTomTerm( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_head_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_append_list_concTomTerm( tom.engine.adt.tomsignature.types.TomList l1,  tom.engine.adt.tomsignature.types.TomList l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomList tom_get_slice_concTomTerm( tom.engine.adt.tomsignature.types.TomList begin,  tom.engine.adt.tomsignature.types.TomList end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomList)tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomsignature.types.TomList)tom_get_slice_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static  tom.engine.adt.tomsignature.types.TomList tom_make_emptyTomList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static boolean tom_is_fun_sym_manyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_make_manyTomList( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_manyTomList_head( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_manyTomList_tail( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildTerm( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomList t1,  String  t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildTerm(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildConstant( tom.engine.adt.tomsignature.types.TomName t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConstant(t0); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_FunctionCall( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomList t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_FunctionCall(t0, t1); }private static boolean tom_is_fun_sym_BackQuoteAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBackQuoteAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_BackQuoteAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BackQuoteAppl_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_BackQuoteAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_ExpressionToTomTerm( tom.engine.adt.tomsignature.types.Expression t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_ExpressionToTomTerm(t0); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_TomSymbolToTomTerm( tom.engine.adt.tomsignature.types.TomSymbol t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TomSymbolToTomTerm(t0); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_emptyTerm() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_EmptyTerm(); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_Placeholder( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.ConstraintList t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Placeholder(t0, t1); }private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_Variable( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomName t1,  tom.engine.adt.tomsignature.types.TomType t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Variable(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_XMLAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isXMLAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_XMLAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_XMLAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_XMLAppl_attrList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAttrList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_XMLAppl_childList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getChildList() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_XMLAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_RecordAppl( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.NameList t1,  tom.engine.adt.tomsignature.types.SlotList t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_RecordAppl(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTermAppl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_TermAppl( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.NameList t1,  tom.engine.adt.tomsignature.types.TomList t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TermAppl(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_TermAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_TermAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_TermAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_TermAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_MakeDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_MakeDecl_astType( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_MakeDecl_args( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetHeadDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetHeadDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetHeadDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetHeadDecl_codomain( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetHeadDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetHeadDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetHeadDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_IsFsymDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isIsFsymDecl() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_make_IsFsymDecl( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.Instruction t2,  tom.engine.adt.tomsignature.types.Option t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_IsFsymDecl(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsFsymDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsFsymDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_IsFsymDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_IsFsymDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */      /*  * strategies with Id considered as failure  */       






  /** some output suffixes */
  public static final String EXPANDED_SUFFIX       = ".tfix.expanded";
  public static final String EXPANDED_TABLE_SUFFIX = ".tfix.expanded.table";

  /** the declared options string */
  public static final String DECLARED_OPTIONS =
    "<options>" +
    "<boolean name='expand' altName='' description='Expander (activated by default)' value='true'/>" +
    "</options>";

  /** the kernel expander acting at very low level */
  private TomKernelExpander tomKernelExpander;
  /** the tomfactory for creating intermediate terms */

  /** Constructor*/
  public TomExpander() {
    super("TomExpander");
    tomKernelExpander = new TomKernelExpander();
  }

  /**
   * The run() method performs expansion for tom syntax, variables,...
   */
  public void run() {
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");
    TomTerm expandedTerm = null;
    try {
      tomKernelExpander.setSymbolTable(getStreamManager().getSymbolTable());
      TomTerm syntaxExpandedTerm   =  (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit((TomTerm)getWorkingTerm());
      updateSymbolTable();
      TomTerm context = tom_make_emptyTerm();

      TomTerm variableExpandedTerm = expandVariable(context, syntaxExpandedTerm);
      TomTerm stringExpandedTerm   = (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandString(this),tom_make_All(tom_make_MuVar("x")))))).visit(variableExpandedTerm);
      expandedTerm =  (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_updateCodomain(this),tom_make_All(tom_make_MuVar("x")))))).visit(stringExpandedTerm);
      setWorkingTerm(expandedTerm);
      // verbose
      getLogger().log(Level.INFO, TomMessage.tomExpandingPhase.getMessage(),
          new Integer((int)(System.currentTimeMillis()-startChrono)));
    } catch (Exception e) {
      getLogger().log( Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
          new Object[]{getClass().getName(), getStreamManager().getInputFileName(), e.getMessage()} );
      e.printStackTrace();
      return;
    }
    if(intermediate) {
      Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix()
          + EXPANDED_SUFFIX, expandedTerm);
      Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix()
          + EXPANDED_TABLE_SUFFIX, symbolTable().toTerm());
    }
  }

  /*
   * updateSymbol is called after a first syntax expansion phase
   * this phase updates the symbolTable according to the typeTable
   * this is performed by recursively traversing each symbol
   * - backquote are expanded
   * - each TomTypeAlone is replaced by the corresponding TomType
   */
  public void updateSymbolTable() {
    SymbolTable symbolTable = getStreamManager().getSymbolTable();
    Iterator it = symbolTable.keySymbolIterator();
    while(it.hasNext()) {
      String tomName = (String)it.next();
      TomTerm emptyContext = tom_make_emptyTerm();
      TomSymbol tomSymbol = getSymbolFromName(tomName);

      /*
       * we update codomains which a constrained by a symbolName
       * (come from the %strategy operator)
       */
      tomSymbol = updateConstrainedSymbolCodomain(tomSymbol, symbolTable);
      /*
       * add default isFsym and make HERE
       */
      tomSymbol = addDefaultIsFSym(tomSymbol);
      try{
        tomSymbol =  ((TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(tom_make_TomSymbolToTomTerm(tomSymbol))).getAstSymbol();
      }catch(VisitFailure e){
        // never
      }
      //System.out.println("symbol = " + tomSymbol);
      tomSymbol = expandVariable(emptyContext,tom_make_TomSymbolToTomTerm(tomSymbol)).getAstSymbol();
      getStreamManager().getSymbolTable().putSymbol(tomName,tomSymbol);
    }
  }

  private TomSymbol updateConstrainedSymbolCodomain(TomSymbol symbol, SymbolTable symbolTable) {
     if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match1_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol); if (tom_is_fun_sym_Symbol(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Symbol_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.TomType tom_match1_1_typesToType=tom_get_slot_Symbol_typesToType(tom_match1_1); { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match1_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match1_1); { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option=tom_get_slot_Symbol_option(tom_match1_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match1_1_astName; if (tom_is_fun_sym_TypesToType(tom_match1_1_typesToType) ||  false ) { { tom.engine.adt.tomsignature.types.TomTypeList tom_match1_1_typesToType_domain=tom_get_slot_TypesToType_domain(tom_match1_1_typesToType); { tom.engine.adt.tomsignature.types.TomType tom_match1_1_typesToType_codomain=tom_get_slot_TypesToType_codomain(tom_match1_1_typesToType); { tom.engine.adt.tomsignature.types.TomTypeList tom_domain=tom_match1_1_typesToType_domain; if (tom_is_fun_sym_Codomain(tom_match1_1_typesToType_codomain) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_typesToType_codomain_astName=tom_get_slot_Codomain_astName(tom_match1_1_typesToType_codomain); if (tom_is_fun_sym_Name(tom_match1_1_typesToType_codomain_astName) ||  false ) { { String  tom_match1_1_typesToType_codomain_astName_string=tom_get_slot_Name_string(tom_match1_1_typesToType_codomain_astName); { String  tom_opName=tom_match1_1_typesToType_codomain_astName_string; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_slots=tom_match1_1_pairNameDeclList; { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match1_1_option; if ( true ) {

        //System.out.println("update codomain: " + `name);
        //System.out.println("depend from : " + `opName);
        TomSymbol dependSymbol = symbolTable.getSymbolFromName(tom_opName);
        //System.out.println("1st depend codomain: " + getSymbolCodomain(dependSymbol));
        dependSymbol = updateConstrainedSymbolCodomain(dependSymbol,symbolTable);
        TomType codomain = getSymbolCodomain(dependSymbol);
        //System.out.println("2nd depend codomain: " + getSymbolCodomain(dependSymbol));
        OptionList newOptions = tom_options;
         if(tom_options instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match2_1=(( tom.engine.adt.tomsignature.types.OptionList)tom_options); if (tom_is_fun_sym_concOption(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match2_1_list1=tom_match2_1; { tom.engine.adt.tomsignature.types.OptionList tom_match2_1_begin1=tom_match2_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match2_1_end1=tom_match2_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match2_1_end1))) {tom_match2_1_list1=tom_match2_1_end1; { { tom.engine.adt.tomsignature.types.OptionList tom_O1=tom_get_slice_concOption(tom_match2_1_begin1,tom_match2_1_end1); { tom.engine.adt.tomsignature.types.Option tom_match2_1_2=tom_get_head_concOption_OptionList(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_concOption_OptionList(tom_match2_1_list1); if (tom_is_fun_sym_DeclarationToOption(tom_match2_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match2_1_2_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match2_1_2); if (tom_is_fun_sym_MakeDecl(tom_match2_1_2_astDeclaration) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_m=tom_match2_1_2_astDeclaration; { tom.engine.adt.tomsignature.types.TomType tom_match2_1_2_astDeclaration_astType=tom_get_slot_MakeDecl_astType(tom_match2_1_2_astDeclaration); if (tom_is_fun_sym_Codomain(tom_match2_1_2_astDeclaration_astType) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_O2=tom_match2_1_list1; if ( true ) {

            Declaration newMake = tom_m.setAstType(codomain);
            //System.out.println("newMake: " + newMake);
            newOptions = tom_append_list_concOption(tom_O1,tom_append_list_concOption(tom_O2,tom_cons_list_concOption(tom_make_DeclarationToOption(newMake),tom_empty_list_concOption())));
           } } } } } } } } } }tom_match2_1_end1=tom_get_tail_concOption_OptionList(tom_match2_1_end1); } }tom_match2_1_list1=tom_match2_1_begin1; } } } } } } }

        TomSymbol newSymbol = tom_make_Symbol(tom_name,tom_make_TypesToType(tom_domain,codomain),tom_slots,newOptions);
        //System.out.println("newSymbol: " + newSymbol);
        symbolTable.putSymbol(tom_name.getString(),newSymbol);
        return newSymbol;
       } } } } } } } } } } } } } } } } } } } }

    return symbol;
  }

  private TomSymbol addDefaultIsFSym(TomSymbol tomSymbol) {
     if(tomSymbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match3_1=(( tom.engine.adt.tomsignature.types.TomSymbol)tomSymbol); if (tom_is_fun_sym_Symbol(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option=tom_get_slot_Symbol_option(tom_match3_1); if (tom_is_fun_sym_concOption(tom_match3_1_option) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option_list1=tom_match3_1_option; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option_begin1=tom_match3_1_option_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option_end1=tom_match3_1_option_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match3_1_option_end1))) {tom_match3_1_option_list1=tom_match3_1_option_end1; { { tom.engine.adt.tomsignature.types.Option tom_match3_1_option_2=tom_get_head_concOption_OptionList(tom_match3_1_option_list1);tom_match3_1_option_list1=tom_get_tail_concOption_OptionList(tom_match3_1_option_list1); if (tom_is_fun_sym_DeclarationToOption(tom_match3_1_option_2) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match3_1_option_2_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match3_1_option_2); if (tom_is_fun_sym_IsFsymDecl(tom_match3_1_option_2_astDeclaration) ||  false ) { if ( true ) {

        return tomSymbol;
       } } } } }tom_match3_1_option_end1=tom_get_tail_concOption_OptionList(tom_match3_1_option_end1); } }tom_match3_1_option_list1=tom_match3_1_option_begin1; } } } } } } } if (tom_is_fun_sym_Symbol(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astName=tom_get_slot_Symbol_astName(tom_match3_1); { tom.engine.adt.tomsignature.types.TomType tom_match3_1_typesToType=tom_get_slot_Symbol_typesToType(tom_match3_1); { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match3_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match3_1); { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option=tom_get_slot_Symbol_option(tom_match3_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match3_1_astName; if (tom_is_fun_sym_TypesToType(tom_match3_1_typesToType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_t=tom_match3_1_typesToType; { tom.engine.adt.tomsignature.types.TomTypeList tom_match3_1_typesToType_domain=tom_get_slot_TypesToType_domain(tom_match3_1_typesToType); { tom.engine.adt.tomsignature.types.TomType tom_match3_1_typesToType_codomain=tom_get_slot_TypesToType_codomain(tom_match3_1_typesToType); { tom.engine.adt.tomsignature.types.TomType tom_codom=tom_match3_1_typesToType_codomain; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_l=tom_match3_1_pairNameDeclList; if (tom_is_fun_sym_concOption(tom_match3_1_option) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option_list1=tom_match3_1_option; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option_begin1=tom_match3_1_option_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option_end1=tom_match3_1_option_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match3_1_option_end1))) {tom_match3_1_option_list1=tom_match3_1_option_end1; { { tom.engine.adt.tomsignature.types.OptionList tom_b=tom_get_slice_concOption(tom_match3_1_option_begin1,tom_match3_1_option_end1); { tom.engine.adt.tomsignature.types.Option tom_match3_1_option_2=tom_get_head_concOption_OptionList(tom_match3_1_option_list1);tom_match3_1_option_list1=tom_get_tail_concOption_OptionList(tom_match3_1_option_list1); if (tom_is_fun_sym_OriginTracking(tom_match3_1_option_2) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_origin=tom_match3_1_option_2; { tom.engine.adt.tomsignature.types.TomName tom_match3_1_option_2_astName=tom_get_slot_OriginTracking_astName(tom_match3_1_option_2); { int  tom_match3_1_option_2_line=tom_get_slot_OriginTracking_line(tom_match3_1_option_2); { String  tom_match3_1_option_2_fileName=tom_get_slot_OriginTracking_fileName(tom_match3_1_option_2); { int  tom_line=tom_match3_1_option_2_line; { String  tom_file=tom_match3_1_option_2_fileName; { tom.engine.adt.tomsignature.types.OptionList tom_a=tom_match3_1_option_list1; if ( true ) {

        return tom_make_Symbol(tom_name,tom_t,tom_l,tom_append_list_concOption(tom_b,tom_cons_list_concOption(tom_origin,tom_cons_list_concOption(tom_make_DeclarationToOption(tom_make_IsFsymDecl(tom_name,tom_make_Variable(tom_cons_list_concOption(tom_make_OriginTracking(tom_make_Name("t"),tom_line,tom_file),tom_empty_list_concOption()),tom_make_Name("t"),tom_codom,tom_empty_list_concConstraint()),tom_make_Return(tom_make_ExpressionToTomTerm(tom_make_FalseTL())),tom_make_OriginTracking(tom_make_Name("is_fsym"),tom_line,tom_file))),tom_append_list_concOption(tom_a,tom_empty_list_concOption())))));
       } } } } } } } } } } }tom_match3_1_option_end1=tom_get_tail_concOption_OptionList(tom_match3_1_option_end1); } }tom_match3_1_option_list1=tom_match3_1_option_begin1; } } } } } } } } } } } } } } } } } } }

    return tomSymbol;
  }

  /**
   * inherited from OptionOwner interface (plugin)
   */
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomExpander.DECLARED_OPTIONS);
  }

  private TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return tomKernelExpander.expandVariable(contextSubject,subject);
  }

  /*
   * The 'expandTermApplTomSyntax' phase replaces:
   * - each 'TermAppl' by its expanded record form:
   *    placeholders are removed
   *    slotName are attached to arguments
   * - each BackQuoteTerm by its compiled form
   */

   private static class expandTermApplTomSyntax  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomExpander  expander;  public expandTermApplTomSyntax(  TomExpander  expander ) { super(tom_make_Fail() ); this.expander=expander; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); if (tom_is_fun_sym_BackQuoteAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_backQuoteTerm=tom_match4_1; if ( true ) {


        TomTerm t = (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandBackQuoteAppl(expander),tom_make_All(tom_make_MuVar("x")))))).visit(tom_backQuoteTerm);
        //System.out.println("t = " + t);
        return t;
       } } } if (tom_is_fun_sym_TermAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match4_1_option=tom_get_slot_TermAppl_option(tom_match4_1); { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList=tom_get_slot_TermAppl_nameList(tom_match4_1); { tom.engine.adt.tomsignature.types.TomList tom_match4_1_args=tom_get_slot_TermAppl_args(tom_match4_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match4_1_constraints=tom_get_slot_TermAppl_constraints(tom_match4_1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match4_1_option; { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match4_1_nameList; { tom.engine.adt.tomsignature.types.TomList tom_args=tom_match4_1_args; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match4_1_constraints; if ( true ) {


        return expander.expandTermAppl(tom_option,tom_nameList,tom_args,tom_constraints);
       } } } } } } } } } } if (tom_is_fun_sym_XMLAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match4_1_option=tom_get_slot_XMLAppl_option(tom_match4_1); { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList=tom_get_slot_XMLAppl_nameList(tom_match4_1); { tom.engine.adt.tomsignature.types.TomList tom_match4_1_attrList=tom_get_slot_XMLAppl_attrList(tom_match4_1); { tom.engine.adt.tomsignature.types.TomList tom_match4_1_childList=tom_get_slot_XMLAppl_childList(tom_match4_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match4_1_constraints=tom_get_slot_XMLAppl_constraints(tom_match4_1); { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match4_1_option; { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match4_1_nameList; { tom.engine.adt.tomsignature.types.TomList tom_list1=tom_match4_1_attrList; { tom.engine.adt.tomsignature.types.TomList tom_list2=tom_match4_1_childList; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match4_1_constraints; if ( true ) {


        //System.out.println("expandXML in:\n" + subject);
        return expander.expandXMLAppl(tom_optionList, tom_nameList, tom_list1, tom_list2,tom_constraints);
       } } } } } } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_expandTermApplTomSyntax( TomExpander  t0) { return new expandTermApplTomSyntax(t0); }



  /*
   * this post-processing phase replaces untyped (universalType) codomain
   * by their precise type (according to the symbolTable)
   */
   private static class updateCodomain  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomExpander  expander;  public updateCodomain(  TomExpander  expander ) { super(tom_make_Fail() ); this.expander=expander; } public  tom.engine.adt.tomsignature.types.Declaration visit_Declaration(  tom.engine.adt.tomsignature.types.Declaration tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match5_1=(( tom.engine.adt.tomsignature.types.Declaration)tom__arg); if (tom_is_fun_sym_GetHeadDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_decl=tom_match5_1; { tom.engine.adt.tomsignature.types.TomName tom_match5_1_opname=tom_get_slot_GetHeadDecl_opname(tom_match5_1); if (tom_is_fun_sym_Name(tom_match5_1_opname) ||  false ) { { String  tom_match5_1_opname_string=tom_get_slot_Name_string(tom_match5_1_opname); { String  tom_opName=tom_match5_1_opname_string; if ( true ) {


        TomSymbol tomSymbol = expander.getSymbolFromName(tom_opName);
        TomTypeList codomain = getSymbolDomain(tomSymbol);
        if(codomain.isSingle()) {
          Declaration t = (Declaration)tom_decl;
          t = t.setCodomain(codomain.getHead());
          return t;
        } else {
          throw new TomRuntimeException("updateCodomain: bad codomain: " + codomain);
        }
       } } } } } } } if (tom_is_fun_sym_GetHeadDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_decl=tom_match5_1; { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_variable=tom_get_slot_GetHeadDecl_variable(tom_match5_1); if (tom_is_fun_sym_Variable(tom_match5_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match5_1_variable_astType=tom_get_slot_Variable_astType(tom_match5_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_domain=tom_match5_1_variable_astType; if ( true ) {


        TomSymbol tomSymbol = expander.getSymbolFromType(tom_domain);
        if(tomSymbol != null) {
          TomTypeList codomain = getSymbolDomain(tomSymbol);

          if(codomain.isSingle()) {
            Declaration t = (Declaration)tom_decl;
            t = t.setCodomain(codomain.getHead());
            return t;
          } else {
            throw new TomRuntimeException("updateCodomain: bad codomain: " + codomain);
          }
        }
       } } } } } } } } } return super.visit_Declaration(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_updateCodomain( TomExpander  t0) { return new updateCodomain(t0); }



  /*
   * replace 'abc' by conc('a','b','c')
   */
   private static class expandString  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomExpander  expander;  public expandString(  TomExpander  expander ) { super(tom_make_Fail() ); this.expander=expander; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); if (tom_is_fun_sym_RecordAppl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_appl=tom_match6_1; { tom.engine.adt.tomsignature.types.NameList tom_match6_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match6_1); { tom.engine.adt.tomsignature.types.SlotList tom_match6_1_slots=tom_get_slot_RecordAppl_slots(tom_match6_1); if (tom_is_fun_sym_concTomName(tom_match6_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match6_1_nameList_list1=tom_match6_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match6_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_nameList_1=tom_get_head_concTomName_NameList(tom_match6_1_nameList_list1);tom_match6_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match6_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match6_1_nameList_1) ||  false ) { { String  tom_match6_1_nameList_1_string=tom_get_slot_Name_string(tom_match6_1_nameList_1); { String  tom_tomName=tom_match6_1_nameList_1_string; { tom.engine.adt.tomsignature.types.SlotList tom_args=tom_match6_1_slots; if ( true ) {


            TomSymbol tomSymbol = expander.getSymbolFromName(tom_tomName);
            //System.out.println("appl = " + subject);
            if(tomSymbol != null) {
              if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
                //System.out.println("appl = " + subject);
                SlotList newArgs = expander.expandChar(tom_args);
                if(newArgs!=tom_args) {
                  return tom_appl.setSlots(newArgs);
                }
              }
            }
           } } } } } } } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_expandString( TomExpander  t0) { return new expandString(t0); }



  /*
   * detect ill-formed char: 'abc'
   * and expand it into a list of char: 'a','b','c'
   */
  private SlotList expandChar(SlotList args) {
    if(args.isEmpty()) {
      return args;
    } else {
      Slot head = args.getHead();
      SlotList tail = expandChar(args.getTail());
       if(head instanceof  tom.engine.adt.tomsignature.types.Slot) { { tom.engine.adt.tomsignature.types.Slot tom_match7_1=(( tom.engine.adt.tomsignature.types.Slot)head); if (tom_is_fun_sym_PairSlotAppl(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match7_1_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_appl=tom_get_slot_PairSlotAppl_appl(tom_match7_1); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match7_1_slotName; if (tom_is_fun_sym_RecordAppl(tom_match7_1_appl) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_appl=tom_match7_1_appl; { tom.engine.adt.tomsignature.types.NameList tom_match7_1_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match7_1_appl); { tom.engine.adt.tomsignature.types.SlotList tom_match7_1_appl_slots=tom_get_slot_RecordAppl_slots(tom_match7_1_appl); if (tom_is_fun_sym_concTomName(tom_match7_1_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match7_1_appl_nameList_list1=tom_match7_1_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match7_1_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match7_1_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match7_1_appl_nameList_list1);tom_match7_1_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match7_1_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match7_1_appl_nameList_1) ||  false ) { { String  tom_match7_1_appl_nameList_1_string=tom_get_slot_Name_string(tom_match7_1_appl_nameList_1); { String  tom_tomName=tom_match7_1_appl_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match7_1_appl_nameList_list1)) { if (tom_is_fun_sym_concSlot(tom_match7_1_appl_slots) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match7_1_appl_slots_list1=tom_match7_1_appl_slots; if (tom_is_empty_concSlot_SlotList(tom_match7_1_appl_slots_list1)) { if ( true ) {

          /*
           * ensure that the argument contains at least 1 character and 2 single quotes
           */
          TomSymbol tomSymbol = getSymbolFromName(tom_tomName);
          TomType termType = tomSymbol.getTypesToType().getCodomain();
          String type = termType.getTomType().getString();
          if(symbolTable().isCharType(type) && tom_tomName.length()>3) {
            if(tom_tomName.charAt(0)=='\'' && tom_tomName.charAt(tom_tomName.length()-1)=='\'') {
              SlotList newArgs = tail;
              //System.out.println("bingo -> " + tomSymbol);
              for(int i=tom_tomName.length()-2 ; i>0 ;  i--) {
                char c = tom_tomName.charAt(i);
                String newName = "'" + c + "'";
                TomSymbol newSymbol = tomSymbol.setAstName(tom_make_Name(newName));
                symbolTable().putSymbol(newName,newSymbol);
                Slot newHead = tom_make_PairSlotAppl(tom_slotName,tom_appl.setNameList(tom_cons_list_concTomName(tom_make_Name(newName),tom_empty_list_concTomName())));
                newArgs = tom_make_manySlotList(newHead,newArgs);
                //System.out.println("newHead = " + newHead);
                //System.out.println("newSymb = " + getSymbolFromName(newName));
              }
              return newArgs;
            } else {
              throw new TomRuntimeException("expandChar: strange char: " + tom_tomName);
            }
          }
         } } } } } } } } } } } } } } } } } } } } } }

      return tom_make_manySlotList(head,tail);
    }
  }

  /*
   * replaces 'TermAppl' by its 'RecordAppl' form
   * when no slotName exits, the position becomes the slotName
   */
  protected TomTerm expandTermAppl(OptionList option, NameList nameList, TomList args, ConstraintList constraints) {
    String opName = nameList.getHead().getString();
    TomSymbol tomSymbol = getSymbolFromName(opName);


    //System.out.println("expandTermAppl: " + tomSymbol);
    //System.out.println("  nameList = " + nameList);

    if(tomSymbol==null && args.isEmpty()) {
      return tom_make_RecordAppl(option,nameList,tom_make_emptySlotList(),constraints);
    }

    /*
       if(tomSymbol==null && !args.isEmpty() && !opName.equals("")) {
       System.out.println("expandTermAppl: " + tomSymbol);
       System.out.println("  opName = " + opName);
       System.out.println("  args = " + args);
       throw new TomRuntimeException("expandTermAppl: unknown symbol");
       }
     */

    SlotList slotList = tom_make_emptySlotList();
    if(opName.equals("") || tomSymbol==null || isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
      while(!args.isEmpty()) {
        try{
          TomTerm subterm = (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(args.getHead());
          TomName slotName = tom_make_EmptyName();
          if(subterm.isUnamedVariable()) {
            // do nothing
          } else {
            slotList = (SlotList)slotList.append(tom_make_PairSlotAppl(slotName,subterm));
          }
          args = args.getTail();
        }catch(VisitFailure e){}
      }
    } else {
      PairNameDeclList pairNameDeclList = tomSymbol.getPairNameDeclList();
      while(!args.isEmpty()) {
        try{
          TomTerm subterm = (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(args.getHead());
          TomName slotName = pairNameDeclList.getHead().getSlotName();
          if(subterm.isUnamedVariable()) {
            // do nothing
          } else {
            slotList = (SlotList)slotList.append(tom_make_PairSlotAppl(slotName,subterm));
          }
          args = args.getTail();
          pairNameDeclList = pairNameDeclList.getTail();
        }catch(VisitFailure e){}
      }
    }

    return tom_make_RecordAppl(option,nameList,slotList,constraints);
  }

   private static class expandBackQuoteAppl  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomExpander  expander;  public expandBackQuoteAppl(  TomExpander  expander ) { super(tom_make_Fail() ); this.expander=expander; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); if (tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match8_1_option=tom_get_slot_BackQuoteAppl_option(tom_match8_1); { tom.engine.adt.tomsignature.types.TomName tom_match8_1_astName=tom_get_slot_BackQuoteAppl_astName(tom_match8_1); { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args=tom_get_slot_BackQuoteAppl_args(tom_match8_1); { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match8_1_option; if (tom_is_fun_sym_Name(tom_match8_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match8_1_astName; { String  tom_match8_1_astName_string=tom_get_slot_Name_string(tom_match8_1_astName); { String  tom_tomName=tom_match8_1_astName_string; { tom.engine.adt.tomsignature.types.TomList tom_l=tom_match8_1_args; if ( true ) {


            TomSymbol tomSymbol = expander.getSymbolFromName(tom_tomName);
            TomList args  = (TomList) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandBackQuoteAppl(expander),tom_make_All(tom_make_MuVar("x")))))).visit(tom_l);

            //System.out.println("BackQuoteTerm: " + `tomName);
            //System.out.println("tomSymbol: " + tomSymbol);
            if(hasConstant(tom_optionList)) {
              return tom_make_BuildConstant(tom_name);
            } else if(tomSymbol != null) {
              if(isListOperator(tomSymbol)) {
                return ASTFactory.buildList(tom_name,args);
              } else if(isArrayOperator(tomSymbol)) {
                return ASTFactory.buildArray(tom_name,args);
              } else if(isDefinedSymbol(tomSymbol)) {
                return tom_make_FunctionCall(tom_name,args);
              } else {
                String moduleName = getModuleName(tom_optionList);
                if(moduleName==null) {
                  moduleName = TomBase.DEFAULT_MODULE_NAME;
                }
                return tom_make_BuildTerm(tom_name,args,moduleName);
              }
            } else {
              return tom_make_FunctionCall(tom_name,args);
            }
           } } } } } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_expandBackQuoteAppl( TomExpander  t0) { return new expandBackQuoteAppl(t0); }



  private static TomList sortAttributeList(TomList attrList) {
     if(attrList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match9_1=(( tom.engine.adt.tomsignature.types.TomList)attrList); if (tom_is_fun_sym_concTomTerm(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match9_1_list1=tom_match9_1; if (tom_is_empty_concTomTerm_TomList(tom_match9_1_list1)) { if ( true ) {
 return attrList;  } } } } if (tom_is_fun_sym_concTomTerm(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match9_1_list1=tom_match9_1; { tom.engine.adt.tomsignature.types.TomList tom_match9_1_begin1=tom_match9_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match9_1_end1=tom_match9_1_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1; { { tom.engine.adt.tomsignature.types.TomList tom_X1=tom_get_slice_concTomTerm(tom_match9_1_begin1,tom_match9_1_end1); { tom.engine.adt.tomsignature.types.TomTerm tom_e1=tom_get_head_concTomTerm_TomList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concTomTerm_TomList(tom_match9_1_list1); { tom.engine.adt.tomsignature.types.TomList tom_match9_1_begin3=tom_match9_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match9_1_end3=tom_match9_1_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match9_1_end3))) {tom_match9_1_list1=tom_match9_1_end3; { { tom.engine.adt.tomsignature.types.TomList tom_X2=tom_get_slice_concTomTerm(tom_match9_1_begin3,tom_match9_1_end3); { tom.engine.adt.tomsignature.types.TomTerm tom_e2=tom_get_head_concTomTerm_TomList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concTomTerm_TomList(tom_match9_1_list1); { tom.engine.adt.tomsignature.types.TomList tom_X3=tom_match9_1_list1; if ( true ) { if(tom_e1 instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom_e1); if(tom_e2 instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2=(( tom.engine.adt.tomsignature.types.TomTerm)tom_e2); if (tom_is_fun_sym_TermAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args=tom_get_slot_TermAppl_args(tom_match10_1); if (tom_is_fun_sym_manyTomList(tom_match10_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_args_head=tom_get_slot_manyTomList_head(tom_match10_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args_tail=tom_get_slot_manyTomList_tail(tom_match10_1_args); if (tom_is_fun_sym_RecordAppl(tom_match10_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_1_args_head); if (tom_is_fun_sym_concTomName(tom_match10_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList_list1=tom_match10_1_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_1_args_head_nameList_list1);tom_match10_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_1_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_1_args_head_nameList_1) ||  false ) { { String  tom_match10_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_1_args_head_nameList_1); { String  tom_name1=tom_match10_1_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1)) { if (tom_is_fun_sym_TermAppl(tom_match10_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args=tom_get_slot_TermAppl_args(tom_match10_2); if (tom_is_fun_sym_manyTomList(tom_match10_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2_args_head=tom_get_slot_manyTomList_head(tom_match10_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args_tail=tom_get_slot_manyTomList_tail(tom_match10_2_args); if (tom_is_fun_sym_RecordAppl(tom_match10_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_2_args_head); if (tom_is_fun_sym_concTomName(tom_match10_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList_list1=tom_match10_2_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_2_args_head_nameList_list1);tom_match10_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_2_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_2_args_head_nameList_1) ||  false ) { { String  tom_match10_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_2_args_head_nameList_1); { String  tom_name2=tom_match10_2_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1)) { if ( true ) {




              if(tom_name1.compareTo(tom_name2) > 0) {
                return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
              }
             } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_TermAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args=tom_get_slot_TermAppl_args(tom_match10_1); if (tom_is_fun_sym_manyTomList(tom_match10_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_args_head=tom_get_slot_manyTomList_head(tom_match10_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args_tail=tom_get_slot_manyTomList_tail(tom_match10_1_args); if (tom_is_fun_sym_TermAppl(tom_match10_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match10_1_args_head); if (tom_is_fun_sym_concTomName(tom_match10_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList_list1=tom_match10_1_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_1_args_head_nameList_list1);tom_match10_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_1_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_1_args_head_nameList_1) ||  false ) { { String  tom_match10_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_1_args_head_nameList_1); { String  tom_name1=tom_match10_1_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1)) { if (tom_is_fun_sym_TermAppl(tom_match10_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args=tom_get_slot_TermAppl_args(tom_match10_2); if (tom_is_fun_sym_manyTomList(tom_match10_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2_args_head=tom_get_slot_manyTomList_head(tom_match10_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args_tail=tom_get_slot_manyTomList_tail(tom_match10_2_args); if (tom_is_fun_sym_TermAppl(tom_match10_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match10_2_args_head); if (tom_is_fun_sym_concTomName(tom_match10_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList_list1=tom_match10_2_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_2_args_head_nameList_list1);tom_match10_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_2_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_2_args_head_nameList_1) ||  false ) { { String  tom_match10_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_2_args_head_nameList_1); { String  tom_name2=tom_match10_2_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1)) { if ( true ) {



              if(tom_name1.compareTo(tom_name2) > 0) {
                return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
              }
             } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match10_1_slots=tom_get_slot_RecordAppl_slots(tom_match10_1); if (tom_is_fun_sym_manySlotList(tom_match10_1_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match10_1_slots_head=tom_get_slot_manySlotList_head(tom_match10_1_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match10_1_slots_tail=tom_get_slot_manySlotList_tail(tom_match10_1_slots); if (tom_is_fun_sym_PairSlotAppl(tom_match10_1_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match10_1_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match10_1_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match10_1_slots_head_slotName; if (tom_is_fun_sym_RecordAppl(tom_match10_1_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_slots_head_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_1_slots_head_appl); if (tom_is_fun_sym_concTomName(tom_match10_1_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_slots_head_appl_nameList_list1=tom_match10_1_slots_head_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1);tom_match10_1_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_1_slots_head_appl_nameList_1) ||  false ) { { String  tom_match10_1_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match10_1_slots_head_appl_nameList_1); { String  tom_name1=tom_match10_1_slots_head_appl_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1)) { if (tom_is_fun_sym_RecordAppl(tom_match10_2) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match10_2_slots=tom_get_slot_RecordAppl_slots(tom_match10_2); if (tom_is_fun_sym_manySlotList(tom_match10_2_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match10_2_slots_head=tom_get_slot_manySlotList_head(tom_match10_2_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match10_2_slots_tail=tom_get_slot_manySlotList_tail(tom_match10_2_slots); if (tom_is_fun_sym_PairSlotAppl(tom_match10_2_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match10_2_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match10_2_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_slotName_1=tom_match10_2_slots_head_slotName; if (tom_terms_equal_TomName(tom_slotName, tom_renamedvar_slotName_1)) { if (tom_is_fun_sym_RecordAppl(tom_match10_2_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_slots_head_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_2_slots_head_appl); if (tom_is_fun_sym_concTomName(tom_match10_2_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_slots_head_appl_nameList_list1=tom_match10_2_slots_head_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1);tom_match10_2_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_2_slots_head_appl_nameList_1) ||  false ) { { String  tom_match10_2_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match10_2_slots_head_appl_nameList_1); { String  tom_name2=tom_match10_2_slots_head_appl_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1)) { if ( true ) {



              if(tom_name1.compareTo(tom_name2) > 0) {
                return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
              }
             } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match10_1_slots=tom_get_slot_RecordAppl_slots(tom_match10_1); if (tom_is_fun_sym_manySlotList(tom_match10_1_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match10_1_slots_head=tom_get_slot_manySlotList_head(tom_match10_1_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match10_1_slots_tail=tom_get_slot_manySlotList_tail(tom_match10_1_slots); if (tom_is_fun_sym_PairSlotAppl(tom_match10_1_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match10_1_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match10_1_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match10_1_slots_head_slotName; if (tom_is_fun_sym_TermAppl(tom_match10_1_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_slots_head_appl_nameList=tom_get_slot_TermAppl_nameList(tom_match10_1_slots_head_appl); if (tom_is_fun_sym_concTomName(tom_match10_1_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_slots_head_appl_nameList_list1=tom_match10_1_slots_head_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1);tom_match10_1_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_1_slots_head_appl_nameList_1) ||  false ) { { String  tom_match10_1_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match10_1_slots_head_appl_nameList_1); { String  tom_name1=tom_match10_1_slots_head_appl_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_1_slots_head_appl_nameList_list1)) { if (tom_is_fun_sym_RecordAppl(tom_match10_2) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match10_2_slots=tom_get_slot_RecordAppl_slots(tom_match10_2); if (tom_is_fun_sym_manySlotList(tom_match10_2_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match10_2_slots_head=tom_get_slot_manySlotList_head(tom_match10_2_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match10_2_slots_tail=tom_get_slot_manySlotList_tail(tom_match10_2_slots); if (tom_is_fun_sym_PairSlotAppl(tom_match10_2_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match10_2_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match10_2_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_slotName_1=tom_match10_2_slots_head_slotName; if (tom_terms_equal_TomName(tom_slotName, tom_renamedvar_slotName_1)) { if (tom_is_fun_sym_TermAppl(tom_match10_2_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_slots_head_appl_nameList=tom_get_slot_TermAppl_nameList(tom_match10_2_slots_head_appl); if (tom_is_fun_sym_concTomName(tom_match10_2_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_slots_head_appl_nameList_list1=tom_match10_2_slots_head_appl_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1);tom_match10_2_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_2_slots_head_appl_nameList_1) ||  false ) { { String  tom_match10_2_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match10_2_slots_head_appl_nameList_1); { String  tom_name2=tom_match10_2_slots_head_appl_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_2_slots_head_appl_nameList_list1)) { if ( true ) {



              if(tom_name1.compareTo(tom_name2) > 0) {
                return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
              }
             } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_BackQuoteAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args=tom_get_slot_BackQuoteAppl_args(tom_match10_1); if (tom_is_fun_sym_manyTomList(tom_match10_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_args_head=tom_get_slot_manyTomList_head(tom_match10_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args_tail=tom_get_slot_manyTomList_tail(tom_match10_1_args); if (tom_is_fun_sym_RecordAppl(tom_match10_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_1_args_head); if (tom_is_fun_sym_concTomName(tom_match10_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList_list1=tom_match10_1_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_1_args_head_nameList_list1);tom_match10_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_1_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_1_args_head_nameList_1) ||  false ) { { String  tom_match10_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_1_args_head_nameList_1); { String  tom_name1=tom_match10_1_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1)) { if (tom_is_fun_sym_BackQuoteAppl(tom_match10_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args=tom_get_slot_BackQuoteAppl_args(tom_match10_2); if (tom_is_fun_sym_manyTomList(tom_match10_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2_args_head=tom_get_slot_manyTomList_head(tom_match10_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args_tail=tom_get_slot_manyTomList_tail(tom_match10_2_args); if (tom_is_fun_sym_RecordAppl(tom_match10_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_2_args_head); if (tom_is_fun_sym_concTomName(tom_match10_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList_list1=tom_match10_2_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_2_args_head_nameList_list1);tom_match10_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_2_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_2_args_head_nameList_1) ||  false ) { { String  tom_match10_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_2_args_head_nameList_1); { String  tom_name2=tom_match10_2_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1)) { if ( true ) {



              if(tom_name1.compareTo(tom_name2) > 0) {
                return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
              }
             } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_BackQuoteAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args=tom_get_slot_BackQuoteAppl_args(tom_match10_1); if (tom_is_fun_sym_manyTomList(tom_match10_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_args_head=tom_get_slot_manyTomList_head(tom_match10_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args_tail=tom_get_slot_manyTomList_tail(tom_match10_1_args); if (tom_is_fun_sym_TermAppl(tom_match10_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match10_1_args_head); if (tom_is_fun_sym_concTomName(tom_match10_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_args_head_nameList_list1=tom_match10_1_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_1_args_head_nameList_list1);tom_match10_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_1_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_1_args_head_nameList_1) ||  false ) { { String  tom_match10_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_1_args_head_nameList_1); { String  tom_name1=tom_match10_1_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_1_args_head_nameList_list1)) { if (tom_is_fun_sym_BackQuoteAppl(tom_match10_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args=tom_get_slot_BackQuoteAppl_args(tom_match10_2); if (tom_is_fun_sym_manyTomList(tom_match10_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2_args_head=tom_get_slot_manyTomList_head(tom_match10_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args_tail=tom_get_slot_manyTomList_tail(tom_match10_2_args); if (tom_is_fun_sym_TermAppl(tom_match10_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match10_2_args_head); if (tom_is_fun_sym_concTomName(tom_match10_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_2_args_head_nameList_list1=tom_match10_2_args_head_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match10_2_args_head_nameList_list1);tom_match10_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match10_2_args_head_nameList_list1); if (tom_is_fun_sym_Name(tom_match10_2_args_head_nameList_1) ||  false ) { { String  tom_match10_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match10_2_args_head_nameList_1); { String  tom_name2=tom_match10_2_args_head_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match10_2_args_head_nameList_list1)) { if ( true ) {



              if(tom_name1.compareTo(tom_name2) > 0) {
                return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
              }
             } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_BackQuoteAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args=tom_get_slot_BackQuoteAppl_args(tom_match10_1); if (tom_is_fun_sym_manyTomList(tom_match10_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_args_head=tom_get_slot_manyTomList_head(tom_match10_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args_tail=tom_get_slot_manyTomList_tail(tom_match10_1_args); if (tom_is_fun_sym_BackQuoteAppl(tom_match10_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_args_head_astName=tom_get_slot_BackQuoteAppl_astName(tom_match10_1_args_head); if (tom_is_fun_sym_Name(tom_match10_1_args_head_astName) ||  false ) { { String  tom_match10_1_args_head_astName_string=tom_get_slot_Name_string(tom_match10_1_args_head_astName); { String  tom_name1=tom_match10_1_args_head_astName_string; if (tom_is_fun_sym_BackQuoteAppl(tom_match10_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args=tom_get_slot_BackQuoteAppl_args(tom_match10_2); if (tom_is_fun_sym_manyTomList(tom_match10_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_2_args_head=tom_get_slot_manyTomList_head(tom_match10_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match10_2_args_tail=tom_get_slot_manyTomList_tail(tom_match10_2_args); if (tom_is_fun_sym_BackQuoteAppl(tom_match10_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_2_args_head_astName=tom_get_slot_BackQuoteAppl_astName(tom_match10_2_args_head); if (tom_is_fun_sym_Name(tom_match10_2_args_head_astName) ||  false ) { { String  tom_match10_2_args_head_astName_string=tom_get_slot_Name_string(tom_match10_2_args_head_astName); { String  tom_name2=tom_match10_2_args_head_astName_string; if ( true ) {



              if(tom_name1.compareTo(tom_name2) > 0) {
                return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
              }
             } } } } } } } } } } } } } } } } } } } } } } } } }

       } } } }tom_match9_1_end3=tom_get_tail_concTomTerm_TomList(tom_match9_1_end3); } }tom_match9_1_list1=tom_match9_1_begin3; } } } } }tom_match9_1_end1=tom_get_tail_concTomTerm_TomList(tom_match9_1_end1); } }tom_match9_1_list1=tom_match9_1_begin1; } } } } } } }

    return attrList;
  }

  private static OptionList convertOriginTracking(String name,OptionList optionList) {
    Option originTracking = findOriginTracking(optionList);
     if(originTracking instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match11_1=(( tom.engine.adt.tomsignature.types.Option)originTracking); if (tom_is_fun_sym_OriginTracking(tom_match11_1) ||  false ) { { int  tom_match11_1_line=tom_get_slot_OriginTracking_line(tom_match11_1); { String  tom_match11_1_fileName=tom_get_slot_OriginTracking_fileName(tom_match11_1); { int  tom_line=tom_match11_1_line; { String  tom_fileName=tom_match11_1_fileName; if ( true ) {

        return tom_cons_list_concOption(tom_make_OriginTracking(tom_make_Name(name),tom_line,tom_fileName),tom_empty_list_concOption());
       } } } } } } } }

    System.out.println("Warning: no OriginTracking information");
    return emptyOption();
  }

  protected TomTerm expandXMLAppl(OptionList optionList, NameList nameList,
      TomList attrList, TomList childList, ConstraintList constraints) {
    boolean implicitAttribute = hasImplicitXMLAttribut(optionList);
    boolean implicitChild     = hasImplicitXMLChild(optionList);

    TomList newAttrList  = tom_make_emptyTomList();
    TomList newChildList = tom_make_emptyTomList();
    TomTerm star = ASTFactory.makeUnamedVariableStar(convertOriginTracking("_*",optionList),"unknown type",tom_empty_list_concConstraint());
    if(implicitAttribute) { newAttrList  = tom_make_manyTomList(star,newAttrList); }
    if(implicitChild)     { newChildList = tom_make_manyTomList(star,newChildList); }

    /*
     * the list of attributes should not be expanded before the sort
     * the sortAttribute is extended to compare RecordAppl
     */

    //System.out.println("attrList = " + attrList);
    attrList = sortAttributeList(attrList);
    //System.out.println("sorted attrList = " + attrList);

    /*
     * Attributes: go from implicit notation to explicit notation
     */
    while(!attrList.isEmpty()) {
      try{
        TomTerm newPattern = (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(attrList.getHead());
        newAttrList = tom_make_manyTomList(newPattern,newAttrList);
        if(implicitAttribute) {
          newAttrList = tom_make_manyTomList(star,newAttrList);
        }
        attrList = attrList.getTail();
      }catch(VisitFailure e){}
    }
    newAttrList = (TomList) newAttrList.reverse();

    /*
     * Childs: go from implicit notation to explicit notation
     */
    while(!childList.isEmpty()) {
      try{
        TomTerm newPattern = (TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(childList.getHead());
        newChildList = tom_make_manyTomList(newPattern,newChildList);
        if(implicitChild) {
          if(newPattern.isVariableStar()) {
            // remove the previously inserted pattern
            newChildList = newChildList.getTail();
            if(newChildList.getHead().isUnamedVariableStar()) {
              // remove the previously inserted star
              newChildList = newChildList.getTail();
            }
            // re-insert the pattern
            newChildList = tom_make_manyTomList(newPattern,newChildList);
          } else {
            newChildList = tom_make_manyTomList(star,newChildList);
          }
        }
        childList = childList.getTail();
      }catch(VisitFailure e){}
    }
    newChildList = (TomList) newChildList.reverse();

    /*
     * encode the name and put it into the table of symbols
     */
    NameList newNameList = tom_empty_list_concTomName();
matchBlock: {
               if(nameList instanceof  tom.engine.adt.tomsignature.types.NameList) { { tom.engine.adt.tomsignature.types.NameList tom_match12_1=(( tom.engine.adt.tomsignature.types.NameList)nameList); if (tom_is_fun_sym_concTomName(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match12_1_list1=tom_match12_1; if (!(tom_is_empty_concTomName_NameList(tom_match12_1_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match12_1_1=tom_get_head_concTomName_NameList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concTomName_NameList(tom_match12_1_list1); if (tom_is_fun_sym_Name(tom_match12_1_1) ||  false ) { { String  tom_match12_1_1_string=tom_get_slot_Name_string(tom_match12_1_1); if (tom_terms_equal_String("_", tom_match12_1_1_string) ||  false ) { if (tom_is_empty_concTomName_NameList(tom_match12_1_list1)) { if ( true ) {

                  break matchBlock;
                 } } } } } } } } } if (tom_is_fun_sym_concTomName(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match12_1_list1=tom_match12_1; { tom.engine.adt.tomsignature.types.NameList tom_match12_1_begin1=tom_match12_1_list1; { tom.engine.adt.tomsignature.types.NameList tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_concTomName_NameList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.engine.adt.tomsignature.types.TomName tom_match12_1_2=tom_get_head_concTomName_NameList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concTomName_NameList(tom_match12_1_list1); if (tom_is_fun_sym_Name(tom_match12_1_2) ||  false ) { { String  tom_match12_1_2_string=tom_get_slot_Name_string(tom_match12_1_2); { String  tom_name=tom_match12_1_2_string; if ( true ) {


                  newNameList = (NameList)newNameList.append(tom_make_Name(ASTFactory.encodeXMLString(symbolTable(),tom_name)));
                 } } } } }tom_match12_1_end1=tom_get_tail_concTomName_NameList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

            }

            /*
             * a single "_" is converted into a Placeholder to match
             * any XML node
             */
            TomTerm xmlHead;

            if(newNameList.isEmpty()){
              xmlHead = tom_make_Placeholder(emptyOption(),tom_empty_list_concConstraint());
            } else {
              xmlHead = tom_make_TermAppl(convertOriginTracking(newNameList.getHead().getString(),optionList),newNameList,empty(),tom_empty_list_concConstraint());
            }
            try{
              SlotList newArgs = tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_NAME),(TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(xmlHead)),tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_ATTRLIST),(TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(tom_make_TermAppl(convertOriginTracking("CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants.CONC_TNODE),tom_empty_list_concTomName()),newAttrList,tom_empty_list_concConstraint()))),tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_CHILDLIST),(TomTerm) MuTraveler.init((tom_make_mu(tom_make_MuVar("x"),tom_make_Choice(tom_make_expandTermApplTomSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit(tom_make_TermAppl(convertOriginTracking("CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants.CONC_TNODE),tom_empty_list_concTomName()),newChildList,tom_empty_list_concConstraint()))),tom_empty_list_concSlot())))





;

              TomTerm result = tom_make_RecordAppl(optionList,tom_cons_list_concTomName(tom_make_Name(Constants.ELEMENT_NODE),tom_empty_list_concTomName()),newArgs,constraints);

              //System.out.println("expandXML out:\n" + result);
              return result;
            }catch(VisitFailure e){
              //must never be executed
              return star; }

  }


} // class TomExpander
