/* Generated by TOM: Do not edit this file */ /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2004 INRIA
			    Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.compiler;
  
import java.util.*;

import jtom.adt.tomsignature.types.*;
import jtom.runtime.Replace1;
import jtom.runtime.Replace2;
import aterm.*;
import jtom.tools.*;
import jtom.xml.Constants;
import jtom.exception.TomRuntimeException;
import jtom.TomEnvironment;
import jtom.checker.TomCheckerMessage;

public class TomExpander extends TomTask {
	
  private TomKernelExpander tomKernelExpander;
  private TomFactory tomFactory;
  
  public TomExpander(TomEnvironment environment,
                     TomKernelExpander tomKernelExpander) {
    super("Tom Expander", environment);
    this.tomKernelExpander = tomKernelExpander;
    this.tomFactory = new TomFactory(environment);
  }

// ------------------------------------------------------------
  /* Generated by TOM: Do not edit this file
// ------------------------------------------------------------
		
  public void process() {
    try {
      long startChrono = 0;
      boolean verbose = getInput().isVerbose(), intermediate = getInput().isIntermediate(),
        debugMode = getInput().isDebugMode();
      if(verbose) { startChrono = System.currentTimeMillis(); }
      
      TomTerm syntaxExpandedTerm = expandTomSyntax(getInput().getTerm());
      tomKernelExpander.updateSymbolTable();
      TomTerm context = tom_make_emptyTerm() ;
      TomTerm variableExpandedTerm = expandVariable(context, syntaxExpandedTerm);
      TomTerm stringExpandedTerm   = expandString(variableExpandedTerm);
      TomTerm expandedTerm         = updateCodomain(stringExpandedTerm);
      
      if(debugMode) {
        tomKernelExpander.expandMatchPattern(expandedTerm);
      }
      if(verbose) {
        System.out.println("TOM expansion phase (" + (System.currentTimeMillis()-startChrono)+ " ms)");
      }
      if(intermediate) {
        Tools.generateOutput(getInput().getBaseInputFileName() + TomTaskInput.expandedSuffix, expandedTerm);
        Tools.generateOutput(getInput().getBaseInputFileName() + TomTaskInput.expandedTableSuffix, symbolTable().toTerm());
      }
      getInput().setTerm(expandedTerm);
      
    } catch (Exception e) {
      addError("Exception occurs in TomExpander: "+e.getMessage(), getInput().getInputFileName(), TomCheckerMessage.DEFAULT_ERROR_LINE_NUMBER, TomCheckerMessage.TOM_ERROR);
      e.printStackTrace();
      return;
    }
  }
  
  /*
   * The 'expandTomSyntax' phase replaces:
   * -each 'RecordAppl' by its expanded term form:
   *   (unused slots a replaced by placeholders)
   * - each BackQuoteTerm by its compiled form
   */
  
  public TomTerm expandTomSyntax(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof TomTerm) {
             { TomTerm tom_match1_1=(( TomTerm)subject);{ if(tom_is_fun_sym_DoubleBackQuote(tom_match1_1) ||  false ) { { TomList tom_match1_1_1=tom_get_slot_DoubleBackQuote_args(tom_match1_1); if(tom_is_fun_sym_concTomTerm(tom_match1_1_1) ||  false ) { { TomList tom_match1_1_1_list1=tom_match1_1_1; { TomList tom_match1_1_1_begin1=tom_match1_1_1_list1; { TomList tom_match1_1_1_end1=tom_match1_1_1_list1; do {{ { TomList context=tom_get_slice_concTomTerm(tom_match1_1_1_begin1,tom_match1_1_1_end1); if(!(tom_is_empty_TomList(tom_match1_1_1_list1))) { { TomTerm backQuoteTerm=tom_get_head_TomList(tom_match1_1_1_list1);{tom_match1_1_1_list1=tom_get_tail_TomList(tom_match1_1_1_list1); if(tom_is_empty_TomList(tom_match1_1_1_list1)) {
 
                if(!context.isEmpty()) {
                  context = aggregateContext(context);
                  //System.out.println("context = " + context);
                }
                TomTerm t = expandTomSyntax(backQuoteTerm);
                t = expandBackQuoteXMLAppl(context,t);
                return t;
               }}} }} if(!(tom_is_empty_TomList(tom_match1_1_1_end1))) {tom_match1_1_1_end1=tom_get_tail_TomList(tom_match1_1_1_end1); }tom_match1_1_1_list1=tom_match1_1_1_end1;} } while(!(tom_is_empty_TomList(tom_match1_1_1_list1)));}}} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match1_1) ||  false ) { { TomTerm backQuoteTerm=tom_match1_1;

 
                TomTerm t = expandBackQuoteAppl(backQuoteTerm);
                  //System.out.println("t = " + t);
                return t;
              } } if(tom_is_fun_sym_RecordAppl(tom_match1_1) ||  false ) { { OptionList tom_match1_1_1=tom_get_slot_RecordAppl_option(tom_match1_1); { NameList tom_match1_1_2=tom_get_slot_RecordAppl_nameList(tom_match1_1); { TomList tom_match1_1_3=tom_get_slot_RecordAppl_args(tom_match1_1); { OptionList option=tom_match1_1_1; { NameList nameList=tom_match1_1_2; { TomList args=tom_match1_1_3;

 
                return expandRecordAppl(option,nameList,args);
              }}}}}} } if(tom_is_fun_sym_XMLAppl(tom_match1_1) ||  false ) { { OptionList tom_match1_1_1=tom_get_slot_XMLAppl_option(tom_match1_1); { NameList tom_match1_1_2=tom_get_slot_XMLAppl_nameList(tom_match1_1); { TomList tom_match1_1_3=tom_get_slot_XMLAppl_attrList(tom_match1_1); { TomList tom_match1_1_4=tom_get_slot_XMLAppl_childList(tom_match1_1); { OptionList optionList=tom_match1_1_1; { NameList nameList=tom_match1_1_2; { TomList list1=tom_match1_1_3; { TomList list2=tom_match1_1_4;

 
                //System.out.println("expandXML in:\n" + subject);
                return expandXMLAppl(optionList, nameList, list1, list2);
              }}}}}}}} }

 
                return traversal().genericTraversal(subject,this);
              }}
  // end match
          } else {
            return traversal().genericTraversal(subject,this);
          }
        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * this post-processing phase replaces untyped (universalType) codomain
   * by their precise type (according to the symbolTable)
   */
  private TomTerm updateCodomain(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof Declaration) {
             { Declaration tom_match2_1=(( Declaration)subject);{ if(tom_is_fun_sym_GetHeadDecl(tom_match2_1) ||  false ) { { TomTerm tom_match2_1_2=tom_get_slot_GetHeadDecl_variable(tom_match2_1); if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) { { TomType tom_match2_1_2_3=tom_get_slot_Variable_astType(tom_match2_1_2); { TomType domain=tom_match2_1_2_3;
 
                TomSymbol tomSymbol = getSymbol(domain);
                if(tomSymbol != null) {
                  TomTypeList codomain = getSymbolDomain(tomSymbol);
                  //System.out.println("tomSymbol = " + tomSymbol);
                  //System.out.println("domain    = " + domain);
                  //System.out.println("codomain  = " + codomain);
                  
                  if(codomain.isSingle()) {
                    Declaration t = (Declaration)subject;
                    t = t.setCodomain(codomain.getHead());
                    return t;
                  } else {
                    throw new TomRuntimeException(new Throwable("updateCodomain: bad codomain: " + codomain));
                  }
                }
              }} }} }


 
                return traversal().genericTraversal(subject,this);
              }}
  // end match
          } else {
            // not instance of Declaration
            return traversal().genericTraversal(subject,this);
          }

        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * replace 'abc' by conc('a','b','c')
   */
  private TomTerm expandString(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof TomTerm) {
             { TomTerm tom_match3_1=(( TomTerm)subject);{ if(tom_is_fun_sym_Appl(tom_match3_1) ||  false ) { { TomTerm appl=tom_match3_1; { NameList tom_match3_1_2=tom_get_slot_Appl_nameList(tom_match3_1); { TomList tom_match3_1_3=tom_get_slot_Appl_args(tom_match3_1); if(tom_is_fun_sym_concTomName(tom_match3_1_2) ||  false ) { { NameList nameList=tom_match3_1_2; { NameList tom_match3_1_2_list1=tom_match3_1_2; if(!(tom_is_empty_NameList(tom_match3_1_2_list1))) { { TomName tom_match3_1_2_1=tom_get_head_NameList(tom_match3_1_2_list1);{tom_match3_1_2_list1=tom_get_tail_NameList(tom_match3_1_2_list1); if(tom_is_fun_sym_Name(tom_match3_1_2_1) ||  false ) { { String tom_match3_1_2_1_1=tom_get_slot_Name_string(tom_match3_1_2_1); { String tomName=tom_match3_1_2_1_1; { TomList args=tom_match3_1_3;
 
                TomSymbol tomSymbol = getSymbol(tomName);
                //System.out.println("appl = " + subject);
                if(tomSymbol != null) {
                  if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
                    TomList newArgs = expandChar(args);
                    return appl.setArgs(newArgs);
                  }
                }
              }}} }}} }}} }}}} }


 
                return traversal().genericTraversal(subject,this);
              }}
  // end match
          } else {
            // not instance of Declaration
            return traversal().genericTraversal(subject,this);
          }

        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * detect ill-formed char: 'abc'
   * and expand it into a list of char: 'a','b','c'
   */
  private TomList expandChar(TomList args) {
    if(args.isEmpty()) {
      return args;
    } else {
      TomTerm head = args.getHead();
      TomList tail = expandChar(args.getTail());
       { TomTerm tom_match4_1=(( TomTerm)head);{ if(tom_is_fun_sym_Appl(tom_match4_1) ||  false ) { { OptionList tom_match4_1_1=tom_get_slot_Appl_option(tom_match4_1); { NameList tom_match4_1_2=tom_get_slot_Appl_nameList(tom_match4_1); { TomList tom_match4_1_3=tom_get_slot_Appl_args(tom_match4_1); { OptionList option=tom_match4_1_1; if(tom_is_fun_sym_concTomName(tom_match4_1_2) ||  false ) { { NameList nameList=tom_match4_1_2; { NameList tom_match4_1_2_list1=tom_match4_1_2; if(!(tom_is_empty_NameList(tom_match4_1_2_list1))) { { TomName tom_match4_1_2_1=tom_get_head_NameList(tom_match4_1_2_list1);{tom_match4_1_2_list1=tom_get_tail_NameList(tom_match4_1_2_list1); if(tom_is_fun_sym_Name(tom_match4_1_2_1) ||  false ) { { String tom_match4_1_2_1_1=tom_get_slot_Name_string(tom_match4_1_2_1); { String tomName=tom_match4_1_2_1_1; if(tom_is_empty_NameList(tom_match4_1_2_list1)) { if(tom_is_fun_sym_concTomTerm(tom_match4_1_3) ||  false ) { { TomList tom_match4_1_3_list1=tom_match4_1_3; if(tom_is_empty_TomList(tom_match4_1_3_list1)) {
 
          /*
           * ensure that the argument contains at least 1 character and 2 single quotes
           */
          TomSymbol tomSymbol = getSymbol(tomName);
          TomType termType = tomSymbol.getTypesToType().getCodomain();
          String type = termType.getTomType().getString();
          if(symbolTable().isCharType(type) && tomName.length()>3) {
            if(tomName.charAt(0)=='\'' && tomName.charAt(tomName.length()-1)=='\'') {
              TomList newArgs = tail;
              //System.out.println("bingo -> " + tomSymbol);
              for(int i=tomName.length()-2 ; i>0 ;  i--) {
                char c = tomName.charAt(i);
                String newName = "'" + c + "'";
                TomSymbol newSymbol = tomSymbol.setAstName(tom_make_Name(newName) );
                newSymbol = newSymbol.setTlCode(tom_make_ITL(newName) );
                symbolTable().putSymbol(newName,newSymbol);
                TomTerm newHead = head.setNameList(tom_make_insert_concTomName(tom_make_Name(newName),tom_make_empty_concTomName()) );
                newArgs = tom_make_manyTomList(newHead,newArgs) ;
                //System.out.println("newHead = " + newHead);
                //System.out.println("newSymb = " + getSymbol(newName));
              }
              return newArgs;
            } else {
              throw new TomRuntimeException(new Throwable("expandChar: strange char: " + tomName));
            }
          }
         }} } }}} }}} }}} }}}}} }

 
          return tom_make_manyTomList(head,tail) ;
        }}
 

    }
  }

  protected TomTerm expandRecordAppl(OptionList option, NameList nameList, TomList args) {
    TomSymbol tomSymbol = getSymbol(nameList.getHead().getString());
    SlotList slotList = tomSymbol.getSlotList();
    TomList subtermList = empty();
      // For each slotName (from tomSymbol)
    while(!slotList.isEmpty()) {
      TomName slotName = slotList.getHead().getSlotName();
      TomList pairList = args;
      TomTerm newSubterm = null;
      if(!slotName.isEmptyName()) {
          // look for a same name (from record)
        whileBlock: {
          while(newSubterm==null && !pairList.isEmpty()) {
            TomTerm pairSlotName = pairList.getHead();
             { TomName tom_match5_1=(( TomName)slotName);{ { TomTerm tom_match5_2=(( TomTerm)pairSlotName);{ if(tom_is_fun_sym_Name(tom_match5_1) ||  false ) { { String tom_match5_1_1=tom_get_slot_Name_string(tom_match5_1); { String tom_renamedvar_name_1=tom_match5_1_1; if(tom_is_fun_sym_PairSlotAppl(tom_match5_2) ||  false ) { { TomName tom_match5_2_1=tom_get_slot_PairSlotAppl_slotName(tom_match5_2); { TomTerm tom_match5_2_2=tom_get_slot_PairSlotAppl_appl(tom_match5_2); if(tom_is_fun_sym_Name(tom_match5_2_1) ||  false ) { { String tom_match5_2_1_1=tom_get_slot_Name_string(tom_match5_2_1); { String name=tom_match5_2_1_1; if(tom_terms_equal_String(name, tom_renamedvar_name_1)) { { TomTerm slotSubterm=tom_match5_2_2;
 
                  // bingo
                newSubterm = expandTomSyntax(slotSubterm);
                break whileBlock;
              } }}} }}} }}} }
 pairList = pairList.getTail();}}}}
 
          }
        } // end whileBlock
      }
      
      if(newSubterm == null) {
        newSubterm = tom_make_Placeholder(emptyOption()) ;
      }
      subtermList = append(newSubterm,subtermList);
      slotList = slotList.getTail();
    }
    
    return tom_make_Appl(option,nameList,subtermList,tom_make_empty_concConstraint()) ;
  }

  protected TomTerm expandBackQuoteAppl(TomTerm t) {
    Replace1 replaceSymbol = new Replace1() {
        public ATerm apply(ATerm t) {
          if(t instanceof TomTerm) {
             { TomTerm tom_match6_1=(( TomTerm)t);{ if(tom_is_fun_sym_BackQuoteAppl(tom_match6_1) ||  false ) { { OptionList tom_match6_1_1=tom_get_slot_BackQuoteAppl_option(tom_match6_1); { TomName tom_match6_1_2=tom_get_slot_BackQuoteAppl_astName(tom_match6_1); { TomList tom_match6_1_3=tom_get_slot_BackQuoteAppl_args(tom_match6_1); { OptionList optionList=tom_match6_1_1; if(tom_is_fun_sym_Name(tom_match6_1_2) ||  false ) { { TomName name=tom_match6_1_2; { String tom_match6_1_2_1=tom_get_slot_Name_string(tom_match6_1_2); { String tomName=tom_match6_1_2_1; { TomList l=tom_match6_1_3;
 
                TomSymbol tomSymbol = getSymbol(tomName);
                TomList args  = (TomList) traversal().genericTraversal(l,this);
                
                  //System.out.println("BackQuoteTerm: " + tomName);
                  //System.out.println("tomSymbol: " + tomSymbol);

                if(tomSymbol != null) {
                  if(isListOperator(tomSymbol)) {
                    return tom_make_BuildList(name,args) ;
                  } else if(isArrayOperator(tomSymbol)) {
                    return tom_make_BuildArray(name,args) ;
                  } else if(isStringOperator(tomSymbol)) {
                    return tom_make_BuildVariable(name) ;
                  } else {
                    return tom_make_BuildTerm(name,args) ;
                  }
                } else if(args.isEmpty() && !hasConstructor(optionList)) {
                  return tom_make_BuildVariable(name) ;
                } else {
                  return tom_make_FunctionCall(name,args) ;
                }
              }}}} }}}}} }}}
  // end match 
          }
          return traversal().genericTraversal(t,this);
        } // end apply
      }; // end replaceSymbol
    return (TomTerm) replaceSymbol.apply(t);
  }

  private TomList sortAttributeList(TomList attrList) {
     { TomList tom_match7_1=(( TomList)attrList);{ if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { { TomList tom_match7_1_list1=tom_match7_1; if(tom_is_empty_TomList(tom_match7_1_list1)) {
  return attrList;  }} } if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { { TomList tom_match7_1_list1=tom_match7_1; { TomList tom_match7_1_begin1=tom_match7_1_list1; { TomList tom_match7_1_end1=tom_match7_1_list1; do {{ { TomList X1=tom_get_slice_concTomTerm(tom_match7_1_begin1,tom_match7_1_end1); if(!(tom_is_empty_TomList(tom_match7_1_list1))) { { TomTerm e1=tom_get_head_TomList(tom_match7_1_list1);{tom_match7_1_list1=tom_get_tail_TomList(tom_match7_1_list1); { TomList tom_match7_1_begin3=tom_match7_1_list1; { TomList tom_match7_1_end3=tom_match7_1_list1; do {{ { TomList X2=tom_get_slice_concTomTerm(tom_match7_1_begin3,tom_match7_1_end3); if(!(tom_is_empty_TomList(tom_match7_1_list1))) { { TomTerm e2=tom_get_head_TomList(tom_match7_1_list1);{tom_match7_1_list1=tom_get_tail_TomList(tom_match7_1_list1); { TomList X3=tom_match7_1_list1; { TomTerm tom_match8_1=(( TomTerm)e1);{ { TomTerm tom_match8_2=(( TomTerm)e2);{ if(tom_is_fun_sym_Appl(tom_match8_1) ||  false ) { { TomList tom_match8_1_3=tom_get_slot_Appl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_Appl(tom_match8_1_3_1) ||  false ) { { NameList tom_match8_1_3_1_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2) ||  false ) { { NameList tom_match8_1_3_1_2_list1=tom_match8_1_3_1_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_list1))) { { TomName tom_match8_1_3_1_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_list1);{tom_match8_1_3_1_2_list1=tom_get_tail_NameList(tom_match8_1_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_1) ||  false ) { { String tom_match8_1_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_1_3_1_2_1); { String name1=tom_match8_1_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_1_3_1_2_list1)) { if(tom_is_fun_sym_Appl(tom_match8_2) ||  false ) { { TomList tom_match8_2_3=tom_get_slot_Appl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_Appl(tom_match8_2_3_1) ||  false ) { { NameList tom_match8_2_3_1_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2) ||  false ) { { NameList tom_match8_2_3_1_2_list1=tom_match8_2_3_1_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_list1))) { { TomName tom_match8_2_3_1_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_list1);{tom_match8_2_3_1_2_list1=tom_get_tail_NameList(tom_match8_2_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_1) ||  false ) { { String tom_match8_2_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_2_3_1_2_1); { String name2=tom_match8_2_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_2_3_1_2_list1)) {



 
            if(name1.compareTo(name2) >= 0) {
              return sortAttributeList(tom_insert_list_concTomTerm(X1,tom_make_insert_concTomTerm(e2,tom_insert_list_concTomTerm(X2,tom_make_insert_concTomTerm(e1,tom_insert_list_concTomTerm(X3,tom_make_empty_concTomTerm())))))) ;
            }
           }}} }}} }} }} }} }} } }}} }}} }} }} }} }} } if(tom_is_fun_sym_RecordAppl(tom_match8_1) ||  false ) { { TomList tom_match8_1_3=tom_get_slot_RecordAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_PairSlotAppl(tom_match8_1_3_1) ||  false ) { { TomName tom_match8_1_3_1_1=tom_get_slot_PairSlotAppl_slotName(tom_match8_1_3_1); { TomTerm tom_match8_1_3_1_2=tom_get_slot_PairSlotAppl_appl(tom_match8_1_3_1); { TomName tom_renamedvar_slotName_1=tom_match8_1_3_1_1; if(tom_is_fun_sym_Appl(tom_match8_1_3_1_2) ||  false ) { { NameList tom_match8_1_3_1_2_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1_2); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2_2) ||  false ) { { NameList tom_match8_1_3_1_2_2_list1=tom_match8_1_3_1_2_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_2_list1))) { { TomName tom_match8_1_3_1_2_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_2_list1);{tom_match8_1_3_1_2_2_list1=tom_get_tail_NameList(tom_match8_1_3_1_2_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_2_1) ||  false ) { { String tom_match8_1_3_1_2_2_1_1=tom_get_slot_Name_string(tom_match8_1_3_1_2_2_1); { String name1=tom_match8_1_3_1_2_2_1_1; if(tom_is_empty_NameList(tom_match8_1_3_1_2_2_list1)) { if(tom_is_fun_sym_RecordAppl(tom_match8_2) ||  false ) { { TomList tom_match8_2_3=tom_get_slot_RecordAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_PairSlotAppl(tom_match8_2_3_1) ||  false ) { { TomName tom_match8_2_3_1_1=tom_get_slot_PairSlotAppl_slotName(tom_match8_2_3_1); { TomTerm tom_match8_2_3_1_2=tom_get_slot_PairSlotAppl_appl(tom_match8_2_3_1); { TomName slotName=tom_match8_2_3_1_1; if(tom_terms_equal_TomName(slotName, tom_renamedvar_slotName_1)) { if(tom_is_fun_sym_Appl(tom_match8_2_3_1_2) ||  false ) { { NameList tom_match8_2_3_1_2_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1_2); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2_2) ||  false ) { { NameList tom_match8_2_3_1_2_2_list1=tom_match8_2_3_1_2_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_2_list1))) { { TomName tom_match8_2_3_1_2_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_2_list1);{tom_match8_2_3_1_2_2_list1=tom_get_tail_NameList(tom_match8_2_3_1_2_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_2_1) ||  false ) { { String tom_match8_2_3_1_2_2_1_1=tom_get_slot_Name_string(tom_match8_2_3_1_2_2_1); { String name2=tom_match8_2_3_1_2_2_1_1; if(tom_is_empty_NameList(tom_match8_2_3_1_2_2_list1)) {


 
            if(name1.compareTo(name2) >= 0) {
              return sortAttributeList(tom_insert_list_concTomTerm(X1,tom_make_insert_concTomTerm(e2,tom_insert_list_concTomTerm(X2,tom_make_insert_concTomTerm(e1,tom_insert_list_concTomTerm(X3,tom_make_empty_concTomTerm())))))) ;
            }
           }}} }}} }} }} } }}}} }} }} } }}} }}} }} }} }}}} }} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { TomList tom_match8_1_3=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_Appl(tom_match8_1_3_1) ||  false ) { { NameList tom_match8_1_3_1_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2) ||  false ) { { NameList tom_match8_1_3_1_2_list1=tom_match8_1_3_1_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_list1))) { { TomName tom_match8_1_3_1_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_list1);{tom_match8_1_3_1_2_list1=tom_get_tail_NameList(tom_match8_1_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_1) ||  false ) { { String tom_match8_1_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_1_3_1_2_1); { String name1=tom_match8_1_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_1_3_1_2_list1)) { if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { TomList tom_match8_2_3=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_Appl(tom_match8_2_3_1) ||  false ) { { NameList tom_match8_2_3_1_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2) ||  false ) { { NameList tom_match8_2_3_1_2_list1=tom_match8_2_3_1_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_list1))) { { TomName tom_match8_2_3_1_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_list1);{tom_match8_2_3_1_2_list1=tom_get_tail_NameList(tom_match8_2_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_1) ||  false ) { { String tom_match8_2_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_2_3_1_2_1); { String name2=tom_match8_2_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_2_3_1_2_list1)) {


 
            if(name1.compareTo(name2) >= 0) {
              return sortAttributeList(tom_insert_list_concTomTerm(X1,tom_make_insert_concTomTerm(e2,tom_insert_list_concTomTerm(X2,tom_make_insert_concTomTerm(e1,tom_insert_list_concTomTerm(X3,tom_make_empty_concTomTerm())))))) ;
            }
           }}} }}} }} }} }} }} } }}} }}} }} }} }} }} }}}}}
 
      }}} }} if(!(tom_is_empty_TomList(tom_match7_1_end3))) {tom_match7_1_end3=tom_get_tail_TomList(tom_match7_1_end3); }tom_match7_1_list1=tom_match7_1_end3;} } while(!(tom_is_empty_TomList(tom_match7_1_list1)));}}}} }} if(!(tom_is_empty_TomList(tom_match7_1_end1))) {tom_match7_1_end1=tom_get_tail_TomList(tom_match7_1_end1); }tom_match7_1_list1=tom_match7_1_end1;} } while(!(tom_is_empty_TomList(tom_match7_1_list1)));}}} }}}
 
    return attrList;
  }

  private TomList aggregateContext(TomList context) {
    TomList newContext = tom_make_empty_concTomTerm() ;
     { TomList tom_match9_1=(( TomList)context);{ if(tom_is_fun_sym_concTomTerm(tom_match9_1) ||  false ) { { TomList tom_match9_1_list1=tom_match9_1; { TomList tom_match9_1_begin1=tom_match9_1_list1; { TomList tom_match9_1_end1=tom_match9_1_list1; do {{ if(!(tom_is_empty_TomList(tom_match9_1_list1))) { { TomTerm tom_match9_1_2=tom_get_head_TomList(tom_match9_1_list1);{tom_match9_1_list1=tom_get_tail_TomList(tom_match9_1_list1); if(tom_is_fun_sym_Composite(tom_match9_1_2) ||  false ) { { TomList tom_match9_1_2_1=tom_get_slot_Composite_args(tom_match9_1_2); if(tom_is_fun_sym_concTomTerm(tom_match9_1_2_1) ||  false ) { { TomList tom_match9_1_2_1_list1=tom_match9_1_2_1; if(!(tom_is_empty_TomList(tom_match9_1_2_1_list1))) { { TomTerm tom_match9_1_2_1_1=tom_get_head_TomList(tom_match9_1_2_1_list1);{tom_match9_1_2_1_list1=tom_get_tail_TomList(tom_match9_1_2_1_list1); if(tom_is_fun_sym_BackQuoteAppl(tom_match9_1_2_1_1) ||  false ) { { TomTerm arg=tom_match9_1_2_1_1; if(tom_is_empty_TomList(tom_match9_1_2_1_list1)) {
 
        newContext = tom_insert_list_concTomTerm(newContext,tom_make_insert_concTomTerm(arg,tom_make_empty_concTomTerm())) ;
       }} }}} }} }} }}} } if(!(tom_is_empty_TomList(tom_match9_1_end1))) {tom_match9_1_end1=tom_get_tail_TomList(tom_match9_1_end1); }tom_match9_1_list1=tom_match9_1_end1;} } while(!(tom_is_empty_TomList(tom_match9_1_list1)));}}} }}}
 
    return newContext;
  }

  private OptionList convertOriginTracking(String name,OptionList optionList) {
    Option originTracking = findOriginTracking(optionList);
     { Option tom_match10_1=(( Option)originTracking);{ if(tom_is_fun_sym_OriginTracking(tom_match10_1) ||  false ) { { int tom_match10_1_2=tom_get_slot_OriginTracking_line(tom_match10_1); { TomName tom_match10_1_3=tom_get_slot_OriginTracking_fileName(tom_match10_1); { int line=tom_match10_1_2; { TomName fileName=tom_match10_1_3;
 
        return tom_make_insert_concOption(tom_make_OriginTracking(tom_make_Name(name),line,fileName),tom_make_empty_concOption()) ;
      }}}} }}}
 
    System.out.println("Warning: no OriginTracking information");
    return emptyOption();
  }

  
  protected TomTerm expandXMLAppl(OptionList optionList, NameList nameList,
                                  TomList attrList, TomList childList) {
    boolean implicitAttribute = hasImplicitXMLAttribut(optionList);
    boolean implicitChild     = hasImplicitXMLChild(optionList);
    
    TomList newAttrList  = tom_make_emptyTomList() ;
    TomList newChildList = tom_make_emptyTomList() ;

    TomTerm star = ast().makeUnamedVariableStar(convertOriginTracking("_*",optionList),"unknown type");
    if(implicitAttribute) { newAttrList  = tom_make_manyTomList(star,newAttrList) ; }
    if(implicitChild)     { newChildList = tom_make_manyTomList(star,newChildList) ; }

    /*
     * the list of attribute should not be expanded before the sort
     * the sortAttribute is extended to compare RecordAppl
     */
    attrList = sortAttributeList(attrList);

    while(!attrList.isEmpty()) {
      TomTerm newPattern = expandTomSyntax(attrList.getHead());
      newAttrList = tom_make_manyTomList(newPattern,newAttrList) ;
      if(implicitAttribute) { newAttrList = tom_make_manyTomList(star,newAttrList) ; }
      attrList = attrList.getTail();
    }
    newAttrList = (TomList) newAttrList.reverse();

    
    while(!childList.isEmpty()) {
      TomTerm newPattern = expandTomSyntax(childList.getHead());
      newChildList = tom_make_manyTomList(newPattern,newChildList) ;
      if(implicitChild) {
        if(newPattern.isVariableStar()) {
            // remove the previously inserted pattern
          newChildList = newChildList.getTail();
          if(newChildList.getHead().isUnamedVariableStar()) {
            // remove the previously inserted star
            newChildList = newChildList.getTail();
          }
            // re-insert the pattern
          newChildList = tom_make_manyTomList(newPattern,newChildList) ;
        } else {
          newChildList = tom_make_manyTomList(star,newChildList) ;
        }
      }
      childList = childList.getTail();
    }
    newChildList = (TomList) newChildList.reverse();

      /*
       * encode the name and put it into the table of symbols
       */

    NameList newNameList = tom_make_empty_concTomName() ;
    matchBlock: {
       { NameList tom_match11_1=(( NameList)nameList);{ if(tom_is_fun_sym_concTomName(tom_match11_1) ||  false ) { { NameList tom_match11_1_list1=tom_match11_1; if(!(tom_is_empty_NameList(tom_match11_1_list1))) { { TomName tom_match11_1_1=tom_get_head_NameList(tom_match11_1_list1);{tom_match11_1_list1=tom_get_tail_NameList(tom_match11_1_list1); if(tom_is_fun_sym_Name(tom_match11_1_1) ||  false ) { { String tom_match11_1_1_1=tom_get_slot_Name_string(tom_match11_1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match11_1_1_1) , "_") ||  false ) { if(tom_is_empty_NameList(tom_match11_1_list1)) {
 
          break matchBlock;
         } }} }}} }} } if(tom_is_fun_sym_concTomName(tom_match11_1) ||  false ) { { NameList tom_match11_1_list1=tom_match11_1; { NameList tom_match11_1_begin1=tom_match11_1_list1; { NameList tom_match11_1_end1=tom_match11_1_list1; do {{ if(!(tom_is_empty_NameList(tom_match11_1_list1))) { { TomName tom_match11_1_2=tom_get_head_NameList(tom_match11_1_list1);{tom_match11_1_list1=tom_get_tail_NameList(tom_match11_1_list1); if(tom_is_fun_sym_Name(tom_match11_1_2) ||  false ) { { String tom_match11_1_2_1=tom_get_slot_Name_string(tom_match11_1_2); { String name=tom_match11_1_2_1;

 
          newNameList = (NameList)newNameList.append(tom_make_Name(tomFactory .encodeXMLString(symbolTable(),name)) );
        }} }}} } if(!(tom_is_empty_NameList(tom_match11_1_end1))) {tom_match11_1_end1=tom_get_tail_NameList(tom_match11_1_end1); }tom_match11_1_list1=tom_match11_1_end1;} } while(!(tom_is_empty_NameList(tom_match11_1_list1)));}}} }}}
 
    }

      /*
       * a single "_" is converted into a Placeholder to match
       * any XML node
       */
    TomTerm xmlHead;

    if(newNameList.isEmpty()){
      xmlHead = tom_make_Placeholder(emptyOption()) ;
    } else { 
      xmlHead = tom_make_Appl(convertOriginTracking(newNameList .getHead() .getString(),optionList),newNameList,empty(),tom_make_empty_concConstraint()) ;
    }

    TomList newArgs = tom_make_insert_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants .SLOT_NAME),xmlHead),tom_make_insert_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants .SLOT_ATTRLIST),tom_make_Appl(convertOriginTracking( "CONC_TNODE",optionList),tom_make_insert_concTomName(tom_make_Name(Constants .CONC_TNODE),tom_make_empty_concTomName()),newAttrList,tom_make_empty_concConstraint())),tom_make_insert_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants .SLOT_CHILDLIST),tom_make_Appl(convertOriginTracking( "CONC_TNODE",optionList),tom_make_insert_concTomName(tom_make_Name(Constants .CONC_TNODE),tom_make_empty_concTomName()),newChildList,tom_make_empty_concConstraint())),tom_make_empty_concTomTerm())))


 ;
    
    TomTerm result = expandTomSyntax(tom_make_RecordAppl(optionList,tom_make_insert_concTomName(tom_make_Name(Constants .ELEMENT_NODE),tom_make_empty_concTomName()),newArgs)) ;


      //System.out.println("expandXML out:\n" + result);
    return result;
   
  }

  protected TomTerm expandBackQuoteXMLAppl(final TomList context,TomTerm subject) {
    Replace1 replaceSymbol = new Replace1() {
        public ATerm apply(ATerm t) {
          if(t instanceof TomTerm) {
             { TomTerm tom_match12_1=(( TomTerm)t);{ if(tom_is_fun_sym_Composite(tom_match12_1) ||  false ) { { TomList tom_match12_1_1=tom_get_slot_Composite_args(tom_match12_1); { TomList list=tom_match12_1_1;
 
                list = parseBackQuoteXMLAppl(context,list);
                list = (TomList) traversal().genericTraversal(list,this);
                return tom_make_Composite(list) ;
              }} }}}
  // end match 
          } 
          return traversal().genericTraversal(t,this);
        } // end apply
      }; // end replaceSymbol
    return (TomTerm) replaceSymbol.apply(subject);
  }

  private TomList parseBackQuoteXMLAppl(TomList context,TomList list) {
     { TomList tom_match13_1=(( TomList)list);{ if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_1) ||  false ) { { TargetLanguage tom_match13_1_1_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_1); if(tom_is_fun_sym_ITL(tom_match13_1_1_1) ||  false ) { { String tom_match13_1_1_1_1=tom_get_slot_ITL_code(tom_match13_1_1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_1_1_1) , "#TEXT") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_2) ||  false ) { { TargetLanguage tom_match13_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_2); if(tom_is_fun_sym_ITL(tom_match13_1_2_1) ||  false ) { { String tom_match13_1_2_1_1=tom_get_slot_ITL_code(tom_match13_1_2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_2_1_1) , "(") ||  false ) { { TomList tom_match13_1_begin3=tom_match13_1_list1; { TomList tom_match13_1_end3=tom_match13_1_list1; do {{ { TomList value=tom_get_slice_concTomTerm(tom_match13_1_begin3,tom_match13_1_end3); if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_4=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_4) ||  false ) { { TargetLanguage tom_match13_1_4_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_4); if(tom_is_fun_sym_ITL(tom_match13_1_4_1) ||  false ) { { String tom_match13_1_4_1_1=tom_get_slot_ITL_code(tom_match13_1_4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_4_1_1) , ")") ||  false ) { { TomList tail=tom_match13_1_list1;






 
        TomTerm newBackQuoteAppl = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .TEXT_NODE),tom_insert_list_concTomTerm(context,tom_make_insert_concTomTerm(tom_make_Composite(value),tom_make_empty_concTomTerm()))) ;
        TomList newTail = parseBackQuoteXMLAppl(context,tail);
        return tom_make_insert_concTomTerm(newBackQuoteAppl,tom_insert_list_concTomTerm(newTail,tom_make_empty_concTomTerm())) ;
      } }} }} }}} }} if(!(tom_is_empty_TomList(tom_match13_1_end3))) {tom_match13_1_end3=tom_get_tail_TomList(tom_match13_1_end3); }tom_match13_1_list1=tom_match13_1_end3;} } while(!(tom_is_empty_TomList(tom_match13_1_list1)));}} }} }} }}} } }} }} }}} }} } if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_1) ||  false ) { { TomName tom_match13_1_1_1=tom_get_slot_BuildVariable_astName(tom_match13_1_1); { TomName name=tom_match13_1_1_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_2) ||  false ) { { TargetLanguage tom_match13_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_2); if(tom_is_fun_sym_ITL(tom_match13_1_2_1) ||  false ) { { String tom_match13_1_2_1_1=tom_get_slot_ITL_code(tom_match13_1_2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_2_1_1) , "*") ||  false ) { { TomList tail=tom_match13_1_list1;





 
        TomTerm term = tom_make_VariableStar(emptyOption(),name,tom_make_TomTypeAlone( "unknown type"),tom_make_empty_concConstraint()) ;
        TomList newTail = parseBackQuoteXMLAppl(context,tail);
        return tom_make_insert_concTomTerm(term,tom_insert_list_concTomTerm(newTail,tom_make_empty_concTomTerm())) ;
      } }} }} }}} }}} }}} }} }label2: { if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_1) ||  false ) { { TargetLanguage tom_match13_1_1_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_1); if(tom_is_fun_sym_ITL(tom_match13_1_1_1) ||  false ) { { String tom_match13_1_1_1_1=tom_get_slot_ITL_code(tom_match13_1_1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_1_1_1) , "<") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_2) ||  false ) { { TomName tom_match13_1_2_1=tom_get_slot_BuildVariable_astName(tom_match13_1_2); { TomName tom_renamedvar_name_1=tom_match13_1_2_1; { TomList tom_match13_1_begin3=tom_match13_1_list1; { TomList tom_match13_1_end3=tom_match13_1_list1; do {{ { TomList Attributes=tom_get_slice_concTomTerm(tom_match13_1_begin3,tom_match13_1_end3); if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_4=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_4) ||  false ) { { TargetLanguage tom_match13_1_4_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_4); if(tom_is_fun_sym_ITL(tom_match13_1_4_1) ||  false ) { { String tom_match13_1_4_1_1=tom_get_slot_ITL_code(tom_match13_1_4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_4_1_1) , ">") ||  false ) { { TomList tom_match13_1_begin5=tom_match13_1_list1; { TomList tom_match13_1_end5=tom_match13_1_list1; do {{ { TomList Body=tom_get_slice_concTomTerm(tom_match13_1_begin5,tom_match13_1_end5); if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_6=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_6) ||  false ) { { TargetLanguage tom_match13_1_6_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_6); if(tom_is_fun_sym_ITL(tom_match13_1_6_1) ||  false ) { { String tom_match13_1_6_1_1=tom_get_slot_ITL_code(tom_match13_1_6_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_6_1_1) , "</") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_7=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_7) ||  false ) { { TomName tom_match13_1_7_1=tom_get_slot_BuildVariable_astName(tom_match13_1_7); { TomName name=tom_match13_1_7_1; if(tom_terms_equal_TomName(name, tom_renamedvar_name_1)) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_8=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_8) ||  false ) { { TargetLanguage tom_match13_1_8_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_8); if(tom_is_fun_sym_ITL(tom_match13_1_8_1) ||  false ) { { String tom_match13_1_8_1_1=tom_get_slot_ITL_code(tom_match13_1_8_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_8_1_1) , ">") ||  false ) { { TomList tail=tom_match13_1_list1;











 
        if(containClosingBracket(Attributes)) {
          break label2;
        }

          //System.out.println("Attributes = " + Attributes);
          //System.out.println("Body = " + Body);
        
        TomTerm newName = tom_make_BackQuoteAppl(emptyOption(),encodeName(name),empty()) ;
        TomTerm newAttribute = metaEncodeTNodeList(aggregateXMLAttribute(context,Attributes));
        TomTerm newBody = metaEncodeTNodeList(aggregateXMLBody(context,Body));

        //System.out.println("newbody = " + newBody);
        //System.out.println("context = " + context);

        TomTerm newBackQuoteAppl = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .ELEMENT_NODE),tom_insert_list_concTomTerm(context,tom_make_insert_concTomTerm(newName,tom_make_insert_concTomTerm(newAttribute,tom_make_insert_concTomTerm(newBody,tom_make_empty_concTomTerm()))))) ;
          //System.out.println("newBackQuoteAppl1 = " + newBackQuoteAppl);
        newBackQuoteAppl = expandTomSyntax(newBackQuoteAppl);
          //System.out.println("newBackQuoteAppl2 = " + newBackQuoteAppl);
          //TomList newTail = aggregateXMLBody(context,tail);
        TomList newTail = parseBackQuoteXMLAppl(context,tail);
        return tom_make_insert_concTomTerm(newBackQuoteAppl,tom_insert_list_concTomTerm(newTail,tom_make_empty_concTomTerm())) ;
      } }} }} }}} } }}} }}} } }} }} }}} }} if(!(tom_is_empty_TomList(tom_match13_1_end5))) {tom_match13_1_end5=tom_get_tail_TomList(tom_match13_1_end5); }tom_match13_1_list1=tom_match13_1_end5;} } while(!(tom_is_empty_TomList(tom_match13_1_list1)));}} }} }} }}} }} if(!(tom_is_empty_TomList(tom_match13_1_end3))) {tom_match13_1_end3=tom_get_tail_TomList(tom_match13_1_end3); }tom_match13_1_list1=tom_match13_1_end3;} } while(!(tom_is_empty_TomList(tom_match13_1_list1)));}}}} }}} } }} }} }}} }} }}label3: { if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_1=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_1) ||  false ) { { TargetLanguage tom_match13_1_1_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_1); if(tom_is_fun_sym_ITL(tom_match13_1_1_1) ||  false ) { { String tom_match13_1_1_1_1=tom_get_slot_ITL_code(tom_match13_1_1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_1_1_1) , "<") ||  false ) { if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_2=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match13_1_2) ||  false ) { { TomName tom_match13_1_2_1=tom_get_slot_BuildVariable_astName(tom_match13_1_2); { TomName name=tom_match13_1_2_1; { TomList tom_match13_1_begin3=tom_match13_1_list1; { TomList tom_match13_1_end3=tom_match13_1_list1; do {{ { TomList Attributes=tom_get_slice_concTomTerm(tom_match13_1_begin3,tom_match13_1_end3); if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm tom_match13_1_4=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match13_1_4) ||  false ) { { TargetLanguage tom_match13_1_4_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match13_1_4); if(tom_is_fun_sym_ITL(tom_match13_1_4_1) ||  false ) { { String tom_match13_1_4_1_1=tom_get_slot_ITL_code(tom_match13_1_4_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match13_1_4_1_1) , "/>") ||  false ) { { TomList tail=tom_match13_1_list1;







 
        if(containClosingBracket(Attributes)) {
          break label3;
        }
          //System.out.println("SingleNode(" + name +")");
          //System.out.println("Attributes = " + Attributes);

        TomTerm newName = tom_make_BackQuoteAppl(emptyOption(),encodeName(name),empty()) ;
        TomTerm newAttribute = metaEncodeTNodeList(aggregateXMLAttribute(context,Attributes));
        TomTerm newBody = metaEncodeTNodeList(tom_make_empty_concTomTerm() );
        TomTerm newBackQuoteAppl = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .ELEMENT_NODE),tom_insert_list_concTomTerm(context,tom_make_insert_concTomTerm(newName,tom_make_insert_concTomTerm(newAttribute,tom_make_insert_concTomTerm(newBody,tom_make_empty_concTomTerm()))))) ;
          //System.out.println("newBackQuoteAppl1 = " + newBackQuoteAppl);
        newBackQuoteAppl = expandTomSyntax(newBackQuoteAppl);
          //System.out.println("newBackQuoteAppl2 = " + newBackQuoteAppl);
          //TomList newTail = aggregateXMLBody(context,tail);
        TomList newTail = parseBackQuoteXMLAppl(context,tail);
        return tom_make_insert_concTomTerm(newBackQuoteAppl,tom_insert_list_concTomTerm(newTail,tom_make_empty_concTomTerm())) ;

      } }} }} }}} }} if(!(tom_is_empty_TomList(tom_match13_1_end3))) {tom_match13_1_end3=tom_get_tail_TomList(tom_match13_1_end3); }tom_match13_1_list1=tom_match13_1_end3;} } while(!(tom_is_empty_TomList(tom_match13_1_list1)));}}}} }}} } }} }} }}} }} }} if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(tom_is_empty_TomList(tom_match13_1_list1)) {

 
        return tom_make_empty_concTomTerm() ;
       }} } if(tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { TomList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_TomList(tom_match13_1_list1))) { { TomTerm head=tom_get_head_TomList(tom_match13_1_list1);{tom_match13_1_list1=tom_get_tail_TomList(tom_match13_1_list1); { TomList tail=tom_match13_1_list1;

 
        TomList newTail = parseBackQuoteXMLAppl(context,tail);
        return tom_make_insert_concTomTerm(head,tom_insert_list_concTomTerm(newTail,tom_make_empty_concTomTerm())) ;
      }}} }} }}}


 
    return list;
  }

  private boolean containClosingBracket(TomList list) {
     { TomList tom_match14_1=(( TomList)list);{ if(tom_is_fun_sym_concTomTerm(tom_match14_1) ||  false ) { { TomList tom_match14_1_list1=tom_match14_1; { TomList tom_match14_1_begin1=tom_match14_1_list1; { TomList tom_match14_1_end1=tom_match14_1_list1; do {{ if(!(tom_is_empty_TomList(tom_match14_1_list1))) { { TomTerm tom_match14_1_2=tom_get_head_TomList(tom_match14_1_list1);{tom_match14_1_list1=tom_get_tail_TomList(tom_match14_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match14_1_2) ||  false ) { { TargetLanguage tom_match14_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match14_1_2); if(tom_is_fun_sym_ITL(tom_match14_1_2_1) ||  false ) { { String tom_match14_1_2_1_1=tom_get_slot_ITL_code(tom_match14_1_2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match14_1_2_1_1) , ">") ||  false ) {
 
        return true;
       }} }} }}} } if(!(tom_is_empty_TomList(tom_match14_1_end1))) {tom_match14_1_end1=tom_get_tail_TomList(tom_match14_1_end1); }tom_match14_1_list1=tom_match14_1_end1;} } while(!(tom_is_empty_TomList(tom_match14_1_list1)));}}} } if(tom_is_fun_sym_concTomTerm(tom_match14_1) ||  false ) { { TomList tom_match14_1_list1=tom_match14_1; { TomList tom_match14_1_begin1=tom_match14_1_list1; { TomList tom_match14_1_end1=tom_match14_1_list1; do {{ if(!(tom_is_empty_TomList(tom_match14_1_list1))) { { TomTerm tom_match14_1_2=tom_get_head_TomList(tom_match14_1_list1);{tom_match14_1_list1=tom_get_tail_TomList(tom_match14_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match14_1_2) ||  false ) { { TargetLanguage tom_match14_1_2_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match14_1_2); if(tom_is_fun_sym_ITL(tom_match14_1_2_1) ||  false ) { { String tom_match14_1_2_1_1=tom_get_slot_ITL_code(tom_match14_1_2_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match14_1_2_1_1) , "/>") ||  false ) {
 
        return true;
       }} }} }}} } if(!(tom_is_empty_TomList(tom_match14_1_end1))) {tom_match14_1_end1=tom_get_tail_TomList(tom_match14_1_end1); }tom_match14_1_list1=tom_match14_1_end1;} } while(!(tom_is_empty_TomList(tom_match14_1_list1)));}}} }}}
 
    return false;
  }
  
  private TomTerm metaEncodeTNodeList(TomList list) {
    return tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .CONC_TNODE),list) ;
  }
  
  private TomList aggregateXMLBody(TomList context, TomList subjectList) {
    TomTerm composite = expandBackQuoteXMLAppl(context,tom_make_Composite(subjectList) );
      //System.out.println("composite = " + composite);
    return composite.getArgs();
  }

  private TomName encodeName(TomName name) {
    return tom_make_Name( "\"" +name .getString() + "\"") ;
  }
  
  private TomList aggregateXMLAttribute(TomList context,TomList subjectList) {
    TomList list = tom_make_empty_concTomTerm() ;
     { TomList tom_match15_1=(( TomList)subjectList);{ if(tom_is_fun_sym_concTomTerm(tom_match15_1) ||  false ) { { TomList tom_match15_1_list1=tom_match15_1; { TomList tom_match15_1_begin1=tom_match15_1_list1; { TomList tom_match15_1_end1=tom_match15_1_list1; do {{ { TomList X1=tom_get_slice_concTomTerm(tom_match15_1_begin1,tom_match15_1_end1); if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm tom_match15_1_2=tom_get_head_TomList(tom_match15_1_list1);{tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match15_1_2) ||  false ) { { TomName tom_match15_1_2_1=tom_get_slot_BuildVariable_astName(tom_match15_1_2); { TomName name=tom_match15_1_2_1; if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm tom_match15_1_3=tom_get_head_TomList(tom_match15_1_list1);{tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match15_1_3) ||  false ) { { TargetLanguage tom_match15_1_3_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match15_1_3); if(tom_is_fun_sym_ITL(tom_match15_1_3_1) ||  false ) { { String tom_match15_1_3_1_1=tom_get_slot_ITL_code(tom_match15_1_3_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match15_1_3_1_1) , "=") ||  false ) { if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm value=tom_get_head_TomList(tom_match15_1_list1);{tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); { TomList X2=tom_match15_1_list1;



 
          //TomTerm newValue = `BackQuoteAppl(emptyOption(),Name(Constants.TEXT_NODE),concTomTerm(value));
          // no longer necessary to encode string attributes
        TomTerm newValue = value;
        
        TomList args = tom_insert_list_concTomTerm(context,tom_make_insert_concTomTerm(tom_make_BackQuoteAppl(emptyOption(),encodeName(name),tom_make_empty_concTomTerm()),tom_make_insert_concTomTerm(tom_make_BackQuoteAppl(emptyOption(),tom_make_Name( "\"true\""),tom_make_empty_concTomTerm()),tom_make_insert_concTomTerm(newValue,tom_make_empty_concTomTerm()))))



 ;
        TomTerm attributeNode = tom_make_BackQuoteAppl(emptyOption(),tom_make_Name(Constants .ATTRIBUTE_NODE),args)

 ;
        list = tom_make_manyTomList(attributeNode,list) ;
      }}} } }} }} }}} }}} }}} }} if(!(tom_is_empty_TomList(tom_match15_1_end1))) {tom_match15_1_end1=tom_get_tail_TomList(tom_match15_1_end1); }tom_match15_1_list1=tom_match15_1_end1;} } while(!(tom_is_empty_TomList(tom_match15_1_list1)));}}} } if(tom_is_fun_sym_concTomTerm(tom_match15_1) ||  false ) { { TomList tom_match15_1_list1=tom_match15_1; { TomList tom_match15_1_begin1=tom_match15_1_list1; { TomList tom_match15_1_end1=tom_match15_1_list1; do {{ { TomList X1=tom_get_slice_concTomTerm(tom_match15_1_begin1,tom_match15_1_end1); if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm tom_match15_1_2=tom_get_head_TomList(tom_match15_1_list1);{tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); if(tom_is_fun_sym_BuildVariable(tom_match15_1_2) ||  false ) { { TomName tom_match15_1_2_1=tom_get_slot_BuildVariable_astName(tom_match15_1_2); { TomName name=tom_match15_1_2_1; if(!(tom_is_empty_TomList(tom_match15_1_list1))) { { TomTerm tom_match15_1_3=tom_get_head_TomList(tom_match15_1_list1);{tom_match15_1_list1=tom_get_tail_TomList(tom_match15_1_list1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match15_1_3) ||  false ) { { TargetLanguage tom_match15_1_3_1=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match15_1_3); if(tom_is_fun_sym_ITL(tom_match15_1_3_1) ||  false ) { { String tom_match15_1_3_1_1=tom_get_slot_ITL_code(tom_match15_1_3_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match15_1_3_1_1) , "*") ||  false ) { { TomList X2=tom_match15_1_list1;





 
        TomTerm attributeNode = tom_make_VariableStar(emptyOption(),name,tom_make_TomTypeAlone( "unknown type"),tom_make_empty_concConstraint()) ;
        list = tom_make_manyTomList(attributeNode,list) ;
      } }} }} }}} }}} }}} }} if(!(tom_is_empty_TomList(tom_match15_1_end1))) {tom_match15_1_end1=tom_get_tail_TomList(tom_match15_1_end1); }tom_match15_1_list1=tom_match15_1_end1;} } while(!(tom_is_empty_TomList(tom_match15_1_list1)));}}} }}}
 
    list = (TomList) sortAttributeList(list).reverse();
    return list;
  }

  

    /*
     * At Tom expander level, we worry only about RewriteRule and
     *  their condlist
     * replace Name by Symbol
     * replace Name by Variable
     */

  private Replace2 replace_expandVariable = new Replace2() {
      public ATerm apply(ATerm subject, Object arg1) {
        TomTerm contextSubject = (TomTerm)arg1;
        if(contextSubject == null) {
          throw new TomRuntimeException(new Throwable("replace_expandVariable: null contextSubject"));
        }

        if(subject instanceof TomRule) {
           { TomTerm tom_match16_1=(( TomTerm)contextSubject);{ { TomRule tom_match16_2=(( TomRule)subject);{ { TomTerm context=tom_match16_1; if(tom_is_fun_sym_RewriteRule(tom_match16_2) ||  false ) { { TomTerm tom_match16_2_1=tom_get_slot_RewriteRule_lhs(tom_match16_2); { TomTerm tom_match16_2_2=tom_get_slot_RewriteRule_rhs(tom_match16_2); { InstructionList tom_match16_2_3=tom_get_slot_RewriteRule_condList(tom_match16_2); { OptionList tom_match16_2_4=tom_get_slot_RewriteRule_option(tom_match16_2); if(tom_is_fun_sym_Term(tom_match16_2_1) ||  false ) { { TomTerm tom_match16_2_1_1=tom_get_slot_Term_tomTerm(tom_match16_2_1); if(tom_is_fun_sym_Appl(tom_match16_2_1_1) ||  false ) { { TomTerm lhs=tom_match16_2_1_1; { OptionList tom_match16_2_1_1_1=tom_get_slot_Appl_option(tom_match16_2_1_1); { NameList tom_match16_2_1_1_2=tom_get_slot_Appl_nameList(tom_match16_2_1_1); { OptionList optionList=tom_match16_2_1_1_1; if(tom_is_fun_sym_concTomName(tom_match16_2_1_1_2) ||  false ) { { NameList tom_match16_2_1_1_2_list1=tom_match16_2_1_1_2; if(!(tom_is_empty_NameList(tom_match16_2_1_1_2_list1))) { { TomName tom_match16_2_1_1_2_1=tom_get_head_NameList(tom_match16_2_1_1_2_list1);{tom_match16_2_1_1_2_list1=tom_get_tail_NameList(tom_match16_2_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match16_2_1_1_2_1) ||  false ) { { String tom_match16_2_1_1_2_1_1=tom_get_slot_Name_string(tom_match16_2_1_1_2_1); { String tomName=tom_match16_2_1_1_2_1_1; if(tom_is_empty_NameList(tom_match16_2_1_1_2_list1)) { if(tom_is_fun_sym_Term(tom_match16_2_2) ||  false ) { { TomTerm tom_match16_2_2_1=tom_get_slot_Term_tomTerm(tom_match16_2_2); { TomTerm rhs=tom_match16_2_2_1; { InstructionList condList=tom_match16_2_3; { OptionList option=tom_match16_2_4;



  
                //debugPrintln("expandVariable.13: Rule(" + lhs + "," + rhs + ")");
              TomSymbol tomSymbol = getSymbol(tomName);
              TomType symbolType = getSymbolCodomain(tomSymbol);
              TomTerm newLhs = tom_make_Term(expandVariable(context,lhs)) ;
              TomTerm newRhs = tom_make_Term(expandVariable(tom_make_TomTypeToTomTerm(symbolType),rhs)) ;
              
                // build the list of variables that occur in the lhs
              HashSet set = new HashSet();
              collectVariable(set,newLhs);
              TomList varList = ast().makeList(set);
              InstructionList newCondList = tom_make_emptyInstructionList() ;
              while(!condList.isEmpty()) {
                Instruction cond = condList.getHead();
                Instruction newCond = expandVariableInstruction(tom_make_Tom(varList) ,cond);
                newCondList = tom_make_manyInstructionList(newCond,newCondList) ;
                collectVariable(set,newCond); 
                varList = ast().makeList(set);
                condList = condList.getTail();
              }
              
              return tom_make_RewriteRule(newLhs,newRhs,newCondList,option) ;
            }}}} } }}} }}} }} }}}}} }} }}}}} }}}}}}
  // end match
        } else if(subject instanceof Instruction) {
           { TomTerm tom_match17_1=(( TomTerm)contextSubject);{ { Instruction tom_match17_2=(( Instruction)subject);{ if(tom_is_fun_sym_Tom(tom_match17_1) ||  false ) { { TomList tom_match17_1_1=tom_get_slot_Tom_tomList(tom_match17_1); { TomList varList=tom_match17_1_1; if(tom_is_fun_sym_MatchingCondition(tom_match17_2) ||  false ) { { TomTerm tom_match17_2_1=tom_get_slot_MatchingCondition_lhs(tom_match17_2); { TomTerm tom_match17_2_2=tom_get_slot_MatchingCondition_rhs(tom_match17_2); if(tom_is_fun_sym_Appl(tom_match17_2_1) ||  false ) { { TomTerm lhs=tom_match17_2_1; { NameList tom_match17_2_1_2=tom_get_slot_Appl_nameList(tom_match17_2_1); if(tom_is_fun_sym_concTomName(tom_match17_2_1_2) ||  false ) { { NameList tom_match17_2_1_2_list1=tom_match17_2_1_2; if(!(tom_is_empty_NameList(tom_match17_2_1_2_list1))) { { TomName tom_match17_2_1_2_1=tom_get_head_NameList(tom_match17_2_1_2_list1);{tom_match17_2_1_2_list1=tom_get_tail_NameList(tom_match17_2_1_2_list1); if(tom_is_fun_sym_Name(tom_match17_2_1_2_1) ||  false ) { { String tom_match17_2_1_2_1_1=tom_get_slot_Name_string(tom_match17_2_1_2_1); { String lhsName=tom_match17_2_1_2_1_1; if(tom_is_fun_sym_Appl(tom_match17_2_2) ||  false ) { { TomTerm rhs=tom_match17_2_2; { NameList tom_match17_2_2_2=tom_get_slot_Appl_nameList(tom_match17_2_2); if(tom_is_fun_sym_concTomName(tom_match17_2_2_2) ||  false ) { { NameList tom_match17_2_2_2_list1=tom_match17_2_2_2; if(!(tom_is_empty_NameList(tom_match17_2_2_2_list1))) { { TomName tom_match17_2_2_2_1=tom_get_head_NameList(tom_match17_2_2_2_list1);{tom_match17_2_2_2_list1=tom_get_tail_NameList(tom_match17_2_2_2_list1); if(tom_is_fun_sym_Name(tom_match17_2_2_2_1) ||  false ) { { String tom_match17_2_2_2_1_1=tom_get_slot_Name_string(tom_match17_2_2_2_1); { String rhsName=tom_match17_2_2_2_1_1; if(tom_is_empty_NameList(tom_match17_2_2_2_list1)) {

 
              TomSymbol lhsSymbol = getSymbol(lhsName);
              TomSymbol rhsSymbol = getSymbol(rhsName);
              TomType type;
              
              if(lhsSymbol != null) {
                type = getSymbolCodomain(lhsSymbol);
              } else if(rhsSymbol != null) {
                type = getSymbolCodomain(rhsSymbol);
              } else {
                  // both lhs and rhs are variables
                  // since lhs is a fresh variable, we look for rhs
                type = getTypeFromVariableList(tom_make_Name(rhsName) ,varList);
              }
              
              TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs) ;
              TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs) ;
              return tom_make_MatchingCondition(newLhs,newRhs) ;
             }}} }}} }} }}} }}} }}} }} }}} }}} }}} } if(tom_is_fun_sym_Tom(tom_match17_1) ||  false ) { { TomList tom_match17_1_1=tom_get_slot_Tom_tomList(tom_match17_1); { TomList varList=tom_match17_1_1; if(tom_is_fun_sym_EqualityCondition(tom_match17_2) ||  false ) { { TomTerm tom_match17_2_1=tom_get_slot_EqualityCondition_lhs(tom_match17_2); { TomTerm tom_match17_2_2=tom_get_slot_EqualityCondition_rhs(tom_match17_2); if(tom_is_fun_sym_Appl(tom_match17_2_1) ||  false ) { { TomTerm lhs=tom_match17_2_1; { NameList tom_match17_2_1_2=tom_get_slot_Appl_nameList(tom_match17_2_1); if(tom_is_fun_sym_concTomName(tom_match17_2_1_2) ||  false ) { { NameList tom_match17_2_1_2_list1=tom_match17_2_1_2; if(!(tom_is_empty_NameList(tom_match17_2_1_2_list1))) { { TomName tom_match17_2_1_2_1=tom_get_head_NameList(tom_match17_2_1_2_list1);{tom_match17_2_1_2_list1=tom_get_tail_NameList(tom_match17_2_1_2_list1); if(tom_is_fun_sym_Name(tom_match17_2_1_2_1) ||  false ) { { String tom_match17_2_1_2_1_1=tom_get_slot_Name_string(tom_match17_2_1_2_1); { String lhsName=tom_match17_2_1_2_1_1; if(tom_is_empty_NameList(tom_match17_2_1_2_list1)) { if(tom_is_fun_sym_Appl(tom_match17_2_2) ||  false ) { { TomTerm rhs=tom_match17_2_2; { NameList tom_match17_2_2_2=tom_get_slot_Appl_nameList(tom_match17_2_2); if(tom_is_fun_sym_concTomName(tom_match17_2_2_2) ||  false ) { { NameList tom_match17_2_2_2_list1=tom_match17_2_2_2; if(!(tom_is_empty_NameList(tom_match17_2_2_2_list1))) { { TomName tom_match17_2_2_2_1=tom_get_head_NameList(tom_match17_2_2_2_list1);{tom_match17_2_2_2_list1=tom_get_tail_NameList(tom_match17_2_2_2_list1); if(tom_is_fun_sym_Name(tom_match17_2_2_2_1) ||  false ) { { String tom_match17_2_2_2_1_1=tom_get_slot_Name_string(tom_match17_2_2_2_1); { String rhsName=tom_match17_2_2_2_1_1; if(tom_is_empty_NameList(tom_match17_2_2_2_list1)) {


 
              TomSymbol lhsSymbol = getSymbol(lhsName);
              TomSymbol rhsSymbol = getSymbol(rhsName);
              TomType type;
              
              if(lhsSymbol != null) {
                type = getSymbolCodomain(lhsSymbol);
              } else if(rhsSymbol != null) {
                type = getSymbolCodomain(rhsSymbol);
              } else {
                  // both lhs and rhs are variables
                type = getTypeFromVariableList(tom_make_Name(lhsName) ,varList);
              }
              
                //System.out.println("EqualityCondition type = " + type);
              
              TomTerm newLhs = expandVariable(tom_make_TomTypeToTomTerm(type),lhs) ;
              TomTerm newRhs = expandVariable(tom_make_TomTypeToTomTerm(type),rhs) ;
                
                //System.out.println("lhs    = " + lhs);
                //System.out.println("newLhs = " + newLhs);
              
              return tom_make_EqualityCondition(newLhs,newRhs) ;
             }}} }}} }} }}} } }}} }}} }} }}} }}} }}} }}}}}
  // end match
        } // end instance of Instruction

        ATerm res = traversal().genericTraversal(subject,this,contextSubject);
          //System.out.println("res1 =\n" + res);
        res = tomKernelExpander.replace_expandVariable.apply(res,contextSubject);
          //System.out.println("res2 =\n" + res);
        return res;
      } // end apply
    }; // end replace

  private TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return (TomTerm) replace_expandVariable.apply(subject,contextSubject); 
  }

  private Instruction expandVariableInstruction(TomTerm contextSubject, Instruction subject) {
    return (Instruction) replace_expandVariable.apply(subject,contextSubject); 
  }

  private TomType getTypeFromVariableList(TomName name, TomList list) {

      //System.out.println("name = " + name);
      //System.out.println("list = " + list);
    
     { TomName tom_match18_1=(( TomName)name);{ { TomList tom_match18_2=(( TomList)list);{ if(tom_is_fun_sym_emptyTomList(tom_match18_2) ||  false ) {
 
        System.out.println("getTypeFromVariableList. Stange case '" + name + "' not found");
        throw new TomRuntimeException(new Throwable("getTypeFromVariableList. Stange case '" + name + "' not found"));
       } { TomName tom_renamedvar_varName_1=tom_match18_1; if(tom_is_fun_sym_manyTomList(tom_match18_2) ||  false ) { { TomTerm tom_match18_2_1=tom_get_slot_manyTomList_head(tom_match18_2); { TomList tom_match18_2_2=tom_get_slot_manyTomList_tail(tom_match18_2); if(tom_is_fun_sym_Variable(tom_match18_2_1) ||  false ) { { TomName tom_match18_2_1_2=tom_get_slot_Variable_astName(tom_match18_2_1); { TomType tom_match18_2_1_3=tom_get_slot_Variable_astType(tom_match18_2_1); { TomName varName=tom_match18_2_1_2; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match18_2_1_3) ||  false ) { { TomType type=tom_match18_2_1_3; { TomList tail=tom_match18_2_2;

  return type; }} } }}}} }}} }} { TomName tom_renamedvar_varName_1=tom_match18_1; if(tom_is_fun_sym_manyTomList(tom_match18_2) ||  false ) { { TomTerm tom_match18_2_1=tom_get_slot_manyTomList_head(tom_match18_2); { TomList tom_match18_2_2=tom_get_slot_manyTomList_tail(tom_match18_2); if(tom_is_fun_sym_VariableStar(tom_match18_2_1) ||  false ) { { TomName tom_match18_2_1_2=tom_get_slot_VariableStar_astName(tom_match18_2_1); { TomType tom_match18_2_1_3=tom_get_slot_VariableStar_astType(tom_match18_2_1); { TomName varName=tom_match18_2_1_2; if(tom_terms_equal_TomName(varName, tom_renamedvar_varName_1)) { if(tom_is_fun_sym_Type(tom_match18_2_1_3) ||  false ) { { TomType type=tom_match18_2_1_3; { TomList tail=tom_match18_2_2;
  return type; }} } }}}} }}} }} if(tom_is_fun_sym_manyTomList(tom_match18_2) ||  false ) { { TomTerm tom_match18_2_1=tom_get_slot_manyTomList_head(tom_match18_2); { TomList tom_match18_2_2=tom_get_slot_manyTomList_tail(tom_match18_2); { TomTerm t=tom_match18_2_1; { TomList tail=tom_match18_2_2;
  return getTypeFromVariableList(name,tail); }}}} }}}}}

 
    return null;
  }
 
} // Class TomExpander


  
