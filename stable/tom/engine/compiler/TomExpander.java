/* Generated by TOM (version 2.1): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2005, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom.compiler;

import java.util.logging.Level;

import jtom.adt.tomsignature.types.*;
import jtom.exception.TomRuntimeException;
import jtom.tools.TomFactory;
import jtom.tools.TomGenericPlugin;
import jtom.tools.Tools;
import jtom.xml.Constants;
import tom.library.traversal.Replace1;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import aterm.ATerm;

/**
 * The TomExpander plugin.
 * Perform syntax expansion and more.
 */
public class TomExpander extends TomGenericPlugin {

  /* Generated by TOM (version 2.1): Do not edit this file *//* Generated by TOM (version 2.1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1): Do not edit this file *//*  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     

  /** some output suffixes */
  public static final String EXPANDED_SUFFIX       = ".tfix.expanded";
  public static final String EXPANDED_TABLE_SUFFIX = ".tfix.expanded.table";
  
  /** the declared options string */
  public static final String DECLARED_OPTIONS = "<options><boolean name='expand' altName='' description='Expander (activated by default)' value='true'/></options>";
  
  /** the kernel expander acting at very low level */
  private TomKernelExpander tomKernelExpander;
  /** the tomfactory for creating intermediate terms */
  private TomFactory tomFactory;
  
  /** Constructor*/
  public TomExpander() {
    super("TomExpander");
    tomKernelExpander = new TomKernelExpander();
    tomFactory = new TomFactory();
  }

  /**
   * The run() method performs expansion for tom syntax, variables,...
   */
  public void run() {
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");
    TomTerm expandedTerm = null;
    try {
      tomKernelExpander.setSymbolTable(getStreamManager().getSymbolTable());
      TomTerm syntaxExpandedTerm   = expandTomSyntax( (TomTerm)getWorkingTerm() );
      tomKernelExpander.updateSymbolTable();
      TomTerm context = tom_make_emptyTerm();
      
      TomTerm variableExpandedTerm = expandVariable(context, syntaxExpandedTerm);
      TomTerm stringExpandedTerm   = expandString(variableExpandedTerm);
      expandedTerm = updateCodomain(stringExpandedTerm);
      
      setWorkingTerm(expandedTerm);
      // verbose
      getLogger().log(Level.INFO, "TomExpandingPhase",
                      new Integer((int)(System.currentTimeMillis()-startChrono)));
    } catch (Exception e) {
      getLogger().log( Level.SEVERE, "ExceptionMessage",
                       new Object[]{getClass().getName(), getStreamManager().getInputFile().getName(), e.getMessage()} );
      e.printStackTrace();
      return;
    }
    if(intermediate) {
      Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix()
                           + EXPANDED_SUFFIX, expandedTerm);
      Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix()
                           + EXPANDED_TABLE_SUFFIX, symbolTable().toTerm());
    }
  }
  
  /**
   * inherited from OptionOwner interface (plugin) 
   */
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomExpander.DECLARED_OPTIONS);
  }

  private TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return tomKernelExpander.expandVariable(contextSubject,subject); 
  }
 
  /*
   * The 'expandTomSyntax' phase replaces:
   * - each 'RecordAppl' by its expanded term form:
   *   (unused slots a replaced by placeholders)
   * - each BackQuoteTerm by its compiled form
   */
  
  public TomTerm expandTomSyntax(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof TomTerm) {
             { jtom.adt.tomsignature.types.TomTerm tom_match1_1=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_BackQuoteAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm backQuoteTerm=tom_match1_1;


                TomTerm t = expandBackQuoteAppl(backQuoteTerm);
                  //System.out.println("t = " + t);
                return t;
              } } if(tom_is_fun_sym_RecordAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match1_1_1=tom_get_slot_RecordAppl_option(tom_match1_1); { jtom.adt.tomsignature.types.NameList tom_match1_1_2=tom_get_slot_RecordAppl_nameList(tom_match1_1); { jtom.adt.tomsignature.types.TomList tom_match1_1_3=tom_get_slot_RecordAppl_args(tom_match1_1); { jtom.adt.tomsignature.types.ConstraintList tom_match1_1_4=tom_get_slot_RecordAppl_constraints(tom_match1_1); { jtom.adt.tomsignature.types.OptionList option=tom_match1_1_1; { jtom.adt.tomsignature.types.NameList nameList=tom_match1_1_2; { jtom.adt.tomsignature.types.TomList args=tom_match1_1_3; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match1_1_4;


                return expandRecordAppl(option,nameList,args,constraints);
              }}}}}}}} } if(tom_is_fun_sym_XMLAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match1_1_1=tom_get_slot_XMLAppl_option(tom_match1_1); { jtom.adt.tomsignature.types.NameList tom_match1_1_2=tom_get_slot_XMLAppl_nameList(tom_match1_1); { jtom.adt.tomsignature.types.TomList tom_match1_1_3=tom_get_slot_XMLAppl_attrList(tom_match1_1); { jtom.adt.tomsignature.types.TomList tom_match1_1_4=tom_get_slot_XMLAppl_childList(tom_match1_1); { jtom.adt.tomsignature.types.ConstraintList tom_match1_1_5=tom_get_slot_XMLAppl_constraints(tom_match1_1); { jtom.adt.tomsignature.types.OptionList optionList=tom_match1_1_1; { jtom.adt.tomsignature.types.NameList nameList=tom_match1_1_2; { jtom.adt.tomsignature.types.TomList list1=tom_match1_1_3; { jtom.adt.tomsignature.types.TomList list2=tom_match1_1_4; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match1_1_5;


                //System.out.println("expandXML in:\n" + subject);
                return expandXMLAppl(optionList, nameList, list1, list2,constraints);
              }}}}}}}}}} }


                return traversal().genericTraversal(subject,this);
              }
 // end match
          } else {
            return traversal().genericTraversal(subject,this);
          }
        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * this post-processing phase replaces untyped (universalType) codomain
   * by their precise type (according to the symbolTable)
   */
  private TomTerm updateCodomain(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof Declaration) {
             { jtom.adt.tomsignature.types.Declaration tom_match2_1=(( jtom.adt.tomsignature.types.Declaration)subject); if(tom_is_fun_sym_GetHeadDecl(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_2=tom_get_slot_GetHeadDecl_variable(tom_match2_1); if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match2_1_2_3=tom_get_slot_Variable_astType(tom_match2_1_2); { jtom.adt.tomsignature.types.TomType domain=tom_match2_1_2_3;

                TomSymbol tomSymbol = getSymbolFromType(domain);
                if(tomSymbol != null) {
                  TomTypeList codomain = getSymbolDomain(tomSymbol);
                  //System.out.println("tomSymbol = " + tomSymbol);
                  //System.out.println("domain    = " + domain);
                  //System.out.println("codomain  = " + codomain);
                  
                  if(codomain.isSingle()) {
                    Declaration t = (Declaration)subject;
                    t = t.setCodomain(codomain.getHead());
                    return t;
                  } else {
                    throw new TomRuntimeException("updateCodomain: bad codomain: " + codomain);
                  }
                }
              }} }} }



                return traversal().genericTraversal(subject,this);
              }
 // end match
          } else {
            // not instance of Declaration
            return traversal().genericTraversal(subject,this);
          }

        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * replace 'abc' by conc('a','b','c')
   */
  private TomTerm expandString(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
          if(subject instanceof TomTerm) {
             { jtom.adt.tomsignature.types.TomTerm tom_match3_1=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_Appl(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm appl=tom_match3_1; { jtom.adt.tomsignature.types.NameList tom_match3_1_2=tom_get_slot_Appl_nameList(tom_match3_1); { jtom.adt.tomsignature.types.TomList tom_match3_1_3=tom_get_slot_Appl_args(tom_match3_1); if(tom_is_fun_sym_concTomName(tom_match3_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match3_1_2_list1=tom_match3_1_2; if(!(tom_is_empty_NameList(tom_match3_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match3_1_2_1=tom_get_head_NameList(tom_match3_1_2_list1);tom_match3_1_2_list1=tom_get_tail_NameList(tom_match3_1_2_list1); if(tom_is_fun_sym_Name(tom_match3_1_2_1) ||  false ) { { String  tom_match3_1_2_1_1=tom_get_slot_Name_string(tom_match3_1_2_1); { String  tomName=tom_match3_1_2_1_1; { jtom.adt.tomsignature.types.TomList args=tom_match3_1_3;

                TomSymbol tomSymbol = getSymbolFromName(tomName);
                //System.out.println("appl = " + subject);
                if(tomSymbol != null) {
                  if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
                    //System.out.println("appl = " + subject);
                    TomList newArgs = expandChar(args);
                    if(newArgs!=args) {
                      return appl.setArgs(newArgs);
                    }
                  }
                }
              }}} }} }} }}}} }



                return traversal().genericTraversal(subject,this);
              }
 // end match
          } else {
            // not instance of Declaration
            return traversal().genericTraversal(subject,this);
          }

        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * detect ill-formed char: 'abc'
   * and expand it into a list of char: 'a','b','c'
   */
  private TomList expandChar(TomList args) {
    if(args.isEmpty()) {
      return args;
    } else {
      TomTerm head = args.getHead();
      TomList tail = expandChar(args.getTail());
       { jtom.adt.tomsignature.types.TomTerm tom_match4_1=(( jtom.adt.tomsignature.types.TomTerm)head); if(tom_is_fun_sym_Appl(tom_match4_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match4_1_2=tom_get_slot_Appl_nameList(tom_match4_1); { jtom.adt.tomsignature.types.TomList tom_match4_1_3=tom_get_slot_Appl_args(tom_match4_1); if(tom_is_fun_sym_concTomName(tom_match4_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match4_1_2_list1=tom_match4_1_2; if(!(tom_is_empty_NameList(tom_match4_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match4_1_2_1=tom_get_head_NameList(tom_match4_1_2_list1);tom_match4_1_2_list1=tom_get_tail_NameList(tom_match4_1_2_list1); if(tom_is_fun_sym_Name(tom_match4_1_2_1) ||  false ) { { String  tom_match4_1_2_1_1=tom_get_slot_Name_string(tom_match4_1_2_1); { String  tomName=tom_match4_1_2_1_1; if(tom_is_empty_NameList(tom_match4_1_2_list1)) { if(tom_is_fun_sym_concTomTerm(tom_match4_1_3) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match4_1_3_list1=tom_match4_1_3; if(tom_is_empty_TomList(tom_match4_1_3_list1)) {

          /*
           * ensure that the argument contains at least 1 character and 2 single quotes
           */
          TomSymbol tomSymbol = getSymbolFromName(tomName);
          TomType termType = tomSymbol.getTypesToType().getCodomain();
          String type = termType.getTomType().getString();
          if(symbolTable().isCharType(type) && tomName.length()>3) {
            if(tomName.charAt(0)=='\'' && tomName.charAt(tomName.length()-1)=='\'') {
              TomList newArgs = tail;
              //System.out.println("bingo -> " + tomSymbol);
              for(int i=tomName.length()-2 ; i>0 ;  i--) {
                char c = tomName.charAt(i);
                String newName = "'" + c + "'";
                TomSymbol newSymbol = tomSymbol.setAstName(tom_make_Name(newName));
                newSymbol = newSymbol.setTlCode(tom_make_ITL(newName));
                symbolTable().putSymbol(newName,newSymbol);
                TomTerm newHead = head.setNameList(tom_cons_list_concTomName(tom_make_Name(newName),tom_empty_list_concTomName()));
                newArgs = tom_make_manyTomList(newHead,newArgs);
                //System.out.println("newHead = " + newHead);
                //System.out.println("newSymb = " + getSymbolFromName(newName));
              }
              return newArgs;
            } else {
              throw new TomRuntimeException("expandChar: strange char: " + tomName);
            }
          }
         }} } }}} }} }} }}} }


          return tom_make_manyTomList(head,tail);
        }


    }
  }

  protected TomTerm expandRecordAppl(OptionList option, NameList nameList, TomList args, ConstraintList constraints) {
    TomSymbol tomSymbol = getSymbolFromName(nameList.getHead().getString());
    SlotList slotList = tomSymbol.getSlotList();
    TomList subtermList = empty();
      // For each slotName (from tomSymbol)
    while(!slotList.isEmpty()) {
      TomName slotName = slotList.getHead().getSlotName();
      TomList pairList = args;
      TomTerm newSubterm = null;
      if(!slotName.isEmptyName()) {
          // look for a same name (from record)
        whileBlock: {
          while(newSubterm==null && !pairList.isEmpty()) {
            TomTerm pairSlotName = pairList.getHead();
             { jtom.adt.tomsignature.types.TomName tom_match5_1=(( jtom.adt.tomsignature.types.TomName)slotName); { jtom.adt.tomsignature.types.TomTerm tom_match5_2=(( jtom.adt.tomsignature.types.TomTerm)pairSlotName); if(tom_is_fun_sym_Name(tom_match5_1) ||  false ) { { String  tom_match5_1_1=tom_get_slot_Name_string(tom_match5_1); { String  name=tom_match5_1_1; if(tom_is_fun_sym_PairSlotAppl(tom_match5_2) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match5_2_1=tom_get_slot_PairSlotAppl_slotName(tom_match5_2); { jtom.adt.tomsignature.types.TomTerm tom_match5_2_2=tom_get_slot_PairSlotAppl_appl(tom_match5_2); if(tom_is_fun_sym_Name(tom_match5_2_1) ||  false ) { { String  tom_match5_2_1_1=tom_get_slot_Name_string(tom_match5_2_1); { String  tom_renamedvar_name_1=tom_match5_2_1_1; if(tom_terms_equal_String(name, tom_renamedvar_name_1)) { { jtom.adt.tomsignature.types.TomTerm slotSubterm=tom_match5_2_2;

                  // bingo
                newSubterm = expandTomSyntax(slotSubterm);
                break whileBlock;
              } }}} }}} }}} }
pairList = pairList.getTail();}}

          }
        } // end whileBlock
      }
      
      if(newSubterm == null) {
        newSubterm = tom_make_Placeholder(emptyOption(),tom_empty_list_concConstraint());
      }
      subtermList = append(newSubterm,subtermList);
      slotList = slotList.getTail();
    }
    
    return tom_make_Appl(option,nameList,subtermList,constraints);
  }

  protected TomTerm expandBackQuoteAppl(TomTerm t) {
    Replace1 replaceSymbol = new Replace1() {
        public ATerm apply(ATerm t) {
          if(t instanceof TomTerm) {
             { jtom.adt.tomsignature.types.TomTerm tom_match6_1=(( jtom.adt.tomsignature.types.TomTerm)t); if(tom_is_fun_sym_BackQuoteAppl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match6_1_1=tom_get_slot_BackQuoteAppl_option(tom_match6_1); { jtom.adt.tomsignature.types.TomName tom_match6_1_2=tom_get_slot_BackQuoteAppl_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomList tom_match6_1_3=tom_get_slot_BackQuoteAppl_args(tom_match6_1); { jtom.adt.tomsignature.types.OptionList optionList=tom_match6_1_1; if(tom_is_fun_sym_Name(tom_match6_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomName name=tom_match6_1_2; { String  tom_match6_1_2_1=tom_get_slot_Name_string(tom_match6_1_2); { String  tomName=tom_match6_1_2_1; { jtom.adt.tomsignature.types.TomList l=tom_match6_1_3;

                TomSymbol tomSymbol = getSymbolFromName(tomName);
                TomList args  = (TomList) traversal().genericTraversal(l,this);
                
                //System.out.println("BackQuoteTerm: " + `tomName);
                //System.out.println("tomSymbol: " + tomSymbol);

                if(tomSymbol != null) {
                  if(isListOperator(tomSymbol)) {
                    return tomFactory.buildList(name,args);
                  } else if(isArrayOperator(tomSymbol)) {
                    return tomFactory.buildArray(name,args);
                  } else if(isStringOperator(tomSymbol)) {
                    return tom_make_BuildVariable(name,tom_make_emptyTomList());
                  } else if(isDefinedSymbol(tomSymbol)) {
                    return tom_make_FunctionCall(name,args);
                  } else {
                    return tom_make_BuildTerm(name,args);
                  }
                } else if(args.isEmpty() && !hasConstructor(optionList)) {
                  return tom_make_BuildVariable(name,tom_make_emptyTomList());
                } else {
                  return tom_make_FunctionCall(name,args);
                }
              }}}} }}}}} }}
 // end match 
          }
          return traversal().genericTraversal(t,this);
        } // end apply
      }; // end replaceSymbol
    return (TomTerm) replaceSymbol.apply(t);
  }


  private TomList sortAttributeList(TomList attrList) {
     { jtom.adt.tomsignature.types.TomList tom_match7_1=(( jtom.adt.tomsignature.types.TomList)attrList); if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match7_1_list1=tom_match7_1; if(tom_is_empty_TomList(tom_match7_1_list1)) {
 return attrList;  }} } if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match7_1_list1=tom_match7_1; { jtom.adt.tomsignature.types.TomList tom_match7_1_begin1=tom_match7_1_list1; { jtom.adt.tomsignature.types.TomList tom_match7_1_end1=tom_match7_1_list1;{ while (!(tom_is_empty_TomList(tom_match7_1_end1))) {tom_match7_1_list1=tom_match7_1_end1;{ { jtom.adt.tomsignature.types.TomList X1=tom_get_slice_concTomTerm(tom_match7_1_begin1,tom_match7_1_end1); { jtom.adt.tomsignature.types.TomTerm e1=tom_get_head_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_TomList(tom_match7_1_list1); { jtom.adt.tomsignature.types.TomList tom_match7_1_begin3=tom_match7_1_list1; { jtom.adt.tomsignature.types.TomList tom_match7_1_end3=tom_match7_1_list1;{ while (!(tom_is_empty_TomList(tom_match7_1_end3))) {tom_match7_1_list1=tom_match7_1_end3;{ { jtom.adt.tomsignature.types.TomList X2=tom_get_slice_concTomTerm(tom_match7_1_begin3,tom_match7_1_end3); { jtom.adt.tomsignature.types.TomTerm e2=tom_get_head_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_TomList(tom_match7_1_list1); { jtom.adt.tomsignature.types.TomList X3=tom_match7_1_list1; { jtom.adt.tomsignature.types.TomTerm tom_match8_1=(( jtom.adt.tomsignature.types.TomTerm)e1); { jtom.adt.tomsignature.types.TomTerm tom_match8_2=(( jtom.adt.tomsignature.types.TomTerm)e2); if(tom_is_fun_sym_Appl(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_1_3=tom_get_slot_Appl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_Appl(tom_match8_1_3_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_3_1_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_3_1_2_list1=tom_match8_1_3_1_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_1_3_1_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_list1);tom_match8_1_3_1_2_list1=tom_get_tail_NameList(tom_match8_1_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_1) ||  false ) { { String  tom_match8_1_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_1_3_1_2_1); { String  name1=tom_match8_1_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_1_3_1_2_list1)) { if(tom_is_fun_sym_Appl(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_2_3=tom_get_slot_Appl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_Appl(tom_match8_2_3_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_2_3_1_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_2_3_1_2_list1=tom_match8_2_3_1_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_2_3_1_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_list1);tom_match8_2_3_1_2_list1=tom_get_tail_NameList(tom_match8_2_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_1) ||  false ) { { String  tom_match8_2_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_2_3_1_2_1); { String  name2=tom_match8_2_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_2_3_1_2_list1)) {




            if(name1.compareTo(name2) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(X1,tom_cons_list_concTomTerm(e2,tom_append_list_concTomTerm(X2,tom_cons_list_concTomTerm(e1,tom_append_list_concTomTerm(X3,tom_empty_list_concTomTerm()))))));
            }
           }}} }} }} }} }} }} } }}} }} }} }} }} }} } if(tom_is_fun_sym_RecordAppl(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_1_3=tom_get_slot_RecordAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_PairSlotAppl(tom_match8_1_3_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_1_3_1_1=tom_get_slot_PairSlotAppl_slotName(tom_match8_1_3_1); { jtom.adt.tomsignature.types.TomTerm tom_match8_1_3_1_2=tom_get_slot_PairSlotAppl_appl(tom_match8_1_3_1); { jtom.adt.tomsignature.types.TomName slotName=tom_match8_1_3_1_1; if(tom_is_fun_sym_Appl(tom_match8_1_3_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_3_1_2_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1_2); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_3_1_2_2_list1=tom_match8_1_3_1_2_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_1_3_1_2_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_2_list1);tom_match8_1_3_1_2_2_list1=tom_get_tail_NameList(tom_match8_1_3_1_2_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_2_1) ||  false ) { { String  tom_match8_1_3_1_2_2_1_1=tom_get_slot_Name_string(tom_match8_1_3_1_2_2_1); { String  name1=tom_match8_1_3_1_2_2_1_1; if(tom_is_empty_NameList(tom_match8_1_3_1_2_2_list1)) { if(tom_is_fun_sym_RecordAppl(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_2_3=tom_get_slot_RecordAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_PairSlotAppl(tom_match8_2_3_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_2_3_1_1=tom_get_slot_PairSlotAppl_slotName(tom_match8_2_3_1); { jtom.adt.tomsignature.types.TomTerm tom_match8_2_3_1_2=tom_get_slot_PairSlotAppl_appl(tom_match8_2_3_1); { jtom.adt.tomsignature.types.TomName tom_renamedvar_slotName_1=tom_match8_2_3_1_1; if(tom_terms_equal_TomName(slotName, tom_renamedvar_slotName_1)) { if(tom_is_fun_sym_Appl(tom_match8_2_3_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_2_3_1_2_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1_2); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_2_3_1_2_2_list1=tom_match8_2_3_1_2_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_2_3_1_2_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_2_list1);tom_match8_2_3_1_2_2_list1=tom_get_tail_NameList(tom_match8_2_3_1_2_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_2_1) ||  false ) { { String  tom_match8_2_3_1_2_2_1_1=tom_get_slot_Name_string(tom_match8_2_3_1_2_2_1); { String  name2=tom_match8_2_3_1_2_2_1_1; if(tom_is_empty_NameList(tom_match8_2_3_1_2_2_list1)) {



            if(name1.compareTo(name2) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(X1,tom_cons_list_concTomTerm(e2,tom_append_list_concTomTerm(X2,tom_cons_list_concTomTerm(e1,tom_append_list_concTomTerm(X3,tom_empty_list_concTomTerm()))))));
            }
           }}} }} }} }} } }}}} }} }} } }}} }} }} }} }}}} }} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_1_3=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_Appl(tom_match8_1_3_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_3_1_2=tom_get_slot_Appl_nameList(tom_match8_1_3_1); if(tom_is_fun_sym_concTomName(tom_match8_1_3_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_3_1_2_list1=tom_match8_1_3_1_2; if(!(tom_is_empty_NameList(tom_match8_1_3_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_1_3_1_2_1=tom_get_head_NameList(tom_match8_1_3_1_2_list1);tom_match8_1_3_1_2_list1=tom_get_tail_NameList(tom_match8_1_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2_1) ||  false ) { { String  tom_match8_1_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_1_3_1_2_1); { String  name1=tom_match8_1_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_1_3_1_2_list1)) { if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_2_3=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_Appl(tom_match8_2_3_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_2_3_1_2=tom_get_slot_Appl_nameList(tom_match8_2_3_1); if(tom_is_fun_sym_concTomName(tom_match8_2_3_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_2_3_1_2_list1=tom_match8_2_3_1_2; if(!(tom_is_empty_NameList(tom_match8_2_3_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_2_3_1_2_1=tom_get_head_NameList(tom_match8_2_3_1_2_list1);tom_match8_2_3_1_2_list1=tom_get_tail_NameList(tom_match8_2_3_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2_1) ||  false ) { { String  tom_match8_2_3_1_2_1_1=tom_get_slot_Name_string(tom_match8_2_3_1_2_1); { String  name2=tom_match8_2_3_1_2_1_1; if(tom_is_empty_NameList(tom_match8_2_3_1_2_list1)) {



            if(name1.compareTo(name2) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(X1,tom_cons_list_concTomTerm(e2,tom_append_list_concTomTerm(X2,tom_cons_list_concTomTerm(e1,tom_append_list_concTomTerm(X3,tom_empty_list_concTomTerm()))))));
            }
           }}} }} }} }} }} }} } }}} }} }} }} }} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_1_3=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_1_3_1=tom_get_slot_manyTomList_head(tom_match8_1_3); if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1_3_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_1_3_1_2=tom_get_slot_BackQuoteAppl_astName(tom_match8_1_3_1); if(tom_is_fun_sym_Name(tom_match8_1_3_1_2) ||  false ) { { String  tom_match8_1_3_1_2_1=tom_get_slot_Name_string(tom_match8_1_3_1_2); { String  name1=tom_match8_1_3_1_2_1; if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match8_2_3=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_3) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match8_2_3_1=tom_get_slot_manyTomList_head(tom_match8_2_3); if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2_3_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match8_2_3_1_2=tom_get_slot_BackQuoteAppl_astName(tom_match8_2_3_1); if(tom_is_fun_sym_Name(tom_match8_2_3_1_2) ||  false ) { { String  tom_match8_2_3_1_2_1=tom_get_slot_Name_string(tom_match8_2_3_1_2); { String  name2=tom_match8_2_3_1_2_1;



            if(name1.compareTo(name2) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(X1,tom_cons_list_concTomTerm(e2,tom_append_list_concTomTerm(X2,tom_cons_list_concTomTerm(e1,tom_append_list_concTomTerm(X3,tom_empty_list_concTomTerm()))))));
            }
          }} }} }} }} }}} }} }} }} }}}

      }}}tom_match7_1_end3=tom_get_tail_TomList(tom_match7_1_end3);} }tom_match7_1_list1=tom_match7_1_begin3;}}}}}tom_match7_1_end1=tom_get_tail_TomList(tom_match7_1_end1);} }tom_match7_1_list1=tom_match7_1_begin1;}}}} }}

    return attrList;
  }

  private OptionList convertOriginTracking(String name,OptionList optionList) {
    Option originTracking = findOriginTracking(optionList);
     { jtom.adt.tomsignature.types.Option tom_match9_1=(( jtom.adt.tomsignature.types.Option)originTracking); if(tom_is_fun_sym_OriginTracking(tom_match9_1) ||  false ) { { int  tom_match9_1_2=tom_get_slot_OriginTracking_line(tom_match9_1); { jtom.adt.tomsignature.types.TomName tom_match9_1_3=tom_get_slot_OriginTracking_fileName(tom_match9_1); { int  line=tom_match9_1_2; { jtom.adt.tomsignature.types.TomName fileName=tom_match9_1_3;

        return tom_cons_list_concOption(tom_make_OriginTracking(tom_make_Name(name),line,fileName),tom_empty_list_concOption());
      }}}} }}

    System.out.println("Warning: no OriginTracking information");
    return emptyOption();
  }

  protected TomTerm expandXMLAppl(OptionList optionList, NameList nameList,
                                  TomList attrList, TomList childList, ConstraintList constraints) {
    boolean implicitAttribute = hasImplicitXMLAttribut(optionList);
    boolean implicitChild     = hasImplicitXMLChild(optionList);
    
    TomList newAttrList  = tom_make_emptyTomList();
    TomList newChildList = tom_make_emptyTomList();

    TomTerm star = getAstFactory().makeUnamedVariableStar(convertOriginTracking("_*",optionList),"unknown type",tom_empty_list_concConstraint());
    if(implicitAttribute) { newAttrList  = tom_make_manyTomList(star,newAttrList); }
    if(implicitChild)     { newChildList = tom_make_manyTomList(star,newChildList); }

    /*
     * the list of attributes should not be expanded before the sort
     * the sortAttribute is extended to compare RecordAppl
     */
    attrList = sortAttributeList(attrList);

    /*
     * Attributes: go from implicit notation to explicit notation
     */
    while(!attrList.isEmpty()) {
      TomTerm newPattern = expandTomSyntax(attrList.getHead());
      newAttrList = tom_make_manyTomList(newPattern,newAttrList);
      if(implicitAttribute) { 
        newAttrList = tom_make_manyTomList(star,newAttrList); 
      }
      attrList = attrList.getTail();
    }
    newAttrList = (TomList) newAttrList.reverse();
    
    /*
     * Childs: go from implicit notation to explicit notation
     */
    while(!childList.isEmpty()) {
      TomTerm newPattern = expandTomSyntax(childList.getHead());
      newChildList = tom_make_manyTomList(newPattern,newChildList);
      if(implicitChild) {
        if(newPattern.isVariableStar()) {
            // remove the previously inserted pattern
          newChildList = newChildList.getTail();
          if(newChildList.getHead().isUnamedVariableStar()) {
            // remove the previously inserted star
            newChildList = newChildList.getTail();
          }
            // re-insert the pattern
          newChildList = tom_make_manyTomList(newPattern,newChildList);
        } else {
          newChildList = tom_make_manyTomList(star,newChildList);
        }
      }
      childList = childList.getTail();
    }
    newChildList = (TomList) newChildList.reverse();

      /*
       * encode the name and put it into the table of symbols
       */
    NameList newNameList = tom_empty_list_concTomName();
    matchBlock: {
       { jtom.adt.tomsignature.types.NameList tom_match10_1=(( jtom.adt.tomsignature.types.NameList)nameList); if(tom_is_fun_sym_concTomName(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match10_1_list1=tom_match10_1; if(!(tom_is_empty_NameList(tom_match10_1_list1))) { { jtom.adt.tomsignature.types.TomName tom_match10_1_1=tom_get_head_NameList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_NameList(tom_match10_1_list1); if(tom_is_fun_sym_Name(tom_match10_1_1) ||  false ) { { String  tom_match10_1_1_1=tom_get_slot_Name_string(tom_match10_1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match10_1_1_1) , "_") ||  false ) { if(tom_is_empty_NameList(tom_match10_1_list1)) {

          break matchBlock;
         } }} }} }} } if(tom_is_fun_sym_concTomName(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match10_1_list1=tom_match10_1; { jtom.adt.tomsignature.types.NameList tom_match10_1_begin1=tom_match10_1_list1; { jtom.adt.tomsignature.types.NameList tom_match10_1_end1=tom_match10_1_list1;{ while (!(tom_is_empty_NameList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1;{ { jtom.adt.tomsignature.types.TomName tom_match10_1_2=tom_get_head_NameList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_NameList(tom_match10_1_list1); if(tom_is_fun_sym_Name(tom_match10_1_2) ||  false ) { { String  tom_match10_1_2_1=tom_get_slot_Name_string(tom_match10_1_2); { String  name=tom_match10_1_2_1;


          newNameList = (NameList)newNameList.append(tom_make_Name(tomFactory.encodeXMLString(symbolTable(),name)));
        }} }}tom_match10_1_end1=tom_get_tail_NameList(tom_match10_1_end1);} }tom_match10_1_list1=tom_match10_1_begin1;}}}} }}

    }

      /*
       * a single "_" is converted into a Placeholder to match
       * any XML node
       */
    TomTerm xmlHead;

    if(newNameList.isEmpty()){
      xmlHead = tom_make_Placeholder(emptyOption(),tom_empty_list_concConstraint());
    } else { 
      xmlHead = tom_make_Appl(convertOriginTracking(newNameList.getHead().getString(),optionList),newNameList,empty(),tom_empty_list_concConstraint());
    }

    TomList newArgs = tom_cons_list_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_NAME),xmlHead),tom_cons_list_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_ATTRLIST),tom_make_Appl(convertOriginTracking("CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants.CONC_TNODE),tom_empty_list_concTomName()),newAttrList,tom_empty_list_concConstraint())),tom_cons_list_concTomTerm(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_CHILDLIST),tom_make_Appl(convertOriginTracking("CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants.CONC_TNODE),tom_empty_list_concTomName()),newChildList,tom_empty_list_concConstraint())),tom_empty_list_concTomTerm())))


;
    
    TomTerm result = expandTomSyntax(tom_make_RecordAppl(optionList,tom_cons_list_concTomName(tom_make_Name(Constants.ELEMENT_NODE),tom_empty_list_concTomName()),newArgs,constraints));


      //System.out.println("expandXML out:\n" + result);
    return result;
   
  }
  
 
} // class TomExpander
