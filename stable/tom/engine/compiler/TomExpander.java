/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import java.util.logging.Level;
import java.util.Iterator;
import java.util.ArrayList;

import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.TomMessage;
import tom.engine.tools.TomFactory;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.Tools;
import tom.engine.xml.Constants;
import tom.library.traversal.Replace1;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import aterm.ATerm;

/**
 * The TomExpander plugin.
 * Perform syntax expansion and more.
 */
public class TomExpander extends TomGenericPlugin {

  /* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     

  /** some output suffixes */
  public static final String EXPANDED_SUFFIX       = ".tfix.expanded";
  public static final String EXPANDED_TABLE_SUFFIX = ".tfix.expanded.table";
  
  /** the declared options string */
  public static final String DECLARED_OPTIONS = 
    "<options>" + 
    "<boolean name='expand' altName='' description='Expander (activated by default)' value='true'/>" +
    "</options>";
  
  /** the kernel expander acting at very low level */
  private TomKernelExpander tomKernelExpander;
  /** the tomfactory for creating intermediate terms */
  private TomFactory tomFactory;
  
  /** Constructor*/
  public TomExpander() {
    super("TomExpander");
    tomKernelExpander = new TomKernelExpander();
    tomFactory = new TomFactory();
  }

  /**
   * The run() method performs expansion for tom syntax, variables,...
   */
  public void run() {
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");
    TomTerm expandedTerm = null;
    try {
      tomKernelExpander.setSymbolTable(getStreamManager().getSymbolTable());
      TomTerm syntaxExpandedTerm   = expandTermApplTomSyntax( (TomTerm)getWorkingTerm() );
      updateSymbolTable();
      TomTerm context = tom_make_emptyTerm();
      
      TomTerm variableExpandedTerm = expandVariable(context, syntaxExpandedTerm);
      TomTerm stringExpandedTerm   = expandString(variableExpandedTerm);
      expandedTerm = updateCodomain(stringExpandedTerm);
      
      setWorkingTerm(expandedTerm);
      // verbose
      getLogger().log(Level.INFO, TomMessage.tomExpandingPhase.getMessage(),
                      new Integer((int)(System.currentTimeMillis()-startChrono)));
    } catch (Exception e) {
      getLogger().log( Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                       new Object[]{getClass().getName(), getStreamManager().getInputFileName(), e.getMessage()} );
      e.printStackTrace();
      return;
    }
    if(intermediate) {
      Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix()
                           + EXPANDED_SUFFIX, expandedTerm);
      Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix()
                           + EXPANDED_TABLE_SUFFIX, symbolTable().toTerm());
    }
  }

  /*
   * updateSymbol is called after a first syntax expansion phase
   * this phase updates the symbolTable according to the typeTable
   * this is performed by recursively traversing each symbol
   * - backquote are expanded
   * - each TomTypeAlone is replaced by the corresponding TomType
   */
  public void updateSymbolTable() {
    Iterator it = getStreamManager().getSymbolTable().keySymbolIterator();
    while(it.hasNext()) {
      String tomName = (String)it.next();
      TomTerm emptyContext = tom_make_emptyTerm();
      TomSymbol tomSymbol = getSymbolFromName(tomName);
      /*
       * add default isFsym and make HERE
       */ 
      tomSymbol = defaultIsFSym(tomSymbol);

      tomSymbol = expandTermApplTomSyntax(tom_make_TomSymbolToTomTerm(tomSymbol)).getAstSymbol();
      //System.out.println("symbol = " + tomSymbol);
      tomSymbol = expandVariable(emptyContext,tom_make_TomSymbolToTomTerm(tomSymbol)).getAstSymbol();
      getStreamManager().getSymbolTable().putSymbol(tomName,tomSymbol);
    }
  }
  
  private TomSymbol defaultIsFSym(TomSymbol tomSymbol) {
     if(tomSymbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match1_1=(( tom.engine.adt.tomsignature.types.TomSymbol)tomSymbol); if(tom_is_fun_sym_Symbol(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option=tom_get_slot_Symbol_option(tom_match1_1); if(tom_is_fun_sym_concOption(tom_match1_1_option) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option_list1=tom_match1_1_option; { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option_begin1=tom_match1_1_option_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option_end1=tom_match1_1_option_list1;{ while (!(tom_is_empty_concOption_OptionList(tom_match1_1_option_end1))) {tom_match1_1_option_list1=tom_match1_1_option_end1;{ { tom.engine.adt.tomsignature.types.Option tom_match1_1_option_2=tom_get_head_concOption_OptionList(tom_match1_1_option_list1);tom_match1_1_option_list1=tom_get_tail_concOption_OptionList(tom_match1_1_option_list1); if(tom_is_fun_sym_DeclarationToOption(tom_match1_1_option_2) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match1_1_option_2_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match1_1_option_2); if(tom_is_fun_sym_IsFsymDecl(tom_match1_1_option_2_astDeclaration) ||  false ) { if( true ) {

        return tomSymbol;
       } }} }}tom_match1_1_option_end1=tom_get_tail_concOption_OptionList(tom_match1_1_option_end1);} }tom_match1_1_option_list1=tom_match1_1_option_begin1;}}}} }} } if(tom_is_fun_sym_Symbol(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Symbol_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.TomType tom_match1_1_typesToType=tom_get_slot_Symbol_typesToType(tom_match1_1); { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match1_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match1_1); { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option=tom_get_slot_Symbol_option(tom_match1_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match1_1_astName; if(tom_is_fun_sym_TypesToType(tom_match1_1_typesToType) ||  false ) { { tom.engine.adt.tomsignature.types.TomTypeList tom_match1_1_typesToType_domain=tom_get_slot_TypesToType_domain(tom_match1_1_typesToType); { tom.engine.adt.tomsignature.types.TomType tom_match1_1_typesToType_codomain=tom_get_slot_TypesToType_codomain(tom_match1_1_typesToType); if(tom_is_fun_sym_concOption(tom_match1_1_option) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option_list1=tom_match1_1_option; { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option_begin1=tom_match1_1_option_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option_end1=tom_match1_1_option_list1;{ while (!(tom_is_empty_concOption_OptionList(tom_match1_1_option_end1))) {tom_match1_1_option_list1=tom_match1_1_option_end1;{ { tom.engine.adt.tomsignature.types.Option tom_match1_1_option_2=tom_get_head_concOption_OptionList(tom_match1_1_option_list1);tom_match1_1_option_list1=tom_get_tail_concOption_OptionList(tom_match1_1_option_list1); if(tom_is_fun_sym_OriginTracking(tom_match1_1_option_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_option_2_astName=tom_get_slot_OriginTracking_astName(tom_match1_1_option_2); { int  tom_match1_1_option_2_line=tom_get_slot_OriginTracking_line(tom_match1_1_option_2); { tom.engine.adt.tomsignature.types.TomName tom_match1_1_option_2_fileName=tom_get_slot_OriginTracking_fileName(tom_match1_1_option_2); { int  tom_line=tom_match1_1_option_2_line; { tom.engine.adt.tomsignature.types.TomName tom_file=tom_match1_1_option_2_fileName; if( true ) {

        return tom_make_Symbol(tom_name,tom_match1_1_typesToType,tom_match1_1_pairNameDeclList,tom_append_list_concOption(tom_get_slice_concOption(tom_match1_1_option_begin1,tom_match1_1_option_end1),tom_cons_list_concOption(tom_match1_1_option_2,tom_cons_list_concOption(tom_make_DeclarationToOption(tom_make_IsFsymDecl(tom_name,tom_make_Variable(tom_cons_list_concOption(tom_make_OriginTracking(tom_make_Name("t"),tom_line,tom_file),tom_empty_list_concOption()),tom_make_Name("t"),tom_match1_1_typesToType_codomain,tom_empty_list_concConstraint()),tom_make_Return(tom_make_ExpressionToTomTerm(tom_make_FalseTL())),tom_make_OriginTracking(tom_make_Name("is_fsym"),tom_line,tom_file))),tom_append_list_concOption(tom_match1_1_option_list1,tom_empty_list_concOption())))));
       }}}}}} }}tom_match1_1_option_end1=tom_get_tail_concOption_OptionList(tom_match1_1_option_end1);} }tom_match1_1_option_list1=tom_match1_1_option_begin1;}}}} }}} }}}}}} }} }

    return tomSymbol;
  }

  /**
   * inherited from OptionOwner interface (plugin) 
   */
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomExpander.DECLARED_OPTIONS);
  }

  private TomTerm expandVariable(TomTerm contextSubject, TomTerm subject) {
    return tomKernelExpander.expandVariable(contextSubject,subject); 
  }
 
  /*
   * The 'expandTermApplTomSyntax' phase replaces:
   * - each 'TermAppl' by its expanded record form:
   *    placeholders are removed
   *    slotName are attached to arguments
   * - each BackQuoteTerm by its compiled form
   */
  
  public TomTerm expandTermApplTomSyntax(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
					 if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_BackQuoteAppl(tom_match2_1) ||  false ) { if( true ) {

							TomTerm t = expandBackQuoteAppl(tom_match2_1);
							//System.out.println("t = " + t);
							return t;
						 } } if(tom_is_fun_sym_TermAppl(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match2_1_option=tom_get_slot_TermAppl_option(tom_match2_1); { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_TermAppl_nameList(tom_match2_1); { tom.engine.adt.tomsignature.types.TomList tom_match2_1_args=tom_get_slot_TermAppl_args(tom_match2_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match2_1_constraints=tom_get_slot_TermAppl_constraints(tom_match2_1); if( true ) {


							return expandTermAppl(tom_match2_1_option,tom_match2_1_nameList,tom_match2_1_args,tom_match2_1_constraints);
						 }}}}} } if(tom_is_fun_sym_XMLAppl(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match2_1_option=tom_get_slot_XMLAppl_option(tom_match2_1); { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_XMLAppl_nameList(tom_match2_1); { tom.engine.adt.tomsignature.types.TomList tom_match2_1_attrList=tom_get_slot_XMLAppl_attrList(tom_match2_1); { tom.engine.adt.tomsignature.types.TomList tom_match2_1_childList=tom_get_slot_XMLAppl_childList(tom_match2_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match2_1_constraints=tom_get_slot_XMLAppl_constraints(tom_match2_1); if( true ) {


							//System.out.println("expandXML in:\n" + subject);
							return expandXMLAppl(tom_match2_1_option, tom_match2_1_nameList, tom_match2_1_attrList, tom_match2_1_childList,tom_match2_1_constraints);
						 }}}}}} }} }
 // end match
					return traversal().genericTraversal(subject,this);
        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * this post-processing phase replaces untyped (universalType) codomain
   * by their precise type (according to the symbolTable)
   */
  private TomTerm updateCodomain(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
					 if(subject instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match3_1=(( tom.engine.adt.tomsignature.types.Declaration)subject); if(tom_is_fun_sym_GetHeadDecl(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_opname=tom_get_slot_GetHeadDecl_opname(tom_match3_1); if(tom_is_fun_sym_Name(tom_match3_1_opname) ||  false ) { { String  tom_match3_1_opname_string=tom_get_slot_Name_string(tom_match3_1_opname); if( true ) {

							TomSymbol tomSymbol = getSymbolFromName(tom_match3_1_opname_string);
							TomTypeList codomain = getSymbolDomain(tomSymbol);
							if(codomain.isSingle()) {
								Declaration t = (Declaration)subject;
								t = t.setCodomain(codomain.getHead());
								return t;
							} else {
								throw new TomRuntimeException("updateCodomain: bad codomain: " + codomain);
							}
						 }} }} } if(tom_is_fun_sym_GetHeadDecl(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_GetHeadDecl_variable(tom_match3_1); if(tom_is_fun_sym_Variable(tom_match3_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType=tom_get_slot_Variable_astType(tom_match3_1_variable); if( true ) {


							TomSymbol tomSymbol = getSymbolFromType(tom_match3_1_variable_astType);
							if(tomSymbol != null) {
								TomTypeList codomain = getSymbolDomain(tomSymbol);
								//System.out.println("tomSymbol = " + tomSymbol);
								//System.out.println("domain    = " + domain);
								//System.out.println("codomain  = " + codomain);

								if(codomain.isSingle()) {
									Declaration t = (Declaration)subject;
									t = t.setCodomain(codomain.getHead());
									return t;
								} else {
									throw new TomRuntimeException("updateCodomain: bad codomain: " + codomain);
								}
							}
						 }} }} }} }
 // end match
					return traversal().genericTraversal(subject,this);
        } // end apply
      }; // end new
  
  return (TomTerm) replace.apply(subject);
}

  /*
   * replace 'abc' by conc('a','b','c')
   */
  private TomTerm expandString(TomTerm subject) {
    Replace1 replace = new Replace1() { 
        public ATerm apply(ATerm subject) {
					 if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_RecordAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match4_1); { tom.engine.adt.tomsignature.types.SlotList tom_match4_1_slots=tom_get_slot_RecordAppl_slots(tom_match4_1); if(tom_is_fun_sym_concTomName(tom_match4_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList_list1=tom_match4_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_nameList_1=tom_get_head_concTomName_NameList(tom_match4_1_nameList_list1);tom_match4_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match4_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match4_1_nameList_1) ||  false ) { { String  tom_match4_1_nameList_1_string=tom_get_slot_Name_string(tom_match4_1_nameList_1); { tom.engine.adt.tomsignature.types.SlotList tom_args=tom_match4_1_slots; if( true ) {

							TomSymbol tomSymbol = getSymbolFromName(tom_match4_1_nameList_1_string);
							//System.out.println("appl = " + subject);
							if(tomSymbol != null) {
								if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
									//System.out.println("appl = " + subject);
									SlotList newArgs = expandChar(tom_args);
									if(newArgs!=tom_args) {
										return tom_match4_1.setSlots(newArgs);
									}
								}
							}
						 }}} }} }} }}} }} }
 // end match
					return traversal().genericTraversal(subject,this);
        } // end apply
      }; // end new

    return (TomTerm) replace.apply(subject);
  }

  /*
   * detect ill-formed char: 'abc'
   * and expand it into a list of char: 'a','b','c'
   */
  private SlotList expandChar(SlotList args) {
    if(args.isEmpty()) {
      return args;
    } else {
      Slot head = args.getHead();
      SlotList tail = expandChar(args.getTail());
       if(head instanceof  tom.engine.adt.tomsignature.types.Slot) { { tom.engine.adt.tomsignature.types.Slot tom_match5_1=(( tom.engine.adt.tomsignature.types.Slot)head); if(tom_is_fun_sym_PairSlotAppl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_appl=tom_get_slot_PairSlotAppl_appl(tom_match5_1); if(tom_is_fun_sym_RecordAppl(tom_match5_1_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_1_appl); { tom.engine.adt.tomsignature.types.SlotList tom_match5_1_appl_slots=tom_get_slot_RecordAppl_slots(tom_match5_1_appl); if(tom_is_fun_sym_concTomName(tom_match5_1_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_appl_nameList_list1=tom_match5_1_appl_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match5_1_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match5_1_appl_nameList_list1);tom_match5_1_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match5_1_appl_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_1_appl_nameList_1) ||  false ) { { String  tom_match5_1_appl_nameList_1_string=tom_get_slot_Name_string(tom_match5_1_appl_nameList_1); { String  tom_tomName=tom_match5_1_appl_nameList_1_string; if(tom_is_empty_concTomName_NameList(tom_match5_1_appl_nameList_list1)) { if(tom_is_fun_sym_concSlot(tom_match5_1_appl_slots) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match5_1_appl_slots_list1=tom_match5_1_appl_slots; if(tom_is_empty_concSlot_SlotList(tom_match5_1_appl_slots_list1)) { if( true ) {

          /*
           * ensure that the argument contains at least 1 character and 2 single quotes
           */
          TomSymbol tomSymbol = getSymbolFromName(tom_tomName);
          TomType termType = tomSymbol.getTypesToType().getCodomain();
          String type = termType.getTomType().getString();
          if(symbolTable().isCharType(type) && tom_tomName.length()>3) {
            if(tom_tomName.charAt(0)=='\'' && tom_tomName.charAt(tom_tomName.length()-1)=='\'') {
              SlotList newArgs = tail;
              //System.out.println("bingo -> " + tomSymbol);
              for(int i=tom_tomName.length()-2 ; i>0 ;  i--) {
                char c = tom_tomName.charAt(i);
                String newName = "'" + c + "'";
                TomSymbol newSymbol = tomSymbol.setAstName(tom_make_Name(newName));
                symbolTable().putSymbol(newName,newSymbol);
                Slot newHead = tom_make_PairSlotAppl(tom_match5_1_slotName,tom_match5_1_appl.setNameList(tom_cons_list_concTomName(tom_make_Name(newName),tom_empty_list_concTomName())));
                newArgs = tom_make_manySlotList(newHead,newArgs);
                //System.out.println("newHead = " + newHead);
                //System.out.println("newSymb = " + getSymbolFromName(newName));
              }
              return newArgs;
            } else {
              throw new TomRuntimeException("expandChar: strange char: " + tom_tomName);
            }
          }
         } }} } }}} }} }} }}} }}} }} }

			return tom_make_manySlotList(head,tail);
    }
  }

  /*
   * replaces 'TermAppl' by its 'RecordAppl' form
   * when no slotName exits, the position becomes the slotName
   */
  protected TomTerm expandTermAppl(OptionList option, NameList nameList, TomList args, ConstraintList constraints) {
    String opName = nameList.getHead().getString();
    TomSymbol tomSymbol = getSymbolFromName(opName);


    //System.out.println("expandTermAppl: " + tomSymbol);
    //System.out.println("  nameList = " + nameList);

    if(tomSymbol==null && args.isEmpty()) {
      return tom_make_RecordAppl(option,nameList,tom_make_emptySlotList(),constraints);
    }

    /*
    if(tomSymbol==null && !args.isEmpty() && !opName.equals("")) {
        System.out.println("expandTermAppl: " + tomSymbol);
        System.out.println("  opName = " + opName);
        System.out.println("  args = " + args);
        throw new TomRuntimeException("expandTermAppl: unknown symbol");
    }
    */

    SlotList slotList = tom_make_emptySlotList();
    if(opName.equals("") || tomSymbol==null || isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
      while(!args.isEmpty()) {
        TomTerm subterm = expandTermApplTomSyntax(args.getHead());
        TomName slotName = tom_make_EmptyName();
        if(subterm.isUnamedVariable()) {
          // do nothing
        } else {
          slotList = (SlotList)slotList.append(tom_make_PairSlotAppl(slotName,subterm));
        }
        args = args.getTail();
      }
    } else {
      PairNameDeclList pairNameDeclList = tomSymbol.getPairNameDeclList();
      while(!args.isEmpty()) {
        TomTerm subterm = expandTermApplTomSyntax(args.getHead());
        TomName slotName = pairNameDeclList.getHead().getSlotName();
        if(subterm.isUnamedVariable()) {
          // do nothing
        } else {
          slotList = (SlotList)slotList.append(tom_make_PairSlotAppl(slotName,subterm));
        }
        args = args.getTail();
        pairNameDeclList = pairNameDeclList.getTail();
      }
    }

    return tom_make_RecordAppl(option,nameList,slotList,constraints);
  }

  protected TomTerm expandBackQuoteAppl(TomTerm t) {
    Replace1 replaceSymbol = new Replace1() {
        public ATerm apply(ATerm t) {
					 if(t instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1=(( tom.engine.adt.tomsignature.types.TomTerm)t); if(tom_is_fun_sym_BackQuoteAppl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match6_1_option=tom_get_slot_BackQuoteAppl_option(tom_match6_1); { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_BackQuoteAppl_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_args=tom_get_slot_BackQuoteAppl_args(tom_match6_1); { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match6_1_option; if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match6_1_astName; { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); if( true ) {

							TomSymbol tomSymbol = getSymbolFromName(tom_match6_1_astName_string);
							TomList args  = (TomList) traversal().genericTraversal(tom_match6_1_args,this);

							//System.out.println("BackQuoteTerm: " + `tomName);
							//System.out.println("tomSymbol: " + tomSymbol);

							if(tomSymbol != null) {
								if(isListOperator(tomSymbol)) {
									return tomFactory.buildList(tom_name,args);
								} else if(isArrayOperator(tomSymbol)) {
									return tomFactory.buildArray(tom_name,args);
								} else if(symbolTable().isBuiltinType(getTomType(getSymbolCodomain(tomSymbol))) &&
										args.isEmpty() && 
										!hasConstructor(tom_optionList)) {
									return tom_make_BuildVariable(tom_name,tom_make_emptyTomList());
								} else if(isDefinedSymbol(tomSymbol)) {
									return tom_make_FunctionCall(tom_name,args);
								} else {
									return tom_make_BuildTerm(tom_name,args);
								}
							} else if(args.isEmpty() && !hasConstructor(tom_optionList)) {
								return tom_make_BuildVariable(tom_name,tom_make_emptyTomList());
							} else {
								return tom_make_FunctionCall(tom_name,args);
							}
						 }}} }}}}} }} }
 // end match 
          return traversal().genericTraversal(t,this);
        } // end apply
      }; // end replaceSymbol
    return (TomTerm) replaceSymbol.apply(t);
  }

  private TomList sortAttributeList(TomList attrList) {
     if(attrList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1=(( tom.engine.adt.tomsignature.types.TomList)attrList); if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_list1=tom_match7_1; if(tom_is_empty_concTomTerm_TomList(tom_match7_1_list1)) { if( true ) {
 return attrList;  } }} } if(tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_list1=tom_match7_1; { tom.engine.adt.tomsignature.types.TomList tom_match7_1_begin1=tom_match7_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match7_1_end1=tom_match7_1_list1;{ while (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_end1))) {tom_match7_1_list1=tom_match7_1_end1;{ { tom.engine.adt.tomsignature.types.TomList tom_X1=tom_get_slice_concTomTerm(tom_match7_1_begin1,tom_match7_1_end1); { tom.engine.adt.tomsignature.types.TomTerm tom_e1=tom_get_head_concTomTerm_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_list1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_begin3=tom_match7_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match7_1_end3=tom_match7_1_list1;{ while (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_end3))) {tom_match7_1_list1=tom_match7_1_end3;{ { tom.engine.adt.tomsignature.types.TomList tom_X2=tom_get_slice_concTomTerm(tom_match7_1_begin3,tom_match7_1_end3); { tom.engine.adt.tomsignature.types.TomTerm tom_e2=tom_get_head_concTomTerm_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_list1); { tom.engine.adt.tomsignature.types.TomList tom_X3=tom_match7_1_list1; if( true ) { if(tom_e1 instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom_e1); if(tom_e2 instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2=(( tom.engine.adt.tomsignature.types.TomTerm)tom_e2); if(tom_is_fun_sym_TermAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args=tom_get_slot_TermAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_args_head=tom_get_slot_manyTomList_head(tom_match8_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args_tail=tom_get_slot_manyTomList_tail(tom_match8_1_args); if(tom_is_fun_sym_RecordAppl(tom_match8_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_1_args_head); if(tom_is_fun_sym_concTomName(tom_match8_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList_list1=tom_match8_1_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_1_args_head_nameList_list1);tom_match8_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_1_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_1_args_head_nameList_1) ||  false ) { { String  tom_match8_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_1_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1)) { if(tom_is_fun_sym_TermAppl(tom_match8_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args=tom_get_slot_TermAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2_args_head=tom_get_slot_manyTomList_head(tom_match8_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args_tail=tom_get_slot_manyTomList_tail(tom_match8_2_args); if(tom_is_fun_sym_RecordAppl(tom_match8_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_2_args_head); if(tom_is_fun_sym_concTomName(tom_match8_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList_list1=tom_match8_2_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_2_args_head_nameList_list1);tom_match8_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_2_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_2_args_head_nameList_1) ||  false ) { { String  tom_match8_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_2_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1)) { if( true ) {




            if(tom_match8_1_args_head_nameList_1_string.compareTo(tom_match8_2_args_head_nameList_1_string) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
            }
           } }} }} }} }} }}} }} } }} }} }} }} }}} }} } if(tom_is_fun_sym_TermAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args=tom_get_slot_TermAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_args_head=tom_get_slot_manyTomList_head(tom_match8_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args_tail=tom_get_slot_manyTomList_tail(tom_match8_1_args); if(tom_is_fun_sym_TermAppl(tom_match8_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match8_1_args_head); if(tom_is_fun_sym_concTomName(tom_match8_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList_list1=tom_match8_1_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_1_args_head_nameList_list1);tom_match8_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_1_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_1_args_head_nameList_1) ||  false ) { { String  tom_match8_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_1_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1)) { if(tom_is_fun_sym_TermAppl(tom_match8_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args=tom_get_slot_TermAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2_args_head=tom_get_slot_manyTomList_head(tom_match8_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args_tail=tom_get_slot_manyTomList_tail(tom_match8_2_args); if(tom_is_fun_sym_TermAppl(tom_match8_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match8_2_args_head); if(tom_is_fun_sym_concTomName(tom_match8_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList_list1=tom_match8_2_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_2_args_head_nameList_list1);tom_match8_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_2_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_2_args_head_nameList_1) ||  false ) { { String  tom_match8_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_2_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1)) { if( true ) {



            if(tom_match8_1_args_head_nameList_1_string.compareTo(tom_match8_2_args_head_nameList_1_string) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
            }
           } }} }} }} }} }}} }} } }} }} }} }} }}} }} } if(tom_is_fun_sym_RecordAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match8_1_slots=tom_get_slot_RecordAppl_slots(tom_match8_1); if(tom_is_fun_sym_manySlotList(tom_match8_1_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match8_1_slots_head=tom_get_slot_manySlotList_head(tom_match8_1_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match8_1_slots_tail=tom_get_slot_manySlotList_tail(tom_match8_1_slots); if(tom_is_fun_sym_PairSlotAppl(tom_match8_1_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match8_1_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match8_1_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match8_1_slots_head_slotName; if(tom_is_fun_sym_RecordAppl(tom_match8_1_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_slots_head_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_1_slots_head_appl); if(tom_is_fun_sym_concTomName(tom_match8_1_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_slots_head_appl_nameList_list1=tom_match8_1_slots_head_appl_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1);tom_match8_1_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_1_slots_head_appl_nameList_1) ||  false ) { { String  tom_match8_1_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match8_1_slots_head_appl_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1)) { if(tom_is_fun_sym_RecordAppl(tom_match8_2) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match8_2_slots=tom_get_slot_RecordAppl_slots(tom_match8_2); if(tom_is_fun_sym_manySlotList(tom_match8_2_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match8_2_slots_head=tom_get_slot_manySlotList_head(tom_match8_2_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match8_2_slots_tail=tom_get_slot_manySlotList_tail(tom_match8_2_slots); if(tom_is_fun_sym_PairSlotAppl(tom_match8_2_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match8_2_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match8_2_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_slotName_1=tom_match8_2_slots_head_slotName; if(tom_terms_equal_TomName(tom_slotName, tom_renamedvar_slotName_1)) { if(tom_is_fun_sym_RecordAppl(tom_match8_2_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_slots_head_appl_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_2_slots_head_appl); if(tom_is_fun_sym_concTomName(tom_match8_2_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_slots_head_appl_nameList_list1=tom_match8_2_slots_head_appl_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1);tom_match8_2_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_2_slots_head_appl_nameList_1) ||  false ) { { String  tom_match8_2_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match8_2_slots_head_appl_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1)) { if( true ) {



            if(tom_match8_1_slots_head_appl_nameList_1_string.compareTo(tom_match8_2_slots_head_appl_nameList_1_string) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
            }
           } }} }} }} }} } }}}} }}} }} } }} }} }} }} }}}} }}} }} } if(tom_is_fun_sym_RecordAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match8_1_slots=tom_get_slot_RecordAppl_slots(tom_match8_1); if(tom_is_fun_sym_manySlotList(tom_match8_1_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match8_1_slots_head=tom_get_slot_manySlotList_head(tom_match8_1_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match8_1_slots_tail=tom_get_slot_manySlotList_tail(tom_match8_1_slots); if(tom_is_fun_sym_PairSlotAppl(tom_match8_1_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match8_1_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match8_1_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match8_1_slots_head_slotName; if(tom_is_fun_sym_TermAppl(tom_match8_1_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_slots_head_appl_nameList=tom_get_slot_TermAppl_nameList(tom_match8_1_slots_head_appl); if(tom_is_fun_sym_concTomName(tom_match8_1_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_slots_head_appl_nameList_list1=tom_match8_1_slots_head_appl_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1);tom_match8_1_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_1_slots_head_appl_nameList_1) ||  false ) { { String  tom_match8_1_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match8_1_slots_head_appl_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_1_slots_head_appl_nameList_list1)) { if(tom_is_fun_sym_RecordAppl(tom_match8_2) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match8_2_slots=tom_get_slot_RecordAppl_slots(tom_match8_2); if(tom_is_fun_sym_manySlotList(tom_match8_2_slots) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match8_2_slots_head=tom_get_slot_manySlotList_head(tom_match8_2_slots); { tom.engine.adt.tomsignature.types.SlotList tom_match8_2_slots_tail=tom_get_slot_manySlotList_tail(tom_match8_2_slots); if(tom_is_fun_sym_PairSlotAppl(tom_match8_2_slots_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_slots_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match8_2_slots_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2_slots_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match8_2_slots_head); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_slotName_1=tom_match8_2_slots_head_slotName; if(tom_terms_equal_TomName(tom_slotName, tom_renamedvar_slotName_1)) { if(tom_is_fun_sym_TermAppl(tom_match8_2_slots_head_appl) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_slots_head_appl_nameList=tom_get_slot_TermAppl_nameList(tom_match8_2_slots_head_appl); if(tom_is_fun_sym_concTomName(tom_match8_2_slots_head_appl_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_slots_head_appl_nameList_list1=tom_match8_2_slots_head_appl_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_slots_head_appl_nameList_1=tom_get_head_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1);tom_match8_2_slots_head_appl_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_2_slots_head_appl_nameList_1) ||  false ) { { String  tom_match8_2_slots_head_appl_nameList_1_string=tom_get_slot_Name_string(tom_match8_2_slots_head_appl_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_2_slots_head_appl_nameList_list1)) { if( true ) {



            if(tom_match8_1_slots_head_appl_nameList_1_string.compareTo(tom_match8_2_slots_head_appl_nameList_1_string) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
            }
           } }} }} }} }} } }}}} }}} }} } }} }} }} }} }}}} }}} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_args_head=tom_get_slot_manyTomList_head(tom_match8_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args_tail=tom_get_slot_manyTomList_tail(tom_match8_1_args); if(tom_is_fun_sym_RecordAppl(tom_match8_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_1_args_head); if(tom_is_fun_sym_concTomName(tom_match8_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList_list1=tom_match8_1_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_1_args_head_nameList_list1);tom_match8_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_1_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_1_args_head_nameList_1) ||  false ) { { String  tom_match8_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_1_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1)) { if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2_args_head=tom_get_slot_manyTomList_head(tom_match8_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args_tail=tom_get_slot_manyTomList_tail(tom_match8_2_args); if(tom_is_fun_sym_RecordAppl(tom_match8_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_2_args_head); if(tom_is_fun_sym_concTomName(tom_match8_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList_list1=tom_match8_2_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_2_args_head_nameList_list1);tom_match8_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_2_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_2_args_head_nameList_1) ||  false ) { { String  tom_match8_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_2_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1)) { if( true ) {



            if(tom_match8_1_args_head_nameList_1_string.compareTo(tom_match8_2_args_head_nameList_1_string) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
            }
           } }} }} }} }} }}} }} } }} }} }} }} }}} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_args_head=tom_get_slot_manyTomList_head(tom_match8_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args_tail=tom_get_slot_manyTomList_tail(tom_match8_1_args); if(tom_is_fun_sym_TermAppl(tom_match8_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match8_1_args_head); if(tom_is_fun_sym_concTomName(tom_match8_1_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_1_args_head_nameList_list1=tom_match8_1_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_1_args_head_nameList_list1);tom_match8_1_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_1_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_1_args_head_nameList_1) ||  false ) { { String  tom_match8_1_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_1_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_1_args_head_nameList_list1)) { if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2_args_head=tom_get_slot_manyTomList_head(tom_match8_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args_tail=tom_get_slot_manyTomList_tail(tom_match8_2_args); if(tom_is_fun_sym_TermAppl(tom_match8_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList=tom_get_slot_TermAppl_nameList(tom_match8_2_args_head); if(tom_is_fun_sym_concTomName(tom_match8_2_args_head_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match8_2_args_head_nameList_list1=tom_match8_2_args_head_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_args_head_nameList_1=tom_get_head_concTomName_NameList(tom_match8_2_args_head_nameList_list1);tom_match8_2_args_head_nameList_list1=tom_get_tail_concTomName_NameList(tom_match8_2_args_head_nameList_list1); if(tom_is_fun_sym_Name(tom_match8_2_args_head_nameList_1) ||  false ) { { String  tom_match8_2_args_head_nameList_1_string=tom_get_slot_Name_string(tom_match8_2_args_head_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match8_2_args_head_nameList_list1)) { if( true ) {



            if(tom_match8_1_args_head_nameList_1_string.compareTo(tom_match8_2_args_head_nameList_1_string) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
            }
           } }} }} }} }} }}} }} } }} }} }} }} }}} }} } if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args=tom_get_slot_BackQuoteAppl_args(tom_match8_1); if(tom_is_fun_sym_manyTomList(tom_match8_1_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_args_head=tom_get_slot_manyTomList_head(tom_match8_1_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_1_args_tail=tom_get_slot_manyTomList_tail(tom_match8_1_args); if(tom_is_fun_sym_BackQuoteAppl(tom_match8_1_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_args_head_astName=tom_get_slot_BackQuoteAppl_astName(tom_match8_1_args_head); if(tom_is_fun_sym_Name(tom_match8_1_args_head_astName) ||  false ) { { String  tom_match8_1_args_head_astName_string=tom_get_slot_Name_string(tom_match8_1_args_head_astName); if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args=tom_get_slot_BackQuoteAppl_args(tom_match8_2); if(tom_is_fun_sym_manyTomList(tom_match8_2_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_2_args_head=tom_get_slot_manyTomList_head(tom_match8_2_args); { tom.engine.adt.tomsignature.types.TomList tom_match8_2_args_tail=tom_get_slot_manyTomList_tail(tom_match8_2_args); if(tom_is_fun_sym_BackQuoteAppl(tom_match8_2_args_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match8_2_args_head_astName=tom_get_slot_BackQuoteAppl_astName(tom_match8_2_args_head); if(tom_is_fun_sym_Name(tom_match8_2_args_head_astName) ||  false ) { { String  tom_match8_2_args_head_astName_string=tom_get_slot_Name_string(tom_match8_2_args_head_astName); if( true ) {



            if(tom_match8_1_args_head_astName_string.compareTo(tom_match8_2_args_head_astName_string) > 0) {
              return sortAttributeList(tom_append_list_concTomTerm(tom_X1,tom_cons_list_concTomTerm(tom_e2,tom_append_list_concTomTerm(tom_X2,tom_cons_list_concTomTerm(tom_e1,tom_append_list_concTomTerm(tom_X3,tom_empty_list_concTomTerm()))))));
            }
           }} }} }}} }} }} }} }}} }} }} }} }

       }}}}tom_match7_1_end3=tom_get_tail_concTomTerm_TomList(tom_match7_1_end3);} }tom_match7_1_list1=tom_match7_1_begin3;}}}}}tom_match7_1_end1=tom_get_tail_concTomTerm_TomList(tom_match7_1_end1);} }tom_match7_1_list1=tom_match7_1_begin1;}}}} }} }

    return attrList;
  }

  private OptionList convertOriginTracking(String name,OptionList optionList) {
    Option originTracking = findOriginTracking(optionList);
     if(originTracking instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match9_1=(( tom.engine.adt.tomsignature.types.Option)originTracking); if(tom_is_fun_sym_OriginTracking(tom_match9_1) ||  false ) { { int  tom_match9_1_line=tom_get_slot_OriginTracking_line(tom_match9_1); { tom.engine.adt.tomsignature.types.TomName tom_match9_1_fileName=tom_get_slot_OriginTracking_fileName(tom_match9_1); if( true ) {

        return tom_cons_list_concOption(tom_make_OriginTracking(tom_make_Name(name),tom_match9_1_line,tom_match9_1_fileName),tom_empty_list_concOption());
       }}} }} }

    System.out.println("Warning: no OriginTracking information");
    return emptyOption();
  }

  protected TomTerm expandXMLAppl(OptionList optionList, NameList nameList,
                                  TomList attrList, TomList childList, ConstraintList constraints) {
    boolean implicitAttribute = hasImplicitXMLAttribut(optionList);
    boolean implicitChild     = hasImplicitXMLChild(optionList);
    
    TomList newAttrList  = tom_make_emptyTomList();
    TomList newChildList = tom_make_emptyTomList();

    TomTerm star = getAstFactory().makeUnamedVariableStar(convertOriginTracking("_*",optionList),"unknown type",tom_empty_list_concConstraint());
    if(implicitAttribute) { newAttrList  = tom_make_manyTomList(star,newAttrList); }
    if(implicitChild)     { newChildList = tom_make_manyTomList(star,newChildList); }

    /*
     * the list of attributes should not be expanded before the sort
     * the sortAttribute is extended to compare RecordAppl
     */
    
    //System.out.println("attrList = " + attrList);
    attrList = sortAttributeList(attrList);
    //System.out.println("sorted attrList = " + attrList);

    /*
     * Attributes: go from implicit notation to explicit notation
     */
    while(!attrList.isEmpty()) {
      TomTerm newPattern = expandTermApplTomSyntax(attrList.getHead());
      newAttrList = tom_make_manyTomList(newPattern,newAttrList);
      if(implicitAttribute) { 
        newAttrList = tom_make_manyTomList(star,newAttrList); 
      }
      attrList = attrList.getTail();
    }
    newAttrList = (TomList) newAttrList.reverse();
    
    /*
     * Childs: go from implicit notation to explicit notation
     */
    while(!childList.isEmpty()) {
      TomTerm newPattern = expandTermApplTomSyntax(childList.getHead());
      newChildList = tom_make_manyTomList(newPattern,newChildList);
      if(implicitChild) {
        if(newPattern.isVariableStar()) {
            // remove the previously inserted pattern
          newChildList = newChildList.getTail();
          if(newChildList.getHead().isUnamedVariableStar()) {
            // remove the previously inserted star
            newChildList = newChildList.getTail();
          }
            // re-insert the pattern
          newChildList = tom_make_manyTomList(newPattern,newChildList);
        } else {
          newChildList = tom_make_manyTomList(star,newChildList);
        }
      }
      childList = childList.getTail();
    }
    newChildList = (TomList) newChildList.reverse();

      /*
       * encode the name and put it into the table of symbols
       */
    NameList newNameList = tom_empty_list_concTomName();
    matchBlock: {
       if(nameList instanceof  tom.engine.adt.tomsignature.types.NameList) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1=(( tom.engine.adt.tomsignature.types.NameList)nameList); if(tom_is_fun_sym_concTomName(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_list1=tom_match10_1; if(!(tom_is_empty_concTomName_NameList(tom_match10_1_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_1=tom_get_head_concTomName_NameList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concTomName_NameList(tom_match10_1_list1); if(tom_is_fun_sym_Name(tom_match10_1_1) ||  false ) { { String  tom_match10_1_1_string=tom_get_slot_Name_string(tom_match10_1_1); if(tom_terms_equal_String("_", tom_match10_1_1_string) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match10_1_list1)) { if( true ) {

          break matchBlock;
         } } }} }} }} } if(tom_is_fun_sym_concTomName(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match10_1_list1=tom_match10_1; { tom.engine.adt.tomsignature.types.NameList tom_match10_1_begin1=tom_match10_1_list1; { tom.engine.adt.tomsignature.types.NameList tom_match10_1_end1=tom_match10_1_list1;{ while (!(tom_is_empty_concTomName_NameList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1;{ { tom.engine.adt.tomsignature.types.TomName tom_match10_1_2=tom_get_head_concTomName_NameList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concTomName_NameList(tom_match10_1_list1); if(tom_is_fun_sym_Name(tom_match10_1_2) ||  false ) { { String  tom_match10_1_2_string=tom_get_slot_Name_string(tom_match10_1_2); if( true ) {


          newNameList = (NameList)newNameList.append(tom_make_Name(tomFactory.encodeXMLString(symbolTable(),tom_match10_1_2_string)));
         }} }}tom_match10_1_end1=tom_get_tail_concTomName_NameList(tom_match10_1_end1);} }tom_match10_1_list1=tom_match10_1_begin1;}}}} }} }

    }

      /*
       * a single "_" is converted into a Placeholder to match
       * any XML node
       */
    TomTerm xmlHead;

    if(newNameList.isEmpty()){
      xmlHead = tom_make_Placeholder(emptyOption(),tom_empty_list_concConstraint());
    } else { 
      xmlHead = tom_make_TermAppl(convertOriginTracking(newNameList.getHead().getString(),optionList),newNameList,empty(),tom_empty_list_concConstraint());
    }

    SlotList newArgs = tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_NAME),expandTermApplTomSyntax(xmlHead)),tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_ATTRLIST),expandTermApplTomSyntax(tom_make_TermAppl(convertOriginTracking("CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants.CONC_TNODE),tom_empty_list_concTomName()),newAttrList,tom_empty_list_concConstraint()))),tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_CHILDLIST),expandTermApplTomSyntax(tom_make_TermAppl(convertOriginTracking("CONC_TNODE",optionList),tom_cons_list_concTomName(tom_make_Name(Constants.CONC_TNODE),tom_empty_list_concTomName()),newChildList,tom_empty_list_concConstraint()))),tom_empty_list_concSlot())))





;
    
    TomTerm result = tom_make_RecordAppl(optionList,tom_cons_list_concTomName(tom_make_Name(Constants.ELEMENT_NODE),tom_empty_list_concTomName()),newArgs,constraints);

    //System.out.println("expandXML out:\n" + result);
    return result;
   
  }
  
 
} // class TomExpander
