/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import java.util.*;
import java.util.logging.Level;

import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.tools.ASTFactory;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.Tools;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import tom.library.strategy.mutraveler.MuTraveler;
import tom.library.strategy.mutraveler.Identity;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

/**
 * The TomCompiler plugin.
 */
public class TomCompiler extends TomGenericPlugin {

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_sort_String(String t) {  return  t instanceof String  ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) {  return  (t1==t2)  ;} private static boolean tom_equal_term_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Instruction(Object t) {  return  t instanceof tom.engine.adt.tominstruction.types.Instruction  ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_InstructionList(Object t) {  return  t instanceof tom.engine.adt.tominstruction.types.InstructionList  ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomType(Object t) {  return  t instanceof tom.engine.adt.tomtype.types.TomType  ;}private static boolean tom_equal_term_TomForwardType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomForwardType(Object t) {  return  t instanceof tom.engine.adt.tomtype.types.TomForwardType  ;}private static boolean tom_equal_term_TomVisit(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomVisit(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomVisit  ;}private static boolean tom_equal_term_TomRuleList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomRuleList(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomRuleList  ;}private static boolean tom_equal_term_TomRule(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomRule(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomRule  ;}private static boolean tom_equal_term_TomVisitList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomVisitList(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomVisitList  ;}private static boolean tom_equal_term_DeclarationList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_DeclarationList(Object t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.DeclarationList  ;}private static boolean tom_equal_term_Declaration(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Declaration(Object t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.Declaration  ;}private static boolean tom_equal_term_TomNumber(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNumber(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNumber  ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNumberList(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNumberList  ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNameList(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNameList  ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomName(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomName  ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Expression(Object t) {  return  t instanceof tom.engine.adt.tomexpression.types.Expression  ;}private static boolean tom_equal_term_PatternInstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PatternInstructionList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.PatternInstructionList  ;}private static boolean tom_equal_term_PatternInstruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PatternInstruction(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.PatternInstruction  ;}private static boolean tom_equal_term_Pattern(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Pattern(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.Pattern  ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomList  ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomTerm(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomTerm  ;}private static boolean tom_equal_term_PatternList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PatternList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.PatternList  ;}private static boolean tom_equal_term_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Option(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.Option  ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_OptionList(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.OptionList  ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Constraint(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.Constraint  ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_ConstraintList(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList  ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotList(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.SlotList  ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Slot(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.Slot  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_If( tom.engine.adt.tomexpression.types.Expression  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tominstruction.types.Instruction  t2) { return  tom.engine.adt.tominstruction.types.instruction.If.make(t0, t1, t2); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Return( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tominstruction.types.instruction.Return.make(t0); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Nop() { return  tom.engine.adt.tominstruction.types.instruction.Nop.make(); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_AbstractBlock( tom.engine.adt.tominstruction.types.InstructionList  t0) { return  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(t0); }private static boolean tom_is_fun_sym_Match( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.Match  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_Match( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomterm.types.PatternInstructionList  t1,  tom.engine.adt.tomoption.types.OptionList  t2) { return  tom.engine.adt.tominstruction.types.instruction.Match.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Match_SubjectList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_Match_AstPatternInstructionList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstPatternInstructionList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Match_Option( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.CompiledPattern  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_CompiledPattern_PatternList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getPatternList()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CompiledPattern_AutomataInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAutomataInst()  ;}private static boolean tom_is_fun_sym_MatchingCondition( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.MatchingCondition  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchingCondition_Lhs( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getLhs()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchingCondition_Rhs( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getRhs()  ;}private static boolean tom_is_fun_sym_TypedEqualityCondition( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.TypedEqualityCondition  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_TypedEqualityCondition_TomType( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getTomType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_TypedEqualityCondition_Lhs( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getLhs()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_TypedEqualityCondition_Rhs( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getRhs()  ;}private static boolean tom_is_fun_sym_RawAction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.RawAction  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_RawAction( tom.engine.adt.tominstruction.types.Instruction  t0) { return  tom.engine.adt.tominstruction.types.instruction.RawAction.make(t0); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_RawAction_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_TypedAction( tom.engine.adt.tominstruction.types.Instruction  t0,  tom.engine.adt.tomterm.types.Pattern  t1,  tom.engine.adt.tomterm.types.PatternList  t2) { return  tom.engine.adt.tominstruction.types.instruction.TypedAction.make(t0, t1, t2); }private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomtype.types.TomType  t) {  return  t instanceof tom.engine.adt.tomtype.types.tomtype.Type  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Type_TomType( tom.engine.adt.tomtype.types.TomType  t) {  return  t.getTomType()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Type_TlType( tom.engine.adt.tomtype.types.TomType  t) {  return  t.getTlType()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_TomTypeAlone( String  t0) { return  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make(t0); }private static boolean tom_is_fun_sym_ASTTomType( tom.engine.adt.tomtype.types.TomType  t) {  return  t instanceof tom.engine.adt.tomtype.types.tomtype.ASTTomType  ;}private static  String  tom_get_slot_ASTTomType_String( tom.engine.adt.tomtype.types.TomType  t) {  return  t.getString()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_EmptyType() { return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make(); }private static boolean tom_is_fun_sym_VisitTerm( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomvisit.VisitTerm  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VisitTerm_VNode( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t.getVNode()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_VisitTerm_AstPatternInstructionList( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t.getAstPatternInstructionList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VisitTerm_Option( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_RewriteRule( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomrule.RewriteRule  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_RewriteRule_Lhs( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getLhs()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_RewriteRule_Rhs( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getRhs()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_RewriteRule_CondList( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getCondList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RewriteRule_Option( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_Strategy( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.Strategy  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Strategy_SName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getSName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Strategy_ExtendsTerm( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getExtendsTerm()  ;}private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_get_slot_Strategy_VisitList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVisitList()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_Strategy_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_RuleSet( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.RuleSet  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_get_slot_RuleSet_RuleList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getRuleList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RuleSet_Option( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_make_FunctionDef( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomList  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomtype.types.TomType  t3,  tom.engine.adt.tominstruction.types.Instruction  t4) { return  tom.engine.adt.tomdeclaration.types.declaration.FunctionDef.make(t0, t1, t2, t3, t4); }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_make_MethodDef( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomList  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomtype.types.TomType  t3,  tom.engine.adt.tominstruction.types.Instruction  t4) { return  tom.engine.adt.tomdeclaration.types.declaration.MethodDef.make(t0, t1, t2, t3, t4); }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_make_Class( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomForwardType  t1,  tom.engine.adt.tomterm.types.TomTerm  t2,  tom.engine.adt.tomdeclaration.types.Declaration  t3) { return  tom.engine.adt.tomdeclaration.types.declaration.Class.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_make_AbstractDecl( tom.engine.adt.tomdeclaration.types.DeclarationList  t0) { return  tom.engine.adt.tomdeclaration.types.declaration.AbstractDecl.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_Position( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.Position.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_AbsVar( int  t0) { return  tom.engine.adt.tomname.types.tomnumber.AbsVar.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_RenamedVar( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomname.types.tomnumber.RenamedVar.make(t0); }private static  tom.engine.adt.tomname.types.TomNumber  tom_make_RuleVar() { return  tom.engine.adt.tomname.types.tomnumber.RuleVar.make(); }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.Name  ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_Name( String  t0) { return  tom.engine.adt.tomname.types.tomname.Name.make(t0); }private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_PositionName( tom.engine.adt.tomname.types.TomNumberList  t0) { return  tom.engine.adt.tomname.types.tomname.PositionName.make(t0); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_TrueTL() { return  tom.engine.adt.tomexpression.types.expression.TrueTL.make(); }private static  tom.engine.adt.tomexpression.types.Expression  tom_make_EqualTerm( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomexpression.types.expression.EqualTerm.make(t0, t1, t2); }private static boolean tom_is_fun_sym_PatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t instanceof tom.engine.adt.tomterm.types.patterninstruction.PatternInstruction  ;}private static  tom.engine.adt.tomterm.types.PatternInstruction  tom_make_PatternInstruction( tom.engine.adt.tomterm.types.Pattern  t0,  tom.engine.adt.tominstruction.types.Instruction  t1,  tom.engine.adt.tomoption.types.OptionList  t2) { return  tom.engine.adt.tomterm.types.patterninstruction.PatternInstruction.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.Pattern  tom_get_slot_PatternInstruction_Pattern( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t.getPattern()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_PatternInstruction_Action( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t.getAction()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_PatternInstruction_Option( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomterm.types.Pattern  t) {  return  t instanceof tom.engine.adt.tomterm.types.pattern.Pattern  ;}private static  tom.engine.adt.tomterm.types.Pattern  tom_make_Pattern( tom.engine.adt.tomterm.types.TomList  t0,  tom.engine.adt.tomterm.types.TomList  t1,  tom.engine.adt.tomterm.types.TomList  t2) { return  tom.engine.adt.tomterm.types.pattern.Pattern.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_SubjectList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_TomList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getTomList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_Guards( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getGuards()  ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Variable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.Variable.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_SubjectList( tom.engine.adt.tomterm.types.TomList  t0) { return  tom.engine.adt.tomterm.types.tomterm.SubjectList.make(t0); }private static boolean tom_is_fun_sym_Term( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Term  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Term_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static boolean tom_is_fun_sym_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomterm.types.tomterm.AntiTerm.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AntiTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static boolean tom_is_fun_sym_BuildReducedTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildReducedTerm( tom.engine.adt.tomterm.types.TomTerm  t0,  tom.engine.adt.tomtype.types.TomType  t1) { return  tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_BuildReducedTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_BuildReducedTerm_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_FunctionCall( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomterm.types.TomList  t2) { return  tom.engine.adt.tomterm.types.tomterm.FunctionCall.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildConstant( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.BuildConstant.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildTerm( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomList  t1,  String  t2) { return  tom.engine.adt.tomterm.types.tomterm.BuildTerm.make(t0, t1, t2); }private static  tom.engine.adt.tomoption.types.Option  tom_make_GeneratedMatch() { return  tom.engine.adt.tomoption.types.option.GeneratedMatch.make(); }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_Ensure( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomconstraint.types.constraint.Ensure.make(t0); }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_Equal( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomconstraint.types.constraint.Equal.make(t0); }private static boolean tom_is_fun_sym_AssignTo( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraint.AssignTo  ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AssignTo( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomconstraint.types.constraint.AssignTo.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AssignTo_Variable( tom.engine.adt.tomconstraint.types.Constraint  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomslot.types.Slot  tom_make_PairSlotAppl( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(t0, t1); }private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getHeadconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getTailconcInstruction()  ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.isEmptyconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end) {    if(tom_equal_term_InstructionList(begin,end)) {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomrulelist.ConsconcTomRule || t instanceof tom.engine.adt.tomsignature.types.tomrulelist.EmptyconcTomRule  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_empty_list_concTomRule() { return  tom.engine.adt.tomsignature.types.tomrulelist.EmptyconcTomRule.make() ; }private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_cons_list_concTomRule( tom.engine.adt.tomsignature.types.TomRule  e,  tom.engine.adt.tomsignature.types.TomRuleList  l) { return  tom.engine.adt.tomsignature.types.tomrulelist.ConsconcTomRule.make(e,l) ; }private static  tom.engine.adt.tomsignature.types.TomRule  tom_get_head_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList  l) {  return  l.getHeadconcTomRule()  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_get_tail_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList  l) {  return  l.getTailconcTomRule()  ;}private static boolean tom_is_empty_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList  l) {  return  l.isEmptyconcTomRule()  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_append_list_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList  l1,  tom.engine.adt.tomsignature.types.TomRuleList  l2) {    if(tom_is_empty_concTomRule_TomRuleList(l1)) {     return l2;    } else if(tom_is_empty_concTomRule_TomRuleList(l2)) {     return l1;    } else if(tom_is_empty_concTomRule_TomRuleList(( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_tail_concTomRule_TomRuleList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule )tom_get_head_concTomRule_TomRuleList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule )tom_get_head_concTomRule_TomRuleList(l1),tom_append_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_tail_concTomRule_TomRuleList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_get_slice_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList  begin,  tom.engine.adt.tomsignature.types.TomRuleList  end) {    if(tom_equal_term_TomRuleList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_empty_list_concTomRule();    } else {      return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule )tom_get_head_concTomRule_TomRuleList(begin),( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_slice_concTomRule(( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_tail_concTomRule_TomRuleList(begin),end));    }   }  private static boolean tom_is_fun_sym_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration || t instanceof tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration  ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_empty_list_concDeclaration() { return  tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ; }private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_cons_list_concDeclaration( tom.engine.adt.tomdeclaration.types.Declaration  e,  tom.engine.adt.tomdeclaration.types.DeclarationList  l) { return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make(e,l) ; }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_get_head_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) {  return  l.getHeadconcDeclaration()  ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_tail_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) {  return  l.getTailconcDeclaration()  ;}private static boolean tom_is_empty_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) {  return  l.isEmptyconcDeclaration()  ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_append_list_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  l1,  tom.engine.adt.tomdeclaration.types.DeclarationList  l2) {    if(tom_is_empty_concDeclaration_DeclarationList(l1)) {     return l2;    } else if(tom_is_empty_concDeclaration_DeclarationList(l2)) {     return l1;    } else if(tom_is_empty_concDeclaration_DeclarationList(( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_tail_concDeclaration_DeclarationList(l1))) {     return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.Declaration )tom_get_head_concDeclaration_DeclarationList(l1),l2);    } else {      return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.Declaration )tom_get_head_concDeclaration_DeclarationList(l1),tom_append_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_tail_concDeclaration_DeclarationList(l1),l2));    }   }  private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_slice_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  begin,  tom.engine.adt.tomdeclaration.types.DeclarationList  end) {    if(tom_equal_term_DeclarationList(begin,end)) {      return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_empty_list_concDeclaration();    } else {      return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.Declaration )tom_get_head_concDeclaration_DeclarationList(begin),( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_slice_concDeclaration(( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_tail_concDeclaration_DeclarationList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber || t instanceof tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_empty_list_concTomNumber() { return  tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber.make() ; }private static  tom.engine.adt.tomname.types.TomNumberList  tom_cons_list_concTomNumber( tom.engine.adt.tomname.types.TomNumber  e,  tom.engine.adt.tomname.types.TomNumberList  l) { return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomNumber  tom_get_head_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.getHeadconcTomNumber()  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_tail_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.getTailconcTomNumber()  ;}private static boolean tom_is_empty_concTomNumber_TomNumberList( tom.engine.adt.tomname.types.TomNumberList  l) {  return  l.isEmptyconcTomNumber()  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_append_list_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  l1,  tom.engine.adt.tomname.types.TomNumberList  l2) {    if(tom_is_empty_concTomNumber_TomNumberList(l1)) {     return l2;    } else if(tom_is_empty_concTomNumber_TomNumberList(l2)) {     return l1;    } else if(tom_is_empty_concTomNumber_TomNumberList(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(l1))) {     return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(l1),tom_append_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slice_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  begin,  tom.engine.adt.tomname.types.TomNumberList  end) {    if(tom_equal_term_TomNumberList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_empty_list_concTomNumber();    } else {      return ( tom.engine.adt.tomname.types.TomNumberList )tom_cons_list_concTomNumber(( tom.engine.adt.tomname.types.TomNumber )tom_get_head_concTomNumber_TomNumberList(begin),( tom.engine.adt.tomname.types.TomNumberList )tom_get_slice_concTomNumber(( tom.engine.adt.tomname.types.TomNumberList )tom_get_tail_concTomNumber_TomNumberList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_equal_term_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }  private static boolean tom_is_fun_sym_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  t) {  return  t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction || t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_empty_list_concPatternInstruction() { return  tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction.make() ; }private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_cons_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  e,  tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction.make(e,l) ; }private static  tom.engine.adt.tomterm.types.PatternInstruction  tom_get_head_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.getHeadconcPatternInstruction()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_tail_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.getTailconcPatternInstruction()  ;}private static boolean tom_is_empty_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.isEmptyconcPatternInstruction()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_append_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  l1,  tom.engine.adt.tomterm.types.PatternInstructionList  l2) {    if(tom_is_empty_concPatternInstruction_PatternInstructionList(l1)) {     return l2;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(l2)) {     return l1;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(l1))) {     return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(l1),tom_append_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slice_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  begin,  tom.engine.adt.tomterm.types.PatternInstructionList  end) {    if(tom_equal_term_PatternInstructionList(begin,end)) {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_empty_list_concPatternInstruction();    } else {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(begin),( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_slice_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomterm.types.TomList  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm || t instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_empty_list_concTomTerm() { return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ; }private static  tom.engine.adt.tomterm.types.TomList  tom_cons_list_concTomTerm( tom.engine.adt.tomterm.types.TomTerm  e,  tom.engine.adt.tomterm.types.TomList  l) { return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(e,l) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_head_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getHeadconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getTailconcTomTerm()  ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.isEmptyconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList  l1,  tom.engine.adt.tomterm.types.TomList  l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end) {    if(tom_equal_term_TomList(begin,end)) {      return ( tom.engine.adt.tomterm.types.TomList )tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_is_fun_sym_concPattern( tom.engine.adt.tomterm.types.PatternList  t) {  return  t instanceof tom.engine.adt.tomterm.types.patternlist.ConsconcPattern || t instanceof tom.engine.adt.tomterm.types.patternlist.EmptyconcPattern  ;}private static  tom.engine.adt.tomterm.types.PatternList  tom_empty_list_concPattern() { return  tom.engine.adt.tomterm.types.patternlist.EmptyconcPattern.make() ; }private static  tom.engine.adt.tomterm.types.PatternList  tom_cons_list_concPattern( tom.engine.adt.tomterm.types.Pattern  e,  tom.engine.adt.tomterm.types.PatternList  l) { return  tom.engine.adt.tomterm.types.patternlist.ConsconcPattern.make(e,l) ; }private static  tom.engine.adt.tomterm.types.Pattern  tom_get_head_concPattern_PatternList( tom.engine.adt.tomterm.types.PatternList  l) {  return  l.getHeadconcPattern()  ;}private static  tom.engine.adt.tomterm.types.PatternList  tom_get_tail_concPattern_PatternList( tom.engine.adt.tomterm.types.PatternList  l) {  return  l.getTailconcPattern()  ;}private static boolean tom_is_empty_concPattern_PatternList( tom.engine.adt.tomterm.types.PatternList  l) {  return  l.isEmptyconcPattern()  ;}private static  tom.engine.adt.tomterm.types.PatternList  tom_append_list_concPattern( tom.engine.adt.tomterm.types.PatternList  l1,  tom.engine.adt.tomterm.types.PatternList  l2) {    if(tom_is_empty_concPattern_PatternList(l1)) {     return l2;    } else if(tom_is_empty_concPattern_PatternList(l2)) {     return l1;    } else if(tom_is_empty_concPattern_PatternList(( tom.engine.adt.tomterm.types.PatternList )tom_get_tail_concPattern_PatternList(l1))) {     return ( tom.engine.adt.tomterm.types.PatternList )tom_cons_list_concPattern(( tom.engine.adt.tomterm.types.Pattern )tom_get_head_concPattern_PatternList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.PatternList )tom_cons_list_concPattern(( tom.engine.adt.tomterm.types.Pattern )tom_get_head_concPattern_PatternList(l1),tom_append_list_concPattern(( tom.engine.adt.tomterm.types.PatternList )tom_get_tail_concPattern_PatternList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.PatternList  tom_get_slice_concPattern( tom.engine.adt.tomterm.types.PatternList  begin,  tom.engine.adt.tomterm.types.PatternList  end) {    if(tom_equal_term_PatternList(begin,end)) {      return ( tom.engine.adt.tomterm.types.PatternList )tom_empty_list_concPattern();    } else {      return ( tom.engine.adt.tomterm.types.PatternList )tom_cons_list_concPattern(( tom.engine.adt.tomterm.types.Pattern )tom_get_head_concPattern_PatternList(begin),( tom.engine.adt.tomterm.types.PatternList )tom_get_slice_concPattern(( tom.engine.adt.tomterm.types.PatternList )tom_get_tail_concPattern_PatternList(begin),end));    }   }  private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) {  return  t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption || t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getHeadconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getTailconcOption()  ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.isEmptyconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList  l1,  tom.engine.adt.tomoption.types.OptionList  l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end) {    if(tom_equal_term_OptionList(begin,end)) {      return ( tom.engine.adt.tomoption.types.OptionList )tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getHeadconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getTailconcConstraint()  ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.isEmptyconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end) {    if(tom_equal_term_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) {  return  t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot || t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList  l1,  tom.engine.adt.tomslot.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end) {    if(tom_equal_term_SlotList(begin,end)) {      return ( tom.engine.adt.tomslot.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_sort_Strategy(Object t) {  return  t instanceof tom.library.strategy.mutraveler.MuStrategy  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static boolean tom_is_fun_sym_Sequence( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (t instanceof tom.library.strategy.mutraveler.Sequence)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_empty_list_Sequence() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_cons_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  head,  tom.library.strategy.mutraveler.MuStrategy  tail) { return  new tom.library.strategy.mutraveler.Sequence(head,tail) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_head_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.FIRST)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_tail_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.THEN)  ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  t instanceof tom.library.strategy.mutraveler.Identity  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_append_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  l1,  tom.library.strategy.mutraveler.MuStrategy  l2) {    if(tom_is_empty_Sequence_Strategy(l1)) {     return l2;    } else if(tom_is_empty_Sequence_Strategy(l2)) {     return l1;    } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1))) {        return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),l2);      } else {        return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),tom_append_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1),l2));      }    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(l1 , l2);    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_slice_Sequence( tom.library.strategy.mutraveler.MuStrategy  begin,  tom.library.strategy.mutraveler.MuStrategy  end) {    if(tom_equal_term_Strategy(begin,end)) {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_empty_list_Sequence();    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(begin),( tom.library.strategy.mutraveler.MuStrategy )tom_get_slice_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(begin),end));    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_OneId( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.OneId(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ChoiceId( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.ChoiceId(first,then) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_OnceTopDownId( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_ChoiceId(v,tom_make_OneId(tom_make_MuVar("_x")))) ; }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Collection(Object l1, Object l2) {  return  l1.equals(l2)  ;}private static boolean tom_is_sort_Collection(Object t) {  return  t instanceof java.util.Collection  ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Map(Object l1, Object l2) {  return  l1.equals(l2)  ;}private static boolean tom_is_sort_Map(Object t) {  return  t instanceof java.util.Map  ;} private static boolean tom_equal_term_Set(Object l1, Object l2) {  return 






 l1.equals(l2)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_ChoiceTopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(v,tom_make_All(tom_make_MuVar("x"))))







 ; }


  /** some output suffixes */
  public static final String COMPILED_SUFFIX = ".tfix.compiled";

  /** the declared options string*/
  public static final String DECLARED_OPTIONS = "<options><boolean name='compile' altName='' description='Compiler (activated by default)' value='true'/></options>";

  /** unicity var counter*/
  private static int absVarNumber;

  /** Constructor*/
  public TomCompiler() {
    super("TomCompiler");
  }

  public void run() {
    TomKernelCompiler tomKernelCompiler = new TomKernelCompiler(getStreamManager().getSymbolTable());
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");
    try {
      // reinit absVarNumber to generate reproducible output
      absVarNumber = 0;
      TomTerm preCompiledTerm = (TomTerm) tom_make_preProcessing(this).visit((TomTerm)getWorkingTerm());
      //System.out.println("preCompiledTerm = \n" + preCompiledTerm);
      TomTerm compiledTerm = tomKernelCompiler.compileMatching(preCompiledTerm);
      Set hashSet = new HashSet();
      TomTerm renamedTerm = (TomTerm) tom_make_TopDown(tom_make_findRenameVariable(hashSet)).visit(compiledTerm);
      //TomTerm renamedTerm = compiledTerm;
      // verbose
      getLogger().log( Level.INFO, TomMessage.tomCompilationPhase.getMessage(),
          new Integer((int)(System.currentTimeMillis()-startChrono)) );
      setWorkingTerm(renamedTerm);
      if(intermediate) {
        Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix() + COMPILED_SUFFIX, (TomTerm)getWorkingTerm());
      }
    } catch (Exception e) {
      getLogger().log( Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
          new Object[]{getStreamManager().getInputFileName(), "TomCompiler", e.getMessage()} );
      e.printStackTrace();
    }
  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomCompiler.DECLARED_OPTIONS);
  }

  /*
   * preProcessing:
   * replaces BuildReducedTerm by BuildList, BuildArray or BuildTerm
   *
   * transforms RuleSet into Function + Match + BuildReducedTerm
   * abstract list-matching patterns
   * rename non-linear patterns
   */

  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_preProcessing( TomCompiler  compiler) { return tom_make_ChoiceTopDown(tom_make_preProcessing_once(compiler))
 ; } private static class preProcessing_once  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  TomCompiler  compiler;  public preProcessing_once(  TomCompiler  compiler ) { super(tom_make_Identity() ); this.compiler=compiler; } public  TomCompiler  getcompiler() { return compiler;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_BuildReducedTerm(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberTomTerm=tom_get_slot_BuildReducedTerm_TomTerm(tomMatch1Position1); if ( ( tom_is_fun_sym_VariableStar(tomMatch1Position1NameNumberTomTerm) ||  ( tom_is_fun_sym_Variable(tomMatch1Position1NameNumberTomTerm) ||  false  )  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch1Position1NameNumberTomTerm; if ( true ) {





        return tom_var;
       } } } } } if ( ( tom_is_fun_sym_BuildReducedTerm(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch1Position1NameNumberTomTerm=tom_get_slot_BuildReducedTerm_TomTerm(tomMatch1Position1); if ( ( tom_is_fun_sym_RecordAppl(tomMatch1Position1NameNumberTomTerm) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch1Position1NameNumberTomTermNameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch1Position1NameNumberTomTerm); { tom.engine.adt.tomoption.types.OptionList  tom_optionList=tom_get_slot_RecordAppl_Option(tomMatch1Position1NameNumberTomTerm); if ( ( tom_is_fun_sym_concTomName(tomMatch1Position1NameNumberTomTermNameNumberNameList) ||  false  ) ) { {int tomMatch1Position1NameNumberTomTermNameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch1Position1NameNumberTomTermNameNumberNameListList1=tomMatch1Position1NameNumberTomTermNameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch1Position1NameNumberTomTermNameNumberNameListSave1=tomMatch1Position1NameNumberTomTermNameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch1Position1NameNumberTomTermNameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch1Position1NameNumberTomTermNameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch1Position1NameNumberTomTermNameNumberNameListList1);tomMatch1Position1NameNumberTomTermNameNumberNameListIndex1=tomMatch1Position1NameNumberTomTermNameNumberNameListIndex1 + 1;tomMatch1Position1NameNumberTomTermNameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch1Position1NameNumberTomTermNameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch1Position1NameNumberTomTermNameNumberNameListPosition1) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch1Position1NameNumberTomTermNameNumberNameListPosition1); { tom.engine.adt.tomname.types.TomName  tom_name=tomMatch1Position1NameNumberTomTermNameNumberNameListPosition1; if (tom_is_empty_concTomName_TomNameList(tomMatch1Position1NameNumberTomTermNameNumberNameListList1)) { { tom.engine.adt.tomslot.types.SlotList  tom_termArgs=tom_get_slot_RecordAppl_Slots(tomMatch1Position1NameNumberTomTerm); { tom.engine.adt.tomtype.types.TomType  tom_astType=tom_get_slot_BuildReducedTerm_AstType(tomMatch1Position1); if ( true ) {


        TomSymbol tomSymbol = compiler.symbolTable().getSymbolFromName(tom_tomName);
        SlotList newTermArgs = (SlotList) tom_make_preProcessing_makeTerm(compiler).visit(tom_termArgs);
        TomList tomListArgs = slotListToTomList(newTermArgs);

        if(hasConstant(tom_optionList)) {
          return tom_make_BuildConstant(tom_name);
        } else if(tomSymbol != null) {
          if(isListOperator(tomSymbol)) {
            return ASTFactory.buildList(tom_name,tomListArgs,compiler.symbolTable());
          } else if(isArrayOperator(tomSymbol)) {
            return ASTFactory.buildArray(tom_name,tomListArgs);
          } else if(isDefinedSymbol(tomSymbol)) {
            return tom_make_FunctionCall(tom_name,getSymbolCodomain(tomSymbol),tomListArgs);
          } else {
            String moduleName = getModuleName(tom_optionList);
            if(moduleName==null) {
              moduleName = TomBase.DEFAULT_MODULE_NAME;
            }
            return tom_make_BuildTerm(tom_name,tomListArgs,moduleName);
          }
        } else {
          return tom_make_FunctionCall(tom_name,tom_astType,tomListArgs);
        }

       } } } } } } } } }tomMatch1Position1NameNumberTomTermNameNumberNameListList1=tomMatch1Position1NameNumberTomTermNameNumberNameListSave1; } } } } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_Instruction(tom__arg)) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch2Position1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if ( ( tom_is_fun_sym_Match(tomMatch2Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_matchSubjectList=tom_get_slot_Match_SubjectList(tomMatch2Position1); { tom.engine.adt.tomterm.types.PatternInstructionList  tom_patternInstructionList=tom_get_slot_Match_AstPatternInstructionList(tomMatch2Position1); { tom.engine.adt.tomoption.types.OptionList  tom_matchOptionList=tom_get_slot_Match_Option(tomMatch2Position1); if ( true ) {





        Option orgTrack = findOriginTracking(tom_matchOptionList);
        PatternInstructionList newPatternInstructionList = tom_empty_list_concPatternInstruction();
        PatternList negativePattern = tom_empty_list_concPattern();
        TomTerm newMatchSubjectList = (TomTerm) tom_make_preProcessing(compiler).visit(tom_matchSubjectList);
        while(!tom_patternInstructionList.isEmptyconcPatternInstruction()) {
          /*
           * the call to preProcessing performs the recursive expansion
           * of nested match constructs
           */
          PatternInstruction newPatternInstruction = (PatternInstruction) tom_make_preProcessing(compiler).visit(tom_patternInstructionList.getHeadconcPatternInstruction());

matchBlock: {
               if (tom_is_sort_PatternInstruction(newPatternInstruction)) { { tom.engine.adt.tomterm.types.PatternInstruction  tomMatch3Position1=(( tom.engine.adt.tomterm.types.PatternInstruction )newPatternInstruction); if ( ( tom_is_fun_sym_PatternInstruction(tomMatch3Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.Pattern  tomMatch3Position1NameNumberPattern=tom_get_slot_PatternInstruction_Pattern(tomMatch3Position1); if ( ( tom_is_fun_sym_Pattern(tomMatch3Position1NameNumberPattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_subjectList=tom_get_slot_Pattern_SubjectList(tomMatch3Position1NameNumberPattern); { tom.engine.adt.tomterm.types.TomList  tom_termList=tom_get_slot_Pattern_TomList(tomMatch3Position1NameNumberPattern); { tom.engine.adt.tomterm.types.TomList  tom_guardList=tom_get_slot_Pattern_Guards(tomMatch3Position1NameNumberPattern); { tom.engine.adt.tomterm.types.Pattern  tom_pattern=tomMatch3Position1NameNumberPattern; { tom.engine.adt.tominstruction.types.Instruction  tom_actionInst=tom_get_slot_PatternInstruction_Action(tomMatch3Position1); { tom.engine.adt.tomoption.types.OptionList  tom_option=tom_get_slot_PatternInstruction_Option(tomMatch3Position1); if ( true ) {

                  Instruction newAction = tom_actionInst;
                  /* expansion of RawAction into TypedAction */
                   if (tom_is_sort_Instruction(tom_actionInst)) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch4Position1=(( tom.engine.adt.tominstruction.types.Instruction )tom_actionInst); if ( ( tom_is_fun_sym_RawAction(tomMatch4Position1) ||  false  ) ) { { tom.engine.adt.tominstruction.types.Instruction  tom_x=tom_get_slot_RawAction_AstInstruction(tomMatch4Position1); if ( true ) {

                      newAction=tom_make_TypedAction(tom_make_If(tom_make_TrueTL(),tom_x,tom_make_Nop()),tom_pattern,negativePattern);
                     } } } } }

                  negativePattern = tom_append_list_concPattern(negativePattern,tom_cons_list_concPattern(tom_pattern,tom_empty_list_concPattern()));

                  /* generate equality checks */                  
                  TomList renamedTermList = linearizePattern(tom_termList);
                  newPatternInstruction = tom_make_PatternInstruction(tom_make_Pattern(tom_subjectList,renamedTermList,tom_guardList),newAction,tom_option);
                  /* attach guards to variables or applications*/
                  TomList constrainedTermList = renamedTermList;
                  TomList l = tom_guardList;
                  while(!l.isEmptyconcTomTerm()) {
                    TomTerm guard = l.getHeadconcTomTerm();
                    //System.out.println("try to attach "+guard+"\nto "+constrainedTermList);
                    constrainedTermList = compiler.attachConstraint(constrainedTermList,guard);
                    l = l.getTailconcTomTerm();
                  }
                  TomList emptyGuardList = tom_empty_list_concTomTerm();
                  newPatternInstruction = tom_make_PatternInstruction(tom_make_Pattern(tom_subjectList,constrainedTermList,emptyGuardList),newAction,tom_option);

                  /* abstract patterns */
                  ArrayList abstractedPattern  = new ArrayList();
                  ArrayList introducedVariable = new ArrayList();
                  TomList newTermList = compiler.abstractPatternList(renamedTermList, abstractedPattern, introducedVariable);

                  /* newPatternInstruction is overwritten when abstraction is performed */
                  if(abstractedPattern.size() > 0) {
                    /* generate a new match construct */

                    TomList generatedSubjectList = ASTFactory.makeList(introducedVariable);
                    PatternInstruction generatedPatternInstruction =
                      tom_make_PatternInstruction(tom_make_Pattern(generatedSubjectList,ASTFactory.makeList(abstractedPattern),emptyGuardList),newAction,tom_empty_list_concOption());
                    /* We reconstruct only a list of option with orgTrack and GeneratedMatch*/
                    OptionList generatedMatchOptionList = tom_cons_list_concOption(orgTrack,tom_cons_list_concOption(tom_make_GeneratedMatch(),tom_empty_list_concOption()));
                    Instruction generatedMatch =
                      tom_make_Match(tom_make_SubjectList(generatedSubjectList),tom_cons_list_concPatternInstruction(generatedPatternInstruction,tom_empty_list_concPatternInstruction()),generatedMatchOptionList)

;
                    generatedMatch = (Instruction) MuTraveler.init(tom_make_preProcessing(compiler)).visit(generatedMatch);
                    /*System.out.println("Generate new Match"+generatedMatch); */
                    newPatternInstruction =
                      tom_make_PatternInstruction(tom_make_Pattern(tom_subjectList,newTermList,emptyGuardList),generatedMatch,tom_option);

                    /*System.out.println("newPatternInstruction = " + newPatternInstruction); */
                  }
                  /* do nothing */
                  break matchBlock;
                 } } } } } } } } } } if ( true ) {


                  System.out.println("preProcessing: strange PatternInstruction: " + newPatternInstruction);
                  throw new TomRuntimeException("preProcessing: strange PatternInstruction: " + newPatternInstruction);
                 } } }

            } // end matchBlock

            newPatternInstructionList = tom_append_list_concPatternInstruction(newPatternInstructionList,tom_cons_list_concPatternInstruction(newPatternInstruction,tom_empty_list_concPatternInstruction()));
            tom_patternInstructionList= tom_patternInstructionList.getTailconcPatternInstruction();
        }

        Instruction newMatch = tom_make_Match(newMatchSubjectList,newPatternInstructionList,tom_matchOptionList);
        return newMatch;
       } } } } } } } return super.visit_Instruction(tom__arg) ;  } public  tom.engine.adt.tomdeclaration.types.Declaration  visit_Declaration(  tom.engine.adt.tomdeclaration.types.Declaration  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_Declaration(tom__arg)) { { tom.engine.adt.tomdeclaration.types.Declaration  tomMatch5Position1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg); if ( ( tom_is_fun_sym_Strategy(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_get_slot_Strategy_SName(tomMatch5Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_extendsTerm=tom_get_slot_Strategy_ExtendsTerm(tomMatch5Position1); { tom.engine.adt.tomsignature.types.TomVisitList  tom_visitList=tom_get_slot_Strategy_VisitList(tomMatch5Position1); { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_Strategy_OrgTrack(tomMatch5Position1); if ( true ) {





        DeclarationList l = tom_empty_list_concDeclaration();//represents compiled Strategy
        TomVisitList jVisitList = tom_visitList;
        TomForwardType visitorFwd = null;
        while (!jVisitList.isEmptyconcTomVisit()){
          TomList subjectListAST = tom_empty_list_concTomTerm();
          TomVisit visit = jVisitList.getHeadconcTomVisit();
           if (tom_is_sort_TomVisit(visit)) { { tom.engine.adt.tomsignature.types.TomVisit  tomMatch6Position1=(( tom.engine.adt.tomsignature.types.TomVisit )visit); if ( ( tom_is_fun_sym_VisitTerm(tomMatch6Position1) ||  false  ) ) { { tom.engine.adt.tomtype.types.TomType  tomMatch6Position1NameNumberVNode=tom_get_slot_VisitTerm_VNode(tomMatch6Position1); if ( ( tom_is_fun_sym_Type(tomMatch6Position1NameNumberVNode) ||  false  ) ) { { tom.engine.adt.tomtype.types.TomType  tomMatch6Position1NameNumberVNodeNameNumberTomType=tom_get_slot_Type_TomType(tomMatch6Position1NameNumberVNode); if ( ( tom_is_fun_sym_ASTTomType(tomMatch6Position1NameNumberVNodeNameNumberTomType) ||  false  ) ) { { String  tom_type=tom_get_slot_ASTTomType_String(tomMatch6Position1NameNumberVNodeNameNumberTomType); { tom.engine.adt.tomtype.types.TomType  tom_vType=tomMatch6Position1NameNumberVNode; { tom.engine.adt.tomterm.types.PatternInstructionList  tom_patternInstructionList=tom_get_slot_VisitTerm_AstPatternInstructionList(tomMatch6Position1); if ( true ) {

              if (visitorFwd == null) {//first time in loop
                visitorFwd = compiler.symbolTable().getForwardType(tom_type);//do the job only once
              }
              TomTerm arg = tom_make_Variable(tom_empty_list_concOption(),tom_make_Name("tom__arg"),tom_vType,tom_empty_list_concConstraint());//arg subjectList
              subjectListAST = append(arg,subjectListAST);
              String funcName = "visit_" + tom_type;//function name
              Instruction matchStatement = tom_make_Match(tom_make_SubjectList(subjectListAST),tom_patternInstructionList,tom_cons_list_concOption(tom_orgTrack,tom_empty_list_concOption()));
              //return default strategy.visit(arg)
              Instruction returnStatement = tom_make_Return(tom_make_FunctionCall(tom_make_Name("super." + funcName),tom_vType,subjectListAST));
              InstructionList instructions = tom_cons_list_concInstruction(matchStatement,tom_cons_list_concInstruction(returnStatement,tom_empty_list_concInstruction()));
              l = tom_append_list_concDeclaration(l,tom_cons_list_concDeclaration(tom_make_MethodDef(tom_make_Name(funcName),tom_cons_list_concTomTerm(arg,tom_empty_list_concTomTerm()),tom_vType,tom_make_TomTypeAlone("jjtraveler.VisitFailure"),tom_make_AbstractBlock(instructions)),tom_empty_list_concDeclaration()));
             } } } } } } } } } } }

          jVisitList = jVisitList.getTailconcTomVisit();
        }
        return (Declaration) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_Class(tom_name,visitorFwd,tom_extendsTerm,tom_make_AbstractDecl(l)));
       } } } } } } if ( ( tom_is_fun_sym_RuleSet(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch5Position1NameNumberRuleList=tom_get_slot_RuleSet_RuleList(tomMatch5Position1); if ( ( tom_is_fun_sym_concTomRule(tomMatch5Position1NameNumberRuleList) ||  false  ) ) { {int tomMatch5Position1NameNumberRuleListIndex1=0; { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch5Position1NameNumberRuleListList1=tomMatch5Position1NameNumberRuleList; { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch5Position1NameNumberRuleListSave1=tomMatch5Position1NameNumberRuleListList1; { if (!(tom_is_empty_concTomRule_TomRuleList(tomMatch5Position1NameNumberRuleListList1))) { { tom.engine.adt.tomsignature.types.TomRule  tomMatch5Position1NameNumberRuleListPosition1=tom_get_head_concTomRule_TomRuleList(tomMatch5Position1NameNumberRuleListList1);tomMatch5Position1NameNumberRuleListIndex1=tomMatch5Position1NameNumberRuleListIndex1 + 1;tomMatch5Position1NameNumberRuleListList1=tom_get_tail_concTomRule_TomRuleList(tomMatch5Position1NameNumberRuleListList1); if ( ( tom_is_fun_sym_RewriteRule(tomMatch5Position1NameNumberRuleListPosition1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1NameNumberRuleListPosition1NameNumberLhs=tom_get_slot_RewriteRule_Lhs(tomMatch5Position1NameNumberRuleListPosition1); if ( ( tom_is_fun_sym_Term(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhs) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTerm=tom_get_slot_Term_TomTerm(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhs); if ( ( tom_is_fun_sym_RecordAppl(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTerm) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTerm); if ( ( tom_is_fun_sym_concTomName(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameList) ||  false  ) ) { {int tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1=tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListSave1=tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1);tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListIndex1=tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListIndex1 + 1;tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListPosition1) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListPosition1); if (tom_is_empty_concTomName_TomNameList(tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1)) { { tom.engine.adt.tomsignature.types.TomRuleList  tom_rl=tomMatch5Position1NameNumberRuleList; { tom.engine.adt.tomoption.types.OptionList  tom_optionList=tom_get_slot_RuleSet_Option(tomMatch5Position1); if ( true ) {


        TomSymbol tomSymbol = compiler.symbolTable().getSymbolFromName(tom_tomName);
        TomName name = tomSymbol.getAstName();
        String moduleName = getModuleName(tom_optionList);
        PatternInstructionList patternInstructionList  = tom_empty_list_concPatternInstruction();

        //build variables list for lhs symbol
        TomTypeList typesList = getSymbolDomain(tomSymbol);
        TomList subjectListAST = tom_empty_list_concTomTerm();
        TomNumberList path = tom_cons_list_concTomNumber(tom_make_RuleVar(),tom_empty_list_concTomNumber());
        int index = 0;
        while(!typesList.isEmptyconcTomType()) {
          TomType subtermType = typesList.getHeadconcTomType();
          TomTerm variable = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(appendNumber(index,path)),subtermType,tom_empty_list_concConstraint());
          subjectListAST = append(variable,subjectListAST);
          typesList = typesList.getTailconcTomType();
          index++;
        }

        TomRuleList ruleList = tom_rl;
        TomList guardList = tom_empty_list_concTomTerm();//no guardlist in pattern
        while(!ruleList.isEmptyconcTomRule()) {
          TomRule rule = ruleList.getHeadconcTomRule();
           if (tom_is_sort_TomRule(rule)) { { tom.engine.adt.tomsignature.types.TomRule  tomMatch7Position1=(( tom.engine.adt.tomsignature.types.TomRule )rule); if ( ( tom_is_fun_sym_RewriteRule(tomMatch7Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch7Position1NameNumberLhs=tom_get_slot_RewriteRule_Lhs(tomMatch7Position1); { tom.engine.adt.tomterm.types.TomTerm  tomMatch7Position1NameNumberRhs=tom_get_slot_RewriteRule_Rhs(tomMatch7Position1); if ( ( tom_is_fun_sym_Term(tomMatch7Position1NameNumberLhs) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch7Position1NameNumberLhsNameNumberTomTerm=tom_get_slot_Term_TomTerm(tomMatch7Position1NameNumberLhs); if ( ( tom_is_fun_sym_RecordAppl(tomMatch7Position1NameNumberLhsNameNumberTomTerm) ||  false  ) ) { { tom.engine.adt.tomslot.types.SlotList  tom_matchPatternsList=tom_get_slot_RecordAppl_Slots(tomMatch7Position1NameNumberLhsNameNumberTomTerm); { tom.engine.adt.tomterm.types.TomTerm  tom_lhsTerm=tomMatch7Position1NameNumberLhsNameNumberTomTerm; if ( ( tom_is_fun_sym_Term(tomMatch7Position1NameNumberRhs) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_rhsTerm=tom_get_slot_Term_TomTerm(tomMatch7Position1NameNumberRhs); { tom.engine.adt.tominstruction.types.InstructionList  tom_condList=tom_get_slot_RewriteRule_CondList(tomMatch7Position1); { tom.engine.adt.tomoption.types.OptionList  tom_option=tom_get_slot_RewriteRule_Option(tomMatch7Position1); if ( true ) {




              //transform rhsTerm into Instruction to build PatternInstructionList
              TomTerm newRhs = tom_make_BuildReducedTerm(tom_rhsTerm,compiler.getTermType(tom_lhsTerm));
              Instruction rhsInst = tom_make_If(tom_make_TrueTL(),tom_make_Return(newRhs),tom_make_Nop());
              Instruction newRhsInst = compiler.buildCondition(tom_condList,rhsInst);
              Pattern pattern = tom_make_Pattern(subjectListAST,slotListToTomList(tom_matchPatternsList),guardList);
              patternInstructionList = tom_append_list_concPatternInstruction(patternInstructionList,tom_cons_list_concPatternInstruction(tom_make_PatternInstruction(pattern,tom_make_RawAction(newRhsInst),tom_option),tom_empty_list_concPatternInstruction()));
             } } } } } } } } } } } } } } }

          ruleList = ruleList.getTailconcTomRule();
        }

        Instruction matchAST = tom_make_Match(tom_make_SubjectList(subjectListAST),patternInstructionList,tom_optionList)
;
        //return type `name(subjectListAST)
        Instruction buildAST = tom_make_Return(tom_make_BuildTerm(name,(TomList) MuTraveler.init(tom_make_preProcessing_makeTerm(compiler)).visit(subjectListAST),moduleName));
        Instruction functionBody =  (Instruction) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_AbstractBlock(tom_cons_list_concInstruction(matchAST,tom_cons_list_concInstruction(buildAST,tom_empty_list_concInstruction()))));

        //find codomain
        TomType codomain = getSymbolCodomain(tomSymbol);

        return tom_make_FunctionDef(name,subjectListAST,codomain,tom_make_EmptyType(),functionBody);
       } } } } } } } }tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListList1=tomMatch5Position1NameNumberRuleListPosition1NameNumberLhsNameNumberTomTermNameNumberNameListSave1; } } } } } } } } } } } } }tomMatch5Position1NameNumberRuleListList1=tomMatch5Position1NameNumberRuleListSave1; } } } } } } } } } return super.visit_Declaration(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_preProcessing_once( TomCompiler  t0) { return new preProcessing_once(t0); }

 // end strategy

  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_preProcessing_makeTerm( TomCompiler  compiler) { return tom_make_ChoiceTopDown(tom_make_preProcessing_makeTerm_once(compiler))
 ; } private static class preProcessing_makeTerm_once  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  TomCompiler  compiler;  public preProcessing_makeTerm_once(  TomCompiler  compiler ) { super(tom_make_Identity() ); this.compiler=compiler; } public  TomCompiler  getcompiler() { return compiler;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tom_t=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( true ) {




return (TomTerm) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_BuildReducedTerm(tom_t,compiler.getTermType(tom_t))); } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_preProcessing_makeTerm_once( TomCompiler  t0) { return new preProcessing_makeTerm_once(t0); }



  private Instruction buildCondition(InstructionList condList, Instruction action) {
     if (tom_is_sort_InstructionList(condList)) { { tom.engine.adt.tominstruction.types.InstructionList  tomMatch9Position1=(( tom.engine.adt.tominstruction.types.InstructionList )condList); if ( ( tom_is_fun_sym_concInstruction(tomMatch9Position1) ||  false  ) ) { {int tomMatch9Position1Index1=0; { tom.engine.adt.tominstruction.types.InstructionList  tomMatch9Position1List1=tomMatch9Position1; if (tom_is_empty_concInstruction_InstructionList(tomMatch9Position1List1)) { if ( true ) {
 return action;  } } } } } if ( ( tom_is_fun_sym_concInstruction(tomMatch9Position1) ||  false  ) ) { {int tomMatch9Position1Index1=0; { tom.engine.adt.tominstruction.types.InstructionList  tomMatch9Position1List1=tomMatch9Position1; { tom.engine.adt.tominstruction.types.InstructionList  tomMatch9Position1Save1=tomMatch9Position1List1; { if (!(tom_is_empty_concInstruction_InstructionList(tomMatch9Position1List1))) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch9Position1Position1=tom_get_head_concInstruction_InstructionList(tomMatch9Position1List1);tomMatch9Position1Index1=tomMatch9Position1Index1 + 1;tomMatch9Position1List1=tom_get_tail_concInstruction_InstructionList(tomMatch9Position1List1); if ( ( tom_is_fun_sym_MatchingCondition(tomMatch9Position1Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_pattern=tom_get_slot_MatchingCondition_Lhs(tomMatch9Position1Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_subject=tom_get_slot_MatchingCondition_Rhs(tomMatch9Position1Position1); { tom.engine.adt.tominstruction.types.InstructionList  tom_tail=tomMatch9Position1List1; if ( true ) {


        Instruction newAction = buildCondition(tom_tail,action);

        TomType subjectType = getTermType(tom_pattern);
        TomNumberList path = tom_empty_list_concTomNumber();
        path = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_RuleVar(),tom_empty_list_concTomNumber()));
        TomTerm newSubject = (TomTerm) tom_make_preProcessing(this).apply(tom_make_BuildReducedTerm(tom_subject,subjectType));
        TomTerm introducedVariable = newSubject;
        TomList guardList = tom_empty_list_concTomTerm();
        TomList generatedSubjectList = cons(introducedVariable,tom_empty_list_concTomTerm());
        /*
         * we do not use RawAction nor TypedAction here because the generated match should not
         * produce any proof obligation for the verifier
         */
        PatternInstruction generatedPatternInstruction =
          tom_make_PatternInstruction(tom_make_Pattern(generatedSubjectList,cons(tom_pattern,tom_empty_list_concTomTerm()),guardList),newAction,tom_empty_list_concOption());

        // Warning: The options are not good
        Instruction generatedMatch =
          tom_make_Match(tom_make_SubjectList(generatedSubjectList),tom_cons_list_concPatternInstruction(generatedPatternInstruction,tom_empty_list_concPatternInstruction()),tom_empty_list_concOption())

;
        return generatedMatch;
       } } } } } } }tomMatch9Position1List1=tomMatch9Position1Save1; } } } } } if ( ( tom_is_fun_sym_concInstruction(tomMatch9Position1) ||  false  ) ) { {int tomMatch9Position1Index1=0; { tom.engine.adt.tominstruction.types.InstructionList  tomMatch9Position1List1=tomMatch9Position1; { tom.engine.adt.tominstruction.types.InstructionList  tomMatch9Position1Save1=tomMatch9Position1List1; { if (!(tom_is_empty_concInstruction_InstructionList(tomMatch9Position1List1))) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch9Position1Position1=tom_get_head_concInstruction_InstructionList(tomMatch9Position1List1);tomMatch9Position1Index1=tomMatch9Position1Index1 + 1;tomMatch9Position1List1=tom_get_tail_concInstruction_InstructionList(tomMatch9Position1List1); if ( ( tom_is_fun_sym_TypedEqualityCondition(tomMatch9Position1Position1) ||  false  ) ) { { tom.engine.adt.tomtype.types.TomType  tom_type=tom_get_slot_TypedEqualityCondition_TomType(tomMatch9Position1Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_lhs=tom_get_slot_TypedEqualityCondition_Lhs(tomMatch9Position1Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_rhs=tom_get_slot_TypedEqualityCondition_Rhs(tomMatch9Position1Position1); { tom.engine.adt.tominstruction.types.InstructionList  tom_tail=tomMatch9Position1List1; if ( true ) {


	  Instruction newAction = buildCondition(tom_tail,action);
	  TomTerm newLhs = (TomTerm) tom_make_preProcessing(this).apply(tom_make_BuildReducedTerm(tom_lhs,tom_type));
	  TomTerm newRhs = (TomTerm) tom_make_preProcessing(this).apply(tom_make_BuildReducedTerm(tom_rhs,tom_type));
	  Expression equality = tom_make_EqualTerm(tom_type,newLhs,newRhs);
	  Instruction generatedTest = tom_make_If(equality,newAction,tom_make_Nop());
	  return generatedTest;
       } } } } } } } }tomMatch9Position1List1=tomMatch9Position1Save1; } } } } } } }

    throw new TomRuntimeException("buildCondition strange term: " + condList);
  }

  private static TomTerm renameVariable(TomTerm subject, Map multiplicityMap, Collection antiList, boolean treatConstraints) {
    TomTerm renamedTerm = subject;

     if (tom_is_sort_TomTerm(subject)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch10Position1=(( tom.engine.adt.tomterm.types.TomTerm )subject); {boolean tomNameNumberboolMatch10Position1= false ; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch10Position1NameNumberConstraints= null ; if (tom_is_fun_sym_UnamedVariable(tomMatch10Position1)) {tomNameNumberboolMatch10Position1= true ;tomMatch10Position1NameNumberConstraints=tom_get_slot_UnamedVariable_Constraints(tomMatch10Position1); } else { if (tom_is_fun_sym_UnamedVariableStar(tomMatch10Position1)) {tomNameNumberboolMatch10Position1= true ;tomMatch10Position1NameNumberConstraints=tom_get_slot_UnamedVariableStar_Constraints(tomMatch10Position1); } } if (tomNameNumberboolMatch10Position1) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch10Position1NameNumberConstraints; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch10Position1; if ( true ) {

	if(treatConstraints) {
	  ConstraintList newConstraintList = renameVariableInConstraintList(tom_constraints,multiplicityMap);
	  return tom_var.setConstraints(newConstraintList);
	} else {
	  return tom_var;
	}
       } } } } } } {boolean tomNameNumberboolMatch10Position1= false ; { tom.engine.adt.tomname.types.TomName  tomMatch10Position1NameNumberAstName= null ; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch10Position1NameNumberConstraints= null ; if (tom_is_fun_sym_Variable(tomMatch10Position1)) {tomNameNumberboolMatch10Position1= true ;tomMatch10Position1NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch10Position1);tomMatch10Position1NameNumberConstraints=tom_get_slot_Variable_Constraints(tomMatch10Position1); } else { if (tom_is_fun_sym_VariableStar(tomMatch10Position1)) {tomNameNumberboolMatch10Position1= true ;tomMatch10Position1NameNumberAstName=tom_get_slot_VariableStar_AstName(tomMatch10Position1);tomMatch10Position1NameNumberConstraints=tom_get_slot_VariableStar_Constraints(tomMatch10Position1); } } if (tomNameNumberboolMatch10Position1) { { tom.engine.adt.tomname.types.TomName  tom_name=tomMatch10Position1NameNumberAstName; { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch10Position1NameNumberConstraints; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch10Position1; if ( true ) {


        ConstraintList newConstraintList;
        if(treatConstraints) {
	  newConstraintList = renameVariableInConstraintList(tom_constraints,multiplicityMap);
        } else {
	  newConstraintList = tom_constraints;
        }        
        if(!multiplicityMap.containsKey(tom_name)) {
          // We see this variable for the first time
          multiplicityMap.put(tom_name,new Integer(1));
          renamedTerm = tom_var.setConstraints(newConstraintList);
        } else {        
          // We have already seen this variable
          Integer multiplicity = (Integer) multiplicityMap.get(tom_name);
          int mult = multiplicity.intValue();
          multiplicityMap.put(tom_name,new Integer(mult+1));

          TomNumberList path = tom_empty_list_concTomNumber();
          path = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_RenamedVar(tom_name),tom_empty_list_concTomNumber()));
          path = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_Position(mult),tom_empty_list_concTomNumber()));

          renamedTerm = tom_var.setAstName(tom_make_PositionName(path));
          renamedTerm = renamedTerm.setConstraints(tom_cons_list_concConstraint(tom_make_Equal(tom_var.setConstraints(tom_empty_list_concConstraint())),tom_append_list_concConstraint(newConstraintList,tom_empty_list_concConstraint())));
        }

        return renamedTerm;
       } } } } } } } } if ( ( tom_is_fun_sym_RecordAppl(tomMatch10Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_optionList=tom_get_slot_RecordAppl_Option(tomMatch10Position1); { tom.engine.adt.tomname.types.TomNameList  tom_nameList=tom_get_slot_RecordAppl_NameList(tomMatch10Position1); { tom.engine.adt.tomslot.types.SlotList  tom_arguments=tom_get_slot_RecordAppl_Slots(tomMatch10Position1); { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tom_get_slot_RecordAppl_Constraints(tomMatch10Position1); if ( true ) {


        SlotList args = tom_arguments;
        SlotList newArgs = tom_empty_list_concSlot();
        while(!args.isEmptyconcSlot()) {
          Slot elt = args.getHeadconcSlot();
          TomTerm newElt = renameVariable(elt.getAppl(),multiplicityMap,antiList,treatConstraints);
          newArgs = tom_append_list_concSlot(newArgs,tom_cons_list_concSlot(tom_make_PairSlotAppl(elt.getSlotName(),newElt),tom_empty_list_concSlot()));
          args = args.getTailconcSlot();
        }        
        ConstraintList newConstraintList;
        if(treatConstraints) {
	  newConstraintList = renameVariableInConstraintList(tom_constraints,multiplicityMap);
        } else {
	  newConstraintList = tom_constraints;
        }
        renamedTerm = tom_make_RecordAppl(tom_optionList,tom_nameList,newArgs,newConstraintList);
        return renamedTerm;
       } } } } } } if ( ( tom_is_fun_sym_AntiTerm(tomMatch10Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch10Position1NameNumberTomTerm=tom_get_slot_AntiTerm_TomTerm(tomMatch10Position1); {boolean tomNameNumberboolMatch10Position1NameNumberTomTerm= false ; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch10Position1NameNumberTomTermNameNumberConstraints= null ; if (tom_is_fun_sym_Variable(tomMatch10Position1NameNumberTomTerm)) {tomNameNumberboolMatch10Position1NameNumberTomTerm= true ;tomMatch10Position1NameNumberTomTermNameNumberConstraints=tom_get_slot_Variable_Constraints(tomMatch10Position1NameNumberTomTerm); } else { if (tom_is_fun_sym_VariableStar(tomMatch10Position1NameNumberTomTerm)) {tomNameNumberboolMatch10Position1NameNumberTomTerm= true ;tomMatch10Position1NameNumberTomTermNameNumberConstraints=tom_get_slot_VariableStar_Constraints(tomMatch10Position1NameNumberTomTerm); } else { if (tom_is_fun_sym_RecordAppl(tomMatch10Position1NameNumberTomTerm)) {tomNameNumberboolMatch10Position1NameNumberTomTerm= true ;tomMatch10Position1NameNumberTomTermNameNumberConstraints=tom_get_slot_RecordAppl_Constraints(tomMatch10Position1NameNumberTomTerm); } } } if (tomNameNumberboolMatch10Position1NameNumberTomTerm) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraints=tomMatch10Position1NameNumberTomTermNameNumberConstraints; { tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch10Position1NameNumberTomTerm; if ( true ) {



	ConstraintList newConstraintList = renameVariableInConstraintList(tom_constraints,multiplicityMap);
	TomTerm newTerm = tom_t.setConstraints(newConstraintList);    		  
	antiList.add(newTerm);
	return tom_make_AntiTerm(newTerm);
       } } } } } } } } } }

    return renamedTerm;
  }

  private static ConstraintList renameVariableInConstraintList(ConstraintList constraintList, Map multiplicityMap) {
    ArrayList list = new ArrayList();
    while(!constraintList.isEmptyconcConstraint()) {
      Constraint cstElt = constraintList.getHeadconcConstraint();
      Constraint newCstElt = cstElt;
       if (tom_is_sort_Constraint(cstElt)) { { tom.engine.adt.tomconstraint.types.Constraint  tomMatch11Position1=(( tom.engine.adt.tomconstraint.types.Constraint )cstElt); if ( ( tom_is_fun_sym_AssignTo(tomMatch11Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch11Position1NameNumberVariable=tom_get_slot_AssignTo_Variable(tomMatch11Position1); if ( ( tom_is_fun_sym_Variable(tomMatch11Position1NameNumberVariable) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch11Position1NameNumberVariable; if ( true ) {

          // we should never find anti in constraints at this point in the compilation,
          // so it is safe to pass a null value
          newCstElt = tom_make_AssignTo(renameVariable(tom_var,multiplicityMap,null,true)); 
         } } } } } } }

      list.add(newCstElt);
      constraintList = constraintList.getTailconcConstraint();
    }
    return ASTFactory.makeConstraintList(list);
  }

  private static TomList linearizePattern(TomList subject) {
    Map multiplicityMap = new HashMap();
    // perform the renaming and generate equality checks
    TomList newList = tom_empty_list_concTomTerm();
    while(!subject.isEmptyconcTomTerm()) {
      TomTerm elt = subject.getHeadconcTomTerm();
      // contains the anti-terms found 
      // this is because we want to rename the variables of 
      // the antis only after we renamed the free variables
      ArrayList antiList = new ArrayList();      
      TomTerm newElt = renameVariable(elt,multiplicityMap,antiList,true);      

      newElt = handleAntiReplacement(newElt,multiplicityMap,antiList);
  
      newList = append(newElt,newList);
      subject = subject.getTailconcTomTerm();
    }
    return newList;
  }
  /**
   * Handles the replacement of the variables for the anti terms. They are a special case
   * because we should never constraint a variable X to be equal to another X that has more 
   * anti symbols above - the second could be never instantiated.
   * 
   *  For example: f(!x,x) should be transformed in f(!y,x), with the constraint y=x 
   *  and not f(!x,y), with y=x 
   * 
   */
  private static TomTerm handleAntiReplacement(TomTerm newElt, Map multiplicityMap, ArrayList antiList){
	  // an intermediate list for the antis 
      ArrayList newAntiList = new ArrayList();
	  // will collect all variables found fo this set
	  // of antis
      Map multiplicityMapIntermediate = new HashMap();
      multiplicityMapIntermediate.putAll(multiplicityMap);
      // just a copy of the current map	      
      Map multiplicityMapSnapShot = new HashMap();      
      while(true){ 
	      while (!antiList.isEmpty()){
	    	  TomTerm antiTerm = (TomTerm)antiList.remove(0);//antiList.get(0);	    	  
	    	  // all have to be called with the initial multiplicityMap
	    	  multiplicityMapSnapShot.clear();
	    	  multiplicityMapSnapShot.putAll(multiplicityMap);
	    	  // handle the renaming in this anti term
	    	  newElt = (TomTerm)tom_make_OnceTopDownId(tom_make_RenameAnti(antiTerm,multiplicityMapSnapShot,newAntiList)).apply(newElt);
	    	  // make sure we collect the changes to the map
	    	  multiplicityMapIntermediate.putAll(multiplicityMapSnapShot);
	    	  //antiList.remove(0);
	      }
	      // handle new anti terms found
	      antiList = newAntiList;
	      // the new anti terms should be searched for var replacement
	      // using the multiplicity map that was updated at the previous step
	      multiplicityMap.clear();
	      multiplicityMap.putAll(multiplicityMapIntermediate);
	      // if no more antis, stop
	      if (newAntiList.isEmpty()){
	    	  break;
	      }
      } // end while
      
      return newElt;
  }    
  
   private static class RenameAnti  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  tom.engine.adt.tomterm.types.TomTerm  antiTerm;  private  java.util.Map  multiplicityMap;  private  java.util.Collection  antiList;  public RenameAnti(  tom.engine.adt.tomterm.types.TomTerm  antiTerm ,   java.util.Map  multiplicityMap ,   java.util.Collection  antiList ) { super(tom_make_Identity() ); this.antiTerm=antiTerm; this.multiplicityMap=multiplicityMap; this.antiList=antiList; } public  tom.engine.adt.tomterm.types.TomTerm  getantiTerm() { return antiTerm;} public  java.util.Map  getmultiplicityMap() { return multiplicityMap;} public  java.util.Collection  getantiList() { return antiList;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch12Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); if ( ( tom_is_fun_sym_AntiTerm(tomMatch12Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_x=tom_get_slot_AntiTerm_TomTerm(tomMatch12Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_a=tomMatch12Position1; if ( true ) {


	// TODO - change the way comparison is made
	// because this can generate very subtle bugs - we can find 
	// the same term at a different positions
	if(tom_x== antiTerm) {
	  // at this point, all the constraints have been treated
	  // so we can set the treatConstraints to false
	  TomTerm newTerm = tom_make_AntiTerm(renameVariable(antiTerm,multiplicityMap,antiList,false));
	  // if we changed something, return the new term
	  // if not, stop anyway
	  if(tom_a!= newTerm) {
	    return newTerm;
	  } else {
	    throw new VisitFailure();
	  }
	}
       } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_RenameAnti( tom.engine.adt.tomterm.types.TomTerm  t0,  java.util.Map  t1,  java.util.Collection  t2) { return new RenameAnti(t0,t1,t2); }

// end strategy

  private TomTerm abstractPattern(TomTerm subject, ArrayList abstractedPattern, ArrayList introducedVariable)  {
    TomTerm abstractedTerm = subject;
     if (tom_is_sort_TomTerm(subject)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch13Position1=(( tom.engine.adt.tomterm.types.TomTerm )subject); if ( ( tom_is_fun_sym_RecordAppl(tomMatch13Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1NameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch13Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch13Position1NameNumberNameList) ||  false  ) ) { {int tomMatch13Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1NameNumberNameListList1=tomMatch13Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1NameNumberNameListSave1=tomMatch13Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch13Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch13Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch13Position1NameNumberNameListList1);tomMatch13Position1NameNumberNameListIndex1=tomMatch13Position1NameNumberNameListIndex1 + 1;tomMatch13Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch13Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch13Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch13Position1NameNumberNameListPosition1); { tom.engine.adt.tomslot.types.SlotList  tom_arguments=tom_get_slot_RecordAppl_Slots(tomMatch13Position1); if ( true ) {

        TomSymbol tomSymbol = symbolTable().getSymbolFromName(tom_tomName);

        SlotList newArgs = tom_empty_list_concSlot();
        if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
          SlotList args = tom_arguments;
          while(!args.isEmptyconcSlot()) {
            Slot elt = args.getHeadconcSlot();
            TomTerm newElt = elt.getAppl();
             if (tom_is_sort_TomTerm(newElt)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch14Position1=(( tom.engine.adt.tomterm.types.TomTerm )newElt); if ( ( tom_is_fun_sym_RecordAppl(tomMatch14Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch14Position1NameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch14Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch14Position1NameNumberNameList) ||  false  ) ) { {int tomMatch14Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch14Position1NameNumberNameListList1=tomMatch14Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch14Position1NameNumberNameListSave1=tomMatch14Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch14Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch14Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch14Position1NameNumberNameListList1);tomMatch14Position1NameNumberNameListIndex1=tomMatch14Position1NameNumberNameListIndex1 + 1;tomMatch14Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch14Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch14Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_tomName2=tom_get_slot_Name_String(tomMatch14Position1NameNumberNameListPosition1); { tom.engine.adt.tomterm.types.TomTerm  tom_appl=tomMatch14Position1; if ( true ) {

                /*
                 * we no longer abstract syntactic subterm
                 * they are compiled by the TomKernelCompiler
                 */

                //System.out.println("Abstract: " + appl);
                TomSymbol tomSymbol2 = symbolTable().getSymbolFromName(tom_tomName2);
                if(isListOperator(tomSymbol2) || isArrayOperator(tomSymbol2)) {
                  TomType type2 = tomSymbol2.getTypesToType().getCodomain();
                  abstractedPattern.add(tom_appl);

                  TomNumberList path = tom_empty_list_concTomNumber();
                  //path = append(`AbsVar(Number(introducedVariable.size())),path);
                  absVarNumber++;
                  path = tom_append_list_concTomNumber(path,tom_cons_list_concTomNumber(tom_make_AbsVar(absVarNumber),tom_empty_list_concTomNumber()));

                  TomTerm newVariable = tom_make_Variable(tom_empty_list_concOption(),tom_make_PositionName(path),type2,tom_empty_list_concConstraint());

                  //System.out.println("newVariable = " + newVariable);

                  introducedVariable.add(newVariable);
                  newElt = newVariable;
                }
               } } } } } }tomMatch14Position1NameNumberNameListList1=tomMatch14Position1NameNumberNameListSave1; } } } } } } } } }

            newArgs = tom_append_list_concSlot(newArgs,tom_cons_list_concSlot(tom_make_PairSlotAppl(elt.getSlotName(),newElt),tom_empty_list_concSlot()));
            args = args.getTailconcSlot();
          }
        } else {
          newArgs = mergeTomListWithSlotList(abstractPatternList(slotListToTomList(tom_arguments),abstractedPattern,introducedVariable),tom_arguments);
        }
        abstractedTerm = subject.setSlots(newArgs);
       } } } } } }tomMatch13Position1NameNumberNameListList1=tomMatch13Position1NameNumberNameListSave1; } } } } } } } } }
 // end match
    return abstractedTerm;
  }

  private TomList abstractPatternList(TomList subjectList, ArrayList abstractedPattern, ArrayList introducedVariable)  {
     if (tom_is_sort_TomList(subjectList)) { { tom.engine.adt.tomterm.types.TomList  tomMatch15Position1=(( tom.engine.adt.tomterm.types.TomList )subjectList); if ( ( tom_is_fun_sym_concTomTerm(tomMatch15Position1) ||  false  ) ) { {int tomMatch15Position1Index1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch15Position1List1=tomMatch15Position1; if (tom_is_empty_concTomTerm_TomList(tomMatch15Position1List1)) { if ( true ) {
 return subjectList;  } } } } } if ( ( tom_is_fun_sym_concTomTerm(tomMatch15Position1) ||  false  ) ) { {int tomMatch15Position1Index1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch15Position1List1=tomMatch15Position1; { tom.engine.adt.tomterm.types.TomList  tomMatch15Position1Save1=tomMatch15Position1List1; { if (!(tom_is_empty_concTomTerm_TomList(tomMatch15Position1List1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_get_head_concTomTerm_TomList(tomMatch15Position1List1);tomMatch15Position1Index1=tomMatch15Position1Index1 + 1;tomMatch15Position1List1=tom_get_tail_concTomTerm_TomList(tomMatch15Position1List1); { tom.engine.adt.tomterm.types.TomList  tom_tail=tomMatch15Position1List1; if ( true ) {

        TomTerm newElt = abstractPattern(tom_head,abstractedPattern,introducedVariable);
        TomList tl = abstractPatternList(tom_tail,abstractedPattern,introducedVariable);
        return tom_cons_list_concTomTerm(newElt,tom_append_list_concTomTerm(tl,tom_empty_list_concTomTerm()));
       } } } }tomMatch15Position1List1=tomMatch15Position1Save1; } } } } } } }

    throw new TomRuntimeException("abstractPatternList: " + subjectList);
  }


  /***********************************/
  /* functions related to the 'when' */
  /***********************************/


  /*
   * attach the when contraint to the right variable
   */
  private TomList attachConstraint(TomList subjectList, TomTerm constraint) {
    HashSet patternVariable = new HashSet();
    HashSet constraintVariable = new HashSet();

    collectVariable(patternVariable,subjectList);
    collectVariable(constraintVariable,constraint);
    Set variableSet = intersection(patternVariable,constraintVariable);

    //System.out.println("attach constraint "+subjectList+" "+patternVariable+" "+constraint);
    TomList newSubjectList = null;
    newSubjectList = (TomList) tom_make_attachConstraint(variableSet,constraint,this).apply(subjectList);
    return newSubjectList;
  }

  /*
   * build a set with all the variables in the intersection of two sets
   * used by the when
   */
  private static Set intersection(Set patternVariable, Set constraintVariable) {
    Set res = new HashSet();
    for(Iterator it1 = patternVariable.iterator(); it1.hasNext() ; ) {
      TomTerm patternTerm = (TomTerm) it1.next();
itBlock: {
           for(Iterator it2 = constraintVariable.iterator(); it2.hasNext() ; ) {
             TomTerm constraintTerm = (TomTerm) it2.next();
              if (tom_is_sort_TomTerm(patternTerm)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch16Position1=(( tom.engine.adt.tomterm.types.TomTerm )patternTerm); if (tom_is_sort_TomTerm(constraintTerm)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch16Position2=(( tom.engine.adt.tomterm.types.TomTerm )constraintTerm); if ( ( tom_is_fun_sym_Variable(tomMatch16Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_get_slot_Variable_AstName(tomMatch16Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch16Position1; if ( ( tom_is_fun_sym_Variable(tomMatch16Position2) ||  false  ) ) { if (tom_equal_term_TomName(tom_name, tom_get_slot_Variable_AstName(tomMatch16Position2))) { if ( true ) {

                 res.add(tom_var);
                 //break itBlock;
                } } } } } } if ( ( tom_is_fun_sym_VariableStar(tomMatch16Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch16Position1; if ( ( tom_is_fun_sym_VariableStar(tomMatch16Position2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_name=tom_get_slot_VariableStar_AstName(tomMatch16Position2); if ( true ) {

                 res.add(tom_var);
                 //break itBlock;
                } } } } } } } } }

           }
         }
    }
    return res;
  }

  /*
   * find the variable on which we should attach the constraint
   * used by the when
   */

  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_attachConstraint( java.util.Set  variableSet,  tom.engine.adt.tomterm.types.TomTerm  constraint,  TomCompiler  compiler) { return tom_make_ChoiceTopDown(tom_make_attachConstraint_once(variableSet,constraint,compiler))
 ; } private static class attachConstraint_once  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  java.util.Set  variableSet;  private  tom.engine.adt.tomterm.types.TomTerm  constraint;  private  TomCompiler  compiler;  public attachConstraint_once(  java.util.Set  variableSet ,   tom.engine.adt.tomterm.types.TomTerm  constraint ,   TomCompiler  compiler ) { super(tom_make_Identity() ); this.variableSet=variableSet; this.constraint=constraint; this.compiler=compiler; } public  java.util.Set  getvariableSet() { return variableSet;} public  tom.engine.adt.tomterm.types.TomTerm  getconstraint() { return constraint;} public  TomCompiler  getcompiler() { return compiler;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch17Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); {boolean tomNameNumberboolMatch17Position1= false ; { tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch17Position1NameNumberConstraints= null ; if (tom_is_fun_sym_Variable(tomMatch17Position1)) {tomNameNumberboolMatch17Position1= true ;tomMatch17Position1NameNumberConstraints=tom_get_slot_Variable_Constraints(tomMatch17Position1); } else { if (tom_is_fun_sym_VariableStar(tomMatch17Position1)) {tomNameNumberboolMatch17Position1= true ;tomMatch17Position1NameNumberConstraints=tom_get_slot_VariableStar_Constraints(tomMatch17Position1); } } if (tomNameNumberboolMatch17Position1) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraintList=tomMatch17Position1NameNumberConstraints; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch17Position1; if ( true ) {






	if(variableSet.remove(tom_var) && variableSet.isEmpty()) {
	  Constraint c = tom_make_Ensure((TomTerm) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_BuildReducedTerm(constraint,tom_make_EmptyType())));
	  ConstraintList newConstraintList = tom_append_list_concConstraint(tom_constraintList,tom_cons_list_concConstraint(c,tom_empty_list_concConstraint()));
	  return tom_var.setConstraints(newConstraintList);
	}
       } } } } } } if ( ( tom_is_fun_sym_RecordAppl(tomMatch17Position1) ||  false  ) ) { { tom.engine.adt.tomconstraint.types.ConstraintList  tom_constraintList=tom_get_slot_RecordAppl_Constraints(tomMatch17Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_appl=tomMatch17Position1; if ( true ) {


	if(variableSet.isEmpty()) {
	  Constraint c = tom_make_Ensure((TomTerm) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_BuildReducedTerm(constraint,tom_make_EmptyType())));
	  ConstraintList newConstraintList = tom_append_list_concConstraint(tom_constraintList,tom_cons_list_concConstraint(c,tom_empty_list_concConstraint()));
	  return tom_appl.setConstraints(newConstraintList);
	}
       } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_attachConstraint_once( java.util.Set  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  TomCompiler  t2) { return new attachConstraint_once(t0,t1,t2); }



  /*
   * add a prefix (tom_) to back-quoted variables which comes from the lhs
   */
   private static class findRenameVariable  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  java.util.Set  context;  public findRenameVariable(  java.util.Set  context ) { super(tom_make_Identity() ); this.context=context; } public  java.util.Set  getcontext() { return context;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm(  tom.engine.adt.tomterm.types.TomTerm  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_TomTerm(tom__arg)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch18Position1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg); {boolean tomNameNumberboolMatch18Position1= false ; { tom.engine.adt.tomname.types.TomName  tomMatch18Position1NameNumberAstName= null ; if (tom_is_fun_sym_Variable(tomMatch18Position1)) {tomNameNumberboolMatch18Position1= true ;tomMatch18Position1NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch18Position1); } else { if (tom_is_fun_sym_VariableStar(tomMatch18Position1)) {tomNameNumberboolMatch18Position1= true ;tomMatch18Position1NameNumberAstName=tom_get_slot_VariableStar_AstName(tomMatch18Position1); } } if (tomNameNumberboolMatch18Position1) { if ( ( tom_is_fun_sym_Name(tomMatch18Position1NameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch18Position1NameNumberAstName); { tom.engine.adt.tomname.types.TomName  tom_astName=tomMatch18Position1NameNumberAstName; { tom.engine.adt.tomterm.types.TomTerm  tom_var=tomMatch18Position1; if ( true ) {


        if(context.contains(tom_astName)) {
          return tom_var.setAstName(tom_make_Name(ASTFactory.makeTomVariableName(tom_name)));
        }
       } } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_Instruction(tom__arg)) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch19Position1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if ( ( tom_is_fun_sym_CompiledPattern(tomMatch19Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_patternList=tom_get_slot_CompiledPattern_PatternList(tomMatch19Position1); { tom.engine.adt.tominstruction.types.Instruction  tom_instruction=tom_get_slot_CompiledPattern_AutomataInst(tomMatch19Position1); if ( true ) {




        Map map = TomBase.collectMultiplicity(tom_patternList);
        Set newContext = new HashSet(map.keySet());
        newContext.addAll(context);
        //System.out.println("newContext = " + newContext);
        return (Instruction)tom_make_TopDown(tom_make_findRenameVariable(newContext)).visit(tom_instruction);
       } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_findRenameVariable( java.util.Set  t0) { return new findRenameVariable(t0); }



}
