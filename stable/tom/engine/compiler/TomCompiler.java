/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.compiler;

import java.util.*;
import java.util.logging.Level;

import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.tools.ASTFactory;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.Tools;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import tom.library.strategy.mutraveler.MuTraveler;
import tom.library.strategy.mutraveler.Identity;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

/**
 * The TomCompiler plugin.
 */
public class TomCompiler extends TomGenericPlugin {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Expression tom_make_EqualTerm( tom.engine.adt.tomsignature.types.TomType t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_EqualTerm(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.Expression tom_make_TrueTL() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_TrueTL(); }private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_TypedAction( tom.engine.adt.tomsignature.types.Instruction t0,  tom.engine.adt.tomsignature.types.Pattern t1,  tom.engine.adt.tomsignature.types.PatternList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_TypedAction(t0, t1, t2); }private static boolean tom_is_fun_sym_RawAction( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isRawAction() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_RawAction( tom.engine.adt.tomsignature.types.Instruction t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_RawAction(t0); }private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_RawAction_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_TypedEqualityCondition( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isTypedEqualityCondition() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TypedEqualityCondition_tomType( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TypedEqualityCondition_lhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getLhs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TypedEqualityCondition_rhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getRhs() ;}private static boolean tom_is_fun_sym_MatchingCondition( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isMatchingCondition() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MatchingCondition_lhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getLhs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MatchingCondition_rhs( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getRhs() ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_CompiledPattern_patternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPatternList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledPattern_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static boolean tom_is_fun_sym_Match( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isMatch() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_Match( tom.engine.adt.tomsignature.types.TomTerm t0,  tom.engine.adt.tomsignature.types.PatternInstructionList t1,  tom.engine.adt.tomsignature.types.OptionList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Match(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Match_subjectList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slot_Match_astPatternInstructionList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Match_option( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_AbstractBlock( tom.engine.adt.tomsignature.types.InstructionList t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_AbstractBlock(t0); }private static  tom.engine.adt.tomsignature.types.Instruction tom_make_Nop() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Nop(); }private static  tom.engine.adt.tomsignature.types.Instruction tom_make_Return( tom.engine.adt.tomsignature.types.TomTerm t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Return(t0); }private static  tom.engine.adt.tomsignature.types.Instruction tom_make_If( tom.engine.adt.tomsignature.types.Expression t0,  tom.engine.adt.tomsignature.types.Instruction t1,  tom.engine.adt.tomsignature.types.Instruction t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_If(t0, t1, t2); }private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tomsignature.types.InstructionList t) {  return (t!= null) && t.isSortInstructionList() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_empty_list_concInstruction() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(); }private static  tom.engine.adt.tomsignature.types.InstructionList tom_cons_list_concInstruction( tom.engine.adt.tomsignature.types.Instruction e,  tom.engine.adt.tomsignature.types.InstructionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(e,l); }private static  tom.engine.adt.tomsignature.types.Instruction tom_get_head_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_append_list_concInstruction( tom.engine.adt.tomsignature.types.InstructionList l1,  tom.engine.adt.tomsignature.types.InstructionList l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slice_concInstruction( tom.engine.adt.tomsignature.types.InstructionList begin,  tom.engine.adt.tomsignature.types.InstructionList end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tomsignature.types.InstructionList)tom_get_slice_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_emptyInstructionList( tom.engine.adt.tomsignature.types.InstructionList t) {  return  (t!= null) && t.isEmpty() ;}private static boolean tom_is_fun_sym_manyInstructionList( tom.engine.adt.tomsignature.types.InstructionList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_manyInstructionList_head( tom.engine.adt.tomsignature.types.InstructionList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_manyInstructionList_tail( tom.engine.adt.tomsignature.types.InstructionList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_manyTomRuleList( tom.engine.adt.tomsignature.types.TomRuleList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.TomRule tom_get_slot_manyTomRuleList_head( tom.engine.adt.tomsignature.types.TomRuleList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomRuleList tom_get_slot_manyTomRuleList_tail( tom.engine.adt.tomsignature.types.TomRuleList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_VisitTerm( tom.engine.adt.tomsignature.types.TomVisit t) {  return  (t!= null) && t.isVisitTerm() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VisitTerm_vNode( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getVNode() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slot_VisitTerm_astPatternInstructionList( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VisitTerm_option( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_RewriteRule( tom.engine.adt.tomsignature.types.TomRule t) {  return  (t!= null) && t.isRewriteRule() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_lhs( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getLhs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_rhs( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getRhs() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_RewriteRule_condList( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getCondList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RewriteRule_option( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getOption() ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomNumber( tom.engine.adt.tomsignature.types.TomNumberList t) {  return (t!= null) && t.isSortTomNumberList() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_empty_list_concTomNumber() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(); }private static  tom.engine.adt.tomsignature.types.TomNumberList tom_cons_list_concTomNumber( tom.engine.adt.tomsignature.types.TomNumber e,  tom.engine.adt.tomsignature.types.TomNumberList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(e,l); }private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_head_concTomNumber_TomNumberList( tom.engine.adt.tomsignature.types.TomNumberList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_tail_concTomNumber_TomNumberList( tom.engine.adt.tomsignature.types.TomNumberList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomNumber_TomNumberList( tom.engine.adt.tomsignature.types.TomNumberList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_append_list_concTomNumber( tom.engine.adt.tomsignature.types.TomNumberList l1,  tom.engine.adt.tomsignature.types.TomNumberList l2) {    if(tom_is_empty_concTomNumber_TomNumberList(l1)) {     return l2;    } else if(tom_is_empty_concTomNumber_TomNumberList(l2)) {     return l1;    } else if(tom_is_empty_concTomNumber_TomNumberList(( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_tail_concTomNumber_TomNumberList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumber)tom_get_head_concTomNumber_TomNumberList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumber)tom_get_head_concTomNumber_TomNumberList(l1),tom_append_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_tail_concTomNumber_TomNumberList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_slice_concTomNumber( tom.engine.adt.tomsignature.types.TomNumberList begin,  tom.engine.adt.tomsignature.types.TomNumberList end) {    if(tom_terms_equal_TomNumberList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_empty_list_concTomNumber();    } else {      return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumber)tom_get_head_concTomNumber_TomNumberList(begin),( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_slice_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_tail_concTomNumber_TomNumberList(begin),end));    }   }  private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_make_RuleVar() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_RuleVar(); }private static  tom.engine.adt.tomsignature.types.TomNumber tom_make_RenamedVar( tom.engine.adt.tomsignature.types.TomName t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_RenamedVar(t0); }private static  tom.engine.adt.tomsignature.types.TomNumber tom_make_AbsVar( tom.engine.adt.tomsignature.types.TomNumber t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_AbsVar(t0); }private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomName tom_make_PositionName( tom.engine.adt.tomsignature.types.TomNumberList t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_PositionName(t0); }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_make_Name( String  t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_Name(t0); }private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_make_emptySlotList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Slot tom_make_PairSlotAppl( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_PairSlotAppl(t0, t1); }private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList t) {  return (t!= null) && t.isSortConstraintList() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_empty_list_concConstraint() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(); }private static  tom.engine.adt.tomsignature.types.ConstraintList tom_cons_list_concConstraint( tom.engine.adt.tomsignature.types.Constraint e,  tom.engine.adt.tomsignature.types.ConstraintList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(e,l); }private static  tom.engine.adt.tomsignature.types.Constraint tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getTail() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_append_list_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList l1,  tom.engine.adt.tomsignature.types.ConstraintList l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slice_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList begin,  tom.engine.adt.tomsignature.types.ConstraintList end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_slice_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_AssignTo( tom.engine.adt.tomsignature.types.Constraint t) {  return  (t!= null) && t.isAssignTo() ;}private static  tom.engine.adt.tomsignature.types.Constraint tom_make_AssignTo( tom.engine.adt.tomsignature.types.TomTerm t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraint_AssignTo(t0); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_AssignTo_variable( tom.engine.adt.tomsignature.types.Constraint t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Constraint tom_make_Equal( tom.engine.adt.tomsignature.types.TomTerm t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraint_Equal(t0); }private static  tom.engine.adt.tomsignature.types.Constraint tom_make_Ensure( tom.engine.adt.tomsignature.types.TomTerm t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraint_Ensure(t0); }private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomsignature.types.OptionList t) {  return (t!= null) && t.isSortOptionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_empty_list_concOption() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(); }private static  tom.engine.adt.tomsignature.types.OptionList tom_cons_list_concOption( tom.engine.adt.tomsignature.types.Option e,  tom.engine.adt.tomsignature.types.OptionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l); }private static  tom.engine.adt.tomsignature.types.Option tom_get_head_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_tail_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_append_list_concOption( tom.engine.adt.tomsignature.types.OptionList l1,  tom.engine.adt.tomsignature.types.OptionList l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slice_concOption( tom.engine.adt.tomsignature.types.OptionList begin,  tom.engine.adt.tomsignature.types.OptionList end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomsignature.types.OptionList)tom_get_slice_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Option tom_make_GeneratedMatch() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_GeneratedMatch(); }private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_EmptyType() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_EmptyType(); }private static boolean tom_is_fun_sym_ASTTomType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isASTTomType() ;}private static  String  tom_get_slot_ASTTomType_string( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getString() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_TomTypeAlone( String  t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_TomTypeAlone(t0); }private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tomType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tlType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTlType() ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomsignature.types.TomList t) {  return (t!= null) && t.isSortTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_empty_list_concTomTerm() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static  tom.engine.adt.tomsignature.types.TomList tom_cons_list_concTomTerm( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_head_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_append_list_concTomTerm( tom.engine.adt.tomsignature.types.TomList l1,  tom.engine.adt.tomsignature.types.TomList l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomList tom_get_slice_concTomTerm( tom.engine.adt.tomsignature.types.TomList begin,  tom.engine.adt.tomsignature.types.TomList end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomList)tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomsignature.types.TomList)tom_get_slice_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_is_fun_sym_emptyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isEmpty() ;}private static boolean tom_is_fun_sym_manyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_make_manyTomList( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_manyTomList_head( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_manyTomList_tail( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.PatternList tom_empty_list_concPattern() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternList(); }private static  tom.engine.adt.tomsignature.types.PatternList tom_cons_list_concPattern( tom.engine.adt.tomsignature.types.Pattern e,  tom.engine.adt.tomsignature.types.PatternList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternList(e,l); }private static  tom.engine.adt.tomsignature.types.Pattern tom_get_head_concPattern_PatternList( tom.engine.adt.tomsignature.types.PatternList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.PatternList tom_get_tail_concPattern_PatternList( tom.engine.adt.tomsignature.types.PatternList l) {  return l.getTail() ;}private static boolean tom_is_empty_concPattern_PatternList( tom.engine.adt.tomsignature.types.PatternList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.PatternList tom_append_list_concPattern( tom.engine.adt.tomsignature.types.PatternList l1,  tom.engine.adt.tomsignature.types.PatternList l2) {    if(tom_is_empty_concPattern_PatternList(l1)) {     return l2;    } else if(tom_is_empty_concPattern_PatternList(l2)) {     return l1;    } else if(tom_is_empty_concPattern_PatternList(( tom.engine.adt.tomsignature.types.PatternList)tom_get_tail_concPattern_PatternList(l1))) {     return ( tom.engine.adt.tomsignature.types.PatternList)tom_cons_list_concPattern(( tom.engine.adt.tomsignature.types.Pattern)tom_get_head_concPattern_PatternList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.PatternList)tom_cons_list_concPattern(( tom.engine.adt.tomsignature.types.Pattern)tom_get_head_concPattern_PatternList(l1),tom_append_list_concPattern(( tom.engine.adt.tomsignature.types.PatternList)tom_get_tail_concPattern_PatternList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.PatternList tom_get_slice_concPattern( tom.engine.adt.tomsignature.types.PatternList begin,  tom.engine.adt.tomsignature.types.PatternList end) {    if(tom_terms_equal_PatternList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.PatternList)tom_empty_list_concPattern();    } else {      return ( tom.engine.adt.tomsignature.types.PatternList)tom_cons_list_concPattern(( tom.engine.adt.tomsignature.types.Pattern)tom_get_head_concPattern_PatternList(begin),( tom.engine.adt.tomsignature.types.PatternList)tom_get_slice_concPattern(( tom.engine.adt.tomsignature.types.PatternList)tom_get_tail_concPattern_PatternList(begin),end));    }   }  private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstructionList t) {  return (t!= null) && t.isSortPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_empty_list_concPatternInstruction() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList(); }private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_cons_list_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstruction e,  tom.engine.adt.tomsignature.types.PatternInstructionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList(e,l); }private static  tom.engine.adt.tomsignature.types.PatternInstruction tom_get_head_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomsignature.types.PatternInstructionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_tail_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomsignature.types.PatternInstructionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomsignature.types.PatternInstructionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_append_list_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstructionList l1,  tom.engine.adt.tomsignature.types.PatternInstructionList l2) {    if(tom_is_empty_concPatternInstruction_PatternInstructionList(l1)) {     return l2;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(l2)) {     return l1;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_tail_concPatternInstruction_PatternInstructionList(l1))) {     return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_cons_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstruction)tom_get_head_concPatternInstruction_PatternInstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_cons_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstruction)tom_get_head_concPatternInstruction_PatternInstructionList(l1),tom_append_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_tail_concPatternInstruction_PatternInstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slice_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstructionList begin,  tom.engine.adt.tomsignature.types.PatternInstructionList end) {    if(tom_terms_equal_PatternInstructionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_empty_list_concPatternInstruction();    } else {      return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_cons_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstruction)tom_get_head_concPatternInstruction_PatternInstructionList(begin),( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_slice_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_tail_concPatternInstruction_PatternInstructionList(begin),end));    }   }  private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomsignature.types.Pattern t) {  return  (t!= null) && t.isPattern() ;}private static  tom.engine.adt.tomsignature.types.Pattern tom_make_Pattern( tom.engine.adt.tomsignature.types.TomList t0,  tom.engine.adt.tomsignature.types.TomList t1,  tom.engine.adt.tomsignature.types.TomList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePattern_Pattern(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_subjectList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_tomList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_guards( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getGuards() ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PatternInstruction( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  (t!= null) && t.isPatternInstruction() ;}private static  tom.engine.adt.tomsignature.types.PatternInstruction tom_make_PatternInstruction( tom.engine.adt.tomsignature.types.Pattern t0,  tom.engine.adt.tomsignature.types.Instruction t1,  tom.engine.adt.tomsignature.types.OptionList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstruction_PatternInstruction(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.Pattern tom_get_slot_PatternInstruction_pattern( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  t.getPattern() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_PatternInstruction_action( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  t.getAction() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_PatternInstruction_option( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildTerm( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomList t1,  String  t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildTerm(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildConstant( tom.engine.adt.tomsignature.types.TomName t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConstant(t0); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_FunctionCall( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomList t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_FunctionCall(t0, t1); }private static boolean tom_is_fun_sym_BuildReducedTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildReducedTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildReducedTerm( tom.engine.adt.tomsignature.types.TomTerm t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildReducedTerm(t0); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildReducedTerm_kid1( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getKid1() ;}private static boolean tom_is_fun_sym_Term( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Term_tomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_SubjectList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_SubjectList( tom.engine.adt.tomsignature.types.TomList t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_SubjectList(t0); }private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_SubjectList_tomList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomList() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_Variable( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomName t1,  tom.engine.adt.tomsignature.types.TomType t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Variable(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_RecordAppl( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.NameList t1,  tom.engine.adt.tomsignature.types.SlotList t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_RecordAppl(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concDeclaration( tom.engine.adt.tomsignature.types.DeclarationList t) {  return (t!= null) && t.isSortDeclarationList() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_empty_list_concDeclaration() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList(); }private static  tom.engine.adt.tomsignature.types.DeclarationList tom_cons_list_concDeclaration( tom.engine.adt.tomsignature.types.Declaration e,  tom.engine.adt.tomsignature.types.DeclarationList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList(e,l); }private static  tom.engine.adt.tomsignature.types.Declaration tom_get_head_concDeclaration_DeclarationList( tom.engine.adt.tomsignature.types.DeclarationList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_get_tail_concDeclaration_DeclarationList( tom.engine.adt.tomsignature.types.DeclarationList l) {  return l.getTail() ;}private static boolean tom_is_empty_concDeclaration_DeclarationList( tom.engine.adt.tomsignature.types.DeclarationList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_append_list_concDeclaration( tom.engine.adt.tomsignature.types.DeclarationList l1,  tom.engine.adt.tomsignature.types.DeclarationList l2) {    if(tom_is_empty_concDeclaration_DeclarationList(l1)) {     return l2;    } else if(tom_is_empty_concDeclaration_DeclarationList(l2)) {     return l1;    } else if(tom_is_empty_concDeclaration_DeclarationList(( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_tail_concDeclaration_DeclarationList(l1))) {     return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_cons_list_concDeclaration(( tom.engine.adt.tomsignature.types.Declaration)tom_get_head_concDeclaration_DeclarationList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_cons_list_concDeclaration(( tom.engine.adt.tomsignature.types.Declaration)tom_get_head_concDeclaration_DeclarationList(l1),tom_append_list_concDeclaration(( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_tail_concDeclaration_DeclarationList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.DeclarationList tom_get_slice_concDeclaration( tom.engine.adt.tomsignature.types.DeclarationList begin,  tom.engine.adt.tomsignature.types.DeclarationList end) {    if(tom_terms_equal_DeclarationList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_empty_list_concDeclaration();    } else {      return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_cons_list_concDeclaration(( tom.engine.adt.tomsignature.types.Declaration)tom_get_head_concDeclaration_DeclarationList(begin),( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_slice_concDeclaration(( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_tail_concDeclaration_DeclarationList(begin),end));    }   }  private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_make_AbstractDecl( tom.engine.adt.tomsignature.types.DeclarationList t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_AbstractDecl(t0); }private static  tom.engine.adt.tomsignature.types.Declaration tom_make_Class( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomForwardType t1,  tom.engine.adt.tomsignature.types.TomTerm t2,  tom.engine.adt.tomsignature.types.Declaration t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_Class(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.Declaration tom_make_MethodDef( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomList t1,  tom.engine.adt.tomsignature.types.TomType t2,  tom.engine.adt.tomsignature.types.TomType t3,  tom.engine.adt.tomsignature.types.Instruction t4) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_MethodDef(t0, t1, t2, t3, t4); }private static  tom.engine.adt.tomsignature.types.Declaration tom_make_FunctionDef( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomList t1,  tom.engine.adt.tomsignature.types.TomType t2,  tom.engine.adt.tomsignature.types.TomType t3,  tom.engine.adt.tomsignature.types.Instruction t4) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_FunctionDef(t0, t1, t2, t3, t4); }private static boolean tom_is_fun_sym_RuleSet( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isRuleSet() ;}private static  tom.engine.adt.tomsignature.types.TomRuleList tom_get_slot_RuleSet_ruleList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getRuleList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RuleSet_option( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOption() ;}private static boolean tom_is_fun_sym_Strategy( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isStrategy() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Strategy_sName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getSName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Strategy_extendsTerm( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getExtendsTerm() ;}private static  tom.engine.adt.tomsignature.types.TomVisitList tom_get_slot_Strategy_visitList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVisitList() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_Strategy_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_ChoiceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.ChoiceId(first,then) ; }  /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }  /*  * strategies with Id considered as failure  */       private static boolean tom_terms_equal_Set(Object l1, Object l2) {  return 




 l1.equals(l2)  ;}







  /** some output suffixes */
  public static final String COMPILED_SUFFIX = ".tfix.compiled";

  /** the declared options string*/
  public static final String DECLARED_OPTIONS = "<options><boolean name='compile' altName='' description='Compiler (activated by default)' value='true'/></options>";

  /** unicity var counter*/
  private static int absVarNumber;

  /** Constructor*/
  public TomCompiler() {
    super("TomCompiler");
  }

  public void run() {
    TomKernelCompiler tomKernelCompiler = new TomKernelCompiler(getStreamManager().getSymbolTable());
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");
    try {
      // reinit absVarNumber to generate reproducible output
      absVarNumber = 0;
      TomTerm preCompiledTerm = (TomTerm)(MuTraveler.init(tom_make_preProcessing(this)).visit(((TomTerm)getWorkingTerm())));
      //System.out.println("preCompiledTerm = \n" + preCompiledTerm);
      TomTerm compiledTerm = tomKernelCompiler.compileMatching(preCompiledTerm);
      Set hashSet = new HashSet();
      TomTerm renamedTerm = (TomTerm)MuTraveler.init(tom_make_TopDown(tom_make_findRenameVariable(hashSet))).visit(compiledTerm);
      //TomTerm renamedTerm = compiledTerm;
      // verbose
      getLogger().log( Level.INFO, TomMessage.tomCompilationPhase.getMessage(),
          new Integer((int)(System.currentTimeMillis()-startChrono)) );
      setWorkingTerm(renamedTerm);
      if(intermediate) {
        Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix() + COMPILED_SUFFIX, (TomTerm)getWorkingTerm());
      }
    } catch (Exception e) {
      getLogger().log( Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
          new Object[]{getStreamManager().getInputFileName(), "TomCompiler", e.getMessage()} );
      e.printStackTrace();
    }
  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomCompiler.DECLARED_OPTIONS);
  }

  private static OptionList option() {
    return ASTFactory.makeOption();
  }

  /*
   * preProcessing:
   * replaces BuildReducedTerm by BuildList, BuildArray or BuildTerm
   *
   * transforms RuleSet into Function + Match + BuildReducedTerm
   * abstract list-matching patterns
   * rename non-linear patterns
   */

  private static  jjtraveler.reflective.VisitableVisitor  tom_make_preProcessing( TomCompiler  compiler) { return (tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_preProcessing_once(compiler),tom_make_All(tom_make_MuVar("x")))))




     ; } private static class preProcessing_once  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomCompiler  compiler;  public preProcessing_once(  TomCompiler  compiler ) { super(tom_make_Identity() ); this.compiler=compiler; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); if (tom_is_fun_sym_BuildReducedTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_kid1=tom_get_slot_BuildReducedTerm_kid1(tom_match1_1); if (tom_is_fun_sym_VariableStar(tom_match1_1_kid1) || tom_is_fun_sym_Variable(tom_match1_1_kid1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match1_1_kid1; if ( true ) {






        return tom_var;
       } } } } } if (tom_is_fun_sym_BuildReducedTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_kid1=tom_get_slot_BuildReducedTerm_kid1(tom_match1_1); if (tom_is_fun_sym_RecordAppl(tom_match1_1_kid1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_kid1_option=tom_get_slot_RecordAppl_option(tom_match1_1_kid1); { tom.engine.adt.tomsignature.types.NameList tom_match1_1_kid1_nameList=tom_get_slot_RecordAppl_nameList(tom_match1_1_kid1); { tom.engine.adt.tomsignature.types.SlotList tom_match1_1_kid1_slots=tom_get_slot_RecordAppl_slots(tom_match1_1_kid1); { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match1_1_kid1_option; if (tom_is_fun_sym_concTomName(tom_match1_1_kid1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match1_1_kid1_nameList_list1=tom_match1_1_kid1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match1_1_kid1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_kid1_nameList_1=tom_get_head_concTomName_NameList(tom_match1_1_kid1_nameList_list1);tom_match1_1_kid1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match1_1_kid1_nameList_list1); if (tom_is_fun_sym_Name(tom_match1_1_kid1_nameList_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match1_1_kid1_nameList_1; { String  tom_match1_1_kid1_nameList_1_string=tom_get_slot_Name_string(tom_match1_1_kid1_nameList_1); { String  tom_tomName=tom_match1_1_kid1_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match1_1_kid1_nameList_list1)) { { tom.engine.adt.tomsignature.types.SlotList tom_termArgs=tom_match1_1_kid1_slots; if ( true ) {


        TomSymbol tomSymbol = compiler.symbolTable().getSymbolFromName(tom_tomName);
        SlotList newTermArgs = (SlotList) (MuTraveler.init(tom_make_preProcessing_makeTerm(compiler)).visit(tom_termArgs));
        TomList tomListArgs = slotListToTomList(newTermArgs);

        if(hasConstant(tom_optionList)) {
          return tom_make_BuildConstant(tom_name);
        } else if(tomSymbol != null) {
          if(isListOperator(tomSymbol)) {
            return ASTFactory.buildList(tom_name,tomListArgs);
          } else if(isArrayOperator(tomSymbol)) {
            return ASTFactory.buildArray(tom_name,tomListArgs);
          } else if(isDefinedSymbol(tomSymbol)) {
            return tom_make_FunctionCall(tom_name,tomListArgs);
          } else {
            String moduleName = getModuleName(tom_optionList);
            if(moduleName==null) {
              moduleName = TomBase.DEFAULT_MODULE_NAME;
            }
            return tom_make_BuildTerm(tom_name,tomListArgs,moduleName);
          }
        } else {
          return tom_make_FunctionCall(tom_name,tomListArgs);
        }

       } } } } } } } } } } } } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match2_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_Match(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_subjectList=tom_get_slot_Match_subjectList(tom_match2_1); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match2_1_astPatternInstructionList=tom_get_slot_Match_astPatternInstructionList(tom_match2_1); { tom.engine.adt.tomsignature.types.OptionList tom_match2_1_option=tom_get_slot_Match_option(tom_match2_1); if (tom_is_fun_sym_SubjectList(tom_match2_1_subjectList) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match2_1_subjectList_tomList=tom_get_slot_SubjectList_tomList(tom_match2_1_subjectList); { tom.engine.adt.tomsignature.types.TomList tom_l1=tom_match2_1_subjectList_tomList; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_patternInstructionList=tom_match2_1_astPatternInstructionList; { tom.engine.adt.tomsignature.types.OptionList tom_matchOptionList=tom_match2_1_option; if ( true ) {





        Option orgTrack = findOriginTracking(tom_matchOptionList);
        PatternInstructionList newPatternInstructionList = tom_empty_list_concPatternInstruction();
        PatternList negativePattern = tom_empty_list_concPattern();
        while(!tom_patternInstructionList.isEmpty()) {
          /*
           * the call to preProcessing performs the recursive expansion
           * of nested match constructs
           */
          PatternInstruction newPatternInstruction = (PatternInstruction) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_patternInstructionList.getHead());

matchBlock: {
               if(newPatternInstruction instanceof  tom.engine.adt.tomsignature.types.PatternInstruction) { { tom.engine.adt.tomsignature.types.PatternInstruction tom_match3_1=(( tom.engine.adt.tomsignature.types.PatternInstruction)newPatternInstruction); if (tom_is_fun_sym_PatternInstruction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Pattern tom_match3_1_pattern=tom_get_slot_PatternInstruction_pattern(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_action=tom_get_slot_PatternInstruction_action(tom_match3_1); { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option=tom_get_slot_PatternInstruction_option(tom_match3_1); if (tom_is_fun_sym_Pattern(tom_match3_1_pattern) ||  false ) { { tom.engine.adt.tomsignature.types.Pattern tom_pattern=tom_match3_1_pattern; { tom.engine.adt.tomsignature.types.TomList tom_match3_1_pattern_subjectList=tom_get_slot_Pattern_subjectList(tom_match3_1_pattern); { tom.engine.adt.tomsignature.types.TomList tom_match3_1_pattern_tomList=tom_get_slot_Pattern_tomList(tom_match3_1_pattern); { tom.engine.adt.tomsignature.types.TomList tom_match3_1_pattern_guards=tom_get_slot_Pattern_guards(tom_match3_1_pattern); { tom.engine.adt.tomsignature.types.TomList tom_subjectList=tom_match3_1_pattern_subjectList; { tom.engine.adt.tomsignature.types.TomList tom_termList=tom_match3_1_pattern_tomList; { tom.engine.adt.tomsignature.types.TomList tom_guardList=tom_match3_1_pattern_guards; { tom.engine.adt.tomsignature.types.Instruction tom_actionInst=tom_match3_1_action; { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match3_1_option; if ( true ) {

                  Instruction newAction = tom_actionInst;
                  /* expansion of RawAction into TypedAction */
                   if(tom_actionInst instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match4_1=(( tom.engine.adt.tomsignature.types.Instruction)tom_actionInst); if (tom_is_fun_sym_RawAction(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match4_1_astInstruction=tom_get_slot_RawAction_astInstruction(tom_match4_1); { tom.engine.adt.tomsignature.types.Instruction tom_x=tom_match4_1_astInstruction; if ( true ) {

                      newAction=tom_make_TypedAction(tom_make_If(tom_make_TrueTL(),tom_x,tom_make_Nop()),tom_pattern,negativePattern);
                     } } } } } }

                  negativePattern = (PatternList) negativePattern.append(tom_pattern);

                  /* generate equality checks */
                  ArrayList equalityCheck = new ArrayList();
                  TomList renamedTermList = linearizePattern(tom_termList,equalityCheck);
                  newPatternInstruction = tom_make_PatternInstruction(tom_make_Pattern(tom_subjectList,renamedTermList,tom_guardList),newAction,tom_option);
                  /* attach guards to variables or applications*/
                  TomList constrainedTermList = renamedTermList;
                  TomList l = tom_guardList;
                  while(!l.isEmpty()) {
                    TomTerm guard = l.getHead();
                    //System.out.println("try to attach "+guard+"\nto "+constrainedTermList);
                    constrainedTermList = compiler.attachConstraint(constrainedTermList,guard);
                    l = l.getTail();
                  }
                  TomList emptyGuardList = empty();
                  newPatternInstruction = tom_make_PatternInstruction(tom_make_Pattern(tom_subjectList,constrainedTermList,emptyGuardList),newAction,tom_option);

                  /* abstract patterns */
                  ArrayList abstractedPattern  = new ArrayList();
                  ArrayList introducedVariable = new ArrayList();
                  TomList newTermList = compiler.abstractPatternList(renamedTermList, abstractedPattern, introducedVariable);

                  /* newPatternInstruction is overwritten when abstraction is performed */
                  if(abstractedPattern.size() > 0) {
                    /* generate a new match construct */

                    TomList generatedSubjectList = ASTFactory.makeList(introducedVariable);
                    PatternInstruction generatedPatternInstruction =
                      tom_make_PatternInstruction(tom_make_Pattern(generatedSubjectList,ASTFactory.makeList(abstractedPattern),emptyGuardList),newAction,tom_empty_list_concOption());
                    /* We reconstruct only a list of option with orgTrack and GeneratedMatch*/
                    OptionList generatedMatchOptionList = tom_cons_list_concOption(orgTrack,tom_cons_list_concOption(tom_make_GeneratedMatch(),tom_empty_list_concOption()));
                    Instruction generatedMatch =
                      tom_make_Match(tom_make_SubjectList(generatedSubjectList),tom_cons_list_concPatternInstruction(generatedPatternInstruction,tom_empty_list_concPatternInstruction()),generatedMatchOptionList)

;
                    generatedMatch = (Instruction) MuTraveler.init(tom_make_preProcessing(compiler)).visit(generatedMatch);
                    /*System.out.println("Generate new Match"+generatedMatch); */
                    newPatternInstruction =
                      tom_make_PatternInstruction(tom_make_Pattern(tom_subjectList,newTermList,emptyGuardList),generatedMatch,tom_option);

                    /*System.out.println("newPatternInstruction = " + newPatternInstruction); */
                  }
                  /* do nothing */
                  break matchBlock;
                 } } } } } } } } } } } } } } } if ( true ) {


                  System.out.println("preProcessing: strange PatternInstruction: " + newPatternInstruction);
                  throw new TomRuntimeException("preProcessing: strange PatternInstruction: " + newPatternInstruction);
                 } } }

            } // end matchBlock

            newPatternInstructionList = (PatternInstructionList) newPatternInstructionList.append(newPatternInstruction);
            tom_patternInstructionList= tom_patternInstructionList.getTail();
        }

        Instruction newMatch = tom_make_Match(tom_make_SubjectList(tom_l1),newPatternInstructionList,tom_matchOptionList)

;
        return newMatch;
       } } } } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Declaration visit_Declaration(  tom.engine.adt.tomsignature.types.Declaration tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match5_1=(( tom.engine.adt.tomsignature.types.Declaration)tom__arg); if (tom_is_fun_sym_Strategy(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_sName=tom_get_slot_Strategy_sName(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_extendsTerm=tom_get_slot_Strategy_extendsTerm(tom_match5_1); { tom.engine.adt.tomsignature.types.TomVisitList tom_match5_1_visitList=tom_get_slot_Strategy_visitList(tom_match5_1); { tom.engine.adt.tomsignature.types.Option tom_match5_1_orgTrack=tom_get_slot_Strategy_orgTrack(tom_match5_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match5_1_sName; { tom.engine.adt.tomsignature.types.TomTerm tom_extendsTerm=tom_match5_1_extendsTerm; { tom.engine.adt.tomsignature.types.TomVisitList tom_visitList=tom_match5_1_visitList; { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match5_1_orgTrack; if ( true ) {





        DeclarationList l = tom_empty_list_concDeclaration();//represents compiled Strategy
        TomVisitList jVisitList = tom_visitList;
        TomForwardType visitorFwd = null;
        while (!jVisitList.isEmpty()){
          TomList subjectListAST = empty();
          TomVisit visit = jVisitList.getHead();
           if(visit instanceof  tom.engine.adt.tomsignature.types.TomVisit) { { tom.engine.adt.tomsignature.types.TomVisit tom_match6_1=(( tom.engine.adt.tomsignature.types.TomVisit)visit); if (tom_is_fun_sym_VisitTerm(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_vNode=tom_get_slot_VisitTerm_vNode(tom_match6_1); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match6_1_astPatternInstructionList=tom_get_slot_VisitTerm_astPatternInstructionList(tom_match6_1); { tom.engine.adt.tomsignature.types.OptionList tom_match6_1_option=tom_get_slot_VisitTerm_option(tom_match6_1); if (tom_is_fun_sym_Type(tom_match6_1_vNode) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_vType=tom_match6_1_vNode; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_vNode_tomType=tom_get_slot_Type_tomType(tom_match6_1_vNode); if (tom_is_fun_sym_ASTTomType(tom_match6_1_vNode_tomType) ||  false ) { { String  tom_match6_1_vNode_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_vNode_tomType); { String  tom_type=tom_match6_1_vNode_tomType_string; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_patternInstructionList=tom_match6_1_astPatternInstructionList; if ( true ) {

              if (visitorFwd == null) {//first time in loop
                visitorFwd = compiler.symbolTable().getForwardType(tom_type);//do the job only once
              }
              TomTerm arg = tom_make_Variable(option(),tom_make_Name("tom__arg"),tom_vType,tom_empty_list_concConstraint());//arg subjectList
              subjectListAST = append(arg,subjectListAST);
              String funcName = "visit_" + tom_type;//function name
              Instruction matchStatement = tom_make_Match(tom_make_SubjectList(subjectListAST),tom_patternInstructionList,tom_cons_list_concOption(tom_orgTrack,tom_empty_list_concOption()));
              //return default strategy.visit(arg)
              Instruction returnStatement = tom_make_Return(tom_make_FunctionCall(tom_make_Name("super." + funcName),subjectListAST));
              InstructionList instructions = tom_cons_list_concInstruction(matchStatement,tom_cons_list_concInstruction(returnStatement,tom_empty_list_concInstruction()));
              l = tom_append_list_concDeclaration(l,tom_cons_list_concDeclaration(tom_make_MethodDef(tom_make_Name(funcName),tom_cons_list_concTomTerm(arg,tom_empty_list_concTomTerm()),tom_vType,tom_make_TomTypeAlone("jjtraveler.VisitFailure"),tom_make_AbstractBlock(instructions)),tom_empty_list_concDeclaration()));
             } } } } } } } } } } } } } }

          jVisitList = jVisitList.getTail();
        }
        return (Declaration) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_Class(tom_name,visitorFwd,tom_extendsTerm,tom_make_AbstractDecl(l)));
       } } } } } } } } } } if (tom_is_fun_sym_RuleSet(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomRuleList tom_match5_1_ruleList=tom_get_slot_RuleSet_ruleList(tom_match5_1); { tom.engine.adt.tomsignature.types.OptionList tom_match5_1_option=tom_get_slot_RuleSet_option(tom_match5_1); if (tom_is_fun_sym_manyTomRuleList(tom_match5_1_ruleList) ||  false ) { { tom.engine.adt.tomsignature.types.TomRuleList tom_rl=tom_match5_1_ruleList; { tom.engine.adt.tomsignature.types.TomRule tom_match5_1_ruleList_head=tom_get_slot_manyTomRuleList_head(tom_match5_1_ruleList); { tom.engine.adt.tomsignature.types.TomRuleList tom_match5_1_ruleList_tail=tom_get_slot_manyTomRuleList_tail(tom_match5_1_ruleList); if (tom_is_fun_sym_RewriteRule(tom_match5_1_ruleList_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_ruleList_head_lhs=tom_get_slot_RewriteRule_lhs(tom_match5_1_ruleList_head); if (tom_is_fun_sym_Term(tom_match5_1_ruleList_head_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_ruleList_head_lhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match5_1_ruleList_head_lhs); if (tom_is_fun_sym_RecordAppl(tom_match5_1_ruleList_head_lhs_tomTerm) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_ruleList_head_lhs_tomTerm_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_1_ruleList_head_lhs_tomTerm); if (tom_is_fun_sym_concTomName(tom_match5_1_ruleList_head_lhs_tomTerm_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_ruleList_head_lhs_tomTerm_nameList_list1=tom_match5_1_ruleList_head_lhs_tomTerm_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match5_1_ruleList_head_lhs_tomTerm_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_ruleList_head_lhs_tomTerm_nameList_1=tom_get_head_concTomName_NameList(tom_match5_1_ruleList_head_lhs_tomTerm_nameList_list1);tom_match5_1_ruleList_head_lhs_tomTerm_nameList_list1=tom_get_tail_concTomName_NameList(tom_match5_1_ruleList_head_lhs_tomTerm_nameList_list1); if (tom_is_fun_sym_Name(tom_match5_1_ruleList_head_lhs_tomTerm_nameList_1) ||  false ) { { String  tom_match5_1_ruleList_head_lhs_tomTerm_nameList_1_string=tom_get_slot_Name_string(tom_match5_1_ruleList_head_lhs_tomTerm_nameList_1); { String  tom_tomName=tom_match5_1_ruleList_head_lhs_tomTerm_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match5_1_ruleList_head_lhs_tomTerm_nameList_list1)) { { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match5_1_option; if ( true ) {


        TomSymbol tomSymbol = compiler.symbolTable().getSymbolFromName(tom_tomName);
        TomName name = tomSymbol.getAstName();
        String moduleName = getModuleName(tom_optionList);
        PatternInstructionList patternInstructionList  = tom_empty_list_concPatternInstruction();

        //build variables list for lhs symbol
        TomTypeList typesList = getSymbolDomain(tomSymbol);
        TomList subjectListAST = empty();
        TomNumberList path = tom_cons_list_concTomNumber(tom_make_RuleVar(),tom_empty_list_concTomNumber());
        int index = 0;
        while(!typesList.isEmpty()) {
          TomType subtermType = typesList.getHead();
          TomTerm variable = tom_make_Variable(option(),tom_make_PositionName(appendNumber(index,path)),subtermType,tom_empty_list_concConstraint());
          subjectListAST = append(variable,subjectListAST);
          typesList = typesList.getTail();
          index++;
        }

        TomRuleList ruleList = tom_rl;
        TomList guardList = empty();//no guardlist in pattern
        while(!ruleList.isEmpty()) {
          TomRule rule = ruleList.getHead();
           if(rule instanceof  tom.engine.adt.tomsignature.types.TomRule) { { tom.engine.adt.tomsignature.types.TomRule tom_match7_1=(( tom.engine.adt.tomsignature.types.TomRule)rule); if (tom_is_fun_sym_RewriteRule(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_lhs=tom_get_slot_RewriteRule_lhs(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_rhs=tom_get_slot_RewriteRule_rhs(tom_match7_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match7_1_condList=tom_get_slot_RewriteRule_condList(tom_match7_1); { tom.engine.adt.tomsignature.types.OptionList tom_match7_1_option=tom_get_slot_RewriteRule_option(tom_match7_1); if (tom_is_fun_sym_Term(tom_match7_1_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_lhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match7_1_lhs); if (tom_is_fun_sym_RecordAppl(tom_match7_1_lhs_tomTerm) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match7_1_lhs_tomTerm_slots=tom_get_slot_RecordAppl_slots(tom_match7_1_lhs_tomTerm); { tom.engine.adt.tomsignature.types.SlotList tom_matchPatternsList=tom_match7_1_lhs_tomTerm_slots; if (tom_is_fun_sym_Term(tom_match7_1_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_rhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match7_1_rhs); { tom.engine.adt.tomsignature.types.TomTerm tom_rhsTerm=tom_match7_1_rhs_tomTerm; { tom.engine.adt.tomsignature.types.InstructionList tom_condList=tom_match7_1_condList; { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match7_1_option; if ( true ) {




              //transform rhsTerm into Instruction to build PatternInstructionList
              TomTerm newRhs = tom_make_BuildReducedTerm(tom_rhsTerm);
              Instruction rhsInst = tom_make_If(tom_make_TrueTL(),tom_make_Return(newRhs),tom_make_Nop());
              Instruction newRhsInst = compiler.buildCondition(tom_condList,rhsInst);
              Pattern pattern = tom_make_Pattern(subjectListAST,slotListToTomList(tom_matchPatternsList),guardList);
              patternInstructionList = (PatternInstructionList) patternInstructionList.append(tom_make_PatternInstruction(pattern,tom_make_RawAction(newRhsInst),tom_option));
             } } } } } } } } } } } } } } } } } }

          ruleList = ruleList.getTail();
        }

        Instruction matchAST = tom_make_Match(tom_make_SubjectList(subjectListAST),patternInstructionList,tom_optionList)
;
        //return type `name(subjectListAST)
        Instruction buildAST = tom_make_Return(tom_make_BuildTerm(name,(TomList) MuTraveler.init(tom_make_preProcessing_makeTerm(compiler)).visit(subjectListAST),moduleName));
        Instruction functionBody =  (Instruction) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_AbstractBlock(tom_cons_list_concInstruction(matchAST,tom_cons_list_concInstruction(buildAST,tom_empty_list_concInstruction()))));

        //find codomain
        TomType codomain = getSymbolCodomain(tomSymbol);

        return tom_make_FunctionDef(name,subjectListAST,codomain,tom_make_EmptyType(),functionBody);
       } } } } } } } } } } } } } } } } } } } } } } } } } return super.visit_Declaration(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_preProcessing_once( TomCompiler  t0) { return new preProcessing_once(t0); }

 // end strategy

  private static  jjtraveler.reflective.VisitableVisitor  tom_make_preProcessing_makeTerm( TomCompiler  compiler) { return tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_preProcessing_makeTerm_once(compiler),tom_make_All(tom_make_MuVar("x"))))
; } private static class preProcessing_makeTerm_once  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomCompiler  compiler;  public preProcessing_makeTerm_once(  TomCompiler  compiler ) { super(tom_make_Identity() ); this.compiler=compiler; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); { tom.engine.adt.tomsignature.types.TomTerm tom_t=tom_match8_1; if ( true ) {





return (TomTerm) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_BuildReducedTerm((TomTerm)tom_t)); } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_preProcessing_makeTerm_once( TomCompiler  t0) { return new preProcessing_makeTerm_once(t0); }



  private Instruction buildCondition(InstructionList condList, Instruction action) {
     if(condList instanceof  tom.engine.adt.tomsignature.types.InstructionList) { { tom.engine.adt.tomsignature.types.InstructionList tom_match9_1=(( tom.engine.adt.tomsignature.types.InstructionList)condList); if (tom_is_fun_sym_emptyInstructionList(tom_match9_1) ||  false ) { if ( true ) {
 return action;  } } if (tom_is_fun_sym_manyInstructionList(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match9_1_head=tom_get_slot_manyInstructionList_head(tom_match9_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match9_1_tail=tom_get_slot_manyInstructionList_tail(tom_match9_1); if (tom_is_fun_sym_MatchingCondition(tom_match9_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_head_lhs=tom_get_slot_MatchingCondition_lhs(tom_match9_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_head_rhs=tom_get_slot_MatchingCondition_rhs(tom_match9_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_pattern=tom_match9_1_head_lhs; { tom.engine.adt.tomsignature.types.TomTerm tom_subject=tom_match9_1_head_rhs; { tom.engine.adt.tomsignature.types.InstructionList tom_tail=tom_match9_1_tail; if ( true ) {


        try{
        Instruction newAction = buildCondition(tom_tail,action);

        TomType subjectType = getTermType(tom_pattern);
        TomNumberList path = tsf().makeTomNumberList();
        path = (TomNumberList) path.append(tom_make_RuleVar());
        TomTerm newSubject = (TomTerm)(MuTraveler.init(tom_make_preProcessing(this)).visit(tom_make_BuildReducedTerm(tom_subject)));
        TomTerm introducedVariable = newSubject;
        TomList guardList = empty();
        TomList generatedSubjectList = cons(introducedVariable,empty());
        /*
         * we do not use RawAction nor TypedAction here because the generated match should not
         * produce any proof obligation for the verifier
         */
        PatternInstruction generatedPatternInstruction =
          tom_make_PatternInstruction(tom_make_Pattern(generatedSubjectList,cons(tom_pattern,empty()),guardList),newAction,option());

        // Warning: The options are not good
        Instruction generatedMatch =
          tom_make_Match(tom_make_SubjectList(generatedSubjectList),tom_cons_list_concPatternInstruction(generatedPatternInstruction,tom_empty_list_concPatternInstruction()),option())

;
        return generatedMatch;
        }catch(VisitFailure e){}
       } } } } } } } } } } if (tom_is_fun_sym_manyInstructionList(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match9_1_head=tom_get_slot_manyInstructionList_head(tom_match9_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match9_1_tail=tom_get_slot_manyInstructionList_tail(tom_match9_1); if (tom_is_fun_sym_TypedEqualityCondition(tom_match9_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match9_1_head_tomType=tom_get_slot_TypedEqualityCondition_tomType(tom_match9_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_head_lhs=tom_get_slot_TypedEqualityCondition_lhs(tom_match9_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1_head_rhs=tom_get_slot_TypedEqualityCondition_rhs(tom_match9_1_head); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match9_1_head_tomType; { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match9_1_head_lhs; { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match9_1_head_rhs; { tom.engine.adt.tomsignature.types.InstructionList tom_tail=tom_match9_1_tail; if ( true ) {


        try{
        Instruction newAction = buildCondition(tom_tail,action);

        TomTerm newLhs = (TomTerm)(MuTraveler.init(tom_make_preProcessing(this)).visit(tom_make_BuildReducedTerm(tom_lhs)));

        TomTerm newRhs = (TomTerm)(MuTraveler.init(tom_make_preProcessing(this)).visit(tom_make_BuildReducedTerm(tom_rhs)));
        Expression equality = tom_make_EqualTerm(tom_type,newLhs,newRhs);
        Instruction generatedTest = tom_make_If(equality,newAction,tom_make_Nop());
        return generatedTest;
        }catch(VisitFailure e){}
       } } } } } } } } } } } } } }

    throw new TomRuntimeException("buildCondition strange term: " + condList);
  }

  private static TomTerm renameVariable(TomTerm subject,
      Map multiplicityMap,
      ArrayList equalityCheck) {
    TomTerm renamedTerm = subject;

     if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match10_1; {boolean tom_bool_match10_1= false ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match10_1_constraints= null ; if (tom_is_fun_sym_UnamedVariable(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_constraints=tom_get_slot_UnamedVariable_constraints(tom_match10_1); } else { if (tom_is_fun_sym_UnamedVariableStar(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_constraints=tom_get_slot_UnamedVariableStar_constraints(tom_match10_1); } } if (tom_bool_match10_1) { { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match10_1_constraints; if ( true ) {

        ConstraintList newConstraintList = renameVariableInConstraintList(tom_constraints,multiplicityMap,equalityCheck);
        return tom_var.setConstraints(newConstraintList);
       } } } } } } { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match10_1; {boolean tom_bool_match10_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match10_1_astName= null ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match10_1_constraints= null ; if (tom_is_fun_sym_Variable(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_astName=tom_get_slot_Variable_astName(tom_match10_1);tom_match10_1_constraints=tom_get_slot_Variable_constraints(tom_match10_1); } else { if (tom_is_fun_sym_VariableStar(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_astName=tom_get_slot_VariableStar_astName(tom_match10_1);tom_match10_1_constraints=tom_get_slot_VariableStar_constraints(tom_match10_1); } } if (tom_bool_match10_1) { { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match10_1_astName; { tom.engine.adt.tomsignature.types.ConstraintList tom_clist=tom_match10_1_constraints; if ( true ) {


        ConstraintList newConstraintList = renameVariableInConstraintList(tom_clist,multiplicityMap,equalityCheck);
        if(!multiplicityMap.containsKey(tom_name)) {
          // We see this variable for the first time
          multiplicityMap.put(tom_name,new Integer(1));
          renamedTerm = tom_var.setConstraints(newConstraintList);
        } else {
          // We have already seen this variable
          Integer multiplicity = (Integer) multiplicityMap.get(tom_name);
          int mult = multiplicity.intValue();
          multiplicityMap.put(tom_name,new Integer(mult+1));

          TomNumberList path = tsf().makeTomNumberList();
          path = (TomNumberList) path.append(tom_make_RenamedVar(tom_name));
          path = (TomNumberList) path.append(makeNumber(mult));

          renamedTerm = tom_var.setAstName(tom_make_PositionName(path));
          renamedTerm = renamedTerm.setConstraints(tom_cons_list_concConstraint(tom_make_Equal(tom_var.setConstraints(tom_empty_list_concConstraint())),tom_append_list_concConstraint(newConstraintList,tom_empty_list_concConstraint())));
        }

        return renamedTerm;
       } } } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match10_1_option=tom_get_slot_RecordAppl_option(tom_match10_1); { tom.engine.adt.tomsignature.types.NameList tom_match10_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match10_1); { tom.engine.adt.tomsignature.types.SlotList tom_match10_1_slots=tom_get_slot_RecordAppl_slots(tom_match10_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match10_1_constraints=tom_get_slot_RecordAppl_constraints(tom_match10_1); { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match10_1_option; { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match10_1_nameList; { tom.engine.adt.tomsignature.types.SlotList tom_arguments=tom_match10_1_slots; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match10_1_constraints; if ( true ) {


        SlotList args = tom_arguments;
        SlotList newArgs = tom_make_emptySlotList();
        while(!args.isEmpty()) {
          Slot elt = args.getHead();
          TomTerm newElt = renameVariable(elt.getAppl(),multiplicityMap,equalityCheck);
          newArgs = (SlotList) newArgs.append(tom_make_PairSlotAppl(elt.getSlotName(),newElt));
          args = args.getTail();
        }
        ConstraintList newConstraintList = renameVariableInConstraintList(tom_constraints,multiplicityMap,equalityCheck);
        renamedTerm = tom_make_RecordAppl(tom_optionList,tom_nameList,newArgs,newConstraintList);
        return renamedTerm;
       } } } } } } } } } } } }

    return renamedTerm;
  }

  private static ConstraintList renameVariableInConstraintList(ConstraintList constraintList,
      Map multiplicityMap,
      ArrayList equalityCheck) {
    ArrayList list = new ArrayList();
    while(!constraintList.isEmpty()) {
      Constraint cstElt = constraintList.getHead();
      Constraint newCstElt = cstElt;
       if(cstElt instanceof  tom.engine.adt.tomsignature.types.Constraint) { { tom.engine.adt.tomsignature.types.Constraint tom_match11_1=(( tom.engine.adt.tomsignature.types.Constraint)cstElt); if (tom_is_fun_sym_AssignTo(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match11_1_variable=tom_get_slot_AssignTo_variable(tom_match11_1); if (tom_is_fun_sym_Variable(tom_match11_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match11_1_variable; if ( true ) {

          newCstElt = tom_make_AssignTo(renameVariable(tom_var,multiplicityMap,equalityCheck));
         } } } } } } }

      list.add(newCstElt);
      constraintList = constraintList.getTail();
    }
    return ASTFactory.makeConstraintList(list);
  }

  private static TomList linearizePattern(TomList subject, ArrayList equalityCheck) {
    Map multiplicityMap = new HashMap();
    // perform the renaming and generate equality checks
    TomList newList = empty();
    while(!subject.isEmpty()) {
      TomTerm elt = subject.getHead();
      TomTerm newElt = renameVariable(elt,multiplicityMap,equalityCheck);
      newList = append(newElt,newList);
      subject = subject.getTail();
    }
    return newList;
  }

  private TomTerm abstractPattern(TomTerm subject,
      ArrayList abstractedPattern,
      ArrayList introducedVariable)  {
    TomTerm abstractedTerm = subject;
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match12_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if (tom_is_fun_sym_RecordAppl(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match12_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match12_1); { tom.engine.adt.tomsignature.types.SlotList tom_match12_1_slots=tom_get_slot_RecordAppl_slots(tom_match12_1); if (tom_is_fun_sym_concTomName(tom_match12_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match12_1_nameList_list1=tom_match12_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match12_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match12_1_nameList_1=tom_get_head_concTomName_NameList(tom_match12_1_nameList_list1);tom_match12_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match12_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match12_1_nameList_1) ||  false ) { { String  tom_match12_1_nameList_1_string=tom_get_slot_Name_string(tom_match12_1_nameList_1); { String  tom_tomName=tom_match12_1_nameList_1_string; { tom.engine.adt.tomsignature.types.SlotList tom_arguments=tom_match12_1_slots; if ( true ) {

        TomSymbol tomSymbol = symbolTable().getSymbolFromName(tom_tomName);

        SlotList newArgs = tom_make_emptySlotList();
        if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
          SlotList args = tom_arguments;
          while(!args.isEmpty()) {
            Slot elt = args.getHead();
            TomTerm newElt = elt.getAppl();
             if(newElt instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match13_1=(( tom.engine.adt.tomsignature.types.TomTerm)newElt); if (tom_is_fun_sym_RecordAppl(tom_match13_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_appl=tom_match13_1; { tom.engine.adt.tomsignature.types.NameList tom_match13_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match13_1); if (tom_is_fun_sym_concTomName(tom_match13_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match13_1_nameList_list1=tom_match13_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match13_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match13_1_nameList_1=tom_get_head_concTomName_NameList(tom_match13_1_nameList_list1);tom_match13_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match13_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match13_1_nameList_1) ||  false ) { { String  tom_match13_1_nameList_1_string=tom_get_slot_Name_string(tom_match13_1_nameList_1); { String  tom_tomName2=tom_match13_1_nameList_1_string; if ( true ) {

                /*
                 * we no longer abstract syntactic subterm
                 * they are compiled by the TomKernelCompiler
                 */

                //System.out.println("Abstract: " + appl);
                TomSymbol tomSymbol2 = symbolTable().getSymbolFromName(tom_tomName2);
                if(isListOperator(tomSymbol2) || isArrayOperator(tomSymbol2)) {
                  TomType type2 = tomSymbol2.getTypesToType().getCodomain();
                  abstractedPattern.add(tom_appl);

                  TomNumberList path = tsf().makeTomNumberList();
                  //path = append(`AbsVar(makeNumber(introducedVariable.size())),path);
                  absVarNumber++;
                  path = (TomNumberList) path.append(tom_make_AbsVar(makeNumber(absVarNumber)));

                  TomTerm newVariable = tom_make_Variable(option(),tom_make_PositionName(path),type2,tom_empty_list_concConstraint());

                  //System.out.println("newVariable = " + newVariable);

                  introducedVariable.add(newVariable);
                  newElt = newVariable;
                }
               } } } } } } } } } } } } }

            newArgs = (SlotList) newArgs.append(tom_make_PairSlotAppl(elt.getSlotName(),newElt));
            args = args.getTail();
          }
        } else {
          newArgs = mergeTomListWithSlotList(abstractPatternList(slotListToTomList(tom_arguments),abstractedPattern,introducedVariable),tom_arguments);
        }
        abstractedTerm = subject.setSlots(newArgs);
       } } } } } } } } } } } } } }
 // end match
    return abstractedTerm;
  }

  private TomList abstractPatternList(TomList subjectList,
      ArrayList abstractedPattern,
      ArrayList introducedVariable)  {
     if(subjectList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match14_1=(( tom.engine.adt.tomsignature.types.TomList)subjectList); if (tom_is_fun_sym_emptyTomList(tom_match14_1) ||  false ) { if ( true ) {
 return subjectList;  } } if (tom_is_fun_sym_manyTomList(tom_match14_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match14_1_head=tom_get_slot_manyTomList_head(tom_match14_1); { tom.engine.adt.tomsignature.types.TomList tom_match14_1_tail=tom_get_slot_manyTomList_tail(tom_match14_1); { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match14_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match14_1_tail; if ( true ) {

        TomTerm newElt = abstractPattern(tom_head,abstractedPattern,introducedVariable);
        return tom_make_manyTomList(newElt,abstractPatternList(tom_tail,abstractedPattern,introducedVariable));
       } } } } } } } }

    throw new TomRuntimeException("abstractPatternList: " + subjectList);
  }


  /***********************************/
  /* functions related to the 'when' */
  /***********************************/


  /*
   * attach the when contraint to the right variable
   */
  private TomList attachConstraint(TomList subjectList,
      TomTerm constraint) {
    HashSet patternVariable = new HashSet();
    HashSet constraintVariable = new HashSet();

    collectVariable(patternVariable,subjectList);
    collectVariable(constraintVariable,constraint);
    Set variableSet = intersection(patternVariable,constraintVariable);

    //System.out.println("attach constraint "+subjectList+" "+patternVariable+" "+constraint);
    TomList newSubjectList = null;
    try{
    newSubjectList = (TomList)(MuTraveler.init(tom_make_attachConstraint(variableSet,constraint,this)).visit(subjectList));
    }catch(VisitFailure e){}
    return newSubjectList;
  }

  /*
   * build a set with all the variables in the intersection of two sets
   * used by the when
   */
  private static Set intersection(Set patternVariable, Set constraintVariable) {
    Set res = new HashSet();
    for(Iterator it1 = patternVariable.iterator(); it1.hasNext() ; ) {
      TomTerm patternTerm = (TomTerm) it1.next();
itBlock: {
           for(Iterator it2 = constraintVariable.iterator(); it2.hasNext() ; ) {
             TomTerm constraintTerm = (TomTerm) it2.next();
              if(patternTerm instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match15_1=(( tom.engine.adt.tomsignature.types.TomTerm)patternTerm); if(constraintTerm instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match15_2=(( tom.engine.adt.tomsignature.types.TomTerm)constraintTerm); if (tom_is_fun_sym_Variable(tom_match15_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match15_1; { tom.engine.adt.tomsignature.types.TomName tom_match15_1_astName=tom_get_slot_Variable_astName(tom_match15_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match15_1_astName; if (tom_is_fun_sym_Variable(tom_match15_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match15_2_astName=tom_get_slot_Variable_astName(tom_match15_2); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_name_1=tom_match15_2_astName; if (tom_terms_equal_TomName(tom_name, tom_renamedvar_name_1)) { if ( true ) {

                 res.add(tom_var);
                 //break itBlock;
                } } } } } } } } } if (tom_is_fun_sym_VariableStar(tom_match15_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match15_1; { tom.engine.adt.tomsignature.types.TomName tom_match15_1_astName=tom_get_slot_VariableStar_astName(tom_match15_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match15_1_astName; if (tom_is_fun_sym_VariableStar(tom_match15_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match15_2_astName=tom_get_slot_VariableStar_astName(tom_match15_2); { tom.engine.adt.tomsignature.types.TomName tom_renamedvar_name_1=tom_match15_2_astName; if (tom_terms_equal_TomName(tom_name, tom_renamedvar_name_1)) { if ( true ) {

                 res.add(tom_var);
                 //break itBlock;
                } } } } } } } } } } } } }

           }
         }
    }
    return res;
  }

  /*
   * find the variable on which we should attach the constraint
   * used by the when
   */

  private static  jjtraveler.reflective.VisitableVisitor  tom_make_attachConstraint( java.util.Set  variableSet,  tom.engine.adt.tomsignature.types.TomTerm constraint,  TomCompiler  compiler) { return tom_make_mu(tom_make_MuVar("x"),tom_make_ChoiceId(tom_make_attachConstraint_once(variableSet,constraint,compiler),tom_make_All(tom_make_MuVar("x"))))
; } private static class attachConstraint_once  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  java.util.Set  variableSet;   tom.engine.adt.tomsignature.types.TomTerm constraint;   TomCompiler  compiler;  public attachConstraint_once(  java.util.Set  variableSet ,   tom.engine.adt.tomsignature.types.TomTerm constraint ,   TomCompiler  compiler ) { super(tom_make_Identity() ); this.variableSet=variableSet; this.constraint=constraint; this.compiler=compiler; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match16_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match16_1; {boolean tom_bool_match16_1= false ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match16_1_constraints= null ; if (tom_is_fun_sym_Variable(tom_match16_1)) {tom_bool_match16_1= true ;tom_match16_1_constraints=tom_get_slot_Variable_constraints(tom_match16_1); } else { if (tom_is_fun_sym_VariableStar(tom_match16_1)) {tom_bool_match16_1= true ;tom_match16_1_constraints=tom_get_slot_VariableStar_constraints(tom_match16_1); } } if (tom_bool_match16_1) { { tom.engine.adt.tomsignature.types.ConstraintList tom_constraintList=tom_match16_1_constraints; if ( true ) {






        if(variableSet.remove(tom_var) && variableSet.isEmpty()) {
          ConstraintList newConstraintList = (ConstraintList)tom_constraintList.append(tom_make_Ensure((TomTerm) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_BuildReducedTerm(constraint))));
          return tom_var.setConstraints(newConstraintList);
        }
       } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match16_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_appl=tom_match16_1; { tom.engine.adt.tomsignature.types.ConstraintList tom_match16_1_constraints=tom_get_slot_RecordAppl_constraints(tom_match16_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_constraintList=tom_match16_1_constraints; if ( true ) {


        if(variableSet.isEmpty()) {
          ConstraintList newConstraintList = (ConstraintList)tom_constraintList.append(tom_make_Ensure((TomTerm) MuTraveler.init(tom_make_preProcessing(compiler)).visit(tom_make_BuildReducedTerm(constraint))));
          return tom_appl.setConstraints(newConstraintList);
        }
       } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_attachConstraint_once( java.util.Set  t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  TomCompiler  t2) { return new attachConstraint_once(t0,t1,t2); }



  /*
   * add a prefix (tom_) to back-quoted variables which comes from the lhs
   */
   private static class findRenameVariable  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  java.util.Set  context;  public findRenameVariable(  java.util.Set  context ) { super(tom_make_Identity() ); this.context=context; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match17_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match17_1; {boolean tom_bool_match17_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match17_1_astName= null ; if (tom_is_fun_sym_Variable(tom_match17_1)) {tom_bool_match17_1= true ;tom_match17_1_astName=tom_get_slot_Variable_astName(tom_match17_1); } else { if (tom_is_fun_sym_VariableStar(tom_match17_1)) {tom_bool_match17_1= true ;tom_match17_1_astName=tom_get_slot_VariableStar_astName(tom_match17_1); } } if (tom_bool_match17_1) { if (tom_is_fun_sym_Name(tom_match17_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_astName=tom_match17_1_astName; { String  tom_match17_1_astName_string=tom_get_slot_Name_string(tom_match17_1_astName); { String  tom_name=tom_match17_1_astName_string; if ( true ) {


        if(context.contains(tom_astName)) {
          return tom_var.setAstName(tom_make_Name(ASTFactory.makeTomVariableName(tom_name)));
        }
       } } } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match18_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_CompiledPattern(tom_match18_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match18_1_patternList=tom_get_slot_CompiledPattern_patternList(tom_match18_1); { tom.engine.adt.tomsignature.types.Instruction tom_match18_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match18_1); { tom.engine.adt.tomsignature.types.TomList tom_patternList=tom_match18_1_patternList; { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match18_1_automataInst; if ( true ) {




        Map map = TomBase.collectMultiplicity(tom_patternList);
        Set newContext = new HashSet(map.keySet());
        newContext.addAll(context);
        //System.out.println("newContext = " + newContext);
        return (Instruction)MuTraveler.init(tom_make_TopDown(tom_make_findRenameVariable(newContext))).visit(tom_instruction);
       } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_findRenameVariable( java.util.Set  t0) { return new findRenameVariable(t0); }



}
