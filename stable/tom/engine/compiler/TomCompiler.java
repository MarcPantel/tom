/* Generated by TOM (version 2.2rc1): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2005, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom.compiler;

import java.util.*;
import java.util.logging.Level;

import jtom.adt.tomsignature.types.*;
import jtom.exception.TomRuntimeException;
import jtom.tools.TomFactory;
import jtom.tools.TomGenericPlugin;
import jtom.tools.Tools;
import tom.library.traversal.Replace1;
import tom.library.traversal.Replace3;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import aterm.ATerm;

/**
 * The TomCompiler plugin.
 */
public class TomCompiler extends TomGenericPlugin {

  /* Generated by TOM (version 2.2rc1): Do not edit this file *//* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     

  /** some output suffixes */
  public static final String COMPILED_SUFFIX = ".tfix.compiled";
  
  /** the declared options string*/
  public static final String DECLARED_OPTIONS = "<options><boolean name='compile' altName='' description='Compiler (activated by default)' value='true'/></options>";
  
  /** the tomfactory for creating intermediate terms */
  private TomFactory tomFactory;
  
  /** unicity var counter*/
  private int absVarNumber;
  
  /** Constructor*/
  public TomCompiler() {
    super("TomCompiler");
    this.tomFactory = new TomFactory();
  }
  
  public void run() {
    TomKernelCompiler tomKernelCompiler = new TomKernelCompiler(getStreamManager().getSymbolTable());
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");
    TomTerm compiledTerm = null;
    try {
      // renit absVarNumber to generate reproductable output
      absVarNumber = 0;
      TomTerm preCompiledTerm = preProcessing((TomTerm)getWorkingTerm());
      //System.out.println("preCompiledTerm = \n" + preCompiledTerm);
      compiledTerm = tomKernelCompiler.compileMatching(preCompiledTerm);
      // verbose
      getLogger().log( Level.INFO, "TomCompilationPhase",
                       new Integer((int)(System.currentTimeMillis()-startChrono)) );      
      setWorkingTerm(compiledTerm);
    } catch (Exception e) {
      getLogger().log( Level.SEVERE, "ExceptionMessage",
                       new Object[]{getStreamManager().getInputFile().getName(), "TomCompiler", e.getMessage()} );
      e.printStackTrace();
    }
    if(intermediate) {
      Tools.generateOutput(getStreamManager().getOutputFileNameWithoutSuffix() + COMPILED_SUFFIX, compiledTerm);
    }
  }
  
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomCompiler.DECLARED_OPTIONS);
  }
  
  private OptionList option() {
    return getAstFactory().makeOption();
  }
  
  /* 
   * preProcessing:
   * replaces BuildReducedTerm by BuildList, BuildArray or BuildTerm
   *
   * transforms RuleSet into Function + Match + BuildReducedTerm
   * abstract list-matching patterns
   * rename non-linear patterns
   */
  
  Replace1 replace_preProcessing = new Replace1() {
      public ATerm apply(ATerm subject) {
        if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomTerm tom_match1_1=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_BuildReducedTerm(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match1_1_1=tom_get_slot_BuildReducedTerm_kid1(tom_match1_1); if(tom_is_fun_sym_VariableStar(tom_match1_1_1) || tom_is_fun_sym_Variable(tom_match1_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match1_1_1;

              return var;
            } }} } if(tom_is_fun_sym_BuildReducedTerm(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match1_1_1=tom_get_slot_BuildReducedTerm_kid1(tom_match1_1); if(tom_is_fun_sym_Appl(tom_match1_1_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_1_2=tom_get_slot_Appl_nameList(tom_match1_1_1); { jtom.adt.tomsignature.types.TomList tom_match1_1_1_3=tom_get_slot_Appl_args(tom_match1_1_1); if(tom_is_fun_sym_concTomName(tom_match1_1_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_1_2_list1=tom_match1_1_1_2; if(!(tom_is_empty_NameList(tom_match1_1_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match1_1_1_2_1=tom_get_head_NameList(tom_match1_1_1_2_list1);tom_match1_1_1_2_list1=tom_get_tail_NameList(tom_match1_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match1_1_1_2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName name=tom_match1_1_1_2_1; { String  tom_match1_1_1_2_1_1=tom_get_slot_Name_string(tom_match1_1_1_2_1); { String  tomName=tom_match1_1_1_2_1_1; if(tom_is_empty_NameList(tom_match1_1_1_2_list1)) { { jtom.adt.tomsignature.types.TomList termArgs=tom_match1_1_1_3;


              TomSymbol tomSymbol = symbolTable().getSymbolFromName(tomName);
              TomList newTermArgs = (TomList) traversal().genericTraversal(termArgs,replace_preProcessing_makeTerm);
              if(tomSymbol==null || isDefinedSymbol(tomSymbol)) {
                return tom_make_FunctionCall(name,newTermArgs);
              } else {
                if(isListOperator(tomSymbol)) {
                  return tomFactory.buildList(name,newTermArgs);
                } else if(isArrayOperator(tomSymbol)) {
                  return tomFactory.buildArray(name,newTermArgs);
                } else {
                  return tom_make_BuildTerm(name,newTermArgs);
                }
              }
            } }}}} }} }} }}} }} }}

 // end match
        } else if(subject instanceof Instruction) {
           { jtom.adt.tomsignature.types.Instruction tom_match2_1=(( jtom.adt.tomsignature.types.Instruction)subject); if(tom_is_fun_sym_Match(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_1=tom_get_slot_Match_subjectList(tom_match2_1); { jtom.adt.tomsignature.types.PatternInstructionList tom_match2_1_2=tom_get_slot_Match_astPatternInstructionList(tom_match2_1); { jtom.adt.tomsignature.types.OptionList tom_match2_1_3=tom_get_slot_Match_option(tom_match2_1); if(tom_is_fun_sym_SubjectList(tom_match2_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match2_1_1_1=tom_get_slot_SubjectList_tomList(tom_match2_1_1); { jtom.adt.tomsignature.types.TomList l1=tom_match2_1_1_1; { jtom.adt.tomsignature.types.PatternInstructionList patternInstructionList=tom_match2_1_2; { jtom.adt.tomsignature.types.OptionList matchOptionList=tom_match2_1_3;

              Option orgTrack = findOriginTracking(matchOptionList);
              PatternInstructionList newPatternInstructionList = tom_empty_list_concPatternInstruction();
              while(!patternInstructionList.isEmpty()) {
                /*
                 * the call to preProcessing performs the recursive expansion
                 * of nested match constructs
                 */
                PatternInstruction elt = preProcessingPatternInstruction(patternInstructionList.getHead());
                PatternInstruction newPatternInstruction = elt;
              
                matchBlock: {
                   { jtom.adt.tomsignature.types.PatternInstruction tom_match3_1=(( jtom.adt.tomsignature.types.PatternInstruction)elt); if(tom_is_fun_sym_PatternInstruction(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Pattern tom_match3_1_1=tom_get_slot_PatternInstruction_pattern(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_2=tom_get_slot_PatternInstruction_action(tom_match3_1); { jtom.adt.tomsignature.types.OptionList tom_match3_1_3=tom_get_slot_PatternInstruction_option(tom_match3_1); if(tom_is_fun_sym_Pattern(tom_match3_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match3_1_1_1=tom_get_slot_Pattern_tomList(tom_match3_1_1); { jtom.adt.tomsignature.types.TomList tom_match3_1_1_2=tom_get_slot_Pattern_guards(tom_match3_1_1); { jtom.adt.tomsignature.types.TomList termList=tom_match3_1_1_1; { jtom.adt.tomsignature.types.TomList guardList=tom_match3_1_1_2; { jtom.adt.tomsignature.types.Instruction actionInst=tom_match3_1_2; { jtom.adt.tomsignature.types.OptionList option=tom_match3_1_3;

                      TomList newTermList = empty();
                      /* generate equality checks */
                      ArrayList equalityCheck = new ArrayList();
                      TomList renamedTermList = linearizePattern(termList,equalityCheck);
                      newPatternInstruction = tom_make_PatternInstruction(tom_make_Pattern(renamedTermList,guardList),actionInst,option);        
                      /* attach guards to variables or applications*/
                      TomList constrainedTermList = renamedTermList;
                      TomList l = guardList;
                      while(!l.isEmpty()) {
                        TomTerm guard = l.getHead();
                        //System.out.println("try to attach "+guard+" to "+constrainedTermList);
                        constrainedTermList = attachConstraint(constrainedTermList,guard);
                        l = l.getTail();
                      }
                      TomList emptyGuardList = empty();
                      newPatternInstruction = tom_make_PatternInstruction(tom_make_Pattern(constrainedTermList,emptyGuardList),actionInst,option);        

                      /* abstract patterns */
                      ArrayList abstractedPattern  = new ArrayList();
                      ArrayList introducedVariable = new ArrayList();
                      newTermList = abstractPatternList(renamedTermList, abstractedPattern, introducedVariable);

                      /* newPatternInstruction is overwritten when abstraction is performed */
                      if(abstractedPattern.size() > 0) {
                        /* generate a new match construct */
                      
                        PatternInstruction generatedPatternInstruction =
                          tom_make_PatternInstruction(tom_make_Pattern(getAstFactory().makeList(abstractedPattern),emptyGuardList),actionInst,tom_empty_list_concOption());        
                        /* We reconstruct only a list of option with orgTrack and GeneratedMatch*/
                        OptionList generatedMatchOptionList = tom_cons_list_concOption(orgTrack,tom_cons_list_concOption(tom_make_GeneratedMatch(),tom_empty_list_concOption()));
                        Instruction generatedMatch =
                          tom_make_Match(tom_make_SubjectList(getAstFactory().makeList(introducedVariable)),tom_cons_list_concPatternInstruction(generatedPatternInstruction,tom_empty_list_concPatternInstruction()),generatedMatchOptionList)

;
                        /*System.out.println("Generate new Match"+generatedMatch); */
                        generatedMatch = preProcessingInstruction(generatedMatch);
                        newPatternInstruction =
                          tom_make_PatternInstruction(tom_make_Pattern(newTermList,emptyGuardList),generatedMatch,option);
                      
                        /*System.out.println("newPatternInstruction = " + newPatternInstruction); */
                      }
                      /* do nothing */
                      break matchBlock;
                    }}}}}} }}}} }


                      System.out.println("preProcessing: strange PatternInstruction: " + elt);
                      //System.out.println("termList = " + elt.getPattern());
                      //System.out.println("tom      = " + elt.getTom()); 
                      throw new TomRuntimeException("preProcessing: strange PatternInstruction: " + elt);
                    }

                } // end matchBlock
              
                newPatternInstructionList = (PatternInstructionList) newPatternInstructionList.append(newPatternInstruction);
                patternInstructionList = patternInstructionList.getTail();
              }
            
              Instruction newMatch = tom_make_Match(tom_make_SubjectList(l1),newPatternInstructionList,matchOptionList)

;
              return newMatch;
            }}}} }}}} } if(tom_is_fun_sym_RuleSet(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomRuleList tom_match2_1_1=tom_get_slot_RuleSet_ruleList(tom_match2_1); { jtom.adt.tomsignature.types.Option tom_match2_1_2=tom_get_slot_RuleSet_orgTrack(tom_match2_1); if(tom_is_fun_sym_manyTomRuleList(tom_match2_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomRuleList rl=tom_match2_1_1; { jtom.adt.tomsignature.types.TomRule tom_match2_1_1_1=tom_get_slot_manyTomRuleList_head(tom_match2_1_1); if(tom_is_fun_sym_RewriteRule(tom_match2_1_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_1_1_1=tom_get_slot_RewriteRule_lhs(tom_match2_1_1_1); if(tom_is_fun_sym_Term(tom_match2_1_1_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_1_1_1_1=tom_get_slot_Term_tomTerm(tom_match2_1_1_1_1); if(tom_is_fun_sym_Appl(tom_match2_1_1_1_1_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_1_1_1_1_2=tom_get_slot_Appl_nameList(tom_match2_1_1_1_1_1); if(tom_is_fun_sym_concTomName(tom_match2_1_1_1_1_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_1_1_1_1_2_list1=tom_match2_1_1_1_1_1_2; if(!(tom_is_empty_NameList(tom_match2_1_1_1_1_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match2_1_1_1_1_1_2_1=tom_get_head_NameList(tom_match2_1_1_1_1_1_2_list1);tom_match2_1_1_1_1_1_2_list1=tom_get_tail_NameList(tom_match2_1_1_1_1_1_2_list1); if(tom_is_fun_sym_Name(tom_match2_1_1_1_1_1_2_1) ||  false ) { { String  tom_match2_1_1_1_1_1_2_1_1=tom_get_slot_Name_string(tom_match2_1_1_1_1_1_2_1); { String  tomName=tom_match2_1_1_1_1_1_2_1_1; if(tom_is_empty_NameList(tom_match2_1_1_1_1_1_2_list1)) { { jtom.adt.tomsignature.types.Option orgTrack=tom_match2_1_2;


              TomRuleList ruleList = rl;
              TomSymbol tomSymbol = symbolTable().getSymbolFromName(tomName);
              TomName name = tomSymbol.getAstName();
              TomTypeList typesList = tomSymbol.getTypesToType().getDomain();        
              TomNumberList path = tsf().makeTomNumberList();
              TomList matchArgumentsList = empty();
              PatternInstructionList patternInstructionList  = tom_empty_list_concPatternInstruction();
              TomTerm variable;
              int index = 0;
            
              path = (TomNumberList) path.append(tom_make_RuleVar());
            
              while(!typesList.isEmpty()) {
                TomType subtermType = typesList.getHead();
                variable = tom_make_Variable(option(),tom_make_PositionName(appendNumber(index,path)),subtermType,tom_empty_list_concConstraint());
                matchArgumentsList = append(variable,matchArgumentsList);
                typesList = typesList.getTail();
                index++;
              }
            
              //boolean hasDefaultCase = false;
              while(!ruleList.isEmpty()) {
                TomRule rule = ruleList.getHead();
                 { jtom.adt.tomsignature.types.TomRule tom_match4_1=(( jtom.adt.tomsignature.types.TomRule)rule); if(tom_is_fun_sym_RewriteRule(tom_match4_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_1=tom_get_slot_RewriteRule_lhs(tom_match4_1); { jtom.adt.tomsignature.types.TomTerm tom_match4_1_2=tom_get_slot_RewriteRule_rhs(tom_match4_1); { jtom.adt.tomsignature.types.InstructionList tom_match4_1_3=tom_get_slot_RewriteRule_condList(tom_match4_1); { jtom.adt.tomsignature.types.OptionList tom_match4_1_4=tom_get_slot_RewriteRule_option(tom_match4_1); if(tom_is_fun_sym_Term(tom_match4_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_1_1=tom_get_slot_Term_tomTerm(tom_match4_1_1); if(tom_is_fun_sym_Appl(tom_match4_1_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match4_1_1_1_3=tom_get_slot_Appl_args(tom_match4_1_1_1); { jtom.adt.tomsignature.types.TomList matchPatternsList=tom_match4_1_1_1_3; if(tom_is_fun_sym_Term(tom_match4_1_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match4_1_2_1=tom_get_slot_Term_tomTerm(tom_match4_1_2); { jtom.adt.tomsignature.types.TomTerm rhsTerm=tom_match4_1_2_1; { jtom.adt.tomsignature.types.InstructionList condList=tom_match4_1_3; { jtom.adt.tomsignature.types.OptionList option=tom_match4_1_4;




                    TomTerm newRhs = preProcessing(tom_make_BuildReducedTerm(rhsTerm));
                    Instruction rhsInst = tom_make_If(tom_make_TrueTL(),tom_make_Return(newRhs),tom_make_Nop());
                    Instruction newRhsInst = buildCondition(condList,rhsInst);
                    TomList guardList = empty();

                    patternInstructionList = (PatternInstructionList) patternInstructionList.append(tom_make_PatternInstruction(tom_make_Pattern(matchPatternsList,guardList),newRhsInst,option));
                    //hasDefaultCase = hasDefaultCase || (isDefaultCase(matchPatternsList) && condList.isEmpty());
                  }}}} }}} }} }}}}} }}
 
                ruleList = ruleList.getTail();
              }
            
              TomTerm subjectListAST = tom_make_SubjectList(matchArgumentsList);
              Instruction makeFunctionBeginAST = tom_make_MakeFunctionBegin(name,subjectListAST);
              ArrayList optionList = new ArrayList();
              optionList.add(orgTrack);
              //optionList.add(tsf().makeOption_GeneratedMatch());
              OptionList generatedOptions = getAstFactory().makeOptionList(optionList);
              Instruction matchAST = tom_make_Match(tom_make_SubjectList(matchArgumentsList),patternInstructionList,generatedOptions)

;

              Instruction buildAST;
              //if(hasDefaultCase) {
              //buildAST = `Nop();
              //} else {
                buildAST = tom_make_Return(tom_make_BuildTerm(name,(TomList) traversal().genericTraversal(matchArgumentsList,replace_preProcessing_makeTerm)));
                //}

              InstructionList l;
              l = tom_cons_list_concInstruction(makeFunctionBeginAST,tom_cons_list_concInstruction(matchAST,tom_cons_list_concInstruction(buildAST,tom_cons_list_concInstruction(tom_make_MakeFunctionEnd()
                                   ,tom_empty_list_concInstruction()))))




;
            
              return preProcessingInstruction(tom_make_AbstractBlock(l));
            } }}} }} }} }} }} }} }}} }}} }}

 // end match

        } // end instanceof Instruction

          /*
           * Defaul case: traversal
           */
        return traversal().genericTraversal(subject,this);
      } // end apply
    };

  /*  
  private boolean isDefaultCase(TomList l) {
    %match(TomList l) {
      emptyTomList() -> {
        return true;
      }
      manyTomList((UnamedVariable|UnamedVariableStar)[],tail) -> {
        return isDefaultCase(tail);
      }
      manyTomList((Variable|VariableStar)[],tail) -> {
        return isDefaultCase(tail);
      }
    }
    return false;
  }
  */

  Replace1 replace_preProcessing_makeTerm = new Replace1() {
      public ATerm apply(ATerm t) {
        return preProcessing(tom_make_BuildReducedTerm((TomTerm)t));
      }
    }; 

  private TomTerm preProcessing(TomTerm subject) {
      //System.out.println("preProcessing subject: " + subject);
    return (TomTerm) replace_preProcessing.apply(subject); 
  }
  
  private Instruction preProcessingInstruction(Instruction subject) {
      //System.out.println("preProcessing subject: " + subject);
    return (Instruction) replace_preProcessing.apply(subject); 
  }

  private PatternInstruction preProcessingPatternInstruction(PatternInstruction subject) {
    return (PatternInstruction) replace_preProcessing.apply(subject); 
  }
 
  private Instruction buildCondition(InstructionList condList, Instruction action) {
     { jtom.adt.tomsignature.types.InstructionList tom_match5_1=(( jtom.adt.tomsignature.types.InstructionList)condList); if(tom_is_fun_sym_emptyInstructionList(tom_match5_1) ||  false ) {
 return action;  } if(tom_is_fun_sym_manyInstructionList(tom_match5_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match5_1_1=tom_get_slot_manyInstructionList_head(tom_match5_1); { jtom.adt.tomsignature.types.InstructionList tom_match5_1_2=tom_get_slot_manyInstructionList_tail(tom_match5_1); if(tom_is_fun_sym_MatchingCondition(tom_match5_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match5_1_1_1=tom_get_slot_MatchingCondition_lhs(tom_match5_1_1); { jtom.adt.tomsignature.types.TomTerm tom_match5_1_1_2=tom_get_slot_MatchingCondition_rhs(tom_match5_1_1); { jtom.adt.tomsignature.types.TomTerm pattern=tom_match5_1_1_1; { jtom.adt.tomsignature.types.TomTerm subject=tom_match5_1_1_2; { jtom.adt.tomsignature.types.InstructionList tail=tom_match5_1_2;


        Instruction newAction = buildCondition(tail,action);

        TomType subjectType = getTermType(pattern);
        TomNumberList path = tsf().makeTomNumberList();
        path = (TomNumberList) path.append(tom_make_RuleVar());
        TomTerm newSubject = preProcessing(tom_make_BuildReducedTerm(subject));
        TomTerm introducedVariable = newSubject;
        TomList guardList = empty();
        PatternInstruction generatedPatternInstruction =
          tom_make_PatternInstruction(tom_make_Pattern(cons(pattern,empty()),guardList),newAction,option());        

          // Warning: The options are not good
        Instruction generatedMatch =
          tom_make_Match(tom_make_SubjectList(cons(introducedVariable,empty())),tom_cons_list_concPatternInstruction(generatedPatternInstruction,tom_empty_list_concPatternInstruction()),option())

;
        return generatedMatch;
      }}}}} }}} } if(tom_is_fun_sym_manyInstructionList(tom_match5_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match5_1_1=tom_get_slot_manyInstructionList_head(tom_match5_1); { jtom.adt.tomsignature.types.InstructionList tom_match5_1_2=tom_get_slot_manyInstructionList_tail(tom_match5_1); if(tom_is_fun_sym_TypedEqualityCondition(tom_match5_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match5_1_1_1=tom_get_slot_TypedEqualityCondition_tomType(tom_match5_1_1); { jtom.adt.tomsignature.types.TomTerm tom_match5_1_1_2=tom_get_slot_TypedEqualityCondition_lhs(tom_match5_1_1); { jtom.adt.tomsignature.types.TomTerm tom_match5_1_1_3=tom_get_slot_TypedEqualityCondition_rhs(tom_match5_1_1); { jtom.adt.tomsignature.types.TomType type=tom_match5_1_1_1; { jtom.adt.tomsignature.types.TomTerm lhs=tom_match5_1_1_2; { jtom.adt.tomsignature.types.TomTerm rhs=tom_match5_1_1_3; { jtom.adt.tomsignature.types.InstructionList tail=tom_match5_1_2;


        Instruction newAction = buildCondition(tail,action);

        TomTerm newLhs = preProcessing(tom_make_BuildReducedTerm(lhs));
        TomTerm newRhs = preProcessing(tom_make_BuildReducedTerm(rhs));
        Expression equality = tom_make_EqualTerm(type,newLhs,newRhs);
        Instruction generatedTest = tom_make_If(equality,newAction,tom_make_Nop());
        return generatedTest;
      }}}}}}} }}} }


        throw new TomRuntimeException("buildCondition strange term: " + condList);
      }

  }
  
  private TomTerm renameVariable(TomTerm subject,
                                 Map multiplicityMap,
                                 ArrayList equalityCheck) {
    TomTerm renamedTerm = subject;
    
     { jtom.adt.tomsignature.types.TomTerm tom_match6_1=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_UnamedVariableStar(tom_match6_1) || tom_is_fun_sym_UnamedVariable(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match6_1; { jtom.adt.tomsignature.types.ConstraintList tom_match6_1_3=tom_get_slot_UnamedVariable_constraints(tom_match6_1); { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_1_3;

        ConstraintList newConstraintList = renameVariableInConstraintList(constraints,multiplicityMap,equalityCheck);
        return var.setConstraints(newConstraintList);
      }}} } if(tom_is_fun_sym_VariableStar(tom_match6_1) || tom_is_fun_sym_Variable(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match6_1; { jtom.adt.tomsignature.types.TomName tom_match6_1_2=tom_get_slot_Variable_astName(tom_match6_1); { jtom.adt.tomsignature.types.ConstraintList tom_match6_1_4=tom_get_slot_Variable_constraints(tom_match6_1); { jtom.adt.tomsignature.types.TomName name=tom_match6_1_2; { jtom.adt.tomsignature.types.ConstraintList clist=tom_match6_1_4;


        ConstraintList newConstraintList = renameVariableInConstraintList(clist,multiplicityMap,equalityCheck);
        if(!multiplicityMap.containsKey(name)) {
          // We see this variable for the first time
          multiplicityMap.put(name,new Integer(1));
          renamedTerm = var.setConstraints(newConstraintList);
        } else {
          // We have already seen this variable
          Integer multiplicity = (Integer) multiplicityMap.get(name);
          int mult = multiplicity.intValue(); 
          multiplicityMap.put(name,new Integer(mult+1));
          
          TomNumberList path = tsf().makeTomNumberList();
          path = (TomNumberList) path.append(tom_make_RenamedVar(name));
          path = (TomNumberList) path.append(makeNumber(mult));

          renamedTerm = var.setAstName(tom_make_PositionName(path));
          renamedTerm = renamedTerm.setConstraints(tom_cons_list_concConstraint(tom_make_Equal(var.setConstraints(tom_empty_list_concConstraint())),tom_append_list_concConstraint(newConstraintList,tom_empty_list_concConstraint())));
        }

        return renamedTerm;
      }}}}} } if(tom_is_fun_sym_Appl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match6_1_1=tom_get_slot_Appl_option(tom_match6_1); { jtom.adt.tomsignature.types.NameList tom_match6_1_2=tom_get_slot_Appl_nameList(tom_match6_1); { jtom.adt.tomsignature.types.TomList tom_match6_1_3=tom_get_slot_Appl_args(tom_match6_1); { jtom.adt.tomsignature.types.ConstraintList tom_match6_1_4=tom_get_slot_Appl_constraints(tom_match6_1); { jtom.adt.tomsignature.types.OptionList optionList=tom_match6_1_1; { jtom.adt.tomsignature.types.NameList nameList=tom_match6_1_2; { jtom.adt.tomsignature.types.TomList arguments=tom_match6_1_3; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_1_4;


        TomList args = arguments;
        TomList newArgs = empty();
        while(!args.isEmpty()) {
          TomTerm elt = args.getHead();
          TomTerm newElt = renameVariable(elt,multiplicityMap,equalityCheck);
          newArgs = append(newElt,newArgs);
          args = args.getTail();
        }
        ConstraintList newConstraintList = renameVariableInConstraintList(constraints,multiplicityMap,equalityCheck);
        renamedTerm = tom_make_Appl(optionList,nameList,newArgs,newConstraintList);
        return renamedTerm;
      }}}}}}}} }}

    return renamedTerm;
  }

  private ConstraintList renameVariableInConstraintList(ConstraintList constraintList,
                                                Map multiplicityMap,
                                                ArrayList equalityCheck) {
    ArrayList list = new ArrayList();
    while(!constraintList.isEmpty()) {
      Constraint cstElt = constraintList.getHead();
      Constraint newCstElt = cstElt;
       { jtom.adt.tomsignature.types.Constraint tom_match7_1=(( jtom.adt.tomsignature.types.Constraint)cstElt); if(tom_is_fun_sym_AssignTo(tom_match7_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match7_1_1=tom_get_slot_AssignTo_variable(tom_match7_1); if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match7_1_1;

          newCstElt = tom_make_AssignTo(renameVariable(var,multiplicityMap,equalityCheck));
        } }} }}

      list.add(newCstElt);
      constraintList = constraintList.getTail();
    }
    return getAstFactory().makeConstraintList(list);
  }

  private TomList linearizePattern(TomList subject, ArrayList equalityCheck) {
    Map multiplicityMap = new HashMap();
      // perform the renaming and generate equality checks
    TomList newList = empty();
    while(!subject.isEmpty()) {
      TomTerm elt = subject.getHead();
      TomTerm newElt = renameVariable(elt,multiplicityMap,equalityCheck);
      newList = append(newElt,newList);
      subject = subject.getTail();
    }
    return newList;
  }
  
  private TomTerm abstractPattern(TomTerm subject,
                                  ArrayList abstractedPattern,
                                  ArrayList introducedVariable)  {
    TomTerm abstractedTerm = subject;
     { jtom.adt.tomsignature.types.TomTerm tom_match8_1=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_Appl(tom_match8_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_2=tom_get_slot_Appl_nameList(tom_match8_1); { jtom.adt.tomsignature.types.TomList tom_match8_1_3=tom_get_slot_Appl_args(tom_match8_1); if(tom_is_fun_sym_concTomName(tom_match8_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match8_1_2_list1=tom_match8_1_2; if(!(tom_is_empty_NameList(tom_match8_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match8_1_2_1=tom_get_head_NameList(tom_match8_1_2_list1);tom_match8_1_2_list1=tom_get_tail_NameList(tom_match8_1_2_list1); if(tom_is_fun_sym_Name(tom_match8_1_2_1) ||  false ) { { String  tom_match8_1_2_1_1=tom_get_slot_Name_string(tom_match8_1_2_1); { String  tomName=tom_match8_1_2_1_1; { jtom.adt.tomsignature.types.TomList arguments=tom_match8_1_3;

        TomList args = arguments;
        TomSymbol tomSymbol = symbolTable().getSymbolFromName(tomName);
        
        TomList newArgs = empty();
        if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
          while(!args.isEmpty()) {
            TomTerm elt = args.getHead();
            TomTerm newElt = elt;
             { jtom.adt.tomsignature.types.TomTerm tom_match9_1=(( jtom.adt.tomsignature.types.TomTerm)elt); if(tom_is_fun_sym_Appl(tom_match9_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm appl=tom_match9_1; { jtom.adt.tomsignature.types.NameList tom_match9_1_2=tom_get_slot_Appl_nameList(tom_match9_1); if(tom_is_fun_sym_concTomName(tom_match9_1_2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match9_1_2_list1=tom_match9_1_2; if(!(tom_is_empty_NameList(tom_match9_1_2_list1))) { { jtom.adt.tomsignature.types.TomName tom_match9_1_2_1=tom_get_head_NameList(tom_match9_1_2_list1);tom_match9_1_2_list1=tom_get_tail_NameList(tom_match9_1_2_list1); if(tom_is_fun_sym_Name(tom_match9_1_2_1) ||  false ) { { String  tom_match9_1_2_1_1=tom_get_slot_Name_string(tom_match9_1_2_1); { String  tomName2=tom_match9_1_2_1_1;

                /*
                 * we no longer abstract syntactic subterm
                 * they are compiled by the TomKernelCompiler
                 */

                  //System.out.println("Abstract: " + appl);
                TomSymbol tomSymbol2 = symbolTable().getSymbolFromName(tomName2);
                if(isListOperator(tomSymbol2) || isArrayOperator(tomSymbol2)) {
                  TomType type2 = tomSymbol2.getTypesToType().getCodomain();
                  abstractedPattern.add(appl);
                  
                  TomNumberList path = tsf().makeTomNumberList();
                  //path = append(`AbsVar(makeNumber(introducedVariable.size())),path);
                  absVarNumber++;
                  path = (TomNumberList) path.append(tom_make_AbsVar(makeNumber(absVarNumber)));
                  
                  TomTerm newVariable = tom_make_Variable(option(),tom_make_PositionName(path),type2,tom_empty_list_concConstraint());
                  
                  //System.out.println("newVariable = " + newVariable);
                  
                  introducedVariable.add(newVariable);
                  newElt = newVariable;
                }
              }} }} }} }}} }}

            newArgs = append(newElt,newArgs);
            args = args.getTail();
          }
        } else {
          newArgs = abstractPatternList(args,abstractedPattern,introducedVariable);
        }
        abstractedTerm = subject.setArgs(newArgs);
      }}} }} }} }}} }}
 // end match
    return abstractedTerm;
  }

  private TomList abstractPatternList(TomList subjectList,
                                      ArrayList abstractedPattern,
                                      ArrayList introducedVariable)  {
    TomList newList = empty();
    while(!subjectList.isEmpty()) {
      TomTerm elt = subjectList.getHead();
      TomTerm newElt = abstractPattern(elt,abstractedPattern,introducedVariable);
      newList = append(newElt,newList);
      subjectList = subjectList.getTail();
    }
    return newList;
  }

  private TomList attachConstraint(TomList subjectList,
                                   TomTerm constraint) {
    HashSet patternVariable = new HashSet();
    HashSet constraintVariable = new HashSet();
    collectVariable(patternVariable,subjectList);
    collectVariable(constraintVariable,constraint);
    //patternVariable.retainAll(constraintVariable);

    //TomList variableList = intersection(getAstFactory().makeList(patternVariable),getAstFactory().makeList(constraintVariable));
    Set variableSet = intersection(patternVariable,constraintVariable);
    //System.out.println("variableList = " + variableList);

    //System.out.println("attach constraint "+subjectList+" "+patternVariable+" "+constraint);
    TomList newSubjectList = (TomList) replace_attachConstraint.apply(subjectList,variableSet,constraint); 

    //System.out.println("newSubjectList = " + newSubjectList);

    return newSubjectList;
  }


  private Set intersection(Set patternVariable, Set constraintVariable) {
    Set res = new HashSet();

    for(Iterator it1 = patternVariable.iterator(); it1.hasNext() ; ) {
      TomTerm patternTerm = (TomTerm) it1.next();
      itBlock: {
        for(Iterator it2 = constraintVariable.iterator(); it2.hasNext() ; ) {
          TomTerm constraintTerm = (TomTerm) it2.next();
           { jtom.adt.tomsignature.types.TomTerm tom_match10_1=(( jtom.adt.tomsignature.types.TomTerm)patternTerm); { jtom.adt.tomsignature.types.TomTerm tom_match10_2=(( jtom.adt.tomsignature.types.TomTerm)constraintTerm); if(tom_is_fun_sym_Variable(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match10_1; { jtom.adt.tomsignature.types.TomName tom_match10_1_2=tom_get_slot_Variable_astName(tom_match10_1); { jtom.adt.tomsignature.types.TomName name=tom_match10_1_2; if(tom_is_fun_sym_Variable(tom_match10_2) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match10_2_2=tom_get_slot_Variable_astName(tom_match10_2); { jtom.adt.tomsignature.types.TomName tom_renamedvar_name_1=tom_match10_2_2; if(tom_terms_equal_TomName(name, tom_renamedvar_name_1)) {

              res.add(var);
              //break itBlock;
             }}} }}}} } if(tom_is_fun_sym_VariableStar(tom_match10_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match10_1; { jtom.adt.tomsignature.types.TomName tom_match10_1_2=tom_get_slot_VariableStar_astName(tom_match10_1); { jtom.adt.tomsignature.types.TomName name=tom_match10_1_2; if(tom_is_fun_sym_VariableStar(tom_match10_2) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match10_2_2=tom_get_slot_VariableStar_astName(tom_match10_2); { jtom.adt.tomsignature.types.TomName tom_renamedvar_name_1=tom_match10_2_2; if(tom_terms_equal_TomName(name, tom_renamedvar_name_1)) {

              res.add(var);
              //break itBlock;
             }}} }}}} }}}

        }
      }
    }
    return res;
  }

  /*
  private TomList intersection(TomList patternVariable, TomList constraintVariable) {
    %match(TomList patternVariable, TomList constraintVariable) {
      concTomTerm(PV1*,var@Variable[astName=name],PV2*), concTomTerm(CV1*,Variable[astName=name],CV2*) -> {
        TomList inter = `intersection(concTomTerm(PV1*,PV2*), concTomTerm(CV1*,CV2*));
        return `concTomTerm(var,inter*);
      }
      concTomTerm(PV1*,var@VariableStar[astName=name],PV2*), concTomTerm(CV1*,VariableStar[astName=name],CV2*) -> {
        TomList inter = `intersection(concTomTerm(PV1*,PV2*), concTomTerm(CV1*,CV2*));
        return `concTomTerm(var,inter*);
      }
    }
    return `concTomTerm();
  }

  private TomList remove(TomList list, TomTerm element) {
    %match(TomList list, TomTerm element) {
      concTomTerm(C1*,x,C2*), x -> {
        return `concTomTerm(C1*,C2*);
      }
    }
    return list;
  }
  */

  protected Replace3 replace_attachConstraint = new Replace3() { 
      public ATerm apply(ATerm subject, Object arg1, Object arg2) {
        Set variableSet = (Set) arg1;
        TomTerm constraint = (TomTerm) arg2;

        if(subject instanceof TomTerm) {
           { jtom.adt.tomsignature.types.TomTerm tom_match11_1=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_VariableStar(tom_match11_1) || tom_is_fun_sym_Variable(tom_match11_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match11_1; { jtom.adt.tomsignature.types.ConstraintList tom_match11_1_4=tom_get_slot_Variable_constraints(tom_match11_1); { jtom.adt.tomsignature.types.ConstraintList constraintList=tom_match11_1_4;

              //System.out.println("var = " + var);
              //System.out.println("set1 = " + variableSet);
              //System.out.println("set2 = " + variableSet);

              if(variableSet.remove(var)&&variableSet.isEmpty()) {
                ConstraintList newConstraintList = (ConstraintList)constraintList.append(tom_make_Ensure(preProcessing(tom_make_BuildReducedTerm(constraint))));
                return var.setConstraints(newConstraintList);
              }
              //return var;
            }}} } if(tom_is_fun_sym_Appl(tom_match11_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm appl=tom_match11_1; { jtom.adt.tomsignature.types.ConstraintList tom_match11_1_4=tom_get_slot_Appl_constraints(tom_match11_1); { jtom.adt.tomsignature.types.ConstraintList constraintList=tom_match11_1_4;


              if(variableSet.isEmpty()) {
                ConstraintList newConstraintList = (ConstraintList)constraintList.append(tom_make_Ensure(preProcessing(tom_make_BuildReducedTerm(constraint))));
                return appl.setConstraints(newConstraintList);
              }
              //return appl;
            }}} }}

        }

        return traversal().genericTraversal(subject,this,variableSet,constraint);
      } // end apply
    }; // end new


} // class TomCompiler
