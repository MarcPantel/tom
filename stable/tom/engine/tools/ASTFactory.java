/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.tools;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import tom.engine.TomBase;
import tom.engine.adt.tomterm.*;
import tom.engine.xml.Constants;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.exception.TomRuntimeException;
import aterm.ATerm;

public class ASTFactory {
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_TargetLanguageToInstruction( tom.engine.adt.tomsignature.types.TargetLanguage  t0) { return  tom.engine.adt.tominstruction.types.instruction.TargetLanguageToInstruction.make(t0); }private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_TomTermToInstruction( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tominstruction.types.instruction.TomTermToInstruction.make(t0); }private static  tom.engine.adt.tomtype.types.TomType  tom_make_TLType( tom.engine.adt.tomsignature.types.TargetLanguage  t0) { return  tom.engine.adt.tomtype.types.tomtype.TLType.make(t0); }private static  tom.engine.adt.tomtype.types.TomType  tom_make_TypesToType( tom.engine.adt.tomtype.types.TomTypeList  t0,  tom.engine.adt.tomtype.types.TomType  t1) { return  tom.engine.adt.tomtype.types.tomtype.TypesToType.make(t0, t1); }private static  tom.engine.adt.tomtype.types.TomType  tom_make_ASTTomType( String  t0) { return  tom.engine.adt.tomtype.types.tomtype.ASTTomType.make(t0); }private static  tom.engine.adt.tomtype.types.TomType  tom_make_TomTypeAlone( String  t0) { return  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make(t0); }private static  tom.engine.adt.tomtype.types.TomType  tom_make_Type( tom.engine.adt.tomtype.types.TomType  t0,  tom.engine.adt.tomtype.types.TomType  t1) { return  tom.engine.adt.tomtype.types.tomtype.Type.make(t0, t1); }private static  tom.engine.adt.tomsignature.types.TargetLanguage  tom_make_ITL( String  t0) { return  tom.engine.adt.tomsignature.types.targetlanguage.ITL.make(t0); }private static  tom.engine.adt.tomsignature.types.TomSymbol  tom_make_Symbol( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomslot.types.PairNameDeclList  t2,  tom.engine.adt.tomoption.types.OptionList  t3) { return  tom.engine.adt.tomsignature.types.tomsymbol.Symbol.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomname.types.TomName  tom_make_EmptyName() { return  tom.engine.adt.tomname.types.tomname.EmptyName.make(); }private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.Name  ;}private static  tom.engine.adt.tomname.types.TomName  tom_make_Name( String  t0) { return  tom.engine.adt.tomname.types.tomname.Name.make(t0); }private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildAppendArray( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomterm.types.tomterm.BuildAppendArray.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildConsArray( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomterm.types.tomterm.BuildConsArray.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildEmptyArray( tom.engine.adt.tomname.types.TomName  t0,  int  t1) { return  tom.engine.adt.tomterm.types.tomterm.BuildEmptyArray.make(t0, t1); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildAppendList( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomterm.types.tomterm.BuildAppendList.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildConsList( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1,  tom.engine.adt.tomterm.types.TomTerm  t2) { return  tom.engine.adt.tomterm.types.tomterm.BuildConsList.make(t0, t1, t2); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_BuildEmptyList( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.BuildEmptyList.make(t0); }private static boolean tom_is_fun_sym_BuildTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildTerm  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_BuildTerm_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_BuildTerm_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static  String  tom_get_slot_BuildTerm_ModuleName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getModuleName()  ;}private static boolean tom_is_fun_sym_BuildConstant( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.BuildConstant  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_BuildConstant_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_Composite( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Composite  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Composite_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_InstructionToTomTerm( tom.engine.adt.tominstruction.types.Instruction  t0) { return  tom.engine.adt.tomterm.types.tomterm.InstructionToTomTerm.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_ExpressionToTomTerm( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_DeclarationToTomTerm( tom.engine.adt.tomdeclaration.types.Declaration  t0) { return  tom.engine.adt.tomterm.types.tomterm.DeclarationToTomTerm.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TomNameToTomTerm( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomterm.types.tomterm.TomNameToTomTerm.make(t0); }private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TomTypeToTomTerm( tom.engine.adt.tomtype.types.TomType  t0) { return  tom.engine.adt.tomterm.types.tomterm.TomTypeToTomTerm.make(t0); }private static boolean tom_is_fun_sym_TargetLanguageToTomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.TargetLanguageToTomTerm  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_TargetLanguageToTomTerm( tom.engine.adt.tomsignature.types.TargetLanguage  t0) { return  tom.engine.adt.tomterm.types.tomterm.TargetLanguageToTomTerm.make(t0); }private static  tom.engine.adt.tomsignature.types.TargetLanguage  tom_get_slot_TargetLanguageToTomTerm_Tl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTl()  ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_Variable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomName  t1,  tom.engine.adt.tomtype.types.TomType  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.Variable.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_RecordAppl( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomname.types.TomNameList  t1,  tom.engine.adt.tomslot.types.SlotList  t2,  tom.engine.adt.tomconstraint.types.ConstraintList  t3) { return  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(t0, t1, t2, t3); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_TermAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_TermAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_TermAppl_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_TermAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_make_OriginTracking( tom.engine.adt.tomname.types.TomName  t0,  int  t1,  String  t2) { return  tom.engine.adt.tomoption.types.option.OriginTracking.make(t0, t1, t2); }private static  tom.engine.adt.tomoption.types.Option  tom_make_DefinedSymbol() { return  tom.engine.adt.tomoption.types.option.DefinedSymbol.make(); }private static  tom.engine.adt.tomoption.types.Option  tom_make_TomTermToOption( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomoption.types.option.TomTermToOption.make(t0); }private static  tom.engine.adt.tomoption.types.Option  tom_make_TomNameToOption( tom.engine.adt.tomname.types.TomName  t0) { return  tom.engine.adt.tomoption.types.option.TomNameToOption.make(t0); }private static  tom.engine.adt.tomoption.types.Option  tom_make_DeclarationToOption( tom.engine.adt.tomdeclaration.types.Declaration  t0) { return  tom.engine.adt.tomoption.types.option.DeclarationToOption.make(t0); }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_make_AssignTo( tom.engine.adt.tomterm.types.TomTerm  t0) { return  tom.engine.adt.tomconstraint.types.constraint.AssignTo.make(t0); }private static  tom.engine.adt.tomslot.types.Slot  tom_make_PairSlotAppl( tom.engine.adt.tomname.types.TomName  t0,  tom.engine.adt.tomterm.types.TomTerm  t1) { return  tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(t0, t1); }private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getHeadconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getTailconcInstruction()  ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.isEmptyconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static  tom.engine.adt.tomtype.types.TomTypeList  tom_empty_list_concTomType() { return  tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType.make() ; }private static  tom.engine.adt.tomtype.types.TomTypeList  tom_cons_list_concTomType( tom.engine.adt.tomtype.types.TomType  e,  tom.engine.adt.tomtype.types.TomTypeList  l) { return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make(e,l) ; }private static  tom.engine.adt.tomtype.types.TomType  tom_get_head_concTomType_TomTypeList( tom.engine.adt.tomtype.types.TomTypeList  l) {  return  l.getHeadconcTomType()  ;}private static  tom.engine.adt.tomtype.types.TomTypeList  tom_get_tail_concTomType_TomTypeList( tom.engine.adt.tomtype.types.TomTypeList  l) {  return  l.getTailconcTomType()  ;}private static boolean tom_is_empty_concTomType_TomTypeList( tom.engine.adt.tomtype.types.TomTypeList  l) {  return  l.isEmptyconcTomType()  ;}private static  tom.engine.adt.tomtype.types.TomTypeList  tom_append_list_concTomType( tom.engine.adt.tomtype.types.TomTypeList  l1,  tom.engine.adt.tomtype.types.TomTypeList  l2) {    if(tom_is_empty_concTomType_TomTypeList(l1)) {     return l2;    } else if(tom_is_empty_concTomType_TomTypeList(l2)) {     return l1;    } else if(tom_is_empty_concTomType_TomTypeList(( tom.engine.adt.tomtype.types.TomTypeList )tom_get_tail_concTomType_TomTypeList(l1))) {     return ( tom.engine.adt.tomtype.types.TomTypeList )tom_cons_list_concTomType(( tom.engine.adt.tomtype.types.TomType )tom_get_head_concTomType_TomTypeList(l1),l2);    } else {      return ( tom.engine.adt.tomtype.types.TomTypeList )tom_cons_list_concTomType(( tom.engine.adt.tomtype.types.TomType )tom_get_head_concTomType_TomTypeList(l1),tom_append_list_concTomType(( tom.engine.adt.tomtype.types.TomTypeList )tom_get_tail_concTomType_TomTypeList(l1),l2));    }   }  private static  tom.engine.adt.tomtype.types.TomTypeList  tom_get_slice_concTomType( tom.engine.adt.tomtype.types.TomTypeList  begin,  tom.engine.adt.tomtype.types.TomTypeList  end) {    if(tom_terms_equal_TomTypeList(begin,end)) {      return ( tom.engine.adt.tomtype.types.TomTypeList )tom_empty_list_concTomType();    } else {      return ( tom.engine.adt.tomtype.types.TomTypeList )tom_cons_list_concTomType(( tom.engine.adt.tomtype.types.TomType )tom_get_head_concTomType_TomTypeList(begin),( tom.engine.adt.tomtype.types.TomTypeList )tom_get_slice_concTomType(( tom.engine.adt.tomtype.types.TomTypeList )tom_get_tail_concTomType_TomTypeList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomVisit( tom.engine.adt.tomsignature.types.TomVisitList  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomvisitlist.ConsconcTomVisit || t instanceof tom.engine.adt.tomsignature.types.tomvisitlist.EmptyconcTomVisit  ;}private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_empty_list_concTomVisit() { return  tom.engine.adt.tomsignature.types.tomvisitlist.EmptyconcTomVisit.make() ; }private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_cons_list_concTomVisit( tom.engine.adt.tomsignature.types.TomVisit  e,  tom.engine.adt.tomsignature.types.TomVisitList  l) { return  tom.engine.adt.tomsignature.types.tomvisitlist.ConsconcTomVisit.make(e,l) ; }private static  tom.engine.adt.tomsignature.types.TomVisit  tom_get_head_concTomVisit_TomVisitList( tom.engine.adt.tomsignature.types.TomVisitList  l) {  return  l.getHeadconcTomVisit()  ;}private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_get_tail_concTomVisit_TomVisitList( tom.engine.adt.tomsignature.types.TomVisitList  l) {  return  l.getTailconcTomVisit()  ;}private static boolean tom_is_empty_concTomVisit_TomVisitList( tom.engine.adt.tomsignature.types.TomVisitList  l) {  return  l.isEmptyconcTomVisit()  ;}private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_append_list_concTomVisit( tom.engine.adt.tomsignature.types.TomVisitList  l1,  tom.engine.adt.tomsignature.types.TomVisitList  l2) {    if(tom_is_empty_concTomVisit_TomVisitList(l1)) {     return l2;    } else if(tom_is_empty_concTomVisit_TomVisitList(l2)) {     return l1;    } else if(tom_is_empty_concTomVisit_TomVisitList(( tom.engine.adt.tomsignature.types.TomVisitList )tom_get_tail_concTomVisit_TomVisitList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomVisitList )tom_cons_list_concTomVisit(( tom.engine.adt.tomsignature.types.TomVisit )tom_get_head_concTomVisit_TomVisitList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomVisitList )tom_cons_list_concTomVisit(( tom.engine.adt.tomsignature.types.TomVisit )tom_get_head_concTomVisit_TomVisitList(l1),tom_append_list_concTomVisit(( tom.engine.adt.tomsignature.types.TomVisitList )tom_get_tail_concTomVisit_TomVisitList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_get_slice_concTomVisit( tom.engine.adt.tomsignature.types.TomVisitList  begin,  tom.engine.adt.tomsignature.types.TomVisitList  end) {    if(tom_terms_equal_TomVisitList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomVisitList )tom_empty_list_concTomVisit();    } else {      return ( tom.engine.adt.tomsignature.types.TomVisitList )tom_cons_list_concTomVisit(( tom.engine.adt.tomsignature.types.TomVisit )tom_get_head_concTomVisit_TomVisitList(begin),( tom.engine.adt.tomsignature.types.TomVisitList )tom_get_slice_concTomVisit(( tom.engine.adt.tomsignature.types.TomVisitList )tom_get_tail_concTomVisit_TomVisitList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_terms_equal_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomterm.types.TomList  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm || t instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_empty_list_concTomTerm() { return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ; }private static  tom.engine.adt.tomterm.types.TomList  tom_cons_list_concTomTerm( tom.engine.adt.tomterm.types.TomTerm  e,  tom.engine.adt.tomterm.types.TomList  l) { return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(e,l) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_head_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getHeadconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getTailconcTomTerm()  ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.isEmptyconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList  l1,  tom.engine.adt.tomterm.types.TomList  l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( tom.engine.adt.tomterm.types.TomList )tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_is_fun_sym_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  t) {  return  t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction || t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_empty_list_concPatternInstruction() { return  tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction.make() ; }private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_cons_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  e,  tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction.make(e,l) ; }private static  tom.engine.adt.tomterm.types.PatternInstruction  tom_get_head_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.getHeadconcPatternInstruction()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_tail_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.getTailconcPatternInstruction()  ;}private static boolean tom_is_empty_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.isEmptyconcPatternInstruction()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_append_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  l1,  tom.engine.adt.tomterm.types.PatternInstructionList  l2) {    if(tom_is_empty_concPatternInstruction_PatternInstructionList(l1)) {     return l2;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(l2)) {     return l1;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(l1))) {     return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(l1),tom_append_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slice_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  begin,  tom.engine.adt.tomterm.types.PatternInstructionList  end) {    if(tom_terms_equal_PatternInstructionList(begin,end)) {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_empty_list_concPatternInstruction();    } else {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(begin),( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_slice_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) {  return  t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption || t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getHeadconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getTailconcOption()  ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.isEmptyconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList  l1,  tom.engine.adt.tomoption.types.OptionList  l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomoption.types.OptionList )tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) {  return  t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint || t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getHeadconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getTailconcConstraint()  ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.isEmptyconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomslot.types.SlotList  t) {  return  t instanceof tom.engine.adt.tomslot.types.slotlist.ConsconcSlot || t instanceof tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_empty_list_concSlot() { return  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ; }private static  tom.engine.adt.tomslot.types.SlotList  tom_cons_list_concSlot( tom.engine.adt.tomslot.types.Slot  e,  tom.engine.adt.tomslot.types.SlotList  l) { return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(e,l) ; }private static  tom.engine.adt.tomslot.types.Slot  tom_get_head_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getHeadconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_tail_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.getTailconcSlot()  ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomslot.types.SlotList  l) {  return  l.isEmptyconcSlot()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList  l1,  tom.engine.adt.tomslot.types.SlotList  l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomslot.types.SlotList )tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomslot.types.SlotList )tom_cons_list_concSlot(( tom.engine.adt.tomslot.types.Slot )tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot(( tom.engine.adt.tomslot.types.SlotList )tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static boolean tom_is_fun_sym_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  t) {  return  t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl || t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_empty_list_concPairNameDecl() { return  tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ; }private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_cons_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDecl  e,  tom.engine.adt.tomslot.types.PairNameDeclList  l) { return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make(e,l) ; }private static  tom.engine.adt.tomslot.types.PairNameDecl  tom_get_head_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.getHeadconcPairNameDecl()  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_tail_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.getTailconcPairNameDecl()  ;}private static boolean tom_is_empty_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.isEmptyconcPairNameDecl()  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_append_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  l1,  tom.engine.adt.tomslot.types.PairNameDeclList  l2) {    if(tom_is_empty_concPairNameDecl_PairNameDeclList(l1)) {     return l2;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(l2)) {     return l1;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(l1))) {     return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(l1),tom_append_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slice_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  begin,  tom.engine.adt.tomslot.types.PairNameDeclList  end) {    if(tom_terms_equal_PairNameDeclList(begin,end)) {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_empty_list_concPairNameDecl();    } else {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(begin),( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_slice_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(begin),end));    }   }   
   // Suppresses default constructor, ensuring non-instantiability.
  private ASTFactory() {
  }

  public static int length(TomList l) {
    if(l.isEmptyconcTomTerm()) {
      return 0;
    } else {
      return 1 + length(l.getTailconcTomTerm());
    }
  }

  public static TomList reverse(TomList l) {
    TomList reverse = tom_empty_list_concTomTerm();
    while(!l.isEmptyconcTomTerm()){
      reverse = tom_cons_list_concTomTerm(l.getHeadconcTomTerm(),tom_append_list_concTomTerm(reverse,tom_empty_list_concTomTerm()));
      l = l.getTailconcTomTerm();
    }
    return reverse;
  }

  public static TomList makeList(Collection c) {
    Object array[] = c.toArray();
    TomList list = tom_empty_list_concTomTerm();
    for(int i=array.length-1; i>=0 ; i--) {
      Object elt = array[i];
      TomTerm term;
      if(elt instanceof TargetLanguage) {
        term = tom_make_TargetLanguageToTomTerm((TargetLanguage)elt);
      } else if(elt instanceof TomType) {
        term = tom_make_TomTypeToTomTerm((TomType)elt);
      } else if(elt instanceof Declaration) {
        term = tom_make_DeclarationToTomTerm((Declaration)elt);
      } else if(elt instanceof Expression) {
        term = tom_make_ExpressionToTomTerm((Expression)elt);
      } else if(elt instanceof TomName) {
        term = tom_make_TomNameToTomTerm((TomName)elt);
      } else if(elt instanceof Instruction) {
        term = tom_make_InstructionToTomTerm((Instruction)elt);
      } else {
        term = (TomTerm)elt;
      }
      list = tom_cons_list_concTomTerm(term,tom_append_list_concTomTerm(list,tom_empty_list_concTomTerm()));
    }
    return list;
  }

  public static InstructionList makeInstructionList(Collection c) {
    Object array[] = c.toArray();
    InstructionList list = tom_empty_list_concInstruction();
    for(int i=array.length-1; i>=0 ; i--) {
      Object elt = array[i];
      Instruction term;
      if(elt instanceof TargetLanguage) {
        term = tom_make_TargetLanguageToInstruction((TargetLanguage)elt);
      } else if(elt instanceof TomTerm) {
        term = tom_make_TomTermToInstruction((TomTerm)elt);
          //System.out.println("term   = " + term);
      } else if(elt instanceof Instruction) {
        term = (Instruction)elt;
      } else {
        /* XXX: is this an error ? if yes, it should not be that silent */
        System.out.println("elt   = " + elt);
        term = (Instruction) elt;
      }
      list = tom_cons_list_concInstruction(term,tom_append_list_concInstruction(list,tom_empty_list_concInstruction()));
    }
    return list;
  }

  public static OptionList makeOptionList(List argumentList) {
    OptionList list = tom_empty_list_concOption();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      Option term;
      if(elt instanceof TomName) {
        term = tom_make_TomNameToOption((TomName)elt);
      } else if(elt instanceof Declaration) {
        term = tom_make_DeclarationToOption((Declaration)elt);
      } else if(elt instanceof TomTerm) {
        term = tom_make_TomTermToOption((TomTerm)elt);
      } else {
        term = (Option) elt;
      }
      list = tom_cons_list_concOption(term,tom_append_list_concOption(list,tom_empty_list_concOption()));
    }
    return list;
  }

  public static ConstraintList makeConstraintList(List argumentList) {
    ConstraintList list = tom_empty_list_concConstraint();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      Constraint term;
      term = (Constraint)elt;
      list = tom_cons_list_concConstraint(term,tom_append_list_concConstraint(list,tom_empty_list_concConstraint()));
    }
    return list;
  }

  public static TomNameList makeNameList(List argumentList) {
    TomNameList list = tom_empty_list_concTomName();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      TomName term = (TomName) elt;
      list = tom_cons_list_concTomName(term,tom_append_list_concTomName(list,tom_empty_list_concTomName()));
    }
    return list;
  }

  public static SlotList makeSlotList(List argumentList) {
    SlotList list = tom_empty_list_concSlot();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      Slot term = (Slot) elt;
      list = tom_cons_list_concSlot(term,tom_append_list_concSlot(list,tom_empty_list_concSlot()));
    }
    return list;
  }

  public static PairNameDeclList makePairNameDeclList(List argumentList) {
    PairNameDeclList list = tom_empty_list_concPairNameDecl();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      PairNameDecl term = (PairNameDecl) elt;
      list = tom_cons_list_concPairNameDecl(term,tom_append_list_concPairNameDecl(list,tom_empty_list_concPairNameDecl()));
    }
    return list;
  }

  public static PatternInstructionList makePatternInstructionList(List argumentList) {
    PatternInstructionList list = tom_empty_list_concPatternInstruction();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      PatternInstruction term;
      term = (PatternInstruction)elt;
      list = tom_cons_list_concPatternInstruction(term,tom_append_list_concPatternInstruction(list,tom_empty_list_concPatternInstruction()));
    }
    return list;
  }

  public static TomVisitList makeTomVisitList(List argumentList) {
    TomVisitList list = tom_empty_list_concTomVisit();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      TomVisit term;
      term = (TomVisit)elt;
      list = tom_cons_list_concTomVisit(term,tom_append_list_concTomVisit(list,tom_empty_list_concTomVisit()));
    }
    return list;
  }
   
public static TomSymbol makeSymbol(String symbolName, TomType resultType, TomTypeList typeList, PairNameDeclList pairNameDeclList,
                              List optionList) {
    TomType type;
    TomName name = tom_make_Name(symbolName);
    type = resultType;
    TomType typesToType =  tom_make_TypesToType(typeList,type); 
    OptionList options = makeOptionList(optionList);
    return tom_make_Symbol(name,typesToType,pairNameDeclList,options);
  }

  public static OptionList makeOption(Option arg) {
    OptionList list = tom_empty_list_concOption();
    if(arg!= null) {
      list = tom_cons_list_concOption(arg,tom_append_list_concOption(list,tom_empty_list_concOption()));
    }
    return list;
  }

  public static ConstraintList makeConstraint(Constraint arg) {
    ConstraintList list = tom_empty_list_concConstraint();
    if(arg!= null) {
      list = tom_cons_list_concConstraint(arg,tom_append_list_concConstraint(list,tom_empty_list_concConstraint()));
    }
    return list;
  }

  public static Constraint makeAssignTo(TomName name,int line, String fileName) {
    return tom_make_AssignTo(tom_make_Variable(makeOption(makeOriginTracking(name.getString(),line,fileName)),name,tom_make_TomTypeAlone("unknown type"),tom_empty_list_concConstraint()))


;
  }
  
  public static OptionList makeOption(Option arg, Option info) {
    OptionList list = tom_empty_list_concOption();
    if(arg!= null) {
      list = tom_cons_list_concOption(arg,tom_append_list_concOption(list,tom_empty_list_concOption()));
    }
    list = tom_cons_list_concOption(info,tom_append_list_concOption(list,tom_empty_list_concOption()));
    return list;
  }

  
  private static Option makeOriginTracking(String name, int line , String fileName) {
    return tom_make_OriginTracking(tom_make_Name(name),line,fileName);
  }

  
  protected static TomType makeType(String typeNameTom, String typeNametGL) {
    TomType typeTom = tom_make_ASTTomType(typeNameTom);
    TomType sortTL  = tom_make_TLType(tom_make_ITL(typeNametGL));
    return tom_make_Type(typeTom,sortTL);
  }
  
    /*
     * create an <sort> symbol
     * where <sort> could be int. double or String  
     */
  private static void makeSortSymbol(SymbolTable symbolTable,
                             String sort,
                             String value, List optionList) {
    TomTypeList typeList = tom_empty_list_concTomType();
    PairNameDeclList pairSlotDeclList = tom_empty_list_concPairNameDecl();
    TomSymbol astSymbol = makeSymbol(value,tom_make_TomTypeAlone(sort),typeList,pairSlotDeclList,optionList);
    symbolTable.putSymbol(value,astSymbol);
  }
  
    /*
     * create an integer symbol
     */
  public static void makeIntegerSymbol(SymbolTable symbolTable,
                                String value, List optionList) {
    String sort = "int";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a long symbol
     */
  public static void makeLongSymbol(SymbolTable symbolTable,
                             String value, List optionList) {
    String sort = "long";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a char symbol
     */
  public static void makeCharSymbol(SymbolTable symbolTable,
                             String value, List optionList) {
    String sort = "char";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }
    /*
     * create a double symbol
     */
  public static void makeDoubleSymbol(SymbolTable symbolTable,
                               String value, List optionList) {
    String sort = "double";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a string symbol
     */
  public static void makeStringSymbol(SymbolTable symbolTable,
                               String value, List optionList) {
    String sort = "String";
    makeSortSymbol(symbolTable, sort, value, optionList);
  } 
  
    /*
     * update the root of lhs: it becomes a defined symbol
     */
  public static TomSymbol updateDefinedSymbol(SymbolTable symbolTable, TomTerm term) {
    if(term.isTermAppl() || term.isRecordAppl()) {
      String key = term.getNameList().getHeadconcTomName().getString();
      TomSymbol symbol = symbolTable.getSymbolFromName(key);
      if (symbol != null) {
        OptionList optionList = symbol.getOption();
        optionList = tom_append_list_concOption(optionList,tom_cons_list_concOption(tom_make_DefinedSymbol(),tom_empty_list_concOption()));
        symbolTable.putSymbol(key,symbol.setOption(optionList));
        return symbol;
      }
    }
    return null;
  }

  public static TargetLanguage reworkTLCode(TargetLanguage code, boolean pretty) {
    if(!pretty){
      String newTlCode = code.getCode();      
      newTlCode = newTlCode.replace('\n', ' ');
      newTlCode = newTlCode.replace('\t', ' ');
      newTlCode = newTlCode.replace('\r', ' ');
        //System.out.println("reworking"+newTlCode);
      return code.setCode(newTlCode);
    } else
      return code;
  }

  public static TomName makeName(String slotName) {
    if(slotName.length()>0)
      return tom_make_Name(slotName);
    else
      return tom_make_EmptyName();
  }

  public static String encodeXMLString(SymbolTable symbolTable, String name) {
    name = "\"" + name + "\"";
    makeStringSymbol(symbolTable,name, new LinkedList());
    return name;
  }

  public static String makeTomVariableName(String name) {
    return "tom_" + name;
  }

  public static TomList metaEncodeTermList(SymbolTable symbolTable,TomList list) {
     if(list instanceof  tom.engine.adt.tomterm.types.TomList ) { { tom.engine.adt.tomterm.types.TomList  tom_match1_1=(( tom.engine.adt.tomterm.types.TomList )list); if ( ( tom_is_fun_sym_concTomTerm(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match1_1_list1=tom_match1_1; if (tom_is_empty_concTomTerm_TomList(tom_match1_1_list1)) { if ( true ) {
 return tom_empty_list_concTomTerm(); } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match1_1_list1=tom_match1_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match1_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_get_head_concTomTerm_TomList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_concTomTerm_TomList(tom_match1_1_list1); { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match1_1_list1; if ( true ) {

        TomList tl = metaEncodeTermList(symbolTable,tom_tail);
        return tom_cons_list_concTomTerm(metaEncodeXMLAppl(symbolTable,tom_head),tom_append_list_concTomTerm(tl,tom_empty_list_concTomTerm()));
       } } } } } } } }

    return list;
  }

  public static TomTerm encodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * encode a String into a quoted-string
       * Appl(...,Name("string"),...) becomes
       * Appl(...,Name("\"string\""),...)
       */
    TomNameList newNameList = tom_empty_list_concTomName();
     if(term instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match2_1=(( tom.engine.adt.tomterm.types.TomTerm )term); if ( ( tom_is_fun_sym_RecordAppl(tom_match2_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match2_1_NameList=tom_get_slot_RecordAppl_NameList(tom_match2_1); if ( ( tom_is_fun_sym_concTomName(tom_match2_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match2_1_NameList_list1=tom_match2_1_NameList; { tom.engine.adt.tomname.types.TomNameList  tom_match2_1_NameList_begin1=tom_match2_1_NameList_list1; { tom.engine.adt.tomname.types.TomNameList  tom_match2_1_NameList_end1=tom_match2_1_NameList_list1; { while (!(tom_is_empty_concTomName_TomNameList(tom_match2_1_NameList_end1))) {tom_match2_1_NameList_list1=tom_match2_1_NameList_end1; { { tom.engine.adt.tomname.types.TomName  tom_match2_1_NameList_2=tom_get_head_concTomName_TomNameList(tom_match2_1_NameList_list1);tom_match2_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match2_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match2_1_NameList_2) ||  false  ) ) { { String  tom_match2_1_NameList_2_String=tom_get_slot_Name_String(tom_match2_1_NameList_2); { String  tom_name=tom_match2_1_NameList_2_String; if ( true ) {

        newNameList = tom_append_list_concTomName(newNameList,tom_cons_list_concTomName(tom_make_Name(encodeXMLString(symbolTable,tom_name)),tom_empty_list_concTomName()));
       } } } } }tom_match2_1_NameList_end1=tom_get_tail_concTomName_TomNameList(tom_match2_1_NameList_end1); } }tom_match2_1_NameList_list1=tom_match2_1_NameList_begin1; } } } } } } } } }

    term = term.setNameList(newNameList);
      //System.out.println("encodeXMLAppl = " + term);
    return term;
  }

  public static TomTerm metaEncodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * meta-encode a String into a TextNode
       * Appl(...,Name("\"string\""),...) becomes
       * Appl(...,Name("TextNode"),[Appl(...,Name("\"string\""),...)],...)
       */
      //System.out.println("metaEncode: " + term);
     if(term instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1=(( tom.engine.adt.tomterm.types.TomTerm )term); if ( ( tom_is_fun_sym_RecordAppl(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match3_1_NameList=tom_get_slot_RecordAppl_NameList(tom_match3_1); if ( ( tom_is_fun_sym_concTomName(tom_match3_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match3_1_NameList_list1=tom_match3_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match3_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match3_1_NameList_list1);tom_match3_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match3_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match3_1_NameList_1) ||  false  ) ) { { String  tom_match3_1_NameList_1_String=tom_get_slot_Name_String(tom_match3_1_NameList_1); { String  tom_tomName=tom_match3_1_NameList_1_String; if (tom_is_empty_concTomName_TomNameList(tom_match3_1_NameList_list1)) { if ( true ) {

          //System.out.println("tomName = " + tomName);
        TomSymbol tomSymbol = symbolTable.getSymbolFromName(tom_tomName);
        if(tomSymbol != null) {
          if(symbolTable.isStringType(TomBase.getTomType(TomBase.getSymbolCodomain(tomSymbol)))) {
            Option info = tom_make_OriginTracking(tom_make_Name(Constants.TEXT_NODE),-1,"unknown filename");
            term = tom_make_RecordAppl(ASTFactory.makeOption(info),tom_cons_list_concTomName(tom_make_Name(Constants.TEXT_NODE),tom_empty_list_concTomName()),tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_DATA),term),tom_empty_list_concSlot()),tom_empty_list_concConstraint())

;
              //System.out.println("metaEncodeXmlAppl = " + term);
          }
        }
       } } } } } } } } } } } } }

    return term;
  }

  public static boolean isExplicitTermList(LinkedList childs) {
    if(childs.size() == 1) {
      TomTerm term = (TomTerm) childs.getFirst();
      //System.out.println("isExplicitTermList: " + term);
       if(term instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match4_1=(( tom.engine.adt.tomterm.types.TomTerm )term); if ( ( tom_is_fun_sym_RecordAppl(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match4_1_NameList=tom_get_slot_RecordAppl_NameList(tom_match4_1); if ( ( tom_is_fun_sym_concTomName(tom_match4_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match4_1_NameList_list1=tom_match4_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match4_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match4_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match4_1_NameList_list1);tom_match4_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match4_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match4_1_NameList_1) ||  false  ) ) { { String  tom_match4_1_NameList_1_String=tom_get_slot_Name_String(tom_match4_1_NameList_1); if ( ( tom_terms_equal_String("", tom_match4_1_NameList_1_String) ||  false  ) ) { if (tom_is_empty_concTomName_TomNameList(tom_match4_1_NameList_list1)) { if ( true ) {
 
          return true;
         } } } } } } } } } } } if ( ( tom_is_fun_sym_TermAppl(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match4_1_NameList=tom_get_slot_TermAppl_NameList(tom_match4_1); if ( ( tom_is_fun_sym_concTomName(tom_match4_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match4_1_NameList_list1=tom_match4_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match4_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match4_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match4_1_NameList_list1);tom_match4_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match4_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match4_1_NameList_1) ||  false  ) ) { { String  tom_match4_1_NameList_1_String=tom_get_slot_Name_String(tom_match4_1_NameList_1); if ( ( tom_terms_equal_String("", tom_match4_1_NameList_1_String) ||  false  ) ) { if (tom_is_empty_concTomName_TomNameList(tom_match4_1_NameList_list1)) { if ( true ) {
 
          return true;
         } } } } } } } } } } } } }

    }
    return false;
  }
  
  public static LinkedList metaEncodeExplicitTermList(SymbolTable symbolTable, TomTerm term) {
    LinkedList list = new LinkedList();
     if(term instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1=(( tom.engine.adt.tomterm.types.TomTerm )term); if ( ( tom_is_fun_sym_RecordAppl(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_NameList=tom_get_slot_RecordAppl_NameList(tom_match5_1); { tom.engine.adt.tomslot.types.SlotList  tom_match5_1_Slots=tom_get_slot_RecordAppl_Slots(tom_match5_1); if ( ( tom_is_fun_sym_concTomName(tom_match5_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_NameList_list1=tom_match5_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match5_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match5_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match5_1_NameList_list1);tom_match5_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match5_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match5_1_NameList_1) ||  false  ) ) { { String  tom_match5_1_NameList_1_String=tom_get_slot_Name_String(tom_match5_1_NameList_1); if ( ( tom_terms_equal_String("", tom_match5_1_NameList_1_String) ||  false  ) ) { if (tom_is_empty_concTomName_TomNameList(tom_match5_1_NameList_list1)) { { tom.engine.adt.tomslot.types.SlotList  tom_args=tom_match5_1_Slots; if ( true ) {

        while(!tom_args.isEmptyconcSlot()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHeadconcSlot().getAppl()));
          tom_args= tom_args.getTailconcSlot();
        }
        return list;
       } } } } } } } } } } } } } if ( ( tom_is_fun_sym_TermAppl(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_NameList=tom_get_slot_TermAppl_NameList(tom_match5_1); { tom.engine.adt.tomterm.types.TomList  tom_match5_1_Args=tom_get_slot_TermAppl_Args(tom_match5_1); if ( ( tom_is_fun_sym_concTomName(tom_match5_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_NameList_list1=tom_match5_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match5_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match5_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match5_1_NameList_list1);tom_match5_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match5_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match5_1_NameList_1) ||  false  ) ) { { String  tom_match5_1_NameList_1_String=tom_get_slot_Name_String(tom_match5_1_NameList_1); if ( ( tom_terms_equal_String("", tom_match5_1_NameList_1_String) ||  false  ) ) { if (tom_is_empty_concTomName_TomNameList(tom_match5_1_NameList_list1)) { { tom.engine.adt.tomterm.types.TomList  tom_args=tom_match5_1_Args; if ( true ) {


        while(!tom_args.isEmptyconcTomTerm()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHeadconcTomTerm()));
          tom_args= tom_args.getTailconcTomTerm();
        }
        return list;
       } } } } } } } } } } } } } } }

		//System.out.println("metaEncodeExplicitTermList: strange case: " + term);
		list.add(term);
		return list;
  }

  public static TomTerm buildList(TomName name,TomList args) {
     if(args instanceof  tom.engine.adt.tomterm.types.TomList ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1=(( tom.engine.adt.tomterm.types.TomList )args); if ( ( tom_is_fun_sym_concTomTerm(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_list1=tom_match6_1; if (tom_is_empty_concTomTerm_TomList(tom_match6_1_list1)) { if ( true ) {

        return tom_make_BuildEmptyList(name);
       } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_list1=tom_match6_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match6_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_1=tom_get_head_concTomTerm_TomList(tom_match6_1_list1);tom_match6_1_list1=tom_get_tail_concTomTerm_TomList(tom_match6_1_list1); if ( ( tom_is_fun_sym_VariableStar(tom_match6_1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_match6_1_1; { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match6_1_list1; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return tom_make_BuildAppendList(name,tom_head,subList);
       } } } } } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_list1=tom_match6_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match6_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_1=tom_get_head_concTomTerm_TomList(tom_match6_1_list1);tom_match6_1_list1=tom_get_tail_concTomTerm_TomList(tom_match6_1_list1); if ( ( tom_is_fun_sym_Composite(tom_match6_1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_1_Args=tom_get_slot_Composite_Args(tom_match6_1_1); if ( ( tom_is_fun_sym_concTomTerm(tom_match6_1_1_Args) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_1_Args_list1=tom_match6_1_1_Args; { tom.engine.adt.tomterm.types.TomList  tom_match6_1_1_Args_begin1=tom_match6_1_1_Args_list1; { tom.engine.adt.tomterm.types.TomList  tom_match6_1_1_Args_end1=tom_match6_1_1_Args_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match6_1_1_Args_end1))) {tom_match6_1_1_Args_list1=tom_match6_1_1_Args_end1; { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_1_Args_2=tom_get_head_concTomTerm_TomList(tom_match6_1_1_Args_list1);tom_match6_1_1_Args_list1=tom_get_tail_concTomTerm_TomList(tom_match6_1_1_Args_list1); if ( ( tom_is_fun_sym_VariableStar(tom_match6_1_1_Args_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_match6_1_1_Args_2; if (tom_is_empty_concTomTerm_TomList(tom_match6_1_1_Args_list1)) { { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match6_1_list1; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return tom_make_BuildAppendList(name,tom_head,subList);
       } } } } } }tom_match6_1_1_Args_end1=tom_get_tail_concTomTerm_TomList(tom_match6_1_1_Args_end1); } }tom_match6_1_1_Args_list1=tom_match6_1_1_Args_begin1; } } } } } } } } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_list1=tom_match6_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match6_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_1=tom_get_head_concTomTerm_TomList(tom_match6_1_list1);tom_match6_1_list1=tom_get_tail_concTomTerm_TomList(tom_match6_1_list1); if ( ( tom_is_fun_sym_Composite(tom_match6_1_1) ||  ( tom_is_fun_sym_Variable(tom_match6_1_1) ||  ( tom_is_fun_sym_BuildConstant(tom_match6_1_1) ||  ( tom_is_fun_sym_BuildTerm(tom_match6_1_1) ||  false  )  )  )  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_match6_1_1; { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match6_1_list1; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return tom_make_BuildConsList(name,tom_head,subList);
       } } } } } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_list1=tom_match6_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match6_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_1=tom_get_head_concTomTerm_TomList(tom_match6_1_list1);tom_match6_1_list1=tom_get_tail_concTomTerm_TomList(tom_match6_1_list1); if ( ( tom_is_fun_sym_TargetLanguageToTomTerm(tom_match6_1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match6_1_list1; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return subList;
       } } } } } } } } }



    throw new TomRuntimeException("buildList strange term: " + args);
     
  }

  public static TomTerm buildArray(TomName name,TomList args) {
    return buildArray(name,reverse(args),0);
  }

  private static TomTerm buildArray(TomName name,TomList args, int size) {
     if(args instanceof  tom.engine.adt.tomterm.types.TomList ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1=(( tom.engine.adt.tomterm.types.TomList )args); if ( ( tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1_list1=tom_match7_1; if (tom_is_empty_concTomTerm_TomList(tom_match7_1_list1)) { if ( true ) {

        return tom_make_BuildEmptyArray(name,size);
       } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1_list1=tom_match7_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1_1=tom_get_head_concTomTerm_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_list1); if ( ( tom_is_fun_sym_VariableStar(tom_match7_1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_match7_1_1; { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match7_1_list1; if ( true ) {


          /*System.out.println("head = " + head);*/
        TomTerm subList = buildArray(name,tom_tail,size+1);
        return tom_make_BuildAppendArray(name,tom_head,subList);
       } } } } } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1_list1=tom_match7_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1_1=tom_get_head_concTomTerm_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_list1); if ( ( tom_is_fun_sym_Composite(tom_match7_1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1_1_Args=tom_get_slot_Composite_Args(tom_match7_1_1); if ( ( tom_is_fun_sym_concTomTerm(tom_match7_1_1_Args) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1_1_Args_list1=tom_match7_1_1_Args; { tom.engine.adt.tomterm.types.TomList  tom_match7_1_1_Args_begin1=tom_match7_1_1_Args_list1; { tom.engine.adt.tomterm.types.TomList  tom_match7_1_1_Args_end1=tom_match7_1_1_Args_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_1_Args_end1))) {tom_match7_1_1_Args_list1=tom_match7_1_1_Args_end1; { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1_1_Args_2=tom_get_head_concTomTerm_TomList(tom_match7_1_1_Args_list1);tom_match7_1_1_Args_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_1_Args_list1); if ( ( tom_is_fun_sym_VariableStar(tom_match7_1_1_Args_2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_match7_1_1_Args_2; if (tom_is_empty_concTomTerm_TomList(tom_match7_1_1_Args_list1)) { { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match7_1_list1; if ( true ) {


          /*System.out.println("head = " + head);*/
        TomTerm subList = buildArray(name,tom_tail,size+1);
        return tom_make_BuildAppendArray(name,tom_head,subList);
       } } } } } }tom_match7_1_1_Args_end1=tom_get_tail_concTomTerm_TomList(tom_match7_1_1_Args_end1); } }tom_match7_1_1_Args_list1=tom_match7_1_1_Args_begin1; } } } } } } } } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1_list1=tom_match7_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1_1=tom_get_head_concTomTerm_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_list1); if ( ( tom_is_fun_sym_Composite(tom_match7_1_1) ||  ( tom_is_fun_sym_Variable(tom_match7_1_1) ||  ( tom_is_fun_sym_BuildConstant(tom_match7_1_1) ||  ( tom_is_fun_sym_BuildTerm(tom_match7_1_1) ||  false  )  )  )  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_head=tom_match7_1_1; { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match7_1_list1; if ( true ) {


        TomTerm subList = buildArray(name,tom_tail,size+1);
        return tom_make_BuildConsArray(name,tom_head,subList);
       } } } } } } } } if ( ( tom_is_fun_sym_concTomTerm(tom_match7_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match7_1_list1=tom_match7_1; if (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_list1))) { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1_1=tom_get_head_concTomTerm_TomList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_list1); if ( ( tom_is_fun_sym_TargetLanguageToTomTerm(tom_match7_1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_tail=tom_match7_1_list1; if ( true ) {


        TomTerm subList = buildArray(name,tom_tail,size);
        return subList;
       } } } } } } } } }



    throw new TomRuntimeException("buildArray strange term: " + args);
     
  }

}
