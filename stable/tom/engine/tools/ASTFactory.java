/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.tools;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import tom.engine.TomBase;
import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.xml.Constants;
import tom.engine.exception.TomRuntimeException;
import aterm.ATerm;

public class ASTFactory {
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_make_Name( String  t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_Name(t0); }private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomsignature.types.SlotList t) {  return (t!= null) && t.isSortSlotList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_empty_list_concSlot() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static  tom.engine.adt.tomsignature.types.SlotList tom_cons_list_concSlot( tom.engine.adt.tomsignature.types.Slot e,  tom.engine.adt.tomsignature.types.SlotList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private static  tom.engine.adt.tomsignature.types.Slot tom_get_head_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_tail_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getTail() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_append_list_concSlot( tom.engine.adt.tomsignature.types.SlotList l1,  tom.engine.adt.tomsignature.types.SlotList l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slice_concSlot( tom.engine.adt.tomsignature.types.SlotList begin,  tom.engine.adt.tomsignature.types.SlotList end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomsignature.types.SlotList)tom_get_slice_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Slot tom_make_PairSlotAppl( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_PairSlotAppl(t0, t1); }private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Option tom_make_OriginTracking( tom.engine.adt.tomsignature.types.TomName t0,  int  t1,  String  t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_OriginTracking(t0, t1, t2); }private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomsignature.types.TomList t) {  return (t!= null) && t.isSortTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_empty_list_concTomTerm() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static  tom.engine.adt.tomsignature.types.TomList tom_cons_list_concTomTerm( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_head_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_append_list_concTomTerm( tom.engine.adt.tomsignature.types.TomList l1,  tom.engine.adt.tomsignature.types.TomList l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomList tom_get_slice_concTomTerm( tom.engine.adt.tomsignature.types.TomList begin,  tom.engine.adt.tomsignature.types.TomList end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomList)tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomsignature.types.TomList)tom_get_slice_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_is_fun_sym_emptyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_make_emptyTomList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static boolean tom_is_fun_sym_manyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_make_manyTomList( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_manyTomList_head( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_manyTomList_tail( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildAppendArray( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildAppendArray(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildConsArray( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConsArray(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildEmptyArray( tom.engine.adt.tomsignature.types.TomName t0,  int  t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildEmptyArray(t0, t1); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildAppendList( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildAppendList(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildConsList( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConsList(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildEmptyList( tom.engine.adt.tomsignature.types.TomName t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildEmptyList(t0); }private static boolean tom_is_fun_sym_BuildTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildTerm() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildTerm_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_BuildTerm_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  String  tom_get_slot_BuildTerm_moduleName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getModuleName() ;}private static boolean tom_is_fun_sym_BuildConstant( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildConstant() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildConstant_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_Composite( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isComposite() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Composite_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static boolean tom_is_fun_sym_TargetLanguageToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTargetLanguageToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage tom_get_slot_TargetLanguageToTomTerm_tl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTl() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_RecordAppl( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.NameList t1,  tom.engine.adt.tomsignature.types.SlotList t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_RecordAppl(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTermAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_TermAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_TermAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_TermAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_TermAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}  
   // Suppresses default constructor, ensuring non-instantiability.
  private ASTFactory() {
  }

  protected static TomSignatureFactory tsf() {
		return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance());
  }

  protected static TomList cons(TomTerm t, TomList l) {
    return tom_cons_list_concTomTerm(t,tom_append_list_concTomTerm(l,tom_empty_list_concTomTerm()));
  }

  protected static TomList append(TomTerm t, TomList l) {
    return tom_append_list_concTomTerm(l,tom_cons_list_concTomTerm(t,tom_empty_list_concTomTerm()));
  }

  public static TomList makeList(Collection c) {
    Object array[] = c.toArray();
    TomList list = tsf().makeTomList();
    for(int i=array.length-1; i>=0 ; i--) {
      ATerm elt = (ATerm)array[i];
      TomTerm term;
      if(elt instanceof TargetLanguage) {
        term = tsf().makeTomTerm_TargetLanguageToTomTerm((TargetLanguage)elt);
      } else if(elt instanceof TomType) {
        term = tsf().makeTomTerm_TomTypeToTomTerm((TomType)elt);
      } else if(elt instanceof Declaration) {
        term = tsf().makeTomTerm_DeclarationToTomTerm((Declaration)elt);
      } else if(elt instanceof Expression) {
        term = tsf().makeTomTerm_ExpressionToTomTerm((Expression)elt);
      } else if(elt instanceof TomName) {
        term = tsf().makeTomTerm_TomNameToTomTerm((TomName)elt);
      } else if(elt instanceof Instruction) {
        term = tsf().makeTomTerm_InstructionToTomTerm((Instruction)elt);
      } else {
        term = (TomTerm)elt;
      }
      list = cons(term,list);
    }
    return list;
  }

  public static InstructionList makeInstructionList(Collection c) {
    Object array[] = c.toArray();
    InstructionList list = tsf().makeInstructionList();
    for(int i=array.length-1; i>=0 ; i--) {
      ATerm elt = (ATerm)array[i];
      Instruction term;
      if(elt instanceof TargetLanguage) {
        term = tsf().makeInstruction_TargetLanguageToInstruction((TargetLanguage)elt);
      } else if(elt instanceof TomTerm) {
        term = tsf().makeInstruction_TomTermToInstruction((TomTerm)elt);
          //System.out.println("term   = " + term);
      } else if(elt instanceof Instruction) {
        term = (Instruction)elt;
      } else {
        System.out.println("elt   = " + elt);
        term = (Instruction)elt;
      }
      list = tsf().makeInstructionList(term,list);
    }
    return list;
  }

  public static OptionList makeOptionList(List argumentList) {
    OptionList list = tsf().makeOptionList();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      ATerm elt = (ATerm)argumentList.get(i);
      Option term;
      if(elt instanceof TomName) {
        term = tsf().makeOption_TomNameToOption((TomName)elt);
      } else if(elt instanceof Declaration) {
        term = tsf().makeOption_DeclarationToOption((Declaration)elt);
      } else if(elt instanceof TomTerm) {
        term = tsf().makeOption_TomTermToOption((TomTerm)elt);
      } else {
        term = (Option)elt;
      }
      list = tsf().makeOptionList(term,list);
    }
    return list;
  }

  public static ConstraintList makeConstraintList(List argumentList) {
    ConstraintList list = tsf().makeConstraintList();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      ATerm elt = (ATerm)argumentList.get(i);
      Constraint term;
      term = (Constraint)elt;
      list = tsf().makeConstraintList(term,list);
    }
    return list;
  }

  public static NameList makeNameList(List argumentList) {
    NameList list = tsf().makeNameList();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      ATerm elt = (ATerm)argumentList.get(i);
      TomName term = (TomName) elt;
      list = tsf().makeNameList(term,list);
    }
    return list;
  }

  public static SlotList makeSlotList(List argumentList) {
    SlotList list = tsf().makeSlotList();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      ATerm elt = (ATerm)argumentList.get(i);
      Slot term = (Slot) elt;
      list = tsf().makeSlotList(term,list);
    }
    return list;
  }

  public static PairNameDeclList makePairNameDeclList(List argumentList) {
    PairNameDeclList list = tsf().makePairNameDeclList();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      ATerm elt = (ATerm)argumentList.get(i);
      PairNameDecl term = (PairNameDecl) elt;
      list = tsf().makePairNameDeclList(term,list);
    }
    return list;
  }

  public static PatternInstructionList makePatternInstructionList(List argumentList) {
    PatternInstructionList list = tsf().makePatternInstructionList();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      ATerm elt = (ATerm)argumentList.get(i);
      PatternInstruction term;
      term = (PatternInstruction)elt;
      list = tsf().makePatternInstructionList(term,list);
    }
    return list;
  }

  public static TomVisitList makeTomVisitList(List argumentList) {
    TomVisitList list = tsf().makeTomVisitList();
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      ATerm elt = (ATerm)argumentList.get(i);
      TomVisit term;
      term = (TomVisit)elt;
      list = tsf().makeTomVisitList(term,list);
    }
    return list;
  }
  
  public static TomTerm makeVariable(String name, String type) {
    return makeVariable(makeOption(), name, type);      
  }

  public static TomTerm makeVariable(OptionList option, String name, String type) {
    return tsf().makeTomTerm_Variable(option, tsf().makeTomName_Name(name), tsf().makeTomType_TomTypeAlone(type), tsf().makeConstraintList());  
  }

  public static TomTerm makeVariable(OptionList option, TomName name, TomType type) {
    return tsf().makeTomTerm_Variable(option, name, type, tsf().makeConstraintList());  
  }

  public static TomTerm makeVariableStar(OptionList option, String name, String type) {
    return tsf().makeTomTerm_VariableStar(option, tsf().makeTomName_Name(name), tsf().makeTomType_TomTypeAlone(type), tsf().makeConstraintList());  
  }

  public static TomTerm makeVariableStar(OptionList option, TomName name, TomType type) {
    return tsf().makeTomTerm_VariableStar(option, name, type, tsf().makeConstraintList());  
  }

  public static TomTerm makeVariableStar(OptionList option, String name, String type, ConstraintList constraintList) {
    return tsf().makeTomTerm_VariableStar(option, tsf().makeTomName_Name(name), tsf().makeTomType_TomTypeAlone(type), constraintList);  
  }

  public static TomTerm makeVariableStar(OptionList option, TomName name, TomType type, ConstraintList constraintList) {
    return tsf().makeTomTerm_VariableStar(option, name, type, constraintList);  
  }

  public static TomTerm makeUnamedVariableStar(OptionList option, String type, ConstraintList constraintList) {
    return tsf().makeTomTerm_UnamedVariableStar(option, tsf().makeTomType_TomTypeAlone(type),constraintList);  
  }

  public static TomSymbol makeSymbol(String symbolName, TomType resultType, TomTypeList typeList, PairNameDeclList pairNameDeclList,
                              List optionList) {
    TomType type;
    TomName name = tsf().makeTomName_Name(symbolName);
    type = resultType;
    TomType typesToType =  tsf().makeTomType_TypesToType(typeList,type); 
    OptionList options = makeOptionList(optionList);
    return tsf().makeTomSymbol_Symbol(name,typesToType,pairNameDeclList,options);
  }

  public static OptionList makeOption() {
    return tsf().makeOptionList();
  }

  public static OptionList makeOption(Option arg) {
    OptionList list = tsf().makeOptionList();
    if(arg!= null) {
      list = tsf().makeOptionList(arg,list);
    }
    return list;
  }

  public static ConstraintList makeConstraint() {
    return tsf().makeConstraintList();
  }

  public static ConstraintList makeConstraint(Constraint arg) {
    ConstraintList list = tsf().makeConstraintList();
    if(arg!= null) {
      list = tsf().makeConstraintList(arg,list);
    }
    return list;
  }

  public static Constraint makeAssignTo(TomName name,int line, String fileName) {
    return tsf().makeConstraint_AssignTo(tsf().makeTomTerm_Variable(makeOption(makeOriginTracking(name.getString(), line , fileName)),
          name,
          tsf().makeTomType_TomTypeAlone("unknown type"),
          tsf().makeConstraintList()));
  }
  
  public static OptionList makeOption(Option arg, Option info) {
    OptionList list = tsf().makeOptionList();
    if(arg!= null) {
      list = tsf().makeOptionList(arg,list);
    }
    list = tsf().makeOptionList(info,list);
    return list;
  }

  
  private static Option makeOriginTracking(String name, int line , String fileName) {
    return tom_make_OriginTracking(tom_make_Name(name),line,fileName);
  }

  
  protected static TomType makeType(String typeNameTom, String typeNametGL) {
    TomType typeTom = tsf().makeTomType_ASTTomType(typeNameTom);
    TomType sortTL  = tsf().makeTomType_TLType(tsf().makeTargetLanguage_ITL(typeNametGL));
    return tsf().makeTomType_Type(typeTom,sortTL);
  }
  
    /*
     * create an <sort> symbol
     * where <sort> could be int. double or String  
     */
  private static void makeSortSymbol(SymbolTable symbolTable,
                             String sort,
                             String value, List optionList) {
    TomTypeList typeList = tsf().makeTomTypeList();
    PairNameDeclList pairSlotDeclList = tsf().makePairNameDeclList();
    TomSymbol astSymbol = makeSymbol(value,tsf().makeTomType_TomTypeAlone(sort),typeList,pairSlotDeclList,optionList);
    symbolTable.putSymbol(value,astSymbol);
  }
  
    /*
     * create an integer symbol
     */
  public static void makeIntegerSymbol(SymbolTable symbolTable,
                                String value, List optionList) {
    String sort = "int";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a long symbol
     */
  public static void makeLongSymbol(SymbolTable symbolTable,
                             String value, List optionList) {
    String sort = "long";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a char symbol
     */
  public static void makeCharSymbol(SymbolTable symbolTable,
                             String value, List optionList) {
    String sort = "char";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }
    /*
     * create a double symbol
     */
  public static void makeDoubleSymbol(SymbolTable symbolTable,
                               String value, List optionList) {
    String sort = "double";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a string symbol
     */
  public static void makeStringSymbol(SymbolTable symbolTable,
                               String value, List optionList) {
    String sort = "String";
    makeSortSymbol(symbolTable, sort, value, optionList);
  } 
  
    /*
     * update the root of lhs: it becomes a defined symbol
     */
  public static TomSymbol updateDefinedSymbol(SymbolTable symbolTable, TomTerm term) {
    if(term.isTermAppl() || term.isRecordAppl()) {
      String key = term.getNameList().getHead().getString();
      TomSymbol symbol = symbolTable.getSymbolFromName(key);
      if (symbol != null) {
        OptionList optionList = symbol.getOption();
        optionList = (OptionList) optionList.append(tsf().makeOption_DefinedSymbol());
        symbolTable.putSymbol(key,symbol.setOption(optionList));
        return symbol;
      }
    }
    return null;
  }

  public static TargetLanguage reworkTLCode(TargetLanguage code, boolean pretty) {
    if(!pretty){
      String newTlCode = code.getCode();      
      newTlCode = newTlCode.replace('\n', ' ');
      newTlCode = newTlCode.replace('\t', ' ');
      newTlCode = newTlCode.replace('\r', ' ');
        //System.out.println("reworking"+newTlCode);
      return code.setCode(newTlCode);
    } else
      return code;
  }

  public static TomName makeName(String slotName) {
    if(slotName.length()>0)
      return tsf().makeTomName_Name(slotName);
    else
      return tsf().makeTomName_EmptyName();
  }

  public static String encodeXMLString(SymbolTable symbolTable, String name) {
    name = "\"" + name + "\"";
    makeStringSymbol(symbolTable,name, new LinkedList());
    return name;
  }

  public static String makeTomVariableName(String name) {
    return "tom_" + name;
  }

  public static TomList metaEncodeTermList(SymbolTable symbolTable,TomList list) {
     if(list instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1=(( tom.engine.adt.tomsignature.types.TomList)list); if (tom_is_fun_sym_emptyTomList(tom_match1_1) ||  false ) { if ( true ) {
 return tom_make_emptyTomList(); } } if (tom_is_fun_sym_manyTomList(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_head=tom_get_slot_manyTomList_head(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_match1_1_tail=tom_get_slot_manyTomList_tail(tom_match1_1); { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match1_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match1_1_tail; if ( true ) {

        return tom_make_manyTomList(metaEncodeXMLAppl(symbolTable,tom_head),metaEncodeTermList(symbolTable,tom_tail))
;
       } } } } } } } }

    return list;
  }

  public static TomTerm encodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * encode a String into a quoted-string
       * Appl(...,Name("string"),...) becomes
       * Appl(...,Name("\"string\""),...)
       */
    NameList newNameList = tom_empty_list_concTomName();
     if(term instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if (tom_is_fun_sym_RecordAppl(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match2_1); if (tom_is_fun_sym_concTomName(tom_match2_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList_list1=tom_match2_1_nameList; { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList_begin1=tom_match2_1_nameList_list1; { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList_end1=tom_match2_1_nameList_list1; { while (!(tom_is_empty_concTomName_NameList(tom_match2_1_nameList_end1))) {tom_match2_1_nameList_list1=tom_match2_1_nameList_end1; { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_nameList_2=tom_get_head_concTomName_NameList(tom_match2_1_nameList_list1);tom_match2_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match2_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match2_1_nameList_2) ||  false ) { { String  tom_match2_1_nameList_2_string=tom_get_slot_Name_string(tom_match2_1_nameList_2); { String  tom_name=tom_match2_1_nameList_2_string; if ( true ) {

        newNameList = (NameList)newNameList.append(tom_make_Name(encodeXMLString(symbolTable,tom_name)));
       } } } } }tom_match2_1_nameList_end1=tom_get_tail_concTomName_NameList(tom_match2_1_nameList_end1); } }tom_match2_1_nameList_list1=tom_match2_1_nameList_begin1; } } } } } } } } }

    term = term.setNameList(newNameList);
      //System.out.println("encodeXMLAppl = " + term);
    return term;
  }

  public static TomTerm metaEncodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * meta-encode a String into a TextNode
       * Appl(...,Name("\"string\""),...) becomes
       * Appl(...,Name("TextNode"),[Appl(...,Name("\"string\""),...)],...)
       */
      //System.out.println("metaEncode: " + term);
     if(term instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if (tom_is_fun_sym_RecordAppl(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match3_1); if (tom_is_fun_sym_concTomName(tom_match3_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList_list1=tom_match3_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match3_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_nameList_1=tom_get_head_concTomName_NameList(tom_match3_1_nameList_list1);tom_match3_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match3_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match3_1_nameList_1) ||  false ) { { String  tom_match3_1_nameList_1_string=tom_get_slot_Name_string(tom_match3_1_nameList_1); { String  tom_tomName=tom_match3_1_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match3_1_nameList_list1)) { if ( true ) {

          //System.out.println("tomName = " + tomName);
        TomSymbol tomSymbol = symbolTable.getSymbolFromName(tom_tomName);
        if(tomSymbol != null) {
          if(symbolTable.isStringType(TomBase.getTomType(TomBase.getSymbolCodomain(tomSymbol)))) {
            Option info = tom_make_OriginTracking(tom_make_Name(Constants.TEXT_NODE),-1,"unknown filename");
            term = tom_make_RecordAppl(ASTFactory.makeOption(info),tom_cons_list_concTomName(tom_make_Name(Constants.TEXT_NODE),tom_empty_list_concTomName()),tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_DATA),term),tom_empty_list_concSlot()),ASTFactory.tsf().makeConstraintList())

;
              //System.out.println("metaEncodeXmlAppl = " + term);
          }
        }
       } } } } } } } } } } } } }

    return term;
  }

  public static boolean isExplicitTermList(LinkedList childs) {
    if(childs.size() == 1) {
      TomTerm term = (TomTerm) childs.getFirst();
      //System.out.println("isExplicitTermList: " + term);
       if(term instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if (tom_is_fun_sym_RecordAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match4_1); if (tom_is_fun_sym_concTomName(tom_match4_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList_list1=tom_match4_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_nameList_1=tom_get_head_concTomName_NameList(tom_match4_1_nameList_list1);tom_match4_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match4_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match4_1_nameList_1) ||  false ) { { String  tom_match4_1_nameList_1_string=tom_get_slot_Name_string(tom_match4_1_nameList_1); if (tom_terms_equal_String("", tom_match4_1_nameList_1_string) ||  false ) { if (tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1)) { if ( true ) {
 
          return true;
         } } } } } } } } } } } if (tom_is_fun_sym_TermAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList=tom_get_slot_TermAppl_nameList(tom_match4_1); if (tom_is_fun_sym_concTomName(tom_match4_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList_list1=tom_match4_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_nameList_1=tom_get_head_concTomName_NameList(tom_match4_1_nameList_list1);tom_match4_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match4_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match4_1_nameList_1) ||  false ) { { String  tom_match4_1_nameList_1_string=tom_get_slot_Name_string(tom_match4_1_nameList_1); if (tom_terms_equal_String("", tom_match4_1_nameList_1_string) ||  false ) { if (tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1)) { if ( true ) {
 
          return true;
         } } } } } } } } } } } } }

    }
    return false;
  }
  
  public static LinkedList metaEncodeExplicitTermList(SymbolTable symbolTable, TomTerm term) {
    LinkedList list = new LinkedList();
     if(term instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if (tom_is_fun_sym_RecordAppl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_1); { tom.engine.adt.tomsignature.types.SlotList tom_match5_1_slots=tom_get_slot_RecordAppl_slots(tom_match5_1); if (tom_is_fun_sym_concTomName(tom_match5_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList_list1=tom_match5_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_nameList_1=tom_get_head_concTomName_NameList(tom_match5_1_nameList_list1);tom_match5_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match5_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match5_1_nameList_1) ||  false ) { { String  tom_match5_1_nameList_1_string=tom_get_slot_Name_string(tom_match5_1_nameList_1); if (tom_terms_equal_String("", tom_match5_1_nameList_1_string) ||  false ) { if (tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1)) { { tom.engine.adt.tomsignature.types.SlotList tom_args=tom_match5_1_slots; if ( true ) {

        while(!tom_args.isEmpty()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHead().getAppl()));
          tom_args= tom_args.getTail();
        }
        return list;
       } } } } } } } } } } } } } if (tom_is_fun_sym_TermAppl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList=tom_get_slot_TermAppl_nameList(tom_match5_1); { tom.engine.adt.tomsignature.types.TomList tom_match5_1_args=tom_get_slot_TermAppl_args(tom_match5_1); if (tom_is_fun_sym_concTomName(tom_match5_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList_list1=tom_match5_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_nameList_1=tom_get_head_concTomName_NameList(tom_match5_1_nameList_list1);tom_match5_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match5_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match5_1_nameList_1) ||  false ) { { String  tom_match5_1_nameList_1_string=tom_get_slot_Name_string(tom_match5_1_nameList_1); if (tom_terms_equal_String("", tom_match5_1_nameList_1_string) ||  false ) { if (tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1)) { { tom.engine.adt.tomsignature.types.TomList tom_args=tom_match5_1_args; if ( true ) {


        while(!tom_args.isEmpty()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHead()));
          tom_args= tom_args.getTail();
        }
        return list;
       } } } } } } } } } } } } } } }

		//System.out.println("metaEncodeExplicitTermList: strange case: " + term);
		list.add(term);
		return list;
  }

  public static TomTerm buildList(TomName name,TomList args) {
     if(args instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match6_1=(( tom.engine.adt.tomsignature.types.TomList)args); if (tom_is_fun_sym_emptyTomList(tom_match6_1) ||  false ) { if ( true ) {

        return tom_make_BuildEmptyList(name);
       } } if (tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if (tom_is_fun_sym_VariableStar(tom_match6_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match6_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match6_1_tail; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return tom_make_BuildAppendList(name,tom_head,subList);
       } } } } } } } if (tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if (tom_is_fun_sym_Composite(tom_match6_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args=tom_get_slot_Composite_args(tom_match6_1_head); if (tom_is_fun_sym_concTomTerm(tom_match6_1_head_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args_list1=tom_match6_1_head_args; { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args_begin1=tom_match6_1_head_args_list1; { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args_end1=tom_match6_1_head_args_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match6_1_head_args_end1))) {tom_match6_1_head_args_list1=tom_match6_1_head_args_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head_args_2=tom_get_head_concTomTerm_TomList(tom_match6_1_head_args_list1);tom_match6_1_head_args_list1=tom_get_tail_concTomTerm_TomList(tom_match6_1_head_args_list1); if (tom_is_fun_sym_VariableStar(tom_match6_1_head_args_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match6_1_head_args_2; if (tom_is_empty_concTomTerm_TomList(tom_match6_1_head_args_list1)) { { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match6_1_tail; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return tom_make_BuildAppendList(name,tom_head,subList);
       } } } } } }tom_match6_1_head_args_end1=tom_get_tail_concTomTerm_TomList(tom_match6_1_head_args_end1); } }tom_match6_1_head_args_list1=tom_match6_1_head_args_begin1; } } } } } } } } } } if (tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if (tom_is_fun_sym_Composite(tom_match6_1_head) || tom_is_fun_sym_Variable(tom_match6_1_head) || tom_is_fun_sym_BuildConstant(tom_match6_1_head) || tom_is_fun_sym_BuildTerm(tom_match6_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match6_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match6_1_tail; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return tom_make_BuildConsList(name,tom_head,subList);
       } } } } } } } if (tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if (tom_is_fun_sym_TargetLanguageToTomTerm(tom_match6_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match6_1_tail; if ( true ) {


        TomTerm subList = buildList(name,tom_tail);
        return subList;
       } } } } } } } }



    throw new TomRuntimeException("buildList strange term: " + args);
     
  }

  public static TomTerm buildArray(TomName name,TomList args) {
    return buildArray(name,(TomList)args.reverse(),0);
  }

  private static TomTerm buildArray(TomName name,TomList args, int size) {
     if(args instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1=(( tom.engine.adt.tomsignature.types.TomList)args); if (tom_is_fun_sym_emptyTomList(tom_match7_1) ||  false ) { if ( true ) {

        return tom_make_BuildEmptyArray(name,size);
       } } if (tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if (tom_is_fun_sym_VariableStar(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match7_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match7_1_tail; if ( true ) {


          /*System.out.println("head = " + head);*/
        TomTerm subList = buildArray(name,tom_tail,size+1);
        return tom_make_BuildAppendArray(name,tom_head,subList);
       } } } } } } } if (tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if (tom_is_fun_sym_Composite(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args=tom_get_slot_Composite_args(tom_match7_1_head); if (tom_is_fun_sym_concTomTerm(tom_match7_1_head_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args_list1=tom_match7_1_head_args; { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args_begin1=tom_match7_1_head_args_list1; { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args_end1=tom_match7_1_head_args_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_head_args_end1))) {tom_match7_1_head_args_list1=tom_match7_1_head_args_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head_args_2=tom_get_head_concTomTerm_TomList(tom_match7_1_head_args_list1);tom_match7_1_head_args_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_head_args_list1); if (tom_is_fun_sym_VariableStar(tom_match7_1_head_args_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match7_1_head_args_2; if (tom_is_empty_concTomTerm_TomList(tom_match7_1_head_args_list1)) { { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match7_1_tail; if ( true ) {


          /*System.out.println("head = " + head);*/
        TomTerm subList = buildArray(name,tom_tail,size+1);
        return tom_make_BuildAppendArray(name,tom_head,subList);
       } } } } } }tom_match7_1_head_args_end1=tom_get_tail_concTomTerm_TomList(tom_match7_1_head_args_end1); } }tom_match7_1_head_args_list1=tom_match7_1_head_args_begin1; } } } } } } } } } } if (tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if (tom_is_fun_sym_Composite(tom_match7_1_head) || tom_is_fun_sym_Variable(tom_match7_1_head) || tom_is_fun_sym_BuildConstant(tom_match7_1_head) || tom_is_fun_sym_BuildTerm(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match7_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match7_1_tail; if ( true ) {


        TomTerm subList = buildArray(name,tom_tail,size+1);
        return tom_make_BuildConsArray(name,tom_head,subList);
       } } } } } } } if (tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if (tom_is_fun_sym_TargetLanguageToTomTerm(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match7_1_tail; if ( true ) {


        TomTerm subList = buildArray(name,tom_tail,size);
        return subList;
       } } } } } } } }



    throw new TomRuntimeException("buildArray strange term: " + args);
     
  }

}
