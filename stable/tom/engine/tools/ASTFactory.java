/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2008, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.tools;

import java.util.*;

import tom.engine.TomBase;
import tom.engine.adt.tomterm.*;
import tom.engine.xml.Constants;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.exception.TomRuntimeException;
import aterm.ATerm;

public class ASTFactory {
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {     if( l1.isEmptyconcInstruction() ) {       return l2;     } else if( l2.isEmptyconcInstruction() ) {       return l1;     } else if(  l1.getTailconcInstruction() .isEmptyconcInstruction() ) {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( l1.getHeadconcInstruction() ,l2) ;     } else {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( l1.getHeadconcInstruction() ,tom_append_list_concInstruction( l1.getTailconcInstruction() ,l2)) ;     }   }   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end, tom.engine.adt.tominstruction.types.InstructionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcInstruction()  ||  (end== tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( begin.getHeadconcInstruction() ,( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction( begin.getTailconcInstruction() ,end,tail)) ;   }      private static   tom.engine.adt.tominstruction.types.ConstraintInstructionList  tom_append_list_concConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstructionList l1,  tom.engine.adt.tominstruction.types.ConstraintInstructionList  l2) {     if( l1.isEmptyconcConstraintInstruction() ) {       return l2;     } else if( l2.isEmptyconcConstraintInstruction() ) {       return l1;     } else if(  l1.getTailconcConstraintInstruction() .isEmptyconcConstraintInstruction() ) {       return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( l1.getHeadconcConstraintInstruction() ,l2) ;     } else {       return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( l1.getHeadconcConstraintInstruction() ,tom_append_list_concConstraintInstruction( l1.getTailconcConstraintInstruction() ,l2)) ;     }   }   private static   tom.engine.adt.tominstruction.types.ConstraintInstructionList  tom_get_slice_concConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstructionList  begin,  tom.engine.adt.tominstruction.types.ConstraintInstructionList  end, tom.engine.adt.tominstruction.types.ConstraintInstructionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcConstraintInstruction()  ||  (end== tom.engine.adt.tominstruction.types.constraintinstructionlist.EmptyconcConstraintInstruction.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( begin.getHeadconcConstraintInstruction() ,( tom.engine.adt.tominstruction.types.ConstraintInstructionList )tom_get_slice_concConstraintInstruction( begin.getTailconcConstraintInstruction() ,end,tail)) ;   }      private static   tom.engine.adt.tomtype.types.TomTypeList  tom_append_list_concTomType( tom.engine.adt.tomtype.types.TomTypeList l1,  tom.engine.adt.tomtype.types.TomTypeList  l2) {     if( l1.isEmptyconcTomType() ) {       return l2;     } else if( l2.isEmptyconcTomType() ) {       return l1;     } else if(  l1.getTailconcTomType() .isEmptyconcTomType() ) {       return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make( l1.getHeadconcTomType() ,l2) ;     } else {       return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make( l1.getHeadconcTomType() ,tom_append_list_concTomType( l1.getTailconcTomType() ,l2)) ;     }   }   private static   tom.engine.adt.tomtype.types.TomTypeList  tom_get_slice_concTomType( tom.engine.adt.tomtype.types.TomTypeList  begin,  tom.engine.adt.tomtype.types.TomTypeList  end, tom.engine.adt.tomtype.types.TomTypeList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomType()  ||  (end== tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make( begin.getHeadconcTomType() ,( tom.engine.adt.tomtype.types.TomTypeList )tom_get_slice_concTomType( begin.getTailconcTomType() ,end,tail)) ;   }      private static   tom.engine.adt.tomsignature.types.TomVisitList  tom_append_list_concTomVisit( tom.engine.adt.tomsignature.types.TomVisitList l1,  tom.engine.adt.tomsignature.types.TomVisitList  l2) {     if( l1.isEmptyconcTomVisit() ) {       return l2;     } else if( l2.isEmptyconcTomVisit() ) {       return l1;     } else if(  l1.getTailconcTomVisit() .isEmptyconcTomVisit() ) {       return  tom.engine.adt.tomsignature.types.tomvisitlist.ConsconcTomVisit.make( l1.getHeadconcTomVisit() ,l2) ;     } else {       return  tom.engine.adt.tomsignature.types.tomvisitlist.ConsconcTomVisit.make( l1.getHeadconcTomVisit() ,tom_append_list_concTomVisit( l1.getTailconcTomVisit() ,l2)) ;     }   }   private static   tom.engine.adt.tomsignature.types.TomVisitList  tom_get_slice_concTomVisit( tom.engine.adt.tomsignature.types.TomVisitList  begin,  tom.engine.adt.tomsignature.types.TomVisitList  end, tom.engine.adt.tomsignature.types.TomVisitList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomVisit()  ||  (end== tom.engine.adt.tomsignature.types.tomvisitlist.EmptyconcTomVisit.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomsignature.types.tomvisitlist.ConsconcTomVisit.make( begin.getHeadconcTomVisit() ,( tom.engine.adt.tomsignature.types.TomVisitList )tom_get_slice_concTomVisit( begin.getTailconcTomVisit() ,end,tail)) ;   }      private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2)) ;     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomName()  ||  (end== tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail)) ;   }      private static   tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList l1,  tom.engine.adt.tomterm.types.TomList  l2) {     if( l1.isEmptyconcTomTerm() ) {       return l2;     } else if( l2.isEmptyconcTomTerm() ) {       return l1;     } else if(  l1.getTailconcTomTerm() .isEmptyconcTomTerm() ) {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,l2) ;     } else {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,tom_append_list_concTomTerm( l1.getTailconcTomTerm() ,l2)) ;     }   }   private static   tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end, tom.engine.adt.tomterm.types.TomList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomTerm()  ||  (end== tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( begin.getHeadconcTomTerm() ,( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm( begin.getTailconcTomTerm() ,end,tail)) ;   }      private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if( l1.isEmptyconcOption() ) {       return l2;     } else if( l2.isEmptyconcOption() ) {       return l1;     } else if(  l1.getTailconcOption() .isEmptyconcOption() ) {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,l2) ;     } else {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,tom_append_list_concOption( l1.getTailconcOption() ,l2)) ;     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcOption()  ||  (end== tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( begin.getHeadconcOption() ,( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption( begin.getTailconcOption() ,end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;   }      private static   tom.engine.adt.tomslot.types.PairNameDeclList  tom_append_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList l1,  tom.engine.adt.tomslot.types.PairNameDeclList  l2) {     if( l1.isEmptyconcPairNameDecl() ) {       return l2;     } else if( l2.isEmptyconcPairNameDecl() ) {       return l1;     } else if(  l1.getTailconcPairNameDecl() .isEmptyconcPairNameDecl() ) {       return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make( l1.getHeadconcPairNameDecl() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make( l1.getHeadconcPairNameDecl() ,tom_append_list_concPairNameDecl( l1.getTailconcPairNameDecl() ,l2)) ;     }   }   private static   tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slice_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  begin,  tom.engine.adt.tomslot.types.PairNameDeclList  end, tom.engine.adt.tomslot.types.PairNameDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcPairNameDecl()  ||  (end== tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make( begin.getHeadconcPairNameDecl() ,( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_slice_concPairNameDecl( begin.getTailconcPairNameDecl() ,end,tail)) ;   }      private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcSlot()  ||  (end== tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;   }    
   // Suppresses default constructor, ensuring non-instantiability.
  private ASTFactory() {}

  public static TomList makeList(Collection c) {
    Object array[] = c.toArray();
    TomList list =  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ;
    for(int i=array.length-1; i>=0 ; i--) {
      Object elt = array[i];
      TomTerm term;
      if(elt instanceof TargetLanguage) {
        term =  tom.engine.adt.tomterm.types.tomterm.TargetLanguageToTomTerm.make((TargetLanguage)elt) ;
      } else if(elt instanceof TomType) {
        term =  tom.engine.adt.tomterm.types.tomterm.TomTypeToTomTerm.make((TomType)elt) ;
      } else if(elt instanceof Declaration) {
        term =  tom.engine.adt.tomterm.types.tomterm.DeclarationToTomTerm.make((Declaration)elt) ;
      } else if(elt instanceof Expression) {
        term =  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make((Expression)elt) ;
      } else if(elt instanceof TomName) {
        term =  tom.engine.adt.tomterm.types.tomterm.TomNameToTomTerm.make((TomName)elt) ;
      } else if(elt instanceof Instruction) {
        term =  tom.engine.adt.tomterm.types.tomterm.InstructionToTomTerm.make((Instruction)elt) ;
      } else {
        term = (TomTerm)elt;
      }
      list =  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(term,tom_append_list_concTomTerm(list, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() )) ;
    }
    return list;
  }

  public static InstructionList makeInstructionList(Collection c) {
    Object array[] = c.toArray();
    InstructionList list =  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ;
    for(int i=array.length-1; i>=0 ; i--) {
      Object elt = array[i];
      Instruction term;
      if(elt instanceof TargetLanguage) {
        term =  tom.engine.adt.tominstruction.types.instruction.TargetLanguageToInstruction.make((TargetLanguage)elt) ;
      } else if(elt instanceof TomTerm) {
        term =  tom.engine.adt.tominstruction.types.instruction.TomTermToInstruction.make((TomTerm)elt) ;
          //System.out.println("term   = " + term);
      } else if(elt instanceof Instruction) {
        term = (Instruction)elt;
      } else {
        /* XXX: is this an error ? if yes, it should not be that silent */
        System.out.println("elt   = " + elt);
        term = (Instruction) elt;
      }
      list =  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(term,tom_append_list_concInstruction(list, tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() )) ;
    }
    return list;
  }

  public static OptionList makeOptionList(List argumentList) {
    OptionList list =  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ;
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      Option term;
      if(elt instanceof TomName) {
        term =  tom.engine.adt.tomoption.types.option.TomNameToOption.make((TomName)elt) ;
      } else if(elt instanceof Declaration) {
        term =  tom.engine.adt.tomoption.types.option.DeclarationToOption.make((Declaration)elt) ;
      } else if(elt instanceof TomTerm) {
        term =  tom.engine.adt.tomoption.types.option.TomTermToOption.make((TomTerm)elt) ;
      } else {
        term = (Option) elt;
      }
      list =  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(term,tom_append_list_concOption(list, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() )) ;
    }
    return list;
  }

  public static ConstraintList makeConstraintList(List argumentList) {
    ConstraintList list =  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ;
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      Constraint term;
      term = (Constraint)elt;
      list =  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(term,tom_append_list_concConstraint(list, tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() )) ;
    }
    return list;
  }

  public static ConstraintInstructionList makeConstraintInstructionList(List argumentList) {
    ConstraintInstructionList list =  tom.engine.adt.tominstruction.types.constraintinstructionlist.EmptyconcConstraintInstruction.make() ;
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      ConstraintInstruction term;
      term = (ConstraintInstruction)elt;
      list =  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make(term,tom_append_list_concConstraintInstruction(list, tom.engine.adt.tominstruction.types.constraintinstructionlist.EmptyconcConstraintInstruction.make() )) ;
    }
    return list;
  }

  public static TomNameList makeNameList(List argumentList) {
    TomNameList list =  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ;
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      TomName term = (TomName) elt;
      list =  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(term,tom_append_list_concTomName(list, tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() )) ;
    }
    return list;
  }

  public static SlotList makeSlotList(List argumentList) {
    SlotList list =  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ;
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      Slot term = (Slot) elt;
      list =  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make(term,tom_append_list_concSlot(list, tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() )) ;
    }
    return list;
  }

  public static PairNameDeclList makePairNameDeclList(List argumentList) {
    PairNameDeclList list =  tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ;
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      PairNameDecl term = (PairNameDecl) elt;
      list =  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make(term,tom_append_list_concPairNameDecl(list, tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() )) ;
    }
    return list;
  }

  public static TomVisitList makeTomVisitList(List argumentList) {
    TomVisitList list =  tom.engine.adt.tomsignature.types.tomvisitlist.EmptyconcTomVisit.make() ;
    for(int i=argumentList.size()-1; i>=0 ; i--) {
      Object elt = argumentList.get(i);
      TomVisit term;
      term = (TomVisit)elt;
      list =  tom.engine.adt.tomsignature.types.tomvisitlist.ConsconcTomVisit.make(term,tom_append_list_concTomVisit(list, tom.engine.adt.tomsignature.types.tomvisitlist.EmptyconcTomVisit.make() )) ;
    }
    return list;
  }

  public static TomSymbol makeSymbol(String symbolName, TomType resultType, TomTypeList typeList,
      PairNameDeclList pairNameDeclList, List optionList) {
    return  tom.engine.adt.tomsignature.types.tomsymbol.Symbol.make( tom.engine.adt.tomname.types.tomname.Name.make(symbolName) ,  tom.engine.adt.tomtype.types.tomtype.TypesToType.make(typeList, resultType) , pairNameDeclList, makeOptionList(optionList)) ;
  }

  public static OptionList makeOption(Option arg) {
    OptionList list =  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ;
    if(arg!= null) {
      list =  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(arg,tom_append_list_concOption(list, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() )) ;
    }
    return list;
  }

  public static ConstraintList makeConstraint(Constraint arg) {
    ConstraintList list =  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ;
    if(arg!= null) {
      list =  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(arg,tom_append_list_concConstraint(list, tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() )) ;
    }
    return list;
  }

  public static Constraint makeAssignTo(TomName name,int line, String fileName) {
    return  tom.engine.adt.tomconstraint.types.constraint.AssignTo.make( tom.engine.adt.tomterm.types.tomterm.Variable.make(makeOption(makeOriginTracking(name.getString(),line,fileName)), name,  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("unknown type") ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ) 


;
  }

  public static Constraint makeStorePosition(TomName name,int line, String fileName) {
    return  tom.engine.adt.tomconstraint.types.constraint.AssignPositionTo.make( tom.engine.adt.tomterm.types.tomterm.Variable.make(makeOption(makeOriginTracking(name.getString(),line,fileName)), name,  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("unknown type") ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ) 


;
  }

  public static OptionList makeOption(Option arg, Option info) {
    OptionList list =  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ;
    if(arg!= null) {
      list =  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(arg,tom_append_list_concOption(list, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() )) ;
    }
    list =  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(info,tom_append_list_concOption(list, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() )) ;
    return list;
  }

  private static Option makeOriginTracking(String name, int line , String fileName) {
    return  tom.engine.adt.tomoption.types.option.OriginTracking.make( tom.engine.adt.tomname.types.tomname.Name.make(name) , line, fileName) ;
  }

  protected static TomType makeType(String typeNameTom, String typeNametGL) {
    TomType typeTom =  tom.engine.adt.tomtype.types.tomtype.ASTTomType.make(typeNameTom) ;
    TomType sortTL  =  tom.engine.adt.tomtype.types.tomtype.TLType.make( tom.engine.adt.tomsignature.types.targetlanguage.ITL.make(typeNametGL) ) ;
    return  tom.engine.adt.tomtype.types.tomtype.Type.make(typeTom, sortTL) ;
  }

    /*
     * create an <sort> symbol
     * where <sort> could be int. double or String
     */
  private static void makeSortSymbol(SymbolTable symbolTable,
                             String sort,
                             String value, List optionList) {
    TomTypeList typeList =  tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType.make() ;
    PairNameDeclList pairSlotDeclList =  tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ;
    TomSymbol astSymbol = makeSymbol(value, tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make(sort) ,typeList,pairSlotDeclList,optionList);
    symbolTable.putSymbol(value,astSymbol);
  }

    /*
     * create an integer symbol
     */
  public static void makeIntegerSymbol(SymbolTable symbolTable,
                                String value, List optionList) {
    String sort = "int";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a long symbol
     */
  public static void makeLongSymbol(SymbolTable symbolTable,
                             String value, List optionList) {
    String sort = "long";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a char symbol
     */
  public static void makeCharSymbol(SymbolTable symbolTable,
                             String value, List optionList) {
    String sort = "char";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }
    /*
     * create a double symbol
     */
  public static void makeDoubleSymbol(SymbolTable symbolTable,
                               String value, List optionList) {
    String sort = "double";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * create a string symbol
     */
  public static void makeStringSymbol(SymbolTable symbolTable,
                               String value, List optionList) {
    String sort = "String";
    makeSortSymbol(symbolTable, sort, value, optionList);
  }

    /*
     * update the root of lhs: it becomes a defined symbol
     */
  public static TomSymbol updateDefinedSymbol(SymbolTable symbolTable, TomTerm term) {
    if(term.isTermAppl() || term.isRecordAppl()) {
      String key = term.getNameList().getHeadconcTomName().getString();
      TomSymbol symbol = symbolTable.getSymbolFromName(key);
      if(symbol != null) {
        OptionList optionList = symbol.getOption();
        optionList = tom_append_list_concOption(optionList, tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( tom.engine.adt.tomoption.types.option.DefinedSymbol.make() , tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ) );
        symbolTable.putSymbol(key,symbol.setOption(optionList));
        return symbol;
      }
    }
    return null;
  }

  public static String makeSingleLineCode(String code, boolean pretty) {
    if(!pretty) {
      code = code.replace('\n', ' ');
      code = code.replace('\t', ' ');
      code = code.replace('\r', ' ');
    }
    return code;
  }

  public static TomName makeName(String slotName) {
    if(slotName.length()>0) {
      return  tom.engine.adt.tomname.types.tomname.Name.make(slotName) ;
    } else {
      return  tom.engine.adt.tomname.types.tomname.EmptyName.make() ;
    }
  }

  public static String encodeXMLString(SymbolTable symbolTable, String name) {
    name = "\"" + name + "\"";
    makeStringSymbol(symbolTable,name, new LinkedList());
    return name;
  }

  public static String makeTomVariableName(String name) {
    return "tom_" + name;
  }

  public static TomList metaEncodeTermList(SymbolTable symbolTable,TomList list) {
    {if ( (list instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch213NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )list);{  tom.engine.adt.tomterm.types.TomList  tomMatch213NameNumber_freshVar_0=tomMatch213NameNumberfreshSubject_1;if ( ((tomMatch213NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch213NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if ( tomMatch213NameNumber_freshVar_0.isEmptyconcTomTerm() ) {if ( true ) {
 return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ;}}}}}}if ( (list instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch213NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )list);{  tom.engine.adt.tomterm.types.TomList  tomMatch213NameNumber_freshVar_1=tomMatch213NameNumberfreshSubject_1;if ( ((tomMatch213NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch213NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch213NameNumber_freshVar_1.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch213NameNumber_freshVar_1.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch213NameNumber_freshVar_2= tomMatch213NameNumber_freshVar_1.getTailconcTomTerm() ;if ( true ) {

        TomList tl = metaEncodeTermList(symbolTable,tomMatch213NameNumber_freshVar_2);
        return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(metaEncodeXMLAppl(symbolTable,tom_head),tom_append_list_concTomTerm(tl, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() )) ;
      }}}}}}}}}

    return list;
  }

  public static TomTerm encodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * encode a String into a quoted-string
       * Appl(...,Name("string"),...) becomes
       * Appl(...,Name("\"string\""),...)
       */
    TomNameList newNameList =  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ;
    {if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch214NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch214NameNumber_freshVar_1=tomMatch214NameNumberfreshSubject_1;if ( (tomMatch214NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch214NameNumber_freshVar_0= tomMatch214NameNumber_freshVar_1.getNameList() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch214NameNumber_freshVar_2=tomMatch214NameNumber_freshVar_0;if ( ((tomMatch214NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch214NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch214NameNumber_begin_4=tomMatch214NameNumber_freshVar_2;{  tom.engine.adt.tomname.types.TomNameList  tomMatch214NameNumber_end_5=tomMatch214NameNumber_freshVar_2;do {{{  tom.engine.adt.tomname.types.TomNameList  tomMatch214NameNumber_freshVar_3=tomMatch214NameNumber_end_5;if (!( tomMatch214NameNumber_freshVar_3.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch214NameNumber_freshVar_9= tomMatch214NameNumber_freshVar_3.getHeadconcTomName() ;if ( (tomMatch214NameNumber_freshVar_9 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch214NameNumber_freshVar_8= tomMatch214NameNumber_freshVar_9.getString() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch214NameNumber_freshVar_6= tomMatch214NameNumber_freshVar_3.getTailconcTomName() ;if ( true ) {

        newNameList = tom_append_list_concTomName(newNameList, tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( tom.engine.adt.tomname.types.tomname.Name.make(encodeXMLString(symbolTable,tomMatch214NameNumber_freshVar_8)) , tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ) );
      }}}}}}}if ( tomMatch214NameNumber_end_5.isEmptyconcTomName() ) {tomMatch214NameNumber_end_5=tomMatch214NameNumber_begin_4;} else {tomMatch214NameNumber_end_5= tomMatch214NameNumber_end_5.getTailconcTomName() ;}}} while(!( (tomMatch214NameNumber_end_5==tomMatch214NameNumber_begin_4) ));}}}}}}}}}}

    term = term.setNameList(newNameList);
      //System.out.println("encodeXMLAppl = " + term);
    return term;
  }

  public static TomTerm metaEncodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * meta-encode a String into a TextNode
       * Appl(...,Name("\"string\""),...) becomes
       * Appl(...,Name("TextNode"),[Appl(...,Name("\"string\""),...)],...)
       */
      //System.out.println("metaEncode: " + term);
    {if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch215NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch215NameNumber_freshVar_1=tomMatch215NameNumberfreshSubject_1;if ( (tomMatch215NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch215NameNumber_freshVar_0= tomMatch215NameNumber_freshVar_1.getNameList() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch215NameNumber_freshVar_2=tomMatch215NameNumber_freshVar_0;if ( ((tomMatch215NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch215NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch215NameNumber_freshVar_2.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch215NameNumber_freshVar_5= tomMatch215NameNumber_freshVar_2.getHeadconcTomName() ;if ( (tomMatch215NameNumber_freshVar_5 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch215NameNumber_freshVar_4= tomMatch215NameNumber_freshVar_5.getString() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch215NameNumber_freshVar_3= tomMatch215NameNumber_freshVar_2.getTailconcTomName() ;if ( tomMatch215NameNumber_freshVar_3.isEmptyconcTomName() ) {if ( true ) {

          //System.out.println("tomName = " + tomName);
        TomSymbol tomSymbol = symbolTable.getSymbolFromName(tomMatch215NameNumber_freshVar_4);
        if(tomSymbol != null) {
          if(symbolTable.isStringType(TomBase.getTomType(TomBase.getSymbolCodomain(tomSymbol)))) {
            Option info =  tom.engine.adt.tomoption.types.option.OriginTracking.make( tom.engine.adt.tomname.types.tomname.Name.make(Constants.TEXT_NODE) , -1, "unknown filename") ;
            term =  tom.engine.adt.tomterm.types.tomterm.RecordAppl.make(ASTFactory.makeOption(info),  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( tom.engine.adt.tomname.types.tomname.Name.make(Constants.TEXT_NODE) , tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ) ,  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tom.engine.adt.tomslot.types.slot.PairSlotAppl.make( tom.engine.adt.tomname.types.tomname.Name.make(Constants.SLOT_DATA) , term) , tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) 

;
              //System.out.println("metaEncodeXmlAppl = " + term);
          }
        }
      }}}}}}}}}}}}}}}

    return term;
  }

  public static boolean isExplicitTermList(List childs) {
    if(childs.size() == 1) {
      TomTerm term = (TomTerm) childs.get(0);
      {if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch216NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch216NameNumber_freshVar_1=tomMatch216NameNumberfreshSubject_1;{ boolean tomMatch216NameNumber_freshVar_7= false ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch216NameNumber_freshVar_0= null ;if ( (tomMatch216NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{tomMatch216NameNumber_freshVar_7= true ;tomMatch216NameNumber_freshVar_0= tomMatch216NameNumber_freshVar_1.getNameList() ;}} else {if ( (tomMatch216NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{tomMatch216NameNumber_freshVar_7= true ;tomMatch216NameNumber_freshVar_0= tomMatch216NameNumber_freshVar_1.getNameList() ;}}}if ((tomMatch216NameNumber_freshVar_7 ==  true )) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch216NameNumber_freshVar_2=tomMatch216NameNumber_freshVar_0;if ( ((tomMatch216NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch216NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch216NameNumber_freshVar_2.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch216NameNumber_freshVar_5= tomMatch216NameNumber_freshVar_2.getHeadconcTomName() ;if ( (tomMatch216NameNumber_freshVar_5 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch216NameNumber_freshVar_4= tomMatch216NameNumber_freshVar_5.getString() ;{  String  tomMatch216NameNumber_freshVar_6=tomMatch216NameNumber_freshVar_4;if ( "".equals(tomMatch216NameNumber_freshVar_6) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch216NameNumber_freshVar_3= tomMatch216NameNumber_freshVar_2.getTailconcTomName() ;if ( tomMatch216NameNumber_freshVar_3.isEmptyconcTomName() ) {if ( true ) {

          return true;
        }}}}}}}}}}}}}}}}}}

    }
    return false;
  }

  public static List metaEncodeExplicitTermList(SymbolTable symbolTable, TomTerm term) {
    LinkedList list = new LinkedList();
    {if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch217NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch217NameNumber_freshVar_2=tomMatch217NameNumberfreshSubject_1;if ( (tomMatch217NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch217NameNumber_freshVar_0= tomMatch217NameNumber_freshVar_2.getNameList() ;{  tom.engine.adt.tomslot.types.SlotList  tomMatch217NameNumber_freshVar_1= tomMatch217NameNumber_freshVar_2.getSlots() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch217NameNumber_freshVar_3=tomMatch217NameNumber_freshVar_0;if ( ((tomMatch217NameNumber_freshVar_3 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch217NameNumber_freshVar_3 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch217NameNumber_freshVar_3.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch217NameNumber_freshVar_6= tomMatch217NameNumber_freshVar_3.getHeadconcTomName() ;if ( (tomMatch217NameNumber_freshVar_6 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch217NameNumber_freshVar_5= tomMatch217NameNumber_freshVar_6.getString() ;{  String  tomMatch217NameNumber_freshVar_7=tomMatch217NameNumber_freshVar_5;if ( "".equals(tomMatch217NameNumber_freshVar_7) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch217NameNumber_freshVar_4= tomMatch217NameNumber_freshVar_3.getTailconcTomName() ;if ( tomMatch217NameNumber_freshVar_4.isEmptyconcTomName() ) {{  tom.engine.adt.tomslot.types.SlotList  tom_args=tomMatch217NameNumber_freshVar_1;if ( true ) {

        while(!tom_args.isEmptyconcSlot()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHeadconcSlot().getAppl()));
          tom_args= tom_args.getTailconcSlot();
        }
        return list;
      }}}}}}}}}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch217NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch217NameNumber_freshVar_10=tomMatch217NameNumberfreshSubject_1;if ( (tomMatch217NameNumber_freshVar_10 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch217NameNumber_freshVar_8= tomMatch217NameNumber_freshVar_10.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch217NameNumber_freshVar_9= tomMatch217NameNumber_freshVar_10.getArgs() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch217NameNumber_freshVar_11=tomMatch217NameNumber_freshVar_8;if ( ((tomMatch217NameNumber_freshVar_11 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch217NameNumber_freshVar_11 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch217NameNumber_freshVar_11.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch217NameNumber_freshVar_14= tomMatch217NameNumber_freshVar_11.getHeadconcTomName() ;if ( (tomMatch217NameNumber_freshVar_14 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch217NameNumber_freshVar_13= tomMatch217NameNumber_freshVar_14.getString() ;{  String  tomMatch217NameNumber_freshVar_15=tomMatch217NameNumber_freshVar_13;if ( "".equals(tomMatch217NameNumber_freshVar_15) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch217NameNumber_freshVar_12= tomMatch217NameNumber_freshVar_11.getTailconcTomName() ;if ( tomMatch217NameNumber_freshVar_12.isEmptyconcTomName() ) {{  tom.engine.adt.tomterm.types.TomList  tom_args=tomMatch217NameNumber_freshVar_9;if ( true ) {


        while(!tom_args.isEmptyconcTomTerm()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHeadconcTomTerm()));
          tom_args= tom_args.getTailconcTomTerm();
        }
        return list;
      }}}}}}}}}}}}}}}}}}}

    //System.out.println("metaEncodeExplicitTermList: strange case: " + term);
    list.add(term);
    return list;
  }

  public static TomTerm buildList(TomName name,TomList args, SymbolTable symbolTable) {
    TomSymbol topListSymbol = symbolTable.getSymbolFromName(name.getString());
    String topDomain = TomBase.getTomType(TomBase.getSymbolDomain(topListSymbol).getHeadconcTomType());
    String topCodomain = TomBase.getTomType(TomBase.getSymbolCodomain(topListSymbol));
    {if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_0=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if ( tomMatch218NameNumber_freshVar_0.isEmptyconcTomTerm() ) {if ( true ) {

        return  tom.engine.adt.tomterm.types.tomterm.BuildEmptyList.make(name) ;
      }}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_1=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_1.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_4= tomMatch218NameNumber_freshVar_1.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_4 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch218NameNumber_freshVar_1.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_2= tomMatch218NameNumber_freshVar_1.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_2,symbolTable);
        /* a VariableStar is always flattened */
        return  tom.engine.adt.tomterm.types.tomterm.BuildAppendList.make(name, tom_head, subList) ;
      }}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_5=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_5.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_9= tomMatch218NameNumber_freshVar_5.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_9 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_8= tomMatch218NameNumber_freshVar_9.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_10=tomMatch218NameNumber_freshVar_8;if ( ((tomMatch218NameNumber_freshVar_10 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_10 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_10.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_13= tomMatch218NameNumber_freshVar_10.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_13 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_11= tomMatch218NameNumber_freshVar_10.getTailconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch218NameNumber_freshVar_5.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_6= tomMatch218NameNumber_freshVar_5.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_6,symbolTable);
        /* a VariableStar is always flattened */
        return  tom.engine.adt.tomterm.types.tomterm.BuildAppendList.make(name, tom_head, subList) ;
      }}}}}}}}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_14=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_14 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_14 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_14.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_18= tomMatch218NameNumber_freshVar_14.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_18 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch218NameNumber_freshVar_17= tomMatch218NameNumber_freshVar_18.getAstType() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch218NameNumber_freshVar_14.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_15= tomMatch218NameNumber_freshVar_14.getTailconcTomTerm() ;if ( true ) {


        //System.out.println("topDomain = " + topDomain);
        //System.out.println("topCodomain = " + topCodomain);
        //System.out.println("varType = " + TomBase.getTomType(`varType));

        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_15,symbolTable);
        /* a Variable is flattened if type and codomain are equals */
        if(topDomain != topCodomain) {
          if(TomBase.getTomType(tomMatch218NameNumber_freshVar_17) == topCodomain) {
            return  tom.engine.adt.tomterm.types.tomterm.BuildAppendList.make(name, tom_head, subList) ;
          }
        }
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsList.make(name, tom_head, subList) ;
      }}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_19=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_19 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_19 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_19.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_23= tomMatch218NameNumber_freshVar_19.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_23 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_22= tomMatch218NameNumber_freshVar_23.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_24=tomMatch218NameNumber_freshVar_22;if ( ((tomMatch218NameNumber_freshVar_24 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_24 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_24.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_28= tomMatch218NameNumber_freshVar_24.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_28 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch218NameNumber_freshVar_27= tomMatch218NameNumber_freshVar_28.getAstType() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_25= tomMatch218NameNumber_freshVar_24.getTailconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch218NameNumber_freshVar_19.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_20= tomMatch218NameNumber_freshVar_19.getTailconcTomTerm() ;if ( true ) {


        //System.out.println("topDomain = " + topDomain);
        //System.out.println("topCodomain = " + topCodomain);
        //System.out.println("varType = " + TomBase.getTomType(`varType));

        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_20,symbolTable);
        /* a Variable is flattened if type and codomain are equals */
        if(topDomain != topCodomain) {
          if(TomBase.getTomType(tomMatch218NameNumber_freshVar_27) == topCodomain) {
            return  tom.engine.adt.tomterm.types.tomterm.BuildAppendList.make(name, tom_head, subList) ;
          }
        }
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsList.make(name, tom_head, subList) ;
      }}}}}}}}}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_29=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_29 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_29 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_29.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_33= tomMatch218NameNumber_freshVar_29.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_33 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_32= tomMatch218NameNumber_freshVar_33.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_34=tomMatch218NameNumber_freshVar_32;if ( ((tomMatch218NameNumber_freshVar_34 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_34 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_34.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_38= tomMatch218NameNumber_freshVar_34.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_38 instanceof tom.engine.adt.tomterm.types.tomterm.BuildConsList) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch218NameNumber_freshVar_37= tomMatch218NameNumber_freshVar_38.getAstName() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_35= tomMatch218NameNumber_freshVar_34.getTailconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch218NameNumber_freshVar_29.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_30= tomMatch218NameNumber_freshVar_29.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_30,symbolTable);
        /* Flatten nested lists, unless domain and codomain are equals */
        if(topDomain != topCodomain) {
          if(name.equals(tomMatch218NameNumber_freshVar_37)) {
            return  tom.engine.adt.tomterm.types.tomterm.BuildAppendList.make(name, tom_head, subList) ;
          }
        }
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsList.make(name, tom_head, subList) ;
      }}}}}}}}}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_39=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_39 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_39 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_39.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_43= tomMatch218NameNumber_freshVar_39.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_43 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_42= tomMatch218NameNumber_freshVar_43.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_44=tomMatch218NameNumber_freshVar_42;if ( ((tomMatch218NameNumber_freshVar_44 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_44 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_44.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_48= tomMatch218NameNumber_freshVar_44.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_48 instanceof tom.engine.adt.tomterm.types.tomterm.BuildTerm) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch218NameNumber_freshVar_47= tomMatch218NameNumber_freshVar_48.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch218NameNumber_freshVar_50=tomMatch218NameNumber_freshVar_47;if ( (tomMatch218NameNumber_freshVar_50 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch218NameNumber_freshVar_49= tomMatch218NameNumber_freshVar_50.getString() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_45= tomMatch218NameNumber_freshVar_44.getTailconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch218NameNumber_freshVar_39.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_40= tomMatch218NameNumber_freshVar_39.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_40,symbolTable);
        if(topDomain != topCodomain) {
        /*
         * compare the codomain of tomName with topDomain
         * if the codomain of the inserted element is equal to the codomain
         * of the list operator, a BuildAppendList is performed
         */
          TomSymbol symbol = symbolTable.getSymbolFromName(tomMatch218NameNumber_freshVar_49);
          String codomain = TomBase.getTomType(TomBase.getSymbolCodomain(symbol));
          if(codomain == topCodomain) {
            return  tom.engine.adt.tomterm.types.tomterm.BuildAppendList.make(name, tom_head, subList) ;
          }
        }
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsList.make(name, tom_head, subList) ;
      }}}}}}}}}}}}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_51=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_51 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_51 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_51.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_54= tomMatch218NameNumber_freshVar_51.getHeadconcTomTerm() ;{ boolean tomMatch218NameNumber_freshVar_55= false ;if ( (tomMatch218NameNumber_freshVar_54 instanceof tom.engine.adt.tomterm.types.tomterm.BuildTerm) ) {tomMatch218NameNumber_freshVar_55= true ;} else {if ( (tomMatch218NameNumber_freshVar_54 instanceof tom.engine.adt.tomterm.types.tomterm.BuildConstant) ) {tomMatch218NameNumber_freshVar_55= true ;} else {if ( (tomMatch218NameNumber_freshVar_54 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {tomMatch218NameNumber_freshVar_55= true ;} else {if ( (tomMatch218NameNumber_freshVar_54 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch218NameNumber_freshVar_55= true ;}}}}if ((tomMatch218NameNumber_freshVar_55 ==  true )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch218NameNumber_freshVar_51.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_52= tomMatch218NameNumber_freshVar_51.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_52,symbolTable);
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsList.make(name, tom_head, subList) ;
      }}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_56=tomMatch218NameNumberfreshSubject_1;if ( ((tomMatch218NameNumber_freshVar_56 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch218NameNumber_freshVar_56 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch218NameNumber_freshVar_56.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch218NameNumber_freshVar_59= tomMatch218NameNumber_freshVar_56.getHeadconcTomTerm() ;if ( (tomMatch218NameNumber_freshVar_59 instanceof tom.engine.adt.tomterm.types.tomterm.TargetLanguageToTomTerm) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch218NameNumber_freshVar_57= tomMatch218NameNumber_freshVar_56.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildList(name,tomMatch218NameNumber_freshVar_57,symbolTable);
        return subList;
      }}}}}}}}}}


    throw new TomRuntimeException("buildList strange term: " + args);
  }

  public static TomTerm buildArray(TomName name,TomList args, SymbolTable symbolTable) {
    return buildArray(name,args.reverse(),0, symbolTable);
  }

  private static TomTerm buildArray(TomName name,TomList args, int size, SymbolTable symbolTable) {
    TomSymbol topListSymbol = symbolTable.getSymbolFromName(name.getString());
    String topDomain = TomBase.getTomType(TomBase.getSymbolDomain(topListSymbol).getHeadconcTomType());
    String topCodomain = TomBase.getTomType(TomBase.getSymbolCodomain(topListSymbol));

    {if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_0=tomMatch219NameNumberfreshSubject_1;if ( ((tomMatch219NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if ( tomMatch219NameNumber_freshVar_0.isEmptyconcTomTerm() ) {if ( true ) {

        return  tom.engine.adt.tomterm.types.tomterm.BuildEmptyArray.make(name, size) ;
      }}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_1=tomMatch219NameNumberfreshSubject_1;if ( ((tomMatch219NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_1.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_4= tomMatch219NameNumber_freshVar_1.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_4 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch219NameNumber_freshVar_1.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_2= tomMatch219NameNumber_freshVar_1.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildArray(name,tomMatch219NameNumber_freshVar_2,size+1,symbolTable);
        /* a VariableStar is always flattened */
        return  tom.engine.adt.tomterm.types.tomterm.BuildAppendArray.make(name, tom_head, subList) ;
      }}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_5=tomMatch219NameNumberfreshSubject_1;if ( ((tomMatch219NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_5.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_9= tomMatch219NameNumber_freshVar_5.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_9 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_8= tomMatch219NameNumber_freshVar_9.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_10=tomMatch219NameNumber_freshVar_8;if ( ((tomMatch219NameNumber_freshVar_10 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_10 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_10.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_13= tomMatch219NameNumber_freshVar_10.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_13 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_11= tomMatch219NameNumber_freshVar_10.getTailconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch219NameNumber_freshVar_5.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_6= tomMatch219NameNumber_freshVar_5.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildArray(name,tomMatch219NameNumber_freshVar_6,size+1,symbolTable);
        /* a VariableStar is always flattened */
        return  tom.engine.adt.tomterm.types.tomterm.BuildAppendArray.make(name, tom_head, subList) ;
      }}}}}}}}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_14=tomMatch219NameNumberfreshSubject_1;if ( ((tomMatch219NameNumber_freshVar_14 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_14 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_14.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_18= tomMatch219NameNumber_freshVar_14.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_18 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_17= tomMatch219NameNumber_freshVar_18.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_19=tomMatch219NameNumber_freshVar_17;if ( ((tomMatch219NameNumber_freshVar_19 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_19 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_19.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_23= tomMatch219NameNumber_freshVar_19.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_23 instanceof tom.engine.adt.tomterm.types.tomterm.BuildConsArray) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch219NameNumber_freshVar_22= tomMatch219NameNumber_freshVar_23.getAstName() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_20= tomMatch219NameNumber_freshVar_19.getTailconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch219NameNumber_freshVar_14.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_15= tomMatch219NameNumber_freshVar_14.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildArray(name,tomMatch219NameNumber_freshVar_15,size+1,symbolTable);
        /* Flatten nested lists, unless domain and codomain are equals */
        if(topDomain != topCodomain) {
          if(name.equals(tomMatch219NameNumber_freshVar_22)) {
            return  tom.engine.adt.tomterm.types.tomterm.BuildAppendArray.make(name, tom_head, subList) ;
          }
        }
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsArray.make(name, tom_head, subList) ;
      }}}}}}}}}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_24=tomMatch219NameNumberfreshSubject_1;if ( ((tomMatch219NameNumber_freshVar_24 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_24 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_24.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_28= tomMatch219NameNumber_freshVar_24.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_28 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_27= tomMatch219NameNumber_freshVar_28.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_29=tomMatch219NameNumber_freshVar_27;if ( ((tomMatch219NameNumber_freshVar_29 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_29 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_29.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_33= tomMatch219NameNumber_freshVar_29.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_33 instanceof tom.engine.adt.tomterm.types.tomterm.BuildTerm) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch219NameNumber_freshVar_32= tomMatch219NameNumber_freshVar_33.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch219NameNumber_freshVar_35=tomMatch219NameNumber_freshVar_32;if ( (tomMatch219NameNumber_freshVar_35 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch219NameNumber_freshVar_34= tomMatch219NameNumber_freshVar_35.getString() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_30= tomMatch219NameNumber_freshVar_29.getTailconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch219NameNumber_freshVar_24.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_25= tomMatch219NameNumber_freshVar_24.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildArray(name,tomMatch219NameNumber_freshVar_25,size+1,symbolTable);
        if(topDomain != topCodomain) {
        /*
         * compare the codomain of tomName with topDomain
         * if the codomain of the inserted element is equal to the codomain
         * of the list operator, a BuildAppendArray is performed
         */
          TomSymbol symbol = symbolTable.getSymbolFromName(tomMatch219NameNumber_freshVar_34);
          String codomain = TomBase.getTomType(TomBase.getSymbolCodomain(symbol));
          if(codomain == topCodomain) {
            return  tom.engine.adt.tomterm.types.tomterm.BuildAppendArray.make(name, tom_head, subList) ;
          }
        }
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsArray.make(name, tom_head, subList) ;
      }}}}}}}}}}}}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_36=tomMatch219NameNumberfreshSubject_1;if ( ((tomMatch219NameNumber_freshVar_36 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_36 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_36.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_39= tomMatch219NameNumber_freshVar_36.getHeadconcTomTerm() ;{ boolean tomMatch219NameNumber_freshVar_40= false ;if ( (tomMatch219NameNumber_freshVar_39 instanceof tom.engine.adt.tomterm.types.tomterm.BuildTerm) ) {tomMatch219NameNumber_freshVar_40= true ;} else {if ( (tomMatch219NameNumber_freshVar_39 instanceof tom.engine.adt.tomterm.types.tomterm.BuildConstant) ) {tomMatch219NameNumber_freshVar_40= true ;} else {if ( (tomMatch219NameNumber_freshVar_39 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch219NameNumber_freshVar_40= true ;} else {if ( (tomMatch219NameNumber_freshVar_39 instanceof tom.engine.adt.tomterm.types.tomterm.Composite) ) {tomMatch219NameNumber_freshVar_40= true ;}}}}if ((tomMatch219NameNumber_freshVar_40 ==  true )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_head= tomMatch219NameNumber_freshVar_36.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_37= tomMatch219NameNumber_freshVar_36.getTailconcTomTerm() ;if ( true ) {

        TomTerm subList = buildArray(name,tomMatch219NameNumber_freshVar_37,size+1,symbolTable);
        return  tom.engine.adt.tomterm.types.tomterm.BuildConsArray.make(name, tom_head, subList) ;
      }}}}}}}}}}}if ( (args instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )args);{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_41=tomMatch219NameNumberfreshSubject_1;if ( ((tomMatch219NameNumber_freshVar_41 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch219NameNumber_freshVar_41 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {if (!( tomMatch219NameNumber_freshVar_41.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch219NameNumber_freshVar_44= tomMatch219NameNumber_freshVar_41.getHeadconcTomTerm() ;if ( (tomMatch219NameNumber_freshVar_44 instanceof tom.engine.adt.tomterm.types.tomterm.TargetLanguageToTomTerm) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch219NameNumber_freshVar_42= tomMatch219NameNumber_freshVar_41.getTailconcTomTerm() ;if ( true ) {


        TomTerm subList = buildArray(name,tomMatch219NameNumber_freshVar_42,size,symbolTable);
        return subList;
      }}}}}}}}}}



    throw new TomRuntimeException("buildArray strange term: " + args);
  }

  /*
   * transform a string "...$t...$u..." into "...{0}...{1}..."
   */
  public static String abstractCode(String code, String... vars) {
    int index=0;
    for(String var:vars) {
      code = code.replace("$"+var,"{"+index+"}");
      index++;
    }
    return code;
  }

}
