/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
  
    TOM - To One Matching Compiler

    Copyright (c) 2000-2006, INRIA
          Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package tom.engine.tools;

import java.util.LinkedList;

import tom.engine.TomBase;
import tom.engine.adt.tomsignature.types.NameList;
import tom.engine.adt.tomsignature.types.Option;
import tom.engine.adt.tomsignature.types.TomList;
import tom.engine.adt.tomsignature.types.TomName;
import tom.engine.adt.tomsignature.types.TomSymbol;
import tom.engine.adt.tomsignature.types.TomTerm;
import tom.engine.exception.TomRuntimeException;
import tom.engine.xml.Constants;

public class TomFactory extends TomBase {

// ------------------------------------------------------------
  /* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     
// ------------------------------------------------------------

  public TomFactory() {
    super();
  }
  
  public String encodeXMLString(SymbolTable symbolTable, String name) {
    name = "\"" + name + "\"";
    getAstFactory().makeStringSymbol(symbolTable,name, new LinkedList());
    return name;
  }

  public TomList metaEncodeTermList(SymbolTable symbolTable,TomList list) {
     { tom.engine.adt.tomsignature.types.TomList tom_match1_1=(( tom.engine.adt.tomsignature.types.TomList)list); if(tom_is_fun_sym_emptyTomList(tom_match1_1) ||  false ) {
 return tom_make_emptyTomList(); } if(tom_is_fun_sym_manyTomList(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_head=tom_get_slot_manyTomList_head(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_match1_1_tail=tom_get_slot_manyTomList_tail(tom_match1_1);

        return tom_make_manyTomList(metaEncodeXMLAppl(symbolTable,tom_match1_1_head),metaEncodeTermList(symbolTable,tom_match1_1_tail))
;
      }} }}

    return list;
  }

  public TomTerm encodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * encode a String into a quoted-string
       * Appl(...,Name("string"),...) becomes
       * Appl(...,Name("\"string\""),...)
       */
    NameList newNameList = tom_empty_list_concTomName();
     { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if(tom_is_fun_sym_RecordAppl(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match2_1); if(tom_is_fun_sym_concTomName(tom_match2_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList_list1=tom_match2_1_nameList; { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList_begin1=tom_match2_1_nameList_list1; { tom.engine.adt.tomsignature.types.NameList tom_match2_1_nameList_end1=tom_match2_1_nameList_list1;{ while (!(tom_is_empty_concTomName_NameList(tom_match2_1_nameList_end1))) {tom_match2_1_nameList_list1=tom_match2_1_nameList_end1;{ { tom.engine.adt.tomsignature.types.TomName tom_match2_1_nameList_2=tom_get_head_concTomName_NameList(tom_match2_1_nameList_list1);tom_match2_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match2_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match2_1_nameList_2) ||  false ) { { String  tom_match2_1_nameList_2_string=tom_get_slot_Name_string(tom_match2_1_nameList_2);

        newNameList = (NameList)newNameList.append(tom_make_Name(encodeXMLString(symbolTable,tom_match2_1_nameList_2_string)));
      } }}tom_match2_1_nameList_end1=tom_get_tail_concTomName_NameList(tom_match2_1_nameList_end1);} }tom_match2_1_nameList_list1=tom_match2_1_nameList_begin1;}}}} }} }}

    term = term.setNameList(newNameList);
      //System.out.println("encodeXMLAppl = " + term);
    return term;
  }

  public TomTerm metaEncodeXMLAppl(SymbolTable symbolTable, TomTerm term) {
      /*
       * meta-encode a String into a TextNode
       * Appl(...,Name("\"string\""),...) becomes
       * Appl(...,Name("TextNode"),[Appl(...,Name("\"string\""),...)],...)
       */
      //System.out.println("metaEncode: " + term);
     { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if(tom_is_fun_sym_RecordAppl(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match3_1); if(tom_is_fun_sym_concTomName(tom_match3_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList_list1=tom_match3_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match3_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_nameList_1=tom_get_head_concTomName_NameList(tom_match3_1_nameList_list1);tom_match3_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match3_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match3_1_nameList_1) ||  false ) { { String  tom_match3_1_nameList_1_string=tom_get_slot_Name_string(tom_match3_1_nameList_1); if(tom_is_empty_concTomName_NameList(tom_match3_1_nameList_list1)) {

          //System.out.println("tomName = " + tomName);
        TomSymbol tomSymbol = symbolTable.getSymbolFromName(tom_match3_1_nameList_1_string);
        if(tomSymbol != null) {
          if(symbolTable.isStringType(getTomType(getSymbolCodomain(tomSymbol)))) {
            Option info = tom_make_OriginTracking(tom_make_Name(Constants.TEXT_NODE),-1,tom_make_Name("??"));
            term = tom_make_RecordAppl(getAstFactory().makeOption(info),tom_cons_list_concTomName(tom_make_Name(Constants.TEXT_NODE),tom_empty_list_concTomName()),tom_cons_list_concSlot(tom_make_PairSlotAppl(tom_make_Name(Constants.SLOT_DATA),term),tom_empty_list_concSlot()),tsf().makeConstraintList())

;
              //System.out.println("metaEncodeXmlAppl = " + term);
          }
        }
       }} }} }} }} }}

    return term;
  }

  public boolean isExplicitTermList(LinkedList childs) {
    if(childs.size() == 1) {
      TomTerm term = (TomTerm) childs.getFirst();
      //System.out.println("isExplicitTermList: " + term);
       { tom.engine.adt.tomsignature.types.TomTerm tom_match4_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if(tom_is_fun_sym_RecordAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match4_1); if(tom_is_fun_sym_concTomName(tom_match4_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList_list1=tom_match4_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_nameList_1=tom_get_head_concTomName_NameList(tom_match4_1_nameList_list1);tom_match4_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match4_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match4_1_nameList_1) ||  false ) { { String  tom_match4_1_nameList_1_string=tom_get_slot_Name_string(tom_match4_1_nameList_1); if(tom_terms_equal_String("", tom_match4_1_nameList_1_string) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1)) {
 
          return true;
         } }} }} }} }} } if(tom_is_fun_sym_TermAppl(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList=tom_get_slot_TermAppl_nameList(tom_match4_1); if(tom_is_fun_sym_concTomName(tom_match4_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_nameList_list1=tom_match4_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_nameList_1=tom_get_head_concTomName_NameList(tom_match4_1_nameList_list1);tom_match4_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match4_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match4_1_nameList_1) ||  false ) { { String  tom_match4_1_nameList_1_string=tom_get_slot_Name_string(tom_match4_1_nameList_1); if(tom_terms_equal_String("", tom_match4_1_nameList_1_string) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match4_1_nameList_list1)) {
 
          return true;
         } }} }} }} }} }}

    }
    return false;
  }
  
  public LinkedList metaEncodeExplicitTermList(SymbolTable symbolTable, TomTerm term) {
    LinkedList list = new LinkedList();
     { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if(tom_is_fun_sym_RecordAppl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_1); { tom.engine.adt.tomsignature.types.SlotList tom_match5_1_slots=tom_get_slot_RecordAppl_slots(tom_match5_1); if(tom_is_fun_sym_concTomName(tom_match5_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList_list1=tom_match5_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_nameList_1=tom_get_head_concTomName_NameList(tom_match5_1_nameList_list1);tom_match5_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match5_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_1_nameList_1) ||  false ) { { String  tom_match5_1_nameList_1_string=tom_get_slot_Name_string(tom_match5_1_nameList_1); if(tom_terms_equal_String("", tom_match5_1_nameList_1_string) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1)) { { tom.engine.adt.tomsignature.types.SlotList tom_args=tom_match5_1_slots;

        while(!tom_args.isEmpty()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHead().getAppl()));
          tom_args= tom_args.getTail();
        }
        return list;
      } } }} }} }} }}} } if(tom_is_fun_sym_TermAppl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList=tom_get_slot_TermAppl_nameList(tom_match5_1); { tom.engine.adt.tomsignature.types.TomList tom_match5_1_args=tom_get_slot_TermAppl_args(tom_match5_1); if(tom_is_fun_sym_concTomName(tom_match5_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_nameList_list1=tom_match5_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_nameList_1=tom_get_head_concTomName_NameList(tom_match5_1_nameList_list1);tom_match5_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match5_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match5_1_nameList_1) ||  false ) { { String  tom_match5_1_nameList_1_string=tom_get_slot_Name_string(tom_match5_1_nameList_1); if(tom_terms_equal_String("", tom_match5_1_nameList_1_string) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match5_1_nameList_list1)) { { tom.engine.adt.tomsignature.types.TomList tom_args=tom_match5_1_args;


        while(!tom_args.isEmpty()) {
          list.add(metaEncodeXMLAppl(symbolTable,tom_args.getHead()));
          tom_args= tom_args.getTail();
        }
        return list;
      } } }} }} }} }}} }


          //System.out.println("metaEncodeExplicitTermList: strange case: " + term);
        list.add(term);
        return list;
      }

  }

  public TomTerm buildList(TomName name,TomList args) {
     { tom.engine.adt.tomsignature.types.TomList tom_match6_1=(( tom.engine.adt.tomsignature.types.TomList)args); if(tom_is_fun_sym_emptyTomList(tom_match6_1) ||  false ) {

        return tom_make_BuildEmptyList(name);
       } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if(tom_is_fun_sym_VariableStar(tom_match6_1_head) ||  false ) {


        TomTerm subList = buildList(name,tom_match6_1_tail);
        return tom_make_BuildAppendList(name,tom_match6_1_head,subList);
       }}} } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if(tom_is_fun_sym_Composite(tom_match6_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args=tom_get_slot_Composite_args(tom_match6_1_head); if(tom_is_fun_sym_concTomTerm(tom_match6_1_head_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args_list1=tom_match6_1_head_args; { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args_begin1=tom_match6_1_head_args_list1; { tom.engine.adt.tomsignature.types.TomList tom_match6_1_head_args_end1=tom_match6_1_head_args_list1;{ while (!(tom_is_empty_concTomTerm_TomList(tom_match6_1_head_args_end1))) {tom_match6_1_head_args_list1=tom_match6_1_head_args_end1;{ { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head_args_2=tom_get_head_concTomTerm_TomList(tom_match6_1_head_args_list1);tom_match6_1_head_args_list1=tom_get_tail_concTomTerm_TomList(tom_match6_1_head_args_list1); if(tom_is_fun_sym_VariableStar(tom_match6_1_head_args_2) ||  false ) { if(tom_is_empty_concTomTerm_TomList(tom_match6_1_head_args_list1)) {


        TomTerm subList = buildList(name,tom_match6_1_tail);
        return tom_make_BuildAppendList(name,tom_match6_1_head_args_2,subList);
       } }}tom_match6_1_head_args_end1=tom_get_tail_concTomTerm_TomList(tom_match6_1_head_args_end1);} }tom_match6_1_head_args_list1=tom_match6_1_head_args_begin1;}}}} }} }}} } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if(tom_is_fun_sym_Composite(tom_match6_1_head) || tom_is_fun_sym_Variable(tom_match6_1_head) || tom_is_fun_sym_BuildVariable(tom_match6_1_head) || tom_is_fun_sym_BuildTerm(tom_match6_1_head) ||  false ) {


        TomTerm subList = buildList(name,tom_match6_1_tail);
        return tom_make_BuildConsList(name,tom_match6_1_head,subList);
       }}} } if(tom_is_fun_sym_manyTomList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_head=tom_get_slot_manyTomList_head(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tail=tom_get_slot_manyTomList_tail(tom_match6_1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match6_1_head) ||  false ) {


        TomTerm subList = buildList(name,tom_match6_1_tail);
        return subList;
       }}} }}



    throw new TomRuntimeException("buildList strange term: " + args);
     
  }

  public TomTerm buildArray(TomName name,TomList args) {
    return buildArray(name,(TomList)args.reverse(),0);
  }

  private TomTerm buildArray(TomName name,TomList args, int size) {
     { tom.engine.adt.tomsignature.types.TomList tom_match7_1=(( tom.engine.adt.tomsignature.types.TomList)args); if(tom_is_fun_sym_emptyTomList(tom_match7_1) ||  false ) {

        return tom_make_BuildEmptyArray(name,size);
       } if(tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if(tom_is_fun_sym_VariableStar(tom_match7_1_head) ||  false ) {


          /*System.out.println("head = " + head);*/
        TomTerm subList = buildArray(name,tom_match7_1_tail,size+1);
        return tom_make_BuildAppendArray(name,tom_match7_1_head,subList);
       }}} } if(tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if(tom_is_fun_sym_Composite(tom_match7_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args=tom_get_slot_Composite_args(tom_match7_1_head); if(tom_is_fun_sym_concTomTerm(tom_match7_1_head_args) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args_list1=tom_match7_1_head_args; { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args_begin1=tom_match7_1_head_args_list1; { tom.engine.adt.tomsignature.types.TomList tom_match7_1_head_args_end1=tom_match7_1_head_args_list1;{ while (!(tom_is_empty_concTomTerm_TomList(tom_match7_1_head_args_end1))) {tom_match7_1_head_args_list1=tom_match7_1_head_args_end1;{ { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head_args_2=tom_get_head_concTomTerm_TomList(tom_match7_1_head_args_list1);tom_match7_1_head_args_list1=tom_get_tail_concTomTerm_TomList(tom_match7_1_head_args_list1); if(tom_is_fun_sym_VariableStar(tom_match7_1_head_args_2) ||  false ) { if(tom_is_empty_concTomTerm_TomList(tom_match7_1_head_args_list1)) {


          /*System.out.println("head = " + head);*/
        TomTerm subList = buildArray(name,tom_match7_1_tail,size+1);
        return tom_make_BuildAppendArray(name,tom_match7_1_head_args_2,subList);
       } }}tom_match7_1_head_args_end1=tom_get_tail_concTomTerm_TomList(tom_match7_1_head_args_end1);} }tom_match7_1_head_args_list1=tom_match7_1_head_args_begin1;}}}} }} }}} } if(tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if(tom_is_fun_sym_Composite(tom_match7_1_head) || tom_is_fun_sym_Variable(tom_match7_1_head) || tom_is_fun_sym_BuildVariable(tom_match7_1_head) || tom_is_fun_sym_BuildTerm(tom_match7_1_head) ||  false ) {


        TomTerm subList = buildArray(name,tom_match7_1_tail,size+1);
        return tom_make_BuildConsArray(name,tom_match7_1_head,subList);
       }}} } if(tom_is_fun_sym_manyTomList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_head=tom_get_slot_manyTomList_head(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_tail=tom_get_slot_manyTomList_tail(tom_match7_1); if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match7_1_head) ||  false ) {


        TomTerm subList = buildArray(name,tom_match7_1_tail,size);
        return subList;
       }}} }}



    throw new TomRuntimeException("buildArray strange term: " + args);
     
  }

  
}
