/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * **/

package tom.engine.tools;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;

import tom.engine.TomBase;
import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.tools.TomGenericPlugin;
import aterm.ATerm;
import aterm.ATermList;

import tom.library.strategy.mutraveler.MuTraveler;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

public class PILFactory extends TomBase {
  
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_GetSliceList( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSliceList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSliceList_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableBeginAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableBeginAST() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableEndAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableEndAST() ;}private static boolean tom_is_fun_sym_IsEmptyList( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isIsEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsEmptyList_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyList_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetTail( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetTail() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetTail_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetTail_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetHead( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetHead() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetHead_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetHead_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetHead_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetSlot( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSlot() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetSlot_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlot_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  String  tom_get_slot_GetSlot_slotNameString( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSlotNameString() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSlot_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_Cast( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isCast() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Cast_astType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Cast_source( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSource() ;}private static boolean tom_is_fun_sym_EqualTerm( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isEqualTerm() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_EqualTerm_tomType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid2() ;}private static boolean tom_is_fun_sym_EqualFunctionSymbol( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isEqualFunctionSymbol() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_make_EqualFunctionSymbol( tom.engine.adt.tomsignature.types.TomType t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_EqualFunctionSymbol(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_EqualFunctionSymbol_astType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getExp1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getExp2() ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isFalseTL() ;}private static boolean tom_is_fun_sym_Or( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isOr() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Or_arg1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg1() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Or_arg2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg2() ;}private static boolean tom_is_fun_sym_Negation( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isNegation() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Negation_arg( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg() ;}private static boolean tom_is_fun_sym_TomTermToExpression( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isTomTermToExpression() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToExpression_astTerm( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstTerm() ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TypedAction( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isTypedAction() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_TypedAction_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static  tom.engine.adt.tomsignature.types.Pattern tom_get_slot_TypedAction_positivePattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPositivePattern() ;}private static  tom.engine.adt.tomsignature.types.PatternList tom_get_slot_TypedAction_negativePatternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getNegativePatternList() ;}private static boolean tom_is_fun_sym_CheckInstance( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCheckInstance() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_CheckInstance_astType( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_CheckInstance_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CheckInstance_instruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstruction() ;}private static boolean tom_is_fun_sym_CheckStamp( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCheckStamp() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_CheckStamp_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_CompiledPattern_patternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPatternList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledPattern_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static boolean tom_is_fun_sym_CompiledMatch( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledMatch() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledMatch_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_CompiledMatch_option( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getOption() ;}private static boolean tom_is_fun_sym_NamedBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isNamedBlock() ;}private static  String  tom_get_slot_NamedBlock_blockName( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getBlockName() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_NamedBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_UnamedBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isUnamedBlock() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_UnamedBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isAbstractBlock() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_make_AbstractBlock( tom.engine.adt.tomsignature.types.InstructionList t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_AbstractBlock(t0); }private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_AbstractBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isNop() ;}private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLetAssign() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_LetAssign_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_LetAssign_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_LetAssign_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_LetRef( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLetRef() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_LetRef_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_LetRef_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_LetRef_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLet() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Let_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Let_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_Let_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_Assign( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isAssign() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Assign_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Assign_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static boolean tom_is_fun_sym_WhileDo( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isWhileDo() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_WhileDo_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_WhileDo_doInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getDoInst() ;}private static boolean tom_is_fun_sym_DoWhile( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isDoWhile() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_DoWhile_doInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getDoInst() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_DoWhile_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isIf() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_If_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_succesInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSuccesInst() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_failureInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getFailureInst() ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tomsignature.types.InstructionList t) {  return (t!= null) && t.isSortInstructionList() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_empty_list_concInstruction() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(); }private static  tom.engine.adt.tomsignature.types.InstructionList tom_cons_list_concInstruction( tom.engine.adt.tomsignature.types.Instruction e,  tom.engine.adt.tomsignature.types.InstructionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(e,l); }private static  tom.engine.adt.tomsignature.types.Instruction tom_get_head_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_append_list_concInstruction( tom.engine.adt.tomsignature.types.InstructionList l1,  tom.engine.adt.tomsignature.types.InstructionList l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slice_concInstruction( tom.engine.adt.tomsignature.types.InstructionList begin,  tom.engine.adt.tomsignature.types.InstructionList end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tomsignature.types.InstructionList)tom_get_slice_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage tom_make_noTL() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTargetLanguage_NoTL(); }private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_NameNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isNameNumber() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_NameNumber_astName( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_Number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isNumber() ;}private static  int  tom_get_slot_Number_integer( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getInteger() ;}private static boolean tom_is_fun_sym_End( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isEnd() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_End_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_Begin( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isBegin() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_Begin_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_ListNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isListNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_ListNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isPositionName() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_slot_PositionName_numberList( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getNumberList() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concSlot( tom.engine.adt.tomsignature.types.SlotList t) {  return (t!= null) && t.isSortSlotList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_empty_list_concSlot() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static  tom.engine.adt.tomsignature.types.SlotList tom_cons_list_concSlot( tom.engine.adt.tomsignature.types.Slot e,  tom.engine.adt.tomsignature.types.SlotList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private static  tom.engine.adt.tomsignature.types.Slot tom_get_head_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_tail_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.getTail() ;}private static boolean tom_is_empty_concSlot_SlotList( tom.engine.adt.tomsignature.types.SlotList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_append_list_concSlot( tom.engine.adt.tomsignature.types.SlotList l1,  tom.engine.adt.tomsignature.types.SlotList l2) {    if(tom_is_empty_concSlot_SlotList(l1)) {     return l2;    } else if(tom_is_empty_concSlot_SlotList(l2)) {     return l1;    } else if(tom_is_empty_concSlot_SlotList(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1))) {     return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(l1),tom_append_list_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slice_concSlot( tom.engine.adt.tomsignature.types.SlotList begin,  tom.engine.adt.tomsignature.types.SlotList end) {    if(tom_terms_equal_SlotList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_empty_list_concSlot();    } else {      return ( tom.engine.adt.tomsignature.types.SlotList)tom_cons_list_concSlot(( tom.engine.adt.tomsignature.types.Slot)tom_get_head_concSlot_SlotList(begin),( tom.engine.adt.tomsignature.types.SlotList)tom_get_slice_concSlot(( tom.engine.adt.tomsignature.types.SlotList)tom_get_tail_concSlot_SlotList(begin),end));    }   }  private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_empty_list_concOption() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(); }private static  tom.engine.adt.tomsignature.types.OptionList tom_cons_list_concOption( tom.engine.adt.tomsignature.types.Option e,  tom.engine.adt.tomsignature.types.OptionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l); }private static  tom.engine.adt.tomsignature.types.Option tom_get_head_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_tail_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_append_list_concOption( tom.engine.adt.tomsignature.types.OptionList l1,  tom.engine.adt.tomsignature.types.OptionList l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slice_concOption( tom.engine.adt.tomsignature.types.OptionList begin,  tom.engine.adt.tomsignature.types.OptionList end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomsignature.types.OptionList)tom_get_slice_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Option tom_make_noOption() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_NoOption(); }private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_EmptyType() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_EmptyType(); }private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tomType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tlType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTlType() ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Ref( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRef() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Ref_tomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_Collection(Object l1, Object l2) {  return  l1.equals(l2)  ;}/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_AbstractCollection(Object l1, Object l2) {  return  l1.equals(l2)  ;}/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_AbstractList(Object l1, Object l2) {  return  l1.equals(l2)  ;}/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_AbstractSequentialList(Object l1, Object l2) {  return  l1.equals(l2)  ;}/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_LinkedList(Object l1, Object l2) {  return  l1.equals(l2)  ;}/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_Object(Object o1, Object o2) {  return  o1.equals(o2)  ;}   /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ArrayList(Object l1, Object l2) {  return  l1.equals(l2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_Vector(Object l1, Object l2) {  return  l1.equals(l2)  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_AbstractSet(Object l1, Object l2) {  return  l1.equals(l2)  ;}/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_HashSet(Object l1, Object l2) {  return  l1.equals(l2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_TreeSet(Object l1, Object l2) {  return  l1.equals(l2)  ;}   /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2006, Antoine Reilles  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_LinkedHashSet(Object l1, Object l2) {  return  l1.equals(l2)  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }  /*  * strategies with Id considered as failure  */       



  /**
   * level specifies the level of details of the output
   * 0 is identity
   * 1 removes options
   */
  private int level = 0;
  
  public PILFactory() {
    super();
    init(1);
  }

  void init (int level) {
    this.level = level;
  }

  public ATerm remove(ATerm subject) {
   try {
     return (ATerm) MuTraveler.init(tom_make_TopDown(tom_make_replaceRemove())).visit(subject);
   } catch(jjtraveler.VisitFailure e) {
     System.out.println("strategy failed");
   }
   return subject;
  }

  public TomTerm remove(TomTerm subject) {
   try {
     return (TomTerm) MuTraveler.init(tom_make_TopDown(tom_make_replaceRemove())).visit(subject);
   } catch(jjtraveler.VisitFailure e) {
     System.out.println("strategy failed");
   }
   return subject;
  }

   private static class replaceRemove  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  { public replaceRemove( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tomsignature.types.OptionList visit_OptionList(  tom.engine.adt.tomsignature.types.OptionList tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match1_1=(( tom.engine.adt.tomsignature.types.OptionList)tom__arg); if ( true ) {


 return tom_empty_list_concOption();  } } } return super.visit_OptionList(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Option visit_Option(  tom.engine.adt.tomsignature.types.Option tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match2_1=(( tom.engine.adt.tomsignature.types.Option)tom__arg); if ( true ) {


 return tom_make_noOption();  } } } return super.visit_Option(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TargetLanguage visit_TargetLanguage(  tom.engine.adt.tomsignature.types.TargetLanguage tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TargetLanguage) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match3_1=(( tom.engine.adt.tomsignature.types.TargetLanguage)tom__arg); if ( true ) {



 return tom_make_noTL();  } } } return super.visit_TargetLanguage(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TomType visit_TomType(  tom.engine.adt.tomsignature.types.TomType tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomType) { { tom.engine.adt.tomsignature.types.TomType tom_match4_1=(( tom.engine.adt.tomsignature.types.TomType)tom__arg); if (tom_is_fun_sym_Type(tom_match4_1) ||  false ) { if ( true ) {



 return tom_make_EmptyType();  } } } } return super.visit_TomType(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Expression visit_Expression(  tom.engine.adt.tomsignature.types.Expression tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match5_1=(( tom.engine.adt.tomsignature.types.Expression)tom__arg); if (tom_is_fun_sym_Cast(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match5_1_source=tom_get_slot_Cast_source(tom_match5_1); { tom.engine.adt.tomsignature.types.Expression tom_e=tom_match5_1_source; if ( true ) {



 return (Expression) tom_make_TopDown(tom_make_replaceRemove()).visit(tom_e);  } } } } if (tom_is_fun_sym_Or(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match5_1_arg1=tom_get_slot_Or_arg1(tom_match5_1); { tom.engine.adt.tomsignature.types.Expression tom_match5_1_arg2=tom_get_slot_Or_arg2(tom_match5_1); { tom.engine.adt.tomsignature.types.Expression tom_e=tom_match5_1_arg1; if (tom_is_fun_sym_FalseTL(tom_match5_1_arg2) ||  false ) { if ( true ) {
 return (Expression) tom_make_TopDown(tom_make_replaceRemove()).visit(tom_e);  } } } } } } if (tom_is_fun_sym_EqualFunctionSymbol(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match5_1_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match5_1); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match5_1_astType; { tom.engine.adt.tomsignature.types.TomTerm tom_t1=tom_match5_1_exp1; if (tom_is_fun_sym_RecordAppl(tom_match5_1_exp2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_appl=tom_match5_1_exp2; { tom.engine.adt.tomsignature.types.SlotList tom_match5_1_exp2_slots=tom_get_slot_RecordAppl_slots(tom_match5_1_exp2); if (tom_is_fun_sym_concSlot(tom_match5_1_exp2_slots) ||  false ) { { tom.engine.adt.tomsignature.types.SlotList tom_match5_1_exp2_slots_list1=tom_match5_1_exp2_slots; if (!(tom_is_empty_concSlot_SlotList(tom_match5_1_exp2_slots_list1))) {tom_match5_1_exp2_slots_list1=tom_get_tail_concSlot_SlotList(tom_match5_1_exp2_slots_list1); if ( true ) {

        return (Expression) tom_make_TopDown(tom_make_replaceRemove()).visit(tom_make_EqualFunctionSymbol(tom_type,tom_t1,tom_appl.setSlots(tom_empty_list_concSlot())));
       } } } } } } } } } } } } } } } return super.visit_Expression(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_replaceRemove() { return new replaceRemove(); }



  public String prettyPrintCompiledMatch(ATerm subject) {
    StringBuffer res = new StringBuffer();
    Collection matches = collectMatch(subject);
    Iterator it = matches.iterator();
    while(it.hasNext()) {
      Instruction cm = (Instruction) it.next();
      res.append(prettyPrint(cm));
      res.append("\n");
    }
    return res.toString();
  }
	
	public String prettyPrint(ATerm subject) {
		 if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_CompiledMatch(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_automataInst=tom_get_slot_CompiledMatch_automataInst(tom_match6_1); { tom.engine.adt.tomsignature.types.OptionList tom_match6_1_option=tom_get_slot_CompiledMatch_option(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_automata=tom_match6_1_automataInst; if ( true ) {
 
				return prettyPrint(tom_automata); 
			 } } } } } if (tom_is_fun_sym_Let(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_Let_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_match6_1_source=tom_get_slot_Let_source(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match6_1_variable; { tom.engine.adt.tomsignature.types.Expression tom_src=tom_match6_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match6_1_astInstruction; if ( true ) {


				return "let " + prettyPrint(tom_variable) + " = " + prettyPrint(tom_src) + " in\n\t" + prettyPrint(tom_body).replaceAll("\n","\n\t");
			 } } } } } } } } if (tom_is_fun_sym_LetRef(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_LetRef_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_match6_1_source=tom_get_slot_LetRef_source(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match6_1_variable; { tom.engine.adt.tomsignature.types.Expression tom_src=tom_match6_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match6_1_astInstruction; if ( true ) {


				return "letRef " + prettyPrint(tom_variable) + " = " + prettyPrint(tom_src) + " in\n\t" + prettyPrint(tom_body).replaceAll("\n","\n\t");
			 } } } } } } } } if (tom_is_fun_sym_LetAssign(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_LetAssign_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_match6_1_source=tom_get_slot_LetAssign_source(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match6_1_variable; { tom.engine.adt.tomsignature.types.Expression tom_src=tom_match6_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match6_1_astInstruction; if ( true ) {


				return "letAssign " + prettyPrint(tom_variable) + " = " + prettyPrint(tom_src) + " in\n\t" + prettyPrint(tom_body).replaceAll("\n","\n\t");
			 } } } } } } } } if (tom_is_fun_sym_Assign(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_Assign_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_match6_1_source=tom_get_slot_Assign_source(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match6_1_variable; { tom.engine.adt.tomsignature.types.Expression tom_src=tom_match6_1_source; if ( true ) {


				return "Assign " + prettyPrint(tom_variable) + " = " + prettyPrint(tom_src) ;
			 } } } } } } if (tom_is_fun_sym_DoWhile(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_doInst=tom_get_slot_DoWhile_doInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_match6_1_condition=tom_get_slot_DoWhile_condition(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_doInst=tom_match6_1_doInst; { tom.engine.adt.tomsignature.types.Expression tom_condition=tom_match6_1_condition; if ( true ) {



				return "do\n\t " + prettyPrint(tom_doInst).replaceAll("\n","\n\t") +"while "+ prettyPrint(tom_condition);
			 } } } } } } if (tom_is_fun_sym_WhileDo(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match6_1_condition=tom_get_slot_WhileDo_condition(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_doInst=tom_get_slot_WhileDo_doInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_condition=tom_match6_1_condition; { tom.engine.adt.tomsignature.types.Instruction tom_doInst=tom_match6_1_doInst; if ( true ) {


				return "while "+ prettyPrint(tom_condition)+" do\n\t " + prettyPrint(tom_doInst).replaceAll("\n","\n\t");
			 } } } } } } if (tom_is_fun_sym_If(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match6_1_condition=tom_get_slot_If_condition(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_succesInst=tom_get_slot_If_succesInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_failureInst=tom_get_slot_If_failureInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_cond=tom_match6_1_condition; { tom.engine.adt.tomsignature.types.Instruction tom_success=tom_match6_1_succesInst; if (tom_is_fun_sym_Nop(tom_match6_1_failureInst) ||  false ) { if ( true ) {



				return  "if " + prettyPrint(tom_cond) + " then \n\t" + prettyPrint(tom_success).replaceAll("\n","\n\t"); 
			 } } } } } } } } if (tom_is_fun_sym_If(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match6_1_condition=tom_get_slot_If_condition(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_succesInst=tom_get_slot_If_succesInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_failureInst=tom_get_slot_If_failureInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_cond=tom_match6_1_condition; { tom.engine.adt.tomsignature.types.Instruction tom_success=tom_match6_1_succesInst; { tom.engine.adt.tomsignature.types.Instruction tom_failure=tom_match6_1_failureInst; if ( true ) {


				return "if " + prettyPrint(tom_cond) + " then \n\t" + prettyPrint(tom_success).replaceAll("\n","\n\t") + "\n\telse " + prettyPrint(tom_failure).replaceAll("\n","\n\t")+"\n";
			 } } } } } } } } if (tom_is_fun_sym_CheckInstance(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instruction=tom_get_slot_CheckInstance_instruction(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match6_1_instruction; if ( true ) {


				return "checkInstance\n\t" + prettyPrint(tom_instruction).replaceAll("\n","\n\t");
			 } } } } if (tom_is_fun_sym_AbstractBlock(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList=tom_get_slot_AbstractBlock_instList(tom_match6_1); if (tom_is_fun_sym_concInstruction(tom_match6_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList_list1=tom_match6_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList_begin1=tom_match6_1_instList_list1; { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList_end1=tom_match6_1_instList_list1; { while (!(tom_is_empty_concInstruction_InstructionList(tom_match6_1_instList_end1))) {tom_match6_1_instList_list1=tom_match6_1_instList_end1; { { tom.engine.adt.tomsignature.types.InstructionList tom_x=tom_get_slice_concInstruction(tom_match6_1_instList_begin1,tom_match6_1_instList_end1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instList_2=tom_get_head_concInstruction_InstructionList(tom_match6_1_instList_list1);tom_match6_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match6_1_instList_list1); if (tom_is_fun_sym_Nop(tom_match6_1_instList_2) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_y=tom_match6_1_instList_list1; if ( true ) {


				return prettyPrint(tom_make_AbstractBlock(tom_append_list_concInstruction(tom_x,tom_append_list_concInstruction(tom_y,tom_empty_list_concInstruction()))));
			 } } } } }tom_match6_1_instList_end1=tom_get_tail_concInstruction_InstructionList(tom_match6_1_instList_end1); } }tom_match6_1_instList_list1=tom_match6_1_instList_begin1; } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList=tom_get_slot_AbstractBlock_instList(tom_match6_1); { tom.engine.adt.tomsignature.types.InstructionList tom_instList=tom_match6_1_instList; if ( true ) {


				return prettyPrint(tom_instList);
			 } } } } if (tom_is_fun_sym_UnamedBlock(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList=tom_get_slot_UnamedBlock_instList(tom_match6_1); { tom.engine.adt.tomsignature.types.InstructionList tom_instList=tom_match6_1_instList; if ( true ) {


				return prettyPrint(tom_instList);
			 } } } } if (tom_is_fun_sym_NamedBlock(tom_match6_1) ||  false ) { { String  tom_match6_1_blockName=tom_get_slot_NamedBlock_blockName(tom_match6_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList=tom_get_slot_NamedBlock_instList(tom_match6_1); { String  tom_name=tom_match6_1_blockName; { tom.engine.adt.tomsignature.types.InstructionList tom_instList=tom_match6_1_instList; if ( true ) {


				return tom_name+ " : " + prettyPrint(tom_instList);
			 } } } } } } if (tom_is_fun_sym_TypedAction(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match6_1); { tom.engine.adt.tomsignature.types.Pattern tom_match6_1_positivePattern=tom_get_slot_TypedAction_positivePattern(tom_match6_1); { tom.engine.adt.tomsignature.types.PatternList tom_match6_1_negativePatternList=tom_get_slot_TypedAction_negativePatternList(tom_match6_1); if ( true ) {



				return "targetLanguageInstructions";
			 } } } } } if (tom_is_fun_sym_CompiledPattern(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match6_1_patternList=tom_get_slot_CompiledPattern_patternList(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_automata=tom_match6_1_automataInst; if ( true ) {

 
				return prettyPrint(tom_automata); 
			 } } } } } if (tom_is_fun_sym_CheckStamp(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_CheckStamp_variable(tom_match6_1); if ( true ) {


				return "";
			 } } } } } if(subject instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match7_1=(( tom.engine.adt.tomsignature.types.Expression)subject); if (tom_is_fun_sym_TomTermToExpression(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_astTerm=tom_match7_1_astTerm; if ( true ) {





				return prettyPrint(tom_astTerm);
			 } } } } if (tom_is_fun_sym_EqualFunctionSymbol(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match7_1_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_exp1=tom_match7_1_exp1; { tom.engine.adt.tomsignature.types.TomTerm tom_exp2=tom_match7_1_exp2; if ( true ) {


				return "is_fun_sym(" + prettyPrint(tom_exp1) + "," + prettyPrint(tom_exp2) + ")";
			 } } } } } } } if (tom_is_fun_sym_Negation(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match7_1_arg=tom_get_slot_Negation_arg(tom_match7_1); { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match7_1_arg; if ( true ) {


				return "not " + prettyPrint(tom_exp);
			 } } } } if (tom_is_fun_sym_IsEmptyList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_variable=tom_get_slot_IsEmptyList_variable(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_kid1=tom_match7_1_variable; if ( true ) {


				return "is_empty(" + prettyPrint(tom_kid1) + ")";
			 } } } } if (tom_is_fun_sym_EqualTerm(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match7_1_tomType=tom_get_slot_EqualTerm_tomType(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_kid1=tom_get_slot_EqualTerm_kid1(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_kid2=tom_get_slot_EqualTerm_kid2(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_kid1=tom_match7_1_kid1; { tom.engine.adt.tomsignature.types.TomTerm tom_kid2=tom_match7_1_kid2; if ( true ) {


				return "equal(" + prettyPrint(tom_kid1) + "," + prettyPrint(tom_kid2) + ")";
			 } } } } } } } if (tom_is_fun_sym_GetSliceList(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match7_1_astName=tom_get_slot_GetSliceList_astName(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_variableBeginAST=tom_get_slot_GetSliceList_variableBeginAST(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_variableEndAST=tom_get_slot_GetSliceList_variableEndAST(tom_match7_1); { tom.engine.adt.tomsignature.types.TomName tom_astName=tom_match7_1_astName; { tom.engine.adt.tomsignature.types.TomTerm tom_variableBeginAST=tom_match7_1_variableBeginAST; { tom.engine.adt.tomsignature.types.TomTerm tom_variableEndAST=tom_match7_1_variableEndAST; if ( true ) {


				return "getSliceList("+prettyPrint(tom_astName)+","+prettyPrint(tom_variableBeginAST)+","+prettyPrint(tom_variableEndAST)+")";
			 } } } } } } } } if (tom_is_fun_sym_GetHead(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_variable=tom_get_slot_GetHead_variable(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match7_1_variable; if ( true ) {



				return "getHead("+prettyPrint(tom_variable)+")";
			 } } } } if (tom_is_fun_sym_GetTail(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_variable=tom_get_slot_GetTail_variable(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match7_1_variable; if ( true ) {


				return "getTail("+prettyPrint(tom_variable)+")";
			 } } } } if (tom_is_fun_sym_GetSlot(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match7_1_codomain=tom_get_slot_GetSlot_codomain(tom_match7_1); { tom.engine.adt.tomsignature.types.TomName tom_match7_1_astName=tom_get_slot_GetSlot_astName(tom_match7_1); { String  tom_match7_1_slotNameString=tom_get_slot_GetSlot_slotNameString(tom_match7_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1_variable=tom_get_slot_GetSlot_variable(tom_match7_1); { tom.engine.adt.tomsignature.types.TomName tom_astName=tom_match7_1_astName; { String  tom_slotNameString=tom_match7_1_slotNameString; { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match7_1_variable; if ( true ) {


				return "get_slot_"+prettyPrint(tom_astName)+"_"+tom_slotNameString+"("+prettyPrint(tom_variable)+")";
			 } } } } } } } } } } } if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if (tom_is_fun_sym_Variable(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match8_1_option=tom_get_slot_Variable_option(tom_match8_1); { tom.engine.adt.tomsignature.types.TomName tom_match8_1_astName=tom_get_slot_Variable_astName(tom_match8_1); { tom.engine.adt.tomsignature.types.TomType tom_match8_1_astType=tom_get_slot_Variable_astType(tom_match8_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match8_1_constraints=tom_get_slot_Variable_constraints(tom_match8_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match8_1_astName; if ( true ) {




				return prettyPrint(tom_name);
			 } } } } } } } if (tom_is_fun_sym_VariableStar(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match8_1_option=tom_get_slot_VariableStar_option(tom_match8_1); { tom.engine.adt.tomsignature.types.TomName tom_match8_1_astName=tom_get_slot_VariableStar_astName(tom_match8_1); { tom.engine.adt.tomsignature.types.TomType tom_match8_1_astType=tom_get_slot_VariableStar_astType(tom_match8_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match8_1_constraints=tom_get_slot_VariableStar_constraints(tom_match8_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match8_1_astName; if ( true ) {


				return prettyPrint(tom_name);
			 } } } } } } } if (tom_is_fun_sym_Ref(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match8_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match8_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match8_1_tomTerm; if ( true ) {


				return prettyPrint(tom_term);
			 } } } } if (tom_is_fun_sym_RecordAppl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match8_1_option=tom_get_slot_RecordAppl_option(tom_match8_1); { tom.engine.adt.tomsignature.types.NameList tom_match8_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match8_1); { tom.engine.adt.tomsignature.types.SlotList tom_match8_1_slots=tom_get_slot_RecordAppl_slots(tom_match8_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match8_1_constraints=tom_get_slot_RecordAppl_constraints(tom_match8_1); { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match8_1_nameList; if ( true ) {


				return prettyPrint(tom_nameList); 
			 } } } } } } } } } if(subject instanceof  tom.engine.adt.tomsignature.types.TomName) { { tom.engine.adt.tomsignature.types.TomName tom_match9_1=(( tom.engine.adt.tomsignature.types.TomName)subject); if (tom_is_fun_sym_PositionName(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match9_1_numberList=tom_get_slot_PositionName_numberList(tom_match9_1); { tom.engine.adt.tomsignature.types.TomNumberList tom_number_list=tom_match9_1_numberList; if ( true ) {




				return "t"+ numberListToIdentifier(tom_number_list);
			 } } } } if (tom_is_fun_sym_Name(tom_match9_1) ||  false ) { { String  tom_match9_1_string=tom_get_slot_Name_string(tom_match9_1); { String  tom_string=tom_match9_1_string; if ( true ) {

				return tom_string;
			 } } } } } } if(subject instanceof  tom.engine.adt.tomsignature.types.TomNumber) { { tom.engine.adt.tomsignature.types.TomNumber tom_match10_1=(( tom.engine.adt.tomsignature.types.TomNumber)subject); if (tom_is_fun_sym_Number(tom_match10_1) ||  false ) { { int  tom_match10_1_integer=tom_get_slot_Number_integer(tom_match10_1); { int  tom_n=tom_match10_1_integer; if ( true ) {





				return "" + tom_n;
			 } } } } if (tom_is_fun_sym_NameNumber(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_astName=tom_get_slot_NameNumber_astName(tom_match10_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match10_1_astName; if ( true ) {


				return prettyPrint(tom_name);
			 } } } } if (tom_is_fun_sym_ListNumber(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match10_1_number=tom_get_slot_ListNumber_number(tom_match10_1); { tom.engine.adt.tomsignature.types.TomNumber tom_number=tom_match10_1_number; if ( true ) {


				return "listNumber"+prettyPrint(tom_number);
			 } } } } if (tom_is_fun_sym_Begin(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match10_1_number=tom_get_slot_Begin_number(tom_match10_1); { tom.engine.adt.tomsignature.types.TomNumber tom_number=tom_match10_1_number; if ( true ) {


				return "begin"+prettyPrint(tom_number);
			 } } } } if (tom_is_fun_sym_End(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match10_1_number=tom_get_slot_End_number(tom_match10_1); { tom.engine.adt.tomsignature.types.TomNumber tom_number=tom_match10_1_number; if ( true ) {


				return "end"+prettyPrint(tom_number);
			 } } } } } }



		if(subject instanceof InstructionList) {
			ATermList list = (ATermList)subject;
			if(list.isEmpty()) {
				return "";
			} else {
				return prettyPrint(list.getFirst()) + "\n" + prettyPrint(list.getNext());
			}
		}  else if(subject instanceof TomNumberList) {
			ATermList list = (ATermList)subject;
			if(list.isEmpty()) {
				return "";
			} else {
				return prettyPrint(list.getFirst()) + prettyPrint(list.getNext());
			}
		} else if(subject instanceof ATermList) {
			ATermList list = (ATermList)subject;
			if(list.isEmpty()) {
				return "";
			} else {
				return prettyPrint(list.getFirst()) + " " + prettyPrint(list.getNext());
			}
		}

		return subject.toString();
	}

   private static class collectMatch  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  java.util.Collection  c;  public collectMatch(  java.util.Collection  c ) { super(tom_make_Identity() ); this.c=c; } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match11_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_CompiledMatch(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_m=tom_match11_1; { tom.engine.adt.tomsignature.types.Instruction tom_match11_1_automataInst=tom_get_slot_CompiledMatch_automataInst(tom_match11_1); if ( true ) {


        c.add(tom_m);
       } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_collectMatch( java.util.Collection  t0) { return new collectMatch(t0); }

 
  
  public Collection collectMatch(ATerm subject) {
    Collection result = new HashSet();
    try {
      MuTraveler.init(tom_make_TopDown(tom_make_collectMatch(result))).visit(subject);
    } catch(jjtraveler.VisitFailure e) {
      System.out.println("strategy failed");
    }
    return result;
  }


}
