/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.tools;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import tom.engine.adt.tomsignature.TomSignatureFactory;
import tom.engine.adt.tomsignature.types.SymbolList;
import tom.engine.adt.tomsignature.types.TomEntry;
import tom.engine.adt.tomsignature.types.TomEntryList;
import tom.engine.adt.tomsignature.types.TomSymbol;
import tom.engine.adt.tomsignature.types.TomSymbolTable;
import tom.engine.adt.tomsignature.types.TomType;
import tom.engine.adt.tomsignature.types.TomForwardType;
import tom.engine.adt.tomsignature.types.TomTypeDefinition;
import tom.engine.exception.TomRuntimeException;
import tom.platform.OptionManager;

public class SymbolTable {
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.KeyEntry tom_make_UsedTypeDefinition( tom.engine.adt.tomsignature.types.TomTypeDefinition t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeKeyEntry_UsedTypeDefinition(t0); }private static  tom.engine.adt.tomsignature.types.KeyEntry tom_make_UsedSymbolDestructor( tom.engine.adt.tomsignature.types.TomSymbol t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeKeyEntry_UsedSymbolDestructor(t0); }private static  tom.engine.adt.tomsignature.types.KeyEntry tom_make_UsedSymbolConstructor( tom.engine.adt.tomsignature.types.TomSymbol t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeKeyEntry_UsedSymbolConstructor(t0); }private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomSymbol( tom.engine.adt.tomsignature.types.SymbolList t) {  return (t!= null) && t.isSortSymbolList() ;}private static  tom.engine.adt.tomsignature.types.SymbolList tom_empty_list_concTomSymbol() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(); }private static  tom.engine.adt.tomsignature.types.SymbolList tom_cons_list_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbol e,  tom.engine.adt.tomsignature.types.SymbolList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(e,l); }private static  tom.engine.adt.tomsignature.types.TomSymbol tom_get_head_concTomSymbol_SymbolList( tom.engine.adt.tomsignature.types.SymbolList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.SymbolList tom_get_tail_concTomSymbol_SymbolList( tom.engine.adt.tomsignature.types.SymbolList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomSymbol_SymbolList( tom.engine.adt.tomsignature.types.SymbolList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.SymbolList tom_append_list_concTomSymbol( tom.engine.adt.tomsignature.types.SymbolList l1,  tom.engine.adt.tomsignature.types.SymbolList l2) {    if(tom_is_empty_concTomSymbol_SymbolList(l1)) {     return l2;    } else if(tom_is_empty_concTomSymbol_SymbolList(l2)) {     return l1;    } else if(tom_is_empty_concTomSymbol_SymbolList(( tom.engine.adt.tomsignature.types.SymbolList)tom_get_tail_concTomSymbol_SymbolList(l1))) {     return ( tom.engine.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol)tom_get_head_concTomSymbol_SymbolList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol)tom_get_head_concTomSymbol_SymbolList(l1),tom_append_list_concTomSymbol(( tom.engine.adt.tomsignature.types.SymbolList)tom_get_tail_concTomSymbol_SymbolList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.SymbolList tom_get_slice_concTomSymbol( tom.engine.adt.tomsignature.types.SymbolList begin,  tom.engine.adt.tomsignature.types.SymbolList end) {    if(tom_terms_equal_SymbolList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.SymbolList)tom_empty_list_concTomSymbol();    } else {      return ( tom.engine.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol)tom_get_head_concTomSymbol_SymbolList(begin),( tom.engine.adt.tomsignature.types.SymbolList)tom_get_slice_concTomSymbol(( tom.engine.adt.tomsignature.types.SymbolList)tom_get_tail_concTomSymbol_SymbolList(begin),end));    }   }  private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomEntry( tom.engine.adt.tomsignature.types.TomEntryList t) {  return (t!= null) && t.isSortTomEntryList() ;}private static  tom.engine.adt.tomsignature.types.TomEntryList tom_empty_list_concTomEntry() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntryList(); }private static  tom.engine.adt.tomsignature.types.TomEntryList tom_cons_list_concTomEntry( tom.engine.adt.tomsignature.types.TomEntry e,  tom.engine.adt.tomsignature.types.TomEntryList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntryList(e,l); }private static  tom.engine.adt.tomsignature.types.TomEntry tom_get_head_concTomEntry_TomEntryList( tom.engine.adt.tomsignature.types.TomEntryList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomEntryList tom_get_tail_concTomEntry_TomEntryList( tom.engine.adt.tomsignature.types.TomEntryList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomEntry_TomEntryList( tom.engine.adt.tomsignature.types.TomEntryList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomEntryList tom_append_list_concTomEntry( tom.engine.adt.tomsignature.types.TomEntryList l1,  tom.engine.adt.tomsignature.types.TomEntryList l2) {    if(tom_is_empty_concTomEntry_TomEntryList(l1)) {     return l2;    } else if(tom_is_empty_concTomEntry_TomEntryList(l2)) {     return l1;    } else if(tom_is_empty_concTomEntry_TomEntryList(( tom.engine.adt.tomsignature.types.TomEntryList)tom_get_tail_concTomEntry_TomEntryList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomEntryList)tom_cons_list_concTomEntry(( tom.engine.adt.tomsignature.types.TomEntry)tom_get_head_concTomEntry_TomEntryList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomEntryList)tom_cons_list_concTomEntry(( tom.engine.adt.tomsignature.types.TomEntry)tom_get_head_concTomEntry_TomEntryList(l1),tom_append_list_concTomEntry(( tom.engine.adt.tomsignature.types.TomEntryList)tom_get_tail_concTomEntry_TomEntryList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomEntryList tom_get_slice_concTomEntry( tom.engine.adt.tomsignature.types.TomEntryList begin,  tom.engine.adt.tomsignature.types.TomEntryList end) {    if(tom_terms_equal_TomEntryList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomEntryList)tom_empty_list_concTomEntry();    } else {      return ( tom.engine.adt.tomsignature.types.TomEntryList)tom_cons_list_concTomEntry(( tom.engine.adt.tomsignature.types.TomEntry)tom_get_head_concTomEntry_TomEntryList(begin),( tom.engine.adt.tomsignature.types.TomEntryList)tom_get_slice_concTomEntry(( tom.engine.adt.tomsignature.types.TomEntryList)tom_get_tail_concTomEntry_TomEntryList(begin),end));    }   }  private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomEntry tom_make_Entry( String  t0,  tom.engine.adt.tomsignature.types.TomSymbol t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntry_Entry(t0, t1); }private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomSymbolTable tom_make_Table( tom.engine.adt.tomsignature.types.TomEntryList t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomSymbolTable_Table(t0); }private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomTypeDefinition tom_make_TypeDefinition( tom.engine.adt.tomsignature.types.TomType t0,  tom.engine.adt.tomsignature.types.TomForwardType t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeDefinition_TypeDefinition(t0, t1); }private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomForwardType tom_make_EmptyForward() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomForwardType_EmptyForward(); }private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}  
  private final static String TYPE_INT       = "int";
  private final static String TYPE_LONG      = "long";
  private final static String TYPE_CHAR      = "char";
  private final static String TYPE_DOUBLE    = "double";
  private final static String TYPE_STRING    = "String";
  private final static String TYPE_BOOLEAN   = "boolean";
  private final static String TYPE_UNIVERSAL = "universal";
  private final static String TYPE_VOID      = "void";

  private Map mapSymbolName = null;
  private Map mapTypeName = null;
  
  public void init(OptionManager optionManager) {
    mapSymbolName = new HashMap();
    mapTypeName = new HashMap();
	
    TomForwardType emptyForward = tom_make_EmptyForward();

    if( ((Boolean)optionManager.getOptionValue("cCode")).booleanValue() ) {
      putTypeDefinition(TYPE_CHAR, ASTFactory.makeType(TYPE_CHAR,"char"),emptyForward);
      putTypeDefinition(TYPE_BOOLEAN, ASTFactory.makeType(TYPE_BOOLEAN,"int"),emptyForward);
      putTypeDefinition(TYPE_INT, ASTFactory.makeType(TYPE_INT,"int"),emptyForward);
      putTypeDefinition(TYPE_LONG, ASTFactory.makeType(TYPE_LONG,"long"),emptyForward);
      putTypeDefinition(TYPE_DOUBLE, ASTFactory.makeType(TYPE_DOUBLE,"double"),emptyForward);
      putTypeDefinition(TYPE_STRING, ASTFactory.makeType(TYPE_STRING,"char*"),emptyForward);
      putTypeDefinition(TYPE_UNIVERSAL, ASTFactory.makeType(TYPE_UNIVERSAL,"void*"),emptyForward);
      putTypeDefinition(TYPE_VOID, ASTFactory.makeType(TYPE_VOID,"void"),emptyForward);
    } else if( ((Boolean)optionManager.getOptionValue("jCode")).booleanValue() ) {
      putTypeDefinition(TYPE_CHAR, ASTFactory.makeType(TYPE_CHAR,"char"),emptyForward);
      putTypeDefinition(TYPE_BOOLEAN, ASTFactory.makeType(TYPE_BOOLEAN,"boolean"),emptyForward);
      putTypeDefinition(TYPE_INT, ASTFactory.makeType(TYPE_INT,"int"),emptyForward);
      putTypeDefinition(TYPE_LONG, ASTFactory.makeType(TYPE_LONG,"long"),emptyForward);
      putTypeDefinition(TYPE_DOUBLE, ASTFactory.makeType(TYPE_DOUBLE,"double"),emptyForward);
      putTypeDefinition(TYPE_STRING, ASTFactory.makeType(TYPE_STRING,"String"),emptyForward);
      putTypeDefinition(TYPE_UNIVERSAL, ASTFactory.makeType(TYPE_UNIVERSAL,"Object"),emptyForward);
      putTypeDefinition(TYPE_VOID, ASTFactory.makeType(TYPE_VOID,"void"),emptyForward);
    } else if( ((Boolean)optionManager.getOptionValue("camlCode")).booleanValue() ) { // this is really bad, will need to be improved
      putTypeDefinition(TYPE_CHAR, ASTFactory.makeType(TYPE_CHAR,"char"),emptyForward);
      putTypeDefinition(TYPE_BOOLEAN, ASTFactory.makeType(TYPE_BOOLEAN,"bool"),emptyForward);
      putTypeDefinition(TYPE_INT, ASTFactory.makeType(TYPE_INT,"int"),emptyForward);
      putTypeDefinition(TYPE_LONG, ASTFactory.makeType(TYPE_LONG,"long"),emptyForward);
      putTypeDefinition(TYPE_DOUBLE, ASTFactory.makeType(TYPE_DOUBLE,"double"),emptyForward);
      putTypeDefinition(TYPE_STRING, ASTFactory.makeType(TYPE_STRING,"String"),emptyForward);
      putTypeDefinition(TYPE_UNIVERSAL, ASTFactory.makeType(TYPE_UNIVERSAL,"None"),emptyForward);
      putTypeDefinition(TYPE_VOID, ASTFactory.makeType(TYPE_VOID,"unit"),emptyForward);
    }
  }

  public void regenerateFromTerm(TomSymbolTable symbTable) {
    TomEntryList list =  symbTable.getEntryList();
    while(!list.isEmpty()) {
      TomEntry symb = list.getHead();
      putSymbol(symb.getStrName(), symb.getAstSymbol());
      list = list.getTail();
    }
  }

  public void putSymbol(String name, TomSymbol astSymbol) {
    TomSymbol result = (TomSymbol) mapSymbolName.put(name,astSymbol);
  }

  public TomSymbol getSymbolFromName(String name) {
    TomSymbol res = (TomSymbol)mapSymbolName.get(name);
    return res;
  }

  public SymbolList getSymbolFromType(TomType type) {
    SymbolList res = tom_empty_list_concTomSymbol();
    Iterator it = mapSymbolName.values().iterator();
    while(it.hasNext()) {
      TomSymbol symbol = (TomSymbol)it.next();
      if(symbol.getTypesToType().getCodomain() == type) {
        res = tom_cons_list_concTomSymbol(symbol,tom_append_list_concTomSymbol(res,tom_empty_list_concTomSymbol()));
      }
    }
    return res;
  }

  public void putTypeDefinition(String name, TomType astType, TomForwardType fwdType) {
    TomTypeDefinition typeDef = tom_make_TypeDefinition(astType,fwdType);
    mapTypeName.put(name,typeDef);
  }

  public TomTypeDefinition getTypeDefinition(String name) {
    TomTypeDefinition def = (TomTypeDefinition) mapTypeName.get(name);
		return def;
  }
	
  public TomType getType(String name) {
    TomTypeDefinition def = getTypeDefinition(name);
    if (def != null) {
      TomType result = def.getTomType();
      return result;
    } else {
			return null;
		} 
  }

  public TomForwardType getForwardType(String name) {
    TomTypeDefinition def = getTypeDefinition(name);
    if (def != null) {
      TomForwardType result = def.getForward();
      return result;
    } else { 
			return null;
		} 
  }

	public boolean isUsedSymbolConstructor(TomSymbol symbol) {
    // System.out.println("con " + symbol.getAstName().getString() + ": " + (mapSymbolName.get(`UsedSymbolConstructor(symbol)) != null));
		return (mapSymbolName.get(tom_make_UsedSymbolConstructor(symbol)) != null);
		//return true;
	}
	
	public boolean isUsedSymbolDestructor(TomSymbol symbol) {
    // System.out.println("des " + symbol.getAstName().getString() + ": " + (mapSymbolName.get(`UsedSymbolDestructor(symbol)) != null));
    return (mapSymbolName.get(tom_make_UsedSymbolDestructor(symbol)) != null);
		//return true;
	}
	
	public boolean isUsedTypeDefinition(TomTypeDefinition type) {
		return (mapTypeName.get(tom_make_UsedTypeDefinition(type)) != null);
		//return true;
	}
 
	public void setUsedSymbolConstructor(TomSymbol symbol) {
    TomSymbol result = (TomSymbol) mapSymbolName.put(tom_make_UsedSymbolConstructor(symbol),symbol);
	}
	
	public void setUsedSymbolDestructor(TomSymbol symbol) {
		//System.out.println("setUsedDestructor: " + symbol.getAstName());
    TomSymbol result = (TomSymbol) mapSymbolName.put(tom_make_UsedSymbolDestructor(symbol),symbol);
	}
	
	public void setUsedTypeDefinition(TomTypeDefinition type) {
    TomTypeDefinition result = (TomTypeDefinition) mapTypeName.put(tom_make_UsedTypeDefinition(type),type);
	}

	public void setUsedSymbolConstructor(String name) {
		TomSymbol symbol = getSymbolFromName(name);
		if(symbol!=null) {
			setUsedSymbolConstructor(symbol);
		}
	}
	
	public void setUsedSymbolDestructor(String name) {
		TomSymbol symbol = getSymbolFromName(name);
		if(symbol!=null) {
			setUsedSymbolDestructor(symbol);
		}
	}
	
	public void setUsedTypeDefinition(String name) {
		TomTypeDefinition type = getTypeDefinition(name);
		if(type!=null) {
			setUsedTypeDefinition(type);
		}
	}
	
	public boolean isUsedSymbolConstructor(String name) {
		TomSymbol symbol = getSymbolFromName(name);
		if(symbol!=null) {
			return isUsedSymbolConstructor(symbol);
		}
		return false;
	}
	
	public boolean isUsedSymbolDestructor(String name) {
		TomSymbol symbol = getSymbolFromName(name);
		if(symbol!=null) {
			return isUsedSymbolDestructor(symbol);
		}
		return false;
	}
	
	public boolean isUsedTypeDefinition(String name) {
		TomTypeDefinition type = getTypeDefinition(name);
		if(type!=null) {
			return isUsedTypeDefinition(type);
		}
		return false;
	}

  public TomType getIntType() {
    return getType(TYPE_INT);
  }

  public TomType getLongType() {
    return getType(TYPE_LONG);
  }

  public TomType getCharType() {
    return getType(TYPE_CHAR);
  }

  public TomType getDoubleType() {
    return getType(TYPE_DOUBLE);
  }

  public TomType getBooleanType() {
    return getType(TYPE_BOOLEAN);
  }
  
  public TomType getStringType() {
    return getType(TYPE_STRING);
  }

  public TomType getUniversalType() {
    return getType(TYPE_UNIVERSAL);
  }

  public TomType getVoidType() {
    return getType(TYPE_VOID);
  }

  public boolean isIntType(String type) {
    return type.equals(TYPE_INT);
  }

  public boolean isLongType(String type) {
    return type.equals(TYPE_LONG);
  }

  public boolean isCharType(String type) {
    return type.equals(TYPE_CHAR);
  }

  public boolean isStringType(String type) {
    return type.equals(TYPE_STRING);
  }

  public boolean isBooleanType(String type) {
    return type.equals(TYPE_BOOLEAN);
  }

  public boolean isDoubleType(String type) {
    return type.equals(TYPE_DOUBLE);
  }

  public boolean isVoidType(String type) {
    return type.equals(TYPE_VOID);
  }

  public boolean isBuiltinType(String type) {
    return isIntType(type) || isLongType(type) || isCharType(type) ||
      isStringType(type) || isBooleanType(type) || isDoubleType(type);
  }
 
  public TomType getBuiltinType(String type) {
    if(isIntType(type)) {
      return getIntType();
    } else if(isLongType(type)) {
      return getLongType();
    } else if(isCharType(type)) {
      return getCharType();
    } else if(isStringType(type)) {
      return getStringType();
    } else if(isBooleanType(type)) {
      return getBooleanType();
    } else if(isDoubleType(type)) {
      return getDoubleType();
    } 
    System.out.println("Not a builtin type: " + type);
    throw new TomRuntimeException("getBuiltinType error on term: " + type);
  }
  
  public Iterator keySymbolIterator() {
    Set keys = mapSymbolName.keySet();
    Iterator it = keys.iterator();
    return it;
  }

  public void fromTerm(TomSymbolTable table) {
    TomEntryList list = table.getEntryList();
    while(!list.isEmpty()) {
      TomEntry entry = list.getHead();
      putSymbol(entry.getStrName(),entry.getAstSymbol());
      list = list.getTail();
    }
  }

  public TomSymbolTable toTerm() {
    TomEntryList list = tom_empty_list_concTomEntry();
    Iterator it = keySymbolIterator();
    while(it.hasNext()) {
			Object key = it.next();
			if(key instanceof String) {
				String name = (String)key;
				TomSymbol symbol = getSymbolFromName(name);
				TomEntry entry = tom_make_Entry(name,symbol);
				list = tom_cons_list_concTomEntry(entry,tom_append_list_concTomEntry(list,tom_empty_list_concTomEntry()));
			}
    }
    return tom_make_Table(list);
  }

} // class SymbolTable
