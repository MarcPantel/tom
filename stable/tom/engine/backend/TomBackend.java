/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.backend;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.logging.Level;
import java.util.*;

import tom.engine.TomMessage;
import tom.engine.TomBase;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.tools.*;
import tom.engine.exception.TomRuntimeException;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import tom.library.strategy.mutraveler.MuTraveler;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;


/**
 * The TomBackend "plugin".
 * Has to create the generator depending on OptionManager, create the output 
 * writer and generting the output code.
 */
public class TomBackend extends TomGenericPlugin {
  
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_IsEmptyArray( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isIsEmptyArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsEmptyArray_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyArray_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyArray_index( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getIndex() ;}private static boolean tom_is_fun_sym_IsEmptyList( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isIsEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsEmptyList_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyList_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetTail( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetTail() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetTail_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetTail_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetHead( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetHead() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetHead_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetHead_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetHead_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TypedAction( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isTypedAction() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_TypedAction_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static  tom.engine.adt.tomsignature.types.Pattern tom_get_slot_TypedAction_positivePattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPositivePattern() ;}private static  tom.engine.adt.tomsignature.types.PatternList tom_get_slot_TypedAction_negativePatternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getNegativePatternList() ;}private static boolean tom_is_fun_sym_CompiledMatch( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledMatch() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledMatch_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_CompiledMatch_option( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getOption() ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_BuildAppendArray( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildAppendArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildAppendArray_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendArray_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendArray_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildConsArray( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildConsArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildConsArray_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsArray_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsArray_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildEmptyArray( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildEmptyArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildEmptyArray_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  int  tom_get_slot_BuildEmptyArray_size( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSize() ;}private static boolean tom_is_fun_sym_BuildAppendList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildAppendList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildAppendList_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendList_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendList_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildConsList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildConsList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildConsList_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsList_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsList_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildEmptyList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildEmptyList_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_BuildTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildTerm() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildTerm_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_BuildTerm_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  String  tom_get_slot_BuildTerm_moduleName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getModuleName() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_ListAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isListAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_ListAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_ListAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_ListAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_ListAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTermAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_TermAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_TermAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_TermAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_TermAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_PlatformOptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformBoolean(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformValue(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformOption(Object t1, Object t2) {  return t1.equals(t2) ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Try( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDownCollect( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x"))))) ; }  /*  * strategies with Id considered as failure  */       



  /** the tabulation starting value */
  private final static int defaultDeep = 2;

  /** the declared options string */
  public static final String DECLARED_OPTIONS = 
    "<options>" +
    "<boolean name='noOutput' altName=''  description='Do not generate code' value='false'/>" +
    "<boolean name='jCode'    altName='j' description='Generate Java code' value='true'/>" + 
    "<boolean name='cCode'    altName='c' description='Generate C code' value='false'/>" +
    "<boolean name='camlCode' altName=''  description='Generate Caml code' value='false'/>" + 
    "</options>";
  
  /** the generated file name */
  private String generatedFileName = null;
  
  /** Constructor*/
  public TomBackend() {
    super("TomBackend");
  }
  
  /**
   *
   */
  public void run() {
    if(isActivated() == true) {
      TomAbstractGenerator generator = null;
      Writer writer;
      long startChrono = System.currentTimeMillis();
      try {
        String encoding = getOptionStringValue("encoding");
        writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(getStreamManager().getOutputFile()),encoding));
        OutputCode output = new OutputCode(writer, getOptionManager());
        if(getOptionBooleanValue("noOutput")) {
          throw new TomRuntimeException("Backend activated, but noOutput is set");
        } else if(getOptionBooleanValue("cCode")) {
          generator = new TomCGenerator(output, getOptionManager(), symbolTable());
        } else if(getOptionBooleanValue("camlCode")) {
          generator = new TomCamlGenerator(output, getOptionManager(), symbolTable());
        } else if(getOptionBooleanValue("jCode")) {
          generator = new TomJavaGenerator(output, getOptionManager(), symbolTable());
        } else {
          throw new TomRuntimeException("no selected language for the Backend");
        }
				
        TomTerm pilCode = (TomTerm) getWorkingTerm();

				markUsedConstructorDestructor(pilCode);

        generator.generate(defaultDeep, generator.operatorsTogenerate(pilCode),TomBase.DEFAULT_MODULE_NAME);
        // verbose
        getLogger().log(Level.INFO, TomMessage.tomGenerationPhase.getMessage(),
                        new Integer((int)(System.currentTimeMillis()-startChrono)));
        writer.close();
      } catch (IOException e) {
        getLogger().log( Level.SEVERE, TomMessage.backendIOException.getMessage(),
                         new Object[]{getStreamManager().getOutputFile().getName(), e.getMessage()} );
        return;
      } catch (Exception e) {
        getLogger().log( Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                         new Object[]{getStreamManager().getInputFileName(), "TomBackend", e.getMessage()} );
        e.printStackTrace();
        return;
      }
      // set the generated File Name
      try {
        generatedFileName = getStreamManager().getOutputFile().getCanonicalPath();
      } catch (IOException e) {
        System.out.println("IO Exception when computing generatedFileName");
        e.printStackTrace();
      }

    } else {
      // backend is desactivated
      getLogger().log(Level.INFO,TomMessage.backendInactivated.getMessage());
    }
  }

  public void optionChanged(String optionName, Object optionValue) {
    //System.out.println("optionChanged: " + optionName + " --> " + optionValue);
    if(optionName.equals("camlCode") && ((Boolean)optionValue).booleanValue() ) { 
      setOptionValue("jCode", Boolean.FALSE);        
      setOptionValue("cCode", Boolean.FALSE);        
    } else if(optionName.equals("cCode") && ((Boolean)optionValue).booleanValue() ) { 
      setOptionValue("jCode", Boolean.FALSE);        
      setOptionValue("camlCode", Boolean.FALSE);        
    } else if(optionName.equals("jCode") && ((Boolean)optionValue).booleanValue() ) { 
      setOptionValue("cCode", Boolean.FALSE);        
      setOptionValue("camlCode", Boolean.FALSE);        
    }
  }

  
  /**
   * inherited from OptionOwner interface (plugin) 
   */
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomBackend.DECLARED_OPTIONS);
  }
  
  private boolean isActivated() {
    return !getOptionBooleanValue("noOutput");
  }
  
  protected SymbolTable getSymbolTable(String moduleName) {
    //TODO//
    //Using of the moduleName
    ////////

//System.out.println(symbolTable().toTerm());

    return symbolTable();
  }
  /**
   * inherited from plugin interface
   * returns the generated file name
   */
  public Object[] getArgs() {
    return new Object[]{generatedFileName};
  }

	











	private void markUsedConstructorDestructor(TomTerm pilCode) {
		Stack stack = new Stack();
    stack.push(TomBase.DEFAULT_MODULE_NAME);
		try {
			VisitableVisitor v = tom_make_TopDownCollect(tom_make_Collector(this,stack));
			v = MuTraveler.init(v);
			v.visit(pilCode);
		} catch (VisitFailure e) {
      System.out.println("reduction failed on: " + pilCode);
		}
	}

	 private static class Collector  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomBackend  tb;   Stack  stack;  public Collector(  TomBackend  tb ,   Stack  stack ) { super(tom_make_Identity() ); this.tb=tb; this.stack=stack; } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match1_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_CompiledMatch(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match1_1_automataInst=tom_get_slot_CompiledMatch_automataInst(tom_match1_1); { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option=tom_get_slot_CompiledMatch_option(tom_match1_1); { tom.engine.adt.tomsignature.types.Instruction tom_inst=tom_match1_1_automataInst; { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match1_1_option; if ( true ) {


				String moduleName = getModuleName(tom_optionList);

				if(moduleName==null) { // && hasGeneratedMatch(`optionList)) {
					try {
						moduleName = (String) stack.peek();
            stack.push(moduleName);
            //System.out.println("push2: " + moduleName);
					} catch (EmptyStackException e) {
						System.out.println("No moduleName in stack");
					}
        } else {
          stack.push(moduleName);
          //System.out.println("push1: " + moduleName);
        }
				//System.out.println("match -> moduleName = " + moduleName);
				try {
					MuTraveler.init(tom_make_TopDownCollect(tom_make_Collector(tb,stack))).visit(tom_inst);
				} catch (jjtraveler.VisitFailure e) {
					System.out.println("visit failure");
					tom_make_Fail().visit(null);
				}
				//String pop = (String) stack.pop();
				//System.out.println("pop: " + pop);
				tom_make_Fail().visit(null);
			 } } } } } } if (tom_is_fun_sym_TypedAction(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match1_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match1_1); { tom.engine.adt.tomsignature.types.Instruction tom_inst=tom_match1_1_astInstruction; if ( true ) {


        try {
          MuTraveler.init(tom_make_TopDownCollect(tom_make_Collector(tb,stack))).visit(tom_inst);
        } catch (jjtraveler.VisitFailure e) {
          System.out.println("visit failure");
          tom_make_Fail().visit(null);
        }
        tom_make_Fail().visit(null);
       } } } } } } return super.visit_Instruction(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Expression visit_Expression(  tom.engine.adt.tomsignature.types.Expression tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1=(( tom.engine.adt.tomsignature.types.Expression)tom__arg); {boolean tom_bool_match2_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname= null ; if (tom_is_fun_sym_IsEmptyList(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_opname=tom_get_slot_IsEmptyList_opname(tom_match2_1); } else { if (tom_is_fun_sym_IsEmptyArray(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_opname=tom_get_slot_IsEmptyArray_opname(tom_match2_1); } else { if (tom_is_fun_sym_GetHead(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_opname=tom_get_slot_GetHead_opname(tom_match2_1); } else { if (tom_is_fun_sym_GetTail(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_opname=tom_get_slot_GetTail_opname(tom_match2_1); } } } } if (tom_bool_match2_1) { if (tom_is_fun_sym_Name(tom_match2_1_opname) ||  false ) { { String  tom_match2_1_opname_string=tom_get_slot_Name_string(tom_match2_1_opname); { String  tom_name=tom_match2_1_opname_string; if ( true ) {




				try {
					// System.out.println("list check: " + `name);
					String moduleName = (String) stack.peek();
					//System.out.println("moduleName: " + moduleName);
          TomSymbol tomSymbol = TomBase.getSymbolFromName(tom_name,tb.getSymbolTable(moduleName)); 
          tb.getSymbolTable(moduleName).setUsedSymbolConstructor(tomSymbol);
				} catch (EmptyStackException e) {
					System.out.println("No moduleName in stack");
				}

       } } } } } } } } } return super.visit_Expression(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList= null ; if (tom_is_fun_sym_TermAppl(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_nameList=tom_get_slot_TermAppl_nameList(tom_match3_1); } else { if (tom_is_fun_sym_RecordAppl(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match3_1); } else { if (tom_is_fun_sym_ListAppl(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_nameList=tom_get_slot_ListAppl_nameList(tom_match3_1); } } } if (tom_bool_match3_1) { { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match3_1_nameList; if ( true ) {




				NameList l = tom_nameList;
        // System.out.println("dest " + `l);
				while(!l.isEmpty()) {
					try {
						//System.out.println("op: " + l.getHead());
						String moduleName = (String) stack.peek();
						//System.out.println("moduleName: " + moduleName);
            TomSymbol tomSymbol = TomBase.getSymbolFromName(l.getHead().getString(),tb.getSymbolTable(moduleName)); 
            if(tomSymbol!=null) {
              tb.getSymbolTable(moduleName).setUsedSymbolDestructor(tomSymbol);
            } else {
              System.out.println("null symbol: " + l.getHead().getString());
            }
					} catch (EmptyStackException e) {
						System.out.println("No moduleName in stack");
					}
					l = l.getTail();
				}
				tom_make_Fail().visit(null);
			 } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astName= null ; if (tom_is_fun_sym_BuildTerm(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_BuildTerm_astName(tom_match3_1); } else { if (tom_is_fun_sym_BuildEmptyList(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_BuildEmptyList_astName(tom_match3_1); } else { if (tom_is_fun_sym_BuildEmptyArray(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_BuildEmptyArray_astName(tom_match3_1); } } } if (tom_bool_match3_1) { if (tom_is_fun_sym_Name(tom_match3_1_astName) ||  false ) { { String  tom_match3_1_astName_string=tom_get_slot_Name_string(tom_match3_1_astName); { String  tom_name=tom_match3_1_astName_string; if ( true ) {

				try {
					// System.out.println("build: " + `name);
					String moduleName = (String) stack.peek();
					//System.out.println("moduleName: " + moduleName);
          TomSymbol tomSymbol = TomBase.getSymbolFromName(tom_name,tb.getSymbolTable(moduleName)); 
          tb.getSymbolTable(moduleName).setUsedSymbolConstructor(tomSymbol);
          // resolve uses in the symbol declaration
          try {
            MuTraveler.init(tom_make_TopDownCollect(tom_make_Collector(tb,stack))).visit(tomSymbol);
          } catch (jjtraveler.VisitFailure e) {
            System.out.println("visit failure");
            tom_make_Fail().visit(null);
          }
				} catch (EmptyStackException e) {
					System.out.println("No moduleName in stack");
				}
			 } } } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astName= null ; if (tom_is_fun_sym_BuildConsList(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_BuildConsList_astName(tom_match3_1); } else { if (tom_is_fun_sym_BuildAppendList(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_BuildAppendList_astName(tom_match3_1); } else { if (tom_is_fun_sym_BuildConsArray(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_BuildConsArray_astName(tom_match3_1); } else { if (tom_is_fun_sym_BuildAppendArray(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_astName=tom_get_slot_BuildAppendArray_astName(tom_match3_1); } } } } if (tom_bool_match3_1) { if (tom_is_fun_sym_Name(tom_match3_1_astName) ||  false ) { { String  tom_match3_1_astName_string=tom_get_slot_Name_string(tom_match3_1_astName); { String  tom_name=tom_match3_1_astName_string; if ( true ) {

				try {
					// System.out.println("build: " + `name);
					String moduleName = (String) stack.peek();
					//System.out.println("moduleName: " + moduleName);
          TomSymbol tomSymbol = TomBase.getSymbolFromName(tom_name,tb.getSymbolTable(moduleName)); 
          tb.getSymbolTable(moduleName).setUsedSymbolConstructor(tomSymbol);
          /* XXX: Also mark the destructors as used, since some generated
           * functions will use them */
          tb.getSymbolTable(moduleName).setUsedSymbolDestructor(tomSymbol);
          // resolve uses in the symbol declaration
          try {
            MuTraveler.init(tom_make_TopDownCollect(tom_make_Collector(tb,stack))).visit(tomSymbol.getPairNameDeclList());
          } catch (jjtraveler.VisitFailure e) {
            System.out.println("visit failure");
            tom_make_Fail().visit(null);
          }
				} catch (EmptyStackException e) {
					System.out.println("No moduleName in stack");
				}
			 } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Collector( TomBackend  t0,  Stack  t1) { return new Collector(t0,t1); }




} // class TomBackend
