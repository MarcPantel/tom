/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.backend;

import java.io.IOException;

import tom.engine.TomBase;
import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.tools.OutputCode;
import tom.engine.tools.SymbolTable;
import tom.engine.tools.ASTFactory;
import tom.platform.OptionManager;

public abstract class TomCFamilyGenerator extends TomGenericGenerator {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_char(char t1, char t2) { return  (t1==t2) ;}private static boolean tom_is_sort_char(char t) { return  true ;} private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;}private static boolean tom_is_sort_int(int t) { return  true ;} private static boolean tom_equal_term_Instruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Instruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.Instruction ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_InstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.InstructionList ;}private static boolean tom_equal_term_ConstraintInstruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintInstruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.ConstraintInstruction ;}private static boolean tom_equal_term_ConstraintInstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintInstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.ConstraintInstructionList ;}private static boolean tom_equal_term_TomTypeList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTypeList(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomTypeList ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomTypeDefinition(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTypeDefinition(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomTypeDefinition ;}private static boolean tom_equal_term_TomForwardType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomForwardType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomForwardType ;}private static boolean tom_equal_term_TomSymbolList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomSymbolList(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomSymbolList ;}private static boolean tom_equal_term_TomVisit(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomVisit(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomVisit ;}private static boolean tom_equal_term_TomStructureTable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomStructureTable(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomStructureTable ;}private static boolean tom_equal_term_Position(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Position(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.Position ;}private static boolean tom_equal_term_TomEntry(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomEntry(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomEntry ;}private static boolean tom_equal_term_TomEntryList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomEntryList(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomEntryList ;}private static boolean tom_equal_term_TomVisitList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomVisitList(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomVisitList ;}private static boolean tom_equal_term_TargetLanguage(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TargetLanguage(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TargetLanguage ;}private static boolean tom_equal_term_TomSymbolTable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomSymbolTable(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomSymbolTable ;}private static boolean tom_equal_term_TomSymbol(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomSymbol(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomSymbol ;}private static boolean tom_equal_term_KeyEntry(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_KeyEntry(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.KeyEntry ;}private static boolean tom_equal_term_ElementaryTheory(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ElementaryTheory(Object t) { return  t instanceof tom.engine.adt.theory.types.ElementaryTheory ;}private static boolean tom_equal_term_Theory(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Theory(Object t) { return  t instanceof tom.engine.adt.theory.types.Theory ;}private static boolean tom_equal_term_DeclarationList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_DeclarationList(Object t) { return  t instanceof tom.engine.adt.tomdeclaration.types.DeclarationList ;}private static boolean tom_equal_term_Declaration(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Declaration(Object t) { return  t instanceof tom.engine.adt.tomdeclaration.types.Declaration ;}private static boolean tom_equal_term_TomNumber(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumber(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumber ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumberList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumberList ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomList ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.engine.adt.tomoption.types.Option ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_NumericConstraintType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_NumericConstraintType(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.NumericConstraintType ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_PairNameDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PairNameDecl(Object t) { return  t instanceof tom.engine.adt.tomslot.types.PairNameDecl ;}private static boolean tom_equal_term_PairNameDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PairNameDeclList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.PairNameDeclList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Slot(Object t) { return  t instanceof tom.engine.adt.tomslot.types.Slot ;}private static boolean tom_is_fun_sym_ExpressionToInstruction( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.ExpressionToInstruction) ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_make_ExpressionToInstruction( tom.engine.adt.tomexpression.types.Expression  t0) { return  tom.engine.adt.tominstruction.types.instruction.ExpressionToInstruction.make(t0) ; }private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_ExpressionToInstruction_Expr( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getExpr() ;}private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomtype.types.TomType  t) { return  (t instanceof tom.engine.adt.tomtype.types.tomtype.Type) ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Type_TomType( tom.engine.adt.tomtype.types.TomType  t) { return  t.getTomType() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Type_TlType( tom.engine.adt.tomtype.types.TomType  t) { return  t.getTlType() ;}private static boolean tom_is_fun_sym_TLType( tom.engine.adt.tomtype.types.TomType  t) { return  (t instanceof tom.engine.adt.tomtype.types.tomtype.TLType) ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage  tom_get_slot_TLType_Tl( tom.engine.adt.tomtype.types.TomType  t) { return  t.getTl() ;}private static boolean tom_is_fun_sym_TextPosition( tom.engine.adt.tomsignature.types.Position  t) { return  (t instanceof tom.engine.adt.tomsignature.types.position.TextPosition) ;}private static  int  tom_get_slot_TextPosition_Line( tom.engine.adt.tomsignature.types.Position  t) { return  t.getLine() ;}private static  int  tom_get_slot_TextPosition_Column( tom.engine.adt.tomsignature.types.Position  t) { return  t.getColumn() ;}private static boolean tom_is_fun_sym_TL( tom.engine.adt.tomsignature.types.TargetLanguage  t) { return  (t instanceof tom.engine.adt.tomsignature.types.targetlanguage.TL) ;}private static  String  tom_get_slot_TL_Code( tom.engine.adt.tomsignature.types.TargetLanguage  t) { return  t.getCode() ;}private static  tom.engine.adt.tomsignature.types.Position  tom_get_slot_TL_Start( tom.engine.adt.tomsignature.types.TargetLanguage  t) { return  t.getStart() ;}private static  tom.engine.adt.tomsignature.types.Position  tom_get_slot_TL_End( tom.engine.adt.tomsignature.types.TargetLanguage  t) { return  t.getEnd() ;}private static boolean tom_is_fun_sym_ITL( tom.engine.adt.tomsignature.types.TargetLanguage  t) { return  (t instanceof tom.engine.adt.tomsignature.types.targetlanguage.ITL) ;}private static  String  tom_get_slot_ITL_Code( tom.engine.adt.tomsignature.types.TargetLanguage  t) { return  t.getCode() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.Name) ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_Code( tom.engine.adt.tomexpression.types.Expression  t) { return  (t instanceof tom.engine.adt.tomexpression.types.expression.Code) ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_make_Code( String  t0) { return  tom.engine.adt.tomexpression.types.expression.Code.make(t0) ; }private static  String  tom_get_slot_Code_Code( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getCode() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomterm.types.TomList  t) { return  ((t instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (t instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ;}private static  tom.engine.adt.tomterm.types.TomList  tom_empty_list_concTomTerm() { return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ; }private static  tom.engine.adt.tomterm.types.TomList  tom_cons_list_concTomTerm( tom.engine.adt.tomterm.types.TomTerm  e,  tom.engine.adt.tomterm.types.TomList  l) { return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(e,l) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_head_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.getHeadconcTomTerm() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.getTailconcTomTerm() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) { return  l.isEmptyconcTomTerm() ;}   private static   tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList l1,  tom.engine.adt.tomterm.types.TomList  l2) {     if( l1.isEmptyconcTomTerm() ) {       return l2;     } else if( l2.isEmptyconcTomTerm() ) {       return l1;     } else if(  l1.getTailconcTomTerm() .isEmptyconcTomTerm() ) {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,l2) ;     } else {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,tom_append_list_concTomTerm( l1.getTailconcTomTerm() ,l2)) ;     }   }   private static   tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end, tom.engine.adt.tomterm.types.TomList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( begin.getHeadconcTomTerm() ,( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm( begin.getTailconcTomTerm() ,end,tail)) ;     }   }    
  // ------------------------------------------------------------


  public TomCFamilyGenerator(OutputCode output, OptionManager optionManager,
      SymbolTable symbolTable) {
    super(output, optionManager, symbolTable);
  }

  protected void buildAssignVar(int deep, TomTerm var, OptionList list, Expression exp, String moduleName) throws IOException {
    //output.indent(deep);
    generate(deep,var,moduleName);
    output.write("=");
    generateExpression(deep,exp,moduleName);
    output.writeln(";");
  } 

  protected void buildComment(int deep, String text) throws IOException {
    output.writeln("/* " + text + " */");
    return;
  }

  protected void buildDoWhile(int deep, Instruction succes, Expression exp, String moduleName) throws IOException {
    output.writeln(deep,"do {");
    generateInstruction(deep+1,succes,moduleName);
    output.write(deep,"} while(");
    generateExpression(deep,exp,moduleName);
    output.writeln(");");
  }

  protected void buildExpEqualTerm(int deep, TomType type, TomTerm begin,TomTerm end, String moduleName) throws IOException {
    String sType = TomBase.getTomType(type);
    String template = getSymbolTable(moduleName).getEqualTerm(sType);
    if(instantiateTemplate(deep,template,tom_cons_list_concTomTerm(begin,tom_cons_list_concTomTerm(end,tom_empty_list_concTomTerm())),moduleName) == false) {
      if(getSymbolTable(moduleName).isBooleanType(sType)) {
        output.write("(");
        generate(deep,begin,moduleName);
        output.write(" == ");
        generate(deep,end,moduleName);
        output.write(")");
      } else {
        output.write("tom_equal_term_" + sType + "(");
        generate(deep,begin,moduleName);
        output.write(", ");
        generate(deep,end,moduleName);
        output.write(")");
      }
    }
  }

  protected void buildExpConditional(int deep, Expression cond,Expression exp1, Expression exp2, String moduleName) throws IOException {
    output.write("((");
    generateExpression(deep,cond,moduleName);
    output.write(")?(");
    generateExpression(deep,exp1,moduleName);
    output.write("):(");
    generateExpression(deep,exp2,moduleName);
    output.write("))");
  }

  protected void buildExpAnd(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException {
	output.write(" ( ");
	generateExpression(deep,exp1,moduleName);
    output.write(" && ");
    generateExpression(deep,exp2,moduleName);
    output.write(" ) ");
  }

  protected void buildExpOr(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException {
	output.write(" ( ");  
    generateExpression(deep,exp1,moduleName);
    output.write(" || ");
    generateExpression(deep,exp2,moduleName);
    output.write(" ) ");
  }
 
  protected void buildExpCast(int deep, TomType tlType, Expression exp, String moduleName) throws IOException {
    output.write("((" + TomBase.getTLCode(tlType) + ")");
    generateExpression(deep,exp,moduleName);
    output.write(")");
  }
 
  protected void buildExpNegation(int deep, Expression exp, String moduleName) throws IOException {
    output.write("!(");
    generateExpression(deep,exp,moduleName);
    output.write(")");
  }

  protected void buildIf(int deep, Expression exp, Instruction succes, String moduleName) throws IOException {
    output.write(deep,"if ("); 
    generateExpression(deep,exp, moduleName); 
    output.writeln(") {");
    generateInstruction(deep+1,succes, moduleName);
    output.writeln(deep,"}");
  }
  
  protected void buildIfWithFailure(int deep, Expression exp, Instruction succes, Instruction failure, String moduleName) throws IOException {
    output.write(deep,"if ("); 
    generateExpression(deep,exp,moduleName); 
    output.writeln(") {");
    generateInstruction(deep+1,succes,moduleName);
    output.writeln(deep,"} else {");
    generateInstruction(deep+1,failure,moduleName);
    output.writeln(deep,"}");
  }

  protected void buildInstructionSequence(int deep, InstructionList instructionList, String moduleName) throws IOException {
    generateInstructionList(deep, instructionList, moduleName);
    return;
  }

  protected void buildLet(int deep, TomTerm var, OptionList optionList, TomType tlType, 
                          Expression exp, Instruction body, String moduleName) throws IOException {
    output.write(deep,"{ " + TomBase.getTLCode(tlType) + " ");
    buildAssignVar(deep,var,optionList,exp,moduleName);
    generateInstruction(deep,body,moduleName);
    output.writeln(deep,"}");
  }
  
  protected void buildLetRef(int deep, TomTerm var, OptionList optionList, TomType tlType, 
                             Expression exp, Instruction body, String moduleName) throws IOException {
    buildLet(deep,var,optionList,tlType,exp,body, moduleName);
  }
 
  protected void buildLetAssign(int deep, TomTerm var, OptionList list, Expression exp, Instruction body, String moduleName) throws IOException {
    buildAssignVar(deep, var, list, exp, moduleName);
    generateInstruction(deep,body, moduleName);
  }

  protected void buildRef(int deep, TomTerm term, String moduleName) throws IOException {
    generate(deep,term,moduleName);
  }

  protected void buildReturn(int deep, TomTerm exp, String moduleName) throws IOException {
    output.write(deep,"return ");
    generate(deep,exp,moduleName);
    output.writeln(deep,";");
  }

  protected void buildUnamedBlock(int deep, InstructionList instList, String moduleName) throws IOException {
    output.writeln(deep, "{");
    generateInstructionList(deep+1,instList, moduleName);
    output.writeln(deep, "}");
  }
 
  protected void buildWhileDo(int deep, Expression exp, Instruction succes, String moduleName) throws IOException {
    output.write(deep,"while (");
    generateExpression(deep,exp,moduleName);
    output.writeln(") {");
    generateInstruction(deep+1,succes,moduleName);
    output.writeln(deep,"}");
  }

  protected void genDecl(String returnType,
                         String declName,
                         String suffix,
                         String args[],
                         TargetLanguage tlCode,
                         String moduleName) throws IOException {
    if(nodeclMode) {
      return;
    }

    StringBuffer s = new StringBuffer();
    s.append(modifier);
    s.append(returnType);
    s.append(" ");
    s.append(declName);
    s.append("_");
    s.append(suffix);
    s.append("(");
    for(int i=0 ; i<args.length ; ) {
      s.append(args[i]); // parameter type
      s.append(" ");
      s.append(args[i+1]); // parameter name
      i+=2;
      if(i<args.length) {
        s.append(", ");
      }
    } 
    String returnValue = getSymbolTable(moduleName).isVoidType(returnType)?tlCode.getCode():"return " + tlCode.getCode();
    s.append(") { " + returnValue + "; }");

    if (tom_is_sort_TargetLanguage(tlCode)) {{  tom.engine.adt.tomsignature.types.TargetLanguage  tomMatch50NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TargetLanguage )tlCode);if (tom_is_fun_sym_TL(tomMatch50NameNumberfreshSubject_1)) {{  String  tomMatch50NameNumber_freshVar_0=tom_get_slot_TL_Code(tomMatch50NameNumberfreshSubject_1);{  tom.engine.adt.tomsignature.types.Position  tomMatch50NameNumber_freshVar_1=tom_get_slot_TL_Start(tomMatch50NameNumberfreshSubject_1);{  tom.engine.adt.tomsignature.types.Position  tomMatch50NameNumber_freshVar_2=tom_get_slot_TL_End(tomMatch50NameNumberfreshSubject_1);if (tom_is_fun_sym_TextPosition(tomMatch50NameNumber_freshVar_1)) {{  int  tomMatch50NameNumber_freshVar_3=tom_get_slot_TextPosition_Line(tomMatch50NameNumber_freshVar_1);{  int  tom_startLine=tomMatch50NameNumber_freshVar_3;if (tom_is_fun_sym_TextPosition(tomMatch50NameNumber_freshVar_2)) {{  int  tomMatch50NameNumber_freshVar_4=tom_get_slot_TextPosition_Line(tomMatch50NameNumber_freshVar_2);if ( true ) {

        output.write(0,s, tom_startLine, tomMatch50NameNumber_freshVar_4- tom_startLine);
        return;
      }}}}}}}}}}if (tom_is_fun_sym_ITL(tomMatch50NameNumberfreshSubject_1)) {{  String  tomMatch50NameNumber_freshVar_5=tom_get_slot_ITL_Code(tomMatch50NameNumberfreshSubject_1);if ( true ) {


        output.write(s);
        return;
      }}}}}


  }

  protected void genDeclInstr(String returnType,
                         String declName,
                         String suffix,
                         String args[],
                         Instruction instr,
                         int deep, String moduleName) throws IOException {
    if(nodeclMode) {
      return;
    }

    StringBuffer s = new StringBuffer();
    s.append(modifier);
    s.append(returnType);
    s.append(" ");
    s.append(declName);
    s.append("_");
    s.append(suffix);
    s.append("(");
    for(int i=0 ; i<args.length ; ) {
      s.append(args[i]); // parameter type
      s.append(" ");
      s.append(args[i+1]); // parameter name
      i+=2;
      if(i<args.length) {
        s.append(", ");
      }
    } 
    s.append(") { ");
    output.write(s);
    generateInstruction(deep,instr,moduleName);
    output.write("}");
    output.writeln();
  }

  private String getIsConcList(String name,String subject,String moduleName) {
    String template = getSymbolTable(moduleName).getIsFsym(name);
    String res = instantiateTemplate(template,subject);
    if(res == template) {
      res = "tom_is_fun_sym_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+subject+")";
    }
    return res;
  }

  private String getGetHead(String name,String type,String subject,String moduleName) {
    String template = getSymbolTable(moduleName).getGetHead(name);
    String res = instantiateTemplate(template,subject);
    if(res == template) {
      res = "tom_get_head_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+type+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+subject+")";
    }
    return res;
  }

  private String getGetTail(String name,String type,String subject,String moduleName) {
    String template = getSymbolTable(moduleName).getGetTail(name);
    String res = instantiateTemplate(template,subject);
    if(res == template) {
      res = "tom_get_tail_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+type+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+subject+")";
    }
    return res;
  }

  private String getIsEmptyList(String name,String type,String subject,String moduleName) {
    String template = getSymbolTable(moduleName).getIsEmptyList(name);
    String res = instantiateTemplate(template,subject);
    if(res == template) {
      res = "tom_is_empty_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+type+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+subject+")";
    }
    return res;
  }

  private String getMakeAddList(String name,String head, String tail,String moduleName) {
    String prefix = "tom_cons_list_";
    String template = getSymbolTable(moduleName).getMakeAddList(name);
    String res = instantiateTemplate(template,head,tail);
    if(res == template) {
      res = prefix+name+"("+head+","+tail+")";
    }
    return res;
  }

  private String genDeclGetHead(String name, TomType domain, TomType codomain, String subject, String moduleName) {
    String tomType = TomBase.getTomType(codomain);
    String get = getGetHead(name,tomType,subject,moduleName);
    String is_conc = getIsConcList(name,subject,moduleName);
    if(domain==codomain) { 
      return "(("/* Generated by TOM (version 2.6alpha): Do not edit this file */+is_conc+")?"/* Generated by TOM (version 2.6alpha): Do not edit this file */+get+":"/* Generated by TOM (version 2.6alpha): Do not edit this file */+subject+")";
    }
    return get;
  }

  private String genDeclGetTail(String name, TomType domain, TomType codomain, String subject,String moduleName) {
    String tomType = TomBase.getTomType(codomain);
    String get= getGetTail(name,tomType,subject,moduleName);
    String is_conc = getIsConcList(name,subject,moduleName);
    String empty = "tom_empty_list_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"()";
    if(domain==codomain) { 
      return "(("/* Generated by TOM (version 2.6alpha): Do not edit this file */+is_conc+")?"/* Generated by TOM (version 2.6alpha): Do not edit this file */+get+":"/* Generated by TOM (version 2.6alpha): Do not edit this file */+empty+")";
    }
    return get;
  }
  
  private String getEqualTerm(String type,String arg1, String arg2,String moduleName) {
    String prefix = "tom_equal_term_";
    String template = getSymbolTable(moduleName).getEqualTerm(type);
    String res = instantiateTemplate(template,arg1,arg2);
    if(res == template) {
      res = prefix+type+"("+arg1+","+arg2+")";
    }
    return res;
  }

  protected void genDeclList(String name, String moduleName) throws IOException {
    if(nodeclMode) {
      return;
    }

    TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(name);
    TomType listType = TomBase.getSymbolCodomain(tomSymbol);
    TomType eltType = TomBase.getSymbolDomain(tomSymbol).getHeadconcTomType();
    String tomType = TomBase.getTomType(listType);
    String glType = TomBase.getTLType(listType);

    String utype = glType;
    if(lazyMode) {
      utype = TomBase.getTLType(getUniversalType());
    }
    
    String listCast = "(" + glType + ")";
    String get_slice = listCast + "tom_get_slice_" + name;

    String s = "";
    if(listType == eltType) {
s = "\n  "/* Generated by TOM (version 2.6alpha): Do not edit this file */+modifier+" "/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" tom_append_list_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" l1, "/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" l2) {\n    if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getIsEmptyList(name,tomType,"l1",moduleName)+") {\n      return l2;\n    } else if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getIsEmptyList(name,tomType,"l2",moduleName)+") {\n      return l1;\n    } else if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getIsConcList(name,"l1",moduleName)+") {\n      if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getIsEmptyList(name,tomType,genDeclGetTail(name,eltType,listType,"l1",moduleName),moduleName)+") {\n        return "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getMakeAddList(name,genDeclGetHead(name,eltType,listType,"l1",moduleName),"l2",moduleName)+";\n      } else {\n        return "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getMakeAddList(name,genDeclGetHead(name,eltType,listType,"l1",moduleName),                               "tom_append_list_"+name+"("+genDeclGetTail(name,eltType,listType,"l1",moduleName)+",l2)",moduleName)+";\n      }\n    } else {\n      return "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getMakeAddList(name,"l1", "l2",moduleName)+";\n    }\n  }"















;

    } else {

s = "\n  "/* Generated by TOM (version 2.6alpha): Do not edit this file */+modifier+" "/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" tom_append_list_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+"l1, "/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" l2) {\n    if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getIsEmptyList(name,tomType,"l1",moduleName)+") {\n      return l2;\n    } else if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getIsEmptyList(name,tomType,"l2",moduleName)+") {\n      return l1;\n    } else if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getIsEmptyList(name,tomType,genDeclGetTail(name,eltType,listType,"l1",moduleName),moduleName)+") {\n      return "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getMakeAddList(name,genDeclGetHead(name,eltType,listType,"l1",moduleName),"l2",moduleName)+";\n    } else {\n      return "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getMakeAddList(name,genDeclGetHead(name,eltType,listType,"l1",moduleName),                                  "tom_append_list_"+name+"("+genDeclGetTail(name,eltType,listType,"l1",moduleName)+",l2)",moduleName)+";\n    }\n  }"











;

    }

    int deep=0;
    s+= "\n  "/* Generated by TOM (version 2.6alpha): Do not edit this file */+modifier+" "/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" tom_get_slice_"/* Generated by TOM (version 2.6alpha): Do not edit this file */+name+"("/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" begin, "/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" end,"/* Generated by TOM (version 2.6alpha): Do not edit this file */+utype+" tail) {\n    if("/* Generated by TOM (version 2.6alpha): Do not edit this file */+getEqualTerm(tomType,"begin","end",moduleName)+") {\n      return tail;\n    } else {\n      return "/* Generated by TOM (version 2.6alpha): Do not edit this file */+getMakeAddList(name,genDeclGetHead(name,eltType,listType,"begin",moduleName),                                  get_slice+"("+genDeclGetTail(name,eltType,listType,"begin",moduleName)+",end,tail)",moduleName)+";\n    }\n  }\n  "








;
   
    //If necessary we remove \n code depending on pretty option
    s = ASTFactory.makeSingleLineCode(s, prettyMode);
    output.write(s);
  }

  protected void genDeclMake(String prefix, String funName, TomType returnType, 
                             TomList argList, Instruction instr, String moduleName) throws IOException {
    if(nodeclMode) {
      return;
    }

    boolean inlined = inlineplus;
    boolean isCode = false;
    if (tom_is_sort_Instruction(instr)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch51NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )instr);if (tom_is_fun_sym_ExpressionToInstruction(tomMatch51NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch51NameNumber_freshVar_0=tom_get_slot_ExpressionToInstruction_Expr(tomMatch51NameNumberfreshSubject_1);if (tom_is_fun_sym_Code(tomMatch51NameNumber_freshVar_0)) {{  String  tomMatch51NameNumber_freshVar_1=tom_get_slot_Code_Code(tomMatch51NameNumber_freshVar_0);{  String  tom_code=tomMatch51NameNumber_freshVar_1;if ( true ) {

        isCode = true;
        // perform the instantiation
        String ncode = tom_code;
        int index = 0;
        if (tom_is_sort_TomList(argList)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch52NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )argList);if (tom_is_fun_sym_concTomTerm(tomMatch52NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomList  tomMatch52NameNumber_freshVar_0=tomMatch52NameNumberfreshSubject_1;{  tom.engine.adt.tomterm.types.TomList  tomMatch52NameNumber_begin_2=tomMatch52NameNumber_freshVar_0;{  tom.engine.adt.tomterm.types.TomList  tomMatch52NameNumber_end_3=tomMatch52NameNumber_freshVar_0;do {{{  tom.engine.adt.tomterm.types.TomList  tomMatch52NameNumber_freshVar_1=tomMatch52NameNumber_end_3;if (!(tom_is_empty_concTomTerm_TomList(tomMatch52NameNumber_freshVar_1))) {if (tom_is_fun_sym_Variable(tom_get_head_concTomTerm_TomList(tomMatch52NameNumber_freshVar_1))) {{  tom.engine.adt.tomname.types.TomName  tomMatch52NameNumber_freshVar_6=tom_get_slot_Variable_AstName(tom_get_head_concTomTerm_TomList(tomMatch52NameNumber_freshVar_1));if (tom_is_fun_sym_Name(tomMatch52NameNumber_freshVar_6)) {{  String  tomMatch52NameNumber_freshVar_7=tom_get_slot_Name_String(tomMatch52NameNumber_freshVar_6);{  tom.engine.adt.tomterm.types.TomList  tomMatch52NameNumber_freshVar_4=tom_get_tail_concTomTerm_TomList(tomMatch52NameNumber_freshVar_1);if ( true ) {

            ncode = ncode.replace("{"+index+"}",tomMatch52NameNumber_freshVar_7); 
            index++;
          }}}}}}}}if (tom_is_empty_concTomTerm_TomList(tomMatch52NameNumber_end_3)) {tomMatch52NameNumber_end_3=tomMatch52NameNumber_begin_2;} else {tomMatch52NameNumber_end_3=tom_get_tail_concTomTerm_TomList(tomMatch52NameNumber_end_3);}}} while(!(tom_equal_term_TomList(tomMatch52NameNumber_end_3, tomMatch52NameNumber_begin_2)));}}}}}}


        if(!ncode.equals(tom_code)) {
          inlined = true;
          instr = tom_make_ExpressionToInstruction(tom_make_Code(ncode));
        }
      }}}}}}}}

    if(!inline || !isCode || !inlined) {
      StringBuffer s = new StringBuffer();
      s.append(modifier + TomBase.getTLType(returnType) + " " + prefix + funName + "(");
      while(!argList.isEmptyconcTomTerm()) {
        TomTerm arg = argList.getHeadconcTomTerm();
matchBlock: {
              if (tom_is_sort_TomTerm(arg)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch53NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )arg);if (tom_is_fun_sym_Variable(tomMatch53NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch53NameNumber_freshVar_0=tom_get_slot_Variable_AstName(tomMatch53NameNumberfreshSubject_1);{  tom.engine.adt.tomtype.types.TomType  tomMatch53NameNumber_freshVar_1=tom_get_slot_Variable_AstType(tomMatch53NameNumberfreshSubject_1);if (tom_is_fun_sym_Name(tomMatch53NameNumber_freshVar_0)) {{  String  tomMatch53NameNumber_freshVar_2=tom_get_slot_Name_String(tomMatch53NameNumber_freshVar_0);if (tom_is_fun_sym_Type(tomMatch53NameNumber_freshVar_1)) {{  tom.engine.adt.tomtype.types.TomType  tomMatch53NameNumber_freshVar_3=tom_get_slot_Type_TlType(tomMatch53NameNumber_freshVar_1);if (tom_is_fun_sym_TLType(tomMatch53NameNumber_freshVar_3)) {if ( true ) {

                  s.append(TomBase.getTLCode(tomMatch53NameNumber_freshVar_3) + " " + tomMatch53NameNumber_freshVar_2);
                  break matchBlock;
                }}}}}}}}}if ( true ) {


                  System.out.println("genDeclMake: strange term: " + arg);
                  throw new TomRuntimeException("genDeclMake: strange term: " + arg);
                }}}

            }
            argList = argList.getTailconcTomTerm();
            if(!argList.isEmptyconcTomTerm()) {
              s.append(", ");
            }
      }
      s.append(") { ");
      output.write(s);
      output.write("return ");
      generateInstruction(0,instr,moduleName);
      output.write("; }");
    }
  }
}
