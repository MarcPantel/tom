/*  Generated by TOM: Do not edit this file */  /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2004 INRIA
			    Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr

*/

package jtom.backend;

import aterm.*;

import java.io.IOException;
import java.util.HashMap;

import jtom.adt.tomsignature.types.*;
import jtom.TomBase;
import jtom.tools.TomTaskInput;
import jtom.tools.OutputCode;
import jtom.exception.TomRuntimeException;
import jtom.TomEnvironment;

public abstract class TomAbstractGenerator extends TomBase {
  
  protected OutputCode output;
  protected TomTaskInput input;
  protected String debugKey;
  protected boolean debugMode = false, strictType = false,
    staticFunction = false, genDecl = false, pretty = false, verbose = false;

  private HashMap getSubtermMap = new HashMap();
  private HashMap getFunSymMap = new HashMap();
  private HashMap isFsymMap = new HashMap();
  
  public TomAbstractGenerator(TomEnvironment environment, OutputCode output, TomTaskInput input) {
    super(environment);
	this.output = output;
    this.input = input;

    debugMode = input.isDebugMode();
    strictType = input.isStrictType();
    staticFunction = input.isStaticFunction();
    genDecl = input.isGenDecl();
    pretty = input.isPretty();

  }

// ------------------------------------------------------------
  /*  Generated by TOM: Do not edit this file */    
// ------------------------------------------------------------

    /*
     * Generate the goal language
     */
  
  protected void generate(int deep, TomTerm subject)
    throws IOException {
      //System.out.println("Generate: " + subject);

     {  TomTerm tom_match1_1 = ( TomTerm) subject;{_match1_pattern1: { if(tom_is_fun_sym_Tom(tom_match1_1) ||  false ) { {  TomList tom_match1_1_1 = ( TomList) tom_get_slot_Tom_tomList(tom_match1_1);{ {  TomList l = ( TomList) tom_match1_1_1;

 
        generateList(deep,l);
        return;
      }}} }}_match1_pattern2: { if(tom_is_fun_sym_TomInclude(tom_match1_1) ||  false ) { {  TomList tom_match1_1_1 = ( TomList) tom_get_slot_TomInclude_tomList(tom_match1_1);{ {  TomList l = ( TomList) tom_match1_1_1;

 
				generateListInclude(deep,l);
        return;
      }}} }}_match1_pattern3: { if(tom_is_fun_sym_BuildVariable(tom_match1_1) ||  false ) { {  TomName tom_match1_1_1 = ( TomName) tom_get_slot_BuildVariable_astName(tom_match1_1);{ if(tom_is_fun_sym_Name(tom_match1_1_1) ||  false ) { {  String tom_match1_1_1_1 = ( String) tom_get_slot_Name_string(tom_match1_1_1);{ {  String name = ( String) tom_match1_1_1_1;

 
        output.write(name);
        return;
      }}} }}} }}_match1_pattern4: { if(tom_is_fun_sym_BuildVariable(tom_match1_1) ||  false ) { {  TomName tom_match1_1_1 = ( TomName) tom_get_slot_BuildVariable_astName(tom_match1_1);{ if(tom_is_fun_sym_PositionName(tom_match1_1_1) ||  false ) { {  TomNumberList tom_match1_1_1_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match1_1_1);{ {  TomNumberList l1 = ( TomNumberList) tom_match1_1_1_1;

 
        output.write("tom" + numberListToIdentifier(l1));
        return;
      }}} }}} }}_match1_pattern5: { if(tom_is_fun_sym_BuildTerm(tom_match1_1) ||  false ) { {  TomName tom_match1_1_1 = ( TomName) tom_get_slot_BuildTerm_astName(tom_match1_1); {  TomList tom_match1_1_2 = ( TomList) tom_get_slot_BuildTerm_args(tom_match1_1);{ if(tom_is_fun_sym_Name(tom_match1_1_1) ||  false ) { {  String tom_match1_1_1_1 = ( String) tom_get_slot_Name_string(tom_match1_1_1);{ {  String name = ( String) tom_match1_1_1_1; {  TomList argList = ( TomList) tom_match1_1_2;

 
        buildTerm(deep, name, argList);
        return;
      }}}} }}}} }}_match1_pattern6: { if(tom_is_fun_sym_BuildList(tom_match1_1) ||  false ) { {  TomName tom_match1_1_1 = ( TomName) tom_get_slot_BuildList_astName(tom_match1_1); {  TomList tom_match1_1_2 = ( TomList) tom_get_slot_BuildList_args(tom_match1_1);{ if(tom_is_fun_sym_Name(tom_match1_1_1) ||  false ) { {  String tom_match1_1_1_1 = ( String) tom_get_slot_Name_string(tom_match1_1_1);{ {  String name = ( String) tom_match1_1_1_1; {  TomList argList = ( TomList) tom_match1_1_2;

 
        buildList(deep, name, argList);
        return;
      }}}} }}}} }}_match1_pattern7: { if(tom_is_fun_sym_BuildArray(tom_match1_1) ||  false ) { {  TomName tom_match1_1_1 = ( TomName) tom_get_slot_BuildArray_astName(tom_match1_1); {  TomList tom_match1_1_2 = ( TomList) tom_get_slot_BuildArray_args(tom_match1_1);{ if(tom_is_fun_sym_Name(tom_match1_1_1) ||  false ) { {  String tom_match1_1_1_1 = ( String) tom_get_slot_Name_string(tom_match1_1_1);{ {  String name = ( String) tom_match1_1_1_1; {  TomList argList = ( TomList) tom_match1_1_2;

 
        buildArray(deep, name, argList);
        return;
      }}}} }}}} }}_match1_pattern8: { if(tom_is_fun_sym_FunctionCall(tom_match1_1) ||  false ) { {  TomName tom_match1_1_1 = ( TomName) tom_get_slot_FunctionCall_astName(tom_match1_1); {  TomList tom_match1_1_2 = ( TomList) tom_get_slot_FunctionCall_args(tom_match1_1);{ if(tom_is_fun_sym_Name(tom_match1_1_1) ||  false ) { {  String tom_match1_1_1_1 = ( String) tom_get_slot_Name_string(tom_match1_1_1);{ {  String name = ( String) tom_match1_1_1_1; {  TomList argList = ( TomList) tom_match1_1_2;

 
        buildFunctionCall(deep, name, argList);
        return;
      }}}} }}}} }}_match1_pattern9: { if(tom_is_fun_sym_Composite(tom_match1_1) ||  false ) { {  TomList tom_match1_1_1 = ( TomList) tom_get_slot_Composite_args(tom_match1_1);{ {  TomList argList = ( TomList) tom_match1_1_1;

 
        generateList(deep,argList);
        return;
      }}} }}_match1_pattern10: { if(tom_is_fun_sym_CompiledMatch(tom_match1_1) ||  false ) { {  TomList tom_match1_1_1 = ( TomList) tom_get_slot_CompiledMatch_automataList(tom_match1_1); {  OptionList tom_match1_1_2 = ( OptionList) tom_get_slot_CompiledMatch_option(tom_match1_1);{ {  TomList instructionList = ( TomList) tom_match1_1_1; {  OptionList list = ( OptionList) tom_match1_1_2;

 
        buildCompiledMatch(deep, instructionList, list);
        return;
      }}}}} }}_match1_pattern11: { if(tom_is_fun_sym_CompiledPattern(tom_match1_1) ||  false ) { {  TomList tom_match1_1_1 = ( TomList) tom_get_slot_CompiledPattern_instList(tom_match1_1);{ {  TomList instList = ( TomList) tom_match1_1_1;

 
        generateList(deep, instList);
        return;
      }}} }}_match1_pattern12: { if(tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { {  OptionList tom_match1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match1_1); {  TomName tom_match1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match1_1); {  TomType tom_match1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match1_1);{ {  OptionList option1 = ( OptionList) tom_match1_1_1; if(tom_is_fun_sym_PositionName(tom_match1_1_2) ||  false ) { {  TomNumberList tom_match1_1_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match1_1_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match1_1_2_1; {  TomType type1 = ( TomType) tom_match1_1_3;

 
          /*
           * sans type: re-definition lorsque %variable est utilise
           * avec type: probleme en cas de filtrage dynamique
           */
        output.write("tom" + numberListToIdentifier(l1));
        return;
      }}}} }}}}}} }}_match1_pattern13: { if(tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { {  OptionList tom_match1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match1_1); {  TomName tom_match1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match1_1); {  TomType tom_match1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match1_1);{ {  OptionList option1 = ( OptionList) tom_match1_1_1; if(tom_is_fun_sym_Name(tom_match1_1_2) ||  false ) { {  String tom_match1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match1_1_2);{ {  String name1 = ( String) tom_match1_1_2_1; {  TomType type1 = ( TomType) tom_match1_1_3;

 
        output.write(name1);
        return;
      }}}} }}}}}} }}_match1_pattern14: { if(tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { {  OptionList tom_match1_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match1_1); {  TomName tom_match1_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match1_1); {  TomType tom_match1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match1_1);{ {  OptionList option1 = ( OptionList) tom_match1_1_1; if(tom_is_fun_sym_PositionName(tom_match1_1_2) ||  false ) { {  TomNumberList tom_match1_1_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match1_1_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match1_1_2_1; {  TomType type1 = ( TomType) tom_match1_1_3;

 
        output.write("tom" + numberListToIdentifier(l1));
        return;  
      }}}} }}}}}} }}_match1_pattern15: { if(tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { {  OptionList tom_match1_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match1_1); {  TomName tom_match1_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match1_1); {  TomType tom_match1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match1_1);{ {  OptionList option1 = ( OptionList) tom_match1_1_1; if(tom_is_fun_sym_Name(tom_match1_1_2) ||  false ) { {  String tom_match1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match1_1_2);{ {  String name1 = ( String) tom_match1_1_2_1; {  TomType type1 = ( TomType) tom_match1_1_3;

 
        output.write(name1);
        return;
      }}}} }}}}}} }}_match1_pattern16: { if(tom_is_fun_sym_Declaration(tom_match1_1) ||  false ) { {  TomTerm tom_match1_1_1 = ( TomTerm) tom_get_slot_Declaration_variable(tom_match1_1);{ if(tom_is_fun_sym_Variable(tom_match1_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match1_1_1; {  OptionList tom_match1_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match1_1_1); {  TomName tom_match1_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match1_1_1); {  TomType tom_match1_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match1_1_1);{ {  OptionList option1 = ( OptionList) tom_match1_1_1_1; {  TomName name1 = ( TomName) tom_match1_1_1_2; if(tom_is_fun_sym_Type(tom_match1_1_1_3) ||  false ) { {  TomType tom_match1_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match1_1_1_3); {  TomType tom_match1_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match1_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match1_1_1_3_1) ||  false ) { {  String tom_match1_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match1_1_1_3_1);{ {  String type = ( String) tom_match1_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match1_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match1_1_1_3_2;{


 
        buildDeclaration(deep, var, type, tlType);
        return;
      }} }}}} }}}} }}}}}}}} }}} }}_match1_pattern17: { if(tom_is_fun_sym_Declaration(tom_match1_1) ||  false ) { {  TomTerm tom_match1_1_1 = ( TomTerm) tom_get_slot_Declaration_variable(tom_match1_1);{ if(tom_is_fun_sym_VariableStar(tom_match1_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match1_1_1; {  OptionList tom_match1_1_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match1_1_1); {  TomName tom_match1_1_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match1_1_1); {  TomType tom_match1_1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match1_1_1);{ {  OptionList option1 = ( OptionList) tom_match1_1_1_1; {  TomName name1 = ( TomName) tom_match1_1_1_2; if(tom_is_fun_sym_Type(tom_match1_1_1_3) ||  false ) { {  TomType tom_match1_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match1_1_1_3); {  TomType tom_match1_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match1_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match1_1_1_3_1) ||  false ) { {  String tom_match1_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match1_1_1_3_1);{ {  String type = ( String) tom_match1_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match1_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match1_1_1_3_2;{


 
        buildDeclarationStar(deep, var, name1, type, tlType);
        return;
      }} }}}} }}}} }}}}}}}} }}} }}_match1_pattern18: { if(tom_is_fun_sym_MakeFunctionBegin(tom_match1_1) ||  false ) { {  TomName tom_match1_1_1 = ( TomName) tom_get_slot_MakeFunctionBegin_astName(tom_match1_1); {  TomTerm tom_match1_1_2 = ( TomTerm) tom_get_slot_MakeFunctionBegin_subjectListAST(tom_match1_1);{ if(tom_is_fun_sym_Name(tom_match1_1_1) ||  false ) { {  String tom_match1_1_1_1 = ( String) tom_get_slot_Name_string(tom_match1_1_1);{ {  String tomName = ( String) tom_match1_1_1_1; if(tom_is_fun_sym_SubjectList(tom_match1_1_2) ||  false ) { {  TomList tom_match1_1_2_1 = ( TomList) tom_get_slot_SubjectList_tomList(tom_match1_1_2);{ {  TomList varList = ( TomList) tom_match1_1_2_1;

 
        buildFunctionBegin(deep, tomName, varList);
        return;
      }}} }}}} }}}} }}_match1_pattern19: { if(tom_is_fun_sym_MakeFunctionEnd(tom_match1_1) ||  false ) {{

 
        buildFunctionEnd(deep);
        return;
      } }}_match1_pattern20: { if(tom_is_fun_sym_EndLocalVariable(tom_match1_1) ||  false ) {{

 
        output.writeln(deep,"do"); return;
      } }}_match1_pattern21: { if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match1_1) ||  false ) { {  TargetLanguage tom_match1_1_1 = ( TargetLanguage) tom_get_slot_TargetLanguageToTomTerm_tl(tom_match1_1);{ {  TargetLanguage t = ( TargetLanguage) tom_match1_1_1;

 
        generateTargetLanguage(deep,t);
        return;
      }}} }}_match1_pattern22: { if(tom_is_fun_sym_DeclarationToTomTerm(tom_match1_1) ||  false ) { {  Declaration tom_match1_1_1 = ( Declaration) tom_get_slot_DeclarationToTomTerm_astDeclaration(tom_match1_1);{ {  Declaration t = ( Declaration) tom_match1_1_1;

 
        generateDeclaration(deep,t);
        return;
      }}} }}_match1_pattern23: { if(tom_is_fun_sym_ExpressionToTomTerm(tom_match1_1) ||  false ) { {  Expression tom_match1_1_1 = ( Expression) tom_get_slot_ExpressionToTomTerm_astExpression(tom_match1_1);{ {  Expression t = ( Expression) tom_match1_1_1;

 
        generateExpression(deep,t);
        return;
      }}} }}_match1_pattern24: { if(tom_is_fun_sym_InstructionToTomTerm(tom_match1_1) ||  false ) { {  Instruction tom_match1_1_1 = ( Instruction) tom_get_slot_InstructionToTomTerm_astInstruction(tom_match1_1);{ {  Instruction t = ( Instruction) tom_match1_1_1;

 
        generateInstruction(deep,t);
        return;
      }}} }}_match1_pattern25: { {  TomTerm t = ( TomTerm) tom_match1_1;

 
        System.out.println("Cannot generate code for: " + t);
        throw new TomRuntimeException(new Throwable("Cannot generate code for: " + t));
      }}}}
 
  }





  public void generateExpression(int deep, Expression subject)
    throws IOException {
    if(subject==null) { return; }
    
     {  Expression tom_match2_1 = ( Expression) subject;{_match2_pattern1: { if(tom_is_fun_sym_Not(tom_match2_1) ||  false ) { {  Expression tom_match2_1_1 = ( Expression) tom_get_slot_Not_arg(tom_match2_1);{ {  Expression exp = ( Expression) tom_match2_1_1;
 
        buildExpNot(deep, exp);
        return;
      }}} }}_match2_pattern2: { if(tom_is_fun_sym_And(tom_match2_1) ||  false ) { {  Expression tom_match2_1_1 = ( Expression) tom_get_slot_And_arg1(tom_match2_1); {  Expression tom_match2_1_2 = ( Expression) tom_get_slot_And_arg2(tom_match2_1);{ {  Expression exp1 = ( Expression) tom_match2_1_1; {  Expression exp2 = ( Expression) tom_match2_1_2;

 
        buildExpAnd(deep, exp1, exp2);
        return;
      }}}}} }}_match2_pattern3: { if(tom_is_fun_sym_Or(tom_match2_1) ||  false ) { {  Expression tom_match2_1_1 = ( Expression) tom_get_slot_Or_arg1(tom_match2_1); {  Expression tom_match2_1_2 = ( Expression) tom_get_slot_Or_arg2(tom_match2_1);{ {  Expression exp1 = ( Expression) tom_match2_1_1; {  Expression exp2 = ( Expression) tom_match2_1_2;

 
        buildExpOr(deep, exp1, exp2);
        return;
      }}}}} }}_match2_pattern4: { if(tom_is_fun_sym_TrueTL(tom_match2_1) ||  false ) {{

 
        buildExpTrue(deep);
        return;
      } }}_match2_pattern5: { if(tom_is_fun_sym_FalseTL(tom_match2_1) ||  false ) {{

 
        buildExpFalse(deep);
        return;
      } }}_match2_pattern6: { if(tom_is_fun_sym_IsEmptyList(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_IsEmptyList_kid1(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_1; {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  TomType type1 = ( TomType) tom_match2_1_1_3;

 
        buildExpEmptyList(deep, type1, var);
        return;
      }}}} }}} }}_match2_pattern7: { if(tom_is_fun_sym_IsEmptyArray(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_IsEmptyArray_kid1(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_IsEmptyArray_kid2(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm varArray = ( TomTerm) tom_match2_1_1; {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  TomType type1 = ( TomType) tom_match2_1_1_3; if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) { {  TomTerm varIndex = ( TomTerm) tom_match2_1_2;{

 
        buildExpEmptyArray(deep, type1, varIndex, varArray);
        return;
      }} }}}}} }}}} }}_match2_pattern8: { if(tom_is_fun_sym_EqualFunctionSymbol(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid1(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid2(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_1; {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  TomType type1 = ( TomType) tom_match2_1_1_3; if(tom_is_fun_sym_Appl(tom_match2_1_2) ||  false ) { {  OptionList tom_match2_1_2_1 = ( OptionList) tom_get_slot_Appl_option(tom_match2_1_2); {  NameList tom_match2_1_2_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match2_1_2); {  TomList tom_match2_1_2_3 = ( TomList) tom_get_slot_Appl_args(tom_match2_1_2);{ {  OptionList option = ( OptionList) tom_match2_1_2_1; if(tom_is_fun_sym_concTomName(tom_match2_1_2_2) ||  false ) { {  NameList tom_match2_1_2_2_list1 = ( NameList) tom_match2_1_2_2;{ if(!(tom_is_empty_NameList(tom_match2_1_2_2_list1))) { {  TomName tom_absvar1 = ( TomName) tom_get_head_NameList(tom_match2_1_2_2_list1);{ tom_match2_1_2_2_list1 = ( NameList) tom_get_tail_NameList(tom_match2_1_2_2_list1); if(tom_is_empty_NameList(tom_match2_1_2_2_list1)) { {  TomList l = ( TomList) tom_match2_1_2_3; {  TomName tom_match3_1 = ( TomName) tom_absvar1;{_match3_pattern1: { if(tom_is_fun_sym_Name(tom_match3_1) ||  false ) { {  String tom_match3_1_1 = ( String) tom_get_slot_Name_string(tom_match3_1);{ {  String tomName = ( String) tom_match3_1_1;


  // needs to be checked
        buildExpEqualFunctionVarAppl(deep, var, type1, tomName);
        return;
      }}} }}}}} }}} }}} }}}}}} }}}}} }}}} }}_match2_pattern9: { if(tom_is_fun_sym_EqualFunctionSymbol(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid1(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_EqualFunctionSymbol_kid2(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var1 = ( TomTerm) tom_match2_1_1; {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  TomType type1 = ( TomType) tom_match2_1_1_3; {  TomTerm var2 = ( TomTerm) tom_match2_1_2;

 
          //System.out.println("EqualFunctionSymbol(...," + var2 + ")");
        buildExpEqualFunctionVarVar(deep, type1, var1, var2);
        return;
      }}}}} }}}} }}_match2_pattern10: { if(tom_is_fun_sym_EqualTerm(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_EqualTerm_kid1(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_EqualTerm_kid2(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var1 = ( TomTerm) tom_match2_1_1; {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  TomType type1 = ( TomType) tom_match2_1_1_3; {  TomTerm var2 = ( TomTerm) tom_match2_1_2;

 
        buildExpEqualTermVar(deep, type1, var1, var2);
        return;
      }}}}} }}}} }}_match2_pattern11: { if(tom_is_fun_sym_EqualTerm(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_EqualTerm_kid1(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_EqualTerm_kid2(tom_match2_1);{ if(tom_is_fun_sym_VariableStar(tom_match2_1_1) ||  false ) { {  TomTerm var1 = ( TomTerm) tom_match2_1_1; {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_VariableStar_astType(tom_match2_1_1);{ {  TomType type1 = ( TomType) tom_match2_1_1_3; {  TomTerm var2 = ( TomTerm) tom_match2_1_2;

 
        buildExpEqualTermVarStar(deep, type1, var1, var2);
        return;
      }}}}} }}}} }}_match2_pattern12: { if(tom_is_fun_sym_IsFsym(tom_match2_1) ||  false ) { {  TomName tom_match2_1_1 = ( TomName) tom_get_slot_IsFsym_astName(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_IsFsym_variable(tom_match2_1);{ if(tom_is_fun_sym_Name(tom_match2_1_1) ||  false ) { {  String tom_match2_1_1_1 = ( String) tom_get_slot_Name_string(tom_match2_1_1);{ {  String opname = ( String) tom_match2_1_1_1; if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_2; {  OptionList tom_match2_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_2); {  TomName tom_match2_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_2); {  TomType tom_match2_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_2);{ {  OptionList option1 = ( OptionList) tom_match2_1_2_1; if(tom_is_fun_sym_PositionName(tom_match2_1_2_2) ||  false ) { {  TomNumberList tom_match2_1_2_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_2_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_2_2_1; {  TomType type1 = ( TomType) tom_match2_1_2_3;

 
        buildExpIsFsym(deep, opname, var);
        return;
      }}}} }}}}}}} }}}} }}}} }}_match2_pattern13: { if(tom_is_fun_sym_GetSubterm(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_GetSubterm_variable(tom_match2_1); {  TomNumber tom_match2_1_2 = ( TomNumber) tom_get_slot_GetSubterm_number(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_1; {  OptionList tom_match2_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_1); {  TomName tom_match2_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_1); {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  OptionList option1 = ( OptionList) tom_match2_1_1_1; if(tom_is_fun_sym_PositionName(tom_match2_1_1_2) ||  false ) { {  TomNumberList tom_match2_1_1_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_1_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_1_2_1; {  TomType type1 = ( TomType) tom_match2_1_1_3; if(tom_is_fun_sym_Number(tom_match2_1_2) ||  false ) { {  int tom_match2_1_2_1 = ( int) tom_get_slot_Number_integer(tom_match2_1_2);{ {  int number = ( int) tom_match2_1_2_1;

 
        buildExpGetSubterm(deep, var, type1, number);
        return;
      }}} }}}}} }}}}}}} }}}} }}_match2_pattern14: { if(tom_is_fun_sym_GetSlot(tom_match2_1) ||  false ) { {  TomName tom_match2_1_1 = ( TomName) tom_get_slot_GetSlot_astName(tom_match2_1); {  String tom_match2_1_2 = ( String) tom_get_slot_GetSlot_slotNameString(tom_match2_1); {  TomTerm tom_match2_1_3 = ( TomTerm) tom_get_slot_GetSlot_variable(tom_match2_1);{ if(tom_is_fun_sym_Name(tom_match2_1_1) ||  false ) { {  String tom_match2_1_1_1 = ( String) tom_get_slot_Name_string(tom_match2_1_1);{ {  String opname = ( String) tom_match2_1_1_1; {  String slotName = ( String) tom_match2_1_2; if(tom_is_fun_sym_Variable(tom_match2_1_3) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_3;{

 
        buildExpGetSlot(deep, opname, slotName, var);
        return;
      }} }}}}} }}}}} }}_match2_pattern15: { if(tom_is_fun_sym_GetHead(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_GetHead_variable(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_1; {  OptionList tom_match2_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_1); {  TomName tom_match2_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_1); {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  OptionList option1 = ( OptionList) tom_match2_1_1_1; if(tom_is_fun_sym_PositionName(tom_match2_1_1_2) ||  false ) { {  TomNumberList tom_match2_1_1_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_1_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_1_2_1; {  TomType type1 = ( TomType) tom_match2_1_1_3;

 
        buildExpGetHead(deep, type1, var);
        return;
      }}}} }}}}}}} }}} }}_match2_pattern16: { if(tom_is_fun_sym_GetTail(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_GetTail_kid1(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_1; {  OptionList tom_match2_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_1); {  TomName tom_match2_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_1); {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  OptionList option1 = ( OptionList) tom_match2_1_1_1; if(tom_is_fun_sym_PositionName(tom_match2_1_1_2) ||  false ) { {  TomNumberList tom_match2_1_1_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_1_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_1_2_1; {  TomType type1 = ( TomType) tom_match2_1_1_3;

 
        buildExpGetTail(deep, type1, var);
        return;
      }}}} }}}}}}} }}} }}_match2_pattern17: { if(tom_is_fun_sym_GetSize(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_GetSize_kid1(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match2_1_1; {  OptionList tom_match2_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_1); {  TomName tom_match2_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_1); {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  OptionList option1 = ( OptionList) tom_match2_1_1_1; if(tom_is_fun_sym_PositionName(tom_match2_1_1_2) ||  false ) { {  TomNumberList tom_match2_1_1_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_1_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_1_2_1; {  TomType type1 = ( TomType) tom_match2_1_1_3;

 
        buildExpGetSize(deep, type1, var);
        return;
      }}}} }}}}}}} }}} }}_match2_pattern18: { if(tom_is_fun_sym_GetElement(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_GetElement_kid1(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_GetElement_kid2(tom_match2_1);{ if(tom_is_fun_sym_Variable(tom_match2_1_1) ||  false ) { {  TomTerm varName = ( TomTerm) tom_match2_1_1; {  OptionList tom_match2_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_1); {  TomName tom_match2_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_1); {  TomType tom_match2_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_1);{ {  OptionList option1 = ( OptionList) tom_match2_1_1_1; if(tom_is_fun_sym_PositionName(tom_match2_1_1_2) ||  false ) { {  TomNumberList tom_match2_1_1_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_1_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_1_2_1; {  TomType type1 = ( TomType) tom_match2_1_1_3; if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) { {  TomTerm varIndex = ( TomTerm) tom_match2_1_2; {  OptionList tom_match2_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_2); {  TomName tom_match2_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_2); {  TomType tom_match2_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_2);{ {  OptionList option2 = ( OptionList) tom_match2_1_2_1; if(tom_is_fun_sym_PositionName(tom_match2_1_2_2) ||  false ) { {  TomNumberList tom_match2_1_2_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_2_2);{ {  TomNumberList l2 = ( TomNumberList) tom_match2_1_2_2_1; {  TomType type2 = ( TomType) tom_match2_1_2_3;


 
        buildExpGetElement(deep, type1, varName, varIndex);
        return;
      }}}} }}}}}}} }}}}} }}}}}}} }}}} }}_match2_pattern19: { if(tom_is_fun_sym_GetSliceList(tom_match2_1) ||  false ) { {  TomName tom_match2_1_1 = ( TomName) tom_get_slot_GetSliceList_astName(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_GetSliceList_variableBeginAST(tom_match2_1); {  TomTerm tom_match2_1_3 = ( TomTerm) tom_get_slot_GetSliceList_variableEndAST(tom_match2_1);{ if(tom_is_fun_sym_Name(tom_match2_1_1) ||  false ) { {  String tom_match2_1_1_1 = ( String) tom_get_slot_Name_string(tom_match2_1_1);{ {  String name = ( String) tom_match2_1_1_1; if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) { {  TomTerm varBegin = ( TomTerm) tom_match2_1_2; {  OptionList tom_match2_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_2); {  TomName tom_match2_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_2); {  TomType tom_match2_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_2);{ {  OptionList option1 = ( OptionList) tom_match2_1_2_1; if(tom_is_fun_sym_PositionName(tom_match2_1_2_2) ||  false ) { {  TomNumberList tom_match2_1_2_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_2_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_2_2_1; {  TomType type1 = ( TomType) tom_match2_1_2_3; if(tom_is_fun_sym_Variable(tom_match2_1_3) ||  false ) { {  TomTerm varEnd = ( TomTerm) tom_match2_1_3; {  OptionList tom_match2_1_3_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_3); {  TomName tom_match2_1_3_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_3); {  TomType tom_match2_1_3_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_3);{ {  OptionList option2 = ( OptionList) tom_match2_1_3_1; if(tom_is_fun_sym_PositionName(tom_match2_1_3_2) ||  false ) { {  TomNumberList tom_match2_1_3_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_3_2);{ {  TomNumberList l2 = ( TomNumberList) tom_match2_1_3_2_1; {  TomType type2 = ( TomType) tom_match2_1_3_3;



 
        
        buildExpGetSliceList(deep, name, varBegin, varEnd);
        return;
      }}}} }}}}}}} }}}}} }}}}}}} }}}} }}}}} }}_match2_pattern20: { if(tom_is_fun_sym_GetSliceArray(tom_match2_1) ||  false ) { {  TomName tom_match2_1_1 = ( TomName) tom_get_slot_GetSliceArray_astName(tom_match2_1); {  TomTerm tom_match2_1_2 = ( TomTerm) tom_get_slot_GetSliceArray_subjectListName(tom_match2_1); {  TomTerm tom_match2_1_3 = ( TomTerm) tom_get_slot_GetSliceArray_variableBeginAST(tom_match2_1); {  TomTerm tom_match2_1_4 = ( TomTerm) tom_get_slot_GetSliceArray_variableEndAST(tom_match2_1);{ if(tom_is_fun_sym_Name(tom_match2_1_1) ||  false ) { {  String tom_match2_1_1_1 = ( String) tom_get_slot_Name_string(tom_match2_1_1);{ {  String name = ( String) tom_match2_1_1_1; if(tom_is_fun_sym_Variable(tom_match2_1_2) ||  false ) { {  TomTerm varArray = ( TomTerm) tom_match2_1_2; {  OptionList tom_match2_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_2); {  TomName tom_match2_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_2); {  TomType tom_match2_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_2);{ {  OptionList option1 = ( OptionList) tom_match2_1_2_1; if(tom_is_fun_sym_PositionName(tom_match2_1_2_2) ||  false ) { {  TomNumberList tom_match2_1_2_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_2_2);{ {  TomNumberList l1 = ( TomNumberList) tom_match2_1_2_2_1; {  TomType type1 = ( TomType) tom_match2_1_2_3; if(tom_is_fun_sym_Variable(tom_match2_1_3) ||  false ) { {  TomTerm varBegin = ( TomTerm) tom_match2_1_3; {  OptionList tom_match2_1_3_1 = ( OptionList) tom_get_slot_Variable_option(tom_match2_1_3); {  TomName tom_match2_1_3_2 = ( TomName) tom_get_slot_Variable_astName(tom_match2_1_3); {  TomType tom_match2_1_3_3 = ( TomType) tom_get_slot_Variable_astType(tom_match2_1_3);{ {  OptionList option2 = ( OptionList) tom_match2_1_3_1; if(tom_is_fun_sym_PositionName(tom_match2_1_3_2) ||  false ) { {  TomNumberList tom_match2_1_3_2_1 = ( TomNumberList) tom_get_slot_PositionName_numberList(tom_match2_1_3_2);{ {  TomNumberList l2 = ( TomNumberList) tom_match2_1_3_2_1; {  TomType type2 = ( TomType) tom_match2_1_3_3; {  TomTerm expEnd = ( TomTerm) tom_match2_1_4;




 
        buildExpGetSliceArray(deep, name, varArray, varBegin, expEnd);
        return;
      }}}}} }}}}}}} }}}}} }}}}}}} }}}} }}}}}} }}_match2_pattern21: { if(tom_is_fun_sym_TomTermToExpression(tom_match2_1) ||  false ) { {  TomTerm tom_match2_1_1 = ( TomTerm) tom_get_slot_TomTermToExpression_astTerm(tom_match2_1);{ {  TomTerm t = ( TomTerm) tom_match2_1_1;

 
        generate(deep,t);
        return;
      }}} }}_match2_pattern22: { {  Expression t = ( Expression) tom_match2_1;

 
        System.out.println("Cannot generate code for expression: " + t);
        throw new TomRuntimeException(new Throwable("Cannot generate code for expression: " + t));
      }}}}
 
  }

  public void generateInstruction(int deep, Instruction subject)
    throws IOException {
    if(subject==null) { return; }
    
     {  Instruction tom_match4_1 = ( Instruction) subject;{_match4_pattern1: { if(tom_is_fun_sym_Nop(tom_match4_1) ||  false ) {{
 
        return;
      } }}_match4_pattern2: { if(tom_is_fun_sym_Assign(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_Assign_variable(tom_match4_1); {  Expression tom_match4_1_2 = ( Expression) tom_get_slot_Assign_source(tom_match4_1);{ if(tom_is_fun_sym_VariableStar(tom_match4_1_1) || tom_is_fun_sym_Variable(tom_match4_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match4_1_1; {  OptionList tom_match4_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match4_1_1); {  TomName tom_match4_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match4_1_1); {  TomType tom_match4_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match4_1_1);{ {  OptionList list = ( OptionList) tom_match4_1_1_1; {  TomName name1 = ( TomName) tom_match4_1_1_2; if(tom_is_fun_sym_Type(tom_match4_1_1_3) ||  false ) { {  TomType tom_match4_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match4_1_1_3); {  TomType tom_match4_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match4_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match4_1_1_3_1) ||  false ) { {  String tom_match4_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match4_1_1_3_1);{ {  String type = ( String) tom_match4_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match4_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match4_1_1_3_2;{ {  Expression exp = ( Expression) tom_match4_1_2;


 
        buildAssignVar(deep, var, list, type, tlType, exp);
        return;
      }}} }}}} }}}} }}}}}}}} }}}} }}_match4_pattern3: { if(tom_is_fun_sym_Assign(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_Assign_variable(tom_match4_1); {  Expression tom_match4_1_2 = ( Expression) tom_get_slot_Assign_source(tom_match4_1);{ if(tom_is_fun_sym_UnamedVariable(tom_match4_1_1) ||  false ) {{ {  Expression exp = ( Expression) tom_match4_1_2;

 
        return;
      }} }}}} }}_match4_pattern4: { if(tom_is_fun_sym_Assign(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_Assign_variable(tom_match4_1); {  Expression tom_match4_1_2 = ( Expression) tom_get_slot_Assign_source(tom_match4_1);{ if(tom_is_fun_sym_UnamedVariableStar(tom_match4_1_1) ||  false ) {{ {  Expression exp = ( Expression) tom_match4_1_2;          return;       }} }}}} }}_match4_pattern5: { if(tom_is_fun_sym_Let(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_Let_variable(tom_match4_1); {  Expression tom_match4_1_2 = ( Expression) tom_get_slot_Let_source(tom_match4_1); {  Instruction tom_match4_1_3 = ( Instruction) tom_get_slot_Let_astInstruction(tom_match4_1);{ if(tom_is_fun_sym_UnamedVariableStar(tom_match4_1_1) || tom_is_fun_sym_UnamedVariable(tom_match4_1_1) ||  false ) {{ {  Expression exp = ( Expression) tom_match4_1_2; {  Instruction body = ( Instruction) tom_match4_1_3;

 
        generateInstruction(deep,body);
        return;
      }}} }}}}} }}_match4_pattern6: { if(tom_is_fun_sym_Let(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_Let_variable(tom_match4_1); {  Expression tom_match4_1_2 = ( Expression) tom_get_slot_Let_source(tom_match4_1); {  Instruction tom_match4_1_3 = ( Instruction) tom_get_slot_Let_astInstruction(tom_match4_1);{ if(tom_is_fun_sym_VariableStar(tom_match4_1_1) || tom_is_fun_sym_Variable(tom_match4_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match4_1_1; {  OptionList tom_match4_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match4_1_1); {  TomName tom_match4_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match4_1_1); {  TomType tom_match4_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match4_1_1);{ {  OptionList list = ( OptionList) tom_match4_1_1_1; {  TomName name1 = ( TomName) tom_match4_1_1_2; if(tom_is_fun_sym_Type(tom_match4_1_1_3) ||  false ) { {  TomType tom_match4_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match4_1_1_3); {  TomType tom_match4_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match4_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match4_1_1_3_1) ||  false ) { {  String tom_match4_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match4_1_1_3_1);{ {  String type = ( String) tom_match4_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match4_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match4_1_1_3_2;{ {  Expression exp = ( Expression) tom_match4_1_2; {  Instruction body = ( Instruction) tom_match4_1_3;

 
        buildLet(deep, var, list, type, tlType, exp, body);
        return;
      }}}} }}}} }}}} }}}}}}}} }}}}} }}_match4_pattern7: { if(tom_is_fun_sym_AssignMatchSubject(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_AssignMatchSubject_kid1(tom_match4_1); {  Expression tom_match4_1_2 = ( Expression) tom_get_slot_AssignMatchSubject_source(tom_match4_1);{ if(tom_is_fun_sym_Variable(tom_match4_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match4_1_1; {  OptionList tom_match4_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match4_1_1); {  TomName tom_match4_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match4_1_1); {  TomType tom_match4_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match4_1_1);{ {  OptionList option1 = ( OptionList) tom_match4_1_1_1; {  TomName name1 = ( TomName) tom_match4_1_1_2; if(tom_is_fun_sym_Type(tom_match4_1_1_3) ||  false ) { {  TomType tom_match4_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match4_1_1_3); {  TomType tom_match4_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match4_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match4_1_1_3_1) ||  false ) { {  TomType tomType = ( TomType) tom_match4_1_1_3_1; {  String tom_match4_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match4_1_1_3_1);{ {  String type = ( String) tom_match4_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match4_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match4_1_1_3_2;{ {  Expression exp = ( Expression) tom_match4_1_2;


 
        buildAssignMatch(deep, var, type, tlType, exp);
        return;
      }}} }}}}} }}}} }}}}}}}} }}}} }}_match4_pattern8: { if(tom_is_fun_sym_UnamedBlock(tom_match4_1) ||  false ) { {  TomList tom_match4_1_1 = ( TomList) tom_get_slot_UnamedBlock_instList(tom_match4_1);{ {  TomList instList = ( TomList) tom_match4_1_1;

 
        buildUnamedBlock(deep, instList);
        return;
      }}} }}_match4_pattern9: { if(tom_is_fun_sym_NamedBlock(tom_match4_1) ||  false ) { {  String tom_match4_1_1 = ( String) tom_get_slot_NamedBlock_blockName(tom_match4_1); {  TomList tom_match4_1_2 = ( TomList) tom_get_slot_NamedBlock_instList(tom_match4_1);{ {  String blockName = ( String) tom_match4_1_1; {  TomList instList = ( TomList) tom_match4_1_2;

 
        buildNamedBlock(deep, blockName, instList);
        return;
      }}}}} }}_match4_pattern10: { if(tom_is_fun_sym_IfThenElse(tom_match4_1) ||  false ) { {  Expression tom_match4_1_1 = ( Expression) tom_get_slot_IfThenElse_condition(tom_match4_1); {  TomList tom_match4_1_2 = ( TomList) tom_get_slot_IfThenElse_succesList(tom_match4_1); {  TomList tom_match4_1_3 = ( TomList) tom_get_slot_IfThenElse_failureList(tom_match4_1);{ {  Expression exp = ( Expression) tom_match4_1_1; {  TomList succesList = ( TomList) tom_match4_1_2; if(tom_is_fun_sym_emptyTomList(tom_match4_1_3) ||  false ) {{


 
        buildIfThenElse(deep, exp,succesList);
        return;
      } }}}}}}} }}_match4_pattern11: { if(tom_is_fun_sym_IfThenElse(tom_match4_1) ||  false ) { {  Expression tom_match4_1_1 = ( Expression) tom_get_slot_IfThenElse_condition(tom_match4_1); {  TomList tom_match4_1_2 = ( TomList) tom_get_slot_IfThenElse_succesList(tom_match4_1); {  TomList tom_match4_1_3 = ( TomList) tom_get_slot_IfThenElse_failureList(tom_match4_1);{ {  Expression exp = ( Expression) tom_match4_1_1; {  TomList succesList = ( TomList) tom_match4_1_2; {  TomList failureList = ( TomList) tom_match4_1_3;

 
        buildIfThenElseWithFailure(deep, exp, succesList, failureList);
        return;
      }}}}}}} }}_match4_pattern12: { if(tom_is_fun_sym_DoWhile(tom_match4_1) ||  false ) { {  TomList tom_match4_1_1 = ( TomList) tom_get_slot_DoWhile_instList(tom_match4_1); {  Expression tom_match4_1_2 = ( Expression) tom_get_slot_DoWhile_condition(tom_match4_1);{ {  TomList succesList = ( TomList) tom_match4_1_1; {  Expression exp = ( Expression) tom_match4_1_2;

 
        buildDoWhile(deep, succesList,exp);
        return;
      }}}}} }}_match4_pattern13: { if(tom_is_fun_sym_Increment(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_Increment_kid1(tom_match4_1);{ if(tom_is_fun_sym_Variable(tom_match4_1_1) ||  false ) { {  TomTerm var = ( TomTerm) tom_match4_1_1;{

 
        buildIncrement(deep, var);
        return;
      }} }}} }}_match4_pattern14: { if(tom_is_fun_sym_Action(tom_match4_1) ||  false ) { {  TomList tom_match4_1_1 = ( TomList) tom_get_slot_Action_instList(tom_match4_1);{ {  TomList l = ( TomList) tom_match4_1_1;

 
        generateList(deep, l);
        return;
      }}} }}_match4_pattern15: { if(tom_is_fun_sym_Return(tom_match4_1) ||  false ) { {  TomTerm tom_match4_1_1 = ( TomTerm) tom_get_slot_Return_kid1(tom_match4_1);{ {  TomTerm exp = ( TomTerm) tom_match4_1_1;








 
        buildReturn(deep, exp);
        return;
      }}} }}_match4_pattern16: { if(tom_is_fun_sym_OpenBlock(tom_match4_1) ||  false ) {{

  output.writeln(deep,"{"); return; } }}_match4_pattern17: { if(tom_is_fun_sym_CloseBlock(tom_match4_1) ||  false ) {{
  output.writeln(deep,"}"); return; } }}_match4_pattern18: { {  Instruction t = ( Instruction) tom_match4_1;


 
        System.out.println("Cannot generate code for instruction: " + t);
        throw new TomRuntimeException(new Throwable("Cannot generate code for instruction: " + t));
      }}}}
 
  }
  
  public void generateTargetLanguage(int deep, TargetLanguage subject)
    throws IOException {
    if(subject==null) { return; }
     {  TargetLanguage tom_match5_1 = ( TargetLanguage) subject;{_match5_pattern1: { if(tom_is_fun_sym_TL(tom_match5_1) ||  false ) { {  String tom_match5_1_1 = ( String) tom_get_slot_TL_code(tom_match5_1); {  Position tom_match5_1_2 = ( Position) tom_get_slot_TL_start(tom_match5_1); {  Position tom_match5_1_3 = ( Position) tom_get_slot_TL_end(tom_match5_1);{ {  String t = ( String) tom_match5_1_1; if(tom_is_fun_sym_TextPosition(tom_match5_1_2) ||  false ) { {  int tom_match5_1_2_1 = ( int) tom_get_slot_TextPosition_line(tom_match5_1_2);{ {  int startLine = ( int) tom_match5_1_2_1; if(tom_is_fun_sym_TextPosition(tom_match5_1_3) ||  false ) { {  int tom_match5_1_3_1 = ( int) tom_get_slot_TextPosition_line(tom_match5_1_3);{ {  int endLine = ( int) tom_match5_1_3_1;
 
        output.write(deep,t, startLine, endLine-startLine);
        return;
      }}} }}}} }}}}}} }}_match5_pattern2: { if(tom_is_fun_sym_ITL(tom_match5_1) ||  false ) { {  String tom_match5_1_1 = ( String) tom_get_slot_ITL_code(tom_match5_1);{ {  String t = ( String) tom_match5_1_1;

 
        output.write(deep,t);
        return;
      }}} }}_match5_pattern3: { if(tom_is_fun_sym_Comment(tom_match5_1) ||  false ) { {  String tom_match5_1_1 = ( String) tom_get_slot_Comment_code(tom_match5_1);{ {  String t = ( String) tom_match5_1_1;

 
        output.write("/* ");
        output.write(deep,t);
        output.write(" */ ");
        output.writeln();
        return;
      }}} }}_match5_pattern4: { {  TargetLanguage t = ( TargetLanguage) tom_match5_1;

 
        System.out.println("Cannot generate code for TL: " + t);
        throw new TomRuntimeException(new Throwable("Cannot generate code for TL: " + t));
      }}}}
 
  }

  public void generateOption(int deep, Option subject)
    throws IOException {
    if(subject==null) { return; }
    
     {  Option tom_match6_1 = ( Option) subject;{_match6_pattern1: { if(tom_is_fun_sym_DeclarationToOption(tom_match6_1) ||  false ) { {  Declaration tom_match6_1_1 = ( Declaration) tom_get_slot_DeclarationToOption_astDeclaration(tom_match6_1);{ {  Declaration decl = ( Declaration) tom_match6_1_1;
 
        generateDeclaration(deep,decl);
        return;
      }}} }}_match6_pattern2: { if(tom_is_fun_sym_OriginTracking(tom_match6_1) ||  false ) {{
  return; } }}_match6_pattern3: { if(tom_is_fun_sym_DefinedSymbol(tom_match6_1) ||  false ) {{
  return; } }}_match6_pattern4: { if(tom_is_fun_sym_Constructor(tom_match6_1) ||  false ) {{
  return; } }}_match6_pattern5: { {  Option t = ( Option) tom_match6_1;

 
        System.out.println("Cannot generate code for option: " + t);
        throw new TomRuntimeException(new Throwable("Cannot generate code for option: " + t));
      }}}}
 
  }
  
  public void generateDeclaration(int deep, Declaration subject)
    throws IOException {
    if(subject==null) { return; }
    
     {  Declaration tom_match7_1 = ( Declaration) subject;{_match7_pattern1: { if(tom_is_fun_sym_EmptyDeclaration(tom_match7_1) ||  false ) {{
 
        return;
      } }}_match7_pattern2: { if(tom_is_fun_sym_SymbolDecl(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_SymbolDecl_astName(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String tomName = ( String) tom_match7_1_1_1;
 
        buildSymbolDecl(deep, tomName);
        return ;
      }}} }}} }}_match7_pattern3: { if(tom_is_fun_sym_ArraySymbolDecl(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_ArraySymbolDecl_astName(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String tomName = ( String) tom_match7_1_1_1;

 
        buildArraySymbolDecl(deep, tomName);
        return ;
      }}} }}} }}_match7_pattern4: { if(tom_is_fun_sym_ListSymbolDecl(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_ListSymbolDecl_astName(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String tomName = ( String) tom_match7_1_1_1;

 
        buildListSymbolDecl(deep, tomName);
        return ;
      }}} }}} }}_match7_pattern5: { if(tom_is_fun_sym_GetFunctionSymbolDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_GetFunctionSymbolDecl_termArg(tom_match7_1); {  TargetLanguage tom_match7_1_2 = ( TargetLanguage) tom_get_slot_GetFunctionSymbolDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3); {  TomType tom_match7_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match7_1_1_3_2;{ {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_2;



 
        buildGetFunctionSymbolDecl(deep, type, name, tlType, tlCode);
        return;
      }}} }}}} }}}} }}}} }}}}}} }}}} }}_match7_pattern6: { if(tom_is_fun_sym_GetSubtermDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_GetSubtermDecl_termArg(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_GetSubtermDecl_variable(tom_match7_1); {  TargetLanguage tom_match7_1_3 = ( TargetLanguage) tom_get_slot_GetSubtermDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3); {  TomType tom_match7_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type1 = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_1_3_2) ||  false ) { {  TomType tlType1 = ( TomType) tom_match7_1_1_3_2;{ if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option2 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name2 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3); {  TomType tom_match7_1_2_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type2 = ( String) tom_match7_1_2_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_2_3_2) ||  false ) { {  TomType tlType2 = ( TomType) tom_match7_1_2_3_2;{ {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_3;





 
        buildGetSubtermDecl(deep, name1, name2, type1, tlType1, tlType2, tlCode);
        return;
      }}} }}}} }}}} }}}} }}}}}} }}} }}}} }}}} }}}} }}}}}} }}}}} }}_match7_pattern7: { if(tom_is_fun_sym_IsFsymDecl(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_IsFsymDecl_astName(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_IsFsymDecl_variable(tom_match7_1); {  TargetLanguage tom_match7_1_3 = ( TargetLanguage) tom_get_slot_IsFsymDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String tomName = ( String) tom_match7_1_1_1; if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option1 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name1 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3); {  TomType tom_match7_1_2_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type1 = ( String) tom_match7_1_2_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_2_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match7_1_2_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_3) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_3;{



 
        buildIsFsymDecl(deep, tomName, name1, tlType, tlCode);
        return;
      }} }}} }}}} }}}} }}}} }}}}}} }}}} }}}}} }}_match7_pattern8: { if(tom_is_fun_sym_GetSlotDecl(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_GetSlotDecl_astName(tom_match7_1); {  TomName tom_match7_1_2 = ( TomName) tom_get_slot_GetSlotDecl_slotName(tom_match7_1); {  TomTerm tom_match7_1_3 = ( TomTerm) tom_get_slot_GetSlotDecl_variable(tom_match7_1); {  TargetLanguage tom_match7_1_4 = ( TargetLanguage) tom_get_slot_GetSlotDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String tomName = ( String) tom_match7_1_1_1; {  TomName slotName = ( TomName) tom_match7_1_2; if(tom_is_fun_sym_Variable(tom_match7_1_3) ||  false ) { {  OptionList tom_match7_1_3_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_3); {  TomName tom_match7_1_3_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_3); {  TomType tom_match7_1_3_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_3);{ {  OptionList option1 = ( OptionList) tom_match7_1_3_1; if(tom_is_fun_sym_Name(tom_match7_1_3_2) ||  false ) { {  String tom_match7_1_3_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_3_2);{ {  String name1 = ( String) tom_match7_1_3_2_1; if(tom_is_fun_sym_Type(tom_match7_1_3_3) ||  false ) { {  TomType tom_match7_1_3_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_3_3); {  TomType tom_match7_1_3_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_3_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_3_3_1) ||  false ) { {  String tom_match7_1_3_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_3_3_1);{ {  String type1 = ( String) tom_match7_1_3_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_3_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match7_1_3_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_4) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_4;{




 
        buildGetSlotDecl(deep, tomName, name1, tlType, tlCode, slotName);
        return;
      }} }}} }}}} }}}} }}}} }}}}}} }}}}} }}}}}} }}_match7_pattern9: { if(tom_is_fun_sym_CompareFunctionSymbolDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_CompareFunctionSymbolDecl_symbolArg1(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_CompareFunctionSymbolDecl_symbolArg2(tom_match7_1); {  TargetLanguage tom_match7_1_3 = ( TargetLanguage) tom_get_slot_CompareFunctionSymbolDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type1 = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option2 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name2 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type2 = ( String) tom_match7_1_2_3_1_1; {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_3;



 
        buildCompareFunctionSymbolDecl(deep, name1, name2, type1, type2, tlCode);
        return;
      }}}} }}} }}}} }}}}}} }}}} }}} }}}} }}}}}} }}}}} }}_match7_pattern10: { if(tom_is_fun_sym_TermsEqualDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_TermsEqualDecl_termArg1(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_TermsEqualDecl_termArg2(tom_match7_1); {  TargetLanguage tom_match7_1_3 = ( TargetLanguage) tom_get_slot_TermsEqualDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type1 = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option2 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name2 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type2 = ( String) tom_match7_1_2_3_1_1; {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_3;



 
        buildTermsEqualDecl(deep, name1, name2, type1, type2, tlCode);
        return;
      }}}} }}} }}}} }}}}}} }}}} }}} }}}} }}}}}} }}}}} }}_match7_pattern11: { if(tom_is_fun_sym_GetHeadDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_GetHeadDecl_var(tom_match7_1); {  TargetLanguage tom_match7_1_2 = ( TargetLanguage) tom_get_slot_GetHeadDecl_tlcode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3); {  TomType tom_match7_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match7_1_1_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_2) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_2;{


 
        buildGetHeadDecl(deep, name1, type, tlType, tlCode);
        return;
      }} }}} }}}} }}}} }}}} }}}}}} }}}} }}_match7_pattern12: { if(tom_is_fun_sym_GetTailDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_GetTailDecl_var(tom_match7_1); {  TargetLanguage tom_match7_1_2 = ( TargetLanguage) tom_get_slot_GetTailDecl_tlcode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3); {  TomType tom_match7_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match7_1_1_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_2) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_2;{


 
        buildGetTailDecl(deep, name1, type, tlType, tlCode);
        return;
      }} }}} }}}} }}}} }}}} }}}}}} }}}} }}_match7_pattern13: { if(tom_is_fun_sym_IsEmptyDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_IsEmptyDecl_var(tom_match7_1); {  TargetLanguage tom_match7_1_2 = ( TargetLanguage) tom_get_slot_IsEmptyDecl_tlcode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3); {  TomType tom_match7_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match7_1_1_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_2) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_2;{


 
        buildIsEmptyDecl(deep, name1, type, tlType, tlCode);
        return;
      }} }}} }}}} }}}} }}}} }}}}}} }}}} }}_match7_pattern14: { if(tom_is_fun_sym_MakeEmptyList(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_MakeEmptyList_astName(tom_match7_1); {  TargetLanguage tom_match7_1_2 = ( TargetLanguage) tom_get_slot_MakeEmptyList_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String opname = ( String) tom_match7_1_1_1; if(tom_is_fun_sym_TL(tom_match7_1_2) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_2;{

 
        buildMakeEmptyList(deep, opname, tlCode);
        return;
      }} }}}} }}}} }}_match7_pattern15: { if(tom_is_fun_sym_MakeAddList(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_MakeAddList_astName(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_MakeAddList_varElt(tom_match7_1); {  TomTerm tom_match7_1_3 = ( TomTerm) tom_get_slot_MakeAddList_varList(tom_match7_1); {  TargetLanguage tom_match7_1_4 = ( TargetLanguage) tom_get_slot_MakeAddList_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String opname = ( String) tom_match7_1_1_1; if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option1 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name1 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType fullEltType = ( TomType) tom_match7_1_2_3; {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3); {  TomType tom_match7_1_2_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type1 = ( String) tom_match7_1_2_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_2_3_2) ||  false ) { {  TomType tlType1 = ( TomType) tom_match7_1_2_3_2;{ if(tom_is_fun_sym_Variable(tom_match7_1_3) ||  false ) { {  OptionList tom_match7_1_3_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_3); {  TomName tom_match7_1_3_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_3); {  TomType tom_match7_1_3_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_3);{ {  OptionList option2 = ( OptionList) tom_match7_1_3_1; if(tom_is_fun_sym_Name(tom_match7_1_3_2) ||  false ) { {  String tom_match7_1_3_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_3_2);{ {  String name2 = ( String) tom_match7_1_3_2_1; if(tom_is_fun_sym_Type(tom_match7_1_3_3) ||  false ) { {  TomType fullListType = ( TomType) tom_match7_1_3_3; {  TomType tom_match7_1_3_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_3_3); {  TomType tom_match7_1_3_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_3_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_3_3_1) ||  false ) { {  String tom_match7_1_3_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_3_3_1);{ {  String type2 = ( String) tom_match7_1_3_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_3_3_2) ||  false ) { {  TomType tlType2 = ( TomType) tom_match7_1_3_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_4) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_4;{




 
        buildMakeAddList(deep, opname, name1, name2, tlType1, tlType2, fullEltType, fullListType, tlCode);
        return;
      }} }}} }}}} }}}}} }}}} }}}}}} }}} }}}} }}}}} }}}} }}}}}} }}}} }}}}}} }}_match7_pattern16: { if(tom_is_fun_sym_GetElementDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_GetElementDecl_kid1(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_GetElementDecl_kid2(tom_match7_1); {  TargetLanguage tom_match7_1_3 = ( TargetLanguage) tom_get_slot_GetElementDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3); {  TomType tom_match7_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type1 = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_1_3_2) ||  false ) { {  TomType tlType1 = ( TomType) tom_match7_1_1_3_2;{ if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option2 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name2 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3); {  TomType tom_match7_1_2_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type2 = ( String) tom_match7_1_2_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_2_3_2) ||  false ) { {  TomType tlType2 = ( TomType) tom_match7_1_2_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_3) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_3;{



 
        buildGetElementDecl(deep, name1, name2, type1, tlType1, tlCode);
        return;
      }} }}} }}}} }}}} }}}} }}}}}} }}} }}}} }}}} }}}} }}}}}} }}}}} }}_match7_pattern17: { if(tom_is_fun_sym_GetSizeDecl(tom_match7_1) ||  false ) { {  TomTerm tom_match7_1_1 = ( TomTerm) tom_get_slot_GetSizeDecl_kid1(tom_match7_1); {  TargetLanguage tom_match7_1_2 = ( TargetLanguage) tom_get_slot_GetSizeDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Variable(tom_match7_1_1) ||  false ) { {  OptionList tom_match7_1_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_1); {  TomName tom_match7_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_1); {  TomType tom_match7_1_1_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_1);{ {  OptionList option1 = ( OptionList) tom_match7_1_1_1; if(tom_is_fun_sym_Name(tom_match7_1_1_2) ||  false ) { {  String tom_match7_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1_2);{ {  String name1 = ( String) tom_match7_1_1_2_1; if(tom_is_fun_sym_Type(tom_match7_1_1_3) ||  false ) { {  TomType tom_match7_1_1_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_1_3); {  TomType tom_match7_1_1_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_1_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_1_3_1) ||  false ) { {  String tom_match7_1_1_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_1_3_1);{ {  String type = ( String) tom_match7_1_1_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_1_3_2) ||  false ) { {  TomType tlType = ( TomType) tom_match7_1_1_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_2) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_2;{


 
        buildGetSizeDecl(deep, name1, type, tlType, tlCode);
        return;
      }} }}} }}}} }}}} }}}} }}}}}} }}}} }}_match7_pattern18: { if(tom_is_fun_sym_MakeEmptyArray(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_MakeEmptyArray_astName(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_MakeEmptyArray_varSize(tom_match7_1); {  TargetLanguage tom_match7_1_3 = ( TargetLanguage) tom_get_slot_MakeEmptyArray_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String opname = ( String) tom_match7_1_1_1; if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option1 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name1 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type1 = ( String) tom_match7_1_2_3_1_1; if(tom_is_fun_sym_TL(tom_match7_1_3) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_3;{



 
        buildMakeEmptyArray(deep, opname, name1, tlCode);
        return;
      }} }}}} }}} }}}} }}}}}} }}}} }}}}} }}_match7_pattern19: { if(tom_is_fun_sym_MakeAddArray(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_MakeAddArray_astName(tom_match7_1); {  TomTerm tom_match7_1_2 = ( TomTerm) tom_get_slot_MakeAddArray_varElt(tom_match7_1); {  TomTerm tom_match7_1_3 = ( TomTerm) tom_get_slot_MakeAddArray_varList(tom_match7_1); {  TargetLanguage tom_match7_1_4 = ( TargetLanguage) tom_get_slot_MakeAddArray_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String opname = ( String) tom_match7_1_1_1; if(tom_is_fun_sym_Variable(tom_match7_1_2) ||  false ) { {  OptionList tom_match7_1_2_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_2); {  TomName tom_match7_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_2); {  TomType tom_match7_1_2_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_2);{ {  OptionList option1 = ( OptionList) tom_match7_1_2_1; if(tom_is_fun_sym_Name(tom_match7_1_2_2) ||  false ) { {  String tom_match7_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_2_2);{ {  String name1 = ( String) tom_match7_1_2_2_1; if(tom_is_fun_sym_Type(tom_match7_1_2_3) ||  false ) { {  TomType fullEltType = ( TomType) tom_match7_1_2_3; {  TomType tom_match7_1_2_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_2_3); {  TomType tom_match7_1_2_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_2_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_2_3_1) ||  false ) { {  String tom_match7_1_2_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_2_3_1);{ {  String type1 = ( String) tom_match7_1_2_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_2_3_2) ||  false ) { {  TomType tlType1 = ( TomType) tom_match7_1_2_3_2;{ if(tom_is_fun_sym_Variable(tom_match7_1_3) ||  false ) { {  OptionList tom_match7_1_3_1 = ( OptionList) tom_get_slot_Variable_option(tom_match7_1_3); {  TomName tom_match7_1_3_2 = ( TomName) tom_get_slot_Variable_astName(tom_match7_1_3); {  TomType tom_match7_1_3_3 = ( TomType) tom_get_slot_Variable_astType(tom_match7_1_3);{ {  OptionList option2 = ( OptionList) tom_match7_1_3_1; if(tom_is_fun_sym_Name(tom_match7_1_3_2) ||  false ) { {  String tom_match7_1_3_2_1 = ( String) tom_get_slot_Name_string(tom_match7_1_3_2);{ {  String name2 = ( String) tom_match7_1_3_2_1; if(tom_is_fun_sym_Type(tom_match7_1_3_3) ||  false ) { {  TomType fullArrayType = ( TomType) tom_match7_1_3_3; {  TomType tom_match7_1_3_3_1 = ( TomType) tom_get_slot_Type_tomType(tom_match7_1_3_3); {  TomType tom_match7_1_3_3_2 = ( TomType) tom_get_slot_Type_tlType(tom_match7_1_3_3);{ if(tom_is_fun_sym_ASTTomType(tom_match7_1_3_3_1) ||  false ) { {  String tom_match7_1_3_3_1_1 = ( String) tom_get_slot_ASTTomType_string(tom_match7_1_3_3_1);{ {  String type2 = ( String) tom_match7_1_3_3_1_1; if(tom_is_fun_sym_TLType(tom_match7_1_3_3_2) ||  false ) { {  TomType tlType2 = ( TomType) tom_match7_1_3_3_2;{ if(tom_is_fun_sym_TL(tom_match7_1_4) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_4;{




 
        buildMakeAddArray(deep, opname, name1, name2, tlType1, tlType2, fullEltType, fullArrayType, tlCode);
        return;
      }} }}} }}}} }}}}} }}}} }}}}}} }}} }}}} }}}}} }}}} }}}}}} }}}} }}}}}} }}_match7_pattern20: { if(tom_is_fun_sym_MakeDecl(tom_match7_1) ||  false ) { {  TomName tom_match7_1_1 = ( TomName) tom_get_slot_MakeDecl_astName(tom_match7_1); {  TomType tom_match7_1_2 = ( TomType) tom_get_slot_MakeDecl_astType(tom_match7_1); {  TomList tom_match7_1_3 = ( TomList) tom_get_slot_MakeDecl_args(tom_match7_1); {  TargetLanguage tom_match7_1_4 = ( TargetLanguage) tom_get_slot_MakeDecl_tlCode(tom_match7_1);{ if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) { {  String tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1);{ {  String opname = ( String) tom_match7_1_1_1; {  TomType returnType = ( TomType) tom_match7_1_2; {  TomList argList = ( TomList) tom_match7_1_3; if(tom_is_fun_sym_TL(tom_match7_1_4) ||  false ) { {  TargetLanguage tlCode = ( TargetLanguage) tom_match7_1_4;{

 
        generateTargetLanguage(deep, genDeclMake(opname, returnType, argList, tlCode));
        return;
      }} }}}}}} }}}}}} }}_match7_pattern21: { if(tom_is_fun_sym_TypeTermDecl(tom_match7_1) ||  false ) { {  TomList tom_match7_1_2 = ( TomList) tom_get_slot_TypeTermDecl_keywordList(tom_match7_1);{ {  TomList declList = ( TomList) tom_match7_1_2;

 
        buildTypeTermDecl(deep, declList);
        return;
      }}} }}_match7_pattern22: { if(tom_is_fun_sym_TypeListDecl(tom_match7_1) ||  false ) { {  TomList tom_match7_1_2 = ( TomList) tom_get_slot_TypeListDecl_keywordList(tom_match7_1);{ {  TomList declList = ( TomList) tom_match7_1_2;

  
        buildTypeListDecl(deep, declList);
        return;
      }}} }}_match7_pattern23: { if(tom_is_fun_sym_TypeArrayDecl(tom_match7_1) ||  false ) { {  TomList tom_match7_1_2 = ( TomList) tom_get_slot_TypeArrayDecl_keywordList(tom_match7_1);{ {  TomList declList = ( TomList) tom_match7_1_2;

  
        buildTypeArrayDecl(deep, declList);
        return;
      }}} }}_match7_pattern24: { {  Declaration t = ( Declaration) tom_match7_1;

 
        System.out.println("Cannot generate code for declaration: " + t);
        throw new TomRuntimeException(new Throwable("Cannot generate code for declaration: " + t));
      }}}}
 
  }
	
	public void generateListInclude(int deep, TomList subject) throws IOException {
 		output.setSingleLine();
		generateList(deep, subject);
		output.unsetSingleLine();
	}

  public void generateList(int deep, TomList subject)
    throws IOException {
    while(!subject.isEmpty()) {
      generate(deep,subject.getHead());
      subject = subject.getTail();
    }
    // if(subject.isEmpty()) {
//       return;
//     }

//     TomTerm t = subject.getHead();
//     TomList l = subject.getTail(); 
//     generate(deep,t);
//     generateList(deep,l);
  }
  
  public void generateOptionList(int deep, OptionList subject)
    throws IOException {
    while(!subject.isEmpty()) {
      generateOption(deep,subject.getHead());
      subject = subject.getTail();
    }

    // if(subject.isEmpty()) {
//       return;
//     }

//     Option t = subject.getHead();
//     OptionList l = subject.getTail(); 
//     generateOption(out,deep,t);
//     generateOptionList(out,deep,l);
  }

  public void generateSlotList(int deep, SlotList slotList)
    throws IOException {
    while ( !slotList.isEmpty() ) {
      generateDeclaration(deep, slotList.getHead().getSlotDecl());
      slotList = slotList.getTail();
    }
  }
  
    // ------------------------------------------------------------
  protected abstract TargetLanguage genDecl(String returnType,
                                            String declName,
                                            String suffix,
                                            String args[],
                                            TargetLanguage tlCode);
  
  protected abstract TargetLanguage genDeclMake(String opname, TomType returnType, 
                                            TomList argList, TargetLanguage tlCode);
  
  protected abstract TargetLanguage genDeclList(String name, TomType listType, TomType eltType);

  protected abstract TargetLanguage genDeclArray(String name, TomType listType, TomType eltType);
 
  protected abstract void buildTerm(int deep, String name, TomList argList) throws IOException;
  protected abstract void buildList(int deep, String name, TomList argList) throws IOException;
  protected abstract void buildArray(int deep,String name, TomList argList) throws IOException;
  protected abstract void buildFunctionCall(int deep, String name, TomList argList)  throws IOException;

  protected void buildCompiledMatch(int deep, TomList instructionList, OptionList list) throws IOException {
    boolean generated = hasGeneratedMatch(list);
    boolean defaultPattern = hasDefaultCase(list);
    Option orgTrack = null;
    if(debugMode && !generated) {
      orgTrack = findOriginTracking(list);
      debugKey = orgTrack.getFileName().getString() + orgTrack.getLine();
      output.writeln("jtom.debug.TomDebugger.debugger.enteringStructure(\""+debugKey+"\");");
    }
    generateList(deep+1,instructionList);
    if(debugMode && !generated && !defaultPattern) {
      output.writeln("jtom.debug.TomDebugger.debugger.leavingStructure(\""+debugKey+"\");");
    }
  }
	
  protected abstract void buildDeclaration(int deep, TomTerm var, String type, TomType tlType) throws IOException;
  protected abstract void buildDeclarationStar(int deep, TomTerm var, TomName name, String type, TomType tlType) throws IOException;
  protected abstract void buildFunctionBegin(int deep, String tomName, TomList varList) throws IOException; 
  protected abstract void buildFunctionEnd(int deep) throws IOException;
  protected abstract void buildExpNot(int deep, Expression exp) throws IOException;
  
  protected void buildExpAnd(int deep, Expression exp1, Expression exp2) throws IOException {
    generateExpression(deep,exp1);
    output.write(" && ");
    generateExpression(deep,exp2);
  }
  protected void buildExpOr(int deep, Expression exp1, Expression exp2) throws IOException {
    generateExpression(deep,exp1);
    output.write(" || ");
    generateExpression(deep,exp2);
  }

  protected abstract void buildExpTrue(int deep) throws IOException;

  protected abstract void buildExpFalse(int deep) throws IOException;

  protected void buildExpEmptyList(int deep, TomType type1, TomTerm var) throws IOException {
    output.write("tom_is_empty_" + getTomType(type1) + "(");
    generate(deep,var);
    output.write(")");
  }

  protected void buildExpEmptyArray(int deep, TomType type1, TomTerm varIndex, TomTerm varArray) throws IOException {
    generate(deep,varIndex);
    output.write(" >= ");
    output.write("tom_get_size_" + getTomType(type1) + "(");
    generate(deep,varArray);
    output.write(")");
  }

  protected void buildExpEqualFunctionVarAppl(int deep, TomTerm var, TomType type1, String tomName) throws IOException {
    TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
    TomName termNameAST = tomSymbol.getAstName();
    OptionList termOptionList = tomSymbol.getOption();
    
    Declaration isFsymDecl = getIsFsymDecl(termOptionList);
    if(isFsymDecl != null) {
      generateExpression(deep,tom_make_IsFsym(termNameAST,var) );
    } else {
      String s = (String)getFunSymMap.get(type1);
      if(s == null) {
        s = "tom_cmp_fun_sym_" + getTomType(type1) + "(tom_get_fun_sym_" + getTomType(type1) + "(";
        getFunSymMap.put(type1,s);
      }
      output.write(s);
      generate(deep,var);
      output.write(") , " + getSymbolCode(tomSymbol) + ")");
    }
  }

  protected void buildExpEqualFunctionVarVar(int deep, TomType type1, TomTerm var1, TomTerm var2) throws IOException {
    output.write("tom_cmp_fun_sym_" + getTomType(type1) + "(");
    output.write("tom_get_fun_sym_" + getTomType(type1) + "(");
    generate(deep,var1);
    output.write(") , " + var2 + ")");///??????????????????????????????
  }

  protected void buildExpEqualTermVar(int deep, TomType type1, TomTerm var1,TomTerm var2) throws IOException {
    output.write("tom_terms_equal_" + getTomType(type1) + "(");
    generate(deep,var1);
    output.write(", ");
    generate(deep,var2);
    output.write(")");
  }

  protected void buildExpEqualTermVarStar(int deep, TomType type1, TomTerm var1, TomTerm var2) throws IOException {
    output.write("tom_terms_equal_" + getTomType(type1) + "(");
    generate(deep,var1);
    output.write(", ");
    generate(deep,var2);
    output.write(")");
  }

  protected void buildExpIsFsym(int deep, String opname, TomTerm var) throws IOException {
    String s = (String)isFsymMap.get(opname);
    if(s == null) {
      s = "tom_is_fun_sym_" + opname + "(";
      isFsymMap.put(opname,s);
    } 
    output.write(s);
    generate(deep,var);
    output.write(")");
  }

  protected void buildExpGetSubterm(int deep, TomTerm var, TomType type1, int number) throws IOException {
    String s = (String)getSubtermMap.get(type1);
    if(s == null) {
      s = "tom_get_subterm_" + getTomType(type1) + "(";
      getSubtermMap.put(type1,s);
    } 
    output.write(s);
    generate(deep,var);
    output.write(", " + number + ")");
  }

  protected void buildExpGetSlot(int deep, String opname, String slotName, TomTerm var) throws IOException {
    output.write("tom_get_slot_" + opname + "_" + slotName + "(");
    generate(deep,var);
    output.write(")");
  }

  protected void buildExpGetHead(int deep, TomType type1, TomTerm var) throws IOException {
    output.write("tom_get_head_" + getTomType(type1) + "(");
    generate(deep,var);
    output.write(")");
  }
  protected void buildExpGetTail(int deep, TomType type1, TomTerm var) throws IOException {
    output.write("tom_get_tail_" + getTomType(type1) + "(");
    generate(deep,var); 
    output.write(")");
  }

  protected void buildExpGetSize(int deep, TomType type1, TomTerm var) throws IOException {
    output.write("tom_get_size_" + getTomType(type1) + "(");
    generate(deep,var);
    output.write(")");
  }

  protected void buildExpGetElement(int deep, TomType type1, TomTerm varName, TomTerm varIndex) throws IOException {
    output.write("tom_get_element_" + getTomType(type1) + "(");
    generate(deep,varName);
    output.write(",");
    generate(deep,varIndex);
    output.write(")");
  }

  protected void buildExpGetSliceList(int deep, String name, TomTerm varBegin, TomTerm varEnd) throws IOException {
    output.write("tom_get_slice_" + name + "(");
    generate(deep,varBegin);
    output.write(",");
    generate(deep,varEnd);
    output.write(")");
  }

  protected void buildExpGetSliceArray(int deep, String name, TomTerm varArray, TomTerm varBegin, TomTerm expEnd) throws IOException {
    output.write("tom_get_slice_" + name + "(");
    generate(deep,varArray);
    output.write(",");
    generate(deep,varBegin);
    output.write(",");
    generate(deep,expEnd);
    output.write(")");
  }

  protected abstract void buildAssignVar(int deep, TomTerm var, OptionList list, String type, TomType tlType, Expression exp) throws IOException ;
  protected abstract void buildLet(int deep, TomTerm var, OptionList list, String type, TomType tlType, Expression exp, Instruction body) throws IOException ;
  protected abstract void buildAssignMatch(int deep, TomTerm var, String type, TomType tlType, Expression exp) throws IOException ;
  protected abstract void buildNamedBlock(int deep, String blockName, TomList instList) throws IOException ;
  protected abstract void buildUnamedBlock(int deep, TomList instList) throws IOException ;
  protected abstract void buildIfThenElse(int deep, Expression exp, TomList succesList) throws IOException ;
  protected abstract void buildIfThenElseWithFailure(int deep, Expression exp, TomList succesList, TomList failureList) throws IOException ;

  protected void buildDoWhile(int deep, TomList succesList, Expression exp) throws IOException {
    output.writeln(deep,"do {");
    generateList(deep+1,succesList);
    output.write(deep,"} while(");
    generateExpression(deep,exp);
	output.writeln(");");
  }
  

  protected void buildIncrement(int deep, TomTerm var) throws IOException {
    generate(deep,var);
    output.write(" = ");
    generate(deep,var);
    output.writeln(" + 1;");
  }

  
  protected abstract void buildExitAction(int deep, TomNumberList numberList) throws IOException ;
  protected abstract void buildReturn(int deep, TomTerm exp) throws IOException ;
  protected abstract void buildSymbolDecl(int deep, String tomName) throws IOException ;
  protected abstract void buildArraySymbolDecl(int deep, String tomName) throws IOException ;
  protected abstract void buildListSymbolDecl(int deep, String tomName) throws IOException ;

  protected void buildGetFunctionSymbolDecl(int deep, String type, String name,
TomType tlType, TargetLanguage tlCode) throws IOException {
    String args[];
    if(!strictType) {
      TomType argType = getUniversalType();
      if(isIntType(type)) {
        argType = getIntType();
      } else if(isDoubleType(type)) {
        argType = getDoubleType();
      }
      args = new String[] { getTLType(argType), name };
    } else {
      args = new String[] { getTLCode(tlType), name };
    }
    
    TomType returnType = getUniversalType();
    if(isIntType(type)) {
      returnType = getIntType();
    } else if(isDoubleType(type)) {
      returnType = getDoubleType();
    }
    generateTargetLanguage(deep,
                           genDecl(getTLType(returnType),
                                   "tom_get_fun_sym", type,args,tlCode));
  }


  protected abstract void buildGetSubtermDecl(int deep, String name1, String name2, String type1,
TomType tlType1, TomType tlType2, TargetLanguage tlCode) throws IOException ;

  protected void buildIsFsymDecl(int deep, String tomName, String name1,
TomType tlType, TargetLanguage tlCode) throws IOException {
    TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
    String opname = tomSymbol.getAstName().getString();
    
    TomType returnType = getBoolType();
    String argType;
    if(strictType) {
      argType = getTLCode(tlType);
    } else {
      argType = getTLType(getUniversalType());
    }
    
    generateTargetLanguage(deep, genDecl(getTLType(returnType),
                                         "tom_is_fun_sym", opname,
                                         new String[] { argType, name1 },
                                         tlCode));
  }

  protected void buildGetSlotDecl(int deep, String tomName, String name1,
TomType tlType, TargetLanguage tlCode, TomName slotName) throws IOException {
    TomSymbol tomSymbol = symbolTable().getSymbol(tomName);
    String opname = tomSymbol.getAstName().getString();
    TomTypeList typesList = tomSymbol.getTypesToType().getDomain();
    
    int slotIndex = getSlotIndex(tomSymbol.getSlotList(),slotName);
    TomTypeList l = typesList;
    for(int index = 0; !l.isEmpty() && index<slotIndex ; index++) {
      l = l.getTail();
    }
    TomType returnType = l.getHead();
    
    String argType;
    if(strictType) {
      argType = getTLCode(tlType);
    } else {
      argType = getTLType(getUniversalType());
    }
    generateTargetLanguage(deep, genDecl(getTLType(returnType),
                                             "tom_get_slot", opname  + "_" + slotName.getString(),
                                             new String[] { argType, name1 },
                                             tlCode));
  }

  protected void  buildCompareFunctionSymbolDecl(int deep, String name1,
String name2, String type1, String type2, TargetLanguage tlCode) throws IOException {
    TomType argType1 = getUniversalType();
    if(isIntType(type1)) {
      argType1 = getIntType();
    } else if(isDoubleType(type2)) {
      argType1 = getDoubleType();
    }
    TomType argType2 = getUniversalType();
    if(isIntType(type2)) {
      argType2 = getIntType();
    } else if(isDoubleType(type2)) {
      argType2 = getDoubleType();
    }
    
    generateTargetLanguage(deep, genDecl(getTLType(getBoolType()), "tom_cmp_fun_sym", type1,
                                         new String[] {
                                           getTLType(argType1), name1,
                                           getTLType(argType2), name2
                                         },
                                         tlCode));
  }

  protected void buildTermsEqualDecl(int deep, String name1, String name2,
String type1, String type2, TargetLanguage tlCode) throws IOException {
    TomType argType1 = getUniversalType();
    if(isIntType(type1)) {
      argType1 = getIntType();
    } else if(isDoubleType(type2)) {
      argType1 = getDoubleType();
    }
    TomType argType2 = getUniversalType();
    if(isIntType(type2)) {
      argType2 = getIntType();
    } else if(isDoubleType(type2)) {
      argType2 = getDoubleType();
    }
    
    generateTargetLanguage(deep, genDecl(getTLType(getBoolType()), "tom_terms_equal", type1,
                                             new String[] {
                                               getTLType(argType1), name1,
                                               getTLType(argType2), name2
                                             },
                                             tlCode));
  }

  protected void buildGetHeadDecl(int deep, String name1, String type, TomType tlType,TargetLanguage tlCode) 
    throws IOException {
    String returnType,argType;

    /*
     * type is the type of the list-variable, not the type of the head
     */
    if(strictType) {
      //returnType = getTLCode(tlType);
      argType = getTLCode(tlType);
    } else {
      //returnType = getTLType(getUniversalType());
      argType = getTLType(getUniversalType());
    }
    returnType = getTLType(getUniversalType());
    generateTargetLanguage(deep,
                           genDecl(returnType, "tom_get_head", type,
                                   new String[] { argType, name1 },
                                   tlCode));
  }

  protected void buildGetTailDecl(int deep, String name1, String type, TomType tlType, TargetLanguage tlCode) 
    throws IOException {
    String returnType, argType;
    if(strictType) {
      returnType = getTLCode(tlType);
      argType = getTLCode(tlType);
    } else {
      returnType = getTLType(getUniversalType());
      argType = getTLType(getUniversalType());
    }
    
    generateTargetLanguage(deep,
                           genDecl(returnType, "tom_get_tail", type,
                                   new String[] { argType, name1 },
                                   tlCode));
  }

  protected void buildIsEmptyDecl(int deep, String name1, String type,
TomType tlType, TargetLanguage tlCode) throws IOException {
    String argType;
    if(strictType) {
      argType = getTLCode(tlType);
    } else {
      argType = getTLType(getUniversalType());
    }
    
    generateTargetLanguage(deep,
                           genDecl(getTLType(getBoolType()),
                                   "tom_is_empty", type,
                                   new String[] { argType, name1 },
                                   tlCode));
  }

  protected void buildMakeEmptyList(int deep, String opname, TargetLanguage tlCode) throws IOException {
    String returnType = getTLType(getUniversalType());
    generateTargetLanguage(deep,
                           genDecl(returnType,
                                   "tom_make_empty", opname,
                                   new String[] { },
                                   tlCode));
  }

  protected void buildMakeAddList(int deep, String opname, String name1,
String name2, TomType tlType1, TomType tlType2, TomType fullEltType,
TomType fullListType, TargetLanguage tlCode) throws IOException {
    String returnType, argListType,argEltType;
    if(strictType) {
      argEltType = getTLCode(tlType1);
      argListType = getTLCode(tlType2);
      returnType = argListType;
    } else {
      argEltType  = getTLType(getUniversalType());
      argListType = getTLType(getUniversalType());
      returnType  = argListType;
    }
    
    generateTargetLanguage(deep, genDecl(returnType,
                                             "tom_make_insert", opname,
                                             new String[] {
                                               argEltType, name1,
                                               argListType, name2
                                             },
                                             tlCode));
    
    generateTargetLanguage(deep, genDeclList(opname, fullListType,fullEltType));
  }

  protected void buildGetElementDecl(int deep, String name1, String name2,
String type1, TomType tlType1, TargetLanguage tlCode) throws IOException {
    String returnType, argType;
    if(strictType) {
      returnType = getTLType(getUniversalType());
      argType = getTLCode(tlType1);
    } else {
      returnType = getTLType(getUniversalType());
      argType = getTLType(getUniversalType());
    }
    
    generateTargetLanguage(deep, genDecl(returnType,
                                         "tom_get_element", type1,
                                         new String[] {
                                           argType, name1,
                                           getTLType(getIntType()), name2
                                         },
                                         tlCode));
  }

  protected void buildGetSizeDecl(int deep, String name1, String type,
TomType tlType, TargetLanguage tlCode) throws IOException {
    String argType;
    if(strictType) {
      argType = getTLCode(tlType);
    } else {
      argType = getTLType(getUniversalType());
    }
    
    generateTargetLanguage(deep,
                           genDecl(getTLType(getIntType()),
                                   "tom_get_size", type,
                                   new String[] { argType, name1 },
                                   tlCode));
  }

  protected void buildMakeEmptyArray(int deep, String opname, String name1, TargetLanguage tlCode) throws IOException {
    generateTargetLanguage(deep, genDecl(getTLType(getUniversalType()), "tom_make_empty", opname,
                                             new String[] {
                                               getTLType(getIntType()), name1,
                                             },
                                             tlCode));
  }

  protected void buildMakeAddArray(int deep, String opname, String name1, String name2, TomType tlType1,
TomType tlType2, TomType fullEltType, TomType fullArrayType, TargetLanguage tlCode) throws IOException {
    String returnType, argListType,argEltType;
    if(strictType) {
      argEltType  = getTLCode(tlType1);
      argListType = getTLCode(tlType2);
      returnType  = argListType;
      
    } else {
      argEltType  = getTLType(getUniversalType());
      argListType = getTLType(getUniversalType());
      returnType  = argListType;
    }
    
    generateTargetLanguage(deep,
                           genDecl(argListType,
                                   "tom_make_append", opname,
                                   new String[] {
                                     argEltType, name1,
                                     argListType, name2
                                   },
                                   tlCode));
    generateTargetLanguage(deep, genDeclArray(opname, fullArrayType, fullEltType));
  }

  protected void buildTypeTermDecl(int deep, TomList declList) throws IOException {
    generateDeclarationFromList(deep, declList);
  }

  protected void buildTypeListDecl(int deep, TomList declList) throws IOException {
    generateDeclarationFromList(deep, declList);
  }

  protected void buildTypeArrayDecl(int deep, TomList declList) throws IOException {
    generateDeclarationFromList(deep, declList);
  }
  
  protected final void generateDeclarationFromList(int deep, TomList declList) throws IOException {
    TomTerm term;
    while(!declList.isEmpty()) {
      term = declList.getHead();
       {  TomTerm tom_match8_1 = ( TomTerm) term;{_match8_pattern1: { if(tom_is_fun_sym_DeclarationToTomTerm(tom_match8_1) ||  false ) { {  Declaration tom_match8_1_1 = ( Declaration) tom_get_slot_DeclarationToTomTerm_astDeclaration(tom_match8_1);{ {  Declaration declaration = ( Declaration) tom_match8_1_1;
 generateDeclaration(deep, declaration);}}} }}}}
 
      declList = declList.getTail();
    }
  }
  
} // class TomAbstractGenerator
