/* Generated by TOM (version 20050422 (src)): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2005, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom.backend;

import java.io.IOException;

import jtom.TomBase;
import jtom.adt.tomsignature.types.*;
import jtom.exception.TomRuntimeException;
import jtom.tools.OutputCode;
import jtom.tools.SymbolTable;
import tom.platform.OptionManager;
 
public abstract class TomAbstractGenerator extends TomBase {
  
  protected OutputCode output;
  protected OptionManager optionManager;
  protected SymbolTable symbolTable;

  public TomAbstractGenerator(OutputCode output, OptionManager optionManager,
                              SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
    this.optionManager = optionManager;
    this.output = output;
  }
  
  protected SymbolTable getSymbolTable() {
    return symbolTable;
  }
  
  protected TomSymbol getSymbolFromName(String tomName) {
    return getSymbolFromName(tomName, symbolTable);
  }

  protected TomSymbol getSymbolFromType(TomType tomType) {
    return getSymbolFromType(tomType, symbolTable);
  }

  protected TomType getTermType(TomTerm t) {
    return  getTermType(t, symbolTable);
  }

  protected TomType getUniversalType() {
    return symbolTable.getUniversalType();
  }
// ------------------------------------------------------------
  /* Generated by TOM (version 20050422 (src)): Do not edit this file *//* Generated by TOM (version 20050422 (src)): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 20050422 (src)): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 20050422 (src)): Do not edit this file *//*  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 20050422 (src)): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 20050422 (src)): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 20050422 (src)): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     
// ------------------------------------------------------------

    /*
     * Generate the goal language     */
 
  protected void generate(int deep, TomTerm subject)throws IOException {
     { jtom.adt.tomsignature.types.TomTerm tom_match1_1=(( jtom.adt.tomsignature.types.TomTerm)subject); if(tom_is_fun_sym_Tom(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match1_1_tomList=tom_get_slot_Tom_tomList(tom_match1_1); { jtom.adt.tomsignature.types.TomList l=tom_match1_1_tomList;


        generateList(deep,l);
        return;
      }} } if(tom_is_fun_sym_TomInclude(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match1_1_tomList=tom_get_slot_TomInclude_tomList(tom_match1_1); { jtom.adt.tomsignature.types.TomList l=tom_match1_1_tomList;


        generateListInclude(deep,l);
        return;
      }} } if(tom_is_fun_sym_Ref(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match1_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match1_1); if(tom_is_fun_sym_VariableStar(tom_match1_1_tomTerm) || tom_is_fun_sym_Variable(tom_match1_1_tomTerm) ||  false ) { { jtom.adt.tomsignature.types.TomTerm term=tom_match1_1_tomTerm;


        buildRef(deep, term);
        return;
      } }} } if(tom_is_fun_sym_Ref(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match1_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match1_1); { jtom.adt.tomsignature.types.TomTerm term=tom_match1_1_tomTerm;


        generate(deep, term);
        return;
      }} } if(tom_is_fun_sym_BuildVariable(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_BuildVariable_astName(tom_match1_1); if(tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  name=tom_match1_1_astName_string;


        output.write(name);
        return;
      }} }} } if(tom_is_fun_sym_BuildVariable(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_BuildVariable_astName(tom_match1_1); if(tom_is_fun_sym_PositionName(tom_match1_1_astName) ||  false ) { { jtom.adt.tomsignature.types.TomNumberList tom_match1_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match1_1_astName); { jtom.adt.tomsignature.types.TomNumberList l=tom_match1_1_astName_numberList;


        output.write("tom" + numberListToIdentifier(l));
        return;
      }} }} } if(tom_is_fun_sym_BuildTerm(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_BuildTerm_astName(tom_match1_1); { jtom.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_BuildTerm_args(tom_match1_1); if(tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  name=tom_match1_1_astName_string; { jtom.adt.tomsignature.types.TomList argList=tom_match1_1_args;


        buildTerm(deep, name, argList);
        return;
      }}} }}} } if(tom_is_fun_sym_BuildAppendArray(tom_match1_1) || tom_is_fun_sym_BuildConsArray(tom_match1_1) || tom_is_fun_sym_BuildAppendList(tom_match1_1) || tom_is_fun_sym_BuildConsList(tom_match1_1) || tom_is_fun_sym_BuildEmptyArray(tom_match1_1) || tom_is_fun_sym_BuildEmptyList(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm l=tom_match1_1;


        buildListOrArray(deep, l);
        return;
      } } if(tom_is_fun_sym_FunctionCall(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_FunctionCall_astName(tom_match1_1); { jtom.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_FunctionCall_args(tom_match1_1); if(tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  name=tom_match1_1_astName_string; { jtom.adt.tomsignature.types.TomList argList=tom_match1_1_args;


        buildFunctionCall(deep,name, argList);
        return;
      }}} }}} } if(tom_is_fun_sym_Composite(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_Composite_args(tom_match1_1); { jtom.adt.tomsignature.types.TomList argList=tom_match1_1_args;


        generateList(deep,argList);
        return;
      }} } if(tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); if(tom_is_fun_sym_PositionName(tom_match1_1_astName) ||  false ) { { jtom.adt.tomsignature.types.TomNumberList tom_match1_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match1_1_astName); { jtom.adt.tomsignature.types.TomNumberList l=tom_match1_1_astName_numberList;


          /*
           * sans type: re-definition lorsque %variable est utilise
           * avec type: probleme en cas de filtrage dynamique
           */
        output.write("tom" + numberListToIdentifier(l));
        return;
      }} }} } if(tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); if(tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  name=tom_match1_1_astName_string;


        output.write(name);
        return;
      }} }} } if(tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_VariableStar_astName(tom_match1_1); if(tom_is_fun_sym_PositionName(tom_match1_1_astName) ||  false ) { { jtom.adt.tomsignature.types.TomNumberList tom_match1_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match1_1_astName); { jtom.adt.tomsignature.types.TomNumberList l=tom_match1_1_astName_numberList;


        output.write("tom" + numberListToIdentifier(l));
        return;  
      }} }} } if(tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_VariableStar_astName(tom_match1_1); if(tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  name=tom_match1_1_astName_string;


        output.write(name);
        return;
      }} }} } if(tom_is_fun_sym_TargetLanguageToTomTerm(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tom_match1_1_tl=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match1_1); { jtom.adt.tomsignature.types.TargetLanguage t=tom_match1_1_tl;


        generateTargetLanguage(deep,t);
        return;
      }} } if(tom_is_fun_sym_DeclarationToTomTerm(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.Declaration tom_match1_1_astDeclaration=tom_get_slot_DeclarationToTomTerm_astDeclaration(tom_match1_1); { jtom.adt.tomsignature.types.Declaration t=tom_match1_1_astDeclaration;


        generateDeclaration(deep,t);
        return;
      }} } if(tom_is_fun_sym_ExpressionToTomTerm(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match1_1_astExpression=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match1_1); { jtom.adt.tomsignature.types.Expression t=tom_match1_1_astExpression;


        generateExpression(deep,t);
        return;
      }} } if(tom_is_fun_sym_InstructionToTomTerm(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match1_1_astInstruction=tom_get_slot_InstructionToTomTerm_astInstruction(tom_match1_1); { jtom.adt.tomsignature.types.Instruction t=tom_match1_1_astInstruction;


        generateInstruction(deep,t);
        return;
      }} } { jtom.adt.tomsignature.types.TomTerm t=tom_match1_1;


        System.out.println("Cannot generate code for: " + t);
        throw new TomRuntimeException("Cannot generate code for: " + t);
      }}

  }

  public void generateExpression(int deep, Expression subject) throws IOException {
     { jtom.adt.tomsignature.types.Expression tom_match2_1=(( jtom.adt.tomsignature.types.Expression)subject); if(tom_is_fun_sym_Negation(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match2_1_arg=tom_get_slot_Negation_arg(tom_match2_1); { jtom.adt.tomsignature.types.Expression exp=tom_match2_1_arg;

        buildExpNegation(deep, exp);
        return;
      }} } if(tom_is_fun_sym_And(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_And_arg1(tom_match2_1); { jtom.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_And_arg2(tom_match2_1); { jtom.adt.tomsignature.types.Expression exp1=tom_match2_1_arg1; { jtom.adt.tomsignature.types.Expression exp2=tom_match2_1_arg2;


        buildExpAnd(deep, exp1, exp2);
        return;
      }}}} } if(tom_is_fun_sym_Or(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_Or_arg1(tom_match2_1); { jtom.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_Or_arg2(tom_match2_1); { jtom.adt.tomsignature.types.Expression exp1=tom_match2_1_arg1; { jtom.adt.tomsignature.types.Expression exp2=tom_match2_1_arg2;


        buildExpOr(deep, exp1, exp2);
        return;
      }}}} } if(tom_is_fun_sym_GreaterThan(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_GreaterThan_arg1(tom_match2_1); { jtom.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_GreaterThan_arg2(tom_match2_1); { jtom.adt.tomsignature.types.Expression exp1=tom_match2_1_arg1; { jtom.adt.tomsignature.types.Expression exp2=tom_match2_1_arg2;


        buildExpGreaterThan(deep, exp1, exp2);
        return;
      }}}} } if(tom_is_fun_sym_TrueTL(tom_match2_1) ||  false ) {


        buildExpTrue(deep);
        return;
       } if(tom_is_fun_sym_FalseTL(tom_match2_1) ||  false ) {


        buildExpFalse(deep);
        return;
       } if(tom_is_fun_sym_IsEmptyList(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_IsEmptyList_opname(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsEmptyList_variable(tom_match2_1); { jtom.adt.tomsignature.types.TomName opNameAST=tom_match2_1_opname; { jtom.adt.tomsignature.types.TomTerm expList=tom_match2_1_variable;


        buildExpIsEmptyList(deep, opNameAST, getTermType(expList), expList);
        return;
      }}}} } if(tom_is_fun_sym_IsEmptyArray(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsEmptyArray_variable(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_index=tom_get_slot_IsEmptyArray_index(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm expArray=tom_match2_1_variable; { jtom.adt.tomsignature.types.TomTerm expIndex=tom_match2_1_index;


        buildExpIsEmptyArray(deep, getTermType(expArray), expIndex, expArray);
        return;
      }}}} } if(tom_is_fun_sym_EqualFunctionSymbol(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match2_1_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match2_1); { jtom.adt.tomsignature.types.TomType type=tom_match2_1_astType; { jtom.adt.tomsignature.types.TomTerm exp=tom_match2_1_exp1; if(tom_is_fun_sym_RecordAppl(tom_match2_1_exp2) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_exp2_nameList=tom_get_slot_RecordAppl_nameList(tom_match2_1_exp2); if(tom_is_fun_sym_concTomName(tom_match2_1_exp2_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_exp2_nameList_list1=tom_match2_1_exp2_nameList; if(!(tom_is_empty_NameList(tom_match2_1_exp2_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match2_1_exp2_nameList_1=tom_get_head_NameList(tom_match2_1_exp2_nameList_list1);tom_match2_1_exp2_nameList_list1=tom_get_tail_NameList(tom_match2_1_exp2_nameList_list1); if(tom_is_fun_sym_Name(tom_match2_1_exp2_nameList_1) ||  false ) { { jtom.adt.tomsignature.types.TomName nameAST=tom_match2_1_exp2_nameList_1; { String  tom_match2_1_exp2_nameList_1_string=tom_get_slot_Name_string(tom_match2_1_exp2_nameList_1); { String  opName=tom_match2_1_exp2_nameList_1_string; if(tom_is_empty_NameList(tom_match2_1_exp2_nameList_list1)) {

 
        if(getSymbolTable().isBuiltinType(getTomType(type))) {
          TomSymbol tomSymbol = getSymbolTable().getSymbolFromName(opName);
          if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
            generateExpression(deep,tom_make_IsFsym(nameAST,exp));
          } else {
            generateExpression(deep,tom_make_EqualTerm(type,tom_make_BuildVariable(nameAST,tom_make_emptyTomList()),exp));
          }
        } else {
          generateExpression(deep,tom_make_IsFsym(nameAST,exp));
        }
        return;
       }}}} }} }} }} }}}}}} } if(tom_is_fun_sym_EqualTerm(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match2_1_tomType=tom_get_slot_EqualTerm_tomType(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_kid1=tom_get_slot_EqualTerm_kid1(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_kid2=tom_get_slot_EqualTerm_kid2(tom_match2_1); { jtom.adt.tomsignature.types.TomType type=tom_match2_1_tomType; { jtom.adt.tomsignature.types.TomTerm exp1=tom_match2_1_kid1; { jtom.adt.tomsignature.types.TomTerm exp2=tom_match2_1_kid2;buildExpEqualTerm(deep,type,exp1,exp2)


;
        return;
      }}}}}} } if(tom_is_fun_sym_IsFsym(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_IsFsym_astName(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsFsym_variable(tom_match2_1); if(tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  opname=tom_match2_1_astName_string; { jtom.adt.tomsignature.types.TomTerm exp=tom_match2_1_variable;


        buildExpIsFsym(deep, opname, exp);
        return;
      }}} }}} } if(tom_is_fun_sym_Cast(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match2_1_astType=tom_get_slot_Cast_astType(tom_match2_1); { jtom.adt.tomsignature.types.Expression tom_match2_1_source=tom_get_slot_Cast_source(tom_match2_1); if(tom_is_fun_sym_Type(tom_match2_1_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match2_1_astType_tlType=tom_get_slot_Type_tlType(tom_match2_1_astType); if(tom_is_fun_sym_TLType(tom_match2_1_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match2_1_astType_tlType; { jtom.adt.tomsignature.types.Expression exp=tom_match2_1_source;


        buildExpCast(deep, tlType, exp);
        return;
      }} }} }}} } if(tom_is_fun_sym_GetSlot(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSlot_astName(tom_match2_1); { String  tom_match2_1_slotNameString=tom_get_slot_GetSlot_slotNameString(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetSlot_variable(tom_match2_1); if(tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  opname=tom_match2_1_astName_string; { String  slotName=tom_match2_1_slotNameString; if(tom_is_fun_sym_Variable(tom_match2_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match2_1_variable;buildExpGetSlot(deep,opname,slotName,var)


;
        return;
      } }}}} }}}} } if(tom_is_fun_sym_GetHead(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetHead_opname(tom_match2_1); { jtom.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetHead_codomain(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetHead_variable(tom_match2_1); { jtom.adt.tomsignature.types.TomName opNameAST=tom_match2_1_opname; { jtom.adt.tomsignature.types.TomType codomain=tom_match2_1_codomain; { jtom.adt.tomsignature.types.TomTerm exp=tom_match2_1_variable;buildExpGetHead(deep,opNameAST,getTermType(exp),codomain,exp)


;
        return;
      }}}}}} } if(tom_is_fun_sym_GetTail(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetTail_opname(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetTail_variable(tom_match2_1); { jtom.adt.tomsignature.types.TomName opNameAST=tom_match2_1_opname; { jtom.adt.tomsignature.types.TomTerm exp=tom_match2_1_variable;


        buildExpGetTail(deep, opNameAST, getTermType(exp), exp);
        return;
      }}}} } if(tom_is_fun_sym_AddOne(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_AddOne_variable(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm exp=tom_match2_1_variable;


        buildAddOne(deep, exp);
        return;
      }} } if(tom_is_fun_sym_GetSize(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetSize_variable(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm exp=tom_match2_1_variable;


        buildExpGetSize(deep, getTermType(exp), exp);
        return;
      }} } if(tom_is_fun_sym_GetElement(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetElement_codomain(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_kid1=tom_get_slot_GetElement_kid1(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_kid2=tom_get_slot_GetElement_kid2(tom_match2_1); { jtom.adt.tomsignature.types.TomType codomain=tom_match2_1_codomain; { jtom.adt.tomsignature.types.TomTerm varName=tom_match2_1_kid1; { jtom.adt.tomsignature.types.TomTerm varIndex=tom_match2_1_kid2;


        buildExpGetElement(deep,getTermType(varName),codomain, varName, varIndex);
        return;
      }}}}}} } if(tom_is_fun_sym_GetSliceList(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSliceList_astName(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variableBeginAST=tom_get_slot_GetSliceList_variableBeginAST(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variableEndAST=tom_get_slot_GetSliceList_variableEndAST(tom_match2_1); if(tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  name=tom_match2_1_astName_string; { jtom.adt.tomsignature.types.TomTerm varBegin=tom_match2_1_variableBeginAST; { jtom.adt.tomsignature.types.TomTerm varEnd=tom_match2_1_variableEndAST;


        buildExpGetSliceList(deep, name, varBegin, varEnd);
        return;
      }}}} }}}} } if(tom_is_fun_sym_GetSliceArray(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSliceArray_astName(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_subjectListName=tom_get_slot_GetSliceArray_subjectListName(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variableBeginAST=tom_get_slot_GetSliceArray_variableBeginAST(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm tom_match2_1_variableEndAST=tom_get_slot_GetSliceArray_variableEndAST(tom_match2_1); if(tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  name=tom_match2_1_astName_string; { jtom.adt.tomsignature.types.TomTerm varArray=tom_match2_1_subjectListName; { jtom.adt.tomsignature.types.TomTerm varBegin=tom_match2_1_variableBeginAST; { jtom.adt.tomsignature.types.TomTerm expEnd=tom_match2_1_variableEndAST;


        buildExpGetSliceArray(deep, name, varArray, varBegin, expEnd);
        return;
      }}}}} }}}}} } if(tom_is_fun_sym_TomTermToExpression(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match2_1_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match2_1); { jtom.adt.tomsignature.types.TomTerm t=tom_match2_1_astTerm;


        generate(deep,t);
        return;
      }} } { jtom.adt.tomsignature.types.Expression t=tom_match2_1;


        System.out.println("Cannot generate code for expression: " + t);
        throw new TomRuntimeException("Cannot generate code for expression: " + t);
      }}

  }

  public void generateInstruction(int deep, Instruction subject) throws IOException {
     { jtom.adt.tomsignature.types.Instruction tom_match3_1=(( jtom.adt.tomsignature.types.Instruction)subject); if(tom_is_fun_sym_TargetLanguageToInstruction(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tom_match3_1_tl=tom_get_slot_TargetLanguageToInstruction_tl(tom_match3_1); { jtom.adt.tomsignature.types.TargetLanguage t=tom_match3_1_tl;generateTargetLanguage(deep,t)


;
        return;
      }} } if(tom_is_fun_sym_TomTermToInstruction(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_tom=tom_get_slot_TomTermToInstruction_tom(tom_match3_1); { jtom.adt.tomsignature.types.TomTerm t=tom_match3_1_tom;generate(deep,t)


;
        return;
      }} } if(tom_is_fun_sym_Nop(tom_match3_1) ||  false ) {


        return;
       } if(tom_is_fun_sym_MakeFunctionBegin(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match3_1_astName=tom_get_slot_MakeFunctionBegin_astName(tom_match3_1); { jtom.adt.tomsignature.types.TomTerm tom_match3_1_subjectListAST=tom_get_slot_MakeFunctionBegin_subjectListAST(tom_match3_1); if(tom_is_fun_sym_Name(tom_match3_1_astName) ||  false ) { { String  tom_match3_1_astName_string=tom_get_slot_Name_string(tom_match3_1_astName); { String  tomName=tom_match3_1_astName_string; if(tom_is_fun_sym_SubjectList(tom_match3_1_subjectListAST) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match3_1_subjectListAST_tomList=tom_get_slot_SubjectList_tomList(tom_match3_1_subjectListAST); { jtom.adt.tomsignature.types.TomList varList=tom_match3_1_subjectListAST_tomList;buildFunctionBegin(deep,tomName,varList)


;
        return;
      }} }}} }}} } if(tom_is_fun_sym_MakeFunctionEnd(tom_match3_1) ||  false ) {buildFunctionEnd(deep)


;
        return;
       } if(tom_is_fun_sym_AssignMatchSubject(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_kid1=tom_get_slot_AssignMatchSubject_kid1(tom_match3_1); { jtom.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_AssignMatchSubject_source(tom_match3_1); if(tom_is_fun_sym_Variable(tom_match3_1_kid1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match3_1_kid1; { jtom.adt.tomsignature.types.OptionList tom_match3_1_kid1_option=tom_get_slot_Variable_option(tom_match3_1_kid1); { jtom.adt.tomsignature.types.OptionList option=tom_match3_1_kid1_option; { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_source;buildAssignVar(deep,var,option,exp)


;
        return;
      }}}} }}} } if(tom_is_fun_sym_Assign(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Assign_variable(tom_match3_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match3_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_variable) ||  false ) {


        return;
       }} } if(tom_is_fun_sym_Assign(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Assign_variable(tom_match3_1); { jtom.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Assign_source(tom_match3_1); if(tom_is_fun_sym_VariableStar(tom_match3_1_variable) || tom_is_fun_sym_Variable(tom_match3_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match3_1_variable; { jtom.adt.tomsignature.types.OptionList tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); { jtom.adt.tomsignature.types.OptionList option=tom_match3_1_variable_option; { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_source;buildAssignVar(deep,var,option,exp)


;
        return;
      }}}} }}} } if(tom_is_fun_sym_LetAssign(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_LetAssign_variable(tom_match3_1); { jtom.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_LetAssign_source(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match3_1); if(tom_is_fun_sym_VariableStar(tom_match3_1_variable) || tom_is_fun_sym_Variable(tom_match3_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match3_1_variable; { jtom.adt.tomsignature.types.OptionList tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); { jtom.adt.tomsignature.types.OptionList option=tom_match3_1_variable_option; { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_source; { jtom.adt.tomsignature.types.Instruction body=tom_match3_1_astInstruction;buildLetAssign(deep,var,option,exp,body)


;
        return;
      }}}}} }}}} } if(tom_is_fun_sym_LetAssign(tom_match3_1) || tom_is_fun_sym_LetRef(tom_match3_1) || tom_is_fun_sym_Let(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Let_variable(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match3_1); if(tom_is_fun_sym_UnamedVariableStar(tom_match3_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_variable) ||  false ) { { jtom.adt.tomsignature.types.Instruction body=tom_match3_1_astInstruction;generateInstruction(deep,body)


;
        return;
      } }}} } if(tom_is_fun_sym_Let(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Let_variable(tom_match3_1); { jtom.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Let_source(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match3_1); if(tom_is_fun_sym_VariableStar(tom_match3_1_variable) || tom_is_fun_sym_Variable(tom_match3_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match3_1_variable; { jtom.adt.tomsignature.types.OptionList tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); { jtom.adt.tomsignature.types.TomType tom_match3_1_variable_astType=tom_get_slot_Variable_astType(tom_match3_1_variable); { jtom.adt.tomsignature.types.OptionList list=tom_match3_1_variable_option; if(tom_is_fun_sym_Type(tom_match3_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match3_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_variable_astType); if(tom_is_fun_sym_TLType(tom_match3_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match3_1_variable_astType_tlType; { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_source; { jtom.adt.tomsignature.types.Instruction body=tom_match3_1_astInstruction;buildLet(deep,var,list,tlType,exp,body)


;
        return;
      }}} }} }}}}} }}}} } if(tom_is_fun_sym_LetRef(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_LetRef_variable(tom_match3_1); { jtom.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_LetRef_source(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match3_1); if(tom_is_fun_sym_VariableStar(tom_match3_1_variable) || tom_is_fun_sym_Variable(tom_match3_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomTerm var=tom_match3_1_variable; { jtom.adt.tomsignature.types.OptionList tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); { jtom.adt.tomsignature.types.TomType tom_match3_1_variable_astType=tom_get_slot_Variable_astType(tom_match3_1_variable); { jtom.adt.tomsignature.types.OptionList list=tom_match3_1_variable_option; if(tom_is_fun_sym_Type(tom_match3_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match3_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_variable_astType); if(tom_is_fun_sym_TLType(tom_match3_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match3_1_variable_astType_tlType; { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_source; { jtom.adt.tomsignature.types.Instruction body=tom_match3_1_astInstruction;buildLetRef(deep,var,list,tlType,exp,body)


;
        return;
      }}} }} }}}}} }}}} } if(tom_is_fun_sym_AbstractBlock(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_AbstractBlock_instList(tom_match3_1); { jtom.adt.tomsignature.types.InstructionList instList=tom_match3_1_instList;generateInstructionList(deep,instList)


;
        return;
      }} } if(tom_is_fun_sym_UnamedBlock(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_UnamedBlock_instList(tom_match3_1); { jtom.adt.tomsignature.types.InstructionList instList=tom_match3_1_instList;buildUnamedBlock(deep,instList)


;
        return;
      }} } if(tom_is_fun_sym_NamedBlock(tom_match3_1) ||  false ) { { String  tom_match3_1_blockName=tom_get_slot_NamedBlock_blockName(tom_match3_1); { jtom.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_NamedBlock_instList(tom_match3_1); { String  blockName=tom_match3_1_blockName; { jtom.adt.tomsignature.types.InstructionList instList=tom_match3_1_instList;buildNamedBlock(deep,blockName,instList)


;
        return;
      }}}} } if(tom_is_fun_sym_If(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_condition; { jtom.adt.tomsignature.types.Instruction succesList=tom_match3_1_succesInst; if(tom_is_fun_sym_Nop(tom_match3_1_failureInst) ||  false ) {buildIf(deep,exp,succesList)


;
        return;
       }}}}}} } if(tom_is_fun_sym_If(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_condition; if(tom_is_fun_sym_Nop(tom_match3_1_succesInst) ||  false ) { { jtom.adt.tomsignature.types.Instruction failureList=tom_match3_1_failureInst;buildIf(deep,tom_make_Negation(exp),failureList)


;
        return;
      } }}}}} } if(tom_is_fun_sym_If(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_condition; { jtom.adt.tomsignature.types.Instruction succesList=tom_match3_1_succesInst; { jtom.adt.tomsignature.types.Instruction failureList=tom_match3_1_failureInst;buildIfWithFailure(deep,exp,succesList,failureList)


;
        return;
      }}}}}} } if(tom_is_fun_sym_DoWhile(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match3_1_doInst=tom_get_slot_DoWhile_doInst(tom_match3_1); { jtom.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_DoWhile_condition(tom_match3_1); { jtom.adt.tomsignature.types.Instruction succes=tom_match3_1_doInst; { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_condition;buildDoWhile(deep,succes,exp)


;
        return;
      }}}} } if(tom_is_fun_sym_WhileDo(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_WhileDo_condition(tom_match3_1); { jtom.adt.tomsignature.types.Instruction tom_match3_1_doInst=tom_get_slot_WhileDo_doInst(tom_match3_1); { jtom.adt.tomsignature.types.Expression exp=tom_match3_1_condition; { jtom.adt.tomsignature.types.Instruction succes=tom_match3_1_doInst;buildWhileDo(deep,exp,succes)


;
        return;
      }}}} } if(tom_is_fun_sym_TypedAction(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match3_1); { jtom.adt.tomsignature.types.Instruction inst=tom_match3_1_astInstruction;


        generateInstruction(deep,inst);
        return;
      }} } if(tom_is_fun_sym_Return(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_kid1=tom_get_slot_Return_kid1(tom_match3_1); { jtom.adt.tomsignature.types.TomTerm exp=tom_match3_1_kid1;buildReturn(deep,exp)














;
        return;
      }} } if(tom_is_fun_sym_CompiledMatch(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match3_1_automataInst=tom_get_slot_CompiledMatch_automataInst(tom_match3_1); { jtom.adt.tomsignature.types.OptionList tom_match3_1_option=tom_get_slot_CompiledMatch_option(tom_match3_1); { jtom.adt.tomsignature.types.Instruction instruction=tom_match3_1_automataInst; { jtom.adt.tomsignature.types.OptionList list=tom_match3_1_option;buildCompiledMatch(deep,instruction)


;
        return;
      }}}} } if(tom_is_fun_sym_CompiledPattern(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match3_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match3_1); { jtom.adt.tomsignature.types.Instruction instruction=tom_match3_1_automataInst;buildInstructionSequence(deep,instruction)


;
        return;
      }} } if(tom_is_fun_sym_CheckStamp(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_CheckStamp_variable(tom_match3_1); { jtom.adt.tomsignature.types.TomTerm variable=tom_match3_1_variable;buildCheckStamp(deep,getTermType(variable),variable)


;
        return;
      }} } { jtom.adt.tomsignature.types.Instruction t=tom_match3_1;


        System.out.println("Cannot generate code for instruction: " + t);
        throw new TomRuntimeException("Cannot generate code for instruction: " + t);
      }}

  }
  
  public void generateTargetLanguage(int deep, TargetLanguage subject) throws IOException {
     { jtom.adt.tomsignature.types.TargetLanguage tom_match4_1=(( jtom.adt.tomsignature.types.TargetLanguage)subject); if(tom_is_fun_sym_TL(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_TL_code(tom_match4_1); { jtom.adt.tomsignature.types.Position tom_match4_1_start=tom_get_slot_TL_start(tom_match4_1); { jtom.adt.tomsignature.types.Position tom_match4_1_end=tom_get_slot_TL_end(tom_match4_1); { String  t=tom_match4_1_code; if(tom_is_fun_sym_TextPosition(tom_match4_1_start) ||  false ) { { int  tom_match4_1_start_line=tom_get_slot_TextPosition_line(tom_match4_1_start); { int  startLine=tom_match4_1_start_line; if(tom_is_fun_sym_TextPosition(tom_match4_1_end) ||  false ) { { int  tom_match4_1_end_line=tom_get_slot_TextPosition_line(tom_match4_1_end); { int  endLine=tom_match4_1_end_line;

    // output.write(" ");
        output.write(t, startLine, endLine - startLine);
        return;
      }} }}} }}}}} } if(tom_is_fun_sym_ITL(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_ITL_code(tom_match4_1); { String  t=tom_match4_1_code;


        output.write(t);
        return;
      }} } if(tom_is_fun_sym_Comment(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_Comment_code(tom_match4_1); { String  t=tom_match4_1_code;buildComment(deep,t)


;
        return;
      }} } { jtom.adt.tomsignature.types.TargetLanguage t=tom_match4_1;


        System.out.println("Cannot generate code for TL: " + t);
        throw new TomRuntimeException("Cannot generate code for TL: " + t);
      }}

  }

  public void generateOption(int deep, Option subject) throws IOException {
     { jtom.adt.tomsignature.types.Option tom_match5_1=(( jtom.adt.tomsignature.types.Option)subject); if(tom_is_fun_sym_DeclarationToOption(tom_match5_1) ||  false ) { { jtom.adt.tomsignature.types.Declaration tom_match5_1_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match5_1); { jtom.adt.tomsignature.types.Declaration decl=tom_match5_1_astDeclaration;generateDeclaration(deep,decl)

;
        return;
      }} } if(tom_is_fun_sym_OriginTracking(tom_match5_1) ||  false ) {
 return;  } if(tom_is_fun_sym_DefinedSymbol(tom_match5_1) ||  false ) {
 return;  } if(tom_is_fun_sym_Constructor(tom_match5_1) ||  false ) {
 return;  } { jtom.adt.tomsignature.types.Option t=tom_match5_1;


        System.out.println("Cannot generate code for option: " + t);
        throw new TomRuntimeException("Cannot generate code for option: " + t);
      }}

  }
  
  public void generateDeclaration(int deep, Declaration subject) throws IOException {
     { jtom.adt.tomsignature.types.Declaration tom_match6_1=(( jtom.adt.tomsignature.types.Declaration)subject); if(tom_is_fun_sym_EmptyDeclaration(tom_match6_1) ||  false ) {

        return;
       } if(tom_is_fun_sym_ListSymbolDecl(tom_match6_1) || tom_is_fun_sym_ArraySymbolDecl(tom_match6_1) || tom_is_fun_sym_SymbolDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_SymbolDecl_astName(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tomName=tom_match6_1_astName_string;buildSymbolDecl(deep,tomName)


;
        return ;
      }} }} } if(tom_is_fun_sym_CheckStampDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_CheckStampDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_CheckStampDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  name=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  type=tom_match6_1_variable_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_variable_astType_tlType; { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildCheckStampDecl(deep,type,name,tlType,tlCode)





;
        return;
      }} }}} }}} }}} }}} }}} } if(tom_is_fun_sym_SetStampDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_SetStampDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_SetStampDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  name=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  type=tom_match6_1_variable_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_variable_astType_tlType; { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildSetStampDecl(deep,type,name,tlType,tlCode)




;
        return;
      }} }}} }}} }}} }}} }}} } if(tom_is_fun_sym_GetImplementationDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetImplementationDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_GetImplementationDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  name=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  type=tom_match6_1_variable_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_variable_astType_tlType; { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildGetImplementationDecl(deep,type,name,tlType,tlCode)




;
        return;
      }} }}} }}} }}} }}} }}} } if(tom_is_fun_sym_IsFsymDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_IsFsymDecl_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_IsFsymDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_IsFsymDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tomName=tom_match6_1_astName_string; if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  name=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_variable_astType_tlType; if(tom_is_fun_sym_TL(tom_match6_1_tlCode) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildIsFsymDecl(deep,tomName,name,tlType,tlCode)



;
        return;
      } }} }} }}} }}} }}} }}}} } if(tom_is_fun_sym_GetSlotDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_GetSlotDecl_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomName tom_match6_1_slotName=tom_get_slot_GetSlotDecl_slotName(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetSlotDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_GetSlotDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tomName=tom_match6_1_astName_string; { jtom.adt.tomsignature.types.TomName slotName=tom_match6_1_slotName; if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  name=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_variable_astType_tlType; if(tom_is_fun_sym_TL(tom_match6_1_tlCode) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildGetSlotDecl(deep,tomName,name,tlType,tlCode,slotName)





;
        return;
      } }} }} }}} }}} }}}} }}}}} } if(tom_is_fun_sym_TermsEqualDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match6_1_termArg1=tom_get_slot_TermsEqualDecl_termArg1(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_termArg2=tom_get_slot_TermsEqualDecl_termArg2(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_TermsEqualDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Variable(tom_match6_1_termArg1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_termArg1_astName=tom_get_slot_Variable_astName(tom_match6_1_termArg1); { jtom.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType=tom_get_slot_Variable_astType(tom_match6_1_termArg1); if(tom_is_fun_sym_Name(tom_match6_1_termArg1_astName) ||  false ) { { String  tom_match6_1_termArg1_astName_string=tom_get_slot_Name_string(tom_match6_1_termArg1_astName); { String  name1=tom_match6_1_termArg1_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_termArg1_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_termArg1_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_termArg1_astType_tomType) ||  false ) { { String  tom_match6_1_termArg1_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_termArg1_astType_tomType); { String  type1=tom_match6_1_termArg1_astType_tomType_string; if(tom_is_fun_sym_Variable(tom_match6_1_termArg2) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_termArg2_astName=tom_get_slot_Variable_astName(tom_match6_1_termArg2); { jtom.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType=tom_get_slot_Variable_astType(tom_match6_1_termArg2); if(tom_is_fun_sym_Name(tom_match6_1_termArg2_astName) ||  false ) { { String  tom_match6_1_termArg2_astName_string=tom_get_slot_Name_string(tom_match6_1_termArg2_astName); { String  name2=tom_match6_1_termArg2_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_termArg2_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_termArg2_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_termArg2_astType_tomType) ||  false ) { { String  tom_match6_1_termArg2_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_termArg2_astType_tomType); { String  type2=tom_match6_1_termArg2_astType_tomType_string; { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildTermsEqualDecl(deep,name1,name2,type1,type2,tlCode)




;
        return;
      }}} }} }}} }}} }}} }} }}} }}} }}}} } if(tom_is_fun_sym_GetHeadDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetHeadDecl_opname(tom_match6_1); { jtom.adt.tomsignature.types.TomType tom_match6_1_codomain=tom_get_slot_GetHeadDecl_codomain(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetHeadDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_GetHeadDecl_tlCode(tom_match6_1); { jtom.adt.tomsignature.types.TomName opNameAST=tom_match6_1_opname; if(tom_is_fun_sym_Type(tom_match6_1_codomain) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_codomain_tlType=tom_get_slot_Type_tlType(tom_match6_1_codomain); { jtom.adt.tomsignature.types.TomType codomain=tom_match6_1_codomain_tlType; if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  varName=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  suffix=tom_match6_1_variable_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType domain=tom_match6_1_variable_astType_tlType; if(tom_is_fun_sym_TL(tom_match6_1_tlCode) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildGetHeadDecl(deep,opNameAST,varName,suffix,domain,codomain,tlCode)





;
        return;
      } }} }}} }}} }}} }}} }}} }}}}}} } if(tom_is_fun_sym_GetTailDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetTailDecl_opname(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetTailDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_GetTailDecl_tlCode(tom_match6_1); { jtom.adt.tomsignature.types.TomName opNameAST=tom_match6_1_opname; if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  varName=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  type=tom_match6_1_variable_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_variable_astType_tlType; if(tom_is_fun_sym_TL(tom_match6_1_tlCode) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildGetTailDecl(deep,opNameAST,varName,type,tlType,tlCode)




;
        return;
      } }} }}} }}} }}} }}} }}}}} } if(tom_is_fun_sym_IsEmptyDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_IsEmptyDecl_opname(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_IsEmptyDecl_variable(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_IsEmptyDecl_tlCode(tom_match6_1); { jtom.adt.tomsignature.types.TomName opNameAST=tom_match6_1_opname; if(tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if(tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  varName=tom_match6_1_variable_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  type=tom_match6_1_variable_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_variable_astType_tlType; if(tom_is_fun_sym_TL(tom_match6_1_tlCode) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildIsEmptyDecl(deep,opNameAST,varName,type,tlType,tlCode)




;
        return;
      } }} }}} }}} }}} }}} }}}}} } if(tom_is_fun_sym_MakeEmptyList(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeEmptyList_astName(tom_match6_1); { jtom.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeEmptyList_instr(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  opname=tom_match6_1_astName_string; { jtom.adt.tomsignature.types.Instruction instr=tom_match6_1_instr;


        TomType returnType = getSymbolCodomain(getSymbolFromName(opname));
        genDeclMake("tom_empty_list_" + opname,returnType,tom_empty_list_concTomTerm(),instr);
        return;
      }}} }}} } if(tom_is_fun_sym_MakeAddList(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeAddList_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_varElt=tom_get_slot_MakeAddList_varElt(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_varList=tom_get_slot_MakeAddList_varList(tom_match6_1); { jtom.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeAddList_instr(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  opname=tom_match6_1_astName_string; if(tom_is_fun_sym_Variable(tom_match6_1_varElt) ||  false ) { { jtom.adt.tomsignature.types.TomTerm elt=tom_match6_1_varElt; { jtom.adt.tomsignature.types.TomType tom_match6_1_varElt_astType=tom_get_slot_Variable_astType(tom_match6_1_varElt); if(tom_is_fun_sym_Type(tom_match6_1_varElt_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType fullEltType=tom_match6_1_varElt_astType; { jtom.adt.tomsignature.types.TomType tom_match6_1_varElt_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varElt_astType); if(tom_is_fun_sym_TLType(tom_match6_1_varElt_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType1=tom_match6_1_varElt_astType_tlType; if(tom_is_fun_sym_Variable(tom_match6_1_varList) ||  false ) { { jtom.adt.tomsignature.types.TomTerm list=tom_match6_1_varList; { jtom.adt.tomsignature.types.TomType tom_match6_1_varList_astType=tom_get_slot_Variable_astType(tom_match6_1_varList); if(tom_is_fun_sym_Type(tom_match6_1_varList_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType fullListType=tom_match6_1_varList_astType; { jtom.adt.tomsignature.types.TomType tom_match6_1_varList_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varList_astType); if(tom_is_fun_sym_TLType(tom_match6_1_varList_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType2=tom_match6_1_varList_astType_tlType; { jtom.adt.tomsignature.types.Instruction instr=tom_match6_1_instr;





        TomType returnType = fullListType;
        genDeclMake("tom_cons_list_" + opname,returnType,tom_cons_list_concTomTerm(elt,tom_cons_list_concTomTerm(list,tom_empty_list_concTomTerm())),instr);
        genDeclList(opname,fullListType,fullEltType);
        return;
      }} }}} }}} }} }}} }}} }}} }}}}} } if(tom_is_fun_sym_GetElementDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match6_1_kid1=tom_get_slot_GetElementDecl_kid1(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_kid2=tom_get_slot_GetElementDecl_kid2(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_GetElementDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Variable(tom_match6_1_kid1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_kid1_astName=tom_get_slot_Variable_astName(tom_match6_1_kid1); { jtom.adt.tomsignature.types.TomType tom_match6_1_kid1_astType=tom_get_slot_Variable_astType(tom_match6_1_kid1); if(tom_is_fun_sym_Name(tom_match6_1_kid1_astName) ||  false ) { { String  tom_match6_1_kid1_astName_string=tom_get_slot_Name_string(tom_match6_1_kid1_astName); { String  name1=tom_match6_1_kid1_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_kid1_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_kid1_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_kid1_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_kid1_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_kid1_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_kid1_astType_tomType) ||  false ) { { String  tom_match6_1_kid1_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_kid1_astType_tomType); { String  type1=tom_match6_1_kid1_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_kid1_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType1=tom_match6_1_kid1_astType_tlType; if(tom_is_fun_sym_Variable(tom_match6_1_kid2) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_kid2_astName=tom_get_slot_Variable_astName(tom_match6_1_kid2); if(tom_is_fun_sym_Name(tom_match6_1_kid2_astName) ||  false ) { { String  tom_match6_1_kid2_astName_string=tom_get_slot_Name_string(tom_match6_1_kid2_astName); { String  name2=tom_match6_1_kid2_astName_string; if(tom_is_fun_sym_TL(tom_match6_1_tlCode) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildGetElementDecl(deep,name1,name2,type1,tlType1,tlCode)




;
        return;
      } }}} }} }} }}} }}} }}} }}} }}}} } if(tom_is_fun_sym_GetSizeDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match6_1_kid1=tom_get_slot_GetSizeDecl_kid1(tom_match6_1); { jtom.adt.tomsignature.types.TargetLanguage tom_match6_1_tlCode=tom_get_slot_GetSizeDecl_tlCode(tom_match6_1); if(tom_is_fun_sym_Variable(tom_match6_1_kid1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_kid1_astName=tom_get_slot_Variable_astName(tom_match6_1_kid1); { jtom.adt.tomsignature.types.TomType tom_match6_1_kid1_astType=tom_get_slot_Variable_astType(tom_match6_1_kid1); if(tom_is_fun_sym_Name(tom_match6_1_kid1_astName) ||  false ) { { String  tom_match6_1_kid1_astName_string=tom_get_slot_Name_string(tom_match6_1_kid1_astName); { String  name=tom_match6_1_kid1_astName_string; if(tom_is_fun_sym_Type(tom_match6_1_kid1_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType tom_match6_1_kid1_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_kid1_astType); { jtom.adt.tomsignature.types.TomType tom_match6_1_kid1_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_kid1_astType); if(tom_is_fun_sym_ASTTomType(tom_match6_1_kid1_astType_tomType) ||  false ) { { String  tom_match6_1_kid1_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_kid1_astType_tomType); { String  type=tom_match6_1_kid1_astType_tomType_string; if(tom_is_fun_sym_TLType(tom_match6_1_kid1_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType=tom_match6_1_kid1_astType_tlType; if(tom_is_fun_sym_TL(tom_match6_1_tlCode) ||  false ) { { jtom.adt.tomsignature.types.TargetLanguage tlCode=tom_match6_1_tlCode;buildGetSizeDecl(deep,name,type,tlType,tlCode)



;
        return;
      } }} }}} }}} }}} }}} }}} } if(tom_is_fun_sym_MakeEmptyArray(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeEmptyArray_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_varSize=tom_get_slot_MakeEmptyArray_varSize(tom_match6_1); { jtom.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeEmptyArray_instr(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  opname=tom_match6_1_astName_string; if(tom_is_fun_sym_Variable(tom_match6_1_varSize) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match6_1_varSize_option=tom_get_slot_Variable_option(tom_match6_1_varSize); { jtom.adt.tomsignature.types.TomName tom_match6_1_varSize_astName=tom_get_slot_Variable_astName(tom_match6_1_varSize); { jtom.adt.tomsignature.types.TomType tom_match6_1_varSize_astType=tom_get_slot_Variable_astType(tom_match6_1_varSize); { jtom.adt.tomsignature.types.ConstraintList tom_match6_1_varSize_constraints=tom_get_slot_Variable_constraints(tom_match6_1_varSize); { jtom.adt.tomsignature.types.OptionList option=tom_match6_1_varSize_option; { jtom.adt.tomsignature.types.TomName name=tom_match6_1_varSize_astName; { jtom.adt.tomsignature.types.TomType type=tom_match6_1_varSize_astType; { jtom.adt.tomsignature.types.ConstraintList constraints=tom_match6_1_varSize_constraints; { jtom.adt.tomsignature.types.Instruction instr=tom_match6_1_instr;




        TomType returnType = getSymbolCodomain(getSymbolFromName(opname));
        TomTerm newVar = tom_make_Variable(option,name,getSymbolTable().getIntType(),constraints);
        genDeclMake("tom_empty_array_" + opname,returnType,tom_cons_list_concTomTerm(newVar,tom_empty_list_concTomTerm()),instr);
        return;
      }}}}}}}}} }}} }}}} } if(tom_is_fun_sym_MakeAddArray(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeAddArray_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_varElt=tom_get_slot_MakeAddArray_varElt(tom_match6_1); { jtom.adt.tomsignature.types.TomTerm tom_match6_1_varList=tom_get_slot_MakeAddArray_varList(tom_match6_1); { jtom.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeAddArray_instr(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  opname=tom_match6_1_astName_string; if(tom_is_fun_sym_Variable(tom_match6_1_varElt) ||  false ) { { jtom.adt.tomsignature.types.TomTerm elt=tom_match6_1_varElt; { jtom.adt.tomsignature.types.TomType tom_match6_1_varElt_astType=tom_get_slot_Variable_astType(tom_match6_1_varElt); if(tom_is_fun_sym_Type(tom_match6_1_varElt_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType fullEltType=tom_match6_1_varElt_astType; { jtom.adt.tomsignature.types.TomType tom_match6_1_varElt_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varElt_astType); if(tom_is_fun_sym_TLType(tom_match6_1_varElt_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType1=tom_match6_1_varElt_astType_tlType; if(tom_is_fun_sym_Variable(tom_match6_1_varList) ||  false ) { { jtom.adt.tomsignature.types.TomTerm list=tom_match6_1_varList; { jtom.adt.tomsignature.types.TomType tom_match6_1_varList_astType=tom_get_slot_Variable_astType(tom_match6_1_varList); if(tom_is_fun_sym_Type(tom_match6_1_varList_astType) ||  false ) { { jtom.adt.tomsignature.types.TomType fullArrayType=tom_match6_1_varList_astType; { jtom.adt.tomsignature.types.TomType tom_match6_1_varList_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varList_astType); if(tom_is_fun_sym_TLType(tom_match6_1_varList_astType_tlType) ||  false ) { { jtom.adt.tomsignature.types.TomType tlType2=tom_match6_1_varList_astType_tlType; { jtom.adt.tomsignature.types.Instruction instr=tom_match6_1_instr;





        TomType returnType = fullArrayType;
        genDeclMake("tom_cons_array_" + opname,returnType,tom_cons_list_concTomTerm(elt,tom_cons_list_concTomTerm(list,tom_empty_list_concTomTerm())),instr);
        genDeclArray(opname,fullArrayType,fullEltType);
        return;
      }} }}} }}} }} }}} }}} }}} }}}}} } if(tom_is_fun_sym_MakeDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeDecl_astName(tom_match6_1); { jtom.adt.tomsignature.types.TomType tom_match6_1_astType=tom_get_slot_MakeDecl_astType(tom_match6_1); { jtom.adt.tomsignature.types.TomList tom_match6_1_args=tom_get_slot_MakeDecl_args(tom_match6_1); { jtom.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeDecl_instr(tom_match6_1); if(tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  opname=tom_match6_1_astName_string; { jtom.adt.tomsignature.types.TomType returnType=tom_match6_1_astType; { jtom.adt.tomsignature.types.TomList argList=tom_match6_1_args; { jtom.adt.tomsignature.types.Instruction instr=tom_match6_1_instr;genDeclMake("tom_make_" + opname,returnType,argList,instr)


;
        return;
      }}}}} }}}}} } if(tom_is_fun_sym_TypeTermDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match6_1_keywordList=tom_get_slot_TypeTermDecl_keywordList(tom_match6_1); { jtom.adt.tomsignature.types.TomList declList=tom_match6_1_keywordList;buildTypeTermDecl(deep,declList)


;
        return;
      }} } if(tom_is_fun_sym_TypeListDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match6_1_keywordList=tom_get_slot_TypeListDecl_keywordList(tom_match6_1); { jtom.adt.tomsignature.types.TomList declList=tom_match6_1_keywordList;buildTypeListDecl(deep,declList)


;
        return;
      }} } if(tom_is_fun_sym_TypeArrayDecl(tom_match6_1) ||  false ) { { jtom.adt.tomsignature.types.TomList tom_match6_1_keywordList=tom_get_slot_TypeArrayDecl_keywordList(tom_match6_1); { jtom.adt.tomsignature.types.TomList declList=tom_match6_1_keywordList;buildTypeArrayDecl(deep,declList)


;
        return;
      }} } { jtom.adt.tomsignature.types.Declaration t=tom_match6_1;


        System.out.println("Cannot generate code for declaration: " + t);
        throw new TomRuntimeException("Cannot generate code for declaration: " + t);
      }}

  }
  
  public void generateListInclude(int deep, TomList subject) throws IOException {
    output.setSingleLine();
    generateList(deep, subject);
    output.unsetSingleLine();
  }

  public void generateList(int deep, TomList subject)
    throws IOException {
    while(!subject.isEmpty()) {
      generate(deep,subject.getHead());
      subject = subject.getTail();
    }
  }
  
  public void generateOptionList(int deep, OptionList subject)
    throws IOException {
    while(!subject.isEmpty()) {
      generateOption(deep,subject.getHead());
      subject = subject.getTail();
    }
  }

  public void generateInstructionList(int deep, InstructionList subject)
    throws IOException {
    while(!subject.isEmpty()) {
      generateInstruction(deep,subject.getHead());
      subject = subject.getTail();
    }
  }

  public void generatePairNameDeclList(int deep, PairNameDeclList pairNameDeclList)
    throws IOException {
    while ( !pairNameDeclList.isEmpty() ) {
      generateDeclaration(deep, pairNameDeclList.getHead().getSlotDecl());
      pairNameDeclList = pairNameDeclList.getTail();
    }
  }
  
  
    // ------------------------------------------------------------
  
  protected abstract void genDecl(String returnType,
                                  String declName,
                                  String suffix,
                                  String args[],
                                  TargetLanguage tlCode) throws IOException;
  
  protected abstract void genDeclMake(String funName, TomType returnType, 
                                      TomList argList, Instruction instr) throws IOException;
  
  protected abstract void genDeclList(String name, TomType listType, TomType eltType) throws IOException;

  protected abstract void genDeclArray(String name, TomType listType, TomType eltType) throws IOException;
 
  // ------------------------------------------------------------
  
  protected abstract void buildInstructionSequence(int deep, Instruction instruction) throws IOException;
  protected abstract void buildComment(int deep, String text) throws IOException;
  protected abstract void buildTerm(int deep, String name, TomList argList) throws IOException;
  protected abstract void buildRef(int deep, TomTerm term) throws IOException;
  protected abstract void buildListOrArray(int deep, TomTerm list) throws IOException;

  protected abstract void buildFunctionCall(int deep, String name, TomList argList)  throws IOException;
  protected abstract void buildFunctionBegin(int deep, String tomName, TomList varList) throws IOException; 
  protected abstract void buildFunctionEnd(int deep) throws IOException;
  protected abstract void buildExpNegation(int deep, Expression exp) throws IOException;

  protected abstract void buildCompiledMatch(int deep, Instruction instruction) throws IOException;
  protected abstract void buildExpAnd(int deep, Expression exp1, Expression exp2) throws IOException;
  protected abstract void buildExpOr(int deep, Expression exp1, Expression exp2) throws IOException;
  protected abstract void buildExpGreaterThan(int deep, Expression exp1, Expression exp2) throws IOException;
  protected abstract void buildExpTrue(int deep) throws IOException;
  protected abstract void buildExpFalse(int deep) throws IOException;
  protected abstract void buildExpIsEmptyList(int deep, TomName opName, TomType type, TomTerm expList) throws IOException;
  protected abstract void buildExpIsEmptyArray(int deep, TomType type, TomTerm expIndex, TomTerm expArray) throws IOException;
  protected abstract void buildExpEqualTerm(int deep, TomType type, TomTerm exp1,TomTerm exp2) throws IOException;
  protected abstract void buildExpIsFsym(int deep, String opname, TomTerm var) throws IOException;
  protected abstract void buildExpCast(int deep, TomType type, Expression exp) throws IOException;
  protected abstract void buildExpGetSlot(int deep, String opname, String slotName, TomTerm exp) throws IOException;
  protected abstract void buildExpGetHead(int deep, TomName opName, TomType domain, TomType codomain, TomTerm var) throws IOException;
  protected abstract void buildExpGetTail(int deep, TomName opName, TomType type1, TomTerm var) throws IOException;
  protected abstract void buildExpGetSize(int deep, TomType type1, TomTerm var) throws IOException;
  protected abstract void buildExpGetElement(int deep, TomType domain, TomType codomain, TomTerm varName, TomTerm varIndex) throws IOException;
  protected abstract void buildExpGetSliceList(int deep, String name, TomTerm varBegin, TomTerm varEnd) throws IOException;
  protected abstract void buildExpGetSliceArray(int deep, String name, TomTerm varArray, TomTerm varBegin, TomTerm expEnd) throws IOException;
  protected abstract void buildAssignVar(int deep, TomTerm var, OptionList list, Expression exp) throws IOException ;
  protected abstract void buildLetAssign(int deep, TomTerm var, OptionList list, Expression exp, Instruction body) throws IOException ;
  protected abstract void buildLet(int deep, TomTerm var, OptionList list, TomType tlType, Expression exp, Instruction body) throws IOException ;
  protected abstract void buildLetRef(int deep, TomTerm var, OptionList list, TomType tlType, Expression exp, Instruction body) throws IOException ;
  protected abstract void buildNamedBlock(int deep, String blockName, InstructionList instList) throws IOException ;
  protected abstract void buildUnamedBlock(int deep, InstructionList instList) throws IOException ;
  protected abstract void buildIf(int deep, Expression exp, Instruction succes) throws IOException ;
  protected abstract void buildIfWithFailure(int deep, Expression exp, Instruction succes, Instruction failure) throws IOException ;
  protected abstract void buildDoWhile(int deep, Instruction succes, Expression exp) throws IOException;
  protected abstract void buildWhileDo(int deep, Expression exp, Instruction succes) throws IOException;
  protected abstract void buildAddOne(int deep, TomTerm var) throws IOException;
  protected abstract void buildReturn(int deep, TomTerm exp) throws IOException ;
  protected abstract void buildCheckStamp(int deep, TomType type, TomTerm variable) throws IOException ;
  protected abstract void buildSymbolDecl(int deep, String tomName) throws IOException ;
  protected abstract void buildCheckStampDecl(int deep, String type, String name,
                                              TomType tlType, TargetLanguage tlCode) throws IOException;
  protected abstract void buildSetStampDecl(int deep, String type, String name,
                                              TomType tlType, TargetLanguage tlCode) throws IOException;
  protected abstract void buildGetImplementationDecl(int deep, String type, String name,
                                              TomType tlType, TargetLanguage tlCode) throws IOException;

  protected abstract void buildIsFsymDecl(int deep, String tomName, String name1,
                                          TomType tlType, TargetLanguage tlCode) throws IOException;
  protected abstract void buildGetSlotDecl(int deep, String tomName, String name1,
                                           TomType tlType, TargetLanguage tlCode, TomName slotName) throws IOException;
  protected abstract void buildTermsEqualDecl(int deep, String name1, String name2,
                                              String type1, String type2, TargetLanguage tlCode) throws IOException;
  protected abstract void buildGetHeadDecl(int deep, TomName opNameAST, String varName, String suffix, TomType domain, TomType codomain,TargetLanguage tlCode) throws IOException;
  protected abstract void buildGetTailDecl(int deep, TomName opNameAST, String varName, String type, TomType tlType, TargetLanguage tlCode) throws IOException;
  protected abstract void buildIsEmptyDecl(int deep, TomName opNameAST, String varName, String type,
                                           TomType tlType, TargetLanguage tlCode) throws IOException;
  protected abstract void buildGetElementDecl(int deep, String name1, String name2,
                                              String type1, TomType tlType1, TargetLanguage tlCode) throws IOException;
  protected abstract void buildGetSizeDecl(int deep, String name1, String type,
                                           TomType tlType, TargetLanguage tlCode) throws IOException;
  protected abstract void buildTypeTermDecl(int deep, TomList declList) throws IOException;
  protected abstract void buildTypeListDecl(int deep, TomList declList) throws IOException;
  protected abstract void buildTypeArrayDecl(int deep, TomList declList) throws IOException;
  protected abstract void generateDeclarationFromList(int deep, TomList declList) throws IOException;
  
} // class TomAbstractGenerator
