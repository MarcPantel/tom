/* Generated by TOM (version 2.3rc2): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.backend;

import java.io.IOException;

import tom.engine.TomBase;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.tools.OutputCode;
import tom.engine.tools.SymbolTable;
import tom.platform.OptionManager;

import aterm.*;
 
public abstract class TomAbstractGenerator extends TomBase {
  
  protected OutputCode output;
  protected OptionManager optionManager;
  protected SymbolTable symbolTable;
  protected boolean prettyMode;

  public TomAbstractGenerator(OutputCode output, OptionManager optionManager,
                              SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
    this.optionManager = optionManager;
    this.output = output;
    this.prettyMode = ((Boolean)optionManager.getOptionValue("pretty")).booleanValue();
  }
  
  protected SymbolTable getSymbolTable(String moduleName) {
    //TODO//
    //Using of the moduleName
    ////////
    return symbolTable;
  }
  
  protected TomSymbol getSymbolFromName(String tomName) {
    return getSymbolFromName(tomName, symbolTable);
  }

  protected TomSymbol getSymbolFromType(TomType tomType) {
    return getSymbolFromType(tomType, symbolTable);
  }

  protected TomType getTermType(TomTerm t) {
    return getTermType(t, symbolTable);
  }

  protected TomType getUniversalType() {
    return symbolTable.getUniversalType();
  }
// ------------------------------------------------------------
  /* Generated by TOM (version 2.3rc2): Do not edit this file *//* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.3rc2): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     
// ------------------------------------------------------------

  protected TomTerm operatorsTogenerate(TomTerm subject)throws IOException {
    //System.out.println("Subject "+subject);
    //collectMake(subject);
    return subject;
  }

  //Testing purpose : it will be necessary to rewrite it with strategies...
  /*protected void collectMake(TomTerm subject) {
   Collect1 collect = new Collect1() { 
       public boolean apply(ATerm subject) {
         if(subject instanceof TomTerm) {
           %match(TomTerm subject) {
             BuildTerm[] -> { 
              System.out.println("Found Make : "+subject);
              return false;
             }
           }
         }
         return true;
       } // end apply
     }; // end collect
   // use a traversal to get all interesting subtrees
   traversal.genericCollect(subject,collect);
 }
*/

    /*
     * Generate the goal language     */
 
  protected void generate(int deep, TomTerm subject, String moduleName)throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if (tom_is_fun_sym_Tom(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1_tomList=tom_get_slot_Tom_tomList(tom_match1_1); if ( true ) {


        generateList(deep,tom_match1_1_tomList, moduleName);
        return;
       } } } if (tom_is_fun_sym_TomInclude(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1_tomList=tom_get_slot_TomInclude_tomList(tom_match1_1); if ( true ) {


        generateListInclude(deep,tom_match1_1_tomList, moduleName);
        return;
       } } } if (tom_is_fun_sym_Ref(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match1_1); if (tom_is_fun_sym_VariableStar(tom_match1_1_tomTerm) || tom_is_fun_sym_Variable(tom_match1_1_tomTerm) ||  false ) { if ( true ) {


        buildRef(deep, tom_match1_1_tomTerm, moduleName);
        return;
       } } } } if (tom_is_fun_sym_Ref(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match1_1); if ( true ) {


        generate(deep, tom_match1_1_tomTerm, moduleName);
        return;
       } } } if (tom_is_fun_sym_BuildConstant(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_BuildConstant_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); if ( true ) {


        output.write(tom_match1_1_astName_string);
        return;
       } } } } } if (tom_is_fun_sym_BuildTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_BuildTerm_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_BuildTerm_args(tom_match1_1); { String  tom_match1_1_moduleName=tom_get_slot_BuildTerm_moduleName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); if ( true ) {buildTerm(deep,tom_match1_1_astName_string,tom_match1_1_args,tom_match1_1_moduleName)









;
        return;
       } } } } } } } if (tom_is_fun_sym_BuildAppendArray(tom_match1_1) || tom_is_fun_sym_BuildConsArray(tom_match1_1) || tom_is_fun_sym_BuildAppendList(tom_match1_1) || tom_is_fun_sym_BuildConsList(tom_match1_1) || tom_is_fun_sym_BuildEmptyArray(tom_match1_1) || tom_is_fun_sym_BuildEmptyList(tom_match1_1) ||  false ) { if ( true ) {


        buildListOrArray(deep, tom_match1_1, moduleName);
        return;
       } } if (tom_is_fun_sym_FunctionCall(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_FunctionCall_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_FunctionCall_args(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); if ( true ) {


        buildFunctionCall(deep,tom_match1_1_astName_string, tom_match1_1_args, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_Composite(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_Composite_args(tom_match1_1); if ( true ) {


        generateList(deep,tom_match1_1_args, moduleName);
        return;
       } } } if (tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); if (tom_is_fun_sym_PositionName(tom_match1_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match1_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match1_1_astName); if ( true ) {


          /*
           * sans type: re-definition lorsque %variable est utilise
           * avec type: probleme en cas de filtrage dynamique
           */
        output.write("tom" + numberListToIdentifier(tom_match1_1_astName_numberList));
        return;
       } } } } } if (tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); if ( true ) {


        output.write(tom_match1_1_astName_string);
        return;
       } } } } } if (tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_VariableStar_astName(tom_match1_1); if (tom_is_fun_sym_PositionName(tom_match1_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match1_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match1_1_astName); if ( true ) {


        output.write("tom" + numberListToIdentifier(tom_match1_1_astName_numberList));
        return;  
       } } } } } if (tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_VariableStar_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); if ( true ) {


        output.write(tom_match1_1_astName_string);
        return;
       } } } } } if (tom_is_fun_sym_TargetLanguageToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match1_1_tl=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match1_1); if ( true ) {







        generateTargetLanguage(deep,tom_match1_1_tl, moduleName);
        return;
       } } } if (tom_is_fun_sym_ExpressionToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match1_1_astExpression=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match1_1); if ( true ) {


        generateExpression(deep,tom_match1_1_astExpression, moduleName);
        return;
       } } } if (tom_is_fun_sym_InstructionToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match1_1_astInstruction=tom_get_slot_InstructionToTomTerm_astInstruction(tom_match1_1); if ( true ) {


        generateInstruction(deep,tom_match1_1_astInstruction, moduleName);
        return;
       } } } if (tom_is_fun_sym_DeclarationToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match1_1_astDeclaration=tom_get_slot_DeclarationToTomTerm_astDeclaration(tom_match1_1); if ( true ) {


        generateDeclaration(deep,tom_match1_1_astDeclaration, moduleName);
        return;
       } } } { tom.engine.adt.tomsignature.types.TomTerm tom_t=tom_match1_1; if ( true ) {


        System.out.println("Cannot generate code for: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for: " + tom_t);
       } } } }

  }

  public void generateExpression(int deep, Expression subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1=(( tom.engine.adt.tomsignature.types.Expression)subject); if (tom_is_fun_sym_Negation(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg=tom_get_slot_Negation_arg(tom_match2_1); if ( true ) {

        buildExpNegation(deep, tom_match2_1_arg, moduleName);
        return;
       } } } if (tom_is_fun_sym_And(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_And_arg1(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_And_arg2(tom_match2_1); if ( true ) {


        buildExpAnd(deep, tom_match2_1_arg1, tom_match2_1_arg2, moduleName);
        return;
       } } } } if (tom_is_fun_sym_Or(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_Or_arg1(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_Or_arg2(tom_match2_1); if ( true ) {


        buildExpOr(deep, tom_match2_1_arg1, tom_match2_1_arg2, moduleName);
        return;
       } } } } if (tom_is_fun_sym_GreaterThan(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_GreaterThan_arg1(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_GreaterThan_arg2(tom_match2_1); if ( true ) {


        buildExpGreaterThan(deep, tom_match2_1_arg1, tom_match2_1_arg2, moduleName);
        return;
       } } } } if (tom_is_fun_sym_Bottom(tom_match2_1) ||  false ) { if ( true ) {


        buildExpBottom(deep);
        return;
       } } if (tom_is_fun_sym_TrueTL(tom_match2_1) ||  false ) { if ( true ) {


        buildExpTrue(deep);
        return;
       } } if (tom_is_fun_sym_FalseTL(tom_match2_1) ||  false ) { if ( true ) {


        buildExpFalse(deep);
        return;
       } } if (tom_is_fun_sym_IsEmptyList(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_IsEmptyList_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsEmptyList_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_expList=tom_match2_1_variable; if ( true ) {


        buildExpIsEmptyList(deep, tom_match2_1_opname, getTermType(tom_expList), tom_expList, moduleName);
        return;
       } } } } } if (tom_is_fun_sym_IsEmptyArray(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_IsEmptyArray_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsEmptyArray_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_index=tom_get_slot_IsEmptyArray_index(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_expArray=tom_match2_1_variable; if ( true ) {


        buildExpIsEmptyArray(deep, tom_match2_1_opname, getTermType(tom_expArray), tom_match2_1_index, tom_expArray, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_EqualFunctionSymbol(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match2_1_astType; { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_exp1; if (tom_is_fun_sym_RecordAppl(tom_match2_1_exp2) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_exp2_nameList=tom_get_slot_RecordAppl_nameList(tom_match2_1_exp2); if (tom_is_fun_sym_concTomName(tom_match2_1_exp2_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_exp2_nameList_list1=tom_match2_1_exp2_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match2_1_exp2_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_exp2_nameList_1=tom_get_head_concTomName_NameList(tom_match2_1_exp2_nameList_list1);tom_match2_1_exp2_nameList_list1=tom_get_tail_concTomName_NameList(tom_match2_1_exp2_nameList_list1); if (tom_is_fun_sym_Name(tom_match2_1_exp2_nameList_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_nameAST=tom_match2_1_exp2_nameList_1; { String  tom_match2_1_exp2_nameList_1_string=tom_get_slot_Name_string(tom_match2_1_exp2_nameList_1); if (tom_is_empty_concTomName_NameList(tom_match2_1_exp2_nameList_list1)) { if ( true ) {

 
        if(getSymbolTable(moduleName).isBuiltinType(getTomType(tom_type))) {
          TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_match2_1_exp2_nameList_1_string);
          if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
            generateExpression(deep,tom_make_IsFsym(tom_nameAST,tom_exp), moduleName);
          } else {
            generateExpression(deep,tom_make_EqualTerm(tom_type,tom_make_BuildConstant(tom_nameAST),tom_exp), moduleName);
          }
        } else {
          generateExpression(deep,tom_make_IsFsym(tom_nameAST,tom_exp), moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_EqualTerm(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_tomType=tom_get_slot_EqualTerm_tomType(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid1=tom_get_slot_EqualTerm_kid1(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid2=tom_get_slot_EqualTerm_kid2(tom_match2_1); if ( true ) {buildExpEqualTerm(deep,tom_match2_1_tomType,tom_match2_1_kid1,tom_match2_1_kid2,moduleName)


;
        return;
       } } } } } if (tom_is_fun_sym_IsFsym(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_IsFsym_astName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsFsym_variable(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); if ( true ) {


        buildExpIsFsym(deep, tom_match2_1_astName_string, tom_match2_1_variable, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_Cast(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType=tom_get_slot_Cast_astType(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_source=tom_get_slot_Cast_source(tom_match2_1); if (tom_is_fun_sym_Type(tom_match2_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType_tomType=tom_get_slot_Type_tomType(tom_match2_1_astType); { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType_tlType=tom_get_slot_Type_tlType(tom_match2_1_astType); if (tom_is_fun_sym_TLType(tom_match2_1_astType_tlType) ||  false ) { if ( true ) {


        buildExpCast(deep, tom_match2_1_astType_tlType, tom_match2_1_source, moduleName);
        return;
       } } } } } } } } if (tom_is_fun_sym_GetSlot(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetSlot_codomain(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSlot_astName(tom_match2_1); { String  tom_match2_1_slotNameString=tom_get_slot_GetSlot_slotNameString(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetSlot_variable(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); if (tom_is_fun_sym_Variable(tom_match2_1_variable) ||  false ) { if ( true ) {buildExpGetSlot(deep,tom_match2_1_astName_string,tom_match2_1_slotNameString,tom_match2_1_variable,moduleName)


;
        return;
       } } } } } } } } } if (tom_is_fun_sym_GetHead(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetHead_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetHead_codomain(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetHead_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {buildExpGetHead(deep,tom_match2_1_opname,getTermType(tom_exp),tom_match2_1_codomain,tom_exp,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_GetTail(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetTail_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetTail_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {


        buildExpGetTail(deep, tom_match2_1_opname, getTermType(tom_exp), tom_exp, moduleName);
        return;
       } } } } } if (tom_is_fun_sym_AddOne(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_AddOne_variable(tom_match2_1); if ( true ) {


        buildAddOne(deep, tom_match2_1_variable, moduleName);
        return;
       } } } if (tom_is_fun_sym_GetSize(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetSize_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetSize_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {


        buildExpGetSize(deep,tom_match2_1_opname,getTermType(tom_exp), tom_exp, moduleName);
        return;
       } } } } } if (tom_is_fun_sym_GetElement(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetElement_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetElement_codomain(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid1=tom_get_slot_GetElement_kid1(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid2=tom_get_slot_GetElement_kid2(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_varName=tom_match2_1_kid1; if ( true ) {


        buildExpGetElement(deep,tom_match2_1_opname,getTermType(tom_varName),tom_match2_1_codomain, tom_varName, tom_match2_1_kid2, moduleName);
        return;
       } } } } } } } if (tom_is_fun_sym_GetSliceList(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSliceList_astName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableBeginAST=tom_get_slot_GetSliceList_variableBeginAST(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableEndAST=tom_get_slot_GetSliceList_variableEndAST(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); if ( true ) {


        buildExpGetSliceList(deep, tom_match2_1_astName_string, tom_match2_1_variableBeginAST, tom_match2_1_variableEndAST, moduleName);
        return;
       } } } } } } } if (tom_is_fun_sym_GetSliceArray(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSliceArray_astName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_subjectListName=tom_get_slot_GetSliceArray_subjectListName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableBeginAST=tom_get_slot_GetSliceArray_variableBeginAST(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableEndAST=tom_get_slot_GetSliceArray_variableEndAST(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); if ( true ) {


        buildExpGetSliceArray(deep, tom_match2_1_astName_string, tom_match2_1_subjectListName, tom_match2_1_variableBeginAST, tom_match2_1_variableEndAST, moduleName);
        return;
       } } } } } } } } if (tom_is_fun_sym_TomTermToExpression(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match2_1); if ( true ) {


        generate(deep,tom_match2_1_astTerm, moduleName);
        return;
       } } } { tom.engine.adt.tomsignature.types.Expression tom_t=tom_match2_1; if ( true ) {


        System.out.println("Cannot generate code for expression: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for expression: " + tom_t);
       } } } }

  }

  public void generateInstruction(int deep, Instruction subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_TargetLanguageToInstruction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match3_1_tl=tom_get_slot_TargetLanguageToInstruction_tl(tom_match3_1); if ( true ) {generateTargetLanguage(deep,tom_match3_1_tl,moduleName)


;
        return;
       } } } if (tom_is_fun_sym_TomTermToInstruction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_tom=tom_get_slot_TomTermToInstruction_tom(tom_match3_1); if ( true ) {generate(deep,tom_match3_1_tom,moduleName)


;
        return;
       } } } if (tom_is_fun_sym_Nop(tom_match3_1) ||  false ) { if ( true ) {


        return;
       } } if (tom_is_fun_sym_AssignMatchSubject(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_kid1=tom_get_slot_AssignMatchSubject_kid1(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_AssignMatchSubject_source(tom_match3_1); if (tom_is_fun_sym_Variable(tom_match3_1_kid1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_kid1_option=tom_get_slot_Variable_option(tom_match3_1_kid1); if ( true ) {buildAssignVar(deep,tom_match3_1_kid1,tom_match3_1_kid1_option,tom_match3_1_source,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_Assign(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Assign_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Assign_source(tom_match3_1); if (tom_is_fun_sym_UnamedVariableStar(tom_match3_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_variable) ||  false ) { if ( true ) {


        return;
       } } } } } if (tom_is_fun_sym_Assign(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Assign_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Assign_source(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { if ( true ) {buildAssignVar(deep,tom_var,tom_match3_1_variable_option,tom_match3_1_source,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_LetAssign(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_LetAssign_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_LetAssign_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { if ( true ) {buildLetAssign(deep,tom_var,tom_match3_1_variable_option,tom_match3_1_source,tom_match3_1_astInstruction,moduleName)


;
        return;
       } } } } } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable= null ; { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source= null ; { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction= null ; if (tom_is_fun_sym_Let(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_Let_variable(tom_match3_1);tom_match3_1_source=tom_get_slot_Let_source(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetRef(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_LetRef_variable(tom_match3_1);tom_match3_1_source=tom_get_slot_LetRef_source(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetAssign(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_LetAssign_variable(tom_match3_1);tom_match3_1_source=tom_get_slot_LetAssign_source(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match3_1); } } } if (tom_bool_match3_1) { if (tom_is_fun_sym_UnamedVariableStar(tom_match3_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_variable) ||  false ) { if ( true ) {generateInstruction(deep,tom_match3_1_astInstruction,moduleName)


;
        return;
       } } } } } } } if (tom_is_fun_sym_Let(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Let_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Let_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_Variable_astType(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_VariableStar_astType(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { if (tom_is_fun_sym_Type(tom_match3_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match3_1_variable_astType_tlType) ||  false ) { if ( true ) {buildLet(deep,tom_var,tom_match3_1_variable_option,tom_match3_1_variable_astType_tlType,tom_match3_1_source,tom_match3_1_astInstruction,moduleName)


;
        return;
       } } } } } } } } } } } } } if (tom_is_fun_sym_LetRef(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_LetRef_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_LetRef_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_Variable_astType(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_VariableStar_astType(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { if (tom_is_fun_sym_Type(tom_match3_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match3_1_variable_astType_tlType) ||  false ) { if ( true ) {buildLetRef(deep,tom_var,tom_match3_1_variable_option,tom_match3_1_variable_astType_tlType,tom_match3_1_source,tom_match3_1_astInstruction,moduleName)


;
        return;
       } } } } } } } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_AbstractBlock_instList(tom_match3_1); if ( true ) {


        //`generateInstructionList(deep, instList);
        buildInstructionSequence(deep,tom_match3_1_instList,moduleName);
        return;
       } } } if (tom_is_fun_sym_UnamedBlock(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_UnamedBlock_instList(tom_match3_1); if ( true ) {buildUnamedBlock(deep,tom_match3_1_instList,moduleName)


;
        return;
       } } } if (tom_is_fun_sym_NamedBlock(tom_match3_1) ||  false ) { { String  tom_match3_1_blockName=tom_get_slot_NamedBlock_blockName(tom_match3_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_NamedBlock_instList(tom_match3_1); if ( true ) {buildNamedBlock(deep,tom_match3_1_blockName,tom_match3_1_instList,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); if (tom_is_fun_sym_Nop(tom_match3_1_failureInst) ||  false ) { if ( true ) {buildIf(deep,tom_match3_1_condition,tom_match3_1_succesInst,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); if (tom_is_fun_sym_Nop(tom_match3_1_succesInst) ||  false ) { if ( true ) {buildIf(deep,tom_make_Negation(tom_match3_1_condition),tom_match3_1_failureInst,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); if ( true ) {buildIfWithFailure(deep,tom_match3_1_condition,tom_match3_1_succesInst,tom_match3_1_failureInst,moduleName)


;
        return;
       } } } } } if (tom_is_fun_sym_DoWhile(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_doInst=tom_get_slot_DoWhile_doInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_DoWhile_condition(tom_match3_1); if ( true ) {buildDoWhile(deep,tom_match3_1_doInst,tom_match3_1_condition,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_WhileDo(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_WhileDo_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_doInst=tom_get_slot_WhileDo_doInst(tom_match3_1); if ( true ) {buildWhileDo(deep,tom_match3_1_condition,tom_match3_1_doInst,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_TypedAction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match3_1); if (tom_is_fun_sym_AbstractBlock(tom_match3_1_astInstruction) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_astInstruction_instList=tom_get_slot_AbstractBlock_instList(tom_match3_1_astInstruction); if ( true ) {generateInstructionList(deep,tom_match3_1_astInstruction_instList,moduleName)


;
        return;
       } } } } } if (tom_is_fun_sym_TypedAction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match3_1); if ( true ) {generateInstruction(deep,tom_match3_1_astInstruction,moduleName)


;
        return;
       } } } if (tom_is_fun_sym_Return(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_kid1=tom_get_slot_Return_kid1(tom_match3_1); if ( true ) {buildReturn(deep,tom_match3_1_kid1,moduleName)


;
        return;
       } } } if (tom_is_fun_sym_CompiledMatch(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_automataInst=tom_get_slot_CompiledMatch_automataInst(tom_match3_1); { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option=tom_get_slot_CompiledMatch_option(tom_match3_1); if ( true ) {


        //TODO moduleName
        generateInstruction(deep,tom_match3_1_automataInst,moduleName);
        return;
       } } } } if (tom_is_fun_sym_CompiledPattern(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match3_1_patternList=tom_get_slot_CompiledPattern_patternList(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match3_1); if ( true ) {generateInstruction(deep,tom_match3_1_automataInst,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_CheckStamp(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_CheckStamp_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match3_1_variable; if ( true ) {buildCheckStamp(deep,getTermType(tom_variable),tom_variable,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_CheckInstance(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_astType=tom_get_slot_CheckInstance_astType(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_CheckInstance_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_instruction=tom_get_slot_CheckInstance_instruction(tom_match3_1); if (tom_is_fun_sym_Type(tom_match3_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_astType_tomType=tom_get_slot_Type_tomType(tom_match3_1_astType); { tom.engine.adt.tomsignature.types.TomType tom_match3_1_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_astType); if (tom_is_fun_sym_ASTTomType(tom_match3_1_astType_tomType) ||  false ) { { String  tom_match3_1_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match3_1_astType_tomType); if (tom_is_fun_sym_TLType(tom_match3_1_astType_tlType) ||  false ) { if ( true ) {buildCheckInstance(deep,tom_match3_1_astType_tomType_string,tom_match3_1_astType_tlType,tom_match3_1_source,tom_match3_1_instruction,moduleName)


; 
        return;
       } } } } } } } } } } } { tom.engine.adt.tomsignature.types.Instruction tom_t=tom_match3_1; if ( true ) {


        System.out.println("Cannot generate code for instruction: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for instruction: " + tom_t);
       } } } }

  }
  
  public void generateTargetLanguage(int deep, TargetLanguage subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.TargetLanguage) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match4_1=(( tom.engine.adt.tomsignature.types.TargetLanguage)subject); if (tom_is_fun_sym_TL(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_TL_code(tom_match4_1); { tom.engine.adt.tomsignature.types.Position tom_match4_1_start=tom_get_slot_TL_start(tom_match4_1); { tom.engine.adt.tomsignature.types.Position tom_match4_1_end=tom_get_slot_TL_end(tom_match4_1); if (tom_is_fun_sym_TextPosition(tom_match4_1_start) ||  false ) { { int  tom_match4_1_start_line=tom_get_slot_TextPosition_line(tom_match4_1_start); { int  tom_startLine=tom_match4_1_start_line; if (tom_is_fun_sym_TextPosition(tom_match4_1_end) ||  false ) { { int  tom_match4_1_end_line=tom_get_slot_TextPosition_line(tom_match4_1_end); if ( true ) {

        output.write(deep, tom_match4_1_code, tom_startLine, tom_match4_1_end_line- tom_startLine);
        return;
       } } } } } } } } } } if (tom_is_fun_sym_ITL(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_ITL_code(tom_match4_1); if ( true ) {


        output.write(tom_match4_1_code);
        return;
       } } } if (tom_is_fun_sym_Comment(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_Comment_code(tom_match4_1); if ( true ) {buildComment(deep,tom_match4_1_code)


;
        return;
       } } } { tom.engine.adt.tomsignature.types.TargetLanguage tom_t=tom_match4_1; if ( true ) {


        System.out.println("Cannot generate code for TL: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for TL: " + tom_t);
       } } } }

  }

  public void generateOption(int deep, Option subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match5_1=(( tom.engine.adt.tomsignature.types.Option)subject); if (tom_is_fun_sym_DeclarationToOption(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match5_1_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match5_1); if ( true ) {generateDeclaration(deep,tom_match5_1_astDeclaration,moduleName)

;
        return;
       } } } if (tom_is_fun_sym_OriginTracking(tom_match5_1) ||  false ) { if ( true ) {
 return;  } } if (tom_is_fun_sym_DefinedSymbol(tom_match5_1) ||  false ) { if ( true ) {
 return;  } } { tom.engine.adt.tomsignature.types.Option tom_t=tom_match5_1; if ( true ) {


        System.out.println("Cannot generate code for option: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for option: " + tom_t);
       } } } }

  }
  
  public void generateDeclaration(int deep, Declaration subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match6_1=(( tom.engine.adt.tomsignature.types.Declaration)subject); if (tom_is_fun_sym_EmptyDeclaration(tom_match6_1) ||  false ) { if ( true ) {

        return;
       } } if (tom_is_fun_sym_AbstractDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.DeclarationList tom_match6_1_declList=tom_get_slot_AbstractDecl_declList(tom_match6_1); if ( true ) {


        //`generateInstructionList(deep, instList);
        buildDeclarationSequence(deep,tom_match6_1_declList,moduleName);
        return;
       } } } if (tom_is_fun_sym_FunctionDef(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_FunctionDef_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_argumentList=tom_get_slot_FunctionDef_argumentList(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain=tom_get_slot_FunctionDef_codomain(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_throwsType=tom_get_slot_FunctionDef_throwsType(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instruction=tom_get_slot_FunctionDef_instruction(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); if ( true ) {buildFunctionDef(deep,tom_match6_1_astName_string,tom_match6_1_argumentList,tom_match6_1_codomain,tom_match6_1_throwsType,tom_match6_1_instruction,moduleName)


;
        return;
       } } } } } } } } } if (tom_is_fun_sym_MethodDef(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MethodDef_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_argumentList=tom_get_slot_MethodDef_argumentList(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain=tom_get_slot_MethodDef_codomain(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_throwsType=tom_get_slot_MethodDef_throwsType(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instruction=tom_get_slot_MethodDef_instruction(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); if ( true ) {buildMethodDef(deep,tom_match6_1_astName_string,tom_match6_1_argumentList,tom_match6_1_codomain,tom_match6_1_throwsType,tom_match6_1_instruction,moduleName)


;
        return;
       } } } } } } } } } if (tom_is_fun_sym_Class(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_Class_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomForwardType tom_match6_1_extendsType=tom_get_slot_Class_extendsType(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_superTerm=tom_get_slot_Class_superTerm(tom_match6_1); { tom.engine.adt.tomsignature.types.Declaration tom_match6_1_declaration=tom_get_slot_Class_declaration(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); if ( true ) {buildClass(deep,tom_match6_1_astName_string,tom_match6_1_extendsType,tom_match6_1_superTerm,tom_match6_1_declaration,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_SymbolDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_SymbolDecl_astName(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); if ( true ) {buildSymbolDecl(deep,tom_match6_1_astName_string,moduleName)


;
        return ;
       } } } } } if (tom_is_fun_sym_ArraySymbolDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_ArraySymbolDecl_astName(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if ( true ) {buildSymbolDecl(deep,tom_tomName,moduleName)


;
        genDeclArray(tom_tomName,moduleName);
        return ;
       } } } } } } if (tom_is_fun_sym_ListSymbolDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_ListSymbolDecl_astName(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if ( true ) {buildSymbolDecl(deep,tom_tomName,moduleName)


;
        genDeclList(tom_tomName,moduleName);
        return ;
       } } } } } } if (tom_is_fun_sym_CheckStampDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_CheckStampDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_CheckStampDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_CheckStampDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {buildCheckStampDecl(deep,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName)





;
        return;
       } } } } } } } } } } } } } } } } if (tom_is_fun_sym_SetStampDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_SetStampDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_SetStampDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_SetStampDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {buildSetStampDecl(deep,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName)




;
        return;
       } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetImplementationDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetImplementationDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetImplementationDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_GetImplementationDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {buildGetImplementationDecl(deep,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName)




;
        return;
       } } } } } } } } } } } } } } } } if (tom_is_fun_sym_IsFsymDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_IsFsymDecl_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_IsFsymDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_IsFsymDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_IsFsymDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {



        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_tomName)) {
          buildIsFsymDecl(deep,tom_tomName,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetSlotDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_GetSlotDecl_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomName tom_match6_1_slotName=tom_get_slot_GetSlotDecl_slotName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetSlotDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetSlotDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {





        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_tomName)) {
          buildGetSlotDecl(deep,tom_tomName,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,tom_match6_1_slotName,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_TermsEqualDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_termArg1=tom_get_slot_TermsEqualDecl_termArg1(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_termArg2=tom_get_slot_TermsEqualDecl_termArg2(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_TermsEqualDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_TermsEqualDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_termArg1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_termArg1_astName=tom_get_slot_Variable_astName(tom_match6_1_termArg1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType=tom_get_slot_Variable_astType(tom_match6_1_termArg1); if (tom_is_fun_sym_Name(tom_match6_1_termArg1_astName) ||  false ) { { String  tom_match6_1_termArg1_astName_string=tom_get_slot_Name_string(tom_match6_1_termArg1_astName); if (tom_is_fun_sym_Type(tom_match6_1_termArg1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_termArg1_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_termArg1_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_termArg1_astType_tomType) ||  false ) { { String  tom_match6_1_termArg1_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_termArg1_astType_tomType); if (tom_is_fun_sym_Variable(tom_match6_1_termArg2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_termArg2_astName=tom_get_slot_Variable_astName(tom_match6_1_termArg2); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType=tom_get_slot_Variable_astType(tom_match6_1_termArg2); if (tom_is_fun_sym_Name(tom_match6_1_termArg2_astName) ||  false ) { { String  tom_match6_1_termArg2_astName_string=tom_get_slot_Name_string(tom_match6_1_termArg2_astName); if (tom_is_fun_sym_Type(tom_match6_1_termArg2_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_termArg2_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_termArg2_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_termArg2_astType_tomType) ||  false ) { { String  tom_match6_1_termArg2_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_termArg2_astType_tomType); if ( true ) {buildTermsEqualDecl(deep,tom_match6_1_termArg1_astName_string,tom_match6_1_termArg2_astName_string,tom_match6_1_termArg1_astType_tomType_string,tom_match6_1_termArg2_astType_tomType_string,tom_match6_1_instr,moduleName)




;
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetHeadDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetHeadDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain=tom_get_slot_GetHeadDecl_codomain(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetHeadDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetHeadDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); if (tom_is_fun_sym_Type(tom_match6_1_codomain) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain_tlType=tom_get_slot_Type_tlType(tom_match6_1_codomain); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {





        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_match6_1_opname_string)) {
          buildGetHeadDecl(deep,tom_match6_1_opname,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astType_tlType,tom_match6_1_codomain_tlType,tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetTailDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetTailDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetTailDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetTailDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {




        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_match6_1_opname_string)) {
          buildGetTailDecl(deep,tom_match6_1_opname,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_IsEmptyDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_IsEmptyDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_IsEmptyDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_IsEmptyDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {




        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_match6_1_opname_string)) {
          buildIsEmptyDecl(deep,tom_match6_1_opname,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeEmptyList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeEmptyList_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeEmptyList_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeEmptyList_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if ( true ) {


        TomType returnType = getSymbolCodomain(getSymbolFromName(tom_opname));
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_empty_list_" + tom_opname,returnType,tom_empty_list_concTomTerm(),tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } if (tom_is_fun_sym_MakeAddList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeAddList_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varElt=tom_get_slot_MakeAddList_varElt(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varList=tom_get_slot_MakeAddList_varList(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeAddList_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeAddList_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_varElt) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType=tom_get_slot_Variable_astType(tom_match6_1_varElt); if (tom_is_fun_sym_Type(tom_match6_1_varElt_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varElt_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varElt_astType_tlType) ||  false ) { if (tom_is_fun_sym_Variable(tom_match6_1_varList) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType=tom_get_slot_Variable_astType(tom_match6_1_varList); if (tom_is_fun_sym_Type(tom_match6_1_varList_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varList_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varList_astType_tlType) ||  false ) { if ( true ) {





        TomType returnType = tom_match6_1_varList_astType;
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_cons_list_" + tom_opname,returnType,tom_cons_list_concTomTerm(tom_match6_1_varElt,tom_cons_list_concTomTerm(tom_match6_1_varList,tom_empty_list_concTomTerm())),tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetElementDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetElementDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetElementDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_index=tom_get_slot_GetElementDecl_index(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetElementDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if (tom_is_fun_sym_Variable(tom_match6_1_index) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_index_astName=tom_get_slot_Variable_astName(tom_match6_1_index); if (tom_is_fun_sym_Name(tom_match6_1_index_astName) ||  false ) { { String  tom_match6_1_index_astName_string=tom_get_slot_Name_string(tom_match6_1_index_astName); if ( true ) {





        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_match6_1_opname_string)) {
          buildGetElementDecl(deep,tom_match6_1_opname,tom_match6_1_variable_astName_string,tom_match6_1_index_astName_string,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetSizeDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetSizeDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetSizeDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetSizeDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { if ( true ) {





					if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_match6_1_opname_string)) {
						buildGetSizeDecl(deep,tom_match6_1_opname,tom_match6_1_variable_astName_string,tom_match6_1_variable_astType_tomType_string,tom_match6_1_variable_astType_tlType,tom_match6_1_instr,moduleName);
					}
					return;
			 } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeEmptyArray(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeEmptyArray_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varSize=tom_get_slot_MakeEmptyArray_varSize(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeEmptyArray_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeEmptyArray_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_varSize) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match6_1_varSize_option=tom_get_slot_Variable_option(tom_match6_1_varSize); { tom.engine.adt.tomsignature.types.TomName tom_match6_1_varSize_astName=tom_get_slot_Variable_astName(tom_match6_1_varSize); { tom.engine.adt.tomsignature.types.ConstraintList tom_match6_1_varSize_constraints=tom_get_slot_Variable_constraints(tom_match6_1_varSize); if ( true ) {




        TomType returnType = getSymbolCodomain(getSymbolFromName(tom_opname));
        TomTerm newVar = tom_make_Variable(tom_match6_1_varSize_option,tom_match6_1_varSize_astName,getSymbolTable(moduleName).getIntType(),tom_match6_1_varSize_constraints);
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_empty_array_" + tom_opname,returnType,tom_cons_list_concTomTerm(newVar,tom_empty_list_concTomTerm()),tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } if (tom_is_fun_sym_MakeAddArray(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeAddArray_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varElt=tom_get_slot_MakeAddArray_varElt(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varList=tom_get_slot_MakeAddArray_varList(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeAddArray_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeAddArray_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_varElt) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType=tom_get_slot_Variable_astType(tom_match6_1_varElt); if (tom_is_fun_sym_Type(tom_match6_1_varElt_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varElt_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varElt_astType_tlType) ||  false ) { if (tom_is_fun_sym_Variable(tom_match6_1_varList) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType=tom_get_slot_Variable_astType(tom_match6_1_varList); if (tom_is_fun_sym_Type(tom_match6_1_varList_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varList_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varList_astType_tlType) ||  false ) { if ( true ) {





        TomType returnType = tom_match6_1_varList_astType;
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_cons_array_" + tom_opname,returnType,tom_cons_list_concTomTerm(tom_match6_1_varElt,tom_cons_list_concTomTerm(tom_match6_1_varList,tom_empty_list_concTomTerm())),tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeDecl_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_astType=tom_get_slot_MakeDecl_astType(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_args=tom_get_slot_MakeDecl_args(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if ( true ) {


        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_make_" + tom_opname,tom_match6_1_astType,tom_match6_1_args,tom_match6_1_instr,moduleName);
        }
        return;
       } } } } } } } } } } if (tom_is_fun_sym_TypeTermDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.DeclarationList tom_match6_1_declarations=tom_get_slot_TypeTermDecl_declarations(tom_match6_1); if ( true ) {


        generateDeclarationList(deep, tom_match6_1_declarations, moduleName);
        return;
       } } } { tom.engine.adt.tomsignature.types.Declaration tom_t=tom_match6_1; if ( true ) {


        System.out.println("Cannot generate code for declaration: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for declaration: " + tom_t);
       } } } }

  }
  
  public void generateListInclude(int deep, TomList subject, String moduleName) throws IOException {
    output.setSingleLine();
    generateList(deep, subject, moduleName);
    output.unsetSingleLine();
  }

  public void generateList(int deep, TomList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generate(deep, subject.getHead(), moduleName);
      subject = subject.getTail();
    }
  }
  
  public void generateOptionList(int deep, OptionList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generateOption(deep,subject.getHead(), moduleName);
      subject = subject.getTail();
    }
  }

  public void generateInstructionList(int deep, InstructionList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generateInstruction(deep,subject.getHead(), moduleName);
      subject = subject.getTail();
    }
    if(prettyMode) {
	output.writeln();
    }
  }

  public void generateDeclarationList(int deep, DeclarationList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generateDeclaration(deep,subject.getHead(), moduleName);
      subject = subject.getTail();
    }
  }

  public void generatePairNameDeclList(int deep, PairNameDeclList pairNameDeclList, String moduleName)
    throws IOException {
    while ( !pairNameDeclList.isEmpty() ) {
      generateDeclaration(deep, pairNameDeclList.getHead().getSlotDecl(), moduleName);
      pairNameDeclList = pairNameDeclList.getTail();
    }
  }
   
  
    // ------------------------------------------------------------
  
  protected abstract void genDecl(String returnType,
                                  String declName,
                                  String suffix,
                                  String args[],
                                  TargetLanguage tlCode,
                                  String moduleName) throws IOException;

  protected abstract void genDeclInstr(String returnType,
                                       String declName,
                                       String suffix,
                                       String args[],
                                       Instruction instr,
                                       int deep,
                                       String moduleName) throws IOException;
  
  protected abstract void genDeclMake(String funName, TomType returnType, 
                                      TomList argList, Instruction instr, String moduleName) throws IOException;
  
  protected abstract void genDeclList(String name, String moduleName) throws IOException;

  protected abstract void genDeclArray(String name, String moduleName) throws IOException;
 
  // ------------------------------------------------------------
  
  protected abstract void buildDeclarationSequence(int deep, DeclarationList declarationList, String moduleName) throws IOException;
  protected abstract void buildInstructionSequence(int deep, InstructionList instructionList, String moduleName) throws IOException;
  protected abstract void buildSemiColon() throws IOException;
  protected abstract void buildComment(int deep, String text) throws IOException;
  protected abstract void buildTerm(int deep, String name, TomList argList, String moduleName) throws IOException;
  protected abstract void buildRef(int deep, TomTerm term, String moduleName) throws IOException;
  protected abstract void buildListOrArray(int deep, TomTerm list, String moduleName) throws IOException;

  protected abstract void buildFunctionCall(int deep, String name, TomList argList, String moduleName)  throws IOException;
  protected abstract void buildFunctionDef(int deep, String tomName, TomList argList, TomType codomain, TomType throwsType, Instruction instruction, String moduleName) throws IOException;
  protected void buildMethodDef(int deep, String tomName, TomList argList, TomType codomain, TomType throwsType, Instruction instruction, String moduleName) throws IOException {
    throw new TomRuntimeException("Backend "+getClass()+" does not support Methods");
  }

  /*buildClass is not abstract since only Java backend supports class
    only backends that supports Class should overload buildClass  
   */
  protected void buildClass(int deep, String tomName, TomForwardType extendsFwdType, TomTerm superTerm, Declaration declaration, String moduleName) throws IOException {
    throw new TomRuntimeException("Backend does not support Class");
  }

  protected abstract void buildExpNegation(int deep, Expression exp, String moduleName) throws IOException;

  protected abstract void buildExpAnd(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException;
  protected abstract void buildExpOr(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException;
  protected abstract void buildExpGreaterThan(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException;
  protected abstract void buildExpBottom(int deep) throws IOException;
  protected abstract void buildExpTrue(int deep) throws IOException;
  protected abstract void buildExpFalse(int deep) throws IOException;
  protected abstract void buildExpIsEmptyList(int deep, TomName opName, TomType type, TomTerm expList, String moduleName) throws IOException;
  protected abstract void buildExpIsEmptyArray(int deep, TomName opName, TomType type, TomTerm expIndex, TomTerm expArray, String moduleName) throws IOException;
  protected abstract void buildExpEqualTerm(int deep, TomType type, TomTerm exp1,TomTerm exp2, String moduleName) throws IOException;
  protected abstract void buildExpIsFsym(int deep, String opname, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpCast(int deep, TomType type, Expression exp, String moduleName) throws IOException;
  protected abstract void buildExpGetSlot(int deep, String opname, String slotName, TomTerm exp, String moduleName) throws IOException;
  protected abstract void buildExpGetHead(int deep, TomName opName, TomType domain, TomType codomain, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpGetTail(int deep, TomName opName, TomType type1, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpGetSize(int deep, TomName opNameAST, TomType type1, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpGetElement(int deep, TomName opNameAST, TomType domain, TomType codomain, TomTerm varName, TomTerm varIndex, String moduleName) throws IOException;
  protected abstract void buildExpGetSliceList(int deep, String name, TomTerm varBegin, TomTerm varEnd, String moduleName) throws IOException;
  protected abstract void buildExpGetSliceArray(int deep, String name, TomTerm varArray, TomTerm varBegin, TomTerm expEnd, String moduleName) throws IOException;
  protected abstract void buildAssignVar(int deep, TomTerm var, OptionList list, Expression exp, String moduleName) throws IOException ;
  protected abstract void buildLetAssign(int deep, TomTerm var, OptionList list, Expression exp, Instruction body, String moduleName) throws IOException ;
  protected abstract void buildLet(int deep, TomTerm var, OptionList list, TomType tlType, Expression exp, Instruction body, String moduleName) throws IOException ;
  protected abstract void buildLetRef(int deep, TomTerm var, OptionList list, TomType tlType, Expression exp, Instruction body, String moduleName) throws IOException ;
  protected abstract void buildNamedBlock(int deep, String blockName, InstructionList instList, String modulename) throws IOException ;
  protected abstract void buildUnamedBlock(int deep, InstructionList instList, String moduleName) throws IOException ;
  protected abstract void buildIf(int deep, Expression exp, Instruction succes, String moduleName) throws IOException ;
  protected abstract void buildIfWithFailure(int deep, Expression exp, Instruction succes, Instruction failure, String moduleName) throws IOException ;
  protected abstract void buildDoWhile(int deep, Instruction succes, Expression exp, String moduleName) throws IOException;
  protected abstract void buildWhileDo(int deep, Expression exp, Instruction succes, String moduleName) throws IOException;
  protected abstract void buildAddOne(int deep, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildReturn(int deep, TomTerm exp, String moduleName) throws IOException ;
  protected abstract void buildCheckStamp(int deep, TomType type, TomTerm variable, String moduleName) throws IOException ;
  protected abstract void buildCheckInstance(int deep, String typeName,TomType type, Expression exp, Instruction instruction, String moduleName) throws IOException ;
  protected abstract void buildSymbolDecl(int deep, String tomName, String moduleName) throws IOException ;
  protected abstract void buildCheckStampDecl(int deep, String type, String name,
                                              TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildSetStampDecl(int deep, String type, String name,
                                              TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetImplementationDecl(int deep, String type, String name,
                                              TomType tlType, Instruction instr, String moduleName) throws IOException;

  protected abstract void buildIsFsymDecl(int deep, String tomName, String name1,
                                          TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetSlotDecl(int deep, String tomName, String name1,
                                           TomType tlType, Instruction instr, TomName slotName, String moduleName) throws IOException;
  protected abstract void buildTermsEqualDecl(int deep, String name1, String name2,
                                              String type1, String type2, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetHeadDecl(int deep, TomName opNameAST, String varName, String suffix, TomType domain, TomType codomain, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetTailDecl(int deep, TomName opNameAST, String varName, String type, TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildIsEmptyDecl(int deep, TomName opNameAST, String varName, String type,
                                           TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetElementDecl(int deep, TomName opNameAST, String name1, String name2,
                                              String type1, TomType tlType1, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetSizeDecl(int deep, TomName opNameAST, String name1, String type,
                                           TomType tlType, Instruction instr, String moduleName) throws IOException;
 
} // class TomAbstractGenerator
