/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.backend;

import java.io.IOException;

import tom.engine.TomBase;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.tools.OutputCode;
import tom.engine.tools.SymbolTable;
import tom.platform.OptionManager;

import aterm.*;

public abstract class TomAbstractGenerator extends TomBase {

  protected OutputCode output;
  protected OptionManager optionManager;
  protected SymbolTable symbolTable;
  protected boolean prettyMode;

  public TomAbstractGenerator(OutputCode output, OptionManager optionManager,
                              SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
    this.optionManager = optionManager;
    this.output = output;
    this.prettyMode = ((Boolean)optionManager.getOptionValue("pretty")).booleanValue();
  }

  protected SymbolTable getSymbolTable(String moduleName) {
    //TODO//
    //Using of the moduleName
    ////////
    return symbolTable;
  }

  protected TomSymbol getSymbolFromName(String tomName) {
    return getSymbolFromName(tomName, symbolTable);
  }

  protected TomSymbol getSymbolFromType(TomType tomType) {
    return getSymbolFromType(tomType, symbolTable);
  }

  protected TomType getTermType(TomTerm t) {
    return getTermType(t, symbolTable);
  }

  protected TomType getUniversalType() {
    return symbolTable.getUniversalType();
  }
// ------------------------------------------------------------
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_GetSliceArray( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSliceArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSliceArray_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_subjectListName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSubjectListName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_variableBeginAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableBeginAST() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_variableEndAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableEndAST() ;}private static boolean tom_is_fun_sym_GetSliceList( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSliceList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSliceList_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableBeginAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableBeginAST() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableEndAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableEndAST() ;}private static boolean tom_is_fun_sym_GetElement( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetElement() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetElement_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetElement_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElement_kid1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElement_kid2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid2() ;}private static boolean tom_is_fun_sym_GetSize( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSize() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSize_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSize_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_AddOne( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isAddOne() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_AddOne_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_IsEmptyArray( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isIsEmptyArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsEmptyArray_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyArray_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyArray_index( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getIndex() ;}private static boolean tom_is_fun_sym_IsEmptyList( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isIsEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsEmptyList_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyList_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetTail( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetTail() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetTail_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetTail_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetHead( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetHead() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetHead_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetHead_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetHead_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_IsFsym( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isIsFsym() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_make_IsFsym( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_IsFsym(t0, t1); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsFsym_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsFsym_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetSlot( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSlot() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetSlot_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlot_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  String  tom_get_slot_GetSlot_slotNameString( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSlotNameString() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSlot_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_Cast( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isCast() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Cast_astType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Cast_source( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSource() ;}private static boolean tom_is_fun_sym_EqualTerm( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isEqualTerm() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_make_EqualTerm( tom.engine.adt.tomsignature.types.TomType t0,  tom.engine.adt.tomsignature.types.TomTerm t1,  tom.engine.adt.tomsignature.types.TomTerm t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_EqualTerm(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_EqualTerm_tomType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid2() ;}private static boolean tom_is_fun_sym_EqualFunctionSymbol( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isEqualFunctionSymbol() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_EqualFunctionSymbol_astType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getExp1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getExp2() ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isFalseTL() ;}private static boolean tom_is_fun_sym_TrueTL( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isTrueTL() ;}private static boolean tom_is_fun_sym_GreaterThan( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGreaterThan() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_GreaterThan_arg1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg1() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_GreaterThan_arg2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg2() ;}private static boolean tom_is_fun_sym_Or( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isOr() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Or_arg1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg1() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Or_arg2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg2() ;}private static boolean tom_is_fun_sym_And( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isAnd() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_And_arg1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg1() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_And_arg2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg2() ;}private static boolean tom_is_fun_sym_Negation( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isNegation() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_make_Negation( tom.engine.adt.tomsignature.types.Expression t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_Negation(t0); }private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Negation_arg( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg() ;}private static boolean tom_is_fun_sym_Bottom( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isBottom() ;}private static boolean tom_is_fun_sym_TomTermToExpression( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isTomTermToExpression() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToExpression_astTerm( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstTerm() ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TypedAction( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isTypedAction() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_TypedAction_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static  tom.engine.adt.tomsignature.types.Pattern tom_get_slot_TypedAction_positivePattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPositivePattern() ;}private static  tom.engine.adt.tomsignature.types.PatternList tom_get_slot_TypedAction_negativePatternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getNegativePatternList() ;}private static boolean tom_is_fun_sym_CheckInstance( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCheckInstance() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_CheckInstance_astType( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_CheckInstance_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CheckInstance_instruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstruction() ;}private static boolean tom_is_fun_sym_CheckStamp( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCheckStamp() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_CheckStamp_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_CompiledPattern_patternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPatternList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledPattern_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static boolean tom_is_fun_sym_CompiledMatch( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledMatch() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledMatch_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_CompiledMatch_option( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getOption() ;}private static boolean tom_is_fun_sym_NamedBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isNamedBlock() ;}private static  String  tom_get_slot_NamedBlock_blockName( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getBlockName() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_NamedBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_UnamedBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isUnamedBlock() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_UnamedBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isAbstractBlock() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_AbstractBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isNop() ;}private static boolean tom_is_fun_sym_Return( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isReturn() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Return_kid1( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getKid1() ;}private static boolean tom_is_fun_sym_AssignMatchSubject( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isAssignMatchSubject() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_AssignMatchSubject_kid1( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getKid1() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_AssignMatchSubject_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLetAssign() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_LetAssign_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_LetAssign_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_LetAssign_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_LetRef( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLetRef() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_LetRef_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_LetRef_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_LetRef_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLet() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Let_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Let_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_Let_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_Assign( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isAssign() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Assign_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Assign_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static boolean tom_is_fun_sym_WhileDo( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isWhileDo() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_WhileDo_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_WhileDo_doInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getDoInst() ;}private static boolean tom_is_fun_sym_DoWhile( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isDoWhile() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_DoWhile_doInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getDoInst() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_DoWhile_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isIf() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_If_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_succesInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSuccesInst() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_failureInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getFailureInst() ;}private static boolean tom_is_fun_sym_TargetLanguageToInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isTargetLanguageToInstruction() ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage tom_get_slot_TargetLanguageToInstruction_tl( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getTl() ;}private static boolean tom_is_fun_sym_TomTermToInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isTomTermToInstruction() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToInstruction_tom( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getTom() ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TextPosition( tom.engine.adt.tomsignature.types.Position t) {  return  (t!= null) && t.isTextPosition() ;}private static  int  tom_get_slot_TextPosition_line( tom.engine.adt.tomsignature.types.Position t) {  return  t.getLine() ;}private static  int  tom_get_slot_TextPosition_column( tom.engine.adt.tomsignature.types.Position t) {  return  t.getColumn() ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Comment( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isComment() ;}private static  String  tom_get_slot_Comment_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static boolean tom_is_fun_sym_ITL( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isITL() ;}private static  String  tom_get_slot_ITL_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static boolean tom_is_fun_sym_TL( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isTL() ;}private static  String  tom_get_slot_TL_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static  tom.engine.adt.tomsignature.types.Position tom_get_slot_TL_start( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getStart() ;}private static  tom.engine.adt.tomsignature.types.Position tom_get_slot_TL_end( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getEnd() ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isPositionName() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_slot_PositionName_numberList( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getNumberList() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_OriginTracking( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isOriginTracking() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_OriginTracking_astName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstName() ;}private static  int  tom_get_slot_OriginTracking_line( tom.engine.adt.tomsignature.types.Option t) {  return  t.getLine() ;}private static  String  tom_get_slot_OriginTracking_fileName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getFileName() ;}private static boolean tom_is_fun_sym_DefinedSymbol( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isDefinedSymbol() ;}private static boolean tom_is_fun_sym_DeclarationToOption( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isDeclarationToOption() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_DeclarationToOption_astDeclaration( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstDeclaration() ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TLType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTLType() ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage tom_get_slot_TLType_tl( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTl() ;}private static boolean tom_is_fun_sym_ASTTomType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isASTTomType() ;}private static  String  tom_get_slot_ASTTomType_string( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getString() ;}private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tomType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tlType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTlType() ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomsignature.types.TomList t) {  return (t!= null) && t.isSortTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_empty_list_concTomTerm() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static  tom.engine.adt.tomsignature.types.TomList tom_cons_list_concTomTerm( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_head_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_append_list_concTomTerm( tom.engine.adt.tomsignature.types.TomList l1,  tom.engine.adt.tomsignature.types.TomList l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomList tom_get_slice_concTomTerm( tom.engine.adt.tomsignature.types.TomList begin,  tom.engine.adt.tomsignature.types.TomList end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomList)tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomsignature.types.TomList)tom_get_slice_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TomInclude( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTomInclude() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_TomInclude_tomList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomList() ;}private static boolean tom_is_fun_sym_BuildAppendArray( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildAppendArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildAppendArray_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendArray_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendArray_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildConsArray( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildConsArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildConsArray_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsArray_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsArray_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildEmptyArray( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildEmptyArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildEmptyArray_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  int  tom_get_slot_BuildEmptyArray_size( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSize() ;}private static boolean tom_is_fun_sym_BuildAppendList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildAppendList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildAppendList_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendList_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildAppendList_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildConsList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildConsList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildConsList_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsList_headTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getHeadTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_BuildConsList_tailTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTailTerm() ;}private static boolean tom_is_fun_sym_BuildEmptyList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildEmptyList_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_BuildTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildTerm() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildTerm_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_BuildTerm_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  String  tom_get_slot_BuildTerm_moduleName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getModuleName() ;}private static boolean tom_is_fun_sym_BuildConstant( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isBuildConstant() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_BuildConstant( tom.engine.adt.tomsignature.types.TomName t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConstant(t0); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_BuildConstant_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_FunctionCall( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isFunctionCall() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_FunctionCall_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_FunctionCall_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static boolean tom_is_fun_sym_Ref( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRef() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Ref_tomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_Composite( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isComposite() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Composite_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static boolean tom_is_fun_sym_Tom( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTom() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Tom_tomList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomList() ;}private static boolean tom_is_fun_sym_InstructionToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isInstructionToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_InstructionToTomTerm_astInstruction( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_ExpressionToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isExpressionToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_ExpressionToTomTerm_astExpression( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstExpression() ;}private static boolean tom_is_fun_sym_DeclarationToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isDeclarationToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_DeclarationToTomTerm_astDeclaration( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstDeclaration() ;}private static boolean tom_is_fun_sym_TargetLanguageToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTargetLanguageToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage tom_get_slot_TargetLanguageToTomTerm_tl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTl() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_Variable( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomName t1,  tom.engine.adt.tomsignature.types.TomType t2,  tom.engine.adt.tomsignature.types.ConstraintList t3) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Variable(t0, t1, t2, t3); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_AbstractDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isAbstractDecl() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_get_slot_AbstractDecl_declList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getDeclList() ;}private static boolean tom_is_fun_sym_EmptyDeclaration( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isEmptyDeclaration() ;}private static boolean tom_is_fun_sym_ArraySymbolDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isArraySymbolDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_ArraySymbolDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_ListSymbolDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isListSymbolDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_ListSymbolDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_SymbolDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isSymbolDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_SymbolDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_Class( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isClass() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Class_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomForwardType tom_get_slot_Class_extendsType( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getExtendsType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Class_superTerm( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getSuperTerm() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_Class_declaration( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getDeclaration() ;}private static boolean tom_is_fun_sym_MethodDef( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMethodDef() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MethodDef_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_MethodDef_argumentList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getArgumentList() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_MethodDef_codomain( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_MethodDef_throwsType( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getThrowsType() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MethodDef_instruction( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstruction() ;}private static boolean tom_is_fun_sym_FunctionDef( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isFunctionDef() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_FunctionDef_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_FunctionDef_argumentList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getArgumentList() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_FunctionDef_codomain( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_FunctionDef_throwsType( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getThrowsType() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_FunctionDef_instruction( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstruction() ;}private static boolean tom_is_fun_sym_MakeDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_MakeDecl_astType( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_MakeDecl_args( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeAddArray( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeAddArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeAddArray_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varElt( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarElt() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeAddArray_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeAddArray_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeEmptyArray( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeEmptyArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyArray_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeEmptyArray_varSize( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarSize() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeEmptyArray_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeEmptyArray_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetSizeDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetSizeDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSizeDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSizeDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetSizeDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetSizeDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetElementDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetElementDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetElementDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElementDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElementDecl_index( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getIndex() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetElementDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetElementDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeAddList( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeAddList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeAddList_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varElt( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarElt() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeAddList_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeAddList_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeEmptyList( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyList_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeEmptyList_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeEmptyList_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_IsEmptyDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isIsEmptyDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsEmptyDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_IsEmptyDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_IsEmptyDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetTailDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetTailDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetTailDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetTailDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetTailDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetTailDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetHeadDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetHeadDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetHeadDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetHeadDecl_codomain( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetHeadDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetHeadDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetHeadDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_TermsEqualDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isTermsEqualDecl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TermsEqualDecl_termArg1( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getTermArg1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TermsEqualDecl_termArg2( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getTermArg2() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_TermsEqualDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_TermsEqualDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetSlotDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetSlotDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_slotName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSlotDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetSlotDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetSlotDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_IsFsymDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isIsFsymDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsFsymDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsFsymDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_IsFsymDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_IsFsymDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetImplementationDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetImplementationDecl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetImplementationDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetImplementationDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetImplementationDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_SetStampDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isSetStampDecl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_SetStampDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_SetStampDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_SetStampDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_CheckStampDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isCheckStampDecl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_CheckStampDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CheckStampDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_CheckStampDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_TypeTermDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isTypeTermDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_TypeTermDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_get_slot_TypeTermDecl_declarations( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getDeclarations() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_TypeTermDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}  
// ------------------------------------------------------------

  protected TomTerm operatorsTogenerate(TomTerm subject)throws IOException {
    //System.out.println("Subject "+subject);
    //collectMake(subject);
    return subject;
  }

  /*
   * Generate the goal language
   */
  protected void generate(int deep, TomTerm subject, String moduleName)throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if (tom_is_fun_sym_Tom(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1_tomList=tom_get_slot_Tom_tomList(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_l=tom_match1_1_tomList; if ( true ) {


        generateList(deep,tom_l, moduleName);
        return;
       } } } } if (tom_is_fun_sym_TomInclude(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1_tomList=tom_get_slot_TomInclude_tomList(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_l=tom_match1_1_tomList; if ( true ) {


        generateListInclude(deep,tom_l, moduleName);
        return;
       } } } } if (tom_is_fun_sym_Ref(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match1_1); if (tom_is_fun_sym_VariableStar(tom_match1_1_tomTerm) || tom_is_fun_sym_Variable(tom_match1_1_tomTerm) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match1_1_tomTerm; if ( true ) {


        buildRef(deep, tom_term, moduleName);
        return;
       } } } } } if (tom_is_fun_sym_Ref(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match1_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match1_1_tomTerm; if ( true ) {


        generate(deep, tom_term, moduleName);
        return;
       } } } } if (tom_is_fun_sym_BuildConstant(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_BuildConstant_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_name=tom_match1_1_astName_string; if ( true ) {


        output.write(tom_name);
        return;
       } } } } } } if (tom_is_fun_sym_BuildTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_BuildTerm_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_BuildTerm_args(tom_match1_1); { String  tom_match1_1_moduleName=tom_get_slot_BuildTerm_moduleName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_name=tom_match1_1_astName_string; { tom.engine.adt.tomsignature.types.TomList tom_argList=tom_match1_1_args; { String  tom_myModuleName=tom_match1_1_moduleName; if ( true ) {buildTerm(deep,tom_name,tom_argList,tom_myModuleName)









;
        return;
       } } } } } } } } } } if (tom_is_fun_sym_BuildAppendArray(tom_match1_1) || tom_is_fun_sym_BuildConsArray(tom_match1_1) || tom_is_fun_sym_BuildAppendList(tom_match1_1) || tom_is_fun_sym_BuildConsList(tom_match1_1) || tom_is_fun_sym_BuildEmptyArray(tom_match1_1) || tom_is_fun_sym_BuildEmptyList(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_l=tom_match1_1; if ( true ) {


        buildListOrArray(deep, tom_l, moduleName);
        return;
       } } } if (tom_is_fun_sym_FunctionCall(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_FunctionCall_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_FunctionCall_args(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_name=tom_match1_1_astName_string; { tom.engine.adt.tomsignature.types.TomList tom_argList=tom_match1_1_args; if ( true ) {


        buildFunctionCall(deep,tom_name, tom_argList, moduleName);
        return;
       } } } } } } } } if (tom_is_fun_sym_Composite(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1_args=tom_get_slot_Composite_args(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_argList=tom_match1_1_args; if ( true ) {


        generateList(deep,tom_argList, moduleName);
        return;
       } } } } if (tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); if (tom_is_fun_sym_PositionName(tom_match1_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match1_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match1_1_astName); { tom.engine.adt.tomsignature.types.TomNumberList tom_l=tom_match1_1_astName_numberList; if ( true ) {


          /*
           * sans type: re-definition lorsque %variable est utilise
           * avec type: probleme en cas de filtrage dynamique
           */
        output.write("tom" + numberListToIdentifier(tom_l));
        return;
       } } } } } } if (tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_name=tom_match1_1_astName_string; if ( true ) {


        output.write(tom_name);
        return;
       } } } } } } if (tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_VariableStar_astName(tom_match1_1); if (tom_is_fun_sym_PositionName(tom_match1_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match1_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match1_1_astName); { tom.engine.adt.tomsignature.types.TomNumberList tom_l=tom_match1_1_astName_numberList; if ( true ) {


        output.write("tom" + numberListToIdentifier(tom_l));
        return;
       } } } } } } if (tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_VariableStar_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_name=tom_match1_1_astName_string; if ( true ) {


        output.write(tom_name);
        return;
       } } } } } } if (tom_is_fun_sym_TargetLanguageToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match1_1_tl=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match1_1); { tom.engine.adt.tomsignature.types.TargetLanguage tom_t=tom_match1_1_tl; if ( true ) {







        generateTargetLanguage(deep,tom_t, moduleName);
        return;
       } } } } if (tom_is_fun_sym_ExpressionToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match1_1_astExpression=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match1_1); { tom.engine.adt.tomsignature.types.Expression tom_t=tom_match1_1_astExpression; if ( true ) {


        generateExpression(deep,tom_t, moduleName);
        return;
       } } } } if (tom_is_fun_sym_InstructionToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match1_1_astInstruction=tom_get_slot_InstructionToTomTerm_astInstruction(tom_match1_1); { tom.engine.adt.tomsignature.types.Instruction tom_t=tom_match1_1_astInstruction; if ( true ) {


        generateInstruction(deep,tom_t, moduleName);
        return;
       } } } } if (tom_is_fun_sym_DeclarationToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match1_1_astDeclaration=tom_get_slot_DeclarationToTomTerm_astDeclaration(tom_match1_1); { tom.engine.adt.tomsignature.types.Declaration tom_t=tom_match1_1_astDeclaration; if ( true ) {


        generateDeclaration(deep,tom_t, moduleName);
        return;
       } } } } { tom.engine.adt.tomsignature.types.TomTerm tom_t=tom_match1_1; if ( true ) {


        System.out.println("Cannot generate code for: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for: " + tom_t);
       } } } }

  }

  public void generateExpression(int deep, Expression subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1=(( tom.engine.adt.tomsignature.types.Expression)subject); if (tom_is_fun_sym_Negation(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg=tom_get_slot_Negation_arg(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match2_1_arg; if ( true ) {

        buildExpNegation(deep, tom_exp, moduleName);
        return;
       } } } } if (tom_is_fun_sym_And(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_And_arg1(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_And_arg2(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_exp1=tom_match2_1_arg1; { tom.engine.adt.tomsignature.types.Expression tom_exp2=tom_match2_1_arg2; if ( true ) {


        buildExpAnd(deep, tom_exp1, tom_exp2, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_Or(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_Or_arg1(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_Or_arg2(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_exp1=tom_match2_1_arg1; { tom.engine.adt.tomsignature.types.Expression tom_exp2=tom_match2_1_arg2; if ( true ) {


        buildExpOr(deep, tom_exp1, tom_exp2, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_GreaterThan(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_GreaterThan_arg1(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_GreaterThan_arg2(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_exp1=tom_match2_1_arg1; { tom.engine.adt.tomsignature.types.Expression tom_exp2=tom_match2_1_arg2; if ( true ) {


        buildExpGreaterThan(deep, tom_exp1, tom_exp2, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_Bottom(tom_match2_1) ||  false ) { if ( true ) {


        buildExpBottom(deep);
        return;
       } } if (tom_is_fun_sym_TrueTL(tom_match2_1) ||  false ) { if ( true ) {


        buildExpTrue(deep);
        return;
       } } if (tom_is_fun_sym_FalseTL(tom_match2_1) ||  false ) { if ( true ) {


        buildExpFalse(deep);
        return;
       } } if (tom_is_fun_sym_IsEmptyList(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_IsEmptyList_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsEmptyList_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match2_1_opname; { tom.engine.adt.tomsignature.types.TomTerm tom_expList=tom_match2_1_variable; if ( true ) {


        buildExpIsEmptyList(deep, tom_opNameAST, getTermType(tom_expList), tom_expList, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_IsEmptyArray(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_IsEmptyArray_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsEmptyArray_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_index=tom_get_slot_IsEmptyArray_index(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match2_1_opname; { tom.engine.adt.tomsignature.types.TomTerm tom_expArray=tom_match2_1_variable; { tom.engine.adt.tomsignature.types.TomTerm tom_expIndex=tom_match2_1_index; if ( true ) {


        buildExpIsEmptyArray(deep, tom_opNameAST, getTermType(tom_expArray), tom_expIndex, tom_expArray, moduleName);
        return;
       } } } } } } } } if (tom_is_fun_sym_EqualFunctionSymbol(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType=tom_get_slot_EqualFunctionSymbol_astType(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match2_1_astType; { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_exp1; if (tom_is_fun_sym_RecordAppl(tom_match2_1_exp2) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_exp2_nameList=tom_get_slot_RecordAppl_nameList(tom_match2_1_exp2); if (tom_is_fun_sym_concTomName(tom_match2_1_exp2_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match2_1_exp2_nameList_list1=tom_match2_1_exp2_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match2_1_exp2_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_exp2_nameList_1=tom_get_head_concTomName_NameList(tom_match2_1_exp2_nameList_list1);tom_match2_1_exp2_nameList_list1=tom_get_tail_concTomName_NameList(tom_match2_1_exp2_nameList_list1); if (tom_is_fun_sym_Name(tom_match2_1_exp2_nameList_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_nameAST=tom_match2_1_exp2_nameList_1; { String  tom_match2_1_exp2_nameList_1_string=tom_get_slot_Name_string(tom_match2_1_exp2_nameList_1); { String  tom_opName=tom_match2_1_exp2_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match2_1_exp2_nameList_list1)) { if ( true ) {


        if(getSymbolTable(moduleName).isBuiltinType(getTomType(tom_type))) {
          TomSymbol tomSymbol = getSymbolTable(moduleName).getSymbolFromName(tom_opName);
          if(isListOperator(tomSymbol) || isArrayOperator(tomSymbol)) {
            generateExpression(deep,tom_make_IsFsym(tom_nameAST,tom_exp), moduleName);
          } else {
            generateExpression(deep,tom_make_EqualTerm(tom_type,tom_make_BuildConstant(tom_nameAST),tom_exp), moduleName);
          }
        } else {
          generateExpression(deep,tom_make_IsFsym(tom_nameAST,tom_exp), moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_EqualTerm(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_tomType=tom_get_slot_EqualTerm_tomType(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid1=tom_get_slot_EqualTerm_kid1(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid2=tom_get_slot_EqualTerm_kid2(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match2_1_tomType; { tom.engine.adt.tomsignature.types.TomTerm tom_exp1=tom_match2_1_kid1; { tom.engine.adt.tomsignature.types.TomTerm tom_exp2=tom_match2_1_kid2; if ( true ) {buildExpEqualTerm(deep,tom_type,tom_exp1,tom_exp2,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_IsFsym(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_IsFsym_astName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_IsFsym_variable(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  tom_opname=tom_match2_1_astName_string; { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {


        buildExpIsFsym(deep, tom_opname, tom_exp, moduleName);
        return;
       } } } } } } } } if (tom_is_fun_sym_Cast(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType=tom_get_slot_Cast_astType(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_source=tom_get_slot_Cast_source(tom_match2_1); if (tom_is_fun_sym_Type(tom_match2_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType_tomType=tom_get_slot_Type_tomType(tom_match2_1_astType); { tom.engine.adt.tomsignature.types.TomType tom_match2_1_astType_tlType=tom_get_slot_Type_tlType(tom_match2_1_astType); if (tom_is_fun_sym_TLType(tom_match2_1_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match2_1_astType_tlType; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match2_1_source; if ( true ) {


        buildExpCast(deep, tom_tlType, tom_exp, moduleName);
        return;
       } } } } } } } } } } if (tom_is_fun_sym_GetSlot(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetSlot_codomain(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSlot_astName(tom_match2_1); { String  tom_match2_1_slotNameString=tom_get_slot_GetSlot_slotNameString(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetSlot_variable(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  tom_opname=tom_match2_1_astName_string; { String  tom_slotName=tom_match2_1_slotNameString; if (tom_is_fun_sym_Variable(tom_match2_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match2_1_variable; if ( true ) {buildExpGetSlot(deep,tom_opname,tom_slotName,tom_var,moduleName)


;
        return;
       } } } } } } } } } } } } if (tom_is_fun_sym_GetHead(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetHead_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetHead_codomain(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetHead_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match2_1_opname; { tom.engine.adt.tomsignature.types.TomType tom_codomain=tom_match2_1_codomain; { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {buildExpGetHead(deep,tom_opNameAST,getTermType(tom_exp),tom_codomain,tom_exp,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_GetTail(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetTail_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetTail_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match2_1_opname; { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {


        buildExpGetTail(deep, tom_opNameAST, getTermType(tom_exp), tom_exp, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_AddOne(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_AddOne_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {


        buildAddOne(deep, tom_exp, moduleName);
        return;
       } } } } if (tom_is_fun_sym_GetSize(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetSize_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variable=tom_get_slot_GetSize_variable(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match2_1_opname; { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match2_1_variable; if ( true ) {


        buildExpGetSize(deep,tom_opNameAST,getTermType(tom_exp), tom_exp, moduleName);
        return;
       } } } } } } if (tom_is_fun_sym_GetElement(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_opname=tom_get_slot_GetElement_opname(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_match2_1_codomain=tom_get_slot_GetElement_codomain(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid1=tom_get_slot_GetElement_kid1(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_kid2=tom_get_slot_GetElement_kid2(tom_match2_1); { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match2_1_opname; { tom.engine.adt.tomsignature.types.TomType tom_codomain=tom_match2_1_codomain; { tom.engine.adt.tomsignature.types.TomTerm tom_varName=tom_match2_1_kid1; { tom.engine.adt.tomsignature.types.TomTerm tom_varIndex=tom_match2_1_kid2; if ( true ) {


        buildExpGetElement(deep,tom_opNameAST,getTermType(tom_varName),tom_codomain, tom_varName, tom_varIndex, moduleName);
        return;
       } } } } } } } } } } if (tom_is_fun_sym_GetSliceList(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSliceList_astName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableBeginAST=tom_get_slot_GetSliceList_variableBeginAST(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableEndAST=tom_get_slot_GetSliceList_variableEndAST(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  tom_name=tom_match2_1_astName_string; { tom.engine.adt.tomsignature.types.TomTerm tom_varBegin=tom_match2_1_variableBeginAST; { tom.engine.adt.tomsignature.types.TomTerm tom_varEnd=tom_match2_1_variableEndAST; if ( true ) {


        buildExpGetSliceList(deep, tom_name, tom_varBegin, tom_varEnd, moduleName);
        return;
       } } } } } } } } } } if (tom_is_fun_sym_GetSliceArray(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_GetSliceArray_astName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_subjectListName=tom_get_slot_GetSliceArray_subjectListName(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableBeginAST=tom_get_slot_GetSliceArray_variableBeginAST(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_variableEndAST=tom_get_slot_GetSliceArray_variableEndAST(tom_match2_1); if (tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  tom_name=tom_match2_1_astName_string; { tom.engine.adt.tomsignature.types.TomTerm tom_varArray=tom_match2_1_subjectListName; { tom.engine.adt.tomsignature.types.TomTerm tom_varBegin=tom_match2_1_variableBeginAST; { tom.engine.adt.tomsignature.types.TomTerm tom_expEnd=tom_match2_1_variableEndAST; if ( true ) {


        buildExpGetSliceArray(deep, tom_name, tom_varArray, tom_varBegin, tom_expEnd, moduleName);
        return;
       } } } } } } } } } } } } if (tom_is_fun_sym_TomTermToExpression(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match2_1_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match2_1); { tom.engine.adt.tomsignature.types.TomTerm tom_t=tom_match2_1_astTerm; if ( true ) {


        generate(deep,tom_t, moduleName);
        return;
       } } } } { tom.engine.adt.tomsignature.types.Expression tom_t=tom_match2_1; if ( true ) {


        System.out.println("Cannot generate code for expression: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for expression: " + tom_t);
       } } } }

  }

  public void generateInstruction(int deep, Instruction subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1=(( tom.engine.adt.tomsignature.types.Instruction)subject); if (tom_is_fun_sym_TargetLanguageToInstruction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match3_1_tl=tom_get_slot_TargetLanguageToInstruction_tl(tom_match3_1); { tom.engine.adt.tomsignature.types.TargetLanguage tom_t=tom_match3_1_tl; if ( true ) {generateTargetLanguage(deep,tom_t,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_TomTermToInstruction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_tom=tom_get_slot_TomTermToInstruction_tom(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_t=tom_match3_1_tom; if ( true ) {generate(deep,tom_t,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_Nop(tom_match3_1) ||  false ) { if ( true ) {


        return;
       } } if (tom_is_fun_sym_AssignMatchSubject(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_kid1=tom_get_slot_AssignMatchSubject_kid1(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_AssignMatchSubject_source(tom_match3_1); if (tom_is_fun_sym_Variable(tom_match3_1_kid1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_kid1; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_kid1_option=tom_get_slot_Variable_option(tom_match3_1_kid1); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match3_1_kid1_option; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_source; if ( true ) {buildAssignVar(deep,tom_var,tom_option,tom_exp,moduleName)


;
        return;
       } } } } } } } } } if (tom_is_fun_sym_Assign(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Assign_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Assign_source(tom_match3_1); if (tom_is_fun_sym_UnamedVariableStar(tom_match3_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_variable) ||  false ) { if ( true ) {


        return;
       } } } } } if (tom_is_fun_sym_Assign(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Assign_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Assign_source(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match3_1_variable_option; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_source; if ( true ) {buildAssignVar(deep,tom_var,tom_option,tom_exp,moduleName)


;
        return;
       } } } } } } } } } } if (tom_is_fun_sym_LetAssign(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_LetAssign_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_LetAssign_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match3_1_variable_option; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match3_1_astInstruction; if ( true ) {buildLetAssign(deep,tom_var,tom_option,tom_exp,tom_body,moduleName)


;
        return;
       } } } } } } } } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable= null ; { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source= null ; { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction= null ; if (tom_is_fun_sym_Let(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_Let_variable(tom_match3_1);tom_match3_1_source=tom_get_slot_Let_source(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetRef(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_LetRef_variable(tom_match3_1);tom_match3_1_source=tom_get_slot_LetRef_source(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetAssign(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_LetAssign_variable(tom_match3_1);tom_match3_1_source=tom_get_slot_LetAssign_source(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match3_1); } } } if (tom_bool_match3_1) { if (tom_is_fun_sym_UnamedVariableStar(tom_match3_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match3_1_astInstruction; if ( true ) {generateInstruction(deep,tom_body,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_Let(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_Let_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Let_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_Variable_astType(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_VariableStar_astType(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { { tom.engine.adt.tomsignature.types.OptionList tom_list=tom_match3_1_variable_option; if (tom_is_fun_sym_Type(tom_match3_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match3_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match3_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match3_1_astInstruction; if ( true ) {buildLet(deep,tom_var,tom_list,tom_tlType,tom_exp,tom_body,moduleName)


;
        return;
       } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_LetRef(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_LetRef_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_LetRef_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match3_1_variable; {boolean tom_bool_match3_1_variable= false ; { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_variable_option= null ; { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType= null ; if (tom_is_fun_sym_Variable(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_Variable_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_Variable_astType(tom_match3_1_variable); } else { if (tom_is_fun_sym_VariableStar(tom_match3_1_variable)) {tom_bool_match3_1_variable= true ;tom_match3_1_variable_option=tom_get_slot_VariableStar_option(tom_match3_1_variable);tom_match3_1_variable_astType=tom_get_slot_VariableStar_astType(tom_match3_1_variable); } } if (tom_bool_match3_1_variable) { { tom.engine.adt.tomsignature.types.OptionList tom_list=tom_match3_1_variable_option; if (tom_is_fun_sym_Type(tom_match3_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match3_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match3_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match3_1_astInstruction; if ( true ) {buildLetRef(deep,tom_var,tom_list,tom_tlType,tom_exp,tom_body,moduleName)


;
        return;
       } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_AbstractBlock_instList(tom_match3_1); { tom.engine.adt.tomsignature.types.InstructionList tom_instList=tom_match3_1_instList; if ( true ) {


        //`generateInstructionList(deep, instList);
        buildInstructionSequence(deep,tom_instList,moduleName);
        return;
       } } } } if (tom_is_fun_sym_UnamedBlock(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_UnamedBlock_instList(tom_match3_1); { tom.engine.adt.tomsignature.types.InstructionList tom_instList=tom_match3_1_instList; if ( true ) {buildUnamedBlock(deep,tom_instList,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_NamedBlock(tom_match3_1) ||  false ) { { String  tom_match3_1_blockName=tom_get_slot_NamedBlock_blockName(tom_match3_1); { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList=tom_get_slot_NamedBlock_instList(tom_match3_1); { String  tom_blockName=tom_match3_1_blockName; { tom.engine.adt.tomsignature.types.InstructionList tom_instList=tom_match3_1_instList; if ( true ) {buildNamedBlock(deep,tom_blockName,tom_instList,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_condition; { tom.engine.adt.tomsignature.types.Instruction tom_succesList=tom_match3_1_succesInst; if (tom_is_fun_sym_Nop(tom_match3_1_failureInst) ||  false ) { if ( true ) {buildIf(deep,tom_exp,tom_succesList,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_condition; if (tom_is_fun_sym_Nop(tom_match3_1_succesInst) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_failureList=tom_match3_1_failureInst; if ( true ) {buildIf(deep,tom_make_Negation(tom_exp),tom_failureList,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_condition; { tom.engine.adt.tomsignature.types.Instruction tom_succesList=tom_match3_1_succesInst; { tom.engine.adt.tomsignature.types.Instruction tom_failureList=tom_match3_1_failureInst; if ( true ) {buildIfWithFailure(deep,tom_exp,tom_succesList,tom_failureList,moduleName)


;
        return;
       } } } } } } } } if (tom_is_fun_sym_DoWhile(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_doInst=tom_get_slot_DoWhile_doInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_DoWhile_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_succes=tom_match3_1_doInst; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_condition; if ( true ) {buildDoWhile(deep,tom_succes,tom_exp,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_WhileDo(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_WhileDo_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_doInst=tom_get_slot_WhileDo_doInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_condition; { tom.engine.adt.tomsignature.types.Instruction tom_succes=tom_match3_1_doInst; if ( true ) {buildWhileDo(deep,tom_exp,tom_succes,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_TypedAction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match3_1); if (tom_is_fun_sym_AbstractBlock(tom_match3_1_astInstruction) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_astInstruction_instList=tom_get_slot_AbstractBlock_instList(tom_match3_1_astInstruction); { tom.engine.adt.tomsignature.types.InstructionList tom_instructionList=tom_match3_1_astInstruction_instList; if ( true ) {generateInstructionList(deep,tom_instructionList,moduleName)


;
        return;
       } } } } } } if (tom_is_fun_sym_TypedAction(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction=tom_get_slot_TypedAction_astInstruction(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_inst=tom_match3_1_astInstruction; if ( true ) {generateInstruction(deep,tom_inst,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_Return(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_kid1=tom_get_slot_Return_kid1(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_exp=tom_match3_1_kid1; if ( true ) {buildReturn(deep,tom_exp,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_CompiledMatch(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_automataInst=tom_get_slot_CompiledMatch_automataInst(tom_match3_1); { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option=tom_get_slot_CompiledMatch_option(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match3_1_automataInst; if ( true ) {


        //TODO moduleName
        generateInstruction(deep,tom_instruction,moduleName);
        return;
       } } } } } if (tom_is_fun_sym_CompiledPattern(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match3_1_patternList=tom_get_slot_CompiledPattern_patternList(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match3_1_automataInst; if ( true ) {generateInstruction(deep,tom_instruction,moduleName)


;
        return;
       } } } } } if (tom_is_fun_sym_CheckStamp(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_CheckStamp_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_variable=tom_match3_1_variable; if ( true ) {buildCheckStamp(deep,getTermType(tom_variable),tom_variable,moduleName)


;
        return;
       } } } } if (tom_is_fun_sym_CheckInstance(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_astType=tom_get_slot_CheckInstance_astType(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_CheckInstance_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_instruction=tom_get_slot_CheckInstance_instruction(tom_match3_1); if (tom_is_fun_sym_Type(tom_match3_1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1_astType_tomType=tom_get_slot_Type_tomType(tom_match3_1_astType); { tom.engine.adt.tomsignature.types.TomType tom_match3_1_astType_tlType=tom_get_slot_Type_tlType(tom_match3_1_astType); if (tom_is_fun_sym_ASTTomType(tom_match3_1_astType_tomType) ||  false ) { { String  tom_match3_1_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match3_1_astType_tomType); { String  tom_typeName=tom_match3_1_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match3_1_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match3_1_astType_tlType; { tom.engine.adt.tomsignature.types.Expression tom_exp=tom_match3_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match3_1_instruction; if ( true ) {buildCheckInstance(deep,tom_typeName,tom_tlType,tom_exp,tom_instruction,moduleName)


;
        return;
       } } } } } } } } } } } } } } } { tom.engine.adt.tomsignature.types.Instruction tom_t=tom_match3_1; if ( true ) {


        System.out.println("Cannot generate code for instruction: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for instruction: " + tom_t);
       } } } }

  }

  public void generateTargetLanguage(int deep, TargetLanguage subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.TargetLanguage) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match4_1=(( tom.engine.adt.tomsignature.types.TargetLanguage)subject); if (tom_is_fun_sym_TL(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_TL_code(tom_match4_1); { tom.engine.adt.tomsignature.types.Position tom_match4_1_start=tom_get_slot_TL_start(tom_match4_1); { tom.engine.adt.tomsignature.types.Position tom_match4_1_end=tom_get_slot_TL_end(tom_match4_1); { String  tom_t=tom_match4_1_code; if (tom_is_fun_sym_TextPosition(tom_match4_1_start) ||  false ) { { int  tom_match4_1_start_line=tom_get_slot_TextPosition_line(tom_match4_1_start); { int  tom_startLine=tom_match4_1_start_line; if (tom_is_fun_sym_TextPosition(tom_match4_1_end) ||  false ) { { int  tom_match4_1_end_line=tom_get_slot_TextPosition_line(tom_match4_1_end); { int  tom_endLine=tom_match4_1_end_line; if ( true ) {

        output.write(deep, tom_t, tom_startLine, tom_endLine- tom_startLine);
        return;
       } } } } } } } } } } } } if (tom_is_fun_sym_ITL(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_ITL_code(tom_match4_1); { String  tom_t=tom_match4_1_code; if ( true ) {


        output.write(tom_t);
        return;
       } } } } if (tom_is_fun_sym_Comment(tom_match4_1) ||  false ) { { String  tom_match4_1_code=tom_get_slot_Comment_code(tom_match4_1); { String  tom_t=tom_match4_1_code; if ( true ) {buildComment(deep,tom_t)


;
        return;
       } } } } { tom.engine.adt.tomsignature.types.TargetLanguage tom_t=tom_match4_1; if ( true ) {


        System.out.println("Cannot generate code for TL: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for TL: " + tom_t);
       } } } }

  }

  public void generateOption(int deep, Option subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match5_1=(( tom.engine.adt.tomsignature.types.Option)subject); if (tom_is_fun_sym_DeclarationToOption(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match5_1_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match5_1); { tom.engine.adt.tomsignature.types.Declaration tom_decl=tom_match5_1_astDeclaration; if ( true ) {generateDeclaration(deep,tom_decl,moduleName)

;
        return;
       } } } } if (tom_is_fun_sym_OriginTracking(tom_match5_1) ||  false ) { if ( true ) {
 return;  } } if (tom_is_fun_sym_DefinedSymbol(tom_match5_1) ||  false ) { if ( true ) {
 return;  } } { tom.engine.adt.tomsignature.types.Option tom_t=tom_match5_1; if ( true ) {


        System.out.println("Cannot generate code for option: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for option: " + tom_t);
       } } } }

  }

  public void generateDeclaration(int deep, Declaration subject, String moduleName) throws IOException {
     if(subject instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match6_1=(( tom.engine.adt.tomsignature.types.Declaration)subject); if (tom_is_fun_sym_EmptyDeclaration(tom_match6_1) ||  false ) { if ( true ) {

        return;
       } } if (tom_is_fun_sym_AbstractDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.DeclarationList tom_match6_1_declList=tom_get_slot_AbstractDecl_declList(tom_match6_1); { tom.engine.adt.tomsignature.types.DeclarationList tom_declList=tom_match6_1_declList; if ( true ) {


        //`generateInstructionList(deep, instList);
        buildDeclarationSequence(deep,tom_declList,moduleName);
        return;
       } } } } if (tom_is_fun_sym_FunctionDef(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_FunctionDef_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_argumentList=tom_get_slot_FunctionDef_argumentList(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain=tom_get_slot_FunctionDef_codomain(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_throwsType=tom_get_slot_FunctionDef_throwsType(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instruction=tom_get_slot_FunctionDef_instruction(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; { tom.engine.adt.tomsignature.types.TomList tom_argList=tom_match6_1_argumentList; { tom.engine.adt.tomsignature.types.TomType tom_codomain=tom_match6_1_codomain; { tom.engine.adt.tomsignature.types.TomType tom_throwsType=tom_match6_1_throwsType; { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match6_1_instruction; if ( true ) {buildFunctionDef(deep,tom_tomName,tom_argList,tom_codomain,tom_throwsType,tom_instruction,moduleName)


;
        return;
       } } } } } } } } } } } } } } if (tom_is_fun_sym_MethodDef(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MethodDef_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_argumentList=tom_get_slot_MethodDef_argumentList(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain=tom_get_slot_MethodDef_codomain(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_throwsType=tom_get_slot_MethodDef_throwsType(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instruction=tom_get_slot_MethodDef_instruction(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; { tom.engine.adt.tomsignature.types.TomList tom_argList=tom_match6_1_argumentList; { tom.engine.adt.tomsignature.types.TomType tom_codomain=tom_match6_1_codomain; { tom.engine.adt.tomsignature.types.TomType tom_throwsType=tom_match6_1_throwsType; { tom.engine.adt.tomsignature.types.Instruction tom_instruction=tom_match6_1_instruction; if ( true ) {buildMethodDef(deep,tom_tomName,tom_argList,tom_codomain,tom_throwsType,tom_instruction,moduleName)


;
        return;
       } } } } } } } } } } } } } } if (tom_is_fun_sym_Class(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_Class_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomForwardType tom_match6_1_extendsType=tom_get_slot_Class_extendsType(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_superTerm=tom_get_slot_Class_superTerm(tom_match6_1); { tom.engine.adt.tomsignature.types.Declaration tom_match6_1_declaration=tom_get_slot_Class_declaration(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; { tom.engine.adt.tomsignature.types.TomForwardType tom_extendsFwdType=tom_match6_1_extendsType; { tom.engine.adt.tomsignature.types.TomTerm tom_superTerm=tom_match6_1_superTerm; { tom.engine.adt.tomsignature.types.Declaration tom_declaration=tom_match6_1_declaration; if ( true ) {buildClass(deep,tom_tomName,tom_extendsFwdType,tom_superTerm,tom_declaration,moduleName)


;
        return;
       } } } } } } } } } } } } if (tom_is_fun_sym_SymbolDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_SymbolDecl_astName(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if ( true ) {buildSymbolDecl(deep,tom_tomName,moduleName)


;
        return ;
       } } } } } } if (tom_is_fun_sym_ArraySymbolDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_ArraySymbolDecl_astName(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if ( true ) {


        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_tomName) 
         ||getSymbolTable(moduleName).isUsedSymbolDestructor(tom_tomName)) {
          buildSymbolDecl(deep,tom_tomName,moduleName);
          genDeclArray(tom_tomName,moduleName);
        }
        return ;
       } } } } } } if (tom_is_fun_sym_ListSymbolDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_ListSymbolDecl_astName(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if ( true ) {


        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_tomName) 
         ||getSymbolTable(moduleName).isUsedSymbolDestructor(tom_tomName)) {
          buildSymbolDecl(deep,tom_tomName,moduleName);
          genDeclList(tom_tomName,moduleName);
        }
        return ;
       } } } } } } if (tom_is_fun_sym_CheckStampDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_CheckStampDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_CheckStampDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_CheckStampDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_name=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_type=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {





        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_name)) {
          buildCheckStampDecl(deep,tom_type,tom_name,tom_tlType,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_SetStampDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_SetStampDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_SetStampDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_SetStampDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_name=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_type=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {




        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_name)) {
          buildSetStampDecl(deep,tom_type,tom_name,tom_tlType,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetImplementationDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetImplementationDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetImplementationDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_GetImplementationDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_name=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_type=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {




        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_name)) {
          buildGetImplementationDecl(deep,tom_type,tom_name,tom_tlType,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_IsFsymDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_IsFsymDecl_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_IsFsymDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_IsFsymDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_IsFsymDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_name=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {



        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_tomName)) {
          buildIsFsymDecl(deep,tom_tomName,tom_name,tom_tlType,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetSlotDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_GetSlotDecl_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomName tom_match6_1_slotName=tom_get_slot_GetSlotDecl_slotName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetSlotDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetSlotDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_tomName=tom_match6_1_astName_string; { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match6_1_slotName; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_name=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {





        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_tomName)) {
          buildGetSlotDecl(deep,tom_tomName,tom_name,tom_tlType,tom_instr,tom_slotName,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_TermsEqualDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_termArg1=tom_get_slot_TermsEqualDecl_termArg1(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_termArg2=tom_get_slot_TermsEqualDecl_termArg2(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_TermsEqualDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_TermsEqualDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_termArg1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_termArg1_astName=tom_get_slot_Variable_astName(tom_match6_1_termArg1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType=tom_get_slot_Variable_astType(tom_match6_1_termArg1); if (tom_is_fun_sym_Name(tom_match6_1_termArg1_astName) ||  false ) { { String  tom_match6_1_termArg1_astName_string=tom_get_slot_Name_string(tom_match6_1_termArg1_astName); { String  tom_name1=tom_match6_1_termArg1_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_termArg1_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_termArg1_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg1_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_termArg1_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_termArg1_astType_tomType) ||  false ) { { String  tom_match6_1_termArg1_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_termArg1_astType_tomType); { String  tom_type1=tom_match6_1_termArg1_astType_tomType_string; if (tom_is_fun_sym_Variable(tom_match6_1_termArg2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_termArg2_astName=tom_get_slot_Variable_astName(tom_match6_1_termArg2); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType=tom_get_slot_Variable_astType(tom_match6_1_termArg2); if (tom_is_fun_sym_Name(tom_match6_1_termArg2_astName) ||  false ) { { String  tom_match6_1_termArg2_astName_string=tom_get_slot_Name_string(tom_match6_1_termArg2_astName); { String  tom_name2=tom_match6_1_termArg2_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_termArg2_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_termArg2_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_termArg2_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_termArg2_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_termArg2_astType_tomType) ||  false ) { { String  tom_match6_1_termArg2_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_termArg2_astType_tomType); { String  tom_type2=tom_match6_1_termArg2_astType_tomType_string; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {buildTermsEqualDecl(deep,tom_name1,tom_name2,tom_type1,tom_type2,tom_instr,moduleName)




;
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetHeadDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetHeadDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain=tom_get_slot_GetHeadDecl_codomain(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetHeadDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetHeadDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match6_1_opname; { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); { String  tom_opname=tom_match6_1_opname_string; if (tom_is_fun_sym_Type(tom_match6_1_codomain) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_codomain_tlType=tom_get_slot_Type_tlType(tom_match6_1_codomain); { tom.engine.adt.tomsignature.types.TomType tom_codomain=tom_match6_1_codomain_tlType; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_varName=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_suffix=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_domain=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {





        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname) 
         ||getSymbolTable(moduleName).isUsedSymbolDestructor(tom_opname)) {
          buildGetHeadDecl(deep,tom_opNameAST,tom_varName,tom_suffix,tom_domain,tom_codomain,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetTailDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetTailDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetTailDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetTailDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match6_1_opname; { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); { String  tom_opname=tom_match6_1_opname_string; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_varName=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_type=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {




        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname) 
         ||getSymbolTable(moduleName).isUsedSymbolDestructor(tom_opname)) {
          buildGetTailDecl(deep,tom_opNameAST,tom_varName,tom_type,tom_tlType,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_IsEmptyDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_IsEmptyDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_IsEmptyDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_IsEmptyDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match6_1_opname; { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); { String  tom_opname=tom_match6_1_opname_string; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_varName=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_type=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {




        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname) 
         ||getSymbolTable(moduleName).isUsedSymbolDestructor(tom_opname)) {
          buildIsEmptyDecl(deep,tom_opNameAST,tom_varName,tom_type,tom_tlType,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeEmptyList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeEmptyList_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeEmptyList_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeEmptyList_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {


        TomType returnType = getSymbolCodomain(getSymbolFromName(tom_opname));
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname) 
         ||getSymbolTable(moduleName).isUsedSymbolDestructor(tom_opname)) {
          genDeclMake("tom_empty_list_" + tom_opname,returnType,tom_empty_list_concTomTerm(),tom_instr,moduleName);
        }
        return;
       } } } } } } } } } if (tom_is_fun_sym_MakeAddList(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeAddList_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varElt=tom_get_slot_MakeAddList_varElt(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varList=tom_get_slot_MakeAddList_varList(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeAddList_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeAddList_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_varElt) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_elt=tom_match6_1_varElt; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType=tom_get_slot_Variable_astType(tom_match6_1_varElt); if (tom_is_fun_sym_Type(tom_match6_1_varElt_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varElt_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varElt_astType_tlType) ||  false ) { if (tom_is_fun_sym_Variable(tom_match6_1_varList) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_list=tom_match6_1_varList; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType=tom_get_slot_Variable_astType(tom_match6_1_varList); if (tom_is_fun_sym_Type(tom_match6_1_varList_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_fullListType=tom_match6_1_varList_astType; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varList_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varList_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {





        TomType returnType = tom_fullListType;
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname) 
         ||getSymbolTable(moduleName).isUsedSymbolDestructor(tom_opname)) {
          genDeclMake("tom_cons_list_" + tom_opname,returnType,tom_cons_list_concTomTerm(tom_elt,tom_cons_list_concTomTerm(tom_list,tom_empty_list_concTomTerm())),tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetElementDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetElementDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetElementDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_index=tom_get_slot_GetElementDecl_index(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetElementDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match6_1_opname; { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); { String  tom_opname=tom_match6_1_opname_string; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_name1=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_type1=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType1=tom_match6_1_variable_astType_tlType; if (tom_is_fun_sym_Variable(tom_match6_1_index) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_index_astName=tom_get_slot_Variable_astName(tom_match6_1_index); if (tom_is_fun_sym_Name(tom_match6_1_index_astName) ||  false ) { { String  tom_match6_1_index_astName_string=tom_get_slot_Name_string(tom_match6_1_index_astName); { String  tom_name2=tom_match6_1_index_astName_string; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {





        if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_opname)) {
          buildGetElementDecl(deep,tom_opNameAST,tom_name1,tom_name2,tom_type1,tom_tlType1,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetSizeDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_opname=tom_get_slot_GetSizeDecl_opname(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_GetSizeDecl_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_GetSizeDecl_instr(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_opname) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_opNameAST=tom_match6_1_opname; { String  tom_match6_1_opname_string=tom_get_slot_Name_string(tom_match6_1_opname); { String  tom_opname=tom_match6_1_opname_string; if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType=tom_get_slot_Variable_astType(tom_match6_1_variable); if (tom_is_fun_sym_Name(tom_match6_1_variable_astName) ||  false ) { { String  tom_match6_1_variable_astName_string=tom_get_slot_Name_string(tom_match6_1_variable_astName); { String  tom_name=tom_match6_1_variable_astName_string; if (tom_is_fun_sym_Type(tom_match6_1_variable_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tomType=tom_get_slot_Type_tomType(tom_match6_1_variable_astType); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_variable_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_variable_astType); if (tom_is_fun_sym_ASTTomType(tom_match6_1_variable_astType_tomType) ||  false ) { { String  tom_match6_1_variable_astType_tomType_string=tom_get_slot_ASTTomType_string(tom_match6_1_variable_astType_tomType); { String  tom_type=tom_match6_1_variable_astType_tomType_string; if (tom_is_fun_sym_TLType(tom_match6_1_variable_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match6_1_variable_astType_tlType; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {





					if(getSymbolTable(moduleName).isUsedSymbolDestructor(tom_opname)) {
						buildGetSizeDecl(deep,tom_opNameAST,tom_name,tom_type,tom_tlType,tom_instr,moduleName);
					}
					return;
			 } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeEmptyArray(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeEmptyArray_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varSize=tom_get_slot_MakeEmptyArray_varSize(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeEmptyArray_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeEmptyArray_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_varSize) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match6_1_varSize_option=tom_get_slot_Variable_option(tom_match6_1_varSize); { tom.engine.adt.tomsignature.types.TomName tom_match6_1_varSize_astName=tom_get_slot_Variable_astName(tom_match6_1_varSize); { tom.engine.adt.tomsignature.types.ConstraintList tom_match6_1_varSize_constraints=tom_get_slot_Variable_constraints(tom_match6_1_varSize); { tom.engine.adt.tomsignature.types.OptionList tom_option=tom_match6_1_varSize_option; { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match6_1_varSize_astName; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraints=tom_match6_1_varSize_constraints; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {




        TomType returnType = getSymbolCodomain(getSymbolFromName(tom_opname));
        TomTerm newVar = tom_make_Variable(tom_option,tom_name,getSymbolTable(moduleName).getIntType(),tom_constraints);
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_empty_array_" + tom_opname,returnType,tom_cons_list_concTomTerm(newVar,tom_empty_list_concTomTerm()),tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeAddArray(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeAddArray_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varElt=tom_get_slot_MakeAddArray_varElt(tom_match6_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_varList=tom_get_slot_MakeAddArray_varList(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeAddArray_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeAddArray_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; if (tom_is_fun_sym_Variable(tom_match6_1_varElt) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_elt=tom_match6_1_varElt; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType=tom_get_slot_Variable_astType(tom_match6_1_varElt); if (tom_is_fun_sym_Type(tom_match6_1_varElt_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varElt_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varElt_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varElt_astType_tlType) ||  false ) { if (tom_is_fun_sym_Variable(tom_match6_1_varList) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_list=tom_match6_1_varList; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType=tom_get_slot_Variable_astType(tom_match6_1_varList); if (tom_is_fun_sym_Type(tom_match6_1_varList_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_fullArrayType=tom_match6_1_varList_astType; { tom.engine.adt.tomsignature.types.TomType tom_match6_1_varList_astType_tlType=tom_get_slot_Type_tlType(tom_match6_1_varList_astType); if (tom_is_fun_sym_TLType(tom_match6_1_varList_astType_tlType) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {





        TomType returnType = tom_fullArrayType;
        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_cons_array_" + tom_opname,returnType,tom_cons_list_concTomTerm(tom_elt,tom_cons_list_concTomTerm(tom_list,tom_empty_list_concTomTerm())),tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_MakeDecl_astName(tom_match6_1); { tom.engine.adt.tomsignature.types.TomType tom_match6_1_astType=tom_get_slot_MakeDecl_astType(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_match6_1_args=tom_get_slot_MakeDecl_args(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instr=tom_get_slot_MakeDecl_instr(tom_match6_1); { tom.engine.adt.tomsignature.types.Option tom_match6_1_orgTrack=tom_get_slot_MakeDecl_orgTrack(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opname=tom_match6_1_astName_string; { tom.engine.adt.tomsignature.types.TomType tom_returnType=tom_match6_1_astType; { tom.engine.adt.tomsignature.types.TomList tom_argList=tom_match6_1_args; { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_instr; if ( true ) {


        if(getSymbolTable(moduleName).isUsedSymbolConstructor(tom_opname)) {
          genDeclMake("tom_make_" + tom_opname,tom_returnType,tom_argList,tom_instr,moduleName);
        }
        return;
       } } } } } } } } } } } } } if (tom_is_fun_sym_TypeTermDecl(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.DeclarationList tom_match6_1_declarations=tom_get_slot_TypeTermDecl_declarations(tom_match6_1); { tom.engine.adt.tomsignature.types.DeclarationList tom_declList=tom_match6_1_declarations; if ( true ) {


        generateDeclarationList(deep, tom_declList, moduleName);
        return;
       } } } } { tom.engine.adt.tomsignature.types.Declaration tom_t=tom_match6_1; if ( true ) {


        System.out.println("Cannot generate code for declaration: " + tom_t);
        throw new TomRuntimeException("Cannot generate code for declaration: " + tom_t);
       } } } }

  }

  public void generateListInclude(int deep, TomList subject, String moduleName) throws IOException {
    output.setSingleLine();
    generateList(deep, subject, moduleName);
    output.unsetSingleLine();
  }

  public void generateList(int deep, TomList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generate(deep, subject.getHead(), moduleName);
      subject = subject.getTail();
    }
  }

  public void generateOptionList(int deep, OptionList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generateOption(deep,subject.getHead(), moduleName);
      subject = subject.getTail();
    }
  }

  public void generateInstructionList(int deep, InstructionList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generateInstruction(deep,subject.getHead(), moduleName);
      subject = subject.getTail();
    }
    if(prettyMode) {
	output.writeln();
    }
  }

  public void generateDeclarationList(int deep, DeclarationList subject, String moduleName)
    throws IOException {
    while(!subject.isEmpty()) {
      generateDeclaration(deep,subject.getHead(), moduleName);
      subject = subject.getTail();
    }
  }

  public void generatePairNameDeclList(int deep, PairNameDeclList pairNameDeclList, String moduleName)
    throws IOException {
    while ( !pairNameDeclList.isEmpty() ) {
      generateDeclaration(deep, pairNameDeclList.getHead().getSlotDecl(), moduleName);
      pairNameDeclList = pairNameDeclList.getTail();
    }
  }

    // ------------------------------------------------------------

  protected abstract void genDecl(String returnType,
                                  String declName,
                                  String suffix,
                                  String args[],
                                  TargetLanguage tlCode,
                                  String moduleName) throws IOException;

  protected abstract void genDeclInstr(String returnType,
                                       String declName,
                                       String suffix,
                                       String args[],
                                       Instruction instr,
                                       int deep,
                                       String moduleName) throws IOException;

  protected abstract void genDeclMake(String funName, TomType returnType,
                                      TomList argList, Instruction instr, String moduleName) throws IOException;

  protected abstract void genDeclList(String name, String moduleName) throws IOException;

  protected abstract void genDeclArray(String name, String moduleName) throws IOException;

  // ------------------------------------------------------------

  protected abstract void buildDeclarationSequence(int deep, DeclarationList declarationList, String moduleName) throws IOException;
  protected abstract void buildInstructionSequence(int deep, InstructionList instructionList, String moduleName) throws IOException;
  protected abstract void buildSemiColon() throws IOException;
  protected abstract void buildComment(int deep, String text) throws IOException;
  protected abstract void buildTerm(int deep, String name, TomList argList, String moduleName) throws IOException;
  protected abstract void buildRef(int deep, TomTerm term, String moduleName) throws IOException;
  protected abstract void buildListOrArray(int deep, TomTerm list, String moduleName) throws IOException;

  protected abstract void buildFunctionCall(int deep, String name, TomList argList, String moduleName)  throws IOException;
  protected abstract void buildFunctionDef(int deep, String tomName, TomList argList, TomType codomain, TomType throwsType, Instruction instruction, String moduleName) throws IOException;
  protected void buildMethodDef(int deep, String tomName, TomList argList, TomType codomain, TomType throwsType, Instruction instruction, String moduleName) throws IOException {
    throw new TomRuntimeException("Backend "+getClass()+" does not support Methods");
  }

  /*buildClass is not abstract since only Java backend supports class
    only backends that supports Class should overload buildClass
   */
  protected void buildClass(int deep, String tomName, TomForwardType extendsFwdType, TomTerm superTerm, Declaration declaration, String moduleName) throws IOException {
    throw new TomRuntimeException("Backend does not support Class");
  }

  protected abstract void buildExpNegation(int deep, Expression exp, String moduleName) throws IOException;

  protected abstract void buildExpAnd(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException;
  protected abstract void buildExpOr(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException;
  protected abstract void buildExpGreaterThan(int deep, Expression exp1, Expression exp2, String moduleName) throws IOException;
  protected abstract void buildExpBottom(int deep) throws IOException;
  protected abstract void buildExpTrue(int deep) throws IOException;
  protected abstract void buildExpFalse(int deep) throws IOException;
  protected abstract void buildExpIsEmptyList(int deep, TomName opName, TomType type, TomTerm expList, String moduleName) throws IOException;
  protected abstract void buildExpIsEmptyArray(int deep, TomName opName, TomType type, TomTerm expIndex, TomTerm expArray, String moduleName) throws IOException;
  protected abstract void buildExpEqualTerm(int deep, TomType type, TomTerm exp1,TomTerm exp2, String moduleName) throws IOException;
  protected abstract void buildExpIsFsym(int deep, String opname, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpCast(int deep, TomType type, Expression exp, String moduleName) throws IOException;
  protected abstract void buildExpGetSlot(int deep, String opname, String slotName, TomTerm exp, String moduleName) throws IOException;
  protected abstract void buildExpGetHead(int deep, TomName opName, TomType domain, TomType codomain, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpGetTail(int deep, TomName opName, TomType type1, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpGetSize(int deep, TomName opNameAST, TomType type1, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildExpGetElement(int deep, TomName opNameAST, TomType domain, TomType codomain, TomTerm varName, TomTerm varIndex, String moduleName) throws IOException;
  protected abstract void buildExpGetSliceList(int deep, String name, TomTerm varBegin, TomTerm varEnd, String moduleName) throws IOException;
  protected abstract void buildExpGetSliceArray(int deep, String name, TomTerm varArray, TomTerm varBegin, TomTerm expEnd, String moduleName) throws IOException;
  protected abstract void buildAssignVar(int deep, TomTerm var, OptionList list, Expression exp, String moduleName) throws IOException ;
  protected abstract void buildLetAssign(int deep, TomTerm var, OptionList list, Expression exp, Instruction body, String moduleName) throws IOException ;
  protected abstract void buildLet(int deep, TomTerm var, OptionList list, TomType tlType, Expression exp, Instruction body, String moduleName) throws IOException ;
  protected abstract void buildLetRef(int deep, TomTerm var, OptionList list, TomType tlType, Expression exp, Instruction body, String moduleName) throws IOException ;
  protected abstract void buildNamedBlock(int deep, String blockName, InstructionList instList, String modulename) throws IOException ;
  protected abstract void buildUnamedBlock(int deep, InstructionList instList, String moduleName) throws IOException ;
  protected abstract void buildIf(int deep, Expression exp, Instruction succes, String moduleName) throws IOException ;
  protected abstract void buildIfWithFailure(int deep, Expression exp, Instruction succes, Instruction failure, String moduleName) throws IOException ;
  protected abstract void buildDoWhile(int deep, Instruction succes, Expression exp, String moduleName) throws IOException;
  protected abstract void buildWhileDo(int deep, Expression exp, Instruction succes, String moduleName) throws IOException;
  protected abstract void buildAddOne(int deep, TomTerm var, String moduleName) throws IOException;
  protected abstract void buildReturn(int deep, TomTerm exp, String moduleName) throws IOException ;
  protected abstract void buildCheckStamp(int deep, TomType type, TomTerm variable, String moduleName) throws IOException ;
  protected abstract void buildCheckInstance(int deep, String typeName,TomType type, Expression exp, Instruction instruction, String moduleName) throws IOException ;
  protected abstract void buildSymbolDecl(int deep, String tomName, String moduleName) throws IOException ;
  protected abstract void buildCheckStampDecl(int deep, String type, String name,
                                              TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildSetStampDecl(int deep, String type, String name,
                                              TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetImplementationDecl(int deep, String type, String name,
                                              TomType tlType, Instruction instr, String moduleName) throws IOException;

  protected abstract void buildIsFsymDecl(int deep, String tomName, String name1,
                                          TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetSlotDecl(int deep, String tomName, String name1,
                                           TomType tlType, Instruction instr, TomName slotName, String moduleName) throws IOException;
  protected abstract void buildTermsEqualDecl(int deep, String name1, String name2,
                                              String type1, String type2, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetHeadDecl(int deep, TomName opNameAST, String varName, String suffix, TomType domain, TomType codomain, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetTailDecl(int deep, TomName opNameAST, String varName, String type, TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildIsEmptyDecl(int deep, TomName opNameAST, String varName, String type,
                                           TomType tlType, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetElementDecl(int deep, TomName opNameAST, String name1, String name2,
                                              String type1, TomType tlType1, Instruction instr, String moduleName) throws IOException;
  protected abstract void buildGetSizeDecl(int deep, TomName opNameAST, String name1, String type,
                                           TomType tlType, Instruction instr, String moduleName) throws IOException;

} // class TomAbstractGenerator
