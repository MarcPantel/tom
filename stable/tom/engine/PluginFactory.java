/* Generated by TOM (version 3.0alpha): Do not edit this file */package jtom;

import java.util.*;

import jtom.adt.tnode.*;
import jtom.adt.tnode.types.*;

import jtom.adt.options.*;
import jtom.adt.options.types.*;

import jtom.runtime.xml.*;

import aterm.*;
import aterm.pure.*;

/**
 * This Factory, when given a proper XML file, can manage a set of plugins.
 * A plugin managed by this Factory MUST respect two very important conditions :
 * <ul>
 * <li>It MUST have an activation flag, which MUST be the first element in the option list it declares ;</li>
 * <li>In case it has other options, it MUST precise in its requiredOptions() method that each of these options
 * needs the activation flag to be set to true to be set to another value than the default value.</li>
 * </ul>
 * Of course, the plugin must also implement the TomPlugin interface, and the XML file must respect this DTD :
 * <!DOCTYPE factory [
 * 
 * <!ELEMENT factory (plugin*)>
 *
 * <!ELEMENT plugin EMPTY>
 * <!ATTLIST plugin
 *   name CDATA #IMPLIED
 *   version CDATA #IMPLIED
 *   description CDATA #IMPLIED
 *   classpath CDATA #REQUIRED>
 * ]>
 * Please note that if you put two or more plugins in the set that have their activation flag set to true by default,
 * it will lead to an error if the user doesn't activate manually (i.e. with the command line) one of the plugins.
 * So all the benefit of having an activation flag set to true by default (that is avoiding to set one manually)
 * will be gone.
 *
 * @author Gr&eacute;gory ANDRIEN
 */
public class PluginFactory implements TomPlugin {

  /* Generated by TOM (version 3.0alpha): Do not edit this file *//* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_TNode( jtom.adt.tnode.types.TNode t) { return null; }public boolean tom_cmp_fun_sym_TNode(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TNode( jtom.adt.tnode.types.TNode t,  int  n) { return null; }public boolean tom_terms_equal_TNode(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_CommentNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isCommentNode(); }public  jtom.adt.tnode.types.TNode tom_make_CommentNode( String  t0) { return  getTNodeFactory().makeTNode_CommentNode(t0); }public  String  tom_get_slot_CommentNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_ProcessingInstructionNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isProcessingInstructionNode(); }public  jtom.adt.tnode.types.TNode tom_make_ProcessingInstructionNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_ProcessingInstructionNode(t0, t1); }public  String  tom_get_slot_ProcessingInstructionNode_target( jtom.adt.tnode.types.TNode t) { return  t.getTarget(); }public  String  tom_get_slot_ProcessingInstructionNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_TextNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isTextNode(); }public  jtom.adt.tnode.types.TNode tom_make_TextNode( String  t0) { return  getTNodeFactory().makeTNode_TextNode(t0); }public  String  tom_get_slot_TextNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_CDATASectionNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isCDATASectionNode(); }public  jtom.adt.tnode.types.TNode tom_make_CDATASectionNode( String  t0) { return  getTNodeFactory().makeTNode_CDATASectionNode(t0); }public  String  tom_get_slot_CDATASectionNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_DocumentNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentNode(); }public  jtom.adt.tnode.types.TNode tom_make_DocumentNode( jtom.adt.tnode.types.TNode t0,  jtom.adt.tnode.types.TNode t1) { return  getTNodeFactory().makeTNode_DocumentNode(t0, t1); }public  jtom.adt.tnode.types.TNode tom_get_slot_DocumentNode_docType( jtom.adt.tnode.types.TNode t) { return  t.getDocType(); }public  jtom.adt.tnode.types.TNode tom_get_slot_DocumentNode_docElem( jtom.adt.tnode.types.TNode t) { return  t.getDocElem(); }public boolean tom_is_fun_sym_ElementNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isElementNode(); }public  jtom.adt.tnode.types.TNode tom_make_ElementNode( String  t0,  jtom.adt.tnode.types.TNodeList t1,  jtom.adt.tnode.types.TNodeList t2) { return  getTNodeFactory().makeTNode_ElementNode(t0, t1, t2); }public  String  tom_get_slot_ElementNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_ElementNode_attrList( jtom.adt.tnode.types.TNode t) { return  t.getAttrList(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_ElementNode_childList( jtom.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_AttributeNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isAttributeNode(); }public  jtom.adt.tnode.types.TNode tom_make_AttributeNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_AttributeNode(t0, t1, t2); }public  String  tom_get_slot_AttributeNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_AttributeNode_specified( jtom.adt.tnode.types.TNode t) { return  t.getSpecified(); }public  String  tom_get_slot_AttributeNode_value( jtom.adt.tnode.types.TNode t) { return  t.getValue(); }public boolean tom_is_fun_sym_DocumentTypeNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentTypeNode(); }public  jtom.adt.tnode.types.TNode tom_make_DocumentTypeNode( String  t0,  String  t1,  String  t2,  String  t3,  jtom.adt.tnode.types.TNodeList t4,  jtom.adt.tnode.types.TNodeList t5) { return  getTNodeFactory().makeTNode_DocumentTypeNode(t0, t1, t2, t3, t4, t5); }public  String  tom_get_slot_DocumentTypeNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_DocumentTypeNode_publicId( jtom.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_DocumentTypeNode_systemId( jtom.adt.tnode.types.TNode t) { return  t.getSystemId(); }public  String  tom_get_slot_DocumentTypeNode_internalSubset( jtom.adt.tnode.types.TNode t) { return  t.getInternalSubset(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_entities( jtom.adt.tnode.types.TNode t) { return  t.getEntities(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_notations( jtom.adt.tnode.types.TNode t) { return  t.getNotations(); }public boolean tom_is_fun_sym_EntityReferenceNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityReferenceNode(); }public  jtom.adt.tnode.types.TNode tom_make_EntityReferenceNode( String  t0,  jtom.adt.tnode.types.TNodeList t1) { return  getTNodeFactory().makeTNode_EntityReferenceNode(t0, t1); }public  String  tom_get_slot_EntityReferenceNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_EntityReferenceNode_childList( jtom.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_EntityNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityNode(); }public  jtom.adt.tnode.types.TNode tom_make_EntityNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_EntityNode(t0, t1, t2); }public  String  tom_get_slot_EntityNode_notationName( jtom.adt.tnode.types.TNode t) { return  t.getNotationName(); }public  String  tom_get_slot_EntityNode_publicId( jtom.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_EntityNode_systemId( jtom.adt.tnode.types.TNode t) { return  t.getSystemId(); }public boolean tom_is_fun_sym_NotationNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isNotationNode(); }public  jtom.adt.tnode.types.TNode tom_make_NotationNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_NotationNode(t0, t1); }public  String  tom_get_slot_NotationNode_publicId( jtom.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_NotationNode_systemId( jtom.adt.tnode.types.TNode t) { return  t.getSystemId(); }public Object tom_get_fun_sym_TNodeList( jtom.adt.tnode.types.TNodeList t) { return null; }public boolean tom_cmp_fun_sym_TNodeList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TNodeList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tnode.types.TNode tom_get_head_TNodeList( jtom.adt.tnode.types.TNodeList l) { return l.getHead(); }public  jtom.adt.tnode.types.TNodeList tom_get_tail_TNodeList( jtom.adt.tnode.types.TNodeList l) { return l.getTail(); }public boolean tom_is_empty_TNodeList( jtom.adt.tnode.types.TNodeList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTNode( jtom.adt.tnode.types.TNodeList t) { return (t!= null) && t.isSortTNodeList(); }public  jtom.adt.tnode.types.TNodeList tom_empty_list_concTNode() { return getTNodeFactory().makeTNodeList(); }public  jtom.adt.tnode.types.TNodeList tom_cons_list_concTNode( jtom.adt.tnode.types.TNode e,  jtom.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  jtom.adt.tnode.types.TNodeList tom_append_list_concTNode( jtom.adt.tnode.types.TNodeList l1,  jtom.adt.tnode.types.TNodeList l2) {    if(tom_is_empty_TNodeList(l1)) {     return l2;    } else if(tom_is_empty_TNodeList(l2)) {     return l1;    } else if(tom_is_empty_TNodeList(( jtom.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1))) {     return ( jtom.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( jtom.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),l2);    } else {      return ( jtom.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( jtom.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),tom_append_list_concTNode(( jtom.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1),l2));    }   }  public  jtom.adt.tnode.types.TNodeList tom_get_slice_concTNode( jtom.adt.tnode.types.TNodeList begin,  jtom.adt.tnode.types.TNodeList end) {    if(tom_terms_equal_TNodeList(begin,end)) {      return ( jtom.adt.tnode.types.TNodeList)tom_empty_list_concTNode();    } else {      return ( jtom.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( jtom.adt.tnode.types.TNode)tom_get_head_TNodeList(begin),( jtom.adt.tnode.types.TNodeList)tom_get_slice_concTNode(( jtom.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTNodeList( jtom.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tnode.types.TNodeList tom_make_emptyTNodeList() { return getTNodeFactory().makeTNodeList(); }public boolean tom_is_fun_sym_manyTNodeList( jtom.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tnode.types.TNodeList tom_make_manyTNodeList( jtom.adt.tnode.types.TNode e,  jtom.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  jtom.adt.tnode.types.TNode tom_get_slot_manyTNodeList_head( jtom.adt.tnode.types.TNodeList t) { return  t.getHead(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_manyTNodeList_tail( jtom.adt.tnode.types.TNodeList t) { return  t.getTail(); } /* Generated by TOM (version 3.0alpha): Do not edit this file */public Object tom_get_fun_sym_TomOption( jtom.adt.options.types.TomOption t) { return null; }public boolean tom_cmp_fun_sym_TomOption(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomOption( jtom.adt.options.types.TomOption t,  int  n) { return null; }public boolean tom_terms_equal_TomOption(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_OptionBoolean( jtom.adt.options.types.TomOption t) { return  (t!= null) && t.isOptionBoolean(); }public  jtom.adt.options.types.TomOption tom_make_OptionBoolean( String  t0,  String  t1,  String  t2,  jtom.adt.options.types.TomBoolean t3) { return  getOptionsFactory().makeTomOption_OptionBoolean(t0, t1, t2, t3); }public  String  tom_get_slot_OptionBoolean_name( jtom.adt.options.types.TomOption t) { return  t.getName(); }public  String  tom_get_slot_OptionBoolean_altName( jtom.adt.options.types.TomOption t) { return  t.getAltName(); }public  String  tom_get_slot_OptionBoolean_description( jtom.adt.options.types.TomOption t) { return  t.getDescription(); }public  jtom.adt.options.types.TomBoolean tom_get_slot_OptionBoolean_valueB( jtom.adt.options.types.TomOption t) { return  t.getValueB(); }public boolean tom_is_fun_sym_OptionInteger( jtom.adt.options.types.TomOption t) { return  (t!= null) && t.isOptionInteger(); }public  jtom.adt.options.types.TomOption tom_make_OptionInteger( String  t0,  String  t1,  String  t2,  int  t3,  String  t4) { return  getOptionsFactory().makeTomOption_OptionInteger(t0, t1, t2, t3, t4); }public  String  tom_get_slot_OptionInteger_name( jtom.adt.options.types.TomOption t) { return  t.getName(); }public  String  tom_get_slot_OptionInteger_altName( jtom.adt.options.types.TomOption t) { return  t.getAltName(); }public  String  tom_get_slot_OptionInteger_description( jtom.adt.options.types.TomOption t) { return  t.getDescription(); }public  int  tom_get_slot_OptionInteger_valueI( jtom.adt.options.types.TomOption t) { return  t.getValueI(); }public  String  tom_get_slot_OptionInteger_attrName( jtom.adt.options.types.TomOption t) { return  t.getAttrName(); }public boolean tom_is_fun_sym_OptionString( jtom.adt.options.types.TomOption t) { return  (t!= null) && t.isOptionString(); }public  jtom.adt.options.types.TomOption tom_make_OptionString( String  t0,  String  t1,  String  t2,  String  t3,  String  t4) { return  getOptionsFactory().makeTomOption_OptionString(t0, t1, t2, t3, t4); }public  String  tom_get_slot_OptionString_name( jtom.adt.options.types.TomOption t) { return  t.getName(); }public  String  tom_get_slot_OptionString_altName( jtom.adt.options.types.TomOption t) { return  t.getAltName(); }public  String  tom_get_slot_OptionString_description( jtom.adt.options.types.TomOption t) { return  t.getDescription(); }public  String  tom_get_slot_OptionString_valueS( jtom.adt.options.types.TomOption t) { return  t.getValueS(); }public  String  tom_get_slot_OptionString_attrName( jtom.adt.options.types.TomOption t) { return  t.getAttrName(); }public Object tom_get_fun_sym_TomBoolean( jtom.adt.options.types.TomBoolean t) { return null; }public boolean tom_cmp_fun_sym_TomBoolean(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomBoolean( jtom.adt.options.types.TomBoolean t,  int  n) { return null; }public boolean tom_terms_equal_TomBoolean(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_True( jtom.adt.options.types.TomBoolean t) { return  (t!= null) && t.isTrue(); }public  jtom.adt.options.types.TomBoolean tom_make_True() { return  getOptionsFactory().makeTomBoolean_True(); }public boolean tom_is_fun_sym_False( jtom.adt.options.types.TomBoolean t) { return  (t!= null) && t.isFalse(); }public  jtom.adt.options.types.TomBoolean tom_make_False() { return  getOptionsFactory().makeTomBoolean_False(); }public Object tom_get_fun_sym_TomOptionList( jtom.adt.options.types.TomOptionList t) { return null; }public boolean tom_cmp_fun_sym_TomOptionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomOptionList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.options.types.TomOption tom_get_head_TomOptionList( jtom.adt.options.types.TomOptionList l) { return l.getHead(); }public  jtom.adt.options.types.TomOptionList tom_get_tail_TomOptionList( jtom.adt.options.types.TomOptionList l) { return l.getTail(); }public boolean tom_is_empty_TomOptionList( jtom.adt.options.types.TomOptionList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomOption( jtom.adt.options.types.TomOptionList t) { return (t!= null) && t.isSortTomOptionList(); }public  jtom.adt.options.types.TomOptionList tom_empty_list_concTomOption() { return getOptionsFactory().makeTomOptionList(); }public  jtom.adt.options.types.TomOptionList tom_cons_list_concTomOption( jtom.adt.options.types.TomOption e,  jtom.adt.options.types.TomOptionList l) { return getOptionsFactory().makeTomOptionList(e,l); }public  jtom.adt.options.types.TomOptionList tom_append_list_concTomOption( jtom.adt.options.types.TomOptionList l1,  jtom.adt.options.types.TomOptionList l2) {    if(tom_is_empty_TomOptionList(l1)) {     return l2;    } else if(tom_is_empty_TomOptionList(l2)) {     return l1;    } else if(tom_is_empty_TomOptionList(( jtom.adt.options.types.TomOptionList)tom_get_tail_TomOptionList(l1))) {     return ( jtom.adt.options.types.TomOptionList)tom_cons_list_concTomOption(( jtom.adt.options.types.TomOption)tom_get_head_TomOptionList(l1),l2);    } else {      return ( jtom.adt.options.types.TomOptionList)tom_cons_list_concTomOption(( jtom.adt.options.types.TomOption)tom_get_head_TomOptionList(l1),tom_append_list_concTomOption(( jtom.adt.options.types.TomOptionList)tom_get_tail_TomOptionList(l1),l2));    }   }  public  jtom.adt.options.types.TomOptionList tom_get_slice_concTomOption( jtom.adt.options.types.TomOptionList begin,  jtom.adt.options.types.TomOptionList end) {    if(tom_terms_equal_TomOptionList(begin,end)) {      return ( jtom.adt.options.types.TomOptionList)tom_empty_list_concTomOption();    } else {      return ( jtom.adt.options.types.TomOptionList)tom_cons_list_concTomOption(( jtom.adt.options.types.TomOption)tom_get_head_TomOptionList(begin),( jtom.adt.options.types.TomOptionList)tom_get_slice_concTomOption(( jtom.adt.options.types.TomOptionList)tom_get_tail_TomOptionList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomOptionList( jtom.adt.options.types.TomOptionList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.options.types.TomOptionList tom_make_emptyTomOptionList() { return getOptionsFactory().makeTomOptionList(); }public boolean tom_is_fun_sym_manyTomOptionList( jtom.adt.options.types.TomOptionList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.options.types.TomOptionList tom_make_manyTomOptionList( jtom.adt.options.types.TomOption e,  jtom.adt.options.types.TomOptionList l) { return getOptionsFactory().makeTomOptionList(e,l); }public  jtom.adt.options.types.TomOption tom_get_slot_manyTomOptionList_head( jtom.adt.options.types.TomOptionList t) { return  t.getHead(); }public  jtom.adt.options.types.TomOptionList tom_get_slot_manyTomOptionList_tail( jtom.adt.options.types.TomOptionList t) { return  t.getTail(); } 


  TomOptionList allDeclaredOptions;
  TomOptionList allRequiredOptions;
  Map flagOwners;
  ATerm termToRelay;

  private TNodeFactory getTNodeFactory() {
    return (new XmlTools()).getTNodeFactory();
  }

  private OptionsFactory getOptionsFactory() {
    return OptionsFactory.getInstance(SingletonFactory.getInstance());
  }

  private OptionManager getOM() { return TomServer.getInstance().getOptionManager(); }
  private TomEnvironment environment() { return TomServer.getInstance().getEnvironment(); }

  public PluginFactory(String xmlFile) {
    allDeclaredOptions = tom_make_emptyTomOptionList();
    allRequiredOptions = tom_make_emptyTomOptionList();
    flagOwners = new HashMap();
    List classPaths = new ArrayList();
    List plugins = new ArrayList();

    fillClassPathsList(classPaths, xmlFile);
    
    // creates an instance of each plugin
    Iterator it = classPaths.iterator();
    while( it.hasNext() ) {
      Object instance;
      String path = (String)it.next();
      try { 
        instance = Class.forName(path).newInstance();
        if(instance instanceof TomPlugin) {
          plugins.add(instance);
        } else {
          environment().messageError(TomMessage.getString("ClassNotAPlugin"), new Object[]{path},
                                   "PluginFactory", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
        }
      } catch(ClassNotFoundException cnfe) { 
        environment().messageWarning(TomMessage.getString("ClassNotFound"),new Object[]{path},
                                   "PluginFactory", TomMessage.DEFAULT_ERROR_LINE_NUMBER); 
      } catch(Exception e) { 
        environment().messageError(TomMessage.getString("InstantiationError"),
                                 "PluginFactory", TomMessage.DEFAULT_ERROR_LINE_NUMBER); 
      }
    }

    it = plugins.iterator();
    while( it.hasNext() ) {
      TomPlugin plugin = (TomPlugin)it.next();

      TomOptionList declaredList = plugin.declaredOptions();
      allDeclaredOptions = tom_append_list_concTomOption(allDeclaredOptions,tom_append_list_concTomOption(declaredList,tom_empty_list_concTomOption()));
      String flagName = declaredList.getHead().getName();
      flagOwners.put(flagName, plugin);

      TomOptionList requiredList = plugin.requiredOptions();
      allRequiredOptions = tom_append_list_concTomOption(allRequiredOptions,tom_append_list_concTomOption(requiredList,tom_empty_list_concTomOption()));
    }
  }

  public void setInput(ATerm term) {
    termToRelay = term;
  }

  public ATerm getOutput() {
    return termToRelay;
  }

  public void run() {
    TomPlugin activatedPlugin = null;

    Iterator it = flagOwners.keySet().iterator();
	
    while( it.hasNext() ) {
      String flagName = (String)it.next();
	
      if( getOM().getOptionBooleanValue(flagName) ) {
	activatedPlugin = (TomPlugin)flagOwners.get(flagName);
      }
    }
    try{
      activatedPlugin.setInput(termToRelay);
      activatedPlugin.run();
      termToRelay = activatedPlugin.getOutput();
    } catch(NullPointerException npe) {
      System.out.println("Error : No plugin was activated."); // TODO: when error management has changed, change this
      return;
    }
  }

  public TomOptionList declaredOptions() {
    return allDeclaredOptions;
  }

  public TomOptionList requiredOptions() {
    Iterator it = flagOwners.keySet().iterator();
	
    while( it.hasNext() ) { // for all plugins
      String flagName = (String)it.next();
  
      if( getOM().getOptionBooleanValue(flagName) ) { // if this plugin is activated
	it = flagOwners.keySet().iterator();
	      
	while( it.hasNext() ) {
	  String name = (String)it.next();
	  if( !name.equals(flagName) ) // require that the other aren't
	    allRequiredOptions = tom_cons_list_concTomOption(tom_make_OptionBoolean(name, "", "", tom_make_False()),tom_append_list_concTomOption(allRequiredOptions,tom_empty_list_concTomOption()));
	}
      }
    }

    return allRequiredOptions; 
  }

  public void setOption(String optionName, Object optionValue) {
    getOM().putOptionValue(optionName, optionValue);

    if(optionValue.equals(Boolean.TRUE)) { // no more than 1 plugin can be activated at a time
      if( flagOwners.keySet().contains(optionName) ) { // if the flag just set is an activation flag...
	Iterator it = flagOwners.keySet().iterator();
	
	while( it.hasNext() ) {
	  String flagName = (String)it.next();
	  
	  if( !flagName.equals(optionName) ) {
	      getOM().putOptionValue(flagName, Boolean.FALSE); // ...desactivate the other flags
	    //System.out.println(flagName + " desactivated");
	  }
	}
	//System.out.println(optionName + " activated");
      }
    }
  }

  private void fillClassPathsList(List classPaths, String xmlFile) {
    XmlTools xtools = new XmlTools();
    TNode docNode = ( (TNode)xtools.convertXMLToATerm(xmlFile) ).getDocElem();

     { jtom.adt.tnode.types.TNode tom_match1_1=(( jtom.adt.tnode.types.TNode)docNode);{ if(tom_is_fun_sym_ElementNode(tom_match1_1) ||  false ) { { jtom.adt.tnode.types.TNode fact=tom_match1_1; { String  tom_match1_1_1=tom_get_slot_ElementNode_name(tom_match1_1); { jtom.adt.tnode.types.TNodeList tom_match1_1_2=tom_get_slot_ElementNode_attrList(tom_match1_1); { jtom.adt.tnode.types.TNodeList tom_match1_1_3=tom_get_slot_ElementNode_childList(tom_match1_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match1_1_1) , "factory") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match1_1_2) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match1_1_2_list1=tom_match1_1_2; if(tom_is_fun_sym_concTNode(tom_match1_1_3) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match1_1_3_list1=tom_match1_1_3; { jtom.adt.tnode.types.TNode tom_match2_1=(( jtom.adt.tnode.types.TNode)fact);{ if(tom_is_fun_sym_ElementNode(tom_match2_1) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match2_1_3=tom_get_slot_ElementNode_childList(tom_match2_1); { jtom.adt.tnode.types.TNodeList cl=tom_match2_1_3;



 
            while(!(cl.isEmpty())) {
              TNode pluginNode = cl.getHead();

               { jtom.adt.tnode.types.TNode tom_match3_1=(( jtom.adt.tnode.types.TNode)pluginNode);{ if(tom_is_fun_sym_ElementNode(tom_match3_1) ||  false ) { { String  tom_match3_1_1=tom_get_slot_ElementNode_name(tom_match3_1); { jtom.adt.tnode.types.TNodeList tom_match3_1_2=tom_get_slot_ElementNode_attrList(tom_match3_1); { jtom.adt.tnode.types.TNodeList tom_match3_1_3=tom_get_slot_ElementNode_childList(tom_match3_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_1) , "plugin") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match3_1_2) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match3_1_2_list1=tom_match3_1_2; { jtom.adt.tnode.types.TNodeList tom_match3_1_2_begin1=tom_match3_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match3_1_2_end1=tom_match3_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match3_1_2_end1))) {tom_match3_1_2_list1=tom_match3_1_2_end1;{ { jtom.adt.tnode.types.TNode tom_match3_1_2_2=tom_get_head_TNodeList(tom_match3_1_2_list1);tom_match3_1_2_list1=tom_get_tail_TNodeList(tom_match3_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match3_1_2_2) ||  false ) { { String  tom_match3_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match3_1_2_2); { String  tom_match3_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match3_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_2_2_1) , "classpath") ||  false ) { { String  cp=tom_match3_1_2_2_3; if(tom_is_fun_sym_concTNode(tom_match3_1_3) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match3_1_3_list1=tom_match3_1_3; if(tom_is_empty_TNodeList(tom_match3_1_3_list1)) {
 classPaths.add(cp);/*System.out.println(cp);*/  }} }} }}} }}tom_match3_1_2_end1=tom_get_tail_TNodeList(tom_match3_1_2_end1);} }}}} } }}}} }}}

              cl = cl.getTail();
	    }
	  }} }}}

      } }} } }}}}} }}}

  }
}
