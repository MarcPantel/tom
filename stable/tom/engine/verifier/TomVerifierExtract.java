/* Generated by TOM (version 2.1alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles
 *
 **/

package jtom.verifier;

import aterm.*;
import java.util.*;
import jtom.tools.*;
import jtom.runtime.*;
import jtom.adt.tomsignature.types.*;
import jtom.TomMessage;

public class TomVerifierExtract extends TomTask {

	// ------------------------------------------------------------
  /* Generated by TOM (version 2.1alpha): Do not edit this file *//* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/    
	// ------------------------------------------------------------

  public TomVerifierExtract() { 
    super("Tom verifier");
  }
  
  public TomVerifierExtract(String name) {
    super(name);
  }

  protected void process() {
    try {
      long startChrono = 0;
      boolean verbose = getInput().isVerbose();
      if(verbose) { startChrono = System.currentTimeMillis(); }
        // I may use my own datatype
      TomTerm extractTerm = tom_make_emptyTerm();
			// here the extraction stuff
      
			Collection matchSet = collectMatch(environment().getTerm());
			// System.out.println("Extracted : " + matchSet);

			Collection purified = purify(matchSet);
			System.out.println("Purified : " + purified);
			
			if(verbose) {
        System.out.println("TOM Verifier extraction phase (" + (System.currentTimeMillis()-startChrono)+ " ms)");
      }
			// put extrated data in a file
      Tools.generateOutput(
			getInput().getOutputFileNameWithoutSuffix() + TomTaskInput.verifExtractionSuffix, 
        extractTerm);
    } catch (Exception e) {
      environment().messageError("Exception occured in TomVerifierExtract: " + e.getMessage(),
                                 getInput().getInputFile().getName(), 
                                 TomMessage.DEFAULT_ERROR_LINE_NUMBER);
      e.printStackTrace();
      return;
    }
  }

  private Collect2 collect_match = new Collect2() {
			public boolean apply(ATerm subject, Object astore) {
				Collection store = (Collection)astore;
				if (subject instanceof Instruction) {
					 { jtom.adt.tomsignature.types.Instruction tom_match1_1=(( jtom.adt.tomsignature.types.Instruction)subject);{ if(tom_is_fun_sym_CompiledMatch(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match1_1_1=tom_get_slot_CompiledMatch_automataInst(tom_match1_1); { jtom.adt.tomsignature.types.OptionList tom_match1_1_2=tom_get_slot_CompiledMatch_option(tom_match1_1); { jtom.adt.tomsignature.types.Instruction automata=tom_match1_1_1; if(tom_is_fun_sym_concOption(tom_match1_1_2) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match1_1_2_list1=tom_match1_1_2; { jtom.adt.tomsignature.types.OptionList tom_match1_1_2_begin1=tom_match1_1_2_list1; { jtom.adt.tomsignature.types.OptionList tom_match1_1_2_end1=tom_match1_1_2_list1; while (!(tom_is_empty_OptionList(tom_match1_1_2_end1))) {tom_match1_1_2_list1=tom_match1_1_2_end1;{ { jtom.adt.tomsignature.types.Option tom_match1_1_2_2=tom_get_head_OptionList(tom_match1_1_2_list1);tom_match1_1_2_list1=tom_get_tail_OptionList(tom_match1_1_2_list1); if(tom_is_fun_sym_TomTermToOption(tom_match1_1_2_2) ||  false ) { { jtom.adt.tomsignature.types.TomTerm tom_match1_1_2_2_1=tom_get_slot_TomTermToOption_astTerm(tom_match1_1_2_2); if(tom_is_fun_sym_PatternList(tom_match1_1_2_2_1) ||  false ) {

							store.add(subject);
						 }} }}tom_match1_1_2_end1=tom_get_tail_OptionList(tom_match1_1_2_end1);} }}}} }}}} }



							return true;
						}}
//end match
				} else { 
					return true;
				}
			}//end apply
		}; //end new

	public Collection collectMatch(TomTerm subject) {
		Collection result = new HashSet();
		traversal().genericCollect(subject,collect_match,result);
		//collect_matching.apply(subject, result);
		return result;
	}

	public Collection purify(Collection subject) {
		Collection purified = new HashSet();
		Iterator it = subject.iterator();
		while (it.hasNext()) {
			Instruction cp = (Instruction)it.next();
			 { jtom.adt.tomsignature.types.Instruction tom_match2_1=(( jtom.adt.tomsignature.types.Instruction)cp);{ if(tom_is_fun_sym_CompiledMatch(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction tom_match2_1_1=tom_get_slot_CompiledMatch_automataInst(tom_match2_1); { jtom.adt.tomsignature.types.OptionList tom_match2_1_2=tom_get_slot_CompiledMatch_option(tom_match2_1); { jtom.adt.tomsignature.types.Instruction automata=tom_match2_1_1; { jtom.adt.tomsignature.types.OptionList options=tom_match2_1_2;

					// simplify the IL automata
					purified.add(tom_make_CompiledMatch(simplify_il(automata),options));
				}}}} }}}

		}
		return purified;
	}

	Replace1 replace_simplify_il = new Replace1() {
			public ATerm apply(ATerm subject) {
				if (subject instanceof Expression) {
					 { jtom.adt.tomsignature.types.Expression tom_match3_1=(( jtom.adt.tomsignature.types.Expression)subject);{ if(tom_is_fun_sym_Or(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match3_1_1=tom_get_slot_Or_arg1(tom_match3_1); { jtom.adt.tomsignature.types.Expression tom_match3_1_2=tom_get_slot_Or_arg2(tom_match3_1); { jtom.adt.tomsignature.types.Expression cond=tom_match3_1_1; if(tom_is_fun_sym_FalseTL(tom_match3_1_2) ||  false ) {

							return traversal().genericTraversal(cond,this);
						 }}}} }}}

				} // end instanceof Expression
				else if (subject instanceof Instruction) {
					 { jtom.adt.tomsignature.types.Instruction tom_match4_1=(( jtom.adt.tomsignature.types.Instruction)subject);{ if(tom_is_fun_sym_IfThenElse(tom_match4_1) ||  false ) { { jtom.adt.tomsignature.types.Expression tom_match4_1_1=tom_get_slot_IfThenElse_condition(tom_match4_1); { jtom.adt.tomsignature.types.Instruction tom_match4_1_2=tom_get_slot_IfThenElse_succesInst(tom_match4_1); { jtom.adt.tomsignature.types.Instruction tom_match4_1_3=tom_get_slot_IfThenElse_failureInst(tom_match4_1); if(tom_is_fun_sym_TrueTL(tom_match4_1_1) ||  false ) { { jtom.adt.tomsignature.types.Instruction success=tom_match4_1_2; if(tom_is_fun_sym_Nop(tom_match4_1_3) ||  false ) {

							return traversal().genericTraversal(success,this);
						 }} }}}} }}}

				} // end instanceof Instruction
				/*
				 * Default case : Traversal
				 */
				return traversal().genericTraversal(subject,this);
			}//end apply
		};//end new Replace1 simplify_il
	
	private Instruction simplify_il(Instruction subject) {
		return (Instruction) replace_simplify_il.apply(subject);
	}

}
