/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.adt.il.*;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;

import tom.engine.exception.TomRuntimeException;


public class ZenonOutput {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */     private static   tom.engine.adt.il.types.ExprList  tom_append_list_concExpr( tom.engine.adt.il.types.ExprList l1,  tom.engine.adt.il.types.ExprList  l2) {     if( l1.isEmptyconcExpr() ) {       return l2;     } else if( l2.isEmptyconcExpr() ) {       return l1;     } else if(  l1.getTailconcExpr() .isEmptyconcExpr() ) {       return  tom.engine.adt.il.types.exprlist.ConsconcExpr.make( l1.getHeadconcExpr() ,l2) ;     } else {       return  tom.engine.adt.il.types.exprlist.ConsconcExpr.make( l1.getHeadconcExpr() ,tom_append_list_concExpr( l1.getTailconcExpr() ,l2)) ;     }   }   private static   tom.engine.adt.il.types.ExprList  tom_get_slice_concExpr( tom.engine.adt.il.types.ExprList  begin,  tom.engine.adt.il.types.ExprList  end, tom.engine.adt.il.types.ExprList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.il.types.exprlist.ConsconcExpr.make( begin.getHeadconcExpr() ,( tom.engine.adt.il.types.ExprList )tom_get_slice_concExpr( begin.getTailconcExpr() ,end,tail)) ;     }   }      private static   tom.engine.adt.il.types.SubstitutionList  tom_append_list_subs( tom.engine.adt.il.types.SubstitutionList l1,  tom.engine.adt.il.types.SubstitutionList  l2) {     if( l1.isEmptysubs() ) {       return l2;     } else if( l2.isEmptysubs() ) {       return l1;     } else if(  l1.getTailsubs() .isEmptysubs() ) {       return  tom.engine.adt.il.types.substitutionlist.Conssubs.make( l1.getHeadsubs() ,l2) ;     } else {       return  tom.engine.adt.il.types.substitutionlist.Conssubs.make( l1.getHeadsubs() ,tom_append_list_subs( l1.getTailsubs() ,l2)) ;     }   }   private static   tom.engine.adt.il.types.SubstitutionList  tom_get_slice_subs( tom.engine.adt.il.types.SubstitutionList  begin,  tom.engine.adt.il.types.SubstitutionList  end, tom.engine.adt.il.types.SubstitutionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.il.types.substitutionlist.Conssubs.make( begin.getHeadsubs() ,( tom.engine.adt.il.types.SubstitutionList )tom_get_slice_subs( begin.getTailsubs() ,end,tail)) ;     }   }      private static   tom.engine.adt.il.types.TermList  tom_append_list_concTerm( tom.engine.adt.il.types.TermList l1,  tom.engine.adt.il.types.TermList  l2) {     if( l1.isEmptyconcTerm() ) {       return l2;     } else if( l2.isEmptyconcTerm() ) {       return l1;     } else if(  l1.getTailconcTerm() .isEmptyconcTerm() ) {       return  tom.engine.adt.il.types.termlist.ConsconcTerm.make( l1.getHeadconcTerm() ,l2) ;     } else {       return  tom.engine.adt.il.types.termlist.ConsconcTerm.make( l1.getHeadconcTerm() ,tom_append_list_concTerm( l1.getTailconcTerm() ,l2)) ;     }   }   private static   tom.engine.adt.il.types.TermList  tom_get_slice_concTerm( tom.engine.adt.il.types.TermList  begin,  tom.engine.adt.il.types.TermList  end, tom.engine.adt.il.types.TermList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.il.types.termlist.ConsconcTerm.make( begin.getHeadconcTerm() ,( tom.engine.adt.il.types.TermList )tom_get_slice_concTerm( begin.getTailconcTerm() ,end,tail)) ;     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */   private static   tom.engine.adt.zenon.types.ZAxiomList  tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList  l2) {     if( l1.isEmptyzby() ) {       return l2;     } else if( l2.isEmptyzby() ) {       return l1;     } else if(  l1.getTailzby() .isEmptyzby() ) {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( l1.getHeadzby() ,l2) ;     } else {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( l1.getHeadzby() ,tom_append_list_zby( l1.getTailzby() ,l2)) ;     }   }   private static   tom.engine.adt.zenon.types.ZAxiomList  tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList  begin,  tom.engine.adt.zenon.types.ZAxiomList  end, tom.engine.adt.zenon.types.ZAxiomList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( begin.getHeadzby() ,( tom.engine.adt.zenon.types.ZAxiomList )tom_get_slice_zby( begin.getTailzby() ,end,tail)) ;     }   }    






  // ------------------------------------------------------------

  private Verifier verifier;
  private TomIlTools tomiltools;

  public ZenonOutput(Verifier verifier) {
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  public Collection zspecSetFromConstraintMap(Map constraintMap) {
    Collection resset = new HashSet();
    Iterator it = constraintMap.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZSpec spec = zspecFromMapEntry(entry);
      resset.add(spec);
    }
    return resset;
  }

  public ZSpec zspecFromMapEntry(Map.Entry entry) {
    Instr accept = (Instr) entry.getKey();
    Expr constraint = (Expr) entry.getValue();

    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;

    // theorem to prove
    {if ( (accept instanceof tom.engine.adt.il.types.Instr) ) {{  tom.engine.adt.il.types.Instr  tomMatch319NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Instr )accept);if ( (tomMatch319NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.instr.accept) ) {{  aterm.ATerm  tomMatch319NameNumber_freshVar_0= tomMatch319NameNumberfreshSubject_1.getPositive() ;{  aterm.ATerm  tomMatch319NameNumber_freshVar_1= tomMatch319NameNumberfreshSubject_1.getNegative() ;if ( true ) {

        Constraint positivePattern = Constraint.fromTerm(tomMatch319NameNumber_freshVar_0);
        ConstraintList negativePatternList = ConstraintList.fromTerm(tomMatch319NameNumber_freshVar_1);
        // we need the substitution to generate the pattern part of the theorem
        SubstitutionList subsList = verifier.collectSubstitutionInConstraint(constraint);
        Map variableMap = ztermVariableMapFromSubstitutionList(subsList,
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromConstraint(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.constraintToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.constraintToZExpr(negativePatternList,variableMap);
        }
      }}}}}}}


    ZExpr zenonConstraint = zexprFromExpr(constraint);

    ZExpr theorem = null;
    if (pattern != null && zenonConstraint != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem =  tom.engine.adt.zenon.types.zexpr.zequiv.make( tom.engine.adt.zenon.types.zexpr.zand.make(pattern,  tom.engine.adt.zenon.types.zexpr.znot.make(negpattern) ) , zenonConstraint) ;
      } else {
        theorem =  tom.engine.adt.zenon.types.zexpr.zequiv.make(pattern, zenonConstraint) ;
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature. Again, the TomIlTools will be useful, it has access
    // to TomSignature and Zenon signature

    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem =  tom.engine.adt.zenon.types.zexpr.zforall.make(input,  tom.engine.adt.zenon.types.ztype.ztype.make("T") , theorem) ;
    }
    ZSpec spec =  tom.engine.adt.zenon.types.zspec.zthm.make(theorem, tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms, tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ))) ;

    return spec;
  }

  ZTerm ztermFromTerm(Term term) {
    {if ( (term instanceof tom.engine.adt.il.types.Term) ) {{  tom.engine.adt.il.types.Term  tomMatch320NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Term )term);if ( (tomMatch320NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.term.tau) ) {{  tom.engine.adt.il.types.AbsTerm  tomMatch320NameNumber_freshVar_0= tomMatch320NameNumberfreshSubject_1.getAbst() ;if ( true ) {

        return ztermFromAbsTerm(tomMatch320NameNumber_freshVar_0);
      }}}}}if ( (term instanceof tom.engine.adt.il.types.Term) ) {{  tom.engine.adt.il.types.Term  tomMatch320NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Term )term);if ( (tomMatch320NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.term.repr) ) {if ( true ) {

        return  tom.engine.adt.zenon.types.zterm.zvar.make("Error in ztermFromTerm repr") ;
      }}}}if ( (term instanceof tom.engine.adt.il.types.Term) ) {{  tom.engine.adt.il.types.Term  tomMatch320NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Term )term);if ( (tomMatch320NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.term.subterm) ) {if ( true ) {

        return  tom.engine.adt.zenon.types.zterm.zvar.make("Error in ztermFromTerm subterm") ;
      }}}}if ( (term instanceof tom.engine.adt.il.types.Term) ) {{  tom.engine.adt.il.types.Term  tomMatch320NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Term )term);if ( (tomMatch320NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.term.slot) ) {if ( true ) {

        return  tom.engine.adt.zenon.types.zterm.zvar.make("Error in ztermFromTerm "+ term+" slot") ;
      }}}}if ( (term instanceof tom.engine.adt.il.types.Term) ) {{  tom.engine.adt.il.types.Term  tomMatch320NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Term )term);if ( (tomMatch320NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.term.appSubsT) ) {if ( true ) {

        // probleme: la substitution devrait etre appliquee
        return  tom.engine.adt.zenon.types.zterm.zvar.make("Error in ztermFromTerm appsubsT ") ;
      }}}}}

    return  tom.engine.adt.zenon.types.zterm.zvar.make("match vide dans ztermFromTerm") ;
  }

  ZExpr zexprFromExpr(Expr expr) {
    {if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.iltrue) ) {if ( true ) {
 return  tom.engine.adt.zenon.types.zexpr.ztrue.make() ;}}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.ilfalse) ) {if ( true ) {
 return  tom.engine.adt.zenon.types.zexpr.zfalse.make() ;}}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.tisfsym) ) {{  tom.engine.adt.il.types.AbsTerm  tomMatch321NameNumber_freshVar_0= tomMatch321NameNumberfreshSubject_1.getAbst() ;{  tom.engine.adt.il.types.Symbol  tomMatch321NameNumber_freshVar_1= tomMatch321NameNumberfreshSubject_1.getSymbol() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zexpr.zisfsym.make(ztermFromAbsTerm(tomMatch321NameNumber_freshVar_0), zsymbolFromSymbol(tomMatch321NameNumber_freshVar_1)) ;
      }}}}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.teq) ) {{  tom.engine.adt.il.types.AbsTerm  tomMatch321NameNumber_freshVar_2= tomMatch321NameNumberfreshSubject_1.getLabst() ;{  tom.engine.adt.il.types.AbsTerm  tomMatch321NameNumber_freshVar_3= tomMatch321NameNumberfreshSubject_1.getRabst() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zexpr.zeq.make(ztermFromAbsTerm(tomMatch321NameNumber_freshVar_2), ztermFromAbsTerm(tomMatch321NameNumber_freshVar_3)) ;
      }}}}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.isfsym) ) {if ( true ) {

        // this should not occur
        return  tom.engine.adt.zenon.types.zexpr.zisfsym.make( tom.engine.adt.zenon.types.zterm.zvar.make("Error in zexprFromExpr") ,  tom.engine.adt.zenon.types.zsymbol.zsymbol.make("isfsym") ) ;
      }}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.eq) ) {if ( true ) {

        // this should not occur
        return  tom.engine.adt.zenon.types.zexpr.zeq.make( tom.engine.adt.zenon.types.zterm.zvar.make("Error in zexprFromExpr") ,  tom.engine.adt.zenon.types.zterm.zvar.make("eq") ) ;
      }}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.appSubsE) ) {if ( true ) {

        // this should not occur
        return  tom.engine.adt.zenon.types.zexpr.zeq.make( tom.engine.adt.zenon.types.zterm.zvar.make("Error in zexprFromExpr") ,  tom.engine.adt.zenon.types.zterm.zvar.make("appSubsE") ) ;
      }}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.iland) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumber_freshVar_4= tomMatch321NameNumberfreshSubject_1.getLeft() ;{  tom.engine.adt.il.types.Expr  tomMatch321NameNumber_freshVar_5= tomMatch321NameNumberfreshSubject_1.getRight() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zexpr.zand.make(zexprFromExpr(tomMatch321NameNumber_freshVar_4), zexprFromExpr(tomMatch321NameNumber_freshVar_5)) ;
      }}}}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.ilor) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumber_freshVar_6= tomMatch321NameNumberfreshSubject_1.getLeft() ;{  tom.engine.adt.il.types.Expr  tomMatch321NameNumber_freshVar_7= tomMatch321NameNumberfreshSubject_1.getRight() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zexpr.zor.make(zexprFromExpr(tomMatch321NameNumber_freshVar_6), zexprFromExpr(tomMatch321NameNumber_freshVar_7)) ;
      }}}}}}if ( (expr instanceof tom.engine.adt.il.types.Expr) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Expr )expr);if ( (tomMatch321NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.expr.ilnot) ) {{  tom.engine.adt.il.types.Expr  tomMatch321NameNumber_freshVar_8= tomMatch321NameNumberfreshSubject_1.getExp() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zexpr.znot.make(zexprFromExpr(tomMatch321NameNumber_freshVar_8)) ;
      }}}}}}

    return  tom.engine.adt.zenon.types.zexpr.zeq.make( tom.engine.adt.zenon.types.zterm.zvar.make("Error in zexprFromExpr") ,  tom.engine.adt.zenon.types.zterm.zvar.make("end " + expr.toString()) ) ;
  }

  ZSymbol zsymbolFromSymbol(Symbol symb) {
    {if ( (symb instanceof tom.engine.adt.il.types.Symbol) ) {{  tom.engine.adt.il.types.Symbol  tomMatch322NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Symbol )symb);if ( (tomMatch322NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.symbol.fsymbol) ) {{  String  tomMatch322NameNumber_freshVar_0= tomMatch322NameNumberfreshSubject_1.getName() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zsymbol.zsymbol.make(tomMatch322NameNumber_freshVar_0) ;
      }}}}}}

    return  tom.engine.adt.zenon.types.zsymbol.zsymbol.make("random") ;
  }

  ZExpr zexprFromSeq(Seq seq) {
    {if ( (seq instanceof tom.engine.adt.il.types.Seq) ) {{  tom.engine.adt.il.types.Seq  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Seq )seq);if ( (tomMatch323NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.seq.seq) ) {if ( true ) {

        return  tom.engine.adt.zenon.types.zexpr.ztrue.make() ;
      }}}}if ( (seq instanceof tom.engine.adt.il.types.Seq) ) {{  tom.engine.adt.il.types.Seq  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Seq )seq);if ( (tomMatch323NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.seq.dedterm) ) {{  tom.engine.adt.il.types.TermList  tomMatch323NameNumber_freshVar_0= tomMatch323NameNumberfreshSubject_1.getTerms() ;{  tom.engine.adt.il.types.TermList  tom_termlist=tomMatch323NameNumber_freshVar_0;if ( true ) {{if ( (tom_termlist instanceof tom.engine.adt.il.types.TermList) ) {{  tom.engine.adt.il.types.TermList  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.il.types.TermList )tom_termlist);if ( ((tomMatch324NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.termlist.ConsconcTerm) || (tomMatch324NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.termlist.EmptyconcTerm)) ) {{  tom.engine.adt.il.types.TermList  tomMatch324NameNumber_freshVar_0=tomMatch324NameNumberfreshSubject_1;{  tom.engine.adt.il.types.TermList  tomMatch324NameNumber_begin_2=tomMatch324NameNumber_freshVar_0;{  tom.engine.adt.il.types.TermList  tomMatch324NameNumber_end_3=tomMatch324NameNumber_freshVar_0;do {{{  tom.engine.adt.il.types.TermList  tomMatch324NameNumber_freshVar_1=tomMatch324NameNumber_end_3;if (!( tomMatch324NameNumber_freshVar_1.isEmptyconcTerm() )) {{  tom.engine.adt.il.types.TermList  tomMatch324NameNumber_freshVar_4= tomMatch324NameNumber_freshVar_1.getTailconcTerm() ;if (!( tomMatch324NameNumber_freshVar_4.isEmptyconcTerm() )) {{  tom.engine.adt.il.types.TermList  tomMatch324NameNumber_freshVar_5= tomMatch324NameNumber_freshVar_4.getTailconcTerm() ;if ( tomMatch324NameNumber_freshVar_5.isEmptyconcTerm() ) {if ( true ) {



            return  tom.engine.adt.zenon.types.zexpr.zeq.make(ztermFromTerm( tomMatch324NameNumber_freshVar_1.getHeadconcTerm() ), ztermFromTerm( tomMatch324NameNumber_freshVar_4.getHeadconcTerm() )) ;
          }}}}}}}if ( tomMatch324NameNumber_end_3.isEmptyconcTerm() ) {tomMatch324NameNumber_end_3=tomMatch324NameNumber_begin_2;} else {tomMatch324NameNumber_end_3= tomMatch324NameNumber_end_3.getTailconcTerm() ;}}} while(!( tomMatch324NameNumber_end_3.equals(tomMatch324NameNumber_begin_2) ));}}}}}}}

      }}}}}}if ( (seq instanceof tom.engine.adt.il.types.Seq) ) {{  tom.engine.adt.il.types.Seq  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Seq )seq);if ( (tomMatch323NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.seq.dedexpr) ) {{  tom.engine.adt.il.types.ExprList  tomMatch323NameNumber_freshVar_1= tomMatch323NameNumberfreshSubject_1.getExprs() ;{  tom.engine.adt.il.types.ExprList  tom_exprlist=tomMatch323NameNumber_freshVar_1;if ( true ) {{if ( (tom_exprlist instanceof tom.engine.adt.il.types.ExprList) ) {{  tom.engine.adt.il.types.ExprList  tomMatch325NameNumberfreshSubject_1=(( tom.engine.adt.il.types.ExprList )tom_exprlist);if ( ((tomMatch325NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.exprlist.ConsconcExpr) || (tomMatch325NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.exprlist.EmptyconcExpr)) ) {{  tom.engine.adt.il.types.ExprList  tomMatch325NameNumber_freshVar_0=tomMatch325NameNumberfreshSubject_1;{  tom.engine.adt.il.types.ExprList  tomMatch325NameNumber_begin_2=tomMatch325NameNumber_freshVar_0;{  tom.engine.adt.il.types.ExprList  tomMatch325NameNumber_end_3=tomMatch325NameNumber_freshVar_0;do {{{  tom.engine.adt.il.types.ExprList  tomMatch325NameNumber_freshVar_1=tomMatch325NameNumber_end_3;if (!( tomMatch325NameNumber_freshVar_1.isEmptyconcExpr() )) {{  tom.engine.adt.il.types.ExprList  tomMatch325NameNumber_freshVar_4= tomMatch325NameNumber_freshVar_1.getTailconcExpr() ;if (!( tomMatch325NameNumber_freshVar_4.isEmptyconcExpr() )) {if ( ( tomMatch325NameNumber_freshVar_4.getHeadconcExpr()  instanceof tom.engine.adt.il.types.expr.iltrue) ) {{  tom.engine.adt.il.types.ExprList  tomMatch325NameNumber_freshVar_5= tomMatch325NameNumber_freshVar_4.getTailconcExpr() ;if ( tomMatch325NameNumber_freshVar_5.isEmptyconcExpr() ) {if ( true ) {



            return zexprFromExpr( tomMatch325NameNumber_freshVar_1.getHeadconcExpr() );
          }}}}}}}}if ( tomMatch325NameNumber_end_3.isEmptyconcExpr() ) {tomMatch325NameNumber_end_3=tomMatch325NameNumber_begin_2;} else {tomMatch325NameNumber_end_3= tomMatch325NameNumber_end_3.getTailconcExpr() ;}}} while(!( tomMatch325NameNumber_end_3.equals(tomMatch325NameNumber_begin_2) ));}}}}}}}

      }}}}}}if ( (seq instanceof tom.engine.adt.il.types.Seq) ) {{  tom.engine.adt.il.types.Seq  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.il.types.Seq )seq);if ( (tomMatch323NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.seq.dedexpr) ) {{  tom.engine.adt.il.types.ExprList  tomMatch323NameNumber_freshVar_2= tomMatch323NameNumberfreshSubject_1.getExprs() ;{  tom.engine.adt.il.types.ExprList  tom_exprlist=tomMatch323NameNumber_freshVar_2;if ( true ) {{if ( (tom_exprlist instanceof tom.engine.adt.il.types.ExprList) ) {{  tom.engine.adt.il.types.ExprList  tomMatch326NameNumberfreshSubject_1=(( tom.engine.adt.il.types.ExprList )tom_exprlist);if ( ((tomMatch326NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.exprlist.ConsconcExpr) || (tomMatch326NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.exprlist.EmptyconcExpr)) ) {{  tom.engine.adt.il.types.ExprList  tomMatch326NameNumber_freshVar_0=tomMatch326NameNumberfreshSubject_1;{  tom.engine.adt.il.types.ExprList  tomMatch326NameNumber_begin_2=tomMatch326NameNumber_freshVar_0;{  tom.engine.adt.il.types.ExprList  tomMatch326NameNumber_end_3=tomMatch326NameNumber_freshVar_0;do {{{  tom.engine.adt.il.types.ExprList  tomMatch326NameNumber_freshVar_1=tomMatch326NameNumber_end_3;if (!( tomMatch326NameNumber_freshVar_1.isEmptyconcExpr() )) {{  tom.engine.adt.il.types.ExprList  tomMatch326NameNumber_freshVar_4= tomMatch326NameNumber_freshVar_1.getTailconcExpr() ;if (!( tomMatch326NameNumber_freshVar_4.isEmptyconcExpr() )) {if ( ( tomMatch326NameNumber_freshVar_4.getHeadconcExpr()  instanceof tom.engine.adt.il.types.expr.ilfalse) ) {{  tom.engine.adt.il.types.ExprList  tomMatch326NameNumber_freshVar_5= tomMatch326NameNumber_freshVar_4.getTailconcExpr() ;if ( tomMatch326NameNumber_freshVar_5.isEmptyconcExpr() ) {if ( true ) {



            return  tom.engine.adt.zenon.types.zexpr.znot.make(zexprFromExpr( tomMatch326NameNumber_freshVar_1.getHeadconcExpr() )) ;
          }}}}}}}}if ( tomMatch326NameNumber_end_3.isEmptyconcExpr() ) {tomMatch326NameNumber_end_3=tomMatch326NameNumber_begin_2;} else {tomMatch326NameNumber_end_3= tomMatch326NameNumber_end_3.getTailconcExpr() ;}}} while(!( tomMatch326NameNumber_end_3.equals(tomMatch326NameNumber_begin_2) ));}}}}}}}

      }}}}}}}

    return  tom.engine.adt.zenon.types.zexpr.ztrue.make() ;
  }

  ZTerm ztermFromAbsTerm(AbsTerm absterm) {
    {if ( (absterm instanceof tom.engine.adt.il.types.AbsTerm) ) {{  tom.engine.adt.il.types.AbsTerm  tomMatch327NameNumberfreshSubject_1=(( tom.engine.adt.il.types.AbsTerm )absterm);if ( (tomMatch327NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.absterm.absvar) ) {{  tom.engine.adt.il.types.Variable  tomMatch327NameNumber_freshVar_0= tomMatch327NameNumberfreshSubject_1.getVarname() ;if ( (tomMatch327NameNumber_freshVar_0 instanceof tom.engine.adt.il.types.variable.var) ) {{  String  tomMatch327NameNumber_freshVar_1= tomMatch327NameNumber_freshVar_0.getName() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zterm.zvar.make(tomMatch327NameNumber_freshVar_1) ;
      }}}}}}}if ( (absterm instanceof tom.engine.adt.il.types.AbsTerm) ) {{  tom.engine.adt.il.types.AbsTerm  tomMatch327NameNumberfreshSubject_1=(( tom.engine.adt.il.types.AbsTerm )absterm);if ( (tomMatch327NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.absterm.st) ) {{  tom.engine.adt.il.types.Symbol  tomMatch327NameNumber_freshVar_2= tomMatch327NameNumberfreshSubject_1.getSymbol() ;{  tom.engine.adt.il.types.AbsTerm  tomMatch327NameNumber_freshVar_3= tomMatch327NameNumberfreshSubject_1.getAbst() ;{  int  tomMatch327NameNumber_freshVar_4= tomMatch327NameNumberfreshSubject_1.getIndex() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zterm.zst.make(ztermFromAbsTerm(tomMatch327NameNumber_freshVar_3), tomMatch327NameNumber_freshVar_4) ;
      }}}}}}}if ( (absterm instanceof tom.engine.adt.il.types.AbsTerm) ) {{  tom.engine.adt.il.types.AbsTerm  tomMatch327NameNumberfreshSubject_1=(( tom.engine.adt.il.types.AbsTerm )absterm);if ( (tomMatch327NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.absterm.sl) ) {{  tom.engine.adt.il.types.Symbol  tomMatch327NameNumber_freshVar_5= tomMatch327NameNumberfreshSubject_1.getSymbol() ;{  tom.engine.adt.il.types.AbsTerm  tomMatch327NameNumber_freshVar_6= tomMatch327NameNumberfreshSubject_1.getAbst() ;{  String  tomMatch327NameNumber_freshVar_7= tomMatch327NameNumberfreshSubject_1.getName() ;if ( true ) {

        return  tom.engine.adt.zenon.types.zterm.zsl.make(ztermFromAbsTerm(tomMatch327NameNumber_freshVar_6), tomMatch327NameNumber_freshVar_7) ;
      }}}}}}}}

    return  tom.engine.adt.zenon.types.zterm.zvar.make("Error in ztermFromAbsTerm") ;
  }

  private Map ztermVariableMapFromSubstitutionList(SubstitutionList sublist, Map map) {
    {if ( (sublist instanceof tom.engine.adt.il.types.SubstitutionList) ) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumberfreshSubject_1=(( tom.engine.adt.il.types.SubstitutionList )sublist);if ( ((tomMatch328NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.substitutionlist.Conssubs) || (tomMatch328NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.substitutionlist.Emptysubs)) ) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumber_freshVar_0=tomMatch328NameNumberfreshSubject_1;if ( tomMatch328NameNumber_freshVar_0.isEmptysubs() ) {if ( true ) {
 return map; }}}}}}if ( (sublist instanceof tom.engine.adt.il.types.SubstitutionList) ) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumberfreshSubject_1=(( tom.engine.adt.il.types.SubstitutionList )sublist);if ( ((tomMatch328NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.substitutionlist.Conssubs) || (tomMatch328NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.substitutionlist.Emptysubs)) ) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumber_freshVar_1=tomMatch328NameNumberfreshSubject_1;if (!( tomMatch328NameNumber_freshVar_1.isEmptysubs() )) {if ( ( tomMatch328NameNumber_freshVar_1.getHeadsubs()  instanceof tom.engine.adt.il.types.substitution.undefsubs) ) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumber_freshVar_2= tomMatch328NameNumber_freshVar_1.getTailsubs() ;if ( true ) {

        return ztermVariableMapFromSubstitutionList(tomMatch328NameNumber_freshVar_2,map);
      }}}}}}}}if ( (sublist instanceof tom.engine.adt.il.types.SubstitutionList) ) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumberfreshSubject_1=(( tom.engine.adt.il.types.SubstitutionList )sublist);if ( ((tomMatch328NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.substitutionlist.Conssubs) || (tomMatch328NameNumberfreshSubject_1 instanceof tom.engine.adt.il.types.substitutionlist.Emptysubs)) ) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumber_freshVar_4=tomMatch328NameNumberfreshSubject_1;if (!( tomMatch328NameNumber_freshVar_4.isEmptysubs() )) {if ( ( tomMatch328NameNumber_freshVar_4.getHeadsubs()  instanceof tom.engine.adt.il.types.substitution.is) ) {{  tom.engine.adt.il.types.Variable  tomMatch328NameNumber_freshVar_7=  tomMatch328NameNumber_freshVar_4.getHeadsubs() .getVar() ;{  tom.engine.adt.il.types.Term  tomMatch328NameNumber_freshVar_8=  tomMatch328NameNumber_freshVar_4.getHeadsubs() .getTerm() ;if ( (tomMatch328NameNumber_freshVar_7 instanceof tom.engine.adt.il.types.variable.var) ) {{  String  tomMatch328NameNumber_freshVar_9= tomMatch328NameNumber_freshVar_7.getName() ;{  tom.engine.adt.il.types.SubstitutionList  tomMatch328NameNumber_freshVar_5= tomMatch328NameNumber_freshVar_4.getTailsubs() ;if ( true ) {

        map.put(tomMatch328NameNumber_freshVar_9,ztermFromTerm(tomMatch328NameNumber_freshVar_8));
        return ztermVariableMapFromSubstitutionList(tomMatch328NameNumber_freshVar_5,map);
      }}}}}}}}}}}}}

    throw new TomRuntimeException(
        "verifier: strange substitution list: " + sublist);
  }
}
