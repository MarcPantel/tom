/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2005, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;
import tom.library.traversal.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.il.*;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;
import tom.engine.exception.TomRuntimeException;


public class ZenonOutput {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected  char  tom_set_stamp_char( char  c) { return  c ; }protected void tom_check_stamp_char( char  c) { ; }protected boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }protected  Character  tom_set_stamp_Character( Character  c) { return  c ; }protected void tom_check_stamp_Character( Character  c) { ; }protected boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }protected boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }protected  Character  tom_make_Char( char  c) { return  new Character(c) ; }protected  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } protected  String  tom_set_stamp_String( String  s) { return  s ; }protected void tom_check_stamp_String( String  s) { ; }protected boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }protected boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }protected  String  tom_empty_list_concString() { return  "" ; }protected  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }protected  char  tom_get_head_concString_String( String  s) { return  s.charAt(0) ; }protected  String  tom_get_tail_concString_String( String  s) { return  s.substring(1) ; }protected boolean tom_is_empty_concString_String( String  s) { return  (s.length()==0) ; }protected  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  protected  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  protected boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; } protected  tom.engine.adt.il.types.DerivTree tom_get_implementation_DerivTree( tom.engine.adt.il.types.DerivTree t) { return t; }protected  tom.engine.adt.il.types.DerivTree tom_set_stamp_DerivTree( tom.engine.adt.il.types.DerivTree t) { return (tom.engine.adt.il.types.DerivTree)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_DerivTree( tom.engine.adt.il.types.DerivTree t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_DerivTree(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_derivrule2( tom.engine.adt.il.types.DerivTree t) { return  (t!= null) && t.isDerivrule2(); }protected  tom.engine.adt.il.types.DerivTree tom_make_derivrule2( String  t0,  tom.engine.adt.il.types.Deriv t1,  tom.engine.adt.il.types.DerivTree t2,  tom.engine.adt.il.types.DerivTree t3,  tom.engine.adt.il.types.Seq t4) { return  getIlFactory().makeDerivTree_Derivrule2(t0, t1, t2, t3, t4); }protected  String  tom_get_slot_derivrule2_name( tom.engine.adt.il.types.DerivTree t) { return  t.getName(); }protected  tom.engine.adt.il.types.Deriv tom_get_slot_derivrule2_post( tom.engine.adt.il.types.DerivTree t) { return  t.getPost(); }protected  tom.engine.adt.il.types.DerivTree tom_get_slot_derivrule2_pre( tom.engine.adt.il.types.DerivTree t) { return  t.getPre(); }protected  tom.engine.adt.il.types.DerivTree tom_get_slot_derivrule2_pre2( tom.engine.adt.il.types.DerivTree t) { return  t.getPre2(); }protected  tom.engine.adt.il.types.Seq tom_get_slot_derivrule2_cond( tom.engine.adt.il.types.DerivTree t) { return  t.getCond(); }protected boolean tom_is_fun_sym_derivrule( tom.engine.adt.il.types.DerivTree t) { return  (t!= null) && t.isDerivrule(); }protected  tom.engine.adt.il.types.DerivTree tom_make_derivrule( String  t0,  tom.engine.adt.il.types.Deriv t1,  tom.engine.adt.il.types.DerivTree t2,  tom.engine.adt.il.types.Seq t3) { return  getIlFactory().makeDerivTree_Derivrule(t0, t1, t2, t3); }protected  String  tom_get_slot_derivrule_name( tom.engine.adt.il.types.DerivTree t) { return  t.getName(); }protected  tom.engine.adt.il.types.Deriv tom_get_slot_derivrule_post( tom.engine.adt.il.types.DerivTree t) { return  t.getPost(); }protected  tom.engine.adt.il.types.DerivTree tom_get_slot_derivrule_pre( tom.engine.adt.il.types.DerivTree t) { return  t.getPre(); }protected  tom.engine.adt.il.types.Seq tom_get_slot_derivrule_cond( tom.engine.adt.il.types.DerivTree t) { return  t.getCond(); }protected boolean tom_is_fun_sym_endderiv( tom.engine.adt.il.types.DerivTree t) { return  (t!= null) && t.isEndderiv(); }protected  tom.engine.adt.il.types.DerivTree tom_make_endderiv() { return  getIlFactory().makeDerivTree_Endderiv(); }protected  tom.engine.adt.il.types.Deriv tom_get_implementation_Deriv( tom.engine.adt.il.types.Deriv t) { return t; }protected  tom.engine.adt.il.types.Deriv tom_set_stamp_Deriv( tom.engine.adt.il.types.Deriv t) { return (tom.engine.adt.il.types.Deriv)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Deriv( tom.engine.adt.il.types.Deriv t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Deriv(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_ebs( tom.engine.adt.il.types.Deriv t) { return  (t!= null) && t.isEbs(); }protected  tom.engine.adt.il.types.Deriv tom_make_ebs( tom.engine.adt.il.types.Environment t0,  tom.engine.adt.il.types.Environment t1) { return  getIlFactory().makeDeriv_Ebs(t0, t1); }protected  tom.engine.adt.il.types.Environment tom_get_slot_ebs_lhs( tom.engine.adt.il.types.Deriv t) { return  t.getLhs(); }protected  tom.engine.adt.il.types.Environment tom_get_slot_ebs_rhs( tom.engine.adt.il.types.Deriv t) { return  t.getRhs(); }protected  tom.engine.adt.il.types.ExprList tom_get_implementation_ExprList( tom.engine.adt.il.types.ExprList t) { return t; }protected  tom.engine.adt.il.types.ExprList tom_set_stamp_ExprList( tom.engine.adt.il.types.ExprList t) { return (tom.engine.adt.il.types.ExprList)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ExprList( tom.engine.adt.il.types.ExprList t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ExprList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_concExpr( tom.engine.adt.il.types.ExprList t) { return (t!= null) && t.isSortExprList(); }protected  tom.engine.adt.il.types.ExprList tom_empty_list_concExpr() { return getIlFactory().makeExprList(); }protected  tom.engine.adt.il.types.ExprList tom_cons_list_concExpr( tom.engine.adt.il.types.Expr e,  tom.engine.adt.il.types.ExprList l) { return getIlFactory().makeExprList(e,l); }protected  tom.engine.adt.il.types.Expr tom_get_head_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) { return l.getHead(); }protected  tom.engine.adt.il.types.ExprList tom_get_tail_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) { return l.getTail(); }protected boolean tom_is_empty_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) { return l.isEmpty(); }protected  tom.engine.adt.il.types.ExprList tom_append_list_concExpr( tom.engine.adt.il.types.ExprList l1,  tom.engine.adt.il.types.ExprList l2) {    if(tom_is_empty_concExpr_ExprList(l1)) {     return l2;    } else if(tom_is_empty_concExpr_ExprList(l2)) {     return l1;    } else if(tom_is_empty_concExpr_ExprList(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(l1))) {     return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(l1),l2);    } else {      return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(l1),tom_append_list_concExpr(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(l1),l2));    }   }  protected  tom.engine.adt.il.types.ExprList tom_get_slice_concExpr( tom.engine.adt.il.types.ExprList begin,  tom.engine.adt.il.types.ExprList end) {    if(tom_terms_equal_ExprList(begin,end)) {      return ( tom.engine.adt.il.types.ExprList)tom_empty_list_concExpr();    } else {      return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(begin),( tom.engine.adt.il.types.ExprList)tom_get_slice_concExpr(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptyExprList( tom.engine.adt.il.types.ExprList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.il.types.ExprList tom_make_emptyExprList() { return getIlFactory().makeExprList(); }protected boolean tom_is_fun_sym_manyExprList( tom.engine.adt.il.types.ExprList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.il.types.ExprList tom_make_manyExprList( tom.engine.adt.il.types.Expr e,  tom.engine.adt.il.types.ExprList l) { return getIlFactory().makeExprList(e,l); }protected  tom.engine.adt.il.types.Expr tom_get_slot_manyExprList_head( tom.engine.adt.il.types.ExprList t) { return  t.getHead(); }protected  tom.engine.adt.il.types.ExprList tom_get_slot_manyExprList_tail( tom.engine.adt.il.types.ExprList t) { return  t.getTail(); }protected  tom.engine.adt.il.types.Seq tom_get_implementation_Seq( tom.engine.adt.il.types.Seq t) { return t; }protected  tom.engine.adt.il.types.Seq tom_set_stamp_Seq( tom.engine.adt.il.types.Seq t) { return (tom.engine.adt.il.types.Seq)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Seq( tom.engine.adt.il.types.Seq t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Seq(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_dedexpr( tom.engine.adt.il.types.Seq t) { return  (t!= null) && t.isDedexpr(); }protected  tom.engine.adt.il.types.Seq tom_make_dedexpr( tom.engine.adt.il.types.ExprList t0) { return  getIlFactory().makeSeq_Dedexpr(t0); }protected  tom.engine.adt.il.types.ExprList tom_get_slot_dedexpr_exprs( tom.engine.adt.il.types.Seq t) { return  t.getExprs(); }protected boolean tom_is_fun_sym_dedterm( tom.engine.adt.il.types.Seq t) { return  (t!= null) && t.isDedterm(); }protected  tom.engine.adt.il.types.Seq tom_make_dedterm( tom.engine.adt.il.types.TermList t0) { return  getIlFactory().makeSeq_Dedterm(t0); }protected  tom.engine.adt.il.types.TermList tom_get_slot_dedterm_terms( tom.engine.adt.il.types.Seq t) { return  t.getTerms(); }protected boolean tom_is_fun_sym_seq( tom.engine.adt.il.types.Seq t) { return  (t!= null) && t.isSeq(); }protected  tom.engine.adt.il.types.Seq tom_make_seq() { return  getIlFactory().makeSeq_Seq(); }protected  tom.engine.adt.il.types.TermList tom_get_implementation_TermList( tom.engine.adt.il.types.TermList t) { return t; }protected  tom.engine.adt.il.types.TermList tom_set_stamp_TermList( tom.engine.adt.il.types.TermList t) { return (tom.engine.adt.il.types.TermList)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_TermList( tom.engine.adt.il.types.TermList t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_TermList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_concTerm( tom.engine.adt.il.types.TermList t) { return (t!= null) && t.isSortTermList(); }protected  tom.engine.adt.il.types.TermList tom_empty_list_concTerm() { return getIlFactory().makeTermList(); }protected  tom.engine.adt.il.types.TermList tom_cons_list_concTerm( tom.engine.adt.il.types.Term e,  tom.engine.adt.il.types.TermList l) { return getIlFactory().makeTermList(e,l); }protected  tom.engine.adt.il.types.Term tom_get_head_concTerm_TermList( tom.engine.adt.il.types.TermList l) { return l.getHead(); }protected  tom.engine.adt.il.types.TermList tom_get_tail_concTerm_TermList( tom.engine.adt.il.types.TermList l) { return l.getTail(); }protected boolean tom_is_empty_concTerm_TermList( tom.engine.adt.il.types.TermList l) { return l.isEmpty(); }protected  tom.engine.adt.il.types.TermList tom_append_list_concTerm( tom.engine.adt.il.types.TermList l1,  tom.engine.adt.il.types.TermList l2) {    if(tom_is_empty_concTerm_TermList(l1)) {     return l2;    } else if(tom_is_empty_concTerm_TermList(l2)) {     return l1;    } else if(tom_is_empty_concTerm_TermList(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(l1))) {     return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(l1),l2);    } else {      return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(l1),tom_append_list_concTerm(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(l1),l2));    }   }  protected  tom.engine.adt.il.types.TermList tom_get_slice_concTerm( tom.engine.adt.il.types.TermList begin,  tom.engine.adt.il.types.TermList end) {    if(tom_terms_equal_TermList(begin,end)) {      return ( tom.engine.adt.il.types.TermList)tom_empty_list_concTerm();    } else {      return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(begin),( tom.engine.adt.il.types.TermList)tom_get_slice_concTerm(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptyTermList( tom.engine.adt.il.types.TermList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.il.types.TermList tom_make_emptyTermList() { return getIlFactory().makeTermList(); }protected boolean tom_is_fun_sym_manyTermList( tom.engine.adt.il.types.TermList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.il.types.TermList tom_make_manyTermList( tom.engine.adt.il.types.Term e,  tom.engine.adt.il.types.TermList l) { return getIlFactory().makeTermList(e,l); }protected  tom.engine.adt.il.types.Term tom_get_slot_manyTermList_head( tom.engine.adt.il.types.TermList t) { return  t.getHead(); }protected  tom.engine.adt.il.types.TermList tom_get_slot_manyTermList_tail( tom.engine.adt.il.types.TermList t) { return  t.getTail(); }protected  tom.engine.adt.il.types.Expr tom_get_implementation_Expr( tom.engine.adt.il.types.Expr t) { return t; }protected  tom.engine.adt.il.types.Expr tom_set_stamp_Expr( tom.engine.adt.il.types.Expr t) { return (tom.engine.adt.il.types.Expr)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Expr( tom.engine.adt.il.types.Expr t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Expr(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_appSubsE( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isAppSubsE(); }protected  tom.engine.adt.il.types.Expr tom_make_appSubsE( tom.engine.adt.il.types.SubstitutionList t0,  tom.engine.adt.il.types.Expr t1) { return  getIlFactory().makeExpr_AppSubsE(t0, t1); }protected  tom.engine.adt.il.types.SubstitutionList tom_get_slot_appSubsE_subs( tom.engine.adt.il.types.Expr t) { return  t.getSubs(); }protected  tom.engine.adt.il.types.Expr tom_get_slot_appSubsE_e( tom.engine.adt.il.types.Expr t) { return  t.getE(); }protected boolean tom_is_fun_sym_ilnot( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isIlnot(); }protected  tom.engine.adt.il.types.Expr tom_make_ilnot( tom.engine.adt.il.types.Expr t0) { return  getIlFactory().makeExpr_Ilnot(t0); }protected  tom.engine.adt.il.types.Expr tom_get_slot_ilnot_exp( tom.engine.adt.il.types.Expr t) { return  t.getExp(); }protected boolean tom_is_fun_sym_ilor( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isIlor(); }protected  tom.engine.adt.il.types.Expr tom_make_ilor( tom.engine.adt.il.types.Expr t0,  tom.engine.adt.il.types.Expr t1) { return  getIlFactory().makeExpr_Ilor(t0, t1); }protected  tom.engine.adt.il.types.Expr tom_get_slot_ilor_left( tom.engine.adt.il.types.Expr t) { return  t.getLeft(); }protected  tom.engine.adt.il.types.Expr tom_get_slot_ilor_right( tom.engine.adt.il.types.Expr t) { return  t.getRight(); }protected boolean tom_is_fun_sym_iland( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isIland(); }protected  tom.engine.adt.il.types.Expr tom_make_iland( tom.engine.adt.il.types.Expr t0,  tom.engine.adt.il.types.Expr t1) { return  getIlFactory().makeExpr_Iland(t0, t1); }protected  tom.engine.adt.il.types.Expr tom_get_slot_iland_left( tom.engine.adt.il.types.Expr t) { return  t.getLeft(); }protected  tom.engine.adt.il.types.Expr tom_get_slot_iland_right( tom.engine.adt.il.types.Expr t) { return  t.getRight(); }protected boolean tom_is_fun_sym_teq( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isTeq(); }protected  tom.engine.adt.il.types.Expr tom_make_teq( tom.engine.adt.il.types.AbsTerm t0,  tom.engine.adt.il.types.AbsTerm t1) { return  getIlFactory().makeExpr_Teq(t0, t1); }protected  tom.engine.adt.il.types.AbsTerm tom_get_slot_teq_labst( tom.engine.adt.il.types.Expr t) { return  t.getLabst(); }protected  tom.engine.adt.il.types.AbsTerm tom_get_slot_teq_rabst( tom.engine.adt.il.types.Expr t) { return  t.getRabst(); }protected boolean tom_is_fun_sym_tisfsym( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isTisfsym(); }protected  tom.engine.adt.il.types.Expr tom_make_tisfsym( tom.engine.adt.il.types.AbsTerm t0,  tom.engine.adt.il.types.Symbol t1) { return  getIlFactory().makeExpr_Tisfsym(t0, t1); }protected  tom.engine.adt.il.types.AbsTerm tom_get_slot_tisfsym_abst( tom.engine.adt.il.types.Expr t) { return  t.getAbst(); }protected  tom.engine.adt.il.types.Symbol tom_get_slot_tisfsym_symbol( tom.engine.adt.il.types.Expr t) { return  t.getSymbol(); }protected boolean tom_is_fun_sym_eq( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isEq(); }protected  tom.engine.adt.il.types.Expr tom_make_eq( tom.engine.adt.il.types.Term t0,  tom.engine.adt.il.types.Term t1) { return  getIlFactory().makeExpr_Eq(t0, t1); }protected  tom.engine.adt.il.types.Term tom_get_slot_eq_lt( tom.engine.adt.il.types.Expr t) { return  t.getLt(); }protected  tom.engine.adt.il.types.Term tom_get_slot_eq_rt( tom.engine.adt.il.types.Expr t) { return  t.getRt(); }protected boolean tom_is_fun_sym_isfsym( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isIsfsym(); }protected  tom.engine.adt.il.types.Expr tom_make_isfsym( tom.engine.adt.il.types.Term t0,  tom.engine.adt.il.types.Symbol t1) { return  getIlFactory().makeExpr_Isfsym(t0, t1); }protected  tom.engine.adt.il.types.Term tom_get_slot_isfsym_t( tom.engine.adt.il.types.Expr t) { return  t.getT(); }protected  tom.engine.adt.il.types.Symbol tom_get_slot_isfsym_symbol( tom.engine.adt.il.types.Expr t) { return  t.getSymbol(); }protected boolean tom_is_fun_sym_false( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isFalse(); }protected  tom.engine.adt.il.types.Expr tom_make_false() { return  getIlFactory().makeExpr_False(); }protected boolean tom_is_fun_sym_true( tom.engine.adt.il.types.Expr t) { return  (t!= null) && t.isTrue(); }protected  tom.engine.adt.il.types.Expr tom_make_true( tom.engine.adt.il.types.SubstitutionList t0) { return  getIlFactory().makeExpr_True(t0); }protected  tom.engine.adt.il.types.SubstitutionList tom_get_slot_true_subst( tom.engine.adt.il.types.Expr t) { return  t.getSubst(); }protected  tom.engine.adt.il.types.Term tom_get_implementation_Term( tom.engine.adt.il.types.Term t) { return t; }protected  tom.engine.adt.il.types.Term tom_set_stamp_Term( tom.engine.adt.il.types.Term t) { return (tom.engine.adt.il.types.Term)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Term( tom.engine.adt.il.types.Term t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Term(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_appSubsT( tom.engine.adt.il.types.Term t) { return  (t!= null) && t.isAppSubsT(); }protected  tom.engine.adt.il.types.Term tom_make_appSubsT( tom.engine.adt.il.types.SubstitutionList t0,  tom.engine.adt.il.types.Term t1) { return  getIlFactory().makeTerm_AppSubsT(t0, t1); }protected  tom.engine.adt.il.types.SubstitutionList tom_get_slot_appSubsT_subs( tom.engine.adt.il.types.Term t) { return  t.getSubs(); }protected  tom.engine.adt.il.types.Term tom_get_slot_appSubsT_t( tom.engine.adt.il.types.Term t) { return  t.getT(); }protected boolean tom_is_fun_sym_slot( tom.engine.adt.il.types.Term t) { return  (t!= null) && t.isSlot(); }protected  tom.engine.adt.il.types.Term tom_make_slot( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.Term t1,  String  t2) { return  getIlFactory().makeTerm_Slot(t0, t1, t2); }protected  tom.engine.adt.il.types.Symbol tom_get_slot_slot_symbol( tom.engine.adt.il.types.Term t) { return  t.getSymbol(); }protected  tom.engine.adt.il.types.Term tom_get_slot_slot_t( tom.engine.adt.il.types.Term t) { return  t.getT(); }protected  String  tom_get_slot_slot_name( tom.engine.adt.il.types.Term t) { return  t.getName(); }protected boolean tom_is_fun_sym_subterm( tom.engine.adt.il.types.Term t) { return  (t!= null) && t.isSubterm(); }protected  tom.engine.adt.il.types.Term tom_make_subterm( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.Term t1,  int  t2) { return  getIlFactory().makeTerm_Subterm(t0, t1, t2); }protected  tom.engine.adt.il.types.Symbol tom_get_slot_subterm_symbol( tom.engine.adt.il.types.Term t) { return  t.getSymbol(); }protected  tom.engine.adt.il.types.Term tom_get_slot_subterm_t( tom.engine.adt.il.types.Term t) { return  t.getT(); }protected  int  tom_get_slot_subterm_index( tom.engine.adt.il.types.Term t) { return  t.getIndex(); }protected boolean tom_is_fun_sym_repr( tom.engine.adt.il.types.Term t) { return  (t!= null) && t.isRepr(); }protected  tom.engine.adt.il.types.Term tom_make_repr( String  t0) { return  getIlFactory().makeTerm_Repr(t0); }protected  String  tom_get_slot_repr_term( tom.engine.adt.il.types.Term t) { return  t.getTerm(); }protected boolean tom_is_fun_sym_tau( tom.engine.adt.il.types.Term t) { return  (t!= null) && t.isTau(); }protected  tom.engine.adt.il.types.Term tom_make_tau( tom.engine.adt.il.types.AbsTerm t0) { return  getIlFactory().makeTerm_Tau(t0); }protected  tom.engine.adt.il.types.AbsTerm tom_get_slot_tau_abst( tom.engine.adt.il.types.Term t) { return  t.getAbst(); }protected  tom.engine.adt.il.types.Environment tom_get_implementation_Environment( tom.engine.adt.il.types.Environment t) { return t; }protected  tom.engine.adt.il.types.Environment tom_set_stamp_Environment( tom.engine.adt.il.types.Environment t) { return (tom.engine.adt.il.types.Environment)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Environment( tom.engine.adt.il.types.Environment t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Environment(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_env( tom.engine.adt.il.types.Environment t) { return  (t!= null) && t.isEnv(); }protected  tom.engine.adt.il.types.Environment tom_make_env( tom.engine.adt.il.types.SubstitutionList t0,  tom.engine.adt.il.types.Instr t1) { return  getIlFactory().makeEnvironment_Env(t0, t1); }protected  tom.engine.adt.il.types.SubstitutionList tom_get_slot_env_subs( tom.engine.adt.il.types.Environment t) { return  t.getSubs(); }protected  tom.engine.adt.il.types.Instr tom_get_slot_env_i( tom.engine.adt.il.types.Environment t) { return  t.getI(); }protected  tom.engine.adt.il.types.SubstitutionList tom_get_implementation_SubstitutionList( tom.engine.adt.il.types.SubstitutionList t) { return t; }protected  tom.engine.adt.il.types.SubstitutionList tom_set_stamp_SubstitutionList( tom.engine.adt.il.types.SubstitutionList t) { return (tom.engine.adt.il.types.SubstitutionList)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_SubstitutionList( tom.engine.adt.il.types.SubstitutionList t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_SubstitutionList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_subs( tom.engine.adt.il.types.SubstitutionList t) { return (t!= null) && t.isSortSubstitutionList(); }protected  tom.engine.adt.il.types.SubstitutionList tom_empty_list_subs() { return getIlFactory().makeSubstitutionList(); }protected  tom.engine.adt.il.types.SubstitutionList tom_cons_list_subs( tom.engine.adt.il.types.Substitution e,  tom.engine.adt.il.types.SubstitutionList l) { return getIlFactory().makeSubstitutionList(e,l); }protected  tom.engine.adt.il.types.Substitution tom_get_head_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) { return l.getHead(); }protected  tom.engine.adt.il.types.SubstitutionList tom_get_tail_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) { return l.getTail(); }protected boolean tom_is_empty_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) { return l.isEmpty(); }protected  tom.engine.adt.il.types.SubstitutionList tom_append_list_subs( tom.engine.adt.il.types.SubstitutionList l1,  tom.engine.adt.il.types.SubstitutionList l2) {    if(tom_is_empty_subs_SubstitutionList(l1)) {     return l2;    } else if(tom_is_empty_subs_SubstitutionList(l2)) {     return l1;    } else if(tom_is_empty_subs_SubstitutionList(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(l1))) {     return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(l1),l2);    } else {      return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(l1),tom_append_list_subs(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(l1),l2));    }   }  protected  tom.engine.adt.il.types.SubstitutionList tom_get_slice_subs( tom.engine.adt.il.types.SubstitutionList begin,  tom.engine.adt.il.types.SubstitutionList end) {    if(tom_terms_equal_SubstitutionList(begin,end)) {      return ( tom.engine.adt.il.types.SubstitutionList)tom_empty_list_subs();    } else {      return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(begin),( tom.engine.adt.il.types.SubstitutionList)tom_get_slice_subs(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptySubstitutionList( tom.engine.adt.il.types.SubstitutionList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.il.types.SubstitutionList tom_make_emptySubstitutionList() { return getIlFactory().makeSubstitutionList(); }protected boolean tom_is_fun_sym_manySubstitutionList( tom.engine.adt.il.types.SubstitutionList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.il.types.SubstitutionList tom_make_manySubstitutionList( tom.engine.adt.il.types.Substitution e,  tom.engine.adt.il.types.SubstitutionList l) { return getIlFactory().makeSubstitutionList(e,l); }protected  tom.engine.adt.il.types.Substitution tom_get_slot_manySubstitutionList_head( tom.engine.adt.il.types.SubstitutionList t) { return  t.getHead(); }protected  tom.engine.adt.il.types.SubstitutionList tom_get_slot_manySubstitutionList_tail( tom.engine.adt.il.types.SubstitutionList t) { return  t.getTail(); }protected  tom.engine.adt.il.types.Substitution tom_get_implementation_Substitution( tom.engine.adt.il.types.Substitution t) { return t; }protected  tom.engine.adt.il.types.Substitution tom_set_stamp_Substitution( tom.engine.adt.il.types.Substitution t) { return (tom.engine.adt.il.types.Substitution)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Substitution( tom.engine.adt.il.types.Substitution t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Substitution(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_is( tom.engine.adt.il.types.Substitution t) { return  (t!= null) && t.isIs(); }protected  tom.engine.adt.il.types.Substitution tom_make_is( tom.engine.adt.il.types.Variable t0,  tom.engine.adt.il.types.Term t1) { return  getIlFactory().makeSubstitution_Is(t0, t1); }protected  tom.engine.adt.il.types.Variable tom_get_slot_is_var( tom.engine.adt.il.types.Substitution t) { return  t.getVar(); }protected  tom.engine.adt.il.types.Term tom_get_slot_is_term( tom.engine.adt.il.types.Substitution t) { return  t.getTerm(); }protected boolean tom_is_fun_sym_undefsubs( tom.engine.adt.il.types.Substitution t) { return  (t!= null) && t.isUndefsubs(); }protected  tom.engine.adt.il.types.Substitution tom_make_undefsubs() { return  getIlFactory().makeSubstitution_Undefsubs(); }protected  tom.engine.adt.il.types.InstrList tom_get_implementation_InstrList( tom.engine.adt.il.types.InstrList t) { return t; }protected  tom.engine.adt.il.types.InstrList tom_set_stamp_InstrList( tom.engine.adt.il.types.InstrList t) { return (tom.engine.adt.il.types.InstrList)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_InstrList( tom.engine.adt.il.types.InstrList t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_InstrList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_semicolon( tom.engine.adt.il.types.InstrList t) { return (t!= null) && t.isSortInstrList(); }protected  tom.engine.adt.il.types.InstrList tom_empty_list_semicolon() { return getIlFactory().makeInstrList(); }protected  tom.engine.adt.il.types.InstrList tom_cons_list_semicolon( tom.engine.adt.il.types.Instr e,  tom.engine.adt.il.types.InstrList l) { return getIlFactory().makeInstrList(e,l); }protected  tom.engine.adt.il.types.Instr tom_get_head_semicolon_InstrList( tom.engine.adt.il.types.InstrList l) { return l.getHead(); }protected  tom.engine.adt.il.types.InstrList tom_get_tail_semicolon_InstrList( tom.engine.adt.il.types.InstrList l) { return l.getTail(); }protected boolean tom_is_empty_semicolon_InstrList( tom.engine.adt.il.types.InstrList l) { return l.isEmpty(); }protected  tom.engine.adt.il.types.InstrList tom_append_list_semicolon( tom.engine.adt.il.types.InstrList l1,  tom.engine.adt.il.types.InstrList l2) {    if(tom_is_empty_semicolon_InstrList(l1)) {     return l2;    } else if(tom_is_empty_semicolon_InstrList(l2)) {     return l1;    } else if(tom_is_empty_semicolon_InstrList(( tom.engine.adt.il.types.InstrList)tom_get_tail_semicolon_InstrList(l1))) {     return ( tom.engine.adt.il.types.InstrList)tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr)tom_get_head_semicolon_InstrList(l1),l2);    } else {      return ( tom.engine.adt.il.types.InstrList)tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr)tom_get_head_semicolon_InstrList(l1),tom_append_list_semicolon(( tom.engine.adt.il.types.InstrList)tom_get_tail_semicolon_InstrList(l1),l2));    }   }  protected  tom.engine.adt.il.types.InstrList tom_get_slice_semicolon( tom.engine.adt.il.types.InstrList begin,  tom.engine.adt.il.types.InstrList end) {    if(tom_terms_equal_InstrList(begin,end)) {      return ( tom.engine.adt.il.types.InstrList)tom_empty_list_semicolon();    } else {      return ( tom.engine.adt.il.types.InstrList)tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr)tom_get_head_semicolon_InstrList(begin),( tom.engine.adt.il.types.InstrList)tom_get_slice_semicolon(( tom.engine.adt.il.types.InstrList)tom_get_tail_semicolon_InstrList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptyInstrList( tom.engine.adt.il.types.InstrList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.il.types.InstrList tom_make_emptyInstrList() { return getIlFactory().makeInstrList(); }protected boolean tom_is_fun_sym_manyInstrList( tom.engine.adt.il.types.InstrList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.il.types.InstrList tom_make_manyInstrList( tom.engine.adt.il.types.Instr e,  tom.engine.adt.il.types.InstrList l) { return getIlFactory().makeInstrList(e,l); }protected  tom.engine.adt.il.types.Instr tom_get_slot_manyInstrList_head( tom.engine.adt.il.types.InstrList t) { return  t.getHead(); }protected  tom.engine.adt.il.types.InstrList tom_get_slot_manyInstrList_tail( tom.engine.adt.il.types.InstrList t) { return  t.getTail(); }protected  tom.engine.adt.il.types.Instr tom_get_implementation_Instr( tom.engine.adt.il.types.Instr t) { return t; }protected  tom.engine.adt.il.types.Instr tom_set_stamp_Instr( tom.engine.adt.il.types.Instr t) { return (tom.engine.adt.il.types.Instr)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Instr( tom.engine.adt.il.types.Instr t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Instr(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_sequence( tom.engine.adt.il.types.Instr t) { return  (t!= null) && t.isSequence(); }protected  tom.engine.adt.il.types.Instr tom_make_sequence( tom.engine.adt.il.types.InstrList t0) { return  getIlFactory().makeInstr_Sequence(t0); }protected  tom.engine.adt.il.types.InstrList tom_get_slot_sequence_instrlist( tom.engine.adt.il.types.Instr t) { return  t.getInstrlist(); }protected boolean tom_is_fun_sym_ILLet( tom.engine.adt.il.types.Instr t) { return  (t!= null) && t.isILLet(); }protected  tom.engine.adt.il.types.Instr tom_make_ILLet( tom.engine.adt.il.types.Variable t0,  tom.engine.adt.il.types.Term t1,  tom.engine.adt.il.types.Instr t2) { return  getIlFactory().makeInstr_ILLet(t0, t1, t2); }protected  tom.engine.adt.il.types.Variable tom_get_slot_ILLet_var( tom.engine.adt.il.types.Instr t) { return  t.getVar(); }protected  tom.engine.adt.il.types.Term tom_get_slot_ILLet_t( tom.engine.adt.il.types.Instr t) { return  t.getT(); }protected  tom.engine.adt.il.types.Instr tom_get_slot_ILLet_body( tom.engine.adt.il.types.Instr t) { return  t.getBody(); }protected boolean tom_is_fun_sym_ITE( tom.engine.adt.il.types.Instr t) { return  (t!= null) && t.isITE(); }protected  tom.engine.adt.il.types.Instr tom_make_ITE( tom.engine.adt.il.types.Expr t0,  tom.engine.adt.il.types.Instr t1,  tom.engine.adt.il.types.Instr t2) { return  getIlFactory().makeInstr_ITE(t0, t1, t2); }protected  tom.engine.adt.il.types.Expr tom_get_slot_ITE_e( tom.engine.adt.il.types.Instr t) { return  t.getE(); }protected  tom.engine.adt.il.types.Instr tom_get_slot_ITE_ift( tom.engine.adt.il.types.Instr t) { return  t.getIft(); }protected  tom.engine.adt.il.types.Instr tom_get_slot_ITE_iff( tom.engine.adt.il.types.Instr t) { return  t.getIff(); }protected boolean tom_is_fun_sym_refuse( tom.engine.adt.il.types.Instr t) { return  (t!= null) && t.isRefuse(); }protected  tom.engine.adt.il.types.Instr tom_make_refuse() { return  getIlFactory().makeInstr_Refuse(); }protected boolean tom_is_fun_sym_accept( tom.engine.adt.il.types.Instr t) { return  (t!= null) && t.isAccept(); }protected  tom.engine.adt.il.types.Instr tom_make_accept( ATerm  t0,  ATerm  t1) { return  getIlFactory().makeInstr_Accept(t0, t1); }protected  ATerm  tom_get_slot_accept_positive( tom.engine.adt.il.types.Instr t) { return  t.getPositive(); }protected  ATerm  tom_get_slot_accept_negative( tom.engine.adt.il.types.Instr t) { return  t.getNegative(); }protected  tom.engine.adt.il.types.AbsTerm tom_get_implementation_AbsTerm( tom.engine.adt.il.types.AbsTerm t) { return t; }protected  tom.engine.adt.il.types.AbsTerm tom_set_stamp_AbsTerm( tom.engine.adt.il.types.AbsTerm t) { return (tom.engine.adt.il.types.AbsTerm)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_AbsTerm( tom.engine.adt.il.types.AbsTerm t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_AbsTerm(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_sl( tom.engine.adt.il.types.AbsTerm t) { return  (t!= null) && t.isSl(); }protected  tom.engine.adt.il.types.AbsTerm tom_make_sl( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.AbsTerm t1,  String  t2) { return  getIlFactory().makeAbsTerm_Sl(t0, t1, t2); }protected  tom.engine.adt.il.types.Symbol tom_get_slot_sl_symbol( tom.engine.adt.il.types.AbsTerm t) { return  t.getSymbol(); }protected  tom.engine.adt.il.types.AbsTerm tom_get_slot_sl_abst( tom.engine.adt.il.types.AbsTerm t) { return  t.getAbst(); }protected  String  tom_get_slot_sl_name( tom.engine.adt.il.types.AbsTerm t) { return  t.getName(); }protected boolean tom_is_fun_sym_st( tom.engine.adt.il.types.AbsTerm t) { return  (t!= null) && t.isSt(); }protected  tom.engine.adt.il.types.AbsTerm tom_make_st( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.AbsTerm t1,  int  t2) { return  getIlFactory().makeAbsTerm_St(t0, t1, t2); }protected  tom.engine.adt.il.types.Symbol tom_get_slot_st_symbol( tom.engine.adt.il.types.AbsTerm t) { return  t.getSymbol(); }protected  tom.engine.adt.il.types.AbsTerm tom_get_slot_st_abst( tom.engine.adt.il.types.AbsTerm t) { return  t.getAbst(); }protected  int  tom_get_slot_st_index( tom.engine.adt.il.types.AbsTerm t) { return  t.getIndex(); }protected boolean tom_is_fun_sym_absvar( tom.engine.adt.il.types.AbsTerm t) { return  (t!= null) && t.isAbsvar(); }protected  tom.engine.adt.il.types.AbsTerm tom_make_absvar( tom.engine.adt.il.types.Variable t0) { return  getIlFactory().makeAbsTerm_Absvar(t0); }protected  tom.engine.adt.il.types.Variable tom_get_slot_absvar_varname( tom.engine.adt.il.types.AbsTerm t) { return  t.getVarname(); }protected  tom.engine.adt.il.types.Variable tom_get_implementation_Variable( tom.engine.adt.il.types.Variable t) { return t; }protected  tom.engine.adt.il.types.Variable tom_set_stamp_Variable( tom.engine.adt.il.types.Variable t) { return (tom.engine.adt.il.types.Variable)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Variable( tom.engine.adt.il.types.Variable t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Variable(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_var( tom.engine.adt.il.types.Variable t) { return  (t!= null) && t.isVar(); }protected  tom.engine.adt.il.types.Variable tom_make_var( String  t0) { return  getIlFactory().makeVariable_Var(t0); }protected  String  tom_get_slot_var_name( tom.engine.adt.il.types.Variable t) { return  t.getName(); }protected  tom.engine.adt.il.types.Symbol tom_get_implementation_Symbol( tom.engine.adt.il.types.Symbol t) { return t; }protected  tom.engine.adt.il.types.Symbol tom_set_stamp_Symbol( tom.engine.adt.il.types.Symbol t) { return (tom.engine.adt.il.types.Symbol)t.setAnnotation(getIlFactory().getPureFactory().makeList(),getIlFactory().getPureFactory().makeList()); }protected void tom_check_stamp_Symbol( tom.engine.adt.il.types.Symbol t) { if(t.getAnnotation(getIlFactory().getPureFactory().makeList()) == getIlFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_Symbol(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_fsymbol( tom.engine.adt.il.types.Symbol t) { return  (t!= null) && t.isFsymbol(); }protected  tom.engine.adt.il.types.Symbol tom_make_fsymbol( String  t0) { return  getIlFactory().makeSymbol_Fsymbol(t0); }protected  String  tom_get_slot_fsymbol_name( tom.engine.adt.il.types.Symbol t) { return  t.getName(); }  /* Generated by TOM (version 2.3rc0): Do not edit this file */protected  tom.engine.adt.zenon.types.ZSpec tom_get_implementation_ZSpec( tom.engine.adt.zenon.types.ZSpec t) { return t; }protected  tom.engine.adt.zenon.types.ZSpec tom_set_stamp_ZSpec( tom.engine.adt.zenon.types.ZSpec t) { return (tom.engine.adt.zenon.types.ZSpec)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZSpec( tom.engine.adt.zenon.types.ZSpec t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZSpec(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zthm( tom.engine.adt.zenon.types.ZSpec t) { return  (t!= null) && t.isZthm(); }protected  tom.engine.adt.zenon.types.ZSpec tom_make_zthm( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZAxiomList t1) { return  getZenonFactory().makeZSpec_Zthm(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zthm_thm( tom.engine.adt.zenon.types.ZSpec t) { return  t.getThm(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_slot_zthm_by( tom.engine.adt.zenon.types.ZSpec t) { return  t.getBy(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_implementation_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return t; }protected  tom.engine.adt.zenon.types.ZAxiomList tom_set_stamp_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return (tom.engine.adt.zenon.types.ZAxiomList)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZAxiomList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList t) { return (t!= null) && t.isSortZAxiomList(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_empty_list_zby() { return getZenonFactory().makeZAxiomList(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom e,  tom.engine.adt.zenon.types.ZAxiomList l) { return getZenonFactory().makeZAxiomList(e,l); }protected  tom.engine.adt.zenon.types.ZAxiom tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) { return l.getHead(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) { return l.getTail(); }protected boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) { return l.isEmpty(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList l2) {    if(tom_is_empty_zby_ZAxiomList(l1)) {     return l2;    } else if(tom_is_empty_zby_ZAxiomList(l2)) {     return l1;    } else if(tom_is_empty_zby_ZAxiomList(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1))) {     return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),tom_append_list_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1),l2));    }   }  protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList begin,  tom.engine.adt.zenon.types.ZAxiomList end) {    if(tom_terms_equal_ZAxiomList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_empty_list_zby();    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(begin),( tom.engine.adt.zenon.types.ZAxiomList)tom_get_slice_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptyZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_make_emptyZAxiomList() { return getZenonFactory().makeZAxiomList(); }protected boolean tom_is_fun_sym_manyZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_make_manyZAxiomList( tom.engine.adt.zenon.types.ZAxiom e,  tom.engine.adt.zenon.types.ZAxiomList l) { return getZenonFactory().makeZAxiomList(e,l); }protected  tom.engine.adt.zenon.types.ZAxiom tom_get_slot_manyZAxiomList_head( tom.engine.adt.zenon.types.ZAxiomList t) { return  t.getHead(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_slot_manyZAxiomList_tail( tom.engine.adt.zenon.types.ZAxiomList t) { return  t.getTail(); }protected  tom.engine.adt.zenon.types.ZAxiom tom_get_implementation_ZAxiom( tom.engine.adt.zenon.types.ZAxiom t) { return t; }protected  tom.engine.adt.zenon.types.ZAxiom tom_set_stamp_ZAxiom( tom.engine.adt.zenon.types.ZAxiom t) { return (tom.engine.adt.zenon.types.ZAxiom)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZAxiom( tom.engine.adt.zenon.types.ZAxiom t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZAxiom(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zaxiom( tom.engine.adt.zenon.types.ZAxiom t) { return  (t!= null) && t.isZaxiom(); }protected  tom.engine.adt.zenon.types.ZAxiom tom_make_zaxiom( String  t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZAxiom_Zaxiom(t0, t1); }protected  String  tom_get_slot_zaxiom_name( tom.engine.adt.zenon.types.ZAxiom t) { return  t.getName(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zaxiom_ax( tom.engine.adt.zenon.types.ZAxiom t) { return  t.getAx(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_implementation_ZExpr( tom.engine.adt.zenon.types.ZExpr t) { return t; }protected  tom.engine.adt.zenon.types.ZExpr tom_set_stamp_ZExpr( tom.engine.adt.zenon.types.ZExpr t) { return (tom.engine.adt.zenon.types.ZExpr)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZExpr( tom.engine.adt.zenon.types.ZExpr t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZExpr(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zequiv( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZequiv(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZExpr_Zequiv(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zequiv_lte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLte(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zequiv_rte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRte(); }protected boolean tom_is_fun_sym_znot( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZnot(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_znot( tom.engine.adt.zenon.types.ZExpr t0) { return  getZenonFactory().makeZExpr_Znot(t0); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_znot_nex( tom.engine.adt.zenon.types.ZExpr t) { return  t.getNex(); }protected boolean tom_is_fun_sym_zor( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZor(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zor( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZExpr_Zor(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zor_lte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLte(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zor_rte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRte(); }protected boolean tom_is_fun_sym_zand( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZand(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zand( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZExpr_Zand(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zand_lte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLte(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zand_rte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRte(); }protected boolean tom_is_fun_sym_zexists( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZexists(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zexists( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZType t1,  tom.engine.adt.zenon.types.ZExpr t2) { return  getZenonFactory().makeZExpr_Zexists(t0, t1, t2); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zexists_var( tom.engine.adt.zenon.types.ZExpr t) { return  t.getVar(); }protected  tom.engine.adt.zenon.types.ZType tom_get_slot_zexists_aztype( tom.engine.adt.zenon.types.ZExpr t) { return  t.getAztype(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zexists_expr( tom.engine.adt.zenon.types.ZExpr t) { return  t.getExpr(); }protected boolean tom_is_fun_sym_zforall( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZforall(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zforall( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZType t1,  tom.engine.adt.zenon.types.ZExpr t2) { return  getZenonFactory().makeZExpr_Zforall(t0, t1, t2); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zforall_var( tom.engine.adt.zenon.types.ZExpr t) { return  t.getVar(); }protected  tom.engine.adt.zenon.types.ZType tom_get_slot_zforall_aztype( tom.engine.adt.zenon.types.ZExpr t) { return  t.getAztype(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zforall_expr( tom.engine.adt.zenon.types.ZExpr t) { return  t.getExpr(); }protected boolean tom_is_fun_sym_zeq( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZeq(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zeq( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZTerm t1) { return  getZenonFactory().makeZExpr_Zeq(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zeq_lt( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLt(); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zeq_rt( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRt(); }protected boolean tom_is_fun_sym_zisfsym( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZisfsym(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZSymbol t1) { return  getZenonFactory().makeZExpr_Zisfsym(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zisfsym_t( tom.engine.adt.zenon.types.ZExpr t) { return  t.getT(); }protected  tom.engine.adt.zenon.types.ZSymbol tom_get_slot_zisfsym_symbol( tom.engine.adt.zenon.types.ZExpr t) { return  t.getSymbol(); }protected boolean tom_is_fun_sym_zfalse( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZfalse(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zfalse() { return  getZenonFactory().makeZExpr_Zfalse(); }protected boolean tom_is_fun_sym_ztrue( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZtrue(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_ztrue() { return  getZenonFactory().makeZExpr_Ztrue(); }protected  tom.engine.adt.zenon.types.ZType tom_get_implementation_ZType( tom.engine.adt.zenon.types.ZType t) { return t; }protected  tom.engine.adt.zenon.types.ZType tom_set_stamp_ZType( tom.engine.adt.zenon.types.ZType t) { return (tom.engine.adt.zenon.types.ZType)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZType( tom.engine.adt.zenon.types.ZType t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZType(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_ztype( tom.engine.adt.zenon.types.ZType t) { return  (t!= null) && t.isZtype(); }protected  tom.engine.adt.zenon.types.ZType tom_make_ztype( String  t0) { return  getZenonFactory().makeZType_Ztype(t0); }protected  String  tom_get_slot_ztype_tname( tom.engine.adt.zenon.types.ZType t) { return  t.getTname(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_implementation_ZTermList( tom.engine.adt.zenon.types.ZTermList t) { return t; }protected  tom.engine.adt.zenon.types.ZTermList tom_set_stamp_ZTermList( tom.engine.adt.zenon.types.ZTermList t) { return (tom.engine.adt.zenon.types.ZTermList)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZTermList( tom.engine.adt.zenon.types.ZTermList t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZTermList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_concZTerm( tom.engine.adt.zenon.types.ZTermList t) { return (t!= null) && t.isSortZTermList(); }protected  tom.engine.adt.zenon.types.ZTermList tom_empty_list_concZTerm() { return getZenonFactory().makeZTermList(); }protected  tom.engine.adt.zenon.types.ZTermList tom_cons_list_concZTerm( tom.engine.adt.zenon.types.ZTerm e,  tom.engine.adt.zenon.types.ZTermList l) { return getZenonFactory().makeZTermList(e,l); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_head_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) { return l.getHead(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_tail_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) { return l.getTail(); }protected boolean tom_is_empty_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) { return l.isEmpty(); }protected  tom.engine.adt.zenon.types.ZTermList tom_append_list_concZTerm( tom.engine.adt.zenon.types.ZTermList l1,  tom.engine.adt.zenon.types.ZTermList l2) {    if(tom_is_empty_concZTerm_ZTermList(l1)) {     return l2;    } else if(tom_is_empty_concZTerm_ZTermList(l2)) {     return l1;    } else if(tom_is_empty_concZTerm_ZTermList(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(l1))) {     return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(l1),tom_append_list_concZTerm(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(l1),l2));    }   }  protected  tom.engine.adt.zenon.types.ZTermList tom_get_slice_concZTerm( tom.engine.adt.zenon.types.ZTermList begin,  tom.engine.adt.zenon.types.ZTermList end) {    if(tom_terms_equal_ZTermList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZTermList)tom_empty_list_concZTerm();    } else {      return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(begin),( tom.engine.adt.zenon.types.ZTermList)tom_get_slice_concZTerm(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptyZTermList( tom.engine.adt.zenon.types.ZTermList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.zenon.types.ZTermList tom_make_emptyZTermList() { return getZenonFactory().makeZTermList(); }protected boolean tom_is_fun_sym_manyZTermList( tom.engine.adt.zenon.types.ZTermList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.zenon.types.ZTermList tom_make_manyZTermList( tom.engine.adt.zenon.types.ZTerm e,  tom.engine.adt.zenon.types.ZTermList l) { return getZenonFactory().makeZTermList(e,l); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_manyZTermList_head( tom.engine.adt.zenon.types.ZTermList t) { return  t.getHead(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_slot_manyZTermList_tail( tom.engine.adt.zenon.types.ZTermList t) { return  t.getTail(); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_implementation_ZTerm( tom.engine.adt.zenon.types.ZTerm t) { return t; }protected  tom.engine.adt.zenon.types.ZTerm tom_set_stamp_ZTerm( tom.engine.adt.zenon.types.ZTerm t) { return (tom.engine.adt.zenon.types.ZTerm)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZTerm( tom.engine.adt.zenon.types.ZTerm t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZTerm(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zsl( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZsl(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zsl( tom.engine.adt.zenon.types.ZTerm t0,  String  t1) { return  getZenonFactory().makeZTerm_Zsl(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zsl_abst( tom.engine.adt.zenon.types.ZTerm t) { return  t.getAbst(); }protected  String  tom_get_slot_zsl_name( tom.engine.adt.zenon.types.ZTerm t) { return  t.getName(); }protected boolean tom_is_fun_sym_zst( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZst(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zst( tom.engine.adt.zenon.types.ZTerm t0,  int  t1) { return  getZenonFactory().makeZTerm_Zst(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zst_abst( tom.engine.adt.zenon.types.ZTerm t) { return  t.getAbst(); }protected  int  tom_get_slot_zst_index( tom.engine.adt.zenon.types.ZTerm t) { return  t.getIndex(); }protected boolean tom_is_fun_sym_zappl( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZappl(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zappl( tom.engine.adt.zenon.types.ZSymbol t0,  tom.engine.adt.zenon.types.ZTermList t1) { return  getZenonFactory().makeZTerm_Zappl(t0, t1); }protected  tom.engine.adt.zenon.types.ZSymbol tom_get_slot_zappl_zsymb( tom.engine.adt.zenon.types.ZTerm t) { return  t.getZsymb(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_slot_zappl_termlist( tom.engine.adt.zenon.types.ZTerm t) { return  t.getTermlist(); }protected boolean tom_is_fun_sym_zvar( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZvar(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zvar( String  t0) { return  getZenonFactory().makeZTerm_Zvar(t0); }protected  String  tom_get_slot_zvar_varname( tom.engine.adt.zenon.types.ZTerm t) { return  t.getVarname(); }protected  tom.engine.adt.zenon.types.ZSymbol tom_get_implementation_ZSymbol( tom.engine.adt.zenon.types.ZSymbol t) { return t; }protected  tom.engine.adt.zenon.types.ZSymbol tom_set_stamp_ZSymbol( tom.engine.adt.zenon.types.ZSymbol t) { return (tom.engine.adt.zenon.types.ZSymbol)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZSymbol( tom.engine.adt.zenon.types.ZSymbol t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZSymbol(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zsymbol( tom.engine.adt.zenon.types.ZSymbol t) { return  (t!= null) && t.isZsymbol(); }protected  tom.engine.adt.zenon.types.ZSymbol tom_make_zsymbol( String  t0) { return  getZenonFactory().makeZSymbol_Zsymbol(t0); }protected  String  tom_get_slot_zsymbol_name( tom.engine.adt.zenon.types.ZSymbol t) { return  t.getName(); }  

  // ------------------------------------------------------------

  protected IlFactory factory;
  protected ZenonFactory zfactory;
  private GenericTraversal traversal;
  private Verifier verifier;
  private TomIlTools tomiltools;

  public ZenonOutput(Verifier verifier) {
    factory = IlFactory.getInstance(SingletonFactory.getInstance());
    zfactory = ZenonFactory.getInstance(SingletonFactory.getInstance());
    this.traversal = new GenericTraversal();
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  public GenericTraversal traversal() {
    return this.traversal;
  }
  
  protected final IlFactory getIlFactory() {
    return factory;
  }

  protected final ZenonFactory getZenonFactory() {
    return zfactory;
  }

  public Collection zspecSetFromDerivationTreeSet(Collection derivationSet) {
    Collection resset = new HashSet();
    Iterator it = derivationSet.iterator();
    while(it.hasNext()) {
      DerivTree tree = (DerivTree) it.next();
      ZSpec spec = zspecFromDerivationTree(tree);
      resset.add(spec);
    }
    return resset;
  }

  public Collection zspecSetFromConstraintMap(Map constraintMap) {
    Collection resset = new HashSet();
    Iterator it = constraintMap.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZSpec spec = zspecFromMapEntry(entry);
      resset.add(spec);
    }
    return resset;
  }

  public ZSpec zspecFromMapEntry(Map.Entry entry) {
    Instr accept = (Instr) entry.getKey();
    Expr constraint = (Expr) entry.getValue();
    
    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;

    // theorem to prove
     { tom.engine.adt.il.types.Instr tom_match1_1=(( tom.engine.adt.il.types.Instr)accept); if(tom_is_fun_sym_accept(tom_match1_1) ||  false ) { { ATerm  tom_match1_1_positive=tom_get_slot_accept_positive(tom_match1_1); { ATerm  tom_match1_1_negative=tom_get_slot_accept_negative(tom_match1_1); { ATerm  positive=tom_match1_1_positive; { ATerm  negative=tom_match1_1_negative;

        Pattern positivePattern = (Pattern)positive;
        PatternList negativePatternList = (PatternList)negative;
        // we need the substitution to generate the pattern part of the theorem
        SubstitutionList subsList = verifier.collectSubstitutionInConstraint(constraint);
        Map variableMap = ztermVariableMapFromSubstitutionList(subsList, 
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromPattern(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.patternToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.patternToZExpr(negativePatternList,variableMap);
        }
      }}}} }}

    
    ZExpr zenonConstraint = zexprFromExpr(constraint);

    ZExpr theorem = null;
    if (pattern != null && zenonConstraint != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem = tom_make_zequiv(tom_make_zand(pattern,tom_make_znot(negpattern)),zenonConstraint);
      } else {
        theorem = tom_make_zequiv(pattern,zenonConstraint);
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature. Again, the TomIlTools will be useful, it has access
    // to TomSignature and Zenon signature
    
    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem = tom_make_zforall(input,tom_make_ztype("T"),theorem);  
    }
    ZSpec spec = tom_make_zthm(theorem,tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms,tom_empty_list_zby())));

    return spec;
  }

  public ZSpec zspecFromDerivationTree(DerivTree tree) {
    
    Map variableset = new HashMap();
    tree = collectProgramVariables(tree,variableset);

    // Use a TreeMap to have the conditions sorted
    Map conditions = new TreeMap();
    collectConstraints(tree,conditions);            
    Map conds = new TreeMap();

    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;
    // theorem to prove
     { tom.engine.adt.il.types.DerivTree tom_match2_1=(( tom.engine.adt.il.types.DerivTree)tree); if(tom_is_fun_sym_derivrule2(tom_match2_1) || tom_is_fun_sym_derivrule(tom_match2_1) ||  false ) { { tom.engine.adt.il.types.Deriv tom_match2_1_post=tom_get_slot_derivrule_post(tom_match2_1); if(tom_is_fun_sym_ebs(tom_match2_1_post) ||  false ) { { tom.engine.adt.il.types.Environment tom_match2_1_post_rhs=tom_get_slot_ebs_rhs(tom_match2_1_post); if(tom_is_fun_sym_env(tom_match2_1_post_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match2_1_post_rhs_subs=tom_get_slot_env_subs(tom_match2_1_post_rhs); { tom.engine.adt.il.types.Instr tom_match2_1_post_rhs_i=tom_get_slot_env_i(tom_match2_1_post_rhs); { tom.engine.adt.il.types.SubstitutionList subsList=tom_match2_1_post_rhs_subs; if(tom_is_fun_sym_accept(tom_match2_1_post_rhs_i) ||  false ) { { ATerm  tom_match2_1_post_rhs_i_positive=tom_get_slot_accept_positive(tom_match2_1_post_rhs_i); { ATerm  tom_match2_1_post_rhs_i_negative=tom_get_slot_accept_negative(tom_match2_1_post_rhs_i); { ATerm  positive=tom_match2_1_post_rhs_i_positive; { ATerm  negative=tom_match2_1_post_rhs_i_negative;


        Pattern positivePattern = (Pattern)positive;
        PatternList negativePatternList = (PatternList)negative;
        Map variableMap = ztermVariableMapFromSubstitutionList(subsList, 
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromPattern(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.patternToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.patternToZExpr(negativePatternList,variableMap);
        }
      }}}} }}}} }} }} }}

    
    ZExpr constraints = tom_make_ztrue();
    // we consider only the interesting conditions : dedexpr
    Iterator it = conditions.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      Seq value = (Seq) entry.getValue();
      if (value.isDedexpr()) {
        conds.put(((String) entry.getKey()),
                  zexprFromSeq(cleanSeq(value)));
      }
    }
    it = conds.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZExpr value = (ZExpr) entry.getValue();
      constraints = tom_make_zand(constraints,value);
    }
    ZExpr theorem = null;
    if (pattern != null && constraints != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem = tom_make_zequiv(tom_make_zand(pattern,tom_make_znot(negpattern)),constraints);
      } else {
        theorem = tom_make_zequiv(pattern,constraints);
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature. Again, the TomIlTools will be useful, it has access
    // to TomSignature and Zenon signature
    
    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem = tom_make_zforall(input,tom_make_ztype("T"),theorem);  
    }
    ZSpec spec = tom_make_zthm(theorem,tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms,tom_empty_list_zby())));

    return spec;
  }


  /**
   * collects all variable names in the DerivTree, and give a name to _'s
   */
  DerivTree collectProgramVariables(DerivTree tree, Map variables) {
    Replace2 programVariablesCollector = new Replace2() {
      public ATerm apply(ATerm subject, Object astore) {
        Map store = (Map) astore;
        if (subject instanceof Variable) {
           { tom.engine.adt.il.types.Variable tom_match3_1=(( tom.engine.adt.il.types.Variable)subject); if(tom_is_fun_sym_var(tom_match3_1) ||  false ) { { String  tom_match3_1_name=tom_get_slot_var_name(tom_match3_1); { String  name=tom_match3_1_name;

              String newname = name;
              if (store.containsKey(name)){
                newname = (String) store.get(name);
              } else {
                if (name.startsWith("[") && name.endsWith("]")) {
                  newname = "X_" + store.size();
                }
                store.put(name,newname);
              }
              return tom_make_var(newname);
            }} }}

        }
        return traversal().genericTraversal(subject,this,astore);
      }
    };
    return (DerivTree) programVariablesCollector.apply(tree,variables);
  }

  ZTerm ztermFromTerm(Term term) {
     { tom.engine.adt.il.types.Term tom_match4_1=(( tom.engine.adt.il.types.Term)term); if(tom_is_fun_sym_tau(tom_match4_1) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match4_1_abst=tom_get_slot_tau_abst(tom_match4_1); { tom.engine.adt.il.types.AbsTerm absTerm=tom_match4_1_abst;

        return ztermFromAbsTerm(absTerm);
      }} } if(tom_is_fun_sym_repr(tom_match4_1) ||  false ) { { String  tom_match4_1_term=tom_get_slot_repr_term(tom_match4_1); { String  name=tom_match4_1_term;

        return tom_make_zvar("Error in ztermFromTerm repr");
      }} } if(tom_is_fun_sym_subterm(tom_match4_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match4_1_symbol=tom_get_slot_subterm_symbol(tom_match4_1); { tom.engine.adt.il.types.Term tom_match4_1_t=tom_get_slot_subterm_t(tom_match4_1); { int  tom_match4_1_index=tom_get_slot_subterm_index(tom_match4_1); { tom.engine.adt.il.types.Symbol s=tom_match4_1_symbol; { tom.engine.adt.il.types.Term t=tom_match4_1_t; { int  index=tom_match4_1_index;

        return tom_make_zvar("Error in ztermFromTerm subterm");
      }}}}}} } if(tom_is_fun_sym_slot(tom_match4_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match4_1_symbol=tom_get_slot_slot_symbol(tom_match4_1); { tom.engine.adt.il.types.Term tom_match4_1_t=tom_get_slot_slot_t(tom_match4_1); { String  tom_match4_1_name=tom_get_slot_slot_name(tom_match4_1); { tom.engine.adt.il.types.Symbol s=tom_match4_1_symbol; { tom.engine.adt.il.types.Term t=tom_match4_1_t; { String  name=tom_match4_1_name;

        return tom_make_zvar("Error in ztermFromTerm "+ term+" slot");
      }}}}}} } if(tom_is_fun_sym_appSubsT(tom_match4_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match4_1_subs=tom_get_slot_appSubsT_subs(tom_match4_1); { tom.engine.adt.il.types.Term tom_match4_1_t=tom_get_slot_appSubsT_t(tom_match4_1); { tom.engine.adt.il.types.SubstitutionList subst=tom_match4_1_subs; { tom.engine.adt.il.types.Term t=tom_match4_1_t;

        // probleme: la substitution devrait etre appliquee
        return tom_make_zvar("Error in ztermFromTerm appsubsT ");
      }}}} }}

    return tom_make_zvar("match vide dans ztermFromTerm");
  }

  ZExpr zexprFromExpr(Expr expr) {
     { tom.engine.adt.il.types.Expr tom_match5_1=(( tom.engine.adt.il.types.Expr)expr); if(tom_is_fun_sym_true(tom_match5_1) ||  false ) {
 return tom_make_ztrue(); } if(tom_is_fun_sym_false(tom_match5_1) ||  false ) {
 return tom_make_zfalse(); } if(tom_is_fun_sym_tisfsym(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match5_1_abst=tom_get_slot_tisfsym_abst(tom_match5_1); { tom.engine.adt.il.types.Symbol tom_match5_1_symbol=tom_get_slot_tisfsym_symbol(tom_match5_1); { tom.engine.adt.il.types.AbsTerm absterm=tom_match5_1_abst; { tom.engine.adt.il.types.Symbol s=tom_match5_1_symbol;

        return tom_make_zisfsym(ztermFromAbsTerm(absterm),zsymbolFromSymbol(s));
      }}}} } if(tom_is_fun_sym_teq(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match5_1_labst=tom_get_slot_teq_labst(tom_match5_1); { tom.engine.adt.il.types.AbsTerm tom_match5_1_rabst=tom_get_slot_teq_rabst(tom_match5_1); { tom.engine.adt.il.types.AbsTerm absterml=tom_match5_1_labst; { tom.engine.adt.il.types.AbsTerm abstermr=tom_match5_1_rabst;

        return tom_make_zeq(ztermFromAbsTerm(absterml),ztermFromAbsTerm(abstermr));
      }}}} } if(tom_is_fun_sym_isfsym(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match5_1_t=tom_get_slot_isfsym_t(tom_match5_1); { tom.engine.adt.il.types.Symbol tom_match5_1_symbol=tom_get_slot_isfsym_symbol(tom_match5_1); { tom.engine.adt.il.types.Term t=tom_match5_1_t; { tom.engine.adt.il.types.Symbol s=tom_match5_1_symbol;

        // this should not occur
        return tom_make_zisfsym(tom_make_zvar("Error in zexprFromExpr"),tom_make_zsymbol("isfsym"));
      }}}} } if(tom_is_fun_sym_eq(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match5_1_lt=tom_get_slot_eq_lt(tom_match5_1); { tom.engine.adt.il.types.Term tom_match5_1_rt=tom_get_slot_eq_rt(tom_match5_1); { tom.engine.adt.il.types.Term lt=tom_match5_1_lt; { tom.engine.adt.il.types.Term rt=tom_match5_1_rt;

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("eq"));
      }}}} } if(tom_is_fun_sym_appSubsE(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match5_1_subs=tom_get_slot_appSubsE_subs(tom_match5_1); { tom.engine.adt.il.types.Expr tom_match5_1_e=tom_get_slot_appSubsE_e(tom_match5_1); { tom.engine.adt.il.types.SubstitutionList subslist=tom_match5_1_subs; { tom.engine.adt.il.types.Expr e=tom_match5_1_e;

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("appSubsE"));
      }}}} } if(tom_is_fun_sym_iland(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match5_1_left=tom_get_slot_iland_left(tom_match5_1); { tom.engine.adt.il.types.Expr tom_match5_1_right=tom_get_slot_iland_right(tom_match5_1); { tom.engine.adt.il.types.Expr lt=tom_match5_1_left; { tom.engine.adt.il.types.Expr rt=tom_match5_1_right;

        return tom_make_zand(zexprFromExpr(lt),zexprFromExpr(rt));
      }}}} } if(tom_is_fun_sym_ilor(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match5_1_left=tom_get_slot_ilor_left(tom_match5_1); { tom.engine.adt.il.types.Expr tom_match5_1_right=tom_get_slot_ilor_right(tom_match5_1); { tom.engine.adt.il.types.Expr lt=tom_match5_1_left; { tom.engine.adt.il.types.Expr rt=tom_match5_1_right;

        return tom_make_zor(zexprFromExpr(lt),zexprFromExpr(rt));
      }}}} } if(tom_is_fun_sym_ilnot(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match5_1_exp=tom_get_slot_ilnot_exp(tom_match5_1); { tom.engine.adt.il.types.Expr nex=tom_match5_1_exp;

        return tom_make_znot(zexprFromExpr(nex));
      }} }}

    return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("end " + expr.toString()));
  }

  ZSymbol zsymbolFromSymbol(Symbol symb) {
     { tom.engine.adt.il.types.Symbol tom_match6_1=(( tom.engine.adt.il.types.Symbol)symb); if(tom_is_fun_sym_fsymbol(tom_match6_1) ||  false ) { { String  tom_match6_1_name=tom_get_slot_fsymbol_name(tom_match6_1); { String  name=tom_match6_1_name;

        return tom_make_zsymbol(name);
      }} }}

    return tom_make_zsymbol("random");
  }

  ZExpr zexprFromSeq(Seq seq) {
     { tom.engine.adt.il.types.Seq tom_match7_1=(( tom.engine.adt.il.types.Seq)seq); if(tom_is_fun_sym_seq(tom_match7_1) ||  false ) {
 
        return tom_make_ztrue();
       } if(tom_is_fun_sym_dedterm(tom_match7_1) ||  false ) { { tom.engine.adt.il.types.TermList tom_match7_1_terms=tom_get_slot_dedterm_terms(tom_match7_1); { tom.engine.adt.il.types.TermList termlist=tom_match7_1_terms; { tom.engine.adt.il.types.TermList tom_match8_1=(( tom.engine.adt.il.types.TermList)termlist); if(tom_is_fun_sym_concTerm(tom_match8_1) ||  false ) { { tom.engine.adt.il.types.TermList tom_match8_1_list1=tom_match8_1; { tom.engine.adt.il.types.TermList tom_match8_1_begin1=tom_match8_1_list1; { tom.engine.adt.il.types.TermList tom_match8_1_end1=tom_match8_1_list1;{ while (!(tom_is_empty_concTerm_TermList(tom_match8_1_end1))) {tom_match8_1_list1=tom_match8_1_end1;{ { tom.engine.adt.il.types.TermList X=tom_get_slice_concTerm(tom_match8_1_begin1,tom_match8_1_end1); { tom.engine.adt.il.types.Term tl=tom_get_head_concTerm_TermList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concTerm_TermList(tom_match8_1_list1); if(!(tom_is_empty_concTerm_TermList(tom_match8_1_list1))) { { tom.engine.adt.il.types.Term tr=tom_get_head_concTerm_TermList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concTerm_TermList(tom_match8_1_list1); if(tom_is_empty_concTerm_TermList(tom_match8_1_list1)) {



            return tom_make_zeq(ztermFromTerm(tl),ztermFromTerm(tr));
           }} }}}tom_match8_1_end1=tom_get_tail_concTerm_TermList(tom_match8_1_end1);} }tom_match8_1_list1=tom_match8_1_begin1;}}}} }}

      }} } if(tom_is_fun_sym_dedexpr(tom_match7_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match7_1_exprs=tom_get_slot_dedexpr_exprs(tom_match7_1); { tom.engine.adt.il.types.ExprList exprlist=tom_match7_1_exprs; { tom.engine.adt.il.types.ExprList tom_match9_1=(( tom.engine.adt.il.types.ExprList)exprlist); if(tom_is_fun_sym_concExpr(tom_match9_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match9_1_list1=tom_match9_1; { tom.engine.adt.il.types.ExprList tom_match9_1_begin1=tom_match9_1_list1; { tom.engine.adt.il.types.ExprList tom_match9_1_end1=tom_match9_1_list1;{ while (!(tom_is_empty_concExpr_ExprList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1;{ { tom.engine.adt.il.types.Expr t=tom_get_head_concExpr_ExprList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concExpr_ExprList(tom_match9_1_list1); if(!(tom_is_empty_concExpr_ExprList(tom_match9_1_list1))) { { tom.engine.adt.il.types.Expr tom_match9_1_3=tom_get_head_concExpr_ExprList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concExpr_ExprList(tom_match9_1_list1); if(tom_is_fun_sym_true(tom_match9_1_3) ||  false ) { if(tom_is_empty_concExpr_ExprList(tom_match9_1_list1)) {



            return zexprFromExpr(t);
           } }} }}tom_match9_1_end1=tom_get_tail_concExpr_ExprList(tom_match9_1_end1);} }tom_match9_1_list1=tom_match9_1_begin1;}}}} }}

      }} } if(tom_is_fun_sym_dedexpr(tom_match7_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match7_1_exprs=tom_get_slot_dedexpr_exprs(tom_match7_1); { tom.engine.adt.il.types.ExprList exprlist=tom_match7_1_exprs; { tom.engine.adt.il.types.ExprList tom_match10_1=(( tom.engine.adt.il.types.ExprList)exprlist); if(tom_is_fun_sym_concExpr(tom_match10_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match10_1_list1=tom_match10_1; { tom.engine.adt.il.types.ExprList tom_match10_1_begin1=tom_match10_1_list1; { tom.engine.adt.il.types.ExprList tom_match10_1_end1=tom_match10_1_list1;{ while (!(tom_is_empty_concExpr_ExprList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1;{ { tom.engine.adt.il.types.Expr t=tom_get_head_concExpr_ExprList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concExpr_ExprList(tom_match10_1_list1); if(!(tom_is_empty_concExpr_ExprList(tom_match10_1_list1))) { { tom.engine.adt.il.types.Expr tom_match10_1_3=tom_get_head_concExpr_ExprList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concExpr_ExprList(tom_match10_1_list1); if(tom_is_fun_sym_false(tom_match10_1_3) ||  false ) { if(tom_is_empty_concExpr_ExprList(tom_match10_1_list1)) {



            return tom_make_znot(zexprFromExpr(t));
           } }} }}tom_match10_1_end1=tom_get_tail_concExpr_ExprList(tom_match10_1_end1);} }tom_match10_1_list1=tom_match10_1_begin1;}}}} }}

      }} }}

    return tom_make_ztrue();
  }

  ZTerm ztermFromAbsTerm(AbsTerm absterm) {
     { tom.engine.adt.il.types.AbsTerm tom_match11_1=(( tom.engine.adt.il.types.AbsTerm)absterm); if(tom_is_fun_sym_absvar(tom_match11_1) ||  false ) { { tom.engine.adt.il.types.Variable tom_match11_1_varname=tom_get_slot_absvar_varname(tom_match11_1); if(tom_is_fun_sym_var(tom_match11_1_varname) ||  false ) { { String  tom_match11_1_varname_name=tom_get_slot_var_name(tom_match11_1_varname); { String  name=tom_match11_1_varname_name;

        return tom_make_zvar(name);
      }} }} } if(tom_is_fun_sym_st(tom_match11_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match11_1_symbol=tom_get_slot_st_symbol(tom_match11_1); { tom.engine.adt.il.types.AbsTerm tom_match11_1_abst=tom_get_slot_st_abst(tom_match11_1); { int  tom_match11_1_index=tom_get_slot_st_index(tom_match11_1); { tom.engine.adt.il.types.Symbol s=tom_match11_1_symbol; { tom.engine.adt.il.types.AbsTerm t=tom_match11_1_abst; { int  index=tom_match11_1_index;

        return tom_make_zst(ztermFromAbsTerm(t),index);
      }}}}}} } if(tom_is_fun_sym_sl(tom_match11_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match11_1_symbol=tom_get_slot_sl_symbol(tom_match11_1); { tom.engine.adt.il.types.AbsTerm tom_match11_1_abst=tom_get_slot_sl_abst(tom_match11_1); { String  tom_match11_1_name=tom_get_slot_sl_name(tom_match11_1); { tom.engine.adt.il.types.Symbol s=tom_match11_1_symbol; { tom.engine.adt.il.types.AbsTerm t=tom_match11_1_abst; { String  name=tom_match11_1_name;

        return tom_make_zsl(ztermFromAbsTerm(t),name);
      }}}}}} }}

    return tom_make_zvar("Error in ztermFromAbsTerm");
  }

  Seq cleanSeq(Seq seq) {
     { tom.engine.adt.il.types.Seq tom_match12_1=(( tom.engine.adt.il.types.Seq)seq); if(tom_is_fun_sym_seq(tom_match12_1) ||  false ) {
 return seq;  } if(tom_is_fun_sym_dedterm(tom_match12_1) ||  false ) { { tom.engine.adt.il.types.TermList tom_match12_1_terms=tom_get_slot_dedterm_terms(tom_match12_1); if(tom_is_fun_sym_concTerm(tom_match12_1_terms) ||  false ) { { tom.engine.adt.il.types.TermList tom_match12_1_terms_list1=tom_match12_1_terms; { tom.engine.adt.il.types.TermList tom_match12_1_terms_begin1=tom_match12_1_terms_list1; { tom.engine.adt.il.types.TermList tom_match12_1_terms_end1=tom_match12_1_terms_list1;{ while (!(tom_is_empty_concTerm_TermList(tom_match12_1_terms_end1))) {tom_match12_1_terms_list1=tom_match12_1_terms_end1;{ { tom.engine.adt.il.types.Term t=tom_get_head_concTerm_TermList(tom_match12_1_terms_list1);tom_match12_1_terms_list1=tom_get_tail_concTerm_TermList(tom_match12_1_terms_list1); if(!(tom_is_empty_concTerm_TermList(tom_match12_1_terms_list1))) { { tom.engine.adt.il.types.Term v=tom_get_head_concTerm_TermList(tom_match12_1_terms_list1);tom_match12_1_terms_list1=tom_get_tail_concTerm_TermList(tom_match12_1_terms_list1); if(tom_is_empty_concTerm_TermList(tom_match12_1_terms_list1)) {

          return tom_make_dedterm(tom_cons_list_concTerm(t,tom_cons_list_concTerm(v,tom_empty_list_concTerm())));
       }} }}tom_match12_1_terms_end1=tom_get_tail_concTerm_TermList(tom_match12_1_terms_end1);} }tom_match12_1_terms_list1=tom_match12_1_terms_begin1;}}}} }} } if(tom_is_fun_sym_dedexpr(tom_match12_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match12_1_exprs=tom_get_slot_dedexpr_exprs(tom_match12_1); if(tom_is_fun_sym_concExpr(tom_match12_1_exprs) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match12_1_exprs_list1=tom_match12_1_exprs; { tom.engine.adt.il.types.ExprList tom_match12_1_exprs_begin1=tom_match12_1_exprs_list1; { tom.engine.adt.il.types.ExprList tom_match12_1_exprs_end1=tom_match12_1_exprs_list1;{ while (!(tom_is_empty_concExpr_ExprList(tom_match12_1_exprs_end1))) {tom_match12_1_exprs_list1=tom_match12_1_exprs_end1;{ { tom.engine.adt.il.types.Expr t=tom_get_head_concExpr_ExprList(tom_match12_1_exprs_list1);tom_match12_1_exprs_list1=tom_get_tail_concExpr_ExprList(tom_match12_1_exprs_list1); if(!(tom_is_empty_concExpr_ExprList(tom_match12_1_exprs_list1))) { { tom.engine.adt.il.types.Expr v=tom_get_head_concExpr_ExprList(tom_match12_1_exprs_list1);tom_match12_1_exprs_list1=tom_get_tail_concExpr_ExprList(tom_match12_1_exprs_list1); if(tom_is_empty_concExpr_ExprList(tom_match12_1_exprs_list1)) {

        return tom_make_dedexpr(tom_cons_list_concExpr(t,tom_cons_list_concExpr(v,tom_empty_list_concExpr())));
       }} }}tom_match12_1_exprs_end1=tom_get_tail_concExpr_ExprList(tom_match12_1_exprs_end1);} }tom_match12_1_exprs_list1=tom_match12_1_exprs_begin1;}}}} }} }}

    return seq;
  }

  private Map ztermVariableMapFromSubstitutionList(SubstitutionList sublist, Map map) {
     { tom.engine.adt.il.types.SubstitutionList tom_match13_1=(( tom.engine.adt.il.types.SubstitutionList)sublist); if(tom_is_fun_sym_subs(tom_match13_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match13_1_list1=tom_match13_1; if(tom_is_empty_subs_SubstitutionList(tom_match13_1_list1)) {
 return map;  }} } if(tom_is_fun_sym_subs(tom_match13_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_subs_SubstitutionList(tom_match13_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match13_1_1=tom_get_head_subs_SubstitutionList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_subs_SubstitutionList(tom_match13_1_list1); if(tom_is_fun_sym_undefsubs(tom_match13_1_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList t=tom_match13_1_list1;
 return ztermVariableMapFromSubstitutionList(t,map);} }} }} } if(tom_is_fun_sym_subs(tom_match13_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match13_1_list1=tom_match13_1; if(!(tom_is_empty_subs_SubstitutionList(tom_match13_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match13_1_1=tom_get_head_subs_SubstitutionList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_subs_SubstitutionList(tom_match13_1_list1); if(tom_is_fun_sym_is(tom_match13_1_1) ||  false ) { { tom.engine.adt.il.types.Variable tom_match13_1_1_var=tom_get_slot_is_var(tom_match13_1_1); { tom.engine.adt.il.types.Term tom_match13_1_1_term=tom_get_slot_is_term(tom_match13_1_1); if(tom_is_fun_sym_var(tom_match13_1_1_var) ||  false ) { { String  tom_match13_1_1_var_name=tom_get_slot_var_name(tom_match13_1_1_var); { String  name=tom_match13_1_1_var_name; { tom.engine.adt.il.types.Term term=tom_match13_1_1_term; { tom.engine.adt.il.types.SubstitutionList t=tom_match13_1_list1;
 
        map.put(name,ztermFromTerm(term));
        return ztermVariableMapFromSubstitutionList(t,map);
      }}}} }}} }} }} }

        throw new TomRuntimeException("verifier: strange substitution list: "+sublist);
      }

  }

  public void collectConstraints(DerivTree tree, Map conditions) {
     { tom.engine.adt.il.types.DerivTree tom_match14_1=(( tom.engine.adt.il.types.DerivTree)tree); if(tom_is_fun_sym_derivrule(tom_match14_1) ||  false ) { { tom.engine.adt.il.types.DerivTree tom_match14_1_pre=tom_get_slot_derivrule_pre(tom_match14_1); { tom.engine.adt.il.types.Seq tom_match14_1_cond=tom_get_slot_derivrule_cond(tom_match14_1); { tom.engine.adt.il.types.DerivTree pre=tom_match14_1_pre; { tom.engine.adt.il.types.Seq condition=tom_match14_1_cond;

        String condname = Integer.toString(conditions.size()+1);
        conditions.put(condname,condition);
        collectConstraints(pre,conditions);
      }}}} } if(tom_is_fun_sym_derivrule2(tom_match14_1) ||  false ) { { tom.engine.adt.il.types.DerivTree tom_match14_1_pre=tom_get_slot_derivrule2_pre(tom_match14_1); { tom.engine.adt.il.types.DerivTree tom_match14_1_pre2=tom_get_slot_derivrule2_pre2(tom_match14_1); { tom.engine.adt.il.types.Seq tom_match14_1_cond=tom_get_slot_derivrule2_cond(tom_match14_1); { tom.engine.adt.il.types.DerivTree pre=tom_match14_1_pre; { tom.engine.adt.il.types.DerivTree pre2=tom_match14_1_pre2; { tom.engine.adt.il.types.Seq condition=tom_match14_1_cond;

        String condname = Integer.toString(conditions.size()+1);
        conditions.put(condname,condition);
        collectConstraints(pre,conditions);
        collectConstraints(pre2,conditions);
      }}}}}} }}

  }

}
