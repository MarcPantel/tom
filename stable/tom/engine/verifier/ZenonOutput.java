/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.adt.il.*;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;

import tom.engine.exception.TomRuntimeException;


public class ZenonOutput {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) { return  (t1==t2) ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_ATerm(Object t1, Object t2) { return  t1 == t2;}private static boolean tom_is_sort_ATerm(Object t) { return  t instanceof aterm.ATerm ;} private static boolean tom_equal_term_Expr(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expr(Object t) { return  t instanceof tom.engine.adt.il.types.Expr ;}private static boolean tom_equal_term_Variable(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Variable(Object t) { return  t instanceof tom.engine.adt.il.types.Variable ;}private static boolean tom_equal_term_ExprList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ExprList(Object t) { return  t instanceof tom.engine.adt.il.types.ExprList ;}private static boolean tom_equal_term_Substitution(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Substitution(Object t) { return  t instanceof tom.engine.adt.il.types.Substitution ;}private static boolean tom_equal_term_Symbol(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Symbol(Object t) { return  t instanceof tom.engine.adt.il.types.Symbol ;}private static boolean tom_equal_term_Seq(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Seq(Object t) { return  t instanceof tom.engine.adt.il.types.Seq ;}private static boolean tom_equal_term_SubstitutionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SubstitutionList(Object t) { return  t instanceof tom.engine.adt.il.types.SubstitutionList ;}private static boolean tom_equal_term_Term(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Term(Object t) { return  t instanceof tom.engine.adt.il.types.Term ;}private static boolean tom_equal_term_TermList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TermList(Object t) { return  t instanceof tom.engine.adt.il.types.TermList ;}private static boolean tom_equal_term_Instr(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Instr(Object t) { return  t instanceof tom.engine.adt.il.types.Instr ;}private static boolean tom_equal_term_AbsTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_AbsTerm(Object t) { return  t instanceof tom.engine.adt.il.types.AbsTerm ;}private static boolean tom_is_fun_sym_iltrue( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.iltrue ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_iltrue_Subst( tom.engine.adt.il.types.Expr  t) { return  t.getSubst() ;}private static boolean tom_is_fun_sym_ilfalse( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.ilfalse ;}private static boolean tom_is_fun_sym_isfsym( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.isfsym ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_isfsym_T( tom.engine.adt.il.types.Expr  t) { return  t.getT() ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_isfsym_Symbol( tom.engine.adt.il.types.Expr  t) { return  t.getSymbol() ;}private static boolean tom_is_fun_sym_eq( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.eq ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_eq_Lt( tom.engine.adt.il.types.Expr  t) { return  t.getLt() ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_eq_Rt( tom.engine.adt.il.types.Expr  t) { return  t.getRt() ;}private static boolean tom_is_fun_sym_tisfsym( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.tisfsym ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_tisfsym_Abst( tom.engine.adt.il.types.Expr  t) { return  t.getAbst() ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_tisfsym_Symbol( tom.engine.adt.il.types.Expr  t) { return  t.getSymbol() ;}private static boolean tom_is_fun_sym_teq( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.teq ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_teq_Labst( tom.engine.adt.il.types.Expr  t) { return  t.getLabst() ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_teq_Rabst( tom.engine.adt.il.types.Expr  t) { return  t.getRabst() ;}private static boolean tom_is_fun_sym_iland( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.iland ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_iland_Left( tom.engine.adt.il.types.Expr  t) { return  t.getLeft() ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_iland_Right( tom.engine.adt.il.types.Expr  t) { return  t.getRight() ;}private static boolean tom_is_fun_sym_ilor( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.ilor ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilor_Left( tom.engine.adt.il.types.Expr  t) { return  t.getLeft() ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilor_Right( tom.engine.adt.il.types.Expr  t) { return  t.getRight() ;}private static boolean tom_is_fun_sym_ilnot( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.ilnot ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilnot_Exp( tom.engine.adt.il.types.Expr  t) { return  t.getExp() ;}private static boolean tom_is_fun_sym_appSubsE( tom.engine.adt.il.types.Expr  t) { return  t instanceof tom.engine.adt.il.types.expr.appSubsE ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_appSubsE_Subs( tom.engine.adt.il.types.Expr  t) { return  t.getSubs() ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_appSubsE_E( tom.engine.adt.il.types.Expr  t) { return  t.getE() ;}private static boolean tom_is_fun_sym_var( tom.engine.adt.il.types.Variable  t) { return  t instanceof tom.engine.adt.il.types.variable.var ;}private static  String  tom_get_slot_var_Name( tom.engine.adt.il.types.Variable  t) { return  t.getName() ;}private static boolean tom_is_fun_sym_undefsubs( tom.engine.adt.il.types.Substitution  t) { return  t instanceof tom.engine.adt.il.types.substitution.undefsubs ;}private static boolean tom_is_fun_sym_is( tom.engine.adt.il.types.Substitution  t) { return  t instanceof tom.engine.adt.il.types.substitution.is ;}private static  tom.engine.adt.il.types.Variable  tom_get_slot_is_Var( tom.engine.adt.il.types.Substitution  t) { return  t.getVar() ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_is_Term( tom.engine.adt.il.types.Substitution  t) { return  t.getTerm() ;}private static boolean tom_is_fun_sym_fsymbol( tom.engine.adt.il.types.Symbol  t) { return  t instanceof tom.engine.adt.il.types.symbol.fsymbol ;}private static  String  tom_get_slot_fsymbol_Name( tom.engine.adt.il.types.Symbol  t) { return  t.getName() ;}private static boolean tom_is_fun_sym_seq( tom.engine.adt.il.types.Seq  t) { return  t instanceof tom.engine.adt.il.types.seq.seq ;}private static boolean tom_is_fun_sym_dedexpr( tom.engine.adt.il.types.Seq  t) { return  t instanceof tom.engine.adt.il.types.seq.dedexpr ;}private static  tom.engine.adt.il.types.ExprList  tom_get_slot_dedexpr_Exprs( tom.engine.adt.il.types.Seq  t) { return  t.getExprs() ;}private static boolean tom_is_fun_sym_dedterm( tom.engine.adt.il.types.Seq  t) { return  t instanceof tom.engine.adt.il.types.seq.dedterm ;}private static  tom.engine.adt.il.types.TermList  tom_get_slot_dedterm_Terms( tom.engine.adt.il.types.Seq  t) { return  t.getTerms() ;}private static boolean tom_is_fun_sym_tau( tom.engine.adt.il.types.Term  t) { return  t instanceof tom.engine.adt.il.types.term.tau ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_tau_Abst( tom.engine.adt.il.types.Term  t) { return  t.getAbst() ;}private static boolean tom_is_fun_sym_repr( tom.engine.adt.il.types.Term  t) { return  t instanceof tom.engine.adt.il.types.term.repr ;}private static  String  tom_get_slot_repr_Term( tom.engine.adt.il.types.Term  t) { return  t.getTerm() ;}private static boolean tom_is_fun_sym_subterm( tom.engine.adt.il.types.Term  t) { return  t instanceof tom.engine.adt.il.types.term.subterm ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_subterm_Symbol( tom.engine.adt.il.types.Term  t) { return  t.getSymbol() ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_subterm_T( tom.engine.adt.il.types.Term  t) { return  t.getT() ;}private static  int  tom_get_slot_subterm_Index( tom.engine.adt.il.types.Term  t) { return  t.getIndex() ;}private static boolean tom_is_fun_sym_slot( tom.engine.adt.il.types.Term  t) { return  t instanceof tom.engine.adt.il.types.term.slot ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_slot_Symbol( tom.engine.adt.il.types.Term  t) { return  t.getSymbol() ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_slot_T( tom.engine.adt.il.types.Term  t) { return  t.getT() ;}private static  String  tom_get_slot_slot_Name( tom.engine.adt.il.types.Term  t) { return  t.getName() ;}private static boolean tom_is_fun_sym_appSubsT( tom.engine.adt.il.types.Term  t) { return  t instanceof tom.engine.adt.il.types.term.appSubsT ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_appSubsT_Subs( tom.engine.adt.il.types.Term  t) { return  t.getSubs() ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_appSubsT_T( tom.engine.adt.il.types.Term  t) { return  t.getT() ;}private static boolean tom_is_fun_sym_accept( tom.engine.adt.il.types.Instr  t) { return  t instanceof tom.engine.adt.il.types.instr.accept ;}private static  aterm.ATerm  tom_get_slot_accept_Positive( tom.engine.adt.il.types.Instr  t) { return  t.getPositive() ;}private static  aterm.ATerm  tom_get_slot_accept_Negative( tom.engine.adt.il.types.Instr  t) { return  t.getNegative() ;}private static boolean tom_is_fun_sym_absvar( tom.engine.adt.il.types.AbsTerm  t) { return  t instanceof tom.engine.adt.il.types.absterm.absvar ;}private static  tom.engine.adt.il.types.Variable  tom_get_slot_absvar_Varname( tom.engine.adt.il.types.AbsTerm  t) { return  t.getVarname() ;}private static boolean tom_is_fun_sym_st( tom.engine.adt.il.types.AbsTerm  t) { return  t instanceof tom.engine.adt.il.types.absterm.st ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_st_Symbol( tom.engine.adt.il.types.AbsTerm  t) { return  t.getSymbol() ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_st_Abst( tom.engine.adt.il.types.AbsTerm  t) { return  t.getAbst() ;}private static  int  tom_get_slot_st_Index( tom.engine.adt.il.types.AbsTerm  t) { return  t.getIndex() ;}private static boolean tom_is_fun_sym_sl( tom.engine.adt.il.types.AbsTerm  t) { return  t instanceof tom.engine.adt.il.types.absterm.sl ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_sl_Symbol( tom.engine.adt.il.types.AbsTerm  t) { return  t.getSymbol() ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_sl_Abst( tom.engine.adt.il.types.AbsTerm  t) { return  t.getAbst() ;}private static  String  tom_get_slot_sl_Name( tom.engine.adt.il.types.AbsTerm  t) { return  t.getName() ;}private static boolean tom_is_fun_sym_concExpr( tom.engine.adt.il.types.ExprList  t) { return  t instanceof tom.engine.adt.il.types.exprlist.ConsconcExpr || t instanceof tom.engine.adt.il.types.exprlist.EmptyconcExpr ;}private static  tom.engine.adt.il.types.ExprList  tom_empty_list_concExpr() { return  tom.engine.adt.il.types.exprlist.EmptyconcExpr.make() ; }private static  tom.engine.adt.il.types.ExprList  tom_cons_list_concExpr( tom.engine.adt.il.types.Expr  e,  tom.engine.adt.il.types.ExprList  l) { return  tom.engine.adt.il.types.exprlist.ConsconcExpr.make(e,l) ; }private static  tom.engine.adt.il.types.Expr  tom_get_head_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) { return  l.getHeadconcExpr() ;}private static  tom.engine.adt.il.types.ExprList  tom_get_tail_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) { return  l.getTailconcExpr() ;}private static boolean tom_is_empty_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) { return  l.isEmptyconcExpr() ;}private static  tom.engine.adt.il.types.ExprList  tom_append_list_concExpr( tom.engine.adt.il.types.ExprList  l1,  tom.engine.adt.il.types.ExprList  l2) {    if(tom_is_empty_concExpr_ExprList(l1)) {     return l2;    } else if(tom_is_empty_concExpr_ExprList(l2)) {     return l1;    } else if(tom_is_empty_concExpr_ExprList(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(l1))) {     return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(l1),l2);    } else {      return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(l1),tom_append_list_concExpr(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(l1),l2));    }   }  private static  tom.engine.adt.il.types.ExprList  tom_get_slice_concExpr( tom.engine.adt.il.types.ExprList  begin,  tom.engine.adt.il.types.ExprList  end, tom.engine.adt.il.types.ExprList  tail) {    if(tom_equal_term_ExprList(begin,end)) {      return tail;    } else {      return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(begin),( tom.engine.adt.il.types.ExprList )tom_get_slice_concExpr(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(begin),end,tail));    }   }  private static boolean tom_is_fun_sym_subs( tom.engine.adt.il.types.SubstitutionList  t) { return  t instanceof tom.engine.adt.il.types.substitutionlist.Conssubs || t instanceof tom.engine.adt.il.types.substitutionlist.Emptysubs ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_empty_list_subs() { return  tom.engine.adt.il.types.substitutionlist.Emptysubs.make() ; }private static  tom.engine.adt.il.types.SubstitutionList  tom_cons_list_subs( tom.engine.adt.il.types.Substitution  e,  tom.engine.adt.il.types.SubstitutionList  l) { return  tom.engine.adt.il.types.substitutionlist.Conssubs.make(e,l) ; }private static  tom.engine.adt.il.types.Substitution  tom_get_head_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) { return  l.getHeadsubs() ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_tail_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) { return  l.getTailsubs() ;}private static boolean tom_is_empty_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) { return  l.isEmptysubs() ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_append_list_subs( tom.engine.adt.il.types.SubstitutionList  l1,  tom.engine.adt.il.types.SubstitutionList  l2) {    if(tom_is_empty_subs_SubstitutionList(l1)) {     return l2;    } else if(tom_is_empty_subs_SubstitutionList(l2)) {     return l1;    } else if(tom_is_empty_subs_SubstitutionList(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(l1))) {     return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(l1),l2);    } else {      return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(l1),tom_append_list_subs(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(l1),l2));    }   }  private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slice_subs( tom.engine.adt.il.types.SubstitutionList  begin,  tom.engine.adt.il.types.SubstitutionList  end, tom.engine.adt.il.types.SubstitutionList  tail) {    if(tom_equal_term_SubstitutionList(begin,end)) {      return tail;    } else {      return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(begin),( tom.engine.adt.il.types.SubstitutionList )tom_get_slice_subs(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(begin),end,tail));    }   }  private static boolean tom_is_fun_sym_concTerm( tom.engine.adt.il.types.TermList  t) { return  t instanceof tom.engine.adt.il.types.termlist.ConsconcTerm || t instanceof tom.engine.adt.il.types.termlist.EmptyconcTerm ;}private static  tom.engine.adt.il.types.TermList  tom_empty_list_concTerm() { return  tom.engine.adt.il.types.termlist.EmptyconcTerm.make() ; }private static  tom.engine.adt.il.types.TermList  tom_cons_list_concTerm( tom.engine.adt.il.types.Term  e,  tom.engine.adt.il.types.TermList  l) { return  tom.engine.adt.il.types.termlist.ConsconcTerm.make(e,l) ; }private static  tom.engine.adt.il.types.Term  tom_get_head_concTerm_TermList( tom.engine.adt.il.types.TermList  l) { return  l.getHeadconcTerm() ;}private static  tom.engine.adt.il.types.TermList  tom_get_tail_concTerm_TermList( tom.engine.adt.il.types.TermList  l) { return  l.getTailconcTerm() ;}private static boolean tom_is_empty_concTerm_TermList( tom.engine.adt.il.types.TermList  l) { return  l.isEmptyconcTerm() ;}private static  tom.engine.adt.il.types.TermList  tom_append_list_concTerm( tom.engine.adt.il.types.TermList  l1,  tom.engine.adt.il.types.TermList  l2) {    if(tom_is_empty_concTerm_TermList(l1)) {     return l2;    } else if(tom_is_empty_concTerm_TermList(l2)) {     return l1;    } else if(tom_is_empty_concTerm_TermList(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(l1))) {     return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(l1),l2);    } else {      return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(l1),tom_append_list_concTerm(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(l1),l2));    }   }  private static  tom.engine.adt.il.types.TermList  tom_get_slice_concTerm( tom.engine.adt.il.types.TermList  begin,  tom.engine.adt.il.types.TermList  end, tom.engine.adt.il.types.TermList  tail) {    if(tom_equal_term_TermList(begin,end)) {      return tail;    } else {      return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(begin),( tom.engine.adt.il.types.TermList )tom_get_slice_concTerm(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(begin),end,tail));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_ZType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZType(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZType ;}private static boolean tom_equal_term_ZTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZTerm(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZTerm ;}private static boolean tom_equal_term_ZAxiom(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZAxiom(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZAxiom ;}private static boolean tom_equal_term_ZSpec(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZSpec(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZSpec ;}private static boolean tom_equal_term_ZSymbol(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZSymbol(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZSymbol ;}private static boolean tom_equal_term_ZExpr(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZExpr(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZExpr ;}private static boolean tom_equal_term_ZAxiomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZAxiomList(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZAxiomList ;}private static  tom.engine.adt.zenon.types.ZType  tom_make_ztype( String  t0) { return  tom.engine.adt.zenon.types.ztype.ztype.make(t0); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zvar( String  t0) { return  tom.engine.adt.zenon.types.zterm.zvar.make(t0); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zst( tom.engine.adt.zenon.types.ZTerm  t0,  int  t1) { return  tom.engine.adt.zenon.types.zterm.zst.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zsl( tom.engine.adt.zenon.types.ZTerm  t0,  String  t1) { return  tom.engine.adt.zenon.types.zterm.zsl.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZSpec  tom_make_zthm( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZAxiomList  t1) { return  tom.engine.adt.zenon.types.zspec.zthm.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZSymbol  tom_make_zsymbol( String  t0) { return  tom.engine.adt.zenon.types.zsymbol.zsymbol.make(t0); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_ztrue() { return  tom.engine.adt.zenon.types.zexpr.ztrue.make(); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zfalse() { return  tom.engine.adt.zenon.types.zexpr.zfalse.make(); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZSymbol  t1) { return  tom.engine.adt.zenon.types.zexpr.zisfsym.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zeq( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZTerm  t1) { return  tom.engine.adt.zenon.types.zexpr.zeq.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zforall( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZType  t1,  tom.engine.adt.zenon.types.ZExpr  t2) { return  tom.engine.adt.zenon.types.zexpr.zforall.make(t0, t1, t2); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zand( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zand.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zor( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zor.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_znot( tom.engine.adt.zenon.types.ZExpr  t0) { return  tom.engine.adt.zenon.types.zexpr.znot.make(t0); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zequiv.make(t0, t1); }private static boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList  t) { return  t instanceof tom.engine.adt.zenon.types.zaxiomlist.Conszby || t instanceof tom.engine.adt.zenon.types.zaxiomlist.Emptyzby ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_empty_list_zby() { return  tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ; }private static  tom.engine.adt.zenon.types.ZAxiomList  tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom  e,  tom.engine.adt.zenon.types.ZAxiomList  l) { return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make(e,l) ; }private static  tom.engine.adt.zenon.types.ZAxiom  tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) { return  l.getHeadzby() ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) { return  l.getTailzby() ;}private static boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) { return  l.isEmptyzby() ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList  l1,  tom.engine.adt.zenon.types.ZAxiomList  l2) {    if(tom_is_empty_zby_ZAxiomList(l1)) {     return l2;    } else if(tom_is_empty_zby_ZAxiomList(l2)) {     return l1;    } else if(tom_is_empty_zby_ZAxiomList(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(l1))) {     return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(l1),tom_append_list_zby(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(l1),l2));    }   }  private static  tom.engine.adt.zenon.types.ZAxiomList  tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList  begin,  tom.engine.adt.zenon.types.ZAxiomList  end, tom.engine.adt.zenon.types.ZAxiomList  tail) {    if(tom_equal_term_ZAxiomList(begin,end)) {      return tail;    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(begin),( tom.engine.adt.zenon.types.ZAxiomList )tom_get_slice_zby(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(begin),end,tail));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ /* Generated by TOM (version 2.5alpha): Do not edit this file */   





  // ------------------------------------------------------------

  private Verifier verifier;
  private TomIlTools tomiltools;

  public ZenonOutput(Verifier verifier) {
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  public Collection zspecSetFromConstraintMap(Map constraintMap) {
    Collection resset = new HashSet();
    Iterator it = constraintMap.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZSpec spec = zspecFromMapEntry(entry);
      resset.add(spec);
    }
    return resset;
  }

  public ZSpec zspecFromMapEntry(Map.Entry entry) {
    Instr accept = (Instr) entry.getKey();
    Expr constraint = (Expr) entry.getValue();

    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;

    // theorem to prove
    if (tom_is_sort_Instr(accept)) {{  tom.engine.adt.il.types.Instr  tomMatch1Position1=(( tom.engine.adt.il.types.Instr )accept);if ( ( tom_is_fun_sym_accept(tomMatch1Position1) ||  false  ) ) {if ( true ) {

        Pattern positivePattern = Pattern.fromTerm(tom_get_slot_accept_Positive(tomMatch1Position1));
        PatternList negativePatternList = PatternList.fromTerm(tom_get_slot_accept_Negative(tomMatch1Position1));
        // we need the substitution to generate the pattern part of the theorem
        SubstitutionList subsList = verifier.collectSubstitutionInConstraint(constraint);
        Map variableMap = ztermVariableMapFromSubstitutionList(subsList,
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromPattern(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.patternToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.patternToZExpr(negativePatternList,variableMap);
        }
      }}}}


    ZExpr zenonConstraint = zexprFromExpr(constraint);

    ZExpr theorem = null;
    if (pattern != null && zenonConstraint != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem = tom_make_zequiv(tom_make_zand(pattern,tom_make_znot(negpattern)),zenonConstraint);
      } else {
        theorem = tom_make_zequiv(pattern,zenonConstraint);
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature. Again, the TomIlTools will be useful, it has access
    // to TomSignature and Zenon signature

    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem = tom_make_zforall(input,tom_make_ztype("T"),theorem);
    }
    ZSpec spec = tom_make_zthm(theorem,tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms,tom_empty_list_zby())));

    return spec;
  }

  ZTerm ztermFromTerm(Term term) {
    if (tom_is_sort_Term(term)) {{  tom.engine.adt.il.types.Term  tomMatch2Position1=(( tom.engine.adt.il.types.Term )term);if ( ( tom_is_fun_sym_tau(tomMatch2Position1) ||  false  ) ) {if ( true ) {

        return ztermFromAbsTerm(tom_get_slot_tau_Abst(tomMatch2Position1));
      }}if ( ( tom_is_fun_sym_repr(tomMatch2Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm repr");
      }}if ( ( tom_is_fun_sym_subterm(tomMatch2Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm subterm");
      }}if ( ( tom_is_fun_sym_slot(tomMatch2Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm "+ term+" slot");
      }}if ( ( tom_is_fun_sym_appSubsT(tomMatch2Position1) ||  false  ) ) {if ( true ) {

        // probleme: la substitution devrait etre appliquee
        return tom_make_zvar("Error in ztermFromTerm appsubsT ");
      }}}}

    return tom_make_zvar("match vide dans ztermFromTerm");
  }

  ZExpr zexprFromExpr(Expr expr) {
    if (tom_is_sort_Expr(expr)) {{  tom.engine.adt.il.types.Expr  tomMatch3Position1=(( tom.engine.adt.il.types.Expr )expr);if ( ( tom_is_fun_sym_iltrue(tomMatch3Position1) ||  false  ) ) {if ( true ) {
 return tom_make_ztrue();}}if ( ( tom_is_fun_sym_ilfalse(tomMatch3Position1) ||  false  ) ) {if ( true ) {
 return tom_make_zfalse();}}if ( ( tom_is_fun_sym_tisfsym(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zisfsym(ztermFromAbsTerm(tom_get_slot_tisfsym_Abst(tomMatch3Position1)),zsymbolFromSymbol(tom_get_slot_tisfsym_Symbol(tomMatch3Position1)));
      }}if ( ( tom_is_fun_sym_teq(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zeq(ztermFromAbsTerm(tom_get_slot_teq_Labst(tomMatch3Position1)),ztermFromAbsTerm(tom_get_slot_teq_Rabst(tomMatch3Position1)));
      }}if ( ( tom_is_fun_sym_isfsym(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        // this should not occur
        return tom_make_zisfsym(tom_make_zvar("Error in zexprFromExpr"),tom_make_zsymbol("isfsym"));
      }}if ( ( tom_is_fun_sym_eq(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("eq"));
      }}if ( ( tom_is_fun_sym_appSubsE(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("appSubsE"));
      }}if ( ( tom_is_fun_sym_iland(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zand(zexprFromExpr(tom_get_slot_iland_Left(tomMatch3Position1)),zexprFromExpr(tom_get_slot_iland_Right(tomMatch3Position1)));
      }}if ( ( tom_is_fun_sym_ilor(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zor(zexprFromExpr(tom_get_slot_ilor_Left(tomMatch3Position1)),zexprFromExpr(tom_get_slot_ilor_Right(tomMatch3Position1)));
      }}if ( ( tom_is_fun_sym_ilnot(tomMatch3Position1) ||  false  ) ) {if ( true ) {

        return tom_make_znot(zexprFromExpr(tom_get_slot_ilnot_Exp(tomMatch3Position1)));
      }}}}

    return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("end " + expr.toString()));
  }

  ZSymbol zsymbolFromSymbol(Symbol symb) {
    if (tom_is_sort_Symbol(symb)) {{  tom.engine.adt.il.types.Symbol  tomMatch4Position1=(( tom.engine.adt.il.types.Symbol )symb);if ( ( tom_is_fun_sym_fsymbol(tomMatch4Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zsymbol(tom_get_slot_fsymbol_Name(tomMatch4Position1));
      }}}}

    return tom_make_zsymbol("random");
  }

  ZExpr zexprFromSeq(Seq seq) {
    if (tom_is_sort_Seq(seq)) {{  tom.engine.adt.il.types.Seq  tomMatch5Position1=(( tom.engine.adt.il.types.Seq )seq);if ( ( tom_is_fun_sym_seq(tomMatch5Position1) ||  false  ) ) {if ( true ) {

        return tom_make_ztrue();
      }}if ( ( tom_is_fun_sym_dedterm(tomMatch5Position1) ||  false  ) ) {{  tom.engine.adt.il.types.TermList  tom_termlist=tom_get_slot_dedterm_Terms(tomMatch5Position1);if ( true ) {if (tom_is_sort_TermList(tom_termlist)) {{  tom.engine.adt.il.types.TermList  tomMatch6Position1=(( tom.engine.adt.il.types.TermList )tom_termlist);if ( ( tom_is_fun_sym_concTerm(tomMatch6Position1) ||  false  ) ) {{ int tomMatch6Position1Index1=0;{  tom.engine.adt.il.types.TermList  tomMatch6Position1List1=tomMatch6Position1;{  tom.engine.adt.il.types.TermList  tomMatch6Position1Begin1=tomMatch6Position1List1;{  tom.engine.adt.il.types.TermList  tomMatch6Position1End1=tomMatch6Position1List1;{while (!(tom_is_empty_concTerm_TermList(tomMatch6Position1End1))) {tomMatch6Position1List1=tomMatch6Position1End1;{{  tom.engine.adt.il.types.TermList  tomMatch6Position1Save2=tomMatch6Position1List1;{{  tom.engine.adt.il.types.Term  tom_tl=tom_get_head_concTerm_TermList(tomMatch6Position1List1);tomMatch6Position1Index1=tomMatch6Position1Index1 + 1;tomMatch6Position1List1=tom_get_tail_concTerm_TermList(tomMatch6Position1List1);{  tom.engine.adt.il.types.TermList  tomMatch6Position1Save3=tomMatch6Position1List1;{if (!(tom_is_empty_concTerm_TermList(tomMatch6Position1List1))) {{  tom.engine.adt.il.types.Term  tom_tr=tom_get_head_concTerm_TermList(tomMatch6Position1List1);tomMatch6Position1Index1=tomMatch6Position1Index1 + 1;tomMatch6Position1List1=tom_get_tail_concTerm_TermList(tomMatch6Position1List1);if (tom_is_empty_concTerm_TermList(tomMatch6Position1List1)) {if ( true ) {



            return tom_make_zeq(ztermFromTerm(tom_tl),ztermFromTerm(tom_tr));
          }}}}tomMatch6Position1List1=tomMatch6Position1Save3;}}}tomMatch6Position1List1=tomMatch6Position1Save2;}}tomMatch6Position1End1=tom_get_tail_concTerm_TermList(tomMatch6Position1End1);}}tomMatch6Position1List1=tomMatch6Position1Begin1;}}}}}}}}

      }}}if ( ( tom_is_fun_sym_dedexpr(tomMatch5Position1) ||  false  ) ) {{  tom.engine.adt.il.types.ExprList  tom_exprlist=tom_get_slot_dedexpr_Exprs(tomMatch5Position1);if ( true ) {if (tom_is_sort_ExprList(tom_exprlist)) {{  tom.engine.adt.il.types.ExprList  tomMatch7Position1=(( tom.engine.adt.il.types.ExprList )tom_exprlist);if ( ( tom_is_fun_sym_concExpr(tomMatch7Position1) ||  false  ) ) {{ int tomMatch7Position1Index1=0;{  tom.engine.adt.il.types.ExprList  tomMatch7Position1List1=tomMatch7Position1;{  tom.engine.adt.il.types.ExprList  tomMatch7Position1Begin1=tomMatch7Position1List1;{  tom.engine.adt.il.types.ExprList  tomMatch7Position1End1=tomMatch7Position1List1;{while (!(tom_is_empty_concExpr_ExprList(tomMatch7Position1End1))) {tomMatch7Position1List1=tomMatch7Position1End1;{{  tom.engine.adt.il.types.ExprList  tomMatch7Position1Save2=tomMatch7Position1List1;{{  tom.engine.adt.il.types.Expr  tom_t=tom_get_head_concExpr_ExprList(tomMatch7Position1List1);tomMatch7Position1Index1=tomMatch7Position1Index1 + 1;tomMatch7Position1List1=tom_get_tail_concExpr_ExprList(tomMatch7Position1List1);{  tom.engine.adt.il.types.ExprList  tomMatch7Position1Save3=tomMatch7Position1List1;{if (!(tom_is_empty_concExpr_ExprList(tomMatch7Position1List1))) {{  tom.engine.adt.il.types.Expr  tomMatch7Position1Position3=tom_get_head_concExpr_ExprList(tomMatch7Position1List1);tomMatch7Position1Index1=tomMatch7Position1Index1 + 1;tomMatch7Position1List1=tom_get_tail_concExpr_ExprList(tomMatch7Position1List1);if ( ( tom_is_fun_sym_iltrue(tomMatch7Position1Position3) ||  false  ) ) {if (tom_is_empty_concExpr_ExprList(tomMatch7Position1List1)) {if ( true ) {



            return zexprFromExpr(tom_t);
          }}}}}tomMatch7Position1List1=tomMatch7Position1Save3;}}}tomMatch7Position1List1=tomMatch7Position1Save2;}}tomMatch7Position1End1=tom_get_tail_concExpr_ExprList(tomMatch7Position1End1);}}tomMatch7Position1List1=tomMatch7Position1Begin1;}}}}}}}}

      }}}if ( ( tom_is_fun_sym_dedexpr(tomMatch5Position1) ||  false  ) ) {{  tom.engine.adt.il.types.ExprList  tom_exprlist=tom_get_slot_dedexpr_Exprs(tomMatch5Position1);if ( true ) {if (tom_is_sort_ExprList(tom_exprlist)) {{  tom.engine.adt.il.types.ExprList  tomMatch8Position1=(( tom.engine.adt.il.types.ExprList )tom_exprlist);if ( ( tom_is_fun_sym_concExpr(tomMatch8Position1) ||  false  ) ) {{ int tomMatch8Position1Index1=0;{  tom.engine.adt.il.types.ExprList  tomMatch8Position1List1=tomMatch8Position1;{  tom.engine.adt.il.types.ExprList  tomMatch8Position1Begin1=tomMatch8Position1List1;{  tom.engine.adt.il.types.ExprList  tomMatch8Position1End1=tomMatch8Position1List1;{while (!(tom_is_empty_concExpr_ExprList(tomMatch8Position1End1))) {tomMatch8Position1List1=tomMatch8Position1End1;{{  tom.engine.adt.il.types.ExprList  tomMatch8Position1Save2=tomMatch8Position1List1;{{  tom.engine.adt.il.types.Expr  tom_t=tom_get_head_concExpr_ExprList(tomMatch8Position1List1);tomMatch8Position1Index1=tomMatch8Position1Index1 + 1;tomMatch8Position1List1=tom_get_tail_concExpr_ExprList(tomMatch8Position1List1);{  tom.engine.adt.il.types.ExprList  tomMatch8Position1Save3=tomMatch8Position1List1;{if (!(tom_is_empty_concExpr_ExprList(tomMatch8Position1List1))) {{  tom.engine.adt.il.types.Expr  tomMatch8Position1Position3=tom_get_head_concExpr_ExprList(tomMatch8Position1List1);tomMatch8Position1Index1=tomMatch8Position1Index1 + 1;tomMatch8Position1List1=tom_get_tail_concExpr_ExprList(tomMatch8Position1List1);if ( ( tom_is_fun_sym_ilfalse(tomMatch8Position1Position3) ||  false  ) ) {if (tom_is_empty_concExpr_ExprList(tomMatch8Position1List1)) {if ( true ) {



            return tom_make_znot(zexprFromExpr(tom_t));
          }}}}}tomMatch8Position1List1=tomMatch8Position1Save3;}}}tomMatch8Position1List1=tomMatch8Position1Save2;}}tomMatch8Position1End1=tom_get_tail_concExpr_ExprList(tomMatch8Position1End1);}}tomMatch8Position1List1=tomMatch8Position1Begin1;}}}}}}}}

      }}}}}

    return tom_make_ztrue();
  }

  ZTerm ztermFromAbsTerm(AbsTerm absterm) {
    if (tom_is_sort_AbsTerm(absterm)) {{  tom.engine.adt.il.types.AbsTerm  tomMatch9Position1=(( tom.engine.adt.il.types.AbsTerm )absterm);if ( ( tom_is_fun_sym_absvar(tomMatch9Position1) ||  false  ) ) {{  tom.engine.adt.il.types.Variable  tomMatch9Position1NameNumberVarname=tom_get_slot_absvar_Varname(tomMatch9Position1);if ( ( tom_is_fun_sym_var(tomMatch9Position1NameNumberVarname) ||  false  ) ) {if ( true ) {

        return tom_make_zvar(tom_get_slot_var_Name(tomMatch9Position1NameNumberVarname));
      }}}}if ( ( tom_is_fun_sym_st(tomMatch9Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zst(ztermFromAbsTerm(tom_get_slot_st_Abst(tomMatch9Position1)),tom_get_slot_st_Index(tomMatch9Position1));
      }}if ( ( tom_is_fun_sym_sl(tomMatch9Position1) ||  false  ) ) {if ( true ) {

        return tom_make_zsl(ztermFromAbsTerm(tom_get_slot_sl_Abst(tomMatch9Position1)),tom_get_slot_sl_Name(tomMatch9Position1));
      }}}}

    return tom_make_zvar("Error in ztermFromAbsTerm");
  }

  private Map ztermVariableMapFromSubstitutionList(SubstitutionList sublist, Map map) {
    if (tom_is_sort_SubstitutionList(sublist)) {{  tom.engine.adt.il.types.SubstitutionList  tomMatch10Position1=(( tom.engine.adt.il.types.SubstitutionList )sublist);if ( ( tom_is_fun_sym_subs(tomMatch10Position1) ||  false  ) ) {{ int tomMatch10Position1Index1=0;{  tom.engine.adt.il.types.SubstitutionList  tomMatch10Position1List1=tomMatch10Position1;if (tom_is_empty_subs_SubstitutionList(tomMatch10Position1List1)) {if ( true ) {
 return map; }}}}}if ( ( tom_is_fun_sym_subs(tomMatch10Position1) ||  false  ) ) {{ int tomMatch10Position1Index1=0;{  tom.engine.adt.il.types.SubstitutionList  tomMatch10Position1List1=tomMatch10Position1;{  tom.engine.adt.il.types.SubstitutionList  tomMatch10Position1Save1=tomMatch10Position1List1;{if (!(tom_is_empty_subs_SubstitutionList(tomMatch10Position1List1))) {{  tom.engine.adt.il.types.Substitution  tomMatch10Position1Position1=tom_get_head_subs_SubstitutionList(tomMatch10Position1List1);tomMatch10Position1Index1=tomMatch10Position1Index1 + 1;tomMatch10Position1List1=tom_get_tail_subs_SubstitutionList(tomMatch10Position1List1);if ( ( tom_is_fun_sym_undefsubs(tomMatch10Position1Position1) ||  false  ) ) {if ( true ) {

        return ztermVariableMapFromSubstitutionList(tomMatch10Position1List1,map);
      }}}}tomMatch10Position1List1=tomMatch10Position1Save1;}}}}}if ( ( tom_is_fun_sym_subs(tomMatch10Position1) ||  false  ) ) {{ int tomMatch10Position1Index1=0;{  tom.engine.adt.il.types.SubstitutionList  tomMatch10Position1List1=tomMatch10Position1;{  tom.engine.adt.il.types.SubstitutionList  tomMatch10Position1Save1=tomMatch10Position1List1;{if (!(tom_is_empty_subs_SubstitutionList(tomMatch10Position1List1))) {{  tom.engine.adt.il.types.Substitution  tomMatch10Position1Position1=tom_get_head_subs_SubstitutionList(tomMatch10Position1List1);tomMatch10Position1Index1=tomMatch10Position1Index1 + 1;tomMatch10Position1List1=tom_get_tail_subs_SubstitutionList(tomMatch10Position1List1);if ( ( tom_is_fun_sym_is(tomMatch10Position1Position1) ||  false  ) ) {{  tom.engine.adt.il.types.Variable  tomMatch10Position1Position1NameNumberVar=tom_get_slot_is_Var(tomMatch10Position1Position1);if ( ( tom_is_fun_sym_var(tomMatch10Position1Position1NameNumberVar) ||  false  ) ) {if ( true ) {

        map.put(tom_get_slot_var_Name(tomMatch10Position1Position1NameNumberVar),ztermFromTerm(tom_get_slot_is_Term(tomMatch10Position1Position1)));
        return ztermVariableMapFromSubstitutionList(tomMatch10Position1List1,map);
      }}}}}}tomMatch10Position1List1=tomMatch10Position1Save1;}}}}}}}

    throw new TomRuntimeException(
        "verifier: strange substitution list: " + sublist);
  }
}
