/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;

import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.adt.il.*;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;

import tom.engine.exception.TomRuntimeException;


public class ZenonOutput {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_int(int t1, int t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} private static boolean tom_terms_equal_Deriv(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Expr(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Variable(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Environment(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ExprList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Substitution(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Symbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Seq(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SubstitutionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Term(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TermList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Instr(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_AbsTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_DerivTree(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_ebs( tom.engine.adt.il.types.Deriv  t) {  return  t instanceof tom.engine.adt.il.types.deriv.ebs  ;}private static  tom.engine.adt.il.types.Environment  tom_get_slot_ebs_Lhs( tom.engine.adt.il.types.Deriv  t) {  return  t.getLhs()  ;}private static  tom.engine.adt.il.types.Environment  tom_get_slot_ebs_Rhs( tom.engine.adt.il.types.Deriv  t) {  return  t.getRhs()  ;}private static boolean tom_is_fun_sym_iltrue( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.iltrue  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_iltrue_Subst( tom.engine.adt.il.types.Expr  t) {  return  t.getSubst()  ;}private static boolean tom_is_fun_sym_ilfalse( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.ilfalse  ;}private static boolean tom_is_fun_sym_isfsym( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.isfsym  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_isfsym_T( tom.engine.adt.il.types.Expr  t) {  return  t.getT()  ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_isfsym_Symbol( tom.engine.adt.il.types.Expr  t) {  return  t.getSymbol()  ;}private static boolean tom_is_fun_sym_eq( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.eq  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_eq_Lt( tom.engine.adt.il.types.Expr  t) {  return  t.getLt()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_eq_Rt( tom.engine.adt.il.types.Expr  t) {  return  t.getRt()  ;}private static boolean tom_is_fun_sym_tisfsym( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.tisfsym  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_tisfsym_Abst( tom.engine.adt.il.types.Expr  t) {  return  t.getAbst()  ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_tisfsym_Symbol( tom.engine.adt.il.types.Expr  t) {  return  t.getSymbol()  ;}private static boolean tom_is_fun_sym_teq( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.teq  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_teq_Labst( tom.engine.adt.il.types.Expr  t) {  return  t.getLabst()  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_teq_Rabst( tom.engine.adt.il.types.Expr  t) {  return  t.getRabst()  ;}private static boolean tom_is_fun_sym_iland( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.iland  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_iland_Left( tom.engine.adt.il.types.Expr  t) {  return  t.getLeft()  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_iland_Right( tom.engine.adt.il.types.Expr  t) {  return  t.getRight()  ;}private static boolean tom_is_fun_sym_ilor( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.ilor  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilor_Left( tom.engine.adt.il.types.Expr  t) {  return  t.getLeft()  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilor_Right( tom.engine.adt.il.types.Expr  t) {  return  t.getRight()  ;}private static boolean tom_is_fun_sym_ilnot( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.ilnot  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilnot_Exp( tom.engine.adt.il.types.Expr  t) {  return  t.getExp()  ;}private static boolean tom_is_fun_sym_appSubsE( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.appSubsE  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_appSubsE_Subs( tom.engine.adt.il.types.Expr  t) {  return  t.getSubs()  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_appSubsE_E( tom.engine.adt.il.types.Expr  t) {  return  t.getE()  ;}private static boolean tom_is_fun_sym_var( tom.engine.adt.il.types.Variable  t) {  return  t instanceof tom.engine.adt.il.types.variable.var  ;}private static  tom.engine.adt.il.types.Variable  tom_make_var( String  t0) { return  tom.engine.adt.il.types.variable.var.make(t0); }private static  String  tom_get_slot_var_Name( tom.engine.adt.il.types.Variable  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_env( tom.engine.adt.il.types.Environment  t) {  return  t instanceof tom.engine.adt.il.types.environment.env  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_env_Subs( tom.engine.adt.il.types.Environment  t) {  return  t.getSubs()  ;}private static  tom.engine.adt.il.types.Instr  tom_get_slot_env_I( tom.engine.adt.il.types.Environment  t) {  return  t.getI()  ;}private static boolean tom_is_fun_sym_undefsubs( tom.engine.adt.il.types.Substitution  t) {  return  t instanceof tom.engine.adt.il.types.substitution.undefsubs  ;}private static boolean tom_is_fun_sym_is( tom.engine.adt.il.types.Substitution  t) {  return  t instanceof tom.engine.adt.il.types.substitution.is  ;}private static  tom.engine.adt.il.types.Variable  tom_get_slot_is_Var( tom.engine.adt.il.types.Substitution  t) {  return  t.getVar()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_is_Term( tom.engine.adt.il.types.Substitution  t) {  return  t.getTerm()  ;}private static boolean tom_is_fun_sym_fsymbol( tom.engine.adt.il.types.Symbol  t) {  return  t instanceof tom.engine.adt.il.types.symbol.fsymbol  ;}private static  String  tom_get_slot_fsymbol_Name( tom.engine.adt.il.types.Symbol  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_seq( tom.engine.adt.il.types.Seq  t) {  return  t instanceof tom.engine.adt.il.types.seq.seq  ;}private static boolean tom_is_fun_sym_dedexpr( tom.engine.adt.il.types.Seq  t) {  return  t instanceof tom.engine.adt.il.types.seq.dedexpr  ;}private static  tom.engine.adt.il.types.Seq  tom_make_dedexpr( tom.engine.adt.il.types.ExprList  t0) { return  tom.engine.adt.il.types.seq.dedexpr.make(t0); }private static  tom.engine.adt.il.types.ExprList  tom_get_slot_dedexpr_Exprs( tom.engine.adt.il.types.Seq  t) {  return  t.getExprs()  ;}private static boolean tom_is_fun_sym_dedterm( tom.engine.adt.il.types.Seq  t) {  return  t instanceof tom.engine.adt.il.types.seq.dedterm  ;}private static  tom.engine.adt.il.types.Seq  tom_make_dedterm( tom.engine.adt.il.types.TermList  t0) { return  tom.engine.adt.il.types.seq.dedterm.make(t0); }private static  tom.engine.adt.il.types.TermList  tom_get_slot_dedterm_Terms( tom.engine.adt.il.types.Seq  t) {  return  t.getTerms()  ;}private static boolean tom_is_fun_sym_tau( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.tau  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_tau_Abst( tom.engine.adt.il.types.Term  t) {  return  t.getAbst()  ;}private static boolean tom_is_fun_sym_repr( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.repr  ;}private static  String  tom_get_slot_repr_Term( tom.engine.adt.il.types.Term  t) {  return  t.getTerm()  ;}private static boolean tom_is_fun_sym_subterm( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.subterm  ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_subterm_Symbol( tom.engine.adt.il.types.Term  t) {  return  t.getSymbol()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_subterm_T( tom.engine.adt.il.types.Term  t) {  return  t.getT()  ;}private static  int  tom_get_slot_subterm_Index( tom.engine.adt.il.types.Term  t) {  return  t.getIndex()  ;}private static boolean tom_is_fun_sym_slot( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.slot  ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_slot_Symbol( tom.engine.adt.il.types.Term  t) {  return  t.getSymbol()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_slot_T( tom.engine.adt.il.types.Term  t) {  return  t.getT()  ;}private static  String  tom_get_slot_slot_Name( tom.engine.adt.il.types.Term  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_appSubsT( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.appSubsT  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_appSubsT_Subs( tom.engine.adt.il.types.Term  t) {  return  t.getSubs()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_appSubsT_T( tom.engine.adt.il.types.Term  t) {  return  t.getT()  ;}private static boolean tom_is_fun_sym_accept( tom.engine.adt.il.types.Instr  t) {  return  t instanceof tom.engine.adt.il.types.instr.accept  ;}private static  aterm.ATerm  tom_get_slot_accept_Positive( tom.engine.adt.il.types.Instr  t) {  return  t.getPositive()  ;}private static  aterm.ATerm  tom_get_slot_accept_Negative( tom.engine.adt.il.types.Instr  t) {  return  t.getNegative()  ;}private static boolean tom_is_fun_sym_absvar( tom.engine.adt.il.types.AbsTerm  t) {  return  t instanceof tom.engine.adt.il.types.absterm.absvar  ;}private static  tom.engine.adt.il.types.Variable  tom_get_slot_absvar_Varname( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getVarname()  ;}private static boolean tom_is_fun_sym_st( tom.engine.adt.il.types.AbsTerm  t) {  return  t instanceof tom.engine.adt.il.types.absterm.st  ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_st_Symbol( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getSymbol()  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_st_Abst( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getAbst()  ;}private static  int  tom_get_slot_st_Index( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getIndex()  ;}private static boolean tom_is_fun_sym_sl( tom.engine.adt.il.types.AbsTerm  t) {  return  t instanceof tom.engine.adt.il.types.absterm.sl  ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_sl_Symbol( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getSymbol()  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_sl_Abst( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getAbst()  ;}private static  String  tom_get_slot_sl_Name( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_derivrule( tom.engine.adt.il.types.DerivTree  t) {  return  t instanceof tom.engine.adt.il.types.derivtree.derivrule  ;}private static  String  tom_get_slot_derivrule_Name( tom.engine.adt.il.types.DerivTree  t) {  return  t.getName()  ;}private static  tom.engine.adt.il.types.Deriv  tom_get_slot_derivrule_Post( tom.engine.adt.il.types.DerivTree  t) {  return  t.getPost()  ;}private static  tom.engine.adt.il.types.DerivTree  tom_get_slot_derivrule_Pre( tom.engine.adt.il.types.DerivTree  t) {  return  t.getPre()  ;}private static  tom.engine.adt.il.types.Seq  tom_get_slot_derivrule_Cond( tom.engine.adt.il.types.DerivTree  t) {  return  t.getCond()  ;}private static boolean tom_is_fun_sym_derivrule2( tom.engine.adt.il.types.DerivTree  t) {  return  t instanceof tom.engine.adt.il.types.derivtree.derivrule2  ;}private static  String  tom_get_slot_derivrule2_Name( tom.engine.adt.il.types.DerivTree  t) {  return  t.getName()  ;}private static  tom.engine.adt.il.types.Deriv  tom_get_slot_derivrule2_Post( tom.engine.adt.il.types.DerivTree  t) {  return  t.getPost()  ;}private static  tom.engine.adt.il.types.DerivTree  tom_get_slot_derivrule2_Pre( tom.engine.adt.il.types.DerivTree  t) {  return  t.getPre()  ;}private static  tom.engine.adt.il.types.DerivTree  tom_get_slot_derivrule2_Pre2( tom.engine.adt.il.types.DerivTree  t) {  return  t.getPre2()  ;}private static  tom.engine.adt.il.types.Seq  tom_get_slot_derivrule2_Cond( tom.engine.adt.il.types.DerivTree  t) {  return  t.getCond()  ;}private static boolean tom_is_fun_sym_concExpr( tom.engine.adt.il.types.ExprList  t) {  return  t instanceof tom.engine.adt.il.types.exprlist.ConsconcExpr || t instanceof tom.engine.adt.il.types.exprlist.EmptyconcExpr  ;}private static  tom.engine.adt.il.types.ExprList  tom_empty_list_concExpr() { return  tom.engine.adt.il.types.exprlist.EmptyconcExpr.make() ; }private static  tom.engine.adt.il.types.ExprList  tom_cons_list_concExpr( tom.engine.adt.il.types.Expr  e,  tom.engine.adt.il.types.ExprList  l) { return  tom.engine.adt.il.types.exprlist.ConsconcExpr.make(e,l) ; }private static  tom.engine.adt.il.types.Expr  tom_get_head_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) {  return  l.getHeadconcExpr()  ;}private static  tom.engine.adt.il.types.ExprList  tom_get_tail_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) {  return  l.getTailconcExpr()  ;}private static boolean tom_is_empty_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) {  return  l.isEmptyconcExpr()  ;}private static  tom.engine.adt.il.types.ExprList  tom_append_list_concExpr( tom.engine.adt.il.types.ExprList  l1,  tom.engine.adt.il.types.ExprList  l2) {    if(tom_is_empty_concExpr_ExprList(l1)) {     return l2;    } else if(tom_is_empty_concExpr_ExprList(l2)) {     return l1;    } else if(tom_is_empty_concExpr_ExprList(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(l1))) {     return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(l1),l2);    } else {      return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(l1),tom_append_list_concExpr(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(l1),l2));    }   }  private static  tom.engine.adt.il.types.ExprList  tom_get_slice_concExpr( tom.engine.adt.il.types.ExprList  begin,  tom.engine.adt.il.types.ExprList  end) {    if(tom_terms_equal_ExprList(begin,end)) {      return ( tom.engine.adt.il.types.ExprList )tom_empty_list_concExpr();    } else {      return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(begin),( tom.engine.adt.il.types.ExprList )tom_get_slice_concExpr(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(begin),end));    }   }  private static boolean tom_is_fun_sym_subs( tom.engine.adt.il.types.SubstitutionList  t) {  return  t instanceof tom.engine.adt.il.types.substitutionlist.Conssubs || t instanceof tom.engine.adt.il.types.substitutionlist.Emptysubs  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_empty_list_subs() { return  tom.engine.adt.il.types.substitutionlist.Emptysubs.make() ; }private static  tom.engine.adt.il.types.SubstitutionList  tom_cons_list_subs( tom.engine.adt.il.types.Substitution  e,  tom.engine.adt.il.types.SubstitutionList  l) { return  tom.engine.adt.il.types.substitutionlist.Conssubs.make(e,l) ; }private static  tom.engine.adt.il.types.Substitution  tom_get_head_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) {  return  l.getHeadsubs()  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_tail_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) {  return  l.getTailsubs()  ;}private static boolean tom_is_empty_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) {  return  l.isEmptysubs()  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_append_list_subs( tom.engine.adt.il.types.SubstitutionList  l1,  tom.engine.adt.il.types.SubstitutionList  l2) {    if(tom_is_empty_subs_SubstitutionList(l1)) {     return l2;    } else if(tom_is_empty_subs_SubstitutionList(l2)) {     return l1;    } else if(tom_is_empty_subs_SubstitutionList(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(l1))) {     return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(l1),l2);    } else {      return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(l1),tom_append_list_subs(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(l1),l2));    }   }  private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slice_subs( tom.engine.adt.il.types.SubstitutionList  begin,  tom.engine.adt.il.types.SubstitutionList  end) {    if(tom_terms_equal_SubstitutionList(begin,end)) {      return ( tom.engine.adt.il.types.SubstitutionList )tom_empty_list_subs();    } else {      return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(begin),( tom.engine.adt.il.types.SubstitutionList )tom_get_slice_subs(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTerm( tom.engine.adt.il.types.TermList  t) {  return  t instanceof tom.engine.adt.il.types.termlist.ConsconcTerm || t instanceof tom.engine.adt.il.types.termlist.EmptyconcTerm  ;}private static  tom.engine.adt.il.types.TermList  tom_empty_list_concTerm() { return  tom.engine.adt.il.types.termlist.EmptyconcTerm.make() ; }private static  tom.engine.adt.il.types.TermList  tom_cons_list_concTerm( tom.engine.adt.il.types.Term  e,  tom.engine.adt.il.types.TermList  l) { return  tom.engine.adt.il.types.termlist.ConsconcTerm.make(e,l) ; }private static  tom.engine.adt.il.types.Term  tom_get_head_concTerm_TermList( tom.engine.adt.il.types.TermList  l) {  return  l.getHeadconcTerm()  ;}private static  tom.engine.adt.il.types.TermList  tom_get_tail_concTerm_TermList( tom.engine.adt.il.types.TermList  l) {  return  l.getTailconcTerm()  ;}private static boolean tom_is_empty_concTerm_TermList( tom.engine.adt.il.types.TermList  l) {  return  l.isEmptyconcTerm()  ;}private static  tom.engine.adt.il.types.TermList  tom_append_list_concTerm( tom.engine.adt.il.types.TermList  l1,  tom.engine.adt.il.types.TermList  l2) {    if(tom_is_empty_concTerm_TermList(l1)) {     return l2;    } else if(tom_is_empty_concTerm_TermList(l2)) {     return l1;    } else if(tom_is_empty_concTerm_TermList(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(l1))) {     return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(l1),l2);    } else {      return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(l1),tom_append_list_concTerm(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(l1),l2));    }   }  private static  tom.engine.adt.il.types.TermList  tom_get_slice_concTerm( tom.engine.adt.il.types.TermList  begin,  tom.engine.adt.il.types.TermList  end) {    if(tom_terms_equal_TermList(begin,end)) {      return ( tom.engine.adt.il.types.TermList )tom_empty_list_concTerm();    } else {      return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(begin),( tom.engine.adt.il.types.TermList )tom_get_slice_concTerm(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_ZType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZAxiom(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZSpec(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZSymbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZExpr(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZAxiomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.engine.adt.zenon.types.ZType  tom_make_ztype( String  t0) { return  tom.engine.adt.zenon.types.ztype.ztype.make(t0); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zvar( String  t0) { return  tom.engine.adt.zenon.types.zterm.zvar.make(t0); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zst( tom.engine.adt.zenon.types.ZTerm  t0,  int  t1) { return  tom.engine.adt.zenon.types.zterm.zst.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zsl( tom.engine.adt.zenon.types.ZTerm  t0,  String  t1) { return  tom.engine.adt.zenon.types.zterm.zsl.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZSpec  tom_make_zthm( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZAxiomList  t1) { return  tom.engine.adt.zenon.types.zspec.zthm.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZSymbol  tom_make_zsymbol( String  t0) { return  tom.engine.adt.zenon.types.zsymbol.zsymbol.make(t0); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_ztrue() { return  tom.engine.adt.zenon.types.zexpr.ztrue.make(); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zfalse() { return  tom.engine.adt.zenon.types.zexpr.zfalse.make(); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZSymbol  t1) { return  tom.engine.adt.zenon.types.zexpr.zisfsym.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zeq( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZTerm  t1) { return  tom.engine.adt.zenon.types.zexpr.zeq.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zforall( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZType  t1,  tom.engine.adt.zenon.types.ZExpr  t2) { return  tom.engine.adt.zenon.types.zexpr.zforall.make(t0, t1, t2); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zand( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zand.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zor( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zor.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_znot( tom.engine.adt.zenon.types.ZExpr  t0) { return  tom.engine.adt.zenon.types.zexpr.znot.make(t0); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zequiv.make(t0, t1); }private static boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList  t) {  return  t instanceof tom.engine.adt.zenon.types.zaxiomlist.Conszby || t instanceof tom.engine.adt.zenon.types.zaxiomlist.Emptyzby  ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_empty_list_zby() { return  tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ; }private static  tom.engine.adt.zenon.types.ZAxiomList  tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom  e,  tom.engine.adt.zenon.types.ZAxiomList  l) { return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make(e,l) ; }private static  tom.engine.adt.zenon.types.ZAxiom  tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) {  return  l.getHeadzby()  ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) {  return  l.getTailzby()  ;}private static boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) {  return  l.isEmptyzby()  ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList  l1,  tom.engine.adt.zenon.types.ZAxiomList  l2) {    if(tom_is_empty_zby_ZAxiomList(l1)) {     return l2;    } else if(tom_is_empty_zby_ZAxiomList(l2)) {     return l1;    } else if(tom_is_empty_zby_ZAxiomList(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(l1))) {     return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(l1),tom_append_list_zby(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(l1),l2));    }   }  private static  tom.engine.adt.zenon.types.ZAxiomList  tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList  begin,  tom.engine.adt.zenon.types.ZAxiomList  end) {    if(tom_terms_equal_ZAxiomList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_empty_list_zby();    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(begin),( tom.engine.adt.zenon.types.ZAxiomList )tom_get_slice_zby(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static boolean tom_is_fun_sym_Sequence( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (t instanceof tom.library.strategy.mutraveler.Sequence)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_empty_list_Sequence() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_cons_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  head,  tom.library.strategy.mutraveler.MuStrategy  tail) { return  new tom.library.strategy.mutraveler.Sequence(head,tail) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_head_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.FIRST)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_tail_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.THEN)  ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  t instanceof tom.library.strategy.mutraveler.Identity  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_append_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  l1,  tom.library.strategy.mutraveler.MuStrategy  l2) {    if(tom_is_empty_Sequence_Strategy(l1)) {     return l2;    } else if(tom_is_empty_Sequence_Strategy(l2)) {     return l1;    } else if(tom_is_empty_Sequence_Strategy(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1))) {     return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),l2);    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),tom_append_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1),l2));    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_slice_Sequence( tom.library.strategy.mutraveler.MuStrategy  begin,  tom.library.strategy.mutraveler.MuStrategy  end) {    if(tom_terms_equal_Strategy(begin,end)) {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_empty_list_Sequence();    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(begin),( tom.library.strategy.mutraveler.MuStrategy )tom_get_slice_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(begin),end));    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   





  // ------------------------------------------------------------

  private Verifier verifier;
  private TomIlTools tomiltools;

  public ZenonOutput(Verifier verifier) {
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  public Collection zspecSetFromDerivationTreeSet(Collection derivationSet) {
    Collection resset = new HashSet();
    Iterator it = derivationSet.iterator();
    while(it.hasNext()) {
      DerivTree tree = (DerivTree) it.next();
      ZSpec spec = zspecFromDerivationTree(tree);
      resset.add(spec);
    }
    return resset;
  }

  public Collection zspecSetFromConstraintMap(Map constraintMap) {
    Collection resset = new HashSet();
    Iterator it = constraintMap.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZSpec spec = zspecFromMapEntry(entry);
      resset.add(spec);
    }
    return resset;
  }

  public ZSpec zspecFromMapEntry(Map.Entry entry) {
    Instr accept = (Instr) entry.getKey();
    Expr constraint = (Expr) entry.getValue();

    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;

    // theorem to prove
     if(accept instanceof  tom.engine.adt.il.types.Instr ) { { tom.engine.adt.il.types.Instr  tomMatch1Position1=(( tom.engine.adt.il.types.Instr )accept); if ( ( tom_is_fun_sym_accept(tomMatch1Position1) ||  false  ) ) { { aterm.ATerm  tom_positive=tom_get_slot_accept_Positive(tomMatch1Position1); { aterm.ATerm  tom_negative=tom_get_slot_accept_Negative(tomMatch1Position1); if ( true ) {

        Pattern positivePattern = Pattern.fromTerm(tom_positive);
        PatternList negativePatternList = PatternList.fromTerm(tom_negative);
        // we need the substitution to generate the pattern part of the theorem
        SubstitutionList subsList = verifier.collectSubstitutionInConstraint(constraint);
        Map variableMap = ztermVariableMapFromSubstitutionList(subsList,
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromPattern(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.patternToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.patternToZExpr(negativePatternList,variableMap);
        }
       } } } } } }


    ZExpr zenonConstraint = zexprFromExpr(constraint);

    ZExpr theorem = null;
    if (pattern != null && zenonConstraint != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem = tom_make_zequiv(tom_make_zand(pattern,tom_make_znot(negpattern)),zenonConstraint);
      } else {
        theorem = tom_make_zequiv(pattern,zenonConstraint);
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature. Again, the TomIlTools will be useful, it has access
    // to TomSignature and Zenon signature

    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem = tom_make_zforall(input,tom_make_ztype("T"),theorem);
    }
    ZSpec spec = tom_make_zthm(theorem,tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms,tom_empty_list_zby())));

    return spec;
  }

  public ZSpec zspecFromDerivationTree(DerivTree tree) {

    Map variableset = new HashMap();
    tree = collectProgramVariables(tree,variableset);

    // Use a TreeMap to have the conditions sorted
    Map conditions = new TreeMap();
    collectConstraints(tree,conditions);
    Map conds = new TreeMap();

    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;
    // theorem to prove
     if(tree instanceof  tom.engine.adt.il.types.DerivTree ) { { tom.engine.adt.il.types.DerivTree  tomMatch2Position1=(( tom.engine.adt.il.types.DerivTree )tree); {boolean tomNameNumberboolMatch2Position1= false ; { tom.engine.adt.il.types.Deriv  tomMatch2Position1NameNumberPost= null ; if (tom_is_fun_sym_derivrule(tomMatch2Position1)) {tomNameNumberboolMatch2Position1= true ;tomMatch2Position1NameNumberPost=tom_get_slot_derivrule_Post(tomMatch2Position1); } else { if (tom_is_fun_sym_derivrule2(tomMatch2Position1)) {tomNameNumberboolMatch2Position1= true ;tomMatch2Position1NameNumberPost=tom_get_slot_derivrule2_Post(tomMatch2Position1); } } if (tomNameNumberboolMatch2Position1) { if ( ( tom_is_fun_sym_ebs(tomMatch2Position1NameNumberPost) ||  false  ) ) { { tom.engine.adt.il.types.Environment  tomMatch2Position1NameNumberPostNameNumberRhs=tom_get_slot_ebs_Rhs(tomMatch2Position1NameNumberPost); if ( ( tom_is_fun_sym_env(tomMatch2Position1NameNumberPostNameNumberRhs) ||  false  ) ) { { tom.engine.adt.il.types.Instr  tomMatch2Position1NameNumberPostNameNumberRhsNameNumberI=tom_get_slot_env_I(tomMatch2Position1NameNumberPostNameNumberRhs); { tom.engine.adt.il.types.SubstitutionList  tom_subsList=tom_get_slot_env_Subs(tomMatch2Position1NameNumberPostNameNumberRhs); if ( ( tom_is_fun_sym_accept(tomMatch2Position1NameNumberPostNameNumberRhsNameNumberI) ||  false  ) ) { { aterm.ATerm  tom_positive=tom_get_slot_accept_Positive(tomMatch2Position1NameNumberPostNameNumberRhsNameNumberI); { aterm.ATerm  tom_negative=tom_get_slot_accept_Negative(tomMatch2Position1NameNumberPostNameNumberRhsNameNumberI); if ( true ) {


        Pattern positivePattern = Pattern.fromTerm(tom_positive);
        PatternList negativePatternList = PatternList.fromTerm(tom_negative);
        Map variableMap = ztermVariableMapFromSubstitutionList(tom_subsList,
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromPattern(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.patternToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.patternToZExpr(negativePatternList,variableMap);
        }
       } } } } } } } } } } } } } }


    ZExpr constraints = tom_make_ztrue();
    // we consider only the interesting conditions : dedexpr
    Iterator it = conditions.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      Seq value = (Seq) entry.getValue();
      if (value.isdedexpr()) {
        conds.put(((String) entry.getKey()),
                  zexprFromSeq(cleanSeq(value)));
      }
    }
    it = conds.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZExpr value = (ZExpr) entry.getValue();
      constraints = tom_make_zand(constraints,value);
    }
    ZExpr theorem = null;
    if (pattern != null && constraints != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem = tom_make_zequiv(tom_make_zand(pattern,tom_make_znot(negpattern)),constraints);
      } else {
        theorem = tom_make_zequiv(pattern,constraints);
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature.

    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem = tom_make_zforall(input,tom_make_ztype("T"),theorem);
    }
    ZSpec spec = tom_make_zthm(theorem,tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms,tom_empty_list_zby())));

    return spec;
  }


  /**
   * collects all variable names in the DerivTree, and give a name to _'s
   */
   private static class programVariablesCollector  extends  tom.engine.adt.il.IlBasicStrategy   { private  java.util.Map  store;  public programVariablesCollector(  java.util.Map  store ) { super(tom_make_Identity() ); this.store=store; } public  java.util.Map  getstore() { return store;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.il.types.Variable  visit_Variable(  tom.engine.adt.il.types.Variable  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Variable ) { { tom.engine.adt.il.types.Variable  tomMatch3Position1=(( tom.engine.adt.il.types.Variable )tom__arg); if ( ( tom_is_fun_sym_var(tomMatch3Position1) ||  false  ) ) { { String  tom_name=tom_get_slot_var_Name(tomMatch3Position1); if ( true ) {


        String newname = tom_name;
        if (store.containsKey(tom_name)){
          newname = (String) store.get(tom_name);
        } else {
          if (tom_name.startsWith("[") && tom_name.endsWith("]")) {
            newname = "X_" + store.size();
          }
          store.put(tom_name,newname);
        }
        return tom_make_var(newname);
       } } } } } return super.visit_Variable(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_programVariablesCollector( java.util.Map  t0) { return new programVariablesCollector(t0); }



  DerivTree collectProgramVariables(DerivTree tree, Map variables) {
    try {
      tree = (DerivTree) tom_make_TopDown(tom_make_programVariablesCollector(variables)).visit(tree);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectProgramVariables failed");
    }
    return tree;
  }

  ZTerm ztermFromTerm(Term term) {
     if(term instanceof  tom.engine.adt.il.types.Term ) { { tom.engine.adt.il.types.Term  tomMatch4Position1=(( tom.engine.adt.il.types.Term )term); if ( ( tom_is_fun_sym_tau(tomMatch4Position1) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_absTerm=tom_get_slot_tau_Abst(tomMatch4Position1); if ( true ) {

        return ztermFromAbsTerm(tom_absTerm);
       } } } if ( ( tom_is_fun_sym_repr(tomMatch4Position1) ||  false  ) ) { if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm repr");
       } } if ( ( tom_is_fun_sym_subterm(tomMatch4Position1) ||  false  ) ) { if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm subterm");
       } } if ( ( tom_is_fun_sym_slot(tomMatch4Position1) ||  false  ) ) { if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm "+ term+" slot");
       } } if ( ( tom_is_fun_sym_appSubsT(tomMatch4Position1) ||  false  ) ) { if ( true ) {

        // probleme: la substitution devrait etre appliquee
        return tom_make_zvar("Error in ztermFromTerm appsubsT ");
       } } } }

    return tom_make_zvar("match vide dans ztermFromTerm");
  }

  ZExpr zexprFromExpr(Expr expr) {
     if(expr instanceof  tom.engine.adt.il.types.Expr ) { { tom.engine.adt.il.types.Expr  tomMatch5Position1=(( tom.engine.adt.il.types.Expr )expr); if ( ( tom_is_fun_sym_iltrue(tomMatch5Position1) ||  false  ) ) { if ( true ) {
 return tom_make_ztrue(); } } if ( ( tom_is_fun_sym_ilfalse(tomMatch5Position1) ||  false  ) ) { if ( true ) {
 return tom_make_zfalse(); } } if ( ( tom_is_fun_sym_tisfsym(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_absterm=tom_get_slot_tisfsym_Abst(tomMatch5Position1); { tom.engine.adt.il.types.Symbol  tom_s=tom_get_slot_tisfsym_Symbol(tomMatch5Position1); if ( true ) {

        return tom_make_zisfsym(ztermFromAbsTerm(tom_absterm),zsymbolFromSymbol(tom_s));
       } } } } if ( ( tom_is_fun_sym_teq(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_absterml=tom_get_slot_teq_Labst(tomMatch5Position1); { tom.engine.adt.il.types.AbsTerm  tom_abstermr=tom_get_slot_teq_Rabst(tomMatch5Position1); if ( true ) {

        return tom_make_zeq(ztermFromAbsTerm(tom_absterml),ztermFromAbsTerm(tom_abstermr));
       } } } } if ( ( tom_is_fun_sym_isfsym(tomMatch5Position1) ||  false  ) ) { if ( true ) {

        // this should not occur
        return tom_make_zisfsym(tom_make_zvar("Error in zexprFromExpr"),tom_make_zsymbol("isfsym"));
       } } if ( ( tom_is_fun_sym_eq(tomMatch5Position1) ||  false  ) ) { if ( true ) {

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("eq"));
       } } if ( ( tom_is_fun_sym_appSubsE(tomMatch5Position1) ||  false  ) ) { if ( true ) {

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("appSubsE"));
       } } if ( ( tom_is_fun_sym_iland(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_lt=tom_get_slot_iland_Left(tomMatch5Position1); { tom.engine.adt.il.types.Expr  tom_rt=tom_get_slot_iland_Right(tomMatch5Position1); if ( true ) {

        return tom_make_zand(zexprFromExpr(tom_lt),zexprFromExpr(tom_rt));
       } } } } if ( ( tom_is_fun_sym_ilor(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_lt=tom_get_slot_ilor_Left(tomMatch5Position1); { tom.engine.adt.il.types.Expr  tom_rt=tom_get_slot_ilor_Right(tomMatch5Position1); if ( true ) {

        return tom_make_zor(zexprFromExpr(tom_lt),zexprFromExpr(tom_rt));
       } } } } if ( ( tom_is_fun_sym_ilnot(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_nex=tom_get_slot_ilnot_Exp(tomMatch5Position1); if ( true ) {

        return tom_make_znot(zexprFromExpr(tom_nex));
       } } } } }

    return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("end " + expr.toString()));
  }

  ZSymbol zsymbolFromSymbol(Symbol symb) {
     if(symb instanceof  tom.engine.adt.il.types.Symbol ) { { tom.engine.adt.il.types.Symbol  tomMatch6Position1=(( tom.engine.adt.il.types.Symbol )symb); if ( ( tom_is_fun_sym_fsymbol(tomMatch6Position1) ||  false  ) ) { { String  tom_name=tom_get_slot_fsymbol_Name(tomMatch6Position1); if ( true ) {

        return tom_make_zsymbol(tom_name);
       } } } } }

    return tom_make_zsymbol("random");
  }

  ZExpr zexprFromSeq(Seq seq) {
     if(seq instanceof  tom.engine.adt.il.types.Seq ) { { tom.engine.adt.il.types.Seq  tomMatch7Position1=(( tom.engine.adt.il.types.Seq )seq); if ( ( tom_is_fun_sym_seq(tomMatch7Position1) ||  false  ) ) { if ( true ) {

        return tom_make_ztrue();
       } } if ( ( tom_is_fun_sym_dedterm(tomMatch7Position1) ||  false  ) ) { { tom.engine.adt.il.types.TermList  tom_termlist=tom_get_slot_dedterm_Terms(tomMatch7Position1); if ( true ) { if(tom_termlist instanceof  tom.engine.adt.il.types.TermList ) { { tom.engine.adt.il.types.TermList  tomMatch8Position1=(( tom.engine.adt.il.types.TermList )tom_termlist); if ( ( tom_is_fun_sym_concTerm(tomMatch8Position1) ||  false  ) ) { {int tomMatch8Position1Index1=0; { tom.engine.adt.il.types.TermList  tomMatch8Position1List1=tomMatch8Position1; { tom.engine.adt.il.types.TermList  tomMatch8Position1Begin1=tomMatch8Position1List1; { tom.engine.adt.il.types.TermList  tomMatch8Position1End1=tomMatch8Position1List1; { while (!(tom_is_empty_concTerm_TermList(tomMatch8Position1End1))) {tomMatch8Position1List1=tomMatch8Position1End1; { { tom.engine.adt.il.types.TermList  tomMatch8Position1Save2=tomMatch8Position1List1; { { tom.engine.adt.il.types.Term  tom_tl=tom_get_head_concTerm_TermList(tomMatch8Position1List1);tomMatch8Position1Index1=tomMatch8Position1Index1 + 1;tomMatch8Position1List1=tom_get_tail_concTerm_TermList(tomMatch8Position1List1); { tom.engine.adt.il.types.TermList  tomMatch8Position1Save3=tomMatch8Position1List1; { if (!(tom_is_empty_concTerm_TermList(tomMatch8Position1List1))) { { tom.engine.adt.il.types.Term  tom_tr=tom_get_head_concTerm_TermList(tomMatch8Position1List1);tomMatch8Position1Index1=tomMatch8Position1Index1 + 1;tomMatch8Position1List1=tom_get_tail_concTerm_TermList(tomMatch8Position1List1); if (tom_is_empty_concTerm_TermList(tomMatch8Position1List1)) { if ( true ) {



            return tom_make_zeq(ztermFromTerm(tom_tl),ztermFromTerm(tom_tr));
           } } } }tomMatch8Position1List1=tomMatch8Position1Save3; } } }tomMatch8Position1List1=tomMatch8Position1Save2; } }tomMatch8Position1End1=tom_get_tail_concTerm_TermList(tomMatch8Position1End1); } }tomMatch8Position1List1=tomMatch8Position1Begin1; } } } } } } } }

       } } } if ( ( tom_is_fun_sym_dedexpr(tomMatch7Position1) ||  false  ) ) { { tom.engine.adt.il.types.ExprList  tom_exprlist=tom_get_slot_dedexpr_Exprs(tomMatch7Position1); if ( true ) { if(tom_exprlist instanceof  tom.engine.adt.il.types.ExprList ) { { tom.engine.adt.il.types.ExprList  tomMatch9Position1=(( tom.engine.adt.il.types.ExprList )tom_exprlist); if ( ( tom_is_fun_sym_concExpr(tomMatch9Position1) ||  false  ) ) { {int tomMatch9Position1Index1=0; { tom.engine.adt.il.types.ExprList  tomMatch9Position1List1=tomMatch9Position1; { tom.engine.adt.il.types.ExprList  tomMatch9Position1Begin1=tomMatch9Position1List1; { tom.engine.adt.il.types.ExprList  tomMatch9Position1End1=tomMatch9Position1List1; { while (!(tom_is_empty_concExpr_ExprList(tomMatch9Position1End1))) {tomMatch9Position1List1=tomMatch9Position1End1; { { tom.engine.adt.il.types.ExprList  tomMatch9Position1Save2=tomMatch9Position1List1; { { tom.engine.adt.il.types.Expr  tom_t=tom_get_head_concExpr_ExprList(tomMatch9Position1List1);tomMatch9Position1Index1=tomMatch9Position1Index1 + 1;tomMatch9Position1List1=tom_get_tail_concExpr_ExprList(tomMatch9Position1List1); { tom.engine.adt.il.types.ExprList  tomMatch9Position1Save3=tomMatch9Position1List1; { if (!(tom_is_empty_concExpr_ExprList(tomMatch9Position1List1))) { { tom.engine.adt.il.types.Expr  tomMatch9Position1Position3=tom_get_head_concExpr_ExprList(tomMatch9Position1List1);tomMatch9Position1Index1=tomMatch9Position1Index1 + 1;tomMatch9Position1List1=tom_get_tail_concExpr_ExprList(tomMatch9Position1List1); if ( ( tom_is_fun_sym_iltrue(tomMatch9Position1Position3) ||  false  ) ) { if (tom_is_empty_concExpr_ExprList(tomMatch9Position1List1)) { if ( true ) {



            return zexprFromExpr(tom_t);
           } } } } }tomMatch9Position1List1=tomMatch9Position1Save3; } } }tomMatch9Position1List1=tomMatch9Position1Save2; } }tomMatch9Position1End1=tom_get_tail_concExpr_ExprList(tomMatch9Position1End1); } }tomMatch9Position1List1=tomMatch9Position1Begin1; } } } } } } } }

       } } } if ( ( tom_is_fun_sym_dedexpr(tomMatch7Position1) ||  false  ) ) { { tom.engine.adt.il.types.ExprList  tom_exprlist=tom_get_slot_dedexpr_Exprs(tomMatch7Position1); if ( true ) { if(tom_exprlist instanceof  tom.engine.adt.il.types.ExprList ) { { tom.engine.adt.il.types.ExprList  tomMatch10Position1=(( tom.engine.adt.il.types.ExprList )tom_exprlist); if ( ( tom_is_fun_sym_concExpr(tomMatch10Position1) ||  false  ) ) { {int tomMatch10Position1Index1=0; { tom.engine.adt.il.types.ExprList  tomMatch10Position1List1=tomMatch10Position1; { tom.engine.adt.il.types.ExprList  tomMatch10Position1Begin1=tomMatch10Position1List1; { tom.engine.adt.il.types.ExprList  tomMatch10Position1End1=tomMatch10Position1List1; { while (!(tom_is_empty_concExpr_ExprList(tomMatch10Position1End1))) {tomMatch10Position1List1=tomMatch10Position1End1; { { tom.engine.adt.il.types.ExprList  tomMatch10Position1Save2=tomMatch10Position1List1; { { tom.engine.adt.il.types.Expr  tom_t=tom_get_head_concExpr_ExprList(tomMatch10Position1List1);tomMatch10Position1Index1=tomMatch10Position1Index1 + 1;tomMatch10Position1List1=tom_get_tail_concExpr_ExprList(tomMatch10Position1List1); { tom.engine.adt.il.types.ExprList  tomMatch10Position1Save3=tomMatch10Position1List1; { if (!(tom_is_empty_concExpr_ExprList(tomMatch10Position1List1))) { { tom.engine.adt.il.types.Expr  tomMatch10Position1Position3=tom_get_head_concExpr_ExprList(tomMatch10Position1List1);tomMatch10Position1Index1=tomMatch10Position1Index1 + 1;tomMatch10Position1List1=tom_get_tail_concExpr_ExprList(tomMatch10Position1List1); if ( ( tom_is_fun_sym_ilfalse(tomMatch10Position1Position3) ||  false  ) ) { if (tom_is_empty_concExpr_ExprList(tomMatch10Position1List1)) { if ( true ) {



            return tom_make_znot(zexprFromExpr(tom_t));
           } } } } }tomMatch10Position1List1=tomMatch10Position1Save3; } } }tomMatch10Position1List1=tomMatch10Position1Save2; } }tomMatch10Position1End1=tom_get_tail_concExpr_ExprList(tomMatch10Position1End1); } }tomMatch10Position1List1=tomMatch10Position1Begin1; } } } } } } } }

       } } } } }

    return tom_make_ztrue();
  }

  ZTerm ztermFromAbsTerm(AbsTerm absterm) {
     if(absterm instanceof  tom.engine.adt.il.types.AbsTerm ) { { tom.engine.adt.il.types.AbsTerm  tomMatch11Position1=(( tom.engine.adt.il.types.AbsTerm )absterm); if ( ( tom_is_fun_sym_absvar(tomMatch11Position1) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tomMatch11Position1NameNumberVarname=tom_get_slot_absvar_Varname(tomMatch11Position1); if ( ( tom_is_fun_sym_var(tomMatch11Position1NameNumberVarname) ||  false  ) ) { { String  tom_name=tom_get_slot_var_Name(tomMatch11Position1NameNumberVarname); if ( true ) {

        return tom_make_zvar(tom_name);
       } } } } } if ( ( tom_is_fun_sym_st(tomMatch11Position1) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_t=tom_get_slot_st_Abst(tomMatch11Position1); { int  tom_index=tom_get_slot_st_Index(tomMatch11Position1); if ( true ) {

        return tom_make_zst(ztermFromAbsTerm(tom_t),tom_index);
       } } } } if ( ( tom_is_fun_sym_sl(tomMatch11Position1) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_t=tom_get_slot_sl_Abst(tomMatch11Position1); { String  tom_name=tom_get_slot_sl_Name(tomMatch11Position1); if ( true ) {

        return tom_make_zsl(ztermFromAbsTerm(tom_t),tom_name);
       } } } } } }

    return tom_make_zvar("Error in ztermFromAbsTerm");
  }

  Seq cleanSeq(Seq seq) {
     if(seq instanceof  tom.engine.adt.il.types.Seq ) { { tom.engine.adt.il.types.Seq  tomMatch12Position1=(( tom.engine.adt.il.types.Seq )seq); if ( ( tom_is_fun_sym_seq(tomMatch12Position1) ||  false  ) ) { if ( true ) {
 return seq;  } } if ( ( tom_is_fun_sym_dedterm(tomMatch12Position1) ||  false  ) ) { { tom.engine.adt.il.types.TermList  tomMatch12Position1NameNumberTerms=tom_get_slot_dedterm_Terms(tomMatch12Position1); if ( ( tom_is_fun_sym_concTerm(tomMatch12Position1NameNumberTerms) ||  false  ) ) { {int tomMatch12Position1NameNumberTermsIndex1=0; { tom.engine.adt.il.types.TermList  tomMatch12Position1NameNumberTermsList1=tomMatch12Position1NameNumberTerms; { tom.engine.adt.il.types.TermList  tomMatch12Position1NameNumberTermsBegin1=tomMatch12Position1NameNumberTermsList1; { tom.engine.adt.il.types.TermList  tomMatch12Position1NameNumberTermsEnd1=tomMatch12Position1NameNumberTermsList1; { while (!(tom_is_empty_concTerm_TermList(tomMatch12Position1NameNumberTermsEnd1))) {tomMatch12Position1NameNumberTermsList1=tomMatch12Position1NameNumberTermsEnd1; { { tom.engine.adt.il.types.TermList  tomMatch12Position1NameNumberTermsSave2=tomMatch12Position1NameNumberTermsList1; { { tom.engine.adt.il.types.Term  tom_t=tom_get_head_concTerm_TermList(tomMatch12Position1NameNumberTermsList1);tomMatch12Position1NameNumberTermsIndex1=tomMatch12Position1NameNumberTermsIndex1 + 1;tomMatch12Position1NameNumberTermsList1=tom_get_tail_concTerm_TermList(tomMatch12Position1NameNumberTermsList1); { tom.engine.adt.il.types.TermList  tomMatch12Position1NameNumberTermsSave3=tomMatch12Position1NameNumberTermsList1; { if (!(tom_is_empty_concTerm_TermList(tomMatch12Position1NameNumberTermsList1))) { { tom.engine.adt.il.types.Term  tom_v=tom_get_head_concTerm_TermList(tomMatch12Position1NameNumberTermsList1);tomMatch12Position1NameNumberTermsIndex1=tomMatch12Position1NameNumberTermsIndex1 + 1;tomMatch12Position1NameNumberTermsList1=tom_get_tail_concTerm_TermList(tomMatch12Position1NameNumberTermsList1); if (tom_is_empty_concTerm_TermList(tomMatch12Position1NameNumberTermsList1)) { if ( true ) {

          return tom_make_dedterm(tom_cons_list_concTerm(tom_t,tom_cons_list_concTerm(tom_v,tom_empty_list_concTerm())));
       } } } }tomMatch12Position1NameNumberTermsList1=tomMatch12Position1NameNumberTermsSave3; } } }tomMatch12Position1NameNumberTermsList1=tomMatch12Position1NameNumberTermsSave2; } }tomMatch12Position1NameNumberTermsEnd1=tom_get_tail_concTerm_TermList(tomMatch12Position1NameNumberTermsEnd1); } }tomMatch12Position1NameNumberTermsList1=tomMatch12Position1NameNumberTermsBegin1; } } } } } } } } if ( ( tom_is_fun_sym_dedexpr(tomMatch12Position1) ||  false  ) ) { { tom.engine.adt.il.types.ExprList  tomMatch12Position1NameNumberExprs=tom_get_slot_dedexpr_Exprs(tomMatch12Position1); if ( ( tom_is_fun_sym_concExpr(tomMatch12Position1NameNumberExprs) ||  false  ) ) { {int tomMatch12Position1NameNumberExprsIndex1=0; { tom.engine.adt.il.types.ExprList  tomMatch12Position1NameNumberExprsList1=tomMatch12Position1NameNumberExprs; { tom.engine.adt.il.types.ExprList  tomMatch12Position1NameNumberExprsBegin1=tomMatch12Position1NameNumberExprsList1; { tom.engine.adt.il.types.ExprList  tomMatch12Position1NameNumberExprsEnd1=tomMatch12Position1NameNumberExprsList1; { while (!(tom_is_empty_concExpr_ExprList(tomMatch12Position1NameNumberExprsEnd1))) {tomMatch12Position1NameNumberExprsList1=tomMatch12Position1NameNumberExprsEnd1; { { tom.engine.adt.il.types.ExprList  tomMatch12Position1NameNumberExprsSave2=tomMatch12Position1NameNumberExprsList1; { { tom.engine.adt.il.types.Expr  tom_t=tom_get_head_concExpr_ExprList(tomMatch12Position1NameNumberExprsList1);tomMatch12Position1NameNumberExprsIndex1=tomMatch12Position1NameNumberExprsIndex1 + 1;tomMatch12Position1NameNumberExprsList1=tom_get_tail_concExpr_ExprList(tomMatch12Position1NameNumberExprsList1); { tom.engine.adt.il.types.ExprList  tomMatch12Position1NameNumberExprsSave3=tomMatch12Position1NameNumberExprsList1; { if (!(tom_is_empty_concExpr_ExprList(tomMatch12Position1NameNumberExprsList1))) { { tom.engine.adt.il.types.Expr  tom_v=tom_get_head_concExpr_ExprList(tomMatch12Position1NameNumberExprsList1);tomMatch12Position1NameNumberExprsIndex1=tomMatch12Position1NameNumberExprsIndex1 + 1;tomMatch12Position1NameNumberExprsList1=tom_get_tail_concExpr_ExprList(tomMatch12Position1NameNumberExprsList1); if (tom_is_empty_concExpr_ExprList(tomMatch12Position1NameNumberExprsList1)) { if ( true ) {

        return tom_make_dedexpr(tom_cons_list_concExpr(tom_t,tom_cons_list_concExpr(tom_v,tom_empty_list_concExpr())));
       } } } }tomMatch12Position1NameNumberExprsList1=tomMatch12Position1NameNumberExprsSave3; } } }tomMatch12Position1NameNumberExprsList1=tomMatch12Position1NameNumberExprsSave2; } }tomMatch12Position1NameNumberExprsEnd1=tom_get_tail_concExpr_ExprList(tomMatch12Position1NameNumberExprsEnd1); } }tomMatch12Position1NameNumberExprsList1=tomMatch12Position1NameNumberExprsBegin1; } } } } } } } } } }

    return seq;
  }

  private Map ztermVariableMapFromSubstitutionList(SubstitutionList sublist, Map map) {
     if(sublist instanceof  tom.engine.adt.il.types.SubstitutionList ) { { tom.engine.adt.il.types.SubstitutionList  tomMatch13Position1=(( tom.engine.adt.il.types.SubstitutionList )sublist); if ( ( tom_is_fun_sym_subs(tomMatch13Position1) ||  false  ) ) { {int tomMatch13Position1Index1=0; { tom.engine.adt.il.types.SubstitutionList  tomMatch13Position1List1=tomMatch13Position1; if (tom_is_empty_subs_SubstitutionList(tomMatch13Position1List1)) { if ( true ) {
 return map;  } } } } } if ( ( tom_is_fun_sym_subs(tomMatch13Position1) ||  false  ) ) { {int tomMatch13Position1Index1=0; { tom.engine.adt.il.types.SubstitutionList  tomMatch13Position1List1=tomMatch13Position1; { tom.engine.adt.il.types.SubstitutionList  tomMatch13Position1Save1=tomMatch13Position1List1; { if (!(tom_is_empty_subs_SubstitutionList(tomMatch13Position1List1))) { { tom.engine.adt.il.types.Substitution  tomMatch13Position1Position1=tom_get_head_subs_SubstitutionList(tomMatch13Position1List1);tomMatch13Position1Index1=tomMatch13Position1Index1 + 1;tomMatch13Position1List1=tom_get_tail_subs_SubstitutionList(tomMatch13Position1List1); if ( ( tom_is_fun_sym_undefsubs(tomMatch13Position1Position1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_t=tomMatch13Position1List1; if ( true ) {
 return ztermVariableMapFromSubstitutionList(tom_t,map); } } } } }tomMatch13Position1List1=tomMatch13Position1Save1; } } } } } if ( ( tom_is_fun_sym_subs(tomMatch13Position1) ||  false  ) ) { {int tomMatch13Position1Index1=0; { tom.engine.adt.il.types.SubstitutionList  tomMatch13Position1List1=tomMatch13Position1; { tom.engine.adt.il.types.SubstitutionList  tomMatch13Position1Save1=tomMatch13Position1List1; { if (!(tom_is_empty_subs_SubstitutionList(tomMatch13Position1List1))) { { tom.engine.adt.il.types.Substitution  tomMatch13Position1Position1=tom_get_head_subs_SubstitutionList(tomMatch13Position1List1);tomMatch13Position1Index1=tomMatch13Position1Index1 + 1;tomMatch13Position1List1=tom_get_tail_subs_SubstitutionList(tomMatch13Position1List1); if ( ( tom_is_fun_sym_is(tomMatch13Position1Position1) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tomMatch13Position1Position1NameNumberVar=tom_get_slot_is_Var(tomMatch13Position1Position1); if ( ( tom_is_fun_sym_var(tomMatch13Position1Position1NameNumberVar) ||  false  ) ) { { String  tom_name=tom_get_slot_var_Name(tomMatch13Position1Position1NameNumberVar); { tom.engine.adt.il.types.Term  tom_term=tom_get_slot_is_Term(tomMatch13Position1Position1); { tom.engine.adt.il.types.SubstitutionList  tom_t=tomMatch13Position1List1; if ( true ) {

        map.put(tom_name,ztermFromTerm(tom_term));
        return ztermVariableMapFromSubstitutionList(tom_t,map);
       } } } } } } } } }tomMatch13Position1List1=tomMatch13Position1Save1; } } } } } } }

    throw new TomRuntimeException("verifier: strange substitution list: "+sublist);
  }

  public void collectConstraints(DerivTree tree, Map conditions) {
     if(tree instanceof  tom.engine.adt.il.types.DerivTree ) { { tom.engine.adt.il.types.DerivTree  tomMatch14Position1=(( tom.engine.adt.il.types.DerivTree )tree); if ( ( tom_is_fun_sym_derivrule(tomMatch14Position1) ||  false  ) ) { { tom.engine.adt.il.types.DerivTree  tom_pre=tom_get_slot_derivrule_Pre(tomMatch14Position1); { tom.engine.adt.il.types.Seq  tom_condition=tom_get_slot_derivrule_Cond(tomMatch14Position1); if ( true ) {

        String condname = Integer.toString(conditions.size()+1);
        conditions.put(condname,tom_condition);
        collectConstraints(tom_pre,conditions);
       } } } } if ( ( tom_is_fun_sym_derivrule2(tomMatch14Position1) ||  false  ) ) { { tom.engine.adt.il.types.DerivTree  tom_pre=tom_get_slot_derivrule2_Pre(tomMatch14Position1); { tom.engine.adt.il.types.DerivTree  tom_pre2=tom_get_slot_derivrule2_Pre2(tomMatch14Position1); { tom.engine.adt.il.types.Seq  tom_condition=tom_get_slot_derivrule2_Cond(tomMatch14Position1); if ( true ) {

        String condname = Integer.toString(conditions.size()+1);
        conditions.put(condname,tom_condition);
        collectConstraints(tom_pre,conditions);
        collectConstraints(tom_pre2,conditions);
       } } } } } } }

  }

}
