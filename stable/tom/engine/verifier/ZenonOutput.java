/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.il.*;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;
import tom.engine.exception.TomRuntimeException;


public class ZenonOutput {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_DerivTree(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_derivrule2( tom.engine.adt.il.types.DerivTree t) {  return  (t!= null) && t.isDerivrule2() ;}private static  String  tom_get_slot_derivrule2_name( tom.engine.adt.il.types.DerivTree t) {  return  t.getName() ;}private static  tom.engine.adt.il.types.Deriv tom_get_slot_derivrule2_post( tom.engine.adt.il.types.DerivTree t) {  return  t.getPost() ;}private static  tom.engine.adt.il.types.DerivTree tom_get_slot_derivrule2_pre( tom.engine.adt.il.types.DerivTree t) {  return  t.getPre() ;}private static  tom.engine.adt.il.types.DerivTree tom_get_slot_derivrule2_pre2( tom.engine.adt.il.types.DerivTree t) {  return  t.getPre2() ;}private static  tom.engine.adt.il.types.Seq tom_get_slot_derivrule2_cond( tom.engine.adt.il.types.DerivTree t) {  return  t.getCond() ;}private static boolean tom_is_fun_sym_derivrule( tom.engine.adt.il.types.DerivTree t) {  return  (t!= null) && t.isDerivrule() ;}private static  String  tom_get_slot_derivrule_name( tom.engine.adt.il.types.DerivTree t) {  return  t.getName() ;}private static  tom.engine.adt.il.types.Deriv tom_get_slot_derivrule_post( tom.engine.adt.il.types.DerivTree t) {  return  t.getPost() ;}private static  tom.engine.adt.il.types.DerivTree tom_get_slot_derivrule_pre( tom.engine.adt.il.types.DerivTree t) {  return  t.getPre() ;}private static  tom.engine.adt.il.types.Seq tom_get_slot_derivrule_cond( tom.engine.adt.il.types.DerivTree t) {  return  t.getCond() ;}private static boolean tom_terms_equal_Deriv(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_ebs( tom.engine.adt.il.types.Deriv t) {  return  (t!= null) && t.isEbs() ;}private static  tom.engine.adt.il.types.Environment tom_get_slot_ebs_lhs( tom.engine.adt.il.types.Deriv t) {  return  t.getLhs() ;}private static  tom.engine.adt.il.types.Environment tom_get_slot_ebs_rhs( tom.engine.adt.il.types.Deriv t) {  return  t.getRhs() ;}private static boolean tom_terms_equal_ExprList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concExpr( tom.engine.adt.il.types.ExprList t) {  return (t!= null) && t.isSortExprList() ;}private static  tom.engine.adt.il.types.ExprList tom_empty_list_concExpr() { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExprList(); }private static  tom.engine.adt.il.types.ExprList tom_cons_list_concExpr( tom.engine.adt.il.types.Expr e,  tom.engine.adt.il.types.ExprList l) { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExprList(e,l); }private static  tom.engine.adt.il.types.Expr tom_get_head_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) {  return l.getHead() ;}private static  tom.engine.adt.il.types.ExprList tom_get_tail_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) {  return l.getTail() ;}private static boolean tom_is_empty_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) {  return l.isEmpty() ;}private static  tom.engine.adt.il.types.ExprList tom_append_list_concExpr( tom.engine.adt.il.types.ExprList l1,  tom.engine.adt.il.types.ExprList l2) {    if(tom_is_empty_concExpr_ExprList(l1)) {     return l2;    } else if(tom_is_empty_concExpr_ExprList(l2)) {     return l1;    } else if(tom_is_empty_concExpr_ExprList(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(l1))) {     return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(l1),l2);    } else {      return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(l1),tom_append_list_concExpr(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(l1),l2));    }   }  private static  tom.engine.adt.il.types.ExprList tom_get_slice_concExpr( tom.engine.adt.il.types.ExprList begin,  tom.engine.adt.il.types.ExprList end) {    if(tom_terms_equal_ExprList(begin,end)) {      return ( tom.engine.adt.il.types.ExprList)tom_empty_list_concExpr();    } else {      return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(begin),( tom.engine.adt.il.types.ExprList)tom_get_slice_concExpr(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(begin),end));    }   }  private static boolean tom_terms_equal_Seq(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_dedexpr( tom.engine.adt.il.types.Seq t) {  return  (t!= null) && t.isDedexpr() ;}private static  tom.engine.adt.il.types.Seq tom_make_dedexpr( tom.engine.adt.il.types.ExprList t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSeq_Dedexpr(t0); }private static  tom.engine.adt.il.types.ExprList tom_get_slot_dedexpr_exprs( tom.engine.adt.il.types.Seq t) {  return  t.getExprs() ;}private static boolean tom_is_fun_sym_dedterm( tom.engine.adt.il.types.Seq t) {  return  (t!= null) && t.isDedterm() ;}private static  tom.engine.adt.il.types.Seq tom_make_dedterm( tom.engine.adt.il.types.TermList t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSeq_Dedterm(t0); }private static  tom.engine.adt.il.types.TermList tom_get_slot_dedterm_terms( tom.engine.adt.il.types.Seq t) {  return  t.getTerms() ;}private static boolean tom_is_fun_sym_seq( tom.engine.adt.il.types.Seq t) {  return  (t!= null) && t.isSeq() ;}private static boolean tom_terms_equal_TermList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTerm( tom.engine.adt.il.types.TermList t) {  return (t!= null) && t.isSortTermList() ;}private static  tom.engine.adt.il.types.TermList tom_empty_list_concTerm() { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTermList(); }private static  tom.engine.adt.il.types.TermList tom_cons_list_concTerm( tom.engine.adt.il.types.Term e,  tom.engine.adt.il.types.TermList l) { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTermList(e,l); }private static  tom.engine.adt.il.types.Term tom_get_head_concTerm_TermList( tom.engine.adt.il.types.TermList l) {  return l.getHead() ;}private static  tom.engine.adt.il.types.TermList tom_get_tail_concTerm_TermList( tom.engine.adt.il.types.TermList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTerm_TermList( tom.engine.adt.il.types.TermList l) {  return l.isEmpty() ;}private static  tom.engine.adt.il.types.TermList tom_append_list_concTerm( tom.engine.adt.il.types.TermList l1,  tom.engine.adt.il.types.TermList l2) {    if(tom_is_empty_concTerm_TermList(l1)) {     return l2;    } else if(tom_is_empty_concTerm_TermList(l2)) {     return l1;    } else if(tom_is_empty_concTerm_TermList(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(l1))) {     return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(l1),l2);    } else {      return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(l1),tom_append_list_concTerm(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(l1),l2));    }   }  private static  tom.engine.adt.il.types.TermList tom_get_slice_concTerm( tom.engine.adt.il.types.TermList begin,  tom.engine.adt.il.types.TermList end) {    if(tom_terms_equal_TermList(begin,end)) {      return ( tom.engine.adt.il.types.TermList)tom_empty_list_concTerm();    } else {      return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(begin),( tom.engine.adt.il.types.TermList)tom_get_slice_concTerm(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(begin),end));    }   }  private static boolean tom_terms_equal_Expr(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_appSubsE( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isAppSubsE() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_appSubsE_subs( tom.engine.adt.il.types.Expr t) {  return  t.getSubs() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_appSubsE_e( tom.engine.adt.il.types.Expr t) {  return  t.getE() ;}private static boolean tom_is_fun_sym_ilnot( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIlnot() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_ilnot_exp( tom.engine.adt.il.types.Expr t) {  return  t.getExp() ;}private static boolean tom_is_fun_sym_ilor( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIlor() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_ilor_left( tom.engine.adt.il.types.Expr t) {  return  t.getLeft() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_ilor_right( tom.engine.adt.il.types.Expr t) {  return  t.getRight() ;}private static boolean tom_is_fun_sym_iland( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIland() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_iland_left( tom.engine.adt.il.types.Expr t) {  return  t.getLeft() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_iland_right( tom.engine.adt.il.types.Expr t) {  return  t.getRight() ;}private static boolean tom_is_fun_sym_teq( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isTeq() ;}private static  tom.engine.adt.il.types.AbsTerm tom_get_slot_teq_labst( tom.engine.adt.il.types.Expr t) {  return  t.getLabst() ;}private static  tom.engine.adt.il.types.AbsTerm tom_get_slot_teq_rabst( tom.engine.adt.il.types.Expr t) {  return  t.getRabst() ;}private static boolean tom_is_fun_sym_tisfsym( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isTisfsym() ;}private static  tom.engine.adt.il.types.AbsTerm tom_get_slot_tisfsym_abst( tom.engine.adt.il.types.Expr t) {  return  t.getAbst() ;}private static  tom.engine.adt.il.types.Symbol tom_get_slot_tisfsym_symbol( tom.engine.adt.il.types.Expr t) {  return  t.getSymbol() ;}private static boolean tom_is_fun_sym_eq( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isEq() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_eq_lt( tom.engine.adt.il.types.Expr t) {  return  t.getLt() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_eq_rt( tom.engine.adt.il.types.Expr t) {  return  t.getRt() ;}private static boolean tom_is_fun_sym_isfsym( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIsfsym() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_isfsym_t( tom.engine.adt.il.types.Expr t) {  return  t.getT() ;}private static  tom.engine.adt.il.types.Symbol tom_get_slot_isfsym_symbol( tom.engine.adt.il.types.Expr t) {  return  t.getSymbol() ;}private static boolean tom_is_fun_sym_false( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isFalse() ;}private static boolean tom_is_fun_sym_true( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isTrue() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_true_subst( tom.engine.adt.il.types.Expr t) {  return  t.getSubst() ;}private static boolean tom_terms_equal_Term(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_appSubsT( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isAppSubsT() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_appSubsT_subs( tom.engine.adt.il.types.Term t) {  return  t.getSubs() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_appSubsT_t( tom.engine.adt.il.types.Term t) {  return  t.getT() ;}private static boolean tom_is_fun_sym_slot( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isSlot() ;}private static  tom.engine.adt.il.types.Symbol tom_get_slot_slot_symbol( tom.engine.adt.il.types.Term t) {  return  t.getSymbol() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_slot_t( tom.engine.adt.il.types.Term t) {  return  t.getT() ;}private static  String  tom_get_slot_slot_name( tom.engine.adt.il.types.Term t) {  return  t.getName() ;}private static boolean tom_is_fun_sym_subterm( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isSubterm() ;}private static  tom.engine.adt.il.types.Symbol tom_get_slot_subterm_symbol( tom.engine.adt.il.types.Term t) {  return  t.getSymbol() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_subterm_t( tom.engine.adt.il.types.Term t) {  return  t.getT() ;}private static  int  tom_get_slot_subterm_index( tom.engine.adt.il.types.Term t) {  return  t.getIndex() ;}private static boolean tom_is_fun_sym_repr( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isRepr() ;}private static  String  tom_get_slot_repr_term( tom.engine.adt.il.types.Term t) {  return  t.getTerm() ;}private static boolean tom_is_fun_sym_tau( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isTau() ;}private static  tom.engine.adt.il.types.AbsTerm tom_get_slot_tau_abst( tom.engine.adt.il.types.Term t) {  return  t.getAbst() ;}private static boolean tom_terms_equal_Environment(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_env( tom.engine.adt.il.types.Environment t) {  return  (t!= null) && t.isEnv() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_env_subs( tom.engine.adt.il.types.Environment t) {  return  t.getSubs() ;}private static  tom.engine.adt.il.types.Instr tom_get_slot_env_i( tom.engine.adt.il.types.Environment t) {  return  t.getI() ;}private static boolean tom_terms_equal_SubstitutionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_subs( tom.engine.adt.il.types.SubstitutionList t) {  return (t!= null) && t.isSortSubstitutionList() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_empty_list_subs() { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSubstitutionList(); }private static  tom.engine.adt.il.types.SubstitutionList tom_cons_list_subs( tom.engine.adt.il.types.Substitution e,  tom.engine.adt.il.types.SubstitutionList l) { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSubstitutionList(e,l); }private static  tom.engine.adt.il.types.Substitution tom_get_head_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) {  return l.getHead() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_get_tail_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) {  return l.getTail() ;}private static boolean tom_is_empty_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_append_list_subs( tom.engine.adt.il.types.SubstitutionList l1,  tom.engine.adt.il.types.SubstitutionList l2) {    if(tom_is_empty_subs_SubstitutionList(l1)) {     return l2;    } else if(tom_is_empty_subs_SubstitutionList(l2)) {     return l1;    } else if(tom_is_empty_subs_SubstitutionList(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(l1))) {     return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(l1),l2);    } else {      return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(l1),tom_append_list_subs(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(l1),l2));    }   }  private static  tom.engine.adt.il.types.SubstitutionList tom_get_slice_subs( tom.engine.adt.il.types.SubstitutionList begin,  tom.engine.adt.il.types.SubstitutionList end) {    if(tom_terms_equal_SubstitutionList(begin,end)) {      return ( tom.engine.adt.il.types.SubstitutionList)tom_empty_list_subs();    } else {      return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(begin),( tom.engine.adt.il.types.SubstitutionList)tom_get_slice_subs(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(begin),end));    }   }  private static boolean tom_terms_equal_Substitution(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_is( tom.engine.adt.il.types.Substitution t) {  return  (t!= null) && t.isIs() ;}private static  tom.engine.adt.il.types.Variable tom_get_slot_is_var( tom.engine.adt.il.types.Substitution t) {  return  t.getVar() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_is_term( tom.engine.adt.il.types.Substitution t) {  return  t.getTerm() ;}private static boolean tom_is_fun_sym_undefsubs( tom.engine.adt.il.types.Substitution t) {  return  (t!= null) && t.isUndefsubs() ;}private static boolean tom_terms_equal_InstrList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Instr(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_accept( tom.engine.adt.il.types.Instr t) {  return  (t!= null) && t.isAccept() ;}private static  aterm.ATerm  tom_get_slot_accept_positive( tom.engine.adt.il.types.Instr t) {  return  t.getPositive() ;}private static  aterm.ATerm  tom_get_slot_accept_negative( tom.engine.adt.il.types.Instr t) {  return  t.getNegative() ;}private static boolean tom_terms_equal_AbsTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_sl( tom.engine.adt.il.types.AbsTerm t) {  return  (t!= null) && t.isSl() ;}private static  tom.engine.adt.il.types.Symbol tom_get_slot_sl_symbol( tom.engine.adt.il.types.AbsTerm t) {  return  t.getSymbol() ;}private static  tom.engine.adt.il.types.AbsTerm tom_get_slot_sl_abst( tom.engine.adt.il.types.AbsTerm t) {  return  t.getAbst() ;}private static  String  tom_get_slot_sl_name( tom.engine.adt.il.types.AbsTerm t) {  return  t.getName() ;}private static boolean tom_is_fun_sym_st( tom.engine.adt.il.types.AbsTerm t) {  return  (t!= null) && t.isSt() ;}private static  tom.engine.adt.il.types.Symbol tom_get_slot_st_symbol( tom.engine.adt.il.types.AbsTerm t) {  return  t.getSymbol() ;}private static  tom.engine.adt.il.types.AbsTerm tom_get_slot_st_abst( tom.engine.adt.il.types.AbsTerm t) {  return  t.getAbst() ;}private static  int  tom_get_slot_st_index( tom.engine.adt.il.types.AbsTerm t) {  return  t.getIndex() ;}private static boolean tom_is_fun_sym_absvar( tom.engine.adt.il.types.AbsTerm t) {  return  (t!= null) && t.isAbsvar() ;}private static  tom.engine.adt.il.types.Variable tom_get_slot_absvar_varname( tom.engine.adt.il.types.AbsTerm t) {  return  t.getVarname() ;}private static boolean tom_terms_equal_Variable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_var( tom.engine.adt.il.types.Variable t) {  return  (t!= null) && t.isVar() ;}private static  tom.engine.adt.il.types.Variable tom_make_var( String  t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeVariable_Var(t0); }private static  String  tom_get_slot_var_name( tom.engine.adt.il.types.Variable t) {  return  t.getName() ;}private static boolean tom_terms_equal_Symbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_fsymbol( tom.engine.adt.il.types.Symbol t) {  return  (t!= null) && t.isFsymbol() ;}private static  String  tom_get_slot_fsymbol_name( tom.engine.adt.il.types.Symbol t) {  return  t.getName() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_ZSpec(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZSpec tom_make_zthm( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZAxiomList t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZSpec_Zthm(t0, t1); }private static boolean tom_terms_equal_ZAxiomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList t) {  return (t!= null) && t.isSortZAxiomList() ;}private static  tom.engine.adt.zenon.types.ZAxiomList tom_empty_list_zby() { return tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZAxiomList(); }private static  tom.engine.adt.zenon.types.ZAxiomList tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom e,  tom.engine.adt.zenon.types.ZAxiomList l) { return tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZAxiomList(e,l); }private static  tom.engine.adt.zenon.types.ZAxiom tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) {  return l.getHead() ;}private static  tom.engine.adt.zenon.types.ZAxiomList tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) {  return l.getTail() ;}private static boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.zenon.types.ZAxiomList tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList l2) {    if(tom_is_empty_zby_ZAxiomList(l1)) {     return l2;    } else if(tom_is_empty_zby_ZAxiomList(l2)) {     return l1;    } else if(tom_is_empty_zby_ZAxiomList(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1))) {     return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),tom_append_list_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1),l2));    }   }  private static  tom.engine.adt.zenon.types.ZAxiomList tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList begin,  tom.engine.adt.zenon.types.ZAxiomList end) {    if(tom_terms_equal_ZAxiomList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_empty_list_zby();    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(begin),( tom.engine.adt.zenon.types.ZAxiomList)tom_get_slice_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(begin),end));    }   }  private static boolean tom_terms_equal_ZAxiom(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ZExpr(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZExpr tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zequiv(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_znot( tom.engine.adt.zenon.types.ZExpr t0) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Znot(t0); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zor( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zor(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zand( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zand(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zforall( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZType t1,  tom.engine.adt.zenon.types.ZExpr t2) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zforall(t0, t1, t2); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zeq( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZTerm t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zeq(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZSymbol t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zisfsym(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zfalse() { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zfalse(); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_ztrue() { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Ztrue(); }private static boolean tom_terms_equal_ZType(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZType tom_make_ztype( String  t0) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZType_Ztype(t0); }private static boolean tom_terms_equal_ZTermList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ZTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZTerm tom_make_zsl( tom.engine.adt.zenon.types.ZTerm t0,  String  t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTerm_Zsl(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm tom_make_zst( tom.engine.adt.zenon.types.ZTerm t0,  int  t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTerm_Zst(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm tom_make_zvar( String  t0) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTerm_Zvar(t0); }private static boolean tom_terms_equal_ZSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZSymbol tom_make_zsymbol( String  t0) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZSymbol_Zsymbol(t0); }  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }  /*  * strategies with Id considered as failure  */       





  // ------------------------------------------------------------

  private Verifier verifier;
  private TomIlTools tomiltools;

  public ZenonOutput(Verifier verifier) {
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  public Collection zspecSetFromDerivationTreeSet(Collection derivationSet) {
    Collection resset = new HashSet();
    Iterator it = derivationSet.iterator();
    while(it.hasNext()) {
      DerivTree tree = (DerivTree) it.next();
      ZSpec spec = zspecFromDerivationTree(tree);
      resset.add(spec);
    }
    return resset;
  }

  public Collection zspecSetFromConstraintMap(Map constraintMap) {
    Collection resset = new HashSet();
    Iterator it = constraintMap.entrySet().iterator();
    while(it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZSpec spec = zspecFromMapEntry(entry);
      resset.add(spec);
    }
    return resset;
  }

  public ZSpec zspecFromMapEntry(Map.Entry entry) {
    Instr accept = (Instr) entry.getKey();
    Expr constraint = (Expr) entry.getValue();

    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;

    // theorem to prove
     if(accept instanceof  tom.engine.adt.il.types.Instr) { { tom.engine.adt.il.types.Instr tom_match1_1=(( tom.engine.adt.il.types.Instr)accept); if (tom_is_fun_sym_accept(tom_match1_1) ||  false ) { { aterm.ATerm  tom_match1_1_positive=tom_get_slot_accept_positive(tom_match1_1); { aterm.ATerm  tom_match1_1_negative=tom_get_slot_accept_negative(tom_match1_1); { aterm.ATerm  tom_positive=tom_match1_1_positive; { aterm.ATerm  tom_negative=tom_match1_1_negative; if ( true ) {

        Pattern positivePattern = (Pattern)tom_positive;
        PatternList negativePatternList = (PatternList)tom_negative;
        // we need the substitution to generate the pattern part of the theorem
        SubstitutionList subsList = verifier.collectSubstitutionInConstraint(constraint);
        Map variableMap = ztermVariableMapFromSubstitutionList(subsList,
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromPattern(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.patternToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.patternToZExpr(negativePatternList,variableMap);
        }
       } } } } } } } }


    ZExpr zenonConstraint = zexprFromExpr(constraint);

    ZExpr theorem = null;
    if (pattern != null && zenonConstraint != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem = tom_make_zequiv(tom_make_zand(pattern,tom_make_znot(negpattern)),zenonConstraint);
      } else {
        theorem = tom_make_zequiv(pattern,zenonConstraint);
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature. Again, the TomIlTools will be useful, it has access
    // to TomSignature and Zenon signature

    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem = tom_make_zforall(input,tom_make_ztype("T"),theorem);
    }
    ZSpec spec = tom_make_zthm(theorem,tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms,tom_empty_list_zby())));

    return spec;
  }

  public ZSpec zspecFromDerivationTree(DerivTree tree) {

    Map variableset = new HashMap();
    tree = collectProgramVariables(tree,variableset);

    // Use a TreeMap to have the conditions sorted
    Map conditions = new TreeMap();
    collectConstraints(tree,conditions);
    Map conds = new TreeMap();

    List subjectList = new LinkedList();
    ZExpr pattern = null;
    ZExpr negpattern = null;
    // theorem to prove
     if(tree instanceof  tom.engine.adt.il.types.DerivTree) { { tom.engine.adt.il.types.DerivTree tom_match2_1=(( tom.engine.adt.il.types.DerivTree)tree); {boolean tom_bool_match2_1= false ; { tom.engine.adt.il.types.Deriv tom_match2_1_post= null ; if (tom_is_fun_sym_derivrule(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_post=tom_get_slot_derivrule_post(tom_match2_1); } else { if (tom_is_fun_sym_derivrule2(tom_match2_1)) {tom_bool_match2_1= true ;tom_match2_1_post=tom_get_slot_derivrule2_post(tom_match2_1); } } if (tom_bool_match2_1) { if (tom_is_fun_sym_ebs(tom_match2_1_post) ||  false ) { { tom.engine.adt.il.types.Environment tom_match2_1_post_rhs=tom_get_slot_ebs_rhs(tom_match2_1_post); if (tom_is_fun_sym_env(tom_match2_1_post_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match2_1_post_rhs_subs=tom_get_slot_env_subs(tom_match2_1_post_rhs); { tom.engine.adt.il.types.Instr tom_match2_1_post_rhs_i=tom_get_slot_env_i(tom_match2_1_post_rhs); { tom.engine.adt.il.types.SubstitutionList tom_subsList=tom_match2_1_post_rhs_subs; if (tom_is_fun_sym_accept(tom_match2_1_post_rhs_i) ||  false ) { { aterm.ATerm  tom_match2_1_post_rhs_i_positive=tom_get_slot_accept_positive(tom_match2_1_post_rhs_i); { aterm.ATerm  tom_match2_1_post_rhs_i_negative=tom_get_slot_accept_negative(tom_match2_1_post_rhs_i); { aterm.ATerm  tom_positive=tom_match2_1_post_rhs_i_positive; { aterm.ATerm  tom_negative=tom_match2_1_post_rhs_i_negative; if ( true ) {


        Pattern positivePattern = (Pattern)tom_positive;
        PatternList negativePatternList = (PatternList)tom_negative;
        Map variableMap = ztermVariableMapFromSubstitutionList(tom_subsList,
                                                               new HashMap());
        tomiltools.getZTermSubjectListFromPattern(positivePattern,
                                                  subjectList,
                                                  variableMap);
        pattern = tomiltools.patternToZExpr(positivePattern,variableMap);
        if (verifier.isCamlSemantics()) {
          negpattern = tomiltools.patternToZExpr(negativePatternList,variableMap);
        }
       } } } } } } } } } } } } } } } } }


    ZExpr constraints = tom_make_ztrue();
    // we consider only the interesting conditions : dedexpr
    Iterator it = conditions.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      Seq value = (Seq) entry.getValue();
      if (value.isDedexpr()) {
        conds.put(((String) entry.getKey()),
                  zexprFromSeq(cleanSeq(value)));
      }
    }
    it = conds.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry = (Map.Entry) it.next();
      ZExpr value = (ZExpr) entry.getValue();
      constraints = tom_make_zand(constraints,value);
    }
    ZExpr theorem = null;
    if (pattern != null && constraints != null) {
      if(verifier.isCamlSemantics() && negpattern != null) {
        theorem = tom_make_zequiv(tom_make_zand(pattern,tom_make_znot(negpattern)),constraints);
      } else {
        theorem = tom_make_zequiv(pattern,constraints);
      }
    }

    // now we have to to build the axiom list, starting from the
    // signature.

    // collects symbols in pattern
    Collection symbols = tomiltools.collectSymbols(pattern);
    // generates the axioms for this set of symbols
    ZAxiomList symbolsAxioms = tomiltools.symbolsDefinition(symbols);
    // generates axioms for all subterm operations
    ZAxiomList subtermAxioms = tomiltools.subtermsDefinition(symbols);

    Iterator iter = subjectList.iterator();
    while(iter.hasNext()) {
      ZTerm input = (ZTerm)iter.next();
      theorem = tom_make_zforall(input,tom_make_ztype("T"),theorem);
    }
    ZSpec spec = tom_make_zthm(theorem,tom_append_list_zby(symbolsAxioms,tom_append_list_zby(subtermAxioms,tom_empty_list_zby())));

    return spec;
  }


  /**
   * collects all variable names in the DerivTree, and give a name to _'s
   */
   private static class programVariablesCollector  extends  tom.engine.adt.il.IlVisitableFwd  {  java.util.Map  store;  public programVariablesCollector(  java.util.Map  store ) { super(tom_make_Identity() ); this.store=store; } public  tom.engine.adt.il.types.Variable visit_Variable(  tom.engine.adt.il.types.Variable tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Variable) { { tom.engine.adt.il.types.Variable tom_match3_1=(( tom.engine.adt.il.types.Variable)tom__arg); if (tom_is_fun_sym_var(tom_match3_1) ||  false ) { { String  tom_match3_1_name=tom_get_slot_var_name(tom_match3_1); { String  tom_name=tom_match3_1_name; if ( true ) {


        String newname = tom_name;
        if (store.containsKey(tom_name)){
          newname = (String) store.get(tom_name);
        } else {
          if (tom_name.startsWith("[") && tom_name.endsWith("]")) {
            newname = "X_" + store.size();
          }
          store.put(tom_name,newname);
        }
        return tom_make_var(newname);
       } } } } } } return super.visit_Variable(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_programVariablesCollector( java.util.Map  t0) { return new programVariablesCollector(t0); }



  DerivTree collectProgramVariables(DerivTree tree, Map variables) {
    try {
      tree = (DerivTree) tom_make_TopDown(tom_make_programVariablesCollector(variables)).visit(tree);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectProgramVariables failed");
    }
    return tree;
  }

  ZTerm ztermFromTerm(Term term) {
     if(term instanceof  tom.engine.adt.il.types.Term) { { tom.engine.adt.il.types.Term tom_match4_1=(( tom.engine.adt.il.types.Term)term); if (tom_is_fun_sym_tau(tom_match4_1) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match4_1_abst=tom_get_slot_tau_abst(tom_match4_1); { tom.engine.adt.il.types.AbsTerm tom_absTerm=tom_match4_1_abst; if ( true ) {

        return ztermFromAbsTerm(tom_absTerm);
       } } } } if (tom_is_fun_sym_repr(tom_match4_1) ||  false ) { if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm repr");
       } } if (tom_is_fun_sym_subterm(tom_match4_1) ||  false ) { if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm subterm");
       } } if (tom_is_fun_sym_slot(tom_match4_1) ||  false ) { if ( true ) {

        return tom_make_zvar("Error in ztermFromTerm "+ term+" slot");
       } } if (tom_is_fun_sym_appSubsT(tom_match4_1) ||  false ) { if ( true ) {

        // probleme: la substitution devrait etre appliquee
        return tom_make_zvar("Error in ztermFromTerm appsubsT ");
       } } } }

    return tom_make_zvar("match vide dans ztermFromTerm");
  }

  ZExpr zexprFromExpr(Expr expr) {
     if(expr instanceof  tom.engine.adt.il.types.Expr) { { tom.engine.adt.il.types.Expr tom_match5_1=(( tom.engine.adt.il.types.Expr)expr); if (tom_is_fun_sym_true(tom_match5_1) ||  false ) { if ( true ) {
 return tom_make_ztrue(); } } if (tom_is_fun_sym_false(tom_match5_1) ||  false ) { if ( true ) {
 return tom_make_zfalse(); } } if (tom_is_fun_sym_tisfsym(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match5_1_abst=tom_get_slot_tisfsym_abst(tom_match5_1); { tom.engine.adt.il.types.Symbol tom_match5_1_symbol=tom_get_slot_tisfsym_symbol(tom_match5_1); { tom.engine.adt.il.types.AbsTerm tom_absterm=tom_match5_1_abst; { tom.engine.adt.il.types.Symbol tom_s=tom_match5_1_symbol; if ( true ) {

        return tom_make_zisfsym(ztermFromAbsTerm(tom_absterm),zsymbolFromSymbol(tom_s));
       } } } } } } if (tom_is_fun_sym_teq(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match5_1_labst=tom_get_slot_teq_labst(tom_match5_1); { tom.engine.adt.il.types.AbsTerm tom_match5_1_rabst=tom_get_slot_teq_rabst(tom_match5_1); { tom.engine.adt.il.types.AbsTerm tom_absterml=tom_match5_1_labst; { tom.engine.adt.il.types.AbsTerm tom_abstermr=tom_match5_1_rabst; if ( true ) {

        return tom_make_zeq(ztermFromAbsTerm(tom_absterml),ztermFromAbsTerm(tom_abstermr));
       } } } } } } if (tom_is_fun_sym_isfsym(tom_match5_1) ||  false ) { if ( true ) {

        // this should not occur
        return tom_make_zisfsym(tom_make_zvar("Error in zexprFromExpr"),tom_make_zsymbol("isfsym"));
       } } if (tom_is_fun_sym_eq(tom_match5_1) ||  false ) { if ( true ) {

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("eq"));
       } } if (tom_is_fun_sym_appSubsE(tom_match5_1) ||  false ) { if ( true ) {

        // this should not occur
        return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("appSubsE"));
       } } if (tom_is_fun_sym_iland(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match5_1_left=tom_get_slot_iland_left(tom_match5_1); { tom.engine.adt.il.types.Expr tom_match5_1_right=tom_get_slot_iland_right(tom_match5_1); { tom.engine.adt.il.types.Expr tom_lt=tom_match5_1_left; { tom.engine.adt.il.types.Expr tom_rt=tom_match5_1_right; if ( true ) {

        return tom_make_zand(zexprFromExpr(tom_lt),zexprFromExpr(tom_rt));
       } } } } } } if (tom_is_fun_sym_ilor(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match5_1_left=tom_get_slot_ilor_left(tom_match5_1); { tom.engine.adt.il.types.Expr tom_match5_1_right=tom_get_slot_ilor_right(tom_match5_1); { tom.engine.adt.il.types.Expr tom_lt=tom_match5_1_left; { tom.engine.adt.il.types.Expr tom_rt=tom_match5_1_right; if ( true ) {

        return tom_make_zor(zexprFromExpr(tom_lt),zexprFromExpr(tom_rt));
       } } } } } } if (tom_is_fun_sym_ilnot(tom_match5_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match5_1_exp=tom_get_slot_ilnot_exp(tom_match5_1); { tom.engine.adt.il.types.Expr tom_nex=tom_match5_1_exp; if ( true ) {

        return tom_make_znot(zexprFromExpr(tom_nex));
       } } } } } }

    return tom_make_zeq(tom_make_zvar("Error in zexprFromExpr"),tom_make_zvar("end " + expr.toString()));
  }

  ZSymbol zsymbolFromSymbol(Symbol symb) {
     if(symb instanceof  tom.engine.adt.il.types.Symbol) { { tom.engine.adt.il.types.Symbol tom_match6_1=(( tom.engine.adt.il.types.Symbol)symb); if (tom_is_fun_sym_fsymbol(tom_match6_1) ||  false ) { { String  tom_match6_1_name=tom_get_slot_fsymbol_name(tom_match6_1); { String  tom_name=tom_match6_1_name; if ( true ) {

        return tom_make_zsymbol(tom_name);
       } } } } } }

    return tom_make_zsymbol("random");
  }

  ZExpr zexprFromSeq(Seq seq) {
     if(seq instanceof  tom.engine.adt.il.types.Seq) { { tom.engine.adt.il.types.Seq tom_match7_1=(( tom.engine.adt.il.types.Seq)seq); if (tom_is_fun_sym_seq(tom_match7_1) ||  false ) { if ( true ) {

        return tom_make_ztrue();
       } } if (tom_is_fun_sym_dedterm(tom_match7_1) ||  false ) { { tom.engine.adt.il.types.TermList tom_match7_1_terms=tom_get_slot_dedterm_terms(tom_match7_1); { tom.engine.adt.il.types.TermList tom_termlist=tom_match7_1_terms; if ( true ) { if(tom_termlist instanceof  tom.engine.adt.il.types.TermList) { { tom.engine.adt.il.types.TermList tom_match8_1=(( tom.engine.adt.il.types.TermList)tom_termlist); if (tom_is_fun_sym_concTerm(tom_match8_1) ||  false ) { { tom.engine.adt.il.types.TermList tom_match8_1_list1=tom_match8_1; { tom.engine.adt.il.types.TermList tom_match8_1_begin1=tom_match8_1_list1; { tom.engine.adt.il.types.TermList tom_match8_1_end1=tom_match8_1_list1; { while (!(tom_is_empty_concTerm_TermList(tom_match8_1_end1))) {tom_match8_1_list1=tom_match8_1_end1; { { tom.engine.adt.il.types.Term tom_tl=tom_get_head_concTerm_TermList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concTerm_TermList(tom_match8_1_list1); if (!(tom_is_empty_concTerm_TermList(tom_match8_1_list1))) { { tom.engine.adt.il.types.Term tom_tr=tom_get_head_concTerm_TermList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concTerm_TermList(tom_match8_1_list1); if (tom_is_empty_concTerm_TermList(tom_match8_1_list1)) { if ( true ) {



            return tom_make_zeq(ztermFromTerm(tom_tl),ztermFromTerm(tom_tr));
           } } } } }tom_match8_1_end1=tom_get_tail_concTerm_TermList(tom_match8_1_end1); } }tom_match8_1_list1=tom_match8_1_begin1; } } } } } } }

       } } } } if (tom_is_fun_sym_dedexpr(tom_match7_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match7_1_exprs=tom_get_slot_dedexpr_exprs(tom_match7_1); { tom.engine.adt.il.types.ExprList tom_exprlist=tom_match7_1_exprs; if ( true ) { if(tom_exprlist instanceof  tom.engine.adt.il.types.ExprList) { { tom.engine.adt.il.types.ExprList tom_match9_1=(( tom.engine.adt.il.types.ExprList)tom_exprlist); if (tom_is_fun_sym_concExpr(tom_match9_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match9_1_list1=tom_match9_1; { tom.engine.adt.il.types.ExprList tom_match9_1_begin1=tom_match9_1_list1; { tom.engine.adt.il.types.ExprList tom_match9_1_end1=tom_match9_1_list1; { while (!(tom_is_empty_concExpr_ExprList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1; { { tom.engine.adt.il.types.Expr tom_t=tom_get_head_concExpr_ExprList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concExpr_ExprList(tom_match9_1_list1); if (!(tom_is_empty_concExpr_ExprList(tom_match9_1_list1))) { { tom.engine.adt.il.types.Expr tom_match9_1_3=tom_get_head_concExpr_ExprList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concExpr_ExprList(tom_match9_1_list1); if (tom_is_fun_sym_true(tom_match9_1_3) ||  false ) { if (tom_is_empty_concExpr_ExprList(tom_match9_1_list1)) { if ( true ) {



            return zexprFromExpr(tom_t);
           } } } } } }tom_match9_1_end1=tom_get_tail_concExpr_ExprList(tom_match9_1_end1); } }tom_match9_1_list1=tom_match9_1_begin1; } } } } } } }

       } } } } if (tom_is_fun_sym_dedexpr(tom_match7_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match7_1_exprs=tom_get_slot_dedexpr_exprs(tom_match7_1); { tom.engine.adt.il.types.ExprList tom_exprlist=tom_match7_1_exprs; if ( true ) { if(tom_exprlist instanceof  tom.engine.adt.il.types.ExprList) { { tom.engine.adt.il.types.ExprList tom_match10_1=(( tom.engine.adt.il.types.ExprList)tom_exprlist); if (tom_is_fun_sym_concExpr(tom_match10_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match10_1_list1=tom_match10_1; { tom.engine.adt.il.types.ExprList tom_match10_1_begin1=tom_match10_1_list1; { tom.engine.adt.il.types.ExprList tom_match10_1_end1=tom_match10_1_list1; { while (!(tom_is_empty_concExpr_ExprList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1; { { tom.engine.adt.il.types.Expr tom_t=tom_get_head_concExpr_ExprList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concExpr_ExprList(tom_match10_1_list1); if (!(tom_is_empty_concExpr_ExprList(tom_match10_1_list1))) { { tom.engine.adt.il.types.Expr tom_match10_1_3=tom_get_head_concExpr_ExprList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concExpr_ExprList(tom_match10_1_list1); if (tom_is_fun_sym_false(tom_match10_1_3) ||  false ) { if (tom_is_empty_concExpr_ExprList(tom_match10_1_list1)) { if ( true ) {



            return tom_make_znot(zexprFromExpr(tom_t));
           } } } } } }tom_match10_1_end1=tom_get_tail_concExpr_ExprList(tom_match10_1_end1); } }tom_match10_1_list1=tom_match10_1_begin1; } } } } } } }

       } } } } } }

    return tom_make_ztrue();
  }

  ZTerm ztermFromAbsTerm(AbsTerm absterm) {
     if(absterm instanceof  tom.engine.adt.il.types.AbsTerm) { { tom.engine.adt.il.types.AbsTerm tom_match11_1=(( tom.engine.adt.il.types.AbsTerm)absterm); if (tom_is_fun_sym_absvar(tom_match11_1) ||  false ) { { tom.engine.adt.il.types.Variable tom_match11_1_varname=tom_get_slot_absvar_varname(tom_match11_1); if (tom_is_fun_sym_var(tom_match11_1_varname) ||  false ) { { String  tom_match11_1_varname_name=tom_get_slot_var_name(tom_match11_1_varname); { String  tom_name=tom_match11_1_varname_name; if ( true ) {

        return tom_make_zvar(tom_name);
       } } } } } } if (tom_is_fun_sym_st(tom_match11_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match11_1_symbol=tom_get_slot_st_symbol(tom_match11_1); { tom.engine.adt.il.types.AbsTerm tom_match11_1_abst=tom_get_slot_st_abst(tom_match11_1); { int  tom_match11_1_index=tom_get_slot_st_index(tom_match11_1); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match11_1_abst; { int  tom_index=tom_match11_1_index; if ( true ) {

        return tom_make_zst(ztermFromAbsTerm(tom_t),tom_index);
       } } } } } } } if (tom_is_fun_sym_sl(tom_match11_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match11_1_symbol=tom_get_slot_sl_symbol(tom_match11_1); { tom.engine.adt.il.types.AbsTerm tom_match11_1_abst=tom_get_slot_sl_abst(tom_match11_1); { String  tom_match11_1_name=tom_get_slot_sl_name(tom_match11_1); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match11_1_abst; { String  tom_name=tom_match11_1_name; if ( true ) {

        return tom_make_zsl(ztermFromAbsTerm(tom_t),tom_name);
       } } } } } } } } }

    return tom_make_zvar("Error in ztermFromAbsTerm");
  }

  Seq cleanSeq(Seq seq) {
     if(seq instanceof  tom.engine.adt.il.types.Seq) { { tom.engine.adt.il.types.Seq tom_match12_1=(( tom.engine.adt.il.types.Seq)seq); if (tom_is_fun_sym_seq(tom_match12_1) ||  false ) { if ( true ) {
 return seq;  } } if (tom_is_fun_sym_dedterm(tom_match12_1) ||  false ) { { tom.engine.adt.il.types.TermList tom_match12_1_terms=tom_get_slot_dedterm_terms(tom_match12_1); if (tom_is_fun_sym_concTerm(tom_match12_1_terms) ||  false ) { { tom.engine.adt.il.types.TermList tom_match12_1_terms_list1=tom_match12_1_terms; { tom.engine.adt.il.types.TermList tom_match12_1_terms_begin1=tom_match12_1_terms_list1; { tom.engine.adt.il.types.TermList tom_match12_1_terms_end1=tom_match12_1_terms_list1; { while (!(tom_is_empty_concTerm_TermList(tom_match12_1_terms_end1))) {tom_match12_1_terms_list1=tom_match12_1_terms_end1; { { tom.engine.adt.il.types.Term tom_t=tom_get_head_concTerm_TermList(tom_match12_1_terms_list1);tom_match12_1_terms_list1=tom_get_tail_concTerm_TermList(tom_match12_1_terms_list1); if (!(tom_is_empty_concTerm_TermList(tom_match12_1_terms_list1))) { { tom.engine.adt.il.types.Term tom_v=tom_get_head_concTerm_TermList(tom_match12_1_terms_list1);tom_match12_1_terms_list1=tom_get_tail_concTerm_TermList(tom_match12_1_terms_list1); if (tom_is_empty_concTerm_TermList(tom_match12_1_terms_list1)) { if ( true ) {

          return tom_make_dedterm(tom_cons_list_concTerm(tom_t,tom_cons_list_concTerm(tom_v,tom_empty_list_concTerm())));
       } } } } }tom_match12_1_terms_end1=tom_get_tail_concTerm_TermList(tom_match12_1_terms_end1); } }tom_match12_1_terms_list1=tom_match12_1_terms_begin1; } } } } } } } if (tom_is_fun_sym_dedexpr(tom_match12_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match12_1_exprs=tom_get_slot_dedexpr_exprs(tom_match12_1); if (tom_is_fun_sym_concExpr(tom_match12_1_exprs) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match12_1_exprs_list1=tom_match12_1_exprs; { tom.engine.adt.il.types.ExprList tom_match12_1_exprs_begin1=tom_match12_1_exprs_list1; { tom.engine.adt.il.types.ExprList tom_match12_1_exprs_end1=tom_match12_1_exprs_list1; { while (!(tom_is_empty_concExpr_ExprList(tom_match12_1_exprs_end1))) {tom_match12_1_exprs_list1=tom_match12_1_exprs_end1; { { tom.engine.adt.il.types.Expr tom_t=tom_get_head_concExpr_ExprList(tom_match12_1_exprs_list1);tom_match12_1_exprs_list1=tom_get_tail_concExpr_ExprList(tom_match12_1_exprs_list1); if (!(tom_is_empty_concExpr_ExprList(tom_match12_1_exprs_list1))) { { tom.engine.adt.il.types.Expr tom_v=tom_get_head_concExpr_ExprList(tom_match12_1_exprs_list1);tom_match12_1_exprs_list1=tom_get_tail_concExpr_ExprList(tom_match12_1_exprs_list1); if (tom_is_empty_concExpr_ExprList(tom_match12_1_exprs_list1)) { if ( true ) {

        return tom_make_dedexpr(tom_cons_list_concExpr(tom_t,tom_cons_list_concExpr(tom_v,tom_empty_list_concExpr())));
       } } } } }tom_match12_1_exprs_end1=tom_get_tail_concExpr_ExprList(tom_match12_1_exprs_end1); } }tom_match12_1_exprs_list1=tom_match12_1_exprs_begin1; } } } } } } } } }

    return seq;
  }

  private Map ztermVariableMapFromSubstitutionList(SubstitutionList sublist, Map map) {
     if(sublist instanceof  tom.engine.adt.il.types.SubstitutionList) { { tom.engine.adt.il.types.SubstitutionList tom_match13_1=(( tom.engine.adt.il.types.SubstitutionList)sublist); if (tom_is_fun_sym_subs(tom_match13_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match13_1_list1=tom_match13_1; if (tom_is_empty_subs_SubstitutionList(tom_match13_1_list1)) { if ( true ) {
 return map;  } } } } if (tom_is_fun_sym_subs(tom_match13_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match13_1_list1=tom_match13_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match13_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match13_1_1=tom_get_head_subs_SubstitutionList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_subs_SubstitutionList(tom_match13_1_list1); if (tom_is_fun_sym_undefsubs(tom_match13_1_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_t=tom_match13_1_list1; if ( true ) {
 return ztermVariableMapFromSubstitutionList(tom_t,map); } } } } } } } if (tom_is_fun_sym_subs(tom_match13_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match13_1_list1=tom_match13_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match13_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match13_1_1=tom_get_head_subs_SubstitutionList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_subs_SubstitutionList(tom_match13_1_list1); if (tom_is_fun_sym_is(tom_match13_1_1) ||  false ) { { tom.engine.adt.il.types.Variable tom_match13_1_1_var=tom_get_slot_is_var(tom_match13_1_1); { tom.engine.adt.il.types.Term tom_match13_1_1_term=tom_get_slot_is_term(tom_match13_1_1); if (tom_is_fun_sym_var(tom_match13_1_1_var) ||  false ) { { String  tom_match13_1_1_var_name=tom_get_slot_var_name(tom_match13_1_1_var); { String  tom_name=tom_match13_1_1_var_name; { tom.engine.adt.il.types.Term tom_term=tom_match13_1_1_term; { tom.engine.adt.il.types.SubstitutionList tom_t=tom_match13_1_list1; if ( true ) {

        map.put(tom_name,ztermFromTerm(tom_term));
        return ztermVariableMapFromSubstitutionList(tom_t,map);
       } } } } } } } } } } } } } } }

    throw new TomRuntimeException("verifier: strange substitution list: "+sublist);
  }

  public void collectConstraints(DerivTree tree, Map conditions) {
     if(tree instanceof  tom.engine.adt.il.types.DerivTree) { { tom.engine.adt.il.types.DerivTree tom_match14_1=(( tom.engine.adt.il.types.DerivTree)tree); if (tom_is_fun_sym_derivrule(tom_match14_1) ||  false ) { { tom.engine.adt.il.types.DerivTree tom_match14_1_pre=tom_get_slot_derivrule_pre(tom_match14_1); { tom.engine.adt.il.types.Seq tom_match14_1_cond=tom_get_slot_derivrule_cond(tom_match14_1); { tom.engine.adt.il.types.DerivTree tom_pre=tom_match14_1_pre; { tom.engine.adt.il.types.Seq tom_condition=tom_match14_1_cond; if ( true ) {

        String condname = Integer.toString(conditions.size()+1);
        conditions.put(condname,tom_condition);
        collectConstraints(tom_pre,conditions);
       } } } } } } if (tom_is_fun_sym_derivrule2(tom_match14_1) ||  false ) { { tom.engine.adt.il.types.DerivTree tom_match14_1_pre=tom_get_slot_derivrule2_pre(tom_match14_1); { tom.engine.adt.il.types.DerivTree tom_match14_1_pre2=tom_get_slot_derivrule2_pre2(tom_match14_1); { tom.engine.adt.il.types.Seq tom_match14_1_cond=tom_get_slot_derivrule2_cond(tom_match14_1); { tom.engine.adt.il.types.DerivTree tom_pre=tom_match14_1_pre; { tom.engine.adt.il.types.DerivTree tom_pre2=tom_match14_1_pre2; { tom.engine.adt.il.types.Seq tom_condition=tom_match14_1_cond; if ( true ) {

        String condname = Integer.toString(conditions.size()+1);
        conditions.put(condname,tom_condition);
        collectConstraints(tom_pre,conditions);
        collectConstraints(tom_pre2,conditions);
       } } } } } } } } } }

  }

}
