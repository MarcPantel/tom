/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 **/

package tom.engine.verifier;

import java.io.File;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import java.util.*;
import java.util.logging.Level;

import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.TomMessage;
import tom.engine.tools.Tools;
import tom.engine.tools.TomGenericPlugin;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.*;

import aterm.ATerm;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.types.*;
import tom.library.sl.*;
/**
 * The TomVerifier plugin.
 */
public class TomVerifier extends TomGenericPlugin {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */ private static boolean tom_equal_term_Instruction(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Instruction(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.Instruction ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_InstructionList(Object t) { return  t instanceof tom.engine.adt.tominstruction.types.InstructionList ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomList ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.If) ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_If_Condition( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getCondition() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_SuccesInst( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getSuccesInst() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_FailureInst( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getFailureInst() ;}private static boolean tom_is_fun_sym_DoWhile( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.DoWhile) ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_DoWhile_DoInst( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getDoInst() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_DoWhile_Condition( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getCondition() ;}private static boolean tom_is_fun_sym_WhileDo( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.WhileDo) ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_WhileDo_Condition( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getCondition() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_WhileDo_DoInst( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getDoInst() ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.Let) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Let_Variable( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Let_Source( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getSource() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_Let_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_LetRef( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.LetRef) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetRef_Variable( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetRef_Source( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getSource() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetRef_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.LetAssign) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetAssign_Variable( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetAssign_Source( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getSource() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetAssign_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.Nop) ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.AbstractBlock) ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_AbstractBlock_InstList( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getInstList() ;}private static boolean tom_is_fun_sym_UnamedBlock( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.UnamedBlock) ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_UnamedBlock_InstList( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getInstList() ;}private static boolean tom_is_fun_sym_CompiledMatch( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.CompiledMatch) ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CompiledMatch_AutomataInst( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAutomataInst() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_CompiledMatch_Option( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getOption() ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tominstruction.types.Instruction  t) { return  (t instanceof tom.engine.adt.tominstruction.types.instruction.CompiledPattern) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_slot_CompiledPattern_Contraint( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getContraint() ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CompiledPattern_AutomataInst( tom.engine.adt.tominstruction.types.Instruction  t) { return  t.getAutomataInst() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.Name) ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_TomTermToExpression( tom.engine.adt.tomexpression.types.Expression  t) { return  (t instanceof tom.engine.adt.tomexpression.types.expression.TomTermToExpression) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_TomTermToExpression_AstTerm( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getAstTerm() ;}private static boolean tom_is_fun_sym_Or( tom.engine.adt.tomexpression.types.Expression  t) { return  (t instanceof tom.engine.adt.tomexpression.types.expression.Or) ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Or_Arg1( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getArg1() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Or_Arg2( tom.engine.adt.tomexpression.types.Expression  t) { return  t.getArg2() ;}private static boolean tom_is_fun_sym_TrueTL( tom.engine.adt.tomexpression.types.Expression  t) { return  (t instanceof tom.engine.adt.tomexpression.types.expression.TrueTL) ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomexpression.types.Expression  t) { return  (t instanceof tom.engine.adt.tomexpression.types.expression.FalseTL) ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_TermAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_TermAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_TermAppl_Args( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getArgs() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_TermAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_ExpressionToTomTerm( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm) ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_ExpressionToTomTerm_AstExpression( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstExpression() ;}private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) { return  ((t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction) || (t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction)) ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getHeadconcInstruction() ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.getTailconcInstruction() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) { return  l.isEmptyconcInstruction() ;}   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {     if( l1.isEmptyconcInstruction() ) {       return l2;     } else if( l2.isEmptyconcInstruction() ) {       return l1;     } else if(  l1.getTailconcInstruction() .isEmptyconcInstruction() ) {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction( l1.getHeadconcInstruction() ,l2);     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction( l1.getHeadconcInstruction() ,tom_append_list_concInstruction( l1.getTailconcInstruction() ,l2));     }   }   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end, tom.engine.adt.tominstruction.types.InstructionList  tail) {     if(tom_equal_term_InstructionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction( begin.getHeadconcInstruction() ,( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction( begin.getTailconcInstruction() ,end,tail));     }   }   private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  ((t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( l1.getHeadconcTomName() ,l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail));     }   }   private static boolean tom_is_fun_sym_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_AndConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadAndConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailAndConstraint() ;}private static boolean tom_is_empty_AndConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyAndConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()).isEmptyAndConstraint() ) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),tom_append_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() :tom_empty_list_AndConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() :tom_empty_list_AndConstraint()),end,tail));     }   }   private static boolean tom_is_fun_sym_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_empty_list_OrConstraint() { return  tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_cons_list_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.Constraint  l) { return  tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_OrConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getHeadOrConstraint() ;}private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_tail_OrConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.getTailOrConstraint() ;}private static boolean tom_is_empty_OrConstraint_Constraint( tom.engine.adt.tomconstraint.types.Constraint  l) { return  l.isEmptyOrConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyOrConstraint() ) {       return l2;     } else if( l2.isEmptyOrConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getTailOrConstraint() :tom_empty_list_OrConstraint()).isEmptyOrConstraint() ) {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getHeadOrConstraint() :l1),l2);       } else {         return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getHeadOrConstraint() :l1),tom_append_list_OrConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getTailOrConstraint() :tom_empty_list_OrConstraint()),l2));       }     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraint(l1, l2);     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if(tom_equal_term_Constraint(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.Constraint )tom_cons_list_OrConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? begin.getHeadOrConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_OrConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? begin.getTailOrConstraint() :tom_empty_list_OrConstraint()),end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   private static boolean tom_is_sort_Collection(Object t) { return 



 t instanceof java.util.Collection ;}


  public static final String DECLARED_OPTIONS =
    "<options>" +
    "<boolean name='verify' altName='' description='Verify correctness of match compilation' value='false'/>" +
    "<boolean name='noReduce' altName='' description='Do not simplify extracted constraints (depends on --verify)' value='false'/>" +
    "<boolean name='camlSemantics' altName='' description='Verify with caml semantics for match' value='false'/>" +
    "</options>";

  public static final String ZENON_SUFFIX = ".zv";
  public static final String INTERMEDIATE_SUFFIX = ".tfix.zenon";

  protected Verifier verif;
  protected ZenonOutput zenon;

  public TomVerifier() {
    super("TomVerifier");
  }

  public void run() {
    boolean camlsemantics = getOptionBooleanValue("camlSemantics");
    boolean intermediate = getOptionBooleanValue("intermediate");
    boolean optimize2 = getOptionBooleanValue("optimize2");

    if(optimize2 && isActivated()) {
      getLogger().log(Level.SEVERE, TomMessage.verifierNotCompatibleWithOptimize.getMessage());
    }

    verif = new Verifier(camlsemantics);
    verif.setSymbolTable(this.symbolTable());
    // delay the zenonoutput creation, as it needs the verifiers
    // symboltable to be properly set
    if(isActivated()) {
      zenon = new ZenonOutput(verif);
      long startChrono = System.currentTimeMillis();
      try {

        // collects all automata
        Collection matchingCode = getMatchingCode();

        // Collection derivations = getDerivations(matchingCode);
        //System.out.println("Derivations : " + derivations);

        Map rawConstraints = getRawConstraints(matchingCode);
        //System.out.println(rawConstraints);

        // reduce constraints
        verif.mappingReduce(rawConstraints);
        if (!getOptionBooleanValue("noReduce")) {
          verif.booleanReduce(rawConstraints);
        }

        Collection zspecSet = zenon.zspecSetFromConstraintMap(rawConstraints);
        if(intermediate) {
          Tools.generateOutputFromCollection(getStreamManager().getOutputFileName() + INTERMEDIATE_SUFFIX, zspecSet);
        }

        ZenonBackend back = new ZenonBackend(verif);
        //System.out.println("output: "+back.genZSpecCollection(zspecSet));
        String output = back.genZSpecCollection(zspecSet);

        // do not generate a file if there is no proof to do
        if (!zspecSet.isEmpty()) {
          try {
            Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(
                      getStreamManager().getOutputFileName() + ZENON_SUFFIX
                      ))));
            writer.write(output);
            writer.close();
          } catch (IOException e) {
            getLogger().log( Level.SEVERE, TomMessage.backendIOException.getMessage(),
                new Object[]{getStreamManager().getOutputFile().getName(), e.getMessage()} );
            return;
          }
        }

        // verbose
        getLogger().log(Level.INFO, TomMessage.tomVerificationPhase.getMessage(),
                        new Integer((int)(System.currentTimeMillis()-startChrono)));

      } catch (Exception e) {
        getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                         new Object[]{getClass().getName(),
                                      getStreamManager().getInputFileName(),
                                      e.getMessage()} );
        e.printStackTrace();
      }
    } else {
      getLogger().log(Level.INFO, TomMessage.verifierInactivated.getMessage());
    }
  }

  protected Collection getMatchingCode() {
        // here the extraction stuff
        Collection matchSet = collectMatch((TomTerm)getWorkingTerm());

        Collection purified = purify(matchSet);
         //System.out.println("Purified : " + purified);

        // removes all associative patterns
        filterAssociative(purified);

        return purified;
  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomVerifier.DECLARED_OPTIONS);
  }

  private boolean isActivated() {
    return getOptionBooleanValue("verify");
  }

  private static class collectMatch extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  collection; public collectMatch( java.util.Collection  collection) { super(tom_make_Identity());this.collection=collection;}public  java.util.Collection  getcollection() { return collection;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch284NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_CompiledMatch(tomMatch284NameNumberfreshSubject_1)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch284NameNumber_freshVar_0=tom_get_slot_CompiledMatch_AutomataInst(tomMatch284NameNumberfreshSubject_1);if ( true ) {


        collection.add(tomMatch284NameNumber_freshVar_0);
      }}}}}return super.visit_Instruction(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_collectMatch( java.util.Collection  t0) { return new collectMatch(t0); }



  public static Collection collectMatch(TomTerm subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collectMatch(result)).visitLight(subject);
    } catch (tom.library.sl.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectMatch failed");
    }
    return result;
  }

  public Collection purify(Collection subject) {
    Collection purified = new HashSet();
    Iterator it = subject.iterator();
    while (it.hasNext()) {
      Instruction cm = (Instruction)it.next();
      // simplify the IL automata
      purified.add((simplifyIl(cm)));
    }
    return purified;
  }

  private static class ilSimplifier extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {public ilSimplifier() { super(tom_make_Identity());}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomexpression.types.Expression  visit_Expression( tom.engine.adt.tomexpression.types.Expression  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Expression(tom__arg)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch285NameNumberfreshSubject_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg);if (tom_is_fun_sym_Or(tomMatch285NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch285NameNumber_freshVar_0=tom_get_slot_Or_Arg1(tomMatch285NameNumberfreshSubject_1);{  tom.engine.adt.tomexpression.types.Expression  tomMatch285NameNumber_freshVar_1=tom_get_slot_Or_Arg2(tomMatch285NameNumberfreshSubject_1);if (tom_is_fun_sym_FalseTL(tomMatch285NameNumber_freshVar_1)) {if ( true ) {


        return tomMatch285NameNumber_freshVar_0;
      }}}}}if (tom_is_fun_sym_TomTermToExpression(tomMatch285NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch285NameNumber_freshVar_2=tom_get_slot_TomTermToExpression_AstTerm(tomMatch285NameNumberfreshSubject_1);if (tom_is_fun_sym_ExpressionToTomTerm(tomMatch285NameNumber_freshVar_2)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch285NameNumber_freshVar_3=tom_get_slot_ExpressionToTomTerm_AstExpression(tomMatch285NameNumber_freshVar_2);if ( true ) {

        return tomMatch285NameNumber_freshVar_3;
      }}}}}}}return super.visit_Expression(tom__arg); }public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch286NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_If(tomMatch286NameNumberfreshSubject_1)) {{  tom.engine.adt.tomexpression.types.Expression  tomMatch286NameNumber_freshVar_0=tom_get_slot_If_Condition(tomMatch286NameNumberfreshSubject_1);{  tom.engine.adt.tominstruction.types.Instruction  tomMatch286NameNumber_freshVar_1=tom_get_slot_If_SuccesInst(tomMatch286NameNumberfreshSubject_1);{  tom.engine.adt.tominstruction.types.Instruction  tomMatch286NameNumber_freshVar_2=tom_get_slot_If_FailureInst(tomMatch286NameNumberfreshSubject_1);if (tom_is_fun_sym_TrueTL(tomMatch286NameNumber_freshVar_0)) {if (tom_is_fun_sym_Nop(tomMatch286NameNumber_freshVar_2)) {if ( true ) {




        return tomMatch286NameNumber_freshVar_1;
      }}}}}}}{ boolean tomMatch286NameNumber_freshVar_6= false ;{  tom.engine.adt.tominstruction.types.InstructionList  tomMatch286NameNumber_freshVar_3= null ;if (tom_is_fun_sym_UnamedBlock(tomMatch286NameNumberfreshSubject_1)) {{tomMatch286NameNumber_freshVar_6= true ;tomMatch286NameNumber_freshVar_3=tom_get_slot_UnamedBlock_InstList(tomMatch286NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_AbstractBlock(tomMatch286NameNumberfreshSubject_1)) {{tomMatch286NameNumber_freshVar_6= true ;tomMatch286NameNumber_freshVar_3=tom_get_slot_AbstractBlock_InstList(tomMatch286NameNumberfreshSubject_1);}}}if ((tomMatch286NameNumber_freshVar_6 ==  true )) {if (tom_is_fun_sym_concInstruction(tomMatch286NameNumber_freshVar_3)) {{  tom.engine.adt.tominstruction.types.InstructionList  tomMatch286NameNumber_freshVar_4=tomMatch286NameNumber_freshVar_3;if (!(tom_is_empty_concInstruction_InstructionList(tomMatch286NameNumber_freshVar_4))) {{  tom.engine.adt.tominstruction.types.InstructionList  tomMatch286NameNumber_freshVar_5=tom_get_tail_concInstruction_InstructionList(tomMatch286NameNumber_freshVar_4);if (tom_is_empty_concInstruction_InstructionList(tomMatch286NameNumber_freshVar_5)) {if ( true ) {

        return tom_get_head_concInstruction_InstructionList(tomMatch286NameNumber_freshVar_4);
      }}}}}}}}}{ boolean tomMatch286NameNumber_freshVar_10= false ;{  tom.engine.adt.tominstruction.types.Instruction  tomMatch286NameNumber_freshVar_8= null ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch286NameNumber_freshVar_7= null ;if (tom_is_fun_sym_Let(tomMatch286NameNumberfreshSubject_1)) {{tomMatch286NameNumber_freshVar_10= true ;tomMatch286NameNumber_freshVar_7=tom_get_slot_Let_Variable(tomMatch286NameNumberfreshSubject_1);tomMatch286NameNumber_freshVar_8=tom_get_slot_Let_AstInstruction(tomMatch286NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_LetRef(tomMatch286NameNumberfreshSubject_1)) {{tomMatch286NameNumber_freshVar_10= true ;tomMatch286NameNumber_freshVar_7=tom_get_slot_LetRef_Variable(tomMatch286NameNumberfreshSubject_1);tomMatch286NameNumber_freshVar_8=tom_get_slot_LetRef_AstInstruction(tomMatch286NameNumberfreshSubject_1);}} else {if (tom_is_fun_sym_LetAssign(tomMatch286NameNumberfreshSubject_1)) {{tomMatch286NameNumber_freshVar_10= true ;tomMatch286NameNumber_freshVar_7=tom_get_slot_LetAssign_Variable(tomMatch286NameNumberfreshSubject_1);tomMatch286NameNumber_freshVar_8=tom_get_slot_LetAssign_AstInstruction(tomMatch286NameNumberfreshSubject_1);}}}}if ((tomMatch286NameNumber_freshVar_10 ==  true )) {{ boolean tomMatch286NameNumber_freshVar_9= false ;if (tom_is_fun_sym_UnamedVariable(tomMatch286NameNumber_freshVar_7)) {tomMatch286NameNumber_freshVar_9= true ;} else {if (tom_is_fun_sym_UnamedVariableStar(tomMatch286NameNumber_freshVar_7)) {tomMatch286NameNumber_freshVar_9= true ;}}if ((tomMatch286NameNumber_freshVar_9 ==  true )) {if ( true ) {

        return tomMatch286NameNumber_freshVar_8;
      }}}}}}}if (tom_is_fun_sym_CompiledPattern(tomMatch286NameNumberfreshSubject_1)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch286NameNumber_freshVar_11=tom_get_slot_CompiledPattern_AutomataInst(tomMatch286NameNumberfreshSubject_1);if ( true ) {


        return tomMatch286NameNumber_freshVar_11;
      }}}}}return super.visit_Instruction(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_ilSimplifier() { return new ilSimplifier(); }



  private Instruction simplifyIl(Instruction subject) {
    try {
      subject = (Instruction) tom_make_TopDown(tom_make_ilSimplifier()).visitLight(subject);
    } catch (tom.library.sl.VisitFailure e) {
      throw new TomRuntimeException("Strategy simplifyIl failed");
    }
    return subject;
  }

  void filterAssociative(Collection c) {
    for (Iterator i = c.iterator(); i.hasNext(); )
      if (containsAssociativeOperator((Instruction) i.next()))
        i.remove();
  }

  boolean containsAssociativeOperator(Instruction subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_associativeOperatorCollector(result)).visitLight(subject);
    } catch (tom.library.sl.VisitFailure e) {
      throw new TomRuntimeException("Strategy containsAssociativeOperator failed");
    }
    return !result.isEmpty();
  }

  private static class associativeOperatorCollector extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  store; public associativeOperatorCollector( java.util.Collection  store) { super(tom_make_Identity());this.store=store;}public  java.util.Collection  getstore() { return store;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Instruction(tom__arg)) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch287NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if (tom_is_fun_sym_WhileDo(tomMatch287NameNumberfreshSubject_1)) {if ( true ) {







        store.add(tomMatch287NameNumberfreshSubject_1);
      }}if (tom_is_fun_sym_DoWhile(tomMatch287NameNumberfreshSubject_1)) {if ( true ) {

        store.add(tomMatch287NameNumberfreshSubject_1);
      }}}}return super.visit_Instruction(tom__arg); }public  tom.engine.adt.tomexpression.types.Expression  visit_Expression( tom.engine.adt.tomexpression.types.Expression  tom__arg) throws tom.library.sl.VisitFailure {return super.visit_Expression(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_associativeOperatorCollector( java.util.Collection  t0) { return new associativeOperatorCollector(t0); }











  public Collection getDerivations(Collection subject) {
    Collection derivations = new HashSet();
    Iterator it = subject.iterator();

    while (it.hasNext()) {
      Instruction automata = (Instruction) it.next();
      Collection trees = verif.build_tree(automata);
      derivations.addAll(trees);
    }
    return derivations;
  }

  public Map getRawConstraints(Collection subject) {
    Map rawConstraints = new HashMap();
    Iterator it = subject.iterator();

    while (it.hasNext()) {
      Instruction automata = (Instruction) it.next();
      Map trees = verif.getConstraints(automata);
      rawConstraints.putAll(trees);
    }
    return rawConstraints;
  }

  public String constraintToString(ATerm patternList) {
    return constraintToString((ConstraintList) patternList);
  }

  public String constraintToString(ConstraintList constraintList) {
    StringBuffer result = new StringBuffer();
    Constraint h = null;
    ConstraintList tail = constraintList;
    if(!tail.isEmptyconcConstraint()) {
      h = tail.getHeadconcConstraint();
      tail = tail.getTailconcConstraint();
      result.append(constraintToString(h));
    }

    while(!tail.isEmptyconcConstraint()) {
      h = tail.getHeadconcConstraint();
      result.append("," + constraintToString(h));
      tail = tail.getTailconcConstraint();
    }
    return result.toString();
  }

  public String constraintToString(Constraint constraint) {
    String result = "";
    if (tom_is_sort_Constraint(constraint)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch289NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )constraint);if (tom_is_fun_sym_AndConstraint(tomMatch289NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch289NameNumber_freshVar_0=tomMatch289NameNumberfreshSubject_1;if (!( ( tom_is_empty_AndConstraint_Constraint(tomMatch289NameNumber_freshVar_0) || tom_equal_term_Constraint(tomMatch289NameNumber_freshVar_0, tom_empty_list_AndConstraint()) ) )) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch289NameNumber_freshVar_1=((tom_is_fun_sym_AndConstraint(tomMatch289NameNumber_freshVar_0))?(tom_get_tail_AndConstraint_Constraint(tomMatch289NameNumber_freshVar_0)):(tom_empty_list_AndConstraint()));if ( true ) {

        return constraintToString(((tom_is_fun_sym_AndConstraint(tomMatch289NameNumber_freshVar_0))?(tom_get_head_AndConstraint_Constraint(tomMatch289NameNumber_freshVar_0)):(tomMatch289NameNumber_freshVar_0))) + " && " + constraintToString(tom_append_list_AndConstraint(tomMatch289NameNumber_freshVar_1,tom_empty_list_AndConstraint()));
      }}}}}if (tom_is_fun_sym_OrConstraint(tomMatch289NameNumberfreshSubject_1)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch289NameNumber_freshVar_4=tomMatch289NameNumberfreshSubject_1;if (!( ( tom_is_empty_OrConstraint_Constraint(tomMatch289NameNumber_freshVar_4) || tom_equal_term_Constraint(tomMatch289NameNumber_freshVar_4, tom_empty_list_OrConstraint()) ) )) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch289NameNumber_freshVar_5=((tom_is_fun_sym_OrConstraint(tomMatch289NameNumber_freshVar_4))?(tom_get_tail_OrConstraint_Constraint(tomMatch289NameNumber_freshVar_4)):(tom_empty_list_OrConstraint()));if ( true ) {

        return constraintToString(((tom_is_fun_sym_OrConstraint(tomMatch289NameNumber_freshVar_4))?(tom_get_head_OrConstraint_Constraint(tomMatch289NameNumber_freshVar_4)):(tomMatch289NameNumber_freshVar_4))) + " || " + constraintToString(tom_append_list_OrConstraint(tomMatch289NameNumber_freshVar_5,tom_empty_list_OrConstraint()));
      }}}}}if (tom_is_fun_sym_MatchConstraint(tomMatch289NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch289NameNumber_freshVar_8=tom_get_slot_MatchConstraint_pattern(tomMatch289NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch289NameNumber_freshVar_9=tom_get_slot_MatchConstraint_subject(tomMatch289NameNumberfreshSubject_1);if ( true ) {

        return constraintToString(tomMatch289NameNumber_freshVar_8) + " << " + constraintToString(tomMatch289NameNumber_freshVar_9);
      }}}}}}
    
    return result;
  }

  public String constraintToString(TomList tomList) {
    StringBuffer result = new StringBuffer();
    TomTerm h = null;
    TomList tail = tomList;
    if(!tail.isEmptyconcTomTerm()) {
      h = tail.getHeadconcTomTerm();
      tail = tail.getTailconcTomTerm();
      result.append(constraintToString(h));
    }

    while(!tail.isEmptyconcTomTerm()) {
      h = tail.getHeadconcTomTerm();
      result.append("," + constraintToString(h));
      tail = tail.getTailconcTomTerm();
    }
    return result.toString();
  }
  
  public String constraintToString(TomTerm tomTerm) {
    if (tom_is_sort_TomTerm(tomTerm)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch290NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tomTerm);if (tom_is_fun_sym_TermAppl(tomMatch290NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch290NameNumber_freshVar_0=tom_get_slot_TermAppl_NameList(tomMatch290NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomList  tomMatch290NameNumber_freshVar_1=tom_get_slot_TermAppl_Args(tomMatch290NameNumberfreshSubject_1);if (tom_is_fun_sym_concTomName(tomMatch290NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch290NameNumber_freshVar_2=tomMatch290NameNumber_freshVar_0;if (!(tom_is_empty_concTomName_TomNameList(tomMatch290NameNumber_freshVar_2))) {if (tom_is_fun_sym_Name(tom_get_head_concTomName_TomNameList(tomMatch290NameNumber_freshVar_2))) {{  String  tomMatch290NameNumber_freshVar_5=tom_get_slot_Name_String(tom_get_head_concTomName_TomNameList(tomMatch290NameNumber_freshVar_2));{  String  tom_name=tomMatch290NameNumber_freshVar_5;{  tom.engine.adt.tomname.types.TomNameList  tomMatch290NameNumber_freshVar_3=tom_get_tail_concTomName_TomNameList(tomMatch290NameNumber_freshVar_2);{  tom.engine.adt.tomterm.types.TomList  tom_childrens=tomMatch290NameNumber_freshVar_1;if ( true ) {

        if (tom_childrens.isEmptyconcTomTerm()) {
          return tom_name;
        } else {
          tom_name= tom_name+ "(";
          TomTerm head = tom_childrens.getHeadconcTomTerm();
          tom_name+= constraintToString(head);
          TomList tail = tom_childrens.getTailconcTomTerm();
          while(!tail.isEmptyconcTomTerm()) {
            head = tail.getHeadconcTomTerm();
            tom_name+= "," + constraintToString(head);
            tail = tail.getTailconcTomTerm();
          }
          tom_name+= ")";
          return tom_name;
        }
      }}}}}}}}}}}}if (tom_is_fun_sym_Variable(tomMatch290NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch290NameNumber_freshVar_6=tom_get_slot_Variable_AstName(tomMatch290NameNumberfreshSubject_1);if (tom_is_fun_sym_Name(tomMatch290NameNumber_freshVar_6)) {{  String  tomMatch290NameNumber_freshVar_7=tom_get_slot_Name_String(tomMatch290NameNumber_freshVar_6);if ( true ) {

        return tomMatch290NameNumber_freshVar_7;
      }}}}}if (tom_is_fun_sym_UnamedVariable(tomMatch290NameNumberfreshSubject_1)) {if ( true ) {

        return "\\_";
      }}}}

    return "StrangePattern" + tomTerm;
  }
}
