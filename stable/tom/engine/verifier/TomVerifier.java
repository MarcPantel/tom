/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 **/

package tom.engine.verifier;

import java.io.File;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import java.util.*;
import java.util.logging.Level;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.TomMessage;
import tom.engine.tools.Tools;
import tom.engine.tools.TomGenericPlugin;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import tom.engine.exception.TomRuntimeException;
import aterm.ATerm;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.types.*;
/**
 * The TomVerifier plugin.
 */
public class TomVerifier extends TomGenericPlugin {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isFalseTL() ;}private static boolean tom_is_fun_sym_TrueTL( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isTrueTL() ;}private static boolean tom_is_fun_sym_Or( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isOr() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Or_arg1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg1() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Or_arg2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getArg2() ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_CheckInstance( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCheckInstance() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_CheckInstance_astType( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_CheckInstance_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CheckInstance_instruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstruction() ;}private static boolean tom_is_fun_sym_CheckStamp( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCheckStamp() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_CheckStamp_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_CompiledPattern_patternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPatternList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledPattern_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static boolean tom_is_fun_sym_CompiledMatch( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledMatch() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledMatch_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_CompiledMatch_option( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getOption() ;}private static boolean tom_is_fun_sym_UnamedBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isUnamedBlock() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_UnamedBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isAbstractBlock() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_AbstractBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isNop() ;}private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLetAssign() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_LetAssign_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_LetAssign_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_LetAssign_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_LetRef( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLetRef() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_LetRef_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_LetRef_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_LetRef_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLet() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Let_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Let_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_Let_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_WhileDo( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isWhileDo() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_WhileDo_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_WhileDo_doInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getDoInst() ;}private static boolean tom_is_fun_sym_DoWhile( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isDoWhile() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_DoWhile_doInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getDoInst() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_DoWhile_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isIf() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_If_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_succesInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSuccesInst() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_failureInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getFailureInst() ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tomsignature.types.InstructionList t) {  return (t!= null) && t.isSortInstructionList() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_empty_list_concInstruction() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(); }private static  tom.engine.adt.tomsignature.types.InstructionList tom_cons_list_concInstruction( tom.engine.adt.tomsignature.types.Instruction e,  tom.engine.adt.tomsignature.types.InstructionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(e,l); }private static  tom.engine.adt.tomsignature.types.Instruction tom_get_head_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_append_list_concInstruction( tom.engine.adt.tomsignature.types.InstructionList l1,  tom.engine.adt.tomsignature.types.InstructionList l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slice_concInstruction( tom.engine.adt.tomsignature.types.InstructionList begin,  tom.engine.adt.tomsignature.types.InstructionList end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tomsignature.types.InstructionList)tom_get_slice_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomsignature.types.Pattern t) {  return  (t!= null) && t.isPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_subjectList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_tomList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_guards( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getGuards() ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTermAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_TermAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_TermAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_TermAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_TermAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }  /*  * strategies with Id considered as failure  */       





  public static final String DECLARED_OPTIONS =
    "<options>" +
    "<boolean name='verify' altName='' description='Verify correctness of match compilation' value='false'/>" +
    "<boolean name='noReduce' altName='' description='Do not simplify extracted constraints (depends on --verify)' value='false'/>" +
    "<boolean name='camlSemantics' altName='' description='Verify with caml semantics for match' value='false'/>" +
    "</options>";

  public static final String ZENON_SUFFIX = ".zv";
  public static final String INTERMEDIATE_SUFFIX = ".tfix.zenon";

  protected Verifier verif;
  protected ZenonOutput zenon;

  public TomVerifier() {
    super("TomVerifier");
  }

  public void run() {
    boolean camlsemantics = getOptionBooleanValue("camlSemantics");
    boolean intermediate = getOptionBooleanValue("intermediate");
    verif = new Verifier(camlsemantics);
    verif.setSymbolTable(this.symbolTable());
    // delay the zenonoutput creation, as it needs the verifiers
    // symboltable to be properly set
    if(isActivated()) {
      zenon = new ZenonOutput(verif);
      long startChrono = System.currentTimeMillis();
      try {

        Collection matchingCode = getMatchingCode();

        // Collection derivations = getDerivations(matchingCode);
        // System.out.println("Derivations : " + derivations);

        Map rawConstraints = getRawConstraints(matchingCode);
        //System.out.println(rawConstraints);

        // reduce constraints
        verif.mappingReduce(rawConstraints);
        if (!getOptionBooleanValue("noReduce")) {
          verif.booleanReduce(rawConstraints);
        }

        Collection zspecSet = zenon.zspecSetFromConstraintMap(rawConstraints);
        if(intermediate) {
          Tools.generateOutputFromCollection(getStreamManager().getOutputFileNameWithoutSuffix() + INTERMEDIATE_SUFFIX, zspecSet);
        }

        ZenonBackend back = new ZenonBackend(verif);
        //System.out.println(back.genZSpecCollection(zen));
        String output = back.genZSpecCollection(zspecSet);

        // do not generate a file if there is no proof to do
        if (!zspecSet.isEmpty()) {
          try {
            Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(
                      getStreamManager().getOutputFileNameWithoutSuffix() + ZENON_SUFFIX
                      ))));
            writer.write(output);
            writer.close();
          } catch (IOException e) {
            getLogger().log( Level.SEVERE, TomMessage.backendIOException.getMessage(),
                new Object[]{getStreamManager().getOutputFile().getName(), e.getMessage()} );
            return;
          }
        }

        // verbose
        getLogger().log(Level.INFO, TomMessage.tomVerificationPhase.getMessage(),
                        new Integer((int)(System.currentTimeMillis()-startChrono)));

      } catch (Exception e) {
        getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                         new Object[]{getClass().getName(),
                                      getStreamManager().getInputFileName(),
                                      e.getMessage()} );
        e.printStackTrace();
      }
    } else {
      getLogger().log(Level.INFO, TomMessage.verifierInactivated.getMessage());
    }
  }

  protected Collection getMatchingCode() {
        // here the extraction stuff
        Collection matchSet = collectMatch((TomTerm)getWorkingTerm());

        Collection purified = purify(matchSet);
        // System.out.println("Purified : " + purified);

        // removes all associative patterns
        filterAssociative(purified);

        return purified;
  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomVerifier.DECLARED_OPTIONS);
  }

  private boolean isActivated() {
    return getOptionBooleanValue("verify");
  }

   private static class collectMatch  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  java.util.Collection  collection;  public collectMatch(  java.util.Collection  collection ) { super(tom_make_Identity() ); this.collection=collection; } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match1_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_CompiledMatch(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match1_1_automataInst=tom_get_slot_CompiledMatch_automataInst(tom_match1_1); { tom.engine.adt.tomsignature.types.Instruction tom_automata=tom_match1_1_automataInst; if ( true ) {


        collection.add(tom_automata);
       } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_collectMatch( java.util.Collection  t0) { return new collectMatch(t0); }



  public static Collection collectMatch(TomTerm subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collectMatch(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectMatch failed");
    }
    return result;
  }

  public Collection purify(Collection subject) {
    Collection purified = new HashSet();
    Iterator it = subject.iterator();
    while (it.hasNext()) {
      Instruction cm = (Instruction)it.next();
      // simplify the IL automata
      purified.add((simplifyIl(cm)));
    }
    return purified;
  }

   private static class ilSimplifier  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  { public ilSimplifier( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tomsignature.types.Expression visit_Expression(  tom.engine.adt.tomsignature.types.Expression tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1=(( tom.engine.adt.tomsignature.types.Expression)tom__arg); if (tom_is_fun_sym_Or(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg1=tom_get_slot_Or_arg1(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_match2_1_arg2=tom_get_slot_Or_arg2(tom_match2_1); { tom.engine.adt.tomsignature.types.Expression tom_cond=tom_match2_1_arg1; if (tom_is_fun_sym_FalseTL(tom_match2_1_arg2) ||  false ) { if ( true ) {


        return tom_cond;
       } } } } } } } } return super.visit_Expression(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_condition=tom_get_slot_If_condition(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_succesInst=tom_get_slot_If_succesInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_failureInst=tom_get_slot_If_failureInst(tom_match3_1); if (tom_is_fun_sym_TrueTL(tom_match3_1_condition) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_success=tom_match3_1_succesInst; if (tom_is_fun_sym_Nop(tom_match3_1_failureInst) ||  false ) { if ( true ) {



        return tom_success;
       } } } } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList= null ; if (tom_is_fun_sym_UnamedBlock(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_instList=tom_get_slot_UnamedBlock_instList(tom_match3_1); } else { if (tom_is_fun_sym_AbstractBlock(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_instList=tom_get_slot_AbstractBlock_instList(tom_match3_1); } } if (tom_bool_match3_1) { if (tom_is_fun_sym_concInstruction(tom_match3_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match3_1_instList_list1=tom_match3_1_instList; if (!(tom_is_empty_concInstruction_InstructionList(tom_match3_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_instList_1=tom_get_head_concInstruction_InstructionList(tom_match3_1_instList_list1);tom_match3_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match3_1_instList_list1); if (tom_is_fun_sym_CheckStamp(tom_match3_1_instList_1) ||  false ) { if (!(tom_is_empty_concInstruction_InstructionList(tom_match3_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_inst=tom_get_head_concInstruction_InstructionList(tom_match3_1_instList_list1);tom_match3_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match3_1_instList_list1); if (tom_is_empty_concInstruction_InstructionList(tom_match3_1_instList_list1)) { if ( true ) {

        return tom_inst;
       } } } } } } } } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable= null ; { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_astInstruction= null ; if (tom_is_fun_sym_Let(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_Let_variable(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetRef(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_LetRef_variable(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_LetRef_astInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetAssign(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_variable=tom_get_slot_LetAssign_variable(tom_match3_1);tom_match3_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match3_1); } } } if (tom_bool_match3_1) { if (tom_is_fun_sym_UnamedVariableStar(tom_match3_1_variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match3_1_astInstruction; if ( true ) {

        return tom_body;
       } } } } } } } if (tom_is_fun_sym_CompiledPattern(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_inst=tom_match3_1_automataInst; if ( true ) {


        return tom_inst;
       } } } } if (tom_is_fun_sym_CheckInstance(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1_instruction=tom_get_slot_CheckInstance_instruction(tom_match3_1); { tom.engine.adt.tomsignature.types.Instruction tom_inst=tom_match3_1_instruction; if ( true ) {

        return tom_inst;
       } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_ilSimplifier() { return new ilSimplifier(); }



  private Instruction simplifyIl(Instruction subject) {
    try {
      subject = (Instruction) tom_make_TopDown(tom_make_ilSimplifier()).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy simplifyIl failed");
    }
    return subject;
  }

  void filterAssociative(Collection c) {
    for (Iterator i = c.iterator(); i.hasNext(); )
      if (containsAssociativeOperator((Instruction) i.next()))
        i.remove();
  }

  boolean containsAssociativeOperator(Instruction subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_associativeOperatorCollector(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy containsAssociativeOperator failed");
    }
    return !result.isEmpty();
  }

   private static class associativeOperatorCollector  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  java.util.Collection  store;  public associativeOperatorCollector(  java.util.Collection  store ) { super(tom_make_Identity() ); this.store=store; } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match4_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_LetRef(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_subject=tom_match4_1; if ( true ) {


        store.add(tom_subject);
       } } } if (tom_is_fun_sym_WhileDo(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_subject=tom_match4_1; if ( true ) {

        store.add(tom_subject);
       } } } if (tom_is_fun_sym_DoWhile(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_subject=tom_match4_1; if ( true ) {

        store.add(tom_subject);
       } } } } } return super.visit_Instruction(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Expression visit_Expression(  tom.engine.adt.tomsignature.types.Expression tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match5_1=(( tom.engine.adt.tomsignature.types.Expression)tom__arg); if (tom_is_fun_sym_Or(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_subject=tom_match5_1; { tom.engine.adt.tomsignature.types.Expression tom_match5_1_arg1=tom_get_slot_Or_arg1(tom_match5_1); { tom.engine.adt.tomsignature.types.Expression tom_match5_1_arg2=tom_get_slot_Or_arg2(tom_match5_1); if ( true ) {




        store.add(tom_subject);
       } } } } } } } return super.visit_Expression(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_associativeOperatorCollector( java.util.Collection  t0) { return new associativeOperatorCollector(t0); }



  public Collection getDerivations(Collection subject) {
    Collection derivations = new HashSet();
    Iterator it = subject.iterator();

    while (it.hasNext()) {
      Instruction automata = (Instruction) it.next();
      Collection trees = verif.build_tree(automata);
      derivations.addAll(trees);
    }
    return derivations;
  }

  public Map getRawConstraints(Collection subject) {
    Map rawConstraints = new HashMap();
    Iterator it = subject.iterator();

    while (it.hasNext()) {
      Instruction automata = (Instruction) it.next();
      Map trees = verif.getConstraints(automata);
      rawConstraints.putAll(trees);
    }
    return rawConstraints;
  }

  public String patternToString(ATerm patternList) {
    return patternToString((PatternList) patternList);
  }

  public String patternToString(PatternList patternList) {
    StringBuffer result = new StringBuffer();
    Pattern h = null;
    PatternList tail = patternList;
    if(!tail.isEmpty()) {
      h = tail.getHead();
      tail = tail.getTail();
      result.append(patternToString(h));
    }

    while(!tail.isEmpty()) {
      h = tail.getHead();
      result.append("," + patternToString(h));
      tail = tail.getTail();
    }
    return result.toString();
  }

  public String patternToString(Pattern pattern) {
    String result = "";
     if(pattern instanceof  tom.engine.adt.tomsignature.types.Pattern) { { tom.engine.adt.tomsignature.types.Pattern tom_match6_1=(( tom.engine.adt.tomsignature.types.Pattern)pattern); if (tom_is_fun_sym_Pattern(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match6_1_tomList=tom_get_slot_Pattern_tomList(tom_match6_1); { tom.engine.adt.tomsignature.types.TomList tom_tomList=tom_match6_1_tomList; if ( true ) {

        return patternToString(tom_tomList);
       } } } } } }

    return result;
  }

  public String patternToString(TomList tomList) {
    StringBuffer result = new StringBuffer();
    TomTerm h = null;
    TomList tail = tomList;
    if(!tail.isEmpty()) {
      h = tail.getHead();
      tail = tail.getTail();
      result.append(patternToString(h));
    }

    while(!tail.isEmpty()) {
      h = tail.getHead();
      result.append("," + patternToString(h));
      tail = tail.getTail();
    }
    return result.toString();
  }
  public String patternToString(TomTerm tomTerm) {
     if(tomTerm instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match7_1=(( tom.engine.adt.tomsignature.types.TomTerm)tomTerm); if (tom_is_fun_sym_TermAppl(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match7_1_nameList=tom_get_slot_TermAppl_nameList(tom_match7_1); { tom.engine.adt.tomsignature.types.TomList tom_match7_1_args=tom_get_slot_TermAppl_args(tom_match7_1); if (tom_is_fun_sym_concTomName(tom_match7_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match7_1_nameList_list1=tom_match7_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match7_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match7_1_nameList_1=tom_get_head_concTomName_NameList(tom_match7_1_nameList_list1);tom_match7_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match7_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match7_1_nameList_1) ||  false ) { { String  tom_match7_1_nameList_1_string=tom_get_slot_Name_string(tom_match7_1_nameList_1); { String  tom_name=tom_match7_1_nameList_1_string; { tom.engine.adt.tomsignature.types.TomList tom_childrens=tom_match7_1_args; if ( true ) {

        if (tom_childrens.isEmpty()) {
          return tom_name;
        } else {
          tom_name= tom_name+ "(";
          TomTerm head = tom_childrens.getHead();
          tom_name+= patternToString(head);
          TomList tail = tom_childrens.getTail();
          while(!tail.isEmpty()) {
            head = tail.getHead();
            tom_name+= "," + patternToString(head);
            tail = tail.getTail();
          }
          tom_name+= ")";
          return tom_name;
        }
       } } } } } } } } } } } } if (tom_is_fun_sym_Variable(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match7_1_astName=tom_get_slot_Variable_astName(tom_match7_1); if (tom_is_fun_sym_Name(tom_match7_1_astName) ||  false ) { { String  tom_match7_1_astName_string=tom_get_slot_Name_string(tom_match7_1_astName); { String  tom_name=tom_match7_1_astName_string; if ( true ) {

        return tom_name;
       } } } } } } if (tom_is_fun_sym_UnamedVariable(tom_match7_1) ||  false ) { if ( true ) {

        return "\\_";
       } } } }

    return "StrangePattern" + tomTerm;
  }
}
