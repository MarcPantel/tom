/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 **/

package tom.engine.verifier;

import java.io.File;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import java.util.*;
import java.util.logging.Level;

import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.TomMessage;
import tom.engine.tools.Tools;
import tom.engine.tools.TomGenericPlugin;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.*;

import aterm.ATerm;
import tom.engine.adt.il.types.*;
import tom.engine.adt.zenon.types.*;
/**
 * The TomVerifier plugin.
 */
public class TomVerifier extends TomGenericPlugin {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ /* Generated by TOM (version 2.4alpha): Do not edit this file */ private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_CheckInstance( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isCheckInstance()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_CheckInstance_AstType( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_CheckInstance_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CheckInstance_Instruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getInstruction()  ;}private static boolean tom_is_fun_sym_CheckStamp( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isCheckStamp()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_CheckStamp_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isCompiledPattern()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_CompiledPattern_PatternList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getPatternList()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CompiledPattern_AutomataInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAutomataInst()  ;}private static boolean tom_is_fun_sym_CompiledMatch( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isCompiledMatch()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CompiledMatch_AutomataInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAutomataInst()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_CompiledMatch_Option( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_UnamedBlock( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isUnamedBlock()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_UnamedBlock_InstList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getInstList()  ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isAbstractBlock()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_AbstractBlock_InstList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getInstList()  ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isNop()  ;}private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isLetAssign()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetAssign_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetAssign_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetAssign_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_LetRef( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isLetRef()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetRef_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetRef_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetRef_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isLet()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Let_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Let_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_Let_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_WhileDo( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isWhileDo()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_WhileDo_Condition( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getCondition()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_WhileDo_DoInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getDoInst()  ;}private static boolean tom_is_fun_sym_DoWhile( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isDoWhile()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_DoWhile_DoInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getDoInst()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_DoWhile_Condition( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getCondition()  ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tominstruction.types.Instruction  t) {  return  (t!=null) && t.isIf()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_If_Condition( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getCondition()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_SuccesInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSuccesInst()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_FailureInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getFailureInst()  ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  (t!=null) && t.isName()  ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isFalseTL()  ;}private static boolean tom_is_fun_sym_TrueTL( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isTrueTL()  ;}private static boolean tom_is_fun_sym_Or( tom.engine.adt.tomexpression.types.Expression  t) {  return  (t!=null) && t.isOr()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Or_Arg1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getArg1()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Or_Arg2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getArg2()  ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isUnamedVariableStar()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isUnamedVariable()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isVariable()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  (t!=null) && t.isTermAppl()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_TermAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_TermAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_TermAppl_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_TermAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomterm.types.Pattern  t) {  return  (t!=null) && t.isPattern()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_SubjectList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_TomList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getTomList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_Guards( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getGuards()  ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getHeadconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getTailconcInstruction()  ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.isEmptyconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_terms_equal_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }   /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file */private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }   





  public static final String DECLARED_OPTIONS =
    "<options>" +
    "<boolean name='verify' altName='' description='Verify correctness of match compilation' value='false'/>" +
    "<boolean name='noReduce' altName='' description='Do not simplify extracted constraints (depends on --verify)' value='false'/>" +
    "<boolean name='camlSemantics' altName='' description='Verify with caml semantics for match' value='false'/>" +
    "</options>";

  public static final String ZENON_SUFFIX = ".zv";
  public static final String INTERMEDIATE_SUFFIX = ".tfix.zenon";

  protected Verifier verif;
  protected ZenonOutput zenon;

  public TomVerifier() {
    super("TomVerifier");
  }

  public void run() {
    boolean camlsemantics = getOptionBooleanValue("camlSemantics");
    boolean intermediate = getOptionBooleanValue("intermediate");
    verif = new Verifier(camlsemantics);
    verif.setSymbolTable(this.symbolTable());
    // delay the zenonoutput creation, as it needs the verifiers
    // symboltable to be properly set
    if(isActivated()) {
      zenon = new ZenonOutput(verif);
      long startChrono = System.currentTimeMillis();
      try {

        Collection matchingCode = getMatchingCode();

        // Collection derivations = getDerivations(matchingCode);
        // System.out.println("Derivations : " + derivations);

        Map rawConstraints = getRawConstraints(matchingCode);
        //System.out.println(rawConstraints);

        // reduce constraints
        verif.mappingReduce(rawConstraints);
        if (!getOptionBooleanValue("noReduce")) {
          verif.booleanReduce(rawConstraints);
        }

        Collection zspecSet = zenon.zspecSetFromConstraintMap(rawConstraints);
        if(intermediate) {
          Tools.generateOutputFromCollection(getStreamManager().getOutputFileNameWithoutSuffix() + INTERMEDIATE_SUFFIX, zspecSet);
        }

        ZenonBackend back = new ZenonBackend(verif);
        //System.out.println(back.genZSpecCollection(zen));
        String output = back.genZSpecCollection(zspecSet);

        // do not generate a file if there is no proof to do
        if (!zspecSet.isEmpty()) {
          try {
            Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(
                      getStreamManager().getOutputFileNameWithoutSuffix() + ZENON_SUFFIX
                      ))));
            writer.write(output);
            writer.close();
          } catch (IOException e) {
            getLogger().log( Level.SEVERE, TomMessage.backendIOException.getMessage(),
                new Object[]{getStreamManager().getOutputFile().getName(), e.getMessage()} );
            return;
          }
        }

        // verbose
        getLogger().log(Level.INFO, TomMessage.tomVerificationPhase.getMessage(),
                        new Integer((int)(System.currentTimeMillis()-startChrono)));

      } catch (Exception e) {
        getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                         new Object[]{getClass().getName(),
                                      getStreamManager().getInputFileName(),
                                      e.getMessage()} );
        e.printStackTrace();
      }
    } else {
      getLogger().log(Level.INFO, TomMessage.verifierInactivated.getMessage());
    }
  }

  protected Collection getMatchingCode() {
        // here the extraction stuff
        Collection matchSet = collectMatch((TomTerm)getWorkingTerm());

        Collection purified = purify(matchSet);
        // System.out.println("Purified : " + purified);

        // removes all associative patterns
        filterAssociative(purified);

        return purified;
  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomVerifier.DECLARED_OPTIONS);
  }

  private boolean isActivated() {
    return getOptionBooleanValue("verify");
  }

   private static class collectMatch  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  java.util.Collection  collection;  public collectMatch(  java.util.Collection  collection ) { super(tom_make_Identity() ); this.collection=collection; } public  java.util.Collection  getcollection() { return collection;} public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match1_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_CompiledMatch(tom_match1_1) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match1_1_AutomataInst=tom_get_slot_CompiledMatch_AutomataInst(tom_match1_1); { tom.engine.adt.tominstruction.types.Instruction  tom_automata=tom_match1_1_AutomataInst; if ( true ) {


        collection.add(tom_automata);
       } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_collectMatch( java.util.Collection  t0) { return new collectMatch(t0); }



  public static Collection collectMatch(TomTerm subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collectMatch(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectMatch failed");
    }
    return result;
  }

  public Collection purify(Collection subject) {
    Collection purified = new HashSet();
    Iterator it = subject.iterator();
    while (it.hasNext()) {
      Instruction cm = (Instruction)it.next();
      // simplify the IL automata
      purified.add((simplifyIl(cm)));
    }
    return purified;
  }

   private static class ilSimplifier  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { public ilSimplifier( ) { super(tom_make_Identity() ); } public  tom.engine.adt.tomexpression.types.Expression  visit_Expression(  tom.engine.adt.tomexpression.types.Expression  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomexpression.types.Expression ) { { tom.engine.adt.tomexpression.types.Expression  tom_match2_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg); if (tom_is_fun_sym_Or(tom_match2_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match2_1_Arg1=tom_get_slot_Or_Arg1(tom_match2_1); { tom.engine.adt.tomexpression.types.Expression  tom_match2_1_Arg2=tom_get_slot_Or_Arg2(tom_match2_1); { tom.engine.adt.tomexpression.types.Expression  tom_cond=tom_match2_1_Arg1; if (tom_is_fun_sym_FalseTL(tom_match2_1_Arg2) ||  false ) { if ( true ) {


        return tom_cond;
       } } } } } } } } return super.visit_Expression(tom__arg) ;  } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_If(tom_match3_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_match3_1_Condition=tom_get_slot_If_Condition(tom_match3_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1_SuccesInst=tom_get_slot_If_SuccesInst(tom_match3_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1_FailureInst=tom_get_slot_If_FailureInst(tom_match3_1); if (tom_is_fun_sym_TrueTL(tom_match3_1_Condition) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_success=tom_match3_1_SuccesInst; if (tom_is_fun_sym_Nop(tom_match3_1_FailureInst) ||  false ) { if ( true ) {



        return tom_success;
       } } } } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tominstruction.types.InstructionList  tom_match3_1_InstList= null ; if (tom_is_fun_sym_UnamedBlock(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_InstList=tom_get_slot_UnamedBlock_InstList(tom_match3_1); } else { if (tom_is_fun_sym_AbstractBlock(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match3_1); } } if (tom_bool_match3_1) { if (tom_is_fun_sym_concInstruction(tom_match3_1_InstList) ||  false ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match3_1_InstList_list1=tom_match3_1_InstList; if (!(tom_is_empty_concInstruction_InstructionList(tom_match3_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1_InstList_1=tom_get_head_concInstruction_InstructionList(tom_match3_1_InstList_list1);tom_match3_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match3_1_InstList_list1); if (tom_is_fun_sym_CheckStamp(tom_match3_1_InstList_1) ||  false ) { if (!(tom_is_empty_concInstruction_InstructionList(tom_match3_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_inst=tom_get_head_concInstruction_InstructionList(tom_match3_1_InstList_list1);tom_match3_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match3_1_InstList_list1); if (tom_is_empty_concInstruction_InstructionList(tom_match3_1_InstList_list1)) { if ( true ) {

        return tom_inst;
       } } } } } } } } } } } } {boolean tom_bool_match3_1= false ; { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_Variable= null ; { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1_AstInstruction= null ; if (tom_is_fun_sym_Let(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_Variable=tom_get_slot_Let_Variable(tom_match3_1);tom_match3_1_AstInstruction=tom_get_slot_Let_AstInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetRef(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_Variable=tom_get_slot_LetRef_Variable(tom_match3_1);tom_match3_1_AstInstruction=tom_get_slot_LetRef_AstInstruction(tom_match3_1); } else { if (tom_is_fun_sym_LetAssign(tom_match3_1)) {tom_bool_match3_1= true ;tom_match3_1_Variable=tom_get_slot_LetAssign_Variable(tom_match3_1);tom_match3_1_AstInstruction=tom_get_slot_LetAssign_AstInstruction(tom_match3_1); } } } if (tom_bool_match3_1) { if (tom_is_fun_sym_UnamedVariableStar(tom_match3_1_Variable) || tom_is_fun_sym_UnamedVariable(tom_match3_1_Variable) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_body=tom_match3_1_AstInstruction; if ( true ) {

        return tom_body;
       } } } } } } } if (tom_is_fun_sym_CompiledPattern(tom_match3_1) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1_AutomataInst=tom_get_slot_CompiledPattern_AutomataInst(tom_match3_1); { tom.engine.adt.tominstruction.types.Instruction  tom_inst=tom_match3_1_AutomataInst; if ( true ) {


        return tom_inst;
       } } } } if (tom_is_fun_sym_CheckInstance(tom_match3_1) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match3_1_Instruction=tom_get_slot_CheckInstance_Instruction(tom_match3_1); { tom.engine.adt.tominstruction.types.Instruction  tom_inst=tom_match3_1_Instruction; if ( true ) {

        return tom_inst;
       } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_ilSimplifier() { return new ilSimplifier(); }



  private Instruction simplifyIl(Instruction subject) {
    try {
      subject = (Instruction) tom_make_TopDown(tom_make_ilSimplifier()).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy simplifyIl failed");
    }
    return subject;
  }

  void filterAssociative(Collection c) {
    for (Iterator i = c.iterator(); i.hasNext(); )
      if (containsAssociativeOperator((Instruction) i.next()))
        i.remove();
  }

  boolean containsAssociativeOperator(Instruction subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_associativeOperatorCollector(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy containsAssociativeOperator failed");
    }
    return !result.isEmpty();
  }

   private static class associativeOperatorCollector  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  java.util.Collection  store;  public associativeOperatorCollector(  java.util.Collection  store ) { super(tom_make_Identity() ); this.store=store; } public  java.util.Collection  getstore() { return store;} public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match4_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if (tom_is_fun_sym_LetRef(tom_match4_1) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_subject=tom_match4_1; if ( true ) {


        store.add(tom_subject);
       } } } if (tom_is_fun_sym_WhileDo(tom_match4_1) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_subject=tom_match4_1; if ( true ) {

        store.add(tom_subject);
       } } } if (tom_is_fun_sym_DoWhile(tom_match4_1) ||  false ) { { tom.engine.adt.tominstruction.types.Instruction  tom_subject=tom_match4_1; if ( true ) {

        store.add(tom_subject);
       } } } } } return super.visit_Instruction(tom__arg) ;  } public  tom.engine.adt.tomexpression.types.Expression  visit_Expression(  tom.engine.adt.tomexpression.types.Expression  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomexpression.types.Expression ) { { tom.engine.adt.tomexpression.types.Expression  tom_match5_1=(( tom.engine.adt.tomexpression.types.Expression )tom__arg); if (tom_is_fun_sym_Or(tom_match5_1) ||  false ) { { tom.engine.adt.tomexpression.types.Expression  tom_subject=tom_match5_1; { tom.engine.adt.tomexpression.types.Expression  tom_match5_1_Arg1=tom_get_slot_Or_Arg1(tom_match5_1); { tom.engine.adt.tomexpression.types.Expression  tom_match5_1_Arg2=tom_get_slot_Or_Arg2(tom_match5_1); if ( true ) {




        store.add(tom_subject);
       } } } } } } } return super.visit_Expression(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_associativeOperatorCollector( java.util.Collection  t0) { return new associativeOperatorCollector(t0); }



  public Collection getDerivations(Collection subject) {
    Collection derivations = new HashSet();
    Iterator it = subject.iterator();

    while (it.hasNext()) {
      Instruction automata = (Instruction) it.next();
      Collection trees = verif.build_tree(automata);
      derivations.addAll(trees);
    }
    return derivations;
  }

  public Map getRawConstraints(Collection subject) {
    Map rawConstraints = new HashMap();
    Iterator it = subject.iterator();

    while (it.hasNext()) {
      Instruction automata = (Instruction) it.next();
      Map trees = verif.getConstraints(automata);
      rawConstraints.putAll(trees);
    }
    return rawConstraints;
  }

  public String patternToString(ATerm patternList) {
    return patternToString((PatternList) patternList);
  }

  public String patternToString(PatternList patternList) {
    StringBuffer result = new StringBuffer();
    Pattern h = null;
    PatternList tail = patternList;
    if(!tail.isEmptyconcPattern()) {
      h = tail.getHeadconcPattern();
      tail = tail.getTailconcPattern();
      result.append(patternToString(h));
    }

    while(!tail.isEmptyconcPattern()) {
      h = tail.getHeadconcPattern();
      result.append("," + patternToString(h));
      tail = tail.getTailconcPattern();
    }
    return result.toString();
  }

  public String patternToString(Pattern pattern) {
    String result = "";
     if(pattern instanceof  tom.engine.adt.tomterm.types.Pattern ) { { tom.engine.adt.tomterm.types.Pattern  tom_match6_1=(( tom.engine.adt.tomterm.types.Pattern )pattern); if (tom_is_fun_sym_Pattern(tom_match6_1) ||  false ) { { tom.engine.adt.tomterm.types.TomList  tom_match6_1_TomList=tom_get_slot_Pattern_TomList(tom_match6_1); { tom.engine.adt.tomterm.types.TomList  tom_tomList=tom_match6_1_TomList; if ( true ) {

        return patternToString(tom_tomList);
       } } } } } }

    return result;
  }

  public String patternToString(TomList tomList) {
    StringBuffer result = new StringBuffer();
    TomTerm h = null;
    TomList tail = tomList;
    if(!tail.isEmptyconcTomTerm()) {
      h = tail.getHeadconcTomTerm();
      tail = tail.getTailconcTomTerm();
      result.append(patternToString(h));
    }

    while(!tail.isEmptyconcTomTerm()) {
      h = tail.getHeadconcTomTerm();
      result.append("," + patternToString(h));
      tail = tail.getTailconcTomTerm();
    }
    return result.toString();
  }
  public String patternToString(TomTerm tomTerm) {
     if(tomTerm instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match7_1=(( tom.engine.adt.tomterm.types.TomTerm )tomTerm); if (tom_is_fun_sym_TermAppl(tom_match7_1) ||  false ) { { tom.engine.adt.tomname.types.TomNameList  tom_match7_1_NameList=tom_get_slot_TermAppl_NameList(tom_match7_1); { tom.engine.adt.tomterm.types.TomList  tom_match7_1_Args=tom_get_slot_TermAppl_Args(tom_match7_1); if (tom_is_fun_sym_concTomName(tom_match7_1_NameList) ||  false ) { { tom.engine.adt.tomname.types.TomNameList  tom_match7_1_NameList_list1=tom_match7_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match7_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match7_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match7_1_NameList_list1);tom_match7_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match7_1_NameList_list1); if (tom_is_fun_sym_Name(tom_match7_1_NameList_1) ||  false ) { { String  tom_match7_1_NameList_1_String=tom_get_slot_Name_String(tom_match7_1_NameList_1); { String  tom_name=tom_match7_1_NameList_1_String; { tom.engine.adt.tomterm.types.TomList  tom_childrens=tom_match7_1_Args; if ( true ) {

        if (tom_childrens.isEmptyconcTomTerm()) {
          return tom_name;
        } else {
          tom_name= tom_name+ "(";
          TomTerm head = tom_childrens.getHeadconcTomTerm();
          tom_name+= patternToString(head);
          TomList tail = tom_childrens.getTailconcTomTerm();
          while(!tail.isEmptyconcTomTerm()) {
            head = tail.getHeadconcTomTerm();
            tom_name+= "," + patternToString(head);
            tail = tail.getTailconcTomTerm();
          }
          tom_name+= ")";
          return tom_name;
        }
       } } } } } } } } } } } } if (tom_is_fun_sym_Variable(tom_match7_1) ||  false ) { { tom.engine.adt.tomname.types.TomName  tom_match7_1_AstName=tom_get_slot_Variable_AstName(tom_match7_1); if (tom_is_fun_sym_Name(tom_match7_1_AstName) ||  false ) { { String  tom_match7_1_AstName_String=tom_get_slot_Name_String(tom_match7_1_AstName); { String  tom_name=tom_match7_1_AstName_String; if ( true ) {

        return tom_name;
       } } } } } } if (tom_is_fun_sym_UnamedVariable(tom_match7_1) ||  false ) { if ( true ) {

        return "\\_";
       } } } }

    return "StrangePattern" + tomTerm;
  }
}
