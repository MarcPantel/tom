/* Generated by TOM (version 2.3rc0): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;

public class ZenonBackend {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.3rc0): Do not edit this file *//* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected  char  tom_set_stamp_char( char  c) { return  c ; }protected void tom_check_stamp_char( char  c) { ; }protected boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }protected  Character  tom_set_stamp_Character( Character  c) { return  c ; }protected void tom_check_stamp_Character( Character  c) { ; }protected boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }protected boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }protected  Character  tom_make_Char( char  c) { return  new Character(c) ; }protected  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } protected  String  tom_set_stamp_String( String  s) { return  s ; }protected void tom_check_stamp_String( String  s) { ; }protected boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }protected boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }protected  String  tom_empty_list_concString() { return  "" ; }protected  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }protected  char  tom_get_head_concString_String( String  s) { return  s.charAt(0) ; }protected  String  tom_get_tail_concString_String( String  s) { return  s.substring(1) ; }protected boolean tom_is_empty_concString_String( String  s) { return  (s.length()==0) ; }protected  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_concString_String(l1)) {     return l2;    } else if(tom_is_empty_concString_String(l2)) {     return l1;    } else if(tom_is_empty_concString_String(( String )tom_get_tail_concString_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(l1),tom_append_list_concString(( String )tom_get_tail_concString_String(l1),l2));    }   }  protected  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_concString_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_concString_String(begin),end));    }   }    /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  protected boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 2.3rc0): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  protected boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; } protected  tom.engine.adt.zenon.types.ZSpec tom_get_implementation_ZSpec( tom.engine.adt.zenon.types.ZSpec t) { return t; }protected  tom.engine.adt.zenon.types.ZSpec tom_set_stamp_ZSpec( tom.engine.adt.zenon.types.ZSpec t) { return (tom.engine.adt.zenon.types.ZSpec)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZSpec( tom.engine.adt.zenon.types.ZSpec t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZSpec(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zthm( tom.engine.adt.zenon.types.ZSpec t) { return  (t!= null) && t.isZthm(); }protected  tom.engine.adt.zenon.types.ZSpec tom_make_zthm( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZAxiomList t1) { return  getZenonFactory().makeZSpec_Zthm(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zthm_thm( tom.engine.adt.zenon.types.ZSpec t) { return  t.getThm(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_slot_zthm_by( tom.engine.adt.zenon.types.ZSpec t) { return  t.getBy(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_implementation_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return t; }protected  tom.engine.adt.zenon.types.ZAxiomList tom_set_stamp_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return (tom.engine.adt.zenon.types.ZAxiomList)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZAxiomList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList t) { return (t!= null) && t.isSortZAxiomList(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_empty_list_zby() { return getZenonFactory().makeZAxiomList(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom e,  tom.engine.adt.zenon.types.ZAxiomList l) { return getZenonFactory().makeZAxiomList(e,l); }protected  tom.engine.adt.zenon.types.ZAxiom tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) { return l.getHead(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) { return l.getTail(); }protected boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) { return l.isEmpty(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList l2) {    if(tom_is_empty_zby_ZAxiomList(l1)) {     return l2;    } else if(tom_is_empty_zby_ZAxiomList(l2)) {     return l1;    } else if(tom_is_empty_zby_ZAxiomList(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1))) {     return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),tom_append_list_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1),l2));    }   }  protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList begin,  tom.engine.adt.zenon.types.ZAxiomList end) {    if(tom_terms_equal_ZAxiomList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_empty_list_zby();    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(begin),( tom.engine.adt.zenon.types.ZAxiomList)tom_get_slice_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptyZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_make_emptyZAxiomList() { return getZenonFactory().makeZAxiomList(); }protected boolean tom_is_fun_sym_manyZAxiomList( tom.engine.adt.zenon.types.ZAxiomList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_make_manyZAxiomList( tom.engine.adt.zenon.types.ZAxiom e,  tom.engine.adt.zenon.types.ZAxiomList l) { return getZenonFactory().makeZAxiomList(e,l); }protected  tom.engine.adt.zenon.types.ZAxiom tom_get_slot_manyZAxiomList_head( tom.engine.adt.zenon.types.ZAxiomList t) { return  t.getHead(); }protected  tom.engine.adt.zenon.types.ZAxiomList tom_get_slot_manyZAxiomList_tail( tom.engine.adt.zenon.types.ZAxiomList t) { return  t.getTail(); }protected  tom.engine.adt.zenon.types.ZAxiom tom_get_implementation_ZAxiom( tom.engine.adt.zenon.types.ZAxiom t) { return t; }protected  tom.engine.adt.zenon.types.ZAxiom tom_set_stamp_ZAxiom( tom.engine.adt.zenon.types.ZAxiom t) { return (tom.engine.adt.zenon.types.ZAxiom)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZAxiom( tom.engine.adt.zenon.types.ZAxiom t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZAxiom(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zaxiom( tom.engine.adt.zenon.types.ZAxiom t) { return  (t!= null) && t.isZaxiom(); }protected  tom.engine.adt.zenon.types.ZAxiom tom_make_zaxiom( String  t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZAxiom_Zaxiom(t0, t1); }protected  String  tom_get_slot_zaxiom_name( tom.engine.adt.zenon.types.ZAxiom t) { return  t.getName(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zaxiom_ax( tom.engine.adt.zenon.types.ZAxiom t) { return  t.getAx(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_implementation_ZExpr( tom.engine.adt.zenon.types.ZExpr t) { return t; }protected  tom.engine.adt.zenon.types.ZExpr tom_set_stamp_ZExpr( tom.engine.adt.zenon.types.ZExpr t) { return (tom.engine.adt.zenon.types.ZExpr)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZExpr( tom.engine.adt.zenon.types.ZExpr t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZExpr(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zequiv( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZequiv(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZExpr_Zequiv(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zequiv_lte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLte(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zequiv_rte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRte(); }protected boolean tom_is_fun_sym_znot( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZnot(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_znot( tom.engine.adt.zenon.types.ZExpr t0) { return  getZenonFactory().makeZExpr_Znot(t0); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_znot_nex( tom.engine.adt.zenon.types.ZExpr t) { return  t.getNex(); }protected boolean tom_is_fun_sym_zor( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZor(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zor( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZExpr_Zor(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zor_lte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLte(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zor_rte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRte(); }protected boolean tom_is_fun_sym_zand( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZand(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zand( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  getZenonFactory().makeZExpr_Zand(t0, t1); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zand_lte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLte(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zand_rte( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRte(); }protected boolean tom_is_fun_sym_zexists( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZexists(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zexists( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZType t1,  tom.engine.adt.zenon.types.ZExpr t2) { return  getZenonFactory().makeZExpr_Zexists(t0, t1, t2); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zexists_var( tom.engine.adt.zenon.types.ZExpr t) { return  t.getVar(); }protected  tom.engine.adt.zenon.types.ZType tom_get_slot_zexists_aztype( tom.engine.adt.zenon.types.ZExpr t) { return  t.getAztype(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zexists_expr( tom.engine.adt.zenon.types.ZExpr t) { return  t.getExpr(); }protected boolean tom_is_fun_sym_zforall( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZforall(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zforall( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZType t1,  tom.engine.adt.zenon.types.ZExpr t2) { return  getZenonFactory().makeZExpr_Zforall(t0, t1, t2); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zforall_var( tom.engine.adt.zenon.types.ZExpr t) { return  t.getVar(); }protected  tom.engine.adt.zenon.types.ZType tom_get_slot_zforall_aztype( tom.engine.adt.zenon.types.ZExpr t) { return  t.getAztype(); }protected  tom.engine.adt.zenon.types.ZExpr tom_get_slot_zforall_expr( tom.engine.adt.zenon.types.ZExpr t) { return  t.getExpr(); }protected boolean tom_is_fun_sym_zeq( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZeq(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zeq( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZTerm t1) { return  getZenonFactory().makeZExpr_Zeq(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zeq_lt( tom.engine.adt.zenon.types.ZExpr t) { return  t.getLt(); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zeq_rt( tom.engine.adt.zenon.types.ZExpr t) { return  t.getRt(); }protected boolean tom_is_fun_sym_zisfsym( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZisfsym(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZSymbol t1) { return  getZenonFactory().makeZExpr_Zisfsym(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zisfsym_t( tom.engine.adt.zenon.types.ZExpr t) { return  t.getT(); }protected  tom.engine.adt.zenon.types.ZSymbol tom_get_slot_zisfsym_symbol( tom.engine.adt.zenon.types.ZExpr t) { return  t.getSymbol(); }protected boolean tom_is_fun_sym_zfalse( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZfalse(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_zfalse() { return  getZenonFactory().makeZExpr_Zfalse(); }protected boolean tom_is_fun_sym_ztrue( tom.engine.adt.zenon.types.ZExpr t) { return  (t!= null) && t.isZtrue(); }protected  tom.engine.adt.zenon.types.ZExpr tom_make_ztrue() { return  getZenonFactory().makeZExpr_Ztrue(); }protected  tom.engine.adt.zenon.types.ZType tom_get_implementation_ZType( tom.engine.adt.zenon.types.ZType t) { return t; }protected  tom.engine.adt.zenon.types.ZType tom_set_stamp_ZType( tom.engine.adt.zenon.types.ZType t) { return (tom.engine.adt.zenon.types.ZType)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZType( tom.engine.adt.zenon.types.ZType t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZType(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_ztype( tom.engine.adt.zenon.types.ZType t) { return  (t!= null) && t.isZtype(); }protected  tom.engine.adt.zenon.types.ZType tom_make_ztype( String  t0) { return  getZenonFactory().makeZType_Ztype(t0); }protected  String  tom_get_slot_ztype_tname( tom.engine.adt.zenon.types.ZType t) { return  t.getTname(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_implementation_ZTermList( tom.engine.adt.zenon.types.ZTermList t) { return t; }protected  tom.engine.adt.zenon.types.ZTermList tom_set_stamp_ZTermList( tom.engine.adt.zenon.types.ZTermList t) { return (tom.engine.adt.zenon.types.ZTermList)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZTermList( tom.engine.adt.zenon.types.ZTermList t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZTermList(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_concZTerm( tom.engine.adt.zenon.types.ZTermList t) { return (t!= null) && t.isSortZTermList(); }protected  tom.engine.adt.zenon.types.ZTermList tom_empty_list_concZTerm() { return getZenonFactory().makeZTermList(); }protected  tom.engine.adt.zenon.types.ZTermList tom_cons_list_concZTerm( tom.engine.adt.zenon.types.ZTerm e,  tom.engine.adt.zenon.types.ZTermList l) { return getZenonFactory().makeZTermList(e,l); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_head_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) { return l.getHead(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_tail_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) { return l.getTail(); }protected boolean tom_is_empty_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) { return l.isEmpty(); }protected  tom.engine.adt.zenon.types.ZTermList tom_append_list_concZTerm( tom.engine.adt.zenon.types.ZTermList l1,  tom.engine.adt.zenon.types.ZTermList l2) {    if(tom_is_empty_concZTerm_ZTermList(l1)) {     return l2;    } else if(tom_is_empty_concZTerm_ZTermList(l2)) {     return l1;    } else if(tom_is_empty_concZTerm_ZTermList(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(l1))) {     return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(l1),tom_append_list_concZTerm(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(l1),l2));    }   }  protected  tom.engine.adt.zenon.types.ZTermList tom_get_slice_concZTerm( tom.engine.adt.zenon.types.ZTermList begin,  tom.engine.adt.zenon.types.ZTermList end) {    if(tom_terms_equal_ZTermList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZTermList)tom_empty_list_concZTerm();    } else {      return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(begin),( tom.engine.adt.zenon.types.ZTermList)tom_get_slice_concZTerm(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(begin),end));    }   }  protected boolean tom_is_fun_sym_emptyZTermList( tom.engine.adt.zenon.types.ZTermList t) { return  (t!= null) && t.isEmpty(); }protected  tom.engine.adt.zenon.types.ZTermList tom_make_emptyZTermList() { return getZenonFactory().makeZTermList(); }protected boolean tom_is_fun_sym_manyZTermList( tom.engine.adt.zenon.types.ZTermList t) { return  (t!= null) && t.isMany(); }protected  tom.engine.adt.zenon.types.ZTermList tom_make_manyZTermList( tom.engine.adt.zenon.types.ZTerm e,  tom.engine.adt.zenon.types.ZTermList l) { return getZenonFactory().makeZTermList(e,l); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_manyZTermList_head( tom.engine.adt.zenon.types.ZTermList t) { return  t.getHead(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_slot_manyZTermList_tail( tom.engine.adt.zenon.types.ZTermList t) { return  t.getTail(); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_implementation_ZTerm( tom.engine.adt.zenon.types.ZTerm t) { return t; }protected  tom.engine.adt.zenon.types.ZTerm tom_set_stamp_ZTerm( tom.engine.adt.zenon.types.ZTerm t) { return (tom.engine.adt.zenon.types.ZTerm)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZTerm( tom.engine.adt.zenon.types.ZTerm t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZTerm(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zsl( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZsl(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zsl( tom.engine.adt.zenon.types.ZTerm t0,  String  t1) { return  getZenonFactory().makeZTerm_Zsl(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zsl_abst( tom.engine.adt.zenon.types.ZTerm t) { return  t.getAbst(); }protected  String  tom_get_slot_zsl_name( tom.engine.adt.zenon.types.ZTerm t) { return  t.getName(); }protected boolean tom_is_fun_sym_zst( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZst(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zst( tom.engine.adt.zenon.types.ZTerm t0,  int  t1) { return  getZenonFactory().makeZTerm_Zst(t0, t1); }protected  tom.engine.adt.zenon.types.ZTerm tom_get_slot_zst_abst( tom.engine.adt.zenon.types.ZTerm t) { return  t.getAbst(); }protected  int  tom_get_slot_zst_index( tom.engine.adt.zenon.types.ZTerm t) { return  t.getIndex(); }protected boolean tom_is_fun_sym_zappl( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZappl(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zappl( tom.engine.adt.zenon.types.ZSymbol t0,  tom.engine.adt.zenon.types.ZTermList t1) { return  getZenonFactory().makeZTerm_Zappl(t0, t1); }protected  tom.engine.adt.zenon.types.ZSymbol tom_get_slot_zappl_zsymb( tom.engine.adt.zenon.types.ZTerm t) { return  t.getZsymb(); }protected  tom.engine.adt.zenon.types.ZTermList tom_get_slot_zappl_termlist( tom.engine.adt.zenon.types.ZTerm t) { return  t.getTermlist(); }protected boolean tom_is_fun_sym_zvar( tom.engine.adt.zenon.types.ZTerm t) { return  (t!= null) && t.isZvar(); }protected  tom.engine.adt.zenon.types.ZTerm tom_make_zvar( String  t0) { return  getZenonFactory().makeZTerm_Zvar(t0); }protected  String  tom_get_slot_zvar_varname( tom.engine.adt.zenon.types.ZTerm t) { return  t.getVarname(); }protected  tom.engine.adt.zenon.types.ZSymbol tom_get_implementation_ZSymbol( tom.engine.adt.zenon.types.ZSymbol t) { return t; }protected  tom.engine.adt.zenon.types.ZSymbol tom_set_stamp_ZSymbol( tom.engine.adt.zenon.types.ZSymbol t) { return (tom.engine.adt.zenon.types.ZSymbol)t.setAnnotation(getZenonFactory().getPureFactory().makeList(),getZenonFactory().getPureFactory().makeList()); }protected void tom_check_stamp_ZSymbol( tom.engine.adt.zenon.types.ZSymbol t) { if(t.getAnnotation(getZenonFactory().getPureFactory().makeList()) == getZenonFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }protected boolean tom_terms_equal_ZSymbol(Object t1, Object t2) { return t1.equals(t2); }protected boolean tom_is_fun_sym_zsymbol( tom.engine.adt.zenon.types.ZSymbol t) { return  (t!= null) && t.isZsymbol(); }protected  tom.engine.adt.zenon.types.ZSymbol tom_make_zsymbol( String  t0) { return  getZenonFactory().makeZSymbol_Zsymbol(t0); }protected  String  tom_get_slot_zsymbol_name( tom.engine.adt.zenon.types.ZSymbol t) { return  t.getName(); }  
  // ------------------------------------------------------------

  protected ZenonFactory zfactory;
  private Verifier verifier; // is it useful ?
  private TomIlTools tomiltools;

  public ZenonBackend(Verifier verifier) {
    zfactory = ZenonFactory.getInstance(SingletonFactory.getInstance());
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  protected final ZenonFactory getZenonFactory() {
    return zfactory;
  }

  public String genZSymbol(ZSymbol symbol) {
     { tom.engine.adt.zenon.types.ZSymbol tom_match1_1=(( tom.engine.adt.zenon.types.ZSymbol)symbol); if(tom_is_fun_sym_zsymbol(tom_match1_1) ||  false ) { { String  tom_match1_1_name=tom_get_slot_zsymbol_name(tom_match1_1); { String  name=tom_match1_1_name;

        // manage builtins
        String symbolName = tomiltools.replaceNumbersByString(name);
        return symbolName+ "_";
      }} }}

    return "errorZSymbol";
  }

  public String genZType(ZType type) {
     { tom.engine.adt.zenon.types.ZType tom_match2_1=(( tom.engine.adt.zenon.types.ZType)type); if(tom_is_fun_sym_ztype(tom_match2_1) ||  false ) { { String  tom_match2_1_tname=tom_get_slot_ztype_tname(tom_match2_1); { String  name=tom_match2_1_tname;

        return name;
      }} }}

    return "errorZType";
  }

  public String genZTerm(ZTerm term) {
     { tom.engine.adt.zenon.types.ZTerm tom_match3_1=(( tom.engine.adt.zenon.types.ZTerm)term); if(tom_is_fun_sym_zvar(tom_match3_1) ||  false ) { { String  tom_match3_1_varname=tom_get_slot_zvar_varname(tom_match3_1); { String  name=tom_match3_1_varname;
 return name; }} } if(tom_is_fun_sym_zappl(tom_match3_1) ||  false ) { { tom.engine.adt.zenon.types.ZSymbol tom_match3_1_zsymb=tom_get_slot_zappl_zsymb(tom_match3_1); { tom.engine.adt.zenon.types.ZTermList tom_match3_1_termlist=tom_get_slot_zappl_termlist(tom_match3_1); if(tom_is_fun_sym_zsymbol(tom_match3_1_zsymb) ||  false ) { { String  tom_match3_1_zsymb_name=tom_get_slot_zsymbol_name(tom_match3_1_zsymb); { String  name=tom_match3_1_zsymb_name; { tom.engine.adt.zenon.types.ZTermList tlist=tom_match3_1_termlist;
 
        // manage builtins
        String realName = tomiltools.replaceNumbersByString(name);
        return "(" + realName +" "+genZTermList(tlist)+")"; 
      }}} }}} } if(tom_is_fun_sym_zst(tom_match3_1) ||  false ) { { tom.engine.adt.zenon.types.ZTerm tom_match3_1_abst=tom_get_slot_zst_abst(tom_match3_1); { int  tom_match3_1_index=tom_get_slot_zst_index(tom_match3_1); { tom.engine.adt.zenon.types.ZTerm t=tom_match3_1_abst; { int  idx=tom_match3_1_index;
 
        return "(_"+idx+" "+genZTerm(t)+")";
      }}}} } if(tom_is_fun_sym_zsl(tom_match3_1) ||  false ) { { tom.engine.adt.zenon.types.ZTerm tom_match3_1_abst=tom_get_slot_zsl_abst(tom_match3_1); { String  tom_match3_1_name=tom_get_slot_zsl_name(tom_match3_1); { tom.engine.adt.zenon.types.ZTerm t=tom_match3_1_abst; { String  slot=tom_match3_1_name;
 
        return "(_"+slot+" "+genZTerm(t)+")";
      }}}} }}

    return "errorZTerm";
  }

  public String genZTermList(ZTermList tl) {
    StringBuffer res = new StringBuffer();
    while (!tl.isEmpty()) {
      res.append(" "+genZTerm(tl.getHead()));
      tl = tl.getTail();
    }
    return res.toString();
  }

  public String genZExpr(ZExpr expr) {
     { tom.engine.adt.zenon.types.ZExpr tom_match4_1=(( tom.engine.adt.zenon.types.ZExpr)expr); if(tom_is_fun_sym_ztrue(tom_match4_1) ||  false ) {
 return "True"; } if(tom_is_fun_sym_zfalse(tom_match4_1) ||  false ) {
 return "False"; } if(tom_is_fun_sym_zisfsym(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZTerm tom_match4_1_t=tom_get_slot_zisfsym_t(tom_match4_1); { tom.engine.adt.zenon.types.ZSymbol tom_match4_1_symbol=tom_get_slot_zisfsym_symbol(tom_match4_1); { tom.engine.adt.zenon.types.ZTerm t=tom_match4_1_t; { tom.engine.adt.zenon.types.ZSymbol s=tom_match4_1_symbol;

        return "((symb "+genZTerm(t)+") = "+genZSymbol(s)+")";
      }}}} } if(tom_is_fun_sym_zeq(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZTerm tom_match4_1_lt=tom_get_slot_zeq_lt(tom_match4_1); { tom.engine.adt.zenon.types.ZTerm tom_match4_1_rt=tom_get_slot_zeq_rt(tom_match4_1); { tom.engine.adt.zenon.types.ZTerm l=tom_match4_1_lt; { tom.engine.adt.zenon.types.ZTerm r=tom_match4_1_rt;

        return "("+genZTerm(l)+" = "+genZTerm(r)+")";
      }}}} } if(tom_is_fun_sym_zforall(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZTerm tom_match4_1_var=tom_get_slot_zforall_var(tom_match4_1); { tom.engine.adt.zenon.types.ZType tom_match4_1_aztype=tom_get_slot_zforall_aztype(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr tom_match4_1_expr=tom_get_slot_zforall_expr(tom_match4_1); { tom.engine.adt.zenon.types.ZTerm v=tom_match4_1_var; { tom.engine.adt.zenon.types.ZType type=tom_match4_1_aztype; { tom.engine.adt.zenon.types.ZExpr e=tom_match4_1_expr;

        return "forall "+genZTerm(v)+" : "+genZType(type)+",\n "+genZExpr(e);
      }}}}}} } if(tom_is_fun_sym_zexists(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZTerm tom_match4_1_var=tom_get_slot_zexists_var(tom_match4_1); { tom.engine.adt.zenon.types.ZType tom_match4_1_aztype=tom_get_slot_zexists_aztype(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr tom_match4_1_expr=tom_get_slot_zexists_expr(tom_match4_1); { tom.engine.adt.zenon.types.ZTerm v=tom_match4_1_var; { tom.engine.adt.zenon.types.ZType type=tom_match4_1_aztype; { tom.engine.adt.zenon.types.ZExpr e=tom_match4_1_expr;

        return "exists "+genZTerm(v)+" : "+genZType(type)+", "+genZExpr(e);
      }}}}}} } if(tom_is_fun_sym_zand(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZExpr tom_match4_1_lte=tom_get_slot_zand_lte(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr tom_match4_1_rte=tom_get_slot_zand_rte(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr l=tom_match4_1_lte; { tom.engine.adt.zenon.types.ZExpr r=tom_match4_1_rte;

        if(l== tom_make_ztrue()) {
          return "("+ genZExpr(r) +")";
        }
        else if (r== tom_make_ztrue()) {
          return "("+ genZExpr(l) +")";
        }
        return "("+genZExpr(l)+") /\\ ("+genZExpr(r)+")";
      }}}} } if(tom_is_fun_sym_zor(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZExpr tom_match4_1_lte=tom_get_slot_zor_lte(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr tom_match4_1_rte=tom_get_slot_zor_rte(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr l=tom_match4_1_lte; { tom.engine.adt.zenon.types.ZExpr r=tom_match4_1_rte;

        if(l== tom_make_zfalse()) {
          return "("+ genZExpr(r) +")";
        }
        else if (r== tom_make_zfalse()) {
          return "("+ genZExpr(l) +")";
        }
        return "("+genZExpr(l)+") \\/ ("+genZExpr(r)+")";
      }}}} } if(tom_is_fun_sym_znot(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZExpr tom_match4_1_nex=tom_get_slot_znot_nex(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr e=tom_match4_1_nex;
 return "~("+genZExpr(e)+")"; }} } if(tom_is_fun_sym_zequiv(tom_match4_1) ||  false ) { { tom.engine.adt.zenon.types.ZExpr tom_match4_1_lte=tom_get_slot_zequiv_lte(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr tom_match4_1_rte=tom_get_slot_zequiv_rte(tom_match4_1); { tom.engine.adt.zenon.types.ZExpr l=tom_match4_1_lte; { tom.engine.adt.zenon.types.ZExpr r=tom_match4_1_rte;

        return "("+genZExpr(l)+") <-> ("+genZExpr(r)+")";
      }}}} }}

    return "errorZExpr";
  }

  public String genZAxiom(ZAxiom axiom) {
     { tom.engine.adt.zenon.types.ZAxiom tom_match5_1=(( tom.engine.adt.zenon.types.ZAxiom)axiom); if(tom_is_fun_sym_zaxiom(tom_match5_1) ||  false ) { { String  tom_match5_1_name=tom_get_slot_zaxiom_name(tom_match5_1); { tom.engine.adt.zenon.types.ZExpr tom_match5_1_ax=tom_get_slot_zaxiom_ax(tom_match5_1); { String  name=tom_match5_1_name; { tom.engine.adt.zenon.types.ZExpr ax=tom_match5_1_ax;

        // manage builtins
        String realName = tomiltools.replaceNumbersByString(name);
        return "Parameter " + realName +" :\n    " + genZExpr(ax) + ".\n";
      }}}} }}

    return "errorZAxiom";
  }

  public String genZAxiomList(ZAxiomList axlist) {
    StringBuffer res = new StringBuffer();
    while (!axlist.isEmpty()) {
      res.append(genZAxiom(axlist.getHead()));
      axlist = axlist.getTail();
    }
    // XXX: Outputs the axiom for True (will disappear soon)
    res.append("Parameter true_is_true : True.\n");
    
    return res.toString();
  }

  public String genZSpec(ZSpec spec) {
     { tom.engine.adt.zenon.types.ZSpec tom_match6_1=(( tom.engine.adt.zenon.types.ZSpec)spec); if(tom_is_fun_sym_zthm(tom_match6_1) ||  false ) { { tom.engine.adt.zenon.types.ZExpr tom_match6_1_thm=tom_get_slot_zthm_thm(tom_match6_1); { tom.engine.adt.zenon.types.ZAxiomList tom_match6_1_by=tom_get_slot_zthm_by(tom_match6_1); { tom.engine.adt.zenon.types.ZExpr thm=tom_match6_1_thm; { tom.engine.adt.zenon.types.ZAxiomList by=tom_match6_1_by;

        return "\n" 
          + genZExpr(thm) 
          + "\n" 
          + genZAxiomList(by)+"\n";
      }}}} }}

    return "errorZSpec";
  }

  public String genZSpecCollection(Collection collection) {
    StringBuffer out = new StringBuffer();

    out.append("\nRequire Import zenon8.\n");
    out.append("\nParameter T S : Set.\n");

    // collects all used symbols
    Collection symbols = new HashSet();
    Iterator it = collection.iterator();
    while(it.hasNext()) {
      ZSpec local = (ZSpec) it.next();
      symbols.addAll(tomiltools.collectSymbolsFromZSpec(local));
    }

    // Generates types for symbols
    it = symbols.iterator();
    while(it.hasNext()) {
      String symbolName = (String) it.next();
      out.append("Parameter " + tomiltools.replaceNumbersByString(symbolName) +" :");
      // arity of the symbol ?
      List names = tomiltools.subtermList(symbolName);
      for(int i = 0; i<names.size();i++) {
        out.append(" T ->");
      }
      out.append(" T.\n");
      if(names.size() != 0) {
        out.append("Parameter ");
        Iterator nameIt = names.iterator();
        while(nameIt.hasNext()) {
          String localName = (String) nameIt.next();
          out.append("_" + localName + " ");
        }
        out.append(": T -> T.\n");
      }
    }


    out.append("Parameter symb : T -> S.\n");
    // XXX: define True
    out.append("Parameter true_is_true : True.\n");
    // Generates types for symbols
    it = symbols.iterator();
    out.append("Parameter ");
    while(it.hasNext()) {
      String symbolName = (String) it.next();
      out.append(genZSymbol(tom_make_zsymbol(symbolName)) +" ");
    }
    out.append(": S.\n");


    // Generates the axioms for coq
    ZAxiomList axiomsDef = tomiltools.symbolsDefinition(symbols);
    ZAxiomList axiomsSub = tomiltools.subtermsDefinition(symbols);
    ZAxiomList axioms = tom_append_list_zby(axiomsDef,tom_append_list_zby(axiomsSub,tom_empty_list_zby()));
    while (!axioms.isEmpty()) {
      out.append(genZAxiom(axioms.getHead()));
      axioms = axioms.getTail();
    }

    // Generates the different proof obligations
    int number=1;
    it = collection.iterator();
    while (it.hasNext()) {
      out.append("\n%%begin-auto-proof\n");
      out.append("%%location: []\n");
      out.append("%%name: theorem"+number+"\n");
      out.append("%%statement\n");
      out.append(genZSpec((ZSpec)it.next()));
      out.append("%%end-auto-proof\n");
      number++;
    }
    return out.toString();
  }
}
