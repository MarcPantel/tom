/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2008, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;

public class ZenonBackend {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.engine.adt.zenon.types.ZAxiomList  tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList  l2) {     if( l1.isEmptyzby() ) {       return l2;     } else if( l2.isEmptyzby() ) {       return l1;     } else if(  l1.getTailzby() .isEmptyzby() ) {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( l1.getHeadzby() ,l2) ;     } else {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( l1.getHeadzby() ,tom_append_list_zby( l1.getTailzby() ,l2)) ;     }   }   private static   tom.engine.adt.zenon.types.ZAxiomList  tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList  begin,  tom.engine.adt.zenon.types.ZAxiomList  end, tom.engine.adt.zenon.types.ZAxiomList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyzby()  ||  (end== tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( begin.getHeadzby() ,( tom.engine.adt.zenon.types.ZAxiomList )tom_get_slice_zby( begin.getTailzby() ,end,tail)) ;   }    
  // ------------------------------------------------------------

  private Verifier verifier; // is it useful ?
  private TomIlTools tomiltools;

  public ZenonBackend(Verifier verifier) {
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  public String genZSymbol(ZSymbol symbol) {
    {if ( (symbol instanceof tom.engine.adt.zenon.types.ZSymbol) ) {{  tom.engine.adt.zenon.types.ZSymbol  tomMatch321NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZSymbol )symbol);{  tom.engine.adt.zenon.types.ZSymbol  tomMatch321NameNumber_freshVar_1=tomMatch321NameNumberfreshSubject_1;if ( (tomMatch321NameNumber_freshVar_1 instanceof tom.engine.adt.zenon.types.zsymbol.zsymbol) ) {{  String  tomMatch321NameNumber_freshVar_0= tomMatch321NameNumber_freshVar_1.getName() ;if ( true ) {

        // manage builtins
        String symbolName = tomiltools.replaceNumbersByString(tomMatch321NameNumber_freshVar_0);
        return symbolName+ "_";
      }}}}}}}

    return "errorZSymbol";
  }

  public String genZType(ZType type) {
    {if ( (type instanceof tom.engine.adt.zenon.types.ZType) ) {{  tom.engine.adt.zenon.types.ZType  tomMatch322NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZType )type);{  tom.engine.adt.zenon.types.ZType  tomMatch322NameNumber_freshVar_1=tomMatch322NameNumberfreshSubject_1;if ( (tomMatch322NameNumber_freshVar_1 instanceof tom.engine.adt.zenon.types.ztype.ztype) ) {{  String  tomMatch322NameNumber_freshVar_0= tomMatch322NameNumber_freshVar_1.getTname() ;if ( true ) {

        return tomMatch322NameNumber_freshVar_0;
      }}}}}}}

    return "errorZType";
  }

  public String genZTerm(ZTerm term) {
    {if ( (term instanceof tom.engine.adt.zenon.types.ZTerm) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZTerm )term);{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumber_freshVar_1=tomMatch323NameNumberfreshSubject_1;if ( (tomMatch323NameNumber_freshVar_1 instanceof tom.engine.adt.zenon.types.zterm.zvar) ) {{  String  tomMatch323NameNumber_freshVar_0= tomMatch323NameNumber_freshVar_1.getVarname() ;if ( true ) {
 return tomMatch323NameNumber_freshVar_0; }}}}}}if ( (term instanceof tom.engine.adt.zenon.types.ZTerm) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZTerm )term);{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumber_freshVar_4=tomMatch323NameNumberfreshSubject_1;if ( (tomMatch323NameNumber_freshVar_4 instanceof tom.engine.adt.zenon.types.zterm.zappl) ) {{  tom.engine.adt.zenon.types.ZSymbol  tomMatch323NameNumber_freshVar_2= tomMatch323NameNumber_freshVar_4.getZsymb() ;{  tom.engine.adt.zenon.types.ZTermList  tomMatch323NameNumber_freshVar_3= tomMatch323NameNumber_freshVar_4.getTermlist() ;{  tom.engine.adt.zenon.types.ZSymbol  tomMatch323NameNumber_freshVar_6=tomMatch323NameNumber_freshVar_2;if ( (tomMatch323NameNumber_freshVar_6 instanceof tom.engine.adt.zenon.types.zsymbol.zsymbol) ) {{  String  tomMatch323NameNumber_freshVar_5= tomMatch323NameNumber_freshVar_6.getName() ;if ( true ) {
 
        // manage builtins
        String realName = tomiltools.replaceNumbersByString(tomMatch323NameNumber_freshVar_5);
        return "(" + realName +" "+genZTermList(tomMatch323NameNumber_freshVar_3)+")"; 
      }}}}}}}}}}if ( (term instanceof tom.engine.adt.zenon.types.ZTerm) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZTerm )term);{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumber_freshVar_9=tomMatch323NameNumberfreshSubject_1;if ( (tomMatch323NameNumber_freshVar_9 instanceof tom.engine.adt.zenon.types.zterm.zst) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumber_freshVar_7= tomMatch323NameNumber_freshVar_9.getAbst() ;{  int  tomMatch323NameNumber_freshVar_8= tomMatch323NameNumber_freshVar_9.getIndex() ;if ( true ) {
 
        return "(_"+tomMatch323NameNumber_freshVar_8+" "+genZTerm(tomMatch323NameNumber_freshVar_7)+")";
      }}}}}}}if ( (term instanceof tom.engine.adt.zenon.types.ZTerm) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZTerm )term);{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumber_freshVar_12=tomMatch323NameNumberfreshSubject_1;if ( (tomMatch323NameNumber_freshVar_12 instanceof tom.engine.adt.zenon.types.zterm.zsl) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch323NameNumber_freshVar_10= tomMatch323NameNumber_freshVar_12.getAbst() ;{  String  tomMatch323NameNumber_freshVar_11= tomMatch323NameNumber_freshVar_12.getName() ;if ( true ) {
 
        return "(_"+tomMatch323NameNumber_freshVar_11+" "+genZTerm(tomMatch323NameNumber_freshVar_10)+")";
      }}}}}}}}

    return "errorZTerm";
  }

  public String genZTermList(ZTermList tl) {
    StringBuilder res = new StringBuilder();
    while (!tl.isEmptyconcZTerm()) {
      res.append(" "+genZTerm(tl.getHeadconcZTerm()));
      tl = tl.getTailconcZTerm();
    }
    return res.toString();
  }

  public String genZExpr(ZExpr expr) {
    {if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_0=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_0 instanceof tom.engine.adt.zenon.types.zexpr.ztrue) ) {if ( true ) {
 return "True";}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_1=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_1 instanceof tom.engine.adt.zenon.types.zexpr.zfalse) ) {if ( true ) {
 return "False";}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_4=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_4 instanceof tom.engine.adt.zenon.types.zexpr.zisfsym) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch324NameNumber_freshVar_2= tomMatch324NameNumber_freshVar_4.getT() ;{  tom.engine.adt.zenon.types.ZSymbol  tomMatch324NameNumber_freshVar_3= tomMatch324NameNumber_freshVar_4.getSymbol() ;if ( true ) {

        return "((symb "+genZTerm(tomMatch324NameNumber_freshVar_2)+") = "+genZSymbol(tomMatch324NameNumber_freshVar_3)+")";
      }}}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_7=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_7 instanceof tom.engine.adt.zenon.types.zexpr.zeq) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch324NameNumber_freshVar_5= tomMatch324NameNumber_freshVar_7.getLt() ;{  tom.engine.adt.zenon.types.ZTerm  tomMatch324NameNumber_freshVar_6= tomMatch324NameNumber_freshVar_7.getRt() ;if ( true ) {

        return "("+genZTerm(tomMatch324NameNumber_freshVar_5)+" = "+genZTerm(tomMatch324NameNumber_freshVar_6)+")";
      }}}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_11=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_11 instanceof tom.engine.adt.zenon.types.zexpr.zforall) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch324NameNumber_freshVar_8= tomMatch324NameNumber_freshVar_11.getVar() ;{  tom.engine.adt.zenon.types.ZType  tomMatch324NameNumber_freshVar_9= tomMatch324NameNumber_freshVar_11.getAztype() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_10= tomMatch324NameNumber_freshVar_11.getExpr() ;if ( true ) {

        return "forall "+genZTerm(tomMatch324NameNumber_freshVar_8)+" : "+genZType(tomMatch324NameNumber_freshVar_9)+",\n "+genZExpr(tomMatch324NameNumber_freshVar_10);
      }}}}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_15=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_15 instanceof tom.engine.adt.zenon.types.zexpr.zexists) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch324NameNumber_freshVar_12= tomMatch324NameNumber_freshVar_15.getVar() ;{  tom.engine.adt.zenon.types.ZType  tomMatch324NameNumber_freshVar_13= tomMatch324NameNumber_freshVar_15.getAztype() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_14= tomMatch324NameNumber_freshVar_15.getExpr() ;if ( true ) {

        return "exists "+genZTerm(tomMatch324NameNumber_freshVar_12)+" : "+genZType(tomMatch324NameNumber_freshVar_13)+", "+genZExpr(tomMatch324NameNumber_freshVar_14);
      }}}}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_18=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_18 instanceof tom.engine.adt.zenon.types.zexpr.zand) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_16= tomMatch324NameNumber_freshVar_18.getLte() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_17= tomMatch324NameNumber_freshVar_18.getRte() ;{  tom.engine.adt.zenon.types.ZExpr  tom_l=tomMatch324NameNumber_freshVar_16;{  tom.engine.adt.zenon.types.ZExpr  tom_r=tomMatch324NameNumber_freshVar_17;if ( true ) {

        if(tom_l==  tom.engine.adt.zenon.types.zexpr.ztrue.make() ) {
          return "("+ genZExpr(tom_r) +")";
        }
        else if (tom_r==  tom.engine.adt.zenon.types.zexpr.ztrue.make() ) {
          return "("+ genZExpr(tom_l) +")";
        }
        return "("+genZExpr(tom_l)+") /\\ ("+genZExpr(tom_r)+")";
      }}}}}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_21=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_21 instanceof tom.engine.adt.zenon.types.zexpr.zor) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_19= tomMatch324NameNumber_freshVar_21.getLte() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_20= tomMatch324NameNumber_freshVar_21.getRte() ;{  tom.engine.adt.zenon.types.ZExpr  tom_l=tomMatch324NameNumber_freshVar_19;{  tom.engine.adt.zenon.types.ZExpr  tom_r=tomMatch324NameNumber_freshVar_20;if ( true ) {

        if(tom_l==  tom.engine.adt.zenon.types.zexpr.zfalse.make() ) {
          return "("+ genZExpr(tom_r) +")";
        }
        else if (tom_r==  tom.engine.adt.zenon.types.zexpr.zfalse.make() ) {
          return "("+ genZExpr(tom_l) +")";
        }
        return "("+genZExpr(tom_l)+") \\/ ("+genZExpr(tom_r)+")";
      }}}}}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_23=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_23 instanceof tom.engine.adt.zenon.types.zexpr.znot) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_22= tomMatch324NameNumber_freshVar_23.getNex() ;if ( true ) {
 return "~("+genZExpr(tomMatch324NameNumber_freshVar_22)+")"; }}}}}}if ( (expr instanceof tom.engine.adt.zenon.types.ZExpr) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_26=tomMatch324NameNumberfreshSubject_1;if ( (tomMatch324NameNumber_freshVar_26 instanceof tom.engine.adt.zenon.types.zexpr.zequiv) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_24= tomMatch324NameNumber_freshVar_26.getLte() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch324NameNumber_freshVar_25= tomMatch324NameNumber_freshVar_26.getRte() ;if ( true ) {

        return "("+genZExpr(tomMatch324NameNumber_freshVar_24)+") <-> ("+genZExpr(tomMatch324NameNumber_freshVar_25)+")";
      }}}}}}}}

    return "errorZExpr";
  }

  public String genZAxiom(ZAxiom axiom) {
    {if ( (axiom instanceof tom.engine.adt.zenon.types.ZAxiom) ) {{  tom.engine.adt.zenon.types.ZAxiom  tomMatch325NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZAxiom )axiom);{  tom.engine.adt.zenon.types.ZAxiom  tomMatch325NameNumber_freshVar_2=tomMatch325NameNumberfreshSubject_1;if ( (tomMatch325NameNumber_freshVar_2 instanceof tom.engine.adt.zenon.types.zaxiom.zaxiom) ) {{  String  tomMatch325NameNumber_freshVar_0= tomMatch325NameNumber_freshVar_2.getName() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch325NameNumber_freshVar_1= tomMatch325NameNumber_freshVar_2.getAx() ;if ( true ) {

        // manage builtins
        String realName = tomiltools.replaceNumbersByString(tomMatch325NameNumber_freshVar_0);
        return "Parameter " + realName +" :\n    " + genZExpr(tomMatch325NameNumber_freshVar_1) + ".\n";
      }}}}}}}}

    return "errorZAxiom";
  }

  public String genZAxiomList(ZAxiomList axlist) {
    StringBuilder res = new StringBuilder();
    while (!axlist.isEmptyzby()) {
      res.append(genZAxiom(axlist.getHeadzby()));
      axlist = axlist.getTailzby();
    }
    return res.toString();
  }

  public String genZSpec(ZSpec spec) {
    {if ( (spec instanceof tom.engine.adt.zenon.types.ZSpec) ) {{  tom.engine.adt.zenon.types.ZSpec  tomMatch326NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZSpec )spec);{  tom.engine.adt.zenon.types.ZSpec  tomMatch326NameNumber_freshVar_2=tomMatch326NameNumberfreshSubject_1;if ( (tomMatch326NameNumber_freshVar_2 instanceof tom.engine.adt.zenon.types.zspec.zthm) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch326NameNumber_freshVar_0= tomMatch326NameNumber_freshVar_2.getThm() ;{  tom.engine.adt.zenon.types.ZAxiomList  tomMatch326NameNumber_freshVar_1= tomMatch326NameNumber_freshVar_2.getBy() ;if ( true ) {

        return "\n" 
          + genZExpr(tomMatch326NameNumber_freshVar_0) 
          + "\n" 
          + genZAxiomList(tomMatch326NameNumber_freshVar_1)+"\n";
      }}}}}}}}

    return "errorZSpec";
  }

  public String genFunctionSymbolDeclaration(String symbolName) {
    StringBuilder res = new StringBuilder();
    res.append("Parameter ");
    res.append(tomiltools.replaceNumbersByString(symbolName)+" :");
    // take care of the arity
    List names = tomiltools.subtermList(symbolName);
    for(int i = 0; i<names.size();i++) {
      res.append(" T ->");
    }
    res.append(" T.\n");
    return res.toString();
  }

  public String genZSpecCollection(Collection collection) {
    StringBuilder out = new StringBuilder();

    out.append("\nRequire Import zenon.\n");
    out.append("\nParameter T S : Set.\n");

    // collects all used symbols
    Collection symbols = new HashSet();
    Iterator it = collection.iterator();
    while(it.hasNext()) {
      ZSpec local = (ZSpec) it.next();
      symbols.addAll(tomiltools.collectSymbolsFromZSpec(local));
    }

    // Generates types for symbol functions
    it = symbols.iterator();
    while(it.hasNext()) {
      String symbolName = (String) it.next();
      out.append(genFunctionSymbolDeclaration(symbolName));
      // declares the subterm functions if necessary
      List names = tomiltools.subtermList(symbolName);
      if(names.size() != 0) {
        out.append("Parameter ");
        Iterator nameIt = names.iterator();
        while(nameIt.hasNext()) {
          String localName = (String) nameIt.next();
          out.append("_" + localName + " ");
        }
        out.append(": T -> T.\n");
      }
    }


    out.append("Parameter symb : T -> S.\n");
    // XXX: define True
    out.append("Parameter true_is_true : True.\n");
    // Generates types for symbols
    it = symbols.iterator();
    out.append("Parameter ");
    while(it.hasNext()) {
      String symbolName = (String) it.next();
      out.append(genZSymbol( tom.engine.adt.zenon.types.zsymbol.zsymbol.make(symbolName) ) +" ");
    }
    out.append(": S.\n");


    // Generates the axioms for coq
    ZAxiomList axiomsDef = tomiltools.symbolsDefinition(symbols);
    ZAxiomList axiomsSub = tomiltools.subtermsDefinition(symbols);
    ZAxiomList axioms = tom_append_list_zby(axiomsDef,tom_append_list_zby(axiomsSub, tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ));
    while (!axioms.isEmptyzby()) {
      out.append(genZAxiom(axioms.getHeadzby()));
      axioms = axioms.getTailzby();
    }

    // Generates the different proof obligations
    int number=1;
    it = collection.iterator();
    while (it.hasNext()) {
      out.append("\n%%begin-auto-proof\n");
      //out.append("%%location: []\n");
      out.append("%%name: theorem"+number+"\n");
      //out.append("%%syntax: tom\n");
      //out.append("%%statement\n");
      out.append(genZSpec((ZSpec)it.next()));

      // XXX: Outputs the axiom for True (Newer versions of zenon may remove this need)
      out.append("Parameter true_is_true : True.\n");

      // Generates types for symbol functions
      // (otherwise, zenon can not know T is not empty)
      // also adds a Parameter fake : T. to make sure zenon knows T is
      // not empty
      Iterator symbIt = symbols.iterator();
      while(symbIt.hasNext()) {
        String symbolName = (String) symbIt.next();
        out.append(genFunctionSymbolDeclaration(symbolName));
      }
      out.append("Parameter tom_fake : T.\n");
    
      out.append("%%end-auto-proof\n");
      number++;
    }
    return out.toString();
  }
}
