/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import aterm.pure.*;
import java.util.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;

public class ZenonBackend {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_char(char t) { return  true ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_is_sort_int(int t) { return  true ;} private static  tom.engine.adt.zenon.types.ZExpr  tom_make_ztrue() { return  tom.engine.adt.zenon.types.zexpr.ztrue.make() ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zfalse() { return  tom.engine.adt.zenon.types.zexpr.zfalse.make() ; }private static  tom.engine.adt.zenon.types.ZAxiomList  tom_empty_list_zby() { return  tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ; }   private static   tom.engine.adt.zenon.types.ZAxiomList  tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList  l2) {     if( l1.isEmptyzby() ) {       return l2;     } else if( l2.isEmptyzby() ) {       return l1;     } else if(  l1.getTailzby() .isEmptyzby() ) {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( l1.getHeadzby() ,l2) ;     } else {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( l1.getHeadzby() ,tom_append_list_zby( l1.getTailzby() ,l2)) ;     }   }   private static   tom.engine.adt.zenon.types.ZAxiomList  tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList  begin,  tom.engine.adt.zenon.types.ZAxiomList  end, tom.engine.adt.zenon.types.ZAxiomList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make( begin.getHeadzby() ,( tom.engine.adt.zenon.types.ZAxiomList )tom_get_slice_zby( begin.getTailzby() ,end,tail)) ;     }   }    
  // ------------------------------------------------------------

  private Verifier verifier; // is it useful ?
  private TomIlTools tomiltools;

  public ZenonBackend(Verifier verifier) {
    this.verifier = verifier;
    this.tomiltools = new TomIlTools(verifier);
  }

  public String genZSymbol(ZSymbol symbol) {
    if ( symbol instanceof tom.engine.adt.zenon.types.ZSymbol ) {{  tom.engine.adt.zenon.types.ZSymbol  tomMatch314NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZSymbol )symbol);if ( (tomMatch314NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zsymbol.zsymbol) ) {{  String  tomMatch314NameNumber_freshVar_0= tomMatch314NameNumberfreshSubject_1.getName() ;if ( true ) {

        // manage builtins
        String symbolName = tomiltools.replaceNumbersByString(tomMatch314NameNumber_freshVar_0);
        return symbolName+ "_";
      }}}}}

    return "errorZSymbol";
  }

  public String genZType(ZType type) {
    if ( type instanceof tom.engine.adt.zenon.types.ZType ) {{  tom.engine.adt.zenon.types.ZType  tomMatch315NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZType )type);if ( (tomMatch315NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.ztype.ztype) ) {{  String  tomMatch315NameNumber_freshVar_0= tomMatch315NameNumberfreshSubject_1.getTname() ;if ( true ) {

        return tomMatch315NameNumber_freshVar_0;
      }}}}}

    return "errorZType";
  }

  public String genZTerm(ZTerm term) {
    if ( term instanceof tom.engine.adt.zenon.types.ZTerm ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch316NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZTerm )term);if ( (tomMatch316NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zterm.zvar) ) {{  String  tomMatch316NameNumber_freshVar_0= tomMatch316NameNumberfreshSubject_1.getVarname() ;if ( true ) {
 return tomMatch316NameNumber_freshVar_0; }}}if ( (tomMatch316NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zterm.zappl) ) {{  tom.engine.adt.zenon.types.ZSymbol  tomMatch316NameNumber_freshVar_1= tomMatch316NameNumberfreshSubject_1.getZsymb() ;{  tom.engine.adt.zenon.types.ZTermList  tomMatch316NameNumber_freshVar_2= tomMatch316NameNumberfreshSubject_1.getTermlist() ;if ( (tomMatch316NameNumber_freshVar_1 instanceof tom.engine.adt.zenon.types.zsymbol.zsymbol) ) {{  String  tomMatch316NameNumber_freshVar_3= tomMatch316NameNumber_freshVar_1.getName() ;if ( true ) {
 
        // manage builtins
        String realName = tomiltools.replaceNumbersByString(tomMatch316NameNumber_freshVar_3);
        return "(" + realName +" "+genZTermList(tomMatch316NameNumber_freshVar_2)+")"; 
      }}}}}}if ( (tomMatch316NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zterm.zst) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch316NameNumber_freshVar_4= tomMatch316NameNumberfreshSubject_1.getAbst() ;{  int  tomMatch316NameNumber_freshVar_5= tomMatch316NameNumberfreshSubject_1.getIndex() ;if ( true ) {
 
        return "(_"+tomMatch316NameNumber_freshVar_5+" "+genZTerm(tomMatch316NameNumber_freshVar_4)+")";
      }}}}if ( (tomMatch316NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zterm.zsl) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch316NameNumber_freshVar_6= tomMatch316NameNumberfreshSubject_1.getAbst() ;{  String  tomMatch316NameNumber_freshVar_7= tomMatch316NameNumberfreshSubject_1.getName() ;if ( true ) {
 
        return "(_"+tomMatch316NameNumber_freshVar_7+" "+genZTerm(tomMatch316NameNumber_freshVar_6)+")";
      }}}}}}

    return "errorZTerm";
  }

  public String genZTermList(ZTermList tl) {
    StringBuffer res = new StringBuffer();
    while (!tl.isEmptyconcZTerm()) {
      res.append(" "+genZTerm(tl.getHeadconcZTerm()));
      tl = tl.getTailconcZTerm();
    }
    return res.toString();
  }

  public String genZExpr(ZExpr expr) {
    if ( expr instanceof tom.engine.adt.zenon.types.ZExpr ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZExpr )expr);if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.ztrue) ) {if ( true ) {
 return "True";}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zfalse) ) {if ( true ) {
 return "False";}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zisfsym) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch317NameNumber_freshVar_0= tomMatch317NameNumberfreshSubject_1.getT() ;{  tom.engine.adt.zenon.types.ZSymbol  tomMatch317NameNumber_freshVar_1= tomMatch317NameNumberfreshSubject_1.getSymbol() ;if ( true ) {

        return "((symb "+genZTerm(tomMatch317NameNumber_freshVar_0)+") = "+genZSymbol(tomMatch317NameNumber_freshVar_1)+")";
      }}}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zeq) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch317NameNumber_freshVar_2= tomMatch317NameNumberfreshSubject_1.getLt() ;{  tom.engine.adt.zenon.types.ZTerm  tomMatch317NameNumber_freshVar_3= tomMatch317NameNumberfreshSubject_1.getRt() ;if ( true ) {

        return "("+genZTerm(tomMatch317NameNumber_freshVar_2)+" = "+genZTerm(tomMatch317NameNumber_freshVar_3)+")";
      }}}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zforall) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch317NameNumber_freshVar_4= tomMatch317NameNumberfreshSubject_1.getVar() ;{  tom.engine.adt.zenon.types.ZType  tomMatch317NameNumber_freshVar_5= tomMatch317NameNumberfreshSubject_1.getAztype() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_6= tomMatch317NameNumberfreshSubject_1.getExpr() ;if ( true ) {

        return "forall "+genZTerm(tomMatch317NameNumber_freshVar_4)+" : "+genZType(tomMatch317NameNumber_freshVar_5)+",\n "+genZExpr(tomMatch317NameNumber_freshVar_6);
      }}}}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zexists) ) {{  tom.engine.adt.zenon.types.ZTerm  tomMatch317NameNumber_freshVar_7= tomMatch317NameNumberfreshSubject_1.getVar() ;{  tom.engine.adt.zenon.types.ZType  tomMatch317NameNumber_freshVar_8= tomMatch317NameNumberfreshSubject_1.getAztype() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_9= tomMatch317NameNumberfreshSubject_1.getExpr() ;if ( true ) {

        return "exists "+genZTerm(tomMatch317NameNumber_freshVar_7)+" : "+genZType(tomMatch317NameNumber_freshVar_8)+", "+genZExpr(tomMatch317NameNumber_freshVar_9);
      }}}}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zand) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_10= tomMatch317NameNumberfreshSubject_1.getLte() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_11= tomMatch317NameNumberfreshSubject_1.getRte() ;{  tom.engine.adt.zenon.types.ZExpr  tom_l=tomMatch317NameNumber_freshVar_10;{  tom.engine.adt.zenon.types.ZExpr  tom_r=tomMatch317NameNumber_freshVar_11;if ( true ) {

        if(tom_l== tom_make_ztrue()) {
          return "("+ genZExpr(tom_r) +")";
        }
        else if (tom_r== tom_make_ztrue()) {
          return "("+ genZExpr(tom_l) +")";
        }
        return "("+genZExpr(tom_l)+") /\\ ("+genZExpr(tom_r)+")";
      }}}}}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zor) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_12= tomMatch317NameNumberfreshSubject_1.getLte() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_13= tomMatch317NameNumberfreshSubject_1.getRte() ;{  tom.engine.adt.zenon.types.ZExpr  tom_l=tomMatch317NameNumber_freshVar_12;{  tom.engine.adt.zenon.types.ZExpr  tom_r=tomMatch317NameNumber_freshVar_13;if ( true ) {

        if(tom_l== tom_make_zfalse()) {
          return "("+ genZExpr(tom_r) +")";
        }
        else if (tom_r== tom_make_zfalse()) {
          return "("+ genZExpr(tom_l) +")";
        }
        return "("+genZExpr(tom_l)+") \\/ ("+genZExpr(tom_r)+")";
      }}}}}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.znot) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_14= tomMatch317NameNumberfreshSubject_1.getNex() ;if ( true ) {
 return "~("+genZExpr(tomMatch317NameNumber_freshVar_14)+")"; }}}if ( (tomMatch317NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zexpr.zequiv) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_15= tomMatch317NameNumberfreshSubject_1.getLte() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch317NameNumber_freshVar_16= tomMatch317NameNumberfreshSubject_1.getRte() ;if ( true ) {

        return "("+genZExpr(tomMatch317NameNumber_freshVar_15)+") <-> ("+genZExpr(tomMatch317NameNumber_freshVar_16)+")";
      }}}}}}

    return "errorZExpr";
  }

  public String genZAxiom(ZAxiom axiom) {
    if ( axiom instanceof tom.engine.adt.zenon.types.ZAxiom ) {{  tom.engine.adt.zenon.types.ZAxiom  tomMatch318NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZAxiom )axiom);if ( (tomMatch318NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zaxiom.zaxiom) ) {{  String  tomMatch318NameNumber_freshVar_0= tomMatch318NameNumberfreshSubject_1.getName() ;{  tom.engine.adt.zenon.types.ZExpr  tomMatch318NameNumber_freshVar_1= tomMatch318NameNumberfreshSubject_1.getAx() ;if ( true ) {

        // manage builtins
        String realName = tomiltools.replaceNumbersByString(tomMatch318NameNumber_freshVar_0);
        return "Parameter " + realName +" :\n    " + genZExpr(tomMatch318NameNumber_freshVar_1) + ".\n";
      }}}}}}

    return "errorZAxiom";
  }

  public String genZAxiomList(ZAxiomList axlist) {
    StringBuffer res = new StringBuffer();
    while (!axlist.isEmptyzby()) {
      res.append(genZAxiom(axlist.getHeadzby()));
      axlist = axlist.getTailzby();
    }
    return res.toString();
  }

  public String genZSpec(ZSpec spec) {
    if ( spec instanceof tom.engine.adt.zenon.types.ZSpec ) {{  tom.engine.adt.zenon.types.ZSpec  tomMatch319NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZSpec )spec);if ( (tomMatch319NameNumberfreshSubject_1 instanceof tom.engine.adt.zenon.types.zspec.zthm) ) {{  tom.engine.adt.zenon.types.ZExpr  tomMatch319NameNumber_freshVar_0= tomMatch319NameNumberfreshSubject_1.getThm() ;{  tom.engine.adt.zenon.types.ZAxiomList  tomMatch319NameNumber_freshVar_1= tomMatch319NameNumberfreshSubject_1.getBy() ;if ( true ) {

        return "\n" 
          + genZExpr(tomMatch319NameNumber_freshVar_0) 
          + "\n" 
          + genZAxiomList(tomMatch319NameNumber_freshVar_1)+"\n";
      }}}}}}

    return "errorZSpec";
  }

  public String genFunctionSymbolDeclaration(String symbolName) {
    StringBuffer res = new StringBuffer();
    res.append("Parameter ");
    res.append(tomiltools.replaceNumbersByString(symbolName)+" :");
    // take care of the arity
    List names = tomiltools.subtermList(symbolName);
    for(int i = 0; i<names.size();i++) {
      res.append(" T ->");
    }
    res.append(" T.\n");
    return res.toString();
  }

  public String genZSpecCollection(Collection collection) {
    StringBuffer out = new StringBuffer();

    out.append("\nRequire Import zenon.\n");
    out.append("\nParameter T S : Set.\n");

    // collects all used symbols
    Collection symbols = new HashSet();
    Iterator it = collection.iterator();
    while(it.hasNext()) {
      ZSpec local = (ZSpec) it.next();
      symbols.addAll(tomiltools.collectSymbolsFromZSpec(local));
    }

    // Generates types for symbol functions
    it = symbols.iterator();
    while(it.hasNext()) {
      String symbolName = (String) it.next();
      out.append(genFunctionSymbolDeclaration(symbolName));
      // declares the subterm functions if necessary
      List names = tomiltools.subtermList(symbolName);
      if(names.size() != 0) {
        out.append("Parameter ");
        Iterator nameIt = names.iterator();
        while(nameIt.hasNext()) {
          String localName = (String) nameIt.next();
          out.append("_" + localName + " ");
        }
        out.append(": T -> T.\n");
      }
    }


    out.append("Parameter symb : T -> S.\n");
    // XXX: define True
    out.append("Parameter true_is_true : True.\n");
    // Generates types for symbols
    it = symbols.iterator();
    out.append("Parameter ");
    while(it.hasNext()) {
      String symbolName = (String) it.next();
      out.append(genZSymbol( tom.engine.adt.zenon.types.zsymbol.zsymbol.make(symbolName) ) +" ");
    }
    out.append(": S.\n");


    // Generates the axioms for coq
    ZAxiomList axiomsDef = tomiltools.symbolsDefinition(symbols);
    ZAxiomList axiomsSub = tomiltools.subtermsDefinition(symbols);
    ZAxiomList axioms = tom_append_list_zby(axiomsDef,tom_append_list_zby(axiomsSub,tom_empty_list_zby()));
    while (!axioms.isEmptyzby()) {
      out.append(genZAxiom(axioms.getHeadzby()));
      axioms = axioms.getTailzby();
    }

    // Generates the different proof obligations
    int number=1;
    it = collection.iterator();
    while (it.hasNext()) {
      out.append("\n%%begin-auto-proof\n");
      //out.append("%%location: []\n");
      out.append("%%name: theorem"+number+"\n");
      //out.append("%%syntax: tom\n");
      //out.append("%%statement\n");
      out.append(genZSpec((ZSpec)it.next()));

      // XXX: Outputs the axiom for True (Newer versions of zenon may remove this need)
      out.append("Parameter true_is_true : True.\n");

      // Generates types for symbol functions
      // (otherwise, zenon can not know T is not empty)
      // also adds a Parameter fake : T. to make sure zenon knows T is
      // not empty
      Iterator symbIt = symbols.iterator();
      while(symbIt.hasNext()) {
        String symbolName = (String) symbIt.next();
        out.append(genFunctionSymbolDeclaration(symbolName));
      }
      out.append("Parameter tom_fake : T.\n");
    
      out.append("%%end-auto-proof\n");
      number++;
    }
    return out.toString();
  }
}
