/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import java.util.*;
import tom.engine.tools.SymbolTable;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.il.*;
import tom.engine.adt.il.types.*;

import tom.engine.exception.TomRuntimeException;

import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

public class Verifier extends TomBase {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_int(int t1, int t2) {  return  (t1==t2)  ;} private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_fun_sym_TypedAction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.TypedAction  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_TypedAction_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static  tom.engine.adt.tomterm.types.Pattern  tom_get_slot_TypedAction_PositivePattern( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getPositivePattern()  ;}private static  tom.engine.adt.tomterm.types.PatternList  tom_get_slot_TypedAction_NegativePatternList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getNegativePatternList()  ;}private static boolean tom_is_fun_sym_CheckStamp( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.CheckStamp  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_CheckStamp_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.CompiledPattern  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_CompiledPattern_PatternList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getPatternList()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_CompiledPattern_AutomataInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAutomataInst()  ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.AbstractBlock  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_AbstractBlock_InstList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getInstList()  ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.Nop  ;}private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.LetAssign  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_LetAssign_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_LetAssign_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_LetAssign_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.Let  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Let_Variable( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Let_Source( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSource()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_Let_AstInstruction( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstInstruction()  ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.If  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_If_Condition( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getCondition()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_SuccesInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSuccesInst()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_If_FailureInst( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getFailureInst()  ;}private static boolean tom_is_fun_sym_RuleVar( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.RuleVar  ;}private static boolean tom_is_fun_sym_NameNumber( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.NameNumber  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_NameNumber_AstName( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_RenamedVar( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.RenamedVar  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_RenamedVar_AstName( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_AbsVar( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.AbsVar  ;}private static  tom.engine.adt.tomname.types.TomNumber  tom_get_slot_AbsVar_Number( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getNumber()  ;}private static boolean tom_is_fun_sym_Number( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.Number  ;}private static  int  tom_get_slot_Number_Integer( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getInteger()  ;}private static boolean tom_is_fun_sym_End( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.End  ;}private static  tom.engine.adt.tomname.types.TomNumber  tom_get_slot_End_Number( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getNumber()  ;}private static boolean tom_is_fun_sym_Begin( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.Begin  ;}private static  tom.engine.adt.tomname.types.TomNumber  tom_get_slot_Begin_Number( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getNumber()  ;}private static boolean tom_is_fun_sym_IndexNumber( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.IndexNumber  ;}private static  tom.engine.adt.tomname.types.TomNumber  tom_get_slot_IndexNumber_Number( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getNumber()  ;}private static boolean tom_is_fun_sym_PatternNumber( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.PatternNumber  ;}private static  tom.engine.adt.tomname.types.TomNumber  tom_get_slot_PatternNumber_Number( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getNumber()  ;}private static boolean tom_is_fun_sym_MatchNumber( tom.engine.adt.tomname.types.TomNumber  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnumber.MatchNumber  ;}private static  tom.engine.adt.tomname.types.TomNumber  tom_get_slot_MatchNumber_Number( tom.engine.adt.tomname.types.TomNumber  t) {  return  t.getNumber()  ;}private static boolean tom_is_fun_sym_EmptyName( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.EmptyName  ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.PositionName  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_PositionName_NumberList( tom.engine.adt.tomname.types.TomName  t) {  return  t.getNumberList()  ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.Name  ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static boolean tom_is_fun_sym_GetSlot( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.GetSlot  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_GetSlot_Codomain( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getCodomain()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetSlot_AstName( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstName()  ;}private static  String  tom_get_slot_GetSlot_SlotNameString( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getSlotNameString()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetSlot_Variable( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getVariable()  ;}private static boolean tom_is_fun_sym_Cast( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.Cast  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Cast_AstType( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_Cast_Source( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getSource()  ;}private static boolean tom_is_fun_sym_EqualTerm( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.EqualTerm  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_EqualTerm_TomType( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getTomType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTerm_Kid1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getKid1()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTerm_Kid2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getKid2()  ;}private static boolean tom_is_fun_sym_EqualFunctionSymbol( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.EqualFunctionSymbol  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_EqualFunctionSymbol_AstType( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp1( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp1()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualFunctionSymbol_Exp2( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getExp2()  ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.FalseTL  ;}private static boolean tom_is_fun_sym_TrueTL( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.TrueTL  ;}private static boolean tom_is_fun_sym_TomTermToExpression( tom.engine.adt.tomexpression.types.Expression  t) {  return  t instanceof tom.engine.adt.tomexpression.types.expression.TomTermToExpression  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_TomTermToExpression_AstTerm( tom.engine.adt.tomexpression.types.Expression  t) {  return  t.getAstTerm()  ;}private static boolean tom_is_fun_sym_ExpressionToTomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm  ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_ExpressionToTomTerm_AstExpression( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstExpression()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomterm.types.Pattern  t) {  return  t instanceof tom.engine.adt.tomterm.types.pattern.Pattern  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_SubjectList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_TomList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getTomList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_Guards( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getGuards()  ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction || t instanceof tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_empty_list_concInstruction() { return  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; }private static  tom.engine.adt.tominstruction.types.InstructionList  tom_cons_list_concInstruction( tom.engine.adt.tominstruction.types.Instruction  e,  tom.engine.adt.tominstruction.types.InstructionList  l) { return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(e,l) ; }private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_head_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getHeadconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.getTailconcInstruction()  ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tominstruction.types.InstructionList  l) {  return  l.isEmptyconcInstruction()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tominstruction.types.InstructionList )tom_cons_list_concInstruction(( tom.engine.adt.tominstruction.types.Instruction )tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction(( tom.engine.adt.tominstruction.types.InstructionList )tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_terms_equal_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} private static boolean tom_terms_equal_DerivTree(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Seq(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Environment(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Term(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_AbsTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Symbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Deriv(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Variable(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ExprList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Substitution(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TermList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_InstrList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SubstitutionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Instr(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Expr(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.engine.adt.il.types.DerivTree  tom_make_endderiv() { return  tom.engine.adt.il.types.derivtree.endderiv.make(); }private static  tom.engine.adt.il.types.DerivTree  tom_make_derivrule( String  t0,  tom.engine.adt.il.types.Deriv  t1,  tom.engine.adt.il.types.DerivTree  t2,  tom.engine.adt.il.types.Seq  t3) { return  tom.engine.adt.il.types.derivtree.derivrule.make(t0, t1, t2, t3); }private static  tom.engine.adt.il.types.DerivTree  tom_make_derivrule2( String  t0,  tom.engine.adt.il.types.Deriv  t1,  tom.engine.adt.il.types.DerivTree  t2,  tom.engine.adt.il.types.DerivTree  t3,  tom.engine.adt.il.types.Seq  t4) { return  tom.engine.adt.il.types.derivtree.derivrule2.make(t0, t1, t2, t3, t4); }private static  tom.engine.adt.il.types.Seq  tom_make_seq() { return  tom.engine.adt.il.types.seq.seq.make(); }private static  tom.engine.adt.il.types.Seq  tom_make_dedexpr( tom.engine.adt.il.types.ExprList  t0) { return  tom.engine.adt.il.types.seq.dedexpr.make(t0); }private static boolean tom_is_fun_sym_dedterm( tom.engine.adt.il.types.Seq  t) {  return  t instanceof tom.engine.adt.il.types.seq.dedterm  ;}private static  tom.engine.adt.il.types.Seq  tom_make_dedterm( tom.engine.adt.il.types.TermList  t0) { return  tom.engine.adt.il.types.seq.dedterm.make(t0); }private static  tom.engine.adt.il.types.TermList  tom_get_slot_dedterm_Terms( tom.engine.adt.il.types.Seq  t) {  return  t.getTerms()  ;}private static boolean tom_is_fun_sym_env( tom.engine.adt.il.types.Environment  t) {  return  t instanceof tom.engine.adt.il.types.environment.env  ;}private static  tom.engine.adt.il.types.Environment  tom_make_env( tom.engine.adt.il.types.SubstitutionList  t0,  tom.engine.adt.il.types.Instr  t1) { return  tom.engine.adt.il.types.environment.env.make(t0, t1); }private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_env_Subs( tom.engine.adt.il.types.Environment  t) {  return  t.getSubs()  ;}private static  tom.engine.adt.il.types.Instr  tom_get_slot_env_I( tom.engine.adt.il.types.Environment  t) {  return  t.getI()  ;}private static boolean tom_is_fun_sym_tau( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.tau  ;}private static  tom.engine.adt.il.types.Term  tom_make_tau( tom.engine.adt.il.types.AbsTerm  t0) { return  tom.engine.adt.il.types.term.tau.make(t0); }private static  tom.engine.adt.il.types.AbsTerm  tom_get_slot_tau_Abst( tom.engine.adt.il.types.Term  t) {  return  t.getAbst()  ;}private static  tom.engine.adt.il.types.Term  tom_make_repr( String  t0) { return  tom.engine.adt.il.types.term.repr.make(t0); }private static boolean tom_is_fun_sym_subterm( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.subterm  ;}private static  tom.engine.adt.il.types.Term  tom_make_subterm( tom.engine.adt.il.types.Symbol  t0,  tom.engine.adt.il.types.Term  t1,  int  t2) { return  tom.engine.adt.il.types.term.subterm.make(t0, t1, t2); }private static  tom.engine.adt.il.types.Symbol  tom_get_slot_subterm_Symbol( tom.engine.adt.il.types.Term  t) {  return  t.getSymbol()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_subterm_T( tom.engine.adt.il.types.Term  t) {  return  t.getT()  ;}private static  int  tom_get_slot_subterm_Index( tom.engine.adt.il.types.Term  t) {  return  t.getIndex()  ;}private static boolean tom_is_fun_sym_slot( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.slot  ;}private static  tom.engine.adt.il.types.Term  tom_make_slot( tom.engine.adt.il.types.Symbol  t0,  tom.engine.adt.il.types.Term  t1,  String  t2) { return  tom.engine.adt.il.types.term.slot.make(t0, t1, t2); }private static  tom.engine.adt.il.types.Symbol  tom_get_slot_slot_Symbol( tom.engine.adt.il.types.Term  t) {  return  t.getSymbol()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_slot_T( tom.engine.adt.il.types.Term  t) {  return  t.getT()  ;}private static  String  tom_get_slot_slot_Name( tom.engine.adt.il.types.Term  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_appSubsT( tom.engine.adt.il.types.Term  t) {  return  t instanceof tom.engine.adt.il.types.term.appSubsT  ;}private static  tom.engine.adt.il.types.Term  tom_make_appSubsT( tom.engine.adt.il.types.SubstitutionList  t0,  tom.engine.adt.il.types.Term  t1) { return  tom.engine.adt.il.types.term.appSubsT.make(t0, t1); }private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_appSubsT_Subs( tom.engine.adt.il.types.Term  t) {  return  t.getSubs()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_appSubsT_T( tom.engine.adt.il.types.Term  t) {  return  t.getT()  ;}private static boolean tom_is_fun_sym_absvar( tom.engine.adt.il.types.AbsTerm  t) {  return  t instanceof tom.engine.adt.il.types.absterm.absvar  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_make_absvar( tom.engine.adt.il.types.Variable  t0) { return  tom.engine.adt.il.types.absterm.absvar.make(t0); }private static  tom.engine.adt.il.types.Variable  tom_get_slot_absvar_Varname( tom.engine.adt.il.types.AbsTerm  t) {  return  t.getVarname()  ;}private static  tom.engine.adt.il.types.AbsTerm  tom_make_st( tom.engine.adt.il.types.Symbol  t0,  tom.engine.adt.il.types.AbsTerm  t1,  int  t2) { return  tom.engine.adt.il.types.absterm.st.make(t0, t1, t2); }private static  tom.engine.adt.il.types.AbsTerm  tom_make_sl( tom.engine.adt.il.types.Symbol  t0,  tom.engine.adt.il.types.AbsTerm  t1,  String  t2) { return  tom.engine.adt.il.types.absterm.sl.make(t0, t1, t2); }private static  tom.engine.adt.il.types.Symbol  tom_make_fsymbol( String  t0) { return  tom.engine.adt.il.types.symbol.fsymbol.make(t0); }private static boolean tom_is_fun_sym_ebs( tom.engine.adt.il.types.Deriv  t) {  return  t instanceof tom.engine.adt.il.types.deriv.ebs  ;}private static  tom.engine.adt.il.types.Deriv  tom_make_ebs( tom.engine.adt.il.types.Environment  t0,  tom.engine.adt.il.types.Environment  t1) { return  tom.engine.adt.il.types.deriv.ebs.make(t0, t1); }private static  tom.engine.adt.il.types.Environment  tom_get_slot_ebs_Lhs( tom.engine.adt.il.types.Deriv  t) {  return  t.getLhs()  ;}private static  tom.engine.adt.il.types.Environment  tom_get_slot_ebs_Rhs( tom.engine.adt.il.types.Deriv  t) {  return  t.getRhs()  ;}private static boolean tom_is_fun_sym_var( tom.engine.adt.il.types.Variable  t) {  return  t instanceof tom.engine.adt.il.types.variable.var  ;}private static  tom.engine.adt.il.types.Variable  tom_make_var( String  t0) { return  tom.engine.adt.il.types.variable.var.make(t0); }private static  String  tom_get_slot_var_Name( tom.engine.adt.il.types.Variable  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_undefsubs( tom.engine.adt.il.types.Substitution  t) {  return  t instanceof tom.engine.adt.il.types.substitution.undefsubs  ;}private static  tom.engine.adt.il.types.Substitution  tom_make_undefsubs() { return  tom.engine.adt.il.types.substitution.undefsubs.make(); }private static boolean tom_is_fun_sym_is( tom.engine.adt.il.types.Substitution  t) {  return  t instanceof tom.engine.adt.il.types.substitution.is  ;}private static  tom.engine.adt.il.types.Substitution  tom_make_is( tom.engine.adt.il.types.Variable  t0,  tom.engine.adt.il.types.Term  t1) { return  tom.engine.adt.il.types.substitution.is.make(t0, t1); }private static  tom.engine.adt.il.types.Variable  tom_get_slot_is_Var( tom.engine.adt.il.types.Substitution  t) {  return  t.getVar()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_is_Term( tom.engine.adt.il.types.Substitution  t) {  return  t.getTerm()  ;}private static boolean tom_is_fun_sym_accept( tom.engine.adt.il.types.Instr  t) {  return  t instanceof tom.engine.adt.il.types.instr.accept  ;}private static  tom.engine.adt.il.types.Instr  tom_make_accept( aterm.ATerm  t0,  aterm.ATerm  t1) { return  tom.engine.adt.il.types.instr.accept.make(t0, t1); }private static  aterm.ATerm  tom_get_slot_accept_Positive( tom.engine.adt.il.types.Instr  t) {  return  t.getPositive()  ;}private static  aterm.ATerm  tom_get_slot_accept_Negative( tom.engine.adt.il.types.Instr  t) {  return  t.getNegative()  ;}private static boolean tom_is_fun_sym_refuse( tom.engine.adt.il.types.Instr  t) {  return  t instanceof tom.engine.adt.il.types.instr.refuse  ;}private static  tom.engine.adt.il.types.Instr  tom_make_refuse() { return  tom.engine.adt.il.types.instr.refuse.make(); }private static boolean tom_is_fun_sym_ITE( tom.engine.adt.il.types.Instr  t) {  return  t instanceof tom.engine.adt.il.types.instr.ITE  ;}private static  tom.engine.adt.il.types.Instr  tom_make_ITE( tom.engine.adt.il.types.Expr  t0,  tom.engine.adt.il.types.Instr  t1,  tom.engine.adt.il.types.Instr  t2) { return  tom.engine.adt.il.types.instr.ITE.make(t0, t1, t2); }private static  tom.engine.adt.il.types.Expr  tom_get_slot_ITE_E( tom.engine.adt.il.types.Instr  t) {  return  t.getE()  ;}private static  tom.engine.adt.il.types.Instr  tom_get_slot_ITE_Ift( tom.engine.adt.il.types.Instr  t) {  return  t.getIft()  ;}private static  tom.engine.adt.il.types.Instr  tom_get_slot_ITE_Iff( tom.engine.adt.il.types.Instr  t) {  return  t.getIff()  ;}private static boolean tom_is_fun_sym_ILLet( tom.engine.adt.il.types.Instr  t) {  return  t instanceof tom.engine.adt.il.types.instr.ILLet  ;}private static  tom.engine.adt.il.types.Instr  tom_make_ILLet( tom.engine.adt.il.types.Variable  t0,  tom.engine.adt.il.types.Term  t1,  tom.engine.adt.il.types.Instr  t2) { return  tom.engine.adt.il.types.instr.ILLet.make(t0, t1, t2); }private static  tom.engine.adt.il.types.Variable  tom_get_slot_ILLet_Var( tom.engine.adt.il.types.Instr  t) {  return  t.getVar()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_ILLet_T( tom.engine.adt.il.types.Instr  t) {  return  t.getT()  ;}private static  tom.engine.adt.il.types.Instr  tom_get_slot_ILLet_Body( tom.engine.adt.il.types.Instr  t) {  return  t.getBody()  ;}private static boolean tom_is_fun_sym_sequence( tom.engine.adt.il.types.Instr  t) {  return  t instanceof tom.engine.adt.il.types.instr.sequence  ;}private static  tom.engine.adt.il.types.Instr  tom_make_sequence( tom.engine.adt.il.types.InstrList  t0) { return  tom.engine.adt.il.types.instr.sequence.make(t0); }private static  tom.engine.adt.il.types.InstrList  tom_get_slot_sequence_Instrlist( tom.engine.adt.il.types.Instr  t) {  return  t.getInstrlist()  ;}private static boolean tom_is_fun_sym_iltrue( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.iltrue  ;}private static  tom.engine.adt.il.types.Expr  tom_make_iltrue( tom.engine.adt.il.types.SubstitutionList  t0) { return  tom.engine.adt.il.types.expr.iltrue.make(t0); }private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_iltrue_Subst( tom.engine.adt.il.types.Expr  t) {  return  t.getSubst()  ;}private static boolean tom_is_fun_sym_ilfalse( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.ilfalse  ;}private static  tom.engine.adt.il.types.Expr  tom_make_ilfalse() { return  tom.engine.adt.il.types.expr.ilfalse.make(); }private static boolean tom_is_fun_sym_isfsym( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.isfsym  ;}private static  tom.engine.adt.il.types.Expr  tom_make_isfsym( tom.engine.adt.il.types.Term  t0,  tom.engine.adt.il.types.Symbol  t1) { return  tom.engine.adt.il.types.expr.isfsym.make(t0, t1); }private static  tom.engine.adt.il.types.Term  tom_get_slot_isfsym_T( tom.engine.adt.il.types.Expr  t) {  return  t.getT()  ;}private static  tom.engine.adt.il.types.Symbol  tom_get_slot_isfsym_Symbol( tom.engine.adt.il.types.Expr  t) {  return  t.getSymbol()  ;}private static boolean tom_is_fun_sym_eq( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.eq  ;}private static  tom.engine.adt.il.types.Expr  tom_make_eq( tom.engine.adt.il.types.Term  t0,  tom.engine.adt.il.types.Term  t1) { return  tom.engine.adt.il.types.expr.eq.make(t0, t1); }private static  tom.engine.adt.il.types.Term  tom_get_slot_eq_Lt( tom.engine.adt.il.types.Expr  t) {  return  t.getLt()  ;}private static  tom.engine.adt.il.types.Term  tom_get_slot_eq_Rt( tom.engine.adt.il.types.Expr  t) {  return  t.getRt()  ;}private static  tom.engine.adt.il.types.Expr  tom_make_tisfsym( tom.engine.adt.il.types.AbsTerm  t0,  tom.engine.adt.il.types.Symbol  t1) { return  tom.engine.adt.il.types.expr.tisfsym.make(t0, t1); }private static  tom.engine.adt.il.types.Expr  tom_make_teq( tom.engine.adt.il.types.AbsTerm  t0,  tom.engine.adt.il.types.AbsTerm  t1) { return  tom.engine.adt.il.types.expr.teq.make(t0, t1); }private static boolean tom_is_fun_sym_iland( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.iland  ;}private static  tom.engine.adt.il.types.Expr  tom_make_iland( tom.engine.adt.il.types.Expr  t0,  tom.engine.adt.il.types.Expr  t1) { return  tom.engine.adt.il.types.expr.iland.make(t0, t1); }private static  tom.engine.adt.il.types.Expr  tom_get_slot_iland_Left( tom.engine.adt.il.types.Expr  t) {  return  t.getLeft()  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_iland_Right( tom.engine.adt.il.types.Expr  t) {  return  t.getRight()  ;}private static boolean tom_is_fun_sym_ilor( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.ilor  ;}private static  tom.engine.adt.il.types.Expr  tom_make_ilor( tom.engine.adt.il.types.Expr  t0,  tom.engine.adt.il.types.Expr  t1) { return  tom.engine.adt.il.types.expr.ilor.make(t0, t1); }private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilor_Left( tom.engine.adt.il.types.Expr  t) {  return  t.getLeft()  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilor_Right( tom.engine.adt.il.types.Expr  t) {  return  t.getRight()  ;}private static boolean tom_is_fun_sym_ilnot( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.ilnot  ;}private static  tom.engine.adt.il.types.Expr  tom_make_ilnot( tom.engine.adt.il.types.Expr  t0) { return  tom.engine.adt.il.types.expr.ilnot.make(t0); }private static  tom.engine.adt.il.types.Expr  tom_get_slot_ilnot_Exp( tom.engine.adt.il.types.Expr  t) {  return  t.getExp()  ;}private static boolean tom_is_fun_sym_appSubsE( tom.engine.adt.il.types.Expr  t) {  return  t instanceof tom.engine.adt.il.types.expr.appSubsE  ;}private static  tom.engine.adt.il.types.Expr  tom_make_appSubsE( tom.engine.adt.il.types.SubstitutionList  t0,  tom.engine.adt.il.types.Expr  t1) { return  tom.engine.adt.il.types.expr.appSubsE.make(t0, t1); }private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slot_appSubsE_Subs( tom.engine.adt.il.types.Expr  t) {  return  t.getSubs()  ;}private static  tom.engine.adt.il.types.Expr  tom_get_slot_appSubsE_E( tom.engine.adt.il.types.Expr  t) {  return  t.getE()  ;}private static boolean tom_is_fun_sym_concExpr( tom.engine.adt.il.types.ExprList  t) {  return  t instanceof tom.engine.adt.il.types.exprlist.ConsconcExpr || t instanceof tom.engine.adt.il.types.exprlist.EmptyconcExpr  ;}private static  tom.engine.adt.il.types.ExprList  tom_empty_list_concExpr() { return  tom.engine.adt.il.types.exprlist.EmptyconcExpr.make() ; }private static  tom.engine.adt.il.types.ExprList  tom_cons_list_concExpr( tom.engine.adt.il.types.Expr  e,  tom.engine.adt.il.types.ExprList  l) { return  tom.engine.adt.il.types.exprlist.ConsconcExpr.make(e,l) ; }private static  tom.engine.adt.il.types.Expr  tom_get_head_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) {  return  l.getHeadconcExpr()  ;}private static  tom.engine.adt.il.types.ExprList  tom_get_tail_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) {  return  l.getTailconcExpr()  ;}private static boolean tom_is_empty_concExpr_ExprList( tom.engine.adt.il.types.ExprList  l) {  return  l.isEmptyconcExpr()  ;}private static  tom.engine.adt.il.types.ExprList  tom_append_list_concExpr( tom.engine.adt.il.types.ExprList  l1,  tom.engine.adt.il.types.ExprList  l2) {    if(tom_is_empty_concExpr_ExprList(l1)) {     return l2;    } else if(tom_is_empty_concExpr_ExprList(l2)) {     return l1;    } else if(tom_is_empty_concExpr_ExprList(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(l1))) {     return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(l1),l2);    } else {      return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(l1),tom_append_list_concExpr(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(l1),l2));    }   }  private static  tom.engine.adt.il.types.ExprList  tom_get_slice_concExpr( tom.engine.adt.il.types.ExprList  begin,  tom.engine.adt.il.types.ExprList  end) {    if(tom_terms_equal_ExprList(begin,end)) {      return ( tom.engine.adt.il.types.ExprList )tom_empty_list_concExpr();    } else {      return ( tom.engine.adt.il.types.ExprList )tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr )tom_get_head_concExpr_ExprList(begin),( tom.engine.adt.il.types.ExprList )tom_get_slice_concExpr(( tom.engine.adt.il.types.ExprList )tom_get_tail_concExpr_ExprList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTerm( tom.engine.adt.il.types.TermList  t) {  return  t instanceof tom.engine.adt.il.types.termlist.ConsconcTerm || t instanceof tom.engine.adt.il.types.termlist.EmptyconcTerm  ;}private static  tom.engine.adt.il.types.TermList  tom_empty_list_concTerm() { return  tom.engine.adt.il.types.termlist.EmptyconcTerm.make() ; }private static  tom.engine.adt.il.types.TermList  tom_cons_list_concTerm( tom.engine.adt.il.types.Term  e,  tom.engine.adt.il.types.TermList  l) { return  tom.engine.adt.il.types.termlist.ConsconcTerm.make(e,l) ; }private static  tom.engine.adt.il.types.Term  tom_get_head_concTerm_TermList( tom.engine.adt.il.types.TermList  l) {  return  l.getHeadconcTerm()  ;}private static  tom.engine.adt.il.types.TermList  tom_get_tail_concTerm_TermList( tom.engine.adt.il.types.TermList  l) {  return  l.getTailconcTerm()  ;}private static boolean tom_is_empty_concTerm_TermList( tom.engine.adt.il.types.TermList  l) {  return  l.isEmptyconcTerm()  ;}private static  tom.engine.adt.il.types.TermList  tom_append_list_concTerm( tom.engine.adt.il.types.TermList  l1,  tom.engine.adt.il.types.TermList  l2) {    if(tom_is_empty_concTerm_TermList(l1)) {     return l2;    } else if(tom_is_empty_concTerm_TermList(l2)) {     return l1;    } else if(tom_is_empty_concTerm_TermList(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(l1))) {     return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(l1),l2);    } else {      return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(l1),tom_append_list_concTerm(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(l1),l2));    }   }  private static  tom.engine.adt.il.types.TermList  tom_get_slice_concTerm( tom.engine.adt.il.types.TermList  begin,  tom.engine.adt.il.types.TermList  end) {    if(tom_terms_equal_TermList(begin,end)) {      return ( tom.engine.adt.il.types.TermList )tom_empty_list_concTerm();    } else {      return ( tom.engine.adt.il.types.TermList )tom_cons_list_concTerm(( tom.engine.adt.il.types.Term )tom_get_head_concTerm_TermList(begin),( tom.engine.adt.il.types.TermList )tom_get_slice_concTerm(( tom.engine.adt.il.types.TermList )tom_get_tail_concTerm_TermList(begin),end));    }   }  private static boolean tom_is_fun_sym_semicolon( tom.engine.adt.il.types.InstrList  t) {  return  t instanceof tom.engine.adt.il.types.instrlist.Conssemicolon || t instanceof tom.engine.adt.il.types.instrlist.Emptysemicolon  ;}private static  tom.engine.adt.il.types.InstrList  tom_empty_list_semicolon() { return  tom.engine.adt.il.types.instrlist.Emptysemicolon.make() ; }private static  tom.engine.adt.il.types.InstrList  tom_cons_list_semicolon( tom.engine.adt.il.types.Instr  e,  tom.engine.adt.il.types.InstrList  l) { return  tom.engine.adt.il.types.instrlist.Conssemicolon.make(e,l) ; }private static  tom.engine.adt.il.types.Instr  tom_get_head_semicolon_InstrList( tom.engine.adt.il.types.InstrList  l) {  return  l.getHeadsemicolon()  ;}private static  tom.engine.adt.il.types.InstrList  tom_get_tail_semicolon_InstrList( tom.engine.adt.il.types.InstrList  l) {  return  l.getTailsemicolon()  ;}private static boolean tom_is_empty_semicolon_InstrList( tom.engine.adt.il.types.InstrList  l) {  return  l.isEmptysemicolon()  ;}private static  tom.engine.adt.il.types.InstrList  tom_append_list_semicolon( tom.engine.adt.il.types.InstrList  l1,  tom.engine.adt.il.types.InstrList  l2) {    if(tom_is_empty_semicolon_InstrList(l1)) {     return l2;    } else if(tom_is_empty_semicolon_InstrList(l2)) {     return l1;    } else if(tom_is_empty_semicolon_InstrList(( tom.engine.adt.il.types.InstrList )tom_get_tail_semicolon_InstrList(l1))) {     return ( tom.engine.adt.il.types.InstrList )tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr )tom_get_head_semicolon_InstrList(l1),l2);    } else {      return ( tom.engine.adt.il.types.InstrList )tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr )tom_get_head_semicolon_InstrList(l1),tom_append_list_semicolon(( tom.engine.adt.il.types.InstrList )tom_get_tail_semicolon_InstrList(l1),l2));    }   }  private static  tom.engine.adt.il.types.InstrList  tom_get_slice_semicolon( tom.engine.adt.il.types.InstrList  begin,  tom.engine.adt.il.types.InstrList  end) {    if(tom_terms_equal_InstrList(begin,end)) {      return ( tom.engine.adt.il.types.InstrList )tom_empty_list_semicolon();    } else {      return ( tom.engine.adt.il.types.InstrList )tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr )tom_get_head_semicolon_InstrList(begin),( tom.engine.adt.il.types.InstrList )tom_get_slice_semicolon(( tom.engine.adt.il.types.InstrList )tom_get_tail_semicolon_InstrList(begin),end));    }   }  private static boolean tom_is_fun_sym_subs( tom.engine.adt.il.types.SubstitutionList  t) {  return  t instanceof tom.engine.adt.il.types.substitutionlist.Conssubs || t instanceof tom.engine.adt.il.types.substitutionlist.Emptysubs  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_empty_list_subs() { return  tom.engine.adt.il.types.substitutionlist.Emptysubs.make() ; }private static  tom.engine.adt.il.types.SubstitutionList  tom_cons_list_subs( tom.engine.adt.il.types.Substitution  e,  tom.engine.adt.il.types.SubstitutionList  l) { return  tom.engine.adt.il.types.substitutionlist.Conssubs.make(e,l) ; }private static  tom.engine.adt.il.types.Substitution  tom_get_head_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) {  return  l.getHeadsubs()  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_get_tail_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) {  return  l.getTailsubs()  ;}private static boolean tom_is_empty_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList  l) {  return  l.isEmptysubs()  ;}private static  tom.engine.adt.il.types.SubstitutionList  tom_append_list_subs( tom.engine.adt.il.types.SubstitutionList  l1,  tom.engine.adt.il.types.SubstitutionList  l2) {    if(tom_is_empty_subs_SubstitutionList(l1)) {     return l2;    } else if(tom_is_empty_subs_SubstitutionList(l2)) {     return l1;    } else if(tom_is_empty_subs_SubstitutionList(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(l1))) {     return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(l1),l2);    } else {      return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(l1),tom_append_list_subs(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(l1),l2));    }   }  private static  tom.engine.adt.il.types.SubstitutionList  tom_get_slice_subs( tom.engine.adt.il.types.SubstitutionList  begin,  tom.engine.adt.il.types.SubstitutionList  end) {    if(tom_terms_equal_SubstitutionList(begin,end)) {      return ( tom.engine.adt.il.types.SubstitutionList )tom_empty_list_subs();    } else {      return ( tom.engine.adt.il.types.SubstitutionList )tom_cons_list_subs(( tom.engine.adt.il.types.Substitution )tom_get_head_subs_SubstitutionList(begin),( tom.engine.adt.il.types.SubstitutionList )tom_get_slice_subs(( tom.engine.adt.il.types.SubstitutionList )tom_get_tail_subs_SubstitutionList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static boolean tom_is_fun_sym_Sequence( jjtraveler.reflective.VisitableVisitor  t) {  return  (t instanceof tom.library.strategy.mutraveler.Sequence)  ;}private static  jjtraveler.reflective.VisitableVisitor  tom_empty_list_Sequence() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_cons_list_Sequence( jjtraveler.reflective.VisitableVisitor  head,  jjtraveler.reflective.VisitableVisitor  tail) { return  new tom.library.strategy.mutraveler.Sequence(head,tail) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_get_head_Sequence_Strategy( jjtraveler.reflective.VisitableVisitor  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.FIRST)  ;}private static  jjtraveler.reflective.VisitableVisitor  tom_get_tail_Sequence_Strategy( jjtraveler.reflective.VisitableVisitor  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.THEN)  ;}private static boolean tom_is_empty_Sequence_Strategy( jjtraveler.reflective.VisitableVisitor  t) {  return  t instanceof tom.library.strategy.mutraveler.Identity  ;}private static  jjtraveler.reflective.VisitableVisitor  tom_append_list_Sequence( jjtraveler.reflective.VisitableVisitor  l1,  jjtraveler.reflective.VisitableVisitor  l2) {    if(tom_is_empty_Sequence_Strategy(l1)) {     return l2;    } else if(tom_is_empty_Sequence_Strategy(l2)) {     return l1;    } else if(tom_is_empty_Sequence_Strategy(( jjtraveler.reflective.VisitableVisitor )tom_get_tail_Sequence_Strategy(l1))) {     return ( jjtraveler.reflective.VisitableVisitor )tom_cons_list_Sequence(( jjtraveler.reflective.VisitableVisitor )tom_get_head_Sequence_Strategy(l1),l2);    } else {      return ( jjtraveler.reflective.VisitableVisitor )tom_cons_list_Sequence(( jjtraveler.reflective.VisitableVisitor )tom_get_head_Sequence_Strategy(l1),tom_append_list_Sequence(( jjtraveler.reflective.VisitableVisitor )tom_get_tail_Sequence_Strategy(l1),l2));    }   }  private static  jjtraveler.reflective.VisitableVisitor  tom_get_slice_Sequence( jjtraveler.reflective.VisitableVisitor  begin,  jjtraveler.reflective.VisitableVisitor  end) {    if(tom_terms_equal_Strategy(begin,end)) {      return ( jjtraveler.reflective.VisitableVisitor )tom_empty_list_Sequence();    } else {      return ( jjtraveler.reflective.VisitableVisitor )tom_cons_list_Sequence(( jjtraveler.reflective.VisitableVisitor )tom_get_head_Sequence_Strategy(begin),( jjtraveler.reflective.VisitableVisitor )tom_get_slice_Sequence(( jjtraveler.reflective.VisitableVisitor )tom_get_tail_Sequence_Strategy(begin),end));    }   }  private static  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_SequenceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.SequenceId(first,then) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  jjtraveler.reflective.VisitableVisitor  tom_make_Try( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_InnermostId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_cons_list_Sequence(tom_make_SequenceId(v,tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   








  // ------------------------------------------------------------

  private SymbolTable symbolTable;
  private boolean camlsemantics = false;

  public Verifier(boolean camlsemantics) {
    super();
    this.camlsemantics = camlsemantics;
  }

  public void setSymbolTable(SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
  }

  public SymbolTable getSymbolTable() {
    return symbolTable;
  }

  public boolean isCamlSemantics() {
    return camlsemantics;
  }

  public Term termFromTomTerm(TomTerm tomterm) {
     if(tomterm instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match1_1=(( tom.engine.adt.tomterm.types.TomTerm )tomterm); if ( ( tom_is_fun_sym_ExpressionToTomTerm(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomexpression.types.Expression  tom_match1_1_AstExpression=tom_get_slot_ExpressionToTomTerm_AstExpression(tom_match1_1); { tom.engine.adt.tomexpression.types.Expression  tom_expr=tom_match1_1_AstExpression; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

        return termFromExpresssion(tom_expr);
       } } } } } } if ( ( tom_is_fun_sym_Variable(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match1_1_AstName=tom_get_slot_Variable_AstName(tom_match1_1); { tom.engine.adt.tomname.types.TomName  tom_name=tom_match1_1_AstName; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

        return termFromTomName(tom_name);
       } } } } } } } }

    System.out.println("termFromTomTerm don't know how to handle this: " + tomterm);
    return tom_make_repr("foirade");
  }

  Variable variableFromTomName(TomName name) {
     if(name instanceof  tom.engine.adt.tomname.types.TomName ) { { tom.engine.adt.tomname.types.TomName  tom_match2_1=(( tom.engine.adt.tomname.types.TomName )name); if ( ( tom_is_fun_sym_Name(tom_match2_1) ||  false  ) ) { { String  tom_match2_1_String=tom_get_slot_Name_String(tom_match2_1); { String  tom_stringname=tom_match2_1_String; {boolean tom_match2_tom_anti_constraints_status= true ; if ((tom_match2_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_var(tom_stringname);
       } } } } } } if ( ( tom_is_fun_sym_PositionName(tom_match2_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumberList  tom_match2_1_NumberList=tom_get_slot_PositionName_NumberList(tom_match2_1); { tom.engine.adt.tomname.types.TomNumberList  tom_numberlist=tom_match2_1_NumberList; {boolean tom_match2_tom_anti_constraints_status= true ; if ((tom_match2_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_var(tomNumberListToString(tom_numberlist));
       } } } } } } if ( ( tom_is_fun_sym_EmptyName(tom_match2_1) ||  false  ) ) { {boolean tom_match2_tom_anti_constraints_status= true ; if ((tom_match2_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_var("emptyName");
       } } } } } }

    return tom_make_var("error while building variable name");
  }

  Term termFromTomName(TomName name) {
    return tom_make_tau(tom_make_absvar(variableFromTomName(name)));
  }

  public Term termFromExpresssion(Expression expression) {
     if(expression instanceof  tom.engine.adt.tomexpression.types.Expression ) { { tom.engine.adt.tomexpression.types.Expression  tom_match3_1=(( tom.engine.adt.tomexpression.types.Expression )expression); if ( ( tom_is_fun_sym_GetSlot(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_AstName=tom_get_slot_GetSlot_AstName(tom_match3_1); { String  tom_match3_1_SlotNameString=tom_get_slot_GetSlot_SlotNameString(tom_match3_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_Variable=tom_get_slot_GetSlot_Variable(tom_match3_1); if ( ( tom_is_fun_sym_Name(tom_match3_1_AstName) ||  false  ) ) { { String  tom_match3_1_AstName_String=tom_get_slot_Name_String(tom_match3_1_AstName); { String  tom_symbolName=tom_match3_1_AstName_String; { String  tom_slotName=tom_match3_1_SlotNameString; if ( ( tom_is_fun_sym_Variable(tom_match3_1_Variable) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_Variable_AstName=tom_get_slot_Variable_AstName(tom_match3_1_Variable); { tom.engine.adt.tomname.types.TomName  tom_name=tom_match3_1_Variable_AstName; {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        Term term = termFromTomName(tom_name);
        return tom_make_slot(tom_make_fsymbol(tom_symbolName),term,tom_slotName);
       } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_TomTermToExpression(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1_AstTerm=tom_get_slot_TomTermToExpression_AstTerm(tom_match3_1); if ( ( tom_is_fun_sym_Variable(tom_match3_1_AstTerm) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_AstTerm_AstName=tom_get_slot_Variable_AstName(tom_match3_1_AstTerm); { tom.engine.adt.tomname.types.TomName  tom_name=tom_match3_1_AstTerm_AstName; {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        Term term = termFromTomName(tom_name);
        return term;
       } } } } } } } } if ( ( tom_is_fun_sym_Cast(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomexpression.types.Expression  tom_match3_1_Source=tom_get_slot_Cast_Source(tom_match3_1); { tom.engine.adt.tomexpression.types.Expression  tom_expr=tom_match3_1_Source; {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        return termFromExpresssion(tom_expr);
       } } } } } } } }

    System.out.println("termFromExpresssion don't know how to handle this: " + expression);
    return tom_make_repr("autre foirade avec " + expression);
  }

  public String extractName(TomNameList nl) {
     if(nl instanceof  tom.engine.adt.tomname.types.TomNameList ) { { tom.engine.adt.tomname.types.TomNameList  tom_match4_1=(( tom.engine.adt.tomname.types.TomNameList )nl); if ( ( tom_is_fun_sym_concTomName(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match4_1_list1=tom_match4_1; if (!(tom_is_empty_concTomName_TomNameList(tom_match4_1_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match4_1_1=tom_get_head_concTomName_TomNameList(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_concTomName_TomNameList(tom_match4_1_list1); if ( ( tom_is_fun_sym_Name(tom_match4_1_1) ||  false  ) ) { { String  tom_match4_1_1_String=tom_get_slot_Name_String(tom_match4_1_1); { String  tom_name=tom_match4_1_1_String; if (tom_is_empty_concTomName_TomNameList(tom_match4_1_list1)) { {boolean tom_match4_tom_anti_constraints_status= true ; if ((tom_match4_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_name;
       } } } } } } } } } } } } }

    return nl.toString();
  }

  public Expr exprFromExpression(Expression expression) {
     if(expression instanceof  tom.engine.adt.tomexpression.types.Expression ) { { tom.engine.adt.tomexpression.types.Expression  tom_match5_1=(( tom.engine.adt.tomexpression.types.Expression )expression); if ( ( tom_is_fun_sym_TrueTL(tom_match5_1) ||  false  ) ) { {boolean tom_match5_tom_anti_constraints_status= true ; if ((tom_match5_tom_anti_constraints_status ==  true )) { if ( true ) {
 return tom_make_iltrue(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()));  } } } } if ( ( tom_is_fun_sym_FalseTL(tom_match5_1) ||  false  ) ) { {boolean tom_match5_tom_anti_constraints_status= true ; if ((tom_match5_tom_anti_constraints_status ==  true )) { if ( true ) {
 return tom_make_ilfalse();  } } } } if ( ( tom_is_fun_sym_EqualFunctionSymbol(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_Exp1=tom_get_slot_EqualFunctionSymbol_Exp1(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_Exp2=tom_get_slot_EqualFunctionSymbol_Exp2(tom_match5_1); if ( ( tom_is_fun_sym_Variable(tom_match5_1_Exp1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match5_1_Exp1_AstName=tom_get_slot_Variable_AstName(tom_match5_1_Exp1); { tom.engine.adt.tomname.types.TomName  tom_name=tom_match5_1_Exp1_AstName; if ( ( tom_is_fun_sym_RecordAppl(tom_match5_1_Exp2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_Exp2_NameList=tom_get_slot_RecordAppl_NameList(tom_match5_1_Exp2); { tom.engine.adt.tomname.types.TomNameList  tom_symbolName=tom_match5_1_Exp2_NameList; {boolean tom_match5_tom_anti_constraints_status= true ; if ((tom_match5_tom_anti_constraints_status ==  true )) { if ( true ) {

        Term term = termFromTomName(tom_name);
        return tom_make_isfsym(term,tom_make_fsymbol(extractName(tom_symbolName)));
       } } } } } } } } } } } } if ( ( tom_is_fun_sym_EqualFunctionSymbol(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_Exp1=tom_get_slot_EqualFunctionSymbol_Exp1(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_Exp2=tom_get_slot_EqualFunctionSymbol_Exp2(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_term1=tom_match5_1_Exp1; if ( ( tom_is_fun_sym_RecordAppl(tom_match5_1_Exp2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match5_1_Exp2_NameList=tom_get_slot_RecordAppl_NameList(tom_match5_1_Exp2); { tom.engine.adt.tomname.types.TomNameList  tom_symbolName=tom_match5_1_Exp2_NameList; {boolean tom_match5_tom_anti_constraints_status= true ; if ((tom_match5_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_isfsym(termFromTomTerm(tom_term1),tom_make_fsymbol(extractName(tom_symbolName)));
       } } } } } } } } } } if ( ( tom_is_fun_sym_EqualTerm(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_Kid1=tom_get_slot_EqualTerm_Kid1(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_match5_1_Kid2=tom_get_slot_EqualTerm_Kid2(tom_match5_1); { tom.engine.adt.tomterm.types.TomTerm  tom_t1=tom_match5_1_Kid1; { tom.engine.adt.tomterm.types.TomTerm  tom_t2=tom_match5_1_Kid2; {boolean tom_match5_tom_anti_constraints_status= true ; if ((tom_match5_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_eq(termFromTomTerm(tom_t1),termFromTomTerm(tom_t2));
       } } } } } } } } } }

    System.out.println("exprFromExpression don't know how to handle this: " + expression);
    return tom_make_ilfalse();
  }

  public Instr instrFromInstructionList(InstructionList instrlist) {
    InstrList list = tom_empty_list_semicolon();
    while (!instrlist.isEmptyconcInstruction()) {
      Instruction i = (Instruction) instrlist.getHeadconcInstruction();
      instrlist = instrlist.getTailconcInstruction();
      if (!i.isCheckStamp()) {
        list = tom_append_list_semicolon(list,tom_cons_list_semicolon(instrFromInstruction(i),tom_empty_list_semicolon()));
      }
    }
    return tom_make_sequence(list);
  }

  public Instr instrFromInstruction(Instruction automata) {
     if(automata instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1=(( tom.engine.adt.tominstruction.types.Instruction )automata); if ( ( tom_is_fun_sym_TypedAction(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.Pattern  tom_match6_1_PositivePattern=tom_get_slot_TypedAction_PositivePattern(tom_match6_1); { tom.engine.adt.tomterm.types.PatternList  tom_match6_1_NegativePatternList=tom_get_slot_TypedAction_NegativePatternList(tom_match6_1); { tom.engine.adt.tomterm.types.Pattern  tom_positivePattern=tom_match6_1_PositivePattern; { tom.engine.adt.tomterm.types.PatternList  tom_negativePatternList=tom_match6_1_NegativePatternList; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_accept(tom_positivePattern.toATerm(),tom_negativePatternList.toATerm());
       } } } } } } } } if ( ( tom_is_fun_sym_If(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomexpression.types.Expression  tom_match6_1_Condition=tom_get_slot_If_Condition(tom_match6_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1_SuccesInst=tom_get_slot_If_SuccesInst(tom_match6_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1_FailureInst=tom_get_slot_If_FailureInst(tom_match6_1); { tom.engine.adt.tomexpression.types.Expression  tom_cond=tom_match6_1_Condition; { tom.engine.adt.tominstruction.types.Instruction  tom_ift=tom_match6_1_SuccesInst; { tom.engine.adt.tominstruction.types.Instruction  tom_iff=tom_match6_1_FailureInst; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {


        return tom_make_ITE(exprFromExpression(tom_cond),instrFromInstruction(tom_ift),instrFromInstruction(tom_iff))

;
       } } } } } } } } } } if ( ( tom_is_fun_sym_Let(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_Variable=tom_get_slot_Let_Variable(tom_match6_1); { tom.engine.adt.tomexpression.types.Expression  tom_match6_1_Source=tom_get_slot_Let_Source(tom_match6_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1_AstInstruction=tom_get_slot_Let_AstInstruction(tom_match6_1); if ( ( tom_is_fun_sym_Variable(tom_match6_1_Variable) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match6_1_Variable_AstName=tom_get_slot_Variable_AstName(tom_match6_1_Variable); { tom.engine.adt.tomname.types.TomName  tom_avar=tom_match6_1_Variable_AstName; { tom.engine.adt.tomexpression.types.Expression  tom_expr=tom_match6_1_Source; { tom.engine.adt.tominstruction.types.Instruction  tom_body=tom_match6_1_AstInstruction; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        Variable thevar = variableFromTomName(tom_avar);
        return tom_make_ILLet(thevar,termFromExpresssion(tom_expr),instrFromInstruction(tom_body))

;
       } } } } } } } } } } } } if ( ( tom_is_fun_sym_LetAssign(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_Variable=tom_get_slot_LetAssign_Variable(tom_match6_1); { tom.engine.adt.tomexpression.types.Expression  tom_match6_1_Source=tom_get_slot_LetAssign_Source(tom_match6_1); { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1_AstInstruction=tom_get_slot_LetAssign_AstInstruction(tom_match6_1); if ( ( tom_is_fun_sym_Variable(tom_match6_1_Variable) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match6_1_Variable_AstName=tom_get_slot_Variable_AstName(tom_match6_1_Variable); { tom.engine.adt.tomname.types.TomName  tom_avar=tom_match6_1_Variable_AstName; { tom.engine.adt.tomexpression.types.Expression  tom_expr=tom_match6_1_Source; { tom.engine.adt.tominstruction.types.Instruction  tom_body=tom_match6_1_AstInstruction; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        Variable thevar = variableFromTomName(tom_avar);
        return tom_make_ILLet(thevar,termFromExpresssion(tom_expr),instrFromInstruction(tom_body))

;
       } } } } } } } } } } } } {boolean tom_bool_match6_1= false ; { tom.engine.adt.tomterm.types.TomTerm  tom_match6_1_Variable= null ; { tom.engine.adt.tomexpression.types.Expression  tom_match6_1_Source= null ; { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1_AstInstruction= null ; if (tom_is_fun_sym_Let(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_Variable=tom_get_slot_Let_Variable(tom_match6_1);tom_match6_1_Source=tom_get_slot_Let_Source(tom_match6_1);tom_match6_1_AstInstruction=tom_get_slot_Let_AstInstruction(tom_match6_1); } else { if (tom_is_fun_sym_LetAssign(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_Variable=tom_get_slot_LetAssign_Variable(tom_match6_1);tom_match6_1_Source=tom_get_slot_LetAssign_Source(tom_match6_1);tom_match6_1_AstInstruction=tom_get_slot_LetAssign_AstInstruction(tom_match6_1); } } if (tom_bool_match6_1) { if ( ( tom_is_fun_sym_UnamedVariable(tom_match6_1_Variable) ||  false  ) ) { { tom.engine.adt.tominstruction.types.Instruction  tom_body=tom_match6_1_AstInstruction; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        return instrFromInstruction(tom_body);
       } } } } } } } } } } if ( ( tom_is_fun_sym_CompiledPattern(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1_AutomataInst=tom_get_slot_CompiledPattern_AutomataInst(tom_match6_1); { tom.engine.adt.tominstruction.types.Instruction  tom_instr=tom_match6_1_AutomataInst; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        return instrFromInstruction(tom_instr);
       } } } } } } if ( ( tom_is_fun_sym_AbstractBlock(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match6_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match6_1); if ( ( tom_is_fun_sym_concInstruction(tom_match6_1_InstList) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match6_1_InstList_list1=tom_match6_1_InstList; if (!(tom_is_empty_concInstruction_InstructionList(tom_match6_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_match6_1_InstList_1=tom_get_head_concInstruction_InstructionList(tom_match6_1_InstList_list1);tom_match6_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match6_1_InstList_list1); if ( ( tom_is_fun_sym_CheckStamp(tom_match6_1_InstList_1) ||  false  ) ) { if (!(tom_is_empty_concInstruction_InstructionList(tom_match6_1_InstList_list1))) { { tom.engine.adt.tominstruction.types.Instruction  tom_instr=tom_get_head_concInstruction_InstructionList(tom_match6_1_InstList_list1);tom_match6_1_InstList_list1=tom_get_tail_concInstruction_InstructionList(tom_match6_1_InstList_list1); if (tom_is_empty_concInstruction_InstructionList(tom_match6_1_InstList_list1)) { {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        return instrFromInstruction(tom_instr);
       } } } } } } } } } } } } } if ( ( tom_is_fun_sym_AbstractBlock(tom_match6_1) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match6_1_InstList=tom_get_slot_AbstractBlock_InstList(tom_match6_1); if ( ( tom_is_fun_sym_concInstruction(tom_match6_1_InstList) ||  false  ) ) { { tom.engine.adt.tominstruction.types.InstructionList  tom_match6_1_InstList_list1=tom_match6_1_InstList; { tom.engine.adt.tominstruction.types.InstructionList  tom_instrlist=tom_match6_1_InstList_list1; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        return instrFromInstructionList(tom_instrlist);
       } } } } } } } } if ( ( tom_is_fun_sym_Nop(tom_match6_1) ||  false  ) ) { {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {

        // tom uses nop in the iffalse part of ITE
        return tom_make_refuse();
       } } } } } }

    System.out.println("instrFromInstruction don't know how to handle this : " + automata);
    return tom_make_refuse();
  }

  private SubstitutionList abstractSubstitutionFromAccept(Instr instr) {
    SubstitutionList substitution = tom_empty_list_subs();
     if(instr instanceof  tom.engine.adt.il.types.Instr ) { { tom.engine.adt.il.types.Instr  tom_match7_1=(( tom.engine.adt.il.types.Instr )instr); if ( ( tom_is_fun_sym_accept(tom_match7_1) ||  false  ) ) { { aterm.ATerm  tom_match7_1_Positive=tom_get_slot_accept_Positive(tom_match7_1); { aterm.ATerm  tom_match7_1_Negative=tom_get_slot_accept_Negative(tom_match7_1); { aterm.ATerm  tom_positive=tom_match7_1_Positive; {boolean tom_match7_tom_anti_constraints_status= true ; if ((tom_match7_tom_anti_constraints_status ==  true )) { if ( true ) {

        Pattern positivePattern = Pattern.fromTerm(tom_positive);
         if(positivePattern instanceof  tom.engine.adt.tomterm.types.Pattern ) { { tom.engine.adt.tomterm.types.Pattern  tom_match8_1=(( tom.engine.adt.tomterm.types.Pattern )positivePattern); if ( ( tom_is_fun_sym_Pattern(tom_match8_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match8_1_SubjectList=tom_get_slot_Pattern_SubjectList(tom_match8_1); { tom.engine.adt.tomterm.types.TomList  tom_subjectList=tom_match8_1_SubjectList; {boolean tom_match8_tom_anti_constraints_status= true ; if ((tom_match8_tom_anti_constraints_status ==  true )) { if ( true ) {

            TomList sl = tom_subjectList;
            while(!sl.isEmptyconcTomTerm()) {
              TomTerm subject = sl.getHeadconcTomTerm();
              sl=sl.getTailconcTomTerm();
               if(subject instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match9_1=(( tom.engine.adt.tomterm.types.TomTerm )subject); if ( ( tom_is_fun_sym_Variable(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match9_1_AstName=tom_get_slot_Variable_AstName(tom_match9_1); { tom.engine.adt.tomname.types.TomName  tom_name=tom_match9_1_AstName; {boolean tom_match9_tom_anti_constraints_status= true ; if ((tom_match9_tom_anti_constraints_status ==  true )) { if ( true ) {

                  substitution = tom_append_list_subs(substitution,tom_cons_list_subs(tom_make_is(variableFromTomName(tom_name),termFromTomTerm(subject)),tom_empty_list_subs()))


;
                 } } } } } } } }

            }
           } } } } } } } }

       } } } } } } } } }

    return substitution;
  }

  public Collection build_tree(Instruction automata) {
    // System.out.println("Build derivation tree for: " + automata);

    // collects the accept in the automata
    Collection localAccepts = collectAccept(automata);

    Iterator iter = localAccepts.iterator();
    Collection treeList = new HashSet();
    while(iter.hasNext()) {
        Instr localAccept = (Instr) iter.next();

        // builds the initial abstract substitution
        SubstitutionList initialsubstitution = abstractSubstitutionFromAccept(localAccept);
        Environment startingenv = tom_make_env(initialsubstitution,instrFromInstruction(automata))
;

        Deriv startingderiv = tom_make_ebs(startingenv,tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),localAccept))
;

        Collection treeListPre = applySemanticsRules(startingderiv);
        // replace substitutions in trees
        Iterator it = treeListPre.iterator();
        while(it.hasNext()) {
            DerivTree tree = (DerivTree) it.next();
            SubstitutionList outputsubst = getOutputSubstitution(tree);
            tree = replaceUndefinedSubstitution(tree,outputsubst);
            treeList.add(tree);
        }
    }

    return treeList;
  }

  public Map getConstraints(Instruction automata) {
    // collects the accept in the automata
    Collection localAccepts = collectAccept(automata);

    Iterator iter = localAccepts.iterator();
    Map constraintList = new HashMap();
    while(iter.hasNext()) {
        Instr localAccept = (Instr) iter.next();

        // builds the initial abstract substitution
        SubstitutionList initialsubstitution = abstractSubstitutionFromAccept(localAccept);
        Expr constraints = buildConstraint(initialsubstitution,
                                           instrFromInstruction(automata),
                                           localAccept);
        constraintList.put(localAccept,constraints);
    }
    return constraintList;
  }

   private static class substitutionCollector  extends  tom.engine.adt.il.IlBasicStrategy   { private  SubstRef  outsubst;  public substitutionCollector(  SubstRef  outsubst ) { super(tom_make_Identity() ); this.outsubst=outsubst; } public  SubstRef  getoutsubst() { return outsubst;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.il.types.Expr  visit_Expr(  tom.engine.adt.il.types.Expr  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Expr ) { { tom.engine.adt.il.types.Expr  tom_match10_1=(( tom.engine.adt.il.types.Expr )tom__arg); if ( ( tom_is_fun_sym_iltrue(tom_match10_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match10_1_Subst=tom_get_slot_iltrue_Subst(tom_match10_1); if ( ( tom_is_fun_sym_subs(tom_match10_1_Subst) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match10_1_Subst_list1=tom_match10_1_Subst; if (!(tom_is_empty_subs_SubstitutionList(tom_match10_1_Subst_list1))) { { tom.engine.adt.il.types.Substitution  tom_match10_1_Subst_1=tom_get_head_subs_SubstitutionList(tom_match10_1_Subst_list1);tom_match10_1_Subst_list1=tom_get_tail_subs_SubstitutionList(tom_match10_1_Subst_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match10_1_Subst_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match10_1_Subst_list1)) { {boolean tom_match10_tom_anti_constraints_status= true ; { tom.engine.adt.il.types.Expr  tom_t=tom_match10_1; if ((tom_match10_tom_anti_constraints_status ==  true )) { if ( true ) {tom_make_Fail()


.visit(tom_t);
       } } } } } } } } } } } } if ( ( tom_is_fun_sym_iltrue(tom_match10_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match10_1_Subst=tom_get_slot_iltrue_Subst(tom_match10_1); { tom.engine.adt.il.types.SubstitutionList  tom_x=tom_match10_1_Subst; {boolean tom_match10_tom_anti_constraints_status= true ; if ((tom_match10_tom_anti_constraints_status ==  true )) { if ( true ) {

        outsubst.set(tom_x);
       } } } } } } } } return super.visit_Expr(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_substitutionCollector( SubstRef  t0) { return new substitutionCollector(t0); }


  public SubstitutionList collectSubstitutionInConstraint(Expr expr) {
    SubstRef output = new SubstRef(tom_empty_list_subs());
    try {
      tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_cons_list_Sequence(tom_make_substitutionCollector(output),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("x")),tom_empty_list_Sequence())))).visit(expr);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy substitutionCollector failed");
    }
    return output.get();
  }

   private static class outputSubstitutionCollector  extends  tom.engine.adt.il.IlBasicStrategy   { private  SubstRef  outsubst;  public outputSubstitutionCollector(  SubstRef  outsubst ) { super(tom_make_Identity() ); this.outsubst=outsubst; } public  SubstRef  getoutsubst() { return outsubst;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.il.types.Deriv  visit_Deriv(  tom.engine.adt.il.types.Deriv  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Deriv ) { { tom.engine.adt.il.types.Deriv  tom_match11_1=(( tom.engine.adt.il.types.Deriv )tom__arg); if ( ( tom_is_fun_sym_ebs(tom_match11_1) ||  false  ) ) { { tom.engine.adt.il.types.Environment  tom_match11_1_Lhs=tom_get_slot_ebs_Lhs(tom_match11_1); { tom.engine.adt.il.types.Environment  tom_match11_1_Rhs=tom_get_slot_ebs_Rhs(tom_match11_1); if ( ( tom_is_fun_sym_env(tom_match11_1_Lhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match11_1_Lhs_Subs=tom_get_slot_env_Subs(tom_match11_1_Lhs); { tom.engine.adt.il.types.Instr  tom_match11_1_Lhs_I=tom_get_slot_env_I(tom_match11_1_Lhs); { tom.engine.adt.il.types.SubstitutionList  tom_e=tom_match11_1_Lhs_Subs; if ( ( tom_is_fun_sym_accept(tom_match11_1_Lhs_I) ||  false  ) ) { if ( ( tom_is_fun_sym_env(tom_match11_1_Rhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match11_1_Rhs_Subs=tom_get_slot_env_Subs(tom_match11_1_Rhs); { tom.engine.adt.il.types.Instr  tom_match11_1_Rhs_I=tom_get_slot_env_I(tom_match11_1_Rhs); if ( ( tom_is_fun_sym_subs(tom_match11_1_Rhs_Subs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match11_1_Rhs_Subs_list1=tom_match11_1_Rhs_Subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match11_1_Rhs_Subs_list1))) { { tom.engine.adt.il.types.Substitution  tom_match11_1_Rhs_Subs_1=tom_get_head_subs_SubstitutionList(tom_match11_1_Rhs_Subs_list1);tom_match11_1_Rhs_Subs_list1=tom_get_tail_subs_SubstitutionList(tom_match11_1_Rhs_Subs_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match11_1_Rhs_Subs_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match11_1_Rhs_Subs_list1)) { if ( ( tom_is_fun_sym_accept(tom_match11_1_Rhs_I) ||  false  ) ) { {boolean tom_match11_tom_anti_constraints_status= true ; if ((tom_match11_tom_anti_constraints_status ==  true )) { if ( true ) {


        outsubst.set(tom_e);
       } } } } } } } } } } } } } } } } } } } } } } } return super.visit_Deriv(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_outputSubstitutionCollector( SubstRef  t0) { return new outputSubstitutionCollector(t0); }



  public SubstitutionList getOutputSubstitution(DerivTree subject) {
    SubstRef output = new SubstRef(tom_empty_list_subs());
    try {
      tom_make_TopDown(tom_make_outputSubstitutionCollector(output)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy outputSubstitutionCollector failed");
    }
    return output.get();
  }

   private static class acceptCollector  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  java.util.Collection  store;  public acceptCollector(  java.util.Collection  store ) { super(tom_make_Identity() ); this.store=store; } public  java.util.Collection  getstore() { return store;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tominstruction.types.Instruction ) { { tom.engine.adt.tominstruction.types.Instruction  tom_match12_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if ( ( tom_is_fun_sym_TypedAction(tom_match12_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.Pattern  tom_match12_1_PositivePattern=tom_get_slot_TypedAction_PositivePattern(tom_match12_1); { tom.engine.adt.tomterm.types.PatternList  tom_match12_1_NegativePatternList=tom_get_slot_TypedAction_NegativePatternList(tom_match12_1); { tom.engine.adt.tomterm.types.Pattern  tom_positive=tom_match12_1_PositivePattern; { tom.engine.adt.tomterm.types.PatternList  tom_negative=tom_match12_1_NegativePatternList; {boolean tom_match12_tom_anti_constraints_status= true ; if ((tom_match12_tom_anti_constraints_status ==  true )) { if ( true ) {


        store.add(tom_make_accept(tom_positive.toATerm(),tom_negative.toATerm()));
       } } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_acceptCollector( java.util.Collection  t0) { return new acceptCollector(t0); }



  public Collection collectAccept(Instruction subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_acceptCollector(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectAccept failed");
    }
    return result;
  }


  /**
   * The axioms the mapping has to verify
   */
  protected Seq seqFromTerm(Term sp) {
    TermList ded = tom_cons_list_concTerm(sp,tom_empty_list_concTerm());
     if(sp instanceof  tom.engine.adt.il.types.Term ) { { tom.engine.adt.il.types.Term  tom_match13_1=(( tom.engine.adt.il.types.Term )sp); if ( ( tom_is_fun_sym_appSubsT(tom_match13_1) ||  false  ) ) { {boolean tom_match13_tom_anti_constraints_status= true ; if ((tom_match13_tom_anti_constraints_status ==  true )) { if ( true ) {

        TermList follow = applyMappingRules(replaceVariablesInTerm(sp));
        ded = tom_append_list_concTerm(ded,tom_append_list_concTerm(follow,tom_empty_list_concTerm()));
       } } } } } }

    return tom_make_dedterm(tom_append_list_concTerm(ded,tom_empty_list_concTerm()));
  }

  protected ExprList exprListFromExpr(Expr sp) {
    ExprList ded = tom_cons_list_concExpr(sp,tom_empty_list_concExpr());
     if(sp instanceof  tom.engine.adt.il.types.Expr ) { { tom.engine.adt.il.types.Expr  tom_match14_1=(( tom.engine.adt.il.types.Expr )sp); if ( ( tom_is_fun_sym_appSubsE(tom_match14_1) ||  false  ) ) { {boolean tom_match14_tom_anti_constraints_status= true ; if ((tom_match14_tom_anti_constraints_status ==  true )) { if ( true ) {

        ExprList follow = applyExprRules(replaceVariablesInExpr(sp));
        ded = tom_append_list_concExpr(ded,tom_append_list_concExpr(follow,tom_empty_list_concExpr()));
       } } } } } }


    // System.out.println("dedexpr gives: " + ded);
    return ded;
  }

  protected SubstitutionList reduceSubstitutionWithMappingRules(SubstitutionList subst) {
     if(subst instanceof  tom.engine.adt.il.types.SubstitutionList ) { { tom.engine.adt.il.types.SubstitutionList  tom_match15_1=(( tom.engine.adt.il.types.SubstitutionList )subst); if ( ( tom_is_fun_sym_subs(tom_match15_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match15_1_list1=tom_match15_1; if (tom_is_empty_subs_SubstitutionList(tom_match15_1_list1)) { {boolean tom_match15_tom_anti_constraints_status= true ; if ((tom_match15_tom_anti_constraints_status ==  true )) { if ( true ) {

        return subst;
       } } } } } } if ( ( tom_is_fun_sym_subs(tom_match15_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match15_1_list1=tom_match15_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match15_1_list1))) { { tom.engine.adt.il.types.Substitution  tom_match15_1_1=tom_get_head_subs_SubstitutionList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_subs_SubstitutionList(tom_match15_1_list1); if ( ( tom_is_fun_sym_is(tom_match15_1_1) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tom_match15_1_1_Var=tom_get_slot_is_Var(tom_match15_1_1); { tom.engine.adt.il.types.Term  tom_match15_1_1_Term=tom_get_slot_is_Term(tom_match15_1_1); { tom.engine.adt.il.types.Variable  tom_v=tom_match15_1_1_Var; { tom.engine.adt.il.types.Term  tom_term=tom_match15_1_1_Term; { tom.engine.adt.il.types.SubstitutionList  tom_t=tom_match15_1_list1; {boolean tom_match15_tom_anti_constraints_status= true ; if ((tom_match15_tom_anti_constraints_status ==  true )) { if ( true ) {

        SubstitutionList tail = reduceSubstitutionWithMappingRules(tom_t);
        return tom_cons_list_subs(tom_make_is(tom_v,reduceTermWithMappingRules(replaceVariablesInTerm(tom_make_appSubsT(tail,tom_term)))),tom_append_list_subs(tail,tom_empty_list_subs()));
       } } } } } } } } } } } } } if ( ( tom_is_fun_sym_subs(tom_match15_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match15_1_list1=tom_match15_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match15_1_list1))) { { tom.engine.adt.il.types.Substitution  tom_match15_1_1=tom_get_head_subs_SubstitutionList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_subs_SubstitutionList(tom_match15_1_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match15_1_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_t=tom_match15_1_list1; {boolean tom_match15_tom_anti_constraints_status= true ; if ((tom_match15_tom_anti_constraints_status ==  true )) { if ( true ) {

        SubstitutionList tail = reduceSubstitutionWithMappingRules(tom_t);
        return tom_cons_list_subs(tom_make_undefsubs(),tom_append_list_subs(tail,tom_empty_list_subs()));
       } } } } } } } } } } }

    return subst;
  }
  protected Expr reduceWithMappingRules(Expr ex) {
     if(ex instanceof  tom.engine.adt.il.types.Expr ) { { tom.engine.adt.il.types.Expr  tom_match16_1=(( tom.engine.adt.il.types.Expr )ex); if ( ( tom_is_fun_sym_eq(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match16_1_Lt=tom_get_slot_eq_Lt(tom_match16_1); { tom.engine.adt.il.types.Term  tom_match16_1_Rt=tom_get_slot_eq_Rt(tom_match16_1); if ( ( tom_is_fun_sym_tau(tom_match16_1_Lt) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match16_1_Lt_Abst=tom_get_slot_tau_Abst(tom_match16_1_Lt); { tom.engine.adt.il.types.AbsTerm  tom_tl=tom_match16_1_Lt_Abst; if ( ( tom_is_fun_sym_tau(tom_match16_1_Rt) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match16_1_Rt_Abst=tom_get_slot_tau_Abst(tom_match16_1_Rt); { tom.engine.adt.il.types.AbsTerm  tom_tr=tom_match16_1_Rt_Abst; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_teq(tom_tl,tom_tr);
       } } } } } } } } } } } } if ( ( tom_is_fun_sym_isfsym(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match16_1_T=tom_get_slot_isfsym_T(tom_match16_1); { tom.engine.adt.il.types.Symbol  tom_match16_1_Symbol=tom_get_slot_isfsym_Symbol(tom_match16_1); if ( ( tom_is_fun_sym_tau(tom_match16_1_T) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match16_1_T_Abst=tom_get_slot_tau_Abst(tom_match16_1_T); { tom.engine.adt.il.types.AbsTerm  tom_t=tom_match16_1_T_Abst; { tom.engine.adt.il.types.Symbol  tom_symbol=tom_match16_1_Symbol; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_tisfsym(tom_t,tom_symbol);
       } } } } } } } } } } if ( ( tom_is_fun_sym_eq(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match16_1_Lt=tom_get_slot_eq_Lt(tom_match16_1); { tom.engine.adt.il.types.Term  tom_match16_1_Rt=tom_get_slot_eq_Rt(tom_match16_1); { tom.engine.adt.il.types.Term  tom_lt=tom_match16_1_Lt; { tom.engine.adt.il.types.Term  tom_rt=tom_match16_1_Rt; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        // first reduce the argument
        return reduceWithMappingRules(tom_make_eq(reduceTermWithMappingRules(tom_lt),reduceTermWithMappingRules(tom_rt)));
       } } } } } } } } if ( ( tom_is_fun_sym_isfsym(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match16_1_T=tom_get_slot_isfsym_T(tom_match16_1); { tom.engine.adt.il.types.Symbol  tom_match16_1_Symbol=tom_get_slot_isfsym_Symbol(tom_match16_1); { tom.engine.adt.il.types.Term  tom_t=tom_match16_1_T; { tom.engine.adt.il.types.Symbol  tom_symbol=tom_match16_1_Symbol; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return reduceWithMappingRules(tom_make_isfsym(reduceTermWithMappingRules(tom_t),tom_symbol));
       } } } } } } } } if ( ( tom_is_fun_sym_ilnot(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match16_1_Exp=tom_get_slot_ilnot_Exp(tom_match16_1); { tom.engine.adt.il.types.Expr  tom_e=tom_match16_1_Exp; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_ilnot(reduceWithMappingRules(tom_e));
       } } } } } } if ( ( tom_is_fun_sym_iltrue(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match16_1_Subst=tom_get_slot_iltrue_Subst(tom_match16_1); { tom.engine.adt.il.types.SubstitutionList  tom_substitutionList=tom_match16_1_Subst; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_iltrue(reduceSubstitutionWithMappingRules(tom_substitutionList));
       } } } } } } if ( ( tom_is_fun_sym_ilfalse(tom_match16_1) ||  false  ) ) { {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return ex;
       } } } } if ( ( tom_is_fun_sym_iland(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match16_1_Left=tom_get_slot_iland_Left(tom_match16_1); { tom.engine.adt.il.types.Expr  tom_match16_1_Right=tom_get_slot_iland_Right(tom_match16_1); { tom.engine.adt.il.types.Expr  tom_lt=tom_match16_1_Left; { tom.engine.adt.il.types.Expr  tom_rt=tom_match16_1_Right; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_iland(reduceWithMappingRules(tom_lt),reduceWithMappingRules(tom_rt));
       } } } } } } } } if ( ( tom_is_fun_sym_ilor(tom_match16_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match16_1_Left=tom_get_slot_ilor_Left(tom_match16_1); { tom.engine.adt.il.types.Expr  tom_match16_1_Right=tom_get_slot_ilor_Right(tom_match16_1); { tom.engine.adt.il.types.Expr  tom_lt=tom_match16_1_Left; { tom.engine.adt.il.types.Expr  tom_rt=tom_match16_1_Right; {boolean tom_match16_tom_anti_constraints_status= true ; if ((tom_match16_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_make_ilor(reduceWithMappingRules(tom_lt),reduceWithMappingRules(tom_rt));
       } } } } } } } } } }

    System.out.println("reduceWithMappingRules : nothing applies to:" + ex);
    return ex;
  }

  protected Term reduceTermWithMappingRules(Term trm) {
     if(trm instanceof  tom.engine.adt.il.types.Term ) { { tom.engine.adt.il.types.Term  tom_match17_1=(( tom.engine.adt.il.types.Term )trm); if ( ( tom_is_fun_sym_tau(tom_match17_1) ||  false  ) ) { {boolean tom_match17_tom_anti_constraints_status= true ; if ((tom_match17_tom_anti_constraints_status ==  true )) { if ( true ) {

        return trm;
       } } } } if ( ( tom_is_fun_sym_subterm(tom_match17_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match17_1_Symbol=tom_get_slot_subterm_Symbol(tom_match17_1); { tom.engine.adt.il.types.Term  tom_match17_1_T=tom_get_slot_subterm_T(tom_match17_1); { int  tom_match17_1_Index=tom_get_slot_subterm_Index(tom_match17_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match17_1_Symbol; if ( ( tom_is_fun_sym_subterm(tom_match17_1_T) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_t=tom_match17_1_T; { int  tom_index=tom_match17_1_Index; {boolean tom_match17_tom_anti_constraints_status= true ; if ((tom_match17_tom_anti_constraints_status ==  true )) { if ( true ) {

        return reduceTermWithMappingRules(tom_make_subterm(tom_s,reduceTermWithMappingRules(tom_t),tom_index));
       } } } } } } } } } } } if ( ( tom_is_fun_sym_slot(tom_match17_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match17_1_Symbol=tom_get_slot_slot_Symbol(tom_match17_1); { tom.engine.adt.il.types.Term  tom_match17_1_T=tom_get_slot_slot_T(tom_match17_1); { String  tom_match17_1_Name=tom_get_slot_slot_Name(tom_match17_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match17_1_Symbol; if ( ( tom_is_fun_sym_slot(tom_match17_1_T) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_t=tom_match17_1_T; { String  tom_slotName=tom_match17_1_Name; {boolean tom_match17_tom_anti_constraints_status= true ; if ((tom_match17_tom_anti_constraints_status ==  true )) { if ( true ) {

        return reduceTermWithMappingRules(tom_make_slot(tom_s,reduceTermWithMappingRules(tom_t),tom_slotName));
       } } } } } } } } } } } if ( ( tom_is_fun_sym_subterm(tom_match17_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match17_1_Symbol=tom_get_slot_subterm_Symbol(tom_match17_1); { tom.engine.adt.il.types.Term  tom_match17_1_T=tom_get_slot_subterm_T(tom_match17_1); { int  tom_match17_1_Index=tom_get_slot_subterm_Index(tom_match17_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match17_1_Symbol; if ( ( tom_is_fun_sym_tau(tom_match17_1_T) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match17_1_T_Abst=tom_get_slot_tau_Abst(tom_match17_1_T); { tom.engine.adt.il.types.AbsTerm  tom_t=tom_match17_1_T_Abst; { int  tom_index=tom_match17_1_Index; {boolean tom_match17_tom_anti_constraints_status= true ; if ((tom_match17_tom_anti_constraints_status ==  true )) { if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_st(tom_s,tom_t,tom_index);
        return tom_make_tau(term);
       } } } } } } } } } } } } if ( ( tom_is_fun_sym_slot(tom_match17_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match17_1_Symbol=tom_get_slot_slot_Symbol(tom_match17_1); { tom.engine.adt.il.types.Term  tom_match17_1_T=tom_get_slot_slot_T(tom_match17_1); { String  tom_match17_1_Name=tom_get_slot_slot_Name(tom_match17_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match17_1_Symbol; if ( ( tom_is_fun_sym_tau(tom_match17_1_T) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match17_1_T_Abst=tom_get_slot_tau_Abst(tom_match17_1_T); { tom.engine.adt.il.types.AbsTerm  tom_t=tom_match17_1_T_Abst; { String  tom_slotName=tom_match17_1_Name; {boolean tom_match17_tom_anti_constraints_status= true ; if ((tom_match17_tom_anti_constraints_status ==  true )) { if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_sl(tom_s,tom_t,tom_slotName);
        return tom_make_tau(term);
       } } } } } } } } } } } } } }

    System.out.println("reduceTermWithMappingRules : nothing applies to:" + trm);
    return trm;
  }

  protected TermList applyMappingRules(Term trm) {
     if(trm instanceof  tom.engine.adt.il.types.Term ) { { tom.engine.adt.il.types.Term  tom_match18_1=(( tom.engine.adt.il.types.Term )trm); if ( ( tom_is_fun_sym_tau(tom_match18_1) ||  false  ) ) { {boolean tom_match18_tom_anti_constraints_status= true ; if ((tom_match18_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
       } } } } if ( ( tom_is_fun_sym_subterm(tom_match18_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match18_1_Symbol=tom_get_slot_subterm_Symbol(tom_match18_1); { tom.engine.adt.il.types.Term  tom_match18_1_T=tom_get_slot_subterm_T(tom_match18_1); { int  tom_match18_1_Index=tom_get_slot_subterm_Index(tom_match18_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match18_1_Symbol; if ( ( tom_is_fun_sym_subterm(tom_match18_1_T) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_t=tom_match18_1_T; { int  tom_index=tom_match18_1_Index; {boolean tom_match18_tom_anti_constraints_status= true ; if ((tom_match18_tom_anti_constraints_status ==  true )) { if ( true ) {

        // first reduce the argument
        TermList reduced = applyMappingRules(tom_t);
        TermList res = tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
        while(!reduced.isEmptyconcTerm()) {
          Term head = reduced.getHeadconcTerm();
          if (head.istau()) {
            TermList hl = applyMappingRules(head);
            while(!hl.isEmptyconcTerm()) {
              Term h = hl.getHeadconcTerm();
              res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_subterm(tom_s,h,tom_index),tom_empty_list_concTerm()));
              hl = hl.getTailconcTerm();
            }
          } else {
            res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_subterm(tom_s,head,tom_index),tom_empty_list_concTerm()));
          }
          reduced = reduced.getTailconcTerm();
        }
        return tom_append_list_concTerm(res,tom_empty_list_concTerm());
       } } } } } } } } } } } if ( ( tom_is_fun_sym_slot(tom_match18_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match18_1_Symbol=tom_get_slot_slot_Symbol(tom_match18_1); { tom.engine.adt.il.types.Term  tom_match18_1_T=tom_get_slot_slot_T(tom_match18_1); { String  tom_match18_1_Name=tom_get_slot_slot_Name(tom_match18_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match18_1_Symbol; if ( ( tom_is_fun_sym_slot(tom_match18_1_T) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_t=tom_match18_1_T; { String  tom_slotName=tom_match18_1_Name; {boolean tom_match18_tom_anti_constraints_status= true ; if ((tom_match18_tom_anti_constraints_status ==  true )) { if ( true ) {

        // first reduce the argument
        TermList reduced = applyMappingRules(tom_t);
        TermList res = tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
        while(!reduced.isEmptyconcTerm()) {
          Term head = reduced.getHeadconcTerm();
          if (head.istau()) {
            TermList hl = applyMappingRules(head);
            while(!hl.isEmptyconcTerm()) {
              Term h = hl.getHeadconcTerm();
              res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_slot(tom_s,h,tom_slotName),tom_empty_list_concTerm()));
              hl = hl.getTailconcTerm();
            }
          } else {
            res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_slot(tom_s,head,tom_slotName),tom_empty_list_concTerm()));
          }
          reduced = reduced.getTailconcTerm();
        }
        return tom_append_list_concTerm(res,tom_empty_list_concTerm());
       } } } } } } } } } } } if ( ( tom_is_fun_sym_subterm(tom_match18_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match18_1_Symbol=tom_get_slot_subterm_Symbol(tom_match18_1); { tom.engine.adt.il.types.Term  tom_match18_1_T=tom_get_slot_subterm_T(tom_match18_1); { int  tom_match18_1_Index=tom_get_slot_subterm_Index(tom_match18_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match18_1_Symbol; if ( ( tom_is_fun_sym_tau(tom_match18_1_T) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match18_1_T_Abst=tom_get_slot_tau_Abst(tom_match18_1_T); { tom.engine.adt.il.types.AbsTerm  tom_t=tom_match18_1_T_Abst; { int  tom_index=tom_match18_1_Index; {boolean tom_match18_tom_anti_constraints_status= true ; if ((tom_match18_tom_anti_constraints_status ==  true )) { if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_st(tom_s,tom_t,tom_index);
        return tom_cons_list_concTerm(trm,tom_cons_list_concTerm(tom_make_tau(term),tom_empty_list_concTerm()));
       } } } } } } } } } } } } if ( ( tom_is_fun_sym_slot(tom_match18_1) ||  false  ) ) { { tom.engine.adt.il.types.Symbol  tom_match18_1_Symbol=tom_get_slot_slot_Symbol(tom_match18_1); { tom.engine.adt.il.types.Term  tom_match18_1_T=tom_get_slot_slot_T(tom_match18_1); { String  tom_match18_1_Name=tom_get_slot_slot_Name(tom_match18_1); { tom.engine.adt.il.types.Symbol  tom_s=tom_match18_1_Symbol; if ( ( tom_is_fun_sym_tau(tom_match18_1_T) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match18_1_T_Abst=tom_get_slot_tau_Abst(tom_match18_1_T); { tom.engine.adt.il.types.AbsTerm  tom_t=tom_match18_1_T_Abst; { String  tom_slotName=tom_match18_1_Name; {boolean tom_match18_tom_anti_constraints_status= true ; if ((tom_match18_tom_anti_constraints_status ==  true )) { if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_sl(tom_s,tom_t,tom_slotName);
        return tom_cons_list_concTerm(trm,tom_cons_list_concTerm(tom_make_tau(term),tom_empty_list_concTerm()));
       } } } } } } } } } } } } } }

    System.out.println("apply TermRules : nothing applies to:" + trm);
    return tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
  }

  protected ExprList applyExprRules(Expr ex) {
     if(ex instanceof  tom.engine.adt.il.types.Expr ) { { tom.engine.adt.il.types.Expr  tom_match19_1=(( tom.engine.adt.il.types.Expr )ex); if ( ( tom_is_fun_sym_eq(tom_match19_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match19_1_Lt=tom_get_slot_eq_Lt(tom_match19_1); { tom.engine.adt.il.types.Term  tom_match19_1_Rt=tom_get_slot_eq_Rt(tom_match19_1); if ( ( tom_is_fun_sym_tau(tom_match19_1_Lt) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match19_1_Lt_Abst=tom_get_slot_tau_Abst(tom_match19_1_Lt); { tom.engine.adt.il.types.AbsTerm  tom_tl=tom_match19_1_Lt_Abst; if ( ( tom_is_fun_sym_tau(tom_match19_1_Rt) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match19_1_Rt_Abst=tom_get_slot_tau_Abst(tom_match19_1_Rt); { tom.engine.adt.il.types.AbsTerm  tom_tr=tom_match19_1_Rt_Abst; {boolean tom_match19_tom_anti_constraints_status= true ; if ((tom_match19_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_cons_list_concExpr(ex,tom_cons_list_concExpr(tom_make_teq(tom_tl,tom_tr),tom_empty_list_concExpr()));
       } } } } } } } } } } } } if ( ( tom_is_fun_sym_isfsym(tom_match19_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match19_1_T=tom_get_slot_isfsym_T(tom_match19_1); { tom.engine.adt.il.types.Symbol  tom_match19_1_Symbol=tom_get_slot_isfsym_Symbol(tom_match19_1); if ( ( tom_is_fun_sym_tau(tom_match19_1_T) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match19_1_T_Abst=tom_get_slot_tau_Abst(tom_match19_1_T); { tom.engine.adt.il.types.AbsTerm  tom_t=tom_match19_1_T_Abst; { tom.engine.adt.il.types.Symbol  tom_symbol=tom_match19_1_Symbol; {boolean tom_match19_tom_anti_constraints_status= true ; if ((tom_match19_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_cons_list_concExpr(ex,tom_cons_list_concExpr(tom_make_tisfsym(tom_t,tom_symbol),tom_empty_list_concExpr()));
       } } } } } } } } } } if ( ( tom_is_fun_sym_eq(tom_match19_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match19_1_Lt=tom_get_slot_eq_Lt(tom_match19_1); { tom.engine.adt.il.types.Term  tom_match19_1_Rt=tom_get_slot_eq_Rt(tom_match19_1); { tom.engine.adt.il.types.Term  tom_lt=tom_match19_1_Lt; { tom.engine.adt.il.types.Term  tom_rt=tom_match19_1_Rt; {boolean tom_match19_tom_anti_constraints_status= true ; if ((tom_match19_tom_anti_constraints_status ==  true )) { if ( true ) {

        // first reduce the argument
        Term reducedl = reverseTermList((TermList)applyMappingRules(tom_lt)).getHeadconcTerm();
        Term reducedr = reverseTermList((TermList)applyMappingRules(tom_rt)).getHeadconcTerm();

        ExprList taill = applyExprRules(tom_make_eq(reducedl,reducedr));
        ExprList res = tom_cons_list_concExpr(ex,tom_append_list_concExpr(taill,tom_empty_list_concExpr()));
       } } } } } } } } if ( ( tom_is_fun_sym_isfsym(tom_match19_1) ||  false  ) ) { { tom.engine.adt.il.types.Term  tom_match19_1_T=tom_get_slot_isfsym_T(tom_match19_1); { tom.engine.adt.il.types.Symbol  tom_match19_1_Symbol=tom_get_slot_isfsym_Symbol(tom_match19_1); { tom.engine.adt.il.types.Term  tom_t=tom_match19_1_T; { tom.engine.adt.il.types.Symbol  tom_symbol=tom_match19_1_Symbol; {boolean tom_match19_tom_anti_constraints_status= true ; if ((tom_match19_tom_anti_constraints_status ==  true )) { if ( true ) {

        // first reduce the argument
        TermList reduced = applyMappingRules(tom_t);
        ExprList res = tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
        while(!reduced.isEmptyconcTerm()) {
          Term head = reduced.getHeadconcTerm();
          res = tom_append_list_concExpr(res,tom_cons_list_concExpr(tom_make_isfsym(head,tom_symbol),tom_empty_list_concExpr()));
          reduced = reduced.getTailconcTerm();
        }
         if(res instanceof  tom.engine.adt.il.types.ExprList ) { { tom.engine.adt.il.types.ExprList  tom_match20_1=(( tom.engine.adt.il.types.ExprList )res); if ( ( tom_is_fun_sym_concExpr(tom_match20_1) ||  false  ) ) { { tom.engine.adt.il.types.ExprList  tom_match20_1_list1=tom_match20_1; { tom.engine.adt.il.types.ExprList  tom_match20_1_begin1=tom_match20_1_list1; { tom.engine.adt.il.types.ExprList  tom_match20_1_end1=tom_match20_1_list1; { while (!(tom_is_empty_concExpr_ExprList(tom_match20_1_end1))) {tom_match20_1_list1=tom_match20_1_end1; { { tom.engine.adt.il.types.ExprList  tom_hl=tom_get_slice_concExpr(tom_match20_1_begin1,tom_match20_1_end1); { tom.engine.adt.il.types.Expr  tom_tail=tom_get_head_concExpr_ExprList(tom_match20_1_list1);tom_match20_1_list1=tom_get_tail_concExpr_ExprList(tom_match20_1_list1); if (tom_is_empty_concExpr_ExprList(tom_match20_1_list1)) { {boolean tom_match20_tom_anti_constraints_status= true ; if ((tom_match20_tom_anti_constraints_status ==  true )) { if ( true ) {

            ExprList taill = applyExprRules(tom_tail);
            return tom_append_list_concExpr(tom_hl,tom_append_list_concExpr(taill,tom_empty_list_concExpr()));
           } } } } } }tom_match20_1_end1=tom_get_tail_concExpr_ExprList(tom_match20_1_end1); } }tom_match20_1_list1=tom_match20_1_begin1; } } } } } } }

       } } } } } } } } if ( ( tom_is_fun_sym_ilnot(tom_match19_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match19_1_Exp=tom_get_slot_ilnot_Exp(tom_match19_1); { tom.engine.adt.il.types.Expr  tom_e=tom_match19_1_Exp; {boolean tom_match19_tom_anti_constraints_status= true ; if ((tom_match19_tom_anti_constraints_status ==  true )) { if ( true ) {

        ExprList exprList = applyExprRules(tom_e);
        ExprList newExprList = tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
        while(!exprList.isEmptyconcExpr()) {
          Expr localExpr = exprList.getHeadconcExpr();
          exprList = exprList.getTailconcExpr();
          newExprList = tom_append_list_concExpr(newExprList,tom_cons_list_concExpr(tom_make_ilnot(localExpr),tom_empty_list_concExpr()));
        }
        return newExprList;
       } } } } } } if ( ( tom_is_fun_sym_ilfalse(tom_match19_1) ||  ( tom_is_fun_sym_iltrue(tom_match19_1) ||  false  )  ) ) { {boolean tom_match19_tom_anti_constraints_status= true ; if ((tom_match19_tom_anti_constraints_status ==  true )) { if ( true ) {

        return tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
       } } } } } }

    System.out.println("apply ExprRules : nothing applies to:" + ex);
    return tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
  }

  protected Expr buildConstraint(SubstitutionList substitution, Instr pil,Instr goal) {
     if(pil instanceof  tom.engine.adt.il.types.Instr ) { { tom.engine.adt.il.types.Instr  tom_match21_1=(( tom.engine.adt.il.types.Instr )pil); if ( ( tom_is_fun_sym_sequence(tom_match21_1) ||  false  ) ) { { tom.engine.adt.il.types.InstrList  tom_match21_1_Instrlist=tom_get_slot_sequence_Instrlist(tom_match21_1); if ( ( tom_is_fun_sym_semicolon(tom_match21_1_Instrlist) ||  false  ) ) { { tom.engine.adt.il.types.InstrList  tom_match21_1_Instrlist_list1=tom_match21_1_Instrlist; if (!(tom_is_empty_semicolon_InstrList(tom_match21_1_Instrlist_list1))) { { tom.engine.adt.il.types.Instr  tom_h=tom_get_head_semicolon_InstrList(tom_match21_1_Instrlist_list1);tom_match21_1_Instrlist_list1=tom_get_tail_semicolon_InstrList(tom_match21_1_Instrlist_list1); { tom.engine.adt.il.types.InstrList  tom_t=tom_match21_1_Instrlist_list1; {boolean tom_match21_tom_anti_constraints_status= true ; if ((tom_match21_tom_anti_constraints_status ==  true )) { if ( true ) {

        Expr goalFromHead = buildConstraint(substitution,tom_h,goal);
        if (!tom_t.isEmptysemicolon()) {
          Expr refuseFromHead = buildConstraint(substitution,tom_h,tom_make_refuse());
          Expr goalFromTail = buildConstraint(substitution,tom_make_sequence(tom_t),goal);
          if(this.isCamlSemantics()) {
            return tom_make_ilor(goalFromHead,tom_make_iland(refuseFromHead,goalFromTail));
          } else {
            return tom_make_ilor(goalFromHead,goalFromTail);
          }
        } else {
          return goalFromHead;
        }
       } } } } } } } } } } if ( ( tom_is_fun_sym_ILLet(tom_match21_1) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tom_match21_1_Var=tom_get_slot_ILLet_Var(tom_match21_1); { tom.engine.adt.il.types.Term  tom_match21_1_T=tom_get_slot_ILLet_T(tom_match21_1); { tom.engine.adt.il.types.Instr  tom_match21_1_Body=tom_get_slot_ILLet_Body(tom_match21_1); { tom.engine.adt.il.types.Variable  tom_x=tom_match21_1_Var; { tom.engine.adt.il.types.Term  tom_u=tom_match21_1_T; { tom.engine.adt.il.types.Instr  tom_i=tom_match21_1_Body; {boolean tom_match21_tom_anti_constraints_status= true ; if ((tom_match21_tom_anti_constraints_status ==  true )) { if ( true ) {

        // update the substitution
        Term t = replaceVariablesInTerm(tom_make_appSubsT(substitution,tom_u));
        substitution = tom_append_list_subs(substitution,tom_cons_list_subs(tom_make_is(tom_x,t),tom_empty_list_subs()));
        //return `iland(eq(tau(absvar(x)),u),buildConstraint(substitution,i,goal));
        return buildConstraint(substitution,tom_i,goal);
       } } } } } } } } } } if ( ( tom_is_fun_sym_ITE(tom_match21_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match21_1_E=tom_get_slot_ITE_E(tom_match21_1); { tom.engine.adt.il.types.Instr  tom_match21_1_Ift=tom_get_slot_ITE_Ift(tom_match21_1); { tom.engine.adt.il.types.Instr  tom_match21_1_Iff=tom_get_slot_ITE_Iff(tom_match21_1); { tom.engine.adt.il.types.Expr  tom_exp=tom_match21_1_E; { tom.engine.adt.il.types.Instr  tom_ift=tom_match21_1_Ift; { tom.engine.adt.il.types.Instr  tom_iff=tom_match21_1_Iff; {boolean tom_match21_tom_anti_constraints_status= true ; if ((tom_match21_tom_anti_constraints_status ==  true )) { if ( true ) {

        Expr closedExpr = replaceVariablesInExpr(tom_make_appSubsE(substitution,tom_exp));
        Expr constraintTrue  = tom_make_iland(closedExpr,buildConstraint(substitution,tom_ift,goal));
        Expr constraintFalse = tom_make_iland(tom_make_ilnot(closedExpr),buildConstraint(substitution,tom_iff,goal));
        return tom_make_ilor(constraintTrue,constraintFalse);
       } } } } } } } } } } if ( ( tom_is_fun_sym_refuse(tom_match21_1) ||  false  ) ) { {boolean tom_match21_tom_anti_constraints_status= true ; if ((tom_match21_tom_anti_constraints_status ==  true )) { if ( true ) {

        if (pil == goal) {
          return tom_make_iltrue(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()));
        } else {
          return tom_make_ilfalse();
        }
       } } } } if ( ( tom_is_fun_sym_accept(tom_match21_1) ||  false  ) ) { {boolean tom_match21_tom_anti_constraints_status= true ; if ((tom_match21_tom_anti_constraints_status ==  true )) { if ( true ) {

        if (pil == goal) {
          return tom_make_iltrue(substitution);
        } else {
          return tom_make_ilfalse();
        }
       } } } } } }

    // default case, should not happen
    return tom_make_ilfalse();
  }

  protected Collection applySemanticsRules(Deriv post) {
    Collection c = new HashSet();
     if(post instanceof  tom.engine.adt.il.types.Deriv ) { { tom.engine.adt.il.types.Deriv  tom_match22_1=(( tom.engine.adt.il.types.Deriv )post); if ( ( tom_is_fun_sym_ebs(tom_match22_1) ||  false  ) ) { { tom.engine.adt.il.types.Environment  tom_match22_1_Lhs=tom_get_slot_ebs_Lhs(tom_match22_1); { tom.engine.adt.il.types.Environment  tom_match22_1_Rhs=tom_get_slot_ebs_Rhs(tom_match22_1); if ( ( tom_is_fun_sym_env(tom_match22_1_Lhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Lhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Lhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I=tom_get_slot_env_I(tom_match22_1_Lhs); { tom.engine.adt.il.types.SubstitutionList  tom_e=tom_match22_1_Lhs_Subs; if ( ( tom_is_fun_sym_sequence(tom_match22_1_Lhs_I) ||  false  ) ) { { tom.engine.adt.il.types.InstrList  tom_match22_1_Lhs_I_Instrlist=tom_get_slot_sequence_Instrlist(tom_match22_1_Lhs_I); if ( ( tom_is_fun_sym_semicolon(tom_match22_1_Lhs_I_Instrlist) ||  false  ) ) { { tom.engine.adt.il.types.InstrList  tom_match22_1_Lhs_I_Instrlist_list1=tom_match22_1_Lhs_I_Instrlist; if (!(tom_is_empty_semicolon_InstrList(tom_match22_1_Lhs_I_Instrlist_list1))) { { tom.engine.adt.il.types.Instr  tom_h=tom_get_head_semicolon_InstrList(tom_match22_1_Lhs_I_Instrlist_list1);tom_match22_1_Lhs_I_Instrlist_list1=tom_get_tail_semicolon_InstrList(tom_match22_1_Lhs_I_Instrlist_list1); { tom.engine.adt.il.types.InstrList  tom_t=tom_match22_1_Lhs_I_Instrlist_list1; if ( ( tom_is_fun_sym_env(tom_match22_1_Rhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Rhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Rhs_I=tom_get_slot_env_I(tom_match22_1_Rhs); if ( ( tom_is_fun_sym_subs(tom_match22_1_Rhs_Subs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs_list1=tom_match22_1_Rhs_Subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1))) { { tom.engine.adt.il.types.Substitution  tom_match22_1_Rhs_Subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1);tom_match22_1_Rhs_Subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match22_1_Rhs_Subs_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1)) { { tom.engine.adt.il.types.Instr  tom_ip=tom_match22_1_Rhs_I; {boolean tom_match22_tom_anti_constraints_status= true ; if ((tom_match22_tom_anti_constraints_status ==  true )) { if ( true ) {

        if(instructionContains(tom_h,tom_ip)) {
          // ends the derivation
          Deriv up = tom_make_ebs(tom_make_env(tom_e,tom_h),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
          Collection pre_list = applySemanticsRules(up);

          Iterator it = pre_list.iterator();
          while(it.hasNext()) {
            DerivTree pre = (DerivTree) it.next();
            c.add(tom_make_derivrule("seqa",post,pre,tom_make_seq()));
          }
        } else {
          // continue the derivation with t
          Deriv up = tom_make_ebs(tom_make_env(tom_e,tom_make_sequence(tom_t)),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
          Collection post_list = applySemanticsRules(up);

          if(this.isCamlSemantics()) {
            up = tom_make_ebs(tom_make_env(tom_e,tom_h),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_make_refuse()));
            Collection pre_list = applySemanticsRules(up);
            Iterator it = pre_list.iterator();
            while(it.hasNext()) {
              DerivTree pre = (DerivTree) it.next();
              Iterator it2 = post_list.iterator();
              while(it2.hasNext()) {
                DerivTree pre2 = (DerivTree) it2.next();
                c.add(tom_make_derivrule2("seqb",post,pre,pre2,tom_make_seq()));
              }
            }
          } else {
            Iterator it = post_list.iterator();
            while(it.hasNext()) {
              DerivTree pre = (DerivTree) it.next();
              c.add(tom_make_derivrule2("seqb",post,tom_make_endderiv(),pre,tom_make_seq()));
            }
          }
        }
       } } } } } } } } } } } } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_ebs(tom_match22_1) ||  false  ) ) { { tom.engine.adt.il.types.Environment  tom_match22_1_Lhs=tom_get_slot_ebs_Lhs(tom_match22_1); { tom.engine.adt.il.types.Environment  tom_match22_1_Rhs=tom_get_slot_ebs_Rhs(tom_match22_1); if ( ( tom_is_fun_sym_env(tom_match22_1_Lhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Lhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Lhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I=tom_get_slot_env_I(tom_match22_1_Lhs); { tom.engine.adt.il.types.SubstitutionList  tom_e=tom_match22_1_Lhs_Subs; if ( ( tom_is_fun_sym_ILLet(tom_match22_1_Lhs_I) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tom_match22_1_Lhs_I_Var=tom_get_slot_ILLet_Var(tom_match22_1_Lhs_I); { tom.engine.adt.il.types.Term  tom_match22_1_Lhs_I_T=tom_get_slot_ILLet_T(tom_match22_1_Lhs_I); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I_Body=tom_get_slot_ILLet_Body(tom_match22_1_Lhs_I); { tom.engine.adt.il.types.Variable  tom_x=tom_match22_1_Lhs_I_Var; { tom.engine.adt.il.types.Term  tom_u=tom_match22_1_Lhs_I_T; { tom.engine.adt.il.types.Instr  tom_i=tom_match22_1_Lhs_I_Body; if ( ( tom_is_fun_sym_env(tom_match22_1_Rhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Rhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Rhs_I=tom_get_slot_env_I(tom_match22_1_Rhs); if ( ( tom_is_fun_sym_subs(tom_match22_1_Rhs_Subs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs_list1=tom_match22_1_Rhs_Subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1))) { { tom.engine.adt.il.types.Substitution  tom_match22_1_Rhs_Subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1);tom_match22_1_Rhs_Subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match22_1_Rhs_Subs_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1)) { { tom.engine.adt.il.types.Instr  tom_ip=tom_match22_1_Rhs_I; {boolean tom_match22_tom_anti_constraints_status= true ; if ((tom_match22_tom_anti_constraints_status ==  true )) { if ( true ) {


        // build condition
        Seq cond = seqFromTerm(tom_make_appSubsT(tom_e,tom_u));
        // find "t"
        Term t = null;
         if(cond instanceof  tom.engine.adt.il.types.Seq ) { { tom.engine.adt.il.types.Seq  tom_match23_1=(( tom.engine.adt.il.types.Seq )cond); if ( ( tom_is_fun_sym_dedterm(tom_match23_1) ||  false  ) ) { { tom.engine.adt.il.types.TermList  tom_match23_1_Terms=tom_get_slot_dedterm_Terms(tom_match23_1); if ( ( tom_is_fun_sym_concTerm(tom_match23_1_Terms) ||  false  ) ) { { tom.engine.adt.il.types.TermList  tom_match23_1_Terms_list1=tom_match23_1_Terms; { tom.engine.adt.il.types.TermList  tom_match23_1_Terms_begin1=tom_match23_1_Terms_list1; { tom.engine.adt.il.types.TermList  tom_match23_1_Terms_end1=tom_match23_1_Terms_list1; { while (!(tom_is_empty_concTerm_TermList(tom_match23_1_Terms_end1))) {tom_match23_1_Terms_list1=tom_match23_1_Terms_end1; { { tom.engine.adt.il.types.Term  tom_r=tom_get_head_concTerm_TermList(tom_match23_1_Terms_list1);tom_match23_1_Terms_list1=tom_get_tail_concTerm_TermList(tom_match23_1_Terms_list1); if (tom_is_empty_concTerm_TermList(tom_match23_1_Terms_list1)) { {boolean tom_match23_tom_anti_constraints_status= true ; if ((tom_match23_tom_anti_constraints_status ==  true )) { if ( true ) {
 t = tom_r;  } } } } }tom_match23_1_Terms_end1=tom_get_tail_concTerm_TermList(tom_match23_1_Terms_end1); } }tom_match23_1_Terms_list1=tom_match23_1_Terms_begin1; } } } } } } } {boolean tom_match23_tom_anti_constraints_status= true ; if ((tom_match23_tom_anti_constraints_status ==  true )) { if ( true ) {
 if (t == null) {
              System.out.println("seqFromTerm has a problem with " + cond);
            }
           } } } } }

        Deriv up = tom_make_ebs(tom_make_env(tom_append_list_subs(tom_e,tom_cons_list_subs(tom_make_is(tom_x,t),tom_empty_list_subs())),tom_i),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip)
            )


;
        Collection pre_list = applySemanticsRules(up);
        Iterator it = pre_list.iterator();
        while(it.hasNext()) {
          DerivTree pre = (DerivTree) it.next();
          c.add(tom_make_derivrule("let",post,pre,cond));
        }
       } } } } } } } } } } } } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_ebs(tom_match22_1) ||  false  ) ) { { tom.engine.adt.il.types.Environment  tom_match22_1_Lhs=tom_get_slot_ebs_Lhs(tom_match22_1); { tom.engine.adt.il.types.Environment  tom_match22_1_Rhs=tom_get_slot_ebs_Rhs(tom_match22_1); if ( ( tom_is_fun_sym_env(tom_match22_1_Lhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Lhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Lhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I=tom_get_slot_env_I(tom_match22_1_Lhs); { tom.engine.adt.il.types.SubstitutionList  tom_e=tom_match22_1_Lhs_Subs; if ( ( tom_is_fun_sym_ITE(tom_match22_1_Lhs_I) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match22_1_Lhs_I_E=tom_get_slot_ITE_E(tom_match22_1_Lhs_I); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I_Ift=tom_get_slot_ITE_Ift(tom_match22_1_Lhs_I); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I_Iff=tom_get_slot_ITE_Iff(tom_match22_1_Lhs_I); { tom.engine.adt.il.types.Expr  tom_exp=tom_match22_1_Lhs_I_E; { tom.engine.adt.il.types.Instr  tom_ift=tom_match22_1_Lhs_I_Ift; { tom.engine.adt.il.types.Instr  tom_iff=tom_match22_1_Lhs_I_Iff; if ( ( tom_is_fun_sym_env(tom_match22_1_Rhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Rhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Rhs_I=tom_get_slot_env_I(tom_match22_1_Rhs); if ( ( tom_is_fun_sym_subs(tom_match22_1_Rhs_Subs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs_list1=tom_match22_1_Rhs_Subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1))) { { tom.engine.adt.il.types.Substitution  tom_match22_1_Rhs_Subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1);tom_match22_1_Rhs_Subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match22_1_Rhs_Subs_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1)) { { tom.engine.adt.il.types.Instr  tom_ip=tom_match22_1_Rhs_I; {boolean tom_match22_tom_anti_constraints_status= true ; if ((tom_match22_tom_anti_constraints_status ==  true )) { if ( true ) {


        // build condition
        ExprList cond = exprListFromExpr(tom_make_appSubsE(tom_e,tom_exp));

        Deriv up = tom_make_ebs(tom_make_env(tom_e,tom_ift),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
        String rulename = "iftrue";

        Collection pre_list = applySemanticsRules(up);
        Iterator it = pre_list.iterator();
        while(it.hasNext()) {
          DerivTree pre = (DerivTree) it.next();
          c.add(tom_make_derivrule(rulename,post,pre,tom_make_dedexpr(tom_append_list_concExpr(cond,tom_cons_list_concExpr(tom_make_iltrue(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs())),tom_empty_list_concExpr())))));
        }

        up = tom_make_ebs(tom_make_env(tom_e,tom_iff),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
        rulename = "iffalse";

        pre_list = applySemanticsRules(up);
        it = pre_list.iterator();
        while(it.hasNext()) {
          DerivTree pre = (DerivTree) it.next();
          c.add(tom_make_derivrule(rulename,post,pre,tom_make_dedexpr(tom_append_list_concExpr(cond,tom_cons_list_concExpr(tom_make_ilfalse(),tom_empty_list_concExpr())))));
        }
       } } } } } } } } } } } } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_ebs(tom_match22_1) ||  false  ) ) { { tom.engine.adt.il.types.Environment  tom_match22_1_Lhs=tom_get_slot_ebs_Lhs(tom_match22_1); { tom.engine.adt.il.types.Environment  tom_match22_1_Rhs=tom_get_slot_ebs_Rhs(tom_match22_1); if ( ( tom_is_fun_sym_env(tom_match22_1_Lhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Lhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Lhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I=tom_get_slot_env_I(tom_match22_1_Lhs); if ( ( tom_is_fun_sym_accept(tom_match22_1_Lhs_I) ||  false  ) ) { if ( ( tom_is_fun_sym_env(tom_match22_1_Rhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Rhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Rhs_I=tom_get_slot_env_I(tom_match22_1_Rhs); if ( ( tom_is_fun_sym_subs(tom_match22_1_Rhs_Subs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs_list1=tom_match22_1_Rhs_Subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1))) { { tom.engine.adt.il.types.Substitution  tom_match22_1_Rhs_Subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1);tom_match22_1_Rhs_Subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match22_1_Rhs_Subs_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1)) { if ( ( tom_is_fun_sym_accept(tom_match22_1_Rhs_I) ||  false  ) ) { {boolean tom_match22_tom_anti_constraints_status= true ; if ((tom_match22_tom_anti_constraints_status ==  true )) { if ( true ) {


        c.add(tom_make_derivrule("axiom_accept",post,tom_make_endderiv(),tom_make_seq()));
       } } } } } } } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_ebs(tom_match22_1) ||  false  ) ) { { tom.engine.adt.il.types.Environment  tom_match22_1_Lhs=tom_get_slot_ebs_Lhs(tom_match22_1); { tom.engine.adt.il.types.Environment  tom_match22_1_Rhs=tom_get_slot_ebs_Rhs(tom_match22_1); if ( ( tom_is_fun_sym_env(tom_match22_1_Lhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Lhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Lhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Lhs_I=tom_get_slot_env_I(tom_match22_1_Lhs); if ( ( tom_is_fun_sym_refuse(tom_match22_1_Lhs_I) ||  false  ) ) { if ( ( tom_is_fun_sym_env(tom_match22_1_Rhs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs=tom_get_slot_env_Subs(tom_match22_1_Rhs); { tom.engine.adt.il.types.Instr  tom_match22_1_Rhs_I=tom_get_slot_env_I(tom_match22_1_Rhs); if ( ( tom_is_fun_sym_subs(tom_match22_1_Rhs_Subs) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match22_1_Rhs_Subs_list1=tom_match22_1_Rhs_Subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1))) { { tom.engine.adt.il.types.Substitution  tom_match22_1_Rhs_Subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1);tom_match22_1_Rhs_Subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match22_1_Rhs_Subs_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_Rhs_Subs_list1)) { if ( ( tom_is_fun_sym_refuse(tom_match22_1_Rhs_I) ||  false  ) ) { {boolean tom_match22_tom_anti_constraints_status= true ; if ((tom_match22_tom_anti_constraints_status ==  true )) { if ( true ) {

        c.add(tom_make_derivrule("axiom_refuse",post,tom_make_endderiv(),tom_make_seq()));
       } } } } } } } } } } } } } } } } } } } } {boolean tom_match22_tom_anti_constraints_status= true ; if ((tom_match22_tom_anti_constraints_status ==  true )) { if ( true ) {

        if (c.isEmpty()) {
            //System.out.println("Error " + post);
        }
       } } } } }

    return c;
  }

   private static class stratInstructionContains  extends  tom.engine.adt.il.IlBasicStrategy   { private  tom.engine.adt.il.types.Instr  goal;  private  java.util.Collection  c;  public stratInstructionContains(  tom.engine.adt.il.types.Instr  goal ,   java.util.Collection  c ) { super(tom_make_Identity() ); this.goal=goal; this.c=c; } public  tom.engine.adt.il.types.Instr  getgoal() { return goal;} public  java.util.Collection  getc() { return c;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.il.types.Instr  visit_Instr(  tom.engine.adt.il.types.Instr  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Instr ) { { tom.engine.adt.il.types.Instr  tom_match24_1=(( tom.engine.adt.il.types.Instr )tom__arg); { tom.engine.adt.il.types.Instr  tom_x=tom_match24_1; {boolean tom_match24_tom_anti_constraints_status= true ; if ((tom_match24_tom_anti_constraints_status ==  true )) { if ( true ) {


        if (tom_x== goal) {
          c.add(goal);
          tom_make_Fail().visit(tom_x);
        }
       } } } } } } return super.visit_Instr(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_stratInstructionContains( tom.engine.adt.il.types.Instr  t0,  java.util.Collection  t1) { return new stratInstructionContains(t0,t1); }


  protected boolean instructionContains(Instr i, Instr goal) {
    Collection collect = new HashSet();
    try {
      tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_cons_list_Sequence(tom_make_stratInstructionContains(goal,collect),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("x")),tom_empty_list_Sequence())))).visit(i);
    } catch(jjtraveler.VisitFailure e) {
      System.out.println("strategy instructionContains failed");
    }
    return !collect.isEmpty();
  }

/**
 * To replace undefsubst in tree by the computed value
 * which leads to axiom
 */
   private static class replaceUndefsubs  extends  tom.engine.adt.il.IlBasicStrategy   { private  tom.engine.adt.il.types.SubstitutionList  arg;  public replaceUndefsubs(  tom.engine.adt.il.types.SubstitutionList  arg ) { super(tom_make_Identity() ); this.arg=arg; } public  tom.engine.adt.il.types.SubstitutionList  getarg() { return arg;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.il.types.SubstitutionList  visit_SubstitutionList(  tom.engine.adt.il.types.SubstitutionList  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.SubstitutionList ) { { tom.engine.adt.il.types.SubstitutionList  tom_match25_1=(( tom.engine.adt.il.types.SubstitutionList )tom__arg); if ( ( tom_is_fun_sym_subs(tom_match25_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match25_1_list1=tom_match25_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match25_1_list1))) { { tom.engine.adt.il.types.Substitution  tom_match25_1_1=tom_get_head_subs_SubstitutionList(tom_match25_1_list1);tom_match25_1_list1=tom_get_tail_subs_SubstitutionList(tom_match25_1_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match25_1_1) ||  false  ) ) { if (tom_is_empty_subs_SubstitutionList(tom_match25_1_list1)) { {boolean tom_match25_tom_anti_constraints_status= true ; if ((tom_match25_tom_anti_constraints_status ==  true )) { if ( true ) {


        return arg;
       } } } } } } } } } } } return super.visit_SubstitutionList(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_replaceUndefsubs( tom.engine.adt.il.types.SubstitutionList  t0) { return new replaceUndefsubs(t0); }



  private DerivTree replaceUndefinedSubstitution(DerivTree subject,
                                      SubstitutionList subs) {
    try {
      subject = (DerivTree) tom_make_TopDown(tom_make_replaceUndefsubs(subs)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectProgramVariables failed");
    }
    return subject;
  }

  


  static private class SubstRef {
    private SubstitutionList sublist;
    public SubstRef(SubstitutionList slist) {
      sublist = slist;
    }
    public void set(SubstitutionList ssublist) {
      this.sublist = ssublist;
    }
    public SubstitutionList get() {
      return sublist;
    }
  }

  /**
   * These functions deals with substitution application
   */
   private static class replaceVariableByTerm  extends  tom.engine.adt.il.IlBasicStrategy   { private  java.util.Map  map;  public replaceVariableByTerm(  java.util.Map  map ) { super(tom_make_Identity() ); this.map=map; } public  java.util.Map  getmap() { return map;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.il.types.Term  visit_Term(  tom.engine.adt.il.types.Term  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Term ) { { tom.engine.adt.il.types.Term  tom_match26_1=(( tom.engine.adt.il.types.Term )tom__arg); if ( ( tom_is_fun_sym_tau(tom_match26_1) ||  false  ) ) { { tom.engine.adt.il.types.AbsTerm  tom_match26_1_Abst=tom_get_slot_tau_Abst(tom_match26_1); if ( ( tom_is_fun_sym_absvar(tom_match26_1_Abst) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tom_match26_1_Abst_Varname=tom_get_slot_absvar_Varname(tom_match26_1_Abst); if ( ( tom_is_fun_sym_var(tom_match26_1_Abst_Varname) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tom_v=tom_match26_1_Abst_Varname; {boolean tom_match26_tom_anti_constraints_status= true ; { tom.engine.adt.il.types.Term  tom_t=tom_match26_1; if ((tom_match26_tom_anti_constraints_status ==  true )) { if ( true ) {


        if (map.containsKey(tom_v)) {
          return (Term)map.get(tom_v);
        }
        return tom_t;
       } } } } } } } } } } } } return super.visit_Term(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_replaceVariableByTerm( java.util.Map  t0) { return new replaceVariableByTerm(t0); }



  public Term replaceVariablesInTerm(Term subject) {
     if(subject instanceof  tom.engine.adt.il.types.Term ) { { tom.engine.adt.il.types.Term  tom_match27_1=(( tom.engine.adt.il.types.Term )subject); if ( ( tom_is_fun_sym_appSubsT(tom_match27_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match27_1_Subs=tom_get_slot_appSubsT_Subs(tom_match27_1); { tom.engine.adt.il.types.Term  tom_match27_1_T=tom_get_slot_appSubsT_T(tom_match27_1); { tom.engine.adt.il.types.SubstitutionList  tom_sublist=tom_match27_1_Subs; { tom.engine.adt.il.types.Term  tom_term=tom_match27_1_T; {boolean tom_match27_tom_anti_constraints_status= true ; if ((tom_match27_tom_anti_constraints_status ==  true )) { if ( true ) {

        Map map = buildVariableMap(tom_sublist, new HashMap());
        Term t = tom_term;
        try {
          t = (Term) tom_make_TopDown(tom_make_replaceVariableByTerm(map)).visit(tom_term);
        } catch (jjtraveler.VisitFailure e) {
          throw new TomRuntimeException("Strategy collectProgramVariables failed");
        }
        return t;
       } } } } } } } } } }

    return subject;
  }

  public Expr replaceVariablesInExpr(Expr subject) {
     if(subject instanceof  tom.engine.adt.il.types.Expr ) { { tom.engine.adt.il.types.Expr  tom_match28_1=(( tom.engine.adt.il.types.Expr )subject); if ( ( tom_is_fun_sym_appSubsE(tom_match28_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match28_1_Subs=tom_get_slot_appSubsE_Subs(tom_match28_1); { tom.engine.adt.il.types.Expr  tom_match28_1_E=tom_get_slot_appSubsE_E(tom_match28_1); { tom.engine.adt.il.types.SubstitutionList  tom_sublist=tom_match28_1_Subs; { tom.engine.adt.il.types.Expr  tom_term=tom_match28_1_E; {boolean tom_match28_tom_anti_constraints_status= true ; if ((tom_match28_tom_anti_constraints_status ==  true )) { if ( true ) {

        Map map = buildVariableMap(tom_sublist, new HashMap());
        Expr t = tom_term;
        try {
          t = (Expr) tom_make_TopDown(tom_make_replaceVariableByTerm(map)).visit(tom_term);
        } catch (jjtraveler.VisitFailure e) {
          throw new TomRuntimeException("Strategy collectProgramVariables failed");
        }
        return t;
       } } } } } } } } } }

    return subject;
  }

  String tomNumberListToString(TomNumberList numberList) {
    String result = "";
    while(!numberList.isEmptyconcTomNumber()) {
      TomNumber number = numberList.getHeadconcTomNumber();
      numberList = numberList.getTailconcTomNumber();
       if(number instanceof  tom.engine.adt.tomname.types.TomNumber ) { { tom.engine.adt.tomname.types.TomNumber  tom_match29_1=(( tom.engine.adt.tomname.types.TomNumber )number); if ( ( tom_is_fun_sym_Number(tom_match29_1) ||  false  ) ) { { int  tom_match29_1_Integer=tom_get_slot_Number_Integer(tom_match29_1); { int  tom_n=tom_match29_1_Integer; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = result + "Number" + Integer.toString(tom_n);
         } } } } } } if ( ( tom_is_fun_sym_MatchNumber(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumber  tom_match29_1_Number=tom_get_slot_MatchNumber_Number(tom_match29_1); if ( ( tom_is_fun_sym_Number(tom_match29_1_Number) ||  false  ) ) { { int  tom_match29_1_Number_Integer=tom_get_slot_Number_Integer(tom_match29_1_Number); { int  tom_n=tom_match29_1_Number_Integer; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = result + "Match" + Integer.toString(tom_n);
         } } } } } } } } if ( ( tom_is_fun_sym_PatternNumber(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumber  tom_match29_1_Number=tom_get_slot_PatternNumber_Number(tom_match29_1); if ( ( tom_is_fun_sym_Number(tom_match29_1_Number) ||  false  ) ) { { int  tom_match29_1_Number_Integer=tom_get_slot_Number_Integer(tom_match29_1_Number); { int  tom_n=tom_match29_1_Number_Integer; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = result + "Pattern" + Integer.toString(tom_n);
         } } } } } } } } if ( ( tom_is_fun_sym_IndexNumber(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumber  tom_match29_1_Number=tom_get_slot_IndexNumber_Number(tom_match29_1); if ( ( tom_is_fun_sym_Number(tom_match29_1_Number) ||  false  ) ) { { int  tom_match29_1_Number_Integer=tom_get_slot_Number_Integer(tom_match29_1_Number); { int  tom_n=tom_match29_1_Number_Integer; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = result + "Index" + Integer.toString(tom_n);
         } } } } } } } } if ( ( tom_is_fun_sym_Begin(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumber  tom_match29_1_Number=tom_get_slot_Begin_Number(tom_match29_1); if ( ( tom_is_fun_sym_Number(tom_match29_1_Number) ||  false  ) ) { { int  tom_match29_1_Number_Integer=tom_get_slot_Number_Integer(tom_match29_1_Number); { int  tom_n=tom_match29_1_Number_Integer; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = result + "Begin" + Integer.toString(tom_n);
         } } } } } } } } if ( ( tom_is_fun_sym_End(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumber  tom_match29_1_Number=tom_get_slot_End_Number(tom_match29_1); if ( ( tom_is_fun_sym_Number(tom_match29_1_Number) ||  false  ) ) { { int  tom_match29_1_Number_Integer=tom_get_slot_Number_Integer(tom_match29_1_Number); { int  tom_n=tom_match29_1_Number_Integer; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = result + "End" + Integer.toString(tom_n);
         } } } } } } } } if ( ( tom_is_fun_sym_AbsVar(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumber  tom_match29_1_Number=tom_get_slot_AbsVar_Number(tom_match29_1); if ( ( tom_is_fun_sym_Number(tom_match29_1_Number) ||  false  ) ) { { int  tom_match29_1_Number_Integer=tom_get_slot_Number_Integer(tom_match29_1_Number); { int  tom_n=tom_match29_1_Number_Integer; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = result + "AbsVar" + Integer.toString(tom_n);
         } } } } } } } } if ( ( tom_is_fun_sym_RenamedVar(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match29_1_AstName=tom_get_slot_RenamedVar_AstName(tom_match29_1); { tom.engine.adt.tomname.types.TomName  tom_tomName=tom_match29_1_AstName; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          String identifier = "Empty";
           if(tom_tomName instanceof  tom.engine.adt.tomname.types.TomName ) { { tom.engine.adt.tomname.types.TomName  tom_match30_1=(( tom.engine.adt.tomname.types.TomName )tom_tomName); if ( ( tom_is_fun_sym_Name(tom_match30_1) ||  false  ) ) { { String  tom_match30_1_String=tom_get_slot_Name_String(tom_match30_1); { String  tom_name=tom_match30_1_String; {boolean tom_match30_tom_anti_constraints_status= true ; if ((tom_match30_tom_anti_constraints_status ==  true )) { if ( true ) {

              identifier = tom_name;
             } } } } } } if ( ( tom_is_fun_sym_PositionName(tom_match30_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumberList  tom_match30_1_NumberList=tom_get_slot_PositionName_NumberList(tom_match30_1); { tom.engine.adt.tomname.types.TomNumberList  tom_localNumberList=tom_match30_1_NumberList; {boolean tom_match30_tom_anti_constraints_status= true ; if ((tom_match30_tom_anti_constraints_status ==  true )) { if ( true ) {

              identifier = tomNumberListToString(tom_localNumberList);
             } } } } } } } }

          result = result + "RenamedVar" + identifier;
         } } } } } } if ( ( tom_is_fun_sym_NameNumber(tom_match29_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match29_1_AstName=tom_get_slot_NameNumber_AstName(tom_match29_1); { tom.engine.adt.tomname.types.TomName  tom_tomName=tom_match29_1_AstName; {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          String identifier = "Empty";
           if(tom_tomName instanceof  tom.engine.adt.tomname.types.TomName ) { { tom.engine.adt.tomname.types.TomName  tom_match31_1=(( tom.engine.adt.tomname.types.TomName )tom_tomName); if ( ( tom_is_fun_sym_Name(tom_match31_1) ||  false  ) ) { { String  tom_match31_1_String=tom_get_slot_Name_String(tom_match31_1); { String  tom_name=tom_match31_1_String; {boolean tom_match31_tom_anti_constraints_status= true ; if ((tom_match31_tom_anti_constraints_status ==  true )) { if ( true ) {

              identifier = tom_name;
             } } } } } } if ( ( tom_is_fun_sym_PositionName(tom_match31_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumberList  tom_match31_1_NumberList=tom_get_slot_PositionName_NumberList(tom_match31_1); { tom.engine.adt.tomname.types.TomNumberList  tom_localNumberList=tom_match31_1_NumberList; {boolean tom_match31_tom_anti_constraints_status= true ; if ((tom_match31_tom_anti_constraints_status ==  true )) { if ( true ) {

              identifier = tomNumberListToString(tom_localNumberList);
             } } } } } } } }

          result = result + "NameNumber" + identifier;
         } } } } } } if ( ( tom_is_fun_sym_RuleVar(tom_match29_1) ||  false  ) ) { {boolean tom_match29_tom_anti_constraints_status= true ; if ((tom_match29_tom_anti_constraints_status ==  true )) { if ( true ) {

          result = "RuleVar" + result;
         } } } } } }

    }
    return result;
  }

  private Map buildVariableMap(SubstitutionList sublist, Map map) {
     if(sublist instanceof  tom.engine.adt.il.types.SubstitutionList ) { { tom.engine.adt.il.types.SubstitutionList  tom_match32_1=(( tom.engine.adt.il.types.SubstitutionList )sublist); if ( ( tom_is_fun_sym_subs(tom_match32_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match32_1_list1=tom_match32_1; if (tom_is_empty_subs_SubstitutionList(tom_match32_1_list1)) { {boolean tom_match32_tom_anti_constraints_status= true ; if ((tom_match32_tom_anti_constraints_status ==  true )) { if ( true ) {
 return map;  } } } } } } if ( ( tom_is_fun_sym_subs(tom_match32_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match32_1_list1=tom_match32_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match32_1_list1))) { { tom.engine.adt.il.types.Substitution  tom_match32_1_1=tom_get_head_subs_SubstitutionList(tom_match32_1_list1);tom_match32_1_list1=tom_get_tail_subs_SubstitutionList(tom_match32_1_list1); if ( ( tom_is_fun_sym_undefsubs(tom_match32_1_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_t=tom_match32_1_list1; {boolean tom_match32_tom_anti_constraints_status= true ; if ((tom_match32_tom_anti_constraints_status ==  true )) { if ( true ) {
 return buildVariableMap(tom_t,map); } } } } } } } } } if ( ( tom_is_fun_sym_subs(tom_match32_1) ||  false  ) ) { { tom.engine.adt.il.types.SubstitutionList  tom_match32_1_list1=tom_match32_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match32_1_list1))) { { tom.engine.adt.il.types.Substitution  tom_match32_1_1=tom_get_head_subs_SubstitutionList(tom_match32_1_list1);tom_match32_1_list1=tom_get_tail_subs_SubstitutionList(tom_match32_1_list1); if ( ( tom_is_fun_sym_is(tom_match32_1_1) ||  false  ) ) { { tom.engine.adt.il.types.Variable  tom_match32_1_1_Var=tom_get_slot_is_Var(tom_match32_1_1); { tom.engine.adt.il.types.Term  tom_match32_1_1_Term=tom_get_slot_is_Term(tom_match32_1_1); { tom.engine.adt.il.types.Variable  tom_v=tom_match32_1_1_Var; { tom.engine.adt.il.types.Term  tom_term=tom_match32_1_1_Term; { tom.engine.adt.il.types.SubstitutionList  tom_t=tom_match32_1_list1; {boolean tom_match32_tom_anti_constraints_status= true ; if ((tom_match32_tom_anti_constraints_status ==  true )) { if ( true ) {

        map.put(tom_v,tom_term);
        return buildVariableMap(tom_t,map);
       } } } } } } } } } } } } } } }

    return null;
  }

  public void mappingReduce(Map input) {
    Iterator it = input.keySet().iterator();
    while(it.hasNext()) {
      Object key = it.next();
      Expr value = (Expr) input.get(key);
      input.put(key,reduceWithMappingRules(value));
    }
  }

  public void booleanReduce(Map input) {
    Iterator it = input.keySet().iterator();
    while(it.hasNext()) {
      Object key = it.next();
      Expr value = (Expr) input.get(key);
      input.put(key,booleanSimplify(value));
    }
  }

  public Expr booleanSimplify(Expr expr) {
    VisitableVisitor booleanSimplifier = new BooleanSimplifier();
    Expr res = tom_make_ilfalse();
    try {
      res = (Expr) tom_make_InnermostId(booleanSimplifier).visit(expr);
    } catch (jjtraveler.VisitFailure e) {
      System.out.println("humm");
    }
    return res;
  }

  public class BooleanSimplifier extends IlBasicStrategy {
    public BooleanSimplifier() {
      super(tom_make_Identity());
    }

    public Expr visit_Expr(Expr arg) throws jjtraveler.VisitFailure {
       if(arg instanceof  tom.engine.adt.il.types.Expr ) { { tom.engine.adt.il.types.Expr  tom_match33_1=(( tom.engine.adt.il.types.Expr )arg); if ( ( tom_is_fun_sym_iland(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Left=tom_get_slot_iland_Left(tom_match33_1); { tom.engine.adt.il.types.Expr  tom_match33_1_Right=tom_get_slot_iland_Right(tom_match33_1); if ( ( tom_is_fun_sym_ilfalse(tom_match33_1_Left) ||  false  ) ) { {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_make_ilfalse();
         } } } } } } } if ( ( tom_is_fun_sym_iland(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Left=tom_get_slot_iland_Left(tom_match33_1); { tom.engine.adt.il.types.Expr  tom_match33_1_Right=tom_get_slot_iland_Right(tom_match33_1); if ( ( tom_is_fun_sym_ilfalse(tom_match33_1_Right) ||  false  ) ) { {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_make_ilfalse();
         } } } } } } } if ( ( tom_is_fun_sym_ilor(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Left=tom_get_slot_ilor_Left(tom_match33_1); { tom.engine.adt.il.types.Expr  tom_match33_1_Right=tom_get_slot_ilor_Right(tom_match33_1); if ( ( tom_is_fun_sym_iltrue(tom_match33_1_Left) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_lt=tom_match33_1_Left; {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_lt;
         } } } } } } } } if ( ( tom_is_fun_sym_ilor(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Left=tom_get_slot_ilor_Left(tom_match33_1); { tom.engine.adt.il.types.Expr  tom_match33_1_Right=tom_get_slot_ilor_Right(tom_match33_1); if ( ( tom_is_fun_sym_iltrue(tom_match33_1_Right) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_lt=tom_match33_1_Right; {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_lt;
         } } } } } } } } if ( ( tom_is_fun_sym_ilor(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Left=tom_get_slot_ilor_Left(tom_match33_1); { tom.engine.adt.il.types.Expr  tom_match33_1_Right=tom_get_slot_ilor_Right(tom_match33_1); if ( ( tom_is_fun_sym_ilfalse(tom_match33_1_Left) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_right=tom_match33_1_Right; {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_right;
         } } } } } } } } if ( ( tom_is_fun_sym_ilor(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Left=tom_get_slot_ilor_Left(tom_match33_1); { tom.engine.adt.il.types.Expr  tom_match33_1_Right=tom_get_slot_ilor_Right(tom_match33_1); { tom.engine.adt.il.types.Expr  tom_left=tom_match33_1_Left; if ( ( tom_is_fun_sym_ilfalse(tom_match33_1_Right) ||  false  ) ) { {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_left;
         } } } } } } } } if ( ( tom_is_fun_sym_ilnot(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Exp=tom_get_slot_ilnot_Exp(tom_match33_1); if ( ( tom_is_fun_sym_iltrue(tom_match33_1_Exp) ||  false  ) ) { {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_make_ilfalse();
         } } } } } } if ( ( tom_is_fun_sym_ilnot(tom_match33_1) ||  false  ) ) { { tom.engine.adt.il.types.Expr  tom_match33_1_Exp=tom_get_slot_ilnot_Exp(tom_match33_1); if ( ( tom_is_fun_sym_ilfalse(tom_match33_1_Exp) ||  false  ) ) { {boolean tom_match33_tom_anti_constraints_status= true ; if ((tom_match33_tom_anti_constraints_status ==  true )) { if ( true ) {

          return tom_make_iltrue(tom_empty_list_subs());
         } } } } } } } }

      return (Expr) any.visit(arg);
    }
  }

  TermList reverseTermList(TermList l) {
     if(l instanceof  tom.engine.adt.il.types.TermList ) { { tom.engine.adt.il.types.TermList  tom_match34_1=(( tom.engine.adt.il.types.TermList )l); if ( ( tom_is_fun_sym_concTerm(tom_match34_1) ||  false  ) ) { { tom.engine.adt.il.types.TermList  tom_match34_1_list1=tom_match34_1; if (!(tom_is_empty_concTerm_TermList(tom_match34_1_list1))) { { tom.engine.adt.il.types.Term  tom_h=tom_get_head_concTerm_TermList(tom_match34_1_list1);tom_match34_1_list1=tom_get_tail_concTerm_TermList(tom_match34_1_list1); { tom.engine.adt.il.types.TermList  tom_t=tom_match34_1_list1; {boolean tom_match34_tom_anti_constraints_status= true ; if ((tom_match34_tom_anti_constraints_status ==  true )) { if ( true ) {

        TermList nt = reverseTermList(tom_t);
        return tom_append_list_concTerm(nt,tom_cons_list_concTerm(tom_h,tom_empty_list_concTerm()));
       } } } } } } } } } }

    return l;
  }

}
