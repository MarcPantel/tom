/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import java.util.*;
import tom.engine.tools.SymbolTable;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.il.*;
import tom.engine.adt.il.types.*;
import tom.engine.exception.TomRuntimeException;

import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

public class Verifier extends TomBase {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_GetSlot( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSlot() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetSlot_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlot_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  String  tom_get_slot_GetSlot_slotNameString( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSlotNameString() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSlot_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetSubterm( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSubterm() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetSubterm_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSubterm_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_GetSubterm_number( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_Cast( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isCast() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Cast_astType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Cast_source( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSource() ;}private static boolean tom_is_fun_sym_EqualTerm( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isEqualTerm() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_EqualTerm_tomType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualTerm_kid2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid2() ;}private static boolean tom_is_fun_sym_EqualFunctionSymbol( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isEqualFunctionSymbol() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_EqualFunctionSymbol_astType( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getExp1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_EqualFunctionSymbol_exp2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getExp2() ;}private static boolean tom_is_fun_sym_FalseTL( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isFalseTL() ;}private static boolean tom_is_fun_sym_TrueTL( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isTrueTL() ;}private static boolean tom_is_fun_sym_TomTermToExpression( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isTomTermToExpression() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToExpression_astTerm( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstTerm() ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TypedAction( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isTypedAction() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_TypedAction_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static  tom.engine.adt.tomsignature.types.Pattern tom_get_slot_TypedAction_positivePattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPositivePattern() ;}private static  tom.engine.adt.tomsignature.types.PatternList tom_get_slot_TypedAction_negativePatternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getNegativePatternList() ;}private static boolean tom_is_fun_sym_CheckStamp( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCheckStamp() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_CheckStamp_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_CompiledPattern( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isCompiledPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_CompiledPattern_patternList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getPatternList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_CompiledPattern_automataInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAutomataInst() ;}private static boolean tom_is_fun_sym_AbstractBlock( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isAbstractBlock() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_AbstractBlock_instList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getInstList() ;}private static boolean tom_is_fun_sym_Nop( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isNop() ;}private static boolean tom_is_fun_sym_LetAssign( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLetAssign() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_LetAssign_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_LetAssign_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_LetAssign_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_Let( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isLet() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Let_variable( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_Let_source( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSource() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_Let_astInstruction( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstInstruction() ;}private static boolean tom_is_fun_sym_If( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isIf() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_If_condition( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getCondition() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_succesInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSuccesInst() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_If_failureInst( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getFailureInst() ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concInstruction( tom.engine.adt.tomsignature.types.InstructionList t) {  return (t!= null) && t.isSortInstructionList() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_empty_list_concInstruction() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(); }private static  tom.engine.adt.tomsignature.types.InstructionList tom_cons_list_concInstruction( tom.engine.adt.tomsignature.types.Instruction e,  tom.engine.adt.tomsignature.types.InstructionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(e,l); }private static  tom.engine.adt.tomsignature.types.Instruction tom_get_head_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_tail_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concInstruction_InstructionList( tom.engine.adt.tomsignature.types.InstructionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_append_list_concInstruction( tom.engine.adt.tomsignature.types.InstructionList l1,  tom.engine.adt.tomsignature.types.InstructionList l2) {    if(tom_is_empty_concInstruction_InstructionList(l1)) {     return l2;    } else if(tom_is_empty_concInstruction_InstructionList(l2)) {     return l1;    } else if(tom_is_empty_concInstruction_InstructionList(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1))) {     return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(l1),tom_append_list_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slice_concInstruction( tom.engine.adt.tomsignature.types.InstructionList begin,  tom.engine.adt.tomsignature.types.InstructionList end) {    if(tom_terms_equal_InstructionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_empty_list_concInstruction();    } else {      return ( tom.engine.adt.tomsignature.types.InstructionList)tom_cons_list_concInstruction(( tom.engine.adt.tomsignature.types.Instruction)tom_get_head_concInstruction_InstructionList(begin),( tom.engine.adt.tomsignature.types.InstructionList)tom_get_slice_concInstruction(( tom.engine.adt.tomsignature.types.InstructionList)tom_get_tail_concInstruction_InstructionList(begin),end));    }   }  private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_RuleVar( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isRuleVar() ;}private static boolean tom_is_fun_sym_NameNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isNameNumber() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_NameNumber_astName( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_RenamedVar( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isRenamedVar() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_RenamedVar_astName( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_AbsVar( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isAbsVar() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_AbsVar_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_Number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isNumber() ;}private static  int  tom_get_slot_Number_integer( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getInteger() ;}private static boolean tom_is_fun_sym_End( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isEnd() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_End_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_Begin( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isBegin() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_Begin_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_IndexNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isIndexNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_IndexNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_PatternNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isPatternNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_PatternNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_MatchNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isMatchNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_MatchNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_EmptyName( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isEmptyName() ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isPositionName() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_slot_PositionName_numberList( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getNumberList() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomsignature.types.Pattern t) {  return  (t!= null) && t.isPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_subjectList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_tomList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_guards( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getGuards() ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_ExpressionToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isExpressionToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.Expression tom_get_slot_ExpressionToTomTerm_astExpression( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstExpression() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_DerivTree(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.il.types.DerivTree tom_make_derivrule2( String  t0,  tom.engine.adt.il.types.Deriv t1,  tom.engine.adt.il.types.DerivTree t2,  tom.engine.adt.il.types.DerivTree t3,  tom.engine.adt.il.types.Seq t4) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDerivTree_Derivrule2(t0, t1, t2, t3, t4); }private static  tom.engine.adt.il.types.DerivTree tom_make_derivrule( String  t0,  tom.engine.adt.il.types.Deriv t1,  tom.engine.adt.il.types.DerivTree t2,  tom.engine.adt.il.types.Seq t3) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDerivTree_Derivrule(t0, t1, t2, t3); }private static  tom.engine.adt.il.types.DerivTree tom_make_endderiv() { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDerivTree_Endderiv(); }private static boolean tom_terms_equal_Deriv(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_ebs( tom.engine.adt.il.types.Deriv t) {  return  (t!= null) && t.isEbs() ;}private static  tom.engine.adt.il.types.Deriv tom_make_ebs( tom.engine.adt.il.types.Environment t0,  tom.engine.adt.il.types.Environment t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeriv_Ebs(t0, t1); }private static  tom.engine.adt.il.types.Environment tom_get_slot_ebs_lhs( tom.engine.adt.il.types.Deriv t) {  return  t.getLhs() ;}private static  tom.engine.adt.il.types.Environment tom_get_slot_ebs_rhs( tom.engine.adt.il.types.Deriv t) {  return  t.getRhs() ;}private static boolean tom_terms_equal_ExprList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concExpr( tom.engine.adt.il.types.ExprList t) {  return (t!= null) && t.isSortExprList() ;}private static  tom.engine.adt.il.types.ExprList tom_empty_list_concExpr() { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExprList(); }private static  tom.engine.adt.il.types.ExprList tom_cons_list_concExpr( tom.engine.adt.il.types.Expr e,  tom.engine.adt.il.types.ExprList l) { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExprList(e,l); }private static  tom.engine.adt.il.types.Expr tom_get_head_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) {  return l.getHead() ;}private static  tom.engine.adt.il.types.ExprList tom_get_tail_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) {  return l.getTail() ;}private static boolean tom_is_empty_concExpr_ExprList( tom.engine.adt.il.types.ExprList l) {  return l.isEmpty() ;}private static  tom.engine.adt.il.types.ExprList tom_append_list_concExpr( tom.engine.adt.il.types.ExprList l1,  tom.engine.adt.il.types.ExprList l2) {    if(tom_is_empty_concExpr_ExprList(l1)) {     return l2;    } else if(tom_is_empty_concExpr_ExprList(l2)) {     return l1;    } else if(tom_is_empty_concExpr_ExprList(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(l1))) {     return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(l1),l2);    } else {      return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(l1),tom_append_list_concExpr(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(l1),l2));    }   }  private static  tom.engine.adt.il.types.ExprList tom_get_slice_concExpr( tom.engine.adt.il.types.ExprList begin,  tom.engine.adt.il.types.ExprList end) {    if(tom_terms_equal_ExprList(begin,end)) {      return ( tom.engine.adt.il.types.ExprList)tom_empty_list_concExpr();    } else {      return ( tom.engine.adt.il.types.ExprList)tom_cons_list_concExpr(( tom.engine.adt.il.types.Expr)tom_get_head_concExpr_ExprList(begin),( tom.engine.adt.il.types.ExprList)tom_get_slice_concExpr(( tom.engine.adt.il.types.ExprList)tom_get_tail_concExpr_ExprList(begin),end));    }   }  private static boolean tom_terms_equal_Seq(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.il.types.Seq tom_make_dedexpr( tom.engine.adt.il.types.ExprList t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSeq_Dedexpr(t0); }private static boolean tom_is_fun_sym_dedterm( tom.engine.adt.il.types.Seq t) {  return  (t!= null) && t.isDedterm() ;}private static  tom.engine.adt.il.types.Seq tom_make_dedterm( tom.engine.adt.il.types.TermList t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSeq_Dedterm(t0); }private static  tom.engine.adt.il.types.TermList tom_get_slot_dedterm_terms( tom.engine.adt.il.types.Seq t) {  return  t.getTerms() ;}private static  tom.engine.adt.il.types.Seq tom_make_seq() { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSeq_Seq(); }private static boolean tom_terms_equal_TermList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTerm( tom.engine.adt.il.types.TermList t) {  return (t!= null) && t.isSortTermList() ;}private static  tom.engine.adt.il.types.TermList tom_empty_list_concTerm() { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTermList(); }private static  tom.engine.adt.il.types.TermList tom_cons_list_concTerm( tom.engine.adt.il.types.Term e,  tom.engine.adt.il.types.TermList l) { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTermList(e,l); }private static  tom.engine.adt.il.types.Term tom_get_head_concTerm_TermList( tom.engine.adt.il.types.TermList l) {  return l.getHead() ;}private static  tom.engine.adt.il.types.TermList tom_get_tail_concTerm_TermList( tom.engine.adt.il.types.TermList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTerm_TermList( tom.engine.adt.il.types.TermList l) {  return l.isEmpty() ;}private static  tom.engine.adt.il.types.TermList tom_append_list_concTerm( tom.engine.adt.il.types.TermList l1,  tom.engine.adt.il.types.TermList l2) {    if(tom_is_empty_concTerm_TermList(l1)) {     return l2;    } else if(tom_is_empty_concTerm_TermList(l2)) {     return l1;    } else if(tom_is_empty_concTerm_TermList(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(l1))) {     return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(l1),l2);    } else {      return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(l1),tom_append_list_concTerm(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(l1),l2));    }   }  private static  tom.engine.adt.il.types.TermList tom_get_slice_concTerm( tom.engine.adt.il.types.TermList begin,  tom.engine.adt.il.types.TermList end) {    if(tom_terms_equal_TermList(begin,end)) {      return ( tom.engine.adt.il.types.TermList)tom_empty_list_concTerm();    } else {      return ( tom.engine.adt.il.types.TermList)tom_cons_list_concTerm(( tom.engine.adt.il.types.Term)tom_get_head_concTerm_TermList(begin),( tom.engine.adt.il.types.TermList)tom_get_slice_concTerm(( tom.engine.adt.il.types.TermList)tom_get_tail_concTerm_TermList(begin),end));    }   }  private static boolean tom_terms_equal_Expr(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_appSubsE( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isAppSubsE() ;}private static  tom.engine.adt.il.types.Expr tom_make_appSubsE( tom.engine.adt.il.types.SubstitutionList t0,  tom.engine.adt.il.types.Expr t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_AppSubsE(t0, t1); }private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_appSubsE_subs( tom.engine.adt.il.types.Expr t) {  return  t.getSubs() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_appSubsE_e( tom.engine.adt.il.types.Expr t) {  return  t.getE() ;}private static boolean tom_is_fun_sym_ilnot( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIlnot() ;}private static  tom.engine.adt.il.types.Expr tom_make_ilnot( tom.engine.adt.il.types.Expr t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_Ilnot(t0); }private static  tom.engine.adt.il.types.Expr tom_get_slot_ilnot_exp( tom.engine.adt.il.types.Expr t) {  return  t.getExp() ;}private static boolean tom_is_fun_sym_ilor( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIlor() ;}private static  tom.engine.adt.il.types.Expr tom_make_ilor( tom.engine.adt.il.types.Expr t0,  tom.engine.adt.il.types.Expr t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_Ilor(t0, t1); }private static  tom.engine.adt.il.types.Expr tom_get_slot_ilor_left( tom.engine.adt.il.types.Expr t) {  return  t.getLeft() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_ilor_right( tom.engine.adt.il.types.Expr t) {  return  t.getRight() ;}private static boolean tom_is_fun_sym_iland( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIland() ;}private static  tom.engine.adt.il.types.Expr tom_make_iland( tom.engine.adt.il.types.Expr t0,  tom.engine.adt.il.types.Expr t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_Iland(t0, t1); }private static  tom.engine.adt.il.types.Expr tom_get_slot_iland_left( tom.engine.adt.il.types.Expr t) {  return  t.getLeft() ;}private static  tom.engine.adt.il.types.Expr tom_get_slot_iland_right( tom.engine.adt.il.types.Expr t) {  return  t.getRight() ;}private static  tom.engine.adt.il.types.Expr tom_make_teq( tom.engine.adt.il.types.AbsTerm t0,  tom.engine.adt.il.types.AbsTerm t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_Teq(t0, t1); }private static  tom.engine.adt.il.types.Expr tom_make_tisfsym( tom.engine.adt.il.types.AbsTerm t0,  tom.engine.adt.il.types.Symbol t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_Tisfsym(t0, t1); }private static boolean tom_is_fun_sym_eq( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isEq() ;}private static  tom.engine.adt.il.types.Expr tom_make_eq( tom.engine.adt.il.types.Term t0,  tom.engine.adt.il.types.Term t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_Eq(t0, t1); }private static  tom.engine.adt.il.types.Term tom_get_slot_eq_lt( tom.engine.adt.il.types.Expr t) {  return  t.getLt() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_eq_rt( tom.engine.adt.il.types.Expr t) {  return  t.getRt() ;}private static boolean tom_is_fun_sym_isfsym( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isIsfsym() ;}private static  tom.engine.adt.il.types.Expr tom_make_isfsym( tom.engine.adt.il.types.Term t0,  tom.engine.adt.il.types.Symbol t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_Isfsym(t0, t1); }private static  tom.engine.adt.il.types.Term tom_get_slot_isfsym_t( tom.engine.adt.il.types.Expr t) {  return  t.getT() ;}private static  tom.engine.adt.il.types.Symbol tom_get_slot_isfsym_symbol( tom.engine.adt.il.types.Expr t) {  return  t.getSymbol() ;}private static boolean tom_is_fun_sym_false( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isFalse() ;}private static  tom.engine.adt.il.types.Expr tom_make_false() { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_False(); }private static boolean tom_is_fun_sym_true( tom.engine.adt.il.types.Expr t) {  return  (t!= null) && t.isTrue() ;}private static  tom.engine.adt.il.types.Expr tom_make_true( tom.engine.adt.il.types.SubstitutionList t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpr_True(t0); }private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_true_subst( tom.engine.adt.il.types.Expr t) {  return  t.getSubst() ;}private static boolean tom_terms_equal_Term(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_appSubsT( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isAppSubsT() ;}private static  tom.engine.adt.il.types.Term tom_make_appSubsT( tom.engine.adt.il.types.SubstitutionList t0,  tom.engine.adt.il.types.Term t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTerm_AppSubsT(t0, t1); }private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_appSubsT_subs( tom.engine.adt.il.types.Term t) {  return  t.getSubs() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_appSubsT_t( tom.engine.adt.il.types.Term t) {  return  t.getT() ;}private static boolean tom_is_fun_sym_slot( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isSlot() ;}private static  tom.engine.adt.il.types.Term tom_make_slot( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.Term t1,  String  t2) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTerm_Slot(t0, t1, t2); }private static  tom.engine.adt.il.types.Symbol tom_get_slot_slot_symbol( tom.engine.adt.il.types.Term t) {  return  t.getSymbol() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_slot_t( tom.engine.adt.il.types.Term t) {  return  t.getT() ;}private static  String  tom_get_slot_slot_name( tom.engine.adt.il.types.Term t) {  return  t.getName() ;}private static boolean tom_is_fun_sym_subterm( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isSubterm() ;}private static  tom.engine.adt.il.types.Term tom_make_subterm( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.Term t1,  int  t2) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTerm_Subterm(t0, t1, t2); }private static  tom.engine.adt.il.types.Symbol tom_get_slot_subterm_symbol( tom.engine.adt.il.types.Term t) {  return  t.getSymbol() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_subterm_t( tom.engine.adt.il.types.Term t) {  return  t.getT() ;}private static  int  tom_get_slot_subterm_index( tom.engine.adt.il.types.Term t) {  return  t.getIndex() ;}private static  tom.engine.adt.il.types.Term tom_make_repr( String  t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTerm_Repr(t0); }private static boolean tom_is_fun_sym_tau( tom.engine.adt.il.types.Term t) {  return  (t!= null) && t.isTau() ;}private static  tom.engine.adt.il.types.Term tom_make_tau( tom.engine.adt.il.types.AbsTerm t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTerm_Tau(t0); }private static  tom.engine.adt.il.types.AbsTerm tom_get_slot_tau_abst( tom.engine.adt.il.types.Term t) {  return  t.getAbst() ;}private static boolean tom_terms_equal_Environment(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_env( tom.engine.adt.il.types.Environment t) {  return  (t!= null) && t.isEnv() ;}private static  tom.engine.adt.il.types.Environment tom_make_env( tom.engine.adt.il.types.SubstitutionList t0,  tom.engine.adt.il.types.Instr t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeEnvironment_Env(t0, t1); }private static  tom.engine.adt.il.types.SubstitutionList tom_get_slot_env_subs( tom.engine.adt.il.types.Environment t) {  return  t.getSubs() ;}private static  tom.engine.adt.il.types.Instr tom_get_slot_env_i( tom.engine.adt.il.types.Environment t) {  return  t.getI() ;}private static boolean tom_terms_equal_SubstitutionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_subs( tom.engine.adt.il.types.SubstitutionList t) {  return (t!= null) && t.isSortSubstitutionList() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_empty_list_subs() { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSubstitutionList(); }private static  tom.engine.adt.il.types.SubstitutionList tom_cons_list_subs( tom.engine.adt.il.types.Substitution e,  tom.engine.adt.il.types.SubstitutionList l) { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSubstitutionList(e,l); }private static  tom.engine.adt.il.types.Substitution tom_get_head_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) {  return l.getHead() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_get_tail_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) {  return l.getTail() ;}private static boolean tom_is_empty_subs_SubstitutionList( tom.engine.adt.il.types.SubstitutionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.il.types.SubstitutionList tom_append_list_subs( tom.engine.adt.il.types.SubstitutionList l1,  tom.engine.adt.il.types.SubstitutionList l2) {    if(tom_is_empty_subs_SubstitutionList(l1)) {     return l2;    } else if(tom_is_empty_subs_SubstitutionList(l2)) {     return l1;    } else if(tom_is_empty_subs_SubstitutionList(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(l1))) {     return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(l1),l2);    } else {      return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(l1),tom_append_list_subs(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(l1),l2));    }   }  private static  tom.engine.adt.il.types.SubstitutionList tom_get_slice_subs( tom.engine.adt.il.types.SubstitutionList begin,  tom.engine.adt.il.types.SubstitutionList end) {    if(tom_terms_equal_SubstitutionList(begin,end)) {      return ( tom.engine.adt.il.types.SubstitutionList)tom_empty_list_subs();    } else {      return ( tom.engine.adt.il.types.SubstitutionList)tom_cons_list_subs(( tom.engine.adt.il.types.Substitution)tom_get_head_subs_SubstitutionList(begin),( tom.engine.adt.il.types.SubstitutionList)tom_get_slice_subs(( tom.engine.adt.il.types.SubstitutionList)tom_get_tail_subs_SubstitutionList(begin),end));    }   }  private static boolean tom_terms_equal_Substitution(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_is( tom.engine.adt.il.types.Substitution t) {  return  (t!= null) && t.isIs() ;}private static  tom.engine.adt.il.types.Substitution tom_make_is( tom.engine.adt.il.types.Variable t0,  tom.engine.adt.il.types.Term t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSubstitution_Is(t0, t1); }private static  tom.engine.adt.il.types.Variable tom_get_slot_is_var( tom.engine.adt.il.types.Substitution t) {  return  t.getVar() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_is_term( tom.engine.adt.il.types.Substitution t) {  return  t.getTerm() ;}private static boolean tom_is_fun_sym_undefsubs( tom.engine.adt.il.types.Substitution t) {  return  (t!= null) && t.isUndefsubs() ;}private static  tom.engine.adt.il.types.Substitution tom_make_undefsubs() { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSubstitution_Undefsubs(); }private static boolean tom_terms_equal_InstrList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_semicolon( tom.engine.adt.il.types.InstrList t) {  return (t!= null) && t.isSortInstrList() ;}private static  tom.engine.adt.il.types.InstrList tom_empty_list_semicolon() { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstrList(); }private static  tom.engine.adt.il.types.InstrList tom_cons_list_semicolon( tom.engine.adt.il.types.Instr e,  tom.engine.adt.il.types.InstrList l) { return tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstrList(e,l); }private static  tom.engine.adt.il.types.Instr tom_get_head_semicolon_InstrList( tom.engine.adt.il.types.InstrList l) {  return l.getHead() ;}private static  tom.engine.adt.il.types.InstrList tom_get_tail_semicolon_InstrList( tom.engine.adt.il.types.InstrList l) {  return l.getTail() ;}private static boolean tom_is_empty_semicolon_InstrList( tom.engine.adt.il.types.InstrList l) {  return l.isEmpty() ;}private static  tom.engine.adt.il.types.InstrList tom_append_list_semicolon( tom.engine.adt.il.types.InstrList l1,  tom.engine.adt.il.types.InstrList l2) {    if(tom_is_empty_semicolon_InstrList(l1)) {     return l2;    } else if(tom_is_empty_semicolon_InstrList(l2)) {     return l1;    } else if(tom_is_empty_semicolon_InstrList(( tom.engine.adt.il.types.InstrList)tom_get_tail_semicolon_InstrList(l1))) {     return ( tom.engine.adt.il.types.InstrList)tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr)tom_get_head_semicolon_InstrList(l1),l2);    } else {      return ( tom.engine.adt.il.types.InstrList)tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr)tom_get_head_semicolon_InstrList(l1),tom_append_list_semicolon(( tom.engine.adt.il.types.InstrList)tom_get_tail_semicolon_InstrList(l1),l2));    }   }  private static  tom.engine.adt.il.types.InstrList tom_get_slice_semicolon( tom.engine.adt.il.types.InstrList begin,  tom.engine.adt.il.types.InstrList end) {    if(tom_terms_equal_InstrList(begin,end)) {      return ( tom.engine.adt.il.types.InstrList)tom_empty_list_semicolon();    } else {      return ( tom.engine.adt.il.types.InstrList)tom_cons_list_semicolon(( tom.engine.adt.il.types.Instr)tom_get_head_semicolon_InstrList(begin),( tom.engine.adt.il.types.InstrList)tom_get_slice_semicolon(( tom.engine.adt.il.types.InstrList)tom_get_tail_semicolon_InstrList(begin),end));    }   }  private static boolean tom_terms_equal_Instr(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_sequence( tom.engine.adt.il.types.Instr t) {  return  (t!= null) && t.isSequence() ;}private static  tom.engine.adt.il.types.Instr tom_make_sequence( tom.engine.adt.il.types.InstrList t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstr_Sequence(t0); }private static  tom.engine.adt.il.types.InstrList tom_get_slot_sequence_instrlist( tom.engine.adt.il.types.Instr t) {  return  t.getInstrlist() ;}private static boolean tom_is_fun_sym_ILLet( tom.engine.adt.il.types.Instr t) {  return  (t!= null) && t.isILLet() ;}private static  tom.engine.adt.il.types.Instr tom_make_ILLet( tom.engine.adt.il.types.Variable t0,  tom.engine.adt.il.types.Term t1,  tom.engine.adt.il.types.Instr t2) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstr_ILLet(t0, t1, t2); }private static  tom.engine.adt.il.types.Variable tom_get_slot_ILLet_var( tom.engine.adt.il.types.Instr t) {  return  t.getVar() ;}private static  tom.engine.adt.il.types.Term tom_get_slot_ILLet_t( tom.engine.adt.il.types.Instr t) {  return  t.getT() ;}private static  tom.engine.adt.il.types.Instr tom_get_slot_ILLet_body( tom.engine.adt.il.types.Instr t) {  return  t.getBody() ;}private static boolean tom_is_fun_sym_ITE( tom.engine.adt.il.types.Instr t) {  return  (t!= null) && t.isITE() ;}private static  tom.engine.adt.il.types.Instr tom_make_ITE( tom.engine.adt.il.types.Expr t0,  tom.engine.adt.il.types.Instr t1,  tom.engine.adt.il.types.Instr t2) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstr_ITE(t0, t1, t2); }private static  tom.engine.adt.il.types.Expr tom_get_slot_ITE_e( tom.engine.adt.il.types.Instr t) {  return  t.getE() ;}private static  tom.engine.adt.il.types.Instr tom_get_slot_ITE_ift( tom.engine.adt.il.types.Instr t) {  return  t.getIft() ;}private static  tom.engine.adt.il.types.Instr tom_get_slot_ITE_iff( tom.engine.adt.il.types.Instr t) {  return  t.getIff() ;}private static boolean tom_is_fun_sym_refuse( tom.engine.adt.il.types.Instr t) {  return  (t!= null) && t.isRefuse() ;}private static  tom.engine.adt.il.types.Instr tom_make_refuse() { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstr_Refuse(); }private static boolean tom_is_fun_sym_accept( tom.engine.adt.il.types.Instr t) {  return  (t!= null) && t.isAccept() ;}private static  tom.engine.adt.il.types.Instr tom_make_accept( aterm.ATerm  t0,  aterm.ATerm  t1) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstr_Accept(t0, t1); }private static  aterm.ATerm  tom_get_slot_accept_positive( tom.engine.adt.il.types.Instr t) {  return  t.getPositive() ;}private static  aterm.ATerm  tom_get_slot_accept_negative( tom.engine.adt.il.types.Instr t) {  return  t.getNegative() ;}private static boolean tom_terms_equal_AbsTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.il.types.AbsTerm tom_make_sl( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.AbsTerm t1,  String  t2) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeAbsTerm_Sl(t0, t1, t2); }private static  tom.engine.adt.il.types.AbsTerm tom_make_st( tom.engine.adt.il.types.Symbol t0,  tom.engine.adt.il.types.AbsTerm t1,  int  t2) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeAbsTerm_St(t0, t1, t2); }private static boolean tom_is_fun_sym_absvar( tom.engine.adt.il.types.AbsTerm t) {  return  (t!= null) && t.isAbsvar() ;}private static  tom.engine.adt.il.types.AbsTerm tom_make_absvar( tom.engine.adt.il.types.Variable t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeAbsTerm_Absvar(t0); }private static  tom.engine.adt.il.types.Variable tom_get_slot_absvar_varname( tom.engine.adt.il.types.AbsTerm t) {  return  t.getVarname() ;}private static boolean tom_terms_equal_Variable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_var( tom.engine.adt.il.types.Variable t) {  return  (t!= null) && t.isVar() ;}private static  tom.engine.adt.il.types.Variable tom_make_var( String  t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeVariable_Var(t0); }private static  String  tom_get_slot_var_name( tom.engine.adt.il.types.Variable t) {  return  t.getName() ;}private static boolean tom_terms_equal_Symbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.il.types.Symbol tom_make_fsymbol( String  t0) { return  tom.engine.adt.il.IlFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbol_Fsymbol(t0); }  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_SequenceId( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.SequenceId(first,then) ; }  /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Try( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_Choice(v,tom_make_Identity()) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }  /*  * strategies with Id considered as failure  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_InnermostId( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(tom_make_All(tom_make_MuVar("x")),tom_make_SequenceId(v,tom_make_MuVar("x")))) ; }   








  // ------------------------------------------------------------

  private SymbolTable symbolTable;
  private boolean camlsemantics = false;

  public Verifier(boolean camlsemantics) {
    super();
    this.camlsemantics = camlsemantics;
  }

  public void setSymbolTable(SymbolTable symbolTable) {
    this.symbolTable = symbolTable;
  }

  public SymbolTable getSymbolTable() {
    return symbolTable;
  }

  public boolean isCamlSemantics() {
    return camlsemantics;
  }

  public Term termFromTomTerm(TomTerm tomterm) {
     if(tomterm instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match1_1=(( tom.engine.adt.tomsignature.types.TomTerm)tomterm); if (tom_is_fun_sym_ExpressionToTomTerm(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match1_1_astExpression=tom_get_slot_ExpressionToTomTerm_astExpression(tom_match1_1); { tom.engine.adt.tomsignature.types.Expression tom_expr=tom_match1_1_astExpression; if ( true ) {

        return termFromExpresssion(tom_expr);
       } } } } if (tom_is_fun_sym_Variable(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_Variable_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match1_1_astName; if ( true ) {

        return termFromTomName(tom_name);
       } } } } } }

    System.out.println("termFromTomTerm don't know how to handle this: " + tomterm);
    return tom_make_repr("foirade");
  }

  Variable variableFromTomName(TomName name) {
     if(name instanceof  tom.engine.adt.tomsignature.types.TomName) { { tom.engine.adt.tomsignature.types.TomName tom_match2_1=(( tom.engine.adt.tomsignature.types.TomName)name); if (tom_is_fun_sym_Name(tom_match2_1) ||  false ) { { String  tom_match2_1_string=tom_get_slot_Name_string(tom_match2_1); { String  tom_stringname=tom_match2_1_string; if ( true ) {

        return tom_make_var(tom_stringname);
       } } } } if (tom_is_fun_sym_PositionName(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match2_1_numberList=tom_get_slot_PositionName_numberList(tom_match2_1); { tom.engine.adt.tomsignature.types.TomNumberList tom_numberlist=tom_match2_1_numberList; if ( true ) {

        return tom_make_var(tomNumberListToString(tom_numberlist));
       } } } } if (tom_is_fun_sym_EmptyName(tom_match2_1) ||  false ) { if ( true ) {

        return tom_make_var("emptyName");
       } } } }

    return tom_make_var("error while building variable name");
  }

  Term termFromTomName(TomName name) {
    return tom_make_tau(tom_make_absvar(variableFromTomName(name)));
  }

  public Term termFromExpresssion(Expression expression) {
     if(expression instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1=(( tom.engine.adt.tomsignature.types.Expression)expression); if (tom_is_fun_sym_GetSubterm(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_GetSubterm_variable(tom_match3_1); { tom.engine.adt.tomsignature.types.TomNumber tom_match3_1_number=tom_get_slot_GetSubterm_number(tom_match3_1); if (tom_is_fun_sym_Variable(tom_match3_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_variable_astName=tom_get_slot_Variable_astName(tom_match3_1_variable); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match3_1_variable_astName; if (tom_is_fun_sym_Number(tom_match3_1_number) ||  false ) { { int  tom_match3_1_number_integer=tom_get_slot_Number_integer(tom_match3_1_number); { int  tom_index=tom_match3_1_number_integer; if ( true ) {

        // we will need to find the head symbol
        Term term = termFromTomName(tom_name);
        return tom_make_subterm(tom_make_fsymbol("empty"),term,tom_index);
       } } } } } } } } } } if (tom_is_fun_sym_GetSlot(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astName=tom_get_slot_GetSlot_astName(tom_match3_1); { String  tom_match3_1_slotNameString=tom_get_slot_GetSlot_slotNameString(tom_match3_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_variable=tom_get_slot_GetSlot_variable(tom_match3_1); if (tom_is_fun_sym_Name(tom_match3_1_astName) ||  false ) { { String  tom_match3_1_astName_string=tom_get_slot_Name_string(tom_match3_1_astName); { String  tom_symbolName=tom_match3_1_astName_string; { String  tom_slotName=tom_match3_1_slotNameString; if (tom_is_fun_sym_Variable(tom_match3_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_variable_astName=tom_get_slot_Variable_astName(tom_match3_1_variable); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match3_1_variable_astName; if ( true ) {

        Term term = termFromTomName(tom_name);
        return tom_make_slot(tom_make_fsymbol(tom_symbolName),term,tom_slotName);
       } } } } } } } } } } } } if (tom_is_fun_sym_TomTermToExpression(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match3_1); if (tom_is_fun_sym_Variable(tom_match3_1_astTerm) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astTerm_astName=tom_get_slot_Variable_astName(tom_match3_1_astTerm); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match3_1_astTerm_astName; if ( true ) {

        Term term = termFromTomName(tom_name);
        return term;
       } } } } } } if (tom_is_fun_sym_Cast(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match3_1_source=tom_get_slot_Cast_source(tom_match3_1); { tom.engine.adt.tomsignature.types.Expression tom_expr=tom_match3_1_source; if ( true ) {

        return termFromExpresssion(tom_expr);
       } } } } } }

    System.out.println("termFromExpresssion don't know how to handle this: " + expression);
    return tom_make_repr("autre foirade avec " + expression);
  }

  public String extractName(NameList nl) {
     if(nl instanceof  tom.engine.adt.tomsignature.types.NameList) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1=(( tom.engine.adt.tomsignature.types.NameList)nl); if (tom_is_fun_sym_concTomName(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match4_1_list1=tom_match4_1; if (!(tom_is_empty_concTomName_NameList(tom_match4_1_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_1=tom_get_head_concTomName_NameList(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_concTomName_NameList(tom_match4_1_list1); if (tom_is_fun_sym_Name(tom_match4_1_1) ||  false ) { { String  tom_match4_1_1_string=tom_get_slot_Name_string(tom_match4_1_1); { String  tom_name=tom_match4_1_1_string; if (tom_is_empty_concTomName_NameList(tom_match4_1_list1)) { if ( true ) {

        return tom_name;
       } } } } } } } } } } }

    return nl.toString();
  }

  public Expr exprFromExpression(Expression expression) {
     if(expression instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match5_1=(( tom.engine.adt.tomsignature.types.Expression)expression); if (tom_is_fun_sym_TrueTL(tom_match5_1) ||  false ) { if ( true ) {
 return tom_make_true(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()));  } } if (tom_is_fun_sym_FalseTL(tom_match5_1) ||  false ) { if ( true ) {
 return tom_make_false();  } } if (tom_is_fun_sym_EqualFunctionSymbol(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match5_1); if (tom_is_fun_sym_Variable(tom_match5_1_exp1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_exp1_astName=tom_get_slot_Variable_astName(tom_match5_1_exp1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match5_1_exp1_astName; if (tom_is_fun_sym_RecordAppl(tom_match5_1_exp2) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_exp2_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_1_exp2); { tom.engine.adt.tomsignature.types.NameList tom_symbolName=tom_match5_1_exp2_nameList; if ( true ) {

        Term term = termFromTomName(tom_name);
        return tom_make_isfsym(term,tom_make_fsymbol(extractName(tom_symbolName)));
       } } } } } } } } } } if (tom_is_fun_sym_EqualFunctionSymbol(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_exp1=tom_get_slot_EqualFunctionSymbol_exp1(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_exp2=tom_get_slot_EqualFunctionSymbol_exp2(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term1=tom_match5_1_exp1; if (tom_is_fun_sym_RecordAppl(tom_match5_1_exp2) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match5_1_exp2_nameList=tom_get_slot_RecordAppl_nameList(tom_match5_1_exp2); { tom.engine.adt.tomsignature.types.NameList tom_symbolName=tom_match5_1_exp2_nameList; if ( true ) {

        return tom_make_isfsym(termFromTomTerm(tom_term1),tom_make_fsymbol(extractName(tom_symbolName)));
       } } } } } } } } if (tom_is_fun_sym_EqualTerm(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_kid1=tom_get_slot_EqualTerm_kid1(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_kid2=tom_get_slot_EqualTerm_kid2(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_t1=tom_match5_1_kid1; { tom.engine.adt.tomsignature.types.TomTerm tom_t2=tom_match5_1_kid2; if ( true ) {

        return tom_make_eq(termFromTomTerm(tom_t1),termFromTomTerm(tom_t2));
       } } } } } } } }

    System.out.println("exprFromExpression don't know how to handle this: " + expression);
    return tom_make_false();
  }

  public Instr instrFromInstructionList(InstructionList instrlist) {
    InstrList list = tom_empty_list_semicolon();
    while (!instrlist.isEmpty()) {
      Instruction i = (Instruction) instrlist.getHead();
      instrlist = instrlist.getTail();
      if (!i.isCheckStamp()) {
        list = tom_append_list_semicolon(list,tom_cons_list_semicolon(instrFromInstruction(i),tom_empty_list_semicolon()));
      }
    }
    return tom_make_sequence(list);
  }

  public Instr instrFromInstruction(Instruction automata) {
     if(automata instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1=(( tom.engine.adt.tomsignature.types.Instruction)automata); if (tom_is_fun_sym_TypedAction(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Pattern tom_match6_1_positivePattern=tom_get_slot_TypedAction_positivePattern(tom_match6_1); { tom.engine.adt.tomsignature.types.PatternList tom_match6_1_negativePatternList=tom_get_slot_TypedAction_negativePatternList(tom_match6_1); { tom.engine.adt.tomsignature.types.Pattern tom_positivePattern=tom_match6_1_positivePattern; { tom.engine.adt.tomsignature.types.PatternList tom_negativePatternList=tom_match6_1_negativePatternList; if ( true ) {

        return tom_make_accept(tom_positivePattern,tom_negativePatternList);
       } } } } } } if (tom_is_fun_sym_If(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Expression tom_match6_1_condition=tom_get_slot_If_condition(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_succesInst=tom_get_slot_If_succesInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_failureInst=tom_get_slot_If_failureInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_cond=tom_match6_1_condition; { tom.engine.adt.tomsignature.types.Instruction tom_ift=tom_match6_1_succesInst; { tom.engine.adt.tomsignature.types.Instruction tom_iff=tom_match6_1_failureInst; if ( true ) {


        return tom_make_ITE(exprFromExpression(tom_cond),instrFromInstruction(tom_ift),instrFromInstruction(tom_iff))

;
       } } } } } } } } if (tom_is_fun_sym_Let(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_Let_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_match6_1_source=tom_get_slot_Let_source(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomName tom_avar=tom_match6_1_variable_astName; { tom.engine.adt.tomsignature.types.Expression tom_expr=tom_match6_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match6_1_astInstruction; if ( true ) {

        Variable thevar = variableFromTomName(tom_avar);
        return tom_make_ILLet(thevar,termFromExpresssion(tom_expr),instrFromInstruction(tom_body))

;
       } } } } } } } } } } if (tom_is_fun_sym_LetAssign(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable=tom_get_slot_LetAssign_variable(tom_match6_1); { tom.engine.adt.tomsignature.types.Expression tom_match6_1_source=tom_get_slot_LetAssign_source(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match6_1); if (tom_is_fun_sym_Variable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_variable_astName=tom_get_slot_Variable_astName(tom_match6_1_variable); { tom.engine.adt.tomsignature.types.TomName tom_avar=tom_match6_1_variable_astName; { tom.engine.adt.tomsignature.types.Expression tom_expr=tom_match6_1_source; { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match6_1_astInstruction; if ( true ) {

        Variable thevar = variableFromTomName(tom_avar);
        return tom_make_ILLet(thevar,termFromExpresssion(tom_expr),instrFromInstruction(tom_body))

;
       } } } } } } } } } } {boolean tom_bool_match6_1= false ; { tom.engine.adt.tomsignature.types.TomTerm tom_match6_1_variable= null ; { tom.engine.adt.tomsignature.types.Expression tom_match6_1_source= null ; { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_astInstruction= null ; if (tom_is_fun_sym_Let(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_variable=tom_get_slot_Let_variable(tom_match6_1);tom_match6_1_source=tom_get_slot_Let_source(tom_match6_1);tom_match6_1_astInstruction=tom_get_slot_Let_astInstruction(tom_match6_1); } else { if (tom_is_fun_sym_LetAssign(tom_match6_1)) {tom_bool_match6_1= true ;tom_match6_1_variable=tom_get_slot_LetAssign_variable(tom_match6_1);tom_match6_1_source=tom_get_slot_LetAssign_source(tom_match6_1);tom_match6_1_astInstruction=tom_get_slot_LetAssign_astInstruction(tom_match6_1); } } if (tom_bool_match6_1) { if (tom_is_fun_sym_UnamedVariable(tom_match6_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_body=tom_match6_1_astInstruction; if ( true ) {

        return instrFromInstruction(tom_body);
       } } } } } } } } if (tom_is_fun_sym_CompiledPattern(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_automataInst=tom_get_slot_CompiledPattern_automataInst(tom_match6_1); { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_match6_1_automataInst; if ( true ) {

        return instrFromInstruction(tom_instr);
       } } } } if (tom_is_fun_sym_AbstractBlock(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList=tom_get_slot_AbstractBlock_instList(tom_match6_1); if (tom_is_fun_sym_concInstruction(tom_match6_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList_list1=tom_match6_1_instList; if (!(tom_is_empty_concInstruction_InstructionList(tom_match6_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_match6_1_instList_1=tom_get_head_concInstruction_InstructionList(tom_match6_1_instList_list1);tom_match6_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match6_1_instList_list1); if (tom_is_fun_sym_CheckStamp(tom_match6_1_instList_1) ||  false ) { if (!(tom_is_empty_concInstruction_InstructionList(tom_match6_1_instList_list1))) { { tom.engine.adt.tomsignature.types.Instruction tom_instr=tom_get_head_concInstruction_InstructionList(tom_match6_1_instList_list1);tom_match6_1_instList_list1=tom_get_tail_concInstruction_InstructionList(tom_match6_1_instList_list1); if (tom_is_empty_concInstruction_InstructionList(tom_match6_1_instList_list1)) { if ( true ) {

        return instrFromInstruction(tom_instr);
       } } } } } } } } } } } if (tom_is_fun_sym_AbstractBlock(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList=tom_get_slot_AbstractBlock_instList(tom_match6_1); if (tom_is_fun_sym_concInstruction(tom_match6_1_instList) ||  false ) { { tom.engine.adt.tomsignature.types.InstructionList tom_match6_1_instList_list1=tom_match6_1_instList; { tom.engine.adt.tomsignature.types.InstructionList tom_instrlist=tom_match6_1_instList_list1; if ( true ) {

        return instrFromInstructionList(tom_instrlist);
       } } } } } } if (tom_is_fun_sym_Nop(tom_match6_1) ||  false ) { if ( true ) {

        // tom uses nop in the iffalse part of ITE
        return tom_make_refuse();
       } } } }

    System.out.println("instrFromInstruction don't know how to handle this : " + automata);
    return tom_make_refuse();
  }

  private SubstitutionList abstractSubstitutionFromAccept(Instr instr) {
    SubstitutionList substitution = tom_empty_list_subs();
     if(instr instanceof  tom.engine.adt.il.types.Instr) { { tom.engine.adt.il.types.Instr tom_match7_1=(( tom.engine.adt.il.types.Instr)instr); if (tom_is_fun_sym_accept(tom_match7_1) ||  false ) { { aterm.ATerm  tom_match7_1_positive=tom_get_slot_accept_positive(tom_match7_1); { aterm.ATerm  tom_match7_1_negative=tom_get_slot_accept_negative(tom_match7_1); { aterm.ATerm  tom_positive=tom_match7_1_positive; if ( true ) {

        Pattern positivePattern = (Pattern) tom_positive;
         if(positivePattern instanceof  tom.engine.adt.tomsignature.types.Pattern) { { tom.engine.adt.tomsignature.types.Pattern tom_match8_1=(( tom.engine.adt.tomsignature.types.Pattern)positivePattern); if (tom_is_fun_sym_Pattern(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match8_1_subjectList=tom_get_slot_Pattern_subjectList(tom_match8_1); { tom.engine.adt.tomsignature.types.TomList tom_subjectList=tom_match8_1_subjectList; if ( true ) {

            TomList sl = tom_subjectList;
            while(!sl.isEmpty()) {
              TomTerm subject = sl.getHead();
              sl=sl.getTail();
               if(subject instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1=(( tom.engine.adt.tomsignature.types.TomTerm)subject); if (tom_is_fun_sym_Variable(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match9_1_astName=tom_get_slot_Variable_astName(tom_match9_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match9_1_astName; if ( true ) {

                  substitution = tom_append_list_subs(substitution,tom_cons_list_subs(tom_make_is(variableFromTomName(tom_name),termFromTomTerm(subject)),tom_empty_list_subs()))


;
                 } } } } } }

            }
           } } } } } }

       } } } } } } }

    return substitution;
  }

  public Collection build_tree(Instruction automata) {
    // System.out.println("Build derivation tree for: " + automata);

    // collects the accept in the automata
    Collection localAccepts = collectAccept(automata);

    Iterator iter = localAccepts.iterator();
    Collection treeList = new HashSet();
    while(iter.hasNext()) {
        Instr localAccept = (Instr) iter.next();

        // builds the initial abstract substitution
        SubstitutionList initialsubstitution = abstractSubstitutionFromAccept(localAccept);
        Environment startingenv = tom_make_env(initialsubstitution,instrFromInstruction(automata))
;

        Deriv startingderiv = tom_make_ebs(startingenv,tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),localAccept))
;

        Collection treeListPre = applySemanticsRules(startingderiv);
        // replace substitutions in trees
        Iterator it = treeListPre.iterator();
        while(it.hasNext()) {
            DerivTree tree = (DerivTree) it.next();
            SubstitutionList outputsubst = getOutputSubstitution(tree);
            tree = replaceUndefinedSubstitution(tree,outputsubst);
            treeList.add(tree);
        }
    }

    return treeList;
  }

  public Map getConstraints(Instruction automata) {
    // collects the accept in the automata
    Collection localAccepts = collectAccept(automata);

    Iterator iter = localAccepts.iterator();
    Map constraintList = new HashMap();
    while(iter.hasNext()) {
        Instr localAccept = (Instr) iter.next();

        // builds the initial abstract substitution
        SubstitutionList initialsubstitution = abstractSubstitutionFromAccept(localAccept);
        Expr constraints = buildConstraint(initialsubstitution,
                                           instrFromInstruction(automata),
                                           localAccept);
        constraintList.put(localAccept,constraints);
    }
    return constraintList;
  }

   private static class substitutionCollector  extends  tom.engine.adt.il.IlVisitableFwd  {  SubstRef  outsubst;  public substitutionCollector(  SubstRef  outsubst ) { super(tom_make_Identity() ); this.outsubst=outsubst; } public  tom.engine.adt.il.types.Expr visit_Expr(  tom.engine.adt.il.types.Expr tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Expr) { { tom.engine.adt.il.types.Expr tom_match10_1=(( tom.engine.adt.il.types.Expr)tom__arg); if (tom_is_fun_sym_true(tom_match10_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_t=tom_match10_1; { tom.engine.adt.il.types.SubstitutionList tom_match10_1_subst=tom_get_slot_true_subst(tom_match10_1); if (tom_is_fun_sym_subs(tom_match10_1_subst) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match10_1_subst_list1=tom_match10_1_subst; if (!(tom_is_empty_subs_SubstitutionList(tom_match10_1_subst_list1))) { { tom.engine.adt.il.types.Substitution tom_match10_1_subst_1=tom_get_head_subs_SubstitutionList(tom_match10_1_subst_list1);tom_match10_1_subst_list1=tom_get_tail_subs_SubstitutionList(tom_match10_1_subst_list1); if (tom_is_fun_sym_undefsubs(tom_match10_1_subst_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match10_1_subst_list1)) { if ( true ) {tom_make_Fail()


.visit(tom_t);
       } } } } } } } } } } if (tom_is_fun_sym_true(tom_match10_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match10_1_subst=tom_get_slot_true_subst(tom_match10_1); { tom.engine.adt.il.types.SubstitutionList tom_x=tom_match10_1_subst; if ( true ) {

        outsubst.set(tom_x);
       } } } } } } return super.visit_Expr(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_substitutionCollector( SubstRef  t0) { return new substitutionCollector(t0); }


  public SubstitutionList collectSubstitutionInConstraint(Expr expr) {
    SubstRef output = new SubstRef(tom_empty_list_subs());
    try {
      tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_make_Sequence(tom_make_substitutionCollector(output),tom_make_All(tom_make_MuVar("x"))))).visit(expr);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy substitutionCollector failed");
    }
    return output.get();
  }

   private static class outputSubstitutionCollector  extends  tom.engine.adt.il.IlVisitableFwd  {  SubstRef  outsubst;  public outputSubstitutionCollector(  SubstRef  outsubst ) { super(tom_make_Identity() ); this.outsubst=outsubst; } public  tom.engine.adt.il.types.Deriv visit_Deriv(  tom.engine.adt.il.types.Deriv tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Deriv) { { tom.engine.adt.il.types.Deriv tom_match11_1=(( tom.engine.adt.il.types.Deriv)tom__arg); if (tom_is_fun_sym_ebs(tom_match11_1) ||  false ) { { tom.engine.adt.il.types.Environment tom_match11_1_lhs=tom_get_slot_ebs_lhs(tom_match11_1); { tom.engine.adt.il.types.Environment tom_match11_1_rhs=tom_get_slot_ebs_rhs(tom_match11_1); if (tom_is_fun_sym_env(tom_match11_1_lhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match11_1_lhs_subs=tom_get_slot_env_subs(tom_match11_1_lhs); { tom.engine.adt.il.types.Instr tom_match11_1_lhs_i=tom_get_slot_env_i(tom_match11_1_lhs); { tom.engine.adt.il.types.SubstitutionList tom_e=tom_match11_1_lhs_subs; if (tom_is_fun_sym_accept(tom_match11_1_lhs_i) ||  false ) { if (tom_is_fun_sym_env(tom_match11_1_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match11_1_rhs_subs=tom_get_slot_env_subs(tom_match11_1_rhs); { tom.engine.adt.il.types.Instr tom_match11_1_rhs_i=tom_get_slot_env_i(tom_match11_1_rhs); if (tom_is_fun_sym_subs(tom_match11_1_rhs_subs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match11_1_rhs_subs_list1=tom_match11_1_rhs_subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match11_1_rhs_subs_list1))) { { tom.engine.adt.il.types.Substitution tom_match11_1_rhs_subs_1=tom_get_head_subs_SubstitutionList(tom_match11_1_rhs_subs_list1);tom_match11_1_rhs_subs_list1=tom_get_tail_subs_SubstitutionList(tom_match11_1_rhs_subs_list1); if (tom_is_fun_sym_undefsubs(tom_match11_1_rhs_subs_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match11_1_rhs_subs_list1)) { if (tom_is_fun_sym_accept(tom_match11_1_rhs_i) ||  false ) { if ( true ) {


        outsubst.set(tom_e);
       } } } } } } } } } } } } } } } } } } } } } return super.visit_Deriv(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_outputSubstitutionCollector( SubstRef  t0) { return new outputSubstitutionCollector(t0); }



  public SubstitutionList getOutputSubstitution(DerivTree subject) {
    SubstRef output = new SubstRef(tom_empty_list_subs());
    try {
      tom_make_TopDown(tom_make_outputSubstitutionCollector(output)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy outputSubstitutionCollector failed");
    }
    return output.get();
  }

   private static class acceptCollector  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  java.util.Collection  store;  public acceptCollector(  java.util.Collection  store ) { super(tom_make_Identity() ); this.store=store; } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match12_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_TypedAction(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.Pattern tom_match12_1_positivePattern=tom_get_slot_TypedAction_positivePattern(tom_match12_1); { tom.engine.adt.tomsignature.types.PatternList tom_match12_1_negativePatternList=tom_get_slot_TypedAction_negativePatternList(tom_match12_1); { tom.engine.adt.tomsignature.types.Pattern tom_positive=tom_match12_1_positivePattern; { tom.engine.adt.tomsignature.types.PatternList tom_negative=tom_match12_1_negativePatternList; if ( true ) {


        store.add(tom_make_accept(tom_positive,tom_negative));
       } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_acceptCollector( java.util.Collection  t0) { return new acceptCollector(t0); }



  public Collection collectAccept(Instruction subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_acceptCollector(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectAccept failed");
    }
    return result;
  }


  /**
   * The axioms the mapping has to verify
   */
  protected Seq seqFromTerm(Term sp) {
    TermList ded = tom_cons_list_concTerm(sp,tom_empty_list_concTerm());
     if(sp instanceof  tom.engine.adt.il.types.Term) { { tom.engine.adt.il.types.Term tom_match13_1=(( tom.engine.adt.il.types.Term)sp); if (tom_is_fun_sym_appSubsT(tom_match13_1) ||  false ) { if ( true ) {

        TermList follow = applyMappingRules(replaceVariablesInTerm(sp));
        ded = tom_append_list_concTerm(ded,tom_append_list_concTerm(follow,tom_empty_list_concTerm()));
       } } } }

    return tom_make_dedterm(tom_append_list_concTerm(ded,tom_empty_list_concTerm()));
  }

  protected ExprList exprListFromExpr(Expr sp) {
    ExprList ded = tom_cons_list_concExpr(sp,tom_empty_list_concExpr());
     if(sp instanceof  tom.engine.adt.il.types.Expr) { { tom.engine.adt.il.types.Expr tom_match14_1=(( tom.engine.adt.il.types.Expr)sp); if (tom_is_fun_sym_appSubsE(tom_match14_1) ||  false ) { if ( true ) {

        ExprList follow = applyExprRules(replaceVariablesInExpr(sp));
        ded = tom_append_list_concExpr(ded,tom_append_list_concExpr(follow,tom_empty_list_concExpr()));
       } } } }


    // System.out.println("dedexpr gives: " + ded);
    return ded;
  }

  protected SubstitutionList reduceSubstitutionWithMappingRules(SubstitutionList subst) {
     if(subst instanceof  tom.engine.adt.il.types.SubstitutionList) { { tom.engine.adt.il.types.SubstitutionList tom_match15_1=(( tom.engine.adt.il.types.SubstitutionList)subst); if (tom_is_fun_sym_subs(tom_match15_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match15_1_list1=tom_match15_1; if (tom_is_empty_subs_SubstitutionList(tom_match15_1_list1)) { if ( true ) {

        return subst;
       } } } } if (tom_is_fun_sym_subs(tom_match15_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match15_1_list1=tom_match15_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match15_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match15_1_1=tom_get_head_subs_SubstitutionList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_subs_SubstitutionList(tom_match15_1_list1); if (tom_is_fun_sym_is(tom_match15_1_1) ||  false ) { { tom.engine.adt.il.types.Variable tom_match15_1_1_var=tom_get_slot_is_var(tom_match15_1_1); { tom.engine.adt.il.types.Term tom_match15_1_1_term=tom_get_slot_is_term(tom_match15_1_1); { tom.engine.adt.il.types.Variable tom_v=tom_match15_1_1_var; { tom.engine.adt.il.types.Term tom_term=tom_match15_1_1_term; { tom.engine.adt.il.types.SubstitutionList tom_t=tom_match15_1_list1; if ( true ) {

        SubstitutionList tail = reduceSubstitutionWithMappingRules(tom_t);
        return tom_cons_list_subs(tom_make_is(tom_v,reduceTermWithMappingRules(replaceVariablesInTerm(tom_make_appSubsT(tail,tom_term)))),tom_append_list_subs(tail,tom_empty_list_subs()));
       } } } } } } } } } } } if (tom_is_fun_sym_subs(tom_match15_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match15_1_list1=tom_match15_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match15_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match15_1_1=tom_get_head_subs_SubstitutionList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_subs_SubstitutionList(tom_match15_1_list1); if (tom_is_fun_sym_undefsubs(tom_match15_1_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_t=tom_match15_1_list1; if ( true ) {

        SubstitutionList tail = reduceSubstitutionWithMappingRules(tom_t);
        return tom_cons_list_subs(tom_make_undefsubs(),tom_append_list_subs(tail,tom_empty_list_subs()));
       } } } } } } } } }

    return subst;
  }
  protected Expr reduceWithMappingRules(Expr ex) {
     if(ex instanceof  tom.engine.adt.il.types.Expr) { { tom.engine.adt.il.types.Expr tom_match16_1=(( tom.engine.adt.il.types.Expr)ex); if (tom_is_fun_sym_eq(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match16_1_lt=tom_get_slot_eq_lt(tom_match16_1); { tom.engine.adt.il.types.Term tom_match16_1_rt=tom_get_slot_eq_rt(tom_match16_1); if (tom_is_fun_sym_tau(tom_match16_1_lt) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match16_1_lt_abst=tom_get_slot_tau_abst(tom_match16_1_lt); { tom.engine.adt.il.types.AbsTerm tom_tl=tom_match16_1_lt_abst; if (tom_is_fun_sym_tau(tom_match16_1_rt) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match16_1_rt_abst=tom_get_slot_tau_abst(tom_match16_1_rt); { tom.engine.adt.il.types.AbsTerm tom_tr=tom_match16_1_rt_abst; if ( true ) {

        return tom_make_teq(tom_tl,tom_tr);
       } } } } } } } } } } if (tom_is_fun_sym_isfsym(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match16_1_t=tom_get_slot_isfsym_t(tom_match16_1); { tom.engine.adt.il.types.Symbol tom_match16_1_symbol=tom_get_slot_isfsym_symbol(tom_match16_1); if (tom_is_fun_sym_tau(tom_match16_1_t) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match16_1_t_abst=tom_get_slot_tau_abst(tom_match16_1_t); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match16_1_t_abst; { tom.engine.adt.il.types.Symbol tom_symbol=tom_match16_1_symbol; if ( true ) {

        return tom_make_tisfsym(tom_t,tom_symbol);
       } } } } } } } } if (tom_is_fun_sym_eq(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match16_1_lt=tom_get_slot_eq_lt(tom_match16_1); { tom.engine.adt.il.types.Term tom_match16_1_rt=tom_get_slot_eq_rt(tom_match16_1); { tom.engine.adt.il.types.Term tom_lt=tom_match16_1_lt; { tom.engine.adt.il.types.Term tom_rt=tom_match16_1_rt; if ( true ) {

        // first reduce the argument
        return reduceWithMappingRules(tom_make_eq(reduceTermWithMappingRules(tom_lt),reduceTermWithMappingRules(tom_rt)));
       } } } } } } if (tom_is_fun_sym_isfsym(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match16_1_t=tom_get_slot_isfsym_t(tom_match16_1); { tom.engine.adt.il.types.Symbol tom_match16_1_symbol=tom_get_slot_isfsym_symbol(tom_match16_1); { tom.engine.adt.il.types.Term tom_t=tom_match16_1_t; { tom.engine.adt.il.types.Symbol tom_symbol=tom_match16_1_symbol; if ( true ) {

        return reduceWithMappingRules(tom_make_isfsym(reduceTermWithMappingRules(tom_t),tom_symbol));
       } } } } } } if (tom_is_fun_sym_ilnot(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match16_1_exp=tom_get_slot_ilnot_exp(tom_match16_1); { tom.engine.adt.il.types.Expr tom_e=tom_match16_1_exp; if ( true ) {

        return tom_make_ilnot(reduceWithMappingRules(tom_e));
       } } } } if (tom_is_fun_sym_true(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match16_1_subst=tom_get_slot_true_subst(tom_match16_1); { tom.engine.adt.il.types.SubstitutionList tom_substitutionList=tom_match16_1_subst; if ( true ) {

        return tom_make_true(reduceSubstitutionWithMappingRules(tom_substitutionList));
       } } } } if (tom_is_fun_sym_false(tom_match16_1) ||  false ) { if ( true ) {

        return ex;
       } } if (tom_is_fun_sym_iland(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match16_1_left=tom_get_slot_iland_left(tom_match16_1); { tom.engine.adt.il.types.Expr tom_match16_1_right=tom_get_slot_iland_right(tom_match16_1); { tom.engine.adt.il.types.Expr tom_lt=tom_match16_1_left; { tom.engine.adt.il.types.Expr tom_rt=tom_match16_1_right; if ( true ) {

        return tom_make_iland(reduceWithMappingRules(tom_lt),reduceWithMappingRules(tom_rt));
       } } } } } } if (tom_is_fun_sym_ilor(tom_match16_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match16_1_left=tom_get_slot_ilor_left(tom_match16_1); { tom.engine.adt.il.types.Expr tom_match16_1_right=tom_get_slot_ilor_right(tom_match16_1); { tom.engine.adt.il.types.Expr tom_lt=tom_match16_1_left; { tom.engine.adt.il.types.Expr tom_rt=tom_match16_1_right; if ( true ) {

        return tom_make_ilor(reduceWithMappingRules(tom_lt),reduceWithMappingRules(tom_rt));
       } } } } } } } }

    System.out.println("reduceWithMappingRules : nothing applies to:" + ex);
    return ex;
  }

  protected Term reduceTermWithMappingRules(Term trm) {
     if(trm instanceof  tom.engine.adt.il.types.Term) { { tom.engine.adt.il.types.Term tom_match17_1=(( tom.engine.adt.il.types.Term)trm); if (tom_is_fun_sym_tau(tom_match17_1) ||  false ) { if ( true ) {

        return trm;
       } } if (tom_is_fun_sym_subterm(tom_match17_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match17_1_symbol=tom_get_slot_subterm_symbol(tom_match17_1); { tom.engine.adt.il.types.Term tom_match17_1_t=tom_get_slot_subterm_t(tom_match17_1); { int  tom_match17_1_index=tom_get_slot_subterm_index(tom_match17_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match17_1_symbol; if (tom_is_fun_sym_subterm(tom_match17_1_t) ||  false ) { { tom.engine.adt.il.types.Term tom_t=tom_match17_1_t; { int  tom_index=tom_match17_1_index; if ( true ) {

        return reduceTermWithMappingRules(tom_make_subterm(tom_s,reduceTermWithMappingRules(tom_t),tom_index));
       } } } } } } } } } if (tom_is_fun_sym_slot(tom_match17_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match17_1_symbol=tom_get_slot_slot_symbol(tom_match17_1); { tom.engine.adt.il.types.Term tom_match17_1_t=tom_get_slot_slot_t(tom_match17_1); { String  tom_match17_1_name=tom_get_slot_slot_name(tom_match17_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match17_1_symbol; if (tom_is_fun_sym_slot(tom_match17_1_t) ||  false ) { { tom.engine.adt.il.types.Term tom_t=tom_match17_1_t; { String  tom_slotName=tom_match17_1_name; if ( true ) {

        return reduceTermWithMappingRules(tom_make_slot(tom_s,reduceTermWithMappingRules(tom_t),tom_slotName));
       } } } } } } } } } if (tom_is_fun_sym_subterm(tom_match17_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match17_1_symbol=tom_get_slot_subterm_symbol(tom_match17_1); { tom.engine.adt.il.types.Term tom_match17_1_t=tom_get_slot_subterm_t(tom_match17_1); { int  tom_match17_1_index=tom_get_slot_subterm_index(tom_match17_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match17_1_symbol; if (tom_is_fun_sym_tau(tom_match17_1_t) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match17_1_t_abst=tom_get_slot_tau_abst(tom_match17_1_t); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match17_1_t_abst; { int  tom_index=tom_match17_1_index; if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_st(tom_s,tom_t,tom_index);
        return tom_make_tau(term);
       } } } } } } } } } } if (tom_is_fun_sym_slot(tom_match17_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match17_1_symbol=tom_get_slot_slot_symbol(tom_match17_1); { tom.engine.adt.il.types.Term tom_match17_1_t=tom_get_slot_slot_t(tom_match17_1); { String  tom_match17_1_name=tom_get_slot_slot_name(tom_match17_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match17_1_symbol; if (tom_is_fun_sym_tau(tom_match17_1_t) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match17_1_t_abst=tom_get_slot_tau_abst(tom_match17_1_t); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match17_1_t_abst; { String  tom_slotName=tom_match17_1_name; if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_sl(tom_s,tom_t,tom_slotName);
        return tom_make_tau(term);
       } } } } } } } } } } } }

    System.out.println("reduceTermWithMappingRules : nothing applies to:" + trm);
    return trm;
  }

  protected TermList applyMappingRules(Term trm) {
     if(trm instanceof  tom.engine.adt.il.types.Term) { { tom.engine.adt.il.types.Term tom_match18_1=(( tom.engine.adt.il.types.Term)trm); if (tom_is_fun_sym_tau(tom_match18_1) ||  false ) { if ( true ) {

        return tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
       } } if (tom_is_fun_sym_subterm(tom_match18_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match18_1_symbol=tom_get_slot_subterm_symbol(tom_match18_1); { tom.engine.adt.il.types.Term tom_match18_1_t=tom_get_slot_subterm_t(tom_match18_1); { int  tom_match18_1_index=tom_get_slot_subterm_index(tom_match18_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match18_1_symbol; if (tom_is_fun_sym_subterm(tom_match18_1_t) ||  false ) { { tom.engine.adt.il.types.Term tom_t=tom_match18_1_t; { int  tom_index=tom_match18_1_index; if ( true ) {

        // first reduce the argument
        TermList reduced = applyMappingRules(tom_t);
        TermList res = tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
        while(!reduced.isEmpty()) {
          Term head = reduced.getHead();
          if (head.isTau()) {
            TermList hl = applyMappingRules(head);
            while(!hl.isEmpty()) {
              Term h = hl.getHead();
              res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_subterm(tom_s,h,tom_index),tom_empty_list_concTerm()));
              hl = hl.getTail();
            }
          } else {
            res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_subterm(tom_s,head,tom_index),tom_empty_list_concTerm()));
          }
          reduced = reduced.getTail();
        }
        return tom_append_list_concTerm(res,tom_empty_list_concTerm());
       } } } } } } } } } if (tom_is_fun_sym_slot(tom_match18_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match18_1_symbol=tom_get_slot_slot_symbol(tom_match18_1); { tom.engine.adt.il.types.Term tom_match18_1_t=tom_get_slot_slot_t(tom_match18_1); { String  tom_match18_1_name=tom_get_slot_slot_name(tom_match18_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match18_1_symbol; if (tom_is_fun_sym_slot(tom_match18_1_t) ||  false ) { { tom.engine.adt.il.types.Term tom_t=tom_match18_1_t; { String  tom_slotName=tom_match18_1_name; if ( true ) {

        // first reduce the argument
        TermList reduced = applyMappingRules(tom_t);
        TermList res = tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
        while(!reduced.isEmpty()) {
          Term head = reduced.getHead();
          if (head.isTau()) {
            TermList hl = applyMappingRules(head);
            while(!hl.isEmpty()) {
              Term h = hl.getHead();
              res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_slot(tom_s,h,tom_slotName),tom_empty_list_concTerm()));
              hl = hl.getTail();
            }
          } else {
            res = tom_append_list_concTerm(res,tom_cons_list_concTerm(tom_make_slot(tom_s,head,tom_slotName),tom_empty_list_concTerm()));
          }
          reduced = reduced.getTail();
        }
        return tom_append_list_concTerm(res,tom_empty_list_concTerm());
       } } } } } } } } } if (tom_is_fun_sym_subterm(tom_match18_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match18_1_symbol=tom_get_slot_subterm_symbol(tom_match18_1); { tom.engine.adt.il.types.Term tom_match18_1_t=tom_get_slot_subterm_t(tom_match18_1); { int  tom_match18_1_index=tom_get_slot_subterm_index(tom_match18_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match18_1_symbol; if (tom_is_fun_sym_tau(tom_match18_1_t) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match18_1_t_abst=tom_get_slot_tau_abst(tom_match18_1_t); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match18_1_t_abst; { int  tom_index=tom_match18_1_index; if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_st(tom_s,tom_t,tom_index);
        return tom_cons_list_concTerm(trm,tom_cons_list_concTerm(tom_make_tau(term),tom_empty_list_concTerm()));
       } } } } } } } } } } if (tom_is_fun_sym_slot(tom_match18_1) ||  false ) { { tom.engine.adt.il.types.Symbol tom_match18_1_symbol=tom_get_slot_slot_symbol(tom_match18_1); { tom.engine.adt.il.types.Term tom_match18_1_t=tom_get_slot_slot_t(tom_match18_1); { String  tom_match18_1_name=tom_get_slot_slot_name(tom_match18_1); { tom.engine.adt.il.types.Symbol tom_s=tom_match18_1_symbol; if (tom_is_fun_sym_tau(tom_match18_1_t) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match18_1_t_abst=tom_get_slot_tau_abst(tom_match18_1_t); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match18_1_t_abst; { String  tom_slotName=tom_match18_1_name; if ( true ) {

        // we shall test if term t has symbol s
        AbsTerm term = tom_make_sl(tom_s,tom_t,tom_slotName);
        return tom_cons_list_concTerm(trm,tom_cons_list_concTerm(tom_make_tau(term),tom_empty_list_concTerm()));
       } } } } } } } } } } } }

    System.out.println("apply TermRules : nothing applies to:" + trm);
    return tom_cons_list_concTerm(trm,tom_empty_list_concTerm());
  }

  protected ExprList applyExprRules(Expr ex) {
     if(ex instanceof  tom.engine.adt.il.types.Expr) { { tom.engine.adt.il.types.Expr tom_match19_1=(( tom.engine.adt.il.types.Expr)ex); if (tom_is_fun_sym_eq(tom_match19_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match19_1_lt=tom_get_slot_eq_lt(tom_match19_1); { tom.engine.adt.il.types.Term tom_match19_1_rt=tom_get_slot_eq_rt(tom_match19_1); if (tom_is_fun_sym_tau(tom_match19_1_lt) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match19_1_lt_abst=tom_get_slot_tau_abst(tom_match19_1_lt); { tom.engine.adt.il.types.AbsTerm tom_tl=tom_match19_1_lt_abst; if (tom_is_fun_sym_tau(tom_match19_1_rt) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match19_1_rt_abst=tom_get_slot_tau_abst(tom_match19_1_rt); { tom.engine.adt.il.types.AbsTerm tom_tr=tom_match19_1_rt_abst; if ( true ) {

        return tom_cons_list_concExpr(ex,tom_cons_list_concExpr(tom_make_teq(tom_tl,tom_tr),tom_empty_list_concExpr()));
       } } } } } } } } } } if (tom_is_fun_sym_isfsym(tom_match19_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match19_1_t=tom_get_slot_isfsym_t(tom_match19_1); { tom.engine.adt.il.types.Symbol tom_match19_1_symbol=tom_get_slot_isfsym_symbol(tom_match19_1); if (tom_is_fun_sym_tau(tom_match19_1_t) ||  false ) { { tom.engine.adt.il.types.AbsTerm tom_match19_1_t_abst=tom_get_slot_tau_abst(tom_match19_1_t); { tom.engine.adt.il.types.AbsTerm tom_t=tom_match19_1_t_abst; { tom.engine.adt.il.types.Symbol tom_symbol=tom_match19_1_symbol; if ( true ) {

        return tom_cons_list_concExpr(ex,tom_cons_list_concExpr(tom_make_tisfsym(tom_t,tom_symbol),tom_empty_list_concExpr()));
       } } } } } } } } if (tom_is_fun_sym_eq(tom_match19_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match19_1_lt=tom_get_slot_eq_lt(tom_match19_1); { tom.engine.adt.il.types.Term tom_match19_1_rt=tom_get_slot_eq_rt(tom_match19_1); { tom.engine.adt.il.types.Term tom_lt=tom_match19_1_lt; { tom.engine.adt.il.types.Term tom_rt=tom_match19_1_rt; if ( true ) {

        // first reduce the argument
        Term reducedl = ((TermList)applyMappingRules(tom_lt).reverse()).getHead();
        Term reducedr = ((TermList)applyMappingRules(tom_rt).reverse()).getHead();

        ExprList taill = applyExprRules(tom_make_eq(reducedl,reducedr));
        ExprList res = tom_cons_list_concExpr(ex,tom_append_list_concExpr(taill,tom_empty_list_concExpr()));
       } } } } } } if (tom_is_fun_sym_isfsym(tom_match19_1) ||  false ) { { tom.engine.adt.il.types.Term tom_match19_1_t=tom_get_slot_isfsym_t(tom_match19_1); { tom.engine.adt.il.types.Symbol tom_match19_1_symbol=tom_get_slot_isfsym_symbol(tom_match19_1); { tom.engine.adt.il.types.Term tom_t=tom_match19_1_t; { tom.engine.adt.il.types.Symbol tom_symbol=tom_match19_1_symbol; if ( true ) {

        // first reduce the argument
        TermList reduced = applyMappingRules(tom_t);
        ExprList res = tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
        while(!reduced.isEmpty()) {
          Term head = reduced.getHead();
          res = tom_append_list_concExpr(res,tom_cons_list_concExpr(tom_make_isfsym(head,tom_symbol),tom_empty_list_concExpr()));
          reduced = reduced.getTail();
        }
         if(res instanceof  tom.engine.adt.il.types.ExprList) { { tom.engine.adt.il.types.ExprList tom_match20_1=(( tom.engine.adt.il.types.ExprList)res); if (tom_is_fun_sym_concExpr(tom_match20_1) ||  false ) { { tom.engine.adt.il.types.ExprList tom_match20_1_list1=tom_match20_1; { tom.engine.adt.il.types.ExprList tom_match20_1_begin1=tom_match20_1_list1; { tom.engine.adt.il.types.ExprList tom_match20_1_end1=tom_match20_1_list1; { while (!(tom_is_empty_concExpr_ExprList(tom_match20_1_end1))) {tom_match20_1_list1=tom_match20_1_end1; { { tom.engine.adt.il.types.ExprList tom_hl=tom_get_slice_concExpr(tom_match20_1_begin1,tom_match20_1_end1); { tom.engine.adt.il.types.Expr tom_tail=tom_get_head_concExpr_ExprList(tom_match20_1_list1);tom_match20_1_list1=tom_get_tail_concExpr_ExprList(tom_match20_1_list1); if (tom_is_empty_concExpr_ExprList(tom_match20_1_list1)) { if ( true ) {

            ExprList taill = applyExprRules(tom_tail);
            return tom_append_list_concExpr(tom_hl,tom_append_list_concExpr(taill,tom_empty_list_concExpr()));
           } } } }tom_match20_1_end1=tom_get_tail_concExpr_ExprList(tom_match20_1_end1); } }tom_match20_1_list1=tom_match20_1_begin1; } } } } } } }

       } } } } } } if (tom_is_fun_sym_ilnot(tom_match19_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match19_1_exp=tom_get_slot_ilnot_exp(tom_match19_1); { tom.engine.adt.il.types.Expr tom_e=tom_match19_1_exp; if ( true ) {

        ExprList exprList = applyExprRules(tom_e);
        ExprList newExprList = tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
        while(!exprList.isEmpty()) {
          Expr localExpr = exprList.getHead();
          exprList = exprList.getTail();
          newExprList = tom_append_list_concExpr(newExprList,tom_cons_list_concExpr(tom_make_ilnot(localExpr),tom_empty_list_concExpr()));
        }
        return newExprList;
       } } } } if (tom_is_fun_sym_false(tom_match19_1) || tom_is_fun_sym_true(tom_match19_1) ||  false ) { if ( true ) {

        return tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
       } } } }

    System.out.println("apply ExprRules : nothing applies to:" + ex);
    return tom_cons_list_concExpr(ex,tom_empty_list_concExpr());
  }

  protected Expr buildConstraint(SubstitutionList substitution, Instr pil,Instr goal) {
     if(pil instanceof  tom.engine.adt.il.types.Instr) { { tom.engine.adt.il.types.Instr tom_match21_1=(( tom.engine.adt.il.types.Instr)pil); if (tom_is_fun_sym_sequence(tom_match21_1) ||  false ) { { tom.engine.adt.il.types.InstrList tom_match21_1_instrlist=tom_get_slot_sequence_instrlist(tom_match21_1); if (tom_is_fun_sym_semicolon(tom_match21_1_instrlist) ||  false ) { { tom.engine.adt.il.types.InstrList tom_match21_1_instrlist_list1=tom_match21_1_instrlist; if (!(tom_is_empty_semicolon_InstrList(tom_match21_1_instrlist_list1))) { { tom.engine.adt.il.types.Instr tom_h=tom_get_head_semicolon_InstrList(tom_match21_1_instrlist_list1);tom_match21_1_instrlist_list1=tom_get_tail_semicolon_InstrList(tom_match21_1_instrlist_list1); { tom.engine.adt.il.types.InstrList tom_t=tom_match21_1_instrlist_list1; if ( true ) {

        Expr goalFromHead = buildConstraint(substitution,tom_h,goal);
        if (!tom_t.isEmpty()) {
          Expr refuseFromHead = buildConstraint(substitution,tom_h,tom_make_refuse());
          Expr goalFromTail = buildConstraint(substitution,tom_make_sequence(tom_t),goal);
          if(this.isCamlSemantics()) {
            return tom_make_ilor(goalFromHead,tom_make_iland(refuseFromHead,goalFromTail));
          } else {
            return tom_make_ilor(goalFromHead,goalFromTail);
          }
        } else {
          return goalFromHead;
        }
       } } } } } } } } if (tom_is_fun_sym_ILLet(tom_match21_1) ||  false ) { { tom.engine.adt.il.types.Variable tom_match21_1_var=tom_get_slot_ILLet_var(tom_match21_1); { tom.engine.adt.il.types.Term tom_match21_1_t=tom_get_slot_ILLet_t(tom_match21_1); { tom.engine.adt.il.types.Instr tom_match21_1_body=tom_get_slot_ILLet_body(tom_match21_1); { tom.engine.adt.il.types.Variable tom_x=tom_match21_1_var; { tom.engine.adt.il.types.Term tom_u=tom_match21_1_t; { tom.engine.adt.il.types.Instr tom_i=tom_match21_1_body; if ( true ) {

        // update the substitution
        Term t = replaceVariablesInTerm(tom_make_appSubsT(substitution,tom_u));
        substitution = tom_append_list_subs(substitution,tom_cons_list_subs(tom_make_is(tom_x,t),tom_empty_list_subs()));
        //return `iland(eq(tau(absvar(x)),u),buildConstraint(substitution,i,goal));
        return buildConstraint(substitution,tom_i,goal);
       } } } } } } } } if (tom_is_fun_sym_ITE(tom_match21_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match21_1_e=tom_get_slot_ITE_e(tom_match21_1); { tom.engine.adt.il.types.Instr tom_match21_1_ift=tom_get_slot_ITE_ift(tom_match21_1); { tom.engine.adt.il.types.Instr tom_match21_1_iff=tom_get_slot_ITE_iff(tom_match21_1); { tom.engine.adt.il.types.Expr tom_exp=tom_match21_1_e; { tom.engine.adt.il.types.Instr tom_ift=tom_match21_1_ift; { tom.engine.adt.il.types.Instr tom_iff=tom_match21_1_iff; if ( true ) {

        Expr closedExpr = replaceVariablesInExpr(tom_make_appSubsE(substitution,tom_exp));
        Expr constraintTrue  = tom_make_iland(closedExpr,buildConstraint(substitution,tom_ift,goal));
        Expr constraintFalse = tom_make_iland(tom_make_ilnot(closedExpr),buildConstraint(substitution,tom_iff,goal));
        return tom_make_ilor(constraintTrue,constraintFalse);
       } } } } } } } } if (tom_is_fun_sym_refuse(tom_match21_1) ||  false ) { if ( true ) {

        if (pil == goal) {
          return tom_make_true(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()));
        } else {
          return tom_make_false();
        }
       } } if (tom_is_fun_sym_accept(tom_match21_1) ||  false ) { if ( true ) {

        if (pil == goal) {
          return tom_make_true(substitution);
        } else {
          return tom_make_false();
        }
       } } } }

    // default case, should not happen
    return tom_make_false();
  }

  protected Collection applySemanticsRules(Deriv post) {
    Collection c = new HashSet();
     if(post instanceof  tom.engine.adt.il.types.Deriv) { { tom.engine.adt.il.types.Deriv tom_match22_1=(( tom.engine.adt.il.types.Deriv)post); if (tom_is_fun_sym_ebs(tom_match22_1) ||  false ) { { tom.engine.adt.il.types.Environment tom_match22_1_lhs=tom_get_slot_ebs_lhs(tom_match22_1); { tom.engine.adt.il.types.Environment tom_match22_1_rhs=tom_get_slot_ebs_rhs(tom_match22_1); if (tom_is_fun_sym_env(tom_match22_1_lhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_lhs_subs=tom_get_slot_env_subs(tom_match22_1_lhs); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i=tom_get_slot_env_i(tom_match22_1_lhs); { tom.engine.adt.il.types.SubstitutionList tom_e=tom_match22_1_lhs_subs; if (tom_is_fun_sym_sequence(tom_match22_1_lhs_i) ||  false ) { { tom.engine.adt.il.types.InstrList tom_match22_1_lhs_i_instrlist=tom_get_slot_sequence_instrlist(tom_match22_1_lhs_i); if (tom_is_fun_sym_semicolon(tom_match22_1_lhs_i_instrlist) ||  false ) { { tom.engine.adt.il.types.InstrList tom_match22_1_lhs_i_instrlist_list1=tom_match22_1_lhs_i_instrlist; if (!(tom_is_empty_semicolon_InstrList(tom_match22_1_lhs_i_instrlist_list1))) { { tom.engine.adt.il.types.Instr tom_h=tom_get_head_semicolon_InstrList(tom_match22_1_lhs_i_instrlist_list1);tom_match22_1_lhs_i_instrlist_list1=tom_get_tail_semicolon_InstrList(tom_match22_1_lhs_i_instrlist_list1); { tom.engine.adt.il.types.InstrList tom_t=tom_match22_1_lhs_i_instrlist_list1; if (tom_is_fun_sym_env(tom_match22_1_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs=tom_get_slot_env_subs(tom_match22_1_rhs); { tom.engine.adt.il.types.Instr tom_match22_1_rhs_i=tom_get_slot_env_i(tom_match22_1_rhs); if (tom_is_fun_sym_subs(tom_match22_1_rhs_subs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs_list1=tom_match22_1_rhs_subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1))) { { tom.engine.adt.il.types.Substitution tom_match22_1_rhs_subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_rhs_subs_list1);tom_match22_1_rhs_subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_rhs_subs_list1); if (tom_is_fun_sym_undefsubs(tom_match22_1_rhs_subs_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1)) { { tom.engine.adt.il.types.Instr tom_ip=tom_match22_1_rhs_i; if ( true ) {

        if(instructionContains(tom_h,tom_ip)) {
          // ends the derivation
          Deriv up = tom_make_ebs(tom_make_env(tom_e,tom_h),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
          Collection pre_list = applySemanticsRules(up);

          Iterator it = pre_list.iterator();
          while(it.hasNext()) {
            DerivTree pre = (DerivTree) it.next();
            c.add(tom_make_derivrule("seqa",post,pre,tom_make_seq()));
          }
        } else {
          // continue the derivation with t
          Deriv up = tom_make_ebs(tom_make_env(tom_e,tom_make_sequence(tom_t)),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
          Collection post_list = applySemanticsRules(up);

          if(this.isCamlSemantics()) {
            up = tom_make_ebs(tom_make_env(tom_e,tom_h),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_make_refuse()));
            Collection pre_list = applySemanticsRules(up);
            Iterator it = pre_list.iterator();
            while(it.hasNext()) {
              DerivTree pre = (DerivTree) it.next();
              Iterator it2 = post_list.iterator();
              while(it2.hasNext()) {
                DerivTree pre2 = (DerivTree) it2.next();
                c.add(tom_make_derivrule2("seqb",post,pre,pre2,tom_make_seq()));
              }
            }
          } else {
            Iterator it = post_list.iterator();
            while(it.hasNext()) {
              DerivTree pre = (DerivTree) it.next();
              c.add(tom_make_derivrule2("seqb",post,tom_make_endderiv(),pre,tom_make_seq()));
            }
          }
        }
       } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_ebs(tom_match22_1) ||  false ) { { tom.engine.adt.il.types.Environment tom_match22_1_lhs=tom_get_slot_ebs_lhs(tom_match22_1); { tom.engine.adt.il.types.Environment tom_match22_1_rhs=tom_get_slot_ebs_rhs(tom_match22_1); if (tom_is_fun_sym_env(tom_match22_1_lhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_lhs_subs=tom_get_slot_env_subs(tom_match22_1_lhs); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i=tom_get_slot_env_i(tom_match22_1_lhs); { tom.engine.adt.il.types.SubstitutionList tom_e=tom_match22_1_lhs_subs; if (tom_is_fun_sym_ILLet(tom_match22_1_lhs_i) ||  false ) { { tom.engine.adt.il.types.Variable tom_match22_1_lhs_i_var=tom_get_slot_ILLet_var(tom_match22_1_lhs_i); { tom.engine.adt.il.types.Term tom_match22_1_lhs_i_t=tom_get_slot_ILLet_t(tom_match22_1_lhs_i); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i_body=tom_get_slot_ILLet_body(tom_match22_1_lhs_i); { tom.engine.adt.il.types.Variable tom_x=tom_match22_1_lhs_i_var; { tom.engine.adt.il.types.Term tom_u=tom_match22_1_lhs_i_t; { tom.engine.adt.il.types.Instr tom_i=tom_match22_1_lhs_i_body; if (tom_is_fun_sym_env(tom_match22_1_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs=tom_get_slot_env_subs(tom_match22_1_rhs); { tom.engine.adt.il.types.Instr tom_match22_1_rhs_i=tom_get_slot_env_i(tom_match22_1_rhs); if (tom_is_fun_sym_subs(tom_match22_1_rhs_subs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs_list1=tom_match22_1_rhs_subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1))) { { tom.engine.adt.il.types.Substitution tom_match22_1_rhs_subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_rhs_subs_list1);tom_match22_1_rhs_subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_rhs_subs_list1); if (tom_is_fun_sym_undefsubs(tom_match22_1_rhs_subs_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1)) { { tom.engine.adt.il.types.Instr tom_ip=tom_match22_1_rhs_i; if ( true ) {


        // build condition
        Seq cond = seqFromTerm(tom_make_appSubsT(tom_e,tom_u));
        // find "t"
        Term t = null;
         if(cond instanceof  tom.engine.adt.il.types.Seq) { { tom.engine.adt.il.types.Seq tom_match23_1=(( tom.engine.adt.il.types.Seq)cond); if (tom_is_fun_sym_dedterm(tom_match23_1) ||  false ) { { tom.engine.adt.il.types.TermList tom_match23_1_terms=tom_get_slot_dedterm_terms(tom_match23_1); if (tom_is_fun_sym_concTerm(tom_match23_1_terms) ||  false ) { { tom.engine.adt.il.types.TermList tom_match23_1_terms_list1=tom_match23_1_terms; { tom.engine.adt.il.types.TermList tom_match23_1_terms_begin1=tom_match23_1_terms_list1; { tom.engine.adt.il.types.TermList tom_match23_1_terms_end1=tom_match23_1_terms_list1; { while (!(tom_is_empty_concTerm_TermList(tom_match23_1_terms_end1))) {tom_match23_1_terms_list1=tom_match23_1_terms_end1; { { tom.engine.adt.il.types.Term tom_r=tom_get_head_concTerm_TermList(tom_match23_1_terms_list1);tom_match23_1_terms_list1=tom_get_tail_concTerm_TermList(tom_match23_1_terms_list1); if (tom_is_empty_concTerm_TermList(tom_match23_1_terms_list1)) { if ( true ) {
 t = tom_r;  } } }tom_match23_1_terms_end1=tom_get_tail_concTerm_TermList(tom_match23_1_terms_end1); } }tom_match23_1_terms_list1=tom_match23_1_terms_begin1; } } } } } } } if ( true ) {
 if (t == null) {
              System.out.println("seqFromTerm has a problem with " + cond);
            }
           } } }

        Deriv up = tom_make_ebs(tom_make_env(tom_append_list_subs(tom_e,tom_cons_list_subs(tom_make_is(tom_x,t),tom_empty_list_subs())),tom_i),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip)
            )


;
        Collection pre_list = applySemanticsRules(up);
        Iterator it = pre_list.iterator();
        while(it.hasNext()) {
          DerivTree pre = (DerivTree) it.next();
          c.add(tom_make_derivrule("let",post,pre,cond));
        }
       } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_ebs(tom_match22_1) ||  false ) { { tom.engine.adt.il.types.Environment tom_match22_1_lhs=tom_get_slot_ebs_lhs(tom_match22_1); { tom.engine.adt.il.types.Environment tom_match22_1_rhs=tom_get_slot_ebs_rhs(tom_match22_1); if (tom_is_fun_sym_env(tom_match22_1_lhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_lhs_subs=tom_get_slot_env_subs(tom_match22_1_lhs); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i=tom_get_slot_env_i(tom_match22_1_lhs); { tom.engine.adt.il.types.SubstitutionList tom_e=tom_match22_1_lhs_subs; if (tom_is_fun_sym_ITE(tom_match22_1_lhs_i) ||  false ) { { tom.engine.adt.il.types.Expr tom_match22_1_lhs_i_e=tom_get_slot_ITE_e(tom_match22_1_lhs_i); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i_ift=tom_get_slot_ITE_ift(tom_match22_1_lhs_i); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i_iff=tom_get_slot_ITE_iff(tom_match22_1_lhs_i); { tom.engine.adt.il.types.Expr tom_exp=tom_match22_1_lhs_i_e; { tom.engine.adt.il.types.Instr tom_ift=tom_match22_1_lhs_i_ift; { tom.engine.adt.il.types.Instr tom_iff=tom_match22_1_lhs_i_iff; if (tom_is_fun_sym_env(tom_match22_1_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs=tom_get_slot_env_subs(tom_match22_1_rhs); { tom.engine.adt.il.types.Instr tom_match22_1_rhs_i=tom_get_slot_env_i(tom_match22_1_rhs); if (tom_is_fun_sym_subs(tom_match22_1_rhs_subs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs_list1=tom_match22_1_rhs_subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1))) { { tom.engine.adt.il.types.Substitution tom_match22_1_rhs_subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_rhs_subs_list1);tom_match22_1_rhs_subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_rhs_subs_list1); if (tom_is_fun_sym_undefsubs(tom_match22_1_rhs_subs_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1)) { { tom.engine.adt.il.types.Instr tom_ip=tom_match22_1_rhs_i; if ( true ) {


        // build condition
        ExprList cond = exprListFromExpr(tom_make_appSubsE(tom_e,tom_exp));

        Deriv up = tom_make_ebs(tom_make_env(tom_e,tom_ift),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
        String rulename = "iftrue";

        Collection pre_list = applySemanticsRules(up);
        Iterator it = pre_list.iterator();
        while(it.hasNext()) {
          DerivTree pre = (DerivTree) it.next();
          c.add(tom_make_derivrule(rulename,post,pre,tom_make_dedexpr(tom_append_list_concExpr(cond,tom_cons_list_concExpr(tom_make_true(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs())),tom_empty_list_concExpr())))));
        }

        up = tom_make_ebs(tom_make_env(tom_e,tom_iff),tom_make_env(tom_cons_list_subs(tom_make_undefsubs(),tom_empty_list_subs()),tom_ip));
        rulename = "iffalse";

        pre_list = applySemanticsRules(up);
        it = pre_list.iterator();
        while(it.hasNext()) {
          DerivTree pre = (DerivTree) it.next();
          c.add(tom_make_derivrule(rulename,post,pre,tom_make_dedexpr(tom_append_list_concExpr(cond,tom_cons_list_concExpr(tom_make_false(),tom_empty_list_concExpr())))));
        }
       } } } } } } } } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_ebs(tom_match22_1) ||  false ) { { tom.engine.adt.il.types.Environment tom_match22_1_lhs=tom_get_slot_ebs_lhs(tom_match22_1); { tom.engine.adt.il.types.Environment tom_match22_1_rhs=tom_get_slot_ebs_rhs(tom_match22_1); if (tom_is_fun_sym_env(tom_match22_1_lhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_lhs_subs=tom_get_slot_env_subs(tom_match22_1_lhs); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i=tom_get_slot_env_i(tom_match22_1_lhs); if (tom_is_fun_sym_accept(tom_match22_1_lhs_i) ||  false ) { if (tom_is_fun_sym_env(tom_match22_1_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs=tom_get_slot_env_subs(tom_match22_1_rhs); { tom.engine.adt.il.types.Instr tom_match22_1_rhs_i=tom_get_slot_env_i(tom_match22_1_rhs); if (tom_is_fun_sym_subs(tom_match22_1_rhs_subs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs_list1=tom_match22_1_rhs_subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1))) { { tom.engine.adt.il.types.Substitution tom_match22_1_rhs_subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_rhs_subs_list1);tom_match22_1_rhs_subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_rhs_subs_list1); if (tom_is_fun_sym_undefsubs(tom_match22_1_rhs_subs_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1)) { if (tom_is_fun_sym_accept(tom_match22_1_rhs_i) ||  false ) { if ( true ) {


        c.add(tom_make_derivrule("axiom_accept",post,tom_make_endderiv(),tom_make_seq()));
       } } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_ebs(tom_match22_1) ||  false ) { { tom.engine.adt.il.types.Environment tom_match22_1_lhs=tom_get_slot_ebs_lhs(tom_match22_1); { tom.engine.adt.il.types.Environment tom_match22_1_rhs=tom_get_slot_ebs_rhs(tom_match22_1); if (tom_is_fun_sym_env(tom_match22_1_lhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_lhs_subs=tom_get_slot_env_subs(tom_match22_1_lhs); { tom.engine.adt.il.types.Instr tom_match22_1_lhs_i=tom_get_slot_env_i(tom_match22_1_lhs); if (tom_is_fun_sym_refuse(tom_match22_1_lhs_i) ||  false ) { if (tom_is_fun_sym_env(tom_match22_1_rhs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs=tom_get_slot_env_subs(tom_match22_1_rhs); { tom.engine.adt.il.types.Instr tom_match22_1_rhs_i=tom_get_slot_env_i(tom_match22_1_rhs); if (tom_is_fun_sym_subs(tom_match22_1_rhs_subs) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match22_1_rhs_subs_list1=tom_match22_1_rhs_subs; if (!(tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1))) { { tom.engine.adt.il.types.Substitution tom_match22_1_rhs_subs_1=tom_get_head_subs_SubstitutionList(tom_match22_1_rhs_subs_list1);tom_match22_1_rhs_subs_list1=tom_get_tail_subs_SubstitutionList(tom_match22_1_rhs_subs_list1); if (tom_is_fun_sym_undefsubs(tom_match22_1_rhs_subs_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match22_1_rhs_subs_list1)) { if (tom_is_fun_sym_refuse(tom_match22_1_rhs_i) ||  false ) { if ( true ) {

        c.add(tom_make_derivrule("axiom_refuse",post,tom_make_endderiv(),tom_make_seq()));
       } } } } } } } } } } } } } } } } } } if ( true ) {

        if (c.isEmpty()) {
            //System.out.println("Error " + post);
        }
       } } }

    return c;
  }

   private static class stratInstructionContains  extends  tom.engine.adt.il.IlVisitableFwd  {  tom.engine.adt.il.types.Instr goal;   java.util.Collection  c;  public stratInstructionContains(  tom.engine.adt.il.types.Instr goal ,   java.util.Collection  c ) { super(tom_make_Identity() ); this.goal=goal; this.c=c; } public  tom.engine.adt.il.types.Instr visit_Instr(  tom.engine.adt.il.types.Instr tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Instr) { { tom.engine.adt.il.types.Instr tom_match24_1=(( tom.engine.adt.il.types.Instr)tom__arg); { tom.engine.adt.il.types.Instr tom_x=tom_match24_1; if ( true ) {


        if (tom_x== goal) {
          c.add(goal);
          tom_make_Fail().visit(tom_x);
        }
       } } } } return super.visit_Instr(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_stratInstructionContains( tom.engine.adt.il.types.Instr t0,  java.util.Collection  t1) { return new stratInstructionContains(t0,t1); }


  protected boolean instructionContains(Instr i, Instr goal) {
    Collection collect = new HashSet();
    try {
      tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_make_Sequence(tom_make_stratInstructionContains(goal,collect),tom_make_All(tom_make_MuVar("x"))))).visit(i);
    } catch(jjtraveler.VisitFailure e) {
      System.out.println("strategy instructionContains failed");
    }
    return !collect.isEmpty();
  }

/**
 * To replace undefsubst in tree by the computed value
 * which leads to axiom
 */
   private static class replaceUndefsubs  extends  tom.engine.adt.il.IlVisitableFwd  {  tom.engine.adt.il.types.SubstitutionList arg;  public replaceUndefsubs(  tom.engine.adt.il.types.SubstitutionList arg ) { super(tom_make_Identity() ); this.arg=arg; } public  tom.engine.adt.il.types.SubstitutionList visit_SubstitutionList(  tom.engine.adt.il.types.SubstitutionList tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.SubstitutionList) { { tom.engine.adt.il.types.SubstitutionList tom_match25_1=(( tom.engine.adt.il.types.SubstitutionList)tom__arg); if (tom_is_fun_sym_subs(tom_match25_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match25_1_list1=tom_match25_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match25_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match25_1_1=tom_get_head_subs_SubstitutionList(tom_match25_1_list1);tom_match25_1_list1=tom_get_tail_subs_SubstitutionList(tom_match25_1_list1); if (tom_is_fun_sym_undefsubs(tom_match25_1_1) ||  false ) { if (tom_is_empty_subs_SubstitutionList(tom_match25_1_list1)) { if ( true ) {


        return arg;
       } } } } } } } } } return super.visit_SubstitutionList(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_replaceUndefsubs( tom.engine.adt.il.types.SubstitutionList t0) { return new replaceUndefsubs(t0); }



  private DerivTree replaceUndefinedSubstitution(DerivTree subject,
                                      SubstitutionList subs) {
    try {
      subject = (DerivTree) tom_make_TopDown(tom_make_replaceUndefsubs(subs)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collectProgramVariables failed");
    }
    return subject;
  }

  


  static private class SubstRef {
    private SubstitutionList sublist;
    public SubstRef(SubstitutionList slist) {
      sublist = slist;
    }
    public void set(SubstitutionList ssublist) {
      this.sublist = ssublist;
    }
    public SubstitutionList get() {
      return sublist;
    }
  }

  /**
   * These functions deals with substitution application
   */
   private static class replaceVariableByTerm  extends  tom.engine.adt.il.IlVisitableFwd  {  java.util.Map  map;  public replaceVariableByTerm(  java.util.Map  map ) { super(tom_make_Identity() ); this.map=map; } public  tom.engine.adt.il.types.Term visit_Term(  tom.engine.adt.il.types.Term tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.il.types.Term) { { tom.engine.adt.il.types.Term tom_match26_1=(( tom.engine.adt.il.types.Term)tom__arg); if (tom_is_fun_sym_tau(tom_match26_1) ||  false ) { { tom.engine.adt.il.types.Term tom_t=tom_match26_1; { tom.engine.adt.il.types.AbsTerm tom_match26_1_abst=tom_get_slot_tau_abst(tom_match26_1); if (tom_is_fun_sym_absvar(tom_match26_1_abst) ||  false ) { { tom.engine.adt.il.types.Variable tom_match26_1_abst_varname=tom_get_slot_absvar_varname(tom_match26_1_abst); if (tom_is_fun_sym_var(tom_match26_1_abst_varname) ||  false ) { { tom.engine.adt.il.types.Variable tom_v=tom_match26_1_abst_varname; if ( true ) {


        if (map.containsKey(tom_v)) {
          return (Term)map.get(tom_v);
        }
        return tom_t;
       } } } } } } } } } } return super.visit_Term(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_replaceVariableByTerm( java.util.Map  t0) { return new replaceVariableByTerm(t0); }



  public Term replaceVariablesInTerm(Term subject) {
     if(subject instanceof  tom.engine.adt.il.types.Term) { { tom.engine.adt.il.types.Term tom_match27_1=(( tom.engine.adt.il.types.Term)subject); if (tom_is_fun_sym_appSubsT(tom_match27_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match27_1_subs=tom_get_slot_appSubsT_subs(tom_match27_1); { tom.engine.adt.il.types.Term tom_match27_1_t=tom_get_slot_appSubsT_t(tom_match27_1); { tom.engine.adt.il.types.SubstitutionList tom_sublist=tom_match27_1_subs; { tom.engine.adt.il.types.Term tom_term=tom_match27_1_t; if ( true ) {

        Map map = buildVariableMap(tom_sublist, new HashMap());
        Term t = tom_term;
        try {
          t = (Term) tom_make_TopDown(tom_make_replaceVariableByTerm(map)).visit(tom_term);
        } catch (jjtraveler.VisitFailure e) {
          throw new TomRuntimeException("Strategy collectProgramVariables failed");
        }
        return t;
       } } } } } } } }

    return subject;
  }

  public Expr replaceVariablesInExpr(Expr subject) {
     if(subject instanceof  tom.engine.adt.il.types.Expr) { { tom.engine.adt.il.types.Expr tom_match28_1=(( tom.engine.adt.il.types.Expr)subject); if (tom_is_fun_sym_appSubsE(tom_match28_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match28_1_subs=tom_get_slot_appSubsE_subs(tom_match28_1); { tom.engine.adt.il.types.Expr tom_match28_1_e=tom_get_slot_appSubsE_e(tom_match28_1); { tom.engine.adt.il.types.SubstitutionList tom_sublist=tom_match28_1_subs; { tom.engine.adt.il.types.Expr tom_term=tom_match28_1_e; if ( true ) {

        Map map = buildVariableMap(tom_sublist, new HashMap());
        Expr t = tom_term;
        try {
          t = (Expr) tom_make_TopDown(tom_make_replaceVariableByTerm(map)).visit(tom_term);
        } catch (jjtraveler.VisitFailure e) {
          throw new TomRuntimeException("Strategy collectProgramVariables failed");
        }
        return t;
       } } } } } } } }

    return subject;
  }

  String tomNumberListToString(TomNumberList numberList) {
    String result = "";
    while(!numberList.isEmpty()) {
      TomNumber number = numberList.getHead();
      numberList = numberList.getTail();
       if(number instanceof  tom.engine.adt.tomsignature.types.TomNumber) { { tom.engine.adt.tomsignature.types.TomNumber tom_match29_1=(( tom.engine.adt.tomsignature.types.TomNumber)number); if (tom_is_fun_sym_Number(tom_match29_1) ||  false ) { { int  tom_match29_1_integer=tom_get_slot_Number_integer(tom_match29_1); { int  tom_n=tom_match29_1_integer; if ( true ) {

          result = result + "Number" + Integer.toString(tom_n);
         } } } } if (tom_is_fun_sym_MatchNumber(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match29_1_number=tom_get_slot_MatchNumber_number(tom_match29_1); if (tom_is_fun_sym_Number(tom_match29_1_number) ||  false ) { { int  tom_match29_1_number_integer=tom_get_slot_Number_integer(tom_match29_1_number); { int  tom_n=tom_match29_1_number_integer; if ( true ) {

          result = result + "Match" + Integer.toString(tom_n);
         } } } } } } if (tom_is_fun_sym_PatternNumber(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match29_1_number=tom_get_slot_PatternNumber_number(tom_match29_1); if (tom_is_fun_sym_Number(tom_match29_1_number) ||  false ) { { int  tom_match29_1_number_integer=tom_get_slot_Number_integer(tom_match29_1_number); { int  tom_n=tom_match29_1_number_integer; if ( true ) {

          result = result + "Pattern" + Integer.toString(tom_n);
         } } } } } } if (tom_is_fun_sym_IndexNumber(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match29_1_number=tom_get_slot_IndexNumber_number(tom_match29_1); if (tom_is_fun_sym_Number(tom_match29_1_number) ||  false ) { { int  tom_match29_1_number_integer=tom_get_slot_Number_integer(tom_match29_1_number); { int  tom_n=tom_match29_1_number_integer; if ( true ) {

          result = result + "Index" + Integer.toString(tom_n);
         } } } } } } if (tom_is_fun_sym_Begin(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match29_1_number=tom_get_slot_Begin_number(tom_match29_1); if (tom_is_fun_sym_Number(tom_match29_1_number) ||  false ) { { int  tom_match29_1_number_integer=tom_get_slot_Number_integer(tom_match29_1_number); { int  tom_n=tom_match29_1_number_integer; if ( true ) {

          result = result + "Begin" + Integer.toString(tom_n);
         } } } } } } if (tom_is_fun_sym_End(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match29_1_number=tom_get_slot_End_number(tom_match29_1); if (tom_is_fun_sym_Number(tom_match29_1_number) ||  false ) { { int  tom_match29_1_number_integer=tom_get_slot_Number_integer(tom_match29_1_number); { int  tom_n=tom_match29_1_number_integer; if ( true ) {

          result = result + "End" + Integer.toString(tom_n);
         } } } } } } if (tom_is_fun_sym_AbsVar(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match29_1_number=tom_get_slot_AbsVar_number(tom_match29_1); if (tom_is_fun_sym_Number(tom_match29_1_number) ||  false ) { { int  tom_match29_1_number_integer=tom_get_slot_Number_integer(tom_match29_1_number); { int  tom_n=tom_match29_1_number_integer; if ( true ) {

          result = result + "AbsVar" + Integer.toString(tom_n);
         } } } } } } if (tom_is_fun_sym_RenamedVar(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match29_1_astName=tom_get_slot_RenamedVar_astName(tom_match29_1); { tom.engine.adt.tomsignature.types.TomName tom_tomName=tom_match29_1_astName; if ( true ) {

          String identifier = "Empty";
           if(tom_tomName instanceof  tom.engine.adt.tomsignature.types.TomName) { { tom.engine.adt.tomsignature.types.TomName tom_match30_1=(( tom.engine.adt.tomsignature.types.TomName)tom_tomName); if (tom_is_fun_sym_Name(tom_match30_1) ||  false ) { { String  tom_match30_1_string=tom_get_slot_Name_string(tom_match30_1); { String  tom_name=tom_match30_1_string; if ( true ) {

              identifier = tom_name;
             } } } } if (tom_is_fun_sym_PositionName(tom_match30_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match30_1_numberList=tom_get_slot_PositionName_numberList(tom_match30_1); { tom.engine.adt.tomsignature.types.TomNumberList tom_localNumberList=tom_match30_1_numberList; if ( true ) {

              identifier = tomNumberListToString(tom_localNumberList);
             } } } } } }

          result = result + "RenamedVar" + identifier;
         } } } } if (tom_is_fun_sym_NameNumber(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match29_1_astName=tom_get_slot_NameNumber_astName(tom_match29_1); { tom.engine.adt.tomsignature.types.TomName tom_tomName=tom_match29_1_astName; if ( true ) {

          String identifier = "Empty";
           if(tom_tomName instanceof  tom.engine.adt.tomsignature.types.TomName) { { tom.engine.adt.tomsignature.types.TomName tom_match31_1=(( tom.engine.adt.tomsignature.types.TomName)tom_tomName); if (tom_is_fun_sym_Name(tom_match31_1) ||  false ) { { String  tom_match31_1_string=tom_get_slot_Name_string(tom_match31_1); { String  tom_name=tom_match31_1_string; if ( true ) {

              identifier = tom_name;
             } } } } if (tom_is_fun_sym_PositionName(tom_match31_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match31_1_numberList=tom_get_slot_PositionName_numberList(tom_match31_1); { tom.engine.adt.tomsignature.types.TomNumberList tom_localNumberList=tom_match31_1_numberList; if ( true ) {

              identifier = tomNumberListToString(tom_localNumberList);
             } } } } } }

          result = result + "NameNumber" + identifier;
         } } } } if (tom_is_fun_sym_RuleVar(tom_match29_1) ||  false ) { if ( true ) {

          result = "RuleVar" + result;
         } } } }

    }
    return result;
  }

  private Map buildVariableMap(SubstitutionList sublist, Map map) {
     if(sublist instanceof  tom.engine.adt.il.types.SubstitutionList) { { tom.engine.adt.il.types.SubstitutionList tom_match32_1=(( tom.engine.adt.il.types.SubstitutionList)sublist); if (tom_is_fun_sym_subs(tom_match32_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match32_1_list1=tom_match32_1; if (tom_is_empty_subs_SubstitutionList(tom_match32_1_list1)) { if ( true ) {
 return map;  } } } } if (tom_is_fun_sym_subs(tom_match32_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match32_1_list1=tom_match32_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match32_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match32_1_1=tom_get_head_subs_SubstitutionList(tom_match32_1_list1);tom_match32_1_list1=tom_get_tail_subs_SubstitutionList(tom_match32_1_list1); if (tom_is_fun_sym_undefsubs(tom_match32_1_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_t=tom_match32_1_list1; if ( true ) {
 return buildVariableMap(tom_t,map); } } } } } } } if (tom_is_fun_sym_subs(tom_match32_1) ||  false ) { { tom.engine.adt.il.types.SubstitutionList tom_match32_1_list1=tom_match32_1; if (!(tom_is_empty_subs_SubstitutionList(tom_match32_1_list1))) { { tom.engine.adt.il.types.Substitution tom_match32_1_1=tom_get_head_subs_SubstitutionList(tom_match32_1_list1);tom_match32_1_list1=tom_get_tail_subs_SubstitutionList(tom_match32_1_list1); if (tom_is_fun_sym_is(tom_match32_1_1) ||  false ) { { tom.engine.adt.il.types.Variable tom_match32_1_1_var=tom_get_slot_is_var(tom_match32_1_1); { tom.engine.adt.il.types.Term tom_match32_1_1_term=tom_get_slot_is_term(tom_match32_1_1); { tom.engine.adt.il.types.Variable tom_v=tom_match32_1_1_var; { tom.engine.adt.il.types.Term tom_term=tom_match32_1_1_term; { tom.engine.adt.il.types.SubstitutionList tom_t=tom_match32_1_list1; if ( true ) {

        map.put(tom_v,tom_term);
        return buildVariableMap(tom_t,map);
       } } } } } } } } } } } } }

    return null;
  }

  public void mappingReduce(Map input) {
    Iterator it = input.keySet().iterator();
    while(it.hasNext()) {
      Object key = it.next();
      Expr value = (Expr) input.get(key);
      input.put(key,reduceWithMappingRules(value));
    }
  }

  public void booleanReduce(Map input) {
    Iterator it = input.keySet().iterator();
    while(it.hasNext()) {
      Object key = it.next();
      Expr value = (Expr) input.get(key);
      input.put(key,booleanSimplify(value));
    }
  }

  public Expr booleanSimplify(Expr expr) {
    VisitableVisitor booleanSimplifier = new BooleanSimplifier();
    Expr res = tom_make_false();
    try {
      res = (Expr) tom_make_InnermostId(booleanSimplifier).visit(expr);
    } catch (jjtraveler.VisitFailure e) {
      System.out.println("humm");
    }
    return res;
  }

  public class BooleanSimplifier extends IlVisitableFwd {
    public BooleanSimplifier() {
      super(tom_make_Identity());
    }

    public Expr visit_Expr(Expr arg) throws jjtraveler.VisitFailure {
       if(arg instanceof  tom.engine.adt.il.types.Expr) { { tom.engine.adt.il.types.Expr tom_match33_1=(( tom.engine.adt.il.types.Expr)arg); if (tom_is_fun_sym_iland(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_left=tom_get_slot_iland_left(tom_match33_1); { tom.engine.adt.il.types.Expr tom_match33_1_right=tom_get_slot_iland_right(tom_match33_1); if (tom_is_fun_sym_false(tom_match33_1_left) ||  false ) { if ( true ) {

          return tom_make_false();
         } } } } } if (tom_is_fun_sym_iland(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_left=tom_get_slot_iland_left(tom_match33_1); { tom.engine.adt.il.types.Expr tom_match33_1_right=tom_get_slot_iland_right(tom_match33_1); if (tom_is_fun_sym_false(tom_match33_1_right) ||  false ) { if ( true ) {

          return tom_make_false();
         } } } } } if (tom_is_fun_sym_ilor(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_left=tom_get_slot_ilor_left(tom_match33_1); { tom.engine.adt.il.types.Expr tom_match33_1_right=tom_get_slot_ilor_right(tom_match33_1); if (tom_is_fun_sym_true(tom_match33_1_left) ||  false ) { { tom.engine.adt.il.types.Expr tom_lt=tom_match33_1_left; if ( true ) {

          return tom_lt;
         } } } } } } if (tom_is_fun_sym_ilor(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_left=tom_get_slot_ilor_left(tom_match33_1); { tom.engine.adt.il.types.Expr tom_match33_1_right=tom_get_slot_ilor_right(tom_match33_1); if (tom_is_fun_sym_true(tom_match33_1_right) ||  false ) { { tom.engine.adt.il.types.Expr tom_lt=tom_match33_1_right; if ( true ) {

          return tom_lt;
         } } } } } } if (tom_is_fun_sym_ilor(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_left=tom_get_slot_ilor_left(tom_match33_1); { tom.engine.adt.il.types.Expr tom_match33_1_right=tom_get_slot_ilor_right(tom_match33_1); if (tom_is_fun_sym_false(tom_match33_1_left) ||  false ) { { tom.engine.adt.il.types.Expr tom_right=tom_match33_1_right; if ( true ) {

          return tom_right;
         } } } } } } if (tom_is_fun_sym_ilor(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_left=tom_get_slot_ilor_left(tom_match33_1); { tom.engine.adt.il.types.Expr tom_match33_1_right=tom_get_slot_ilor_right(tom_match33_1); { tom.engine.adt.il.types.Expr tom_left=tom_match33_1_left; if (tom_is_fun_sym_false(tom_match33_1_right) ||  false ) { if ( true ) {

          return tom_left;
         } } } } } } if (tom_is_fun_sym_ilnot(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_exp=tom_get_slot_ilnot_exp(tom_match33_1); if (tom_is_fun_sym_true(tom_match33_1_exp) ||  false ) { if ( true ) {

          return tom_make_false();
         } } } } if (tom_is_fun_sym_ilnot(tom_match33_1) ||  false ) { { tom.engine.adt.il.types.Expr tom_match33_1_exp=tom_get_slot_ilnot_exp(tom_match33_1); if (tom_is_fun_sym_false(tom_match33_1_exp) ||  false ) { if ( true ) {

          return tom_make_true(tom_empty_list_subs());
         } } } } } }

      return (Expr) any.visit(arg);
    }
  }

}
