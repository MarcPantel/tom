/* Generated by TOM (version 2.1alpha): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles
 *
 **/

package jtom.verifier;

import jtom.*;
import aterm.*;
import java.util.*;
import jtom.tools.*;
import jtom.runtime.*;
import jtom.adt.tomsignature.types.*;
import jtom.verifier.verifier.il.*;
import jtom.verifier.verifier.il.types.*;
import jtom.TomMessage;

public class Verifier extends TomBase {

	// ------------------------------------------------------------
 	//%include { ../adt/TomSignature.tom }
	// ------------------------------------------------------------

	private Factory factory;

	/* Generated by TOM (version 2.1alpha): Do not edit this file *//* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 2.1alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false /*t1 == t2*/ ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_Instr( jtom.verifier.verifier.il.types.Instr t) { return null; }public boolean tom_cmp_fun_sym_Instr(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Instr( jtom.verifier.verifier.il.types.Instr t,  int  n) { return null; }public boolean tom_terms_equal_Instr(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_ILLet( jtom.verifier.verifier.il.types.Instr t) { return  (t!= null) && t.isILLet(); }public  jtom.verifier.verifier.il.types.Instr tom_make_ILLet( jtom.verifier.verifier.il.types.Variable t0,  jtom.verifier.verifier.il.types.Term t1,  jtom.verifier.verifier.il.types.Instr t2) { return  getIlFactory().makeInstr_ILLet(t0, t1, t2); }public  jtom.verifier.verifier.il.types.Variable tom_get_slot_ILLet_var( jtom.verifier.verifier.il.types.Instr t) { return  t.getVar(); }public  jtom.verifier.verifier.il.types.Term tom_get_slot_ILLet_t( jtom.verifier.verifier.il.types.Instr t) { return  t.getT(); }public  jtom.verifier.verifier.il.types.Instr tom_get_slot_ILLet_body( jtom.verifier.verifier.il.types.Instr t) { return  t.getBody(); }public boolean tom_is_fun_sym_ITE( jtom.verifier.verifier.il.types.Instr t) { return  (t!= null) && t.isITE(); }public  jtom.verifier.verifier.il.types.Instr tom_make_ITE( jtom.verifier.verifier.il.types.Expr t0,  jtom.verifier.verifier.il.types.Instr t1,  jtom.verifier.verifier.il.types.Instr t2) { return  getIlFactory().makeInstr_ITE(t0, t1, t2); }public  jtom.verifier.verifier.il.types.Expr tom_get_slot_ITE_e( jtom.verifier.verifier.il.types.Instr t) { return  t.getE(); }public  jtom.verifier.verifier.il.types.Instr tom_get_slot_ITE_ift( jtom.verifier.verifier.il.types.Instr t) { return  t.getIft(); }public  jtom.verifier.verifier.il.types.Instr tom_get_slot_ITE_iff( jtom.verifier.verifier.il.types.Instr t) { return  t.getIff(); }public boolean tom_is_fun_sym_refuse( jtom.verifier.verifier.il.types.Instr t) { return  (t!= null) && t.isRefuse(); }public  jtom.verifier.verifier.il.types.Instr tom_make_refuse() { return  getIlFactory().makeInstr_Refuse(); }public boolean tom_is_fun_sym_accept( jtom.verifier.verifier.il.types.Instr t) { return  (t!= null) && t.isAccept(); }public  jtom.verifier.verifier.il.types.Instr tom_make_accept() { return  getIlFactory().makeInstr_Accept(); }public Object tom_get_fun_sym_Expr( jtom.verifier.verifier.il.types.Expr t) { return null; }public boolean tom_cmp_fun_sym_Expr(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Expr( jtom.verifier.verifier.il.types.Expr t,  int  n) { return null; }public boolean tom_terms_equal_Expr(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_eq( jtom.verifier.verifier.il.types.Expr t) { return  (t!= null) && t.isEq(); }public  jtom.verifier.verifier.il.types.Expr tom_make_eq( jtom.verifier.verifier.il.types.Term t0,  jtom.verifier.verifier.il.types.Term t1) { return  getIlFactory().makeExpr_Eq(t0, t1); }public  jtom.verifier.verifier.il.types.Term tom_get_slot_eq_lt( jtom.verifier.verifier.il.types.Expr t) { return  t.getLt(); }public  jtom.verifier.verifier.il.types.Term tom_get_slot_eq_rt( jtom.verifier.verifier.il.types.Expr t) { return  t.getRt(); }public boolean tom_is_fun_sym_isfsym( jtom.verifier.verifier.il.types.Expr t) { return  (t!= null) && t.isIsfsym(); }public  jtom.verifier.verifier.il.types.Expr tom_make_isfsym( jtom.verifier.verifier.il.types.Term t0,  jtom.verifier.verifier.il.types.Symbol t1) { return  getIlFactory().makeExpr_Isfsym(t0, t1); }public  jtom.verifier.verifier.il.types.Term tom_get_slot_isfsym_t( jtom.verifier.verifier.il.types.Expr t) { return  t.getT(); }public  jtom.verifier.verifier.il.types.Symbol tom_get_slot_isfsym_symbol( jtom.verifier.verifier.il.types.Expr t) { return  t.getSymbol(); }public boolean tom_is_fun_sym_false( jtom.verifier.verifier.il.types.Expr t) { return  (t!= null) && t.isFalse(); }public  jtom.verifier.verifier.il.types.Expr tom_make_false() { return  getIlFactory().makeExpr_False(); }public boolean tom_is_fun_sym_true( jtom.verifier.verifier.il.types.Expr t) { return  (t!= null) && t.isTrue(); }public  jtom.verifier.verifier.il.types.Expr tom_make_true() { return  getIlFactory().makeExpr_True(); }public Object tom_get_fun_sym_Term( jtom.verifier.verifier.il.types.Term t) { return null; }public boolean tom_cmp_fun_sym_Term(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Term( jtom.verifier.verifier.il.types.Term t,  int  n) { return null; }public boolean tom_terms_equal_Term(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_subterm( jtom.verifier.verifier.il.types.Term t) { return  (t!= null) && t.isSubterm(); }public  jtom.verifier.verifier.il.types.Term tom_make_subterm( jtom.verifier.verifier.il.types.Symbol t0,  jtom.verifier.verifier.il.types.Term t1,  int  t2) { return  getIlFactory().makeTerm_Subterm(t0, t1, t2); }public  jtom.verifier.verifier.il.types.Symbol tom_get_slot_subterm_symbol( jtom.verifier.verifier.il.types.Term t) { return  t.getSymbol(); }public  jtom.verifier.verifier.il.types.Term tom_get_slot_subterm_t( jtom.verifier.verifier.il.types.Term t) { return  t.getT(); }public  int  tom_get_slot_subterm_index( jtom.verifier.verifier.il.types.Term t) { return  t.getIndex(); }public boolean tom_is_fun_sym_repr( jtom.verifier.verifier.il.types.Term t) { return  (t!= null) && t.isRepr(); }public  jtom.verifier.verifier.il.types.Term tom_make_repr( String  t0) { return  getIlFactory().makeTerm_Repr(t0); }public  String  tom_get_slot_repr_term( jtom.verifier.verifier.il.types.Term t) { return  t.getTerm(); }public Object tom_get_fun_sym_Variable( jtom.verifier.verifier.il.types.Variable t) { return null; }public boolean tom_cmp_fun_sym_Variable(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Variable( jtom.verifier.verifier.il.types.Variable t,  int  n) { return null; }public boolean tom_terms_equal_Variable(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_var( jtom.verifier.verifier.il.types.Variable t) { return  (t!= null) && t.isVar(); }public  jtom.verifier.verifier.il.types.Variable tom_make_var( String  t0) { return  getIlFactory().makeVariable_Var(t0); }public  String  tom_get_slot_var_name( jtom.verifier.verifier.il.types.Variable t) { return  t.getName(); }public Object tom_get_fun_sym_Symbol( jtom.verifier.verifier.il.types.Symbol t) { return null; }public boolean tom_cmp_fun_sym_Symbol(Object s1, Object s2) { return  false; }public Object tom_get_subterm_Symbol( jtom.verifier.verifier.il.types.Symbol t,  int  n) { return null; }public boolean tom_terms_equal_Symbol(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_fsymbol( jtom.verifier.verifier.il.types.Symbol t) { return  (t!= null) && t.isFsymbol(); }public  jtom.verifier.verifier.il.types.Symbol tom_make_fsymbol( String  t0) { return  getIlFactory().makeSymbol_Fsymbol(t0); }public  String  tom_get_slot_fsymbol_name( jtom.verifier.verifier.il.types.Symbol t) { return  t.getName(); }  


























	protected final Factory getIlFactory() {
		return this.factory;
	}
			

}


