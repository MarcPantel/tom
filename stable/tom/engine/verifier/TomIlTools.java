/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import java.util.*;

import tom.engine.TomBase;
import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.tools.ASTFactory;
import tom.library.sl.*;

import tom.engine.adt.zenon.types.*;

import tom.engine.tools.SymbolTable;
import tom.engine.exception.TomRuntimeException;

public class TomIlTools {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) { return  (t1.equals(t2)) ;}private static boolean tom_is_sort_String(String t) { return  t instanceof String ;}  /* Generated by TOM (version 2.6alpha): Do not edit this file */ private static boolean tom_equal_term_TomType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomType(Object t) { return  t instanceof tom.engine.adt.tomtype.types.TomType ;}private static boolean tom_equal_term_TomSymbol(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomSymbol(Object t) { return  t instanceof tom.engine.adt.tomsignature.types.TomSymbol ;}private static boolean tom_equal_term_Declaration(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Declaration(Object t) { return  t instanceof tom.engine.adt.tomdeclaration.types.Declaration ;}private static boolean tom_equal_term_TomNumberList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNumberList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNumberList ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomNameList(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomNameList ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomName(Object t) { return  t instanceof tom.engine.adt.tomname.types.TomName ;}private static boolean tom_equal_term_Expression(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Expression(Object t) { return  t instanceof tom.engine.adt.tomexpression.types.Expression ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomList(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomList ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_TomTerm(Object t) { return  t instanceof tom.engine.adt.tomterm.types.TomTerm ;}private static boolean tom_equal_term_Option(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Option(Object t) { return  t instanceof tom.engine.adt.tomoption.types.Option ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_OptionList(Object t) { return  t instanceof tom.engine.adt.tomoption.types.OptionList ;}private static boolean tom_equal_term_Constraint(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_Constraint(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.Constraint ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ConstraintList(Object t) { return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList ;}private static boolean tom_equal_term_PairNameDecl(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PairNameDecl(Object t) { return  t instanceof tom.engine.adt.tomslot.types.PairNameDecl ;}private static boolean tom_equal_term_PairNameDeclList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_PairNameDeclList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.PairNameDeclList ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_SlotList(Object t) { return  t instanceof tom.engine.adt.tomslot.types.SlotList ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_EmptyType() { return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make() ; }private static boolean tom_is_fun_sym_Symbol( tom.engine.adt.tomsignature.types.TomSymbol  t) { return  (t instanceof tom.engine.adt.tomsignature.types.tomsymbol.Symbol) ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Symbol_AstName( tom.engine.adt.tomsignature.types.TomSymbol  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Symbol_TypesToType( tom.engine.adt.tomsignature.types.TomSymbol  t) { return  t.getTypesToType() ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slot_Symbol_PairNameDeclList( tom.engine.adt.tomsignature.types.TomSymbol  t) { return  t.getPairNameDeclList() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Symbol_Option( tom.engine.adt.tomsignature.types.TomSymbol  t) { return  t.getOption() ;}private static boolean tom_is_fun_sym_GetSlotDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  (t instanceof tom.engine.adt.tomdeclaration.types.declaration.GetSlotDecl) ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetSlotDecl_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetSlotDecl_SlotName( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetSlotDecl_Variable( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getVariable() ;}private static  tom.engine.adt.tomexpression.types.Expression  tom_get_slot_GetSlotDecl_Expr( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getExpr() ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_GetSlotDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) { return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.Name) ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) { return  t.getString() ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomname.types.TomName  t) { return  (t instanceof tom.engine.adt.tomname.types.tomname.PositionName) ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_PositionName_NumberList( tom.engine.adt.tomname.types.TomName  t) { return  t.getNumberList() ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_TermAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_TermAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_TermAppl_Args( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getArgs() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_TermAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getNameList() ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getSlots() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstName() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) { return  (t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_UnamedVariable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomconstraint.types.ConstraintList  t2) { return  tom.engine.adt.tomterm.types.tomterm.UnamedVariable.make(t0, t1, t2) ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getOption() ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getAstType() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) { return  t.getConstraints() ;}private static boolean tom_is_fun_sym_MatchConstraint( tom.engine.adt.tomconstraint.types.Constraint  t) { return  (t instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_pattern( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getpattern() ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MatchConstraint_subject( tom.engine.adt.tomconstraint.types.Constraint  t) { return  t.getsubject() ;}private static boolean tom_is_fun_sym_PairNameDecl( tom.engine.adt.tomslot.types.PairNameDecl  t) { return  (t instanceof tom.engine.adt.tomslot.types.pairnamedecl.PairNameDecl) ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairNameDecl_SlotName( tom.engine.adt.tomslot.types.PairNameDecl  t) { return  t.getSlotName() ;}private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_get_slot_PairNameDecl_SlotDecl( tom.engine.adt.tomslot.types.PairNameDecl  t) { return  t.getSlotDecl() ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) { return  ((t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getHeadconcTomName() ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.getTailconcTomName() ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) { return  l.isEmptyconcTomName() ;}   private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( l1.getHeadconcTomName() ,l2);     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2));     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if(tom_equal_term_TomNameList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail));     }   }   private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) { return  ((t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption) || (t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption)) ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.getHeadconcOption() ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.getTailconcOption() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) { return  l.isEmptyconcOption() ;}   private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if( l1.isEmptyconcOption() ) {       return l2;     } else if( l2.isEmptyconcOption() ) {       return l1;     } else if(  l1.getTailconcOption() .isEmptyconcOption() ) {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption( l1.getHeadconcOption() ,l2);     } else {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption( l1.getHeadconcOption() ,tom_append_list_concOption( l1.getTailconcOption() ,l2));     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if(tom_equal_term_OptionList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption( begin.getHeadconcOption() ,( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption( begin.getTailconcOption() ,end,tail));     }   }   private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  t) { return  ((t instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (t instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getHeadconcConstraint() ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.getTailconcConstraint() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  l.isEmptyconcConstraint() ;}   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( l1.getHeadconcConstraint() ,l2);     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2));     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if(tom_equal_term_ConstraintList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail));     }   }   private static boolean tom_is_fun_sym_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  t) { return  ((t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl) || (t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl)) ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_empty_list_concPairNameDecl() { return  tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ; }private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_cons_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDecl  e,  tom.engine.adt.tomslot.types.PairNameDeclList  l) { return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make(e,l) ; }private static  tom.engine.adt.tomslot.types.PairNameDecl  tom_get_head_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) { return  l.getHeadconcPairNameDecl() ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_tail_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) { return  l.getTailconcPairNameDecl() ;}private static boolean tom_is_empty_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) { return  l.isEmptyconcPairNameDecl() ;}   private static   tom.engine.adt.tomslot.types.PairNameDeclList  tom_append_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList l1,  tom.engine.adt.tomslot.types.PairNameDeclList  l2) {     if( l1.isEmptyconcPairNameDecl() ) {       return l2;     } else if( l2.isEmptyconcPairNameDecl() ) {       return l1;     } else if(  l1.getTailconcPairNameDecl() .isEmptyconcPairNameDecl() ) {       return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl( l1.getHeadconcPairNameDecl() ,l2);     } else {       return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl( l1.getHeadconcPairNameDecl() ,tom_append_list_concPairNameDecl( l1.getTailconcPairNameDecl() ,l2));     }   }   private static   tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slice_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  begin,  tom.engine.adt.tomslot.types.PairNameDeclList  end, tom.engine.adt.tomslot.types.PairNameDeclList  tail) {     if(tom_equal_term_PairNameDeclList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl( begin.getHeadconcPairNameDecl() ,( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_slice_concPairNameDecl( begin.getTailconcPairNameDecl() ,end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_ZTermList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZTermList(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZTermList ;}private static boolean tom_equal_term_ZType(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZType(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZType ;}private static boolean tom_equal_term_ZTerm(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZTerm(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZTerm ;}private static boolean tom_equal_term_ZAxiom(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZAxiom(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZAxiom ;}private static boolean tom_equal_term_ZSymbol(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZSymbol(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZSymbol ;}private static boolean tom_equal_term_ZExpr(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZExpr(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZExpr ;}private static boolean tom_equal_term_ZAxiomList(Object t1, Object t2) { return  t1.equals(t2) ;}private static boolean tom_is_sort_ZAxiomList(Object t) { return  t instanceof tom.engine.adt.zenon.types.ZAxiomList ;}private static  tom.engine.adt.zenon.types.ZType  tom_make_ztype( String  t0) { return  tom.engine.adt.zenon.types.ztype.ztype.make(t0) ; }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zvar( String  t0) { return  tom.engine.adt.zenon.types.zterm.zvar.make(t0) ; }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zappl( tom.engine.adt.zenon.types.ZSymbol  t0,  tom.engine.adt.zenon.types.ZTermList  t1) { return  tom.engine.adt.zenon.types.zterm.zappl.make(t0, t1) ; }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zsl( tom.engine.adt.zenon.types.ZTerm  t0,  String  t1) { return  tom.engine.adt.zenon.types.zterm.zsl.make(t0, t1) ; }private static  tom.engine.adt.zenon.types.ZAxiom  tom_make_zaxiom( String  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zaxiom.zaxiom.make(t0, t1) ; }private static boolean tom_is_fun_sym_zsymbol( tom.engine.adt.zenon.types.ZSymbol  t) { return  (t instanceof tom.engine.adt.zenon.types.zsymbol.zsymbol) ;}private static  tom.engine.adt.zenon.types.ZSymbol  tom_make_zsymbol( String  t0) { return  tom.engine.adt.zenon.types.zsymbol.zsymbol.make(t0) ; }private static  String  tom_get_slot_zsymbol_Name( tom.engine.adt.zenon.types.ZSymbol  t) { return  t.getName() ;}private static  tom.engine.adt.zenon.types.ZExpr  tom_make_ztrue() { return  tom.engine.adt.zenon.types.zexpr.ztrue.make() ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zfalse() { return  tom.engine.adt.zenon.types.zexpr.zfalse.make() ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZSymbol  t1) { return  tom.engine.adt.zenon.types.zexpr.zisfsym.make(t0, t1) ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zeq( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZTerm  t1) { return  tom.engine.adt.zenon.types.zexpr.zeq.make(t0, t1) ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zforall( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZType  t1,  tom.engine.adt.zenon.types.ZExpr  t2) { return  tom.engine.adt.zenon.types.zexpr.zforall.make(t0, t1, t2) ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zexists( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZType  t1,  tom.engine.adt.zenon.types.ZExpr  t2) { return  tom.engine.adt.zenon.types.zexpr.zexists.make(t0, t1, t2) ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zand( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zand.make(t0, t1) ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zor( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zor.make(t0, t1) ; }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zequiv.make(t0, t1) ; }private static boolean tom_is_fun_sym_concZTerm( tom.engine.adt.zenon.types.ZTermList  t) { return  ((t instanceof tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm) || (t instanceof tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm)) ;}private static  tom.engine.adt.zenon.types.ZTermList  tom_empty_list_concZTerm() { return  tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm.make() ; }private static  tom.engine.adt.zenon.types.ZTermList  tom_cons_list_concZTerm( tom.engine.adt.zenon.types.ZTerm  e,  tom.engine.adt.zenon.types.ZTermList  l) { return  tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm.make(e,l) ; }private static  tom.engine.adt.zenon.types.ZTerm  tom_get_head_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList  l) { return  l.getHeadconcZTerm() ;}private static  tom.engine.adt.zenon.types.ZTermList  tom_get_tail_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList  l) { return  l.getTailconcZTerm() ;}private static boolean tom_is_empty_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList  l) { return  l.isEmptyconcZTerm() ;}   private static   tom.engine.adt.zenon.types.ZTermList  tom_append_list_concZTerm( tom.engine.adt.zenon.types.ZTermList l1,  tom.engine.adt.zenon.types.ZTermList  l2) {     if( l1.isEmptyconcZTerm() ) {       return l2;     } else if( l2.isEmptyconcZTerm() ) {       return l1;     } else if(  l1.getTailconcZTerm() .isEmptyconcZTerm() ) {       return ( tom.engine.adt.zenon.types.ZTermList )tom_cons_list_concZTerm( l1.getHeadconcZTerm() ,l2);     } else {       return ( tom.engine.adt.zenon.types.ZTermList )tom_cons_list_concZTerm( l1.getHeadconcZTerm() ,tom_append_list_concZTerm( l1.getTailconcZTerm() ,l2));     }   }   private static   tom.engine.adt.zenon.types.ZTermList  tom_get_slice_concZTerm( tom.engine.adt.zenon.types.ZTermList  begin,  tom.engine.adt.zenon.types.ZTermList  end, tom.engine.adt.zenon.types.ZTermList  tail) {     if(tom_equal_term_ZTermList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.zenon.types.ZTermList )tom_cons_list_concZTerm( begin.getHeadconcZTerm() ,( tom.engine.adt.zenon.types.ZTermList )tom_get_slice_concZTerm( begin.getTailconcZTerm() ,end,tail));     }   }   private static boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList  t) { return  ((t instanceof tom.engine.adt.zenon.types.zaxiomlist.Conszby) || (t instanceof tom.engine.adt.zenon.types.zaxiomlist.Emptyzby)) ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_empty_list_zby() { return  tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ; }private static  tom.engine.adt.zenon.types.ZAxiomList  tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom  e,  tom.engine.adt.zenon.types.ZAxiomList  l) { return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make(e,l) ; }private static  tom.engine.adt.zenon.types.ZAxiom  tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) { return  l.getHeadzby() ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) { return  l.getTailzby() ;}private static boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) { return  l.isEmptyzby() ;}   private static   tom.engine.adt.zenon.types.ZAxiomList  tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList  l2) {     if( l1.isEmptyzby() ) {       return l2;     } else if( l2.isEmptyzby() ) {       return l1;     } else if(  l1.getTailzby() .isEmptyzby() ) {       return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby( l1.getHeadzby() ,l2);     } else {       return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby( l1.getHeadzby() ,tom_append_list_zby( l1.getTailzby() ,l2));     }   }   private static   tom.engine.adt.zenon.types.ZAxiomList  tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList  begin,  tom.engine.adt.zenon.types.ZAxiomList  end, tom.engine.adt.zenon.types.ZAxiomList  tail) {     if(tom_equal_term_ZAxiomList(begin,end)) {       return tail;     } else {       return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby( begin.getHeadzby() ,( tom.engine.adt.zenon.types.ZAxiomList )tom_get_slice_zby( begin.getTailzby() ,end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) { return t1.equals(t2);}private static boolean tom_is_sort_Strategy(Object t) { return  t instanceof tom.library.sl.Strategy ;}/* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_mu( tom.library.sl.Strategy  var,  tom.library.sl.Strategy  v) { return  new tom.library.sl.Mu(var,v) ; }private static  tom.library.sl.Strategy  tom_make_MuVar( String  name) { return  new tom.library.sl.MuVar(name) ; }private static  tom.library.sl.Strategy  tom_make_Identity() { return  new tom.library.sl.Identity() ; }private static  tom.library.sl.Strategy  tom_make_All( tom.library.sl.Strategy  v) { return  new tom.library.sl.All(v) ; }private static boolean tom_is_fun_sym_Sequence( tom.library.sl.Strategy  t) { return  (t instanceof tom.library.sl.Sequence) ;}private static  tom.library.sl.Strategy  tom_empty_list_Sequence() { return  null ; }private static  tom.library.sl.Strategy  tom_cons_list_Sequence( tom.library.sl.Strategy  head,  tom.library.sl.Strategy  tail) { return  (tail==null)?head:new tom.library.sl.Sequence(head,tail) ; }private static  tom.library.sl.Strategy  tom_get_head_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.FIRST) ;}private static  tom.library.sl.Strategy  tom_get_tail_Sequence_Strategy( tom.library.sl.Strategy  t) { return  (tom.library.sl.Strategy)t.getChildAt(tom.library.sl.Sequence.THEN) ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.sl.Strategy  t) { return  t == null ;}   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy l1,  tom.library.sl.Strategy  l2) {     if(tom_is_empty_Sequence_Strategy(l1)) {       return l2;     } else if(tom_is_empty_Sequence_Strategy(l2)) {       return l1;     } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()))) {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),l2);       } else {         return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_head_Sequence_Strategy(l1):l1),tom_append_list_Sequence(((tom_is_fun_sym_Sequence(l1))?tom_get_tail_Sequence_Strategy(l1):tom_empty_list_Sequence()),l2));       }     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(l1, l2);     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if(tom_equal_term_Strategy(begin,end)) {       return tail;     } else {       return ( tom.library.sl.Strategy )tom_cons_list_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_head_Sequence_Strategy(begin):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((tom_is_fun_sym_Sequence(begin))?tom_get_tail_Sequence_Strategy(begin):tom_empty_list_Sequence()),end,tail));     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_cons_list_Sequence(v,tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("_x")),tom_empty_list_Sequence()))) ; }   /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static boolean tom_equal_term_List(Object l1, Object l2) { return  l1.equals(l2) ;}private static boolean tom_is_sort_List(Object t) { return  t instanceof java.util.List ;} private static boolean tom_is_sort_Collection(Object t) { return 







 t instanceof java.util.Collection ;}

  // ------------------------------------------------------------

  private SymbolTable symbolTable;
  private Verifier verifier;


  public TomIlTools(Verifier verifier) {
    super();
    this.verifier = verifier;
    this.symbolTable = verifier.getSymbolTable();
  }

  private SymbolTable getSymbolTable() {
    return symbolTable;
  }

  /**
   * Methods used to translate a pattern and conditions in zenon signature
   */
  public ZExpr constraintToZExpr(ConstraintList constraintList, Map map) {
    // do everything match the empty pattern ?
    ZExpr result = tom_make_zfalse();
    while(!constraintList.isEmptyconcConstraint()) {
      Constraint h = constraintList.getHeadconcConstraint();
      result = tom_make_zor(result,constraintToZExpr(h,map));
      constraintList = constraintList.getTailconcConstraint();
    }
    return result;
  }

  public void getZTermSubjectListFromConstraint(Constraint constraint, List list, Map map) {
    Set unamedVarSet = new HashSet();
    try{
      ArrayList tmpList = new ArrayList();
      tom_make_TopDown(tom_make_CollectSubjects(tmpList)).visitLight(constraint);
      for(Object o:tmpList){
        list.add(tomTermToZTerm((TomTerm)o,map,unamedVarSet));
      }
    }catch(VisitFailure e){
      throw new TomRuntimeException("VisiFailure in TomIlTools.getZTermSubjectListFromConstraint: " + e.getMessage());
    }
  }
  
  private static class CollectSubjects extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.List  list; public CollectSubjects( java.util.List  list) { super(tom_make_Identity());this.list=list;}public  java.util.List  getlist() { return list;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch272NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch272NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch272NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch272NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch272NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch272NameNumberfreshSubject_1);if ( true ) {


        list.add(tomMatch272NameNumber_freshVar_1);
      }}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_CollectSubjects( java.util.List  t0) { return new CollectSubjects(t0); }



  public ZExpr constraintToZExpr(Constraint constraint, Map map) {
    Set unamedVariableSet = new HashSet();
    ArrayList subjectList = new ArrayList();
    ArrayList patternList = new ArrayList();
    try{
      tom_make_TopDown(tom_make_CollectSubjectsAndPatterns(subjectList,patternList)).visitLight(constraint);
    }catch(VisitFailure e){
      throw new TomRuntimeException("VisiFailure in TomIlTools.constraintToZExpr: " + e.getMessage());
    }
    ZExpr result = constraintToZExpr(ASTFactory.makeList(subjectList),ASTFactory.makeList(patternList),map,unamedVariableSet);
    // insert existential quantifiers for the unamed variables
    Iterator it = unamedVariableSet.iterator();
    while (it.hasNext()) {
      ZTerm var = (ZTerm) it.next();
      result = tom_make_zexists(var,tom_make_ztype("T"),result);
    }
    return result;

  }
  
  private static class CollectSubjectsAndPatterns extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.List  subjectlist; private  java.util.List  patternList; public CollectSubjectsAndPatterns( java.util.List  subjectlist,  java.util.List  patternList) { super(tom_make_Identity());this.subjectlist=subjectlist;this.patternList=patternList;}public  java.util.List  getsubjectlist() { return subjectlist;}public  java.util.List  getpatternList() { return patternList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_Constraint(tom__arg)) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch273NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if (tom_is_fun_sym_MatchConstraint(tomMatch273NameNumberfreshSubject_1)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch273NameNumber_freshVar_0=tom_get_slot_MatchConstraint_pattern(tomMatch273NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch273NameNumber_freshVar_1=tom_get_slot_MatchConstraint_subject(tomMatch273NameNumberfreshSubject_1);if ( true ) {


        subjectlist.add(tomMatch273NameNumber_freshVar_1);
        patternList.add(tomMatch273NameNumber_freshVar_0);
      }}}}}}return super.visit_Constraint(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_CollectSubjectsAndPatterns( java.util.List  t0,  java.util.List  t1) { return new CollectSubjectsAndPatterns(t0,t1); }



  public ZExpr constraintToZExpr(TomList subjectList, TomList tomList, Map map, Set unamedVariableSet) {
    /* for each TomTerm: builds a zeq : pattern = subject */
    ZExpr res = tom_make_ztrue();
    while(!tomList.isEmptyconcTomTerm()) {
      TomTerm h = tomList.getHeadconcTomTerm();
      TomTerm subject = subjectList.getHeadconcTomTerm();
      tomList = tomList.getTailconcTomTerm();
      subjectList = subjectList.getTailconcTomTerm();
      res = tom_make_zand(res,tom_make_zeq(tomTermToZTerm(h,map,unamedVariableSet),tomTermToZTerm(subject,map,unamedVariableSet)))
;
    }
    return res;
  }

  public ZTerm tomTermToZTerm(TomTerm tomTerm, Map map, Set unamedVariableSet) {
    if (tom_is_sort_TomTerm(tomTerm)) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch274NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tomTerm);if (tom_is_fun_sym_TermAppl(tomMatch274NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch274NameNumber_freshVar_0=tom_get_slot_TermAppl_NameList(tomMatch274NameNumberfreshSubject_1);{  tom.engine.adt.tomterm.types.TomList  tomMatch274NameNumber_freshVar_1=tom_get_slot_TermAppl_Args(tomMatch274NameNumberfreshSubject_1);if (tom_is_fun_sym_concTomName(tomMatch274NameNumber_freshVar_0)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch274NameNumber_freshVar_2=tomMatch274NameNumber_freshVar_0;if (!(tom_is_empty_concTomName_TomNameList(tomMatch274NameNumber_freshVar_2))) {if (tom_is_fun_sym_Name(tom_get_head_concTomName_TomNameList(tomMatch274NameNumber_freshVar_2))) {{  String  tomMatch274NameNumber_freshVar_5=tom_get_slot_Name_String(tom_get_head_concTomName_TomNameList(tomMatch274NameNumber_freshVar_2));{  tom.engine.adt.tomname.types.TomNameList  tomMatch274NameNumber_freshVar_3=tom_get_tail_concTomName_TomNameList(tomMatch274NameNumber_freshVar_2);{  tom.engine.adt.tomterm.types.TomList  tom_childrens=tomMatch274NameNumber_freshVar_1;if ( true ) {

        // builds children list
        ZTermList zchild = tom_empty_list_concZTerm();
        TomTerm hd = null;
        while (!tom_childrens.isEmptyconcTomTerm()) {
          hd = tom_childrens.getHeadconcTomTerm();
          tom_childrens= tom_childrens.getTailconcTomTerm();
          zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm(hd,map,unamedVariableSet),tom_empty_list_concZTerm()));
        }
        // issue a warning here: this case is probably impossible
        return tom_make_zappl(tom_make_zsymbol(tomMatch274NameNumber_freshVar_5),zchild);
      }}}}}}}}}}}if (tom_is_fun_sym_RecordAppl(tomMatch274NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch274NameNumber_freshVar_6=tom_get_slot_RecordAppl_NameList(tomMatch274NameNumberfreshSubject_1);{  tom.engine.adt.tomslot.types.SlotList  tomMatch274NameNumber_freshVar_7=tom_get_slot_RecordAppl_Slots(tomMatch274NameNumberfreshSubject_1);if (tom_is_fun_sym_concTomName(tomMatch274NameNumber_freshVar_6)) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch274NameNumber_freshVar_8=tomMatch274NameNumber_freshVar_6;if (!(tom_is_empty_concTomName_TomNameList(tomMatch274NameNumber_freshVar_8))) {if (tom_is_fun_sym_Name(tom_get_head_concTomName_TomNameList(tomMatch274NameNumber_freshVar_8))) {{  String  tomMatch274NameNumber_freshVar_11=tom_get_slot_Name_String(tom_get_head_concTomName_TomNameList(tomMatch274NameNumber_freshVar_8));{  String  tom_name=tomMatch274NameNumber_freshVar_11;{  tom.engine.adt.tomname.types.TomNameList  tomMatch274NameNumber_freshVar_9=tom_get_tail_concTomName_TomNameList(tomMatch274NameNumber_freshVar_8);{  tom.engine.adt.tomslot.types.SlotList  tom_childrens=tomMatch274NameNumber_freshVar_7;if ( true ) {

        // builds a map: slotName / TomTerm
        Map definedSlotMap = new HashMap();
        Slot hd = null;
        while (!tom_childrens.isEmptyconcSlot()) {
          hd = tom_childrens.getHeadconcSlot();
          tom_childrens= tom_childrens.getTailconcSlot();
          definedSlotMap.put(hd.getSlotName(),hd.getAppl());
        }
        // builds children list
        ZTermList zchild = tom_empty_list_concZTerm();
        // take care to add unamedVariables for wildcards
        TomSymbol symbol = TomBase.getSymbolFromName(tom_name,getSymbolTable());
        // process all slots from symbol
        if (tom_is_sort_TomSymbol(symbol)) {{  tom.engine.adt.tomsignature.types.TomSymbol  tomMatch275NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol);if (tom_is_fun_sym_Symbol(tomMatch275NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch275NameNumber_freshVar_0=tom_get_slot_Symbol_PairNameDeclList(tomMatch275NameNumberfreshSubject_1);{  tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tomMatch275NameNumber_freshVar_0;if ( true ) {

            // process all slots. If the slot is in childrens, use it
            while(!tom_slots.isEmptyconcPairNameDecl()) {
              Declaration decl= tom_slots.getHeadconcPairNameDecl().getSlotDecl();
              tom_slots= tom_slots.getTailconcPairNameDecl();
              if (tom_is_sort_Declaration(decl)) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch276NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);if (tom_is_fun_sym_GetSlotDecl(tomMatch276NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch276NameNumber_freshVar_0=tom_get_slot_GetSlotDecl_SlotName(tomMatch276NameNumberfreshSubject_1);{  tom.engine.adt.tomname.types.TomName  tom_slotName=tomMatch276NameNumber_freshVar_0;if ( true ) {

                  if (definedSlotMap.containsKey(tom_slotName)) {
                    zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm((TomTerm)definedSlotMap.get(tom_slotName),map,unamedVariableSet),tom_empty_list_concZTerm()));
                  }
                  else {
                    // fake an UnamedVariable
                    zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm(tom_make_UnamedVariable(tom_empty_list_concOption(),tom_make_EmptyType(),tom_empty_list_concConstraint()),map,unamedVariableSet),tom_empty_list_concZTerm()))

;
                  }
                }}}}}}

            }
          }}}}}}

        return tom_make_zappl(tom_make_zsymbol(tom_name),zchild);
      }}}}}}}}}}}}if (tom_is_fun_sym_Variable(tomMatch274NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch274NameNumber_freshVar_12=tom_get_slot_Variable_AstName(tomMatch274NameNumberfreshSubject_1);if (tom_is_fun_sym_Name(tomMatch274NameNumber_freshVar_12)) {{  String  tomMatch274NameNumber_freshVar_13=tom_get_slot_Name_String(tomMatch274NameNumber_freshVar_12);{  String  tom_name=tomMatch274NameNumber_freshVar_13;if ( true ) {

        if (map.containsKey(tom_name)) {
          return (ZTerm) map.get(tom_name);
        } else {
          System.out.println("tomTermToZTerm 1 Not in map: " + tom_name+ " map: " + map);
          return tom_make_zvar(tom_name);
        }
      }}}}}}if (tom_is_fun_sym_Variable(tomMatch274NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch274NameNumber_freshVar_14=tom_get_slot_Variable_AstName(tomMatch274NameNumberfreshSubject_1);if (tom_is_fun_sym_PositionName(tomMatch274NameNumber_freshVar_14)) {{  tom.engine.adt.tomname.types.TomNumberList  tomMatch274NameNumber_freshVar_15=tom_get_slot_PositionName_NumberList(tomMatch274NameNumber_freshVar_14);if ( true ) {

        String name = TomBase.tomNumberListToString(tomMatch274NameNumber_freshVar_15);
        if (map.containsKey(name)) {
          return (ZTerm) map.get(name);
        } else {
          System.out.println("tomTermToZTerm 2 Not in map: " + name + " map: " + map);
          return tom_make_zvar(name);
        }
      }}}}}if (tom_is_fun_sym_UnamedVariable(tomMatch274NameNumberfreshSubject_1)) {if ( true ) {

        // for unamed variables in a pattern, we generate an existential
        // quantifier for a dummy name
        ZTerm unamedVariable = tom_make_zvar(replaceNumbersByString("unamedVariable"+unamedVariableSet.size()));
        unamedVariableSet.add(unamedVariable);
        return unamedVariable;
      }}}}

    throw new TomRuntimeException("tomTermToZTerm Strange pattern: " + tomTerm);
  }

  private static class collect_symbols extends  tom.engine.adt.zenon.ZenonBasicStrategy  {private  java.util.Collection  store; public collect_symbols( java.util.Collection  store) { super(tom_make_Identity());this.store=store;}public  java.util.Collection  getstore() { return store;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.zenon.types.ZSymbol  visit_ZSymbol( tom.engine.adt.zenon.types.ZSymbol  tom__arg) throws tom.library.sl.VisitFailure {if (tom_is_sort_ZSymbol(tom__arg)) {{  tom.engine.adt.zenon.types.ZSymbol  tomMatch277NameNumberfreshSubject_1=(( tom.engine.adt.zenon.types.ZSymbol )tom__arg);if (tom_is_fun_sym_zsymbol(tomMatch277NameNumberfreshSubject_1)) {{  String  tomMatch277NameNumber_freshVar_0=tom_get_slot_zsymbol_Name(tomMatch277NameNumberfreshSubject_1);if ( true ) {


        store.add(tomMatch277NameNumber_freshVar_0);
      }}}}}return super.visit_ZSymbol(tom__arg); }}private static  tom.library.sl.Strategy  tom_make_collect_symbols( java.util.Collection  t0) { return new collect_symbols(t0); }



  public Collection collectSymbols(ZExpr subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collect_symbols(result)).visitLight(subject);
    } catch (tom.library.sl.VisitFailure e) {
      throw new TomRuntimeException("Strategy collect_symbols failed");
    }
    return result;
  }
  public Collection collectSymbolsFromZSpec(ZSpec subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collect_symbols(result)).visitLight(subject);
    } catch (tom.library.sl.VisitFailure e) {
      throw new TomRuntimeException("Strategy collect_symbols failed");
    }
    return result;
  }

  public ZAxiomList symbolsDefinition(Collection symbolnames) {
    ZAxiomList res = tom_empty_list_zby();
    Iterator it = symbolnames.iterator();
    while (it.hasNext()) {
      String name = (String) it.next();
      TomSymbol symbol = TomBase.getSymbolFromName(name,getSymbolTable());
      ZTermList list = tom_empty_list_concZTerm();
      ZTerm abstractVariable = tom_make_zvar("t");
      //ZExpr exists = null;
      if (tom_is_sort_TomSymbol(symbol)) {{  tom.engine.adt.tomsignature.types.TomSymbol  tomMatch278NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol);if (tom_is_fun_sym_Symbol(tomMatch278NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch278NameNumber_freshVar_0=tom_get_slot_Symbol_PairNameDeclList(tomMatch278NameNumberfreshSubject_1);{  tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tomMatch278NameNumber_freshVar_0;if ( true ) {

          // process all slots
          while(!tom_slots.isEmptyconcPairNameDecl()) {
            Declaration hd= tom_slots.getHeadconcPairNameDecl().getSlotDecl();
            tom_slots= tom_slots.getTailconcPairNameDecl();
            if (tom_is_sort_Declaration(hd)) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch279NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )hd);if (tom_is_fun_sym_GetSlotDecl(tomMatch279NameNumberfreshSubject_1)) {{  tom.engine.adt.tomname.types.TomName  tomMatch279NameNumber_freshVar_0=tom_get_slot_GetSlotDecl_SlotName(tomMatch279NameNumberfreshSubject_1);if (tom_is_fun_sym_Name(tomMatch279NameNumber_freshVar_0)) {{  String  tomMatch279NameNumber_freshVar_1=tom_get_slot_Name_String(tomMatch279NameNumber_freshVar_0);if ( true ) {

                list = tom_append_list_concZTerm(list,tom_cons_list_concZTerm(tom_make_zsl(abstractVariable,tomMatch279NameNumber_freshVar_1),tom_empty_list_concZTerm()));
              }}}}}}}

          }
        }}}}}}


      ZExpr axiom = tom_make_zforall(abstractVariable,tom_make_ztype("T"),tom_make_zequiv(tom_make_zisfsym(abstractVariable,tom_make_zsymbol(name)),tom_make_zeq(abstractVariable,tom_make_zappl(tom_make_zsymbol(name),list))))


;
      res=tom_append_list_zby(res,tom_cons_list_zby(tom_make_zaxiom("symb_"+replaceNumbersByString(name),axiom),tom_empty_list_zby()));
    }
    return res;
  }

  public ZAxiomList subtermsDefinition(Collection symbolnames) {
    ZAxiomList res = tom_empty_list_zby();
    Iterator it = symbolnames.iterator();
    while (it.hasNext()) {
      String name = (String) it.next();
      TomSymbol symbol = TomBase.getSymbolFromName(name,getSymbolTable());
      ZTermList list = tom_empty_list_concZTerm();
      if (tom_is_sort_TomSymbol(symbol)) {{  tom.engine.adt.tomsignature.types.TomSymbol  tomMatch280NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol);if (tom_is_fun_sym_Symbol(tomMatch280NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch280NameNumber_freshVar_0=tom_get_slot_Symbol_PairNameDeclList(tomMatch280NameNumberfreshSubject_1);{  tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tomMatch280NameNumber_freshVar_0;if ( true ) {

          // process all slots
          int slotnumber =tom_slots.length();
          for (int i = 0; i < slotnumber;i++) {
            list = tom_append_list_concZTerm(list,tom_cons_list_concZTerm(tom_make_zvar("x"+i),tom_empty_list_concZTerm()));
          }
          if (tom_is_sort_PairNameDeclList(tom_slots)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch281NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_slots);if (tom_is_fun_sym_concPairNameDecl(tomMatch281NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch281NameNumber_freshVar_0=tomMatch281NameNumberfreshSubject_1;{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch281NameNumber_begin_2=tomMatch281NameNumber_freshVar_0;{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch281NameNumber_end_3=tomMatch281NameNumber_freshVar_0;do {{{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch281NameNumber_freshVar_1=tomMatch281NameNumber_end_3;if (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tomMatch281NameNumber_freshVar_1))) {if (tom_is_fun_sym_PairNameDecl(tom_get_head_concPairNameDecl_PairNameDeclList(tomMatch281NameNumber_freshVar_1))) {{  tom.engine.adt.tomname.types.TomName  tomMatch281NameNumber_freshVar_7=tom_get_slot_PairNameDecl_SlotName(tom_get_head_concPairNameDecl_PairNameDeclList(tomMatch281NameNumber_freshVar_1));if (tom_is_fun_sym_Name(tomMatch281NameNumber_freshVar_7)) {{  String  tomMatch281NameNumber_freshVar_8=tom_get_slot_Name_String(tomMatch281NameNumber_freshVar_7);{  String  tom_slname=tomMatch281NameNumber_freshVar_8;{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch281NameNumber_freshVar_4=tom_get_tail_concPairNameDecl_PairNameDeclList(tomMatch281NameNumber_freshVar_1);if ( true ) {

              int index = tom_get_slice_concPairNameDecl(tomMatch281NameNumber_begin_2,tomMatch281NameNumber_end_3,tom_empty_list_concPairNameDecl()).length();
              ZExpr axiom = tom_make_zeq(tom_make_zvar("x"+index),tom_make_zsl(tom_make_zappl(tom_make_zsymbol(name),list),tom_slname))
;
              for (int j = 0; j < slotnumber;j++) {
                axiom = tom_make_zforall(tom_make_zvar("x"+j),tom_make_ztype("T"),axiom);
              }
              res=tom_append_list_zby(res,tom_cons_list_zby(tom_make_zaxiom("st_"+tom_slname+"_"+replaceNumbersByString(name),axiom),tom_empty_list_zby()));
            }}}}}}}}}if (tom_is_empty_concPairNameDecl_PairNameDeclList(tomMatch281NameNumber_end_3)) {tomMatch281NameNumber_end_3=tomMatch281NameNumber_begin_2;} else {tomMatch281NameNumber_end_3=tom_get_tail_concPairNameDecl_PairNameDeclList(tomMatch281NameNumber_end_3);}}} while(!(tom_equal_term_PairNameDeclList(tomMatch281NameNumber_end_3, tomMatch281NameNumber_begin_2)));}}}}}}

        }}}}}}

    }
    return res;
  }

  public List subtermList(String symbolName) {
    List nameList = new LinkedList();

    TomSymbol symbol = TomBase.getSymbolFromName(symbolName,getSymbolTable());

    if (tom_is_sort_TomSymbol(symbol)) {{  tom.engine.adt.tomsignature.types.TomSymbol  tomMatch282NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol);if (tom_is_fun_sym_Symbol(tomMatch282NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch282NameNumber_freshVar_0=tom_get_slot_Symbol_PairNameDeclList(tomMatch282NameNumberfreshSubject_1);{  tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tomMatch282NameNumber_freshVar_0;if ( true ) {if (tom_is_sort_PairNameDeclList(tom_slots)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch283NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_slots);if (tom_is_fun_sym_concPairNameDecl(tomMatch283NameNumberfreshSubject_1)) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch283NameNumber_freshVar_0=tomMatch283NameNumberfreshSubject_1;{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch283NameNumber_begin_2=tomMatch283NameNumber_freshVar_0;{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch283NameNumber_end_3=tomMatch283NameNumber_freshVar_0;do {{{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch283NameNumber_freshVar_1=tomMatch283NameNumber_end_3;if (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tomMatch283NameNumber_freshVar_1))) {if (tom_is_fun_sym_PairNameDecl(tom_get_head_concPairNameDecl_PairNameDeclList(tomMatch283NameNumber_freshVar_1))) {{  tom.engine.adt.tomname.types.TomName  tomMatch283NameNumber_freshVar_6=tom_get_slot_PairNameDecl_SlotName(tom_get_head_concPairNameDecl_PairNameDeclList(tomMatch283NameNumber_freshVar_1));if (tom_is_fun_sym_Name(tomMatch283NameNumber_freshVar_6)) {{  String  tomMatch283NameNumber_freshVar_7=tom_get_slot_Name_String(tomMatch283NameNumber_freshVar_6);{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch283NameNumber_freshVar_4=tom_get_tail_concPairNameDecl_PairNameDeclList(tomMatch283NameNumber_freshVar_1);if ( true ) {



            nameList.add(tomMatch283NameNumber_freshVar_7);
          }}}}}}}}if (tom_is_empty_concPairNameDecl_PairNameDeclList(tomMatch283NameNumber_end_3)) {tomMatch283NameNumber_end_3=tomMatch283NameNumber_begin_2;} else {tomMatch283NameNumber_end_3=tom_get_tail_concPairNameDecl_PairNameDeclList(tomMatch283NameNumber_end_3);}}} while(!(tom_equal_term_PairNameDeclList(tomMatch283NameNumber_end_3, tomMatch283NameNumber_begin_2)));}}}}}}

      }}}}}}

    return nameList;
  }

  public String replaceNumbersByString(String input) {
    String output = input;
    output = output.replaceAll("0","zero");
    output = output.replaceAll("1","one");
    output = output.replaceAll("2","two");
    output = output.replaceAll("3","three");
    output = output.replaceAll("4","four");
    output = output.replaceAll("5","five");
    output = output.replaceAll("6","six");
    output = output.replaceAll("7","seven");
    output = output.replaceAll("8","eight");
    output = output.replaceAll("9","nine");
    output = output.replaceAll("\\\"","_sd_");
    output = output.replaceAll("True","z_true");
    output = output.replaceAll("False","z_false");
    return output;
  }

}
