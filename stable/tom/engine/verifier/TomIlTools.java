/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import java.util.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.zenon.*;
import tom.engine.adt.zenon.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.tools.SymbolTable;
import tom.engine.exception.TomRuntimeException;

public class TomIlTools extends TomBase {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Symbol( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  (t!= null) && t.isSymbol() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Symbol_astName( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Symbol_typesToType( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getTypesToType() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_slot_Symbol_pairNameDeclList( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getPairNameDeclList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Symbol_option( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isPositionName() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_slot_PositionName_numberList( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getNumberList() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList t) {  return (t!= null) && t.isSortPairNameDeclList() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_empty_list_concPairNameDecl() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(); }private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_cons_list_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDecl e,  tom.engine.adt.tomsignature.types.PairNameDeclList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(e,l); }private static  tom.engine.adt.tomsignature.types.PairNameDecl tom_get_head_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_tail_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.getTail() ;}private static boolean tom_is_empty_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_append_list_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList l1,  tom.engine.adt.tomsignature.types.PairNameDeclList l2) {    if(tom_is_empty_concPairNameDecl_PairNameDeclList(l1)) {     return l2;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(l2)) {     return l1;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(l1))) {     return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(l1),tom_append_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_slice_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList begin,  tom.engine.adt.tomsignature.types.PairNameDeclList end) {    if(tom_terms_equal_PairNameDeclList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_empty_list_concPairNameDecl();    } else {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(begin),( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_slice_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(begin),end));    }   }  private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PairNameDecl( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  (t!= null) && t.isPairNameDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_PairNameDecl_slotName( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_PairNameDecl_slotDecl( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  t.getSlotDecl() ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_empty_list_concConstraint() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(); }private static  tom.engine.adt.tomsignature.types.ConstraintList tom_cons_list_concConstraint( tom.engine.adt.tomsignature.types.Constraint e,  tom.engine.adt.tomsignature.types.ConstraintList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(e,l); }private static  tom.engine.adt.tomsignature.types.Constraint tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getTail() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_append_list_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList l1,  tom.engine.adt.tomsignature.types.ConstraintList l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slice_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList begin,  tom.engine.adt.tomsignature.types.ConstraintList end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_slice_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_empty_list_concOption() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(); }private static  tom.engine.adt.tomsignature.types.OptionList tom_cons_list_concOption( tom.engine.adt.tomsignature.types.Option e,  tom.engine.adt.tomsignature.types.OptionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l); }private static  tom.engine.adt.tomsignature.types.Option tom_get_head_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_tail_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_append_list_concOption( tom.engine.adt.tomsignature.types.OptionList l1,  tom.engine.adt.tomsignature.types.OptionList l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slice_concOption( tom.engine.adt.tomsignature.types.OptionList begin,  tom.engine.adt.tomsignature.types.OptionList end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomsignature.types.OptionList)tom_get_slice_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_EmptyType() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_EmptyType(); }private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomsignature.types.Pattern t) {  return  (t!= null) && t.isPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_subjectList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_tomList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_guards( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getGuards() ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TLVar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTLVar() ;}private static  String  tom_get_slot_TLVar_strName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getStrName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TLVar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_make_UnamedVariable( tom.engine.adt.tomsignature.types.OptionList t0,  tom.engine.adt.tomsignature.types.TomType t1,  tom.engine.adt.tomsignature.types.ConstraintList t2) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_UnamedVariable(t0, t1, t2); }private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTermAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_TermAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_TermAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_TermAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_TermAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_GetSlotDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetSlotDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_slotName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSlotDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetSlotDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetSlotDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_ZSpec(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_ZAxiomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList t) {  return (t!= null) && t.isSortZAxiomList() ;}private static  tom.engine.adt.zenon.types.ZAxiomList tom_empty_list_zby() { return tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZAxiomList(); }private static  tom.engine.adt.zenon.types.ZAxiomList tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom e,  tom.engine.adt.zenon.types.ZAxiomList l) { return tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZAxiomList(e,l); }private static  tom.engine.adt.zenon.types.ZAxiom tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) {  return l.getHead() ;}private static  tom.engine.adt.zenon.types.ZAxiomList tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) {  return l.getTail() ;}private static boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.zenon.types.ZAxiomList tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList l1,  tom.engine.adt.zenon.types.ZAxiomList l2) {    if(tom_is_empty_zby_ZAxiomList(l1)) {     return l2;    } else if(tom_is_empty_zby_ZAxiomList(l2)) {     return l1;    } else if(tom_is_empty_zby_ZAxiomList(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1))) {     return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(l1),tom_append_list_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(l1),l2));    }   }  private static  tom.engine.adt.zenon.types.ZAxiomList tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList begin,  tom.engine.adt.zenon.types.ZAxiomList end) {    if(tom_terms_equal_ZAxiomList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_empty_list_zby();    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList)tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom)tom_get_head_zby_ZAxiomList(begin),( tom.engine.adt.zenon.types.ZAxiomList)tom_get_slice_zby(( tom.engine.adt.zenon.types.ZAxiomList)tom_get_tail_zby_ZAxiomList(begin),end));    }   }  private static boolean tom_terms_equal_ZAxiom(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZAxiom tom_make_zaxiom( String  t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZAxiom_Zaxiom(t0, t1); }private static boolean tom_terms_equal_ZExpr(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZExpr tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zequiv(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zor( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zor(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zand( tom.engine.adt.zenon.types.ZExpr t0,  tom.engine.adt.zenon.types.ZExpr t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zand(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zexists( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZType t1,  tom.engine.adt.zenon.types.ZExpr t2) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zexists(t0, t1, t2); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zforall( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZType t1,  tom.engine.adt.zenon.types.ZExpr t2) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zforall(t0, t1, t2); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zeq( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZTerm t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zeq(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm t0,  tom.engine.adt.zenon.types.ZSymbol t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zisfsym(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_zfalse() { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Zfalse(); }private static  tom.engine.adt.zenon.types.ZExpr tom_make_ztrue() { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZExpr_Ztrue(); }private static boolean tom_terms_equal_ZType(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZType tom_make_ztype( String  t0) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZType_Ztype(t0); }private static boolean tom_terms_equal_ZTermList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concZTerm( tom.engine.adt.zenon.types.ZTermList t) {  return (t!= null) && t.isSortZTermList() ;}private static  tom.engine.adt.zenon.types.ZTermList tom_empty_list_concZTerm() { return tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTermList(); }private static  tom.engine.adt.zenon.types.ZTermList tom_cons_list_concZTerm( tom.engine.adt.zenon.types.ZTerm e,  tom.engine.adt.zenon.types.ZTermList l) { return tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTermList(e,l); }private static  tom.engine.adt.zenon.types.ZTerm tom_get_head_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) {  return l.getHead() ;}private static  tom.engine.adt.zenon.types.ZTermList tom_get_tail_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) {  return l.getTail() ;}private static boolean tom_is_empty_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList l) {  return l.isEmpty() ;}private static  tom.engine.adt.zenon.types.ZTermList tom_append_list_concZTerm( tom.engine.adt.zenon.types.ZTermList l1,  tom.engine.adt.zenon.types.ZTermList l2) {    if(tom_is_empty_concZTerm_ZTermList(l1)) {     return l2;    } else if(tom_is_empty_concZTerm_ZTermList(l2)) {     return l1;    } else if(tom_is_empty_concZTerm_ZTermList(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(l1))) {     return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(l1),tom_append_list_concZTerm(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(l1),l2));    }   }  private static  tom.engine.adt.zenon.types.ZTermList tom_get_slice_concZTerm( tom.engine.adt.zenon.types.ZTermList begin,  tom.engine.adt.zenon.types.ZTermList end) {    if(tom_terms_equal_ZTermList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZTermList)tom_empty_list_concZTerm();    } else {      return ( tom.engine.adt.zenon.types.ZTermList)tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm)tom_get_head_concZTerm_ZTermList(begin),( tom.engine.adt.zenon.types.ZTermList)tom_get_slice_concZTerm(( tom.engine.adt.zenon.types.ZTermList)tom_get_tail_concZTerm_ZTermList(begin),end));    }   }  private static boolean tom_terms_equal_ZTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.zenon.types.ZTerm tom_make_zsl( tom.engine.adt.zenon.types.ZTerm t0,  String  t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTerm_Zsl(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm tom_make_zappl( tom.engine.adt.zenon.types.ZSymbol t0,  tom.engine.adt.zenon.types.ZTermList t1) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTerm_Zappl(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm tom_make_zvar( String  t0) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZTerm_Zvar(t0); }private static boolean tom_terms_equal_ZSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_zsymbol( tom.engine.adt.zenon.types.ZSymbol t) {  return  (t!= null) && t.isZsymbol() ;}private static  tom.engine.adt.zenon.types.ZSymbol tom_make_zsymbol( String  t0) { return  tom.engine.adt.zenon.ZenonFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeZSymbol_Zsymbol(t0); }private static  String  tom_get_slot_zsymbol_name( tom.engine.adt.zenon.types.ZSymbol t) {  return  t.getName() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_TopDown( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_mu(tom_make_MuVar("x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("x")))) ; }  /*  * strategies with Id considered as failure  */       





  // ------------------------------------------------------------

  private SymbolTable symbolTable;
  private Verifier verifier;


  public TomIlTools(Verifier verifier) {
    super();
    this.verifier = verifier;
    this.symbolTable = verifier.getSymbolTable();
  }

  private SymbolTable getSymbolTable() {
    return symbolTable;
  }

  /**
   * Methods used to translate a pattern and conditions in zenon signature
   */
  public ZExpr patternToZExpr(PatternList patternList, Map map) {
    // do everything match the empty pattern ?
    ZExpr result = tom_make_zfalse();
    while(!patternList.isEmpty()) {
      Pattern h = patternList.getHead();
      result = tom_make_zor(result,patternToZExpr(h,map));
      patternList = patternList.getTail();
    }
    return result;
  }

  public void getZTermSubjectListFromPattern(Pattern pattern, List list, Map map) {
    Set unamedVarSet = new HashSet();
     if(pattern instanceof  tom.engine.adt.tomsignature.types.Pattern) { { tom.engine.adt.tomsignature.types.Pattern tom_match1_1=(( tom.engine.adt.tomsignature.types.Pattern)pattern); if (tom_is_fun_sym_Pattern(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match1_1_subjectList=tom_get_slot_Pattern_subjectList(tom_match1_1); { tom.engine.adt.tomsignature.types.TomList tom_subjectList=tom_match1_1_subjectList; if ( true ) {

        TomList sl = tom_subjectList;
          while(!sl.isEmpty()) {
            TomTerm head = sl.getHead();
            sl = sl.getTail();
            list.add(tomTermToZTerm(head,map,unamedVarSet));
          }
       } } } } } }

  }

  public ZExpr patternToZExpr(Pattern pattern, Map map) {
    Set unamedVariableSet = new HashSet();
     if(pattern instanceof  tom.engine.adt.tomsignature.types.Pattern) { { tom.engine.adt.tomsignature.types.Pattern tom_match2_1=(( tom.engine.adt.tomsignature.types.Pattern)pattern); if (tom_is_fun_sym_Pattern(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match2_1_subjectList=tom_get_slot_Pattern_subjectList(tom_match2_1); { tom.engine.adt.tomsignature.types.TomList tom_match2_1_tomList=tom_get_slot_Pattern_tomList(tom_match2_1); { tom.engine.adt.tomsignature.types.TomList tom_subjectList=tom_match2_1_subjectList; { tom.engine.adt.tomsignature.types.TomList tom_tomList=tom_match2_1_tomList; if ( true ) {

          ZExpr result = patternToZExpr(tom_subjectList,tom_tomList,map,unamedVariableSet);
          // insert existential quantifiers for the unamed variables
          Iterator it = unamedVariableSet.iterator();
          while (it.hasNext()) {
            ZTerm var = (ZTerm) it.next();
            result = tom_make_zexists(var,tom_make_ztype("T"),result);
          }
          return result;
       } } } } } } } }

    throw new TomRuntimeException("patternToZExpr : strange pattern " + pattern);
  }

  public ZExpr patternToZExpr(TomList subjectList, TomList tomList, Map map, Set unamedVariableSet) {
    /* for each TomTerm: builds a zeq : pattern = subject */
    ZExpr res = tom_make_ztrue();
    while(!tomList.isEmpty()) {
      TomTerm h = tomList.getHead();
      TomTerm subject = subjectList.getHead();
      tomList = tomList.getTail();
      subjectList = subjectList.getTail();
      res = tom_make_zand(res,tom_make_zeq(tomTermToZTerm(h,map,unamedVariableSet),tomTermToZTerm(subject,map,unamedVariableSet)))
;
    }
    return res;
  }

  public ZTerm tomTermToZTerm(TomTerm tomTerm, Map map, Set unamedVariableSet) {
     if(tomTerm instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1=(( tom.engine.adt.tomsignature.types.TomTerm)tomTerm); if (tom_is_fun_sym_TermAppl(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList=tom_get_slot_TermAppl_nameList(tom_match3_1); { tom.engine.adt.tomsignature.types.TomList tom_match3_1_args=tom_get_slot_TermAppl_args(tom_match3_1); if (tom_is_fun_sym_concTomName(tom_match3_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList_list1=tom_match3_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match3_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_nameList_1=tom_get_head_concTomName_NameList(tom_match3_1_nameList_list1);tom_match3_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match3_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match3_1_nameList_1) ||  false ) { { String  tom_match3_1_nameList_1_string=tom_get_slot_Name_string(tom_match3_1_nameList_1); { String  tom_name=tom_match3_1_nameList_1_string; { tom.engine.adt.tomsignature.types.TomList tom_childrens=tom_match3_1_args; if ( true ) {

        // builds children list
        ZTermList zchild = tom_empty_list_concZTerm();
        TomTerm hd = null;
        while (!tom_childrens.isEmpty()) {
          hd = tom_childrens.getHead();
          tom_childrens= tom_childrens.getTail();
          zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm(hd,map,unamedVariableSet),tom_empty_list_concZTerm()));
        }
        // issue a warning here: this case is probably impossible
        return tom_make_zappl(tom_make_zsymbol(tom_name),zchild);
       } } } } } } } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match3_1); { tom.engine.adt.tomsignature.types.SlotList tom_match3_1_slots=tom_get_slot_RecordAppl_slots(tom_match3_1); if (tom_is_fun_sym_concTomName(tom_match3_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match3_1_nameList_list1=tom_match3_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match3_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_nameList_1=tom_get_head_concTomName_NameList(tom_match3_1_nameList_list1);tom_match3_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match3_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match3_1_nameList_1) ||  false ) { { String  tom_match3_1_nameList_1_string=tom_get_slot_Name_string(tom_match3_1_nameList_1); { String  tom_name=tom_match3_1_nameList_1_string; { tom.engine.adt.tomsignature.types.SlotList tom_childrens=tom_match3_1_slots; if ( true ) {

        // builds a map: slotName / TomTerm
        Map definedSlotMap = new HashMap();
        Slot hd = null;
        while (!tom_childrens.isEmpty()) {
          hd = tom_childrens.getHead();
          tom_childrens= tom_childrens.getTail();
          definedSlotMap.put(hd.getSlotName(),hd.getAppl());
        }
        // builds children list
        ZTermList zchild = tom_empty_list_concZTerm();
        // take care to add unamedVariables for wildcards
        TomSymbol symbol = getSymbolFromName(tom_name,getSymbolTable());
        // process all slots from symbol
         if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match4_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol); if (tom_is_fun_sym_Symbol(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match4_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match4_1); { tom.engine.adt.tomsignature.types.PairNameDeclList tom_slots=tom_match4_1_pairNameDeclList; if ( true ) {

            // process all slots. If the slot is in childrens, use it
            while(!tom_slots.isEmpty()) {
              Declaration decl= tom_slots.getHead().getSlotDecl();
              tom_slots= tom_slots.getTail();
               if(decl instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match5_1=(( tom.engine.adt.tomsignature.types.Declaration)decl); if (tom_is_fun_sym_GetSlotDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_slotName=tom_get_slot_GetSlotDecl_slotName(tom_match5_1); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match5_1_slotName; if ( true ) {

                  if (definedSlotMap.containsKey(tom_slotName)) {
                    zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm((TomTerm)definedSlotMap.get(tom_slotName),map,unamedVariableSet),tom_empty_list_concZTerm()));
                  }
                  else {
                    // fake an UnamedVariable
                    zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm(tom_make_UnamedVariable(tom_empty_list_concOption(),tom_make_EmptyType(),tom_empty_list_concConstraint()),map,unamedVariableSet),tom_empty_list_concZTerm()))

;
                  }
                 } } } } } }

            }
           } } } } } }

        return tom_make_zappl(tom_make_zsymbol(tom_name),zchild);
       } } } } } } } } } } } } if (tom_is_fun_sym_Variable(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astName=tom_get_slot_Variable_astName(tom_match3_1); if (tom_is_fun_sym_Name(tom_match3_1_astName) ||  false ) { { String  tom_match3_1_astName_string=tom_get_slot_Name_string(tom_match3_1_astName); { String  tom_name=tom_match3_1_astName_string; if ( true ) {

        if (map.containsKey(tom_name)) {
          return (ZTerm) map.get(tom_name);
        } else {
          System.out.println("tomTermToZTerm 1 Not in map: " + tom_name+ " map: " + map);
          return tom_make_zvar(tom_name);
        }
       } } } } } } if (tom_is_fun_sym_Variable(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match3_1_astName=tom_get_slot_Variable_astName(tom_match3_1); if (tom_is_fun_sym_PositionName(tom_match3_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match3_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match3_1_astName); { tom.engine.adt.tomsignature.types.TomNumberList tom_numberList=tom_match3_1_astName_numberList; if ( true ) {

        String name = verifier.tomNumberListToString(tom_numberList);
        if (map.containsKey(name)) {
          return (ZTerm) map.get(name);
        } else {
          System.out.println("tomTermToZTerm 2 Not in map: " + name + " map: " + map);
          return tom_make_zvar(name);
        }
       } } } } } } if (tom_is_fun_sym_UnamedVariable(tom_match3_1) ||  false ) { if ( true ) {

        // for unamed variables in a pattern, we generate an existential
        // quantifier for a dummy name
        ZTerm unamedVariable = tom_make_zvar(replaceNumbersByString("unamedVariable"+unamedVariableSet.size()));
        unamedVariableSet.add(unamedVariable);
        return unamedVariable;
       } } if (tom_is_fun_sym_TLVar(tom_match3_1) ||  false ) { { String  tom_match3_1_strName=tom_get_slot_TLVar_strName(tom_match3_1); { String  tom_name=tom_match3_1_strName; if ( true ) {

        return tom_make_zvar(tom_name);
       } } } } } }

    throw new TomRuntimeException("tomTermToZTerm Strange pattern: " + tomTerm);
  }

   private static class collect_symbols  extends  tom.engine.adt.zenon.ZenonVisitableFwd  {  java.util.Collection  store;  public collect_symbols(  java.util.Collection  store ) { super(tom_make_Identity() ); this.store=store; } public  tom.engine.adt.zenon.types.ZSymbol visit_ZSymbol(  tom.engine.adt.zenon.types.ZSymbol tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.zenon.types.ZSymbol) { { tom.engine.adt.zenon.types.ZSymbol tom_match6_1=(( tom.engine.adt.zenon.types.ZSymbol)tom__arg); if (tom_is_fun_sym_zsymbol(tom_match6_1) ||  false ) { { String  tom_match6_1_name=tom_get_slot_zsymbol_name(tom_match6_1); { String  tom_name=tom_match6_1_name; if ( true ) {


        store.add(tom_name);
       } } } } } } return super.visit_ZSymbol(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_collect_symbols( java.util.Collection  t0) { return new collect_symbols(t0); }



  public Collection collectSymbols(ZExpr subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collect_symbols(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collect_symbols failed");
    }
    return result;
  }
  public Collection collectSymbolsFromZSpec(ZSpec subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collect_symbols(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collect_symbols failed");
    }
    return result;
  }

  public ZAxiomList symbolsDefinition(Collection symbolnames) {
    ZAxiomList res = tom_empty_list_zby();
    Iterator it = symbolnames.iterator();
    while (it.hasNext()) {
      String name = (String) it.next();
      TomSymbol symbol = getSymbolFromName(name,getSymbolTable());
      ZTermList list = tom_empty_list_concZTerm();
      ZTerm abstractVariable = tom_make_zvar("t");
      //ZExpr exists = null;
       if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match7_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol); if (tom_is_fun_sym_Symbol(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match7_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match7_1); { tom.engine.adt.tomsignature.types.PairNameDeclList tom_slots=tom_match7_1_pairNameDeclList; if ( true ) {

          // process all slots
          while(!tom_slots.isEmpty()) {
            Declaration hd= tom_slots.getHead().getSlotDecl();
            tom_slots= tom_slots.getTail();
             if(hd instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match8_1=(( tom.engine.adt.tomsignature.types.Declaration)hd); if (tom_is_fun_sym_GetSlotDecl(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match8_1_slotName=tom_get_slot_GetSlotDecl_slotName(tom_match8_1); if (tom_is_fun_sym_Name(tom_match8_1_slotName) ||  false ) { { String  tom_match8_1_slotName_string=tom_get_slot_Name_string(tom_match8_1_slotName); { String  tom_slotName=tom_match8_1_slotName_string; if ( true ) {

                list = tom_append_list_concZTerm(list,tom_cons_list_concZTerm(tom_make_zsl(abstractVariable,tom_slotName),tom_empty_list_concZTerm()));
               } } } } } } } }

          }
         } } } } } }


      ZExpr axiom = tom_make_zforall(abstractVariable,tom_make_ztype("T"),tom_make_zequiv(tom_make_zisfsym(abstractVariable,tom_make_zsymbol(name)),tom_make_zeq(abstractVariable,tom_make_zappl(tom_make_zsymbol(name),list))))


;
      res=tom_append_list_zby(res,tom_cons_list_zby(tom_make_zaxiom("symb_"+replaceNumbersByString(name),axiom),tom_empty_list_zby()));
    }
    return res;
  }

  public ZAxiomList subtermsDefinition(Collection symbolnames) {
    ZAxiomList res = tom_empty_list_zby();
    Iterator it = symbolnames.iterator();
    while (it.hasNext()) {
      String name = (String) it.next();
      TomSymbol symbol = getSymbolFromName(name,getSymbolTable());
      ZTermList list = tom_empty_list_concZTerm();
       if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match9_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol); if (tom_is_fun_sym_Symbol(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match9_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match9_1); { tom.engine.adt.tomsignature.types.PairNameDeclList tom_slots=tom_match9_1_pairNameDeclList; if ( true ) {

          // process all slots
          int slotnumber = tom_slots.getLength();
          for (int i = 0; i < slotnumber;i++) {
            list = tom_append_list_concZTerm(list,tom_cons_list_concZTerm(tom_make_zvar("x"+i),tom_empty_list_concZTerm()));
          }
           if(tom_slots instanceof  tom.engine.adt.tomsignature.types.PairNameDeclList) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match10_1=(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_slots); if (tom_is_fun_sym_concPairNameDecl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match10_1_list1=tom_match10_1; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match10_1_begin1=tom_match10_1_list1; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match10_1_end1=tom_match10_1_list1; { while (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1; { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_al=tom_get_slice_concPairNameDecl(tom_match10_1_begin1,tom_match10_1_end1); { tom.engine.adt.tomsignature.types.PairNameDecl tom_match10_1_2=tom_get_head_concPairNameDecl_PairNameDeclList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match10_1_list1); if (tom_is_fun_sym_PairNameDecl(tom_match10_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_2_slotName=tom_get_slot_PairNameDecl_slotName(tom_match10_1_2); if (tom_is_fun_sym_Name(tom_match10_1_2_slotName) ||  false ) { { String  tom_match10_1_2_slotName_string=tom_get_slot_Name_string(tom_match10_1_2_slotName); { String  tom_slname=tom_match10_1_2_slotName_string; if ( true ) {

              int index = tom_al.getLength();
              ZExpr axiom = tom_make_zeq(tom_make_zvar("x"+index),tom_make_zsl(tom_make_zappl(tom_make_zsymbol(name),list),tom_slname))
;
              for (int j = 0; j < slotnumber;j++) {
                axiom = tom_make_zforall(tom_make_zvar("x"+j),tom_make_ztype("T"),axiom);
              }
              res=tom_append_list_zby(res,tom_cons_list_zby(tom_make_zaxiom("st_"+tom_slname+"_"+replaceNumbersByString(name),axiom),tom_empty_list_zby()));
             } } } } } } } }tom_match10_1_end1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match10_1_end1); } }tom_match10_1_list1=tom_match10_1_begin1; } } } } } } }

         } } } } } }

    }
    return res;
  }

  public List subtermList(String symbolName) {
    List nameList = new LinkedList();

    TomSymbol symbol = getSymbolFromName(symbolName,getSymbolTable());

     if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match11_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol); if (tom_is_fun_sym_Symbol(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match11_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match11_1); { tom.engine.adt.tomsignature.types.PairNameDeclList tom_slots=tom_match11_1_pairNameDeclList; if ( true ) { if(tom_slots instanceof  tom.engine.adt.tomsignature.types.PairNameDeclList) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1=(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_slots); if (tom_is_fun_sym_concPairNameDecl(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1_list1=tom_match12_1; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1_begin1=tom_match12_1_list1; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.engine.adt.tomsignature.types.PairNameDecl tom_match12_1_2=tom_get_head_concPairNameDecl_PairNameDeclList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match12_1_list1); if (tom_is_fun_sym_PairNameDecl(tom_match12_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match12_1_2_slotName=tom_get_slot_PairNameDecl_slotName(tom_match12_1_2); if (tom_is_fun_sym_Name(tom_match12_1_2_slotName) ||  false ) { { String  tom_match12_1_2_slotName_string=tom_get_slot_Name_string(tom_match12_1_2_slotName); { String  tom_slname=tom_match12_1_2_slotName_string; if ( true ) {



            nameList.add(tom_slname);
           } } } } } } }tom_match12_1_end1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

       } } } } } }

    return nameList;
  }

  public String replaceNumbersByString(String input) {
    String output = input;
    output = output.replaceAll("0","zero");
    output = output.replaceAll("1","one");
    output = output.replaceAll("2","two");
    output = output.replaceAll("3","three");
    output = output.replaceAll("4","four");
    output = output.replaceAll("5","five");
    output = output.replaceAll("6","six");
    output = output.replaceAll("7","seven");
    output = output.replaceAll("8","eight");
    output = output.replaceAll("9","nine");
    output = output.replaceAll("\\\"","_sd_");
    output = output.replaceAll("True","z_true");
    output = output.replaceAll("False","z_false");
    return output;
  }

}
