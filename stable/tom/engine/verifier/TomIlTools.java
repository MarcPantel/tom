/* Generated by TOM (version 2.4rc2): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Antoine Reilles        e-mail: Antoine.Reilles@loria.fr
 *
 **/

package tom.engine.verifier;

import tom.engine.*;
import aterm.*;
import java.util.*;
import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.adt.zenon.types.*;

import tom.engine.tools.SymbolTable;
import tom.engine.exception.TomRuntimeException;

public class TomIlTools extends TomBase {

  // ------------------------------------------------------------
  /* Generated by TOM (version 2.4rc2): Do not edit this file *//* Generated by TOM (version 2.4rc2): Do not edit this file *//* Generated by TOM (version 2.4rc2): Do not edit this file */ private static boolean tom_terms_equal_String(String t1, String t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4rc2): Do not edit this file */ private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_EmptyType() { return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make(); }private static boolean tom_is_fun_sym_Symbol( tom.engine.adt.tomsignature.types.TomSymbol  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomsymbol.Symbol  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Symbol_AstName( tom.engine.adt.tomsignature.types.TomSymbol  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Symbol_TypesToType( tom.engine.adt.tomsignature.types.TomSymbol  t) {  return  t.getTypesToType()  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slot_Symbol_PairNameDeclList( tom.engine.adt.tomsignature.types.TomSymbol  t) {  return  t.getPairNameDeclList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Symbol_Option( tom.engine.adt.tomsignature.types.TomSymbol  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_GetSlotDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.GetSlotDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetSlotDecl_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetSlotDecl_SlotName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getSlotName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetSlotDecl_Variable( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_GetSlotDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_GetSlotDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.PositionName  ;}private static  tom.engine.adt.tomname.types.TomNumberList  tom_get_slot_PositionName_NumberList( tom.engine.adt.tomname.types.TomName  t) {  return  t.getNumberList()  ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.Name  ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_make_UnamedVariable( tom.engine.adt.tomoption.types.OptionList  t0,  tom.engine.adt.tomtype.types.TomType  t1,  tom.engine.adt.tomconstraint.types.ConstraintList  t2) { return  tom.engine.adt.tomterm.types.tomterm.UnamedVariable.make(t0, t1, t2); }private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_TermAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_TermAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_TermAppl_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_TermAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomterm.types.Pattern  t) {  return  t instanceof tom.engine.adt.tomterm.types.pattern.Pattern  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_SubjectList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_TomList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getTomList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_Guards( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getGuards()  ;}private static boolean tom_is_fun_sym_PairNameDecl( tom.engine.adt.tomslot.types.PairNameDecl  t) {  return  t instanceof tom.engine.adt.tomslot.types.pairnamedecl.PairNameDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairNameDecl_SlotName( tom.engine.adt.tomslot.types.PairNameDecl  t) {  return  t.getSlotName()  ;}private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_get_slot_PairNameDecl_SlotDecl( tom.engine.adt.tomslot.types.PairNameDecl  t) {  return  t.getSlotDecl()  ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_terms_equal_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getHeadconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getTailconcOption()  ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.isEmptyconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList  l1,  tom.engine.adt.tomoption.types.OptionList  l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomoption.types.OptionList )tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(begin),end));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_empty_list_concConstraint() { return  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ; }private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_cons_list_concConstraint( tom.engine.adt.tomconstraint.types.Constraint  e,  tom.engine.adt.tomconstraint.types.ConstraintList  l) { return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(e,l) ; }private static  tom.engine.adt.tomconstraint.types.Constraint  tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getHeadconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.getTailconcConstraint()  ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomconstraint.types.ConstraintList  l) {  return  l.isEmptyconcConstraint()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomconstraint.types.ConstraintList )tom_cons_list_concConstraint(( tom.engine.adt.tomconstraint.types.Constraint )tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint(( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_is_fun_sym_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  t) {  return  t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl || t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_empty_list_concPairNameDecl() { return  tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ; }private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_cons_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDecl  e,  tom.engine.adt.tomslot.types.PairNameDeclList  l) { return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make(e,l) ; }private static  tom.engine.adt.tomslot.types.PairNameDecl  tom_get_head_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.getHeadconcPairNameDecl()  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_tail_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.getTailconcPairNameDecl()  ;}private static boolean tom_is_empty_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.isEmptyconcPairNameDecl()  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_append_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  l1,  tom.engine.adt.tomslot.types.PairNameDeclList  l2) {    if(tom_is_empty_concPairNameDecl_PairNameDeclList(l1)) {     return l2;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(l2)) {     return l1;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(l1))) {     return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(l1),tom_append_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slice_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  begin,  tom.engine.adt.tomslot.types.PairNameDeclList  end) {    if(tom_terms_equal_PairNameDeclList(begin,end)) {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_empty_list_concPairNameDecl();    } else {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(begin),( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_slice_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(begin),end));    }   }   /* Generated by TOM (version 2.4rc2): Do not edit this file */private static boolean tom_terms_equal_ZType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZExpr(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZAxiom(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZAxiomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZSymbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_terms_equal_ZTermList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static  tom.engine.adt.zenon.types.ZType  tom_make_ztype( String  t0) { return  tom.engine.adt.zenon.types.ztype.ztype.make(t0); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_ztrue() { return  tom.engine.adt.zenon.types.zexpr.ztrue.make(); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zfalse() { return  tom.engine.adt.zenon.types.zexpr.zfalse.make(); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zisfsym( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZSymbol  t1) { return  tom.engine.adt.zenon.types.zexpr.zisfsym.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zeq( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZTerm  t1) { return  tom.engine.adt.zenon.types.zexpr.zeq.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zforall( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZType  t1,  tom.engine.adt.zenon.types.ZExpr  t2) { return  tom.engine.adt.zenon.types.zexpr.zforall.make(t0, t1, t2); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zexists( tom.engine.adt.zenon.types.ZTerm  t0,  tom.engine.adt.zenon.types.ZType  t1,  tom.engine.adt.zenon.types.ZExpr  t2) { return  tom.engine.adt.zenon.types.zexpr.zexists.make(t0, t1, t2); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zand( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zand.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zor( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zor.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZExpr  tom_make_zequiv( tom.engine.adt.zenon.types.ZExpr  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zexpr.zequiv.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZAxiom  tom_make_zaxiom( String  t0,  tom.engine.adt.zenon.types.ZExpr  t1) { return  tom.engine.adt.zenon.types.zaxiom.zaxiom.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zvar( String  t0) { return  tom.engine.adt.zenon.types.zterm.zvar.make(t0); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zappl( tom.engine.adt.zenon.types.ZSymbol  t0,  tom.engine.adt.zenon.types.ZTermList  t1) { return  tom.engine.adt.zenon.types.zterm.zappl.make(t0, t1); }private static  tom.engine.adt.zenon.types.ZTerm  tom_make_zsl( tom.engine.adt.zenon.types.ZTerm  t0,  String  t1) { return  tom.engine.adt.zenon.types.zterm.zsl.make(t0, t1); }private static boolean tom_is_fun_sym_zsymbol( tom.engine.adt.zenon.types.ZSymbol  t) {  return  t instanceof tom.engine.adt.zenon.types.zsymbol.zsymbol  ;}private static  tom.engine.adt.zenon.types.ZSymbol  tom_make_zsymbol( String  t0) { return  tom.engine.adt.zenon.types.zsymbol.zsymbol.make(t0); }private static  String  tom_get_slot_zsymbol_Name( tom.engine.adt.zenon.types.ZSymbol  t) {  return  t.getName()  ;}private static boolean tom_is_fun_sym_zby( tom.engine.adt.zenon.types.ZAxiomList  t) {  return  t instanceof tom.engine.adt.zenon.types.zaxiomlist.Conszby || t instanceof tom.engine.adt.zenon.types.zaxiomlist.Emptyzby  ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_empty_list_zby() { return  tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() ; }private static  tom.engine.adt.zenon.types.ZAxiomList  tom_cons_list_zby( tom.engine.adt.zenon.types.ZAxiom  e,  tom.engine.adt.zenon.types.ZAxiomList  l) { return  tom.engine.adt.zenon.types.zaxiomlist.Conszby.make(e,l) ; }private static  tom.engine.adt.zenon.types.ZAxiom  tom_get_head_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) {  return  l.getHeadzby()  ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_get_tail_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) {  return  l.getTailzby()  ;}private static boolean tom_is_empty_zby_ZAxiomList( tom.engine.adt.zenon.types.ZAxiomList  l) {  return  l.isEmptyzby()  ;}private static  tom.engine.adt.zenon.types.ZAxiomList  tom_append_list_zby( tom.engine.adt.zenon.types.ZAxiomList  l1,  tom.engine.adt.zenon.types.ZAxiomList  l2) {    if(tom_is_empty_zby_ZAxiomList(l1)) {     return l2;    } else if(tom_is_empty_zby_ZAxiomList(l2)) {     return l1;    } else if(tom_is_empty_zby_ZAxiomList(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(l1))) {     return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(l1),tom_append_list_zby(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(l1),l2));    }   }  private static  tom.engine.adt.zenon.types.ZAxiomList  tom_get_slice_zby( tom.engine.adt.zenon.types.ZAxiomList  begin,  tom.engine.adt.zenon.types.ZAxiomList  end) {    if(tom_terms_equal_ZAxiomList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_empty_list_zby();    } else {      return ( tom.engine.adt.zenon.types.ZAxiomList )tom_cons_list_zby(( tom.engine.adt.zenon.types.ZAxiom )tom_get_head_zby_ZAxiomList(begin),( tom.engine.adt.zenon.types.ZAxiomList )tom_get_slice_zby(( tom.engine.adt.zenon.types.ZAxiomList )tom_get_tail_zby_ZAxiomList(begin),end));    }   }  private static boolean tom_is_fun_sym_concZTerm( tom.engine.adt.zenon.types.ZTermList  t) {  return  t instanceof tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm || t instanceof tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm  ;}private static  tom.engine.adt.zenon.types.ZTermList  tom_empty_list_concZTerm() { return  tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm.make() ; }private static  tom.engine.adt.zenon.types.ZTermList  tom_cons_list_concZTerm( tom.engine.adt.zenon.types.ZTerm  e,  tom.engine.adt.zenon.types.ZTermList  l) { return  tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm.make(e,l) ; }private static  tom.engine.adt.zenon.types.ZTerm  tom_get_head_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList  l) {  return  l.getHeadconcZTerm()  ;}private static  tom.engine.adt.zenon.types.ZTermList  tom_get_tail_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList  l) {  return  l.getTailconcZTerm()  ;}private static boolean tom_is_empty_concZTerm_ZTermList( tom.engine.adt.zenon.types.ZTermList  l) {  return  l.isEmptyconcZTerm()  ;}private static  tom.engine.adt.zenon.types.ZTermList  tom_append_list_concZTerm( tom.engine.adt.zenon.types.ZTermList  l1,  tom.engine.adt.zenon.types.ZTermList  l2) {    if(tom_is_empty_concZTerm_ZTermList(l1)) {     return l2;    } else if(tom_is_empty_concZTerm_ZTermList(l2)) {     return l1;    } else if(tom_is_empty_concZTerm_ZTermList(( tom.engine.adt.zenon.types.ZTermList )tom_get_tail_concZTerm_ZTermList(l1))) {     return ( tom.engine.adt.zenon.types.ZTermList )tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm )tom_get_head_concZTerm_ZTermList(l1),l2);    } else {      return ( tom.engine.adt.zenon.types.ZTermList )tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm )tom_get_head_concZTerm_ZTermList(l1),tom_append_list_concZTerm(( tom.engine.adt.zenon.types.ZTermList )tom_get_tail_concZTerm_ZTermList(l1),l2));    }   }  private static  tom.engine.adt.zenon.types.ZTermList  tom_get_slice_concZTerm( tom.engine.adt.zenon.types.ZTermList  begin,  tom.engine.adt.zenon.types.ZTermList  end) {    if(tom_terms_equal_ZTermList(begin,end)) {      return ( tom.engine.adt.zenon.types.ZTermList )tom_empty_list_concZTerm();    } else {      return ( tom.engine.adt.zenon.types.ZTermList )tom_cons_list_concZTerm(( tom.engine.adt.zenon.types.ZTerm )tom_get_head_concZTerm_ZTermList(begin),( tom.engine.adt.zenon.types.ZTermList )tom_get_slice_concZTerm(( tom.engine.adt.zenon.types.ZTermList )tom_get_tail_concZTerm_ZTermList(begin),end));    }   }   /* Generated by TOM (version 2.4rc2): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.4rc2): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Sequence( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /* Generated by TOM (version 2.4rc2): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_TopDown( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_mu(tom_make_MuVar("_x"),tom_make_Sequence(v,tom_make_All(tom_make_MuVar("_x")))) ; }   





  // ------------------------------------------------------------

  private SymbolTable symbolTable;
  private Verifier verifier;


  public TomIlTools(Verifier verifier) {
    super();
    this.verifier = verifier;
    this.symbolTable = verifier.getSymbolTable();
  }

  private SymbolTable getSymbolTable() {
    return symbolTable;
  }

  /**
   * Methods used to translate a pattern and conditions in zenon signature
   */
  public ZExpr patternToZExpr(PatternList patternList, Map map) {
    // do everything match the empty pattern ?
    ZExpr result = tom_make_zfalse();
    while(!patternList.isEmptyconcPattern()) {
      Pattern h = patternList.getHeadconcPattern();
      result = tom_make_zor(result,patternToZExpr(h,map));
      patternList = patternList.getTailconcPattern();
    }
    return result;
  }

  public void getZTermSubjectListFromPattern(Pattern pattern, List list, Map map) {
    Set unamedVarSet = new HashSet();
     if(pattern instanceof  tom.engine.adt.tomterm.types.Pattern ) { { tom.engine.adt.tomterm.types.Pattern  tom_match1_1=(( tom.engine.adt.tomterm.types.Pattern )pattern); if ( ( tom_is_fun_sym_Pattern(tom_match1_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match1_1_SubjectList=tom_get_slot_Pattern_SubjectList(tom_match1_1); { tom.engine.adt.tomterm.types.TomList  tom_subjectList=tom_match1_1_SubjectList; {boolean tom_match1_tom_anti_constraints_status= true ; if ((tom_match1_tom_anti_constraints_status ==  true )) { if ( true ) {

        TomList sl = tom_subjectList;
          while(!sl.isEmptyconcTomTerm()) {
            TomTerm head = sl.getHeadconcTomTerm();
            sl = sl.getTailconcTomTerm();
            list.add(tomTermToZTerm(head,map,unamedVarSet));
          }
       } } } } } } } }

  }

  public ZExpr patternToZExpr(Pattern pattern, Map map) {
    Set unamedVariableSet = new HashSet();
     if(pattern instanceof  tom.engine.adt.tomterm.types.Pattern ) { { tom.engine.adt.tomterm.types.Pattern  tom_match2_1=(( tom.engine.adt.tomterm.types.Pattern )pattern); if ( ( tom_is_fun_sym_Pattern(tom_match2_1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_match2_1_SubjectList=tom_get_slot_Pattern_SubjectList(tom_match2_1); { tom.engine.adt.tomterm.types.TomList  tom_match2_1_TomList=tom_get_slot_Pattern_TomList(tom_match2_1); { tom.engine.adt.tomterm.types.TomList  tom_subjectList=tom_match2_1_SubjectList; { tom.engine.adt.tomterm.types.TomList  tom_tomList=tom_match2_1_TomList; {boolean tom_match2_tom_anti_constraints_status= true ; if ((tom_match2_tom_anti_constraints_status ==  true )) { if ( true ) {

          ZExpr result = patternToZExpr(tom_subjectList,tom_tomList,map,unamedVariableSet);
          // insert existential quantifiers for the unamed variables
          Iterator it = unamedVariableSet.iterator();
          while (it.hasNext()) {
            ZTerm var = (ZTerm) it.next();
            result = tom_make_zexists(var,tom_make_ztype("T"),result);
          }
          return result;
       } } } } } } } } } }

    throw new TomRuntimeException("patternToZExpr : strange pattern " + pattern);
  }

  public ZExpr patternToZExpr(TomList subjectList, TomList tomList, Map map, Set unamedVariableSet) {
    /* for each TomTerm: builds a zeq : pattern = subject */
    ZExpr res = tom_make_ztrue();
    while(!tomList.isEmptyconcTomTerm()) {
      TomTerm h = tomList.getHeadconcTomTerm();
      TomTerm subject = subjectList.getHeadconcTomTerm();
      tomList = tomList.getTailconcTomTerm();
      subjectList = subjectList.getTailconcTomTerm();
      res = tom_make_zand(res,tom_make_zeq(tomTermToZTerm(h,map,unamedVariableSet),tomTermToZTerm(subject,map,unamedVariableSet)))
;
    }
    return res;
  }

  public ZTerm tomTermToZTerm(TomTerm tomTerm, Map map, Set unamedVariableSet) {
     if(tomTerm instanceof  tom.engine.adt.tomterm.types.TomTerm ) { { tom.engine.adt.tomterm.types.TomTerm  tom_match3_1=(( tom.engine.adt.tomterm.types.TomTerm )tomTerm); if ( ( tom_is_fun_sym_TermAppl(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match3_1_NameList=tom_get_slot_TermAppl_NameList(tom_match3_1); { tom.engine.adt.tomterm.types.TomList  tom_match3_1_Args=tom_get_slot_TermAppl_Args(tom_match3_1); if ( ( tom_is_fun_sym_concTomName(tom_match3_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match3_1_NameList_list1=tom_match3_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match3_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match3_1_NameList_list1);tom_match3_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match3_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match3_1_NameList_1) ||  false  ) ) { { String  tom_match3_1_NameList_1_String=tom_get_slot_Name_String(tom_match3_1_NameList_1); { String  tom_name=tom_match3_1_NameList_1_String; { tom.engine.adt.tomterm.types.TomList  tom_childrens=tom_match3_1_Args; {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        // builds children list
        ZTermList zchild = tom_empty_list_concZTerm();
        TomTerm hd = null;
        while (!tom_childrens.isEmptyconcTomTerm()) {
          hd = tom_childrens.getHeadconcTomTerm();
          tom_childrens= tom_childrens.getTailconcTomTerm();
          zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm(hd,map,unamedVariableSet),tom_empty_list_concZTerm()));
        }
        // issue a warning here: this case is probably impossible
        return tom_make_zappl(tom_make_zsymbol(tom_name),zchild);
       } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_RecordAppl(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match3_1_NameList=tom_get_slot_RecordAppl_NameList(tom_match3_1); { tom.engine.adt.tomslot.types.SlotList  tom_match3_1_Slots=tom_get_slot_RecordAppl_Slots(tom_match3_1); if ( ( tom_is_fun_sym_concTomName(tom_match3_1_NameList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tom_match3_1_NameList_list1=tom_match3_1_NameList; if (!(tom_is_empty_concTomName_TomNameList(tom_match3_1_NameList_list1))) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_NameList_1=tom_get_head_concTomName_TomNameList(tom_match3_1_NameList_list1);tom_match3_1_NameList_list1=tom_get_tail_concTomName_TomNameList(tom_match3_1_NameList_list1); if ( ( tom_is_fun_sym_Name(tom_match3_1_NameList_1) ||  false  ) ) { { String  tom_match3_1_NameList_1_String=tom_get_slot_Name_String(tom_match3_1_NameList_1); { String  tom_name=tom_match3_1_NameList_1_String; { tom.engine.adt.tomslot.types.SlotList  tom_childrens=tom_match3_1_Slots; {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        // builds a map: slotName / TomTerm
        Map definedSlotMap = new HashMap();
        Slot hd = null;
        while (!tom_childrens.isEmptyconcSlot()) {
          hd = tom_childrens.getHeadconcSlot();
          tom_childrens= tom_childrens.getTailconcSlot();
          definedSlotMap.put(hd.getSlotName(),hd.getAppl());
        }
        // builds children list
        ZTermList zchild = tom_empty_list_concZTerm();
        // take care to add unamedVariables for wildcards
        TomSymbol symbol = getSymbolFromName(tom_name,getSymbolTable());
        // process all slots from symbol
         if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol ) { { tom.engine.adt.tomsignature.types.TomSymbol  tom_match4_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol); if ( ( tom_is_fun_sym_Symbol(tom_match4_1) ||  false  ) ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match4_1_PairNameDeclList=tom_get_slot_Symbol_PairNameDeclList(tom_match4_1); { tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tom_match4_1_PairNameDeclList; {boolean tom_match4_tom_anti_constraints_status= true ; if ((tom_match4_tom_anti_constraints_status ==  true )) { if ( true ) {

            // process all slots. If the slot is in childrens, use it
            while(!tom_slots.isEmptyconcPairNameDecl()) {
              Declaration decl= tom_slots.getHeadconcPairNameDecl().getSlotDecl();
              tom_slots= tom_slots.getTailconcPairNameDecl();
               if(decl instanceof  tom.engine.adt.tomdeclaration.types.Declaration ) { { tom.engine.adt.tomdeclaration.types.Declaration  tom_match5_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl); if ( ( tom_is_fun_sym_GetSlotDecl(tom_match5_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match5_1_SlotName=tom_get_slot_GetSlotDecl_SlotName(tom_match5_1); { tom.engine.adt.tomname.types.TomName  tom_slotName=tom_match5_1_SlotName; {boolean tom_match5_tom_anti_constraints_status= true ; if ((tom_match5_tom_anti_constraints_status ==  true )) { if ( true ) {

                  if (definedSlotMap.containsKey(tom_slotName)) {
                    zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm((TomTerm)definedSlotMap.get(tom_slotName),map,unamedVariableSet),tom_empty_list_concZTerm()));
                  }
                  else {
                    // fake an UnamedVariable
                    zchild = tom_append_list_concZTerm(zchild,tom_cons_list_concZTerm(tomTermToZTerm(tom_make_UnamedVariable(tom_empty_list_concOption(),tom_make_EmptyType(),tom_empty_list_concConstraint()),map,unamedVariableSet),tom_empty_list_concZTerm()))

;
                  }
                 } } } } } } } }

            }
           } } } } } } } }

        return tom_make_zappl(tom_make_zsymbol(tom_name),zchild);
       } } } } } } } } } } } } } } if ( ( tom_is_fun_sym_Variable(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_AstName=tom_get_slot_Variable_AstName(tom_match3_1); if ( ( tom_is_fun_sym_Name(tom_match3_1_AstName) ||  false  ) ) { { String  tom_match3_1_AstName_String=tom_get_slot_Name_String(tom_match3_1_AstName); { String  tom_name=tom_match3_1_AstName_String; {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        if (map.containsKey(tom_name)) {
          return (ZTerm) map.get(tom_name);
        } else {
          System.out.println("tomTermToZTerm 1 Not in map: " + tom_name+ " map: " + map);
          return tom_make_zvar(tom_name);
        }
       } } } } } } } } if ( ( tom_is_fun_sym_Variable(tom_match3_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match3_1_AstName=tom_get_slot_Variable_AstName(tom_match3_1); if ( ( tom_is_fun_sym_PositionName(tom_match3_1_AstName) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNumberList  tom_match3_1_AstName_NumberList=tom_get_slot_PositionName_NumberList(tom_match3_1_AstName); { tom.engine.adt.tomname.types.TomNumberList  tom_numberList=tom_match3_1_AstName_NumberList; {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        String name = verifier.tomNumberListToString(tom_numberList);
        if (map.containsKey(name)) {
          return (ZTerm) map.get(name);
        } else {
          System.out.println("tomTermToZTerm 2 Not in map: " + name + " map: " + map);
          return tom_make_zvar(name);
        }
       } } } } } } } } if ( ( tom_is_fun_sym_UnamedVariable(tom_match3_1) ||  false  ) ) { {boolean tom_match3_tom_anti_constraints_status= true ; if ((tom_match3_tom_anti_constraints_status ==  true )) { if ( true ) {

        // for unamed variables in a pattern, we generate an existential
        // quantifier for a dummy name
        ZTerm unamedVariable = tom_make_zvar(replaceNumbersByString("unamedVariable"+unamedVariableSet.size()));
        unamedVariableSet.add(unamedVariable);
        return unamedVariable;
       } } } } } }

    throw new TomRuntimeException("tomTermToZTerm Strange pattern: " + tomTerm);
  }

   private static class collect_symbols  extends  tom.engine.adt.zenon.ZenonBasicStrategy   { private  java.util.Collection  store;  public collect_symbols(  java.util.Collection  store ) { super(tom_make_Identity() ); this.store=store; } public  java.util.Collection  getstore() { return store;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.zenon.types.ZSymbol  visit_ZSymbol(  tom.engine.adt.zenon.types.ZSymbol  tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.zenon.types.ZSymbol ) { { tom.engine.adt.zenon.types.ZSymbol  tom_match6_1=(( tom.engine.adt.zenon.types.ZSymbol )tom__arg); if ( ( tom_is_fun_sym_zsymbol(tom_match6_1) ||  false  ) ) { { String  tom_match6_1_Name=tom_get_slot_zsymbol_Name(tom_match6_1); { String  tom_name=tom_match6_1_Name; {boolean tom_match6_tom_anti_constraints_status= true ; if ((tom_match6_tom_anti_constraints_status ==  true )) { if ( true ) {


        store.add(tom_name);
       } } } } } } } } return super.visit_ZSymbol(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_collect_symbols( java.util.Collection  t0) { return new collect_symbols(t0); }



  public Collection collectSymbols(ZExpr subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collect_symbols(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collect_symbols failed");
    }
    return result;
  }
  public Collection collectSymbolsFromZSpec(ZSpec subject) {
    Collection result = new HashSet();
    try {
      tom_make_TopDown(tom_make_collect_symbols(result)).visit(subject);
    } catch (jjtraveler.VisitFailure e) {
      throw new TomRuntimeException("Strategy collect_symbols failed");
    }
    return result;
  }

  public ZAxiomList symbolsDefinition(Collection symbolnames) {
    ZAxiomList res = tom_empty_list_zby();
    Iterator it = symbolnames.iterator();
    while (it.hasNext()) {
      String name = (String) it.next();
      TomSymbol symbol = getSymbolFromName(name,getSymbolTable());
      ZTermList list = tom_empty_list_concZTerm();
      ZTerm abstractVariable = tom_make_zvar("t");
      //ZExpr exists = null;
       if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol ) { { tom.engine.adt.tomsignature.types.TomSymbol  tom_match7_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol); if ( ( tom_is_fun_sym_Symbol(tom_match7_1) ||  false  ) ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match7_1_PairNameDeclList=tom_get_slot_Symbol_PairNameDeclList(tom_match7_1); { tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tom_match7_1_PairNameDeclList; {boolean tom_match7_tom_anti_constraints_status= true ; if ((tom_match7_tom_anti_constraints_status ==  true )) { if ( true ) {

          // process all slots
          while(!tom_slots.isEmptyconcPairNameDecl()) {
            Declaration hd= tom_slots.getHeadconcPairNameDecl().getSlotDecl();
            tom_slots= tom_slots.getTailconcPairNameDecl();
             if(hd instanceof  tom.engine.adt.tomdeclaration.types.Declaration ) { { tom.engine.adt.tomdeclaration.types.Declaration  tom_match8_1=(( tom.engine.adt.tomdeclaration.types.Declaration )hd); if ( ( tom_is_fun_sym_GetSlotDecl(tom_match8_1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match8_1_SlotName=tom_get_slot_GetSlotDecl_SlotName(tom_match8_1); if ( ( tom_is_fun_sym_Name(tom_match8_1_SlotName) ||  false  ) ) { { String  tom_match8_1_SlotName_String=tom_get_slot_Name_String(tom_match8_1_SlotName); { String  tom_slotName=tom_match8_1_SlotName_String; {boolean tom_match8_tom_anti_constraints_status= true ; if ((tom_match8_tom_anti_constraints_status ==  true )) { if ( true ) {

                list = tom_append_list_concZTerm(list,tom_cons_list_concZTerm(tom_make_zsl(abstractVariable,tom_slotName),tom_empty_list_concZTerm()));
               } } } } } } } } } }

          }
         } } } } } } } }


      ZExpr axiom = tom_make_zforall(abstractVariable,tom_make_ztype("T"),tom_make_zequiv(tom_make_zisfsym(abstractVariable,tom_make_zsymbol(name)),tom_make_zeq(abstractVariable,tom_make_zappl(tom_make_zsymbol(name),list))))


;
      res=tom_append_list_zby(res,tom_cons_list_zby(tom_make_zaxiom("symb_"+replaceNumbersByString(name),axiom),tom_empty_list_zby()));
    }
    return res;
  }

  public ZAxiomList subtermsDefinition(Collection symbolnames) {
    ZAxiomList res = tom_empty_list_zby();
    Iterator it = symbolnames.iterator();
    while (it.hasNext()) {
      String name = (String) it.next();
      TomSymbol symbol = getSymbolFromName(name,getSymbolTable());
      ZTermList list = tom_empty_list_concZTerm();
       if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol ) { { tom.engine.adt.tomsignature.types.TomSymbol  tom_match9_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol); if ( ( tom_is_fun_sym_Symbol(tom_match9_1) ||  false  ) ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match9_1_PairNameDeclList=tom_get_slot_Symbol_PairNameDeclList(tom_match9_1); { tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tom_match9_1_PairNameDeclList; {boolean tom_match9_tom_anti_constraints_status= true ; if ((tom_match9_tom_anti_constraints_status ==  true )) { if ( true ) {

          // process all slots
          int slotnumber =tom_slots.length();
          for (int i = 0; i < slotnumber;i++) {
            list = tom_append_list_concZTerm(list,tom_cons_list_concZTerm(tom_make_zvar("x"+i),tom_empty_list_concZTerm()));
          }
           if(tom_slots instanceof  tom.engine.adt.tomslot.types.PairNameDeclList ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match10_1=(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_slots); if ( ( tom_is_fun_sym_concPairNameDecl(tom_match10_1) ||  false  ) ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match10_1_list1=tom_match10_1; { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match10_1_begin1=tom_match10_1_list1; { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match10_1_end1=tom_match10_1_list1; { while (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tom_match10_1_end1))) {tom_match10_1_list1=tom_match10_1_end1; { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_al=tom_get_slice_concPairNameDecl(tom_match10_1_begin1,tom_match10_1_end1); { tom.engine.adt.tomslot.types.PairNameDecl  tom_match10_1_2=tom_get_head_concPairNameDecl_PairNameDeclList(tom_match10_1_list1);tom_match10_1_list1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match10_1_list1); if ( ( tom_is_fun_sym_PairNameDecl(tom_match10_1_2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match10_1_2_SlotName=tom_get_slot_PairNameDecl_SlotName(tom_match10_1_2); if ( ( tom_is_fun_sym_Name(tom_match10_1_2_SlotName) ||  false  ) ) { { String  tom_match10_1_2_SlotName_String=tom_get_slot_Name_String(tom_match10_1_2_SlotName); { String  tom_slname=tom_match10_1_2_SlotName_String; {boolean tom_match10_tom_anti_constraints_status= true ; if ((tom_match10_tom_anti_constraints_status ==  true )) { if ( true ) {

              int index = tom_al.length();
              ZExpr axiom = tom_make_zeq(tom_make_zvar("x"+index),tom_make_zsl(tom_make_zappl(tom_make_zsymbol(name),list),tom_slname))
;
              for (int j = 0; j < slotnumber;j++) {
                axiom = tom_make_zforall(tom_make_zvar("x"+j),tom_make_ztype("T"),axiom);
              }
              res=tom_append_list_zby(res,tom_cons_list_zby(tom_make_zaxiom("st_"+tom_slname+"_"+replaceNumbersByString(name),axiom),tom_empty_list_zby()));
             } } } } } } } } } }tom_match10_1_end1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match10_1_end1); } }tom_match10_1_list1=tom_match10_1_begin1; } } } } } } }

         } } } } } } } }

    }
    return res;
  }

  public List subtermList(String symbolName) {
    List nameList = new LinkedList();

    TomSymbol symbol = getSymbolFromName(symbolName,getSymbolTable());

     if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol ) { { tom.engine.adt.tomsignature.types.TomSymbol  tom_match11_1=(( tom.engine.adt.tomsignature.types.TomSymbol )symbol); if ( ( tom_is_fun_sym_Symbol(tom_match11_1) ||  false  ) ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match11_1_PairNameDeclList=tom_get_slot_Symbol_PairNameDeclList(tom_match11_1); { tom.engine.adt.tomslot.types.PairNameDeclList  tom_slots=tom_match11_1_PairNameDeclList; {boolean tom_match11_tom_anti_constraints_status= true ; if ((tom_match11_tom_anti_constraints_status ==  true )) { if ( true ) { if(tom_slots instanceof  tom.engine.adt.tomslot.types.PairNameDeclList ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match12_1=(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_slots); if ( ( tom_is_fun_sym_concPairNameDecl(tom_match12_1) ||  false  ) ) { { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match12_1_list1=tom_match12_1; { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match12_1_begin1=tom_match12_1_list1; { tom.engine.adt.tomslot.types.PairNameDeclList  tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.engine.adt.tomslot.types.PairNameDecl  tom_match12_1_2=tom_get_head_concPairNameDecl_PairNameDeclList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match12_1_list1); if ( ( tom_is_fun_sym_PairNameDecl(tom_match12_1_2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tom_match12_1_2_SlotName=tom_get_slot_PairNameDecl_SlotName(tom_match12_1_2); if ( ( tom_is_fun_sym_Name(tom_match12_1_2_SlotName) ||  false  ) ) { { String  tom_match12_1_2_SlotName_String=tom_get_slot_Name_String(tom_match12_1_2_SlotName); { String  tom_slname=tom_match12_1_2_SlotName_String; {boolean tom_match12_tom_anti_constraints_status= true ; if ((tom_match12_tom_anti_constraints_status ==  true )) { if ( true ) {



            nameList.add(tom_slname);
           } } } } } } } } }tom_match12_1_end1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

       } } } } } } } }

    return nameList;
  }

  public String replaceNumbersByString(String input) {
    String output = input;
    output = output.replaceAll("0","zero");
    output = output.replaceAll("1","one");
    output = output.replaceAll("2","two");
    output = output.replaceAll("3","three");
    output = output.replaceAll("4","four");
    output = output.replaceAll("5","five");
    output = output.replaceAll("6","six");
    output = output.replaceAll("7","seven");
    output = output.replaceAll("8","eight");
    output = output.replaceAll("9","nine");
    output = output.replaceAll("\\\"","_sd_");
    output = output.replaceAll("True","z_true");
    output = output.replaceAll("False","z_false");
    return output;
  }

}
