/* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (C) 2000-2004 INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package jtom;

import java.util.*;
import java.util.logging.*;
import java.io.*;

import jtom.*;

import tom.platform.*;
import tom.library.adt.tnode.*;
import tom.library.adt.tnode.types.*;

import tom.platform.adt.platformoption.*;
import tom.platform.adt.platformoption.types.*;

import jtom.exception.*;

import tom.library.xml.*;

import jtom.tools.*;

import aterm.*;
import aterm.pure.*;

public class TomOptionManager implements OptionManager, OptionOwner {

  /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 2.1 source - Under development): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return null; }public boolean tom_cmp_fun_sym_PlatformOption(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t,  int  n) { return null; }public boolean tom_terms_equal_PlatformOption(Object t1, Object t2) { return t1.equals(t2); }public void tom_check_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformOption tom_set_stamp_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return (tom.platform.adt.platformoption.types.PlatformOption)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformOption tom_get_implementation_PlatformOption( tom.platform.adt.platformoption.types.PlatformOption t) { return t; }public boolean tom_is_fun_sym_PluginOption( tom.platform.adt.platformoption.types.PlatformOption t) { return  (t!= null) && t.isPluginOption(); }public  tom.platform.adt.platformoption.types.PlatformOption tom_make_PluginOption( String  t0,  String  t1,  String  t2,  tom.platform.adt.platformoption.types.PlatformValue t3,  String  t4) { return  getPlatformOptionFactory().makePlatformOption_PluginOption(t0, t1, t2, t3, t4); }public  String  tom_get_slot_PluginOption_name( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getName(); }public  String  tom_get_slot_PluginOption_altName( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getAltName(); }public  String  tom_get_slot_PluginOption_description( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getDescription(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_get_slot_PluginOption_value( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getValue(); }public  String  tom_get_slot_PluginOption_attrName( tom.platform.adt.platformoption.types.PlatformOption t) { return  t.getAttrName(); }public Object tom_get_fun_sym_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return null; }public boolean tom_cmp_fun_sym_PlatformValue(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t,  int  n) { return null; }public boolean tom_terms_equal_PlatformValue(Object t1, Object t2) { return t1.equals(t2); }public void tom_check_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformValue tom_set_stamp_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return (tom.platform.adt.platformoption.types.PlatformValue)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformValue tom_get_implementation_PlatformValue( tom.platform.adt.platformoption.types.PlatformValue t) { return t; }public boolean tom_is_fun_sym_BooleanValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isBooleanValue(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_make_BooleanValue( tom.platform.adt.platformoption.types.PlatformBoolean t0) { return  getPlatformOptionFactory().makePlatformValue_BooleanValue(t0); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_slot_BooleanValue_booleanValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getBooleanValue(); }public boolean tom_is_fun_sym_StringValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isStringValue(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_make_StringValue( String  t0) { return  getPlatformOptionFactory().makePlatformValue_StringValue(t0); }public  String  tom_get_slot_StringValue_stringValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getStringValue(); }public boolean tom_is_fun_sym_IntegerValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  (t!= null) && t.isIntegerValue(); }public  tom.platform.adt.platformoption.types.PlatformValue tom_make_IntegerValue( int  t0) { return  getPlatformOptionFactory().makePlatformValue_IntegerValue(t0); }public  int  tom_get_slot_IntegerValue_integerValue( tom.platform.adt.platformoption.types.PlatformValue t) { return  t.getIntegerValue(); }public Object tom_get_fun_sym_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return null; }public boolean tom_cmp_fun_sym_PlatformBoolean(Object s1, Object s2) { return  false; }public Object tom_get_subterm_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t,  int  n) { return null; }public boolean tom_terms_equal_PlatformBoolean(Object t1, Object t2) { return t1.equals(t2); }public void tom_check_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_set_stamp_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return (tom.platform.adt.platformoption.types.PlatformBoolean)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_get_implementation_PlatformBoolean( tom.platform.adt.platformoption.types.PlatformBoolean t) { return t; }public boolean tom_is_fun_sym_True( tom.platform.adt.platformoption.types.PlatformBoolean t) { return  (t!= null) && t.isTrue(); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_True() { return  getPlatformOptionFactory().makePlatformBoolean_True(); }public boolean tom_is_fun_sym_False( tom.platform.adt.platformoption.types.PlatformBoolean t) { return  (t!= null) && t.isFalse(); }public  tom.platform.adt.platformoption.types.PlatformBoolean tom_make_False() { return  getPlatformOptionFactory().makePlatformBoolean_False(); }public Object tom_get_fun_sym_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return null; }public boolean tom_cmp_fun_sym_PlatformOptionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_PlatformOptionList(Object t1, Object t2) { return t1.equals(t2); }public  tom.platform.adt.platformoption.types.PlatformOption tom_get_head_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.getHead(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_tail_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.getTail(); }public boolean tom_is_empty_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList l) { return l.isEmpty(); }public void tom_check_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { if(t.getAnnotation(getPlatformOptionFactory().getPureFactory().makeList()) == getPlatformOptionFactory().getPureFactory().makeList())  return; else throw new RuntimeException("bad stamp"); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_set_stamp_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return (tom.platform.adt.platformoption.types.PlatformOptionList)t.setAnnotation(getPlatformOptionFactory().getPureFactory().makeList(),getPlatformOptionFactory().getPureFactory().makeList()); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_implementation_PlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return t; }public boolean tom_is_fun_sym_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList t) { return (t!= null) && t.isSortPlatformOptionList(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_empty_list_concPlatformOption() { return getPlatformOptionFactory().makePlatformOptionList(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_cons_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return getPlatformOptionFactory().makePlatformOptionList(e,l); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_append_list_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList l1,  tom.platform.adt.platformoption.types.PlatformOptionList l2) {    if(tom_is_empty_PlatformOptionList(l1)) {     return l2;    } else if(tom_is_empty_PlatformOptionList(l2)) {     return l1;    } else if(tom_is_empty_PlatformOptionList(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(l1))) {     return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(l1),l2);    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(l1),tom_append_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(l1),l2));    }   }  public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slice_concPlatformOption( tom.platform.adt.platformoption.types.PlatformOptionList begin,  tom.platform.adt.platformoption.types.PlatformOptionList end) {    if(tom_terms_equal_PlatformOptionList(begin,end)) {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_empty_list_concPlatformOption();    } else {      return ( tom.platform.adt.platformoption.types.PlatformOptionList)tom_cons_list_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOption)tom_get_head_PlatformOptionList(begin),( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_slice_concPlatformOption(( tom.platform.adt.platformoption.types.PlatformOptionList)tom_get_tail_PlatformOptionList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  (t!= null) && t.isEmpty(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_emptyPlatformOptionList() { return getPlatformOptionFactory().makePlatformOptionList(); }public boolean tom_is_fun_sym_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  (t!= null) && t.isMany(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_make_manyPlatformOptionList( tom.platform.adt.platformoption.types.PlatformOption e,  tom.platform.adt.platformoption.types.PlatformOptionList l) { return getPlatformOptionFactory().makePlatformOptionList(e,l); }public  tom.platform.adt.platformoption.types.PlatformOption tom_get_slot_manyPlatformOptionList_head( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  t.getHead(); }public  tom.platform.adt.platformoption.types.PlatformOptionList tom_get_slot_manyPlatformOptionList_tail( tom.platform.adt.platformoption.types.PlatformOptionList t) { return  t.getTail(); } 
  
  /**
   * Accessor method necessary to include adt/PlatformOption.tom
   * @return a PlatformOptionFactory
   */
  private PlatformOptionFactory getPlatformOptionFactory() {
    return PlatformOptionFactory.getInstance(SingletonFactory.getInstance());
  }

  /** The global options */    
  private PlatformOptionList globalOptions;
  
  /**  map the name of an option to the plugin which defines this option */
  private Map mapNameToOptionOwner;
  
  /** map the name of an option to the option itself */
  private Map mapNameToOption;

  /** map a shortname of an option to its full name */
  private Map mapShortNameToName;
  
  /** the list of input files extract from the commandLine */
  private List inputFileList;

  /**
   * Basic Constructor
   * @return a configurationManager that needs to be initialized
   */
  public TomOptionManager() {
    mapNameToOptionOwner = new HashMap();
    mapNameToOption = new HashMap();
    mapShortNameToName = new HashMap();
    inputFileList = new ArrayList();
  }

  /**
   * initialize does everything needed
   *
   * @return  an error code :
   * <ul>
   * <li>0 if no error was encountered</li>
   * <li>1 if something went wrong</li>
   * </ul>
   */
  public int initialize(ConfigurationManager confManager, String[] commandLine) {
    List optionOwnerList = new ArrayList(confManager.getPluginsList());
    optionOwnerList.add(this);
    this.globalOptions = confManager.getGlobalOptionList();    
    collectOptions(optionOwnerList, confManager.getPluginsList());
    this.inputFileList = processArguments(commandLine);
    if(this.inputFileList == null) {
      return 1;
    }
    return checkAllOptionsDepedencies(optionOwnerList);
  }

  /**
   *
   */
  public List getInputToCompileList() {
    return inputFileList;
  }
  
  /**
   * Sets an option to the desired value.
   * 
   * @param optionName the option's name
   * @param optionValue the option's desired value
   */
  public void setOption(String optionName, Object optionValue) {
    // trampoline to implement OptionOwner
    setOptionValue(optionName,optionValue);
  }
  
  public void setOptionValue(String optionName, Object optionValue) {
    // to implement OptionManager
    PlatformBoolean bool = null;
    if(optionValue instanceof Boolean) {
      bool = ((Boolean)optionValue).booleanValue()?tom_make_True():tom_make_False();
      setOptionPlatformValue(optionName, tom_make_BooleanValue(bool));
    } else if(optionValue instanceof Integer) {
      Integer v = (Integer) optionValue;
      setOptionPlatformValue(optionName, tom_make_IntegerValue(v.intValue()));
    } else if(optionValue instanceof String) {
      String v = (String) optionValue;
      setOptionPlatformValue(optionName, tom_make_StringValue(v));
    } else {
      throw new RuntimeException("unknown optionValue type: " + optionValue);
    }
    
    if(optionName.equals("verbose") && bool == tom_make_True()) {
      Tom.changeLogLevel(Level.INFO);
    } else if(optionName.equals("noWarning") && bool == tom_make_True()) {
      Tom.changeLogLevel(Level.SEVERE);
    }
  }
  
  /**
   * Returns the value of an option. Returns an Object which is a Boolean,
   * a String or an Integer depending on what the option type is.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return an Object containing the option's value
   */
  public Object getOptionValue(String name) {
    PlatformOption option = getOptionFromName(name);
    if(option != null) {
       { tom.platform.adt.platformoption.types.PlatformOption tom_match1_1=(( tom.platform.adt.platformoption.types.PlatformOption)option);{ if(tom_is_fun_sym_PluginOption(tom_match1_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformValue tom_match1_1_4=tom_get_slot_PluginOption_value(tom_match1_1); if(tom_is_fun_sym_BooleanValue(tom_match1_1_4) ||  false ) { { tom.platform.adt.platformoption.types.PlatformBoolean tom_match1_1_4_1=tom_get_slot_BooleanValue_booleanValue(tom_match1_1_4); if(tom_is_fun_sym_True(tom_match1_1_4_1) ||  false ) {
 return new Boolean(true);  }} }} } if(tom_is_fun_sym_PluginOption(tom_match1_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformValue tom_match1_1_4=tom_get_slot_PluginOption_value(tom_match1_1); if(tom_is_fun_sym_BooleanValue(tom_match1_1_4) ||  false ) { { tom.platform.adt.platformoption.types.PlatformBoolean tom_match1_1_4_1=tom_get_slot_BooleanValue_booleanValue(tom_match1_1_4); if(tom_is_fun_sym_False(tom_match1_1_4_1) ||  false ) {
 return new Boolean(false);  }} }} } if(tom_is_fun_sym_PluginOption(tom_match1_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformValue tom_match1_1_4=tom_get_slot_PluginOption_value(tom_match1_1); if(tom_is_fun_sym_IntegerValue(tom_match1_1_4) ||  false ) { { int  tom_match1_1_4_1=tom_get_slot_IntegerValue_integerValue(tom_match1_1_4); { int  value=tom_match1_1_4_1;
 return new Integer(value); }} }} } if(tom_is_fun_sym_PluginOption(tom_match1_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformValue tom_match1_1_4=tom_get_slot_PluginOption_value(tom_match1_1); if(tom_is_fun_sym_StringValue(tom_match1_1_4) ||  false ) { { String  tom_match1_1_4_1=tom_get_slot_StringValue_stringValue(tom_match1_1_4); { String  value=tom_match1_1_4_1;
 return value; }} }} }}}

    } else {
      getLogger().log(Level.SEVERE,"OptionNotFound",name);
      throw new RuntimeException();
    }
    return null;
  }

  /**
   * From OptionOwner Interface
   * @return the global options
   */
  public PlatformOptionList getDeclaredOptionList() {
    return globalOptions;
  }
  
  /**
   * From OptionOwner Interface
   * @return the prerequisites
   */
  public PlatformOptionList getRequiredOptionList() {
    PlatformOptionList prerequisites = tom_make_emptyPlatformOptionList();

    if(((Boolean)getOptionValue("debug")).booleanValue()) {
      prerequisites = tom_cons_list_concPlatformOption(tom_make_PluginOption("jCode","","",tom_make_BooleanValue(tom_make_True()),""),tom_append_list_concPlatformOption(prerequisites,tom_empty_list_concPlatformOption()));
      // for the moment debug is only available for Java as target language
    }
    
    // options destdir and output are incompatible
    if(!((String)getOptionValue("destdir")).equals(".")) {
      prerequisites = tom_cons_list_concPlatformOption(tom_make_PluginOption("output","","",tom_make_StringValue(""),""),tom_append_list_concPlatformOption(prerequisites,tom_empty_list_concPlatformOption()));
      // destdir is not set at its default value -> it has been changed
      // -> we want output at its default value
    }
    if(!((String)getOptionValue("output")).equals("")) {
      prerequisites = tom_cons_list_concPlatformOption(tom_make_PluginOption("destdir","","",tom_make_StringValue("."),""),tom_append_list_concPlatformOption(prerequisites,tom_empty_list_concPlatformOption()));
      // output is not set at its default value -> it has been changed
      // -> we want destdir at its default value
    }
    return prerequisites;
  }

  public void setOptionManager(OptionManager om) {}
  
  /**
   * collects the options/services provided by each plugin
   */
  private void collectOptions(List optionOwnerList, List plugins) {
    Iterator owners = optionOwnerList.iterator();
    while(owners.hasNext()) {
      OptionOwner owner = (OptionOwner)owners.next();
      PlatformOptionList list = owner.getDeclaredOptionList();
      owner.setOptionManager((OptionManager)this);
      while(!list.isEmpty()) {
        PlatformOption option = list.getHead();
         { tom.platform.adt.platformoption.types.PlatformOption tom_match2_1=(( tom.platform.adt.platformoption.types.PlatformOption)option);{ if(tom_is_fun_sym_PluginOption(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_PluginOption_name(tom_match2_1); { String  tom_match2_1_2=tom_get_slot_PluginOption_altName(tom_match2_1); { String  name=tom_match2_1_1; { String  altName=tom_match2_1_2;

            setOptionOwnerFromName(name, owner);
            setOptionFromName(name, option);
            if(altName.length() > 0) {
              mapShortNameToName.put(altName,name);
            }
          }}}} }}}

        list = list.getTail();
      }
    }
  }
  
  /**
   * Checks if every plugin's needs are fulfilled
   */
  private int checkAllOptionsDepedencies(List optionOwnerList) {
    Iterator owners = optionOwnerList.iterator();
    while(owners.hasNext()) {
      OptionOwner plugin = (OptionOwner)owners.next();
      if(!checkOptionDependency(plugin.getRequiredOptionList())) {
        getLogger().log(Level.SEVERE, "PrerequisitesIssue", plugin.getClass().getName());
        return 1;
      }
    }
    return 0;
  }

  private String getCanonicalName(String name) {
    if(mapShortNameToName.containsKey(name)) {
      return (String)mapShortNameToName.get(name);
    }
    return name;
  }

  private PlatformOption getOptionFromName(String name) {
    PlatformOption option = (PlatformOption)mapNameToOption.get(getCanonicalName(name));
    if(option == null) {
      getLogger().log(Level.SEVERE,"OptionNotFound",getCanonicalName(name));
    }
    return option;
  }
  
  private PlatformOption setOptionFromName(String name, PlatformOption option) {
    return (PlatformOption)mapNameToOption.put(getCanonicalName(name),option);
  }
  
  private OptionOwner getOptionOwnerFromName(String name) {
    OptionOwner plugin = (OptionOwner)mapNameToOptionOwner.get(getCanonicalName(name));
    if(plugin == null) {
      getLogger().log(Level.SEVERE,"OptionNotFound",getCanonicalName(name));
    }
    return plugin;
  }

  private void setOptionOwnerFromName(String name, OptionOwner plugin) {
    mapNameToOptionOwner.put(getCanonicalName(name),plugin);
  }
  
  private void setOptionPlatformValue(String name, PlatformValue value) {
    PlatformOption option = getOptionFromName(name);
    if(option != null) {
      PlatformOption newOption = option.setValue(value);
      Object replaced = setOptionFromName(name, newOption);
      getLogger().log(Level.FINER,"SetValue",new Object[]{name,value,replaced});
    } else {
      throw new RuntimeException();
    }
  }
  
  /**
   * Displays an help message indicating how to use the compiler.
   */
  private void displayHelp() {
    String beginning = "\nTom usage :"
	    + "\n\ttom [options] input[.t] [... input[.t]]"
	    + "\noptions :";
    StringBuffer buffer = new StringBuffer(beginning);
    buffer.append("\n\t-X <file>:\tDefines an alternate XML configuration file\n");
    
    Iterator it = mapNameToOption.values().iterator();
    while(it.hasNext()) {
      PlatformOption h = (PlatformOption)it.next();
       { tom.platform.adt.platformoption.types.PlatformOption tom_match3_1=(( tom.platform.adt.platformoption.types.PlatformOption)h);{ if(tom_is_fun_sym_PluginOption(tom_match3_1) ||  false ) { { String  tom_match3_1_1=tom_get_slot_PluginOption_name(tom_match3_1); { String  tom_match3_1_2=tom_get_slot_PluginOption_altName(tom_match3_1); { String  tom_match3_1_3=tom_get_slot_PluginOption_description(tom_match3_1); { String  tom_match3_1_5=tom_get_slot_PluginOption_attrName(tom_match3_1); { String  name=tom_match3_1_1; { String  altName=tom_match3_1_2; { String  description=tom_match3_1_3; { String  attrName=tom_match3_1_5;

          buffer.append("\t--" + name);
          if(attrName.length() > 0) {
            buffer.append(" <" + attrName+ ">");
          }
          if(altName.length() > 0) {
            buffer.append(" | -" + altName);
          }
          buffer.append(":\t" + description);
          buffer.append("\n");
        }}}}}}}} }}}
			
    }
    System.out.println(buffer.toString());
  }
  
  /**
   * Displays the current version of the TOM compiler.
   */
  public void displayVersion() {
    System.out.println("\njtom " + Tom.VERSION + "\n\n"
                       + "Copyright (C) 2000-2004 INRIA, Nancy, France.\n");
  }
  
  /**
   * Checks if all the options a plugin needs are here.
   * 
   * @param list a list of options that must be found with the right value
   * @return true if every option was found with the right value
   */
  private boolean checkOptionDependency(PlatformOptionList requiredOptions) {
     { tom.platform.adt.platformoption.types.PlatformOptionList tom_match4_1=(( tom.platform.adt.platformoption.types.PlatformOptionList)requiredOptions);{ if(tom_is_fun_sym_concPlatformOption(tom_match4_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformOptionList tom_match4_1_list1=tom_match4_1; if(tom_is_empty_PlatformOptionList(tom_match4_1_list1)) {

        return true;
       }} } if(tom_is_fun_sym_concPlatformOption(tom_match4_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformOptionList tom_match4_1_list1=tom_match4_1; if(!(tom_is_empty_PlatformOptionList(tom_match4_1_list1))) { { tom.platform.adt.platformoption.types.PlatformOption tom_match4_1_1=tom_get_head_PlatformOptionList(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_PlatformOptionList(tom_match4_1_list1); if(tom_is_fun_sym_PluginOption(tom_match4_1_1) ||  false ) { { String  tom_match4_1_1_1=tom_get_slot_PluginOption_name(tom_match4_1_1); { tom.platform.adt.platformoption.types.PlatformValue tom_match4_1_1_4=tom_get_slot_PluginOption_value(tom_match4_1_1); { String  name=tom_match4_1_1_1; { tom.platform.adt.platformoption.types.PlatformValue value=tom_match4_1_1_4; { tom.platform.adt.platformoption.types.PlatformOptionList tail=tom_match4_1_list1;


        PlatformOption option = getOptionFromName(name);
        if(option !=null) {
          PlatformValue localValue = option.getValue();
          if(value!= localValue) {
            getLogger().log(Level.SEVERE, "IncorrectOptionValue", new Object[]{name,value,getOptionValue(name)});
            return false;
          } else {
            return checkOptionDependency(tail);
          }
        } else {
          getLogger().log(Level.SEVERE, "IncorrectOptionValue", new Object[]{name,value,getOptionValue(name)});
          return false;
        }
      }}}}} }} }} }}}

    return false;
  }
  
  /**
   * This method takes the arguments given by the user and deduces the options
   * to set, then sets them.
   * 
   * @param argumentList
   * @return an array containing the name of the input files
   */
  private List processArguments(String[] argumentList) {
    List fileList = new ArrayList();
    StringBuffer imports = new StringBuffer();
    boolean outputEncountered = false;
    boolean destdirEncountered = false;
    int i = 0;

    try {
      for(; i < argumentList.length; i++) {
        String argument = argumentList[i];

        if(!argument.startsWith("-")) {
          // input file name, should never start with '-'
          fileList.add(argument);
        } else { // s does start with '-', thus is -or at least should be- an option
          argument = argument.substring(1); // crops the '-'
          if(argument.startsWith("-")) {
            // if there's another one
            argument = argument.substring(1); // crops the second '-'
          }
          if( argument.equals("help") || argument.equals("h") ) {
            displayHelp();
            return null;
          }
          if( argument.equals("version") || argument.equals("V") ) {
            displayVersion();
            return null;
          }
          if( argument.equals("X") ) {
            // just skip it,along with its argument
            i++;
            continue;
          }
          if( argument.equals("import") || argument.equals("I") ) {
            imports.append(argumentList[++i] + ":");
          }
          if( argument.equals("output") || argument.equals("o") ) {
            if(outputEncountered) {
              getLogger().log(Level.SEVERE, "OutputTwice");
              return null;
            } else {
              outputEncountered = true;
            }
          }
          if( argument.equals("destdir") || argument.equals("d") ) {
            if(destdirEncountered) {
              getLogger().log(Level.SEVERE, "DestdirTwice");
              return null;
            } else {
              destdirEncountered = true;
            }
          }

          PlatformOption option = getOptionFromName(argument);
          OptionOwner plugin = getOptionOwnerFromName(argument);

          if(option == null || plugin == null) {// option not found
            getLogger().log(Level.SEVERE, "InvalidOption", argumentList[i]);
            displayHelp();
            return null;
          } else {
             { tom.platform.adt.platformoption.types.PlatformOption tom_match5_1=(( tom.platform.adt.platformoption.types.PlatformOption)option);{ if(tom_is_fun_sym_PluginOption(tom_match5_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformValue tom_match5_1_4=tom_get_slot_PluginOption_value(tom_match5_1); if(tom_is_fun_sym_BooleanValue(tom_match5_1_4) ||  false ) {

                plugin.setOption(argument, Boolean.TRUE);
               }} } if(tom_is_fun_sym_PluginOption(tom_match5_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformValue tom_match5_1_4=tom_get_slot_PluginOption_value(tom_match5_1); if(tom_is_fun_sym_IntegerValue(tom_match5_1_4) ||  false ) {


                String t = argumentList[++i];
                plugin.setOption(argument, new Integer(t));
               }} } if(tom_is_fun_sym_PluginOption(tom_match5_1) ||  false ) { { tom.platform.adt.platformoption.types.PlatformValue tom_match5_1_4=tom_get_slot_PluginOption_value(tom_match5_1); if(tom_is_fun_sym_StringValue(tom_match5_1_4) ||  false ) {


                if ( !( argument.equals("import") || argument.equals("I") ) ) {
                  // "import" is handled in the end
                  String t = argumentList[++i];
                  plugin.setOption(argument, t);
                }
               }} }}}


            
          }     				
        }	
      }
    } catch (ArrayIndexOutOfBoundsException e) {
      getLogger().log(Level.SEVERE, "IncompleteOption", argumentList[--i]);
      return null;
    }
    
    setOptionValue("import",imports.toString());
    
    if(fileList.isEmpty()) {
      getLogger().log(Level.SEVERE, "NoFileToCompile");
      displayHelp();
      return null;
    } else if(fileList.size() > 1 && outputEncountered) {
      getLogger().log(Level.SEVERE, "OutputWithMultipleCompilation");
      displayHelp();
      return null;
    }
    
    return fileList;
  }
  
  /** logger accessor in case of logging needs*/
  private Logger getLogger() {
    return Logger.getLogger(getClass().getName());
  }
  
} // class TomOptionManager.t
