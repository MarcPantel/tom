/* Generated by TOM (version 3.0alpha): Do not edit this file */package jtom;

import java.util.*;
import java.io.*;

import jtom.adt.tnode.*;
import jtom.adt.tnode.types.*;

import jtom.adt.options.*;
import jtom.adt.options.types.*;

import jtom.exception.*;

import jtom.runtime.xml.*;

import jtom.tools.*;

import aterm.*;
import aterm.pure.*;

/**
 *
 *
 * @author Gr&eacute;gory ANDRIEN
 */
public class TomOptionManager implements OptionManager, TomPluginOptions {
  
  /* Generated by TOM (version 3.0alpha): Do not edit this file *//* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  char  tom_get_fun_sym_char( char  t) { return  t ; }public boolean tom_cmp_fun_sym_char( char  s1,  char  s2) { return  (s1==s2) ; }public Object tom_get_subterm_char( char  t,  int  n) { return  null ; }public boolean tom_terms_equal_char( char  t1,  char  t2) { return  (t1==t2) ; }public Object tom_get_fun_sym_Character( Character  t) { return  t ; }public boolean tom_cmp_fun_sym_Character(Object s1, Object s2) { return  (s1.equals(s2)) ; }public Object tom_get_subterm_Character( Character  t,  int  n) { return  null ; }public boolean tom_terms_equal_Character(Object t1, Object t2) { return  (t1.equals(t2)) ; }public boolean tom_is_fun_sym_Char( Character  t) { return  (t!= null) && (t instanceof Character) ; }public  Character  tom_make_Char( char  c) { return  new Character(c) ; }public  char  tom_get_slot_Char_c( Character  t) { return  t.charValue() ; } public  String  tom_get_fun_sym_String( String  t) { return  t ; }public boolean tom_cmp_fun_sym_String( String  s1,  String  s2) { return  (s1.equals(s2)) ; }public boolean tom_terms_equal_String( String  t1,  String  t2) { return  (t1.equals(t2)) ; }public  char  tom_get_head_String( String  s) { return  s.charAt(0) ; }public  String  tom_get_tail_String( String  s) { return  s.substring(1) ; }public boolean tom_is_empty_String( String  s) { return  (s.length()==0) ; }public boolean tom_is_fun_sym_concString( String  t) { return  (t!= null) && (t instanceof String) ; }public  String  tom_empty_list_concString() { return  "" ; }public  String  tom_cons_list_concString( char  c,  String  s) { return  (c+s) ; }public  String  tom_append_list_concString( String  l1,  String  l2) {    if(tom_is_empty_String(l1)) {     return l2;    } else if(tom_is_empty_String(l2)) {     return l1;    } else if(tom_is_empty_String(( String )tom_get_tail_String(l1))) {     return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),l2);    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(l1),tom_append_list_concString(( String )tom_get_tail_String(l1),l2));    }   }  public  String  tom_get_slice_concString( String  begin,  String  end) {    if(tom_terms_equal_String(begin,end)) {      return ( String )tom_empty_list_concString();    } else {      return ( String )tom_cons_list_concString(( char )tom_get_head_String(begin),( String )tom_get_slice_concString(( String )tom_get_tail_String(begin),end));    }   }    /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  public  int  tom_get_fun_sym_int( int  t) { return  t ; }public boolean tom_cmp_fun_sym_int( int  s1,  int  s2) { return  (s1==s2) ; }public Object tom_get_subterm_int( int  t,  int  n) { return  null ; }public boolean tom_terms_equal_int( int  t1,  int  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public  double  tom_get_fun_sym_double( double  t) { return  t ; }public boolean tom_cmp_fun_sym_double( double  s1,  double  s2) { return  (s1==s2) ; }public Object tom_get_subterm_double( double  t,  int  n) { return  null ; }public boolean tom_terms_equal_double( double  t1,  double  t2) { return  (t1==t2) ; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATerm( ATerm  t) { return  (((ATermAppl)t).getAFun()) ; }public boolean tom_cmp_fun_sym_ATerm(Object t1, Object t2) { return  t1 == t2 ; }public Object tom_get_subterm_ATerm( ATerm  t,  int  n) { return  (((ATermAppl)t).getArgument(n)) ; }public boolean tom_terms_equal_ATerm(Object t1, Object t2) { return  t1 == t2; } /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  public Object tom_get_fun_sym_ATermList( ATermList  t) { return  null /*((t instanceof ATermList)?factory.makeAFun("conc", 1, false):null)*/ ; }public boolean tom_cmp_fun_sym_ATermList(Object t1, Object t2) { return  false ; }public boolean tom_terms_equal_ATermList(Object l1, Object l2) { return  l1==l2 ; }public Object tom_get_head_ATermList( ATermList  l) { return  ((ATermList)l).getFirst() ; }public  ATermList  tom_get_tail_ATermList( ATermList  l) { return  ((ATermList)l).getNext() ; }public boolean tom_is_empty_ATermList( ATermList  l) { return  ((ATermList)l).isEmpty() ; } public Object tom_get_fun_sym_TNode( jtom.adt.tnode.types.TNode t) { return null; }public boolean tom_cmp_fun_sym_TNode(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TNode( jtom.adt.tnode.types.TNode t,  int  n) { return null; }public boolean tom_terms_equal_TNode(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_CommentNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isCommentNode(); }public  jtom.adt.tnode.types.TNode tom_make_CommentNode( String  t0) { return  getTNodeFactory().makeTNode_CommentNode(t0); }public  String  tom_get_slot_CommentNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_ProcessingInstructionNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isProcessingInstructionNode(); }public  jtom.adt.tnode.types.TNode tom_make_ProcessingInstructionNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_ProcessingInstructionNode(t0, t1); }public  String  tom_get_slot_ProcessingInstructionNode_target( jtom.adt.tnode.types.TNode t) { return  t.getTarget(); }public  String  tom_get_slot_ProcessingInstructionNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_TextNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isTextNode(); }public  jtom.adt.tnode.types.TNode tom_make_TextNode( String  t0) { return  getTNodeFactory().makeTNode_TextNode(t0); }public  String  tom_get_slot_TextNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_CDATASectionNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isCDATASectionNode(); }public  jtom.adt.tnode.types.TNode tom_make_CDATASectionNode( String  t0) { return  getTNodeFactory().makeTNode_CDATASectionNode(t0); }public  String  tom_get_slot_CDATASectionNode_data( jtom.adt.tnode.types.TNode t) { return  t.getData(); }public boolean tom_is_fun_sym_DocumentNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentNode(); }public  jtom.adt.tnode.types.TNode tom_make_DocumentNode( jtom.adt.tnode.types.TNode t0,  jtom.adt.tnode.types.TNode t1) { return  getTNodeFactory().makeTNode_DocumentNode(t0, t1); }public  jtom.adt.tnode.types.TNode tom_get_slot_DocumentNode_docType( jtom.adt.tnode.types.TNode t) { return  t.getDocType(); }public  jtom.adt.tnode.types.TNode tom_get_slot_DocumentNode_docElem( jtom.adt.tnode.types.TNode t) { return  t.getDocElem(); }public boolean tom_is_fun_sym_ElementNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isElementNode(); }public  jtom.adt.tnode.types.TNode tom_make_ElementNode( String  t0,  jtom.adt.tnode.types.TNodeList t1,  jtom.adt.tnode.types.TNodeList t2) { return  getTNodeFactory().makeTNode_ElementNode(t0, t1, t2); }public  String  tom_get_slot_ElementNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_ElementNode_attrList( jtom.adt.tnode.types.TNode t) { return  t.getAttrList(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_ElementNode_childList( jtom.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_AttributeNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isAttributeNode(); }public  jtom.adt.tnode.types.TNode tom_make_AttributeNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_AttributeNode(t0, t1, t2); }public  String  tom_get_slot_AttributeNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_AttributeNode_specified( jtom.adt.tnode.types.TNode t) { return  t.getSpecified(); }public  String  tom_get_slot_AttributeNode_value( jtom.adt.tnode.types.TNode t) { return  t.getValue(); }public boolean tom_is_fun_sym_DocumentTypeNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isDocumentTypeNode(); }public  jtom.adt.tnode.types.TNode tom_make_DocumentTypeNode( String  t0,  String  t1,  String  t2,  String  t3,  jtom.adt.tnode.types.TNodeList t4,  jtom.adt.tnode.types.TNodeList t5) { return  getTNodeFactory().makeTNode_DocumentTypeNode(t0, t1, t2, t3, t4, t5); }public  String  tom_get_slot_DocumentTypeNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  String  tom_get_slot_DocumentTypeNode_publicId( jtom.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_DocumentTypeNode_systemId( jtom.adt.tnode.types.TNode t) { return  t.getSystemId(); }public  String  tom_get_slot_DocumentTypeNode_internalSubset( jtom.adt.tnode.types.TNode t) { return  t.getInternalSubset(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_entities( jtom.adt.tnode.types.TNode t) { return  t.getEntities(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_DocumentTypeNode_notations( jtom.adt.tnode.types.TNode t) { return  t.getNotations(); }public boolean tom_is_fun_sym_EntityReferenceNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityReferenceNode(); }public  jtom.adt.tnode.types.TNode tom_make_EntityReferenceNode( String  t0,  jtom.adt.tnode.types.TNodeList t1) { return  getTNodeFactory().makeTNode_EntityReferenceNode(t0, t1); }public  String  tom_get_slot_EntityReferenceNode_name( jtom.adt.tnode.types.TNode t) { return  t.getName(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_EntityReferenceNode_childList( jtom.adt.tnode.types.TNode t) { return  t.getChildList(); }public boolean tom_is_fun_sym_EntityNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isEntityNode(); }public  jtom.adt.tnode.types.TNode tom_make_EntityNode( String  t0,  String  t1,  String  t2) { return  getTNodeFactory().makeTNode_EntityNode(t0, t1, t2); }public  String  tom_get_slot_EntityNode_notationName( jtom.adt.tnode.types.TNode t) { return  t.getNotationName(); }public  String  tom_get_slot_EntityNode_publicId( jtom.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_EntityNode_systemId( jtom.adt.tnode.types.TNode t) { return  t.getSystemId(); }public boolean tom_is_fun_sym_NotationNode( jtom.adt.tnode.types.TNode t) { return  (t!= null) && t.isNotationNode(); }public  jtom.adt.tnode.types.TNode tom_make_NotationNode( String  t0,  String  t1) { return  getTNodeFactory().makeTNode_NotationNode(t0, t1); }public  String  tom_get_slot_NotationNode_publicId( jtom.adt.tnode.types.TNode t) { return  t.getPublicId(); }public  String  tom_get_slot_NotationNode_systemId( jtom.adt.tnode.types.TNode t) { return  t.getSystemId(); }public Object tom_get_fun_sym_TNodeList( jtom.adt.tnode.types.TNodeList t) { return null; }public boolean tom_cmp_fun_sym_TNodeList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TNodeList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.tnode.types.TNode tom_get_head_TNodeList( jtom.adt.tnode.types.TNodeList l) { return l.getHead(); }public  jtom.adt.tnode.types.TNodeList tom_get_tail_TNodeList( jtom.adt.tnode.types.TNodeList l) { return l.getTail(); }public boolean tom_is_empty_TNodeList( jtom.adt.tnode.types.TNodeList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTNode( jtom.adt.tnode.types.TNodeList t) { return (t!= null) && t.isSortTNodeList(); }public  jtom.adt.tnode.types.TNodeList tom_empty_list_concTNode() { return getTNodeFactory().makeTNodeList(); }public  jtom.adt.tnode.types.TNodeList tom_cons_list_concTNode( jtom.adt.tnode.types.TNode e,  jtom.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  jtom.adt.tnode.types.TNodeList tom_append_list_concTNode( jtom.adt.tnode.types.TNodeList l1,  jtom.adt.tnode.types.TNodeList l2) {    if(tom_is_empty_TNodeList(l1)) {     return l2;    } else if(tom_is_empty_TNodeList(l2)) {     return l1;    } else if(tom_is_empty_TNodeList(( jtom.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1))) {     return ( jtom.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( jtom.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),l2);    } else {      return ( jtom.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( jtom.adt.tnode.types.TNode)tom_get_head_TNodeList(l1),tom_append_list_concTNode(( jtom.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(l1),l2));    }   }  public  jtom.adt.tnode.types.TNodeList tom_get_slice_concTNode( jtom.adt.tnode.types.TNodeList begin,  jtom.adt.tnode.types.TNodeList end) {    if(tom_terms_equal_TNodeList(begin,end)) {      return ( jtom.adt.tnode.types.TNodeList)tom_empty_list_concTNode();    } else {      return ( jtom.adt.tnode.types.TNodeList)tom_cons_list_concTNode(( jtom.adt.tnode.types.TNode)tom_get_head_TNodeList(begin),( jtom.adt.tnode.types.TNodeList)tom_get_slice_concTNode(( jtom.adt.tnode.types.TNodeList)tom_get_tail_TNodeList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTNodeList( jtom.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.tnode.types.TNodeList tom_make_emptyTNodeList() { return getTNodeFactory().makeTNodeList(); }public boolean tom_is_fun_sym_manyTNodeList( jtom.adt.tnode.types.TNodeList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.tnode.types.TNodeList tom_make_manyTNodeList( jtom.adt.tnode.types.TNode e,  jtom.adt.tnode.types.TNodeList l) { return getTNodeFactory().makeTNodeList(e,l); }public  jtom.adt.tnode.types.TNode tom_get_slot_manyTNodeList_head( jtom.adt.tnode.types.TNodeList t) { return  t.getHead(); }public  jtom.adt.tnode.types.TNodeList tom_get_slot_manyTNodeList_tail( jtom.adt.tnode.types.TNodeList t) { return  t.getTail(); } /* Generated by TOM (version 3.0alpha): Do not edit this file */public Object tom_get_fun_sym_TomOption( jtom.adt.options.types.TomOption t) { return null; }public boolean tom_cmp_fun_sym_TomOption(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomOption( jtom.adt.options.types.TomOption t,  int  n) { return null; }public boolean tom_terms_equal_TomOption(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_OptionBoolean( jtom.adt.options.types.TomOption t) { return  (t!= null) && t.isOptionBoolean(); }public  jtom.adt.options.types.TomOption tom_make_OptionBoolean( String  t0,  String  t1,  String  t2,  jtom.adt.options.types.TomBoolean t3) { return  getOptionsFactory().makeTomOption_OptionBoolean(t0, t1, t2, t3); }public  String  tom_get_slot_OptionBoolean_name( jtom.adt.options.types.TomOption t) { return  t.getName(); }public  String  tom_get_slot_OptionBoolean_altName( jtom.adt.options.types.TomOption t) { return  t.getAltName(); }public  String  tom_get_slot_OptionBoolean_description( jtom.adt.options.types.TomOption t) { return  t.getDescription(); }public  jtom.adt.options.types.TomBoolean tom_get_slot_OptionBoolean_valueB( jtom.adt.options.types.TomOption t) { return  t.getValueB(); }public boolean tom_is_fun_sym_OptionInteger( jtom.adt.options.types.TomOption t) { return  (t!= null) && t.isOptionInteger(); }public  jtom.adt.options.types.TomOption tom_make_OptionInteger( String  t0,  String  t1,  String  t2,  int  t3,  String  t4) { return  getOptionsFactory().makeTomOption_OptionInteger(t0, t1, t2, t3, t4); }public  String  tom_get_slot_OptionInteger_name( jtom.adt.options.types.TomOption t) { return  t.getName(); }public  String  tom_get_slot_OptionInteger_altName( jtom.adt.options.types.TomOption t) { return  t.getAltName(); }public  String  tom_get_slot_OptionInteger_description( jtom.adt.options.types.TomOption t) { return  t.getDescription(); }public  int  tom_get_slot_OptionInteger_valueI( jtom.adt.options.types.TomOption t) { return  t.getValueI(); }public  String  tom_get_slot_OptionInteger_attrName( jtom.adt.options.types.TomOption t) { return  t.getAttrName(); }public boolean tom_is_fun_sym_OptionString( jtom.adt.options.types.TomOption t) { return  (t!= null) && t.isOptionString(); }public  jtom.adt.options.types.TomOption tom_make_OptionString( String  t0,  String  t1,  String  t2,  String  t3,  String  t4) { return  getOptionsFactory().makeTomOption_OptionString(t0, t1, t2, t3, t4); }public  String  tom_get_slot_OptionString_name( jtom.adt.options.types.TomOption t) { return  t.getName(); }public  String  tom_get_slot_OptionString_altName( jtom.adt.options.types.TomOption t) { return  t.getAltName(); }public  String  tom_get_slot_OptionString_description( jtom.adt.options.types.TomOption t) { return  t.getDescription(); }public  String  tom_get_slot_OptionString_valueS( jtom.adt.options.types.TomOption t) { return  t.getValueS(); }public  String  tom_get_slot_OptionString_attrName( jtom.adt.options.types.TomOption t) { return  t.getAttrName(); }public Object tom_get_fun_sym_TomBoolean( jtom.adt.options.types.TomBoolean t) { return null; }public boolean tom_cmp_fun_sym_TomBoolean(Object s1, Object s2) { return  false; }public Object tom_get_subterm_TomBoolean( jtom.adt.options.types.TomBoolean t,  int  n) { return null; }public boolean tom_terms_equal_TomBoolean(Object t1, Object t2) { return t1.equals(t2); }public boolean tom_is_fun_sym_True( jtom.adt.options.types.TomBoolean t) { return  (t!= null) && t.isTrue(); }public  jtom.adt.options.types.TomBoolean tom_make_True() { return  getOptionsFactory().makeTomBoolean_True(); }public boolean tom_is_fun_sym_False( jtom.adt.options.types.TomBoolean t) { return  (t!= null) && t.isFalse(); }public  jtom.adt.options.types.TomBoolean tom_make_False() { return  getOptionsFactory().makeTomBoolean_False(); }public Object tom_get_fun_sym_TomOptionList( jtom.adt.options.types.TomOptionList t) { return null; }public boolean tom_cmp_fun_sym_TomOptionList(Object s1, Object s2) { return  false; }public boolean tom_terms_equal_TomOptionList(Object t1, Object t2) { return t1.equals(t2); }public  jtom.adt.options.types.TomOption tom_get_head_TomOptionList( jtom.adt.options.types.TomOptionList l) { return l.getHead(); }public  jtom.adt.options.types.TomOptionList tom_get_tail_TomOptionList( jtom.adt.options.types.TomOptionList l) { return l.getTail(); }public boolean tom_is_empty_TomOptionList( jtom.adt.options.types.TomOptionList l) { return l.isEmpty(); }public boolean tom_is_fun_sym_concTomOption( jtom.adt.options.types.TomOptionList t) { return (t!= null) && t.isSortTomOptionList(); }public  jtom.adt.options.types.TomOptionList tom_empty_list_concTomOption() { return getOptionsFactory().makeTomOptionList(); }public  jtom.adt.options.types.TomOptionList tom_cons_list_concTomOption( jtom.adt.options.types.TomOption e,  jtom.adt.options.types.TomOptionList l) { return getOptionsFactory().makeTomOptionList(e,l); }public  jtom.adt.options.types.TomOptionList tom_append_list_concTomOption( jtom.adt.options.types.TomOptionList l1,  jtom.adt.options.types.TomOptionList l2) {    if(tom_is_empty_TomOptionList(l1)) {     return l2;    } else if(tom_is_empty_TomOptionList(l2)) {     return l1;    } else if(tom_is_empty_TomOptionList(( jtom.adt.options.types.TomOptionList)tom_get_tail_TomOptionList(l1))) {     return ( jtom.adt.options.types.TomOptionList)tom_cons_list_concTomOption(( jtom.adt.options.types.TomOption)tom_get_head_TomOptionList(l1),l2);    } else {      return ( jtom.adt.options.types.TomOptionList)tom_cons_list_concTomOption(( jtom.adt.options.types.TomOption)tom_get_head_TomOptionList(l1),tom_append_list_concTomOption(( jtom.adt.options.types.TomOptionList)tom_get_tail_TomOptionList(l1),l2));    }   }  public  jtom.adt.options.types.TomOptionList tom_get_slice_concTomOption( jtom.adt.options.types.TomOptionList begin,  jtom.adt.options.types.TomOptionList end) {    if(tom_terms_equal_TomOptionList(begin,end)) {      return ( jtom.adt.options.types.TomOptionList)tom_empty_list_concTomOption();    } else {      return ( jtom.adt.options.types.TomOptionList)tom_cons_list_concTomOption(( jtom.adt.options.types.TomOption)tom_get_head_TomOptionList(begin),( jtom.adt.options.types.TomOptionList)tom_get_slice_concTomOption(( jtom.adt.options.types.TomOptionList)tom_get_tail_TomOptionList(begin),end));    }   }  public boolean tom_is_fun_sym_emptyTomOptionList( jtom.adt.options.types.TomOptionList t) { return  (t!= null) && t.isEmpty(); }public  jtom.adt.options.types.TomOptionList tom_make_emptyTomOptionList() { return getOptionsFactory().makeTomOptionList(); }public boolean tom_is_fun_sym_manyTomOptionList( jtom.adt.options.types.TomOptionList t) { return  (t!= null) && t.isMany(); }public  jtom.adt.options.types.TomOptionList tom_make_manyTomOptionList( jtom.adt.options.types.TomOption e,  jtom.adt.options.types.TomOptionList l) { return getOptionsFactory().makeTomOptionList(e,l); }public  jtom.adt.options.types.TomOption tom_get_slot_manyTomOptionList_head( jtom.adt.options.types.TomOptionList t) { return  t.getHead(); }public  jtom.adt.options.types.TomOptionList tom_get_slot_manyTomOptionList_tail( jtom.adt.options.types.TomOptionList t) { return  t.getTail(); } 


  /**
   * A list containing the owners of options (which implement TomPluginOptions).
   */
  private List owners;

  /**
   * The global options.
   */    
  private TomOptionList globalOptions;

  /**
   * This list is used solely to display the help message.
   */
  private TomOptionList helpList;

  /**
   * A Map allowing to match option names and plugins.
   */
  private Map optionOwners;

  /**
   * A Map allowing to match option names and their types.
   */
  private Map optionTypes;

  /**
   * A Map allowing to match option names and their values.
   */
  private Map optionValues;

  /**
   * An option can have up to two different names ; this map allows us to find synonyms.
   */
  private Map synonyms;

  /**
   *
   *
   * @return
   */
  private TNodeFactory getTNodeFactory() {
    XmlTools xtools = new XmlTools();
    return xtools.getTNodeFactory();
  }

  private OptionsFactory getOptionsFactory() {
    return environment().getOptionsFactory();
  }

  private TomEnvironment environment() { return TomServer.getInstance().getEnvironment(); }

  public TomOptionManager() {
    optionOwners = new HashMap();
    optionTypes = new HashMap();
    optionValues = new HashMap();
    synonyms = new HashMap();
  }

  public void setPlugins(List plugins) {
    owners = new ArrayList();
    owners.add(this);
    owners.addAll(plugins);

//     for(int i=0; i<owners.size(); i++)
// 	System.out.println(owners.get(i));
  }

  /**
   * This method does the following :
   * <ul>
   * <li>a first call to declaredOptions() on the TomServer and each plugin, in order to determine
   * which options exist and their default values ;</li>
   * <li>a call to processArguments() in order to read the command line and set the options to
   * their actual values ;</li>
   * <li>a second call to declaredOptions() in order to collect the options' real value ;</li>
   * <li>it then tells the environment to set some values right ;</li>
   * <li>eventually, prerequisites are checked.</li>
   * </ul>
   * 
   * @param argumentList the command line
   * @return an array of String containing the names of the files to compile
   */
  public String[] optionManagement(String[] argumentList) {
    helpList = tom_make_emptyTomOptionList(); // is initialized here and not in create() cause method isn't static

    // collects the options/services provided by each plugin
    Iterator it = owners.iterator();
    while(it.hasNext()) {
      TomPluginOptions plugin = (TomPluginOptions)it.next();

      TomOptionList list = plugin.declaredOptions();
      helpList = tom_append_list_concTomOption(helpList,tom_append_list_concTomOption(list,tom_empty_list_concTomOption()));
     
      while(!(list.isEmpty())) {
	  TomOption option = list.getHead();
	  
	   { jtom.adt.options.types.TomOption tom_match1_1=(( jtom.adt.options.types.TomOption)option);{ if(tom_is_fun_sym_OptionBoolean(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_OptionBoolean_name(tom_match1_1); { String  tom_match1_1_2=tom_get_slot_OptionBoolean_altName(tom_match1_1); { jtom.adt.options.types.TomBoolean tom_match1_1_4=tom_get_slot_OptionBoolean_valueB(tom_match1_1); { String  n=tom_match1_1_1; { String  an=tom_match1_1_2; { jtom.adt.options.types.TomBoolean v=tom_match1_1_4;


		  optionOwners.put(n, plugin);
		  optionTypes.put(n,"boolean");
		  optionValues.put(n, new Boolean(v.isTrue()));
		  if( an.length() > 0 ) {
		      optionOwners.put(an, plugin);
		      optionTypes.put(an,"boolean");
		      optionValues.put(an, new Boolean(v.isTrue()));
		      synonyms.put(n,an);
		      synonyms.put(an,n);
		  }
	      }}}}}} } if(tom_is_fun_sym_OptionInteger(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_OptionInteger_name(tom_match1_1); { String  tom_match1_1_2=tom_get_slot_OptionInteger_altName(tom_match1_1); { int  tom_match1_1_4=tom_get_slot_OptionInteger_valueI(tom_match1_1); { String  n=tom_match1_1_1; { String  an=tom_match1_1_2; { int  v=tom_match1_1_4;



		  optionOwners.put(n, plugin);
		  optionTypes.put(n,"integer");
		  optionValues.put(n, new Integer(v));
		  if( an.length() > 0 ) {
		      optionOwners.put(an, plugin);
		      optionTypes.put(an,"integer");
		      optionValues.put(an, new Integer(v));
		      synonyms.put(n,an);
		      synonyms.put(an,n);
		  }
	      }}}}}} } if(tom_is_fun_sym_OptionString(tom_match1_1) ||  false ) { { String  tom_match1_1_1=tom_get_slot_OptionString_name(tom_match1_1); { String  tom_match1_1_2=tom_get_slot_OptionString_altName(tom_match1_1); { String  tom_match1_1_4=tom_get_slot_OptionString_valueS(tom_match1_1); { String  n=tom_match1_1_1; { String  an=tom_match1_1_2; { String  v=tom_match1_1_4;



		  optionOwners.put(n, plugin);
		  optionTypes.put(n,"string");
		  optionValues.put(n, v);
		  if( an.length() > 0 ) {
		      optionOwners.put(an, plugin);
		      optionTypes.put(an,"string");
		      optionValues.put(an, v);
		      synonyms.put(n,an);
		      synonyms.put(an,n);
		  }
	      }}}}}} }}}

		  
	  list = list.getTail();
      }
    }
    
    // set options accordingly to the arguments given in input
    String[] inputFiles = processArguments(argumentList);

    environment().initInputFromArgs(); // is here because options need to be set to the right value before

    // checks if every plugin's needs are fulfilled
    it = owners.iterator();
    while(it.hasNext()) {
      TomPluginOptions plugin = (TomPluginOptions)it.next();
      boolean canGoOn = arePrerequisitesMet(plugin.requiredOptions());
      if (!canGoOn) {
        environment().messageError(TomMessage.getString("PrerequisitesIssue"), 
                                 new Object[]{plugin.getClass().getName()},
                                 "TomServer",
                                 TomMessage.DEFAULT_ERROR_LINE_NUMBER);
      }
    }
    
    return inputFiles;
  }

  /**
   * Returns the value of an option. Returns an Object which is a Boolean, a String or an Integer
   * depending on what the option type is.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return an Object containing the option's value
   */
  public Object getOptionValue(String optionName)
  {
    Object obj = optionValues.get(optionName);

    if (obj == null) {
	environment().messageError(TomMessage.getString("OptionNotFound"), new Object[]{optionName}, 
				 "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	return null;
    } else {
	return obj;
    }
  }

  /**
   * Returns the value of a boolean option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return a boolean that is the option's value
   */
  public boolean getOptionBooleanValue(String optionName)
  {
    Object obj = optionValues.get(optionName);

    if (obj == null) {
	environment().messageError(TomMessage.getString("OptionNotFound"), new Object[]{optionName}, 
				 "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	return false;
    } else {
	try {
	    return ((Boolean)obj).booleanValue();
	} catch (ClassCastException cce) {
	    environment().messageError(TomMessage.getString("OptionNotFound"), new Object[]{optionName}, 
				     "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	    return false; // we shouldn't be here if the option is indeed a boolean option, that's why we raise an error
	}
    }
  }
    
  /**
   * Returns the value of an integer option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return an int that is the option's value
   */
  public int getOptionIntegerValue(String optionName)
  {
    Object obj = optionValues.get(optionName);

    if (obj == null) {
	environment().messageError(TomMessage.getString("OptionNotFound"), new Object[]{optionName}, 
				 "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	return 0;
    } else {
	try {
	return ((Integer)obj).intValue();
	} catch (ClassCastException cce) {
	    environment().messageError(TomMessage.getString("OptionNotFound"), new Object[]{optionName}, 
				     "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	    return 0; // we shouldn't be here if the option is indeed an integer option, that's why we raise an error
	}
    }
  }
    
  /**
   * Returns the value of a string option.
   * 
   * @param optionName the name of the option whose value is seeked
   * @return a String that is the option's value
   */
  public String getOptionStringValue(String optionName)
  {
    Object obj = optionValues.get(optionName);

    if (obj == null) {
	environment().messageError(TomMessage.getString("OptionNotFound"), new Object[]{optionName}, 
				 "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	return null;
    } else {
	try {
	return (String)obj;
	} catch (ClassCastException cce) {
	    environment().messageError(TomMessage.getString("OptionNotFound"), new Object[]{optionName}, 
				     "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	    return null; // we shouldn't be here if the option is indeed a string option, that's why we raise an error
	}
    }
  }

  public void putOptionValue(Object key, Object value) {
    Object replaced = optionValues.put(key, value);
    //System.out.println("Replaced " +replaced+ " by " +value+ " (" +key+ ")");
    Object synonym = synonyms.get(key);
    if( synonym != null ) { // if a synonym exists
      replaced = optionValues.put(synonym, value);
      //System.out.println("Replaced " +replaced+ " by " +value+ " (" +synonym+ ")");
    }
  }

  /**
   * Self-explanatory. Displays an help message indicating how to use the compiler.
   */
  private void displayHelp()
  {
    String beginning = "\nusage :"
	    + "\n\ttom [options] input[.t] [... input[.t]]"
	    + "\noptions :";
    StringBuffer buffy = new StringBuffer(beginning);

    buffy.append("\n\t-X <file> \t \t : \tDefines an alternate XML configuration file");

    while(!(helpList.isEmpty()))
	{
            TomOption h = helpList.getHead();
             { jtom.adt.options.types.TomOption tom_match2_1=(( jtom.adt.options.types.TomOption)h);{ if(tom_is_fun_sym_OptionBoolean(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_OptionBoolean_name(tom_match2_1); { String  tom_match2_1_2=tom_get_slot_OptionBoolean_altName(tom_match2_1); { String  tom_match2_1_3=tom_get_slot_OptionBoolean_description(tom_match2_1); { jtom.adt.options.types.TomBoolean tom_match2_1_4=tom_get_slot_OptionBoolean_valueB(tom_match2_1); { String  n=tom_match2_1_1; { String  a=tom_match2_1_2; { String  d=tom_match2_1_3; if(tom_is_fun_sym_False(tom_match2_1_4) ||  false ) {



                String s;
                if(a.length() > 0)
                  s = "\n\t--"+n+" \t| -"+a+" : \t"+d;
                else
                  s = "\n\t--"+n+" \t \t : \t"+d;
                buffy.append(s);
               }}}}}}}} } if(tom_is_fun_sym_OptionBoolean(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_OptionBoolean_name(tom_match2_1); { String  tom_match2_1_2=tom_get_slot_OptionBoolean_altName(tom_match2_1); { String  tom_match2_1_3=tom_get_slot_OptionBoolean_description(tom_match2_1); { jtom.adt.options.types.TomBoolean tom_match2_1_4=tom_get_slot_OptionBoolean_valueB(tom_match2_1); { String  n=tom_match2_1_1; { String  a=tom_match2_1_2; { String  d=tom_match2_1_3; if(tom_is_fun_sym_True(tom_match2_1_4) ||  false ) {


                String s;
                if(a.length() > 0)
                  s = "\n\t--"+n+" \t| -"+a+" : \t"+d+" (activated by default)";
                else
                  s = "\n\t--"+n+" \t \t : \t"+d+" (activated by default)";
                buffy.append(s);
               }}}}}}}} } if(tom_is_fun_sym_OptionInteger(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_OptionInteger_name(tom_match2_1); { String  tom_match2_1_2=tom_get_slot_OptionInteger_altName(tom_match2_1); { String  tom_match2_1_3=tom_get_slot_OptionInteger_description(tom_match2_1); { String  tom_match2_1_5=tom_get_slot_OptionInteger_attrName(tom_match2_1); { String  n=tom_match2_1_1; { String  a=tom_match2_1_2; { String  d=tom_match2_1_3; { String  at=tom_match2_1_5;


                String s;
                if(a.length() > 0)
                  s = "\n\t--"+n+" <"+at+"> \t| -"+a+" : \t"+d;
                else
                  s = "\n\t--"+n+" <"+at+"> \t \t : \t"+d;
                buffy.append(s);
              }}}}}}}} } if(tom_is_fun_sym_OptionString(tom_match2_1) ||  false ) { { String  tom_match2_1_1=tom_get_slot_OptionString_name(tom_match2_1); { String  tom_match2_1_2=tom_get_slot_OptionString_altName(tom_match2_1); { String  tom_match2_1_3=tom_get_slot_OptionString_description(tom_match2_1); { String  tom_match2_1_5=tom_get_slot_OptionString_attrName(tom_match2_1); { String  n=tom_match2_1_1; { String  a=tom_match2_1_2; { String  d=tom_match2_1_3; { String  at=tom_match2_1_5;


                String s;
                if(a.length() > 0)
                  s = "\n\t--"+n+" <"+at+"> \t| -"+a+" : \t"+d;
                else
                  s = "\n\t--"+n+" <"+at+"> \t \t : \t"+d;
                buffy.append(s);
              }}}}}}}} }}}
			
            helpList = helpList.getTail();
          }
	
    System.out.println(buffy.toString());
    System.exit(0);
  }

  /**
   * Self-explanatory. Displays the current version of the TOM compiler.
   */
  public void displayVersion()
  {
    System.out.println("\njtom " + TomServer.VERSION + "\n\n"
                       + "Copyright (C) 2000-2004 INRIA, Nancy, France.\n");
    System.exit(0);
  }

  /**
   * Checks if all the options a plugin needs are here.
   * 
   * @param list a list of options that must be found with the right value
   * @return true if every option was found with the right value, false otherwise
   */
  private boolean arePrerequisitesMet(TomOptionList list) {
      while(!(list.isEmpty())) {
	  TomOption option = list.getHead();
	  String optionName = option.getName();
	
	  if( option.isOptionBoolean() ) {
	      boolean expectedValue = option.getValueB().isTrue();
	      boolean actualValue = getOptionBooleanValue(optionName);
	      if ( actualValue != expectedValue ) {
		  environment().messageError(TomMessage.getString("IncorrectOptionValue"),
					   new Object[]{optionName,Boolean.toString(expectedValue),Boolean.toString(actualValue)},
					   "TomServer",TomMessage.DEFAULT_ERROR_LINE_NUMBER);
		  return false;
	      }
	  } else if( option.isOptionInteger() ) {
	      int expectedValue = option.getValueI();
	      int actualValue = getOptionIntegerValue(optionName);
	      if ( actualValue != expectedValue ) {
		  environment().messageError(TomMessage.getString("IncorrectOptionValue"),
					   new Object[]{optionName,Integer.toString(expectedValue),Integer.toString(actualValue)},
					   "TomServer",TomMessage.DEFAULT_ERROR_LINE_NUMBER);
		  return false;
	      }
	  } else if( option.isOptionString() ) {
	      String expectedValue = option.getValueS();
	      String actualValue = getOptionStringValue(optionName);
	      if ( ! actualValue.equals(expectedValue) ) {
		  environment().messageError(TomMessage.getString("IncorrectOptionValue"),
					   new Object[]{optionName,expectedValue,actualValue},
					   "TomServer",TomMessage.DEFAULT_ERROR_LINE_NUMBER);
		  return false;
	      }
	  }
        
	  list = list.getTail();
      }
      return true;
  }



  /**
   * 
   * @return the global options
   */
  public TomOptionList declaredOptions()
  {
    return globalOptions;
  }

  /**
   * 
   * @return the prerequisites
   */
  public TomOptionList requiredOptions()
  {
    TomOptionList prerequisites = tom_make_emptyTomOptionList();

    if( getOptionBooleanValue("debug") ) {
      prerequisites = tom_cons_list_concTomOption(tom_make_OptionBoolean("jCode", "", "", tom_make_True()),tom_append_list_concTomOption(prerequisites,tom_empty_list_concTomOption()));
      // for the moment debug is only available for Java as target language
    }

    // options destdir and output are incompatible

    if( !getOptionStringValue("destdir").equals(".") ) {
      prerequisites = tom_cons_list_concTomOption(tom_make_OptionString("output", "", "", "", ""),tom_append_list_concTomOption(prerequisites,tom_empty_list_concTomOption()));
      // destdir is not set at its default value -> it has been changed
      // -> we want output at its default value
    }

    if( !getOptionStringValue("output").equals("") ) {
      prerequisites = tom_cons_list_concTomOption(tom_make_OptionString("destdir", "", "", ".", ""),tom_append_list_concTomOption(prerequisites,tom_empty_list_concTomOption()));
      // output is not set at its default value -> it has been changed
      // -> we want destdir at its default value
    }

    return prerequisites;
  }

  /**
   * Sets an option to the desired value.
   * 
   * @param optionName the option's name
   * @param optionValue the option's desired value
   */
  public void setOption(String optionName, Object optionValue) {
    putOptionValue(optionName, optionValue);
  }

  /**
   * This method takes the arguments given by the user and deduces the options to set, then sets them.
   * 
   * @param argumentList
   * @return an array containing the name of the input files
   */
  private String[] processArguments(String[] argumentList)
  {
    List inputFiles = new ArrayList();
    StringBuffer imports = new StringBuffer();
    boolean outputEncountered = false;
    boolean destdirEncountered = false;
    int i = 0;

    try
	    {
        for(; i < argumentList.length; i++)
          {
            String s = argumentList[i];
			
            if(!s.startsWith("-")) // input file name, should never start with '-'
              inputFiles.add(s);
            else // s does start with '-', thus is -or at least should be- an option
              {
                s = s.substring(1); // crops the '-'
                if(s.startsWith("-")) // if there's another one
                  s = s.substring(1); // crops the second '-'
				
                if( s.equals("help") || s.equals("h") )
                  displayHelp();
                if( s.equals("version") || s.equals("V") )
                  displayVersion();
                if( s.equals("X") )
                  {
                    // if we're here, the TomServer has already handled the "-X" option
                    // and all errors that might occur
                    // just skip it,along with its argument
                    i++;
                    continue;
                  }
                if( s.equals("import") || s.equals("I") )
                  {
                    imports.append(argumentList[++i] + ":");
                  }
                if( s.equals("output") || s.equals("o") )
                  {
                    if(outputEncountered)
                      {
                        environment().messageError(TomMessage.getString("OutputTwice"),
                                                 "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
                      }
                    else outputEncountered = true;
                  }
                if( s.equals("destdir") || s.equals("d") )
                  {
                    if(destdirEncountered)
                      {
                        environment().messageError(TomMessage.getString("DestdirTwice"),
                                                 "TomServer", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
                      }
                    else destdirEncountered = true;
                  }

		String type = (String)optionTypes.get(s);
		TomPluginOptions plugin = (TomPluginOptions)optionOwners.get(s);

                if(type == null || plugin == null) // option not found
                  {
                    environment().messageError(TomMessage.getString("InvalidOption"), 
                                             new Object[]{argumentList[i]},
                                             "TomServer", 
                                             TomMessage.DEFAULT_ERROR_LINE_NUMBER);
                    return (String[])inputFiles.toArray(new String[]{});
                  }
                else
                  {                    				
                    if (type.equals("boolean"))
                      {
			  plugin.setOption(s, Boolean.TRUE);
                      }
                    else if (type.equals("integer"))
                      {
                        String t = argumentList[++i];
                        plugin.setOption(s, new Integer(t));
                      }
                    else if (type.equals("string")) 
                      {
                        if ( !( s.equals("import") || s.equals("I") ) ) // "import" is handled in the end
                          {
                            String t = argumentList[++i];
                            plugin.setOption(s, t);
                          }
                      }
                  }	
              }
          }
	    }
    catch (ArrayIndexOutOfBoundsException e) 
	    {
        environment().messageError(TomMessage.getString("IncompleteOption"), 
                                 new Object[]{argumentList[--i]}, 
                                 "TomServer", 
                                 TomMessage.DEFAULT_ERROR_LINE_NUMBER);
        return (String[])inputFiles.toArray(new String[]{});
	    }

    setOption("import",imports.toString());

    if(inputFiles.isEmpty())
	    {
        environment().messageError(TomMessage.getString("NoFileToCompile"), 
                                 "TomServer", 
                                 TomMessage.DEFAULT_ERROR_LINE_NUMBER);
	    }

    return (String[])inputFiles.toArray(new String[]{});	
  }

  /**
   * Extracts the global options from the XML configuration file.
   * 
   * @param node the node containing the XML file
   */
  public void extractOptionList(TNode node)
  {
    globalOptions = tom_make_emptyTomOptionList();
     { jtom.adt.tnode.types.TNode tom_match3_1=(( jtom.adt.tnode.types.TNode)node);{ if(tom_is_fun_sym_ElementNode(tom_match3_1) ||  false ) { { String  tom_match3_1_1=tom_get_slot_ElementNode_name(tom_match3_1); { jtom.adt.tnode.types.TNodeList tom_match3_1_2=tom_get_slot_ElementNode_attrList(tom_match3_1); { jtom.adt.tnode.types.TNodeList tom_match3_1_3=tom_get_slot_ElementNode_childList(tom_match3_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_1) , "server") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match3_1_2) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match3_1_2_list1=tom_match3_1_2; if(tom_is_fun_sym_concTNode(tom_match3_1_3) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match3_1_3_list1=tom_match3_1_3; { jtom.adt.tnode.types.TNodeList tom_match3_1_3_begin1=tom_match3_1_3_list1; { jtom.adt.tnode.types.TNodeList tom_match3_1_3_end1=tom_match3_1_3_list1; while (!(tom_is_empty_TNodeList(tom_match3_1_3_end1))) {tom_match3_1_3_list1=tom_match3_1_3_end1;{ { jtom.adt.tnode.types.TNode tom_match3_1_3_2=tom_get_head_TNodeList(tom_match3_1_3_list1);tom_match3_1_3_list1=tom_get_tail_TNodeList(tom_match3_1_3_list1); if(tom_is_fun_sym_ElementNode(tom_match3_1_3_2) ||  false ) { { jtom.adt.tnode.types.TNode opt=tom_match3_1_3_2; { String  tom_match3_1_3_2_1=tom_get_slot_ElementNode_name(tom_match3_1_3_2); { jtom.adt.tnode.types.TNodeList tom_match3_1_3_2_2=tom_get_slot_ElementNode_attrList(tom_match3_1_3_2); { jtom.adt.tnode.types.TNodeList tom_match3_1_3_2_3=tom_get_slot_ElementNode_childList(tom_match3_1_3_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match3_1_3_2_1) , "options") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match3_1_3_2_2) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match3_1_3_2_2_list1=tom_match3_1_3_2_2; if(tom_is_fun_sym_concTNode(tom_match3_1_3_2_3) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match3_1_3_2_3_list1=tom_match3_1_3_2_3; { jtom.adt.tnode.types.TNode tom_match4_1=(( jtom.adt.tnode.types.TNode)opt);{ if(tom_is_fun_sym_ElementNode(tom_match4_1) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match4_1_3=tom_get_slot_ElementNode_childList(tom_match4_1); { jtom.adt.tnode.types.TNodeList c=tom_match4_1_3;





 while(!(c.isEmpty()))
               {
                 TNode h = c.getHead();
					
                  { jtom.adt.tnode.types.TNode tom_match5_1=(( jtom.adt.tnode.types.TNode)h);{ if(tom_is_fun_sym_ElementNode(tom_match5_1) ||  false ) { { jtom.adt.tnode.types.TNode ob=tom_match5_1; { String  tom_match5_1_1=tom_get_slot_ElementNode_name(tom_match5_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match5_1_1) , "OptionBoolean") ||  false ) {
 extractOptionBoolean(ob);  }}} } if(tom_is_fun_sym_ElementNode(tom_match5_1) ||  false ) { { jtom.adt.tnode.types.TNode oi=tom_match5_1; { String  tom_match5_1_1=tom_get_slot_ElementNode_name(tom_match5_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match5_1_1) , "OptionInteger") ||  false ) {

 extractOptionInteger(oi);  }}} } if(tom_is_fun_sym_ElementNode(tom_match5_1) ||  false ) { { jtom.adt.tnode.types.TNode os=tom_match5_1; { String  tom_match5_1_1=tom_get_slot_ElementNode_name(tom_match5_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match5_1_1) , "OptionString") ||  false ) {

 extractOptionString(os);  }}} }}}

					
                 c = c.getTail();
               }
           }} }}}

      } }} } }}}}} }}tom_match3_1_3_end1=tom_get_tail_TNodeList(tom_match3_1_3_end1);} }}}} }} } }}}} }}}

  }	

  /**
   * Adds a boolean option to the global options.
   * 
   * @param optionBooleanNode the node containing the option
   */
  private void extractOptionBoolean(TNode optionBooleanNode)
  {
     { jtom.adt.tnode.types.TNode tom_match6_1=(( jtom.adt.tnode.types.TNode)optionBooleanNode);{ if(tom_is_fun_sym_ElementNode(tom_match6_1) ||  false ) { { String  tom_match6_1_1=tom_get_slot_ElementNode_name(tom_match6_1); { jtom.adt.tnode.types.TNodeList tom_match6_1_2=tom_get_slot_ElementNode_attrList(tom_match6_1); { jtom.adt.tnode.types.TNodeList tom_match6_1_3=tom_get_slot_ElementNode_childList(tom_match6_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match6_1_1) , "OptionBoolean") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match6_1_2) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match6_1_2_list1=tom_match6_1_2; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_begin1=tom_match6_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_end1=tom_match6_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match6_1_2_end1))) {tom_match6_1_2_list1=tom_match6_1_2_end1;{ { jtom.adt.tnode.types.TNode tom_match6_1_2_2=tom_get_head_TNodeList(tom_match6_1_2_list1);tom_match6_1_2_list1=tom_get_tail_TNodeList(tom_match6_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match6_1_2_2) ||  false ) { { String  tom_match6_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match6_1_2_2); { String  tom_match6_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match6_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match6_1_2_2_1) , "altName") ||  false ) { { String  an=tom_match6_1_2_2_3; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_begin3=tom_match6_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_end3=tom_match6_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match6_1_2_end3))) {tom_match6_1_2_list1=tom_match6_1_2_end3;{ { jtom.adt.tnode.types.TNode tom_match6_1_2_4=tom_get_head_TNodeList(tom_match6_1_2_list1);tom_match6_1_2_list1=tom_get_tail_TNodeList(tom_match6_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match6_1_2_4) ||  false ) { { String  tom_match6_1_2_4_1=tom_get_slot_AttributeNode_name(tom_match6_1_2_4); { String  tom_match6_1_2_4_3=tom_get_slot_AttributeNode_value(tom_match6_1_2_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match6_1_2_4_1) , "description") ||  false ) { { String  d=tom_match6_1_2_4_3; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_begin5=tom_match6_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_end5=tom_match6_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match6_1_2_end5))) {tom_match6_1_2_list1=tom_match6_1_2_end5;{ { jtom.adt.tnode.types.TNode tom_match6_1_2_6=tom_get_head_TNodeList(tom_match6_1_2_list1);tom_match6_1_2_list1=tom_get_tail_TNodeList(tom_match6_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match6_1_2_6) ||  false ) { { String  tom_match6_1_2_6_1=tom_get_slot_AttributeNode_name(tom_match6_1_2_6); { String  tom_match6_1_2_6_3=tom_get_slot_AttributeNode_value(tom_match6_1_2_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match6_1_2_6_1) , "name") ||  false ) { { String  n=tom_match6_1_2_6_3; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_begin7=tom_match6_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match6_1_2_end7=tom_match6_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match6_1_2_end7))) {tom_match6_1_2_list1=tom_match6_1_2_end7;{ { jtom.adt.tnode.types.TNode tom_match6_1_2_8=tom_get_head_TNodeList(tom_match6_1_2_list1);tom_match6_1_2_list1=tom_get_tail_TNodeList(tom_match6_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match6_1_2_8) ||  false ) { { String  tom_match6_1_2_8_1=tom_get_slot_AttributeNode_name(tom_match6_1_2_8); { String  tom_match6_1_2_8_3=tom_get_slot_AttributeNode_value(tom_match6_1_2_8); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match6_1_2_8_1) , "valueB") ||  false ) { { String  v=tom_match6_1_2_8_3; if(tom_is_fun_sym_concTNode(tom_match6_1_3) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match6_1_3_list1=tom_match6_1_3; if(tom_is_empty_TNodeList(tom_match6_1_3_list1)) { { String  tom_match7_1=(( String )v);{ if(tom_is_fun_sym_concString(tom_match7_1) ||  false ) { { String  tom_match7_1_list1=tom_match7_1; if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_1=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_1) , 't') ||  false ) { if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_2=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_2) , 'r') ||  false ) { if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_3=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_3) , 'u') ||  false ) { if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_4=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_4) , 'e') ||  false ) { if(tom_is_empty_String(tom_match7_1_list1)) {










 globalOptions = tom_append_list_concTomOption(globalOptions,tom_cons_list_concTomOption( tom_make_OptionBoolean(n, an, d, tom_make_True()),tom_empty_list_concTomOption()));  } }} } }} } }} } }} }} } if(tom_is_fun_sym_concString(tom_match7_1) ||  false ) { { String  tom_match7_1_list1=tom_match7_1; if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_1=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_1) , 'f') ||  false ) { if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_2=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_2) , 'a') ||  false ) { if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_3=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_3) , 'l') ||  false ) { if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_4=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_4) , 's') ||  false ) { if(!(tom_is_empty_String(tom_match7_1_list1))) { { char  tom_match7_1_5=tom_get_head_String(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_String(tom_match7_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match7_1_5) , 'e') ||  false ) { if(tom_is_empty_String(tom_match7_1_list1)) {

 globalOptions = tom_append_list_concTomOption(globalOptions,tom_cons_list_concTomOption( tom_make_OptionBoolean(n, an, d, tom_make_False()),tom_empty_list_concTomOption()));  } }} } }} } }} } }} } }} }} }}}

       }} }} }}} }}tom_match6_1_2_end7=tom_get_tail_TNodeList(tom_match6_1_2_end7);} }}}} }}} }}tom_match6_1_2_end5=tom_get_tail_TNodeList(tom_match6_1_2_end5);} }}}} }}} }}tom_match6_1_2_end3=tom_get_tail_TNodeList(tom_match6_1_2_end3);} }}}} }}} }}tom_match6_1_2_end1=tom_get_tail_TNodeList(tom_match6_1_2_end1);} }}}} } }}}} }}}

  }

  /**
   * Adds an integer option to the global options.
   * 
   * @param optionIntegerNode the node containing the option
   */
  private void extractOptionInteger(TNode optionIntegerNode)
  {
     { jtom.adt.tnode.types.TNode tom_match8_1=(( jtom.adt.tnode.types.TNode)optionIntegerNode);{ if(tom_is_fun_sym_ElementNode(tom_match8_1) ||  false ) { { String  tom_match8_1_1=tom_get_slot_ElementNode_name(tom_match8_1); { jtom.adt.tnode.types.TNodeList tom_match8_1_2=tom_get_slot_ElementNode_attrList(tom_match8_1); { jtom.adt.tnode.types.TNodeList tom_match8_1_3=tom_get_slot_ElementNode_childList(tom_match8_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match8_1_1) , "OptionInteger") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match8_1_2) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match8_1_2_list1=tom_match8_1_2; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_begin1=tom_match8_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_end1=tom_match8_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match8_1_2_end1))) {tom_match8_1_2_list1=tom_match8_1_2_end1;{ { jtom.adt.tnode.types.TNode tom_match8_1_2_2=tom_get_head_TNodeList(tom_match8_1_2_list1);tom_match8_1_2_list1=tom_get_tail_TNodeList(tom_match8_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match8_1_2_2) ||  false ) { { String  tom_match8_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match8_1_2_2); { String  tom_match8_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match8_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match8_1_2_2_1) , "altName") ||  false ) { { String  an=tom_match8_1_2_2_3; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_begin3=tom_match8_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_end3=tom_match8_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match8_1_2_end3))) {tom_match8_1_2_list1=tom_match8_1_2_end3;{ { jtom.adt.tnode.types.TNode tom_match8_1_2_4=tom_get_head_TNodeList(tom_match8_1_2_list1);tom_match8_1_2_list1=tom_get_tail_TNodeList(tom_match8_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match8_1_2_4) ||  false ) { { String  tom_match8_1_2_4_1=tom_get_slot_AttributeNode_name(tom_match8_1_2_4); { String  tom_match8_1_2_4_3=tom_get_slot_AttributeNode_value(tom_match8_1_2_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match8_1_2_4_1) , "attrName") ||  false ) { { String  at=tom_match8_1_2_4_3; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_begin5=tom_match8_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_end5=tom_match8_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match8_1_2_end5))) {tom_match8_1_2_list1=tom_match8_1_2_end5;{ { jtom.adt.tnode.types.TNode tom_match8_1_2_6=tom_get_head_TNodeList(tom_match8_1_2_list1);tom_match8_1_2_list1=tom_get_tail_TNodeList(tom_match8_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match8_1_2_6) ||  false ) { { String  tom_match8_1_2_6_1=tom_get_slot_AttributeNode_name(tom_match8_1_2_6); { String  tom_match8_1_2_6_3=tom_get_slot_AttributeNode_value(tom_match8_1_2_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match8_1_2_6_1) , "description") ||  false ) { { String  d=tom_match8_1_2_6_3; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_begin7=tom_match8_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_end7=tom_match8_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match8_1_2_end7))) {tom_match8_1_2_list1=tom_match8_1_2_end7;{ { jtom.adt.tnode.types.TNode tom_match8_1_2_8=tom_get_head_TNodeList(tom_match8_1_2_list1);tom_match8_1_2_list1=tom_get_tail_TNodeList(tom_match8_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match8_1_2_8) ||  false ) { { String  tom_match8_1_2_8_1=tom_get_slot_AttributeNode_name(tom_match8_1_2_8); { String  tom_match8_1_2_8_3=tom_get_slot_AttributeNode_value(tom_match8_1_2_8); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match8_1_2_8_1) , "name") ||  false ) { { String  n=tom_match8_1_2_8_3; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_begin9=tom_match8_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match8_1_2_end9=tom_match8_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match8_1_2_end9))) {tom_match8_1_2_list1=tom_match8_1_2_end9;{ { jtom.adt.tnode.types.TNode tom_match8_1_2_10=tom_get_head_TNodeList(tom_match8_1_2_list1);tom_match8_1_2_list1=tom_get_tail_TNodeList(tom_match8_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match8_1_2_10) ||  false ) { { String  tom_match8_1_2_10_1=tom_get_slot_AttributeNode_name(tom_match8_1_2_10); { String  tom_match8_1_2_10_3=tom_get_slot_AttributeNode_value(tom_match8_1_2_10); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match8_1_2_10_1) , "valueI") ||  false ) { { String  v=tom_match8_1_2_10_3; if(tom_is_fun_sym_concTNode(tom_match8_1_3) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match8_1_3_list1=tom_match8_1_3; if(tom_is_empty_TNodeList(tom_match8_1_3_list1)) {








        globalOptions = tom_cons_list_concTomOption(tom_make_OptionInteger(n, an, d, Integer.parseInt(v), at),tom_append_list_concTomOption(globalOptions,tom_empty_list_concTomOption()));
       }} }} }}} }}tom_match8_1_2_end9=tom_get_tail_TNodeList(tom_match8_1_2_end9);} }}}} }}} }}tom_match8_1_2_end7=tom_get_tail_TNodeList(tom_match8_1_2_end7);} }}}} }}} }}tom_match8_1_2_end5=tom_get_tail_TNodeList(tom_match8_1_2_end5);} }}}} }}} }}tom_match8_1_2_end3=tom_get_tail_TNodeList(tom_match8_1_2_end3);} }}}} }}} }}tom_match8_1_2_end1=tom_get_tail_TNodeList(tom_match8_1_2_end1);} }}}} } }}}} }}}

  }

  /**
   * Adds a string option to the global options.
   * 
   * @param optionStringNode the node containing the option
   */
  private void extractOptionString(TNode optionStringNode)
  {
     { jtom.adt.tnode.types.TNode tom_match9_1=(( jtom.adt.tnode.types.TNode)optionStringNode);{ if(tom_is_fun_sym_ElementNode(tom_match9_1) ||  false ) { { String  tom_match9_1_1=tom_get_slot_ElementNode_name(tom_match9_1); { jtom.adt.tnode.types.TNodeList tom_match9_1_2=tom_get_slot_ElementNode_attrList(tom_match9_1); { jtom.adt.tnode.types.TNodeList tom_match9_1_3=tom_get_slot_ElementNode_childList(tom_match9_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match9_1_1) , "OptionString") ||  false ) { if(tom_is_fun_sym_concTNode(tom_match9_1_2) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match9_1_2_list1=tom_match9_1_2; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_begin1=tom_match9_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_end1=tom_match9_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match9_1_2_end1))) {tom_match9_1_2_list1=tom_match9_1_2_end1;{ { jtom.adt.tnode.types.TNode tom_match9_1_2_2=tom_get_head_TNodeList(tom_match9_1_2_list1);tom_match9_1_2_list1=tom_get_tail_TNodeList(tom_match9_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match9_1_2_2) ||  false ) { { String  tom_match9_1_2_2_1=tom_get_slot_AttributeNode_name(tom_match9_1_2_2); { String  tom_match9_1_2_2_3=tom_get_slot_AttributeNode_value(tom_match9_1_2_2); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match9_1_2_2_1) , "altName") ||  false ) { { String  an=tom_match9_1_2_2_3; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_begin3=tom_match9_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_end3=tom_match9_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match9_1_2_end3))) {tom_match9_1_2_list1=tom_match9_1_2_end3;{ { jtom.adt.tnode.types.TNode tom_match9_1_2_4=tom_get_head_TNodeList(tom_match9_1_2_list1);tom_match9_1_2_list1=tom_get_tail_TNodeList(tom_match9_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match9_1_2_4) ||  false ) { { String  tom_match9_1_2_4_1=tom_get_slot_AttributeNode_name(tom_match9_1_2_4); { String  tom_match9_1_2_4_3=tom_get_slot_AttributeNode_value(tom_match9_1_2_4); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match9_1_2_4_1) , "attrName") ||  false ) { { String  at=tom_match9_1_2_4_3; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_begin5=tom_match9_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_end5=tom_match9_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match9_1_2_end5))) {tom_match9_1_2_list1=tom_match9_1_2_end5;{ { jtom.adt.tnode.types.TNode tom_match9_1_2_6=tom_get_head_TNodeList(tom_match9_1_2_list1);tom_match9_1_2_list1=tom_get_tail_TNodeList(tom_match9_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match9_1_2_6) ||  false ) { { String  tom_match9_1_2_6_1=tom_get_slot_AttributeNode_name(tom_match9_1_2_6); { String  tom_match9_1_2_6_3=tom_get_slot_AttributeNode_value(tom_match9_1_2_6); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match9_1_2_6_1) , "description") ||  false ) { { String  d=tom_match9_1_2_6_3; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_begin7=tom_match9_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_end7=tom_match9_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match9_1_2_end7))) {tom_match9_1_2_list1=tom_match9_1_2_end7;{ { jtom.adt.tnode.types.TNode tom_match9_1_2_8=tom_get_head_TNodeList(tom_match9_1_2_list1);tom_match9_1_2_list1=tom_get_tail_TNodeList(tom_match9_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match9_1_2_8) ||  false ) { { String  tom_match9_1_2_8_1=tom_get_slot_AttributeNode_name(tom_match9_1_2_8); { String  tom_match9_1_2_8_3=tom_get_slot_AttributeNode_value(tom_match9_1_2_8); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match9_1_2_8_1) , "name") ||  false ) { { String  n=tom_match9_1_2_8_3; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_begin9=tom_match9_1_2_list1; { jtom.adt.tnode.types.TNodeList tom_match9_1_2_end9=tom_match9_1_2_list1; while (!(tom_is_empty_TNodeList(tom_match9_1_2_end9))) {tom_match9_1_2_list1=tom_match9_1_2_end9;{ { jtom.adt.tnode.types.TNode tom_match9_1_2_10=tom_get_head_TNodeList(tom_match9_1_2_list1);tom_match9_1_2_list1=tom_get_tail_TNodeList(tom_match9_1_2_list1); if(tom_is_fun_sym_AttributeNode(tom_match9_1_2_10) ||  false ) { { String  tom_match9_1_2_10_1=tom_get_slot_AttributeNode_name(tom_match9_1_2_10); { String  tom_match9_1_2_10_3=tom_get_slot_AttributeNode_value(tom_match9_1_2_10); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match9_1_2_10_1) , "valueS") ||  false ) { { String  v=tom_match9_1_2_10_3; if(tom_is_fun_sym_concTNode(tom_match9_1_3) ||  false ) { { jtom.adt.tnode.types.TNodeList tom_match9_1_3_list1=tom_match9_1_3; if(tom_is_empty_TNodeList(tom_match9_1_3_list1)) {








        globalOptions = tom_cons_list_concTomOption(tom_make_OptionString(n, an, d, v, at),tom_append_list_concTomOption(globalOptions,tom_empty_list_concTomOption()));
       }} }} }}} }}tom_match9_1_2_end9=tom_get_tail_TNodeList(tom_match9_1_2_end9);} }}}} }}} }}tom_match9_1_2_end7=tom_get_tail_TNodeList(tom_match9_1_2_end7);} }}}} }}} }}tom_match9_1_2_end5=tom_get_tail_TNodeList(tom_match9_1_2_end5);} }}}} }}} }}tom_match9_1_2_end3=tom_get_tail_TNodeList(tom_match9_1_2_end3);} }}}} }}} }}tom_match9_1_2_end1=tom_get_tail_TNodeList(tom_match9_1_2_end1);} }}}} } }}}} }}}

  }

}
