/* Generated by TOM (version 3.0alpha): Do not edit this file *//**
 *
 * The TomTypeChecker plugin.
 *
 */

package jtom.checker;

import aterm.*;
import jtom.*;
import jtom.adt.tomsignature.types.*;
import jtom.adt.options.types.*;

public class TomTypeChecker extends TomChecker implements TomPlugin
{
    /* Generated by TOM (version 3.0alpha): Do not edit this file *//* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /*  * old definition of String %typeterm String {   implement           { String }   get_fun_sym(t)      { t }   cmp_fun_sym(s1,s2)  { s1.equals(s2) }   get_subterm(t, n)   { null }   equals(t1,t2)       { t1.equals(t2) } } */ /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 3.0alpha): Do not edit this file *//*  *  * Copyright (c) 2004, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/    /* Generated by TOM (version 3.0alpha): Do not edit this file */ 


    private TomTerm term;
    private TomOptionList myOptions;

    public TomTypeChecker()
    {
	myOptions = tom_cons_list_concTomOption(tom_make_OptionBoolean("checkType","","",tom_make_True()) // activationFlag
				,tom_empty_list_concTomOption())
;
    }

    public void setInput(ATerm term)
    {
	if (term instanceof TomTerm)
	    this.term = (TomTerm)term;
	else
	    environment().messageError(TomMessage.getString("TomTermExpected"),
				       "TomTypeChecker", TomMessage.DEFAULT_ERROR_LINE_NUMBER);
    }

    public ATerm getOutput()
    {
	return term;
    }

    public void run()
    {
	try
	    {
		long startChrono = System.currentTimeMillis();
		boolean verbose = ((Boolean)getServer().getOptionValue("verbose")).booleanValue();
		
		checkTypeInference(term);
		
		if(verbose)
		    System.out.println("TOM type checking phase (" +(System.currentTimeMillis()-startChrono)+ " ms)");

		environment().printAlertMessage("TomTypeChecker");
		if(!environment().isEclipseMode()) {
		    // remove all warning (in command line only)
		    environment().clearWarnings();
		}
	    }
	catch (Exception e) 
	    {
		environment().messageError("Exception occurs in TomTypeChecker: "+e.getMessage(), 
					   environment().getInputFile().getName(), 
					   TomMessage.DEFAULT_ERROR_LINE_NUMBER);
		e.printStackTrace();
	    }
    }

    public TomOptionList declareOptions()
    {
// 	int i = 0;
// 	OptionList list = `concOption(myOptions*);
// 	while(!(list.isEmpty()))
// 	    {
// 		i++;
// 		list = list.getTail();
// 	    }

// 	System.out.println("1.5. The type checker declares " +i+ " options.");
	return myOptions;
    }

    public TomOptionList requiredOptions()
    {
	return tom_make_emptyTomOptionList();
    }

    public void setOption(String optionName, String optionValue)
    {
 	 { jtom.adt.options.types.TomOptionList tom_match1_1=(( jtom.adt.options.types.TomOptionList)myOptions);{ if(tom_is_fun_sym_concTomOption(tom_match1_1) ||  false ) { { jtom.adt.options.types.TomOptionList tom_match1_1_list1=tom_match1_1; { jtom.adt.options.types.TomOptionList tom_match1_1_begin1=tom_match1_1_list1; { jtom.adt.options.types.TomOptionList tom_match1_1_end1=tom_match1_1_list1; while (!(tom_is_empty_TomOptionList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1;{ { jtom.adt.options.types.TomOptionList av=tom_get_slice_concTomOption(tom_match1_1_begin1,tom_match1_1_end1); { jtom.adt.options.types.TomOption tom_match1_1_2=tom_get_head_TomOptionList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_TomOptionList(tom_match1_1_list1); if(tom_is_fun_sym_OptionBoolean(tom_match1_1_2) ||  false ) { { String  tom_match1_1_2_1=tom_get_slot_OptionBoolean_name(tom_match1_1_2); { String  tom_match1_1_2_2=tom_get_slot_OptionBoolean_altName(tom_match1_1_2); { String  tom_match1_1_2_3=tom_get_slot_OptionBoolean_description(tom_match1_1_2); { jtom.adt.options.types.TomBoolean tom_match1_1_2_4=tom_get_slot_OptionBoolean_valueB(tom_match1_1_2); { String  n=tom_match1_1_2_1; { String  alt=tom_match1_1_2_2; { String  desc=tom_match1_1_2_3; { jtom.adt.options.types.TomBoolean val=tom_match1_1_2_4; { jtom.adt.options.types.TomOptionList ap=tom_match1_1_list1;


 if(n.equals(optionName)||alt.equals(optionName))
			{
			     { String  tom_match2_1=(( String )optionValue);{ if(tom_is_fun_sym_concString(tom_match2_1) ||  false ) { { String  tom_match2_1_list1=tom_match2_1; if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_1=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_1) , 't') ||  false ) { if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_2=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_2) , 'r') ||  false ) { if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_3=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_3) , 'u') ||  false ) { if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_4=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_4) , 'e') ||  false ) { if(tom_is_empty_String(tom_match2_1_list1)) {


 myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionBoolean(n, alt, desc, tom_make_True()),tom_empty_list_concTomOption())));  } }} } }} } }} } }} }} } if(tom_is_fun_sym_concString(tom_match2_1) ||  false ) { { String  tom_match2_1_list1=tom_match2_1; if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_1=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_1) , 'f') ||  false ) { if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_2=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_2) , 'a') ||  false ) { if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_3=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_3) , 'l') ||  false ) { if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_4=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_4) , 's') ||  false ) { if(!(tom_is_empty_String(tom_match2_1_list1))) { { char  tom_match2_1_5=tom_get_head_String(tom_match2_1_list1);tom_match2_1_list1=tom_get_tail_String(tom_match2_1_list1); if(tom_cmp_fun_sym_char(tom_get_fun_sym_char(tom_match2_1_5) , 'e') ||  false ) { if(tom_is_empty_String(tom_match2_1_list1)) {

 myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionBoolean(n, alt, desc, tom_make_False()),tom_empty_list_concTomOption())));  } }} } }} } }} } }} } }} }} }}}

			}
		}}}}}}}}} }}}tom_match1_1_end1=tom_get_tail_TomOptionList(tom_match1_1_end1);} }}}} } if(tom_is_fun_sym_concTomOption(tom_match1_1) ||  false ) { { jtom.adt.options.types.TomOptionList tom_match1_1_list1=tom_match1_1; { jtom.adt.options.types.TomOptionList tom_match1_1_begin1=tom_match1_1_list1; { jtom.adt.options.types.TomOptionList tom_match1_1_end1=tom_match1_1_list1; while (!(tom_is_empty_TomOptionList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1;{ { jtom.adt.options.types.TomOptionList av=tom_get_slice_concTomOption(tom_match1_1_begin1,tom_match1_1_end1); { jtom.adt.options.types.TomOption tom_match1_1_2=tom_get_head_TomOptionList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_TomOptionList(tom_match1_1_list1); if(tom_is_fun_sym_OptionInteger(tom_match1_1_2) ||  false ) { { String  tom_match1_1_2_1=tom_get_slot_OptionInteger_name(tom_match1_1_2); { String  tom_match1_1_2_2=tom_get_slot_OptionInteger_altName(tom_match1_1_2); { String  tom_match1_1_2_3=tom_get_slot_OptionInteger_description(tom_match1_1_2); { int  tom_match1_1_2_4=tom_get_slot_OptionInteger_valueI(tom_match1_1_2); { String  tom_match1_1_2_5=tom_get_slot_OptionInteger_attrName(tom_match1_1_2); { String  n=tom_match1_1_2_1; { String  alt=tom_match1_1_2_2; { String  desc=tom_match1_1_2_3; { int  val=tom_match1_1_2_4; { String  attr=tom_match1_1_2_5; { jtom.adt.options.types.TomOptionList ap=tom_match1_1_list1;

 if(n.equals(optionName)||alt.equals(optionName))
			myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionInteger(n, alt, desc, Integer.parseInt(optionValue), attr),tom_empty_list_concTomOption())));
		}}}}}}}}}}} }}}tom_match1_1_end1=tom_get_tail_TomOptionList(tom_match1_1_end1);} }}}} } if(tom_is_fun_sym_concTomOption(tom_match1_1) ||  false ) { { jtom.adt.options.types.TomOptionList tom_match1_1_list1=tom_match1_1; { jtom.adt.options.types.TomOptionList tom_match1_1_begin1=tom_match1_1_list1; { jtom.adt.options.types.TomOptionList tom_match1_1_end1=tom_match1_1_list1; while (!(tom_is_empty_TomOptionList(tom_match1_1_end1))) {tom_match1_1_list1=tom_match1_1_end1;{ { jtom.adt.options.types.TomOptionList av=tom_get_slice_concTomOption(tom_match1_1_begin1,tom_match1_1_end1); { jtom.adt.options.types.TomOption tom_match1_1_2=tom_get_head_TomOptionList(tom_match1_1_list1);tom_match1_1_list1=tom_get_tail_TomOptionList(tom_match1_1_list1); if(tom_is_fun_sym_OptionString(tom_match1_1_2) ||  false ) { { String  tom_match1_1_2_1=tom_get_slot_OptionString_name(tom_match1_1_2); { String  tom_match1_1_2_2=tom_get_slot_OptionString_altName(tom_match1_1_2); { String  tom_match1_1_2_3=tom_get_slot_OptionString_description(tom_match1_1_2); { String  tom_match1_1_2_4=tom_get_slot_OptionString_valueS(tom_match1_1_2); { String  tom_match1_1_2_5=tom_get_slot_OptionString_attrName(tom_match1_1_2); { String  n=tom_match1_1_2_1; { String  alt=tom_match1_1_2_2; { String  desc=tom_match1_1_2_3; { String  val=tom_match1_1_2_4; { String  attr=tom_match1_1_2_5; { jtom.adt.options.types.TomOptionList ap=tom_match1_1_list1;

 if(n.equals(optionName)||alt.equals(optionName))
			myOptions = tom_append_list_concTomOption(av,tom_append_list_concTomOption(ap,tom_cons_list_concTomOption( tom_make_OptionString(n, alt, desc, optionValue, attr),tom_empty_list_concTomOption())));
		}}}}}}}}}}} }}}tom_match1_1_end1=tom_get_tail_TomOptionList(tom_match1_1_end1);} }}}} }}}

    }
}
