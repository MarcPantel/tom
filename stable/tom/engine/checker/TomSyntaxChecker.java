/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2008, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Julien Guyon
 *
 **/

package tom.engine.checker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;

import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomconstraint.types.constraint.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomterm.types.tomterm.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;
import tom.engine.adt.theory.types.*;

import tom.engine.xml.Constants;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import aterm.ATerm;
import tom.engine.tools.ASTFactory;
import tom.engine.tools.SymbolTable;

import tom.library.sl.*;

/**
 * The TomSyntaxChecker plugin.
 */
public class TomSyntaxChecker extends TomChecker {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.engine.adt.tominstruction.types.ConstraintInstructionList  tom_append_list_concConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstructionList l1,  tom.engine.adt.tominstruction.types.ConstraintInstructionList  l2) {     if( l1.isEmptyconcConstraintInstruction() ) {       return l2;     } else if( l2.isEmptyconcConstraintInstruction() ) {       return l1;     } else if(  l1.getTailconcConstraintInstruction() .isEmptyconcConstraintInstruction() ) {       return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( l1.getHeadconcConstraintInstruction() ,l2) ;     } else {       return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( l1.getHeadconcConstraintInstruction() ,tom_append_list_concConstraintInstruction( l1.getTailconcConstraintInstruction() ,l2)) ;     }   }   private static   tom.engine.adt.tominstruction.types.ConstraintInstructionList  tom_get_slice_concConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstructionList  begin,  tom.engine.adt.tominstruction.types.ConstraintInstructionList  end, tom.engine.adt.tominstruction.types.ConstraintInstructionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcConstraintInstruction()  ||  (end== tom.engine.adt.tominstruction.types.constraintinstructionlist.EmptyconcConstraintInstruction.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( begin.getHeadconcConstraintInstruction() ,( tom.engine.adt.tominstruction.types.ConstraintInstructionList )tom_get_slice_concConstraintInstruction( begin.getTailconcConstraintInstruction() ,end,tail)) ;   }      private static   tom.engine.adt.tomtype.types.TomTypeList  tom_append_list_concTomType( tom.engine.adt.tomtype.types.TomTypeList l1,  tom.engine.adt.tomtype.types.TomTypeList  l2) {     if( l1.isEmptyconcTomType() ) {       return l2;     } else if( l2.isEmptyconcTomType() ) {       return l1;     } else if(  l1.getTailconcTomType() .isEmptyconcTomType() ) {       return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make( l1.getHeadconcTomType() ,l2) ;     } else {       return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make( l1.getHeadconcTomType() ,tom_append_list_concTomType( l1.getTailconcTomType() ,l2)) ;     }   }   private static   tom.engine.adt.tomtype.types.TomTypeList  tom_get_slice_concTomType( tom.engine.adt.tomtype.types.TomTypeList  begin,  tom.engine.adt.tomtype.types.TomTypeList  end, tom.engine.adt.tomtype.types.TomTypeList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomType()  ||  (end== tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make( begin.getHeadconcTomType() ,( tom.engine.adt.tomtype.types.TomTypeList )tom_get_slice_concTomType( begin.getTailconcTomType() ,end,tail)) ;   }      private static   tom.engine.adt.tomsignature.types.TomSymbolList  tom_append_list_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbolList l1,  tom.engine.adt.tomsignature.types.TomSymbolList  l2) {     if( l1.isEmptyconcTomSymbol() ) {       return l2;     } else if( l2.isEmptyconcTomSymbol() ) {       return l1;     } else if(  l1.getTailconcTomSymbol() .isEmptyconcTomSymbol() ) {       return  tom.engine.adt.tomsignature.types.tomsymbollist.ConsconcTomSymbol.make( l1.getHeadconcTomSymbol() ,l2) ;     } else {       return  tom.engine.adt.tomsignature.types.tomsymbollist.ConsconcTomSymbol.make( l1.getHeadconcTomSymbol() ,tom_append_list_concTomSymbol( l1.getTailconcTomSymbol() ,l2)) ;     }   }   private static   tom.engine.adt.tomsignature.types.TomSymbolList  tom_get_slice_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbolList  begin,  tom.engine.adt.tomsignature.types.TomSymbolList  end, tom.engine.adt.tomsignature.types.TomSymbolList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomSymbol()  ||  (end== tom.engine.adt.tomsignature.types.tomsymbollist.EmptyconcTomSymbol.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomsignature.types.tomsymbollist.ConsconcTomSymbol.make( begin.getHeadconcTomSymbol() ,( tom.engine.adt.tomsignature.types.TomSymbolList )tom_get_slice_concTomSymbol( begin.getTailconcTomSymbol() ,end,tail)) ;   }      private static   tom.engine.adt.tomdeclaration.types.DeclarationList  tom_append_list_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList l1,  tom.engine.adt.tomdeclaration.types.DeclarationList  l2) {     if( l1.isEmptyconcDeclaration() ) {       return l2;     } else if( l2.isEmptyconcDeclaration() ) {       return l1;     } else if(  l1.getTailconcDeclaration() .isEmptyconcDeclaration() ) {       return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( l1.getHeadconcDeclaration() ,l2) ;     } else {       return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( l1.getHeadconcDeclaration() ,tom_append_list_concDeclaration( l1.getTailconcDeclaration() ,l2)) ;     }   }   private static   tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_slice_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  begin,  tom.engine.adt.tomdeclaration.types.DeclarationList  end, tom.engine.adt.tomdeclaration.types.DeclarationList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcDeclaration()  ||  (end== tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( begin.getHeadconcDeclaration() ,( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_slice_concDeclaration( begin.getTailconcDeclaration() ,end,tail)) ;   }      private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2)) ;     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomName()  ||  (end== tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail)) ;   }      private static   tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList l1,  tom.engine.adt.tomterm.types.TomList  l2) {     if( l1.isEmptyconcTomTerm() ) {       return l2;     } else if( l2.isEmptyconcTomTerm() ) {       return l1;     } else if(  l1.getTailconcTomTerm() .isEmptyconcTomTerm() ) {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,l2) ;     } else {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,tom_append_list_concTomTerm( l1.getTailconcTomTerm() ,l2)) ;     }   }   private static   tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end, tom.engine.adt.tomterm.types.TomList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcTomTerm()  ||  (end== tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( begin.getHeadconcTomTerm() ,( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm( begin.getTailconcTomTerm() ,end,tail)) ;   }      private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if( l1.isEmptyconcOption() ) {       return l2;     } else if( l2.isEmptyconcOption() ) {       return l1;     } else if(  l1.getTailconcOption() .isEmptyconcOption() ) {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,l2) ;     } else {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,tom_append_list_concOption( l1.getTailconcOption() ,l2)) ;     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcOption()  ||  (end== tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( begin.getHeadconcOption() ,( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption( begin.getTailconcOption() ,end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyAndConstraint() ) {       return l2;     } else if( l2.isEmptyAndConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ).isEmptyAndConstraint() ) {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),l2) ;       } else {         return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getHeadAndConstraint() :l1),tom_append_list_AndConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? l1.getTailAndConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ),l2)) ;       }     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_AndConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyAndConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint.make((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getHeadAndConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_AndConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )? begin.getTailAndConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ),end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.Constraint  tom_append_list_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint  l1,  tom.engine.adt.tomconstraint.types.Constraint  l2) {     if( l1.isEmptyOrConstraint() ) {       return l2;     } else if( l2.isEmptyOrConstraint() ) {       return l1;     } else if( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) ) {       if( (( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getTailOrConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() ).isEmptyOrConstraint() ) {         return  tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getHeadOrConstraint() :l1),l2) ;       } else {         return  tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint.make((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getHeadOrConstraint() :l1),tom_append_list_OrConstraint((( ((l1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (l1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? l1.getTailOrConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() ),l2)) ;       }     } else {       return  tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint.make(l1,l2) ;     }   }   private static   tom.engine.adt.tomconstraint.types.Constraint  tom_get_slice_OrConstraint( tom.engine.adt.tomconstraint.types.Constraint  begin,  tom.engine.adt.tomconstraint.types.Constraint  end, tom.engine.adt.tomconstraint.types.Constraint  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyOrConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint.make((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? begin.getHeadOrConstraint() :begin),( tom.engine.adt.tomconstraint.types.Constraint )tom_get_slice_OrConstraint((( ((begin instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (begin instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )? begin.getTailOrConstraint() : tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() ),end,tail)) ;   }      private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcConstraint()  ||  (end== tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;   }      private static   tom.engine.adt.tomslot.types.PairNameDeclList  tom_append_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList l1,  tom.engine.adt.tomslot.types.PairNameDeclList  l2) {     if( l1.isEmptyconcPairNameDecl() ) {       return l2;     } else if( l2.isEmptyconcPairNameDecl() ) {       return l1;     } else if(  l1.getTailconcPairNameDecl() .isEmptyconcPairNameDecl() ) {       return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make( l1.getHeadconcPairNameDecl() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make( l1.getHeadconcPairNameDecl() ,tom_append_list_concPairNameDecl( l1.getTailconcPairNameDecl() ,l2)) ;     }   }   private static   tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slice_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  begin,  tom.engine.adt.tomslot.types.PairNameDeclList  end, tom.engine.adt.tomslot.types.PairNameDeclList  tail) {     if( (begin==end) ) {       return tail;     } else if( (end==tail)  && ( end.isEmptyconcPairNameDecl()  ||  (end== tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make( begin.getHeadconcPairNameDecl() ,( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_slice_concPairNameDecl( begin.getTailconcPairNameDecl() ,end,tail)) ;   }    /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Sequence) )) {       if(( ((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )) == null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Sequence(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end == null ) ||  (end.equals(( null ))) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin):new tom.library.sl.Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)) );   }      private static   tom.library.sl.Strategy  tom_append_list_Choice( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Choice) )) {       if(( ((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )) ==null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1):new tom.library.sl.Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1):new tom.library.sl.Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.FIRST) ):l1),tom_append_list_Choice(((( (l1 instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Choice.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Choice(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Choice( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else if( (end.equals(tail))  && (( end ==null ) ||  (end.equals(( null ))) )) {       /* code to avoid a call to make, and thus to avoid looping during list-matching */       return begin;     }     return ( (( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin):new tom.library.sl.Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Choice(((( (begin instanceof tom.library.sl.Choice) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Choice.THEN) ):( null )),end,tail)) );   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_Try( tom.library.sl.Strategy  v) { return ( ( (( (( null )==null)?( new tom.library.sl.Identity() ):new tom.library.sl.Choice(( new tom.library.sl.Identity() ),( null )) )==null)?v:new tom.library.sl.Choice(v,( (( null )==null)?( new tom.library.sl.Identity() ):new tom.library.sl.Choice(( new tom.library.sl.Identity() ),( null )) )) ) );}private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) )) ) );}private static  tom.library.sl.Strategy  tom_make_TopDownCollect( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),tom_make_Try(( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) ))) ) );}   /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */   private static java.util.ArrayList concArrayListAppend(Object o, java.util.ArrayList l) {   java.util.ArrayList res = (java.util.ArrayList)l.clone();   res.add(o);   return res; } /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */   static class MapEntry {   private Object key;   private Object val;   public Object getKey() { return key; }   public Object getVal() { return val; }   public MapEntry(Object key, Object val) {     this.key = key;     this.val = val;   } }   /* Generated by TOM (version 2.6alpha): Do not edit this file */   private static java.util.HashMap hashMapAppend(MapEntry e, java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   res.put(e.getKey(), e.getVal());   return res; }  private static MapEntry hashMapGetHead(java.util.HashMap m) {   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   return new MapEntry(e.getKey(), e.getValue()); }  private static java.util.HashMap hashMapGetTail(java.util.HashMap m) {   java.util.HashMap res = (java.util.HashMap) m.clone();   java.util.Set es = m.entrySet();   java.util.Iterator it = es.iterator();   java.util.Map.Entry e = (java.util.Map.Entry) it.next();   res.remove(e.getKey());   return res; }   





  /** the declared options string */
  public static final String DECLARED_OPTIONS = 
    "<options>" +
    "<boolean name='noSyntaxCheck' altName='' description='Do not perform syntax checking' value='false'/>" +
    "</options>";

  /** op and type declarator */
  private final static String OPERATOR    = "Operator";
  private final static String CONSTRUCTOR = "%op";
  private final static String OP_ARRAY    = "%oparray";
  private final static String OP_LIST     = "%oplist";
  private final static String TYPE        = "Type";
  private final static String TYPE_TERM   = "%typeterm";

  /** type function symbols */
  private final static String EQUALS      = "equals";
  private final static String GET_ELEMENT = "get_element";
  private final static String GET_SIZE    = "get_size";
  private final static String GET_HEAD    = "get_head";
  private final static String GET_TAIL    = "get_tail";
  private final static String IS_EMPTY    = "is_empty";
  /** operator function symbols */
  private final static String MAKE_APPEND = "make_append";
  private final static String MAKE_EMPTY  = "make_empty";
  private final static String MAKE_INSERT = "make_insert";
  private final static String MAKE        = "make";

  /** the list of already studied and declared Types */
  private  ArrayList alreadyStudiedTypes =  null;
  /** the list of already studied and declared Symbol */
  private  ArrayList alreadyStudiedSymbols =  null;

  /** List of expected functional declaration in each type declaration */
  private final static ArrayList TypeTermSignature =
    new ArrayList(Arrays.asList(new String[]{ TomSyntaxChecker.EQUALS }));

  /** Constructor */
  public TomSyntaxChecker() {
    super("TomSyntaxChecker");
    reinit();
  }

  /**
   * inherited from OptionOwner interface (plugin)
   */
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomSyntaxChecker.DECLARED_OPTIONS);
  }

  protected void reinit() {
    super.reinit();
    alreadyStudiedTypes   = new ArrayList();
    alreadyStudiedSymbols = new ArrayList();
  }

  public void run() {       
    if(isActivated()) {
      strictType = !getOptionBooleanValue("lazyType");
      long startChrono = System.currentTimeMillis();
      try {
        // clean up internals
        reinit();
        // perform analyse
        try {
          tom_make_TopDownCollect(tom_make_checkSyntax(this)).visitLight((TomTerm)getWorkingTerm());
        } catch(tom.library.sl.VisitFailure e) {
          System.out.println("strategy failed");
        }
        // verbose
        getLogger().log(Level.INFO, TomMessage.tomSyntaxCheckingPhase.getMessage(),
            Integer.valueOf((int)(System.currentTimeMillis()-startChrono)));
      } catch (Exception e) {
        getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                        new Object[]{getClass().getName(),
                                     getStreamManager().getInputFileName(),
                                     e.getMessage() });
        e.printStackTrace();
      }
    } else {
      // syntax checker desactivated
      getLogger().log(Level.INFO, TomMessage.syntaxCheckerInactivated.getMessage());
    }
  }

  private boolean isActivated() {
    return !getOptionBooleanValue("noSyntaxCheck");
  }

  /**
   * Syntax checking entry point: Catch and verify all type and operator
   * declaration, Match instruction
   */
  private static class checkSyntax extends tom.library.sl.BasicStrategy {private  TomSyntaxChecker  tsc;public checkSyntax( TomSyntaxChecker  tsc) {super(( new tom.library.sl.Identity() ));this.tsc=tsc;}public  TomSyntaxChecker  gettsc() {return tsc;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomdeclaration.types.Declaration  visit_Declaration( tom.engine.adt.tomdeclaration.types.Declaration  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumber_freshVar_2=tomMatch79NameNumberfreshSubject_1;if ( (tomMatch79NameNumber_freshVar_2 instanceof tom.engine.adt.tomdeclaration.types.declaration.Strategy) ) {{  tom.engine.adt.tomsignature.types.TomVisitList  tomMatch79NameNumber_freshVar_0= tomMatch79NameNumber_freshVar_2.getVisitList() ;{  tom.engine.adt.tomoption.types.Option  tomMatch79NameNumber_freshVar_1= tomMatch79NameNumber_freshVar_2.getOrgTrack() ;{  tom.engine.adt.tomsignature.types.TomVisitList  tom_list=tomMatch79NameNumber_freshVar_0;{  tom.engine.adt.tomoption.types.Option  tom_origin=tomMatch79NameNumber_freshVar_1;if ( true ) {








        if(tom_list.isEmptyconcTomVisit()) {
          {if ( (tom_origin instanceof tom.engine.adt.tomoption.types.Option) ) {{  tom.engine.adt.tomoption.types.Option  tomMatch80NameNumberfreshSubject_1=(( tom.engine.adt.tomoption.types.Option )tom_origin);{  tom.engine.adt.tomoption.types.Option  tomMatch80NameNumber_freshVar_2=tomMatch80NameNumberfreshSubject_1;if ( (tomMatch80NameNumber_freshVar_2 instanceof tom.engine.adt.tomoption.types.option.OriginTracking) ) {{  String  tomMatch80NameNumber_freshVar_0= tomMatch80NameNumber_freshVar_2.getFileName() ;{  int  tomMatch80NameNumber_freshVar_1= tomMatch80NameNumber_freshVar_2.getLine() ;if ( true ) {
 
              tsc.messageError(tomMatch80NameNumber_freshVar_0,tomMatch80NameNumber_freshVar_1,TomMessage.emptyStrategy,new Object[]{});
            }}}}}}}}

          tsc.messageError("unknown",-1,TomMessage.emptyStrategy,new Object[]{});
        }
        /* STRATEGY MATCH STRUCTURE */
        tsc.verifyStrategy(tom_list);
        throw new tom.library.sl.VisitFailure();// stop the top-down
      }}}}}}}}}if ( (tom__arg instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumber_freshVar_6=tomMatch79NameNumberfreshSubject_1;if ( (tomMatch79NameNumber_freshVar_6 instanceof tom.engine.adt.tomdeclaration.types.declaration.TypeTermDecl) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_3= tomMatch79NameNumber_freshVar_6.getAstName() ;{  tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch79NameNumber_freshVar_4= tomMatch79NameNumber_freshVar_6.getDeclarations() ;{  tom.engine.adt.tomoption.types.Option  tomMatch79NameNumber_freshVar_5= tomMatch79NameNumber_freshVar_6.getOrgTrack() ;{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_8=tomMatch79NameNumber_freshVar_3;if ( (tomMatch79NameNumber_freshVar_8 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch79NameNumber_freshVar_7= tomMatch79NameNumber_freshVar_8.getString() ;if ( true ) {





        tsc.verifyTypeDecl(TomSyntaxChecker.TYPE_TERM, tomMatch79NameNumber_freshVar_7, tomMatch79NameNumber_freshVar_4, tomMatch79NameNumber_freshVar_5);
        throw new tom.library.sl.VisitFailure();// stop the top-down
      }}}}}}}}}}}if ( (tom__arg instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumber_freshVar_10=tomMatch79NameNumberfreshSubject_1;if ( (tomMatch79NameNumber_freshVar_10 instanceof tom.engine.adt.tomdeclaration.types.declaration.SymbolDecl) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_9= tomMatch79NameNumber_freshVar_10.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_12=tomMatch79NameNumber_freshVar_9;if ( (tomMatch79NameNumber_freshVar_12 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch79NameNumber_freshVar_11= tomMatch79NameNumber_freshVar_12.getString() ;if ( true ) {


        tsc.verifySymbol(TomSyntaxChecker.CONSTRUCTOR, tsc.getSymbolFromName(tomMatch79NameNumber_freshVar_11));
        throw new tom.library.sl.VisitFailure();// stop the top-down
      }}}}}}}}}if ( (tom__arg instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumber_freshVar_14=tomMatch79NameNumberfreshSubject_1;if ( (tomMatch79NameNumber_freshVar_14 instanceof tom.engine.adt.tomdeclaration.types.declaration.ArraySymbolDecl) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_13= tomMatch79NameNumber_freshVar_14.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_16=tomMatch79NameNumber_freshVar_13;if ( (tomMatch79NameNumber_freshVar_16 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch79NameNumber_freshVar_15= tomMatch79NameNumber_freshVar_16.getString() ;if ( true ) {

        tsc.verifySymbol(TomSyntaxChecker.OP_ARRAY, tsc.getSymbolFromName(tomMatch79NameNumber_freshVar_15));
        throw new tom.library.sl.VisitFailure();// stop the top-down
      }}}}}}}}}if ( (tom__arg instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch79NameNumber_freshVar_18=tomMatch79NameNumberfreshSubject_1;if ( (tomMatch79NameNumber_freshVar_18 instanceof tom.engine.adt.tomdeclaration.types.declaration.ListSymbolDecl) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_17= tomMatch79NameNumber_freshVar_18.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch79NameNumber_freshVar_20=tomMatch79NameNumber_freshVar_17;if ( (tomMatch79NameNumber_freshVar_20 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch79NameNumber_freshVar_19= tomMatch79NameNumber_freshVar_20.getString() ;if ( true ) {

        tsc.verifySymbol(TomSyntaxChecker.OP_LIST, tsc.getSymbolFromName(tomMatch79NameNumber_freshVar_19));
        throw new tom.library.sl.VisitFailure();// stop the top-down
      }}}}}}}}}}return _visit_Declaration(tom__arg,introspector); }public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tominstruction.types.Instruction) ) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch81NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);{  tom.engine.adt.tominstruction.types.Instruction  tomMatch81NameNumber_freshVar_2=tomMatch81NameNumberfreshSubject_1;if ( (tomMatch81NameNumber_freshVar_2 instanceof tom.engine.adt.tominstruction.types.instruction.Match) ) {{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch81NameNumber_freshVar_0= tomMatch81NameNumber_freshVar_2.getConstraintInstructionList() ;{  tom.engine.adt.tomoption.types.OptionList  tomMatch81NameNumber_freshVar_1= tomMatch81NameNumber_freshVar_2.getOption() ;if ( true ) {




       /* TOM MATCH STRUCTURE */
       tsc.verifyMatch(tomMatch81NameNumber_freshVar_0, tomMatch81NameNumber_freshVar_1);
     }}}}}}}}return _visit_Instruction(tom__arg,introspector); }public  tom.engine.adt.tominstruction.types.Instruction  _visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tominstruction.types.Instruction )any.visit(environment,introspector));} else {return (( tom.engine.adt.tominstruction.types.Instruction )any.visitLight(arg,introspector));} }public  tom.engine.adt.tomdeclaration.types.Declaration  _visit_Declaration( tom.engine.adt.tomdeclaration.types.Declaration  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomdeclaration.types.Declaration )any.visit(environment,introspector));} else {return (( tom.engine.adt.tomdeclaration.types.Declaration )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tominstruction.types.Instruction) ) {return visit_Instruction((( tom.engine.adt.tominstruction.types.Instruction )v),introspector);}if ( (v instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {return visit_Declaration((( tom.engine.adt.tomdeclaration.types.Declaration )v),introspector);}if (!((environment ==  null ))) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_checkSyntax( TomSyntaxChecker  t0) { return new checkSyntax(t0);}



  // /////////////////////////////
  // TYPE DECLARATION CONCERNS //
  // ////////////////////////////
  private void verifyTypeDecl(String declType, String tomName, DeclarationList listOfDeclaration, Option typeOrgTrack) {
    currentTomStructureOrgTrack = typeOrgTrack;
    // ensure first definition
    verifyMultipleDefinition(tomName, declType, TYPE);
    // verify Macro functions
    ArrayList verifyList = new ArrayList(TomSyntaxChecker.TypeTermSignature);

    {if ( (listOfDeclaration instanceof tom.engine.adt.tomdeclaration.types.DeclarationList) ) {{  tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch82NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.DeclarationList )listOfDeclaration);{  tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch82NameNumber_freshVar_0=tomMatch82NameNumberfreshSubject_1;if ( ((tomMatch82NameNumber_freshVar_0 instanceof tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration) || (tomMatch82NameNumber_freshVar_0 instanceof tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration)) ) {{  tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch82NameNumber_begin_2=tomMatch82NameNumber_freshVar_0;{  tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch82NameNumber_end_3=tomMatch82NameNumber_freshVar_0;do {{{  tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch82NameNumber_freshVar_1=tomMatch82NameNumber_end_3;if (!( tomMatch82NameNumber_freshVar_1.isEmptyconcDeclaration() )) {{  tom.engine.adt.tomdeclaration.types.Declaration  tom_d= tomMatch82NameNumber_freshVar_1.getHeadconcDeclaration() ;{  tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch82NameNumber_freshVar_4= tomMatch82NameNumber_freshVar_1.getTailconcDeclaration() ;if ( true ) {
 // for each Declaration
        Declaration decl = tom_d;
        matchblock:{
          {if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumber_freshVar_4=tomMatch83NameNumberfreshSubject_1;if ( (tomMatch83NameNumber_freshVar_4 instanceof tom.engine.adt.tomdeclaration.types.declaration.EqualTermDecl) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_0= tomMatch83NameNumber_freshVar_4.getTermArg1() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_1= tomMatch83NameNumber_freshVar_4.getTermArg2() ;{  tom.engine.adt.tomexpression.types.Expression  tomMatch83NameNumber_freshVar_2= tomMatch83NameNumber_freshVar_4.getExpr() ;{  tom.engine.adt.tomoption.types.Option  tomMatch83NameNumber_freshVar_3= tomMatch83NameNumber_freshVar_4.getOrgTrack() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_6=tomMatch83NameNumber_freshVar_0;if ( (tomMatch83NameNumber_freshVar_6 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_5= tomMatch83NameNumber_freshVar_6.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_8=tomMatch83NameNumber_freshVar_5;if ( (tomMatch83NameNumber_freshVar_8 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch83NameNumber_freshVar_7= tomMatch83NameNumber_freshVar_8.getString() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_10=tomMatch83NameNumber_freshVar_1;if ( (tomMatch83NameNumber_freshVar_10 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_9= tomMatch83NameNumber_freshVar_10.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_12=tomMatch83NameNumber_freshVar_9;if ( (tomMatch83NameNumber_freshVar_12 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch83NameNumber_freshVar_11= tomMatch83NameNumber_freshVar_12.getString() ;if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.EQUALS,verifyList,tomMatch83NameNumber_freshVar_3,tomMatch83NameNumber_freshVar_7,tomMatch83NameNumber_freshVar_11,declType)


;
              break matchblock;
            }}}}}}}}}}}}}}}}}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumber_freshVar_14=tomMatch83NameNumberfreshSubject_1;if ( (tomMatch83NameNumber_freshVar_14 instanceof tom.engine.adt.tomdeclaration.types.declaration.GetHeadDecl) ) {{  tom.engine.adt.tomoption.types.Option  tomMatch83NameNumber_freshVar_13= tomMatch83NameNumber_freshVar_14.getOrgTrack() ;if ( true ) {checkField(TomSyntaxChecker.GET_HEAD,verifyList,tomMatch83NameNumber_freshVar_13,declType)


;
              break matchblock;
            }}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumber_freshVar_16=tomMatch83NameNumberfreshSubject_1;if ( (tomMatch83NameNumber_freshVar_16 instanceof tom.engine.adt.tomdeclaration.types.declaration.GetTailDecl) ) {{  tom.engine.adt.tomoption.types.Option  tomMatch83NameNumber_freshVar_15= tomMatch83NameNumber_freshVar_16.getOrgTrack() ;if ( true ) {checkField(TomSyntaxChecker.GET_TAIL,verifyList,tomMatch83NameNumber_freshVar_15,declType)

;
              break matchblock;
            }}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumber_freshVar_18=tomMatch83NameNumberfreshSubject_1;if ( (tomMatch83NameNumber_freshVar_18 instanceof tom.engine.adt.tomdeclaration.types.declaration.IsEmptyDecl) ) {{  tom.engine.adt.tomoption.types.Option  tomMatch83NameNumber_freshVar_17= tomMatch83NameNumber_freshVar_18.getOrgTrack() ;if ( true ) {checkField(TomSyntaxChecker.IS_EMPTY,verifyList,tomMatch83NameNumber_freshVar_17,declType)

;
              break matchblock;
            }}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumber_freshVar_22=tomMatch83NameNumberfreshSubject_1;if ( (tomMatch83NameNumber_freshVar_22 instanceof tom.engine.adt.tomdeclaration.types.declaration.GetElementDecl) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_19= tomMatch83NameNumber_freshVar_22.getVariable() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_20= tomMatch83NameNumber_freshVar_22.getIndex() ;{  tom.engine.adt.tomoption.types.Option  tomMatch83NameNumber_freshVar_21= tomMatch83NameNumber_freshVar_22.getOrgTrack() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_24=tomMatch83NameNumber_freshVar_19;if ( (tomMatch83NameNumber_freshVar_24 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_23= tomMatch83NameNumber_freshVar_24.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_26=tomMatch83NameNumber_freshVar_23;if ( (tomMatch83NameNumber_freshVar_26 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch83NameNumber_freshVar_25= tomMatch83NameNumber_freshVar_26.getString() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch83NameNumber_freshVar_28=tomMatch83NameNumber_freshVar_20;if ( (tomMatch83NameNumber_freshVar_28 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_27= tomMatch83NameNumber_freshVar_28.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch83NameNumber_freshVar_30=tomMatch83NameNumber_freshVar_27;if ( (tomMatch83NameNumber_freshVar_30 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch83NameNumber_freshVar_29= tomMatch83NameNumber_freshVar_30.getString() ;if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.GET_ELEMENT,verifyList,tomMatch83NameNumber_freshVar_21,tomMatch83NameNumber_freshVar_25,tomMatch83NameNumber_freshVar_29,declType)


;
              break matchblock;
            }}}}}}}}}}}}}}}}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch83NameNumber_freshVar_32=tomMatch83NameNumberfreshSubject_1;if ( (tomMatch83NameNumber_freshVar_32 instanceof tom.engine.adt.tomdeclaration.types.declaration.GetSizeDecl) ) {{  tom.engine.adt.tomoption.types.Option  tomMatch83NameNumber_freshVar_31= tomMatch83NameNumber_freshVar_32.getOrgTrack() ;if ( true ) {checkField(TomSyntaxChecker.GET_SIZE,verifyList,tomMatch83NameNumber_freshVar_31,declType)

;
              break matchblock;
            }}}}}}}

                   }
      }}}}}if ( tomMatch82NameNumber_end_3.isEmptyconcDeclaration() ) {tomMatch82NameNumber_end_3=tomMatch82NameNumber_begin_2;} else {tomMatch82NameNumber_end_3= tomMatch82NameNumber_end_3.getTailconcDeclaration() ;}}} while(!( (tomMatch82NameNumber_end_3==tomMatch82NameNumber_begin_2) ));}}}}}}}

    // remove non mandatory functions
    if(verifyList.contains(TomSyntaxChecker.EQUALS)) {
      verifyList.remove(verifyList.indexOf(TomSyntaxChecker.EQUALS));
    }
    if(!verifyList.isEmpty()) {
      messageMissingMacroFunctions(declType, verifyList);
    }
  } // verifyTypeDecl

  private void verifyMultipleDefinition(String name, String symbolType, String OperatorOrType) {
    ArrayList list;
    if (OperatorOrType.equals(TomSyntaxChecker.OPERATOR)) {
      list = alreadyStudiedSymbols;
    } else {
      list = alreadyStudiedTypes;
    }
    if(list.contains(name)) {
      messageError(currentTomStructureOrgTrack.getFileName(),
          currentTomStructureOrgTrack.getLine(),
          TomMessage.multipleSymbolDefinitionError,
          new Object[]{name});
    } else {
      list.add(name);
    }
  } // verifyMultipleDefinition

  private  void checkField(String function, ArrayList foundFunctions, Option orgTrack, String symbolType) {
    if(foundFunctions.contains(function)) {
      foundFunctions.remove(foundFunctions.indexOf(function));
    } else {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.macroFunctionRepeated,
                   new Object[]{function});
    }
  } // checkField

  private  void checkFieldAndLinearArgs(String function, ArrayList foundFunctions, Option orgTrack, String name1, String name2, String symbolType) {
    checkField(function,foundFunctions, orgTrack, symbolType);
    if(name1.equals(name2)) {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.nonLinearMacroFunction,
                   new Object[]{function, name1});
    }
  } // checkFieldAndLinearArgs

  // ///////////////////////////////
  // SYMBOL DECLARATION CONCERNS //
  // ///////////////////////////////
  private  void verifySymbol(String symbolType, TomSymbol tomSymbol){
    int domainLength;
    String symbStrName = tomSymbol.getAstName().getString();
    OptionList optionList = tomSymbol.getOption();
    // We save first the origin tracking of the symbol declaration
    currentTomStructureOrgTrack = TomBase.findOriginTracking(optionList);

    // ensure first definition then Codomain, Domain, Macros and Slots (Simple
    // operator)
    verifyMultipleDefinition(symbStrName, symbolType, TomSyntaxChecker.OPERATOR);
    verifySymbolCodomain(TomBase.getSymbolCodomain(tomSymbol), symbStrName, symbolType);
    domainLength = verifySymbolDomain(TomBase.getSymbolDomain(tomSymbol), symbStrName, symbolType);
    verifySymbolMacroFunctions(optionList, domainLength, symbolType);
  } // verifySymbol

  private  void verifySymbolCodomain(TomType codomain, String symbName, String symbolType) {
    {if ( (codomain instanceof tom.engine.adt.tomtype.types.TomType) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch84NameNumberfreshSubject_1=(( tom.engine.adt.tomtype.types.TomType )codomain);{  tom.engine.adt.tomtype.types.TomType  tomMatch84NameNumber_freshVar_1=tomMatch84NameNumberfreshSubject_1;if ( (tomMatch84NameNumber_freshVar_1 instanceof tom.engine.adt.tomtype.types.tomtype.Codomain) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch84NameNumber_freshVar_0= tomMatch84NameNumber_freshVar_1.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch84NameNumber_freshVar_3=tomMatch84NameNumber_freshVar_0;if ( (tomMatch84NameNumber_freshVar_3 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch84NameNumber_freshVar_2= tomMatch84NameNumber_freshVar_3.getString() ;if ( true ) {

        if(symbolTable().getSymbolFromName(tomMatch84NameNumber_freshVar_2) == null) {
          messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
              TomMessage.symbolCodomainError,
              new Object[]{symbName, codomain});
        }
        return;
      }}}}}}}}}if ( (codomain instanceof tom.engine.adt.tomtype.types.TomType) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch84NameNumberfreshSubject_1=(( tom.engine.adt.tomtype.types.TomType )codomain);{  tom.engine.adt.tomtype.types.TomType  tomMatch84NameNumber_freshVar_5=tomMatch84NameNumberfreshSubject_1;if ( (tomMatch84NameNumber_freshVar_5 instanceof tom.engine.adt.tomtype.types.tomtype.TomTypeAlone) ) {{  String  tomMatch84NameNumber_freshVar_4= tomMatch84NameNumber_freshVar_5.getString() ;{  String  tom_typeName=tomMatch84NameNumber_freshVar_4;if ( true ) {


        if(!testTypeExistence(tom_typeName)) {
          messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
              TomMessage.symbolCodomainError,
              new Object[]{symbName, (tom_typeName)});
          if(tom_typeName.equals("Strategy")) {
          messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
              TomMessage.missingIncludeSL,
              new Object[]{});

          }
        }
        return;
      }}}}}}}if ( (codomain instanceof tom.engine.adt.tomtype.types.TomType) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch84NameNumberfreshSubject_1=(( tom.engine.adt.tomtype.types.TomType )codomain);{  tom.engine.adt.tomtype.types.TomType  tomMatch84NameNumber_freshVar_6=tomMatch84NameNumberfreshSubject_1;if ( (tomMatch84NameNumber_freshVar_6 instanceof tom.engine.adt.tomtype.types.tomtype.EmptyType) ) {if ( true ) {


        messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
            TomMessage.symbolCodomainError,
            new Object[]{symbName, ""});
        return;
      }}}}}}

    throw new TomRuntimeException("Strange codomain "+codomain);
  }

  private  int verifySymbolDomain(TomTypeList args, String symbName, String symbolType) {
    int position = 1;
    if(symbolType.equals(TomSyntaxChecker.CONSTRUCTOR)) {
      {if ( (args instanceof tom.engine.adt.tomtype.types.TomTypeList) ) {{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch85NameNumberfreshSubject_1=(( tom.engine.adt.tomtype.types.TomTypeList )args);{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch85NameNumber_freshVar_0=tomMatch85NameNumberfreshSubject_1;if ( ((tomMatch85NameNumber_freshVar_0 instanceof tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType) || (tomMatch85NameNumber_freshVar_0 instanceof tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType)) ) {{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch85NameNumber_begin_2=tomMatch85NameNumber_freshVar_0;{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch85NameNumber_end_3=tomMatch85NameNumber_freshVar_0;do {{{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch85NameNumber_freshVar_1=tomMatch85NameNumber_end_3;if (!( tomMatch85NameNumber_freshVar_1.isEmptyconcTomType() )) {{  tom.engine.adt.tomtype.types.TomType  tomMatch85NameNumber_freshVar_7= tomMatch85NameNumber_freshVar_1.getHeadconcTomType() ;if ( (tomMatch85NameNumber_freshVar_7 instanceof tom.engine.adt.tomtype.types.tomtype.TomTypeAlone) ) {{  String  tomMatch85NameNumber_freshVar_6= tomMatch85NameNumber_freshVar_7.getString() ;{  String  tom_typeName=tomMatch85NameNumber_freshVar_6;{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch85NameNumber_freshVar_4= tomMatch85NameNumber_freshVar_1.getTailconcTomType() ;if ( true ) {
 // for each symbol types
          if(!testTypeExistence(tom_typeName)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.symbolDomainError,
                new Object[]{Integer.valueOf(position), symbName, (tom_typeName)});
          }
          position++;
        }}}}}}}}if ( tomMatch85NameNumber_end_3.isEmptyconcTomType() ) {tomMatch85NameNumber_end_3=tomMatch85NameNumber_begin_2;} else {tomMatch85NameNumber_end_3= tomMatch85NameNumber_end_3.getTailconcTomType() ;}}} while(!( (tomMatch85NameNumber_end_3==tomMatch85NameNumber_begin_2) ));}}}}}}}

      return (position-1);
    } else { // OPARRAY and OPLIST
      {if ( (args instanceof tom.engine.adt.tomtype.types.TomTypeList) ) {{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch86NameNumberfreshSubject_1=(( tom.engine.adt.tomtype.types.TomTypeList )args);{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch86NameNumber_freshVar_0=tomMatch86NameNumberfreshSubject_1;if ( ((tomMatch86NameNumber_freshVar_0 instanceof tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType) || (tomMatch86NameNumber_freshVar_0 instanceof tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType)) ) {if (!( tomMatch86NameNumber_freshVar_0.isEmptyconcTomType() )) {{  tom.engine.adt.tomtype.types.TomType  tomMatch86NameNumber_freshVar_3= tomMatch86NameNumber_freshVar_0.getHeadconcTomType() ;if ( (tomMatch86NameNumber_freshVar_3 instanceof tom.engine.adt.tomtype.types.tomtype.TomTypeAlone) ) {{  String  tomMatch86NameNumber_freshVar_2= tomMatch86NameNumber_freshVar_3.getString() ;{  String  tom_typeName=tomMatch86NameNumber_freshVar_2;{  tom.engine.adt.tomtype.types.TomTypeList  tomMatch86NameNumber_freshVar_1= tomMatch86NameNumber_freshVar_0.getTailconcTomType() ;if ( tomMatch86NameNumber_freshVar_1.isEmptyconcTomType() ) {if ( true ) {

          if(!testTypeExistence(tom_typeName)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.listSymbolDomainError,
                new Object[]{symbName, (tom_typeName)});
          }
        }}}}}}}}}}}}}
 // match
      return 1;
    }
  } // verifySymbolDomain

  private  void verifySymbolMacroFunctions(OptionList option, int domainLength, String symbolType) {
    ArrayList verifyList = new ArrayList();
    boolean foundOpMake = false;
    if(symbolType.equals(TomSyntaxChecker.CONSTRUCTOR)) { // Nothing absolutely
                                                          // necessary
    } else if(symbolType == TomSyntaxChecker.OP_ARRAY ) {
      verifyList.add(TomSyntaxChecker.MAKE_EMPTY);
      verifyList.add(TomSyntaxChecker.MAKE_APPEND);
    } else if(symbolType == TomSyntaxChecker.OP_LIST) {
      verifyList.add(TomSyntaxChecker.MAKE_EMPTY);
      verifyList.add(TomSyntaxChecker.MAKE_INSERT);
    }

    {if ( (option instanceof tom.engine.adt.tomoption.types.OptionList) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch87NameNumberfreshSubject_1=(( tom.engine.adt.tomoption.types.OptionList )option);{  tom.engine.adt.tomoption.types.OptionList  tomMatch87NameNumber_freshVar_0=tomMatch87NameNumberfreshSubject_1;if ( ((tomMatch87NameNumber_freshVar_0 instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption) || (tomMatch87NameNumber_freshVar_0 instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption)) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch87NameNumber_begin_2=tomMatch87NameNumber_freshVar_0;{  tom.engine.adt.tomoption.types.OptionList  tomMatch87NameNumber_end_3=tomMatch87NameNumber_freshVar_0;do {{{  tom.engine.adt.tomoption.types.OptionList  tomMatch87NameNumber_freshVar_1=tomMatch87NameNumber_end_3;if (!( tomMatch87NameNumber_freshVar_1.isEmptyconcOption() )) {{  tom.engine.adt.tomoption.types.Option  tomMatch87NameNumber_freshVar_7= tomMatch87NameNumber_freshVar_1.getHeadconcOption() ;if ( (tomMatch87NameNumber_freshVar_7 instanceof tom.engine.adt.tomoption.types.option.DeclarationToOption) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch87NameNumber_freshVar_6= tomMatch87NameNumber_freshVar_7.getAstDeclaration() ;{  tom.engine.adt.tomoption.types.OptionList  tomMatch87NameNumber_freshVar_4= tomMatch87NameNumber_freshVar_1.getTailconcOption() ;if ( true ) {
 // for each Declaration
        Declaration decl=tomMatch87NameNumber_freshVar_6;
        matchblock:{
          {if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumber_freshVar_1=tomMatch88NameNumberfreshSubject_1;if ( (tomMatch88NameNumber_freshVar_1 instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeEmptyArray) ) {{  tom.engine.adt.tomoption.types.Option  tomMatch88NameNumber_freshVar_0= tomMatch88NameNumber_freshVar_1.getOrgTrack() ;if ( true ) {checkField(TomSyntaxChecker.MAKE_EMPTY,verifyList,tomMatch88NameNumber_freshVar_0,symbolType)


;
              break matchblock;
            }}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumber_freshVar_5=tomMatch88NameNumberfreshSubject_1;if ( (tomMatch88NameNumber_freshVar_5 instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeAddArray) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_2= tomMatch88NameNumber_freshVar_5.getVarList() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_3= tomMatch88NameNumber_freshVar_5.getVarElt() ;{  tom.engine.adt.tomoption.types.Option  tomMatch88NameNumber_freshVar_4= tomMatch88NameNumber_freshVar_5.getOrgTrack() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_7=tomMatch88NameNumber_freshVar_2;if ( (tomMatch88NameNumber_freshVar_7 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_6= tomMatch88NameNumber_freshVar_7.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_9=tomMatch88NameNumber_freshVar_6;if ( (tomMatch88NameNumber_freshVar_9 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch88NameNumber_freshVar_8= tomMatch88NameNumber_freshVar_9.getString() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_11=tomMatch88NameNumber_freshVar_3;if ( (tomMatch88NameNumber_freshVar_11 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_10= tomMatch88NameNumber_freshVar_11.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_13=tomMatch88NameNumber_freshVar_10;if ( (tomMatch88NameNumber_freshVar_13 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch88NameNumber_freshVar_12= tomMatch88NameNumber_freshVar_13.getString() ;if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.MAKE_APPEND,verifyList,tomMatch88NameNumber_freshVar_4,tomMatch88NameNumber_freshVar_8,tomMatch88NameNumber_freshVar_12,symbolType)

;
              break matchblock;
            }}}}}}}}}}}}}}}}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumber_freshVar_15=tomMatch88NameNumberfreshSubject_1;if ( (tomMatch88NameNumber_freshVar_15 instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeEmptyList) ) {{  tom.engine.adt.tomoption.types.Option  tomMatch88NameNumber_freshVar_14= tomMatch88NameNumber_freshVar_15.getOrgTrack() ;if ( true ) {checkField(TomSyntaxChecker.MAKE_EMPTY,verifyList,tomMatch88NameNumber_freshVar_14,symbolType)


;
              break matchblock;
            }}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumber_freshVar_19=tomMatch88NameNumberfreshSubject_1;if ( (tomMatch88NameNumber_freshVar_19 instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeAddList) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_16= tomMatch88NameNumber_freshVar_19.getVarList() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_17= tomMatch88NameNumber_freshVar_19.getVarElt() ;{  tom.engine.adt.tomoption.types.Option  tomMatch88NameNumber_freshVar_18= tomMatch88NameNumber_freshVar_19.getOrgTrack() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_21=tomMatch88NameNumber_freshVar_16;if ( (tomMatch88NameNumber_freshVar_21 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_20= tomMatch88NameNumber_freshVar_21.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_23=tomMatch88NameNumber_freshVar_20;if ( (tomMatch88NameNumber_freshVar_23 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch88NameNumber_freshVar_22= tomMatch88NameNumber_freshVar_23.getString() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch88NameNumber_freshVar_25=tomMatch88NameNumber_freshVar_17;if ( (tomMatch88NameNumber_freshVar_25 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_24= tomMatch88NameNumber_freshVar_25.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch88NameNumber_freshVar_27=tomMatch88NameNumber_freshVar_24;if ( (tomMatch88NameNumber_freshVar_27 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch88NameNumber_freshVar_26= tomMatch88NameNumber_freshVar_27.getString() ;if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.MAKE_INSERT,verifyList,tomMatch88NameNumber_freshVar_18,tomMatch88NameNumber_freshVar_22,tomMatch88NameNumber_freshVar_26,symbolType)

;
              break matchblock;
            }}}}}}}}}}}}}}}}}}}}if ( (decl instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl);{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch88NameNumber_freshVar_30=tomMatch88NameNumberfreshSubject_1;if ( (tomMatch88NameNumber_freshVar_30 instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeDecl) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch88NameNumber_freshVar_28= tomMatch88NameNumber_freshVar_30.getArgs() ;{  tom.engine.adt.tomoption.types.Option  tomMatch88NameNumber_freshVar_29= tomMatch88NameNumber_freshVar_30.getOrgTrack() ;{  tom.engine.adt.tomoption.types.Option  tomMatch88NameNumber_freshVar_33=tomMatch88NameNumber_freshVar_29;if ( (tomMatch88NameNumber_freshVar_33 instanceof tom.engine.adt.tomoption.types.option.OriginTracking) ) {{  String  tomMatch88NameNumber_freshVar_31= tomMatch88NameNumber_freshVar_33.getFileName() ;{  int  tomMatch88NameNumber_freshVar_32= tomMatch88NameNumber_freshVar_33.getLine() ;if ( true ) {


              if (!foundOpMake) {
                foundOpMake = true;
                verifyMakeDeclArgs(tomMatch88NameNumber_freshVar_28,domainLength,tomMatch88NameNumber_freshVar_29,symbolType);
              } else {
                messageError(tomMatch88NameNumber_freshVar_31, tomMatch88NameNumber_freshVar_32,
                             TomMessage.macroFunctionRepeated,
                             new Object[]{TomSyntaxChecker.MAKE});
              }
              break matchblock;
            }}}}}}}}}}}}

        }
      }}}}}}}if ( tomMatch87NameNumber_end_3.isEmptyconcOption() ) {tomMatch87NameNumber_end_3=tomMatch87NameNumber_begin_2;} else {tomMatch87NameNumber_end_3= tomMatch87NameNumber_end_3.getTailconcOption() ;}}} while(!( (tomMatch87NameNumber_end_3==tomMatch87NameNumber_begin_2) ));}}}}}}}

    if(!verifyList.isEmpty()) {
      messageMissingMacroFunctions(symbolType, verifyList);
    }
  }  // verifySymbolMacroFunctions

  private  void verifyMakeDeclArgs(TomList argsList, int domainLength, Option orgTrack, String symbolType){
      // we test the necessity to use different names for each
      // variable-parameter.
    int nbArgs = 0;
    ArrayList listVar = new ArrayList();
    {if ( (argsList instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch89NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )argsList);{  tom.engine.adt.tomterm.types.TomList  tomMatch89NameNumber_freshVar_0=tomMatch89NameNumberfreshSubject_1;if ( ((tomMatch89NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch89NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch89NameNumber_begin_2=tomMatch89NameNumber_freshVar_0;{  tom.engine.adt.tomterm.types.TomList  tomMatch89NameNumber_end_3=tomMatch89NameNumber_freshVar_0;do {{{  tom.engine.adt.tomterm.types.TomList  tomMatch89NameNumber_freshVar_1=tomMatch89NameNumber_end_3;if (!( tomMatch89NameNumber_freshVar_1.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch89NameNumber_freshVar_7= tomMatch89NameNumber_freshVar_1.getHeadconcTomTerm() ;if ( (tomMatch89NameNumber_freshVar_7 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch89NameNumber_freshVar_6= tomMatch89NameNumber_freshVar_7.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch89NameNumber_freshVar_9=tomMatch89NameNumber_freshVar_6;if ( (tomMatch89NameNumber_freshVar_9 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch89NameNumber_freshVar_8= tomMatch89NameNumber_freshVar_9.getString() ;{  String  tom_name=tomMatch89NameNumber_freshVar_8;{  tom.engine.adt.tomterm.types.TomList  tomMatch89NameNumber_freshVar_4= tomMatch89NameNumber_freshVar_1.getTailconcTomTerm() ;if ( true ) {
 // for each Macro variable
        if(listVar.contains(tom_name)) {
          messageError(orgTrack.getFileName(),orgTrack.getLine(),
                       TomMessage.nonLinearMacroFunction,
                       new Object[]{TomSyntaxChecker.MAKE, (tom_name)});
        } else {
          listVar.add(tom_name);
        }
        nbArgs++;
      }}}}}}}}}}}if ( tomMatch89NameNumber_end_3.isEmptyconcTomTerm() ) {tomMatch89NameNumber_end_3=tomMatch89NameNumber_begin_2;} else {tomMatch89NameNumber_end_3= tomMatch89NameNumber_end_3.getTailconcTomTerm() ;}}} while(!( (tomMatch89NameNumber_end_3==tomMatch89NameNumber_begin_2) ));}}}}}}}

    if(nbArgs != domainLength) {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.badMakeDefinition,
                   new Object[]{Integer.valueOf(nbArgs), Integer.valueOf(domainLength)});
    }
  } // verifyMakeDeclArgs

  private  void verifySymbolPairNameDeclList(PairNameDeclList pairNameDeclList, String symbolType) {
      // we test the existence of 2 same slot names
    ArrayList listSlot = new ArrayList();
    {if ( (pairNameDeclList instanceof tom.engine.adt.tomslot.types.PairNameDeclList) ) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch90NameNumberfreshSubject_1=(( tom.engine.adt.tomslot.types.PairNameDeclList )pairNameDeclList);{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch90NameNumber_freshVar_0=tomMatch90NameNumberfreshSubject_1;if ( ((tomMatch90NameNumber_freshVar_0 instanceof tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl) || (tomMatch90NameNumber_freshVar_0 instanceof tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl)) ) {{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch90NameNumber_begin_2=tomMatch90NameNumber_freshVar_0;{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch90NameNumber_end_3=tomMatch90NameNumber_freshVar_0;do {{{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch90NameNumber_freshVar_1=tomMatch90NameNumber_end_3;if (!( tomMatch90NameNumber_freshVar_1.isEmptyconcPairNameDecl() )) {{  tom.engine.adt.tomslot.types.PairNameDecl  tomMatch90NameNumber_freshVar_7= tomMatch90NameNumber_freshVar_1.getHeadconcPairNameDecl() ;if ( (tomMatch90NameNumber_freshVar_7 instanceof tom.engine.adt.tomslot.types.pairnamedecl.PairNameDecl) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch90NameNumber_freshVar_6= tomMatch90NameNumber_freshVar_7.getSlotName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch90NameNumber_freshVar_9=tomMatch90NameNumber_freshVar_6;if ( (tomMatch90NameNumber_freshVar_9 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch90NameNumber_freshVar_8= tomMatch90NameNumber_freshVar_9.getString() ;{  String  tom_name=tomMatch90NameNumber_freshVar_8;{  tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch90NameNumber_freshVar_4= tomMatch90NameNumber_freshVar_1.getTailconcPairNameDecl() ;if ( true ) {
 // for each Slot
        if(listSlot.contains(tom_name)) {
            // TODO
            // messageWarningTwoSameSlotDeclError(name, orgTrack, symbolType);
        } else {
          listSlot.add(tom_name);
        }
      }}}}}}}}}}}if ( tomMatch90NameNumber_end_3.isEmptyconcPairNameDecl() ) {tomMatch90NameNumber_end_3=tomMatch90NameNumber_begin_2;} else {tomMatch90NameNumber_end_3= tomMatch90NameNumber_end_3.getTailconcPairNameDecl() ;}}} while(!( (tomMatch90NameNumber_end_3==tomMatch90NameNumber_begin_2) ));}}}}}}}

  } // verifySymbolPairNameDeclList

  private  void messageMissingMacroFunctions(String symbolType, ArrayList list) {
    StringBuilder listOfMissingMacros = new StringBuilder();
    for(int i=0;i<list.size();i++) {
      listOfMissingMacros.append(list.get(i) + ",  ");
    }
    String stringListOfMissingMacros = listOfMissingMacros.substring(0, listOfMissingMacros.length()-3);
    messageError(currentTomStructureOrgTrack.getFileName(),
        currentTomStructureOrgTrack.getLine(),
                 TomMessage.missingMacroFunctions,
                 new Object[]{stringListOfMissingMacros});
  } // messageMissingMacroFunctions

  // ////////////////////////////// /
  // MATCH VERIFICATION CONCERNS ///
  // ////////////////////////////////
  /**
   * Verifies the match construct
   * 
   * 0. checks that are not any circular dependencies
   * 1. Verifies all MatchConstraints
   * 2. Verifies all NumericConstraints 
   * 3. Verifies that in an OrConstraint, all the members have the same free variables
   */
  private void verifyMatch(ConstraintInstructionList constraintInstructionList, OptionList option) throws VisitFailure {
    currentTomStructureOrgTrack = TomBase.findOriginTracking(option);
    ArrayList<Constraint> constraints = new ArrayList<Constraint>();    
    HashMap<TomName, List<TomName>> varRelationsMap = new HashMap();
    HashMap<Constraint, Instruction> orActionMap = new HashMap();
    ArrayList tmp = new ArrayList();
    tom_make_TopDownCollect(tom_make_CollectConstraints(constraints,tmp,orActionMap)).visitLight(constraintInstructionList);
    TomType typeMatch = null;    
    for(Constraint constr: constraints) {
matchLbl: {if ( (constr instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch91NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )constr);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch91NameNumber_freshVar_2=tomMatch91NameNumberfreshSubject_1;if ( (tomMatch91NameNumber_freshVar_2 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch91NameNumber_freshVar_0= tomMatch91NameNumber_freshVar_2.getPattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch91NameNumber_freshVar_1= tomMatch91NameNumber_freshVar_2.getSubject() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_pattern=tomMatch91NameNumber_freshVar_0;{  tom.engine.adt.tomterm.types.TomTerm  tom_subject=tomMatch91NameNumber_freshVar_1;if ( true ) {
          
          ArrayList<TomName> patternVars = new ArrayList<TomName>();
          ArrayList<TomName> subjectVars = new ArrayList<TomName>();
          tom_make_TopDownCollect(tom_make_CollectVariables(patternVars)).visitLight(tom_pattern);
          tom_make_TopDownCollect(tom_make_CollectVariables(subjectVars)).visitLight(tom_subject);
          
          computeDependencies(varRelationsMap,patternVars,subjectVars);
          {if ( (tom_subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch92NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch92NameNumber_freshVar_1=tomMatch92NameNumberfreshSubject_1;if ( (tomMatch92NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.TomTypeToTomTerm) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch92NameNumber_freshVar_0= tomMatch92NameNumber_freshVar_1.getAstType() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch92NameNumber_freshVar_2=tomMatch92NameNumber_freshVar_0;if ( (tomMatch92NameNumber_freshVar_2 instanceof tom.engine.adt.tomtype.types.tomtype.TomTypeAlone) ) {if ( true ) {

              // this is from %strategy construct and is already checked in verifyStrategy              
              break matchLbl;
            }}}}}}}}if ( (tom_subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch92NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_subject);if ( true ) {

              typeMatch = getSubjectType(tom_subject,constraints);
            }}}}

          if(typeMatch == null) {
            Object messageContent = tom_subject;
            {if ( (tom_subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch93NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch93NameNumber_freshVar_1=tomMatch93NameNumberfreshSubject_1;if ( (tomMatch93NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch93NameNumber_freshVar_0= tomMatch93NameNumber_freshVar_1.getAstName() ;{  tom.engine.adt.tomname.types.TomName  tomMatch93NameNumber_freshVar_3=tomMatch93NameNumber_freshVar_0;if ( (tomMatch93NameNumber_freshVar_3 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch93NameNumber_freshVar_2= tomMatch93NameNumber_freshVar_3.getString() ;if ( true ) {

                messageContent = tomMatch93NameNumber_freshVar_2;
              }}}}}}}}}if ( (tom_subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch93NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch93NameNumber_freshVar_5=tomMatch93NameNumberfreshSubject_1;if ( (tomMatch93NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch93NameNumber_freshVar_4= tomMatch93NameNumber_freshVar_5.getNameList() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch93NameNumber_freshVar_6=tomMatch93NameNumber_freshVar_4;if ( ((tomMatch93NameNumber_freshVar_6 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch93NameNumber_freshVar_6 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch93NameNumber_freshVar_6.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch93NameNumber_freshVar_10= tomMatch93NameNumber_freshVar_6.getHeadconcTomName() ;if ( (tomMatch93NameNumber_freshVar_10 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch93NameNumber_freshVar_9= tomMatch93NameNumber_freshVar_10.getString() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch93NameNumber_freshVar_7= tomMatch93NameNumber_freshVar_6.getTailconcTomName() ;if ( true ) {

                messageContent = tomMatch93NameNumber_freshVar_9;
              }}}}}}}}}}}}}}

            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.cannotGuessMatchType,
                new Object[]{(messageContent)});

            return;
          }

          // we now compare the pattern to its definition
          verifyMatchPattern(tom_pattern, typeMatch);
        }}}}}}}}}if ( (constr instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch91NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )constr);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch91NameNumber_freshVar_5=tomMatch91NameNumberfreshSubject_1;if ( (tomMatch91NameNumber_freshVar_5 instanceof tom.engine.adt.tomconstraint.types.constraint.NumericConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch91NameNumber_freshVar_3= tomMatch91NameNumber_freshVar_5.getPattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch91NameNumber_freshVar_4= tomMatch91NameNumber_freshVar_5.getSubject() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_left=tomMatch91NameNumber_freshVar_3;{  tom.engine.adt.tomterm.types.TomTerm  tom_right=tomMatch91NameNumber_freshVar_4;if ( true ) {








          // the lhs and rhs can only be TermAppl or Variable
          {if ( (tom_left instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch94NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_left);{ boolean tomMatch94NameNumber_freshVar_1= false ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch94NameNumber_freshVar_0=tomMatch94NameNumberfreshSubject_1;{ boolean tomMatch94NameNumber_freshVar_2= false ;if ( (tomMatch94NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch94NameNumber_freshVar_2= true ;} else {if ( (tomMatch94NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {tomMatch94NameNumber_freshVar_2= true ;} else {if ( (tomMatch94NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm) ) {tomMatch94NameNumber_freshVar_2= true ;}}}if ((tomMatch94NameNumber_freshVar_2 ==  true )) {tomMatch94NameNumber_freshVar_1= true ;}}}if ((tomMatch94NameNumber_freshVar_1 ==  false )) {if ( true ) {
              
              messageError(currentTomStructureOrgTrack.getFileName(),
                  currentTomStructureOrgTrack.getLine(),
                  TomMessage.termOrVariableNumericLeft,
                  new Object[]{getName((tom_left))});
              return;
            }}}}}}
        
          // the rhs can only be TermAppl or Variable
          {if ( (tom_right instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch95NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom_right);{ boolean tomMatch95NameNumber_freshVar_1= false ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch95NameNumber_freshVar_0=tomMatch95NameNumberfreshSubject_1;{ boolean tomMatch95NameNumber_freshVar_2= false ;if ( (tomMatch95NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch95NameNumber_freshVar_2= true ;} else {if ( (tomMatch95NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {tomMatch95NameNumber_freshVar_2= true ;} else {if ( (tomMatch95NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm) ) {tomMatch95NameNumber_freshVar_2= true ;}}}if ((tomMatch95NameNumber_freshVar_2 ==  true )) {tomMatch95NameNumber_freshVar_1= true ;}}}if ((tomMatch95NameNumber_freshVar_1 ==  false )) {if ( true ) {

              messageError(currentTomStructureOrgTrack.getFileName(),
                  currentTomStructureOrgTrack.getLine(),
                  TomMessage.termOrVariableNumericRight,
                  new Object[]{getName((tom_right))});
              return;
            }}}}}}tom_make_TopDown(tom_make_CheckNumeric(tom_left))

.visitLight(tom_left);
          tom_make_TopDown(tom_make_CheckNumeric(tom_right)).visitLight(tom_right);
          // if we have the type, check that it is the same
          TomType leftType = TomBase.getTermType(tom_left,symbolTable());
          TomType rightType = TomBase.getTermType(tom_right,symbolTable());
          // if the types are not available, leave the error to be raised by java
          if (leftType != null && leftType != SymbolTable.TYPE_UNKNOWN && leftType !=  tom.engine.adt.tomtype.types.tomtype.EmptyType.make()  
              && rightType != null && rightType != SymbolTable.TYPE_UNKNOWN && rightType !=  tom.engine.adt.tomtype.types.tomtype.EmptyType.make()  
              && (leftType != rightType)){            
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.invalidTypesNumeric,
                new Object[]{(leftType),getName((tom_left)),(rightType),getName((tom_right))}); 
            return;
          }
        }}}}}}}}}if ( (constr instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch91NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )constr);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch91NameNumber_freshVar_6=tomMatch91NameNumberfreshSubject_1;if ( ((tomMatch91NameNumber_freshVar_6 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (tomMatch91NameNumber_freshVar_6 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tom_oc=tomMatch91NameNumberfreshSubject_1;if ( true ) {


          if(!verifyOrConstraint(tom_oc,orActionMap.get(tom_oc))) {
            return;
          }
        }}}}}}}

    } // for
    
    checkVarDependencies(varRelationsMap);
  }
  
  /**
   * Puts all the variables in the list patternVars in relation with all the variables in subjectVars
   */
  private void computeDependencies(HashMap<TomName, List<TomName>>  varRelationsMap, List<TomName> patternVars, List<TomName> subjectVars){      
    for(TomName x:patternVars) {      
      if(!varRelationsMap.keySet().contains(x)) {
        varRelationsMap.put(x,subjectVars);
      } else { // add the rest of the variables
        List<TomName> tmp = new ArrayList<TomName>(subjectVars);
        tmp.addAll(varRelationsMap.get(x));
        varRelationsMap.put(x,subjectVars);
      }
    }
  }
  
  
  /**
   * Checks that there is not a circular reference of a variable
   */
  private void checkVarDependencies(HashMap<TomName, List<TomName>> varRelationsMap) {
    for (TomName var:varRelationsMap.keySet()) {
      isVariablePresent(var, varRelationsMap.get(var), varRelationsMap, new ArrayList<TomName>());
    }
  }
  
  private void isVariablePresent(TomName var, List<TomName> associatedList, HashMap<TomName, List<TomName>> varRelationsMap, List<TomName> checked) {    
    if(associatedList.contains(var)) {
      messageError(currentTomStructureOrgTrack.getFileName(),
          currentTomStructureOrgTrack.getLine(),
          TomMessage.circularReferences,
          new Object[]{((Name)var).getString()});       
    } else {
      for(TomName tn: associatedList) {
        if(checked.contains(tn)) { return; }
        checked.add(tn);
        List<TomName> lst = varRelationsMap.get(tn);
        if(lst != null) { 
          isVariablePresent(var, lst, varRelationsMap, checked);
        }
      }
    }    
  }
  
  
  /**
   * Verifies that in an OrConstraint, all the members have the same free variables 
   * (only the match constraints have free variables - because only this type
   * of constraint can generate assignments)
   */
  private boolean verifyOrConstraint(Constraint orConstraint, Instruction action) throws VisitFailure{
    ArrayList<TomTerm> freeVarList1 = new ArrayList<TomTerm>();
    ArrayList<TomTerm> freeVarList2 = new ArrayList<TomTerm>();
    {if ( (orConstraint instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch96NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )orConstraint);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch96NameNumber_freshVar_0=tomMatch96NameNumberfreshSubject_1;if ( ((tomMatch96NameNumber_freshVar_0 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (tomMatch96NameNumber_freshVar_0 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch96NameNumber_begin_2=tomMatch96NameNumber_freshVar_0;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch96NameNumber_end_3=tomMatch96NameNumber_freshVar_0;do {{{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch96NameNumber_freshVar_1=tomMatch96NameNumber_end_3;if (!( (  tomMatch96NameNumber_freshVar_1.isEmptyOrConstraint()  ||  (tomMatch96NameNumber_freshVar_1== tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() )  ) )) {{  tom.engine.adt.tomconstraint.types.Constraint  tom_x=(( ((tomMatch96NameNumber_freshVar_1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (tomMatch96NameNumber_freshVar_1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )?( tomMatch96NameNumber_freshVar_1.getHeadOrConstraint() ):(tomMatch96NameNumber_freshVar_1));{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch96NameNumber_freshVar_4=(( ((tomMatch96NameNumber_freshVar_1 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (tomMatch96NameNumber_freshVar_1 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )?( tomMatch96NameNumber_freshVar_1.getTailOrConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() ));if ( true ) {

        // we collect the free vars only from match constraints
        // and we check these variables for numeric constraints also
        // ex: 'y << a() || x > 3' should generate an error 
        {if ( (tom_x instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom_x);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumber_freshVar_2=tomMatch97NameNumberfreshSubject_1;if ( (tomMatch97NameNumber_freshVar_2 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch97NameNumber_freshVar_0= tomMatch97NameNumber_freshVar_2.getPattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch97NameNumber_freshVar_1= tomMatch97NameNumber_freshVar_2.getSubject() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_pattern=tomMatch97NameNumber_freshVar_0;if ( true ) {tom_make_TopDownCollect(tom_make_CollectFreeVar(freeVarList2))

.visitLight(tom_pattern);
            // not fully supported for the moment
            TomSymbol symb = TomBase.getSymbolFromTerm(tom_pattern,symbolTable());
            if(symb != null && !TomBase.isSyntacticOperator(symb)) {
              messageWarning(currentTomStructureOrgTrack.getFileName(),
                  currentTomStructureOrgTrack.getLine(),
                  TomMessage.notSyntacticInOr,
                  new Object[]{});
            }      
          }}}}}}}}if ( (tom_x instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom_x);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumber_freshVar_3=tomMatch97NameNumberfreshSubject_1;if ( ((tomMatch97NameNumber_freshVar_3 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch97NameNumber_freshVar_3 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumber_begin_5=tomMatch97NameNumber_freshVar_3;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumber_end_6=tomMatch97NameNumber_freshVar_3;do {{{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumber_freshVar_4=tomMatch97NameNumber_end_6;if (!( (  tomMatch97NameNumber_freshVar_4.isEmptyAndConstraint()  ||  (tomMatch97NameNumber_freshVar_4== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) )) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumber_freshVar_11=(( ((tomMatch97NameNumber_freshVar_4 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch97NameNumber_freshVar_4 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch97NameNumber_freshVar_4.getHeadAndConstraint() ):(tomMatch97NameNumber_freshVar_4));if ( (tomMatch97NameNumber_freshVar_11 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch97NameNumber_freshVar_9= tomMatch97NameNumber_freshVar_11.getPattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch97NameNumber_freshVar_10= tomMatch97NameNumber_freshVar_11.getSubject() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_pattern=tomMatch97NameNumber_freshVar_9;{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch97NameNumber_freshVar_7=(( ((tomMatch97NameNumber_freshVar_4 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch97NameNumber_freshVar_4 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch97NameNumber_freshVar_4.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ));if ( true ) {tom_make_TopDownCollect(tom_make_CollectFreeVar(freeVarList2))

.visitLight(tom_pattern);
            // not fully supported for the moment
            TomSymbol symb = TomBase.getSymbolFromTerm(tom_pattern,symbolTable());
            if(symb != null && !TomBase.isSyntacticOperator(symb)) {
              messageWarning(currentTomStructureOrgTrack.getFileName(),
                  currentTomStructureOrgTrack.getLine(),
                  TomMessage.notSyntacticInOr,
                  new Object[]{});
            }      
          }}}}}}}}}if ( (  tomMatch97NameNumber_end_6.isEmptyAndConstraint()  ||  (tomMatch97NameNumber_end_6== tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() )  ) ) {tomMatch97NameNumber_end_6=tomMatch97NameNumber_begin_5;} else {tomMatch97NameNumber_end_6=(( ((tomMatch97NameNumber_end_6 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsAndConstraint) || (tomMatch97NameNumber_end_6 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint)) )?( tomMatch97NameNumber_end_6.getTailAndConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyAndConstraint.make() ));}}} while(!( (tomMatch97NameNumber_end_6==tomMatch97NameNumber_begin_5) ));}}}}}}}
        
        if(!freeVarList1.isEmpty()) {
          for(TomTerm term:freeVarList2) {
            if (!freeVarList1.contains(term)) {
              if(containsVariable(term, action)) {              
                String varName = (term instanceof Variable) ? ((Variable)term).getAstName().getString() : ((VariableStar)term).getAstName().getString();  
                messageError(currentTomStructureOrgTrack.getFileName(),
                    currentTomStructureOrgTrack.getLine(),
                    TomMessage.freeVarNotPresentInOr,
                    new Object[]{varName});
                return false;
              }
            }
          }
          for(TomTerm term:freeVarList1) {
            if (!freeVarList2.contains(term)) {
              if(containsVariable(term, action))  {
                String varName = (term instanceof Variable) ? ((Variable)term).getAstName().getString() : ((VariableStar)term).getAstName().getString();  
                messageError(currentTomStructureOrgTrack.getFileName(),
                    currentTomStructureOrgTrack.getLine(),
                    TomMessage.freeVarNotPresentInOr,
                    new Object[]{varName});
                return false;
              }
            }
          }          
        }
        freeVarList1 = (ArrayList<TomTerm>)freeVarList2.clone();
        freeVarList2.clear();
      }}}}}if ( (  tomMatch96NameNumber_end_3.isEmptyOrConstraint()  ||  (tomMatch96NameNumber_end_3== tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() )  ) ) {tomMatch96NameNumber_end_3=tomMatch96NameNumber_begin_2;} else {tomMatch96NameNumber_end_3=(( ((tomMatch96NameNumber_end_3 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (tomMatch96NameNumber_end_3 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) )?( tomMatch96NameNumber_end_3.getTailOrConstraint() ):( tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint.make() ));}}} while(!( (tomMatch96NameNumber_end_3==tomMatch96NameNumber_begin_2) ));}}}}}}}

    return true;
  }
  
  private boolean containsVariable(TomTerm var, Instruction action){
    try{
      tom_make_TopDown(tom_make_ContainsVariable(var)).visitLight(action);
    } catch(VisitFailure e) {
      return true;
    }
    return false;
  }
  private static class ContainsVariable extends tom.library.sl.BasicStrategy {private  tom.engine.adt.tomterm.types.TomTerm  var;public ContainsVariable( tom.engine.adt.tomterm.types.TomTerm  var) {super(( new tom.library.sl.Identity() ));this.var=var;}public  tom.engine.adt.tomterm.types.TomTerm  getvar() {return var;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch98NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch98NameNumber_freshVar_0=tomMatch98NameNumberfreshSubject_1;{ boolean tomMatch98NameNumber_freshVar_1= false ;if ( (tomMatch98NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch98NameNumber_freshVar_1= true ;} else {if ( (tomMatch98NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {tomMatch98NameNumber_freshVar_1= true ;}}if ((tomMatch98NameNumber_freshVar_1 ==  true )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_v=tomMatch98NameNumberfreshSubject_1;if ( true ) {tom_v


= tom_v.setOption( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ); // to avoid problems related to line numbers
        if (tom_v==var) {
          throw new VisitFailure();
        }
      }}}}}}}}return _visit_TomTerm(tom__arg,introspector); }public  tom.engine.adt.tomterm.types.TomTerm  _visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomterm.types.TomTerm )any.visit(environment,introspector));} else {return (( tom.engine.adt.tomterm.types.TomTerm )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomterm.types.TomTerm) ) {return visit_TomTerm((( tom.engine.adt.tomterm.types.TomTerm )v),introspector);}if (!((environment ==  null ))) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_ContainsVariable( tom.engine.adt.tomterm.types.TomTerm  t0) { return new ContainsVariable(t0);}


  
  /**
   * Collect the free variables in an constraint (do not inspect under a anti)  
   */
  private static class CollectFreeVar extends tom.library.sl.BasicStrategy {private  java.util.Collection  varList;public CollectFreeVar( java.util.Collection  varList) {super(( new tom.library.sl.Identity() ));this.varList=varList;}public  java.util.Collection  getvarList() {return varList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch99NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch99NameNumber_freshVar_0=tomMatch99NameNumberfreshSubject_1;{ boolean tomMatch99NameNumber_freshVar_1= false ;if ( (tomMatch99NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch99NameNumber_freshVar_1= true ;} else {if ( (tomMatch99NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {tomMatch99NameNumber_freshVar_1= true ;}}if ((tomMatch99NameNumber_freshVar_1 ==  true )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_v=tomMatch99NameNumberfreshSubject_1;if ( true ) {tom_v


= tom_v.setOption( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ); // to avoid problems related to line numbers
        if(!varList.contains(tom_v)) { 
          varList.add(tom_v); 
        }
        throw new VisitFailure();// to stop the top-down
      }}}}}}}if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch99NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch99NameNumber_freshVar_2=tomMatch99NameNumberfreshSubject_1;if ( (tomMatch99NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm) ) {if ( true ) {
        
        throw new VisitFailure();// to stop the top-down
      }}}}}}return _visit_TomTerm(tom__arg,introspector); }public  tom.engine.adt.tomterm.types.TomTerm  _visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomterm.types.TomTerm )any.visit(environment,introspector));} else {return (( tom.engine.adt.tomterm.types.TomTerm )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomterm.types.TomTerm) ) {return visit_TomTerm((( tom.engine.adt.tomterm.types.TomTerm )v),introspector);}if (!((environment ==  null ))) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_CollectFreeVar( java.util.Collection  t0) { return new CollectFreeVar(t0);}


  
  /**
   * Check numeric constraint 
   *     1. no annotations
   *     2. no annonymous vars
   *     3. no anti-patterns
   *     4. implicit notation forbidden  
   */
  private static class CheckNumeric extends tom.library.sl.BasicStrategy {private  tom.engine.adt.tomterm.types.TomTerm  toCheck;public CheckNumeric( tom.engine.adt.tomterm.types.TomTerm  toCheck) {super(( new tom.library.sl.Identity() ));this.toCheck=toCheck;}public  tom.engine.adt.tomterm.types.TomTerm  gettoCheck() {return toCheck;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumber_freshVar_0=tomMatch100NameNumberfreshSubject_1;if ( (tomMatch100NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {if ( true ) {


        raiseError(toCheck,TomMessage.forbiddenImplicitNumeric);        
      }}}}}if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumber_freshVar_1=tomMatch100NameNumberfreshSubject_1;if ( (tomMatch100NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm) ) {if ( true ) {

        raiseError(toCheck,TomMessage.forbiddenAntiTermInNumeric);        
      }}}}}if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumber_freshVar_2=tomMatch100NameNumberfreshSubject_1;{ boolean tomMatch100NameNumber_freshVar_3= false ;if ( (tomMatch100NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ) {tomMatch100NameNumber_freshVar_3= true ;} else {if ( (tomMatch100NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ) {tomMatch100NameNumber_freshVar_3= true ;}}if ((tomMatch100NameNumber_freshVar_3 ==  true )) {if ( true ) {

        raiseError(toCheck,TomMessage.forbiddenAnonymousInNumeric);        
      }}}}}}if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch100NameNumber_freshVar_5=tomMatch100NameNumberfreshSubject_1;{ boolean tomMatch100NameNumber_freshVar_8= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch100NameNumber_freshVar_4= null ;if ( (tomMatch100NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{tomMatch100NameNumber_freshVar_8= true ;tomMatch100NameNumber_freshVar_4= tomMatch100NameNumber_freshVar_5.getConstraints() ;}} else {if ( (tomMatch100NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{tomMatch100NameNumber_freshVar_8= true ;tomMatch100NameNumber_freshVar_4= tomMatch100NameNumber_freshVar_5.getConstraints() ;}}}if ((tomMatch100NameNumber_freshVar_8 ==  true )) {{ boolean tomMatch100NameNumber_freshVar_7= false ;{  tom.engine.adt.tomconstraint.types.ConstraintList  tomMatch100NameNumber_freshVar_6=tomMatch100NameNumber_freshVar_4;if ( ((tomMatch100NameNumber_freshVar_6 instanceof tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint) || (tomMatch100NameNumber_freshVar_6 instanceof tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint)) ) {if ( tomMatch100NameNumber_freshVar_6.isEmptyconcConstraint() ) {tomMatch100NameNumber_freshVar_7= true ;}}}if ((tomMatch100NameNumber_freshVar_7 ==  false )) {if ( true ) {
  
        raiseError(toCheck,TomMessage.forbiddenAnnotationsNumeric);        
      }}}}}}}}}}return _visit_TomTerm(tom__arg,introspector); }public  tom.engine.adt.tomterm.types.TomTerm  _visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomterm.types.TomTerm )any.visit(environment,introspector));} else {return (( tom.engine.adt.tomterm.types.TomTerm )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomterm.types.TomTerm) ) {return visit_TomTerm((( tom.engine.adt.tomterm.types.TomTerm )v),introspector);}if (!((environment ==  null ))) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_CheckNumeric( tom.engine.adt.tomterm.types.TomTerm  t0) { return new CheckNumeric(t0);}


  private static void raiseError(TomTerm arg, TomMessage msg){    
    messageError("tom.engine.checker.TomSyntaxChecker",currentTomStructureOrgTrack.getFileName(),
        currentTomStructureOrgTrack.getLine(),        
        msg,new Object[]{getName(arg)});
  }  
  
  /**
   * Collect the variables' names   
   */
  private static class CollectVariables extends tom.library.sl.BasicStrategy {private  java.util.Collection  varList;public CollectVariables( java.util.Collection  varList) {super(( new tom.library.sl.Identity() ));this.varList=varList;}public  java.util.Collection  getvarList() {return varList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch101NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch101NameNumber_freshVar_1=tomMatch101NameNumberfreshSubject_1;{ boolean tomMatch101NameNumber_freshVar_2= false ;{  tom.engine.adt.tomname.types.TomName  tomMatch101NameNumber_freshVar_0= null ;if ( (tomMatch101NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{tomMatch101NameNumber_freshVar_2= true ;tomMatch101NameNumber_freshVar_0= tomMatch101NameNumber_freshVar_1.getAstName() ;}} else {if ( (tomMatch101NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{tomMatch101NameNumber_freshVar_2= true ;tomMatch101NameNumber_freshVar_0= tomMatch101NameNumber_freshVar_1.getAstName() ;}}}if ((tomMatch101NameNumber_freshVar_2 ==  true )) {{  tom.engine.adt.tomname.types.TomName  tom_name=tomMatch101NameNumber_freshVar_0;if ( true ) {

        
        if(!varList.contains(tom_name)) {
          varList.add(tom_name); 
        }
        throw new VisitFailure();// to stop the top-down
      }}}}}}}}}return _visit_TomTerm(tom__arg,introspector); }public  tom.engine.adt.tomterm.types.TomTerm  _visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomterm.types.TomTerm )any.visit(environment,introspector));} else {return (( tom.engine.adt.tomterm.types.TomTerm )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomterm.types.TomTerm) ) {return visit_TomTerm((( tom.engine.adt.tomterm.types.TomTerm )v),introspector);}if (!((environment ==  null ))) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_CollectVariables( java.util.Collection  t0) { return new CollectVariables(t0);}


  
  /**
   * tries to give the type of the tomTerm received as parameter
   */
  private TomType getSubjectType(TomTerm subject, ArrayList<Constraint> constraints) {
    {if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumber_freshVar_2=tomMatch102NameNumberfreshSubject_1;if ( (tomMatch102NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch102NameNumber_freshVar_0= tomMatch102NameNumber_freshVar_2.getAstName() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch102NameNumber_freshVar_1= tomMatch102NameNumber_freshVar_2.getAstType() ;{  tom.engine.adt.tomname.types.TomName  tomMatch102NameNumber_freshVar_4=tomMatch102NameNumber_freshVar_0;if ( (tomMatch102NameNumber_freshVar_4 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch102NameNumber_freshVar_3= tomMatch102NameNumber_freshVar_4.getString() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch102NameNumber_freshVar_6=tomMatch102NameNumber_freshVar_1;if ( (tomMatch102NameNumber_freshVar_6 instanceof tom.engine.adt.tomtype.types.tomtype.TomTypeAlone) ) {{  String  tomMatch102NameNumber_freshVar_5= tomMatch102NameNumber_freshVar_6.getString() ;{  String  tom_type=tomMatch102NameNumber_freshVar_5;{  tom.engine.adt.tomtype.types.TomType  tom_tomType=tomMatch102NameNumber_freshVar_1;if ( true ) {
        
        if(tom_tomType==SymbolTable.TYPE_UNKNOWN) {
          // try to guess
          return guessSubjectType(subject,constraints);
        } else if(testTypeExistence(tom_type)) {
          return tom_tomType;
        } else {
          messageError(currentTomStructureOrgTrack.getFileName(),
              currentTomStructureOrgTrack.getLine(),
              TomMessage.unknownMatchArgumentTypeInSignature,
              new Object[]{tomMatch102NameNumber_freshVar_3, (tom_type)});                
        }
      }}}}}}}}}}}}}}}if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumber_freshVar_8=tomMatch102NameNumberfreshSubject_1;if ( (tomMatch102NameNumber_freshVar_8 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch102NameNumber_freshVar_7= tomMatch102NameNumber_freshVar_8.getNameList() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch102NameNumber_freshVar_9=tomMatch102NameNumber_freshVar_7;if ( ((tomMatch102NameNumber_freshVar_9 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch102NameNumber_freshVar_9 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch102NameNumber_freshVar_9.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch102NameNumber_freshVar_12= tomMatch102NameNumber_freshVar_9.getHeadconcTomName() ;if ( (tomMatch102NameNumber_freshVar_12 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch102NameNumber_freshVar_11= tomMatch102NameNumber_freshVar_12.getString() ;{  String  tom_name=tomMatch102NameNumber_freshVar_11;{  tom.engine.adt.tomname.types.TomNameList  tomMatch102NameNumber_freshVar_10= tomMatch102NameNumber_freshVar_9.getTailconcTomName() ;if ( tomMatch102NameNumber_freshVar_10.isEmptyconcTomName() ) {if ( true ) {

        TomSymbol symbol = getSymbolFromName(tom_name);
        if(symbol!=null) {
          TomType type = TomBase.getSymbolCodomain(symbol);
          String typeName = TomBase.getTomType(type);
          if(!testTypeExistence(typeName)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.unknownMatchArgumentTypeInSignature,
                new Object[]{tom_name, typeName});
          }          
          validateTerm(tomMatch102NameNumberfreshSubject_1, type, false, true, true);
          return type;
        } else {
          // try to guess
          return guessSubjectType(subject,constraints);
        }
      }}}}}}}}}}}}}}}if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumber_freshVar_15=tomMatch102NameNumberfreshSubject_1;if ( (tomMatch102NameNumber_freshVar_15 instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumber_freshVar_13= tomMatch102NameNumber_freshVar_15.getTomTerm() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch102NameNumber_freshVar_14= tomMatch102NameNumber_freshVar_15.getAstType() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch102NameNumber_freshVar_17=tomMatch102NameNumber_freshVar_13;if ( (tomMatch102NameNumber_freshVar_17 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch102NameNumber_freshVar_16= tomMatch102NameNumber_freshVar_17.getNameList() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch102NameNumber_freshVar_18=tomMatch102NameNumber_freshVar_16;if ( ((tomMatch102NameNumber_freshVar_18 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch102NameNumber_freshVar_18 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch102NameNumber_freshVar_18.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch102NameNumber_freshVar_21= tomMatch102NameNumber_freshVar_18.getHeadconcTomName() ;if ( (tomMatch102NameNumber_freshVar_21 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch102NameNumber_freshVar_20= tomMatch102NameNumber_freshVar_21.getString() ;{  String  tom_name=tomMatch102NameNumber_freshVar_20;{  tom.engine.adt.tomname.types.TomNameList  tomMatch102NameNumber_freshVar_19= tomMatch102NameNumber_freshVar_18.getTailconcTomName() ;if ( tomMatch102NameNumber_freshVar_19.isEmptyconcTomName() ) {{  tom.engine.adt.tomtype.types.TomType  tom_userType=tomMatch102NameNumber_freshVar_14;if ( true ) {


        TomSymbol symbol = getSymbolFromName(tom_name);
        String typeName = TomBase.getTomType(tom_userType);
        if(!testTypeExistence(typeName)) {// check that the type exists
          messageError(currentTomStructureOrgTrack.getFileName(),
              currentTomStructureOrgTrack.getLine(),
              TomMessage.unknownMatchArgumentTypeInSignature,
              new Object[]{tom_name, typeName });
        }          
        if(symbol != null) { // check that the type provided by the user is consistent
          TomType type = TomBase.getSymbolCodomain(symbol);
          if(!(tom_userType).equals(type)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.inconsistentTypes,
                new Object[]{tom_name, TomBase.getTomType(type), TomBase.getTomType(tom_userType)});
          }
        }
        // a function call 
        return tom_userType;
      }}}}}}}}}}}}}}}}}}}}}

    return null;
  }
  
  /**
   * if a type is not specified 
   * 1. we look for a type in all match constraints where we can find this subject
   * 2. TODO: if the subject is in a constraint with a variable (the pattern is a variable for instance),
   * try to see if a variable with the same name already exists and can be typed, and if yes, get that type
   */
  private TomType guessSubjectType(TomTerm subject,ArrayList<Constraint> constraints){    
    for(Constraint constr:constraints){
      {if ( (constr instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch103NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )constr);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch103NameNumber_freshVar_2=tomMatch103NameNumberfreshSubject_1;if ( (tomMatch103NameNumber_freshVar_2 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch103NameNumber_freshVar_0= tomMatch103NameNumber_freshVar_2.getPattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch103NameNumber_freshVar_1= tomMatch103NameNumber_freshVar_2.getSubject() ;{  tom.engine.adt.tomterm.types.TomTerm  tom_s=tomMatch103NameNumber_freshVar_1;if ( true ) {

          // we want two terms to be equal even if their option is different 
          //( because of their possition for example )
 matchL:  {if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_2=tomMatch104NameNumberfreshSubject_1;if ( (tomMatch104NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch104NameNumber_freshVar_0= tomMatch104NameNumber_freshVar_2.getAstName() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch104NameNumber_freshVar_1= tomMatch104NameNumber_freshVar_2.getAstType() ;if ( (tom_s instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_2=(( tom.engine.adt.tomterm.types.TomTerm )tom_s);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_5=tomMatch104NameNumberfreshSubject_2;if ( (tomMatch104NameNumber_freshVar_5 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch104NameNumber_freshVar_3= tomMatch104NameNumber_freshVar_5.getAstName() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch104NameNumber_freshVar_4= tomMatch104NameNumber_freshVar_5.getAstType() ;{  tom.engine.adt.tomname.types.TomName  tomMatch104NameNumber_freshVar_6=tomMatch104NameNumber_freshVar_3;if ( (tomMatch104NameNumber_freshVar_6==tomMatch104NameNumber_freshVar_0) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch104NameNumber_freshVar_7=tomMatch104NameNumber_freshVar_4;if ( (tomMatch104NameNumber_freshVar_7==tomMatch104NameNumber_freshVar_1) ) {if ( true ) {
break matchL;}}}}}}}}}}}}}}}}}if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_10=tomMatch104NameNumberfreshSubject_1;if ( (tomMatch104NameNumber_freshVar_10 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_8= tomMatch104NameNumber_freshVar_10.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_9= tomMatch104NameNumber_freshVar_10.getArgs() ;if ( (tom_s instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_2=(( tom.engine.adt.tomterm.types.TomTerm )tom_s);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_13=tomMatch104NameNumberfreshSubject_2;if ( (tomMatch104NameNumber_freshVar_13 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_11= tomMatch104NameNumber_freshVar_13.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_12= tomMatch104NameNumber_freshVar_13.getArgs() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_14=tomMatch104NameNumber_freshVar_11;if ( (tomMatch104NameNumber_freshVar_14==tomMatch104NameNumber_freshVar_8) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_15=tomMatch104NameNumber_freshVar_12;if ( (tomMatch104NameNumber_freshVar_15==tomMatch104NameNumber_freshVar_9) ) {if ( true ) {
break matchL;}}}}}}}}}}}}}}}}}if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_18=tomMatch104NameNumberfreshSubject_1;if ( (tomMatch104NameNumber_freshVar_18 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_16= tomMatch104NameNumber_freshVar_18.getNameList() ;{  tom.engine.adt.tomslot.types.SlotList  tomMatch104NameNumber_freshVar_17= tomMatch104NameNumber_freshVar_18.getSlots() ;if ( (tom_s instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_2=(( tom.engine.adt.tomterm.types.TomTerm )tom_s);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_21=tomMatch104NameNumberfreshSubject_2;if ( (tomMatch104NameNumber_freshVar_21 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_19= tomMatch104NameNumber_freshVar_21.getNameList() ;{  tom.engine.adt.tomslot.types.SlotList  tomMatch104NameNumber_freshVar_20= tomMatch104NameNumber_freshVar_21.getSlots() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_22=tomMatch104NameNumber_freshVar_19;if ( (tomMatch104NameNumber_freshVar_22==tomMatch104NameNumber_freshVar_16) ) {{  tom.engine.adt.tomslot.types.SlotList  tomMatch104NameNumber_freshVar_23=tomMatch104NameNumber_freshVar_20;if ( (tomMatch104NameNumber_freshVar_23==tomMatch104NameNumber_freshVar_17) ) {if ( true ) {
break matchL;}}}}}}}}}}}}}}}}}if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_27=tomMatch104NameNumberfreshSubject_1;if ( (tomMatch104NameNumber_freshVar_27 instanceof tom.engine.adt.tomterm.types.tomterm.XMLAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_24= tomMatch104NameNumber_freshVar_27.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_25= tomMatch104NameNumber_freshVar_27.getAttrList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_26= tomMatch104NameNumber_freshVar_27.getChildList() ;{  tom.engine.adt.tomterm.types.TomList  tom_tomList=tomMatch104NameNumber_freshVar_25;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_33=tomMatch104NameNumber_freshVar_26;if ( (tomMatch104NameNumber_freshVar_33==tom_tomList) ) {if ( (tom_s instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_2=(( tom.engine.adt.tomterm.types.TomTerm )tom_s);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_31=tomMatch104NameNumberfreshSubject_2;if ( (tomMatch104NameNumber_freshVar_31 instanceof tom.engine.adt.tomterm.types.tomterm.XMLAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_28= tomMatch104NameNumber_freshVar_31.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_29= tomMatch104NameNumber_freshVar_31.getAttrList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_30= tomMatch104NameNumber_freshVar_31.getChildList() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_32=tomMatch104NameNumber_freshVar_28;if ( (tomMatch104NameNumber_freshVar_32==tomMatch104NameNumber_freshVar_24) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_34=tomMatch104NameNumber_freshVar_29;if ( (tomMatch104NameNumber_freshVar_34==tom_tomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_35=tomMatch104NameNumber_freshVar_30;if ( (tomMatch104NameNumber_freshVar_35==tom_tomList) ) {if ( true ) {
 break matchL; }}}}}}}}}}}}}}}}}}}}}}}}if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_38=tomMatch104NameNumberfreshSubject_1;if ( (tomMatch104NameNumber_freshVar_38 instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_36= tomMatch104NameNumber_freshVar_38.getTomTerm() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch104NameNumber_freshVar_37= tomMatch104NameNumber_freshVar_38.getAstType() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_41=tomMatch104NameNumber_freshVar_36;if ( (tomMatch104NameNumber_freshVar_41 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_39= tomMatch104NameNumber_freshVar_41.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_40= tomMatch104NameNumber_freshVar_41.getArgs() ;if ( (tom_s instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_2=(( tom.engine.adt.tomterm.types.TomTerm )tom_s);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_44=tomMatch104NameNumberfreshSubject_2;if ( (tomMatch104NameNumber_freshVar_44 instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_42= tomMatch104NameNumber_freshVar_44.getTomTerm() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch104NameNumber_freshVar_43= tomMatch104NameNumber_freshVar_44.getAstType() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumber_freshVar_47=tomMatch104NameNumber_freshVar_42;if ( (tomMatch104NameNumber_freshVar_47 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_45= tomMatch104NameNumber_freshVar_47.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_46= tomMatch104NameNumber_freshVar_47.getArgs() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch104NameNumber_freshVar_48=tomMatch104NameNumber_freshVar_45;if ( (tomMatch104NameNumber_freshVar_48==tomMatch104NameNumber_freshVar_39) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch104NameNumber_freshVar_49=tomMatch104NameNumber_freshVar_46;if ( (tomMatch104NameNumber_freshVar_49==tomMatch104NameNumber_freshVar_40) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch104NameNumber_freshVar_50=tomMatch104NameNumber_freshVar_43;if ( (tomMatch104NameNumber_freshVar_50==tomMatch104NameNumber_freshVar_37) ) {if ( true ) {
break matchL;}}}}}}}}}}}}}}}}}}}}}}}}}}}if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);if ( (tom_s instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch104NameNumberfreshSubject_2=(( tom.engine.adt.tomterm.types.TomTerm )tom_s);if ( true ) {
 continue; }}}}}}

          TomTerm pattern = tomMatch103NameNumber_freshVar_0;
          {if ( (pattern instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch105NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )pattern);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch105NameNumber_freshVar_1=tomMatch105NameNumberfreshSubject_1;if ( (tomMatch105NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch105NameNumber_freshVar_0= tomMatch105NameNumber_freshVar_1.getTomTerm() ;if ( true ) {
 pattern = tomMatch105NameNumber_freshVar_0; }}}}}}}{if ( (pattern instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch106NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )pattern);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch106NameNumber_freshVar_1=tomMatch106NameNumberfreshSubject_1;{ boolean tomMatch106NameNumber_freshVar_7= false ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch106NameNumber_freshVar_0= null ;if ( (tomMatch106NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{tomMatch106NameNumber_freshVar_7= true ;tomMatch106NameNumber_freshVar_0= tomMatch106NameNumber_freshVar_1.getNameList() ;}} else {if ( (tomMatch106NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{tomMatch106NameNumber_freshVar_7= true ;tomMatch106NameNumber_freshVar_0= tomMatch106NameNumber_freshVar_1.getNameList() ;}} else {if ( (tomMatch106NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.XMLAppl) ) {{tomMatch106NameNumber_freshVar_7= true ;tomMatch106NameNumber_freshVar_0= tomMatch106NameNumber_freshVar_1.getNameList() ;}}}}if ((tomMatch106NameNumber_freshVar_7 ==  true )) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch106NameNumber_freshVar_2=tomMatch106NameNumber_freshVar_0;if ( ((tomMatch106NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch106NameNumber_freshVar_2 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch106NameNumber_freshVar_2.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch106NameNumber_freshVar_6= tomMatch106NameNumber_freshVar_2.getHeadconcTomName() ;if ( (tomMatch106NameNumber_freshVar_6 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch106NameNumber_freshVar_5= tomMatch106NameNumber_freshVar_6.getString() ;{  String  tom_name=tomMatch106NameNumber_freshVar_5;{  tom.engine.adt.tomname.types.TomNameList  tomMatch106NameNumber_freshVar_3= tomMatch106NameNumber_freshVar_2.getTailconcTomName() ;if ( true ) {


        
                TomSymbol symbol = null;
                if(pattern.isXMLAppl()) {
                  symbol = getSymbolFromName(Constants.ELEMENT_NODE);
                } else {
                  symbol = getSymbolFromName(tom_name);
                }                
                if(symbol!=null) {
                  TomType type = TomBase.getSymbolCodomain(symbol);
                  // System.out.println("type = " + type);            
                  String typeName = TomBase.getTomType(type);
                  if(!testTypeExistence(typeName)) {
                    messageError(currentTomStructureOrgTrack.getFileName(),
                        currentTomStructureOrgTrack.getLine(),
                        TomMessage.unknownMatchArgumentTypeInSignature,
                        new Object[]{tom_name, typeName});
                  }
                  return type;
                }
             }}}}}}}}}}}}}}}}







         
        }}}}}}}}}













    }// for    
    return null;
  }
  
//  /**
//   * trys to guess the type of the variable by looking into all constraints 
//   * if it can find it somewhere where it is typed
//   */
//  private TomType guessVarTypeFromConstraints(TomTerm var, ArrayList<Constraint> constraints){
//    
//  }
  
  /**
   * Collect the matchConstraints in a list of constraints   
   */
  private static class CollectMatchConstraints extends tom.library.sl.BasicStrategy {private  java.util.Collection  constrList;public CollectMatchConstraints( java.util.Collection  constrList) {super(( new tom.library.sl.Identity() ));this.constrList=constrList;}public  java.util.Collection  getconstrList() {return constrList;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch107NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch107NameNumber_freshVar_0=tomMatch107NameNumberfreshSubject_1;if ( (tomMatch107NameNumber_freshVar_0 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {if ( true ) {

        
        constrList.add(tomMatch107NameNumberfreshSubject_1);         
        throw new VisitFailure();// to stop the top-down
      }}}}}}return _visit_Constraint(tom__arg,introspector); }public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector);}if (!((environment ==  null ))) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_CollectMatchConstraints( java.util.Collection  t0) { return new CollectMatchConstraints(t0);}


 
  /**
   * Collect the constraints (match and numeric)
   * For Or constraints, collect also the associated action
   */
  private static class CollectConstraints extends tom.library.sl.BasicStrategy {private  java.util.Collection  constrList;private  java.util.Collection  lastAction;private  java.util.HashMap  orActionMap;public CollectConstraints( java.util.Collection  constrList,  java.util.Collection  lastAction,  java.util.HashMap  orActionMap) {super(( new tom.library.sl.Identity() ));this.constrList=constrList;this.lastAction=lastAction;this.orActionMap=orActionMap;}public  java.util.Collection  getconstrList() {return constrList;}public  java.util.Collection  getlastAction() {return lastAction;}public  java.util.HashMap  getorActionMap() {return orActionMap;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() {return 1;}public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tominstruction.types.ConstraintInstruction  visit_ConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstruction  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tominstruction.types.ConstraintInstruction) ) {{  tom.engine.adt.tominstruction.types.ConstraintInstruction  tomMatch108NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.ConstraintInstruction )tom__arg);{  tom.engine.adt.tominstruction.types.ConstraintInstruction  tomMatch108NameNumber_freshVar_1=tomMatch108NameNumberfreshSubject_1;if ( (tomMatch108NameNumber_freshVar_1 instanceof tom.engine.adt.tominstruction.types.constraintinstruction.ConstraintInstruction) ) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch108NameNumber_freshVar_0= tomMatch108NameNumber_freshVar_1.getAction() ;if ( true ) {


        lastAction.clear();
        lastAction.add(tomMatch108NameNumber_freshVar_0);
      }}}}}}}return _visit_ConstraintInstruction(tom__arg,introspector); }public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch109NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch109NameNumber_freshVar_0=tomMatch109NameNumberfreshSubject_1;{ boolean tomMatch109NameNumber_freshVar_1= false ;if ( (tomMatch109NameNumber_freshVar_0 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {tomMatch109NameNumber_freshVar_1= true ;} else {if ( (tomMatch109NameNumber_freshVar_0 instanceof tom.engine.adt.tomconstraint.types.constraint.NumericConstraint) ) {tomMatch109NameNumber_freshVar_1= true ;}}if ((tomMatch109NameNumber_freshVar_1 ==  true )) {if ( true ) {


        
        constrList.add(tomMatch109NameNumberfreshSubject_1);         
        throw new VisitFailure();// to stop the top-down
      }}}}}}if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch109NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch109NameNumber_freshVar_2=tomMatch109NameNumberfreshSubject_1;if ( ((tomMatch109NameNumber_freshVar_2 instanceof tom.engine.adt.tomconstraint.types.constraint.ConsOrConstraint) || (tomMatch109NameNumber_freshVar_2 instanceof tom.engine.adt.tomconstraint.types.constraint.EmptyOrConstraint)) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tom_oc=tomMatch109NameNumberfreshSubject_1;if ( true ) {

        constrList.add(tom_oc);
        Iterator it = lastAction.iterator();
        orActionMap.put(tom_oc,it.next());
      }}}}}}}return _visit_Constraint(tom__arg,introspector); }public  tom.engine.adt.tominstruction.types.ConstraintInstruction  _visit_ConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstruction  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tominstruction.types.ConstraintInstruction )any.visit(environment,introspector));} else {return (( tom.engine.adt.tominstruction.types.ConstraintInstruction )any.visitLight(arg,introspector));} }public  tom.engine.adt.tomconstraint.types.Constraint  _visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if (!((environment ==  null ))) {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visit(environment,introspector));} else {return (( tom.engine.adt.tomconstraint.types.Constraint )any.visitLight(arg,introspector));} }public Object visitLight(Object v, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {if ( (v instanceof tom.engine.adt.tominstruction.types.ConstraintInstruction) ) {return visit_ConstraintInstruction((( tom.engine.adt.tominstruction.types.ConstraintInstruction )v),introspector);}if ( (v instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {return visit_Constraint((( tom.engine.adt.tomconstraint.types.Constraint )v),introspector);}if (!((environment ==  null ))) {return any.visit(environment,introspector);} else {return any.visitLight(v,introspector);} }}private static  tom.library.sl.Strategy  tom_make_CollectConstraints( java.util.Collection  t0,  java.util.Collection  t1,  java.util.HashMap  t2) { return new CollectConstraints(t0,t1,t2);}


  
  /**
   * check the lhs of a rule
   */
  private void verifyMatchPattern(TomTerm term, TomType type) {      
    // the term cannont be a Var* nor a _*
    TermDescription termDesc = analyseTerm(term);
    if(termDesc.getTermClass() == UNAMED_VARIABLE_STAR || termDesc.getTermClass() == VARIABLE_STAR) {
      messageError(termDesc.getFileName(),termDesc.getLine(), TomMessage.incorrectVariableStarInMatch, new Object[]{termDesc.getName()});
    } else {    
      // Analyse the term if type != null
      if(type != null) {
        // the type is known and found in the match signature
        validateTerm(term, type, false, true, false);
      }
    }
  }

  /*
   * verify the structure of a %strategy
   */
  private void verifyStrategy(TomVisitList visitList) throws VisitFailure {
    for(TomVisit visit:(tom.engine.adt.tomsignature.types.tomvisitlist.concTomVisit)visitList) {
      verifyVisit(visit);
    }
  }

  private void verifyVisit(TomVisit visit) throws VisitFailure {
    {if ( (visit instanceof tom.engine.adt.tomsignature.types.TomVisit) ) {{  tom.engine.adt.tomsignature.types.TomVisit  tomMatch110NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomVisit )visit);{  tom.engine.adt.tomsignature.types.TomVisit  tomMatch110NameNumber_freshVar_3=tomMatch110NameNumberfreshSubject_1;if ( (tomMatch110NameNumber_freshVar_3 instanceof tom.engine.adt.tomsignature.types.tomvisit.VisitTerm) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch110NameNumber_freshVar_0= tomMatch110NameNumber_freshVar_3.getVNode() ;{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch110NameNumber_freshVar_1= tomMatch110NameNumber_freshVar_3.getAstConstraintInstructionList() ;{  tom.engine.adt.tomoption.types.OptionList  tomMatch110NameNumber_freshVar_2= tomMatch110NameNumber_freshVar_3.getOption() ;{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tom_constraintInstructionList=tomMatch110NameNumber_freshVar_1;if ( true ) {
        
        ArrayList<MatchConstraint> matchConstraints = new ArrayList<MatchConstraint>();
        {if ( (tom_constraintInstructionList instanceof tom.engine.adt.tominstruction.types.ConstraintInstructionList) ) {{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch111NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.ConstraintInstructionList )tom_constraintInstructionList);{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch111NameNumber_freshVar_0=tomMatch111NameNumberfreshSubject_1;if ( ((tomMatch111NameNumber_freshVar_0 instanceof tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction) || (tomMatch111NameNumber_freshVar_0 instanceof tom.engine.adt.tominstruction.types.constraintinstructionlist.EmptyconcConstraintInstruction)) ) {{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch111NameNumber_begin_2=tomMatch111NameNumber_freshVar_0;{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch111NameNumber_end_3=tomMatch111NameNumber_freshVar_0;do {{{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch111NameNumber_freshVar_1=tomMatch111NameNumber_end_3;if (!( tomMatch111NameNumber_freshVar_1.isEmptyconcConstraintInstruction() )) {{  tom.engine.adt.tominstruction.types.ConstraintInstruction  tomMatch111NameNumber_freshVar_7= tomMatch111NameNumber_freshVar_1.getHeadconcConstraintInstruction() ;if ( (tomMatch111NameNumber_freshVar_7 instanceof tom.engine.adt.tominstruction.types.constraintinstruction.ConstraintInstruction) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch111NameNumber_freshVar_6= tomMatch111NameNumber_freshVar_7.getConstraint() ;{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch111NameNumber_freshVar_4= tomMatch111NameNumber_freshVar_1.getTailconcConstraintInstruction() ;if ( true ) {

            matchConstraints.clear();
            tom_make_TopDownCollect(tom_make_CollectMatchConstraints(matchConstraints)).visitLight(tomMatch111NameNumber_freshVar_6);   
            // for the first constraint, check that the type is conform to the type specified in visit
            MatchConstraint firstMatchConstr = matchConstraints.get(0); 
            verifyMatchPattern(firstMatchConstr.getPattern(), tomMatch110NameNumber_freshVar_0);
          }}}}}}}if ( tomMatch111NameNumber_end_3.isEmptyconcConstraintInstruction() ) {tomMatch111NameNumber_end_3=tomMatch111NameNumber_begin_2;} else {tomMatch111NameNumber_end_3= tomMatch111NameNumber_end_3.getTailconcConstraintInstruction() ;}}} while(!( (tomMatch111NameNumber_end_3==tomMatch111NameNumber_begin_2) ));}}}}}}}
    
        // check the rest of the constraints
        verifyMatch(tom_constraintInstructionList,tomMatch110NameNumber_freshVar_2);
      }}}}}}}}}}

  }

  private static boolean findMakeDecl(OptionList option) {
    {if ( (option instanceof tom.engine.adt.tomoption.types.OptionList) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch112NameNumberfreshSubject_1=(( tom.engine.adt.tomoption.types.OptionList )option);{  tom.engine.adt.tomoption.types.OptionList  tomMatch112NameNumber_freshVar_0=tomMatch112NameNumberfreshSubject_1;if ( ((tomMatch112NameNumber_freshVar_0 instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption) || (tomMatch112NameNumber_freshVar_0 instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption)) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch112NameNumber_begin_2=tomMatch112NameNumber_freshVar_0;{  tom.engine.adt.tomoption.types.OptionList  tomMatch112NameNumber_end_3=tomMatch112NameNumber_freshVar_0;do {{{  tom.engine.adt.tomoption.types.OptionList  tomMatch112NameNumber_freshVar_1=tomMatch112NameNumber_end_3;if (!( tomMatch112NameNumber_freshVar_1.isEmptyconcOption() )) {{  tom.engine.adt.tomoption.types.Option  tomMatch112NameNumber_freshVar_7= tomMatch112NameNumber_freshVar_1.getHeadconcOption() ;if ( (tomMatch112NameNumber_freshVar_7 instanceof tom.engine.adt.tomoption.types.option.DeclarationToOption) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch112NameNumber_freshVar_6= tomMatch112NameNumber_freshVar_7.getAstDeclaration() ;{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch112NameNumber_freshVar_8=tomMatch112NameNumber_freshVar_6;if ( (tomMatch112NameNumber_freshVar_8 instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeDecl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch112NameNumber_freshVar_4= tomMatch112NameNumber_freshVar_1.getTailconcOption() ;if ( true ) {

        return true;
      }}}}}}}}}if ( tomMatch112NameNumber_end_3.isEmptyconcOption() ) {tomMatch112NameNumber_end_3=tomMatch112NameNumber_begin_2;} else {tomMatch112NameNumber_end_3= tomMatch112NameNumber_end_3.getTailconcOption() ;}}} while(!( (tomMatch112NameNumber_end_3==tomMatch112NameNumber_begin_2) ));}}}}}}}

    return false;
  }

  /**
   * Analyse a term given an expected type and re-enter recursively on children
   */
  public TermDescription validateTerm(TomTerm term, TomType expectedType, boolean listSymbol, boolean topLevel, boolean permissive) {
    String termName = "emptyName";
    TomType type = null;
    int termClass = -1;
    String fileName = "unknown";
    int decLine = -1;
    Option orgTrack;
    matchblock:{
      {if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_3=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_3 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_0= tomMatch113NameNumber_freshVar_3.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_1= tomMatch113NameNumber_freshVar_3.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch113NameNumber_freshVar_2= tomMatch113NameNumber_freshVar_3.getArgs() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_0;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_4=tomMatch113NameNumber_freshVar_1;if ( ((tomMatch113NameNumber_freshVar_4 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch113NameNumber_freshVar_4 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch113NameNumber_freshVar_4.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch113NameNumber_freshVar_7= tomMatch113NameNumber_freshVar_4.getHeadconcTomName() ;if ( (tomMatch113NameNumber_freshVar_7 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch113NameNumber_freshVar_6= tomMatch113NameNumber_freshVar_7.getString() ;{  String  tomMatch113NameNumber_freshVar_8=tomMatch113NameNumber_freshVar_6;if ( "".equals(tomMatch113NameNumber_freshVar_8) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_5= tomMatch113NameNumber_freshVar_4.getTailconcTomName() ;if ( tomMatch113NameNumber_freshVar_5.isEmptyconcTomName() ) {if ( true ) {

          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = UNAMED_APPL;
            // there shall be only one list symbol with expectedType as Codomain
            // else ensureValidUnamedList returns null
          TomSymbol symbol = ensureValidUnamedList(expectedType, fileName,decLine);
          if(symbol == null) {
            break matchblock;
          } else {
            // there is only one list symbol and its type is the expected one
            // (ensure by ensureValidUnamedList call)
            type = expectedType;
            termName = symbol.getAstName().getString();
              // whatever the arity is, we continue recursively and there is
              // only one element in the Domain
            validateListOperatorArgs(tomMatch113NameNumber_freshVar_2, symbol.getTypesToType().getDomain().getHeadconcTomType(),
                symbol.getTypesToType().getCodomain(),permissive);
            if(permissive) { System.out.println("UnamedList but permissive");}
            break matchblock;
          }
        }}}}}}}}}}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_12=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_12 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_9= tomMatch113NameNumber_freshVar_12.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_10= tomMatch113NameNumber_freshVar_12.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch113NameNumber_freshVar_11= tomMatch113NameNumber_freshVar_12.getArgs() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_9;{  tom.engine.adt.tomname.types.TomNameList  tom_symbolNameList=tomMatch113NameNumber_freshVar_10;if ( true ) {


          TomList args = tomMatch113NameNumber_freshVar_11;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = TERM_APPL;

          TomSymbol symbol = ensureValidApplDisjunction(tom_symbolNameList, expectedType, fileName, decLine, permissive, topLevel);

          if(symbol == null) {
            validateTermThrough(term,permissive);
            break matchblock;
          }
          // Type is OK
          type = expectedType;
          TomName headName = tom_symbolNameList.getHeadconcTomName();
          if(headName instanceof AntiName) {
            headName = ((AntiName)headName).getName();
          }
          termName = headName.getString();
          boolean listOp = (TomBase.isListOperator(symbol) || TomBase.isArrayOperator(symbol));
          if(listOp) {
              // whatever the arity is, we continue recursively and there is
              // only one element in the Domain
              // - we can also have children that are sublists
            validateListOperatorArgs(args, symbol.getTypesToType().getDomain().getHeadconcTomType(),
                symbol.getTypesToType().getCodomain(),permissive);
          } else {
            // the arity is important also there are different types in Domain
            TomTypeList types = symbol.getTypesToType().getDomain();
            int nbArgs = args.length();
            int nbExpectedArgs = types.length();
            if(nbArgs != nbExpectedArgs) {
              messageError(fileName,decLine, TomMessage.symbolNumberArgument,
                  new Object[]{termName, Integer.valueOf(nbExpectedArgs), Integer.valueOf(nbArgs)});
              break matchblock;
            }
            while(!args.isEmptyconcTomTerm()) {
                // repeat analyse with associated expected type and control
                // arity
              validateTerm(args.getHeadconcTomTerm(), types.getHeadconcTomType(), listOp/* false */, false, permissive);
              args = args.getTailconcTomTerm();
              types = types.getTailconcTomType();
            }
          }
          break matchblock;
        }}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_16=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_16 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_13= tomMatch113NameNumber_freshVar_16.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_14= tomMatch113NameNumber_freshVar_16.getNameList() ;{  tom.engine.adt.tomslot.types.SlotList  tomMatch113NameNumber_freshVar_15= tomMatch113NameNumber_freshVar_16.getSlots() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_13;{  tom.engine.adt.tomname.types.TomNameList  tom_symbolNameList=tomMatch113NameNumber_freshVar_14;{  tom.engine.adt.tomslot.types.SlotList  tom_slotList=tomMatch113NameNumber_freshVar_15;if ( true ) {


          if(permissive) {
            // Record are not allowed in a rhs
            messageError(findOriginTrackingFileName(tom_options),findOriginTrackingLine(tom_options), TomMessage.incorrectRuleRHSClass, new Object[]{getName(tomMatch113NameNumberfreshSubject_1)+"[...]"});
          }
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = RECORD_APPL;
          TomSymbol symbol = ensureValidRecordDisjunction(tom_symbolNameList, tom_slotList, expectedType, fileName, decLine, true);
          if(symbol == null) {
            break matchblock;
          }

          {if ( (tom_symbolNameList instanceof tom.engine.adt.tomname.types.TomNameList) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch114NameNumberfreshSubject_1=(( tom.engine.adt.tomname.types.TomNameList )tom_symbolNameList);{  tom.engine.adt.tomname.types.TomNameList  tomMatch114NameNumber_freshVar_0=tomMatch114NameNumberfreshSubject_1;if ( ((tomMatch114NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch114NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch114NameNumber_begin_2=tomMatch114NameNumber_freshVar_0;{  tom.engine.adt.tomname.types.TomNameList  tomMatch114NameNumber_end_3=tomMatch114NameNumber_freshVar_0;do {{{  tom.engine.adt.tomname.types.TomNameList  tomMatch114NameNumber_freshVar_1=tomMatch114NameNumber_end_3;if (!( tomMatch114NameNumber_freshVar_1.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch114NameNumber_freshVar_7= tomMatch114NameNumber_freshVar_1.getHeadconcTomName() ;if ( (tomMatch114NameNumber_freshVar_7 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch114NameNumber_freshVar_6= tomMatch114NameNumber_freshVar_7.getString() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch114NameNumber_freshVar_4= tomMatch114NameNumber_freshVar_1.getTailconcTomName() ;if ( true ) {





              verifyRecordStructure(tom_options, tomMatch114NameNumber_freshVar_6, tom_slotList, fileName,decLine);
            }}}}}}}if ( tomMatch114NameNumber_end_3.isEmptyconcTomName() ) {tomMatch114NameNumber_end_3=tomMatch114NameNumber_begin_2;} else {tomMatch114NameNumber_end_3= tomMatch114NameNumber_end_3.getTailconcTomName() ;}}} while(!( (tomMatch114NameNumber_end_3==tomMatch114NameNumber_begin_2) ));}}}}}}}


          type = expectedType;
          TomName headName = tom_symbolNameList.getHeadconcTomName();
          if(headName instanceof AntiName) {
        	  headName = ((AntiName)headName).getName();
          }
          termName = headName.getString();
          break matchblock;
        }}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_20=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_20 instanceof tom.engine.adt.tomterm.types.tomterm.XMLAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_17= tomMatch113NameNumber_freshVar_20.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_18= tomMatch113NameNumber_freshVar_20.getNameList() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch113NameNumber_freshVar_19= tomMatch113NameNumber_freshVar_20.getChildList() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_17;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_21=tomMatch113NameNumber_freshVar_18;if ( ((tomMatch113NameNumber_freshVar_21 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch113NameNumber_freshVar_21 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_begin_23=tomMatch113NameNumber_freshVar_21;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_end_24=tomMatch113NameNumber_freshVar_21;do {{{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_22=tomMatch113NameNumber_end_24;if (!( tomMatch113NameNumber_freshVar_22.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch113NameNumber_freshVar_28= tomMatch113NameNumber_freshVar_22.getHeadconcTomName() ;if ( (tomMatch113NameNumber_freshVar_28 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch113NameNumber_freshVar_27= tomMatch113NameNumber_freshVar_28.getString() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch113NameNumber_freshVar_25= tomMatch113NameNumber_freshVar_22.getTailconcTomName() ;if ( true ) {


            // TODO: can we do it
            // ensureValidDisjunction(symbolNameList); ??????????
          termClass = XML_APPL;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = TomBase.getSymbolCodomain(getSymbolFromName(Constants.ELEMENT_NODE));
          termName = Constants.ELEMENT_NODE;

          TomList args = tomMatch113NameNumber_freshVar_19;
          /*
           * we cannot use the following expression TomType TNodeType =
           * symbolTable().getType(Constants.TNODE); because TNodeType should be
           * a TomTypeAlone and not an expanded type
           */
          TomType TNodeType = TomBase.getSymbolCodomain(symbolTable().getSymbolFromName(Constants.ELEMENT_NODE));
          // System.out.println("TNodeType = " + TNodeType);
          while(!args.isEmptyconcTomTerm()) {
            // repeat analyse with associated expected type and control arity
            validateTerm(args.getHeadconcTomTerm(), TNodeType, true, false, permissive);
            args = args.getTailconcTomTerm();
          }

          break matchblock;
        }}}}}}}if ( tomMatch113NameNumber_end_24.isEmptyconcTomName() ) {tomMatch113NameNumber_end_24=tomMatch113NameNumber_begin_23;} else {tomMatch113NameNumber_end_24= tomMatch113NameNumber_end_24.getTailconcTomName() ;}}} while(!( (tomMatch113NameNumber_end_24==tomMatch113NameNumber_begin_23) ));}}}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_31=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_31 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_29= tomMatch113NameNumber_freshVar_31.getOption() ;{  tom.engine.adt.tomname.types.TomName  tomMatch113NameNumber_freshVar_30= tomMatch113NameNumber_freshVar_31.getAstName() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_29;{  tom.engine.adt.tomname.types.TomName  tomMatch113NameNumber_freshVar_33=tomMatch113NameNumber_freshVar_30;if ( (tomMatch113NameNumber_freshVar_33 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch113NameNumber_freshVar_32= tomMatch113NameNumber_freshVar_33.getString() ;if ( true ) {


          termClass = VARIABLE;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = tomMatch113NameNumber_freshVar_32;
          break matchblock;
        }}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_36=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_36 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_34= tomMatch113NameNumber_freshVar_36.getOption() ;{  tom.engine.adt.tomname.types.TomName  tomMatch113NameNumber_freshVar_35= tomMatch113NameNumber_freshVar_36.getAstName() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_34;{  tom.engine.adt.tomname.types.TomName  tomMatch113NameNumber_freshVar_38=tomMatch113NameNumber_freshVar_35;if ( (tomMatch113NameNumber_freshVar_38 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch113NameNumber_freshVar_37= tomMatch113NameNumber_freshVar_38.getString() ;if ( true ) {


          termClass = VARIABLE_STAR;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = tomMatch113NameNumber_freshVar_37+"*";
          if(!listSymbol) {
            messageError(fileName,decLine, TomMessage.invalidVariableStarArgument, new Object[]{termName});
          }
          break matchblock;
        }}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_40=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_40 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_39= tomMatch113NameNumber_freshVar_40.getOption() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_39;if ( true ) {


          termClass = UNAMED_VARIABLE;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = "_";
          if(permissive) {
            messageError(fileName,decLine, TomMessage.incorrectRuleRHSClass, new Object[]{termName});
          }
          break matchblock;
        }}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch113NameNumber_freshVar_42=tomMatch113NameNumberfreshSubject_1;if ( (tomMatch113NameNumber_freshVar_42 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch113NameNumber_freshVar_41= tomMatch113NameNumber_freshVar_42.getOption() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch113NameNumber_freshVar_41;if ( true ) {


          termClass = UNAMED_VARIABLE_STAR;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = "_*";
          if(!listSymbol) {
            messageError(fileName,decLine, TomMessage.invalidVariableStarArgument, new Object[]{termName});
          }
          if(permissive) {
            messageError(fileName,decLine, TomMessage.incorrectRuleRHSClass, new Object[]{termName});
          }
          break matchblock;
        }}}}}}}}

      throw new TomRuntimeException("Strange Term "+term);
    }
    return new TermDescription(termClass, termName, fileName,decLine, type);
  }

  private  void validateTermThrough(TomTerm term, boolean permissive) {
    {if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch115NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch115NameNumber_freshVar_1=tomMatch115NameNumberfreshSubject_1;if ( (tomMatch115NameNumber_freshVar_1 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch115NameNumber_freshVar_0= tomMatch115NameNumber_freshVar_1.getArgs() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch115NameNumber_freshVar_2=tomMatch115NameNumber_freshVar_0;if ( ((tomMatch115NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch115NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch115NameNumber_begin_4=tomMatch115NameNumber_freshVar_2;{  tom.engine.adt.tomterm.types.TomList  tomMatch115NameNumber_end_5=tomMatch115NameNumber_freshVar_2;do {{{  tom.engine.adt.tomterm.types.TomList  tomMatch115NameNumber_freshVar_3=tomMatch115NameNumber_end_5;if (!( tomMatch115NameNumber_freshVar_3.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomTerm  tom_child= tomMatch115NameNumber_freshVar_3.getHeadconcTomTerm() ;{  tom.engine.adt.tomterm.types.TomList  tomMatch115NameNumber_freshVar_6= tomMatch115NameNumber_freshVar_3.getTailconcTomTerm() ;if ( true ) {

        TomSymbol sym = getSymbolFromName(getName(tom_child));
        if(sym != null) {
          validateTerm(tom_child,sym.getTypesToType().getCodomain(),false,false,permissive);
        } else {
          validateTermThrough(tom_child,permissive);
        }
      }}}}}if ( tomMatch115NameNumber_end_5.isEmptyconcTomTerm() ) {tomMatch115NameNumber_end_5=tomMatch115NameNumber_begin_4;} else {tomMatch115NameNumber_end_5= tomMatch115NameNumber_end_5.getTailconcTomTerm() ;}}} while(!( (tomMatch115NameNumber_end_5==tomMatch115NameNumber_begin_4) ));}}}}}}}}}}

  }

  public TermDescription analyseTerm(TomTerm term) {
    matchblock:{
      {if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_2=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_0= tomMatch116NameNumber_freshVar_2.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_1= tomMatch116NameNumber_freshVar_2.getNameList() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_0;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_3=tomMatch116NameNumber_freshVar_1;if ( ((tomMatch116NameNumber_freshVar_3 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch116NameNumber_freshVar_3 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch116NameNumber_freshVar_3.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_6= tomMatch116NameNumber_freshVar_3.getHeadconcTomName() ;if ( (tomMatch116NameNumber_freshVar_6 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch116NameNumber_freshVar_5= tomMatch116NameNumber_freshVar_6.getString() ;{  String  tom_str=tomMatch116NameNumber_freshVar_5;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_4= tomMatch116NameNumber_freshVar_3.getTailconcTomName() ;if ( tomMatch116NameNumber_freshVar_4.isEmptyconcTomName() ) {if ( true ) {

          if (tom_str.equals("")) {
            return new TermDescription(UNAMED_APPL, tom_str,
                findOriginTrackingFileName(tom_options),
                findOriginTrackingLine(tom_options), 
                null);
              // TODO
          } else {
            return new TermDescription(TERM_APPL, tom_str,
                findOriginTrackingFileName(tom_options),
                findOriginTrackingLine(tom_options),
                TomBase.getSymbolCodomain(getSymbolFromName(tom_str)));
          }
        }}}}}}}}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_9=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_9 instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_7= tomMatch116NameNumber_freshVar_9.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_8= tomMatch116NameNumber_freshVar_9.getNameList() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_7;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_10=tomMatch116NameNumber_freshVar_8;if ( ((tomMatch116NameNumber_freshVar_10 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch116NameNumber_freshVar_10 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch116NameNumber_freshVar_10.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_14= tomMatch116NameNumber_freshVar_10.getHeadconcTomName() ;if ( (tomMatch116NameNumber_freshVar_14 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch116NameNumber_freshVar_13= tomMatch116NameNumber_freshVar_14.getString() ;{  String  tom_name=tomMatch116NameNumber_freshVar_13;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_11= tomMatch116NameNumber_freshVar_10.getTailconcTomName() ;if ( true ) {

          return new TermDescription(APPL_DISJUNCTION, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              TomBase.getSymbolCodomain(getSymbolFromName(tom_name)));
        }}}}}}}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_17=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_17 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_15= tomMatch116NameNumber_freshVar_17.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_16= tomMatch116NameNumber_freshVar_17.getNameList() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_15;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_18=tomMatch116NameNumber_freshVar_16;if ( ((tomMatch116NameNumber_freshVar_18 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch116NameNumber_freshVar_18 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch116NameNumber_freshVar_18.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_21= tomMatch116NameNumber_freshVar_18.getHeadconcTomName() ;if ( (tomMatch116NameNumber_freshVar_21 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch116NameNumber_freshVar_20= tomMatch116NameNumber_freshVar_21.getString() ;{  String  tom_name=tomMatch116NameNumber_freshVar_20;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_19= tomMatch116NameNumber_freshVar_18.getTailconcTomName() ;if ( tomMatch116NameNumber_freshVar_19.isEmptyconcTomName() ) {if ( true ) {

          return new TermDescription(RECORD_APPL, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              TomBase.getSymbolCodomain(getSymbolFromName(tom_name)));
        }}}}}}}}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_24=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_24 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_22= tomMatch116NameNumber_freshVar_24.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_23= tomMatch116NameNumber_freshVar_24.getNameList() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_22;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_25=tomMatch116NameNumber_freshVar_23;if ( ((tomMatch116NameNumber_freshVar_25 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch116NameNumber_freshVar_25 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {if (!( tomMatch116NameNumber_freshVar_25.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_29= tomMatch116NameNumber_freshVar_25.getHeadconcTomName() ;if ( (tomMatch116NameNumber_freshVar_29 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch116NameNumber_freshVar_28= tomMatch116NameNumber_freshVar_29.getString() ;{  String  tom_name=tomMatch116NameNumber_freshVar_28;{  tom.engine.adt.tomname.types.TomNameList  tomMatch116NameNumber_freshVar_26= tomMatch116NameNumber_freshVar_25.getTailconcTomName() ;if ( true ) {

          return new TermDescription(RECORD_APPL_DISJUNCTION,tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              TomBase.getSymbolCodomain(getSymbolFromName(tom_name)));
        }}}}}}}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_31=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_31 instanceof tom.engine.adt.tomterm.types.tomterm.XMLAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_30= tomMatch116NameNumber_freshVar_31.getOption() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_30;if ( true ) {

          return new TermDescription(XML_APPL, Constants.ELEMENT_NODE,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              TomBase.getSymbolCodomain(getSymbolFromName(Constants.ELEMENT_NODE)));
        }}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_34=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_34 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_32= tomMatch116NameNumber_freshVar_34.getOption() ;{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_33= tomMatch116NameNumber_freshVar_34.getAstName() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_32;{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_36=tomMatch116NameNumber_freshVar_33;if ( (tomMatch116NameNumber_freshVar_36 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch116NameNumber_freshVar_35= tomMatch116NameNumber_freshVar_36.getString() ;if ( true ) {

          return new TermDescription(VARIABLE, tomMatch116NameNumber_freshVar_35,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
        }}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_39=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_39 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_37= tomMatch116NameNumber_freshVar_39.getOption() ;{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_38= tomMatch116NameNumber_freshVar_39.getAstName() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_37;{  tom.engine.adt.tomname.types.TomName  tomMatch116NameNumber_freshVar_41=tomMatch116NameNumber_freshVar_38;if ( (tomMatch116NameNumber_freshVar_41 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch116NameNumber_freshVar_40= tomMatch116NameNumber_freshVar_41.getString() ;if ( true ) {

          return new TermDescription(VARIABLE_STAR, tomMatch116NameNumber_freshVar_40+"*",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
        }}}}}}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_43=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_43 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_42= tomMatch116NameNumber_freshVar_43.getOption() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_42;if ( true ) {

          return new TermDescription(UNAMED_VARIABLE, "_",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
        }}}}}}}if ( (term instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )term);{  tom.engine.adt.tomterm.types.TomTerm  tomMatch116NameNumber_freshVar_45=tomMatch116NameNumberfreshSubject_1;if ( (tomMatch116NameNumber_freshVar_45 instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch116NameNumber_freshVar_44= tomMatch116NameNumber_freshVar_45.getOption() ;{  tom.engine.adt.tomoption.types.OptionList  tom_options=tomMatch116NameNumber_freshVar_44;if ( true ) {

          return new TermDescription(UNAMED_VARIABLE_STAR, "_*",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
        }}}}}}}}

      throw new TomRuntimeException("Strange Term "+term);
    }
  }

  private  TomSymbol ensureValidUnamedList(TomType expectedType, String fileName,int decLine) {
    TomSymbolList symbolList = symbolTable().getSymbolFromType(expectedType);
    TomSymbolList filteredList =  tom.engine.adt.tomsignature.types.tomsymbollist.EmptyconcTomSymbol.make() ;
    {if ( (symbolList instanceof tom.engine.adt.tomsignature.types.TomSymbolList) ) {{  tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch117NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomSymbolList )symbolList);{  tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch117NameNumber_freshVar_0=tomMatch117NameNumberfreshSubject_1;if ( ((tomMatch117NameNumber_freshVar_0 instanceof tom.engine.adt.tomsignature.types.tomsymbollist.ConsconcTomSymbol) || (tomMatch117NameNumber_freshVar_0 instanceof tom.engine.adt.tomsignature.types.tomsymbollist.EmptyconcTomSymbol)) ) {{  tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch117NameNumber_begin_2=tomMatch117NameNumber_freshVar_0;{  tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch117NameNumber_end_3=tomMatch117NameNumber_freshVar_0;do {{{  tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch117NameNumber_freshVar_1=tomMatch117NameNumber_end_3;if (!( tomMatch117NameNumber_freshVar_1.isEmptyconcTomSymbol() )) {{  tom.engine.adt.tomsignature.types.TomSymbol  tom_symbol= tomMatch117NameNumber_freshVar_1.getHeadconcTomSymbol() ;{  tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch117NameNumber_freshVar_4= tomMatch117NameNumber_freshVar_1.getTailconcTomSymbol() ;if ( true ) {

        if(TomBase.isArrayOperator(tom_symbol) || TomBase.isListOperator(tom_symbol)) {
          filteredList =  tom.engine.adt.tomsignature.types.tomsymbollist.ConsconcTomSymbol.make(tom_symbol,tom_append_list_concTomSymbol(filteredList, tom.engine.adt.tomsignature.types.tomsymbollist.EmptyconcTomSymbol.make() )) ;
        }
      }}}}}if ( tomMatch117NameNumber_end_3.isEmptyconcTomSymbol() ) {tomMatch117NameNumber_end_3=tomMatch117NameNumber_begin_2;} else {tomMatch117NameNumber_end_3= tomMatch117NameNumber_end_3.getTailconcTomSymbol() ;}}} while(!( (tomMatch117NameNumber_end_3==tomMatch117NameNumber_begin_2) ));}}}}}}}


    if(filteredList.isEmptyconcTomSymbol()) {
      messageError(fileName,decLine,
                   TomMessage.unknownUnamedList,
                   new Object[]{expectedType.getString()});
      return null;
    } else if(!filteredList.getTailconcTomSymbol().isEmptyconcTomSymbol()) {
      StringBuilder symbolsString = new StringBuilder();
      while(!filteredList.isEmptyconcTomSymbol()) {
        symbolsString .append(" " + filteredList.getHeadconcTomSymbol().getAstName().getString());
        filteredList= filteredList.getTailconcTomSymbol();
      }
      messageError(fileName,decLine,
                   TomMessage.ambigousUnamedList,
                   new Object[]{expectedType.getString(), symbolsString.toString()});
      return null;
    } else {
      return filteredList.getHeadconcTomSymbol();
    }
  }

  private TomSymbol ensureValidApplDisjunction(TomNameList symbolNameList, TomType expectedType, 
      String fileName, int decLine, boolean permissive, boolean topLevel) {

    if(symbolNameList.length()==1) { // Valid but has it a good type?
      String res = symbolNameList.getHeadconcTomName().getString();
      TomSymbol symbol = getSymbolFromName(res);
      if (symbol == null ) {
        // this correspond to a term like 'unknown()' or unknown(s1, s2, ...)
        if(!permissive) {
          messageError(fileName,decLine, TomMessage.unknownSymbol, new Object[]{res});
        } else {
          messageWarning(fileName,decLine, TomMessage.unknownPermissiveSymbol, new Object[]{res});
        }
      } else { // known symbol
        if ( strictType  || !topLevel ) {
          if (!ensureSymbolCodomain(TomBase.getSymbolCodomain(symbol), expectedType, TomMessage.invalidCodomain, res, fileName,decLine)) {
            return null;
          }
        }
      }
      return symbol;
    } else {
      // this is a disjunction
      if(permissive) {
	messageError(fileName,decLine, TomMessage.impossiblePermissiveAndDisjunction, new Object[]{});
      }

      TomSymbol symbol = null;
      TomTypeList domainReference = null;
      PairNameDeclList slotReference = null;
      String nameReference = null;
      {if ( (symbolNameList instanceof tom.engine.adt.tomname.types.TomNameList) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch118NameNumberfreshSubject_1=(( tom.engine.adt.tomname.types.TomNameList )symbolNameList);{  tom.engine.adt.tomname.types.TomNameList  tomMatch118NameNumber_freshVar_0=tomMatch118NameNumberfreshSubject_1;if ( ((tomMatch118NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch118NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch118NameNumber_begin_2=tomMatch118NameNumber_freshVar_0;{  tom.engine.adt.tomname.types.TomNameList  tomMatch118NameNumber_end_3=tomMatch118NameNumber_freshVar_0;do {{{  tom.engine.adt.tomname.types.TomNameList  tomMatch118NameNumber_freshVar_1=tomMatch118NameNumber_end_3;if (!( tomMatch118NameNumber_freshVar_1.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch118NameNumber_freshVar_7= tomMatch118NameNumber_freshVar_1.getHeadconcTomName() ;if ( (tomMatch118NameNumber_freshVar_7 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch118NameNumber_freshVar_6= tomMatch118NameNumber_freshVar_7.getString() ;{  String  tom_dijName=tomMatch118NameNumber_freshVar_6;{  tom.engine.adt.tomname.types.TomNameList  tomMatch118NameNumber_freshVar_4= tomMatch118NameNumber_freshVar_1.getTailconcTomName() ;if ( true ) {
 // for each SymbolName
          symbol =  getSymbolFromName(tom_dijName);
          if(symbol == null) {
            // In disjunction we can only have known symbols
            messageError(fileName,decLine, TomMessage.unknownSymbolInDisjunction, new Object[]{(tom_dijName)});
            return null;
          }
          if( strictType  || !topLevel ) {
            // ensure codomain is correct
            if(!ensureSymbolCodomain(TomBase.getSymbolCodomain(symbol), expectedType, TomMessage.invalidDisjunctionCodomain, tom_dijName, fileName,decLine)) {
              return null;
            }
          }

          if(domainReference == null) { // save Domain reference
            domainReference = TomBase.getSymbolDomain(symbol);
            slotReference = symbol.getPairNameDeclList();
            nameReference = tom_dijName;
          } else {
            if(TomBase.getSymbolDomain(symbol) != domainReference) {
              messageError(fileName,decLine, TomMessage.invalidDisjunctionDomain, new Object[]{nameReference, (tom_dijName) });
              return null;
            }
            if(symbol.getPairNameDeclList() != slotReference) {
              PairNameDeclList l1 = slotReference;
              PairNameDeclList l2 = symbol.getPairNameDeclList();
              while(!l1.isEmptyconcPairNameDecl()) {
                if(l1.getHeadconcPairNameDecl().getSlotName() != l2.getHeadconcPairNameDecl().getSlotName()) {
                  messageError(fileName,decLine, TomMessage.invalidDisjunctionDomain, new Object[]{nameReference, (tom_dijName) });
                  return null;
                }
                l1=l1.getTailconcPairNameDecl();
                l2=l2.getTailconcPairNameDecl();
              }
            }
          }
        }}}}}}}}if ( tomMatch118NameNumber_end_3.isEmptyconcTomName() ) {tomMatch118NameNumber_end_3=tomMatch118NameNumber_begin_2;} else {tomMatch118NameNumber_end_3= tomMatch118NameNumber_end_3.getTailconcTomName() ;}}} while(!( (tomMatch118NameNumber_end_3==tomMatch118NameNumber_begin_2) ));}}}}}}}

      return symbol;
    }
  }

  private  boolean ensureSymbolCodomain(TomType currentCodomain, TomType expectedType, TomMessage msg, String symbolName, String fileName,int decLine) {
    if(currentCodomain != expectedType) {
      // System.out.println(currentCodomain+"!="+expectedType);
      messageError(fileName,decLine,
                   msg,
                   new Object[]{symbolName, currentCodomain.getString(), expectedType.getString()});
      return false;
    }
    return true;
  }

  private  TomSymbol ensureValidRecordDisjunction(TomNameList symbolNameList, SlotList slotList, 
      TomType expectedType, String fileName, int decLine, boolean topLevel) {
    if(symbolNameList.length()==1) { // Valid but has it a good type?
      String res = symbolNameList.getHeadconcTomName().getString();
      TomSymbol symbol =  getSymbolFromName(res);
      if (symbol == null ) { // this correspond to: unknown[]
          // it is not correct to use Record with unknown symbols
        messageError(fileName,decLine, TomMessage.unknownSymbol, new Object[]{res});
        return null;
      } else { // known symbol
          // ensure type correctness if necessary
        if ( strictType  || !topLevel ) {
          if (!ensureSymbolCodomain(TomBase.getSymbolCodomain(symbol), expectedType, TomMessage.invalidCodomain, res, fileName,decLine)) {
            return null;
          }
        }
      }
      return symbol;
    } else {
      TomSymbol symbol = null;
      TomSymbol referenceSymbol = null;
      TomTypeList referenceDomain = null;
      String referenceName = null;
      {if ( (symbolNameList instanceof tom.engine.adt.tomname.types.TomNameList) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch119NameNumberfreshSubject_1=(( tom.engine.adt.tomname.types.TomNameList )symbolNameList);{  tom.engine.adt.tomname.types.TomNameList  tomMatch119NameNumber_freshVar_0=tomMatch119NameNumberfreshSubject_1;if ( ((tomMatch119NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch119NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch119NameNumber_begin_2=tomMatch119NameNumber_freshVar_0;{  tom.engine.adt.tomname.types.TomNameList  tomMatch119NameNumber_end_3=tomMatch119NameNumber_freshVar_0;do {{{  tom.engine.adt.tomname.types.TomNameList  tomMatch119NameNumber_freshVar_1=tomMatch119NameNumber_end_3;if (!( tomMatch119NameNumber_freshVar_1.isEmptyconcTomName() )) {{  tom.engine.adt.tomname.types.TomName  tomMatch119NameNumber_freshVar_7= tomMatch119NameNumber_freshVar_1.getHeadconcTomName() ;if ( (tomMatch119NameNumber_freshVar_7 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch119NameNumber_freshVar_6= tomMatch119NameNumber_freshVar_7.getString() ;{  String  tom_dijName=tomMatch119NameNumber_freshVar_6;{  tom.engine.adt.tomname.types.TomNameList  tomMatch119NameNumber_freshVar_4= tomMatch119NameNumber_freshVar_1.getTailconcTomName() ;if ( true ) {
 // for each SymbolName
          symbol =  getSymbolFromName(tom_dijName);
          if(symbol == null) {
            // In disjunction we can only have known symbols
            messageError(fileName,decLine, TomMessage.unknownSymbolInDisjunction, new Object[]{(tom_dijName)});
            return null;
          }
          if( strictType  || !topLevel ) {
            // ensure codomain is correct
            if (!ensureSymbolCodomain(TomBase.getSymbolCodomain(symbol), expectedType, TomMessage.invalidDisjunctionCodomain, tom_dijName, fileName,decLine)) {
              return null;
            }
          }
          // System.out.println("domain = " + getSymbolDomain(symbol));

          if(referenceDomain == null) { // save Domain reference
            referenceSymbol = symbol;
            referenceName = tom_dijName;
            referenceDomain = TomBase.getSymbolDomain(symbol);
          } else {
            // check that domains are compatible
            TomTypeList currentDomain = TomBase.getSymbolDomain(symbol);
            // restrict the domain to the record
            while(!slotList.isEmptyconcSlot()) {
              Slot slot = slotList.getHeadconcSlot();
              TomName slotName = slot.getSlotName();
              int currentSlotIndex = TomBase.getSlotIndex(symbol,slotName);
              int referenceSlotIndex = TomBase.getSlotIndex(referenceSymbol,slotName);

              // System.out.println("index1 = " + currentSlotIndex);
              // System.out.println("type1 = " +
              // TomBase.elementAt(currentDomain,currentSlotIndex));
              // System.out.println("index2 = " + referenceSlotIndex);
              // System.out.println("type2 = " +
              // TomBase.elementAt(referenceDomain,referenceSlotIndex));
              
              if (referenceSlotIndex == -1){
                messageError(fileName,decLine, TomMessage.invalidDisjunctionSlotName, new Object[]{referenceName,((Name)slotName).getString()});
                return null;                
              }
              
              if (currentSlotIndex == -1){
                messageError(fileName,decLine, TomMessage.invalidDisjunctionSlotName, new Object[]{(tom_dijName),((Name)slotName).getString() });
                return null;                
              }
              
              if(TomBase.elementAt(currentDomain,currentSlotIndex) != TomBase.elementAt(referenceDomain,referenceSlotIndex)) {
                messageError(fileName,decLine, TomMessage.invalidDisjunctionDomain, new Object[]{referenceName, (tom_dijName) });
                return null;
              }

              slotList = slotList.getTailconcSlot();
            }

          }
        }}}}}}}}if ( tomMatch119NameNumber_end_3.isEmptyconcTomName() ) {tomMatch119NameNumber_end_3=tomMatch119NameNumber_begin_2;} else {tomMatch119NameNumber_end_3= tomMatch119NameNumber_end_3.getTailconcTomName() ;}}} while(!( (tomMatch119NameNumber_end_3==tomMatch119NameNumber_begin_2) ));}}}}}}}

      return symbol;
    }
  }

  // /////////////////////
  // RECORDS CONCERNS ///
  // /////////////////////
  private  void verifyRecordStructure(OptionList option, String tomName, SlotList slotList, String fileName, int decLine)  {
    TomSymbol symbol = getSymbolFromName(tomName);
    if(symbol != null) {
        // constants have an emptyPairNameDeclList
        // the length of the pairNameDeclList corresponds to the arity of the
        // operator
        // list operator with [] no allowed
      if(slotList.isEmptyconcSlot() && (TomBase.isListOperator(symbol) ||  TomBase.isArrayOperator(symbol)) ) {
        messageError(fileName,decLine,
                     TomMessage.bracketOnListSymbol,
                     new Object[]{tomName});
      }
        // TODO verify type
      verifyRecordSlots(slotList,symbol, TomBase.getSymbolDomain(symbol), tomName, fileName, decLine);
    } else {
      messageError(fileName,decLine,
                   TomMessage.unknownSymbol,
                   new Object[]{tomName});
    }
  }

    // We test the existence/repetition of slotName contained in pairSlotAppl
    // and then the associated term
  private  void verifyRecordSlots(SlotList slotList, TomSymbol tomSymbol, TomTypeList typeList, String methodName, String fileName, int decLine) {
  TomName pairSlotName = null;
  ArrayList listOfPossibleSlot = null;
  ArrayList studiedSlotIndexList = new ArrayList();
    // for each pair slotName <=> Appl
  while( !slotList.isEmptyconcSlot() ) {
      pairSlotName = slotList.getHeadconcSlot().getSlotName();
        // First check for slot name correctness
      int index = TomBase.getSlotIndex(tomSymbol,pairSlotName);
      if(index < 0) {// Error: bad slot name
        if(listOfPossibleSlot == null) {
          // calculate list of possible slot names..
          listOfPossibleSlot = new ArrayList();
          PairNameDeclList listOfSlots = tomSymbol.getPairNameDeclList();
          while ( !listOfSlots.isEmptyconcPairNameDecl() ) {
            TomName sname = listOfSlots.getHeadconcPairNameDecl().getSlotName();
            if(!sname.isEmptyName()) {
              listOfPossibleSlot.add(sname.getString());
            }
            listOfSlots = listOfSlots.getTailconcPairNameDecl();
          }
        }
        messageError(fileName,decLine,
                     TomMessage.badSlotName,
                     new Object[]{pairSlotName.getString(), methodName, listOfPossibleSlot.toString()});
        return; // break analyses
      } else { // then check for repeated good slot name
        Integer integerIndex = Integer.valueOf(index);
        if(studiedSlotIndexList.contains(integerIndex)) {
            // Error: repeated slot
          messageError(fileName,decLine,
                       TomMessage.slotRepeated,
                       new Object[]{methodName, pairSlotName.getString()});
          return; // break analyses
        }
        studiedSlotIndexList.add(integerIndex);
      }

        // Now analyses associated term
      PairNameDeclList listOfSlots =  tomSymbol.getPairNameDeclList();
      TomTypeList listOfTypes = typeList;
      while(!listOfSlots.isEmptyconcPairNameDecl()) {
        SlotList listOfPair = slotList;
        TomName slotName = listOfSlots.getHeadconcPairNameDecl().getSlotName();
        TomType expectedType = listOfTypes.getHeadconcTomType();
        if(!slotName.isEmptyName()) {
          // look for a same name (from record)
          whileBlock: {
            while(!listOfPair.isEmptyconcSlot()) {
              Slot pairSlotTerm = listOfPair.getHeadconcSlot();
              {if ( (slotName instanceof tom.engine.adt.tomname.types.TomName) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch120NameNumberfreshSubject_1=(( tom.engine.adt.tomname.types.TomName )slotName);{  tom.engine.adt.tomname.types.TomName  tomMatch120NameNumber_freshVar_1=tomMatch120NameNumberfreshSubject_1;if ( (tomMatch120NameNumber_freshVar_1 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch120NameNumber_freshVar_0= tomMatch120NameNumber_freshVar_1.getString() ;if ( (pairSlotTerm instanceof tom.engine.adt.tomslot.types.Slot) ) {{  tom.engine.adt.tomslot.types.Slot  tomMatch120NameNumberfreshSubject_2=(( tom.engine.adt.tomslot.types.Slot )pairSlotTerm);{  tom.engine.adt.tomslot.types.Slot  tomMatch120NameNumber_freshVar_4=tomMatch120NameNumberfreshSubject_2;if ( (tomMatch120NameNumber_freshVar_4 instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch120NameNumber_freshVar_2= tomMatch120NameNumber_freshVar_4.getSlotName() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch120NameNumber_freshVar_3= tomMatch120NameNumber_freshVar_4.getAppl() ;{  tom.engine.adt.tomname.types.TomName  tomMatch120NameNumber_freshVar_6=tomMatch120NameNumber_freshVar_2;if ( (tomMatch120NameNumber_freshVar_6 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch120NameNumber_freshVar_5= tomMatch120NameNumber_freshVar_6.getString() ;{  String  tomMatch120NameNumber_freshVar_7=tomMatch120NameNumber_freshVar_5;if ( tomMatch120NameNumber_freshVar_7.equals(tomMatch120NameNumber_freshVar_0) ) {if ( true ) {

                   validateTerm(tomMatch120NameNumber_freshVar_3,expectedType, false, true, false);
                   break whileBlock;
                 }}}}}}}}}}}}}}}}}if ( (slotName instanceof tom.engine.adt.tomname.types.TomName) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch120NameNumberfreshSubject_1=(( tom.engine.adt.tomname.types.TomName )slotName);if ( (pairSlotTerm instanceof tom.engine.adt.tomslot.types.Slot) ) {{  tom.engine.adt.tomslot.types.Slot  tomMatch120NameNumberfreshSubject_2=(( tom.engine.adt.tomslot.types.Slot )pairSlotTerm);if ( true ) {
listOfPair = listOfPair.getTailconcSlot();}}}}}}

            }
          }
        }
        // prepare next step
        listOfSlots = listOfSlots.getTailconcPairNameDecl();
        listOfTypes = listOfTypes.getTailconcTomType();
      }

      slotList = slotList.getTailconcSlot();
    }
  }

  public void validateListOperatorArgs(TomList args, TomType expectedType, TomType parentListCodomain, boolean permissive) {
    while(!args.isEmptyconcTomTerm()) {
      TomTerm currentArg = args.getHeadconcTomTerm();      
      TomSymbol argSymbol = getSymbolFromName(getName(currentArg));
      // if we have a sublist 
      if(TomBase.isListOperator(argSymbol)) {
        // we can have two cases:
        // 1. the sublist has the codomain = parentListCodomain
        // 2. the sublist has the codomain = expectedType
        if(argSymbol.getTypesToType().getCodomain() == parentListCodomain) {
          validateTerm(currentArg, parentListCodomain, true, false, permissive);            
        } else {
          validateTerm(currentArg, expectedType, true, false, permissive);    
        }        
      } else {
        validateTerm(currentArg, expectedType, true, false, permissive);
      }
      args = args.getTailconcTomTerm();
    }
  }

  private boolean testTypeExistence(String typeName) {
    return symbolTable().getType(typeName) != null;
  }

  protected static class TermDescription {
    private int termClass;
    private String fileName;
    private int decLine;
    private String name ="";
    private TomType tomType = null;

    public TermDescription(int termClass, String name, String fileName, int decLine, TomType tomType) {
      this.termClass = termClass;
      this.fileName = fileName;
      this.decLine = decLine;
      this.name = name;
      this.tomType = tomType;
    }

    public int getTermClass() {
      return termClass;
    }

    public String getName() {
      return name;
    }
    
    public String getFileName() {
      return fileName;
    }

    public int getLine() {
      return decLine;
    }

    public TomType getType() {
      if(tomType != null && !tomType.isEmptyType()) {
        return tomType;
      } else {
        return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make() ;
      }
    }
  }
}
