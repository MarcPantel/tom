/* Generated by TOM (version 2.5alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Julien Guyon
 *
 **/

package tom.engine.checker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;

import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomname.types.tomname.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.xml.Constants;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import aterm.ATerm;
import tom.engine.tools.ASTFactory;

import tom.library.strategy.mutraveler.MuTraveler;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

/**
 * The TomSyntaxChecker plugin.
 */
public class TomSyntaxChecker extends TomChecker {

  /* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file *//* Generated by TOM (version 2.5alpha): Do not edit this file */ private static boolean tom_equal_term_String(String t1, String t2) {  return  (t1.equals(t2))  ;}private static boolean tom_is_sort_String(String t) {  return  t instanceof String  ;}  /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_int(int t1, int t2) {  return  (t1==t2)  ;} private static boolean tom_equal_term_Instruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Instruction(Object t) {  return  t instanceof tom.engine.adt.tominstruction.types.Instruction  ;}private static boolean tom_equal_term_InstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_InstructionList(Object t) {  return  t instanceof tom.engine.adt.tominstruction.types.InstructionList  ;}private static boolean tom_equal_term_TomTypeList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomTypeList(Object t) {  return  t instanceof tom.engine.adt.tomtype.types.TomTypeList  ;}private static boolean tom_equal_term_TomType(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomType(Object t) {  return  t instanceof tom.engine.adt.tomtype.types.TomType  ;}private static boolean tom_equal_term_TomSymbolList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomSymbolList(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomSymbolList  ;}private static boolean tom_equal_term_TomVisit(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomVisit(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomVisit  ;}private static boolean tom_equal_term_TomRuleList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomRuleList(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomRuleList  ;}private static boolean tom_equal_term_TomSymbol(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomSymbol(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomSymbol  ;}private static boolean tom_equal_term_TomRule(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomRule(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomRule  ;}private static boolean tom_equal_term_TomVisitList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomVisitList(Object t) {  return  t instanceof tom.engine.adt.tomsignature.types.TomVisitList  ;}private static boolean tom_equal_term_DeclarationList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_DeclarationList(Object t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.DeclarationList  ;}private static boolean tom_equal_term_Declaration(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Declaration(Object t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.Declaration  ;}private static boolean tom_equal_term_TomNameList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomNameList(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomNameList  ;}private static boolean tom_equal_term_TomName(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomName(Object t) {  return  t instanceof tom.engine.adt.tomname.types.TomName  ;}private static boolean tom_equal_term_PatternInstructionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PatternInstructionList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.PatternInstructionList  ;}private static boolean tom_equal_term_PatternInstruction(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PatternInstruction(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.PatternInstruction  ;}private static boolean tom_equal_term_Pattern(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Pattern(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.Pattern  ;}private static boolean tom_equal_term_TomList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomList(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomList  ;}private static boolean tom_equal_term_TomTerm(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_TomTerm(Object t) {  return  t instanceof tom.engine.adt.tomterm.types.TomTerm  ;}private static boolean tom_equal_term_Option(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Option(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.Option  ;}private static boolean tom_equal_term_OptionList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_OptionList(Object t) {  return  t instanceof tom.engine.adt.tomoption.types.OptionList  ;}private static boolean tom_equal_term_ConstraintList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_ConstraintList(Object t) {  return  t instanceof tom.engine.adt.tomconstraint.types.ConstraintList  ;}private static boolean tom_equal_term_PairNameDecl(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PairNameDecl(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.PairNameDecl  ;}private static boolean tom_equal_term_PairNameDeclList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_PairNameDeclList(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.PairNameDeclList  ;}private static boolean tom_equal_term_SlotList(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_SlotList(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.SlotList  ;}private static boolean tom_equal_term_Slot(Object t1, Object t2) {  return  t1.equals(t2)  ;}private static boolean tom_is_sort_Slot(Object t) {  return  t instanceof tom.engine.adt.tomslot.types.Slot  ;}private static boolean tom_is_fun_sym_Match( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t instanceof tom.engine.adt.tominstruction.types.instruction.Match  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Match_SubjectList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_Match_AstPatternInstructionList( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getAstPatternInstructionList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Match_Option( tom.engine.adt.tominstruction.types.Instruction  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_TomTypeAlone( tom.engine.adt.tomtype.types.TomType  t) {  return  t instanceof tom.engine.adt.tomtype.types.tomtype.TomTypeAlone  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_TomTypeAlone( String  t0) { return  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make(t0); }private static  String  tom_get_slot_TomTypeAlone_String( tom.engine.adt.tomtype.types.TomType  t) {  return  t.getString()  ;}private static boolean tom_is_fun_sym_Codomain( tom.engine.adt.tomtype.types.TomType  t) {  return  t instanceof tom.engine.adt.tomtype.types.tomtype.Codomain  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Codomain_AstName( tom.engine.adt.tomtype.types.TomType  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_EmptyType( tom.engine.adt.tomtype.types.TomType  t) {  return  t instanceof tom.engine.adt.tomtype.types.tomtype.EmptyType  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_make_EmptyType() { return  tom.engine.adt.tomtype.types.tomtype.EmptyType.make(); }private static boolean tom_is_fun_sym_VisitTerm( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomvisit.VisitTerm  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VisitTerm_VNode( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t.getVNode()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slot_VisitTerm_AstPatternInstructionList( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t.getAstPatternInstructionList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VisitTerm_Option( tom.engine.adt.tomsignature.types.TomVisit  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_RewriteRule( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomrule.RewriteRule  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_RewriteRule_Lhs( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getLhs()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_RewriteRule_Rhs( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getRhs()  ;}private static  tom.engine.adt.tominstruction.types.InstructionList  tom_get_slot_RewriteRule_CondList( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getCondList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RewriteRule_Option( tom.engine.adt.tomsignature.types.TomRule  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_TypeTermDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.TypeTermDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_TypeTermDecl_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_slot_TypeTermDecl_Declarations( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getDeclarations()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_TypeTermDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_EqualTermDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.EqualTermDecl  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTermDecl_TermArg1( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getTermArg1()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_EqualTermDecl_TermArg2( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getTermArg2()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_EqualTermDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_EqualTermDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_GetHeadDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.GetHeadDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetHeadDecl_Opname( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOpname()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_GetHeadDecl_Codomain( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getCodomain()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetHeadDecl_Variable( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_GetHeadDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_GetHeadDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_GetTailDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.GetTailDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetTailDecl_Opname( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOpname()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetTailDecl_Variable( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_GetTailDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_GetTailDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_IsEmptyDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.IsEmptyDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_IsEmptyDecl_Opname( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOpname()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_IsEmptyDecl_Variable( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_IsEmptyDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_IsEmptyDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_MakeEmptyList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeEmptyList  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_MakeEmptyList_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_MakeEmptyList_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_MakeEmptyList_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_MakeAddList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeAddList  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_MakeAddList_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MakeAddList_VarElt( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVarElt()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MakeAddList_VarList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVarList()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_MakeAddList_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_MakeAddList_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_GetElementDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.GetElementDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetElementDecl_Opname( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOpname()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetElementDecl_Variable( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetElementDecl_Index( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getIndex()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_GetElementDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_GetElementDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_GetSizeDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.GetSizeDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_GetSizeDecl_Opname( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOpname()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_GetSizeDecl_Variable( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVariable()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_GetSizeDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_GetSizeDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_MakeEmptyArray( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeEmptyArray  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_MakeEmptyArray_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MakeEmptyArray_VarSize( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVarSize()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_MakeEmptyArray_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_MakeEmptyArray_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_MakeAddArray( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeAddArray  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_MakeAddArray_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MakeAddArray_VarElt( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVarElt()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_MakeAddArray_VarList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVarList()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_MakeAddArray_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_MakeAddArray_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_MakeDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.MakeDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_MakeDecl_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_MakeDecl_AstType( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_MakeDecl_Args( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getArgs()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_MakeDecl_Instr( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getInstr()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_MakeDecl_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_Strategy( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.Strategy  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Strategy_SName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getSName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Strategy_ExtendsTerm( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getExtendsTerm()  ;}private static  tom.engine.adt.tomsignature.types.TomVisitList  tom_get_slot_Strategy_VisitList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getVisitList()  ;}private static  tom.engine.adt.tomoption.types.Option  tom_get_slot_Strategy_OrgTrack( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOrgTrack()  ;}private static boolean tom_is_fun_sym_RuleSet( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.RuleSet  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_get_slot_RuleSet_RuleList( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getRuleList()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RuleSet_Option( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_SymbolDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.SymbolDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_SymbolDecl_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_ListSymbolDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.ListSymbolDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_ListSymbolDecl_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_ArraySymbolDecl( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declaration.ArraySymbolDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_ArraySymbolDecl_AstName( tom.engine.adt.tomdeclaration.types.Declaration  t) {  return  t.getAstName()  ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomname.types.TomName  t) {  return  t instanceof tom.engine.adt.tomname.types.tomname.Name  ;}private static  String  tom_get_slot_Name_String( tom.engine.adt.tomname.types.TomName  t) {  return  t.getString()  ;}private static boolean tom_is_fun_sym_PatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t instanceof tom.engine.adt.tomterm.types.patterninstruction.PatternInstruction  ;}private static  tom.engine.adt.tomterm.types.Pattern  tom_get_slot_PatternInstruction_Pattern( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t.getPattern()  ;}private static  tom.engine.adt.tominstruction.types.Instruction  tom_get_slot_PatternInstruction_Action( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t.getAction()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_PatternInstruction_Option( tom.engine.adt.tomterm.types.PatternInstruction  t) {  return  t.getOption()  ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomterm.types.Pattern  t) {  return  t instanceof tom.engine.adt.tomterm.types.pattern.Pattern  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_SubjectList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getSubjectList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_TomList( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getTomList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_Pattern_Guards( tom.engine.adt.tomterm.types.Pattern  t) {  return  t.getGuards()  ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.TermAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_TermAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_TermAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_TermAppl_Args( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getArgs()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_TermAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_RecordAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_RecordAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomslot.types.SlotList  tom_get_slot_RecordAppl_Slots( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getSlots()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_RecordAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_XMLAppl( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.XMLAppl  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_XMLAppl_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slot_XMLAppl_NameList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getNameList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_XMLAppl_AttrList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAttrList()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_XMLAppl_ChildList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getChildList()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_XMLAppl_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Variable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_Variable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_Variable_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_Variable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_Variable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_VariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_VariableStar_AstName( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstName()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_VariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_VariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariable  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariable_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariable_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariable_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.UnamedVariableStar  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slot_UnamedVariableStar_Option( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getOption()  ;}private static  tom.engine.adt.tomtype.types.TomType  tom_get_slot_UnamedVariableStar_AstType( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getAstType()  ;}private static  tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slot_UnamedVariableStar_Constraints( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getConstraints()  ;}private static boolean tom_is_fun_sym_SubjectList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.SubjectList  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_slot_SubjectList_TomList( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomList()  ;}private static boolean tom_is_fun_sym_Term( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.Term  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_Term_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static boolean tom_is_fun_sym_AntiTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomterm.AntiTerm  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_AntiTerm_TomTerm( tom.engine.adt.tomterm.types.TomTerm  t) {  return  t.getTomTerm()  ;}private static boolean tom_is_fun_sym_DeclarationToOption( tom.engine.adt.tomoption.types.Option  t) {  return  t instanceof tom.engine.adt.tomoption.types.option.DeclarationToOption  ;}private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_get_slot_DeclarationToOption_AstDeclaration( tom.engine.adt.tomoption.types.Option  t) {  return  t.getAstDeclaration()  ;}private static boolean tom_is_fun_sym_OriginTracking( tom.engine.adt.tomoption.types.Option  t) {  return  t instanceof tom.engine.adt.tomoption.types.option.OriginTracking  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_OriginTracking_AstName( tom.engine.adt.tomoption.types.Option  t) {  return  t.getAstName()  ;}private static  int  tom_get_slot_OriginTracking_Line( tom.engine.adt.tomoption.types.Option  t) {  return  t.getLine()  ;}private static  String  tom_get_slot_OriginTracking_FileName( tom.engine.adt.tomoption.types.Option  t) {  return  t.getFileName()  ;}private static boolean tom_is_fun_sym_PairNameDecl( tom.engine.adt.tomslot.types.PairNameDecl  t) {  return  t instanceof tom.engine.adt.tomslot.types.pairnamedecl.PairNameDecl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairNameDecl_SlotName( tom.engine.adt.tomslot.types.PairNameDecl  t) {  return  t.getSlotName()  ;}private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_get_slot_PairNameDecl_SlotDecl( tom.engine.adt.tomslot.types.PairNameDecl  t) {  return  t.getSlotDecl()  ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomslot.types.Slot  t) {  return  t instanceof tom.engine.adt.tomslot.types.slot.PairSlotAppl  ;}private static  tom.engine.adt.tomname.types.TomName  tom_get_slot_PairSlotAppl_SlotName( tom.engine.adt.tomslot.types.Slot  t) {  return  t.getSlotName()  ;}private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_slot_PairSlotAppl_Appl( tom.engine.adt.tomslot.types.Slot  t) {  return  t.getAppl()  ;}private static boolean tom_is_fun_sym_concTomType( tom.engine.adt.tomtype.types.TomTypeList  t) {  return  t instanceof tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType || t instanceof tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType  ;}private static  tom.engine.adt.tomtype.types.TomTypeList  tom_empty_list_concTomType() { return  tom.engine.adt.tomtype.types.tomtypelist.EmptyconcTomType.make() ; }private static  tom.engine.adt.tomtype.types.TomTypeList  tom_cons_list_concTomType( tom.engine.adt.tomtype.types.TomType  e,  tom.engine.adt.tomtype.types.TomTypeList  l) { return  tom.engine.adt.tomtype.types.tomtypelist.ConsconcTomType.make(e,l) ; }private static  tom.engine.adt.tomtype.types.TomType  tom_get_head_concTomType_TomTypeList( tom.engine.adt.tomtype.types.TomTypeList  l) {  return  l.getHeadconcTomType()  ;}private static  tom.engine.adt.tomtype.types.TomTypeList  tom_get_tail_concTomType_TomTypeList( tom.engine.adt.tomtype.types.TomTypeList  l) {  return  l.getTailconcTomType()  ;}private static boolean tom_is_empty_concTomType_TomTypeList( tom.engine.adt.tomtype.types.TomTypeList  l) {  return  l.isEmptyconcTomType()  ;}private static  tom.engine.adt.tomtype.types.TomTypeList  tom_append_list_concTomType( tom.engine.adt.tomtype.types.TomTypeList  l1,  tom.engine.adt.tomtype.types.TomTypeList  l2) {    if(tom_is_empty_concTomType_TomTypeList(l1)) {     return l2;    } else if(tom_is_empty_concTomType_TomTypeList(l2)) {     return l1;    } else if(tom_is_empty_concTomType_TomTypeList(( tom.engine.adt.tomtype.types.TomTypeList )tom_get_tail_concTomType_TomTypeList(l1))) {     return ( tom.engine.adt.tomtype.types.TomTypeList )tom_cons_list_concTomType(( tom.engine.adt.tomtype.types.TomType )tom_get_head_concTomType_TomTypeList(l1),l2);    } else {      return ( tom.engine.adt.tomtype.types.TomTypeList )tom_cons_list_concTomType(( tom.engine.adt.tomtype.types.TomType )tom_get_head_concTomType_TomTypeList(l1),tom_append_list_concTomType(( tom.engine.adt.tomtype.types.TomTypeList )tom_get_tail_concTomType_TomTypeList(l1),l2));    }   }  private static  tom.engine.adt.tomtype.types.TomTypeList  tom_get_slice_concTomType( tom.engine.adt.tomtype.types.TomTypeList  begin,  tom.engine.adt.tomtype.types.TomTypeList  end) {    if(tom_equal_term_TomTypeList(begin,end)) {      return ( tom.engine.adt.tomtype.types.TomTypeList )tom_empty_list_concTomType();    } else {      return ( tom.engine.adt.tomtype.types.TomTypeList )tom_cons_list_concTomType(( tom.engine.adt.tomtype.types.TomType )tom_get_head_concTomType_TomTypeList(begin),( tom.engine.adt.tomtype.types.TomTypeList )tom_get_slice_concTomType(( tom.engine.adt.tomtype.types.TomTypeList )tom_get_tail_concTomType_TomTypeList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbolList  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomsymbollist.ConsconcTomSymbol || t instanceof tom.engine.adt.tomsignature.types.tomsymbollist.EmptyconcTomSymbol  ;}private static  tom.engine.adt.tomsignature.types.TomSymbolList  tom_empty_list_concTomSymbol() { return  tom.engine.adt.tomsignature.types.tomsymbollist.EmptyconcTomSymbol.make() ; }private static  tom.engine.adt.tomsignature.types.TomSymbolList  tom_cons_list_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbol  e,  tom.engine.adt.tomsignature.types.TomSymbolList  l) { return  tom.engine.adt.tomsignature.types.tomsymbollist.ConsconcTomSymbol.make(e,l) ; }private static  tom.engine.adt.tomsignature.types.TomSymbol  tom_get_head_concTomSymbol_TomSymbolList( tom.engine.adt.tomsignature.types.TomSymbolList  l) {  return  l.getHeadconcTomSymbol()  ;}private static  tom.engine.adt.tomsignature.types.TomSymbolList  tom_get_tail_concTomSymbol_TomSymbolList( tom.engine.adt.tomsignature.types.TomSymbolList  l) {  return  l.getTailconcTomSymbol()  ;}private static boolean tom_is_empty_concTomSymbol_TomSymbolList( tom.engine.adt.tomsignature.types.TomSymbolList  l) {  return  l.isEmptyconcTomSymbol()  ;}private static  tom.engine.adt.tomsignature.types.TomSymbolList  tom_append_list_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbolList  l1,  tom.engine.adt.tomsignature.types.TomSymbolList  l2) {    if(tom_is_empty_concTomSymbol_TomSymbolList(l1)) {     return l2;    } else if(tom_is_empty_concTomSymbol_TomSymbolList(l2)) {     return l1;    } else if(tom_is_empty_concTomSymbol_TomSymbolList(( tom.engine.adt.tomsignature.types.TomSymbolList )tom_get_tail_concTomSymbol_TomSymbolList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomSymbolList )tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol )tom_get_head_concTomSymbol_TomSymbolList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomSymbolList )tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol )tom_get_head_concTomSymbol_TomSymbolList(l1),tom_append_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbolList )tom_get_tail_concTomSymbol_TomSymbolList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomSymbolList  tom_get_slice_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbolList  begin,  tom.engine.adt.tomsignature.types.TomSymbolList  end) {    if(tom_equal_term_TomSymbolList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomSymbolList )tom_empty_list_concTomSymbol();    } else {      return ( tom.engine.adt.tomsignature.types.TomSymbolList )tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol )tom_get_head_concTomSymbol_TomSymbolList(begin),( tom.engine.adt.tomsignature.types.TomSymbolList )tom_get_slice_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbolList )tom_get_tail_concTomSymbol_TomSymbolList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList  t) {  return  t instanceof tom.engine.adt.tomsignature.types.tomrulelist.ConsconcTomRule || t instanceof tom.engine.adt.tomsignature.types.tomrulelist.EmptyconcTomRule  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_empty_list_concTomRule() { return  tom.engine.adt.tomsignature.types.tomrulelist.EmptyconcTomRule.make() ; }private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_cons_list_concTomRule( tom.engine.adt.tomsignature.types.TomRule  e,  tom.engine.adt.tomsignature.types.TomRuleList  l) { return  tom.engine.adt.tomsignature.types.tomrulelist.ConsconcTomRule.make(e,l) ; }private static  tom.engine.adt.tomsignature.types.TomRule  tom_get_head_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList  l) {  return  l.getHeadconcTomRule()  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_get_tail_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList  l) {  return  l.getTailconcTomRule()  ;}private static boolean tom_is_empty_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList  l) {  return  l.isEmptyconcTomRule()  ;}private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_append_list_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList  l1,  tom.engine.adt.tomsignature.types.TomRuleList  l2) {    if(tom_is_empty_concTomRule_TomRuleList(l1)) {     return l2;    } else if(tom_is_empty_concTomRule_TomRuleList(l2)) {     return l1;    } else if(tom_is_empty_concTomRule_TomRuleList(( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_tail_concTomRule_TomRuleList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule )tom_get_head_concTomRule_TomRuleList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule )tom_get_head_concTomRule_TomRuleList(l1),tom_append_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_tail_concTomRule_TomRuleList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomRuleList  tom_get_slice_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList  begin,  tom.engine.adt.tomsignature.types.TomRuleList  end) {    if(tom_equal_term_TomRuleList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_empty_list_concTomRule();    } else {      return ( tom.engine.adt.tomsignature.types.TomRuleList )tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule )tom_get_head_concTomRule_TomRuleList(begin),( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_slice_concTomRule(( tom.engine.adt.tomsignature.types.TomRuleList )tom_get_tail_concTomRule_TomRuleList(begin),end));    }   }  private static boolean tom_is_fun_sym_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  t) {  return  t instanceof tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration || t instanceof tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration  ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_empty_list_concDeclaration() { return  tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ; }private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_cons_list_concDeclaration( tom.engine.adt.tomdeclaration.types.Declaration  e,  tom.engine.adt.tomdeclaration.types.DeclarationList  l) { return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make(e,l) ; }private static  tom.engine.adt.tomdeclaration.types.Declaration  tom_get_head_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) {  return  l.getHeadconcDeclaration()  ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_tail_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) {  return  l.getTailconcDeclaration()  ;}private static boolean tom_is_empty_concDeclaration_DeclarationList( tom.engine.adt.tomdeclaration.types.DeclarationList  l) {  return  l.isEmptyconcDeclaration()  ;}private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_append_list_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  l1,  tom.engine.adt.tomdeclaration.types.DeclarationList  l2) {    if(tom_is_empty_concDeclaration_DeclarationList(l1)) {     return l2;    } else if(tom_is_empty_concDeclaration_DeclarationList(l2)) {     return l1;    } else if(tom_is_empty_concDeclaration_DeclarationList(( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_tail_concDeclaration_DeclarationList(l1))) {     return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.Declaration )tom_get_head_concDeclaration_DeclarationList(l1),l2);    } else {      return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.Declaration )tom_get_head_concDeclaration_DeclarationList(l1),tom_append_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_tail_concDeclaration_DeclarationList(l1),l2));    }   }  private static  tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_slice_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  begin,  tom.engine.adt.tomdeclaration.types.DeclarationList  end) {    if(tom_equal_term_DeclarationList(begin,end)) {      return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_empty_list_concDeclaration();    } else {      return ( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_cons_list_concDeclaration(( tom.engine.adt.tomdeclaration.types.Declaration )tom_get_head_concDeclaration_DeclarationList(begin),( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_slice_concDeclaration(( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_tail_concDeclaration_DeclarationList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomname.types.TomNameList  t) {  return  t instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName || t instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_empty_list_concTomName() { return  tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName.make() ; }private static  tom.engine.adt.tomname.types.TomNameList  tom_cons_list_concTomName( tom.engine.adt.tomname.types.TomName  e,  tom.engine.adt.tomname.types.TomNameList  l) { return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make(e,l) ; }private static  tom.engine.adt.tomname.types.TomName  tom_get_head_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getHeadconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_get_tail_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.getTailconcTomName()  ;}private static boolean tom_is_empty_concTomName_TomNameList( tom.engine.adt.tomname.types.TomNameList  l) {  return  l.isEmptyconcTomName()  ;}private static  tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList  l1,  tom.engine.adt.tomname.types.TomNameList  l2) {    if(tom_is_empty_concTomName_TomNameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_TomNameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_TomNameList(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1))) {     return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),l2);    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(l1),l2));    }   }  private static  tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end) {    if(tom_equal_term_TomNameList(begin,end)) {      return ( tom.engine.adt.tomname.types.TomNameList )tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomname.types.TomNameList )tom_cons_list_concTomName(( tom.engine.adt.tomname.types.TomName )tom_get_head_concTomName_TomNameList(begin),( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName(( tom.engine.adt.tomname.types.TomNameList )tom_get_tail_concTomName_TomNameList(begin),end));    }   }  private static boolean tom_is_fun_sym_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  t) {  return  t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction || t instanceof tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_empty_list_concPatternInstruction() { return  tom.engine.adt.tomterm.types.patterninstructionlist.EmptyconcPatternInstruction.make() ; }private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_cons_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstruction  e,  tom.engine.adt.tomterm.types.PatternInstructionList  l) { return  tom.engine.adt.tomterm.types.patterninstructionlist.ConsconcPatternInstruction.make(e,l) ; }private static  tom.engine.adt.tomterm.types.PatternInstruction  tom_get_head_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.getHeadconcPatternInstruction()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_tail_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.getTailconcPatternInstruction()  ;}private static boolean tom_is_empty_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomterm.types.PatternInstructionList  l) {  return  l.isEmptyconcPatternInstruction()  ;}private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_append_list_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  l1,  tom.engine.adt.tomterm.types.PatternInstructionList  l2) {    if(tom_is_empty_concPatternInstruction_PatternInstructionList(l1)) {     return l2;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(l2)) {     return l1;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(l1))) {     return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(l1),tom_append_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.PatternInstructionList  tom_get_slice_concPatternInstruction( tom.engine.adt.tomterm.types.PatternInstructionList  begin,  tom.engine.adt.tomterm.types.PatternInstructionList  end) {    if(tom_equal_term_PatternInstructionList(begin,end)) {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_empty_list_concPatternInstruction();    } else {      return ( tom.engine.adt.tomterm.types.PatternInstructionList )tom_cons_list_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstruction )tom_get_head_concPatternInstruction_PatternInstructionList(begin),( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_slice_concPatternInstruction(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_get_tail_concPatternInstruction_PatternInstructionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomterm.types.TomList  t) {  return  t instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm || t instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_empty_list_concTomTerm() { return  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ; }private static  tom.engine.adt.tomterm.types.TomList  tom_cons_list_concTomTerm( tom.engine.adt.tomterm.types.TomTerm  e,  tom.engine.adt.tomterm.types.TomList  l) { return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(e,l) ; }private static  tom.engine.adt.tomterm.types.TomTerm  tom_get_head_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getHeadconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.getTailconcTomTerm()  ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomterm.types.TomList  l) {  return  l.isEmptyconcTomTerm()  ;}private static  tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList  l1,  tom.engine.adt.tomterm.types.TomList  l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end) {    if(tom_equal_term_TomList(begin,end)) {      return ( tom.engine.adt.tomterm.types.TomList )tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomterm.types.TomList )tom_cons_list_concTomTerm(( tom.engine.adt.tomterm.types.TomTerm )tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm(( tom.engine.adt.tomterm.types.TomList )tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomoption.types.OptionList  t) {  return  t instanceof tom.engine.adt.tomoption.types.optionlist.ConsconcOption || t instanceof tom.engine.adt.tomoption.types.optionlist.EmptyconcOption  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_empty_list_concOption() { return  tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ; }private static  tom.engine.adt.tomoption.types.OptionList  tom_cons_list_concOption( tom.engine.adt.tomoption.types.Option  e,  tom.engine.adt.tomoption.types.OptionList  l) { return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(e,l) ; }private static  tom.engine.adt.tomoption.types.Option  tom_get_head_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getHeadconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_get_tail_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.getTailconcOption()  ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomoption.types.OptionList  l) {  return  l.isEmptyconcOption()  ;}private static  tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList  l1,  tom.engine.adt.tomoption.types.OptionList  l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end) {    if(tom_equal_term_OptionList(begin,end)) {      return ( tom.engine.adt.tomoption.types.OptionList )tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomoption.types.OptionList )tom_cons_list_concOption(( tom.engine.adt.tomoption.types.Option )tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption(( tom.engine.adt.tomoption.types.OptionList )tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_is_fun_sym_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  t) {  return  t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl || t instanceof tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_empty_list_concPairNameDecl() { return  tom.engine.adt.tomslot.types.pairnamedecllist.EmptyconcPairNameDecl.make() ; }private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_cons_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDecl  e,  tom.engine.adt.tomslot.types.PairNameDeclList  l) { return  tom.engine.adt.tomslot.types.pairnamedecllist.ConsconcPairNameDecl.make(e,l) ; }private static  tom.engine.adt.tomslot.types.PairNameDecl  tom_get_head_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.getHeadconcPairNameDecl()  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_tail_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.getTailconcPairNameDecl()  ;}private static boolean tom_is_empty_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomslot.types.PairNameDeclList  l) {  return  l.isEmptyconcPairNameDecl()  ;}private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_append_list_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  l1,  tom.engine.adt.tomslot.types.PairNameDeclList  l2) {    if(tom_is_empty_concPairNameDecl_PairNameDeclList(l1)) {     return l2;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(l2)) {     return l1;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(l1))) {     return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(l1),l2);    } else {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(l1),tom_append_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(l1),l2));    }   }  private static  tom.engine.adt.tomslot.types.PairNameDeclList  tom_get_slice_concPairNameDecl( tom.engine.adt.tomslot.types.PairNameDeclList  begin,  tom.engine.adt.tomslot.types.PairNameDeclList  end) {    if(tom_equal_term_PairNameDeclList(begin,end)) {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_empty_list_concPairNameDecl();    } else {      return ( tom.engine.adt.tomslot.types.PairNameDeclList )tom_cons_list_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDecl )tom_get_head_concPairNameDecl_PairNameDeclList(begin),( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_slice_concPairNameDecl(( tom.engine.adt.tomslot.types.PairNameDeclList )tom_get_tail_concPairNameDecl_PairNameDeclList(begin),end));    }   }   /* Generated by TOM (version 2.5alpha): Do not edit this file */private static boolean tom_equal_term_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_sort_Strategy(Object t) {  return  t instanceof tom.library.strategy.mutraveler.MuStrategy  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_mu( tom.library.strategy.mutraveler.MuStrategy  var,  tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.Mu(var,v) ; }/* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static boolean tom_is_fun_sym_Sequence( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (t instanceof tom.library.strategy.mutraveler.Sequence)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_empty_list_Sequence() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_cons_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  head,  tom.library.strategy.mutraveler.MuStrategy  tail) { return  new tom.library.strategy.mutraveler.Sequence(head,tail) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_head_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.FIRST)  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_tail_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  (tom.library.strategy.mutraveler.MuStrategy)t.getChildAt(tom.library.strategy.mutraveler.Sequence.THEN)  ;}private static boolean tom_is_empty_Sequence_Strategy( tom.library.strategy.mutraveler.MuStrategy  t) {  return  t instanceof tom.library.strategy.mutraveler.Identity  ;}private static  tom.library.strategy.mutraveler.MuStrategy  tom_append_list_Sequence( tom.library.strategy.mutraveler.MuStrategy  l1,  tom.library.strategy.mutraveler.MuStrategy  l2) {    if(tom_is_empty_Sequence_Strategy(l1)) {     return l2;    } else if(tom_is_empty_Sequence_Strategy(l2)) {     return l1;    } else if(tom_is_fun_sym_Sequence(l1)) {       if(tom_is_empty_Sequence_Strategy(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1))) {        return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),l2);      } else {        return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(l1),tom_append_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(l1),l2));      }    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(l1 , l2);    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_get_slice_Sequence( tom.library.strategy.mutraveler.MuStrategy  begin,  tom.library.strategy.mutraveler.MuStrategy  end) {    if(tom_equal_term_Strategy(begin,end)) {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_empty_list_Sequence();    } else {      return ( tom.library.strategy.mutraveler.MuStrategy )tom_cons_list_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_head_Sequence_Strategy(begin),( tom.library.strategy.mutraveler.MuStrategy )tom_get_slice_Sequence(( tom.library.strategy.mutraveler.MuStrategy )tom_get_tail_Sequence_Strategy(begin),end));    }   }  private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Choice( tom.library.strategy.mutraveler.MuStrategy  first,  tom.library.strategy.mutraveler.MuStrategy  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_All( tom.library.strategy.mutraveler.MuStrategy  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /* Generated by TOM (version 2.5alpha): Do not edit this file */private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_Try( tom.library.strategy.mutraveler.MuStrategy  v) { return tom_make_Choice(v,tom_make_Identity()) ; }   


  /** the declared options string */
  public static final String DECLARED_OPTIONS = "<options><boolean name='noSyntaxCheck' altName='' description='Do not perform syntax checking' value='false'/></options>";

  /** op and type declarator */
  private final static String OPERATOR    = "Operator";
  private final static String CONSTRUCTOR = "%op";
  private final static String OP_ARRAY    = "%oparray";
  private final static String OP_LIST     = "%oplist";
  private final static String TYPE        = "Type";
  private final static String TYPE_TERM   = "%typeterm";

  /** type function symbols */
  private final static String EQUALS      = "equals";
  private final static String GET_ELEMENT = "get_element";
  private final static String GET_SIZE    = "get_size";
  private final static String GET_HEAD    = "get_head";
  private final static String GET_TAIL    = "get_tail";
  private final static String IS_EMPTY    = "is_empty";
  /** operator function symbols */
  private final static String MAKE_APPEND = "make_append";
  private final static String MAKE_EMPTY  = "make_empty";
  private final static String MAKE_INSERT = "make_insert";
  private final static String MAKE        = "make";

  /** the list of already studied and declared Types */
  private  ArrayList alreadyStudiedTypes =  new ArrayList();
  /** the list of already studied and declared Symbol */
  private  ArrayList alreadyStudiedSymbols =  new ArrayList();
  /** the list of already studied and declared Rule Symbol */
  private  ArrayList alreadyStudiedRule =  new ArrayList();

  /** List of expected functional declaration in each type declaration */
  private final static ArrayList TypeTermSignature =
    new ArrayList( Arrays.asList(new String[]{ TomSyntaxChecker.EQUALS }));

  /** Constructor */
  public TomSyntaxChecker() {
    super("TomSyntaxChecker");
    reinit();
  }

  /**
   * inherited from OptionOwner interface (plugin)
   */
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomSyntaxChecker.DECLARED_OPTIONS);
  }

  protected void reinit() {
    super.reinit();
    alreadyStudiedTypes   = new ArrayList();
    alreadyStudiedSymbols = new ArrayList();
    alreadyStudiedRule    = new ArrayList();
  }

  public void run() {
    if(isActivated()) {
      strictType = !getOptionBooleanValue("lazyType");
      long startChrono = System.currentTimeMillis();
      try {
        // clean up internals
        reinit();
        // perform analyse
        try {
          MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_cons_list_Sequence(tom_make_checkSyntax(this),tom_cons_list_Sequence(tom_make_All(tom_make_MuVar("x")),tom_empty_list_Sequence()))))).visit((TomTerm)getWorkingTerm());
        } catch(jjtraveler.VisitFailure e) {
          System.out.println("strategy failed");
        }
        // verbose
        getLogger().log(Level.INFO, TomMessage.tomSyntaxCheckingPhase.getMessage(),
            new Integer((int)(System.currentTimeMillis()-startChrono)));
      } catch (Exception e) {
        getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                        new Object[]{getClass().getName(),
                                     getStreamManager().getInputFileName(),
                                     e.getMessage() });
        e.printStackTrace();
      }
    } else {
      // syntax checker desactivated
      getLogger().log(Level.INFO, TomMessage.syntaxCheckerInactivated.getMessage());
    }
  }

  private boolean isActivated() {
    return !getOptionBooleanValue("noSyntaxCheck");
  }

  /**
   * Syntax checking entry point:
   * Catch and verify all type and operator declaration,
   * Match and RuleSet instructions
   */
   private static class checkSyntax  extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy   { private  TomSyntaxChecker  tsc;  public checkSyntax(  TomSyntaxChecker  tsc ) { super(tom_make_Identity() ); this.tsc=tsc; } public  TomSyntaxChecker  gettsc() { return tsc;} public int getChildCount() { return 1; } public jjtraveler.Visitable getChildAt(int i) { switch (i) { case 0: return super.getChildAt(0); default: throw new IndexOutOfBoundsException(); }} public jjtraveler.Visitable setChildAt(int i, jjtraveler.Visitable child) { switch (i) { case 0: return super.setChildAt(0, child); default: throw new IndexOutOfBoundsException(); }} public  tom.engine.adt.tomdeclaration.types.Declaration  visit_Declaration(  tom.engine.adt.tomdeclaration.types.Declaration  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_Declaration(tom__arg)) { { tom.engine.adt.tomdeclaration.types.Declaration  tomMatch1Position1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg); if ( ( tom_is_fun_sym_Strategy(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomsignature.types.TomVisitList  tom_list=tom_get_slot_Strategy_VisitList(tomMatch1Position1); { tom.engine.adt.tomoption.types.Option  tom_origin=tom_get_slot_Strategy_OrgTrack(tomMatch1Position1); if ( true ) {



        if(tom_list.isEmptyconcTomVisit()) {
           if (tom_is_sort_Option(tom_origin)) { { tom.engine.adt.tomoption.types.Option  tomMatch2Position1=(( tom.engine.adt.tomoption.types.Option )tom_origin); if ( ( tom_is_fun_sym_OriginTracking(tomMatch2Position1) ||  false  ) ) { { String  tom_fileName=tom_get_slot_OriginTracking_FileName(tomMatch2Position1); { int  tom_line=tom_get_slot_OriginTracking_Line(tomMatch2Position1); if ( true ) {
 
              tsc.messageError(tom_fileName,tom_line,TomMessage.emptyStrategy,new Object[]{});
             } } } } } }

          tsc.messageError("unknown",-1,TomMessage.emptyStrategy,new Object[]{});
        }
        /*  STRATEGY MATCH STRUCTURE*/
        tsc.verifyStrategy(tom_list);
       } } } } if ( ( tom_is_fun_sym_RuleSet(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomsignature.types.TomRuleList  tom_list=tom_get_slot_RuleSet_RuleList(tomMatch1Position1); { tom.engine.adt.tomoption.types.OptionList  tom_optionList=tom_get_slot_RuleSet_Option(tomMatch1Position1); if ( true ) {

        /*  TOM RULE STRUCTURE*/
        tsc.verifyRule(tom_list, tom_optionList);
        tom_make_Fail().visit(null);
       } } } } if ( ( tom_is_fun_sym_TypeTermDecl(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch1Position1NameNumberAstName=tom_get_slot_TypeTermDecl_AstName(tomMatch1Position1); if ( ( tom_is_fun_sym_Name(tomMatch1Position1NameNumberAstName) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch1Position1NameNumberAstName); { tom.engine.adt.tomdeclaration.types.DeclarationList  tom_declarationList=tom_get_slot_TypeTermDecl_Declarations(tomMatch1Position1); { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_TypeTermDecl_OrgTrack(tomMatch1Position1); if ( true ) {


        tsc.verifyTypeDecl(TomSyntaxChecker.TYPE_TERM, tom_tomName, tom_declarationList, tom_orgTrack);
        tom_make_Fail().visit(null);
       } } } } } } } if ( ( tom_is_fun_sym_SymbolDecl(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch1Position1NameNumberAstName=tom_get_slot_SymbolDecl_AstName(tomMatch1Position1); if ( ( tom_is_fun_sym_Name(tomMatch1Position1NameNumberAstName) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch1Position1NameNumberAstName); if ( true ) {


        tsc.verifySymbol(TomSyntaxChecker.CONSTRUCTOR, tsc.getSymbolFromName(tom_tomName));
        tom_make_Fail().visit(null);
       } } } } } if ( ( tom_is_fun_sym_ArraySymbolDecl(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch1Position1NameNumberAstName=tom_get_slot_ArraySymbolDecl_AstName(tomMatch1Position1); if ( ( tom_is_fun_sym_Name(tomMatch1Position1NameNumberAstName) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch1Position1NameNumberAstName); if ( true ) {

        tsc.verifySymbol(TomSyntaxChecker.OP_ARRAY, tsc.getSymbolFromName(tom_tomName));
        tom_make_Fail().visit(null);
       } } } } } if ( ( tom_is_fun_sym_ListSymbolDecl(tomMatch1Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch1Position1NameNumberAstName=tom_get_slot_ListSymbolDecl_AstName(tomMatch1Position1); if ( ( tom_is_fun_sym_Name(tomMatch1Position1NameNumberAstName) ||  false  ) ) { { String  tom_tomName=tom_get_slot_Name_String(tomMatch1Position1NameNumberAstName); if ( true ) {

        tsc.verifySymbol(TomSyntaxChecker.OP_LIST, tsc.getSymbolFromName(tom_tomName));
        tom_make_Fail().visit(null);
       } } } } } } } return super.visit_Declaration(tom__arg) ;  } public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction(  tom.engine.adt.tominstruction.types.Instruction  tom__arg )  throws jjtraveler.VisitFailure { if (tom_is_sort_Instruction(tom__arg)) { { tom.engine.adt.tominstruction.types.Instruction  tomMatch3Position1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg); if ( ( tom_is_fun_sym_Match(tomMatch3Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch3Position1NameNumberSubjectList=tom_get_slot_Match_SubjectList(tomMatch3Position1); if ( ( tom_is_fun_sym_SubjectList(tomMatch3Position1NameNumberSubjectList) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_matchArgsList=tom_get_slot_SubjectList_TomList(tomMatch3Position1NameNumberSubjectList); { tom.engine.adt.tomterm.types.PatternInstructionList  tom_patternInstructionList=tom_get_slot_Match_AstPatternInstructionList(tomMatch3Position1); { tom.engine.adt.tomoption.types.OptionList  tom_list=tom_get_slot_Match_Option(tomMatch3Position1); if ( true ) {




       /*  TOM MATCH STRUCTURE*/
       tsc.verifyMatch(tom_matchArgsList, tom_patternInstructionList, tom_list);
      } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  tom.library.strategy.mutraveler.MuStrategy  tom_make_checkSyntax( TomSyntaxChecker  t0) { return new checkSyntax(t0); }



  ///////////////////////////////
  // TYPE DECLARATION CONCERNS //
  //////////////////////////////
  private void verifyTypeDecl(String declType, String tomName, DeclarationList listOfDeclaration, Option typeOrgTrack) {
    currentTomStructureOrgTrack = typeOrgTrack;
    // ensure first definition
    verifyMultipleDefinition(tomName, declType, TYPE);
    // verify Macro functions
    ArrayList verifyList = new ArrayList(TomSyntaxChecker.TypeTermSignature);

     if (tom_is_sort_DeclarationList(listOfDeclaration)) { { tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch4Position1=(( tom.engine.adt.tomdeclaration.types.DeclarationList )listOfDeclaration); if ( ( tom_is_fun_sym_concDeclaration(tomMatch4Position1) ||  false  ) ) { {int tomMatch4Position1Index1=0; { tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch4Position1List1=tomMatch4Position1; { tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch4Position1Begin1=tomMatch4Position1List1; { tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch4Position1End1=tomMatch4Position1List1; { while (!(tom_is_empty_concDeclaration_DeclarationList(tomMatch4Position1End1))) {tomMatch4Position1List1=tomMatch4Position1End1; { { tom.engine.adt.tomdeclaration.types.DeclarationList  tomMatch4Position1Save2=tomMatch4Position1List1; { { tom.engine.adt.tomdeclaration.types.Declaration  tom_d=tom_get_head_concDeclaration_DeclarationList(tomMatch4Position1List1);tomMatch4Position1Index1=tomMatch4Position1Index1 + 1;tomMatch4Position1List1=tom_get_tail_concDeclaration_DeclarationList(tomMatch4Position1List1); if ( true ) {
 // for each Declaration
        Declaration decl = tom_d;
        matchblock:{
           if (tom_is_sort_Declaration(decl)) { { tom.engine.adt.tomdeclaration.types.Declaration  tomMatch5Position1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl); if ( ( tom_is_fun_sym_EqualTermDecl(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1NameNumberTermArg1=tom_get_slot_EqualTermDecl_TermArg1(tomMatch5Position1); { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1NameNumberTermArg2=tom_get_slot_EqualTermDecl_TermArg2(tomMatch5Position1); if ( ( tom_is_fun_sym_Variable(tomMatch5Position1NameNumberTermArg1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch5Position1NameNumberTermArg1NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch5Position1NameNumberTermArg1); if ( ( tom_is_fun_sym_Name(tomMatch5Position1NameNumberTermArg1NameNumberAstName) ||  false  ) ) { { String  tom_name1=tom_get_slot_Name_String(tomMatch5Position1NameNumberTermArg1NameNumberAstName); if ( ( tom_is_fun_sym_Variable(tomMatch5Position1NameNumberTermArg2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch5Position1NameNumberTermArg2NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch5Position1NameNumberTermArg2); if ( ( tom_is_fun_sym_Name(tomMatch5Position1NameNumberTermArg2NameNumberAstName) ||  false  ) ) { { String  tom_name2=tom_get_slot_Name_String(tomMatch5Position1NameNumberTermArg2NameNumberAstName); { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_EqualTermDecl_OrgTrack(tomMatch5Position1); if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.EQUALS,verifyList,tom_orgTrack,tom_name1,tom_name2,declType)


;
              break matchblock;
             } } } } } } } } } } } } } if ( ( tom_is_fun_sym_GetHeadDecl(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_GetHeadDecl_OrgTrack(tomMatch5Position1); if ( true ) {checkField(TomSyntaxChecker.GET_HEAD,verifyList,tom_orgTrack,declType)


;
              break matchblock;
             } } } if ( ( tom_is_fun_sym_GetTailDecl(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_GetTailDecl_OrgTrack(tomMatch5Position1); if ( true ) {checkField(TomSyntaxChecker.GET_TAIL,verifyList,tom_orgTrack,declType)

;
              break matchblock;
             } } } if ( ( tom_is_fun_sym_IsEmptyDecl(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_IsEmptyDecl_OrgTrack(tomMatch5Position1); if ( true ) {checkField(TomSyntaxChecker.IS_EMPTY,verifyList,tom_orgTrack,declType)

;
              break matchblock;
             } } } if ( ( tom_is_fun_sym_GetElementDecl(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1NameNumberVariable=tom_get_slot_GetElementDecl_Variable(tomMatch5Position1); { tom.engine.adt.tomterm.types.TomTerm  tomMatch5Position1NameNumberIndex=tom_get_slot_GetElementDecl_Index(tomMatch5Position1); if ( ( tom_is_fun_sym_Variable(tomMatch5Position1NameNumberVariable) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch5Position1NameNumberVariableNameNumberAstName=tom_get_slot_Variable_AstName(tomMatch5Position1NameNumberVariable); if ( ( tom_is_fun_sym_Name(tomMatch5Position1NameNumberVariableNameNumberAstName) ||  false  ) ) { { String  tom_name1=tom_get_slot_Name_String(tomMatch5Position1NameNumberVariableNameNumberAstName); if ( ( tom_is_fun_sym_Variable(tomMatch5Position1NameNumberIndex) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch5Position1NameNumberIndexNameNumberAstName=tom_get_slot_Variable_AstName(tomMatch5Position1NameNumberIndex); if ( ( tom_is_fun_sym_Name(tomMatch5Position1NameNumberIndexNameNumberAstName) ||  false  ) ) { { String  tom_name2=tom_get_slot_Name_String(tomMatch5Position1NameNumberIndexNameNumberAstName); { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_GetElementDecl_OrgTrack(tomMatch5Position1); if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.GET_ELEMENT,verifyList,tom_orgTrack,tom_name1,tom_name2,declType)


;
              break matchblock;
             } } } } } } } } } } } } } if ( ( tom_is_fun_sym_GetSizeDecl(tomMatch5Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_GetSizeDecl_OrgTrack(tomMatch5Position1); if ( true ) {checkField(TomSyntaxChecker.GET_SIZE,verifyList,tom_orgTrack,declType)

;
              break matchblock;
             } } } } }

        }
       } }tomMatch4Position1List1=tomMatch4Position1Save2; } }tomMatch4Position1End1=tom_get_tail_concDeclaration_DeclarationList(tomMatch4Position1End1); } }tomMatch4Position1List1=tomMatch4Position1Begin1; } } } } } } } }

    // remove non mandatory functions
    if(verifyList.contains(TomSyntaxChecker.EQUALS)) {
      verifyList.remove(verifyList.indexOf(TomSyntaxChecker.EQUALS));
    }
    if(!verifyList.isEmpty()) {
      messageMissingMacroFunctions(declType, verifyList);
    }
  } //verifyTypeDecl

  private void verifyMultipleDefinition(String name, String symbolType, String OperatorOrType) {
    ArrayList list;
    if (OperatorOrType.equals(TomSyntaxChecker.OPERATOR)) {
      list = alreadyStudiedSymbols;
    } else {
      list = alreadyStudiedTypes;
    }
    if(list.contains(name)) {
      messageError(currentTomStructureOrgTrack.getFileName(),
          currentTomStructureOrgTrack.getLine(),
          TomMessage.multipleSymbolDefinitionError,
          new Object[]{name});
    } else {
      list.add(name);
    }
  } //verifyMultipleDefinition

  private  void checkField(String function, ArrayList foundFunctions, Option orgTrack, String symbolType) {
    if(foundFunctions.contains(function)) {
      foundFunctions.remove(foundFunctions.indexOf(function));
    } else {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.macroFunctionRepeated,
                   new Object[]{function});
    }
  } //checkField

  private  void checkFieldAndLinearArgs(String function, ArrayList foundFunctions, Option orgTrack, String name1, String name2, String symbolType) {
    checkField(function,foundFunctions, orgTrack, symbolType);
    if(name1.equals(name2)) {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.nonLinearMacroFunction,
                   new Object[]{function, name1});
    }
  } //checkFieldAndLinearArgs

  /////////////////////////////////
  // SYMBOL DECLARATION CONCERNS //
  /////////////////////////////////
  private  void verifySymbol(String symbolType, TomSymbol tomSymbol){
    int domainLength;
    String symbStrName = tomSymbol.getAstName().getString();
    OptionList optionList = tomSymbol.getOption();
    // We save first the origin tracking of the symbol declaration
    currentTomStructureOrgTrack = findOriginTracking(optionList);

    // ensure first definition then Codomain, Domain, Macros and Slots (Simple operator)
    verifyMultipleDefinition(symbStrName, symbolType, TomSyntaxChecker.OPERATOR);
    verifySymbolCodomain(getSymbolCodomain(tomSymbol), symbStrName, symbolType);
    domainLength = verifySymbolDomain(getSymbolDomain(tomSymbol), symbStrName, symbolType);
    verifySymbolMacroFunctions(optionList, domainLength, symbolType);
  } //verifySymbol

  private  void verifySymbolCodomain(TomType codomain, String symbName, String symbolType) {
     if (tom_is_sort_TomType(codomain)) { { tom.engine.adt.tomtype.types.TomType  tomMatch6Position1=(( tom.engine.adt.tomtype.types.TomType )codomain); if ( ( tom_is_fun_sym_Codomain(tomMatch6Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch6Position1NameNumberAstName=tom_get_slot_Codomain_AstName(tomMatch6Position1); if ( ( tom_is_fun_sym_Name(tomMatch6Position1NameNumberAstName) ||  false  ) ) { { String  tom_opName=tom_get_slot_Name_String(tomMatch6Position1NameNumberAstName); if ( true ) {

        if(symbolTable().getSymbolFromName(tom_opName) == null) {
          messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
              TomMessage.symbolCodomainError,
              new Object[]{symbName, codomain});
        }
        return;
       } } } } } if ( ( tom_is_fun_sym_TomTypeAlone(tomMatch6Position1) ||  false  ) ) { { String  tom_typeName=tom_get_slot_TomTypeAlone_String(tomMatch6Position1); if ( true ) {


        if(!testTypeExistence(tom_typeName)) {
          messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
              TomMessage.symbolCodomainError,
              new Object[]{symbName, (tom_typeName)});
        }
        return;
       } } } if ( ( tom_is_fun_sym_EmptyType(tomMatch6Position1) ||  false  ) ) { if ( true ) {


        messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
            TomMessage.symbolCodomainError,
            new Object[]{symbName, ""});
        return;
       } } } }

    throw new TomRuntimeException("Strange codomain "+codomain);
  }

  private  int verifySymbolDomain(TomTypeList args, String symbName, String symbolType) {
    int position = 1;
    if(symbolType.equals(TomSyntaxChecker.CONSTRUCTOR)) {
       if (tom_is_sort_TomTypeList(args)) { { tom.engine.adt.tomtype.types.TomTypeList  tomMatch7Position1=(( tom.engine.adt.tomtype.types.TomTypeList )args); if ( ( tom_is_fun_sym_concTomType(tomMatch7Position1) ||  false  ) ) { {int tomMatch7Position1Index1=0; { tom.engine.adt.tomtype.types.TomTypeList  tomMatch7Position1List1=tomMatch7Position1; { tom.engine.adt.tomtype.types.TomTypeList  tomMatch7Position1Begin1=tomMatch7Position1List1; { tom.engine.adt.tomtype.types.TomTypeList  tomMatch7Position1End1=tomMatch7Position1List1; { while (!(tom_is_empty_concTomType_TomTypeList(tomMatch7Position1End1))) {tomMatch7Position1List1=tomMatch7Position1End1; { { tom.engine.adt.tomtype.types.TomTypeList  tomMatch7Position1Save2=tomMatch7Position1List1; { { tom.engine.adt.tomtype.types.TomType  tomMatch7Position1Position2=tom_get_head_concTomType_TomTypeList(tomMatch7Position1List1);tomMatch7Position1Index1=tomMatch7Position1Index1 + 1;tomMatch7Position1List1=tom_get_tail_concTomType_TomTypeList(tomMatch7Position1List1); if ( ( tom_is_fun_sym_TomTypeAlone(tomMatch7Position1Position2) ||  false  ) ) { { String  tom_typeName=tom_get_slot_TomTypeAlone_String(tomMatch7Position1Position2); if ( true ) {
 // for each symbol types
          if(!testTypeExistence(tom_typeName)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.symbolDomainError,
                new Object[]{new Integer(position), symbName, (tom_typeName)});
          }
          position++;
         } } } }tomMatch7Position1List1=tomMatch7Position1Save2; } }tomMatch7Position1End1=tom_get_tail_concTomType_TomTypeList(tomMatch7Position1End1); } }tomMatch7Position1List1=tomMatch7Position1Begin1; } } } } } } } }

      return (position-1);
    } else { // OPARRAY and OPLIST
       if (tom_is_sort_TomTypeList(args)) { { tom.engine.adt.tomtype.types.TomTypeList  tomMatch8Position1=(( tom.engine.adt.tomtype.types.TomTypeList )args); if ( ( tom_is_fun_sym_concTomType(tomMatch8Position1) ||  false  ) ) { {int tomMatch8Position1Index1=0; { tom.engine.adt.tomtype.types.TomTypeList  tomMatch8Position1List1=tomMatch8Position1; { tom.engine.adt.tomtype.types.TomTypeList  tomMatch8Position1Save1=tomMatch8Position1List1; { if (!(tom_is_empty_concTomType_TomTypeList(tomMatch8Position1List1))) { { tom.engine.adt.tomtype.types.TomType  tomMatch8Position1Position1=tom_get_head_concTomType_TomTypeList(tomMatch8Position1List1);tomMatch8Position1Index1=tomMatch8Position1Index1 + 1;tomMatch8Position1List1=tom_get_tail_concTomType_TomTypeList(tomMatch8Position1List1); if ( ( tom_is_fun_sym_TomTypeAlone(tomMatch8Position1Position1) ||  false  ) ) { { String  tom_typeName=tom_get_slot_TomTypeAlone_String(tomMatch8Position1Position1); if (tom_is_empty_concTomType_TomTypeList(tomMatch8Position1List1)) { if ( true ) {

          if(!testTypeExistence(tom_typeName)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.listSymbolDomainError,
                new Object[]{symbName, (tom_typeName)});
          }
         } } } } } }tomMatch8Position1List1=tomMatch8Position1Save1; } } } } } } }
 //match
      return 1;
    }
  } //verifySymbolDomain

  private  void verifySymbolMacroFunctions(OptionList option, int domainLength, String symbolType) {
    ArrayList verifyList = new ArrayList();
    boolean foundOpMake = false;
    if(symbolType.equals(TomSyntaxChecker.CONSTRUCTOR)) { //Nothing absolutely necessary
    } else if(symbolType == TomSyntaxChecker.OP_ARRAY ) {
      verifyList.add(TomSyntaxChecker.MAKE_EMPTY);
      verifyList.add(TomSyntaxChecker.MAKE_APPEND);
    } else if(symbolType == TomSyntaxChecker.OP_LIST) {
      verifyList.add(TomSyntaxChecker.MAKE_EMPTY);
      verifyList.add(TomSyntaxChecker.MAKE_INSERT);
    }

     if (tom_is_sort_OptionList(option)) { { tom.engine.adt.tomoption.types.OptionList  tomMatch9Position1=(( tom.engine.adt.tomoption.types.OptionList )option); if ( ( tom_is_fun_sym_concOption(tomMatch9Position1) ||  false  ) ) { {int tomMatch9Position1Index1=0; { tom.engine.adt.tomoption.types.OptionList  tomMatch9Position1List1=tomMatch9Position1; { tom.engine.adt.tomoption.types.OptionList  tomMatch9Position1Begin1=tomMatch9Position1List1; { tom.engine.adt.tomoption.types.OptionList  tomMatch9Position1End1=tomMatch9Position1List1; { while (!(tom_is_empty_concOption_OptionList(tomMatch9Position1End1))) {tomMatch9Position1List1=tomMatch9Position1End1; { { tom.engine.adt.tomoption.types.OptionList  tomMatch9Position1Save2=tomMatch9Position1List1; { { tom.engine.adt.tomoption.types.Option  tomMatch9Position1Position2=tom_get_head_concOption_OptionList(tomMatch9Position1List1);tomMatch9Position1Index1=tomMatch9Position1Index1 + 1;tomMatch9Position1List1=tom_get_tail_concOption_OptionList(tomMatch9Position1List1); if ( ( tom_is_fun_sym_DeclarationToOption(tomMatch9Position1Position2) ||  false  ) ) { { tom.engine.adt.tomdeclaration.types.Declaration  tom_d=tom_get_slot_DeclarationToOption_AstDeclaration(tomMatch9Position1Position2); if ( true ) {
 // for each Declaration
        Declaration decl=tom_d;
        matchblock:{
           if (tom_is_sort_Declaration(decl)) { { tom.engine.adt.tomdeclaration.types.Declaration  tomMatch10Position1=(( tom.engine.adt.tomdeclaration.types.Declaration )decl); if ( ( tom_is_fun_sym_MakeEmptyArray(tomMatch10Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_MakeEmptyArray_OrgTrack(tomMatch10Position1); if ( true ) {checkField(TomSyntaxChecker.MAKE_EMPTY,verifyList,tom_orgTrack,symbolType)


;
              break matchblock;
             } } } if ( ( tom_is_fun_sym_MakeAddArray(tomMatch10Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch10Position1NameNumberVarList=tom_get_slot_MakeAddArray_VarList(tomMatch10Position1); { tom.engine.adt.tomterm.types.TomTerm  tomMatch10Position1NameNumberVarElt=tom_get_slot_MakeAddArray_VarElt(tomMatch10Position1); if ( ( tom_is_fun_sym_Variable(tomMatch10Position1NameNumberVarList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch10Position1NameNumberVarListNameNumberAstName=tom_get_slot_Variable_AstName(tomMatch10Position1NameNumberVarList); if ( ( tom_is_fun_sym_Name(tomMatch10Position1NameNumberVarListNameNumberAstName) ||  false  ) ) { { String  tom_name1=tom_get_slot_Name_String(tomMatch10Position1NameNumberVarListNameNumberAstName); if ( ( tom_is_fun_sym_Variable(tomMatch10Position1NameNumberVarElt) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch10Position1NameNumberVarEltNameNumberAstName=tom_get_slot_Variable_AstName(tomMatch10Position1NameNumberVarElt); if ( ( tom_is_fun_sym_Name(tomMatch10Position1NameNumberVarEltNameNumberAstName) ||  false  ) ) { { String  tom_name2=tom_get_slot_Name_String(tomMatch10Position1NameNumberVarEltNameNumberAstName); { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_MakeAddArray_OrgTrack(tomMatch10Position1); if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.MAKE_APPEND,verifyList,tom_orgTrack,tom_name1,tom_name2,symbolType)

;
              break matchblock;
             } } } } } } } } } } } } } if ( ( tom_is_fun_sym_MakeEmptyList(tomMatch10Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_MakeEmptyList_OrgTrack(tomMatch10Position1); if ( true ) {checkField(TomSyntaxChecker.MAKE_EMPTY,verifyList,tom_orgTrack,symbolType)


;
              break matchblock;
             } } } if ( ( tom_is_fun_sym_MakeAddList(tomMatch10Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch10Position1NameNumberVarList=tom_get_slot_MakeAddList_VarList(tomMatch10Position1); { tom.engine.adt.tomterm.types.TomTerm  tomMatch10Position1NameNumberVarElt=tom_get_slot_MakeAddList_VarElt(tomMatch10Position1); if ( ( tom_is_fun_sym_Variable(tomMatch10Position1NameNumberVarList) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch10Position1NameNumberVarListNameNumberAstName=tom_get_slot_Variable_AstName(tomMatch10Position1NameNumberVarList); if ( ( tom_is_fun_sym_Name(tomMatch10Position1NameNumberVarListNameNumberAstName) ||  false  ) ) { { String  tom_name1=tom_get_slot_Name_String(tomMatch10Position1NameNumberVarListNameNumberAstName); if ( ( tom_is_fun_sym_Variable(tomMatch10Position1NameNumberVarElt) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch10Position1NameNumberVarEltNameNumberAstName=tom_get_slot_Variable_AstName(tomMatch10Position1NameNumberVarElt); if ( ( tom_is_fun_sym_Name(tomMatch10Position1NameNumberVarEltNameNumberAstName) ||  false  ) ) { { String  tom_name2=tom_get_slot_Name_String(tomMatch10Position1NameNumberVarEltNameNumberAstName); { tom.engine.adt.tomoption.types.Option  tom_orgTrack=tom_get_slot_MakeAddList_OrgTrack(tomMatch10Position1); if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.MAKE_INSERT,verifyList,tom_orgTrack,tom_name1,tom_name2,symbolType)

;
              break matchblock;
             } } } } } } } } } } } } } if ( ( tom_is_fun_sym_MakeDecl(tomMatch10Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.Option  tomMatch10Position1NameNumberOrgTrack=tom_get_slot_MakeDecl_OrgTrack(tomMatch10Position1); { tom.engine.adt.tomterm.types.TomList  tom_makeArgsList=tom_get_slot_MakeDecl_Args(tomMatch10Position1); if ( ( tom_is_fun_sym_OriginTracking(tomMatch10Position1NameNumberOrgTrack) ||  false  ) ) { { String  tom_fileName=tom_get_slot_OriginTracking_FileName(tomMatch10Position1NameNumberOrgTrack); { int  tom_line=tom_get_slot_OriginTracking_Line(tomMatch10Position1NameNumberOrgTrack); { tom.engine.adt.tomoption.types.Option  tom_og=tomMatch10Position1NameNumberOrgTrack; if ( true ) {


              if (!foundOpMake) {
                foundOpMake = true;
                verifyMakeDeclArgs(tom_makeArgsList,domainLength,tom_og,symbolType);
              } else {
                messageError(tom_fileName, tom_line,
                             TomMessage.macroFunctionRepeated,
                             new Object[]{TomSyntaxChecker.MAKE});
              }
              break matchblock;
             } } } } } } } } } }

        }
       } } } }tomMatch9Position1List1=tomMatch9Position1Save2; } }tomMatch9Position1End1=tom_get_tail_concOption_OptionList(tomMatch9Position1End1); } }tomMatch9Position1List1=tomMatch9Position1Begin1; } } } } } } } }

    if(!verifyList.isEmpty()) {
      messageMissingMacroFunctions(symbolType, verifyList);
    }
  }  //verifySymbolMacroFunctions

  private  void verifyMakeDeclArgs(TomList argsList, int domainLength, Option orgTrack, String symbolType){
      // we test the necessity to use different names for each variable-parameter.
    int nbArgs = 0;
    ArrayList listVar = new ArrayList();
     if (tom_is_sort_TomList(argsList)) { { tom.engine.adt.tomterm.types.TomList  tomMatch11Position1=(( tom.engine.adt.tomterm.types.TomList )argsList); if ( ( tom_is_fun_sym_concTomTerm(tomMatch11Position1) ||  false  ) ) { {int tomMatch11Position1Index1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch11Position1List1=tomMatch11Position1; { tom.engine.adt.tomterm.types.TomList  tomMatch11Position1Begin1=tomMatch11Position1List1; { tom.engine.adt.tomterm.types.TomList  tomMatch11Position1End1=tomMatch11Position1List1; { while (!(tom_is_empty_concTomTerm_TomList(tomMatch11Position1End1))) {tomMatch11Position1List1=tomMatch11Position1End1; { { tom.engine.adt.tomterm.types.TomList  tomMatch11Position1Save2=tomMatch11Position1List1; { { tom.engine.adt.tomterm.types.TomTerm  tomMatch11Position1Position2=tom_get_head_concTomTerm_TomList(tomMatch11Position1List1);tomMatch11Position1Index1=tomMatch11Position1Index1 + 1;tomMatch11Position1List1=tom_get_tail_concTomTerm_TomList(tomMatch11Position1List1); if ( ( tom_is_fun_sym_Variable(tomMatch11Position1Position2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch11Position1Position2NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch11Position1Position2); if ( ( tom_is_fun_sym_Name(tomMatch11Position1Position2NameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch11Position1Position2NameNumberAstName); if ( true ) {
 // for each Macro variable
        if(listVar.contains(tom_name)) {
          messageError(orgTrack.getFileName(),orgTrack.getLine(),
                       TomMessage.nonLinearMacroFunction,
                       new Object[]{TomSyntaxChecker.MAKE, (tom_name)});
        } else {
          listVar.add(tom_name);
        }
        nbArgs++;
       } } } } } }tomMatch11Position1List1=tomMatch11Position1Save2; } }tomMatch11Position1End1=tom_get_tail_concTomTerm_TomList(tomMatch11Position1End1); } }tomMatch11Position1List1=tomMatch11Position1Begin1; } } } } } } } }

    if(nbArgs != domainLength) {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.badMakeDefinition,
                   new Object[]{new Integer(nbArgs), new Integer(domainLength)});
    }
  } //verifyMakeDeclArgs

  private  void verifySymbolPairNameDeclList(PairNameDeclList pairNameDeclList, String symbolType) {
      // we test the existence of 2 same slot names
    ArrayList listSlot = new ArrayList();
     if (tom_is_sort_PairNameDeclList(pairNameDeclList)) { { tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch12Position1=(( tom.engine.adt.tomslot.types.PairNameDeclList )pairNameDeclList); if ( ( tom_is_fun_sym_concPairNameDecl(tomMatch12Position1) ||  false  ) ) { {int tomMatch12Position1Index1=0; { tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch12Position1List1=tomMatch12Position1; { tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch12Position1Begin1=tomMatch12Position1List1; { tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch12Position1End1=tomMatch12Position1List1; { while (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tomMatch12Position1End1))) {tomMatch12Position1List1=tomMatch12Position1End1; { { tom.engine.adt.tomslot.types.PairNameDeclList  tomMatch12Position1Save2=tomMatch12Position1List1; { { tom.engine.adt.tomslot.types.PairNameDecl  tomMatch12Position1Position2=tom_get_head_concPairNameDecl_PairNameDeclList(tomMatch12Position1List1);tomMatch12Position1Index1=tomMatch12Position1Index1 + 1;tomMatch12Position1List1=tom_get_tail_concPairNameDecl_PairNameDeclList(tomMatch12Position1List1); if ( ( tom_is_fun_sym_PairNameDecl(tomMatch12Position1Position2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch12Position1Position2NameNumberSlotName=tom_get_slot_PairNameDecl_SlotName(tomMatch12Position1Position2); if ( ( tom_is_fun_sym_Name(tomMatch12Position1Position2NameNumberSlotName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch12Position1Position2NameNumberSlotName); if ( true ) {
 // for each Slot
        if(listSlot.contains(tom_name)) {
            //TODO
            //messageWarningTwoSameSlotDeclError(name, orgTrack, symbolType);
        } else {
          listSlot.add(tom_name);
        }
       } } } } } }tomMatch12Position1List1=tomMatch12Position1Save2; } }tomMatch12Position1End1=tom_get_tail_concPairNameDecl_PairNameDeclList(tomMatch12Position1End1); } }tomMatch12Position1List1=tomMatch12Position1Begin1; } } } } } } } }

  } //verifySymbolPairNameDeclList

  private  void messageMissingMacroFunctions(String symbolType, ArrayList list) {
    StringBuffer listOfMissingMacros = new StringBuffer();
    for(int i=0;i<list.size();i++) {
      listOfMissingMacros.append(list.get(i) + ",  ");
    }
    String stringListOfMissingMacros = listOfMissingMacros.substring(0, listOfMissingMacros.length()-3);
    messageError(currentTomStructureOrgTrack.getFileName(),
        currentTomStructureOrgTrack.getLine(),
                 TomMessage.missingMacroFunctions,
                 new Object[]{stringListOfMissingMacros});
  } //messageMissingMacroFunctions

  //////////////////////////////// /
  // MATCH VERIFICATION CONCERNS ///
  //////////////////////////////////

  /*
   * Given a MatchConstruct's subject list and pattern-action list
   */
  private void verifyMatch(TomList subjectList, PatternInstructionList patternInstructionList, OptionList option) {
    currentTomStructureOrgTrack = findOriginTracking(option);
    ArrayList typeMatchArgs = new ArrayList();
    ArrayList subjectMatchArgs = new ArrayList();
    int nbExpectedArgs = 0;
    // From the subjects list(match definition), we test each used type and keep them in memory
    while(!subjectList.isEmptyconcTomTerm()) {
      TomTerm subject = subjectList.getHeadconcTomTerm();
      // for each Match args
       if (tom_is_sort_TomTerm(subject)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch13Position1=(( tom.engine.adt.tomterm.types.TomTerm )subject); if ( ( tom_is_fun_sym_Variable(tomMatch13Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch13Position1NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch13Position1); { tom.engine.adt.tomtype.types.TomType  tomMatch13Position1NameNumberAstType=tom_get_slot_Variable_AstType(tomMatch13Position1); if ( ( tom_is_fun_sym_Name(tomMatch13Position1NameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch13Position1NameNumberAstName); if ( ( tom_is_fun_sym_TomTypeAlone(tomMatch13Position1NameNumberAstType) ||  false  ) ) { { String  tom_type=tom_get_slot_TomTypeAlone_String(tomMatch13Position1NameNumberAstType); { tom.engine.adt.tomtype.types.TomType  tom_tomType=tomMatch13Position1NameNumberAstType; if ( true ) {

	  nbExpectedArgs++;
	  subjectMatchArgs.add(tom_name);
          if(tom_type.equals("unknown type")) {
            typeMatchArgs.add(null);
          } else if(testTypeExistence(tom_type)) {
            typeMatchArgs.add(tom_tomType);
          } else {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.unknownMatchArgumentTypeInSignature,
                new Object[]{tom_name, (tom_type)});
            typeMatchArgs.add(null);
          }
         } } } } } } } } } if ( ( tom_is_fun_sym_TermAppl(tomMatch13Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1NameNumberNameList=tom_get_slot_TermAppl_NameList(tomMatch13Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch13Position1NameNumberNameList) ||  false  ) ) { {int tomMatch13Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1NameNumberNameListList1=tomMatch13Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch13Position1NameNumberNameListSave1=tomMatch13Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch13Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch13Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch13Position1NameNumberNameListList1);tomMatch13Position1NameNumberNameListIndex1=tomMatch13Position1NameNumberNameListIndex1 + 1;tomMatch13Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch13Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch13Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch13Position1NameNumberNameListPosition1); if (tom_is_empty_concTomName_TomNameList(tomMatch13Position1NameNumberNameListList1)) { { tom.engine.adt.tomterm.types.TomTerm  tom_term=tomMatch13Position1; if ( true ) {


	  nbExpectedArgs++;
	  subjectMatchArgs.add(tom_name);
	  TomSymbol symbol = getSymbolFromName(tom_name);
	  if(symbol!=null) {
	    TomType type = getSymbolCodomain(symbol);
	    String typeName = getTomType(type);
	    if(!testTypeExistence(typeName)) {
	      messageError(currentTomStructureOrgTrack.getFileName(),
		  currentTomStructureOrgTrack.getLine(),
		  TomMessage.unknownMatchArgumentTypeInSignature,
		  new Object[]{tom_name, typeName});
	    }
	    typeMatchArgs.add(type);
            validateTerm(tom_term, type, false, true, true);
	  } else {
	    typeMatchArgs.add(null);
	  }
         } } } } } } }tomMatch13Position1NameNumberNameListList1=tomMatch13Position1NameNumberNameListSave1; } } } } } } } } }

      subjectList = subjectList.getTailconcTomTerm();
    }

    /*
     * if a type is not specified in the subjectList
     * we look for a type in a column and we update typeMatchArgs
     */
    for(int i=0 ; i<typeMatchArgs.size() ; i++) {
      //System.out.println("i = " + i);
block: {
	 if(typeMatchArgs.get(i) == null) {
	    if (tom_is_sort_PatternInstructionList(patternInstructionList)) { { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch14Position1=(( tom.engine.adt.tomterm.types.PatternInstructionList )patternInstructionList); if ( ( tom_is_fun_sym_concPatternInstruction(tomMatch14Position1) ||  false  ) ) { {int tomMatch14Position1Index1=0; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch14Position1List1=tomMatch14Position1; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch14Position1Begin1=tomMatch14Position1List1; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch14Position1End1=tomMatch14Position1List1; { while (!(tom_is_empty_concPatternInstruction_PatternInstructionList(tomMatch14Position1End1))) {tomMatch14Position1List1=tomMatch14Position1End1; { { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch14Position1Save2=tomMatch14Position1List1; { { tom.engine.adt.tomterm.types.PatternInstruction  tomMatch14Position1Position2=tom_get_head_concPatternInstruction_PatternInstructionList(tomMatch14Position1List1);tomMatch14Position1Index1=tomMatch14Position1Index1 + 1;tomMatch14Position1List1=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch14Position1List1); if ( ( tom_is_fun_sym_PatternInstruction(tomMatch14Position1Position2) ||  false  ) ) { { tom.engine.adt.tomterm.types.Pattern  tomMatch14Position1Position2NameNumberPattern=tom_get_slot_PatternInstruction_Pattern(tomMatch14Position1Position2); if ( ( tom_is_fun_sym_Pattern(tomMatch14Position1Position2NameNumberPattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tomMatch14Position1Position2NameNumberPatternNameNumberTomList=tom_get_slot_Pattern_TomList(tomMatch14Position1Position2NameNumberPattern); if ( ( tom_is_fun_sym_concTomTerm(tomMatch14Position1Position2NameNumberPatternNameNumberTomList) ||  false  ) ) { {int tomMatch14Position1Position2NameNumberPatternNameNumberTomListIndex1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1=tomMatch14Position1Position2NameNumberPatternNameNumberTomList; { tom.engine.adt.tomterm.types.TomList  tomMatch14Position1Position2NameNumberPatternNameNumberTomListBegin1=tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1; { tom.engine.adt.tomterm.types.TomList  tomMatch14Position1Position2NameNumberPatternNameNumberTomListEnd1=tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1; { while (!(tom_is_empty_concTomTerm_TomList(tomMatch14Position1Position2NameNumberPatternNameNumberTomListEnd1))) {tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1=tomMatch14Position1Position2NameNumberPatternNameNumberTomListEnd1; { { tom.engine.adt.tomterm.types.TomList  tom_X=tom_get_slice_concTomTerm(tomMatch14Position1Position2NameNumberPatternNameNumberTomListBegin1,tomMatch14Position1Position2NameNumberPatternNameNumberTomListEnd1); { tom.engine.adt.tomterm.types.TomList  tomMatch14Position1Position2NameNumberPatternNameNumberTomListSave2=tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1; { { tom.engine.adt.tomterm.types.TomTerm  tom_tmpSubject=tom_get_head_concTomTerm_TomList(tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1);tomMatch14Position1Position2NameNumberPatternNameNumberTomListIndex1=tomMatch14Position1Position2NameNumberPatternNameNumberTomListIndex1 + 1;tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1=tom_get_tail_concTomTerm_TomList(tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1); if ( true ) {

	       TomTerm subject = tom_tmpSubject;
	        if (tom_is_sort_TomTerm(subject)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch15Position1=(( tom.engine.adt.tomterm.types.TomTerm )subject); if ( ( tom_is_fun_sym_AntiTerm(tomMatch15Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_p=tom_get_slot_AntiTerm_TomTerm(tomMatch15Position1); if ( true ) {
 subject = tom_p;  } } } } } if (tom_is_sort_TomTerm(subject)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch16Position1=(( tom.engine.adt.tomterm.types.TomTerm )subject); {boolean tomNameNumberboolMatch16Position1= false ; { tom.engine.adt.tomname.types.TomNameList  tomMatch16Position1NameNumberNameList= null ; if (tom_is_fun_sym_TermAppl(tomMatch16Position1)) {tomNameNumberboolMatch16Position1= true ;tomMatch16Position1NameNumberNameList=tom_get_slot_TermAppl_NameList(tomMatch16Position1); } else { if (tom_is_fun_sym_RecordAppl(tomMatch16Position1)) {tomNameNumberboolMatch16Position1= true ;tomMatch16Position1NameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch16Position1); } else { if (tom_is_fun_sym_XMLAppl(tomMatch16Position1)) {tomNameNumberboolMatch16Position1= true ;tomMatch16Position1NameNumberNameList=tom_get_slot_XMLAppl_NameList(tomMatch16Position1); } } } if (tomNameNumberboolMatch16Position1) { if ( ( tom_is_fun_sym_concTomName(tomMatch16Position1NameNumberNameList) ||  false  ) ) { {int tomMatch16Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch16Position1NameNumberNameListList1=tomMatch16Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch16Position1NameNumberNameListSave1=tomMatch16Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch16Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch16Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch16Position1NameNumberNameListList1);tomMatch16Position1NameNumberNameListIndex1=tomMatch16Position1NameNumberNameListIndex1 + 1;tomMatch16Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch16Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch16Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch16Position1NameNumberNameListPosition1); if ( true ) {



		   //System.out.println("X.length = " + `X*.length());
		   if(tom_X.length() == i) {
		     TomSymbol symbol = null;
		     if(subject.isXMLAppl()) {
		       symbol = getSymbolFromName(Constants.ELEMENT_NODE);
		     } else {
		       symbol = getSymbolFromName(tom_name);
		     }
		     //System.out.println("name = " + `name);
		     if(symbol!=null) {
		       TomType type = getSymbolCodomain(symbol);
		       //System.out.println("type = " + type);
		       typeMatchArgs.set(i,type);
		       String typeName = getTomType(type);
		       if(!testTypeExistence(typeName)) {
			 messageError(currentTomStructureOrgTrack.getFileName(),
			     currentTomStructureOrgTrack.getLine(),
			     TomMessage.unknownMatchArgumentTypeInSignature,
			     new Object[]{tom_name, typeName});
		       }

		       break block;
		     }
		   }
		  } } } } }tomMatch16Position1NameNumberNameListList1=tomMatch16Position1NameNumberNameListSave1; } } } } } } } } } }

	      } }tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1=tomMatch14Position1Position2NameNumberPatternNameNumberTomListSave2; } } }tomMatch14Position1Position2NameNumberPatternNameNumberTomListEnd1=tom_get_tail_concTomTerm_TomList(tomMatch14Position1Position2NameNumberPatternNameNumberTomListEnd1); } }tomMatch14Position1Position2NameNumberPatternNameNumberTomListList1=tomMatch14Position1Position2NameNumberPatternNameNumberTomListBegin1; } } } } } } } } } } }tomMatch14Position1List1=tomMatch14Position1Save2; } }tomMatch14Position1End1=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch14Position1End1); } }tomMatch14Position1List1=tomMatch14Position1Begin1; } } } } } } } }

	 }
       }
       if(typeMatchArgs.get(i) == null) {
	 messageError(currentTomStructureOrgTrack.getFileName(),
	     currentTomStructureOrgTrack.getLine(),
	     TomMessage.cannotGuessMatchType,
	     new Object[]{subjectMatchArgs.get(i)});
       }
    }

    // we now compare pattern to its definition
     if (tom_is_sort_PatternInstructionList(patternInstructionList)) { { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch17Position1=(( tom.engine.adt.tomterm.types.PatternInstructionList )patternInstructionList); if ( ( tom_is_fun_sym_concPatternInstruction(tomMatch17Position1) ||  false  ) ) { {int tomMatch17Position1Index1=0; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch17Position1List1=tomMatch17Position1; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch17Position1Begin1=tomMatch17Position1List1; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch17Position1End1=tomMatch17Position1List1; { while (!(tom_is_empty_concPatternInstruction_PatternInstructionList(tomMatch17Position1End1))) {tomMatch17Position1List1=tomMatch17Position1End1; { { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch17Position1Save2=tomMatch17Position1List1; { { tom.engine.adt.tomterm.types.PatternInstruction  tomMatch17Position1Position2=tom_get_head_concPatternInstruction_PatternInstructionList(tomMatch17Position1List1);tomMatch17Position1Index1=tomMatch17Position1Index1 + 1;tomMatch17Position1List1=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch17Position1List1); if ( ( tom_is_fun_sym_PatternInstruction(tomMatch17Position1Position2) ||  false  ) ) { { tom.engine.adt.tomterm.types.Pattern  tomMatch17Position1Position2NameNumberPattern=tom_get_slot_PatternInstruction_Pattern(tomMatch17Position1Position2); if ( ( tom_is_fun_sym_Pattern(tomMatch17Position1Position2NameNumberPattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_terms=tom_get_slot_Pattern_TomList(tomMatch17Position1Position2NameNumberPattern); { tom.engine.adt.tomterm.types.TomList  tom_guards=tom_get_slot_Pattern_Guards(tomMatch17Position1Position2NameNumberPattern); if ( true ) {

        // control each pattern vs the match definition
        verifyMatchPattern(tom_terms,typeMatchArgs,nbExpectedArgs);
        verifyWhenPattern(tom_guards);
       } } } } } } }tomMatch17Position1List1=tomMatch17Position1Save2; } }tomMatch17Position1End1=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch17Position1End1); } }tomMatch17Position1List1=tomMatch17Position1Begin1; } } } } } } } }

  }

  // each patternList shall have the expected length and each term shall be valid
  private  void verifyMatchPattern(TomList termList, ArrayList typeMatchArgs, int nbExpectedArgs) {
    int nbFoundArgs = termList.length();
    if(nbFoundArgs != nbExpectedArgs) {
      OptionList og = termList.getHeadconcTomTerm().getOption();
      messageError(findOriginTrackingFileName(og),findOriginTrackingLine(og),
                   TomMessage.badMatchNumberArgument,
                   new Object[]{new Integer(nbExpectedArgs), new Integer(nbFoundArgs)});
      // we cannot continue because we will use the fact that each element of the pattern
      // has the expected type declared in the Match definition
      return ;
    }

    TomType expectedType;
    int counter = 0;
     if (tom_is_sort_TomList(termList)) { { tom.engine.adt.tomterm.types.TomList  tomMatch18Position1=(( tom.engine.adt.tomterm.types.TomList )termList); if ( ( tom_is_fun_sym_concTomTerm(tomMatch18Position1) ||  false  ) ) { {int tomMatch18Position1Index1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch18Position1List1=tomMatch18Position1; { tom.engine.adt.tomterm.types.TomList  tomMatch18Position1Begin1=tomMatch18Position1List1; { tom.engine.adt.tomterm.types.TomList  tomMatch18Position1End1=tomMatch18Position1List1; { while (!(tom_is_empty_concTomTerm_TomList(tomMatch18Position1End1))) {tomMatch18Position1List1=tomMatch18Position1End1; { { tom.engine.adt.tomterm.types.TomList  tomMatch18Position1Save2=tomMatch18Position1List1; { { tom.engine.adt.tomterm.types.TomTerm  tom_term=tom_get_head_concTomTerm_TomList(tomMatch18Position1List1);tomMatch18Position1Index1=tomMatch18Position1Index1 + 1;tomMatch18Position1List1=tom_get_tail_concTomTerm_TomList(tomMatch18Position1List1); if ( true ) {
 // no term can be a  Var* nor _*: not allowed as top leftmost symbol
        TermDescription termDesc = analyseTerm(tom_term);
        if(termDesc.getTermClass() == UNAMED_VARIABLE_STAR || termDesc.getTermClass() == VARIABLE_STAR) {
          messageError(termDesc.getFileName(),termDesc.getLine(),
                       TomMessage.incorrectVariableStarInMatch,
                       new Object[]{termDesc.getName()});
        } else {    // Analyse the term if expectedType != null
          expectedType = (TomType)typeMatchArgs.get(counter);
          if (expectedType != null) {
            // the type is known and found in the match signature
            validateTerm(tom_term, expectedType, false, true, false);
          }
        }
        counter++;
       } }tomMatch18Position1List1=tomMatch18Position1Save2; } }tomMatch18Position1End1=tom_get_tail_concTomTerm_TomList(tomMatch18Position1End1); } }tomMatch18Position1List1=tomMatch18Position1Begin1; } } } } } } } }

  }

  // each term shall be valid
  private  void verifyWhenPattern(TomList termList) {
     if (tom_is_sort_TomList(termList)) { { tom.engine.adt.tomterm.types.TomList  tomMatch19Position1=(( tom.engine.adt.tomterm.types.TomList )termList); if ( ( tom_is_fun_sym_concTomTerm(tomMatch19Position1) ||  false  ) ) { {int tomMatch19Position1Index1=0; { tom.engine.adt.tomterm.types.TomList  tomMatch19Position1List1=tomMatch19Position1; { tom.engine.adt.tomterm.types.TomList  tomMatch19Position1Begin1=tomMatch19Position1List1; { tom.engine.adt.tomterm.types.TomList  tomMatch19Position1End1=tomMatch19Position1List1; { while (!(tom_is_empty_concTomTerm_TomList(tomMatch19Position1End1))) {tomMatch19Position1List1=tomMatch19Position1End1; { { tom.engine.adt.tomterm.types.TomList  tomMatch19Position1Save2=tomMatch19Position1List1; { { tom.engine.adt.tomterm.types.TomTerm  tom_term=tom_get_head_concTomTerm_TomList(tomMatch19Position1List1);tomMatch19Position1Index1=tomMatch19Position1Index1 + 1;tomMatch19Position1List1=tom_get_tail_concTomTerm_TomList(tomMatch19Position1List1); if ( true ) {

        // the type is boolean, no variablestar, toplevel and permissive
        validateTerm(tom_term,tom_make_TomTypeAlone("boolean") ,false,true,true);
       } }tomMatch19Position1List1=tomMatch19Position1Save2; } }tomMatch19Position1End1=tom_get_tail_concTomTerm_TomList(tomMatch19Position1End1); } }tomMatch19Position1List1=tomMatch19Position1Begin1; } } } } } } } }

  }

  /////////////////////////////////
  //STRATEGY VERIFICATION CONCERNS /
  /////////////////////////////////
  private  void verifyStrategy(TomVisitList visitList){
    while(!visitList.isEmptyconcTomVisit()) {
      TomVisit visit = visitList.getHeadconcTomVisit();
      verifyVisit(visit);
      // next visit
      visitList = visitList.getTailconcTomVisit();
    }
  }

  private  void verifyVisit(TomVisit visit){
     if (tom_is_sort_TomVisit(visit)) { { tom.engine.adt.tomsignature.types.TomVisit  tomMatch20Position1=(( tom.engine.adt.tomsignature.types.TomVisit )visit); if ( ( tom_is_fun_sym_VisitTerm(tomMatch20Position1) ||  false  ) ) { { tom.engine.adt.tomtype.types.TomType  tom_type=tom_get_slot_VisitTerm_VNode(tomMatch20Position1); { tom.engine.adt.tomterm.types.PatternInstructionList  tom_patternInstructionList=tom_get_slot_VisitTerm_AstPatternInstructionList(tomMatch20Position1); if ( true ) {

        ArrayList typeMatchArgs = new ArrayList();
        typeMatchArgs.add(tom_type);
        // we now compare pattern to its definition
         if (tom_is_sort_PatternInstructionList(tom_patternInstructionList)) { { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch21Position1=(( tom.engine.adt.tomterm.types.PatternInstructionList )tom_patternInstructionList); if ( ( tom_is_fun_sym_concPatternInstruction(tomMatch21Position1) ||  false  ) ) { {int tomMatch21Position1Index1=0; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch21Position1List1=tomMatch21Position1; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch21Position1Begin1=tomMatch21Position1List1; { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch21Position1End1=tomMatch21Position1List1; { while (!(tom_is_empty_concPatternInstruction_PatternInstructionList(tomMatch21Position1End1))) {tomMatch21Position1List1=tomMatch21Position1End1; { { tom.engine.adt.tomterm.types.PatternInstructionList  tomMatch21Position1Save2=tomMatch21Position1List1; { { tom.engine.adt.tomterm.types.PatternInstruction  tomMatch21Position1Position2=tom_get_head_concPatternInstruction_PatternInstructionList(tomMatch21Position1List1);tomMatch21Position1Index1=tomMatch21Position1Index1 + 1;tomMatch21Position1List1=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch21Position1List1); if ( ( tom_is_fun_sym_PatternInstruction(tomMatch21Position1Position2) ||  false  ) ) { { tom.engine.adt.tomterm.types.Pattern  tomMatch21Position1Position2NameNumberPattern=tom_get_slot_PatternInstruction_Pattern(tomMatch21Position1Position2); if ( ( tom_is_fun_sym_Pattern(tomMatch21Position1Position2NameNumberPattern) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_terms=tom_get_slot_Pattern_TomList(tomMatch21Position1Position2NameNumberPattern); { tom.engine.adt.tomterm.types.TomList  tom_guards=tom_get_slot_Pattern_Guards(tomMatch21Position1Position2NameNumberPattern); if ( true ) {

            // control each pattern vs the match definition
            //always 1 expected argument in visit
            verifyMatchPattern(tom_terms,typeMatchArgs,1);
            verifyWhenPattern(tom_guards);
           } } } } } } }tomMatch21Position1List1=tomMatch21Position1Save2; } }tomMatch21Position1End1=tom_get_tail_concPatternInstruction_PatternInstructionList(tomMatch21Position1End1); } }tomMatch21Position1List1=tomMatch21Position1Begin1; } } } } } } } }

       } } } } } }

  }

  /////////////////////////////////
  // RULE VERIFICATION CONCERNS ///
  /////////////////////////////////
  private  void verifyRule(TomRuleList ruleList, OptionList optionList) {
    int ruleNumber = 0;
    currentTomStructureOrgTrack = findOriginTracking(optionList);
    String headSymbolName = "Unknown return type";
     if (tom_is_sort_TomRuleList(ruleList)) { { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch22Position1=(( tom.engine.adt.tomsignature.types.TomRuleList )ruleList);b1: { if ( ( tom_is_fun_sym_concTomRule(tomMatch22Position1) ||  false  ) ) { {int tomMatch22Position1Index1=0; { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch22Position1List1=tomMatch22Position1; { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch22Position1Begin1=tomMatch22Position1List1; { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch22Position1End1=tomMatch22Position1List1; { while (!(tom_is_empty_concTomRule_TomRuleList(tomMatch22Position1End1))) {tomMatch22Position1List1=tomMatch22Position1End1; { { tom.engine.adt.tomsignature.types.TomRuleList  tomMatch22Position1Save2=tomMatch22Position1List1; { { tom.engine.adt.tomsignature.types.TomRule  tomMatch22Position1Position2=tom_get_head_concTomRule_TomRuleList(tomMatch22Position1List1);tomMatch22Position1Index1=tomMatch22Position1Index1 + 1;tomMatch22Position1List1=tom_get_tail_concTomRule_TomRuleList(tomMatch22Position1List1); if ( ( tom_is_fun_sym_RewriteRule(tomMatch22Position1Position2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch22Position1Position2NameNumberLhs=tom_get_slot_RewriteRule_Lhs(tomMatch22Position1Position2); { tom.engine.adt.tomterm.types.TomTerm  tomMatch22Position1Position2NameNumberRhs=tom_get_slot_RewriteRule_Rhs(tomMatch22Position1Position2); if ( ( tom_is_fun_sym_Term(tomMatch22Position1Position2NameNumberLhs) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_lhs=tom_get_slot_Term_TomTerm(tomMatch22Position1Position2NameNumberLhs); if ( ( tom_is_fun_sym_Term(tomMatch22Position1Position2NameNumberRhs) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomTerm  tom_rhs=tom_get_slot_Term_TomTerm(tomMatch22Position1Position2NameNumberRhs); if ( true ) {

        headSymbolName = verifyLhsRuleAndConstructorEgality(tom_lhs,headSymbolName,ruleNumber);
        if( headSymbolName == null ) { return; }
        verifyRhsRuleStructure(tom_rhs,headSymbolName);
        ruleNumber++;
       } } } } } } } } }tomMatch22Position1List1=tomMatch22Position1Save2; } }tomMatch22Position1End1=tom_get_tail_concTomRule_TomRuleList(tomMatch22Position1End1); } }tomMatch22Position1List1=tomMatch22Position1Begin1; } } } } } }} } }

  }

  private  String verifyLhsRuleAndConstructorEgality(TomTerm lhs, String  headSymbolName, int ruleNumber) {
    String currentHeadSymbolName;
    TomType lhsType  = null;
    TomSymbol symbol = null;
      // We support only TermAppl and RecordAppl
    int termClass = getClass(lhs);
    if(  termClass != TERM_APPL && termClass != RECORD_APPL) {
      String termName;
      if (termClass == XML_APPL) {
        termName = "XML construct "+getName(lhs);
      } else if (termClass ==  APPL_DISJUNCTION || termClass == RECORD_APPL_DISJUNCTION) {
        termName = "Disjunction";
      } else {
        termName = getName(lhs);
      }
      messageError(findOriginTrackingFileName(lhs.getOption()),
          findOriginTrackingLine(lhs.getOption()),
          TomMessage.incorrectRuleLHSClass, new Object[]{termName});
      return null;
    }

    currentHeadSymbolName = getName(lhs);
    if(ruleNumber == 0) {
      // update the root of lhs: it becomes a defined symbol
      symbol = ASTFactory.updateDefinedSymbol(symbolTable(),lhs);
      if( symbol == null ) {
        messageError(findOriginTrackingFileName(lhs.getOption()),
            findOriginTrackingLine(lhs.getOption()),
            TomMessage.unknownSymbol,
            new Object[]{currentHeadSymbolName});
        // We can not continue anymore
        return null;
      }
      //ensure we are able to construct this symbol
      if ( !findMakeDecl(symbol.getOption())) {
        messageError(findOriginTrackingFileName(lhs.getOption()),
            findOriginTrackingLine(lhs.getOption()),
                     TomMessage.noRuleMakeDecl,
                     new Object[]{currentHeadSymbolName});
      }

      if(alreadyStudiedRule.contains(currentHeadSymbolName)) {
        messageError(currentTomStructureOrgTrack.getFileName(),
          currentTomStructureOrgTrack.getLine(),
                     TomMessage.multipleRuleDefinition,
                     new Object[]{currentHeadSymbolName});
        return null;
      } else {
        alreadyStudiedRule.add(currentHeadSymbolName);
      }
    } else { //  ruleNumber > 0
      // Test constructor equality
      String newName = getName(lhs);
      if (!headSymbolName.equals(currentHeadSymbolName)) {
        messageError(findOriginTrackingFileName(lhs.getOption()),
          findOriginTrackingLine(lhs.getOption()),
                     TomMessage.differentRuleConstructor,
                     new Object[]{headSymbolName, currentHeadSymbolName});
      }
    }
    symbol = getSymbolFromName(currentHeadSymbolName);
    lhsType = getSymbolCodomain(symbol);
    // analyse the term
    validateTerm(lhs, lhsType,
        isListOperator(symbol)||isArrayOperator(symbol), true, false);
    return currentHeadSymbolName;
  }

  private static boolean findMakeDecl(OptionList option) {
     if (tom_is_sort_OptionList(option)) { { tom.engine.adt.tomoption.types.OptionList  tomMatch23Position1=(( tom.engine.adt.tomoption.types.OptionList )option); if ( ( tom_is_fun_sym_concOption(tomMatch23Position1) ||  false  ) ) { {int tomMatch23Position1Index1=0; { tom.engine.adt.tomoption.types.OptionList  tomMatch23Position1List1=tomMatch23Position1; { tom.engine.adt.tomoption.types.OptionList  tomMatch23Position1Begin1=tomMatch23Position1List1; { tom.engine.adt.tomoption.types.OptionList  tomMatch23Position1End1=tomMatch23Position1List1; { while (!(tom_is_empty_concOption_OptionList(tomMatch23Position1End1))) {tomMatch23Position1List1=tomMatch23Position1End1; { { tom.engine.adt.tomoption.types.OptionList  tomMatch23Position1Save2=tomMatch23Position1List1; { { tom.engine.adt.tomoption.types.Option  tomMatch23Position1Position2=tom_get_head_concOption_OptionList(tomMatch23Position1List1);tomMatch23Position1Index1=tomMatch23Position1Index1 + 1;tomMatch23Position1List1=tom_get_tail_concOption_OptionList(tomMatch23Position1List1); if ( ( tom_is_fun_sym_DeclarationToOption(tomMatch23Position1Position2) ||  false  ) ) { if ( ( tom_is_fun_sym_MakeDecl(tom_get_slot_DeclarationToOption_AstDeclaration(tomMatch23Position1Position2)) ||  false  ) ) { if ( true ) {

        return true;
       } } } }tomMatch23Position1List1=tomMatch23Position1Save2; } }tomMatch23Position1End1=tom_get_tail_concOption_OptionList(tomMatch23Position1End1); } }tomMatch23Position1List1=tomMatch23Position1Begin1; } } } } } } } }

    return false;
  }

  /**
   * Rhs shall have no underscore, be a var* nor _*, nor a RecordAppl
   */
  private  void verifyRhsRuleStructure(TomTerm rhs, String lhsHeadSymbolName) {
    int termClass = getClass(rhs); 
    if(termClass != TERM_APPL && termClass != VARIABLE) {
      String termName;
      if (termClass == XML_APPL) {
        termName = "XML construct "+getName(rhs);
      } else if (termClass ==  APPL_DISJUNCTION || termClass == RECORD_APPL_DISJUNCTION) {
        termName = "Disjunction";
      } else if (termClass == RECORD_APPL) {
        termName = getName(rhs)+"[...]";
      } else {
        termName = getName(rhs);
      }
      messageError(findOriginTrackingFileName(rhs.getOption()),
          findOriginTrackingLine(rhs.getOption()),
                   TomMessage.incorrectRuleRHSClass, new Object[]{termName});
      return;
    }

    TomSymbol symbol = getSymbolFromName(lhsHeadSymbolName);
    TomType lhsType = getSymbolCodomain(symbol);
    TermDescription termDesc = validateTerm(rhs, lhsType, isListOperator(symbol)||isArrayOperator(symbol), true, true);
    TomType rhsType = termDesc.getType();
    if(termClass == TERM_APPL && rhsType != lhsType) {
        String rhsTypeName;
        if(rhsType.isEmptyType()) {
          rhsTypeName = "No Type Found";
        } else {
          rhsTypeName = rhsType.getString();
			messageError(findOriginTrackingFileName(rhs.getOption()),
					findOriginTrackingLine(rhs.getOption()),
					TomMessage.incorrectRuleRHSType,
					new Object[]{rhsTypeName, lhsType.getString()});
        }
		}
	}

  /**
   * Analyse a term given an expected type and re-enter recursively on children
   */
  public  TermDescription validateTerm(TomTerm term, TomType expectedType, boolean listSymbol, boolean topLevel, boolean permissive) {
    String termName = "emptyName";
    TomType type = null;
    int termClass=-1;
    String fileName = "unknown";
    int decLine=-1;
    Option orgTrack;
    matchblock:{
       if (tom_is_sort_TomTerm(term)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch24Position1=(( tom.engine.adt.tomterm.types.TomTerm )term); if ( ( tom_is_fun_sym_TermAppl(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameList=tom_get_slot_TermAppl_NameList(tomMatch24Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_TermAppl_Option(tomMatch24Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch24Position1NameNumberNameList) ||  false  ) ) { {int tomMatch24Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameListList1=tomMatch24Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameListSave1=tomMatch24Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch24Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch24Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch24Position1NameNumberNameListList1);tomMatch24Position1NameNumberNameListIndex1=tomMatch24Position1NameNumberNameListIndex1 + 1;tomMatch24Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch24Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch24Position1NameNumberNameListPosition1) ||  false  ) ) { if ( ( tom_equal_term_String("", tom_get_slot_Name_String(tomMatch24Position1NameNumberNameListPosition1)) ||  false  ) ) { if (tom_is_empty_concTomName_TomNameList(tomMatch24Position1NameNumberNameListList1)) { { tom.engine.adt.tomterm.types.TomList  tom_args=tom_get_slot_TermAppl_Args(tomMatch24Position1); if ( true ) {

          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = UNAMED_APPL;
            // there shall be only one list symbol with expectedType as Codomain
            // else ensureValidUnamedList returns null
          TomSymbol symbol = ensureValidUnamedList(expectedType, fileName,decLine);
          if(symbol == null) {
            break matchblock;
          } else {
            //there is only one list symbol and its type is the expected one
            // (ensure by ensureValidUnamedList call)
            type = expectedType;
            termName = symbol.getAstName().getString();
              // whatever the arity is, we continue recursively and there is only one element in the Domain
            validateListOperatorArgs(tom_args, symbol.getTypesToType().getDomain().getHeadconcTomType(),permissive);
            if(permissive) { System.out.println("UnamedList but permissive");}
            break matchblock;
          }
         } } } } } } }tomMatch24Position1NameNumberNameListList1=tomMatch24Position1NameNumberNameListSave1; } } } } } } } } if ( ( tom_is_fun_sym_TermAppl(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_TermAppl_Option(tomMatch24Position1); { tom.engine.adt.tomname.types.TomNameList  tom_symbolNameList=tom_get_slot_TermAppl_NameList(tomMatch24Position1); { tom.engine.adt.tomterm.types.TomList  tom_arguments=tom_get_slot_TermAppl_Args(tomMatch24Position1); if ( true ) {


          TomList args = tom_arguments;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = TERM_APPL;

          TomSymbol symbol = ensureValidApplDisjunction(tom_symbolNameList, expectedType, fileName, decLine, permissive, topLevel);

          if(symbol == null) {
            validateTermThrough(term,permissive);
            break matchblock;
          }
            // Type is OK
          type = expectedType;
          TomName headName = tom_symbolNameList.getHeadconcTomName();
          if (headName 
        		  	instanceof AntiName){
        	  headName = ((AntiName)headName).getName();
          }
          termName = headName.getString();
          boolean listOp = (isListOperator(symbol) || isArrayOperator(symbol));
          if(listOp) {
              // whatever the arity is, we continue recursively and there is only one element in the Domain
            validateListOperatorArgs(args, symbol.getTypesToType().getDomain().getHeadconcTomType(),permissive);
          } else {
            // the arity is important also there are different types in Domain
            TomTypeList types = symbol.getTypesToType().getDomain();
            int nbArgs = args.length();
            int nbExpectedArgs = types.length();
            if(nbArgs != nbExpectedArgs) {
              messageError(fileName,decLine, TomMessage.symbolNumberArgument,
                  new Object[]{termName, new Integer(nbExpectedArgs), new Integer(nbArgs)});
              break matchblock;
            }
            while(!args.isEmptyconcTomTerm()) {
                // repeat analyse with associated expected type and control arity
              validateTerm(args.getHeadconcTomTerm(), types.getHeadconcTomType(), listOp/*false*/, false, permissive);
              args = args.getTailconcTomTerm();
              types = types.getTailconcTomType();
            }
          }
          break matchblock;
         } } } } } if ( ( tom_is_fun_sym_RecordAppl(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_RecordAppl_Option(tomMatch24Position1); { tom.engine.adt.tomname.types.TomNameList  tom_symbolNameList=tom_get_slot_RecordAppl_NameList(tomMatch24Position1); { tom.engine.adt.tomslot.types.SlotList  tom_slotList=tom_get_slot_RecordAppl_Slots(tomMatch24Position1); { tom.engine.adt.tomterm.types.TomTerm  tom_rec=tomMatch24Position1; if ( true ) {


          if(permissive) {
            // Record are not allowed in a rhs
            messageError(findOriginTrackingFileName(tom_options),findOriginTrackingLine(tom_options), TomMessage.incorrectRuleRHSClass, new Object[]{getName(tom_rec)+"[...]"});
          }
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = RECORD_APPL;

          TomSymbol symbol = ensureValidRecordDisjunction(tom_symbolNameList, tom_slotList, expectedType, fileName, decLine, true);
          if(symbol == null) {
            break matchblock;
          }

           if (tom_is_sort_TomNameList(tom_symbolNameList)) { { tom.engine.adt.tomname.types.TomNameList  tomMatch25Position1=(( tom.engine.adt.tomname.types.TomNameList )tom_symbolNameList); if ( ( tom_is_fun_sym_concTomName(tomMatch25Position1) ||  false  ) ) { {int tomMatch25Position1Index1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch25Position1List1=tomMatch25Position1; { tom.engine.adt.tomname.types.TomNameList  tomMatch25Position1Begin1=tomMatch25Position1List1; { tom.engine.adt.tomname.types.TomNameList  tomMatch25Position1End1=tomMatch25Position1List1; { while (!(tom_is_empty_concTomName_TomNameList(tomMatch25Position1End1))) {tomMatch25Position1List1=tomMatch25Position1End1; { { tom.engine.adt.tomname.types.TomNameList  tomMatch25Position1Save2=tomMatch25Position1List1; { { tom.engine.adt.tomname.types.TomName  tomMatch25Position1Position2=tom_get_head_concTomName_TomNameList(tomMatch25Position1List1);tomMatch25Position1Index1=tomMatch25Position1Index1 + 1;tomMatch25Position1List1=tom_get_tail_concTomName_TomNameList(tomMatch25Position1List1); if ( ( tom_is_fun_sym_Name(tomMatch25Position1Position2) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch25Position1Position2); if ( true ) {





              verifyRecordStructure(tom_options, tom_name, tom_slotList, fileName,decLine);
             } } } }tomMatch25Position1List1=tomMatch25Position1Save2; } }tomMatch25Position1End1=tom_get_tail_concTomName_TomNameList(tomMatch25Position1End1); } }tomMatch25Position1List1=tomMatch25Position1Begin1; } } } } } } } }


          type = expectedType;
          TomName headName = tom_symbolNameList.getHeadconcTomName();
          if (headName 
        		  	instanceof AntiName){
        	  headName = ((AntiName)headName).getName();
          }
          termName = headName.getString();
          break matchblock;
         } } } } } } if ( ( tom_is_fun_sym_XMLAppl(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameList=tom_get_slot_XMLAppl_NameList(tomMatch24Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_XMLAppl_Option(tomMatch24Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch24Position1NameNumberNameList) ||  false  ) ) { {int tomMatch24Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameListList1=tomMatch24Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameListBegin1=tomMatch24Position1NameNumberNameListList1; { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameListEnd1=tomMatch24Position1NameNumberNameListList1; { while (!(tom_is_empty_concTomName_TomNameList(tomMatch24Position1NameNumberNameListEnd1))) {tomMatch24Position1NameNumberNameListList1=tomMatch24Position1NameNumberNameListEnd1; { { tom.engine.adt.tomname.types.TomNameList  tomMatch24Position1NameNumberNameListSave2=tomMatch24Position1NameNumberNameListList1; { { tom.engine.adt.tomname.types.TomName  tomMatch24Position1NameNumberNameListPosition2=tom_get_head_concTomName_TomNameList(tomMatch24Position1NameNumberNameListList1);tomMatch24Position1NameNumberNameListIndex1=tomMatch24Position1NameNumberNameListIndex1 + 1;tomMatch24Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch24Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch24Position1NameNumberNameListPosition2) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_childList=tom_get_slot_XMLAppl_ChildList(tomMatch24Position1); if ( true ) {


            // TODO: can we do it
            // ensureValidDisjunction(symbolNameList); ??????????
          termClass = XML_APPL;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = getSymbolCodomain(getSymbolFromName(Constants.ELEMENT_NODE));
          termName = Constants.ELEMENT_NODE;

          TomList args = tom_childList;
          /*
           * we cannot use the following expression
           *   TomType TNodeType = symbolTable().getType(Constants.TNODE);
           * because TNodeType should be a TomTypeAlone and not an expanded type
           */
          TomType TNodeType = getSymbolCodomain(symbolTable().getSymbolFromName(Constants.ELEMENT_NODE));
          //System.out.println("TNodeType = " + TNodeType);
          while(!args.isEmptyconcTomTerm()) {
            // repeat analyse with associated expected type and control arity
            validateTerm(args.getHeadconcTomTerm(), TNodeType, true, false, permissive);
            args = args.getTailconcTomTerm();
          }

          break matchblock;
         } } } }tomMatch24Position1NameNumberNameListList1=tomMatch24Position1NameNumberNameListSave2; } }tomMatch24Position1NameNumberNameListEnd1=tom_get_tail_concTomName_TomNameList(tomMatch24Position1NameNumberNameListEnd1); } }tomMatch24Position1NameNumberNameListList1=tomMatch24Position1NameNumberNameListBegin1; } } } } } } } } } if ( ( tom_is_fun_sym_Variable(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch24Position1NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch24Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_Variable_Option(tomMatch24Position1); if ( ( tom_is_fun_sym_Name(tomMatch24Position1NameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch24Position1NameNumberAstName); if ( true ) {


          termClass = VARIABLE;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = tom_name;
          break matchblock;
         } } } } } } if ( ( tom_is_fun_sym_VariableStar(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch24Position1NameNumberAstName=tom_get_slot_VariableStar_AstName(tomMatch24Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_VariableStar_Option(tomMatch24Position1); if ( ( tom_is_fun_sym_Name(tomMatch24Position1NameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch24Position1NameNumberAstName); if ( true ) {


          termClass = VARIABLE_STAR;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = tom_name+"*";
          if(!listSymbol) {
            messageError(fileName,decLine, TomMessage.invalidVariableStarArgument, new Object[]{termName});
          }
          break matchblock;
         } } } } } } if ( ( tom_is_fun_sym_UnamedVariable(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_UnamedVariable_Option(tomMatch24Position1); if ( true ) {


          termClass = UNAMED_VARIABLE;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = "_";
          if(permissive) {
            messageError(fileName,decLine, TomMessage.incorrectRuleRHSClass, new Object[]{termName});
          }
          break matchblock;
         } } } if ( ( tom_is_fun_sym_UnamedVariableStar(tomMatch24Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_UnamedVariableStar_Option(tomMatch24Position1); if ( true ) {


          termClass = UNAMED_VARIABLE_STAR;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = "_*";
          if(!listSymbol) {
            messageError(fileName,decLine, TomMessage.invalidVariableStarArgument, new Object[]{termName});
          }
          if(permissive) {
            messageError(fileName,decLine, TomMessage.incorrectRuleRHSClass, new Object[]{termName});
          }
          break matchblock;
         } } } } }

      throw new TomRuntimeException("Strange Term "+term);
    }
    return new TermDescription(termClass, termName, fileName,decLine, type);
  }

  private  void validateTermThrough(TomTerm term, boolean permissive) {
     if (tom_is_sort_TomTerm(term)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch26Position1=(( tom.engine.adt.tomterm.types.TomTerm )term); if ( ( tom_is_fun_sym_TermAppl(tomMatch26Position1) ||  false  ) ) { { tom.engine.adt.tomterm.types.TomList  tom_arguments=tom_get_slot_TermAppl_Args(tomMatch26Position1); if ( true ) {

        TomList args = tom_arguments;
        while(!args.isEmptyconcTomTerm()) {
          TomTerm child = args.getHeadconcTomTerm();
          TomSymbol sym = getSymbolFromName(getName(child));
          if(sym != null) {
            validateTerm(child,sym.getTypesToType().getCodomain(),false,false,permissive);
          } else {
            validateTermThrough(child,permissive);
          }
          args = args.getTailconcTomTerm();
        }
       } } } } }

  }

  public TermDescription analyseTerm(TomTerm term) {
    matchblock:{
       if (tom_is_sort_TomTerm(term)) { { tom.engine.adt.tomterm.types.TomTerm  tomMatch27Position1=(( tom.engine.adt.tomterm.types.TomTerm )term); if ( ( tom_is_fun_sym_TermAppl(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameList=tom_get_slot_TermAppl_NameList(tomMatch27Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_TermAppl_Option(tomMatch27Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch27Position1NameNumberNameList) ||  false  ) ) { {int tomMatch27Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListSave1=tomMatch27Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch27Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1);tomMatch27Position1NameNumberNameListIndex1=tomMatch27Position1NameNumberNameListIndex1 + 1;tomMatch27Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch27Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_str=tom_get_slot_Name_String(tomMatch27Position1NameNumberNameListPosition1); if (tom_is_empty_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1)) { if ( true ) {

          if (tom_str.equals("")) {
            return new TermDescription(UNAMED_APPL, tom_str,
                findOriginTrackingFileName(tom_options),
                findOriginTrackingLine(tom_options), 
                null);
              // TODO
          } else {
            return new TermDescription(TERM_APPL, tom_str,
                findOriginTrackingFileName(tom_options),
                findOriginTrackingLine(tom_options),
                getSymbolCodomain(getSymbolFromName(tom_str)));
          }
         } } } } } }tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameListSave1; } } } } } } } } if ( ( tom_is_fun_sym_TermAppl(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameList=tom_get_slot_TermAppl_NameList(tomMatch27Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_TermAppl_Option(tomMatch27Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch27Position1NameNumberNameList) ||  false  ) ) { {int tomMatch27Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListSave1=tomMatch27Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch27Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1);tomMatch27Position1NameNumberNameListIndex1=tomMatch27Position1NameNumberNameListIndex1 + 1;tomMatch27Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch27Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch27Position1NameNumberNameListPosition1); if ( true ) {

          return new TermDescription(APPL_DISJUNCTION, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(tom_name)));
         } } } } }tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameListSave1; } } } } } } } } if ( ( tom_is_fun_sym_RecordAppl(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch27Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_RecordAppl_Option(tomMatch27Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch27Position1NameNumberNameList) ||  false  ) ) { {int tomMatch27Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListSave1=tomMatch27Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch27Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1);tomMatch27Position1NameNumberNameListIndex1=tomMatch27Position1NameNumberNameListIndex1 + 1;tomMatch27Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch27Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch27Position1NameNumberNameListPosition1); if (tom_is_empty_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1)) { if ( true ) {

          return new TermDescription(RECORD_APPL, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(tom_name)));
         } } } } } }tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameListSave1; } } } } } } } } if ( ( tom_is_fun_sym_RecordAppl(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameList=tom_get_slot_RecordAppl_NameList(tomMatch27Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_RecordAppl_Option(tomMatch27Position1); if ( ( tom_is_fun_sym_concTomName(tomMatch27Position1NameNumberNameList) ||  false  ) ) { {int tomMatch27Position1NameNumberNameListIndex1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameList; { tom.engine.adt.tomname.types.TomNameList  tomMatch27Position1NameNumberNameListSave1=tomMatch27Position1NameNumberNameListList1; { if (!(tom_is_empty_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1))) { { tom.engine.adt.tomname.types.TomName  tomMatch27Position1NameNumberNameListPosition1=tom_get_head_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1);tomMatch27Position1NameNumberNameListIndex1=tomMatch27Position1NameNumberNameListIndex1 + 1;tomMatch27Position1NameNumberNameListList1=tom_get_tail_concTomName_TomNameList(tomMatch27Position1NameNumberNameListList1); if ( ( tom_is_fun_sym_Name(tomMatch27Position1NameNumberNameListPosition1) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch27Position1NameNumberNameListPosition1); if ( true ) {

          return new TermDescription(RECORD_APPL_DISJUNCTION,tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(tom_name)));
         } } } } }tomMatch27Position1NameNumberNameListList1=tomMatch27Position1NameNumberNameListSave1; } } } } } } } } if ( ( tom_is_fun_sym_XMLAppl(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_XMLAppl_Option(tomMatch27Position1); if ( true ) {

          return new TermDescription(XML_APPL, Constants.ELEMENT_NODE,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(Constants.ELEMENT_NODE)));
         } } } if ( ( tom_is_fun_sym_Variable(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch27Position1NameNumberAstName=tom_get_slot_Variable_AstName(tomMatch27Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_Variable_Option(tomMatch27Position1); if ( ( tom_is_fun_sym_Name(tomMatch27Position1NameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch27Position1NameNumberAstName); if ( true ) {

          return new TermDescription(VARIABLE, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } } } } if ( ( tom_is_fun_sym_VariableStar(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch27Position1NameNumberAstName=tom_get_slot_VariableStar_AstName(tomMatch27Position1); { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_VariableStar_Option(tomMatch27Position1); if ( ( tom_is_fun_sym_Name(tomMatch27Position1NameNumberAstName) ||  false  ) ) { { String  tom_name=tom_get_slot_Name_String(tomMatch27Position1NameNumberAstName); if ( true ) {

          return new TermDescription(VARIABLE_STAR, tom_name+"*",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } } } } if ( ( tom_is_fun_sym_UnamedVariable(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_UnamedVariable_Option(tomMatch27Position1); if ( true ) {

          return new TermDescription(UNAMED_VARIABLE, "_",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } if ( ( tom_is_fun_sym_UnamedVariableStar(tomMatch27Position1) ||  false  ) ) { { tom.engine.adt.tomoption.types.OptionList  tom_options=tom_get_slot_UnamedVariableStar_Option(tomMatch27Position1); if ( true ) {

          return new TermDescription(UNAMED_VARIABLE_STAR, "_*",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } } }

      throw new TomRuntimeException("Strange Term "+term);
    }
  }

  private  TomSymbol ensureValidUnamedList(TomType expectedType, String fileName,int decLine) {
    TomSymbolList symbolList = symbolTable().getSymbolFromType(expectedType);
    TomSymbolList filteredList = tom_empty_list_concTomSymbol();
     if (tom_is_sort_TomSymbolList(symbolList)) { { tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch28Position1=(( tom.engine.adt.tomsignature.types.TomSymbolList )symbolList); if ( ( tom_is_fun_sym_concTomSymbol(tomMatch28Position1) ||  false  ) ) { {int tomMatch28Position1Index1=0; { tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch28Position1List1=tomMatch28Position1; { tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch28Position1Begin1=tomMatch28Position1List1; { tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch28Position1End1=tomMatch28Position1List1; { while (!(tom_is_empty_concTomSymbol_TomSymbolList(tomMatch28Position1End1))) {tomMatch28Position1List1=tomMatch28Position1End1; { { tom.engine.adt.tomsignature.types.TomSymbolList  tomMatch28Position1Save2=tomMatch28Position1List1; { { tom.engine.adt.tomsignature.types.TomSymbol  tom_symbol=tom_get_head_concTomSymbol_TomSymbolList(tomMatch28Position1List1);tomMatch28Position1Index1=tomMatch28Position1Index1 + 1;tomMatch28Position1List1=tom_get_tail_concTomSymbol_TomSymbolList(tomMatch28Position1List1); if ( true ) {

        if(isArrayOperator(tom_symbol) || isListOperator(tom_symbol)) {
          filteredList = tom_cons_list_concTomSymbol(tom_symbol,tom_append_list_concTomSymbol(filteredList,tom_empty_list_concTomSymbol()));
        }
       } }tomMatch28Position1List1=tomMatch28Position1Save2; } }tomMatch28Position1End1=tom_get_tail_concTomSymbol_TomSymbolList(tomMatch28Position1End1); } }tomMatch28Position1List1=tomMatch28Position1Begin1; } } } } } } } }


    if(filteredList.isEmptyconcTomSymbol()) {
      messageError(fileName,decLine,
                   TomMessage.unknownUnamedList,
                   new Object[]{expectedType.getString()});
      return null;
    } else if(!filteredList.getTailconcTomSymbol().isEmptyconcTomSymbol()) {
      StringBuffer symbolsString = new StringBuffer();
      while(!filteredList.isEmptyconcTomSymbol()) {
        symbolsString .append(" " + filteredList.getHeadconcTomSymbol().getAstName().getString());
        filteredList= filteredList.getTailconcTomSymbol();
      }
      messageError(fileName,decLine,
                   TomMessage.ambigousUnamedList,
                   new Object[]{expectedType.getString(), symbolsString.toString()});
      return null;
    } else {
      return filteredList.getHeadconcTomSymbol();
    }
  }

  private TomSymbol ensureValidApplDisjunction(TomNameList symbolNameList, TomType expectedType, 
      String fileName, int decLine, boolean permissive, boolean topLevel) {

    if(symbolNameList.length()==1) { // Valid but has it a good type?
      String res = symbolNameList.getHeadconcTomName().getString();
      TomSymbol symbol = getSymbolFromName(res);
      if (symbol == null ) {
        // this correspond to a term like 'unknown()' or unknown(s1, s2, ...)
        if(!permissive) {
          messageError(fileName,decLine, TomMessage.unknownSymbol, new Object[]{res});
        } else {
          messageWarning(fileName,decLine, TomMessage.unknownPermissiveSymbol, new Object[]{res});
        }
      } else { //known symbol
        if ( strictType  || !topLevel ) {
          if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomMessage.invalidCodomain, res, fileName,decLine)) {
            return null;
          }
        }
      }
      return symbol;
    } else {
      //  this is a disjunction
      if(permissive) {
	messageError(fileName,decLine, TomMessage.impossiblePermissiveAndDisjunction, new Object[]{});
      }

      TomSymbol symbol = null;
      TomTypeList domainReference = null;
      PairNameDeclList slotReference = null;
      String nameReference = null;
       if (tom_is_sort_TomNameList(symbolNameList)) { { tom.engine.adt.tomname.types.TomNameList  tomMatch29Position1=(( tom.engine.adt.tomname.types.TomNameList )symbolNameList); if ( ( tom_is_fun_sym_concTomName(tomMatch29Position1) ||  false  ) ) { {int tomMatch29Position1Index1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch29Position1List1=tomMatch29Position1; { tom.engine.adt.tomname.types.TomNameList  tomMatch29Position1Begin1=tomMatch29Position1List1; { tom.engine.adt.tomname.types.TomNameList  tomMatch29Position1End1=tomMatch29Position1List1; { while (!(tom_is_empty_concTomName_TomNameList(tomMatch29Position1End1))) {tomMatch29Position1List1=tomMatch29Position1End1; { { tom.engine.adt.tomname.types.TomNameList  tomMatch29Position1Save2=tomMatch29Position1List1; { { tom.engine.adt.tomname.types.TomName  tomMatch29Position1Position2=tom_get_head_concTomName_TomNameList(tomMatch29Position1List1);tomMatch29Position1Index1=tomMatch29Position1Index1 + 1;tomMatch29Position1List1=tom_get_tail_concTomName_TomNameList(tomMatch29Position1List1); if ( ( tom_is_fun_sym_Name(tomMatch29Position1Position2) ||  false  ) ) { { String  tom_dijName=tom_get_slot_Name_String(tomMatch29Position1Position2); if ( true ) {
 // for each SymbolName
	  symbol =  getSymbolFromName(tom_dijName);
	  if (symbol == null) {
	    // In disjunction we can only have known symbols
	    messageError(fileName,decLine, TomMessage.unknownSymbolInDisjunction, new Object[]{(tom_dijName)});
	    return null;
	  }
	  if ( strictType  || !topLevel ) {
	    // ensure codomain is correct
	    if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomMessage.invalidDisjunctionCodomain, tom_dijName, fileName,decLine)) {
	      return null;
	    }
	  }

	  if (domainReference == null) { // save Domain reference
	    domainReference = getSymbolDomain(symbol);
	    slotReference = symbol.getPairNameDeclList();
	    nameReference = tom_dijName;
	  } else {
	    if(getSymbolDomain(symbol) != domainReference) {
	      messageError(fileName,decLine, TomMessage.invalidDisjunctionDomain, new Object[]{nameReference, (tom_dijName) });
	      return null;
	    }
	    if(symbol.getPairNameDeclList() != slotReference) {
	      PairNameDeclList l1 = slotReference;
	      PairNameDeclList l2 = symbol.getPairNameDeclList();
	      while(!l1.isEmptyconcPairNameDecl()) {
		if(l1.getHeadconcPairNameDecl().getSlotName() != l2.getHeadconcPairNameDecl().getSlotName()) {
		  messageError(fileName,decLine, TomMessage.invalidDisjunctionDomain, new Object[]{nameReference, (tom_dijName) });
		  return null;
		}
		l1=l1.getTailconcPairNameDecl();
		l2=l2.getTailconcPairNameDecl();
	      }
	    }
	  }
	 } } } }tomMatch29Position1List1=tomMatch29Position1Save2; } }tomMatch29Position1End1=tom_get_tail_concTomName_TomNameList(tomMatch29Position1End1); } }tomMatch29Position1List1=tomMatch29Position1Begin1; } } } } } } } }

      return symbol;
    }
  }

  private  boolean ensureSymbolCodomain(TomType currentCodomain, TomType expectedType, TomMessage msg, String symbolName, String fileName,int decLine) {
    if(currentCodomain != expectedType) {
      //System.out.println(currentCodomain+"!="+expectedType);
      messageError(fileName,decLine,
                   msg,
                   new Object[]{symbolName, currentCodomain.getString(), expectedType.getString()});
      return false;
    }
    return true;
  }

  private  TomSymbol ensureValidRecordDisjunction(TomNameList symbolNameList, SlotList slotList, 
      TomType expectedType, String fileName, int decLine, boolean topLevel) {
    if(symbolNameList.length()==1) { // Valid but has it a good type?
      String res = symbolNameList.getHeadconcTomName().getString();
      TomSymbol symbol =  getSymbolFromName(res);
      if (symbol == null ) { // this correspond to: unknown[]
          // it is not correct to use Record with unknown symbols
        messageError(fileName,decLine, TomMessage.unknownSymbol, new Object[]{res});
        return null;
      } else { // known symbol
          // ensure type correctness if necessary
        if ( strictType  || !topLevel ) {
          if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomMessage.invalidCodomain, res, fileName,decLine)) {
            return null;
          }
        }
      }
      return symbol;
    } else {
      TomSymbol symbol = null;
      TomSymbol referenceSymbol = null;
      TomTypeList referenceDomain = null;
      String referenceName = null;
       if (tom_is_sort_TomNameList(symbolNameList)) { { tom.engine.adt.tomname.types.TomNameList  tomMatch30Position1=(( tom.engine.adt.tomname.types.TomNameList )symbolNameList); if ( ( tom_is_fun_sym_concTomName(tomMatch30Position1) ||  false  ) ) { {int tomMatch30Position1Index1=0; { tom.engine.adt.tomname.types.TomNameList  tomMatch30Position1List1=tomMatch30Position1; { tom.engine.adt.tomname.types.TomNameList  tomMatch30Position1Begin1=tomMatch30Position1List1; { tom.engine.adt.tomname.types.TomNameList  tomMatch30Position1End1=tomMatch30Position1List1; { while (!(tom_is_empty_concTomName_TomNameList(tomMatch30Position1End1))) {tomMatch30Position1List1=tomMatch30Position1End1; { { tom.engine.adt.tomname.types.TomNameList  tomMatch30Position1Save2=tomMatch30Position1List1; { { tom.engine.adt.tomname.types.TomName  tomMatch30Position1Position2=tom_get_head_concTomName_TomNameList(tomMatch30Position1List1);tomMatch30Position1Index1=tomMatch30Position1Index1 + 1;tomMatch30Position1List1=tom_get_tail_concTomName_TomNameList(tomMatch30Position1List1); if ( ( tom_is_fun_sym_Name(tomMatch30Position1Position2) ||  false  ) ) { { String  tom_dijName=tom_get_slot_Name_String(tomMatch30Position1Position2); if ( true ) {
 // for each SymbolName
          symbol =  getSymbolFromName(tom_dijName);
          if (symbol == null) {
            // In disjunction we can only have known symbols
            messageError(fileName,decLine, TomMessage.unknownSymbolInDisjunction, new Object[]{(tom_dijName)});
            return null;
          }
          if ( strictType  || !topLevel ) {
            // ensure codomain is correct
            if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomMessage.invalidDisjunctionCodomain, tom_dijName, fileName,decLine)) {
              return null;
            }
          }
          //System.out.println("domain = " + getSymbolDomain(symbol));

          if (referenceDomain == null) { // save Domain reference
            referenceSymbol = symbol;
            referenceName = tom_dijName;
            referenceDomain = getSymbolDomain(symbol);
          } else {
            // check that domains are compatible
            TomTypeList currentDomain = getSymbolDomain(symbol);
            // restrict the domain to the record
            while(!slotList.isEmptyconcSlot()) {
              Slot slot = slotList.getHeadconcSlot();
              TomName slotName = slot.getSlotName();
              int currentSlotIndex = TomBase.getSlotIndex(symbol,slotName);
              int referenceSlotIndex = TomBase.getSlotIndex(referenceSymbol,slotName);

              //System.out.println("index1 = " + currentSlotIndex);
              //System.out.println("type1 = " + TomBase.elementAt(currentDomain,currentSlotIndex));
              //System.out.println("index2 = " + referenceSlotIndex);
              //System.out.println("type2 = " + TomBase.elementAt(referenceDomain,referenceSlotIndex));
              if(TomBase.elementAt(currentDomain,currentSlotIndex) != TomBase.elementAt(referenceDomain,referenceSlotIndex)) {
                messageError(fileName,decLine, TomMessage.invalidDisjunctionDomain, new Object[]{referenceName, (tom_dijName) });
                return null;
              }

              slotList = slotList.getTailconcSlot();
            }

          }
         } } } }tomMatch30Position1List1=tomMatch30Position1Save2; } }tomMatch30Position1End1=tom_get_tail_concTomName_TomNameList(tomMatch30Position1End1); } }tomMatch30Position1List1=tomMatch30Position1Begin1; } } } } } } } }

      return symbol;
    }
  }

  ///////////////////////
  // RECORDS CONCERNS ///
  ///////////////////////
  private  void verifyRecordStructure(OptionList option, String tomName, SlotList slotList, String fileName, int decLine)  {
    TomSymbol symbol = getSymbolFromName(tomName);
    if(symbol != null) {
        // constants have an emptyPairNameDeclList
        // the length of the pairNameDeclList corresponds to the arity of the operator
        // list operator with [] no allowed
      if(slotList.isEmptyconcSlot() && (isListOperator(symbol) ||  isArrayOperator(symbol)) ) {
        messageError(fileName,decLine,
                     TomMessage.bracketOnListSymbol,
                     new Object[]{tomName});
      }
        // TODO verify type
      verifyRecordSlots(slotList,symbol, getSymbolDomain(symbol), tomName, fileName, decLine);
    } else {
      messageError(fileName,decLine,
                   TomMessage.unknownSymbol,
                   new Object[]{tomName});
    }
  }

    // We test the existence/repetition of slotName contained in pairSlotAppl
    // and then the associated term
  private  void verifyRecordSlots(SlotList slotList, TomSymbol tomSymbol, TomTypeList typeList, String methodName, String fileName, int decLine) {
  TomName pairSlotName = null;
  ArrayList listOfPossibleSlot = null;
  ArrayList studiedSlotIndexList = new ArrayList();
    //for each pair slotName <=> Appl
  while( !slotList.isEmptyconcSlot() ) {
      pairSlotName = slotList.getHeadconcSlot().getSlotName();
        // First check for slot name correctness
      int index = getSlotIndex(tomSymbol,pairSlotName);
      if(index < 0) {// Error: bad slot name
        if(listOfPossibleSlot == null) {
          // calculate list of possible slot names..
          listOfPossibleSlot = new ArrayList();
          PairNameDeclList listOfSlots = tomSymbol.getPairNameDeclList();
          while ( !listOfSlots.isEmptyconcPairNameDecl() ) {
            TomName sname = listOfSlots.getHeadconcPairNameDecl().getSlotName();
            if(!sname.isEmptyName()) {
              listOfPossibleSlot.add(sname.getString());
            }
            listOfSlots = listOfSlots.getTailconcPairNameDecl();
          }
        }
        messageError(fileName,decLine,
                     TomMessage.badSlotName,
                     new Object[]{pairSlotName.getString(), methodName, listOfPossibleSlot.toString()});
        return; //break analyses
      } else { // then check for repeated good slot name
        Integer integerIndex = new Integer(index);
        if(studiedSlotIndexList.contains(integerIndex)) {
            // Error: repeated slot
          messageError(fileName,decLine,
                       TomMessage.slotRepeated,
                       new Object[]{methodName, pairSlotName.getString()});
          return; //break analyses
        }
        studiedSlotIndexList.add(integerIndex);
      }

        // Now analyses associated term
      PairNameDeclList listOfSlots =  tomSymbol.getPairNameDeclList();
      TomTypeList listOfTypes = typeList;
      while(!listOfSlots.isEmptyconcPairNameDecl()) {
        SlotList listOfPair = slotList;
        TomName slotName = listOfSlots.getHeadconcPairNameDecl().getSlotName();
        TomType expectedType = listOfTypes.getHeadconcTomType();
        if(!slotName.isEmptyName()) {
          // look for a same name (from record)
          whileBlock: {
            while(!listOfPair.isEmptyconcSlot()) {
              Slot pairSlotTerm = listOfPair.getHeadconcSlot();
               if (tom_is_sort_TomName(slotName)) { { tom.engine.adt.tomname.types.TomName  tomMatch31Position1=(( tom.engine.adt.tomname.types.TomName )slotName); if (tom_is_sort_Slot(pairSlotTerm)) { { tom.engine.adt.tomslot.types.Slot  tomMatch31Position2=(( tom.engine.adt.tomslot.types.Slot )pairSlotTerm); if ( ( tom_is_fun_sym_Name(tomMatch31Position1) ||  false  ) ) { { String  tom_name1=tom_get_slot_Name_String(tomMatch31Position1); if ( ( tom_is_fun_sym_PairSlotAppl(tomMatch31Position2) ||  false  ) ) { { tom.engine.adt.tomname.types.TomName  tomMatch31Position2NameNumberSlotName=tom_get_slot_PairSlotAppl_SlotName(tomMatch31Position2); if ( ( tom_is_fun_sym_Name(tomMatch31Position2NameNumberSlotName) ||  false  ) ) { if (tom_equal_term_String(tom_name1, tom_get_slot_Name_String(tomMatch31Position2NameNumberSlotName))) { { tom.engine.adt.tomterm.types.TomTerm  tom_slotSubterm=tom_get_slot_PairSlotAppl_Appl(tomMatch31Position2); if ( true ) {

                   validateTerm(tom_slotSubterm,expectedType, false, true, false);
                   break whileBlock;
                  } } } } } } } } if ( true ) {
listOfPair = listOfPair.getTailconcSlot(); } } } } }

            }
          }
        }
        // prepare next step
        listOfSlots = listOfSlots.getTailconcPairNameDecl();
        listOfTypes = listOfTypes.getTailconcTomType();
      }

      slotList = slotList.getTailconcSlot();
    }
  }

  public  void validateListOperatorArgs(TomList args, TomType expectedType, boolean permissive) {
    while(!args.isEmptyconcTomTerm()) {
      validateTerm(args.getHeadconcTomTerm(), expectedType, true, false, permissive);
      args = args.getTailconcTomTerm();
    }
  }

  private  boolean testTypeExistence(String typeName) {
    return symbolTable().getType(typeName) != null;
  }

  protected static class TermDescription {
    private int termClass;
    private String fileName;
    private int decLine;
    private String name ="";
    private TomType tomType = null;

    public TermDescription(int termClass, String name, String fileName, int decLine, TomType tomType) {
      this.termClass = termClass;
      this.fileName = fileName;
      this.decLine = decLine;
      this.name = name;
      this.tomType = tomType;
    }

    public int getTermClass() {
      return termClass;
    }

    public String getName() {
      return name;
    }
    
    public String getFileName() {
      return fileName;
    }

    public int getLine() {
      return decLine;
    }

    public TomType getType() {
      if(tomType != null && !tomType.isEmptyType()) {
        return tomType;
      } else {
        return tom_make_EmptyType();
      }
    }
  }
}
