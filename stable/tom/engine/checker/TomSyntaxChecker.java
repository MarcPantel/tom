/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 *
 * TOM - To One Matching Compiler
 *
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Julien Guyon
 *
 **/

package tom.engine.checker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;

import tom.engine.TomMessage;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;
import tom.engine.xml.Constants;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;
import aterm.ATerm;
import tom.engine.tools.ASTFactory;

import tom.library.strategy.mutraveler.MuTraveler;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;

/**
 * The TomSyntaxChecker plugin.
 */
public class TomSyntaxChecker extends TomChecker {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Match( tom.engine.adt.tomsignature.types.Instruction t) {  return  (t!= null) && t.isMatch() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Match_subjectList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slot_Match_astPatternInstructionList( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Match_option( tom.engine.adt.tomsignature.types.Instruction t) {  return  t.getOption() ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomSymbol( tom.engine.adt.tomsignature.types.SymbolList t) {  return (t!= null) && t.isSortSymbolList() ;}private static  tom.engine.adt.tomsignature.types.SymbolList tom_empty_list_concTomSymbol() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(); }private static  tom.engine.adt.tomsignature.types.SymbolList tom_cons_list_concTomSymbol( tom.engine.adt.tomsignature.types.TomSymbol e,  tom.engine.adt.tomsignature.types.SymbolList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(e,l); }private static  tom.engine.adt.tomsignature.types.TomSymbol tom_get_head_concTomSymbol_SymbolList( tom.engine.adt.tomsignature.types.SymbolList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.SymbolList tom_get_tail_concTomSymbol_SymbolList( tom.engine.adt.tomsignature.types.SymbolList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomSymbol_SymbolList( tom.engine.adt.tomsignature.types.SymbolList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.SymbolList tom_append_list_concTomSymbol( tom.engine.adt.tomsignature.types.SymbolList l1,  tom.engine.adt.tomsignature.types.SymbolList l2) {    if(tom_is_empty_concTomSymbol_SymbolList(l1)) {     return l2;    } else if(tom_is_empty_concTomSymbol_SymbolList(l2)) {     return l1;    } else if(tom_is_empty_concTomSymbol_SymbolList(( tom.engine.adt.tomsignature.types.SymbolList)tom_get_tail_concTomSymbol_SymbolList(l1))) {     return ( tom.engine.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol)tom_get_head_concTomSymbol_SymbolList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol)tom_get_head_concTomSymbol_SymbolList(l1),tom_append_list_concTomSymbol(( tom.engine.adt.tomsignature.types.SymbolList)tom_get_tail_concTomSymbol_SymbolList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.SymbolList tom_get_slice_concTomSymbol( tom.engine.adt.tomsignature.types.SymbolList begin,  tom.engine.adt.tomsignature.types.SymbolList end) {    if(tom_terms_equal_SymbolList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.SymbolList)tom_empty_list_concTomSymbol();    } else {      return ( tom.engine.adt.tomsignature.types.SymbolList)tom_cons_list_concTomSymbol(( tom.engine.adt.tomsignature.types.TomSymbol)tom_get_head_concTomSymbol_SymbolList(begin),( tom.engine.adt.tomsignature.types.SymbolList)tom_get_slice_concTomSymbol(( tom.engine.adt.tomsignature.types.SymbolList)tom_get_tail_concTomSymbol_SymbolList(begin),end));    }   }  private static  tom.engine.adt.tomsignature.types.SymbolList tom_make_emptySymbolList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(); }private static  tom.engine.adt.tomsignature.types.SymbolList tom_make_manySymbolList( tom.engine.adt.tomsignature.types.TomSymbol e,  tom.engine.adt.tomsignature.types.SymbolList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(e,l); }private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList t) {  return (t!= null) && t.isSortTomRuleList() ;}private static  tom.engine.adt.tomsignature.types.TomRuleList tom_empty_list_concTomRule() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRuleList(); }private static  tom.engine.adt.tomsignature.types.TomRuleList tom_cons_list_concTomRule( tom.engine.adt.tomsignature.types.TomRule e,  tom.engine.adt.tomsignature.types.TomRuleList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRuleList(e,l); }private static  tom.engine.adt.tomsignature.types.TomRule tom_get_head_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomRuleList tom_get_tail_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomRule_TomRuleList( tom.engine.adt.tomsignature.types.TomRuleList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomRuleList tom_append_list_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList l1,  tom.engine.adt.tomsignature.types.TomRuleList l2) {    if(tom_is_empty_concTomRule_TomRuleList(l1)) {     return l2;    } else if(tom_is_empty_concTomRule_TomRuleList(l2)) {     return l1;    } else if(tom_is_empty_concTomRule_TomRuleList(( tom.engine.adt.tomsignature.types.TomRuleList)tom_get_tail_concTomRule_TomRuleList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomRuleList)tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule)tom_get_head_concTomRule_TomRuleList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomRuleList)tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule)tom_get_head_concTomRule_TomRuleList(l1),tom_append_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRuleList)tom_get_tail_concTomRule_TomRuleList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomRuleList tom_get_slice_concTomRule( tom.engine.adt.tomsignature.types.TomRuleList begin,  tom.engine.adt.tomsignature.types.TomRuleList end) {    if(tom_terms_equal_TomRuleList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomRuleList)tom_empty_list_concTomRule();    } else {      return ( tom.engine.adt.tomsignature.types.TomRuleList)tom_cons_list_concTomRule(( tom.engine.adt.tomsignature.types.TomRule)tom_get_head_concTomRule_TomRuleList(begin),( tom.engine.adt.tomsignature.types.TomRuleList)tom_get_slice_concTomRule(( tom.engine.adt.tomsignature.types.TomRuleList)tom_get_tail_concTomRule_TomRuleList(begin),end));    }   }  private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_VisitTerm( tom.engine.adt.tomsignature.types.TomVisit t) {  return  (t!= null) && t.isVisitTerm() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VisitTerm_vNode( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getVNode() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slot_VisitTerm_astPatternInstructionList( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getAstPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VisitTerm_option( tom.engine.adt.tomsignature.types.TomVisit t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_RewriteRule( tom.engine.adt.tomsignature.types.TomRule t) {  return  (t!= null) && t.isRewriteRule() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_lhs( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getLhs() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_RewriteRule_rhs( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getRhs() ;}private static  tom.engine.adt.tomsignature.types.InstructionList tom_get_slot_RewriteRule_condList( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getCondList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RewriteRule_option( tom.engine.adt.tomsignature.types.TomRule t) {  return  t.getOption() ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomsignature.types.Slot t) {  return  (t!= null) && t.isPairSlotAppl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_PairSlotAppl_slotName( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_PairSlotAppl_appl( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getAppl() ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList t) {  return (t!= null) && t.isSortPairNameDeclList() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_empty_list_concPairNameDecl() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(); }private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_cons_list_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDecl e,  tom.engine.adt.tomsignature.types.PairNameDeclList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(e,l); }private static  tom.engine.adt.tomsignature.types.PairNameDecl tom_get_head_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_tail_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.getTail() ;}private static boolean tom_is_empty_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_append_list_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList l1,  tom.engine.adt.tomsignature.types.PairNameDeclList l2) {    if(tom_is_empty_concPairNameDecl_PairNameDeclList(l1)) {     return l2;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(l2)) {     return l1;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(l1))) {     return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(l1),tom_append_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_slice_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList begin,  tom.engine.adt.tomsignature.types.PairNameDeclList end) {    if(tom_terms_equal_PairNameDeclList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_empty_list_concPairNameDecl();    } else {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(begin),( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_slice_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(begin),end));    }   }  private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PairNameDecl( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  (t!= null) && t.isPairNameDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_PairNameDecl_slotName( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_PairNameDecl_slotDecl( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  t.getSlotDecl() ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomsignature.types.OptionList t) {  return (t!= null) && t.isSortOptionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_empty_list_concOption() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(); }private static  tom.engine.adt.tomsignature.types.OptionList tom_cons_list_concOption( tom.engine.adt.tomsignature.types.Option e,  tom.engine.adt.tomsignature.types.OptionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l); }private static  tom.engine.adt.tomsignature.types.Option tom_get_head_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_tail_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_append_list_concOption( tom.engine.adt.tomsignature.types.OptionList l1,  tom.engine.adt.tomsignature.types.OptionList l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slice_concOption( tom.engine.adt.tomsignature.types.OptionList begin,  tom.engine.adt.tomsignature.types.OptionList end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomsignature.types.OptionList)tom_get_slice_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_OriginTracking( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isOriginTracking() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_OriginTracking_astName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstName() ;}private static  int  tom_get_slot_OriginTracking_line( tom.engine.adt.tomsignature.types.Option t) {  return  t.getLine() ;}private static  String  tom_get_slot_OriginTracking_fileName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getFileName() ;}private static boolean tom_is_fun_sym_DeclarationToOption( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isDeclarationToOption() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_DeclarationToOption_astDeclaration( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstDeclaration() ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomType( tom.engine.adt.tomsignature.types.TomTypeList t) {  return (t!= null) && t.isSortTomTypeList() ;}private static  tom.engine.adt.tomsignature.types.TomTypeList tom_empty_list_concTomType() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeList(); }private static  tom.engine.adt.tomsignature.types.TomTypeList tom_cons_list_concTomType( tom.engine.adt.tomsignature.types.TomType e,  tom.engine.adt.tomsignature.types.TomTypeList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeList(e,l); }private static  tom.engine.adt.tomsignature.types.TomType tom_get_head_concTomType_TomTypeList( tom.engine.adt.tomsignature.types.TomTypeList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomTypeList tom_get_tail_concTomType_TomTypeList( tom.engine.adt.tomsignature.types.TomTypeList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomType_TomTypeList( tom.engine.adt.tomsignature.types.TomTypeList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomTypeList tom_append_list_concTomType( tom.engine.adt.tomsignature.types.TomTypeList l1,  tom.engine.adt.tomsignature.types.TomTypeList l2) {    if(tom_is_empty_concTomType_TomTypeList(l1)) {     return l2;    } else if(tom_is_empty_concTomType_TomTypeList(l2)) {     return l1;    } else if(tom_is_empty_concTomType_TomTypeList(( tom.engine.adt.tomsignature.types.TomTypeList)tom_get_tail_concTomType_TomTypeList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomTypeList)tom_cons_list_concTomType(( tom.engine.adt.tomsignature.types.TomType)tom_get_head_concTomType_TomTypeList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomTypeList)tom_cons_list_concTomType(( tom.engine.adt.tomsignature.types.TomType)tom_get_head_concTomType_TomTypeList(l1),tom_append_list_concTomType(( tom.engine.adt.tomsignature.types.TomTypeList)tom_get_tail_concTomType_TomTypeList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomTypeList tom_get_slice_concTomType( tom.engine.adt.tomsignature.types.TomTypeList begin,  tom.engine.adt.tomsignature.types.TomTypeList end) {    if(tom_terms_equal_TomTypeList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomTypeList)tom_empty_list_concTomType();    } else {      return ( tom.engine.adt.tomsignature.types.TomTypeList)tom_cons_list_concTomType(( tom.engine.adt.tomsignature.types.TomType)tom_get_head_concTomType_TomTypeList(begin),( tom.engine.adt.tomsignature.types.TomTypeList)tom_get_slice_concTomType(( tom.engine.adt.tomsignature.types.TomTypeList)tom_get_tail_concTomType_TomTypeList(begin),end));    }   }  private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_EmptyType() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_EmptyType(); }private static boolean tom_is_fun_sym_Codomain( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Codomain_astName( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_TomTypeAlone( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTomTypeAlone() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_TomTypeAlone( String  t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_TomTypeAlone(t0); }private static  String  tom_get_slot_TomTypeAlone_string( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getString() ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomTerm( tom.engine.adt.tomsignature.types.TomList t) {  return (t!= null) && t.isSortTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_empty_list_concTomTerm() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static  tom.engine.adt.tomsignature.types.TomList tom_cons_list_concTomTerm( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_head_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_tail_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomTerm_TomList( tom.engine.adt.tomsignature.types.TomList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_append_list_concTomTerm( tom.engine.adt.tomsignature.types.TomList l1,  tom.engine.adt.tomsignature.types.TomList l2) {    if(tom_is_empty_concTomTerm_TomList(l1)) {     return l2;    } else if(tom_is_empty_concTomTerm_TomList(l2)) {     return l1;    } else if(tom_is_empty_concTomTerm_TomList(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(l1),tom_append_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomList tom_get_slice_concTomTerm( tom.engine.adt.tomsignature.types.TomList begin,  tom.engine.adt.tomsignature.types.TomList end) {    if(tom_terms_equal_TomList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomList)tom_empty_list_concTomTerm();    } else {      return ( tom.engine.adt.tomsignature.types.TomList)tom_cons_list_concTomTerm(( tom.engine.adt.tomsignature.types.TomTerm)tom_get_head_concTomTerm_TomList(begin),( tom.engine.adt.tomsignature.types.TomList)tom_get_slice_concTomTerm(( tom.engine.adt.tomsignature.types.TomList)tom_get_tail_concTomTerm_TomList(begin),end));    }   }  private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstructionList t) {  return (t!= null) && t.isSortPatternInstructionList() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_empty_list_concPatternInstruction() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList(); }private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_cons_list_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstruction e,  tom.engine.adt.tomsignature.types.PatternInstructionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList(e,l); }private static  tom.engine.adt.tomsignature.types.PatternInstruction tom_get_head_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomsignature.types.PatternInstructionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_tail_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomsignature.types.PatternInstructionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concPatternInstruction_PatternInstructionList( tom.engine.adt.tomsignature.types.PatternInstructionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_append_list_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstructionList l1,  tom.engine.adt.tomsignature.types.PatternInstructionList l2) {    if(tom_is_empty_concPatternInstruction_PatternInstructionList(l1)) {     return l2;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(l2)) {     return l1;    } else if(tom_is_empty_concPatternInstruction_PatternInstructionList(( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_tail_concPatternInstruction_PatternInstructionList(l1))) {     return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_cons_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstruction)tom_get_head_concPatternInstruction_PatternInstructionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_cons_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstruction)tom_get_head_concPatternInstruction_PatternInstructionList(l1),tom_append_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_tail_concPatternInstruction_PatternInstructionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.PatternInstructionList tom_get_slice_concPatternInstruction( tom.engine.adt.tomsignature.types.PatternInstructionList begin,  tom.engine.adt.tomsignature.types.PatternInstructionList end) {    if(tom_terms_equal_PatternInstructionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_empty_list_concPatternInstruction();    } else {      return ( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_cons_list_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstruction)tom_get_head_concPatternInstruction_PatternInstructionList(begin),( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_slice_concPatternInstruction(( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_get_tail_concPatternInstruction_PatternInstructionList(begin),end));    }   }  private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Pattern( tom.engine.adt.tomsignature.types.Pattern t) {  return  (t!= null) && t.isPattern() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_subjectList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_tomList( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getTomList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_Pattern_guards( tom.engine.adt.tomsignature.types.Pattern t) {  return  t.getGuards() ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PatternInstruction( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  (t!= null) && t.isPatternInstruction() ;}private static  tom.engine.adt.tomsignature.types.Pattern tom_get_slot_PatternInstruction_pattern( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  t.getPattern() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_PatternInstruction_action( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  t.getAction() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_PatternInstruction_option( tom.engine.adt.tomsignature.types.PatternInstruction t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_TLVar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTLVar() ;}private static  String  tom_get_slot_TLVar_strName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getStrName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TLVar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static boolean tom_is_fun_sym_Term( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTerm() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Term_tomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_SubjectList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isSubjectList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_SubjectList_tomList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomList() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Placeholder( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isPlaceholder() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Placeholder_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Placeholder_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_XMLAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isXMLAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_XMLAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_XMLAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_XMLAppl_attrList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAttrList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_XMLAppl_childList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getChildList() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_XMLAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_TermAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTermAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_TermAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_TermAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_TermAppl_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_TermAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concDeclaration( tom.engine.adt.tomsignature.types.DeclarationList t) {  return (t!= null) && t.isSortDeclarationList() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_empty_list_concDeclaration() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList(); }private static  tom.engine.adt.tomsignature.types.DeclarationList tom_cons_list_concDeclaration( tom.engine.adt.tomsignature.types.Declaration e,  tom.engine.adt.tomsignature.types.DeclarationList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList(e,l); }private static  tom.engine.adt.tomsignature.types.Declaration tom_get_head_concDeclaration_DeclarationList( tom.engine.adt.tomsignature.types.DeclarationList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_get_tail_concDeclaration_DeclarationList( tom.engine.adt.tomsignature.types.DeclarationList l) {  return l.getTail() ;}private static boolean tom_is_empty_concDeclaration_DeclarationList( tom.engine.adt.tomsignature.types.DeclarationList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_append_list_concDeclaration( tom.engine.adt.tomsignature.types.DeclarationList l1,  tom.engine.adt.tomsignature.types.DeclarationList l2) {    if(tom_is_empty_concDeclaration_DeclarationList(l1)) {     return l2;    } else if(tom_is_empty_concDeclaration_DeclarationList(l2)) {     return l1;    } else if(tom_is_empty_concDeclaration_DeclarationList(( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_tail_concDeclaration_DeclarationList(l1))) {     return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_cons_list_concDeclaration(( tom.engine.adt.tomsignature.types.Declaration)tom_get_head_concDeclaration_DeclarationList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_cons_list_concDeclaration(( tom.engine.adt.tomsignature.types.Declaration)tom_get_head_concDeclaration_DeclarationList(l1),tom_append_list_concDeclaration(( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_tail_concDeclaration_DeclarationList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.DeclarationList tom_get_slice_concDeclaration( tom.engine.adt.tomsignature.types.DeclarationList begin,  tom.engine.adt.tomsignature.types.DeclarationList end) {    if(tom_terms_equal_DeclarationList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_empty_list_concDeclaration();    } else {      return ( tom.engine.adt.tomsignature.types.DeclarationList)tom_cons_list_concDeclaration(( tom.engine.adt.tomsignature.types.Declaration)tom_get_head_concDeclaration_DeclarationList(begin),( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_slice_concDeclaration(( tom.engine.adt.tomsignature.types.DeclarationList)tom_get_tail_concDeclaration_DeclarationList(begin),end));    }   }  private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_ArraySymbolDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isArraySymbolDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_ArraySymbolDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_ListSymbolDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isListSymbolDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_ListSymbolDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_SymbolDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isSymbolDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_SymbolDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_RuleSet( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isRuleSet() ;}private static  tom.engine.adt.tomsignature.types.TomRuleList tom_get_slot_RuleSet_ruleList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getRuleList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RuleSet_option( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOption() ;}private static boolean tom_is_fun_sym_Strategy( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isStrategy() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Strategy_sName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getSName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Strategy_extendsTerm( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getExtendsTerm() ;}private static  tom.engine.adt.tomsignature.types.TomVisitList tom_get_slot_Strategy_visitList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVisitList() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_Strategy_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_MakeDecl_astType( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_MakeDecl_args( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getArgs() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeAddArray( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeAddArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeAddArray_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varElt( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarElt() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeAddArray_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeAddArray_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeEmptyArray( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeEmptyArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyArray_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeEmptyArray_varSize( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarSize() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeEmptyArray_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeEmptyArray_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetSizeDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetSizeDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSizeDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSizeDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetSizeDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetSizeDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetElementDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetElementDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetElementDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElementDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElementDecl_index( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getIndex() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetElementDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetElementDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeAddList( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeAddList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeAddList_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varElt( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarElt() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeAddList_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeAddList_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeEmptyList( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyList_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeEmptyList_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeEmptyList_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_IsEmptyDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isIsEmptyDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsEmptyDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsEmptyDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_IsEmptyDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_IsEmptyDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetTailDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetTailDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetTailDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetTailDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetTailDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetTailDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetHeadDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetHeadDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetHeadDecl_opname( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetHeadDecl_codomain( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetHeadDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetHeadDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetHeadDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_TermsEqualDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isTermsEqualDecl() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TermsEqualDecl_termArg1( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getTermArg1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TermsEqualDecl_termArg2( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getTermArg2() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_TermsEqualDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_TermsEqualDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_TypeTermDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isTypeTermDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_TypeTermDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.DeclarationList tom_get_slot_TypeTermDecl_declarations( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getDeclarations() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_TypeTermDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Try( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_Choice(v,tom_make_Identity()) ; }  /*  * strategies with Id considered as failure  */       


  /** the declared options string */
  public static final String DECLARED_OPTIONS = "<options><boolean name='noSyntaxCheck' altName='' description='Do not perform syntax checking' value='false'/></options>";

  /** op and type declarator */
  private final static String OPERATOR    = "Operator";
  private final static String CONSTRUCTOR = "%op";
  private final static String OP_ARRAY    = "%oparray";
  private final static String OP_LIST     = "%oplist";
  private final static String TYPE        = "Type";
  private final static String TYPE_TERM   = "%typeterm";

  /** type function symbols */
  private final static String EQUALS      = "equals";
  private final static String GET_ELEMENT = "get_element";
  private final static String GET_SIZE    = "get_size";
  private final static String GET_HEAD    = "get_head";
  private final static String GET_TAIL    = "get_tail";
  private final static String IS_EMPTY    = "is_empty";
  /** operator function symbols */
  private final static String MAKE_APPEND = "make_append";
  private final static String MAKE_EMPTY  = "make_empty";
  private final static String MAKE_INSERT = "make_insert";
  private final static String MAKE        = "make";

  /** the list of already studied and declared Types */
  private  ArrayList alreadyStudiedTypes =  new ArrayList();
  /** the list of already studied and declared Symbol */
  private  ArrayList alreadyStudiedSymbols =  new ArrayList();
  /** the list of already studied and declared Rule Symbol */
  private  ArrayList alreadyStudiedRule =  new ArrayList();

  /** List of expected functional declaration in each type declaration */
  private final static ArrayList TypeTermSignature =
    new ArrayList( Arrays.asList(new String[]{ TomSyntaxChecker.EQUALS }));

  /** Constructor */
  public TomSyntaxChecker() {
    super("TomSyntaxChecker");
    reinit();
  }

  /**
   * inherited from OptionOwner interface (plugin)
   */
  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(TomSyntaxChecker.DECLARED_OPTIONS);
  }

  protected void reinit() {
    super.reinit();
    alreadyStudiedTypes   = new ArrayList();
    alreadyStudiedSymbols = new ArrayList();
    alreadyStudiedRule    = new ArrayList();
  }

  public void run() {
    if(isActivated()) {
      strictType = !getOptionBooleanValue("lazyType");
      long startChrono = System.currentTimeMillis();
      try {
        // clean up internals
        reinit();
        // perform analyse
        try {
          MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_make_Sequence(tom_make_checkSyntax(this),tom_make_All(tom_make_MuVar("x")))))).visit((TomTerm)getWorkingTerm());
        } catch(jjtraveler.VisitFailure e) {
          System.out.println("strategy failed");
        }
        // verbose
        getLogger().log(Level.INFO, TomMessage.tomSyntaxCheckingPhase.getMessage(),
            new Integer((int)(System.currentTimeMillis()-startChrono)));
      } catch (Exception e) {
        getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
                        new Object[]{getClass().getName(),
                                     getStreamManager().getInputFileName(),
                                     e.getMessage() });
        e.printStackTrace();
      }
    } else {
      // syntax checker desactivated
      getLogger().log(Level.INFO, TomMessage.syntaxCheckerInactivated.getMessage());
    }
  }

  private boolean isActivated() {
    return !getOptionBooleanValue("noSyntaxCheck");
  }

  /**
   * Syntax checking entry point:
   * Catch and verify all type and operator declaration,
   * Match and RuleSet instructions
   */
   private static class checkSyntax  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  TomSyntaxChecker  tsc;  public checkSyntax(  TomSyntaxChecker  tsc ) { super(tom_make_Identity() ); this.tsc=tsc; } public  tom.engine.adt.tomsignature.types.Declaration visit_Declaration(  tom.engine.adt.tomsignature.types.Declaration tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match1_1=(( tom.engine.adt.tomsignature.types.Declaration)tom__arg); if (tom_is_fun_sym_Strategy(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomVisitList tom_match1_1_visitList=tom_get_slot_Strategy_visitList(tom_match1_1); { tom.engine.adt.tomsignature.types.Option tom_match1_1_orgTrack=tom_get_slot_Strategy_orgTrack(tom_match1_1); { tom.engine.adt.tomsignature.types.TomVisitList tom_list=tom_match1_1_visitList; { tom.engine.adt.tomsignature.types.Option tom_origin=tom_match1_1_orgTrack; if ( true ) {



        if(tom_list.isEmpty()) {
           if(tom_origin instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match2_1=(( tom.engine.adt.tomsignature.types.Option)tom_origin); if (tom_is_fun_sym_OriginTracking(tom_match2_1) ||  false ) { { String  tom_match2_1_fileName=tom_get_slot_OriginTracking_fileName(tom_match2_1); { int  tom_match2_1_line=tom_get_slot_OriginTracking_line(tom_match2_1); { String  tom_fileName=tom_match2_1_fileName; { int  tom_line=tom_match2_1_line; if ( true ) {
 
              tsc.messageError(tom_fileName,tom_line,TomMessage.emptyStrategy,new Object[]{});
             } } } } } } } }

          tsc.messageError("unknown",-1,TomMessage.emptyStrategy,new Object[]{});
        }
        /*  STRATEGY MATCH STRUCTURE*/
        tsc.verifyStrategy(tom_list);
       } } } } } } if (tom_is_fun_sym_RuleSet(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomRuleList tom_match1_1_ruleList=tom_get_slot_RuleSet_ruleList(tom_match1_1); { tom.engine.adt.tomsignature.types.OptionList tom_match1_1_option=tom_get_slot_RuleSet_option(tom_match1_1); { tom.engine.adt.tomsignature.types.TomRuleList tom_list=tom_match1_1_ruleList; { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match1_1_option; if ( true ) {

        /*  TOM RULE STRUCTURE*/
        tsc.verifyRule(tom_list, tom_optionList);
        tom_make_Fail().visit(null);
       } } } } } } if (tom_is_fun_sym_TypeTermDecl(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_TypeTermDecl_astName(tom_match1_1); { tom.engine.adt.tomsignature.types.DeclarationList tom_match1_1_declarations=tom_get_slot_TypeTermDecl_declarations(tom_match1_1); { tom.engine.adt.tomsignature.types.Option tom_match1_1_orgTrack=tom_get_slot_TypeTermDecl_orgTrack(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_tomName=tom_match1_1_astName_string; { tom.engine.adt.tomsignature.types.DeclarationList tom_declarationList=tom_match1_1_declarations; { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match1_1_orgTrack; if ( true ) {


        tsc.verifyTypeDecl(TomSyntaxChecker.TYPE_TERM, tom_tomName, tom_declarationList, tom_orgTrack);
        tom_make_Fail().visit(null);
       } } } } } } } } } } if (tom_is_fun_sym_SymbolDecl(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_SymbolDecl_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_tomName=tom_match1_1_astName_string; if ( true ) {


        tsc.verifySymbol(TomSyntaxChecker.CONSTRUCTOR, tsc.getSymbolFromName(tom_tomName));
        tom_make_Fail().visit(null);
       } } } } } } if (tom_is_fun_sym_ArraySymbolDecl(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_ArraySymbolDecl_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_tomName=tom_match1_1_astName_string; if ( true ) {

        tsc.verifySymbol(TomSyntaxChecker.OP_ARRAY, tsc.getSymbolFromName(tom_tomName));
        tom_make_Fail().visit(null);
       } } } } } } if (tom_is_fun_sym_ListSymbolDecl(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match1_1_astName=tom_get_slot_ListSymbolDecl_astName(tom_match1_1); if (tom_is_fun_sym_Name(tom_match1_1_astName) ||  false ) { { String  tom_match1_1_astName_string=tom_get_slot_Name_string(tom_match1_1_astName); { String  tom_tomName=tom_match1_1_astName_string; if ( true ) {

        tsc.verifySymbol(TomSyntaxChecker.OP_LIST, tsc.getSymbolFromName(tom_tomName));
        tom_make_Fail().visit(null);
       } } } } } } } } return super.visit_Declaration(tom__arg) ;  } public  tom.engine.adt.tomsignature.types.Instruction visit_Instruction(  tom.engine.adt.tomsignature.types.Instruction tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.Instruction) { { tom.engine.adt.tomsignature.types.Instruction tom_match3_1=(( tom.engine.adt.tomsignature.types.Instruction)tom__arg); if (tom_is_fun_sym_Match(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match3_1_subjectList=tom_get_slot_Match_subjectList(tom_match3_1); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match3_1_astPatternInstructionList=tom_get_slot_Match_astPatternInstructionList(tom_match3_1); { tom.engine.adt.tomsignature.types.OptionList tom_match3_1_option=tom_get_slot_Match_option(tom_match3_1); if (tom_is_fun_sym_SubjectList(tom_match3_1_subjectList) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match3_1_subjectList_tomList=tom_get_slot_SubjectList_tomList(tom_match3_1_subjectList); { tom.engine.adt.tomsignature.types.TomList tom_matchArgsList=tom_match3_1_subjectList_tomList; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_patternInstructionList=tom_match3_1_astPatternInstructionList; { tom.engine.adt.tomsignature.types.OptionList tom_list=tom_match3_1_option; if ( true ) {




       /*  TOM MATCH STRUCTURE*/
       tsc.verifyMatch(tom_matchArgsList, tom_patternInstructionList, tom_list);
      } } } } } } } } } } } } return super.visit_Instruction(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_checkSyntax( TomSyntaxChecker  t0) { return new checkSyntax(t0); }



  ///////////////////////////////
  // TYPE DECLARATION CONCERNS //
  //////////////////////////////
  private void verifyTypeDecl(String declType, String tomName, DeclarationList listOfDeclaration, Option typeOrgTrack) {
    currentTomStructureOrgTrack = typeOrgTrack;
    // ensure first definition
    verifyMultipleDefinition(tomName, declType, TYPE);
    // verify Macro functions
    ArrayList verifyList = new ArrayList(TomSyntaxChecker.TypeTermSignature);

     if(listOfDeclaration instanceof  tom.engine.adt.tomsignature.types.DeclarationList) { { tom.engine.adt.tomsignature.types.DeclarationList tom_match4_1=(( tom.engine.adt.tomsignature.types.DeclarationList)listOfDeclaration); if (tom_is_fun_sym_concDeclaration(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.DeclarationList tom_match4_1_list1=tom_match4_1; { tom.engine.adt.tomsignature.types.DeclarationList tom_match4_1_begin1=tom_match4_1_list1; { tom.engine.adt.tomsignature.types.DeclarationList tom_match4_1_end1=tom_match4_1_list1; { while (!(tom_is_empty_concDeclaration_DeclarationList(tom_match4_1_end1))) {tom_match4_1_list1=tom_match4_1_end1; { { tom.engine.adt.tomsignature.types.Declaration tom_d=tom_get_head_concDeclaration_DeclarationList(tom_match4_1_list1);tom_match4_1_list1=tom_get_tail_concDeclaration_DeclarationList(tom_match4_1_list1); if ( true ) {
 // for each Declaration
        Declaration decl = tom_d;
        matchblock:{
           if(decl instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match5_1=(( tom.engine.adt.tomsignature.types.Declaration)decl); if (tom_is_fun_sym_TermsEqualDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_termArg1=tom_get_slot_TermsEqualDecl_termArg1(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_termArg2=tom_get_slot_TermsEqualDecl_termArg2(tom_match5_1); { tom.engine.adt.tomsignature.types.Instruction tom_match5_1_instr=tom_get_slot_TermsEqualDecl_instr(tom_match5_1); { tom.engine.adt.tomsignature.types.Option tom_match5_1_orgTrack=tom_get_slot_TermsEqualDecl_orgTrack(tom_match5_1); if (tom_is_fun_sym_Variable(tom_match5_1_termArg1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_termArg1_astName=tom_get_slot_Variable_astName(tom_match5_1_termArg1); if (tom_is_fun_sym_Name(tom_match5_1_termArg1_astName) ||  false ) { { String  tom_match5_1_termArg1_astName_string=tom_get_slot_Name_string(tom_match5_1_termArg1_astName); { String  tom_name1=tom_match5_1_termArg1_astName_string; if (tom_is_fun_sym_Variable(tom_match5_1_termArg2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_termArg2_astName=tom_get_slot_Variable_astName(tom_match5_1_termArg2); if (tom_is_fun_sym_Name(tom_match5_1_termArg2_astName) ||  false ) { { String  tom_match5_1_termArg2_astName_string=tom_get_slot_Name_string(tom_match5_1_termArg2_astName); { String  tom_name2=tom_match5_1_termArg2_astName_string; { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match5_1_orgTrack; if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.EQUALS,verifyList,tom_orgTrack,tom_name1,tom_name2,declType)


;
              break matchblock;
             } } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetHeadDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_match5_1_orgTrack=tom_get_slot_GetHeadDecl_orgTrack(tom_match5_1); { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match5_1_orgTrack; if ( true ) {checkField(TomSyntaxChecker.GET_HEAD,verifyList,tom_orgTrack,declType)


;
              break matchblock;
             } } } } if (tom_is_fun_sym_GetTailDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_match5_1_orgTrack=tom_get_slot_GetTailDecl_orgTrack(tom_match5_1); { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match5_1_orgTrack; if ( true ) {checkField(TomSyntaxChecker.GET_TAIL,verifyList,tom_orgTrack,declType)

;
              break matchblock;
             } } } } if (tom_is_fun_sym_IsEmptyDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_match5_1_orgTrack=tom_get_slot_IsEmptyDecl_orgTrack(tom_match5_1); { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match5_1_orgTrack; if ( true ) {checkField(TomSyntaxChecker.IS_EMPTY,verifyList,tom_orgTrack,declType)

;
              break matchblock;
             } } } } if (tom_is_fun_sym_GetElementDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_variable=tom_get_slot_GetElementDecl_variable(tom_match5_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match5_1_index=tom_get_slot_GetElementDecl_index(tom_match5_1); { tom.engine.adt.tomsignature.types.Option tom_match5_1_orgTrack=tom_get_slot_GetElementDecl_orgTrack(tom_match5_1); if (tom_is_fun_sym_Variable(tom_match5_1_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_variable_astName=tom_get_slot_Variable_astName(tom_match5_1_variable); if (tom_is_fun_sym_Name(tom_match5_1_variable_astName) ||  false ) { { String  tom_match5_1_variable_astName_string=tom_get_slot_Name_string(tom_match5_1_variable_astName); { String  tom_name1=tom_match5_1_variable_astName_string; if (tom_is_fun_sym_Variable(tom_match5_1_index) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match5_1_index_astName=tom_get_slot_Variable_astName(tom_match5_1_index); if (tom_is_fun_sym_Name(tom_match5_1_index_astName) ||  false ) { { String  tom_match5_1_index_astName_string=tom_get_slot_Name_string(tom_match5_1_index_astName); { String  tom_name2=tom_match5_1_index_astName_string; { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match5_1_orgTrack; if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.GET_ELEMENT,verifyList,tom_orgTrack,tom_name1,tom_name2,declType)


;
              break matchblock;
             } } } } } } } } } } } } } } } } if (tom_is_fun_sym_GetSizeDecl(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_match5_1_orgTrack=tom_get_slot_GetSizeDecl_orgTrack(tom_match5_1); { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match5_1_orgTrack; if ( true ) {checkField(TomSyntaxChecker.GET_SIZE,verifyList,tom_orgTrack,declType)

;
              break matchblock;
             } } } } } }

        }
       } }tom_match4_1_end1=tom_get_tail_concDeclaration_DeclarationList(tom_match4_1_end1); } }tom_match4_1_list1=tom_match4_1_begin1; } } } } } } }

    // remove non mandatory functions
    if(verifyList.contains(TomSyntaxChecker.EQUALS)) {
      verifyList.remove(verifyList.indexOf(TomSyntaxChecker.EQUALS));
    }
    if(!verifyList.isEmpty()) {
      messageMissingMacroFunctions(declType, verifyList);
    }
  } //verifyTypeDecl

  private void verifyMultipleDefinition(String name, String symbolType, String OperatorOrType) {
    ArrayList list;
    if (OperatorOrType.equals(TomSyntaxChecker.OPERATOR)) {
      list = alreadyStudiedSymbols;
    } else {
      list = alreadyStudiedTypes;
    }
    if(list.contains(name)) {
      messageError(currentTomStructureOrgTrack.getFileName(),
          currentTomStructureOrgTrack.getLine(),
          TomMessage.multipleSymbolDefinitionError,
          new Object[]{name});
    } else {
      list.add(name);
    }
  } //verifyMultipleDefinition

  private  void checkField(String function, ArrayList foundFunctions, Option orgTrack, String symbolType) {
    if(foundFunctions.contains(function)) {
      foundFunctions.remove(foundFunctions.indexOf(function));
    } else {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.macroFunctionRepeated,
                   new Object[]{function});
    }
  } //checkField

  private  void checkFieldAndLinearArgs(String function, ArrayList foundFunctions, Option orgTrack, String name1, String name2, String symbolType) {
    checkField(function,foundFunctions, orgTrack, symbolType);
    if(name1.equals(name2)) {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.nonLinearMacroFunction,
                   new Object[]{function, name1});
    }
  } //checkFieldAndLinearArgs

  /////////////////////////////////
  // SYMBOL DECLARATION CONCERNS //
  /////////////////////////////////
  private  void verifySymbol(String symbolType, TomSymbol tomSymbol){
    int domainLength;
    String symbStrName = tomSymbol.getAstName().getString();
    OptionList optionList = tomSymbol.getOption();
    // We save first the origin tracking of the symbol declaration
    currentTomStructureOrgTrack = findOriginTracking(optionList);

      // ensure first definition then Codomain, Domain, Macros and Slots (Simple operator)
    verifyMultipleDefinition(symbStrName, symbolType, TomSyntaxChecker.OPERATOR);
    verifySymbolCodomain(getSymbolCodomain(tomSymbol), symbStrName, symbolType);
    domainLength = verifySymbolDomain(getSymbolDomain(tomSymbol), symbStrName, symbolType);
    verifySymbolMacroFunctions(optionList, domainLength, symbolType);
  } //verifySymbol

  private  void verifySymbolCodomain(TomType codomain, String symbName, String symbolType) {
     if(codomain instanceof  tom.engine.adt.tomsignature.types.TomType) { { tom.engine.adt.tomsignature.types.TomType tom_match6_1=(( tom.engine.adt.tomsignature.types.TomType)codomain); if (tom_is_fun_sym_Codomain(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match6_1_astName=tom_get_slot_Codomain_astName(tom_match6_1); if (tom_is_fun_sym_Name(tom_match6_1_astName) ||  false ) { { String  tom_match6_1_astName_string=tom_get_slot_Name_string(tom_match6_1_astName); { String  tom_opName=tom_match6_1_astName_string; if ( true ) {

        if(symbolTable().getSymbolFromName(tom_opName) == null) {
          messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
              TomMessage.symbolCodomainError,
              new Object[]{symbName, codomain});
        }
        return;
       } } } } } } if ( true ) {


        if(!testTypeExistence(codomain.getString())) {
          messageError(currentTomStructureOrgTrack.getFileName(),currentTomStructureOrgTrack.getLine(),
              TomMessage.symbolCodomainError,
              new Object[]{symbName, codomain});
        }
       } } }

  }

  private  int verifySymbolDomain(TomTypeList args, String symbName, String symbolType) {
    int position = 1;
    if(symbolType == TomSyntaxChecker.CONSTRUCTOR) {
       if(args instanceof  tom.engine.adt.tomsignature.types.TomTypeList) { { tom.engine.adt.tomsignature.types.TomTypeList tom_match7_1=(( tom.engine.adt.tomsignature.types.TomTypeList)args); if (tom_is_fun_sym_concTomType(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTypeList tom_match7_1_list1=tom_match7_1; { tom.engine.adt.tomsignature.types.TomTypeList tom_match7_1_begin1=tom_match7_1_list1; { tom.engine.adt.tomsignature.types.TomTypeList tom_match7_1_end1=tom_match7_1_list1; { while (!(tom_is_empty_concTomType_TomTypeList(tom_match7_1_end1))) {tom_match7_1_list1=tom_match7_1_end1; { { tom.engine.adt.tomsignature.types.TomType tom_match7_1_2=tom_get_head_concTomType_TomTypeList(tom_match7_1_list1);tom_match7_1_list1=tom_get_tail_concTomType_TomTypeList(tom_match7_1_list1); if (tom_is_fun_sym_TomTypeAlone(tom_match7_1_2) ||  false ) { { String  tom_match7_1_2_string=tom_get_slot_TomTypeAlone_string(tom_match7_1_2); { String  tom_typeName=tom_match7_1_2_string; if ( true ) {
 // for each symbol types
          if(!testTypeExistence(tom_typeName)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.symbolDomainError,
                new Object[]{new Integer(position), symbName, (tom_typeName)});
          }
          position++;
         } } } } }tom_match7_1_end1=tom_get_tail_concTomType_TomTypeList(tom_match7_1_end1); } }tom_match7_1_list1=tom_match7_1_begin1; } } } } } } }

      return (position-1);
    } else { // OPARRAY and OPLIST
       if(args instanceof  tom.engine.adt.tomsignature.types.TomTypeList) { { tom.engine.adt.tomsignature.types.TomTypeList tom_match8_1=(( tom.engine.adt.tomsignature.types.TomTypeList)args); if (tom_is_fun_sym_concTomType(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTypeList tom_match8_1_list1=tom_match8_1; if (!(tom_is_empty_concTomType_TomTypeList(tom_match8_1_list1))) { { tom.engine.adt.tomsignature.types.TomType tom_match8_1_1=tom_get_head_concTomType_TomTypeList(tom_match8_1_list1);tom_match8_1_list1=tom_get_tail_concTomType_TomTypeList(tom_match8_1_list1); if (tom_is_fun_sym_TomTypeAlone(tom_match8_1_1) ||  false ) { { String  tom_match8_1_1_string=tom_get_slot_TomTypeAlone_string(tom_match8_1_1); { String  tom_typeName=tom_match8_1_1_string; if (tom_is_empty_concTomType_TomTypeList(tom_match8_1_list1)) { if ( true ) {

          if(!testTypeExistence(tom_typeName)) {
            messageError(currentTomStructureOrgTrack.getFileName(),
                currentTomStructureOrgTrack.getLine(),
                TomMessage.listSymbolDomainError,
                new Object[]{symbName, (tom_typeName)});
          }
         } } } } } } } } } } }
 //match
      return 1;
    }
  } //verifySymbolDomain

  private  void verifySymbolMacroFunctions(OptionList list, int domainLength, String symbolType) {
    ArrayList verifyList = new ArrayList();
    boolean foundOpMake = false;
    if(symbolType == TomSyntaxChecker.CONSTRUCTOR){ //Nothing absolutely necessary
    } else if(symbolType == TomSyntaxChecker.OP_ARRAY ) {
      verifyList.add(TomSyntaxChecker.MAKE_EMPTY);
      verifyList.add(TomSyntaxChecker.MAKE_APPEND);
    } else if(symbolType == TomSyntaxChecker.OP_LIST) {
      verifyList.add(TomSyntaxChecker.MAKE_EMPTY);
      verifyList.add(TomSyntaxChecker.MAKE_INSERT);
    }

     if(list instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1=(( tom.engine.adt.tomsignature.types.OptionList)list); if (tom_is_fun_sym_concOption(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_list1=tom_match9_1; { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_begin1=tom_match9_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match9_1_end1=tom_match9_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match9_1_end1))) {tom_match9_1_list1=tom_match9_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match9_1_2=tom_get_head_concOption_OptionList(tom_match9_1_list1);tom_match9_1_list1=tom_get_tail_concOption_OptionList(tom_match9_1_list1); if (tom_is_fun_sym_DeclarationToOption(tom_match9_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match9_1_2_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match9_1_2); { tom.engine.adt.tomsignature.types.Declaration tom_d=tom_match9_1_2_astDeclaration; if ( true ) {
 // for each Declaration
        Declaration decl=tom_d;
        matchblock:{
           if(decl instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match10_1=(( tom.engine.adt.tomsignature.types.Declaration)decl); if (tom_is_fun_sym_MakeEmptyArray(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_match10_1_orgTrack=tom_get_slot_MakeEmptyArray_orgTrack(tom_match10_1); { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match10_1_orgTrack; if ( true ) {checkField(TomSyntaxChecker.MAKE_EMPTY,verifyList,tom_orgTrack,symbolType)


;
              break matchblock;
             } } } } if (tom_is_fun_sym_MakeAddArray(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_varList=tom_get_slot_MakeAddArray_varList(tom_match10_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_varElt=tom_get_slot_MakeAddArray_varElt(tom_match10_1); { tom.engine.adt.tomsignature.types.Option tom_match10_1_orgTrack=tom_get_slot_MakeAddArray_orgTrack(tom_match10_1); if (tom_is_fun_sym_Variable(tom_match10_1_varList) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_varList_astName=tom_get_slot_Variable_astName(tom_match10_1_varList); if (tom_is_fun_sym_Name(tom_match10_1_varList_astName) ||  false ) { { String  tom_match10_1_varList_astName_string=tom_get_slot_Name_string(tom_match10_1_varList_astName); { String  tom_name1=tom_match10_1_varList_astName_string; if (tom_is_fun_sym_Variable(tom_match10_1_varElt) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_varElt_astName=tom_get_slot_Variable_astName(tom_match10_1_varElt); if (tom_is_fun_sym_Name(tom_match10_1_varElt_astName) ||  false ) { { String  tom_match10_1_varElt_astName_string=tom_get_slot_Name_string(tom_match10_1_varElt_astName); { String  tom_name2=tom_match10_1_varElt_astName_string; { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match10_1_orgTrack; if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.MAKE_APPEND,verifyList,tom_orgTrack,tom_name1,tom_name2,symbolType)

;
              break matchblock;
             } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeEmptyList(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_match10_1_orgTrack=tom_get_slot_MakeEmptyList_orgTrack(tom_match10_1); { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match10_1_orgTrack; if ( true ) {checkField(TomSyntaxChecker.MAKE_EMPTY,verifyList,tom_orgTrack,symbolType)


;
              break matchblock;
             } } } } if (tom_is_fun_sym_MakeAddList(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_varList=tom_get_slot_MakeAddList_varList(tom_match10_1); { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1_varElt=tom_get_slot_MakeAddList_varElt(tom_match10_1); { tom.engine.adt.tomsignature.types.Option tom_match10_1_orgTrack=tom_get_slot_MakeAddList_orgTrack(tom_match10_1); if (tom_is_fun_sym_Variable(tom_match10_1_varList) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_varList_astName=tom_get_slot_Variable_astName(tom_match10_1_varList); if (tom_is_fun_sym_Name(tom_match10_1_varList_astName) ||  false ) { { String  tom_match10_1_varList_astName_string=tom_get_slot_Name_string(tom_match10_1_varList_astName); { String  tom_name1=tom_match10_1_varList_astName_string; if (tom_is_fun_sym_Variable(tom_match10_1_varElt) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match10_1_varElt_astName=tom_get_slot_Variable_astName(tom_match10_1_varElt); if (tom_is_fun_sym_Name(tom_match10_1_varElt_astName) ||  false ) { { String  tom_match10_1_varElt_astName_string=tom_get_slot_Name_string(tom_match10_1_varElt_astName); { String  tom_name2=tom_match10_1_varElt_astName_string; { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match10_1_orgTrack; if ( true ) {checkFieldAndLinearArgs(TomSyntaxChecker.MAKE_INSERT,verifyList,tom_orgTrack,tom_name1,tom_name2,symbolType)

;
              break matchblock;
             } } } } } } } } } } } } } } } } if (tom_is_fun_sym_MakeDecl(tom_match10_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match10_1_args=tom_get_slot_MakeDecl_args(tom_match10_1); { tom.engine.adt.tomsignature.types.Option tom_match10_1_orgTrack=tom_get_slot_MakeDecl_orgTrack(tom_match10_1); { tom.engine.adt.tomsignature.types.TomList tom_makeArgsList=tom_match10_1_args; if (tom_is_fun_sym_OriginTracking(tom_match10_1_orgTrack) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_og=tom_match10_1_orgTrack; { String  tom_match10_1_orgTrack_fileName=tom_get_slot_OriginTracking_fileName(tom_match10_1_orgTrack); { int  tom_match10_1_orgTrack_line=tom_get_slot_OriginTracking_line(tom_match10_1_orgTrack); { String  tom_fileName=tom_match10_1_orgTrack_fileName; { int  tom_line=tom_match10_1_orgTrack_line; if ( true ) {


              if (!foundOpMake) {
                foundOpMake = true;
                verifyMakeDeclArgs(tom_makeArgsList,domainLength,tom_og,symbolType);
              } else {
                messageError(tom_fileName, tom_line,
                             TomMessage.macroFunctionRepeated,
                             new Object[]{TomSyntaxChecker.MAKE});
              }
              break matchblock;
             } } } } } } } } } } } } }

        }
       } } } } }tom_match9_1_end1=tom_get_tail_concOption_OptionList(tom_match9_1_end1); } }tom_match9_1_list1=tom_match9_1_begin1; } } } } } } }

    if(!verifyList.isEmpty()) {
      messageMissingMacroFunctions(symbolType, verifyList);
    }
  }  //verifySymbolMacroFunctions

  private  void verifyMakeDeclArgs(TomList argsList, int domainLength, Option orgTrack, String symbolType){
      // we test the necessity to use different names for each variable-parameter.
    int nbArgs = 0;
    ArrayList listVar = new ArrayList();
     if(argsList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match11_1=(( tom.engine.adt.tomsignature.types.TomList)argsList); if (tom_is_fun_sym_concTomTerm(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match11_1_list1=tom_match11_1; { tom.engine.adt.tomsignature.types.TomList tom_match11_1_begin1=tom_match11_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match11_1_end1=tom_match11_1_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match11_1_end1))) {tom_match11_1_list1=tom_match11_1_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match11_1_2=tom_get_head_concTomTerm_TomList(tom_match11_1_list1);tom_match11_1_list1=tom_get_tail_concTomTerm_TomList(tom_match11_1_list1); if (tom_is_fun_sym_Variable(tom_match11_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match11_1_2_astName=tom_get_slot_Variable_astName(tom_match11_1_2); if (tom_is_fun_sym_Name(tom_match11_1_2_astName) ||  false ) { { String  tom_match11_1_2_astName_string=tom_get_slot_Name_string(tom_match11_1_2_astName); { String  tom_name=tom_match11_1_2_astName_string; if ( true ) {
 // for each Macro variable
        if(listVar.contains(tom_name)) {
          messageError(orgTrack.getFileName(),orgTrack.getLine(),
                       TomMessage.nonLinearMacroFunction,
                       new Object[]{TomSyntaxChecker.MAKE, (tom_name)});
        } else {
          listVar.add(tom_name);
        }
        nbArgs++;
       } } } } } } }tom_match11_1_end1=tom_get_tail_concTomTerm_TomList(tom_match11_1_end1); } }tom_match11_1_list1=tom_match11_1_begin1; } } } } } } }

    if(nbArgs != domainLength) {
      messageError(orgTrack.getFileName(),orgTrack.getLine(),
                   TomMessage.badMakeDefinition,
                   new Object[]{new Integer(nbArgs), new Integer(domainLength)});
    }
  } //verifyMakeDeclArgs

  private  void verifySymbolPairNameDeclList(PairNameDeclList pairNameDeclList, String symbolType) {
      // we test the existence of 2 same slot names
    ArrayList listSlot = new ArrayList();
     if(pairNameDeclList instanceof  tom.engine.adt.tomsignature.types.PairNameDeclList) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1=(( tom.engine.adt.tomsignature.types.PairNameDeclList)pairNameDeclList); if (tom_is_fun_sym_concPairNameDecl(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1_list1=tom_match12_1; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1_begin1=tom_match12_1_list1; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.engine.adt.tomsignature.types.PairNameDecl tom_match12_1_2=tom_get_head_concPairNameDecl_PairNameDeclList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match12_1_list1); if (tom_is_fun_sym_PairNameDecl(tom_match12_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match12_1_2_slotName=tom_get_slot_PairNameDecl_slotName(tom_match12_1_2); if (tom_is_fun_sym_Name(tom_match12_1_2_slotName) ||  false ) { { String  tom_match12_1_2_slotName_string=tom_get_slot_Name_string(tom_match12_1_2_slotName); { String  tom_name=tom_match12_1_2_slotName_string; if ( true ) {
 // for each Slot
        if(listSlot.contains(tom_name)) {
            //TODO
            //messageWarningTwoSameSlotDeclError(name, orgTrack, symbolType);
        } else {
          listSlot.add(tom_name);
        }
       } } } } } } }tom_match12_1_end1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

  } //verifySymbolPairNameDeclList

  private  void messageMissingMacroFunctions(String symbolType, ArrayList list) {
    StringBuffer listOfMissingMacros = new StringBuffer();
    for(int i=0;i<list.size();i++) {
      listOfMissingMacros.append(list.get(i) + ",  ");
    }
    String stringListOfMissingMacros = listOfMissingMacros.substring(0, listOfMissingMacros.length()-3);
    messageError(currentTomStructureOrgTrack.getFileName(),
        currentTomStructureOrgTrack.getLine(),
                 TomMessage.missingMacroFunctions,
                 new Object[]{stringListOfMissingMacros});
  } //messageMissingMacroFunctions

  //////////////////////////////// /
  // MATCH VERIFICATION CONCERNS ///
  //////////////////////////////////

  /*
   * Given a MatchConstruct's subject list and pattern-action list
   */
  private  void verifyMatch(TomList subjectList, PatternInstructionList patternInstructionList, OptionList list) {
    currentTomStructureOrgTrack = findOriginTracking(list);
    ArrayList typeMatchArgs = new ArrayList(),
      nameMatchArgs = new ArrayList();
    // From the subjects list(match definition), we test each used type and keep them in memory
     if(subjectList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match13_1=(( tom.engine.adt.tomsignature.types.TomList)subjectList); if (tom_is_fun_sym_concTomTerm(tom_match13_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match13_1_list1=tom_match13_1; { tom.engine.adt.tomsignature.types.TomList tom_match13_1_begin1=tom_match13_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match13_1_end1=tom_match13_1_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match13_1_end1))) {tom_match13_1_list1=tom_match13_1_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_match13_1_2=tom_get_head_concTomTerm_TomList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_concTomTerm_TomList(tom_match13_1_list1); if (tom_is_fun_sym_TLVar(tom_match13_1_2) ||  false ) { { String  tom_match13_1_2_strName=tom_get_slot_TLVar_strName(tom_match13_1_2); { tom.engine.adt.tomsignature.types.TomType tom_match13_1_2_astType=tom_get_slot_TLVar_astType(tom_match13_1_2); { String  tom_name=tom_match13_1_2_strName; if (tom_is_fun_sym_TomTypeAlone(tom_match13_1_2_astType) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_tomType=tom_match13_1_2_astType; { String  tom_match13_1_2_astType_string=tom_get_slot_TomTypeAlone_string(tom_match13_1_2_astType); { String  tom_type=tom_match13_1_2_astType_string; if ( true ) {
 // for each Match args
        if (!testTypeExistence(tom_type)) {
          messageError(currentTomStructureOrgTrack.getFileName(),
              currentTomStructureOrgTrack.getLine(),
                       TomMessage.unknownMatchArgumentTypeInSignature,
                       new Object[]{tom_name, (tom_type)});
          typeMatchArgs.add(null);
        } else {
          typeMatchArgs.add(tom_tomType);
        }
        if(nameMatchArgs.indexOf(tom_name) == -1) {
          nameMatchArgs.add(tom_name);
        } else {
          // Maybe its an error to have the 2 same name variable in the match definition: warn the user
          messageWarning(currentTomStructureOrgTrack.getFileName(),
              currentTomStructureOrgTrack.getLine(),
              TomMessage.repeatedMatchArgumentName,
              new Object[]{(tom_name)});
        }
       } } } } } } } } } }tom_match13_1_end1=tom_get_tail_concTomTerm_TomList(tom_match13_1_end1); } }tom_match13_1_list1=tom_match13_1_begin1; } } } } } } }

    int nbExpectedArgs = typeMatchArgs.size();
    // we now compare pattern to its definition
     if(patternInstructionList instanceof  tom.engine.adt.tomsignature.types.PatternInstructionList) { { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match14_1=(( tom.engine.adt.tomsignature.types.PatternInstructionList)patternInstructionList); if (tom_is_fun_sym_concPatternInstruction(tom_match14_1) ||  false ) { { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match14_1_list1=tom_match14_1; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match14_1_begin1=tom_match14_1_list1; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match14_1_end1=tom_match14_1_list1; { while (!(tom_is_empty_concPatternInstruction_PatternInstructionList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1; { { tom.engine.adt.tomsignature.types.PatternInstruction tom_match14_1_2=tom_get_head_concPatternInstruction_PatternInstructionList(tom_match14_1_list1);tom_match14_1_list1=tom_get_tail_concPatternInstruction_PatternInstructionList(tom_match14_1_list1); if (tom_is_fun_sym_PatternInstruction(tom_match14_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.Pattern tom_match14_1_2_pattern=tom_get_slot_PatternInstruction_pattern(tom_match14_1_2); if (tom_is_fun_sym_Pattern(tom_match14_1_2_pattern) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match14_1_2_pattern_tomList=tom_get_slot_Pattern_tomList(tom_match14_1_2_pattern); { tom.engine.adt.tomsignature.types.TomList tom_match14_1_2_pattern_guards=tom_get_slot_Pattern_guards(tom_match14_1_2_pattern); { tom.engine.adt.tomsignature.types.TomList tom_terms=tom_match14_1_2_pattern_tomList; { tom.engine.adt.tomsignature.types.TomList tom_guards=tom_match14_1_2_pattern_guards; if ( true ) {

        // control each pattern vs the match definition
        verifyMatchPattern(tom_terms,typeMatchArgs,nbExpectedArgs);
        verifyWhenPattern(tom_guards);
       } } } } } } } } }tom_match14_1_end1=tom_get_tail_concPatternInstruction_PatternInstructionList(tom_match14_1_end1); } }tom_match14_1_list1=tom_match14_1_begin1; } } } } } } }

  }

  // each patternList shall have the expected length and each term shall be valid
  private  void verifyMatchPattern(TomList termList, ArrayList typeMatchArgs, int nbExpectedArgs) {
    int nbFoundArgs = termList.getLength();
    if(nbFoundArgs != nbExpectedArgs) {
      OptionList og = termList.getHead().getOption();
      messageError(findOriginTrackingFileName(og),findOriginTrackingLine(og),
                   TomMessage.badMatchNumberArgument,
                   new Object[]{new Integer(nbExpectedArgs), new Integer(nbFoundArgs)});
      // we can not continue because we will use the fact that each element of the pattern
      // has the expected type declared in the Match definition
      return ;
    }

    TomType expectedType;
    int counter = 0;
     if(termList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match15_1=(( tom.engine.adt.tomsignature.types.TomList)termList); if (tom_is_fun_sym_concTomTerm(tom_match15_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match15_1_list1=tom_match15_1; { tom.engine.adt.tomsignature.types.TomList tom_match15_1_begin1=tom_match15_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match15_1_end1=tom_match15_1_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match15_1_end1))) {tom_match15_1_list1=tom_match15_1_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_get_head_concTomTerm_TomList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_concTomTerm_TomList(tom_match15_1_list1); if ( true ) {
 // no term can be a  Var* nor _*: not allowed as top leftmost symbol
        TermDescription termDesc = analyseTerm(tom_term);
        if(termDesc.getTermClass() == UNAMED_VARIABLE_STAR || termDesc.getTermClass() == VARIABLE_STAR) {
          messageError(termDesc.getFileName(),termDesc.getLine(),
                       TomMessage.incorrectVariableStarInMatch,
                       new Object[]{termDesc.getName()});
        } else {    // Analyse the term if expectedType != null
          expectedType = (TomType)typeMatchArgs.get(counter);
          if (expectedType != null) {
            // the type is known and found in the match signature
            validateTerm(tom_term, expectedType, false, true, false);
          }
        }
        counter++;
       } }tom_match15_1_end1=tom_get_tail_concTomTerm_TomList(tom_match15_1_end1); } }tom_match15_1_list1=tom_match15_1_begin1; } } } } } } }

  }

  // each term shall be valid
  private  void verifyWhenPattern(TomList termList) {
     if(termList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match16_1=(( tom.engine.adt.tomsignature.types.TomList)termList); if (tom_is_fun_sym_concTomTerm(tom_match16_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match16_1_list1=tom_match16_1; { tom.engine.adt.tomsignature.types.TomList tom_match16_1_begin1=tom_match16_1_list1; { tom.engine.adt.tomsignature.types.TomList tom_match16_1_end1=tom_match16_1_list1; { while (!(tom_is_empty_concTomTerm_TomList(tom_match16_1_end1))) {tom_match16_1_list1=tom_match16_1_end1; { { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_get_head_concTomTerm_TomList(tom_match16_1_list1);tom_match16_1_list1=tom_get_tail_concTomTerm_TomList(tom_match16_1_list1); if ( true ) {

        // the type is boolean, no variablestar, toplevel and permissive
        validateTerm(tom_term,tom_make_TomTypeAlone("boolean") ,false,true,true);
       } }tom_match16_1_end1=tom_get_tail_concTomTerm_TomList(tom_match16_1_end1); } }tom_match16_1_list1=tom_match16_1_begin1; } } } } } } }

  }

  /////////////////////////////////
  //STRATEGY VERIFICATION CONCERNS /
  /////////////////////////////////
  private  void verifyStrategy(TomVisitList visitList){
    while(!visitList.isEmpty()) {
      TomVisit visit = visitList.getHead();
      verifyVisit(visit);
      // next visit
      visitList = visitList.getTail();
    }
  }

  private  void verifyVisit(TomVisit visit){
    ArrayList typeMatchArgs = new ArrayList();
     if(visit instanceof  tom.engine.adt.tomsignature.types.TomVisit) { { tom.engine.adt.tomsignature.types.TomVisit tom_match17_1=(( tom.engine.adt.tomsignature.types.TomVisit)visit); if (tom_is_fun_sym_VisitTerm(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match17_1_vNode=tom_get_slot_VisitTerm_vNode(tom_match17_1); { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match17_1_astPatternInstructionList=tom_get_slot_VisitTerm_astPatternInstructionList(tom_match17_1); { tom.engine.adt.tomsignature.types.OptionList tom_match17_1_option=tom_get_slot_VisitTerm_option(tom_match17_1); { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match17_1_vNode; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_patternInstructionList=tom_match17_1_astPatternInstructionList; if ( true ) {

        typeMatchArgs.add(tom_type);
        // we now compare pattern to its definition
         if(tom_patternInstructionList instanceof  tom.engine.adt.tomsignature.types.PatternInstructionList) { { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match18_1=(( tom.engine.adt.tomsignature.types.PatternInstructionList)tom_patternInstructionList); if (tom_is_fun_sym_concPatternInstruction(tom_match18_1) ||  false ) { { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match18_1_list1=tom_match18_1; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match18_1_begin1=tom_match18_1_list1; { tom.engine.adt.tomsignature.types.PatternInstructionList tom_match18_1_end1=tom_match18_1_list1; { while (!(tom_is_empty_concPatternInstruction_PatternInstructionList(tom_match18_1_end1))) {tom_match18_1_list1=tom_match18_1_end1; { { tom.engine.adt.tomsignature.types.PatternInstruction tom_match18_1_2=tom_get_head_concPatternInstruction_PatternInstructionList(tom_match18_1_list1);tom_match18_1_list1=tom_get_tail_concPatternInstruction_PatternInstructionList(tom_match18_1_list1); if (tom_is_fun_sym_PatternInstruction(tom_match18_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.Pattern tom_match18_1_2_pattern=tom_get_slot_PatternInstruction_pattern(tom_match18_1_2); if (tom_is_fun_sym_Pattern(tom_match18_1_2_pattern) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match18_1_2_pattern_tomList=tom_get_slot_Pattern_tomList(tom_match18_1_2_pattern); { tom.engine.adt.tomsignature.types.TomList tom_match18_1_2_pattern_guards=tom_get_slot_Pattern_guards(tom_match18_1_2_pattern); { tom.engine.adt.tomsignature.types.TomList tom_terms=tom_match18_1_2_pattern_tomList; { tom.engine.adt.tomsignature.types.TomList tom_guards=tom_match18_1_2_pattern_guards; if ( true ) {

            // control each pattern vs the match definition
            //always 1 expected argument in visit
            verifyMatchPattern(tom_terms,typeMatchArgs,1);
            verifyWhenPattern(tom_guards);
           } } } } } } } } }tom_match18_1_end1=tom_get_tail_concPatternInstruction_PatternInstructionList(tom_match18_1_end1); } }tom_match18_1_list1=tom_match18_1_begin1; } } } } } } }

       } } } } } } } } }

  }

  /////////////////////////////////
  // RULE VERIFICATION CONCERNS ///
  /////////////////////////////////
  private  void verifyRule(TomRuleList ruleList, OptionList optionList) {
    int ruleNumber = 0;
    currentTomStructureOrgTrack = findOriginTracking(optionList);
    String headSymbolName = "Unknown return type";
     if(ruleList instanceof  tom.engine.adt.tomsignature.types.TomRuleList) { { tom.engine.adt.tomsignature.types.TomRuleList tom_match19_1=(( tom.engine.adt.tomsignature.types.TomRuleList)ruleList);b1: { if (tom_is_fun_sym_concTomRule(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomRuleList tom_match19_1_list1=tom_match19_1; { tom.engine.adt.tomsignature.types.TomRuleList tom_match19_1_begin1=tom_match19_1_list1; { tom.engine.adt.tomsignature.types.TomRuleList tom_match19_1_end1=tom_match19_1_list1; { while (!(tom_is_empty_concTomRule_TomRuleList(tom_match19_1_end1))) {tom_match19_1_list1=tom_match19_1_end1; { { tom.engine.adt.tomsignature.types.TomRule tom_match19_1_2=tom_get_head_concTomRule_TomRuleList(tom_match19_1_list1);tom_match19_1_list1=tom_get_tail_concTomRule_TomRuleList(tom_match19_1_list1); if (tom_is_fun_sym_RewriteRule(tom_match19_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_2_lhs=tom_get_slot_RewriteRule_lhs(tom_match19_1_2); { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_2_rhs=tom_get_slot_RewriteRule_rhs(tom_match19_1_2); { tom.engine.adt.tomsignature.types.InstructionList tom_match19_1_2_condList=tom_get_slot_RewriteRule_condList(tom_match19_1_2); { tom.engine.adt.tomsignature.types.OptionList tom_match19_1_2_option=tom_get_slot_RewriteRule_option(tom_match19_1_2); if (tom_is_fun_sym_Term(tom_match19_1_2_lhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_2_lhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match19_1_2_lhs); { tom.engine.adt.tomsignature.types.TomTerm tom_lhs=tom_match19_1_2_lhs_tomTerm; if (tom_is_fun_sym_Term(tom_match19_1_2_rhs) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match19_1_2_rhs_tomTerm=tom_get_slot_Term_tomTerm(tom_match19_1_2_rhs); { tom.engine.adt.tomsignature.types.TomTerm tom_rhs=tom_match19_1_2_rhs_tomTerm; if ( true ) {

        headSymbolName = verifyLhsRuleAndConstructorEgality(tom_lhs,headSymbolName,ruleNumber);
        if( headSymbolName == null ) { return; }
        verifyRhsRuleStructure(tom_rhs,headSymbolName);
        ruleNumber++;
       } } } } } } } } } } } } }tom_match19_1_end1=tom_get_tail_concTomRule_TomRuleList(tom_match19_1_end1); } }tom_match19_1_list1=tom_match19_1_begin1; } } } } }} } }

  }

  private  String verifyLhsRuleAndConstructorEgality(TomTerm lhs, String  headSymbolName, int ruleNumber) {
    String currentHeadSymbolName;
    TomType lhsType  = null;
    TomSymbol symbol = null;
      // We support only TermAppl and RecordAppl
    int termClass = getClass(lhs);
    if(  termClass != TERM_APPL && termClass != RECORD_APPL) {
      String termName;
      if (termClass == XML_APPL) {
        termName = "XML construct "+getName(lhs);
      } else if (termClass ==  APPL_DISJUNCTION || termClass == RECORD_APPL_DISJUNCTION) {
        termName = "Disjunction";
      } else {
        termName = getName(lhs);
      }
      messageError(findOriginTrackingFileName(lhs.getOption()),
          findOriginTrackingLine(lhs.getOption()),
          TomMessage.incorrectRuleLHSClass, new Object[]{termName});
      return null;
    }

    currentHeadSymbolName = getName(lhs);
    if(ruleNumber == 0) {
      // update the root of lhs: it becomes a defined symbol
      symbol = ASTFactory.updateDefinedSymbol(symbolTable(),lhs);
      if( symbol == null ) {
        messageError(findOriginTrackingFileName(lhs.getOption()),
            findOriginTrackingLine(lhs.getOption()),
            TomMessage.unknownSymbol,
            new Object[]{currentHeadSymbolName});
        // We can not continue anymore
        return null;
      }
      //ensure we are able to construct this symbol
      if ( !findMakeDecl(symbol.getOption())) {
        messageError(findOriginTrackingFileName(lhs.getOption()),
            findOriginTrackingLine(lhs.getOption()),
                     TomMessage.noRuleMakeDecl,
                     new Object[]{currentHeadSymbolName});
      }

      if(alreadyStudiedRule.contains(currentHeadSymbolName)) {
        messageError(currentTomStructureOrgTrack.getFileName(),
          currentTomStructureOrgTrack.getLine(),
                     TomMessage.multipleRuleDefinition,
                     new Object[]{currentHeadSymbolName});
        return null;
      } else {
        alreadyStudiedRule.add(currentHeadSymbolName);
      }
    } else { //  ruleNumber > 0
      // Test constructor equality
      String newName = getName(lhs);
      if (!headSymbolName.equals(currentHeadSymbolName)) {
        messageError(findOriginTrackingFileName(lhs.getOption()),
          findOriginTrackingLine(lhs.getOption()),
                     TomMessage.differentRuleConstructor,
                     new Object[]{headSymbolName, currentHeadSymbolName});
      }
    }
    symbol = getSymbolFromName(currentHeadSymbolName);
    lhsType = getSymbolCodomain(symbol);
    // analyse the term
    validateTerm(lhs, lhsType,
        isListOperator(symbol)||isArrayOperator(symbol), true, false);
    return currentHeadSymbolName;
  }

  private static boolean findMakeDecl(OptionList list) {
     if(list instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match20_1=(( tom.engine.adt.tomsignature.types.OptionList)list); if (tom_is_fun_sym_concOption(tom_match20_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match20_1_list1=tom_match20_1; { tom.engine.adt.tomsignature.types.OptionList tom_match20_1_begin1=tom_match20_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match20_1_end1=tom_match20_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match20_1_end1))) {tom_match20_1_list1=tom_match20_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match20_1_2=tom_get_head_concOption_OptionList(tom_match20_1_list1);tom_match20_1_list1=tom_get_tail_concOption_OptionList(tom_match20_1_list1); if (tom_is_fun_sym_DeclarationToOption(tom_match20_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match20_1_2_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match20_1_2); if (tom_is_fun_sym_MakeDecl(tom_match20_1_2_astDeclaration) ||  false ) { if ( true ) {

        return true;
       } } } } }tom_match20_1_end1=tom_get_tail_concOption_OptionList(tom_match20_1_end1); } }tom_match20_1_list1=tom_match20_1_begin1; } } } } } } }

    return false;
  }

  /**
   * Rhs shall have no underscore, be a var* nor _*, nor a RecordAppl
   */
  private  void verifyRhsRuleStructure(TomTerm rhs, String lhsHeadSymbolName) {
    int termClass = getClass(rhs); 
    if(termClass != TERM_APPL && termClass != VARIABLE) {
      String termName;
      if (termClass == XML_APPL) {
        termName = "XML construct "+getName(rhs);
      } else if (termClass ==  APPL_DISJUNCTION || termClass == RECORD_APPL_DISJUNCTION) {
        termName = "Disjunction";
      } else if (termClass == RECORD_APPL) {
        termName = getName(rhs)+"[...]";
      } else {
        termName = getName(rhs);
      }
      messageError(findOriginTrackingFileName(rhs.getOption()),
          findOriginTrackingLine(rhs.getOption()),
                   TomMessage.incorrectRuleRHSClass, new Object[]{termName});
      return;
    }

    TomSymbol symbol = getSymbolFromName(lhsHeadSymbolName);
    TomType lhsType = getSymbolCodomain(symbol);
    TermDescription termDesc = validateTerm(rhs, lhsType, isListOperator(symbol)||isArrayOperator(symbol), true, true);
    TomType rhsType = termDesc.getType();
    if(termClass == TERM_APPL && rhsType != lhsType) {
        String rhsTypeName;
        if(rhsType.isEmptyType()) {
          rhsTypeName = "No Type Found";
        } else {
          rhsTypeName = rhsType.getString();
			messageError(findOriginTrackingFileName(rhs.getOption()),
					findOriginTrackingLine(rhs.getOption()),
					TomMessage.incorrectRuleRHSType,
					new Object[]{rhsTypeName, lhsType.getString()});
        }
		}
	}

  /**
   * Analyse a term given an expected type and re-enter recursively on children
   */
  public  TermDescription validateTerm(TomTerm term, TomType expectedType, boolean listSymbol, boolean topLevel, boolean permissive) {
    String termName = "emptyName";
    TomType type = null;
    int termClass=-1;
    String fileName = "unknown";
    int decLine=-1;
    Option orgTrack;
    matchblock:{
       if(term instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match21_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if (tom_is_fun_sym_TermAppl(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_TermAppl_option(tom_match21_1); { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList=tom_get_slot_TermAppl_nameList(tom_match21_1); { tom.engine.adt.tomsignature.types.TomList tom_match21_1_args=tom_get_slot_TermAppl_args(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; if (tom_is_fun_sym_concTomName(tom_match21_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList_list1=tom_match21_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match21_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match21_1_nameList_1=tom_get_head_concTomName_NameList(tom_match21_1_nameList_list1);tom_match21_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match21_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match21_1_nameList_1) ||  false ) { { String  tom_match21_1_nameList_1_string=tom_get_slot_Name_string(tom_match21_1_nameList_1); if (tom_terms_equal_String("", tom_match21_1_nameList_1_string) ||  false ) { if (tom_is_empty_concTomName_NameList(tom_match21_1_nameList_list1)) { { tom.engine.adt.tomsignature.types.TomList tom_args=tom_match21_1_args; if ( true ) {

          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = UNAMED_APPL;
            // there shall be only one list symbol with expectedType as Codomain
            // else ensureValidUnamedList returns null
          TomSymbol symbol = ensureValidUnamedList(expectedType, fileName,decLine);
          if(symbol == null) {
            break matchblock;
          } else {
            //there is only one list symbol and its type is the expected one
            // (ensure by ensureValidUnamedList call)
            type = expectedType;
            termName = symbol.getAstName().getString();
              // whatever the arity is, we continue recursively and there is only one element in the Domain
            validateListOperatorArgs(tom_args, symbol.getTypesToType().getDomain().getHead(),permissive);
            if(permissive) { System.out.println("UnamedList but permissive");}
            break matchblock;
          }
         } } } } } } } } } } } } } } } if (tom_is_fun_sym_TermAppl(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_TermAppl_option(tom_match21_1); { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList=tom_get_slot_TermAppl_nameList(tom_match21_1); { tom.engine.adt.tomsignature.types.TomList tom_match21_1_args=tom_get_slot_TermAppl_args(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match21_1_nameList; { tom.engine.adt.tomsignature.types.TomList tom_arguments=tom_match21_1_args; if ( true ) {


          TomList args = tom_arguments;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = TERM_APPL;

          TomSymbol symbol = ensureValidApplDisjunction(tom_nameList, expectedType, fileName, decLine, permissive, topLevel);

          if(symbol == null) {
            validateTermThrough(term,permissive);
            break matchblock;
          }
            // Type is OK
          type = expectedType;
          termName = tom_nameList.getHead().getString();
          boolean listOp = (isListOperator(symbol) || isArrayOperator(symbol));
          if(listOp) {
              // whatever the arity is, we continue recursively and there is only one element in the Domain
            validateListOperatorArgs(args, symbol.getTypesToType().getDomain().getHead(),permissive);
          } else {
            // the arity is important also there are different types in Domain
            TomTypeList  types = symbol.getTypesToType().getDomain();
            int nbArgs = args.getLength();
            int nbExpectedArgs = types.getLength();
            if(nbArgs != nbExpectedArgs) {
              messageError(fileName,decLine, TomMessage.symbolNumberArgument,
                  new Object[]{termName, new Integer(nbExpectedArgs), new Integer(nbArgs)});
              break matchblock;
            }
            while(!args.isEmpty()) {
                // repeat analyse with associated expected type and control arity
              validateTerm(args.getHead(), types.getHead(), listOp/*false*/, false, permissive);
              args = args.getTail();
              types = types.getTail();
            }
          }
          break matchblock;
         } } } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_rec=tom_match21_1; { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_RecordAppl_option(tom_match21_1); { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match21_1); { tom.engine.adt.tomsignature.types.SlotList tom_match21_1_slots=tom_get_slot_RecordAppl_slots(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; { tom.engine.adt.tomsignature.types.NameList tom_nameList=tom_match21_1_nameList; { tom.engine.adt.tomsignature.types.SlotList tom_slotList=tom_match21_1_slots; if ( true ) {


          if(permissive) {
            // Record are not allowed in a rhs
            messageError(findOriginTrackingFileName(tom_options),findOriginTrackingLine(tom_options), TomMessage.incorrectRuleRHSClass,
                         new Object[]{getName(tom_rec)+"[...]"});
          }
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          termClass = RECORD_APPL;

          TomSymbol symbol = ensureValidRecordDisjunction(tom_nameList, expectedType, fileName, decLine, true);
          if(symbol == null) {
            break matchblock;
          }

          boolean first = true;
           if(tom_nameList instanceof  tom.engine.adt.tomsignature.types.NameList) { { tom.engine.adt.tomsignature.types.NameList tom_match22_1=(( tom.engine.adt.tomsignature.types.NameList)tom_nameList); if (tom_is_fun_sym_concTomName(tom_match22_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match22_1_list1=tom_match22_1; { tom.engine.adt.tomsignature.types.NameList tom_match22_1_begin1=tom_match22_1_list1; { tom.engine.adt.tomsignature.types.NameList tom_match22_1_end1=tom_match22_1_list1; { while (!(tom_is_empty_concTomName_NameList(tom_match22_1_end1))) {tom_match22_1_list1=tom_match22_1_end1; { { tom.engine.adt.tomsignature.types.TomName tom_match22_1_2=tom_get_head_concTomName_NameList(tom_match22_1_list1);tom_match22_1_list1=tom_get_tail_concTomName_NameList(tom_match22_1_list1); if (tom_is_fun_sym_Name(tom_match22_1_2) ||  false ) { { String  tom_match22_1_2_string=tom_get_slot_Name_string(tom_match22_1_2); { String  tom_name=tom_match22_1_2_string; if ( true ) {





              verifyRecordStructure(tom_options, tom_name, tom_slotList, fileName,decLine);
             } } } } }tom_match22_1_end1=tom_get_tail_concTomName_NameList(tom_match22_1_end1); } }tom_match22_1_list1=tom_match22_1_begin1; } } } } } } }


          type = expectedType;
          termName = tom_nameList.getHead().getString();
          break matchblock;
         } } } } } } } } } if (tom_is_fun_sym_XMLAppl(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_XMLAppl_option(tom_match21_1); { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList=tom_get_slot_XMLAppl_nameList(tom_match21_1); { tom.engine.adt.tomsignature.types.TomList tom_match21_1_childList=tom_get_slot_XMLAppl_childList(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; if (tom_is_fun_sym_concTomName(tom_match21_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList_list1=tom_match21_1_nameList; { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList_begin1=tom_match21_1_nameList_list1; { tom.engine.adt.tomsignature.types.NameList tom_match21_1_nameList_end1=tom_match21_1_nameList_list1; { while (!(tom_is_empty_concTomName_NameList(tom_match21_1_nameList_end1))) {tom_match21_1_nameList_list1=tom_match21_1_nameList_end1; { { tom.engine.adt.tomsignature.types.TomName tom_match21_1_nameList_2=tom_get_head_concTomName_NameList(tom_match21_1_nameList_list1);tom_match21_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match21_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match21_1_nameList_2) ||  false ) { { String  tom_match21_1_nameList_2_string=tom_get_slot_Name_string(tom_match21_1_nameList_2); { tom.engine.adt.tomsignature.types.TomList tom_childList=tom_match21_1_childList; if ( true ) {


            // TODO: can we do it
            // ensureValidDisjunction(nameList); ??????????
          termClass = XML_APPL;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = getSymbolCodomain(getSymbolFromName(Constants.ELEMENT_NODE));
          termName = Constants.ELEMENT_NODE;

          TomList args = tom_childList;
          /*
           * we cannot use the following expression
           *   TomType TNodeType = symbolTable().getType(Constants.TNODE);
           * because TNodeType should be a TomTypeAlone and not an expanded type
           */
          TomType TNodeType = getSymbolCodomain(symbolTable().getSymbolFromName(Constants.ELEMENT_NODE));
          //System.out.println("TNodeType = " + TNodeType);
          while(!args.isEmpty()) {
            // repeat analyse with associated expected type and control arity
            validateTerm(args.getHead(), TNodeType, true, false, permissive);
            args = args.getTail();
          }

          break matchblock;
         } } } } }tom_match21_1_nameList_end1=tom_get_tail_concTomName_NameList(tom_match21_1_nameList_end1); } }tom_match21_1_nameList_list1=tom_match21_1_nameList_begin1; } } } } } } } } } } if (tom_is_fun_sym_Placeholder(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_Placeholder_option(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; if ( true ) {


          termClass = PLACE_HOLDER;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = "_";
          if(permissive) {
            messageError(fileName,decLine, TomMessage.incorrectRuleRHSClass,
                         new Object[]{termName});
          }
          break matchblock;
         } } } } if (tom_is_fun_sym_Variable(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_Variable_option(tom_match21_1); { tom.engine.adt.tomsignature.types.TomName tom_match21_1_astName=tom_get_slot_Variable_astName(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; if (tom_is_fun_sym_Name(tom_match21_1_astName) ||  false ) { { String  tom_match21_1_astName_string=tom_get_slot_Name_string(tom_match21_1_astName); { String  tom_name=tom_match21_1_astName_string; if ( true ) {


          termClass = VARIABLE;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = tom_name;
          break matchblock;
         } } } } } } } } if (tom_is_fun_sym_VariableStar(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_VariableStar_option(tom_match21_1); { tom.engine.adt.tomsignature.types.TomName tom_match21_1_astName=tom_get_slot_VariableStar_astName(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; if (tom_is_fun_sym_Name(tom_match21_1_astName) ||  false ) { { String  tom_match21_1_astName_string=tom_get_slot_Name_string(tom_match21_1_astName); { String  tom_name=tom_match21_1_astName_string; if ( true ) {


          termClass = VARIABLE_STAR;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = tom_name+"*";
          if(!listSymbol) {
            messageError(fileName,decLine, TomMessage.invalidVariableStarArgument,
                         new Object[]{termName});
          }
          break matchblock;
         } } } } } } } } if (tom_is_fun_sym_UnamedVariableStar(tom_match21_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match21_1_option=tom_get_slot_UnamedVariableStar_option(tom_match21_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match21_1_option; if ( true ) {


          termClass = UNAMED_VARIABLE_STAR;
          fileName = findOriginTrackingFileName(tom_options);
          decLine = findOriginTrackingLine(tom_options);
          type = null;
          termName = "_*";
          if(!listSymbol) {
            messageError(fileName,decLine, TomMessage.invalidVariableStarArgument,
                         new Object[]{termName});
          }
          if(permissive) {
            messageError(fileName,decLine, TomMessage.incorrectRuleRHSClass,
                         new Object[]{termName});
          }
          break matchblock;
         } } } } } }

      System.out.println("Strange term in pattern "+term);
      throw new TomRuntimeException("Strange Term "+term);
    }
    return new TermDescription(termClass, termName, fileName,decLine, type);
  }

  private  void validateTermThrough(TomTerm term, boolean permissive) {
     if(term instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match23_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if (tom_is_fun_sym_TermAppl(tom_match23_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomList tom_match23_1_args=tom_get_slot_TermAppl_args(tom_match23_1); { tom.engine.adt.tomsignature.types.TomList tom_arguments=tom_match23_1_args; if ( true ) {

        TomList args = tom_arguments;
        while(!args.isEmpty()) {
          TomTerm child = args.getHead();
          TomSymbol sym = getSymbolFromName(getName(child));
          if(sym != null) {
            validateTerm(child,sym.getTypesToType().getCodomain(),false,false,permissive);
          } else {
            validateTermThrough(child,permissive);
          }
          args = args.getTail();
        }
       } } } } } }

  }

  public  TermDescription analyseTerm(TomTerm term) {
    matchblock:{
       if(term instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match24_1=(( tom.engine.adt.tomsignature.types.TomTerm)term); if (tom_is_fun_sym_TermAppl(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_TermAppl_option(tom_match24_1); { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList=tom_get_slot_TermAppl_nameList(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if (tom_is_fun_sym_concTomName(tom_match24_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList_list1=tom_match24_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match24_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match24_1_nameList_1=tom_get_head_concTomName_NameList(tom_match24_1_nameList_list1);tom_match24_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match24_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match24_1_nameList_1) ||  false ) { { String  tom_match24_1_nameList_1_string=tom_get_slot_Name_string(tom_match24_1_nameList_1); { String  tom_str=tom_match24_1_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match24_1_nameList_list1)) { if ( true ) {

          if (tom_str.equals("")) {
            return new TermDescription(UNAMED_APPL, tom_str,
                findOriginTrackingFileName(tom_options),
                findOriginTrackingLine(tom_options), 
                null);
              // TODO
          } else {
            return new TermDescription(TERM_APPL, tom_str,
                findOriginTrackingFileName(tom_options),
                findOriginTrackingLine(tom_options),
                getSymbolCodomain(getSymbolFromName(tom_str)));
          }
         } } } } } } } } } } } } } if (tom_is_fun_sym_TermAppl(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_TermAppl_option(tom_match24_1); { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList=tom_get_slot_TermAppl_nameList(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if (tom_is_fun_sym_concTomName(tom_match24_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList_list1=tom_match24_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match24_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match24_1_nameList_1=tom_get_head_concTomName_NameList(tom_match24_1_nameList_list1);tom_match24_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match24_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match24_1_nameList_1) ||  false ) { { String  tom_match24_1_nameList_1_string=tom_get_slot_Name_string(tom_match24_1_nameList_1); { String  tom_name=tom_match24_1_nameList_1_string; if ( true ) {

          return new TermDescription(APPL_DISJUNCTION, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(tom_name)));
         } } } } } } } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_RecordAppl_option(tom_match24_1); { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if (tom_is_fun_sym_concTomName(tom_match24_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList_list1=tom_match24_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match24_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match24_1_nameList_1=tom_get_head_concTomName_NameList(tom_match24_1_nameList_list1);tom_match24_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match24_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match24_1_nameList_1) ||  false ) { { String  tom_match24_1_nameList_1_string=tom_get_slot_Name_string(tom_match24_1_nameList_1); { String  tom_name=tom_match24_1_nameList_1_string; if (tom_is_empty_concTomName_NameList(tom_match24_1_nameList_list1)) { if ( true ) {

          return new TermDescription(RECORD_APPL, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(tom_name)));
         } } } } } } } } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_RecordAppl_option(tom_match24_1); { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if (tom_is_fun_sym_concTomName(tom_match24_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match24_1_nameList_list1=tom_match24_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match24_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match24_1_nameList_1=tom_get_head_concTomName_NameList(tom_match24_1_nameList_list1);tom_match24_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match24_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match24_1_nameList_1) ||  false ) { { String  tom_match24_1_nameList_1_string=tom_get_slot_Name_string(tom_match24_1_nameList_1); { String  tom_name=tom_match24_1_nameList_1_string; if ( true ) {

          return new TermDescription(RECORD_APPL_DISJUNCTION,tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(tom_name)));
         } } } } } } } } } } } } if (tom_is_fun_sym_XMLAppl(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_XMLAppl_option(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if ( true ) {

          return new TermDescription(XML_APPL, Constants.ELEMENT_NODE,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),
              getSymbolCodomain(getSymbolFromName(Constants.ELEMENT_NODE)));
         } } } } if (tom_is_fun_sym_Placeholder(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_Placeholder_option(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if ( true ) {

          return new TermDescription(PLACE_HOLDER, "_",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } } if (tom_is_fun_sym_Variable(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_Variable_option(tom_match24_1); { tom.engine.adt.tomsignature.types.TomName tom_match24_1_astName=tom_get_slot_Variable_astName(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if (tom_is_fun_sym_Name(tom_match24_1_astName) ||  false ) { { String  tom_match24_1_astName_string=tom_get_slot_Name_string(tom_match24_1_astName); { String  tom_name=tom_match24_1_astName_string; if ( true ) {

          return new TermDescription(VARIABLE, tom_name,
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } } } } } } if (tom_is_fun_sym_VariableStar(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_VariableStar_option(tom_match24_1); { tom.engine.adt.tomsignature.types.TomName tom_match24_1_astName=tom_get_slot_VariableStar_astName(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if (tom_is_fun_sym_Name(tom_match24_1_astName) ||  false ) { { String  tom_match24_1_astName_string=tom_get_slot_Name_string(tom_match24_1_astName); { String  tom_name=tom_match24_1_astName_string; if ( true ) {

          return new TermDescription(VARIABLE_STAR, tom_name+"*",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } } } } } } if (tom_is_fun_sym_UnamedVariableStar(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match24_1_option=tom_get_slot_UnamedVariableStar_option(tom_match24_1); { tom.engine.adt.tomsignature.types.OptionList tom_options=tom_match24_1_option; if ( true ) {

          return new TermDescription(UNAMED_VARIABLE_STAR, "_*",
                findOriginTrackingFileName(tom_options),
              findOriginTrackingLine(tom_options),  null);
         } } } } } }

      System.out.println("Strange term "+term);
      throw new TomRuntimeException("Strange Term "+term);
    }
  }

  private  TomSymbol ensureValidUnamedList(TomType expectedType, String fileName,int decLine) {
    SymbolList symbolList = symbolTable().getSymbolFromType(expectedType);
    SymbolList filteredList = tom_make_emptySymbolList();
     if(symbolList instanceof  tom.engine.adt.tomsignature.types.SymbolList) { { tom.engine.adt.tomsignature.types.SymbolList tom_match25_1=(( tom.engine.adt.tomsignature.types.SymbolList)symbolList); if (tom_is_fun_sym_concTomSymbol(tom_match25_1) ||  false ) { { tom.engine.adt.tomsignature.types.SymbolList tom_match25_1_list1=tom_match25_1; { tom.engine.adt.tomsignature.types.SymbolList tom_match25_1_begin1=tom_match25_1_list1; { tom.engine.adt.tomsignature.types.SymbolList tom_match25_1_end1=tom_match25_1_list1; { while (!(tom_is_empty_concTomSymbol_SymbolList(tom_match25_1_end1))) {tom_match25_1_list1=tom_match25_1_end1; { { tom.engine.adt.tomsignature.types.TomSymbol tom_symbol=tom_get_head_concTomSymbol_SymbolList(tom_match25_1_list1);tom_match25_1_list1=tom_get_tail_concTomSymbol_SymbolList(tom_match25_1_list1); if ( true ) {

        if(isArrayOperator(tom_symbol) || isListOperator(tom_symbol)) {
          filteredList = tom_make_manySymbolList(tom_symbol,filteredList);
        }
       } }tom_match25_1_end1=tom_get_tail_concTomSymbol_SymbolList(tom_match25_1_end1); } }tom_match25_1_list1=tom_match25_1_begin1; } } } } } } }


    if(filteredList.isEmpty()) {
      messageError(fileName,decLine,
                   TomMessage.unknownUnamedList,
                   new Object[]{expectedType.getString()});
      return null;
    } else if(!filteredList.getTail().isEmpty()) {
      StringBuffer symbolsString = new StringBuffer();
      while(!filteredList.isEmpty()) {
        symbolsString .append(" " + filteredList.getHead().getAstName().getString());
        filteredList= filteredList.getTail();
      }
      messageError(fileName,decLine,
                   TomMessage.ambigousUnamedList,
                   new Object[]{expectedType.getString(), symbolsString.toString()});
      return null;
    } else {
      return filteredList.getHead();
    }
  }

  private  TomSymbol ensureValidApplDisjunction(NameList nameList, TomType expectedType, String fileName, int decLine,
                                               boolean permissive, boolean topLevel) {
    TomTypeList domainReference = null, currentDomain = null;
    TomSymbol symbol = null;

    if(nameList.isSingle()) { // Valid but has it a good type?
      String res = nameList.getHead().getString();
      symbol  =  getSymbolFromName(res);
      if (symbol == null ) {
        // this correspond to a term like 'unknown()' or unknown(s1, s2, ...)
        if(!permissive) {
          messageError(fileName,decLine,
              TomMessage.unknownSymbol,
              new Object[]{res});
        } else {
          messageWarning(fileName,decLine,
              TomMessage.unknownPermissiveSymbol,
              new Object[]{res});
        }
      } else { //known symbol
        if ( strictType  || !topLevel ) {
          if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomMessage.invalidCodomain, res, fileName,decLine)) {
            return null;
          }
        }
      }
      return symbol;
    }
      //  this is a disjunction
    if(permissive) {
      messageError(fileName,decLine,
                   TomMessage.impossiblePermissiveAndDisjunction,
                   new Object[]{});
    }

    // this part is common between Appl and records with multiple head symbols
    boolean first = true; // the first symbol give the expected type
     if(nameList instanceof  tom.engine.adt.tomsignature.types.NameList) { { tom.engine.adt.tomsignature.types.NameList tom_match26_1=(( tom.engine.adt.tomsignature.types.NameList)nameList); if (tom_is_fun_sym_concTomName(tom_match26_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match26_1_list1=tom_match26_1; { tom.engine.adt.tomsignature.types.NameList tom_match26_1_begin1=tom_match26_1_list1; { tom.engine.adt.tomsignature.types.NameList tom_match26_1_end1=tom_match26_1_list1; { while (!(tom_is_empty_concTomName_NameList(tom_match26_1_end1))) {tom_match26_1_list1=tom_match26_1_end1; { { tom.engine.adt.tomsignature.types.TomName tom_match26_1_2=tom_get_head_concTomName_NameList(tom_match26_1_list1);tom_match26_1_list1=tom_get_tail_concTomName_NameList(tom_match26_1_list1); if (tom_is_fun_sym_Name(tom_match26_1_2) ||  false ) { { String  tom_match26_1_2_string=tom_get_slot_Name_string(tom_match26_1_2); { String  tom_dijName=tom_match26_1_2_string; if ( true ) {
 // for each SymbolName
        symbol =  getSymbolFromName(tom_dijName);
        if (symbol == null) {
            // In disjunction we can only have known symbols
          messageError(fileName,decLine,
                       TomMessage.unknownSymbolInDisjunction,
                       new Object[]{(tom_dijName)});
          return null;
        }
        if ( strictType  || !topLevel ) {
            // ensure codomain is correct
          if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomMessage.invalidDisjunctionCodomain, tom_dijName, fileName,decLine)) {
            return null;
          }
        }
        currentDomain = getSymbolDomain(symbol);
        if (first) { // save Domain reference
          domainReference = currentDomain;
        } else {
          first = false;
          if(currentDomain != domainReference) {
            messageError(fileName,decLine,
                         TomMessage.invalidDisjunctionDomain,
                         new Object[]{(tom_dijName)});
            return null;
          }
        }
       } } } } }tom_match26_1_end1=tom_get_tail_concTomName_NameList(tom_match26_1_end1); } }tom_match26_1_list1=tom_match26_1_begin1; } } } } } } }

    return symbol;
  }

  private  boolean ensureSymbolCodomain(TomType currentCodomain, TomType expectedType, TomMessage msg, String symbolName, String fileName,int decLine) {
    if(currentCodomain != expectedType) {
      //System.out.println(currentCodomain+"!="+expectedType);
      messageError(fileName,decLine,
                   msg,
                   new Object[]{symbolName, currentCodomain.getString(), expectedType.getString()});
      return false;
    }
    return true;
  }

  private  TomSymbol ensureValidRecordDisjunction(NameList nameList, TomType expectedType, String fileName, int decLine, boolean topLevel) {
    if(nameList.isSingle()) { // Valid but has it a good type?
      String res = nameList.getHead().getString();
      TomSymbol symbol =  getSymbolFromName(res);
      if (symbol == null ) { // this correspond to: unknown[]
          // it is not correct to use Record with unknown symbols
        messageError(fileName,decLine,
                     TomMessage.unknownSymbol,
                     new Object[]{res});
        return null;
      } else { // known symbol
          // ensure type correctness if necessary
        if ( strictType  || !topLevel ) {
          if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomMessage.invalidCodomain, res, fileName,decLine)) {
            return null;
          }
        }
      }
      return symbol;
    } else {
      return ensureValidApplDisjunction(nameList, expectedType, fileName, decLine, false, topLevel);
    }
  }

  ///////////////////////
  // RECORDS CONCERNS ///
  ///////////////////////
  private  void verifyRecordStructure(OptionList option, String tomName, SlotList slotList, String fileName, int decLine)  {
    TomSymbol symbol = getSymbolFromName(tomName);
    if(symbol != null) {
        // constants have an emptyPairNameDeclList
        // the length of the pairNameDeclList corresponds to the arity of the operator
        // list operator with [] no allowed
      if(slotList.isEmpty() && (isListOperator(symbol) ||  isArrayOperator(symbol)) ) {
        messageError(fileName,decLine,
                     TomMessage.bracketOnListSymbol,
                     new Object[]{tomName});
      }
        // TODO verify type
      verifyRecordSlots(slotList,symbol, getSymbolDomain(symbol), tomName, fileName, decLine);
    } else {
      messageError(fileName,decLine,
                   TomMessage.unknownSymbol,
                   new Object[]{tomName});
    }
  }

    // We test the existence/repetition of slotName contained in pairSlotAppl
    // and then the associated term
  private  void verifyRecordSlots(SlotList slotList, TomSymbol tomSymbol, TomTypeList typeList, String methodName, String fileName, int decLine) {
  TomName pairSlotName = null;
  ArrayList listOfPossibleSlot = null;
  ArrayList studiedSlotIndexList = new ArrayList();
    //for each pair slotName <=> Appl
  while( !slotList.isEmpty() ) {
      pairSlotName = slotList.getHead().getSlotName();
        // First check for slot name correctness
      int index = getSlotIndex(tomSymbol,pairSlotName);
      if(index < 0) {// Error: bad slot name
        if(listOfPossibleSlot == null) {
          // calculate list of possible slot names..
          listOfPossibleSlot = new ArrayList();
          PairNameDeclList listOfSlots = tomSymbol.getPairNameDeclList();
          while ( !listOfSlots.isEmpty() ) {
            TomName sname = listOfSlots.getHead().getSlotName();
            if(!sname.isEmptyName()) {
              listOfPossibleSlot.add(sname.getString());
            }
            listOfSlots = listOfSlots.getTail();
          }
        }
        messageError(fileName,decLine,
                     TomMessage.badSlotName,
                     new Object[]{pairSlotName.getString(), methodName, listOfPossibleSlot.toString()});
        return; //break analyses
      } else { // then check for repeated good slot name
        Integer integerIndex = new Integer(index);
        if(studiedSlotIndexList.contains(integerIndex)) {
            // Error: repeated slot
          messageError(fileName,decLine,
                       TomMessage.slotRepeated,
                       new Object[]{methodName, pairSlotName.getString()});
          return; //break analyses
        }
        studiedSlotIndexList.add(integerIndex);
      }

        // Now analyses associated term
      PairNameDeclList listOfSlots =  tomSymbol.getPairNameDeclList();
      TomTypeList listOfTypes = typeList;
      while(!listOfSlots.isEmpty()) {
        SlotList listOfPair = slotList;
        TomName slotName = listOfSlots.getHead().getSlotName();
        TomType expectedType = listOfTypes.getHead();
        if(!slotName.isEmptyName()) {
          // look for a same name (from record)
          whileBlock: {
            while(!listOfPair.isEmpty()) {
              Slot pairSlotTerm = listOfPair.getHead();
               if(slotName instanceof  tom.engine.adt.tomsignature.types.TomName) { { tom.engine.adt.tomsignature.types.TomName tom_match27_1=(( tom.engine.adt.tomsignature.types.TomName)slotName); if(pairSlotTerm instanceof  tom.engine.adt.tomsignature.types.Slot) { { tom.engine.adt.tomsignature.types.Slot tom_match27_2=(( tom.engine.adt.tomsignature.types.Slot)pairSlotTerm); if (tom_is_fun_sym_Name(tom_match27_1) ||  false ) { { String  tom_match27_1_string=tom_get_slot_Name_string(tom_match27_1); { String  tom_name1=tom_match27_1_string; if (tom_is_fun_sym_PairSlotAppl(tom_match27_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match27_2_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match27_2); { tom.engine.adt.tomsignature.types.TomTerm tom_match27_2_appl=tom_get_slot_PairSlotAppl_appl(tom_match27_2); if (tom_is_fun_sym_Name(tom_match27_2_slotName) ||  false ) { { String  tom_match27_2_slotName_string=tom_get_slot_Name_string(tom_match27_2_slotName); { String  tom_renamedvar_name1_1=tom_match27_2_slotName_string; if (tom_terms_equal_String(tom_name1, tom_renamedvar_name1_1)) { { tom.engine.adt.tomsignature.types.TomTerm tom_slotSubterm=tom_match27_2_appl; if ( true ) {

                   validateTerm(tom_slotSubterm,expectedType, false, true, false);
                   break whileBlock;
                  } } } } } } } } } } } } if ( true ) {
listOfPair = listOfPair.getTail(); } } } } }

            }
          }
        }
        // prepare next step
        listOfSlots = listOfSlots.getTail();
        listOfTypes = listOfTypes.getTail();
      }

      slotList = slotList.getTail();
    }
  }

  public  void validateListOperatorArgs(TomList args, TomType expectedType, boolean permissive) {
    while(!args.isEmpty()) {
      validateTerm(args.getHead(), expectedType, true, false, permissive);
      args = args.getTail();
    }
  }

  private  boolean testTypeExistence(String typeName) {
    return symbolTable().getType(typeName) != null;
  }

  protected static class TermDescription {
    private int termClass;
    private String fileName;
    private int decLine;
    private String name ="";
    private TomType tomType = null;

    public TermDescription(int termClass, String name, String fileName, int decLine, TomType tomType) {
      this.termClass = termClass;
      this.fileName = fileName;
      this.decLine = decLine;
      this.name = name;
      this.tomType = tomType;
    }

    public int getTermClass() {
      return termClass;
    }

    public String getName() {
      return name;
    }
    
    public String getFileName() {
      return fileName;
    }

    public int getLine() {
      return decLine;
    }

    public TomType getType() {
      if(tomType != null && !tomType.isEmptyType()) {
        return tomType;
      } else {
        return tom_make_EmptyType();
      }
    }
  }
}
