/* Generated by TOM (version 2.2rc1): Do not edit this file *//*
 *   
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2005, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 * Julien Guyon
 *
 **/

package jtom.checker;

import java.text.MessageFormat;
import java.util.logging.Level;

import jtom.TomMessage;
import jtom.adt.tomsignature.types.Option;
import jtom.adt.tomsignature.types.OptionList;
import jtom.adt.tomsignature.types.TomSymbol;
import jtom.adt.tomsignature.types.TomTerm;
import jtom.adt.tomsignature.types.TomType;
import jtom.exception.TomRuntimeException;
import jtom.tools.TomGenericPlugin;
import tom.platform.PlatformLogRecord;


abstract public class TomChecker extends TomGenericPlugin {
  
    // ------------------------------------------------------------
  /* Generated by TOM (version 2.2rc1): Do not edit this file *//* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/   /* Generated by TOM (version 2.2rc1): Do not edit this file *//*  *  * Copyright (c) 2004-2005, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/     
    // ------------------------------------------------------------
  
  protected class TermDescription {
    int termClass, decLine;
    String name ="";
    TomType tomType = null;
    public TermDescription(int termClass, String name, int decLine, TomType tomType) {
      this.termClass = termClass;
      this.decLine = decLine;
      this.name = name;
      this.tomType = tomType;
    }
    public String type() {
      if(tomType != null && !tomType.isEmptyType()) {
        return tomType.getString();
      } else {
        return null;
      }
    }
  }
    // Different kind of structures
  protected final static int TERM_APPL               = 0;
  protected final static int UNAMED_APPL             = 1;
  protected final static int APPL_DISJUNCTION        = 2;
  protected final static int RECORD_APPL             = 3;
  protected final static int RECORD_APPL_DISJUNCTION = 4;
  protected final static int XML_APPL                = 5;
  protected final static int VARIABLE_STAR           = 6;
  protected final static int UNAMED_VARIABLE_STAR    = 7;
  protected final static int PLACE_HOLDER            = 8;
  
  protected boolean strictType = false;
  protected Option currentTomStructureOrgTrack;
    
  public TomChecker(String name) {
    super(name);
  }

  protected void reinit() {
    currentTomStructureOrgTrack = null;
  }
 
  public int getClass(TomTerm term) {
     { jtom.adt.tomsignature.types.TomTerm tom_match1_1=(( jtom.adt.tomsignature.types.TomTerm)term); if(tom_is_fun_sym_TermAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList=tom_get_slot_TermAppl_nameList(tom_match1_1); if(tom_is_fun_sym_concTomName(tom_match1_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList_list1=tom_match1_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match1_1_nameList_1=tom_get_head_concTomName_NameList(tom_match1_1_nameList_list1);tom_match1_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match1_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match1_1_nameList_1) ||  false ) { { String  tom_match1_1_nameList_1_string=tom_get_slot_Name_string(tom_match1_1_nameList_1); if(tom_terms_equal_String("", tom_match1_1_nameList_1_string) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1)) {
 return UNAMED_APPL; } }} }} }} }} } if(tom_is_fun_sym_TermAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList=tom_get_slot_TermAppl_nameList(tom_match1_1); if(tom_is_fun_sym_concTomName(tom_match1_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList_list1=tom_match1_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match1_1_nameList_1=tom_get_head_concTomName_NameList(tom_match1_1_nameList_list1);tom_match1_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match1_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match1_1_nameList_1) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1)) {
 return TERM_APPL; } }} }} }} } if(tom_is_fun_sym_TermAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList=tom_get_slot_TermAppl_nameList(tom_match1_1); if(tom_is_fun_sym_concTomName(tom_match1_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList_list1=tom_match1_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match1_1_nameList_1=tom_get_head_concTomName_NameList(tom_match1_1_nameList_list1);tom_match1_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match1_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match1_1_nameList_1) ||  false ) {
 return APPL_DISJUNCTION; }} }} }} } if(tom_is_fun_sym_RecordAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match1_1); if(tom_is_fun_sym_concTomName(tom_match1_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList_list1=tom_match1_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match1_1_nameList_1=tom_get_head_concTomName_NameList(tom_match1_1_nameList_list1);tom_match1_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match1_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match1_1_nameList_1) ||  false ) { if(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1)) {
 return RECORD_APPL; } }} }} }} } if(tom_is_fun_sym_RecordAppl(tom_match1_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match1_1); if(tom_is_fun_sym_concTomName(tom_match1_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match1_1_nameList_list1=tom_match1_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match1_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match1_1_nameList_1=tom_get_head_concTomName_NameList(tom_match1_1_nameList_list1);tom_match1_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match1_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match1_1_nameList_1) ||  false ) {
 return RECORD_APPL_DISJUNCTION; }} }} }} } if(tom_is_fun_sym_XMLAppl(tom_match1_1) ||  false ) {
 return XML_APPL; } if(tom_is_fun_sym_Placeholder(tom_match1_1) ||  false ) {
 return PLACE_HOLDER; } if(tom_is_fun_sym_VariableStar(tom_match1_1) ||  false ) {
 return VARIABLE_STAR; } if(tom_is_fun_sym_UnamedVariableStar(tom_match1_1) ||  false ) {
 return UNAMED_VARIABLE_STAR; }
throw new TomRuntimeException("Invalid Term");}

  }
  
  public String getName(TomTerm term) {
    String dijunctionName = "";
     { jtom.adt.tomsignature.types.TomTerm tom_match2_1=(( jtom.adt.tomsignature.types.TomTerm)term); if(tom_is_fun_sym_TermAppl(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_TermAppl_nameList(tom_match2_1); if(tom_is_fun_sym_concTomName(tom_match2_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList_list1=tom_match2_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match2_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match2_1_nameList_1=tom_get_head_concTomName_NameList(tom_match2_1_nameList_list1);tom_match2_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match2_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match2_1_nameList_1) ||  false ) { { String  tom_match2_1_nameList_1_string=tom_get_slot_Name_string(tom_match2_1_nameList_1); { String  name=tom_match2_1_nameList_1_string; if(tom_is_empty_concTomName_NameList(tom_match2_1_nameList_list1)) {
 return name; }}} }} }} }} } if(tom_is_fun_sym_TermAppl(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_TermAppl_nameList(tom_match2_1); { jtom.adt.tomsignature.types.NameList nameList=tom_match2_1_nameList;

        String head;
        dijunctionName = nameList.getHead().getString();
        while(!nameList.isEmpty()) {
          head = nameList.getHead().getString();
          dijunctionName = ( dijunctionName.compareTo(head) > 0)?dijunctionName:head;
          nameList = nameList.getTail();
        }
        return dijunctionName;
      }} } if(tom_is_fun_sym_RecordAppl(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match2_1); if(tom_is_fun_sym_concTomName(tom_match2_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList_list1=tom_match2_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match2_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match2_1_nameList_1=tom_get_head_concTomName_NameList(tom_match2_1_nameList_list1);tom_match2_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match2_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match2_1_nameList_1) ||  false ) { { String  tom_match2_1_nameList_1_string=tom_get_slot_Name_string(tom_match2_1_nameList_1); { String  name=tom_match2_1_nameList_1_string; if(tom_is_empty_concTomName_NameList(tom_match2_1_nameList_list1)) {
 return name; }}} }} }} }} } if(tom_is_fun_sym_RecordAppl(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match2_1); { jtom.adt.tomsignature.types.NameList nameList=tom_match2_1_nameList;

        String head;
        dijunctionName = nameList.getHead().getString();
        while(!nameList.isEmpty()) {
          head = nameList.getHead().getString();
          dijunctionName = ( dijunctionName.compareTo(head) > 0)?dijunctionName:head;
          nameList = nameList.getTail();
        }
        return dijunctionName;
      }} } if(tom_is_fun_sym_XMLAppl(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_XMLAppl_nameList(tom_match2_1); if(tom_is_fun_sym_concTomName(tom_match2_1_nameList) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList_list1=tom_match2_1_nameList; if(!(tom_is_empty_concTomName_NameList(tom_match2_1_nameList_list1))) { { jtom.adt.tomsignature.types.TomName tom_match2_1_nameList_1=tom_get_head_concTomName_NameList(tom_match2_1_nameList_list1);tom_match2_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match2_1_nameList_list1); if(tom_is_fun_sym_Name(tom_match2_1_nameList_1) ||  false ) { { String  tom_match2_1_nameList_1_string=tom_get_slot_Name_string(tom_match2_1_nameList_1); { String  name=tom_match2_1_nameList_1_string;
 return name;}} }} }} }} } if(tom_is_fun_sym_XMLAppl(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.NameList tom_match2_1_nameList=tom_get_slot_XMLAppl_nameList(tom_match2_1); { jtom.adt.tomsignature.types.NameList nameList=tom_match2_1_nameList;

        String head;
        dijunctionName = nameList.getHead().getString();
        while(!nameList.isEmpty()) {
          head = nameList.getHead().getString();
          dijunctionName = ( dijunctionName.compareTo(head) > 0)?dijunctionName:head;
          nameList = nameList.getTail();
        }
        return dijunctionName;
      }} } if(tom_is_fun_sym_Placeholder(tom_match2_1) ||  false ) {
 return "_"; } if(tom_is_fun_sym_VariableStar(tom_match2_1) ||  false ) { { jtom.adt.tomsignature.types.TomName tom_match2_1_astName=tom_get_slot_VariableStar_astName(tom_match2_1); if(tom_is_fun_sym_Name(tom_match2_1_astName) ||  false ) { { String  tom_match2_1_astName_string=tom_get_slot_Name_string(tom_match2_1_astName); { String  name=tom_match2_1_astName_string;
 return name+"*";}} }} } if(tom_is_fun_sym_UnamedVariableStar(tom_match2_1) ||  false ) {
 return "_*"; }
throw new TomRuntimeException("Invalid Term");}

  }
  
  /**
   * Shared Functions 
   */
  protected String extractType(TomSymbol symbol) {
    TomType type = getSymbolCodomain(symbol);
    return getTomType(type);
  }
  
  protected int findOriginTrackingLine(OptionList optionList) {
     { jtom.adt.tomsignature.types.OptionList tom_match3_1=(( jtom.adt.tomsignature.types.OptionList)optionList); if(tom_is_fun_sym_concOption(tom_match3_1) ||  false ) { { jtom.adt.tomsignature.types.OptionList tom_match3_1_list1=tom_match3_1; { jtom.adt.tomsignature.types.OptionList tom_match3_1_begin1=tom_match3_1_list1; { jtom.adt.tomsignature.types.OptionList tom_match3_1_end1=tom_match3_1_list1;{ while (!(tom_is_empty_concOption_OptionList(tom_match3_1_end1))) {tom_match3_1_list1=tom_match3_1_end1;{ { jtom.adt.tomsignature.types.Option tom_match3_1_2=tom_get_head_concOption_OptionList(tom_match3_1_list1);tom_match3_1_list1=tom_get_tail_concOption_OptionList(tom_match3_1_list1); if(tom_is_fun_sym_OriginTracking(tom_match3_1_2) ||  false ) { { int  tom_match3_1_2_line=tom_get_slot_OriginTracking_line(tom_match3_1_2); { int  line=tom_match3_1_2_line;
 return line; }} }}tom_match3_1_end1=tom_get_tail_concOption_OptionList(tom_match3_1_end1);} }tom_match3_1_list1=tom_match3_1_begin1;}}}} }}

    return -1;
  }

  protected void ensureOriginTrackingLine(int line) {
    if(line < 0) {
      getLogger().log(Level.SEVERE,
                      "FindOTL",
                      getStreamManager().getInputFile().getName());
      //System.out.println("findOriginTrackingLine: not found ");
    }
  }
  
      /**
     * Message Functions
     */

  protected void messageError(int errorLine, String msg, Object[] msgArg) {
    String structName = currentTomStructureOrgTrack.getAstName().getString();
    messageError(errorLine, structName, msg, msgArg);
  }
  
  protected void messageError(int errorLine, String structInfo, String msg, Object[] msgArgs) {
    String fileName = currentTomStructureOrgTrack.getFileName().getString();
    int structDeclLine = currentTomStructureOrgTrack.getLine();
    getLogger().log(new PlatformLogRecord(Level.SEVERE, TomMessage.getMessage("DetailedMessage",
                    new Object[]{structInfo, new Integer(structDeclLine),
                                 MessageFormat.format(msg,msgArgs)}),
                                 fileName, errorLine));
  }
  
  protected void messageWarning(int errorLine, String msg, Object[] msgArg) {
    String structName = currentTomStructureOrgTrack.getAstName().getString();
    messageWarning(errorLine, structName, msg, msgArg);
  }
  
  protected void messageWarning(int errorLine, String structInfo, String msg, Object[] msgArgs) {
    String fileName = currentTomStructureOrgTrack.getFileName().getString();
    int structDeclLine = currentTomStructureOrgTrack.getLine();
    getLogger().log(new PlatformLogRecord(Level.WARNING, TomMessage.getMessage("DetailedMessage",
                    new Object[]{structInfo, new Integer(structDeclLine),
                                 MessageFormat.format(msg,msgArgs)}),
                                 fileName, errorLine));
  }
  
}  //Class TomChecker
