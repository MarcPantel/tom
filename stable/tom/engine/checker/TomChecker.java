/*  Generated by TOM: Do not edit this file */  /*
  
    TOM - To One Matching Compiler

    Copyright (C) 2000-2003 INRIA
			    Nancy, France.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    Pierre-Etienne Moreau	e-mail: Pierre-Etienne.Moreau@loria.fr
    Julien Guyon

*/

package jtom.checker;

import aterm.*;

import java.util.*;

import jtom.TomEnvironment;
import jtom.adt.tomsignature.*;
import jtom.adt.tomsignature.types.*;
import jtom.tools.TomTask;
import jtom.runtime.Collect1;
import jtom.xml.Constants;
import jtom.exception.*;
//import jtom.runtime.set.SharedSet;

abstract public class TomChecker extends TomTask {
	
	// ------------------------------------------------------------
	/*  Generated by TOM: Do not edit this file */    
	// ------------------------------------------------------------
	
	class TermDescription {
		int termClass, decLine;
		String name ="";
		TomType tomType = null;
		public TermDescription(int termClass, String name, int decLine, TomType tomType) {
			this.termClass = termClass;
			this.decLine = decLine;
			this.name = name;
			this.tomType = tomType;
		}
		public String type() {
			if(tomType != null && !tomType.isEmptyType()) {
				return tomType.getString();
			} else {
				return null;
			}
		}
	}
	
	private final static int APPL = 0;
	private final static int UNAMED_APPL = 1;
	private final static int APPL_DISJUNCTION = 2;
	private final static int RECORD_APPL = 3;
	private final static int RECORD_APPL_DISJUNCTION = 4;
	private final static int XML_APPL = 5;
	private final static int VARIABLE_STAR = 6;
	private final static int UNAMED_VARIABLE_STAR = 7;
	private final static int PLACE_HOLDER = 8;
	
	
	private final static String OPERATOR = "Operator";
	private final static String CONSTRUCTOR = "%op";
	private final static String OP_ARRAY = "%oparray";
	private final static String OP_LIST = "%oplist";
	private final static String TYPE = "Type";	
	private final static String TYPE_TERM = "%typeterm";
	private final static String TYPE_ARRAY = "%typearray";
	private final static String TYPE_LIST = "%typelist";
	
	private final static String GET_FUN_SYM = "get_fun_sym";
	private final static String CMP_FUN_SYM = "cmp_fun_sym";
	private final static String EQUALS = "equals";
	private final static String GET_SUBTERM = "get_subterm";
	private final static String GET_ELEMENT = "get_element";
	private final static String GET_SIZE = "get_size";
	private final static String GET_HEAD = "get_head";
	private final static String GET_TAIL = "get_tail";
	private final static String IS_EMPTY = "is_empty";
	private final static String MAKE_APPEND = "make_append";
	private final static String MAKE_EMPTY = "make_empty";
	private final static String MAKE_INSERT = "make_insert";
	private final static String MAKE = "make";
	

	protected boolean strictType = false, warningAll = false, noWarning = false, verbose = false;
	private ArrayList alreadyStudiedTypes =  new ArrayList();
	private ArrayList alreadyStudiedSymbols =  new ArrayList();
	private ArrayList alreadyStudiedRule =  new ArrayList();
	private Option currentTomStructureOrgTrack;
		
  public TomChecker(String name, TomEnvironment tomEnvironment) {
    super(name, tomEnvironment);
  }

	public void initProcess() {
		verbose = getInput().isVerbose();
		strictType = getInput().isStrictType();
		warningAll = getInput().isWarningAll();
		noWarning = getInput().isNoWarning();
	} 
	
	/**
	 *  Syntax checking entry point
	 */
	protected void checkSyntax(TomTerm parsedTerm) {
		Collect1 collectAndVerify = new Collect1() {  
			public boolean apply(ATerm subject) {
				if(subject instanceof TomTerm) {
					 {  TomTerm tom_match1_1 = null; tom_match1_1 = ( TomTerm) subject;_match1_pattern1: {  Declaration declaration = null; if(tom_is_fun_sym_DeclarationToTomTerm(tom_match1_1) ||  false ) {  Declaration tom_match1_1_1 = null; tom_match1_1_1 = ( Declaration) tom_get_slot_DeclarationToTomTerm_astDeclaration(tom_match1_1); declaration = ( Declaration) tom_match1_1_1;
  verifyDeclaration(declaration); return false;  }}_match1_pattern2: {  TomList matchArgsList = null;  OptionList list = null;  TomList patternActionList = null; if(tom_is_fun_sym_Match(tom_match1_1) ||  false ) {  TomTerm tom_match1_1_1 = null;  TomTerm tom_match1_1_2 = null;  OptionList tom_match1_1_3 = null; tom_match1_1_1 = ( TomTerm) tom_get_slot_Match_subjectList(tom_match1_1); tom_match1_1_2 = ( TomTerm) tom_get_slot_Match_patternList(tom_match1_1); tom_match1_1_3 = ( OptionList) tom_get_slot_Match_option(tom_match1_1); if(tom_is_fun_sym_SubjectList(tom_match1_1_1) ||  false ) {  TomList tom_match1_1_1_1 = null; tom_match1_1_1_1 = ( TomList) tom_get_slot_SubjectList_tomList(tom_match1_1_1); matchArgsList = ( TomList) tom_match1_1_1_1; if(tom_is_fun_sym_PatternList(tom_match1_1_2) ||  false ) {  TomList tom_match1_1_2_1 = null; tom_match1_1_2_1 = ( TomList) tom_get_slot_PatternList_tomList(tom_match1_1_2); patternActionList = ( TomList) tom_match1_1_2_1; list = ( OptionList) tom_match1_1_3;

   
							verifyMatch(matchArgsList, patternActionList, list); return true;
						 } } }}_match1_pattern3: {  TomRuleList list = null;  Option orgTrack = null; if(tom_is_fun_sym_RuleSet(tom_match1_1) ||  false ) {  TomRuleList tom_match1_1_1 = null;  Option tom_match1_1_2 = null; tom_match1_1_1 = ( TomRuleList) tom_get_slot_RuleSet_ruleList(tom_match1_1); tom_match1_1_2 = ( Option) tom_get_slot_RuleSet_orgTrack(tom_match1_1); list = ( TomRuleList) tom_match1_1_1; orgTrack = ( Option) tom_match1_1_2;
 
							verifyRule(list, orgTrack); return false;
						 }}_match1_pattern4: {



  return true; } }
 
				} else {
					return true;
				}
			}
		}; // end new Collect1()
			
		// use a traversal to get all interesting subtree
		traversal().genericCollect(parsedTerm, collectAndVerify);   
	} //checkSyntax

	/** Main type checking entry point: We check all interesting Tom Structure */
	protected void checkTypeInference(TomTerm expandedTerm) {
		Collect1 collectAndVerify = new Collect1() {  
			public boolean apply(ATerm term) {
				if(term instanceof TomTerm) {
					 {  TomTerm tom_match2_1 = null; tom_match2_1 = ( TomTerm) term;_match2_pattern1: {  TomList list = null;  OptionList oplist = null; if(tom_is_fun_sym_Match(tom_match2_1) ||  false ) {  TomTerm tom_match2_1_2 = null;  OptionList tom_match2_1_3 = null; tom_match2_1_2 = ( TomTerm) tom_get_slot_Match_patternList(tom_match2_1); tom_match2_1_3 = ( OptionList) tom_get_slot_Match_option(tom_match2_1); if(tom_is_fun_sym_PatternList(tom_match2_1_2) ||  false ) {  TomList tom_match2_1_2_1 = null; tom_match2_1_2_1 = ( TomList) tom_get_slot_PatternList_tomList(tom_match2_1_2); list = ( TomList) tom_match2_1_2_1; oplist = ( OptionList) tom_match2_1_3;
   
							currentTomStructureOrgTrack = findOriginTracking(oplist);
							verifyMatchVariable(list);
							return false;
						 } }}_match2_pattern2: {  TomRuleList list = null;  Option orgTrack = null; if(tom_is_fun_sym_RuleSet(tom_match2_1) ||  false ) {  TomRuleList tom_match2_1_1 = null;  Option tom_match2_1_2 = null; tom_match2_1_1 = ( TomRuleList) tom_get_slot_RuleSet_ruleList(tom_match2_1); tom_match2_1_2 = ( Option) tom_get_slot_RuleSet_orgTrack(tom_match2_1); list = ( TomRuleList) tom_match2_1_1; orgTrack = ( Option) tom_match2_1_2;
 
							currentTomStructureOrgTrack = orgTrack;
							verifyRuleVariable(list);
							return false;
						 }}_match2_pattern3: {
  return true; } }
 
				} else {
					return true;
				}
			}// end apply
		}; // end new
		traversal().genericCollect(expandedTerm, collectAndVerify);
	}
  
	private void verifyMatchVariable(TomList patternList) {
		while(!patternList.isEmpty()) {
			TomTerm pa = patternList.getHead();
			TomTerm patterns = pa.getTermList();
				// collect variables
			ArrayList variableList = new ArrayList();
			collectVariable(variableList, patterns);      
			verifyVariableType(variableList);
			patternList = patternList.getTail();
		}
	}
  
	private void verifyRuleVariable(TomRuleList list) {
		while(!list.isEmpty()) {
			TomRule rewriteRule = list.getHead();
			TomTerm lhs = rewriteRule.getLhs();
			TomTerm rhs = rewriteRule.getRhs();
			TomList condList = rewriteRule.getCondList();
			Option orgTrack = findOriginTracking(rewriteRule.getOption());
 	     
			ArrayList variableLhs = new ArrayList();
			collectVariable(variableLhs, lhs);
			  // System.out.println("lhs: "+variableLhs);
			HashSet lhsSet = verifyVariableType(variableLhs);
 	     
			ArrayList variableRhs = new ArrayList();
			collectVariable(variableRhs, rhs);
				// System.out.println("rhs: "+variableRhs);
			HashSet rhsSet = verifyVariableType(variableRhs);
 	     
			ArrayList variableCond = new ArrayList();
			/*%match(TomList condList) {
				(_*, cond, _*) -> {
					%match(TomTerm cond) {
						matching@MatchingCondition[] -> {
							System.out.println(matching);
							collectVariable(variableCond, matching);											
						}				
						eq@EqualityCondition[] -> { 
							System.out.println(eq);
							collectVariable(variableCond, eq);	
						}
					}
				}
			}*/
			collectVariable(variableCond, tom_make_Tom(condList) );
			HashSet condSet = verifyVariableType(variableCond);
 	     
			lhsSet.addAll(condSet);
			if(!condSet.isEmpty()) {
				System.out.println("Warning: improve verifyRuleVariable for matchingCondition");
			}
 	     
			if( !lhsSet.containsAll(rhsSet) ) {
				Iterator it = lhsSet.iterator();
				while(it.hasNext()) {
					rhsSet.remove(it.next());
				}
				messageError(orgTrack.getLine(),
															TomCheckerMessage.UnknownVariable ,
															new Object[]{rhsSet.toString()},
															TomCheckerMessage.TOM_ERROR);
			}
				// case of rhs is a single variable
			 {  TomTerm tom_match3_1 = null; tom_match3_1 = ( TomTerm) rhs;_match3_pattern1: {  String name = null; if(tom_is_fun_sym_Term(tom_match3_1) ||  false ) {  TomTerm tom_match3_1_1 = null; tom_match3_1_1 = ( TomTerm) tom_get_slot_Term_tomTerm(tom_match3_1); if(tom_is_fun_sym_Variable(tom_match3_1_1) ||  false ) {  TomName tom_match3_1_1_2 = null; tom_match3_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match3_1_1); if(tom_is_fun_sym_Name(tom_match3_1_1_2) ||  false ) {  String tom_match3_1_1_2_1 = null; tom_match3_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match3_1_1_2); name = ( String) tom_match3_1_1_2_1;
 
					String methodName = "";
					 {  TomTerm tom_match4_1 = null; tom_match4_1 = ( TomTerm) lhs;_match4_pattern1: {  TomName tom_absvar1 = null; if(tom_is_fun_sym_Term(tom_match4_1) ||  false ) {  TomTerm tom_match4_1_1 = null; tom_match4_1_1 = ( TomTerm) tom_get_slot_Term_tomTerm(tom_match4_1); if(tom_is_fun_sym_Appl(tom_match4_1_1) ||  false ) {  NameList tom_match4_1_1_2 = null; tom_match4_1_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match4_1_1); if(tom_is_fun_sym_concTomName(tom_match4_1_1_2) ||  false ) {  NameList tom_match4_1_1_2_list1 = null; tom_match4_1_1_2_list1 = ( NameList) tom_match4_1_1_2; if(!(tom_is_empty_NameList(tom_match4_1_1_2_list1))) { tom_absvar1 = ( TomName) tom_get_head_NameList(tom_match4_1_1_2_list1); tom_match4_1_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match4_1_1_2_list1); if(tom_is_empty_NameList(tom_match4_1_1_2_list1)) { {  TomName tom_match5_1 = null; tom_match5_1 = ( TomName) tom_absvar1;_match5_pattern1: {  String name1 = null; if(tom_is_fun_sym_Name(tom_match5_1) ||  false ) {  String tom_match5_1_1 = null; tom_match5_1_1 = ( String) tom_get_slot_Name_string(tom_match5_1); name1 = ( String) tom_match5_1_1;
 
							methodName = name1;
						 }} } } } } } }}_match4_pattern2: {  TomName tom_absvar2 = null; if(tom_is_fun_sym_Term(tom_match4_1) ||  false ) {  TomTerm tom_match4_1_1 = null; tom_match4_1_1 = ( TomTerm) tom_get_slot_Term_tomTerm(tom_match4_1); if(tom_is_fun_sym_RecordAppl(tom_match4_1_1) ||  false ) {  NameList tom_match4_1_1_2 = null; tom_match4_1_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match4_1_1); if(tom_is_fun_sym_concTomName(tom_match4_1_1_2) ||  false ) {  NameList tom_match4_1_1_2_list1 = null; tom_match4_1_1_2_list1 = ( NameList) tom_match4_1_1_2; if(!(tom_is_empty_NameList(tom_match4_1_1_2_list1))) { tom_absvar2 = ( TomName) tom_get_head_NameList(tom_match4_1_1_2_list1); tom_match4_1_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match4_1_1_2_list1); if(tom_is_empty_NameList(tom_match4_1_1_2_list1)) { {  TomName tom_match6_1 = null; tom_match6_1 = ( TomName) tom_absvar2;_match6_pattern1: {  String name1 = null; if(tom_is_fun_sym_Name(tom_match6_1) ||  false ) {  String tom_match6_1_1 = null; tom_match6_1_1 = ( String) tom_get_slot_Name_string(tom_match6_1); name1 = ( String) tom_match6_1_1;
 
							methodName = name1;
						 }} } } } } } }} }
 
					TomType typeRhs = getSymbolCodomain(getSymbol(methodName));
					Iterator it = variableLhs.iterator();
					while(it.hasNext()) {
						TomTerm term = (TomTerm)it.next();
						if(term.getAstName().getString() == name) {
							TomType typeLhs = term.getAstType();
							if(typeLhs != typeRhs) {
								messageError(orgTrack.getLine(),
																			TomCheckerMessage.BadVariableType ,
																			new Object[]{name, typeRhs.getTomType().getString(), typeLhs.getTomType().getString()},
																			TomCheckerMessage.TOM_ERROR);
							}
						}
					}
				 } } }} }
 
			list = list.getTail();
		}
	}
  
	private HashSet verifyVariableType(ArrayList list) {
			// compute multiplicities
		HashSet set = new HashSet();
		HashMap map = new HashMap();
		Iterator it = list.iterator();
		while(it.hasNext()) {
			TomTerm variable = (TomTerm)it.next();
			TomName name = variable.getAstName();
   	   
			if(set.contains(name.getString())) {
				TomTerm var = (TomTerm)map.get(name);
				TomType type = var.getAstType();
				TomType type2 = variable.getAstType();
				if(!(type==type2)) {
					messageError(findOriginTrackingLine(variable.getOption()),
																TomCheckerMessage.IncoherentVariable ,
																new Object[]{name.getString(), type.getTomType().getString(), type2.getTomType().getString()},
																TomCheckerMessage.TOM_ERROR);
				}
			} else {
				map.put(name, variable);
				set.add(name.getString());
			}
		}
	return set;
	}
	
	/**
	 *  SYMBOL AND TYPE CONCERNS 
	 */
	private void verifyDeclaration(Declaration declaration) {	
	 {  Declaration tom_match7_1 = null; tom_match7_1 = ( Declaration) declaration;_match7_pattern1: {  TomList tomList = null;  String tomName = null;  Option orgTrack = null; if(tom_is_fun_sym_TypeTermDecl(tom_match7_1) ||  false ) {  TomName tom_match7_1_1 = null;  TomList tom_match7_1_2 = null;  Option tom_match7_1_3 = null; tom_match7_1_1 = ( TomName) tom_get_slot_TypeTermDecl_astName(tom_match7_1); tom_match7_1_2 = ( TomList) tom_get_slot_TypeTermDecl_keywordList(tom_match7_1); tom_match7_1_3 = ( Option) tom_get_slot_TypeTermDecl_orgTrack(tom_match7_1); if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) {  String tom_match7_1_1_1 = null; tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1); tomName = ( String) tom_match7_1_1_1; tomList = ( TomList) tom_match7_1_2; orgTrack = ( Option) tom_match7_1_3;

 
			verifyTypeDecl(TYPE_TERM, tomName, tomList, orgTrack);
		 } }}_match7_pattern2: {  TomList tomList = null;  String tomName = null;  Option orgTrack = null; if(tom_is_fun_sym_TypeListDecl(tom_match7_1) ||  false ) {  TomName tom_match7_1_1 = null;  TomList tom_match7_1_2 = null;  Option tom_match7_1_3 = null; tom_match7_1_1 = ( TomName) tom_get_slot_TypeListDecl_astName(tom_match7_1); tom_match7_1_2 = ( TomList) tom_get_slot_TypeListDecl_keywordList(tom_match7_1); tom_match7_1_3 = ( Option) tom_get_slot_TypeListDecl_orgTrack(tom_match7_1); if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) {  String tom_match7_1_1_1 = null; tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1); tomName = ( String) tom_match7_1_1_1; tomList = ( TomList) tom_match7_1_2; orgTrack = ( Option) tom_match7_1_3;
 
			verifyTypeDecl(TYPE_LIST, tomName, tomList, orgTrack);
		 } }}_match7_pattern3: {  TomList tomList = null;  Option orgTrack = null;  String tomName = null; if(tom_is_fun_sym_TypeArrayDecl(tom_match7_1) ||  false ) {  TomName tom_match7_1_1 = null;  TomList tom_match7_1_2 = null;  Option tom_match7_1_3 = null; tom_match7_1_1 = ( TomName) tom_get_slot_TypeArrayDecl_astName(tom_match7_1); tom_match7_1_2 = ( TomList) tom_get_slot_TypeArrayDecl_keywordList(tom_match7_1); tom_match7_1_3 = ( Option) tom_get_slot_TypeArrayDecl_orgTrack(tom_match7_1); if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) {  String tom_match7_1_1_1 = null; tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1); tomName = ( String) tom_match7_1_1_1; tomList = ( TomList) tom_match7_1_2; orgTrack = ( Option) tom_match7_1_3;
 
			verifyTypeDecl(TYPE_ARRAY, tomName, tomList, orgTrack);
		 } }}_match7_pattern4: {  String tomName = null; if(tom_is_fun_sym_SymbolDecl(tom_match7_1) ||  false ) {  TomName tom_match7_1_1 = null; tom_match7_1_1 = ( TomName) tom_get_slot_SymbolDecl_astName(tom_match7_1); if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) {  String tom_match7_1_1_1 = null; tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1); tomName = ( String) tom_match7_1_1_1;

  verifySymbol(CONSTRUCTOR, getSymbol(tomName));  } }}_match7_pattern5: {  String tomName = null; if(tom_is_fun_sym_ArraySymbolDecl(tom_match7_1) ||  false ) {  TomName tom_match7_1_1 = null; tom_match7_1_1 = ( TomName) tom_get_slot_ArraySymbolDecl_astName(tom_match7_1); if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) {  String tom_match7_1_1_1 = null; tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1); tomName = ( String) tom_match7_1_1_1;
  verifySymbol(OP_ARRAY, getSymbol(tomName));  } }}_match7_pattern6: {  String tomName = null; if(tom_is_fun_sym_ListSymbolDecl(tom_match7_1) ||  false ) {  TomName tom_match7_1_1 = null; tom_match7_1_1 = ( TomName) tom_get_slot_ListSymbolDecl_astName(tom_match7_1); if(tom_is_fun_sym_Name(tom_match7_1_1) ||  false ) {  String tom_match7_1_1_1 = null; tom_match7_1_1_1 = ( String) tom_get_slot_Name_string(tom_match7_1_1); tomName = ( String) tom_match7_1_1_1;
 	verifySymbol(OP_LIST, getSymbol(tomName));  } }} }

 
}

	/** 
	 * TYPE DECLARATION CONCERNS 
	 */
	private void verifyTypeDecl(String declType, String tomName, TomList listOfDeclaration, Option typeOrgTrack) {
		currentTomStructureOrgTrack = typeOrgTrack;
		  // ensure first definition
		verifyMultipleDefinition(tomName, declType, TYPE);
			// verify Macro functions
		ArrayList verifyList = new ArrayList();
		verifyList.add(GET_FUN_SYM);
		verifyList.add(CMP_FUN_SYM);
		verifyList.add(EQUALS);
		
		if(declType == TYPE_TERM)	{
			verifyList.add(GET_SUBTERM);
		} else if(declType == TYPE_ARRAY) {
			verifyList.add(GET_ELEMENT);
			verifyList.add(GET_SIZE);
		} else if(declType == TYPE_LIST) {
			verifyList.add(GET_HEAD);
			verifyList.add(GET_TAIL);
			verifyList.add(IS_EMPTY);
		}
 	   {  TomList tom_match8_1 = null; tom_match8_1 = ( TomList) listOfDeclaration;_match8_pattern1: {  TomTerm tom_absvar3 = null; if(tom_is_fun_sym_concTomTerm(tom_match8_1) ||  false ) {  TomList tom_match8_1_begin1 = null;  TomList tom_match8_1_end1 = null;  TomList tom_match8_1_list1 = null; tom_match8_1_list1 = ( TomList) tom_match8_1; tom_match8_1_begin1 = ( TomList) tom_match8_1_list1; tom_match8_1_end1 = ( TomList) tom_match8_1_list1; do { if(!(tom_is_empty_TomList(tom_match8_1_list1))) { tom_absvar3 = ( TomTerm) tom_get_head_TomList(tom_match8_1_list1); tom_match8_1_list1 = ( TomList) tom_get_tail_TomList(tom_match8_1_list1); {  TomTerm tom_match9_1 = null; tom_match9_1 = ( TomTerm) tom_absvar3;_match9_pattern1: {  Declaration decl = null; if(tom_is_fun_sym_DeclarationToTomTerm(tom_match9_1) ||  false ) {  Declaration tom_match9_1_1 = null; tom_match9_1_1 = ( Declaration) tom_get_slot_DeclarationToTomTerm_astDeclaration(tom_match9_1); decl = ( Declaration) tom_match9_1_1;
  // for each Declaration
					 {  Declaration tom_match10_1 = null; tom_match10_1 = ( Declaration) decl;_match10_pattern1: {  Option orgTrack = null; if(tom_is_fun_sym_GetFunctionSymbolDecl(tom_match10_1) ||  false ) {  Option tom_match10_1_3 = null; tom_match10_1_3 = ( Option) tom_get_slot_GetFunctionSymbolDecl_orgTrack(tom_match10_1); orgTrack = ( Option) tom_match10_1_3;

 
							checkField(GET_FUN_SYM,verifyList,orgTrack, declType);
						 }}_match10_pattern2: {  String name1 = null;  Option orgTrack = null;  String name2 = null; if(tom_is_fun_sym_CompareFunctionSymbolDecl(tom_match10_1) ||  false ) {  TomTerm tom_match10_1_1 = null;  TomTerm tom_match10_1_2 = null;  Option tom_match10_1_4 = null; tom_match10_1_1 = ( TomTerm) tom_get_slot_CompareFunctionSymbolDecl_symbolArg1(tom_match10_1); tom_match10_1_2 = ( TomTerm) tom_get_slot_CompareFunctionSymbolDecl_symbolArg2(tom_match10_1); tom_match10_1_4 = ( Option) tom_get_slot_CompareFunctionSymbolDecl_orgTrack(tom_match10_1); if(tom_is_fun_sym_Variable(tom_match10_1_1) ||  false ) {  TomName tom_match10_1_1_2 = null; tom_match10_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_1); if(tom_is_fun_sym_Name(tom_match10_1_1_2) ||  false ) {  String tom_match10_1_1_2_1 = null; tom_match10_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_1_2); name1 = ( String) tom_match10_1_1_2_1; if(tom_is_fun_sym_Variable(tom_match10_1_2) ||  false ) {  TomName tom_match10_1_2_2 = null; tom_match10_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_2); if(tom_is_fun_sym_Name(tom_match10_1_2_2) ||  false ) {  String tom_match10_1_2_2_1 = null; tom_match10_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_2_2); name2 = ( String) tom_match10_1_2_2_1; orgTrack = ( Option) tom_match10_1_4;
 
							checkFieldAndLinearArgs(CMP_FUN_SYM,verifyList,orgTrack,name1,name2, declType);
						 } } } } }}_match10_pattern3: {  String name2 = null;  Option orgTrack = null;  String name1 = null; if(tom_is_fun_sym_TermsEqualDecl(tom_match10_1) ||  false ) {  TomTerm tom_match10_1_1 = null;  TomTerm tom_match10_1_2 = null;  Option tom_match10_1_4 = null; tom_match10_1_1 = ( TomTerm) tom_get_slot_TermsEqualDecl_termArg1(tom_match10_1); tom_match10_1_2 = ( TomTerm) tom_get_slot_TermsEqualDecl_termArg2(tom_match10_1); tom_match10_1_4 = ( Option) tom_get_slot_TermsEqualDecl_orgTrack(tom_match10_1); if(tom_is_fun_sym_Variable(tom_match10_1_1) ||  false ) {  TomName tom_match10_1_1_2 = null; tom_match10_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_1); if(tom_is_fun_sym_Name(tom_match10_1_1_2) ||  false ) {  String tom_match10_1_1_2_1 = null; tom_match10_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_1_2); name1 = ( String) tom_match10_1_1_2_1; if(tom_is_fun_sym_Variable(tom_match10_1_2) ||  false ) {  TomName tom_match10_1_2_2 = null; tom_match10_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_2); if(tom_is_fun_sym_Name(tom_match10_1_2_2) ||  false ) {  String tom_match10_1_2_2_1 = null; tom_match10_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_2_2); name2 = ( String) tom_match10_1_2_2_1; orgTrack = ( Option) tom_match10_1_4;
 
							checkFieldAndLinearArgs(EQUALS,verifyList,orgTrack,name1,name2, declType);
						 } } } } }}_match10_pattern4: {  String name2 = null;  Option orgTrack = null;  String name1 = null; if(tom_is_fun_sym_GetSubtermDecl(tom_match10_1) ||  false ) {  TomTerm tom_match10_1_1 = null;  TomTerm tom_match10_1_2 = null;  Option tom_match10_1_4 = null; tom_match10_1_1 = ( TomTerm) tom_get_slot_GetSubtermDecl_termArg(tom_match10_1); tom_match10_1_2 = ( TomTerm) tom_get_slot_GetSubtermDecl_variable(tom_match10_1); tom_match10_1_4 = ( Option) tom_get_slot_GetSubtermDecl_orgTrack(tom_match10_1); if(tom_is_fun_sym_Variable(tom_match10_1_1) ||  false ) {  TomName tom_match10_1_1_2 = null; tom_match10_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_1); if(tom_is_fun_sym_Name(tom_match10_1_1_2) ||  false ) {  String tom_match10_1_1_2_1 = null; tom_match10_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_1_2); name1 = ( String) tom_match10_1_1_2_1; if(tom_is_fun_sym_Variable(tom_match10_1_2) ||  false ) {  TomName tom_match10_1_2_2 = null; tom_match10_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_2); if(tom_is_fun_sym_Name(tom_match10_1_2_2) ||  false ) {  String tom_match10_1_2_2_1 = null; tom_match10_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_2_2); name2 = ( String) tom_match10_1_2_2_1; orgTrack = ( Option) tom_match10_1_4;

 
							checkFieldAndLinearArgs(GET_SUBTERM,verifyList,orgTrack,name1,name2, declType);
						 } } } } }}_match10_pattern5: {  Option orgTrack = null; if(tom_is_fun_sym_GetHeadDecl(tom_match10_1) ||  false ) {  Option tom_match10_1_3 = null; tom_match10_1_3 = ( Option) tom_get_slot_GetHeadDecl_orgTrack(tom_match10_1); orgTrack = ( Option) tom_match10_1_3;

 
							checkField(GET_HEAD,verifyList,orgTrack, declType);
						 }}_match10_pattern6: {  Option orgTrack = null; if(tom_is_fun_sym_GetTailDecl(tom_match10_1) ||  false ) {  Option tom_match10_1_3 = null; tom_match10_1_3 = ( Option) tom_get_slot_GetTailDecl_orgTrack(tom_match10_1); orgTrack = ( Option) tom_match10_1_3;
 
							checkField(GET_TAIL,verifyList,orgTrack, declType);
						 }}_match10_pattern7: {  Option orgTrack = null; if(tom_is_fun_sym_IsEmptyDecl(tom_match10_1) ||  false ) {  Option tom_match10_1_3 = null; tom_match10_1_3 = ( Option) tom_get_slot_IsEmptyDecl_orgTrack(tom_match10_1); orgTrack = ( Option) tom_match10_1_3;
 
							checkField(IS_EMPTY,verifyList,orgTrack, declType);
						 }}_match10_pattern8: {  String name2 = null;  String name1 = null;  Option orgTrack = null; if(tom_is_fun_sym_GetElementDecl(tom_match10_1) ||  false ) {  TomTerm tom_match10_1_1 = null;  TomTerm tom_match10_1_2 = null;  Option tom_match10_1_4 = null; tom_match10_1_1 = ( TomTerm) tom_get_slot_GetElementDecl_kid1(tom_match10_1); tom_match10_1_2 = ( TomTerm) tom_get_slot_GetElementDecl_kid2(tom_match10_1); tom_match10_1_4 = ( Option) tom_get_slot_GetElementDecl_orgTrack(tom_match10_1); if(tom_is_fun_sym_Variable(tom_match10_1_1) ||  false ) {  TomName tom_match10_1_1_2 = null; tom_match10_1_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_1); if(tom_is_fun_sym_Name(tom_match10_1_1_2) ||  false ) {  String tom_match10_1_1_2_1 = null; tom_match10_1_1_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_1_2); name1 = ( String) tom_match10_1_1_2_1; if(tom_is_fun_sym_Variable(tom_match10_1_2) ||  false ) {  TomName tom_match10_1_2_2 = null; tom_match10_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match10_1_2); if(tom_is_fun_sym_Name(tom_match10_1_2_2) ||  false ) {  String tom_match10_1_2_2_1 = null; tom_match10_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match10_1_2_2); name2 = ( String) tom_match10_1_2_2_1; orgTrack = ( Option) tom_match10_1_4;

  
							checkFieldAndLinearArgs(GET_ELEMENT,verifyList,orgTrack,name1,name2, declType);
						 } } } } }}_match10_pattern9: {  Option orgTrack = null; if(tom_is_fun_sym_GetSizeDecl(tom_match10_1) ||  false ) {  Option tom_match10_1_3 = null; tom_match10_1_3 = ( Option) tom_get_slot_GetSizeDecl_orgTrack(tom_match10_1); orgTrack = ( Option) tom_match10_1_3;
 
							checkField(GET_SIZE,verifyList,orgTrack, declType);
						 }} }
 
 	   		 }} } } if(!(tom_is_empty_TomList(tom_match8_1_end1))) { tom_match8_1_end1 = ( TomList) tom_get_tail_TomList(tom_match8_1_end1); } tom_match8_1_list1 = ( TomList) tom_match8_1_end1; } while(!(tom_is_empty_TomList(tom_match8_1_list1))); }} }
 
 	  // remove non mandatory functions
		if(verifyList.contains(EQUALS)) {
			verifyList.remove(verifyList.indexOf(EQUALS));
		}    
		if(!verifyList.isEmpty()) {
			messageMissingMacroFunctions(declType, verifyList);
		}
	}
 	 
	/** 
	 * SYMBOL DECLARATION CONCERNS
	 */
	private void verifySymbol(String symbolType, TomSymbol tomSymbol){
		int domainLength;
		String symbStrName = tomSymbol.getAstName().getString();
		OptionList optionList = tomSymbol.getOption();
			// We save first the origin tracking of the symbol declaration
		currentTomStructureOrgTrack = findOriginTracking(optionList);
		
		// ensure first definition then Codomain, Domain, Macros and Slots (Simple operator)
		verifyMultipleDefinition(symbStrName, symbolType, OPERATOR);
		verifySymbolCodomain(getSymbolCodomain(tomSymbol).getString(), symbStrName, symbolType);
		domainLength = verifySymbolDomain(getSymbolDomain(tomSymbol), symbStrName, symbolType);
		verifySymbolMacroFunctions(optionList, domainLength, symbolType);
		/*if(symbolType == CONSTRUCTOR) {
			verifySymbolSlotList(tomSymbol.getSlotList(), symbolType);
		}*/
	}

	private void verifySymbolCodomain(String codomain, String symbName, String symbolType) {
		if(!testTypeExistence(codomain)) {
			messageError(currentTomStructureOrgTrack.getLine(), 
														symbolType+" "+symbName, 
														TomCheckerMessage.SymbolCodomainError,
														new Object[]{symbName, codomain}, TomCheckerMessage.TOM_ERROR);
		}
	}
 	 
	private int verifySymbolDomain(TomTypeList args, String symbName, String symbolType) {
		int position = 1;
		if(symbolType == CONSTRUCTOR) {
			 {  TomTypeList tom_match11_1 = null; tom_match11_1 = ( TomTypeList) args;_match11_pattern1: {  TomType tom_absvar4 = null; if(tom_is_fun_sym_concTomType(tom_match11_1) ||  false ) {  TomTypeList tom_match11_1_begin1 = null;  TomTypeList tom_match11_1_end1 = null;  TomTypeList tom_match11_1_list1 = null; tom_match11_1_list1 = ( TomTypeList) tom_match11_1; tom_match11_1_begin1 = ( TomTypeList) tom_match11_1_list1; tom_match11_1_end1 = ( TomTypeList) tom_match11_1_list1; do { if(!(tom_is_empty_TomTypeList(tom_match11_1_list1))) { tom_absvar4 = ( TomType) tom_get_head_TomTypeList(tom_match11_1_list1); tom_match11_1_list1 = ( TomTypeList) tom_get_tail_TomTypeList(tom_match11_1_list1); {  TomType tom_match12_1 = null; tom_match12_1 = ( TomType) tom_absvar4;_match12_pattern1: {  String typeName = null; if(tom_is_fun_sym_TomTypeAlone(tom_match12_1) ||  false ) {  String tom_match12_1_1 = null; tom_match12_1_1 = ( String) tom_get_slot_TomTypeAlone_string(tom_match12_1); typeName = ( String) tom_match12_1_1;
  // for each symbol types
						if(!testTypeExistence(typeName)) {
							messageError(currentTomStructureOrgTrack.getLine(), 
																		symbolType+" "+symbName, 
																		TomCheckerMessage.SymbolDomainError,
																		new Object[]{new Integer(position), symbName, typeName}, TomCheckerMessage.TOM_ERROR);
						}
						position++;
					 }} } } if(!(tom_is_empty_TomTypeList(tom_match11_1_end1))) { tom_match11_1_end1 = ( TomTypeList) tom_get_tail_TomTypeList(tom_match11_1_end1); } tom_match11_1_list1 = ( TomTypeList) tom_match11_1_end1; } while(!(tom_is_empty_TomTypeList(tom_match11_1_list1))); }} }
 
			return (position-1);
		} else { // OPARRAY and OPLIST
			 {  TomTypeList tom_match13_1 = null; tom_match13_1 = ( TomTypeList) args;_match13_pattern1: {  TomType tom_absvar5 = null; if(tom_is_fun_sym_concTomType(tom_match13_1) ||  false ) {  TomTypeList tom_match13_1_list1 = null; tom_match13_1_list1 = ( TomTypeList) tom_match13_1; if(!(tom_is_empty_TomTypeList(tom_match13_1_list1))) { tom_absvar5 = ( TomType) tom_get_head_TomTypeList(tom_match13_1_list1); tom_match13_1_list1 = ( TomTypeList) tom_get_tail_TomTypeList(tom_match13_1_list1); if(tom_is_empty_TomTypeList(tom_match13_1_list1)) { {  TomType tom_match14_1 = null; tom_match14_1 = ( TomType) tom_absvar5;_match14_pattern1: {  String typeName = null; if(tom_is_fun_sym_TomTypeAlone(tom_match14_1) ||  false ) {  String tom_match14_1_1 = null; tom_match14_1_1 = ( String) tom_get_slot_TomTypeAlone_string(tom_match14_1); typeName = ( String) tom_match14_1_1;
 
					if(!testTypeExistence(typeName)) {
						messageError(currentTomStructureOrgTrack.getLine(), 
																	symbolType+" "+symbName, 
																	TomCheckerMessage.ListSymbolDomainError,
																	new Object[]{symbName, typeName}, TomCheckerMessage.TOM_ERROR);
					}
				 }} } } } }} }
  //match
			return 1;
		}
	}
 	
 	private boolean testTypeExistence(String typeName) {
		return symbolTable().getType(typeName) != null;
 	}
 	
	private void verifySymbolMacroFunctions(OptionList list, int domainLength, String symbolType) {
		ArrayList verifyList = new ArrayList();
		boolean foundOpMake = false;
		if(symbolType == CONSTRUCTOR){ //Nothing
		} else if(symbolType == OP_ARRAY ) {
			verifyList.add(MAKE_EMPTY);
			verifyList.add(MAKE_APPEND);
		} else if(symbolType == OP_LIST) {
			verifyList.add(MAKE_EMPTY);
			verifyList.add(MAKE_INSERT); 
		}
 	
		 {  OptionList tom_match15_1 = null; tom_match15_1 = ( OptionList) list;_match15_pattern1: {  Option tom_absvar6 = null; if(tom_is_fun_sym_concOption(tom_match15_1) ||  false ) {  OptionList tom_match15_1_begin1 = null;  OptionList tom_match15_1_end1 = null;  OptionList tom_match15_1_list1 = null; tom_match15_1_list1 = ( OptionList) tom_match15_1; tom_match15_1_begin1 = ( OptionList) tom_match15_1_list1; tom_match15_1_end1 = ( OptionList) tom_match15_1_list1; do { if(!(tom_is_empty_OptionList(tom_match15_1_list1))) { tom_absvar6 = ( Option) tom_get_head_OptionList(tom_match15_1_list1); tom_match15_1_list1 = ( OptionList) tom_get_tail_OptionList(tom_match15_1_list1); {  Option tom_match16_1 = null; tom_match16_1 = ( Option) tom_absvar6;_match16_pattern1: {  Declaration decl = null; if(tom_is_fun_sym_DeclarationToOption(tom_match16_1) ||  false ) {  Declaration tom_match16_1_1 = null; tom_match16_1_1 = ( Declaration) tom_get_slot_DeclarationToOption_astDeclaration(tom_match16_1); decl = ( Declaration) tom_match16_1_1;
  // for each Declaration
				 {  Declaration tom_match17_1 = null; tom_match17_1 = ( Declaration) decl;_match17_pattern1: {  Option orgTrack = null; if(tom_is_fun_sym_MakeEmptyArray(tom_match17_1) ||  false ) {  Option tom_match17_1_4 = null; tom_match17_1_4 = ( Option) tom_get_slot_MakeEmptyArray_orgTrack(tom_match17_1); orgTrack = ( Option) tom_match17_1_4;

  
						checkField(MAKE_EMPTY,verifyList,orgTrack, symbolType);
					 }}_match17_pattern2: {  String name2 = null;  Option orgTrack = null;  String name1 = null; if(tom_is_fun_sym_MakeAddArray(tom_match17_1) ||  false ) {  TomTerm tom_match17_1_2 = null;  TomTerm tom_match17_1_3 = null;  Option tom_match17_1_5 = null; tom_match17_1_2 = ( TomTerm) tom_get_slot_MakeAddArray_varElt(tom_match17_1); tom_match17_1_3 = ( TomTerm) tom_get_slot_MakeAddArray_varList(tom_match17_1); tom_match17_1_5 = ( Option) tom_get_slot_MakeAddArray_orgTrack(tom_match17_1); if(tom_is_fun_sym_Variable(tom_match17_1_2) ||  false ) {  TomName tom_match17_1_2_2 = null; tom_match17_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match17_1_2); if(tom_is_fun_sym_Name(tom_match17_1_2_2) ||  false ) {  String tom_match17_1_2_2_1 = null; tom_match17_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match17_1_2_2); name2 = ( String) tom_match17_1_2_2_1; if(tom_is_fun_sym_Variable(tom_match17_1_3) ||  false ) {  TomName tom_match17_1_3_2 = null; tom_match17_1_3_2 = ( TomName) tom_get_slot_Variable_astName(tom_match17_1_3); if(tom_is_fun_sym_Name(tom_match17_1_3_2) ||  false ) {  String tom_match17_1_3_2_1 = null; tom_match17_1_3_2_1 = ( String) tom_get_slot_Name_string(tom_match17_1_3_2); name1 = ( String) tom_match17_1_3_2_1; orgTrack = ( Option) tom_match17_1_5;
 
						checkFieldAndLinearArgs(MAKE_APPEND, verifyList, orgTrack, name1, name2, symbolType);
					 } } } } }}_match17_pattern3: {  Option orgTrack = null; if(tom_is_fun_sym_MakeEmptyList(tom_match17_1) ||  false ) {  Option tom_match17_1_3 = null; tom_match17_1_3 = ( Option) tom_get_slot_MakeEmptyList_orgTrack(tom_match17_1); orgTrack = ( Option) tom_match17_1_3;

 
						checkField(MAKE_EMPTY,verifyList,orgTrack, symbolType);         
					 }}_match17_pattern4: {  String name2 = null;  Option orgTrack = null;  String name1 = null; if(tom_is_fun_sym_MakeAddList(tom_match17_1) ||  false ) {  TomTerm tom_match17_1_2 = null;  TomTerm tom_match17_1_3 = null;  Option tom_match17_1_5 = null; tom_match17_1_2 = ( TomTerm) tom_get_slot_MakeAddList_varElt(tom_match17_1); tom_match17_1_3 = ( TomTerm) tom_get_slot_MakeAddList_varList(tom_match17_1); tom_match17_1_5 = ( Option) tom_get_slot_MakeAddList_orgTrack(tom_match17_1); if(tom_is_fun_sym_Variable(tom_match17_1_2) ||  false ) {  TomName tom_match17_1_2_2 = null; tom_match17_1_2_2 = ( TomName) tom_get_slot_Variable_astName(tom_match17_1_2); if(tom_is_fun_sym_Name(tom_match17_1_2_2) ||  false ) {  String tom_match17_1_2_2_1 = null; tom_match17_1_2_2_1 = ( String) tom_get_slot_Name_string(tom_match17_1_2_2); name2 = ( String) tom_match17_1_2_2_1; if(tom_is_fun_sym_Variable(tom_match17_1_3) ||  false ) {  TomName tom_match17_1_3_2 = null; tom_match17_1_3_2 = ( TomName) tom_get_slot_Variable_astName(tom_match17_1_3); if(tom_is_fun_sym_Name(tom_match17_1_3_2) ||  false ) {  String tom_match17_1_3_2_1 = null; tom_match17_1_3_2_1 = ( String) tom_get_slot_Name_string(tom_match17_1_3_2); name1 = ( String) tom_match17_1_3_2_1; orgTrack = ( Option) tom_match17_1_5;
 
						checkFieldAndLinearArgs(MAKE_INSERT, verifyList, orgTrack, name1, name2, symbolType);
					 } } } } }}_match17_pattern5: {  TomList makeArgsList = null;  Option orgTrack = null; if(tom_is_fun_sym_MakeDecl(tom_match17_1) ||  false ) {  TomList tom_match17_1_3 = null;  Option tom_match17_1_5 = null; tom_match17_1_3 = ( TomList) tom_get_slot_MakeDecl_args(tom_match17_1); tom_match17_1_5 = ( Option) tom_get_slot_MakeDecl_orgTrack(tom_match17_1); makeArgsList = ( TomList) tom_match17_1_3; orgTrack = ( Option) tom_match17_1_5;

 
						if (!foundOpMake) {
							foundOpMake = true;
							verifyMakeDeclArgs(makeArgsList, domainLength, orgTrack, symbolType);
						} else {
							messageError(orgTrack.getLine(), 
																		symbolType+" "+currentTomStructureOrgTrack.getAstName().getString(), 
																		TomCheckerMessage.MacroFunctionRepeated,
																		new Object[]{MAKE}, TomCheckerMessage.TOM_ERROR);
						}
					 }} }
 
			 }} } } if(!(tom_is_empty_OptionList(tom_match15_1_end1))) { tom_match15_1_end1 = ( OptionList) tom_get_tail_OptionList(tom_match15_1_end1); } tom_match15_1_list1 = ( OptionList) tom_match15_1_end1; } while(!(tom_is_empty_OptionList(tom_match15_1_list1))); }} }
 
		if(!verifyList.isEmpty()) {
			messageMissingMacroFunctions(symbolType, verifyList);
		}
	}
	
	private void verifyMakeDeclArgs(TomList argsList, int domainLength, Option orgTrack, String symbolType){
			// we test the necessity to use different names for each variable-parameter.
		int nbArgs = 0;
		ArrayList listVar = new ArrayList();
		 {  TomList tom_match18_1 = null; tom_match18_1 = ( TomList) argsList;_match18_pattern1: {  TomTerm tom_absvar7 = null; if(tom_is_fun_sym_concTomTerm(tom_match18_1) ||  false ) {  TomList tom_match18_1_begin1 = null;  TomList tom_match18_1_end1 = null;  TomList tom_match18_1_list1 = null; tom_match18_1_list1 = ( TomList) tom_match18_1; tom_match18_1_begin1 = ( TomList) tom_match18_1_list1; tom_match18_1_end1 = ( TomList) tom_match18_1_list1; do { if(!(tom_is_empty_TomList(tom_match18_1_list1))) { tom_absvar7 = ( TomTerm) tom_get_head_TomList(tom_match18_1_list1); tom_match18_1_list1 = ( TomList) tom_get_tail_TomList(tom_match18_1_list1); {  TomTerm tom_match19_1 = null; tom_match19_1 = ( TomTerm) tom_absvar7;_match19_pattern1: {  String name = null;  OptionList listOption = null; if(tom_is_fun_sym_Variable(tom_match19_1) ||  false ) {  OptionList tom_match19_1_1 = null;  TomName tom_match19_1_2 = null; tom_match19_1_1 = ( OptionList) tom_get_slot_Variable_option(tom_match19_1); tom_match19_1_2 = ( TomName) tom_get_slot_Variable_astName(tom_match19_1); listOption = ( OptionList) tom_match19_1_1; if(tom_is_fun_sym_Name(tom_match19_1_2) ||  false ) {  String tom_match19_1_2_1 = null; tom_match19_1_2_1 = ( String) tom_get_slot_Name_string(tom_match19_1_2); name = ( String) tom_match19_1_2_1;
  // for each Macro variable
				if(listVar.contains(name)) {
					messageError(orgTrack.getLine(), 
								symbolType+" "+currentTomStructureOrgTrack.getAstName().getString(), 
								TomCheckerMessage.NonLinearMacroFunction,
								new Object[]{MAKE, name},
								TomCheckerMessage.TOM_ERROR);
				} else {
					listVar.add(name);
				}
				nbArgs++;
			 } }} } } if(!(tom_is_empty_TomList(tom_match18_1_end1))) { tom_match18_1_end1 = ( TomList) tom_get_tail_TomList(tom_match18_1_end1); } tom_match18_1_list1 = ( TomList) tom_match18_1_end1; } while(!(tom_is_empty_TomList(tom_match18_1_list1))); }} }
 
		if(nbArgs != domainLength) {
			messageError(orgTrack.getLine(), 
						symbolType+" "+currentTomStructureOrgTrack.getAstName().getString(), 
						TomCheckerMessage.BadMakeDefinition,
						new Object[]{new Integer(nbArgs), new Integer(domainLength)}, TomCheckerMessage.TOM_ERROR);			
		}
	}
	
	private void verifySymbolSlotList(SlotList slotList, String symbolType) {
		// we test the existence of 2 same slot names
	ArrayList listSlot = new ArrayList();
	 {  SlotList tom_match20_1 = null; tom_match20_1 = ( SlotList) slotList;_match20_pattern1: {  PairNameDecl tom_absvar8 = null; if(tom_is_fun_sym_concPairNameDecl(tom_match20_1) ||  false ) {  SlotList tom_match20_1_begin1 = null;  SlotList tom_match20_1_end1 = null;  SlotList tom_match20_1_list1 = null; tom_match20_1_list1 = ( SlotList) tom_match20_1; tom_match20_1_begin1 = ( SlotList) tom_match20_1_list1; tom_match20_1_end1 = ( SlotList) tom_match20_1_list1; do { if(!(tom_is_empty_SlotList(tom_match20_1_list1))) { tom_absvar8 = ( PairNameDecl) tom_get_head_SlotList(tom_match20_1_list1); tom_match20_1_list1 = ( SlotList) tom_get_tail_SlotList(tom_match20_1_list1); {  PairNameDecl tom_match21_1 = null; tom_match21_1 = ( PairNameDecl) tom_absvar8;_match21_pattern1: {  String name = null; if(tom_is_fun_sym_Slot(tom_match21_1) ||  false ) {  TomName tom_match21_1_1 = null; tom_match21_1_1 = ( TomName) tom_get_slot_Slot_slotName(tom_match21_1); if(tom_is_fun_sym_Name(tom_match21_1_1) ||  false ) {  String tom_match21_1_1_1 = null; tom_match21_1_1_1 = ( String) tom_get_slot_Name_string(tom_match21_1_1); name = ( String) tom_match21_1_1_1;
  // for each Slot
			if(listSlot.contains(name)) {
				//TODO
				//messageWarningTwoSameSlotDeclError(name, orgTrack, symbolType);
			} else {
				listSlot.add(name);
			}
		 } }} } } if(!(tom_is_empty_SlotList(tom_match20_1_end1))) { tom_match20_1_end1 = ( SlotList) tom_get_tail_SlotList(tom_match20_1_end1); } tom_match20_1_list1 = ( SlotList) tom_match20_1_end1; } while(!(tom_is_empty_SlotList(tom_match20_1_list1))); }} }
 
	}
	
	private void verifyMultipleDefinition(String name, String symbolType, String OperatorOrType) {
		ArrayList list;
		if (OperatorOrType.equals(OPERATOR)) {
			list = alreadyStudiedSymbols;
		} else {
			list = alreadyStudiedTypes;
		}
		if(list.contains(name)) {
			messageError(currentTomStructureOrgTrack.getLine(), 
														symbolType+" "+name, 
														TomCheckerMessage.MultipleSymbolDefinitionError,
														new Object[]{name}, TomCheckerMessage.TOM_ERROR);
		} else {
			list.add(name);
		}
	}
	
	private void checkField(String function, ArrayList foundFunctions, Option orgTrack, String symbolType) {
		if(foundFunctions.contains(function)) {
			foundFunctions.remove(foundFunctions.indexOf(function)); 
		} else {
			messageError(orgTrack.getLine(), 
											"structure "+symbolType+" "+currentTomStructureOrgTrack.getAstName().getString(), 
											TomCheckerMessage.MacroFunctionRepeated,
											new Object[]{function}, TomCheckerMessage.TOM_ERROR);
		}
	}
 	 
	private void checkFieldAndLinearArgs(String function, ArrayList foundFunctions, Option orgTrack, String name1, String name2, String symbolType) {
		checkField(function,foundFunctions, orgTrack, symbolType);
		if(name1.equals(name2)) {
			messageError(orgTrack.getLine(), 
											symbolType+" "+currentTomStructureOrgTrack.getAstName().getString(), 
											TomCheckerMessage.NonLinearMacroFunction,
											new Object[]{function, name1}, TomCheckerMessage.TOM_ERROR);
		}
	}
 	 
	private void messageMissingMacroFunctions(String symbolType, ArrayList list) {
		String listOfMissingMacros = "";
		for(int i=0;i<list.size();i++) {
			listOfMissingMacros+= list.get(i)+",  ";
		}
		listOfMissingMacros = listOfMissingMacros.substring(0, listOfMissingMacros.length()-3);
		messageError(currentTomStructureOrgTrack.getLine(), 
													symbolType+" "+currentTomStructureOrgTrack.getAstName().getString(),
													TomCheckerMessage.MissingMacroFunctions,
													new Object[]{listOfMissingMacros}, TomCheckerMessage.TOM_ERROR);
	}
 	 
	/** 
	 * MATCH VERIFICATION CONCERNS 
	 */
		// Given a MatchConstruct's subject list and pattern-action list
	private void verifyMatch(TomList subjectList, TomList patternList, OptionList list) {
		currentTomStructureOrgTrack = findOriginTracking(list);
		ArrayList typeMatchArgs = new ArrayList(), nameMatchArgs = new ArrayList();
			// From the subjects list(match definition), we test each used type and keep them in memory
		 {  TomList tom_match22_1 = null; tom_match22_1 = ( TomList) subjectList;_match22_pattern1: {  TomTerm tom_absvar9 = null; if(tom_is_fun_sym_concTomTerm(tom_match22_1) ||  false ) {  TomList tom_match22_1_begin1 = null;  TomList tom_match22_1_end1 = null;  TomList tom_match22_1_list1 = null; tom_match22_1_list1 = ( TomList) tom_match22_1; tom_match22_1_begin1 = ( TomList) tom_match22_1_list1; tom_match22_1_end1 = ( TomList) tom_match22_1_list1; do { if(!(tom_is_empty_TomList(tom_match22_1_list1))) { tom_absvar9 = ( TomTerm) tom_get_head_TomList(tom_match22_1_list1); tom_match22_1_list1 = ( TomList) tom_get_tail_TomList(tom_match22_1_list1); {  TomTerm tom_match23_1 = null; tom_match23_1 = ( TomTerm) tom_absvar9;_match23_pattern1: {  String name = null;  TomType tomType = null;  String type = null; if(tom_is_fun_sym_TLVar(tom_match23_1) ||  false ) {  String tom_match23_1_1 = null;  TomType tom_match23_1_2 = null; tom_match23_1_1 = ( String) tom_get_slot_TLVar_strName(tom_match23_1); tom_match23_1_2 = ( TomType) tom_get_slot_TLVar_astType(tom_match23_1); name = ( String) tom_match23_1_1; if(tom_is_fun_sym_TomTypeAlone(tom_match23_1_2) ||  false ) {  String tom_match23_1_2_1 = null; tom_match23_1_2_1 = ( String) tom_get_slot_TomTypeAlone_string(tom_match23_1_2); tomType = ( TomType) tom_match23_1_2; type = ( String) tom_match23_1_2_1;
  // for each Match args
				if (!testTypeExistence(type)) {
					messageError(currentTomStructureOrgTrack.getLine(),
																TomCheckerMessage.UnknownMatchArgumentTypeInSignature,
																new Object[]{name, type},
																TomCheckerMessage.TOM_ERROR);
					typeMatchArgs.add(null);
				} else {
					typeMatchArgs.add(tomType);
				}
				if(nameMatchArgs.indexOf(name) == -1) {
					nameMatchArgs.add(name);
				} else {
						// Maybe its an error: warn the user
					messageError(currentTomStructureOrgTrack.getLine(),
																TomCheckerMessage.RepeatedMatchArgumentName,
																new Object[]{name},
																TomCheckerMessage.TOM_WARNING);
				}
			 } }} } } if(!(tom_is_empty_TomList(tom_match22_1_end1))) { tom_match22_1_end1 = ( TomList) tom_get_tail_TomList(tom_match22_1_end1); } tom_match22_1_list1 = ( TomList) tom_match22_1_end1; } while(!(tom_is_empty_TomList(tom_match22_1_list1))); }} } {  TomList tom_match24_1 = null; tom_match24_1 = ( TomList) patternList;_match24_pattern1: {  TomTerm tom_absvar10 = null; if(tom_is_fun_sym_concTomTerm(tom_match24_1) ||  false ) {  TomList tom_match24_1_begin1 = null;  TomList tom_match24_1_end1 = null;  TomList tom_match24_1_list1 = null; tom_match24_1_list1 = ( TomList) tom_match24_1; tom_match24_1_begin1 = ( TomList) tom_match24_1_list1; tom_match24_1_end1 = ( TomList) tom_match24_1_list1; do { if(!(tom_is_empty_TomList(tom_match24_1_list1))) { tom_absvar10 = ( TomTerm) tom_get_head_TomList(tom_match24_1_list1); tom_match24_1_list1 = ( TomList) tom_get_tail_TomList(tom_match24_1_list1); {  TomTerm tom_match25_1 = null; tom_match25_1 = ( TomTerm) tom_absvar10;_match25_pattern1: {  TomList terms = null; if(tom_is_fun_sym_PatternAction(tom_match25_1) ||  false ) {  TomTerm tom_match25_1_1 = null; tom_match25_1_1 = ( TomTerm) tom_get_slot_PatternAction_termList(tom_match25_1); if(tom_is_fun_sym_TermList(tom_match25_1_1) ||  false ) {  TomList tom_match25_1_1_1 = null; tom_match25_1_1_1 = ( TomList) tom_get_slot_TermList_tomList(tom_match25_1_1); terms = ( TomList) tom_match25_1_1_1;


  // control each pattern vs the match definition
				verifyMatchPattern(terms, typeMatchArgs);
			 } }} } } if(!(tom_is_empty_TomList(tom_match24_1_end1))) { tom_match24_1_end1 = ( TomList) tom_get_tail_TomList(tom_match24_1_end1); } tom_match24_1_list1 = ( TomList) tom_match24_1_end1; } while(!(tom_is_empty_TomList(tom_match24_1_list1))); }} }
 
	}
	
	  // each patternList shall have the expected length and each term shall be valid
	private void verifyMatchPattern(TomList termList, ArrayList typeMatchArgs) {
		int nbFoundArgs = termList.getLength(), nbExpectedArgs = typeMatchArgs.size();
		if(nbFoundArgs != nbExpectedArgs) {
			messageError(findOriginTrackingLine(termList.getHead().getOption()),
														TomCheckerMessage.BadMatchNumberArgument,
														new Object[]{new Integer(nbExpectedArgs), new Integer(nbFoundArgs)},
														TomCheckerMessage.TOM_ERROR);
			return ;
		}
		
		TomType expectedType;
		int counter = 0, termClass = 0;
		 {  TomList tom_match26_1 = null; tom_match26_1 = ( TomList) termList;_match26_pattern1: {  TomTerm term = null; if(tom_is_fun_sym_concTomTerm(tom_match26_1) ||  false ) {  TomList tom_match26_1_begin1 = null;  TomList tom_match26_1_end1 = null;  TomList tom_match26_1_list1 = null; tom_match26_1_list1 = ( TomList) tom_match26_1; tom_match26_1_begin1 = ( TomList) tom_match26_1_list1; tom_match26_1_end1 = ( TomList) tom_match26_1_list1; do { if(!(tom_is_empty_TomList(tom_match26_1_list1))) { term = ( TomTerm) tom_get_head_TomList(tom_match26_1_list1); tom_match26_1_list1 = ( TomList) tom_get_tail_TomList(tom_match26_1_list1);
  // no term can be a  Var* nor _*: not allowed as top leftmost symbol
				TermDescription termDesc = analyseTerm(term);
				if(termDesc.termClass == UNAMED_VARIABLE_STAR || termDesc.termClass == VARIABLE_STAR) {
					messageError(termDesc.decLine, 
																TomCheckerMessage.IncorrectVariableStar, 
																new Object[]{termDesc.name},
																TomCheckerMessage.TOM_ERROR);
				} else {		// Analyse of the term if expectedType != null	
					expectedType = (TomType)typeMatchArgs.get(counter);
					if (expectedType != null) {
						validateTerm(term, expectedType, false, true, false);
					}
				}
				counter++;
			 } if(!(tom_is_empty_TomList(tom_match26_1_end1))) { tom_match26_1_end1 = ( TomList) tom_get_tail_TomList(tom_match26_1_end1); } tom_match26_1_list1 = ( TomList) tom_match26_1_end1; } while(!(tom_is_empty_TomList(tom_match26_1_list1))); }} }
 
	}

	/** 
	 * RULE VERIFICATION CONCERNS 
	 */
	private void verifyRule(TomRuleList ruleList, Option orgTrack) {
		int ruleNumber = 0;
		currentTomStructureOrgTrack = orgTrack;
		String headSymbolName = "Unknown return type";
		 {  TomRuleList tom_match27_1 = null; tom_match27_1 = ( TomRuleList) ruleList;b1: {_match27_pattern1: {  TomRule tom_absvar11 = null; if(tom_is_fun_sym_concTomRule(tom_match27_1) ||  false ) {  TomRuleList tom_match27_1_begin1 = null;  TomRuleList tom_match27_1_end1 = null;  TomRuleList tom_match27_1_list1 = null; tom_match27_1_list1 = ( TomRuleList) tom_match27_1; tom_match27_1_begin1 = ( TomRuleList) tom_match27_1_list1; tom_match27_1_end1 = ( TomRuleList) tom_match27_1_list1; do { if(!(tom_is_empty_TomRuleList(tom_match27_1_list1))) { tom_absvar11 = ( TomRule) tom_get_head_TomRuleList(tom_match27_1_list1); tom_match27_1_list1 = ( TomRuleList) tom_get_tail_TomRuleList(tom_match27_1_list1); {  TomRule tom_match28_1 = null; tom_match28_1 = ( TomRule) tom_absvar11;_match28_pattern1: {  OptionList option = null;  TomTerm rhs = null;  TomTerm lhs = null;  TomList condList = null; if(tom_is_fun_sym_RewriteRule(tom_match28_1) ||  false ) {  TomTerm tom_match28_1_1 = null;  TomTerm tom_match28_1_2 = null;  TomList tom_match28_1_3 = null;  OptionList tom_match28_1_4 = null; tom_match28_1_1 = ( TomTerm) tom_get_slot_RewriteRule_lhs(tom_match28_1); tom_match28_1_2 = ( TomTerm) tom_get_slot_RewriteRule_rhs(tom_match28_1); tom_match28_1_3 = ( TomList) tom_get_slot_RewriteRule_condList(tom_match28_1); tom_match28_1_4 = ( OptionList) tom_get_slot_RewriteRule_option(tom_match28_1); if(tom_is_fun_sym_Term(tom_match28_1_1) ||  false ) {  TomTerm tom_match28_1_1_1 = null; tom_match28_1_1_1 = ( TomTerm) tom_get_slot_Term_tomTerm(tom_match28_1_1); lhs = ( TomTerm) tom_match28_1_1_1; if(tom_is_fun_sym_Term(tom_match28_1_2) ||  false ) {  TomTerm tom_match28_1_2_1 = null; tom_match28_1_2_1 = ( TomTerm) tom_get_slot_Term_tomTerm(tom_match28_1_2); rhs = ( TomTerm) tom_match28_1_2_1; condList = ( TomList) tom_match28_1_3; option = ( OptionList) tom_match28_1_4;
 
				headSymbolName = verifyLhsRuleAndConstructorEgality(lhs, headSymbolName, ruleNumber);
				if( headSymbolName == null ) { return; }
				verifyRhsRuleStructure(rhs, headSymbolName);
				ruleNumber++;
			 } } }} } } if(!(tom_is_empty_TomRuleList(tom_match27_1_end1))) { tom_match27_1_end1 = ( TomRuleList) tom_get_tail_TomRuleList(tom_match27_1_end1); } tom_match27_1_list1 = ( TomRuleList) tom_match27_1_end1; } while(!(tom_is_empty_TomRuleList(tom_match27_1_list1))); }}} }
 
	}
  
	private String verifyLhsRuleAndConstructorEgality(TomTerm lhs, String  headSymbolName, int ruleNumber) {
		String currentHeadSymbolName;
		TomType lhsType  = null;
		TomSymbol symbol = null;
		// We support only Appl and RecordAppl
		int termClass = getClass(lhs);
		if(  termClass != APPL && termClass != RECORD_APPL) {
			String termName;
			if (termClass == XML_APPL) { 
				termName = "XML construct "+getName(lhs);
			} else if (termClass ==  APPL_DISJUNCTION || termClass == RECORD_APPL_DISJUNCTION) {
				termName = "Disjunction";
			} else {
				termName = getName(lhs);
			}	
			messageError(findOriginTrackingLine(lhs.getOption()), 
														TomCheckerMessage.IncorrectRuleLHSClass, new Object[]{termName}, 
														TomCheckerMessage.TOM_ERROR);
			return null;
		}
		
		currentHeadSymbolName = getName(lhs);
		if(ruleNumber == 0) {
				// update the root of lhs: it becomes a defined symbol
			symbol = ast().updateDefinedSymbol(symbolTable(),lhs);
			if( symbol == null ) {
				messageError(findOriginTrackingLine(lhs.getOption()),
															TomCheckerMessage.UnknownSymbol, 
															new Object[]{currentHeadSymbolName},
															TomCheckerMessage.TOM_ERROR);
					// We can not continue anymore
				return null;
			}
			  //ensure we are able to construct this symbol
			if ( !findMakeDecl(symbol.getOption())) {
				messageError(findOriginTrackingLine(lhs.getOption()),
															TomCheckerMessage.NoRuleMakeDecl, 
															new Object[]{currentHeadSymbolName},
															TomCheckerMessage.TOM_ERROR);
			}
			
			if(alreadyStudiedRule.contains(currentHeadSymbolName)) {
				messageError(currentTomStructureOrgTrack.getLine(),
															TomCheckerMessage.MultipleRuleDefinition,
															new Object[]{currentHeadSymbolName},
															TomCheckerMessage.TOM_ERROR);
				return null;
			} else {
				alreadyStudiedRule.add(currentHeadSymbolName);
			}
		} else { //  ruleNumber > 0
				// Test constructor equality
			String newName = getName(lhs);
			if (!headSymbolName.equals(currentHeadSymbolName)) {
				messageError(findOriginTrackingLine(lhs.getOption()),
															TomCheckerMessage.DifferentRuleConstructor, 
															new Object[]{headSymbolName, currentHeadSymbolName}, TomCheckerMessage.TOM_ERROR); 
			}
		}
		symbol = getSymbol(currentHeadSymbolName);
		lhsType = getSymbolCodomain(symbol);
		  // analyse the term
		validateTerm(lhs, lhsType, isListOperator(symbol)||isArrayOperator(symbol), true, false);
		return currentHeadSymbolName;
	}

	private boolean findMakeDecl(OptionList list) {
		 {  OptionList tom_match29_1 = null; tom_match29_1 = ( OptionList) list;_match29_pattern1: {  Option tom_absvar12 = null; if(tom_is_fun_sym_concOption(tom_match29_1) ||  false ) {  OptionList tom_match29_1_begin1 = null;  OptionList tom_match29_1_end1 = null;  OptionList tom_match29_1_list1 = null; tom_match29_1_list1 = ( OptionList) tom_match29_1; tom_match29_1_begin1 = ( OptionList) tom_match29_1_list1; tom_match29_1_end1 = ( OptionList) tom_match29_1_list1; do { if(!(tom_is_empty_OptionList(tom_match29_1_list1))) { tom_absvar12 = ( Option) tom_get_head_OptionList(tom_match29_1_list1); tom_match29_1_list1 = ( OptionList) tom_get_tail_OptionList(tom_match29_1_list1); {  Option tom_match30_1 = null; tom_match30_1 = ( Option) tom_absvar12;_match30_pattern1: { if(tom_is_fun_sym_DeclarationToOption(tom_match30_1) ||  false ) {  Declaration tom_match30_1_1 = null; tom_match30_1_1 = ( Declaration) tom_get_slot_DeclarationToOption_astDeclaration(tom_match30_1); if(tom_is_fun_sym_MakeDecl(tom_match30_1_1) ||  false ) {
 
				return true;
			 } }} } } if(!(tom_is_empty_OptionList(tom_match29_1_end1))) { tom_match29_1_end1 = ( OptionList) tom_get_tail_OptionList(tom_match29_1_end1); } tom_match29_1_list1 = ( OptionList) tom_match29_1_end1; } while(!(tom_is_empty_OptionList(tom_match29_1_list1))); }} }
 
		return false;
	}
	

		//Rhs shall have no underscore, be a var* nor _*, nor a RecordAppl
	private void verifyRhsRuleStructure(TomTerm rhs, String lhsHeadSymbolName) {
		int termClass = getClass(rhs); //TermDescription termDesc = analyseTerm(lhs);
		if(  termClass != APPL) {
			String termName;
			if (termClass == XML_APPL) { 
				termName = "XML construct "+getName(rhs);
			} else if (termClass ==  APPL_DISJUNCTION || termClass == RECORD_APPL_DISJUNCTION) {
				termName = "Disjunction";
			} else if (termClass == RECORD_APPL) {
				termName = getName(rhs)+"[...]";
			} else {
				termName = getName(rhs);
			}	
			messageError(findOriginTrackingLine(rhs.getOption()), 
														TomCheckerMessage.IncorrectRuleRHSClass, new Object[]{termName}, 
														TomCheckerMessage.TOM_ERROR);
			return;
		}
		
		TomSymbol symbol = getSymbol(lhsHeadSymbolName);
		TomType lhsType = getSymbolCodomain(symbol);
		TermDescription termDesc = validateTerm(rhs, lhsType, isListOperator(symbol)||isArrayOperator(symbol), true, true);
		TomType rhsType = termDesc.tomType;
		if(rhsType != null) {
			if(rhsType != lhsType) {
				String rhsTypeName;
				if(rhsType.isEmptyType()) {rhsTypeName = "Not Type Found";} else {rhsTypeName = rhsType.getString();}
				messageError(findOriginTrackingLine(rhs.getOption()), 
																		TomCheckerMessage.IncorrectRuleRHSType, new Object[]{rhsTypeName, lhsType.getString()}, 
																		TomCheckerMessage.TOM_ERROR);
			}
		}
	}

  // Analyse a term given an expected type and reenter recursively on childs
	public TermDescription validateTerm(TomTerm term, TomType expectedType, boolean listSymbol, boolean topLevel, boolean permissive) {
		String termName = "emptyName";
		TomType type = null;
		int termClass, decLine;
		Option orgTrack;
		matchblock:{
			 {  TomTerm tom_match31_1 = null; tom_match31_1 = ( TomTerm) term;_match31_pattern1: {  TomName tom_absvar13 = null;  OptionList options = null;  TomList args = null;  NameList nameList = null; if(tom_is_fun_sym_Appl(tom_match31_1) ||  false ) {  OptionList tom_match31_1_1 = null;  NameList tom_match31_1_2 = null;  TomList tom_match31_1_3 = null; tom_match31_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match31_1); tom_match31_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match31_1); tom_match31_1_3 = ( TomList) tom_get_slot_Appl_args(tom_match31_1); options = ( OptionList) tom_match31_1_1; if(tom_is_fun_sym_concTomName(tom_match31_1_2) ||  false ) { nameList = ( NameList) tom_match31_1_2;  NameList tom_match31_1_2_list1 = null; tom_match31_1_2_list1 = ( NameList) tom_match31_1_2; if(!(tom_is_empty_NameList(tom_match31_1_2_list1))) { tom_absvar13 = ( TomName) tom_get_head_NameList(tom_match31_1_2_list1); tom_match31_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match31_1_2_list1); if(tom_is_empty_NameList(tom_match31_1_2_list1)) { args = ( TomList) tom_match31_1_3; {  TomName tom_match32_1 = null; tom_match32_1 = ( TomName) tom_absvar13;_match32_pattern1: { if(tom_is_fun_sym_Name(tom_match32_1) ||  false ) {  String tom_match32_1_1 = null; tom_match32_1_1 = ( String) tom_get_slot_Name_string(tom_match32_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match32_1_1) , "") ||  false ) {
 
					decLine = findOriginTrackingLine(options);
					termClass = UNAMED_APPL;
					
          TomSymbol symbol = ensureValideUnamedList(expectedType, decLine);
          if(symbol == null) {
						break matchblock;
          } else {
	            //there is only one list symbol and its type is the expected one (ensure by ensureValideUnamedList call)
  	        type = expectedType;
  	        termName = symbol.getAstName().getString();
							// whatever the arity is, we continue recursively and there is only one element in the Domain
  	        validateListOperatorArgs(args, symbol.getTypesToType().getDomain().getHead(),permissive);
						if(permissive) { System.out.println("UnamedList but permissive");}
  		        break matchblock;
  	      }
       	 } }} } } } } }}_match31_pattern2: {  OptionList options = null;  NameList nameList = null;  TomList args = null; if(tom_is_fun_sym_Appl(tom_match31_1) ||  false ) {  OptionList tom_match31_1_1 = null;  NameList tom_match31_1_2 = null;  TomList tom_match31_1_3 = null; tom_match31_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match31_1); tom_match31_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match31_1); tom_match31_1_3 = ( TomList) tom_get_slot_Appl_args(tom_match31_1); options = ( OptionList) tom_match31_1_1; nameList = ( NameList) tom_match31_1_2; args = ( TomList) tom_match31_1_3;

 
					decLine = findOriginTrackingLine(options);
					termClass = APPL;
					
					TomSymbol symbol = ensureValidApplDisjunction(nameList, expectedType, decLine,hasConstructor(options), args.isEmpty(), permissive, topLevel);
					if(symbol == null) {
						break matchblock;
					}
						// Type is OK
					type = expectedType;     
					termName = nameList.getHead().getString();
					boolean listOp = (isListOperator(symbol) || isArrayOperator(symbol));
					if (listOp) {
							// whatever the arity is, we continue recursively and there is only one element in the Domain
						validateListOperatorArgs(args, symbol.getTypesToType().getDomain().getHead(),permissive);
					} else {
						  // the arity is important also there are different types in Domain
						TomTypeList  types = symbol.getTypesToType().getDomain();
						int nbArgs = args.getLength();
						int nbExpectedArgs = types.getLength();
						if(nbArgs != nbExpectedArgs) {
							messageError(decLine, TomCheckerMessage.SymbolNumberArgument, 
																			new Object[]{termName, new Integer(nbExpectedArgs), new Integer(nbArgs)}, TomCheckerMessage.TOM_ERROR);
							break matchblock;
						}
						while(!args.isEmpty()) {
							// repeat analyse with associated expected type and control arity
							validateTerm(args.getHead(), types.getHead(), listOp/*false*/, false, permissive);
							args = args.getTail();
							types = types.getTail();
						}
					}
					break matchblock;
				 }}_match31_pattern3: {  OptionList options = null;  TomList pairSlotAppls = null;  NameList nameList = null;  TomTerm rec = null; if(tom_is_fun_sym_RecordAppl(tom_match31_1) ||  false ) {  OptionList tom_match31_1_1 = null;  NameList tom_match31_1_2 = null;  TomList tom_match31_1_3 = null; tom_match31_1_1 = ( OptionList) tom_get_slot_RecordAppl_option(tom_match31_1); tom_match31_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match31_1); tom_match31_1_3 = ( TomList) tom_get_slot_RecordAppl_args(tom_match31_1); rec = ( TomTerm) tom_match31_1; options = ( OptionList) tom_match31_1_1; nameList = ( NameList) tom_match31_1_2; pairSlotAppls = ( TomList) tom_match31_1_3;

 
					if(permissive) {
						messageError(findOriginTrackingLine(options), TomCheckerMessage.IncorrectRuleRHSClass, 
												new Object[]{getName(rec)+"[...]"}, TomCheckerMessage.TOM_ERROR);
					}
					decLine = findOriginTrackingLine(options);
					termClass = RECORD_APPL;
	
					TomSymbol symbol = ensureValidRecordDisjunction(nameList, expectedType, decLine, true);
					if(symbol == null) {
						break matchblock;
					}
					
					boolean first = true;
					 {  NameList tom_match33_1 = null; tom_match33_1 = ( NameList) nameList;_match33_pattern1: {  TomName tom_absvar14 = null; if(tom_is_fun_sym_concTomName(tom_match33_1) ||  false ) {  NameList tom_match33_1_begin1 = null;  NameList tom_match33_1_end1 = null;  NameList tom_match33_1_list1 = null; tom_match33_1_list1 = ( NameList) tom_match33_1; tom_match33_1_begin1 = ( NameList) tom_match33_1_list1; tom_match33_1_end1 = ( NameList) tom_match33_1_list1; do { if(!(tom_is_empty_NameList(tom_match33_1_list1))) { tom_absvar14 = ( TomName) tom_get_head_NameList(tom_match33_1_list1); tom_match33_1_list1 = ( NameList) tom_get_tail_NameList(tom_match33_1_list1); {  TomName tom_match34_1 = null; tom_match34_1 = ( TomName) tom_absvar14;_match34_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match34_1) ||  false ) {  String tom_match34_1_1 = null; tom_match34_1_1 = ( String) tom_get_slot_Name_string(tom_match34_1); name = ( String) tom_match34_1_1;

 
							verifyRecordStructure(options, name, pairSlotAppls, decLine);
						 }} } } if(!(tom_is_empty_NameList(tom_match33_1_end1))) { tom_match33_1_end1 = ( NameList) tom_get_tail_NameList(tom_match33_1_end1); } tom_match33_1_list1 = ( NameList) tom_match33_1_end1; } while(!(tom_is_empty_NameList(tom_match33_1_list1))); }} }
 
					
					type = expectedType;     
					termName = nameList.getHead().getString();
					break matchblock;
				 }}_match31_pattern4: {  TomName tom_absvar15 = null;  NameList nameList = null;  OptionList options = null; if(tom_is_fun_sym_XMLAppl(tom_match31_1) ||  false ) {  OptionList tom_match31_1_1 = null;  NameList tom_match31_1_2 = null; tom_match31_1_1 = ( OptionList) tom_get_slot_XMLAppl_option(tom_match31_1); tom_match31_1_2 = ( NameList) tom_get_slot_XMLAppl_nameList(tom_match31_1); options = ( OptionList) tom_match31_1_1; if(tom_is_fun_sym_concTomName(tom_match31_1_2) ||  false ) { nameList = ( NameList) tom_match31_1_2;  NameList tom_match31_1_2_begin1 = null;  NameList tom_match31_1_2_end1 = null;  NameList tom_match31_1_2_list1 = null; tom_match31_1_2_list1 = ( NameList) tom_match31_1_2; tom_match31_1_2_begin1 = ( NameList) tom_match31_1_2_list1; tom_match31_1_2_end1 = ( NameList) tom_match31_1_2_list1; do { if(!(tom_is_empty_NameList(tom_match31_1_2_list1))) { tom_absvar15 = ( TomName) tom_get_head_NameList(tom_match31_1_2_list1); tom_match31_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match31_1_2_list1); {  TomName tom_match35_1 = null; tom_match35_1 = ( TomName) tom_absvar15;_match35_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match35_1) ||  false ) {  String tom_match35_1_1 = null; tom_match35_1_1 = ( String) tom_get_slot_Name_string(tom_match35_1); name = ( String) tom_match35_1_1;

 
					// TODO: can we do it
					// ensureValidDisjunction(nameList); ??????????
					termClass = XML_APPL;
					decLine = findOriginTrackingLine(options);
					type = getSymbolCodomain(getSymbol(Constants.ELEMENT_NODE));
					termName = Constants.ELEMENT_NODE;
					break matchblock;
				 }} } } if(!(tom_is_empty_NameList(tom_match31_1_2_end1))) { tom_match31_1_2_end1 = ( NameList) tom_get_tail_NameList(tom_match31_1_2_end1); } tom_match31_1_2_list1 = ( NameList) tom_match31_1_2_end1; } while(!(tom_is_empty_NameList(tom_match31_1_2_list1))); } }}_match31_pattern5: {  OptionList options = null; if(tom_is_fun_sym_Placeholder(tom_match31_1) ||  false ) {  OptionList tom_match31_1_1 = null; tom_match31_1_1 = ( OptionList) tom_get_slot_Placeholder_option(tom_match31_1); options = ( OptionList) tom_match31_1_1;

 
					termClass = PLACE_HOLDER;
					decLine = findOriginTrackingLine(options);
					type = null;     
					termName = "_";
					if(permissive) {
						messageError(decLine, TomCheckerMessage.IncorrectRuleRHSClass, 
																	new Object[]{termName}, TomCheckerMessage.TOM_ERROR);
					}
					break matchblock;
				 }}_match31_pattern6: {  String name = null;  OptionList options = null; if(tom_is_fun_sym_VariableStar(tom_match31_1) ||  false ) {  OptionList tom_match31_1_1 = null;  TomName tom_match31_1_2 = null; tom_match31_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match31_1); tom_match31_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match31_1); options = ( OptionList) tom_match31_1_1; if(tom_is_fun_sym_Name(tom_match31_1_2) ||  false ) {  String tom_match31_1_2_1 = null; tom_match31_1_2_1 = ( String) tom_get_slot_Name_string(tom_match31_1_2); name = ( String) tom_match31_1_2_1;

  
					termClass = VARIABLE_STAR;
					decLine = findOriginTrackingLine(options);
					type = null;     
					termName = name+"*";
					if(!listSymbol) {
						messageError(decLine, TomCheckerMessage.InvalidVariableStarArgument, 
																	new Object[]{termName}, TomCheckerMessage.TOM_ERROR);
					}
					break matchblock;
				 } }}_match31_pattern7: {  OptionList options = null; if(tom_is_fun_sym_UnamedVariableStar(tom_match31_1) ||  false ) {  OptionList tom_match31_1_1 = null; tom_match31_1_1 = ( OptionList) tom_get_slot_UnamedVariableStar_option(tom_match31_1); options = ( OptionList) tom_match31_1_1;

 
					termClass = UNAMED_VARIABLE_STAR;
					decLine = findOriginTrackingLine(options);
					type = null;     
					termName = "_*";
					if(!listSymbol) {
						messageError(decLine, TomCheckerMessage.InvalidVariableStarArgument, 
																	new Object[]{termName}, TomCheckerMessage.TOM_ERROR);
					}
					if(permissive) {
						messageError(decLine, TomCheckerMessage.IncorrectRuleRHSClass, 
											new Object[]{termName}, TomCheckerMessage.TOM_ERROR);
					}
					break matchblock;
				 }}_match31_pattern8: {

 
					System.out.println("Strange term in pattern "+term);
					throw new TomRuntimeException(new Throwable("Strange Term "+term));
				} }
 
		}
		return new TermDescription(termClass, termName, decLine, type);	
	}
	
	public void validateListOperatorArgs(TomList args, TomType expectedType, boolean permissive) {
		while(!args.isEmpty()) {
			validateTerm(args.getHead(), expectedType, true, false, permissive);
			args = args.getTail();
		}
	}

	public int getClass(TomTerm term) {
		 {  TomTerm tom_match36_1 = null; tom_match36_1 = ( TomTerm) term;_match36_pattern1: {  TomName tom_absvar16 = null; if(tom_is_fun_sym_Appl(tom_match36_1) ||  false ) {  NameList tom_match36_1_2 = null; tom_match36_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match36_1); if(tom_is_fun_sym_concTomName(tom_match36_1_2) ||  false ) {  NameList tom_match36_1_2_list1 = null; tom_match36_1_2_list1 = ( NameList) tom_match36_1_2; if(!(tom_is_empty_NameList(tom_match36_1_2_list1))) { tom_absvar16 = ( TomName) tom_get_head_NameList(tom_match36_1_2_list1); tom_match36_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match36_1_2_list1); if(tom_is_empty_NameList(tom_match36_1_2_list1)) { {  TomName tom_match37_1 = null; tom_match37_1 = ( TomName) tom_absvar16;_match37_pattern1: { if(tom_is_fun_sym_Name(tom_match37_1) ||  false ) {  String tom_match37_1_1 = null; tom_match37_1_1 = ( String) tom_get_slot_Name_string(tom_match37_1); if(tom_cmp_fun_sym_String(tom_get_fun_sym_String(tom_match37_1_1) , "") ||  false ) {
  return UNAMED_APPL; } }} } } } } }}_match36_pattern2: {  TomName tom_absvar17 = null; if(tom_is_fun_sym_Appl(tom_match36_1) ||  false ) {  NameList tom_match36_1_2 = null; tom_match36_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match36_1); if(tom_is_fun_sym_concTomName(tom_match36_1_2) ||  false ) {  NameList tom_match36_1_2_list1 = null; tom_match36_1_2_list1 = ( NameList) tom_match36_1_2; if(!(tom_is_empty_NameList(tom_match36_1_2_list1))) { tom_absvar17 = ( TomName) tom_get_head_NameList(tom_match36_1_2_list1); tom_match36_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match36_1_2_list1); if(tom_is_empty_NameList(tom_match36_1_2_list1)) { {  TomName tom_match38_1 = null; tom_match38_1 = ( TomName) tom_absvar17;_match38_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match38_1) ||  false ) {  String tom_match38_1_1 = null; tom_match38_1_1 = ( String) tom_get_slot_Name_string(tom_match38_1); name = ( String) tom_match38_1_1;
  return APPL; }} } } } } }}_match36_pattern3: {  TomName tom_absvar18 = null; if(tom_is_fun_sym_Appl(tom_match36_1) ||  false ) {  NameList tom_match36_1_2 = null; tom_match36_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match36_1); if(tom_is_fun_sym_concTomName(tom_match36_1_2) ||  false ) {  NameList tom_match36_1_2_list1 = null; tom_match36_1_2_list1 = ( NameList) tom_match36_1_2; if(!(tom_is_empty_NameList(tom_match36_1_2_list1))) { tom_absvar18 = ( TomName) tom_get_head_NameList(tom_match36_1_2_list1); tom_match36_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match36_1_2_list1); {  TomName tom_match39_1 = null; tom_match39_1 = ( TomName) tom_absvar18;_match39_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match39_1) ||  false ) {  String tom_match39_1_1 = null; tom_match39_1_1 = ( String) tom_get_slot_Name_string(tom_match39_1); name = ( String) tom_match39_1_1;
  return APPL_DISJUNCTION; }} } } } }}_match36_pattern4: {  TomName tom_absvar19 = null; if(tom_is_fun_sym_RecordAppl(tom_match36_1) ||  false ) {  NameList tom_match36_1_2 = null; tom_match36_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match36_1); if(tom_is_fun_sym_concTomName(tom_match36_1_2) ||  false ) {  NameList tom_match36_1_2_list1 = null; tom_match36_1_2_list1 = ( NameList) tom_match36_1_2; if(!(tom_is_empty_NameList(tom_match36_1_2_list1))) { tom_absvar19 = ( TomName) tom_get_head_NameList(tom_match36_1_2_list1); tom_match36_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match36_1_2_list1); if(tom_is_empty_NameList(tom_match36_1_2_list1)) { {  TomName tom_match40_1 = null; tom_match40_1 = ( TomName) tom_absvar19;_match40_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match40_1) ||  false ) {  String tom_match40_1_1 = null; tom_match40_1_1 = ( String) tom_get_slot_Name_string(tom_match40_1); name = ( String) tom_match40_1_1;
  return RECORD_APPL; }} } } } } }}_match36_pattern5: {  TomName tom_absvar20 = null; if(tom_is_fun_sym_RecordAppl(tom_match36_1) ||  false ) {  NameList tom_match36_1_2 = null; tom_match36_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match36_1); if(tom_is_fun_sym_concTomName(tom_match36_1_2) ||  false ) {  NameList tom_match36_1_2_list1 = null; tom_match36_1_2_list1 = ( NameList) tom_match36_1_2; if(!(tom_is_empty_NameList(tom_match36_1_2_list1))) { tom_absvar20 = ( TomName) tom_get_head_NameList(tom_match36_1_2_list1); tom_match36_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match36_1_2_list1); {  TomName tom_match41_1 = null; tom_match41_1 = ( TomName) tom_absvar20;_match41_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match41_1) ||  false ) {  String tom_match41_1_1 = null; tom_match41_1_1 = ( String) tom_get_slot_Name_string(tom_match41_1); name = ( String) tom_match41_1_1;
  return RECORD_APPL_DISJUNCTION; }} } } } }}_match36_pattern6: { if(tom_is_fun_sym_XMLAppl(tom_match36_1) ||  false ) {
  return XML_APPL; }}_match36_pattern7: { if(tom_is_fun_sym_Placeholder(tom_match36_1) ||  false ) {
  return PLACE_HOLDER; }}_match36_pattern8: { if(tom_is_fun_sym_VariableStar(tom_match36_1) ||  false ) {
  return VARIABLE_STAR; }}_match36_pattern9: { if(tom_is_fun_sym_UnamedVariableStar(tom_match36_1) ||  false ) {
  return UNAMED_VARIABLE_STAR; }}_match36_pattern10: {
 throw new TomRuntimeException("Invalid Term");} }
 
	}
	
	public String getName(TomTerm term) {
		String dijunctionName = "";
		 {  TomTerm tom_match42_1 = null; tom_match42_1 = ( TomTerm) term;_match42_pattern1: {  TomName tom_absvar21 = null; if(tom_is_fun_sym_Appl(tom_match42_1) ||  false ) {  NameList tom_match42_1_2 = null; tom_match42_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match42_1); if(tom_is_fun_sym_concTomName(tom_match42_1_2) ||  false ) {  NameList tom_match42_1_2_list1 = null; tom_match42_1_2_list1 = ( NameList) tom_match42_1_2; if(!(tom_is_empty_NameList(tom_match42_1_2_list1))) { tom_absvar21 = ( TomName) tom_get_head_NameList(tom_match42_1_2_list1); tom_match42_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match42_1_2_list1); if(tom_is_empty_NameList(tom_match42_1_2_list1)) { {  TomName tom_match43_1 = null; tom_match43_1 = ( TomName) tom_absvar21;_match43_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match43_1) ||  false ) {  String tom_match43_1_1 = null; tom_match43_1_1 = ( String) tom_get_slot_Name_string(tom_match43_1); name = ( String) tom_match43_1_1;
  return name; }} } } } } }}_match42_pattern2: {  NameList nameList = null; if(tom_is_fun_sym_Appl(tom_match42_1) ||  false ) {  NameList tom_match42_1_2 = null; tom_match42_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match42_1); nameList = ( NameList) tom_match42_1_2;
 
				String head;
				dijunctionName = nameList.getHead().getString();
				while(!nameList.isEmpty()) {
					head = nameList.getHead().getString();
					dijunctionName = ( dijunctionName.compareTo(head) > 0)?dijunctionName:head;
					nameList = nameList.getTail();
				}
				return dijunctionName;
			 }}_match42_pattern3: {  TomName tom_absvar22 = null; if(tom_is_fun_sym_RecordAppl(tom_match42_1) ||  false ) {  NameList tom_match42_1_2 = null; tom_match42_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match42_1); if(tom_is_fun_sym_concTomName(tom_match42_1_2) ||  false ) {  NameList tom_match42_1_2_list1 = null; tom_match42_1_2_list1 = ( NameList) tom_match42_1_2; if(!(tom_is_empty_NameList(tom_match42_1_2_list1))) { tom_absvar22 = ( TomName) tom_get_head_NameList(tom_match42_1_2_list1); tom_match42_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match42_1_2_list1); if(tom_is_empty_NameList(tom_match42_1_2_list1)) { {  TomName tom_match44_1 = null; tom_match44_1 = ( TomName) tom_absvar22;_match44_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match44_1) ||  false ) {  String tom_match44_1_1 = null; tom_match44_1_1 = ( String) tom_get_slot_Name_string(tom_match44_1); name = ( String) tom_match44_1_1;
  return name; }} } } } } }}_match42_pattern4: {  NameList nameList = null; if(tom_is_fun_sym_RecordAppl(tom_match42_1) ||  false ) {  NameList tom_match42_1_2 = null; tom_match42_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match42_1); nameList = ( NameList) tom_match42_1_2;
 
				String head;
				dijunctionName = nameList.getHead().getString();
				while(!nameList.isEmpty()) {
					head = nameList.getHead().getString();
					dijunctionName = ( dijunctionName.compareTo(head) > 0)?dijunctionName:head;
					nameList = nameList.getTail();
				}
				return dijunctionName;
			 }}_match42_pattern5: {  TomName tom_absvar23 = null; if(tom_is_fun_sym_XMLAppl(tom_match42_1) ||  false ) {  NameList tom_match42_1_2 = null; tom_match42_1_2 = ( NameList) tom_get_slot_XMLAppl_nameList(tom_match42_1); if(tom_is_fun_sym_concTomName(tom_match42_1_2) ||  false ) {  NameList tom_match42_1_2_list1 = null; tom_match42_1_2_list1 = ( NameList) tom_match42_1_2; if(!(tom_is_empty_NameList(tom_match42_1_2_list1))) { tom_absvar23 = ( TomName) tom_get_head_NameList(tom_match42_1_2_list1); tom_match42_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match42_1_2_list1); {  TomName tom_match45_1 = null; tom_match45_1 = ( TomName) tom_absvar23;_match45_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match45_1) ||  false ) {  String tom_match45_1_1 = null; tom_match45_1_1 = ( String) tom_get_slot_Name_string(tom_match45_1); name = ( String) tom_match45_1_1;
  return name; }} } } } }}_match42_pattern6: {  NameList nameList = null; if(tom_is_fun_sym_XMLAppl(tom_match42_1) ||  false ) {  NameList tom_match42_1_2 = null; tom_match42_1_2 = ( NameList) tom_get_slot_XMLAppl_nameList(tom_match42_1); nameList = ( NameList) tom_match42_1_2;
 
				String head;
				dijunctionName = nameList.getHead().getString();
				while(!nameList.isEmpty()) {
					head = nameList.getHead().getString();
					dijunctionName = ( dijunctionName.compareTo(head) > 0)?dijunctionName:head;
					nameList = nameList.getTail();
				}
				return dijunctionName;
			 }}_match42_pattern7: { if(tom_is_fun_sym_Placeholder(tom_match42_1) ||  false ) {
  return "_"; }}_match42_pattern8: {  String name = null; if(tom_is_fun_sym_VariableStar(tom_match42_1) ||  false ) {  TomName tom_match42_1_2 = null; tom_match42_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match42_1); if(tom_is_fun_sym_Name(tom_match42_1_2) ||  false ) {  String tom_match42_1_2_1 = null; tom_match42_1_2_1 = ( String) tom_get_slot_Name_string(tom_match42_1_2); name = ( String) tom_match42_1_2_1;
  return name+"*"; } }}_match42_pattern9: { if(tom_is_fun_sym_UnamedVariableStar(tom_match42_1) ||  false ) {
  return "_*"; }}_match42_pattern10: {
 throw new TomRuntimeException("Invalid Term");} }
 
	}
	
	public TermDescription analyseTerm(TomTerm term) {
		matchblock:{
			 {  TomTerm tom_match46_1 = null; tom_match46_1 = ( TomTerm) term;_match46_pattern1: {  TomName tom_absvar24 = null;  OptionList options = null; if(tom_is_fun_sym_Appl(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null;  NameList tom_match46_1_2 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match46_1); tom_match46_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match46_1); options = ( OptionList) tom_match46_1_1; if(tom_is_fun_sym_concTomName(tom_match46_1_2) ||  false ) {  NameList tom_match46_1_2_list1 = null; tom_match46_1_2_list1 = ( NameList) tom_match46_1_2; if(!(tom_is_empty_NameList(tom_match46_1_2_list1))) { tom_absvar24 = ( TomName) tom_get_head_NameList(tom_match46_1_2_list1); tom_match46_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match46_1_2_list1); if(tom_is_empty_NameList(tom_match46_1_2_list1)) { {  TomName tom_match47_1 = null; tom_match47_1 = ( TomName) tom_absvar24;_match47_pattern1: {  String str = null; if(tom_is_fun_sym_Name(tom_match47_1) ||  false ) {  String tom_match47_1_1 = null; tom_match47_1_1 = ( String) tom_get_slot_Name_string(tom_match47_1); str = ( String) tom_match47_1_1;
 
					if (str.equals("")) {
						return new TermDescription(UNAMED_APPL, str, findOriginTrackingLine(options), 
																																null);
						// TODO
					} else {
							return new TermDescription(APPL, str, findOriginTrackingLine(options), 
																																	getSymbolCodomain(getSymbol(str)));
						}
				 }} } } } } }}_match46_pattern2: {  TomName tom_absvar25 = null;  OptionList options = null; if(tom_is_fun_sym_Appl(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null;  NameList tom_match46_1_2 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_Appl_option(tom_match46_1); tom_match46_1_2 = ( NameList) tom_get_slot_Appl_nameList(tom_match46_1); options = ( OptionList) tom_match46_1_1; if(tom_is_fun_sym_concTomName(tom_match46_1_2) ||  false ) {  NameList tom_match46_1_2_list1 = null; tom_match46_1_2_list1 = ( NameList) tom_match46_1_2; if(!(tom_is_empty_NameList(tom_match46_1_2_list1))) { tom_absvar25 = ( TomName) tom_get_head_NameList(tom_match46_1_2_list1); tom_match46_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match46_1_2_list1); {  TomName tom_match48_1 = null; tom_match48_1 = ( TomName) tom_absvar25;_match48_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match48_1) ||  false ) {  String tom_match48_1_1 = null; tom_match48_1_1 = ( String) tom_get_slot_Name_string(tom_match48_1); name = ( String) tom_match48_1_1;
 
					return new TermDescription(APPL_DISJUNCTION, name, findOriginTrackingLine(options), 
																										getSymbolCodomain(getSymbol(name)));
				 }} } } } }}_match46_pattern3: {  OptionList options = null;  TomName tom_absvar26 = null; if(tom_is_fun_sym_RecordAppl(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null;  NameList tom_match46_1_2 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_RecordAppl_option(tom_match46_1); tom_match46_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match46_1); options = ( OptionList) tom_match46_1_1; if(tom_is_fun_sym_concTomName(tom_match46_1_2) ||  false ) {  NameList tom_match46_1_2_list1 = null; tom_match46_1_2_list1 = ( NameList) tom_match46_1_2; if(!(tom_is_empty_NameList(tom_match46_1_2_list1))) { tom_absvar26 = ( TomName) tom_get_head_NameList(tom_match46_1_2_list1); tom_match46_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match46_1_2_list1); if(tom_is_empty_NameList(tom_match46_1_2_list1)) { {  TomName tom_match49_1 = null; tom_match49_1 = ( TomName) tom_absvar26;_match49_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match49_1) ||  false ) {  String tom_match49_1_1 = null; tom_match49_1_1 = ( String) tom_get_slot_Name_string(tom_match49_1); name = ( String) tom_match49_1_1;
 
					return new TermDescription(RECORD_APPL, name, findOriginTrackingLine(options), 
																										getSymbolCodomain(getSymbol(name)));
				 }} } } } } }}_match46_pattern4: {  TomName tom_absvar27 = null;  OptionList options = null; if(tom_is_fun_sym_RecordAppl(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null;  NameList tom_match46_1_2 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_RecordAppl_option(tom_match46_1); tom_match46_1_2 = ( NameList) tom_get_slot_RecordAppl_nameList(tom_match46_1); options = ( OptionList) tom_match46_1_1; if(tom_is_fun_sym_concTomName(tom_match46_1_2) ||  false ) {  NameList tom_match46_1_2_list1 = null; tom_match46_1_2_list1 = ( NameList) tom_match46_1_2; if(!(tom_is_empty_NameList(tom_match46_1_2_list1))) { tom_absvar27 = ( TomName) tom_get_head_NameList(tom_match46_1_2_list1); tom_match46_1_2_list1 = ( NameList) tom_get_tail_NameList(tom_match46_1_2_list1); {  TomName tom_match50_1 = null; tom_match50_1 = ( TomName) tom_absvar27;_match50_pattern1: {  String name = null; if(tom_is_fun_sym_Name(tom_match50_1) ||  false ) {  String tom_match50_1_1 = null; tom_match50_1_1 = ( String) tom_get_slot_Name_string(tom_match50_1); name = ( String) tom_match50_1_1;
 
					return new TermDescription(RECORD_APPL_DISJUNCTION, name, findOriginTrackingLine(options), 
																										getSymbolCodomain(getSymbol(name)));
				 }} } } } }}_match46_pattern5: {  OptionList options = null; if(tom_is_fun_sym_XMLAppl(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_XMLAppl_option(tom_match46_1); options = ( OptionList) tom_match46_1_1;
 
					return new TermDescription(XML_APPL, Constants.ELEMENT_NODE, findOriginTrackingLine(options), 
																										getSymbolCodomain(getSymbol(Constants.ELEMENT_NODE)));
				 }}_match46_pattern6: {  OptionList options = null; if(tom_is_fun_sym_Placeholder(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_Placeholder_option(tom_match46_1); options = ( OptionList) tom_match46_1_1;
 
					return new TermDescription(PLACE_HOLDER, "_", findOriginTrackingLine(options),  null);
				 }}_match46_pattern7: {  String name = null;  OptionList options = null; if(tom_is_fun_sym_VariableStar(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null;  TomName tom_match46_1_2 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_VariableStar_option(tom_match46_1); tom_match46_1_2 = ( TomName) tom_get_slot_VariableStar_astName(tom_match46_1); options = ( OptionList) tom_match46_1_1; if(tom_is_fun_sym_Name(tom_match46_1_2) ||  false ) {  String tom_match46_1_2_1 = null; tom_match46_1_2_1 = ( String) tom_get_slot_Name_string(tom_match46_1_2); name = ( String) tom_match46_1_2_1;
  
					return new TermDescription(VARIABLE_STAR, name+"*", findOriginTrackingLine(options),  null);
				 } }}_match46_pattern8: {  OptionList options = null; if(tom_is_fun_sym_UnamedVariableStar(tom_match46_1) ||  false ) {  OptionList tom_match46_1_1 = null; tom_match46_1_1 = ( OptionList) tom_get_slot_UnamedVariableStar_option(tom_match46_1); options = ( OptionList) tom_match46_1_1;
 
					return new TermDescription(UNAMED_VARIABLE_STAR, "_*", findOriginTrackingLine(options),  null);
				 }}_match46_pattern9: {
 
					System.out.println("Strange term "+term);
					throw new TomRuntimeException(new Throwable("Strange Term "+term));
				} }
 
		}
	}
	
	private TomSymbol ensureValideUnamedList(TomType expectedType, int decLine) {
		SymbolList symbolList = symbolTable().getSymbol(expectedType);
		SymbolList filteredList = tom_make_emptySymbolList() ;
		 {  SymbolList tom_match51_1 = null; tom_match51_1 = ( SymbolList) symbolList;_match51_pattern1: {  TomSymbol symbol = null; if(tom_is_fun_sym_concTomSymbol(tom_match51_1) ||  false ) {  SymbolList tom_match51_1_begin1 = null;  SymbolList tom_match51_1_end1 = null;  SymbolList tom_match51_1_list1 = null; tom_match51_1_list1 = ( SymbolList) tom_match51_1; tom_match51_1_begin1 = ( SymbolList) tom_match51_1_list1; tom_match51_1_end1 = ( SymbolList) tom_match51_1_list1; do { if(!(tom_is_empty_SymbolList(tom_match51_1_list1))) { symbol = ( TomSymbol) tom_get_head_SymbolList(tom_match51_1_list1); tom_match51_1_list1 = ( SymbolList) tom_get_tail_SymbolList(tom_match51_1_list1);
   // for each symbol
					if(isArrayOperator(symbol) || isListOperator(symbol)) {
						filteredList = tom_make_manySymbolList(symbol,filteredList) ;
					}
			 } if(!(tom_is_empty_SymbolList(tom_match51_1_end1))) { tom_match51_1_end1 = ( SymbolList) tom_get_tail_SymbolList(tom_match51_1_end1); } tom_match51_1_list1 = ( SymbolList) tom_match51_1_end1; } while(!(tom_is_empty_SymbolList(tom_match51_1_list1))); }} }
 
		
		if(filteredList.isEmpty()) {
			messageError(decLine,
														TomCheckerMessage.UnknowUnamedList,
														new Object[]{expectedType.getString()},
														TomCheckerMessage.TOM_ERROR);
			return null;
		} else if(!filteredList.getTail().isEmpty()) {
			String symbolsString = "";
			while(!filteredList.isEmpty()) {
				symbolsString += " "+filteredList.getHead().getAstName().getString();
				filteredList= filteredList.getTail();
			}
			messageError(decLine,
														TomCheckerMessage.AmbigousUnamedList,
														new Object[]{expectedType.getString(), symbolsString},
														TomCheckerMessage.TOM_ERROR);
			return null;
		} else { 
			return filteredList.getHead();
		}
	}
	
	private TomSymbol ensureValidApplDisjunction(NameList nameList, TomType expectedType, int decLine,
																													boolean constructor, boolean emptyChilds, boolean permissive, boolean topLevel) {
		TomTypeList domainReference = null, currentDomain = null;
		TomSymbol symbol = null;
		
		if(nameList.isSingle()) { // Valid but has is a good type
			String res = nameList.getHead().getString();
			symbol  =  getSymbol(res);
			if (symbol == null ) {
				if((constructor || !emptyChilds)) { // this correspond to: unknown()
					if(!permissive) {
						messageError(decLine,
																	TomCheckerMessage.UnknownSymbol,
																	new Object[]{res},
																	TomCheckerMessage.TOM_ERROR);
					} else {
						messageError(decLine,
																	TomCheckerMessage.UnknownPermissiveSymbol,
																	new Object[]{res},
																	TomCheckerMessage.TOM_WARNING);
					}
				}
			} else { //known symbol			
				if(emptyChilds && !constructor ) { // this correspond to: known
				 		//	we know the symbol but it is not called has a constructor and argsList is empty
				  	// it is not a string or int or double so WARNING consider as a symbol and not a variable
					String codomain = getTomType(getSymbolCodomain(symbol));
					if( !codomain.equals("String") && !codomain.equals("double") && !codomain.equals("int")) {
						messageError(decLine, 
																	TomCheckerMessage.AmbigousSymbolWithoutConstructor,
																	new Object[]{res},
																	TomCheckerMessage.TOM_WARNING); // only a warning
					}
				}
				if ( strictType  || !topLevel ) {
					if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomCheckerMessage.InvalidCodomain, res, decLine)) {
						return null;
					}
				}
			}
			return symbol;
		}
			//	this is a disjunction
		if(permissive) { 
			messageError(decLine, 
														TomCheckerMessage.ImpossiblePermissiveAndDisjunction,
														new Object[]{},
														TomCheckerMessage.TOM_ERROR);			
		}
		
		boolean first = true; // the first symbol give the expected 
		 {  NameList tom_match52_1 = null; tom_match52_1 = ( NameList) nameList;_match52_pattern1: {  TomName tom_absvar28 = null; if(tom_is_fun_sym_concTomName(tom_match52_1) ||  false ) {  NameList tom_match52_1_begin1 = null;  NameList tom_match52_1_end1 = null;  NameList tom_match52_1_list1 = null; tom_match52_1_list1 = ( NameList) tom_match52_1; tom_match52_1_begin1 = ( NameList) tom_match52_1_list1; tom_match52_1_end1 = ( NameList) tom_match52_1_list1; do { if(!(tom_is_empty_NameList(tom_match52_1_list1))) { tom_absvar28 = ( TomName) tom_get_head_NameList(tom_match52_1_list1); tom_match52_1_list1 = ( NameList) tom_get_tail_NameList(tom_match52_1_list1); {  TomName tom_match53_1 = null; tom_match53_1 = ( TomName) tom_absvar28;_match53_pattern1: {  String dijName = null; if(tom_is_fun_sym_Name(tom_match53_1) ||  false ) {  String tom_match53_1_1 = null; tom_match53_1_1 = ( String) tom_get_slot_Name_string(tom_match53_1); dijName = ( String) tom_match53_1_1;
  // for each SymbolName
				symbol =  getSymbol(dijName);
				if (symbol == null) {
						// In disjunction we can only have known symbols
					messageError(decLine,
																TomCheckerMessage.UnknownSymbolInDisjunction,
																new Object[]{dijName},
																TomCheckerMessage.TOM_ERROR);
					return null;
				}
				if ( strictType  || !topLevel ) {
					if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomCheckerMessage.InvalidDisjunctionCodomain, dijName, decLine)) {
						return null;
					}
				} 
				currentDomain = getSymbolDomain(symbol);
				if (first) { // save Domain reference
					domainReference = currentDomain;
				} else {
					first = false;
					if(currentDomain !=domainReference) {
						//System.out.println(currentDomain+"!="+domainReference);
						messageError(decLine, 
																	TomCheckerMessage.InvalidDisjunctionDomain,
																	new Object[]{dijName},
																	TomCheckerMessage.TOM_ERROR);
						return null;
					}
				}
			 }} } } if(!(tom_is_empty_NameList(tom_match52_1_end1))) { tom_match52_1_end1 = ( NameList) tom_get_tail_NameList(tom_match52_1_end1); } tom_match52_1_list1 = ( NameList) tom_match52_1_end1; } while(!(tom_is_empty_NameList(tom_match52_1_list1))); }} }
 
		return symbol;
	}
	
	private boolean ensureSymbolCodomain(TomType currentCodomain, TomType expectedType, String msg, String symbolName, int decLine) {
		if(currentCodomain != expectedType) {
			  //System.out.println(currentCodomain+"!="+expectedType);
			messageError(decLine, 
														msg,
														new Object[]{symbolName, currentCodomain.getString(), expectedType.getString()},
														TomCheckerMessage.TOM_ERROR);
			return false;
		}
		return true;
	}
				
	private TomSymbol ensureValidRecordDisjunction(NameList nameList, TomType expectedType, int decLine, boolean topLevel) {
		if(nameList.isSingle()) { // Valid but has is a good type
			String res = nameList.getHead().getString();
			TomSymbol symbol =  getSymbol(res);
			if (symbol == null ) { // this correspond to: unknown[]
				  // it is not correct to use Record an unknown symbols
				messageError(decLine,
															TomCheckerMessage.UnknownSymbol,
															new Object[]{res},
															TomCheckerMessage.TOM_ERROR);
				return null;		
			} else { // known symbol
					// ensure type correctness if necessary
				if ( strictType  || !topLevel ) {
					if (!ensureSymbolCodomain(getSymbolCodomain(symbol), expectedType, TomCheckerMessage.InvalidCodomain, res, decLine)) {
						return null;
					}
				}
			}
			return symbol;
		} else {
			return ensureValidApplDisjunction(nameList, expectedType, decLine, false, false, false, topLevel);
		}
	}
	/**
	 * RECORDS CONCERNS
	 */
  private void verifyRecordStructure(OptionList option, String tomName, TomList args, int decLine)  {
	TomSymbol symbol = getSymbol(tomName);
	 if(symbol != null) {
		 SlotList slotList = symbol.getSlotList();
				// constants have an emptySlotList
				// the length of the slotList corresponds to the arity of the operator
				// list operator with [] no allowed
			if(args.isEmpty() && (isListOperator(symbol) ||  isArrayOperator(symbol)) ) {
				messageError(decLine,
															TomCheckerMessage.BracketOnListSymbol,
															new Object[]{tomName},
															TomCheckerMessage.TOM_ERROR);
			}
			// TODO verify type
			verifyRecordSlots(args,slotList, tomName, decLine);
		} else {
			messageError(decLine,
														TomCheckerMessage.UnknownSymbol,
														new Object[]{tomName},
														TomCheckerMessage.TOM_ERROR);
		}
	}
  
		// We test the existence of slotName contained in pairSlotAppl
		// and then the associated term
	private void verifyRecordSlots(TomList listPair, SlotList slotList, String methodName, int decLine) {
		ArrayList slotIndex = new ArrayList();
		while( !listPair.isEmpty() ) {
			TomTerm pair = listPair.getHead();
			TomName name = pair.getSlotName();
			int index = getSlotIndex(slotList,name);
			if(index < 0) {
				// Error: bad slot name
				ArrayList listOfPossibleSlot = new ArrayList();
				while ( !slotList.isEmpty() ) {
					TomName sname = slotList.getHead().getSlotName();
					if(!sname.isEmptyName()) {
						listOfPossibleSlot.add(sname.getString());
					}
					slotList = slotList.getTail();
				}
				messageError(decLine,
															TomCheckerMessage.BadSlotName, 
															new Object[]{name.getString(), methodName, listOfPossibleSlot.toString()},
															TomCheckerMessage.TOM_ERROR); 
			} else {
				Integer integerIndex = new Integer(index);
				if(slotIndex.contains(integerIndex)) {
					  // Error: repeated slot
					messageError(decLine,
																TomCheckerMessage.SlotRepeated,
																new Object[]{methodName, name.getString()},
																TomCheckerMessage.TOM_ERROR);
				}
				slotIndex.add(integerIndex);
			}
			listPair = listPair.getTail();
		}
	}
	
	/**
	 * Message Functions
	 */

	private void messageError(int errorLine, String msg, Object[] msgArg, int level) {
		String structName = currentTomStructureOrgTrack.getAstName().getString();
		messageError(errorLine, structName, msg, msgArg, level);
	}
	
	private void messageError(int errorLine, String structInfo, String msg, Object[] msgArgs, int level) {
		String fileName = currentTomStructureOrgTrack.getFileName().getString();
		int structDeclLine = currentTomStructureOrgTrack.getLine();
		messageError(errorLine, fileName, structInfo, structDeclLine, msg, msgArgs, level);
	}
	
	
	/**
	 * Global Functions 
	 */
	private String extractType(TomSymbol symbol) {
		TomType type = getSymbolCodomain(symbol);
		return getTomType(type);
	}
	
	private int findOriginTrackingLine(OptionList optionList) {
		 {  OptionList tom_match54_1 = null; tom_match54_1 = ( OptionList) optionList;_match54_pattern1: {  Option tom_absvar29 = null; if(tom_is_fun_sym_concOption(tom_match54_1) ||  false ) {  OptionList tom_match54_1_begin1 = null;  OptionList tom_match54_1_end1 = null;  OptionList tom_match54_1_list1 = null; tom_match54_1_list1 = ( OptionList) tom_match54_1; tom_match54_1_begin1 = ( OptionList) tom_match54_1_list1; tom_match54_1_end1 = ( OptionList) tom_match54_1_list1; do { if(!(tom_is_empty_OptionList(tom_match54_1_list1))) { tom_absvar29 = ( Option) tom_get_head_OptionList(tom_match54_1_list1); tom_match54_1_list1 = ( OptionList) tom_get_tail_OptionList(tom_match54_1_list1); {  Option tom_match55_1 = null; tom_match55_1 = ( Option) tom_absvar29;_match55_pattern1: {  int line; if(tom_is_fun_sym_OriginTracking(tom_match55_1) ||  false ) {  int tom_match55_1_2; tom_match55_1_2 = ( int) tom_get_slot_OriginTracking_line(tom_match55_1); line = ( int) tom_match55_1_2;
  return line;  }} } } if(!(tom_is_empty_OptionList(tom_match54_1_end1))) { tom_match54_1_end1 = ( OptionList) tom_get_tail_OptionList(tom_match54_1_end1); } tom_match54_1_list1 = ( OptionList) tom_match54_1_end1; } while(!(tom_is_empty_OptionList(tom_match54_1_list1))); }} }
 
		return -1;
	}

	private void ensureOriginTrackingLine(int line) {
		if(line < 0) {
			addError("findOriginTrackingLine:  not found", getInput().getInputFileName(), 0, TomCheckerMessage.TOM_ERROR);
			System.out.println("findOriginTrackingLine: not found ");
				//throw new TomRuntimeException(new Throwable("foo"));

		}
	}
}  //Class TomChecker
