/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Expander
 * 
 * Copyright (c) 2000-2007, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine.expander;

import java.util.*;
import java.util.logging.Level;

import tom.engine.exception.TomRuntimeException;

import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomconstraint.types.*;
import tom.engine.adt.tomdeclaration.types.*;
import tom.engine.adt.tomexpression.types.*;
import tom.engine.adt.tominstruction.types.*;
import tom.engine.adt.tomname.types.*;
import tom.engine.adt.tomoption.types.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.adt.tomterm.types.*;
import tom.engine.adt.tomslot.types.*;
import tom.engine.adt.tomtype.types.*;

import tom.engine.adt.tominstruction.types.constraintinstructionlist.concConstraintInstruction;
import tom.engine.adt.tomslot.types.slotlist.concSlot;
import tom.engine.adt.tomsignature.types.tomvisitlist.concTomVisit;
import tom.engine.adt.tomdeclaration.types.declaration.IntrospectorClass;
import tom.engine.TomBase;
import tom.engine.TomMessage;
import tom.engine.tools.SymbolTable;
import tom.engine.tools.ASTFactory;
import tom.engine.tools.TomGenericPlugin;
import tom.engine.tools.Tools;
import tom.platform.OptionParser;
import tom.platform.adt.platformoption.types.PlatformOptionList;

import tom.library.sl.*;

/**
 * The Expander plugin.
 */
public class Expander extends TomGenericPlugin {

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */  /* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   tom.engine.adt.tominstruction.types.InstructionList  tom_append_list_concInstruction( tom.engine.adt.tominstruction.types.InstructionList l1,  tom.engine.adt.tominstruction.types.InstructionList  l2) {     if( l1.isEmptyconcInstruction() ) {       return l2;     } else if( l2.isEmptyconcInstruction() ) {       return l1;     } else if(  l1.getTailconcInstruction() .isEmptyconcInstruction() ) {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( l1.getHeadconcInstruction() ,l2) ;     } else {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( l1.getHeadconcInstruction() ,tom_append_list_concInstruction( l1.getTailconcInstruction() ,l2)) ;     }   }   private static   tom.engine.adt.tominstruction.types.InstructionList  tom_get_slice_concInstruction( tom.engine.adt.tominstruction.types.InstructionList  begin,  tom.engine.adt.tominstruction.types.InstructionList  end, tom.engine.adt.tominstruction.types.InstructionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( begin.getHeadconcInstruction() ,( tom.engine.adt.tominstruction.types.InstructionList )tom_get_slice_concInstruction( begin.getTailconcInstruction() ,end,tail)) ;     }   }      private static   tom.engine.adt.tominstruction.types.ConstraintInstructionList  tom_append_list_concConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstructionList l1,  tom.engine.adt.tominstruction.types.ConstraintInstructionList  l2) {     if( l1.isEmptyconcConstraintInstruction() ) {       return l2;     } else if( l2.isEmptyconcConstraintInstruction() ) {       return l1;     } else if(  l1.getTailconcConstraintInstruction() .isEmptyconcConstraintInstruction() ) {       return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( l1.getHeadconcConstraintInstruction() ,l2) ;     } else {       return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( l1.getHeadconcConstraintInstruction() ,tom_append_list_concConstraintInstruction( l1.getTailconcConstraintInstruction() ,l2)) ;     }   }   private static   tom.engine.adt.tominstruction.types.ConstraintInstructionList  tom_get_slice_concConstraintInstruction( tom.engine.adt.tominstruction.types.ConstraintInstructionList  begin,  tom.engine.adt.tominstruction.types.ConstraintInstructionList  end, tom.engine.adt.tominstruction.types.ConstraintInstructionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make( begin.getHeadconcConstraintInstruction() ,( tom.engine.adt.tominstruction.types.ConstraintInstructionList )tom_get_slice_concConstraintInstruction( begin.getTailconcConstraintInstruction() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomdeclaration.types.DeclarationList  tom_append_list_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList l1,  tom.engine.adt.tomdeclaration.types.DeclarationList  l2) {     if( l1.isEmptyconcDeclaration() ) {       return l2;     } else if( l2.isEmptyconcDeclaration() ) {       return l1;     } else if(  l1.getTailconcDeclaration() .isEmptyconcDeclaration() ) {       return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( l1.getHeadconcDeclaration() ,l2) ;     } else {       return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( l1.getHeadconcDeclaration() ,tom_append_list_concDeclaration( l1.getTailconcDeclaration() ,l2)) ;     }   }   private static   tom.engine.adt.tomdeclaration.types.DeclarationList  tom_get_slice_concDeclaration( tom.engine.adt.tomdeclaration.types.DeclarationList  begin,  tom.engine.adt.tomdeclaration.types.DeclarationList  end, tom.engine.adt.tomdeclaration.types.DeclarationList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( begin.getHeadconcDeclaration() ,( tom.engine.adt.tomdeclaration.types.DeclarationList )tom_get_slice_concDeclaration( begin.getTailconcDeclaration() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomname.types.TomNumberList  tom_append_list_concTomNumber( tom.engine.adt.tomname.types.TomNumberList l1,  tom.engine.adt.tomname.types.TomNumberList  l2) {     if( l1.isEmptyconcTomNumber() ) {       return l2;     } else if( l2.isEmptyconcTomNumber() ) {       return l1;     } else if(  l1.getTailconcTomNumber() .isEmptyconcTomNumber() ) {       return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make( l1.getHeadconcTomNumber() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make( l1.getHeadconcTomNumber() ,tom_append_list_concTomNumber( l1.getTailconcTomNumber() ,l2)) ;     }   }   private static   tom.engine.adt.tomname.types.TomNumberList  tom_get_slice_concTomNumber( tom.engine.adt.tomname.types.TomNumberList  begin,  tom.engine.adt.tomname.types.TomNumberList  end, tom.engine.adt.tomname.types.TomNumberList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make( begin.getHeadconcTomNumber() ,( tom.engine.adt.tomname.types.TomNumberList )tom_get_slice_concTomNumber( begin.getTailconcTomNumber() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomname.types.TomNameList  tom_append_list_concTomName( tom.engine.adt.tomname.types.TomNameList l1,  tom.engine.adt.tomname.types.TomNameList  l2) {     if( l1.isEmptyconcTomName() ) {       return l2;     } else if( l2.isEmptyconcTomName() ) {       return l1;     } else if(  l1.getTailconcTomName() .isEmptyconcTomName() ) {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,l2) ;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( l1.getHeadconcTomName() ,tom_append_list_concTomName( l1.getTailconcTomName() ,l2)) ;     }   }   private static   tom.engine.adt.tomname.types.TomNameList  tom_get_slice_concTomName( tom.engine.adt.tomname.types.TomNameList  begin,  tom.engine.adt.tomname.types.TomNameList  end, tom.engine.adt.tomname.types.TomNameList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName.make( begin.getHeadconcTomName() ,( tom.engine.adt.tomname.types.TomNameList )tom_get_slice_concTomName( begin.getTailconcTomName() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomterm.types.TomList  tom_append_list_concTomTerm( tom.engine.adt.tomterm.types.TomList l1,  tom.engine.adt.tomterm.types.TomList  l2) {     if( l1.isEmptyconcTomTerm() ) {       return l2;     } else if( l2.isEmptyconcTomTerm() ) {       return l1;     } else if(  l1.getTailconcTomTerm() .isEmptyconcTomTerm() ) {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,l2) ;     } else {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( l1.getHeadconcTomTerm() ,tom_append_list_concTomTerm( l1.getTailconcTomTerm() ,l2)) ;     }   }   private static   tom.engine.adt.tomterm.types.TomList  tom_get_slice_concTomTerm( tom.engine.adt.tomterm.types.TomList  begin,  tom.engine.adt.tomterm.types.TomList  end, tom.engine.adt.tomterm.types.TomList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( begin.getHeadconcTomTerm() ,( tom.engine.adt.tomterm.types.TomList )tom_get_slice_concTomTerm( begin.getTailconcTomTerm() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomoption.types.OptionList  tom_append_list_concOption( tom.engine.adt.tomoption.types.OptionList l1,  tom.engine.adt.tomoption.types.OptionList  l2) {     if( l1.isEmptyconcOption() ) {       return l2;     } else if( l2.isEmptyconcOption() ) {       return l1;     } else if(  l1.getTailconcOption() .isEmptyconcOption() ) {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,l2) ;     } else {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( l1.getHeadconcOption() ,tom_append_list_concOption( l1.getTailconcOption() ,l2)) ;     }   }   private static   tom.engine.adt.tomoption.types.OptionList  tom_get_slice_concOption( tom.engine.adt.tomoption.types.OptionList  begin,  tom.engine.adt.tomoption.types.OptionList  end, tom.engine.adt.tomoption.types.OptionList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make( begin.getHeadconcOption() ,( tom.engine.adt.tomoption.types.OptionList )tom_get_slice_concOption( begin.getTailconcOption() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_append_list_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList l1,  tom.engine.adt.tomconstraint.types.ConstraintList  l2) {     if( l1.isEmptyconcConstraint() ) {       return l2;     } else if( l2.isEmptyconcConstraint() ) {       return l1;     } else if(  l1.getTailconcConstraint() .isEmptyconcConstraint() ) {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,l2) ;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( l1.getHeadconcConstraint() ,tom_append_list_concConstraint( l1.getTailconcConstraint() ,l2)) ;     }   }   private static   tom.engine.adt.tomconstraint.types.ConstraintList  tom_get_slice_concConstraint( tom.engine.adt.tomconstraint.types.ConstraintList  begin,  tom.engine.adt.tomconstraint.types.ConstraintList  end, tom.engine.adt.tomconstraint.types.ConstraintList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make( begin.getHeadconcConstraint() ,( tom.engine.adt.tomconstraint.types.ConstraintList )tom_get_slice_concConstraint( begin.getTailconcConstraint() ,end,tail)) ;     }   }      private static   tom.engine.adt.tomslot.types.SlotList  tom_append_list_concSlot( tom.engine.adt.tomslot.types.SlotList l1,  tom.engine.adt.tomslot.types.SlotList  l2) {     if( l1.isEmptyconcSlot() ) {       return l2;     } else if( l2.isEmptyconcSlot() ) {       return l1;     } else if(  l1.getTailconcSlot() .isEmptyconcSlot() ) {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,l2) ;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( l1.getHeadconcSlot() ,tom_append_list_concSlot( l1.getTailconcSlot() ,l2)) ;     }   }   private static   tom.engine.adt.tomslot.types.SlotList  tom_get_slice_concSlot( tom.engine.adt.tomslot.types.SlotList  begin,  tom.engine.adt.tomslot.types.SlotList  end, tom.engine.adt.tomslot.types.SlotList  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return  tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( begin.getHeadconcSlot() ,( tom.engine.adt.tomslot.types.SlotList )tom_get_slice_concSlot( begin.getTailconcSlot() ,end,tail)) ;     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */   private static   tom.library.sl.Strategy  tom_append_list_Sequence( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 == null )) {       return l2;     } else if(( l2 == null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.Sequence) )) {       if(( ((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )) == null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1):new tom.library.sl.Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.FIRST) ):l1),tom_append_list_Sequence(((( (l1 instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.Sequence(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_Sequence( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else {       return ( (( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin):new tom.library.sl.Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_Sequence(((( (begin instanceof tom.library.sl.Sequence) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.Sequence.THEN) ):( null )),end,tail)) );     }   }      private static   tom.library.sl.Strategy  tom_append_list_ChoiceId( tom.library.sl.Strategy  l1,  tom.library.sl.Strategy  l2) {     if(( l1 ==null )) {       return l2;     } else if(( l2 ==null )) {       return l1;     } else if(( (l1 instanceof tom.library.sl.ChoiceId) )) {       if(( ((( (l1 instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ):( null )) ==null )) {         return ( (l2==null)?((( (l1 instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ):l1):new tom.library.sl.ChoiceId(((( (l1 instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ):l1),l2) );       } else {         return ( (tom_append_list_ChoiceId(((( (l1 instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ):( null )),l2)==null)?((( (l1 instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ):l1):new tom.library.sl.ChoiceId(((( (l1 instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.FIRST) ):l1),tom_append_list_ChoiceId(((( (l1 instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)l1.getChildAt(tom.library.sl.ChoiceId.THEN) ):( null )),l2)) );       }     } else {       return ( (l2==null)?l1:new tom.library.sl.ChoiceId(l1,l2) );     }   }   private static   tom.library.sl.Strategy  tom_get_slice_ChoiceId( tom.library.sl.Strategy  begin,  tom.library.sl.Strategy  end, tom.library.sl.Strategy  tail) {     if( (begin.equals(end)) ) {       return tail;     } else {       return ( (( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ):( null )),end,tail)==null)?((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin):new tom.library.sl.ChoiceId(((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.FIRST) ):begin),( tom.library.sl.Strategy )tom_get_slice_ChoiceId(((( (begin instanceof tom.library.sl.ChoiceId) ))?( (tom.library.sl.Strategy)begin.getChildAt(tom.library.sl.ChoiceId.THEN) ):( null )),end,tail)) );     }   }    /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */private static  tom.library.sl.Strategy  tom_make_TopDown( tom.library.sl.Strategy  v) { return ( ( new tom.library.sl.Mu(( new tom.library.sl.MuVar("_x") ),( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )==null)?v:new tom.library.sl.Sequence(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ):new tom.library.sl.Sequence(( new tom.library.sl.All(( new tom.library.sl.MuVar("_x") )) ),( null )) )) )) ) ); }   /* Generated by TOM (version 2.6alpha): Do not edit this file */ /* Generated by TOM (version 2.6alpha): Do not edit this file */ private static  tom.library.sl.Strategy  tom_make_ChoiceTopDown( tom.library.sl.Strategy  v) { return 










 (( new tom.library.sl.Mu(( new tom.library.sl.MuVar("x") ),( (( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("x") )) ):new tom.library.sl.ChoiceId(( new tom.library.sl.All(( new tom.library.sl.MuVar("x") )) ),( null )) )==null)?v:new tom.library.sl.ChoiceId(v,( (( null )==null)?( new tom.library.sl.All(( new tom.library.sl.MuVar("x") )) ):new tom.library.sl.ChoiceId(( new tom.library.sl.All(( new tom.library.sl.MuVar("x") )) ),( null )) )) )) )) ; }


  /** some output suffixes */
  public static final String EXPANDED_SUFFIX = ".tfix.expanded";

  /** the declared options string*/
  public static final String DECLARED_OPTIONS = "<options>" +
    "<boolean name='expand' altName='' description='Expander (activated by default)' value='true'/>" +
    "<boolean name='autoDispatch' altName='ad' description='The content of \"visitor_fwd\" is ignored, and a dispatch mechanism is automatically generated in %strategy ' value='false'/>" +
    "</options>";
  
  private static final String basicStratName = "tom.library.sl.BasicStrategy";
  private static final TomType objectType =  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("Object") ;
  private static final TomType introspectorType =  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("tom.library.sl.Introspector") ;
  // introspector argument of visitLight
  private static final TomTerm introspectorVar =  tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make("introspector") , introspectorType,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ;
  private static boolean generatedIntrospector = false;
  
  /** if the flag is true, the class generated from %strategy inherits from BasicStrategy and handles the dispatch*/
  private static boolean autoDispatch = false;


  /** unicity var counter */
  private static int absVarNumber;

  /** Constructor */
  public Expander() {
    super("Expander");
  }

  public void run() {
    long startChrono = System.currentTimeMillis();
    boolean intermediate = getOptionBooleanValue("intermediate");    
    try {
      // reinit absVarNumber to generate reproducible output
      absVarNumber = 0;
      autoDispatch = getOptionBooleanValue("autoDispatch");
      TomTerm expandedTerm = (TomTerm) tom_make_Expand(this).visitLight((TomTerm)getWorkingTerm());
     // verbose
      getLogger().log(Level.INFO, TomMessage.tomCompilationPhase.getMessage(),
          new Integer((int)(System.currentTimeMillis()-startChrono)) );
      setWorkingTerm(expandedTerm);
      if(intermediate) {
        Tools.generateOutput(getStreamManager().getOutputFileName() + EXPANDED_SUFFIX, (TomTerm)getWorkingTerm());
      }
    } catch (Exception e) {
      getLogger().log(Level.SEVERE, TomMessage.exceptionMessage.getMessage(),
          new Object[]{getStreamManager().getInputFileName(), "Expander", e.getMessage()} );
      e.printStackTrace();
    }
  }

  public PlatformOptionList getDeclaredOptionList() {
    return OptionParser.xmlToOptionList(Expander.DECLARED_OPTIONS);
  }

  /*
   * Expand:
   * replaces BuildReducedTerm by BuildList, BuildArray or BuildTerm
   *
   * abstract list-matching patterns
   */

  private static  tom.library.sl.Strategy  tom_make_Expand( Expander  expander) { return tom_make_ChoiceTopDown(tom_make_Expand_once(expander))
 ; }private static class Expand_once extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  Expander  expander; public Expand_once( Expander  expander) { super(( new tom.library.sl.Identity() ));this.expander=expander;}public  Expander  getexpander() { return expander;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch179NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);if ( (tomMatch179NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch179NameNumber_freshVar_0= tomMatch179NameNumberfreshSubject_1.getTomTerm() ;{ boolean tomMatch179NameNumber_freshVar_1= false ;if ( (tomMatch179NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {tomMatch179NameNumber_freshVar_1= true ;} else {if ( (tomMatch179NameNumber_freshVar_0 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {tomMatch179NameNumber_freshVar_1= true ;}}if ((tomMatch179NameNumber_freshVar_1 ==  true )) {if ( true ) {





        return tomMatch179NameNumber_freshVar_0;
      }}}}}}}if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch179NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);if ( (tomMatch179NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch179NameNumber_freshVar_2= tomMatch179NameNumberfreshSubject_1.getTomTerm() ;{  tom.engine.adt.tomtype.types.TomType  tomMatch179NameNumber_freshVar_3= tomMatch179NameNumberfreshSubject_1.getAstType() ;if ( (tomMatch179NameNumber_freshVar_2 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomoption.types.OptionList  tomMatch179NameNumber_freshVar_4= tomMatch179NameNumber_freshVar_2.getOption() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch179NameNumber_freshVar_5= tomMatch179NameNumber_freshVar_2.getNameList() ;{  tom.engine.adt.tomslot.types.SlotList  tomMatch179NameNumber_freshVar_6= tomMatch179NameNumber_freshVar_2.getSlots() ;{  tom.engine.adt.tomoption.types.OptionList  tom_optionList=tomMatch179NameNumber_freshVar_4;if ( ((tomMatch179NameNumber_freshVar_5 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch179NameNumber_freshVar_5 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch179NameNumber_freshVar_7=tomMatch179NameNumber_freshVar_5;if (!( tomMatch179NameNumber_freshVar_7.isEmptyconcTomName() )) {if ( ( tomMatch179NameNumber_freshVar_7.getHeadconcTomName()  instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch179NameNumber_freshVar_9=  tomMatch179NameNumber_freshVar_7.getHeadconcTomName() .getString() ;{  tom.engine.adt.tomname.types.TomName  tom_name= tomMatch179NameNumber_freshVar_7.getHeadconcTomName() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch179NameNumber_freshVar_8= tomMatch179NameNumber_freshVar_7.getTailconcTomName() ;if ( tomMatch179NameNumber_freshVar_8.isEmptyconcTomName() ) {if ( true ) {


        TomSymbol tomSymbol = expander.symbolTable().getSymbolFromName(tomMatch179NameNumber_freshVar_9);
        SlotList newTermArgs = (SlotList) tom_make_Expand_makeTerm(expander).visitLight(tomMatch179NameNumber_freshVar_6);
        TomList tomListArgs = TomBase.slotListToTomList(newTermArgs);

        if(TomBase.hasConstant(tom_optionList)) {
          return  tom.engine.adt.tomterm.types.tomterm.BuildConstant.make(tom_name) ;
        } else if(tomSymbol != null) {
          if(TomBase.isListOperator(tomSymbol)) {
            return ASTFactory.buildList(tom_name,tomListArgs,expander.symbolTable());
          } else if(TomBase.isArrayOperator(tomSymbol)) {
            return ASTFactory.buildArray(tom_name,tomListArgs,expander.symbolTable());
          } else if(TomBase.isDefinedSymbol(tomSymbol)) {
            return  tom.engine.adt.tomterm.types.tomterm.FunctionCall.make(tom_name, TomBase.getSymbolCodomain(tomSymbol), tomListArgs) ;
          } else {
            String moduleName = TomBase.getModuleName(tom_optionList);
            if(moduleName==null) {
              moduleName = TomBase.DEFAULT_MODULE_NAME;
            }
            return  tom.engine.adt.tomterm.types.tomterm.BuildTerm.make(tom_name, tomListArgs, moduleName) ;
          }
        } else {
          return  tom.engine.adt.tomterm.types.tomterm.FunctionCall.make(tom_name, tomMatch179NameNumber_freshVar_3, tomListArgs) ;
        }

      }}}}}}}}}}}}}}}}}}}}return super.visit_TomTerm(tom__arg,introspector); }public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tominstruction.types.Instruction) ) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch180NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if ( (tomMatch180NameNumberfreshSubject_1 instanceof tom.engine.adt.tominstruction.types.instruction.Match) ) {{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch180NameNumber_freshVar_0= tomMatch180NameNumberfreshSubject_1.getConstraintInstructionList() ;{  tom.engine.adt.tomoption.types.OptionList  tomMatch180NameNumber_freshVar_1= tomMatch180NameNumberfreshSubject_1.getOption() ;{  tom.engine.adt.tomoption.types.OptionList  tom_matchOptionList=tomMatch180NameNumber_freshVar_1;if ( true ) {





        Option orgTrack = TomBase.findOriginTracking(tom_matchOptionList);
        ConstraintInstructionList newConstraintInstructionList =  tom.engine.adt.tominstruction.types.constraintinstructionlist.EmptyconcConstraintInstruction.make() ;
        ConstraintList negativeConstraint =  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ;        
        for(ConstraintInstruction constraintInstruction:(concConstraintInstruction)tomMatch180NameNumber_freshVar_0) {
          /*
           * the call to Expand performs the recursive expansion
           * of nested match constructs
           */
          ConstraintInstruction newConstraintInstruction = (ConstraintInstruction) tom_make_Expand(expander).visitLight(constraintInstruction);

matchBlock: {
              {if ( (newConstraintInstruction instanceof tom.engine.adt.tominstruction.types.ConstraintInstruction) ) {{  tom.engine.adt.tominstruction.types.ConstraintInstruction  tomMatch181NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.ConstraintInstruction )newConstraintInstruction);if ( (tomMatch181NameNumberfreshSubject_1 instanceof tom.engine.adt.tominstruction.types.constraintinstruction.ConstraintInstruction) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch181NameNumber_freshVar_0= tomMatch181NameNumberfreshSubject_1.getConstraint() ;{  tom.engine.adt.tominstruction.types.Instruction  tomMatch181NameNumber_freshVar_1= tomMatch181NameNumberfreshSubject_1.getAction() ;{  tom.engine.adt.tomoption.types.OptionList  tomMatch181NameNumber_freshVar_2= tomMatch181NameNumberfreshSubject_1.getOption() ;{  tom.engine.adt.tomconstraint.types.Constraint  tom_constraint=tomMatch181NameNumber_freshVar_0;{  tom.engine.adt.tominstruction.types.Instruction  tom_actionInst=tomMatch181NameNumber_freshVar_1;if ( true ) {

                  Instruction newAction = tom_actionInst;
                  /* expansion of RawAction into TypedAction */
                  {if ( (tom_actionInst instanceof tom.engine.adt.tominstruction.types.Instruction) ) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch182NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom_actionInst);if ( (tomMatch182NameNumberfreshSubject_1 instanceof tom.engine.adt.tominstruction.types.instruction.RawAction) ) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch182NameNumber_freshVar_0= tomMatch182NameNumberfreshSubject_1.getAstInstruction() ;if ( true ) {

                      newAction= tom.engine.adt.tominstruction.types.instruction.TypedAction.make( tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.TrueTL.make() , tomMatch182NameNumber_freshVar_0,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) , tom_constraint, negativeConstraint) ;
                    }}}}}}

                  negativeConstraint = tom_append_list_concConstraint(negativeConstraint, tom.engine.adt.tomconstraint.types.constraintlist.ConsconcConstraint.make(tom_constraint, tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) );

                  /* generate equality checks */
                  newConstraintInstruction =  tom.engine.adt.tominstruction.types.constraintinstruction.ConstraintInstruction.make(tom_constraint, newAction, tomMatch181NameNumber_freshVar_2) ;
                  /* do nothing */
                  break matchBlock;
                }}}}}}}}}if ( (newConstraintInstruction instanceof tom.engine.adt.tominstruction.types.ConstraintInstruction) ) {{  tom.engine.adt.tominstruction.types.ConstraintInstruction  tomMatch181NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.ConstraintInstruction )newConstraintInstruction);if ( true ) {


                  System.out.println("Expander.Expand: strange ConstraintInstruction: " + newConstraintInstruction);
                  throw new TomRuntimeException("Expander.Expand: strange ConstraintInstruction: " + newConstraintInstruction);
                }}}}

            } // end matchBlock

            newConstraintInstructionList = tom_append_list_concConstraintInstruction(newConstraintInstructionList, tom.engine.adt.tominstruction.types.constraintinstructionlist.ConsconcConstraintInstruction.make(newConstraintInstruction, tom.engine.adt.tominstruction.types.constraintinstructionlist.EmptyconcConstraintInstruction.make() ) );
        }

        Instruction newMatch =  tom.engine.adt.tominstruction.types.instruction.Match.make(newConstraintInstructionList, tom_matchOptionList) ;
        return newMatch;
      }}}}}}}}return super.visit_Instruction(tom__arg,introspector); }public  tom.engine.adt.tomdeclaration.types.Declaration  visit_Declaration( tom.engine.adt.tomdeclaration.types.Declaration  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomdeclaration.types.Declaration) ) {{  tom.engine.adt.tomdeclaration.types.Declaration  tomMatch183NameNumberfreshSubject_1=(( tom.engine.adt.tomdeclaration.types.Declaration )tom__arg);if ( (tomMatch183NameNumberfreshSubject_1 instanceof tom.engine.adt.tomdeclaration.types.declaration.Strategy) ) {{  tom.engine.adt.tomname.types.TomName  tomMatch183NameNumber_freshVar_0= tomMatch183NameNumberfreshSubject_1.getSName() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch183NameNumber_freshVar_1= tomMatch183NameNumberfreshSubject_1.getExtendsTerm() ;{  tom.engine.adt.tomsignature.types.TomVisitList  tomMatch183NameNumber_freshVar_2= tomMatch183NameNumberfreshSubject_1.getVisitList() ;{  tom.engine.adt.tomoption.types.Option  tomMatch183NameNumber_freshVar_3= tomMatch183NameNumberfreshSubject_1.getOrgTrack() ;if ( true ) {





        //Generate only one Intropector for a class if a %strategy is found
        if(!generatedIntrospector) {
          generatedIntrospector=true;
          DeclarationList l =  tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ;
          //generate the code for every method of Instrospector interface
          IntrospectorClass i =  tom.engine.adt.tomdeclaration.types.declaration.IntrospectorClass.make( tom.engine.adt.tomname.types.tomname.Name.make("LocalIntrospector") ,  tom.engine.adt.tomdeclaration.types.declaration.AbstractDecl.make(l) ) ;

          SymbolTable symbolTable = expander.symbolTable();
          Collection<TomTypeDefinition> types = symbolTable.getUsedTypes();
          for(TomTypeDefinition type:types) {
            TomSymbolList list = symbolTable.getSymbolFromType(type.getTomType());
            //System.out.println(list);
          }
          /**
            public Object setChildren(Object o, Object[] children);

            public Object[] getChildren(Object o);

            public Object setChildAt( Object o, int i, Object child);

            public Object getChildAt(Object o, int i);

            public int getChildCount(Object o);

           */
        }
        //System.out.println("extendsTerm = " + `extendsTerm);
        DeclarationList l =  tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ;//represents compiled Strategy
        TomForwardType visitorFwd = null;             
        HashMap<TomType,String> dispatchInfo = new HashMap<TomType,String>(); // contains info needed for dispatch
        for(TomVisit visit:(concTomVisit)tomMatch183NameNumber_freshVar_2) {
          TomList subjectListAST =  tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ;
          {if ( (visit instanceof tom.engine.adt.tomsignature.types.TomVisit) ) {{  tom.engine.adt.tomsignature.types.TomVisit  tomMatch184NameNumberfreshSubject_1=(( tom.engine.adt.tomsignature.types.TomVisit )visit);if ( (tomMatch184NameNumberfreshSubject_1 instanceof tom.engine.adt.tomsignature.types.tomvisit.VisitTerm) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch184NameNumber_freshVar_0= tomMatch184NameNumberfreshSubject_1.getVNode() ;{  tom.engine.adt.tominstruction.types.ConstraintInstructionList  tomMatch184NameNumber_freshVar_1= tomMatch184NameNumberfreshSubject_1.getAstConstraintInstructionList() ;{  tom.engine.adt.tomoption.types.OptionList  tomMatch184NameNumber_freshVar_2= tomMatch184NameNumberfreshSubject_1.getOption() ;if ( (tomMatch184NameNumber_freshVar_0 instanceof tom.engine.adt.tomtype.types.tomtype.Type) ) {{  tom.engine.adt.tomtype.types.TomType  tomMatch184NameNumber_freshVar_3= tomMatch184NameNumber_freshVar_0.getTomType() ;if ( (tomMatch184NameNumber_freshVar_3 instanceof tom.engine.adt.tomtype.types.tomtype.ASTTomType) ) {{  String  tomMatch184NameNumber_freshVar_4= tomMatch184NameNumber_freshVar_3.getString() ;{  String  tom_type=tomMatch184NameNumber_freshVar_4;{  tom.engine.adt.tomtype.types.TomType  tom_vType=tomMatch184NameNumber_freshVar_0;if ( true ) {
              
              if(visitorFwd == null) {//first time in loop
                visitorFwd = expander.symbolTable().getForwardType(tom_type);//do the job only once
              }
              TomTerm arg =  tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make("tom__arg") , tom_vType,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ;//arg subjectList
              subjectListAST = tom_append_list_concTomTerm(subjectListAST, tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(arg, tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(introspectorVar, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ) ) );
              String funcName = "visit_" + tom_type;//function name
              Instruction matchStatement =  tom.engine.adt.tominstruction.types.instruction.Match.make(tomMatch184NameNumber_freshVar_1,  tom.engine.adt.tomoption.types.optionlist.ConsconcOption.make(tomMatch183NameNumber_freshVar_3, tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ) ) ;
              //return default strategy.visitLight(arg)
              // FIXME: put superclass keyword in backend, in c# 'super' is 'base'
              Instruction returnStatement = null;
              if (expander.autoDispatch) {
                returnStatement =  tom.engine.adt.tominstruction.types.instruction.Return.make( tom.engine.adt.tomterm.types.tomterm.FunctionCall.make( tom.engine.adt.tomname.types.tomname.Name.make("_" + funcName) , tom_vType, subjectListAST) ) ;
              } else {
                returnStatement =  tom.engine.adt.tominstruction.types.instruction.Return.make( tom.engine.adt.tomterm.types.tomterm.FunctionCall.make( tom.engine.adt.tomname.types.tomname.Name.make("super."+ funcName) , tom_vType, subjectListAST) ) ;
              }
              InstructionList instructions =  tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(matchStatement, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(returnStatement, tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) ) ;
              l = tom_append_list_concDeclaration(l, tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( tom.engine.adt.tomdeclaration.types.declaration.MethodDef.make( tom.engine.adt.tomname.types.tomname.Name.make(funcName) ,  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(arg, tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(introspectorVar, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ) ) , tom_vType,  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("tom.library.sl.VisitFailure") ,  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(instructions) ) , tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ) );
              if (expander.autoDispatch) {
                dispatchInfo.put(tom_vType,funcName);
              }
            }}}}}}}}}}}}}}

        }
        if ( expander.autoDispatch ) { 
          /*
           * // Generates the following dispatch mechanism
           *           
           * public Visitable visitLight(Visitable v) throws VisitFailure {
           *       if (is_sort(v, Term1))
           *               return this.visit_Term1((Term1) v);
           *       .....................        
           *       if (is_sort(v, Termn))
           *               return this.visit_Termn((Termn) v);               
           *       return any.visitLight(v);
           * }
           *
           * public Term1 _visit_Term1(Term1 arg) throws VisitFailure {
           *        if (environment != null) {
           *                return (Term1) any.visit(environment);
           *        } else {
           *                return (Term1) any.visitLight(arg);
           *        }
           * }
           * ..............
           * public Termn _visit_Termn(Termn arg) throws VisitFailure {
           *        if (environment != null) {
           *                return (Termn) any.visit(environment);
           *        } else {
           *                return (Termn) any.visitLight(arg);
           *        }
           * }
           *
           */        
          visitorFwd =  tom.engine.adt.tomtype.types.tomforwardtype.TLForward.make(Expander.basicStratName) ;         
          TomTerm vVar =  tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make("v") , objectType,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ;// v argument of visitLight
          InstructionList ifList =  tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ; // the list of ifs in visitLight
          Expression testEnvNotNull = null;
          // generate the visitLight
          for(TomType type:dispatchInfo.keySet()){
            TomList funcArg =  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make( tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.Cast.make(type,  tom.engine.adt.tomexpression.types.expression.TomTermToExpression.make(vVar) ) ) , tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(introspectorVar, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ) ) ;            
            Instruction returnStatement =  tom.engine.adt.tominstruction.types.instruction.Return.make( tom.engine.adt.tomterm.types.tomterm.FunctionCall.make( tom.engine.adt.tomname.types.tomname.Name.make(dispatchInfo.get(type)) , type, funcArg) ) ;
            Instruction ifInstr =  tom.engine.adt.tominstruction.types.instruction.If.make( tom.engine.adt.tomexpression.types.expression.IsSort.make(type, vVar) , returnStatement,  tom.engine.adt.tominstruction.types.instruction.Nop.make() ) ;
            ifList = tom_append_list_concInstruction(ifList, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make(ifInstr, tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) );
            // generate the _visit_Term
            TomTerm arg =  tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make("arg") , type,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ;
            TomTerm environmentVar =  tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.Name.make("environment") ,  tom.engine.adt.tomtype.types.tomtype.EmptyType.make() ,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ;
            Instruction return1 =  tom.engine.adt.tominstruction.types.instruction.Return.make( tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.Cast.make(type,  tom.engine.adt.tomexpression.types.expression.TomInstructionToExpression.make( tom.engine.adt.tominstruction.types.instruction.TargetLanguageToInstruction.make( tom.engine.adt.tomsignature.types.targetlanguage.ITL.make("any.visit(environment,introspector)") ) ) ) ) ) ;
            Instruction return2 =  tom.engine.adt.tominstruction.types.instruction.Return.make( tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.Cast.make(type,  tom.engine.adt.tomexpression.types.expression.TomInstructionToExpression.make( tom.engine.adt.tominstruction.types.instruction.TargetLanguageToInstruction.make( tom.engine.adt.tomsignature.types.targetlanguage.ITL.make("any.visitLight(arg,introspector)") ) ) ) ) ) ;
            testEnvNotNull =  tom.engine.adt.tomexpression.types.expression.Negation.make( tom.engine.adt.tomexpression.types.expression.EqualTerm.make(expander.getStreamManager().getSymbolTable().getBooleanType(), environmentVar,  tom.engine.adt.tomterm.types.tomterm.ExpressionToTomTerm.make( tom.engine.adt.tomexpression.types.expression.Bottom.make( tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("Object") ) ) ) ) 
;
            Instruction ifThenElse =  tom.engine.adt.tominstruction.types.instruction.If.make(testEnvNotNull, return1, return2) ;
            l = tom_append_list_concDeclaration(l, tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make( tom.engine.adt.tomdeclaration.types.declaration.MethodDef.make( tom.engine.adt.tomname.types.tomname.Name.make("_" + dispatchInfo.get(type)) ,  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(arg, tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(introspectorVar, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ) ) , type,  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("tom.library.sl.VisitFailure") , ifThenElse) , tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ) )




;
          }
          ifList = tom_append_list_concInstruction(ifList, tom.engine.adt.tominstruction.types.instructionlist.ConsconcInstruction.make( tom.engine.adt.tominstruction.types.instruction.If.make(testEnvNotNull,  tom.engine.adt.tominstruction.types.instruction.Return.make( tom.engine.adt.tomterm.types.tomterm.InstructionToTomTerm.make( tom.engine.adt.tominstruction.types.instruction.TargetLanguageToInstruction.make( tom.engine.adt.tomsignature.types.targetlanguage.ITL.make("any.visit(environment,introspector)") ) ) ) ,  tom.engine.adt.tominstruction.types.instruction.Return.make( tom.engine.adt.tomterm.types.tomterm.InstructionToTomTerm.make( tom.engine.adt.tominstruction.types.instruction.TargetLanguageToInstruction.make( tom.engine.adt.tomsignature.types.targetlanguage.ITL.make("any.visitLight(v,introspector)") ) ) ) ) , tom.engine.adt.tominstruction.types.instructionlist.EmptyconcInstruction.make() ) )


;
          Declaration visitLightDeclaration =  tom.engine.adt.tomdeclaration.types.declaration.MethodDef.make( tom.engine.adt.tomname.types.tomname.Name.make("visitLight") ,  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(vVar, tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(introspectorVar, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() ) ) , objectType,  tom.engine.adt.tomtype.types.tomtype.TomTypeAlone.make("tom.library.sl.VisitFailure") ,  tom.engine.adt.tominstruction.types.instruction.AbstractBlock.make(ifList) ) 




;
          l = tom_append_list_concDeclaration(l, tom.engine.adt.tomdeclaration.types.declarationlist.ConsconcDeclaration.make(visitLightDeclaration, tom.engine.adt.tomdeclaration.types.declarationlist.EmptyconcDeclaration.make() ) );
        }// end if autoDispatch
        return (Declaration) tom_make_Expand(expander).visitLight( tom.engine.adt.tomdeclaration.types.declaration.Class.make(tomMatch183NameNumber_freshVar_0, visitorFwd, tomMatch183NameNumber_freshVar_1,  tom.engine.adt.tomdeclaration.types.declaration.AbstractDecl.make(l) ) );
      }}}}}}}}}return super.visit_Declaration(tom__arg,introspector); }}private static  tom.library.sl.Strategy  tom_make_Expand_once( Expander  t0) { return new Expand_once(t0); }

 // end strategy

  private static  tom.library.sl.Strategy  tom_make_Expand_makeTerm( Expander  expander) { return tom_make_ChoiceTopDown(tom_make_Expand_makeTerm_once(expander))
 ; }private static class Expand_makeTerm_once extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  Expander  expander; public Expand_makeTerm_once( Expander  expander) { super(( new tom.library.sl.Identity() ));this.expander=expander;}public  Expander  getexpander() { return expander;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch185NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{  tom.engine.adt.tomterm.types.TomTerm  tom_t=tomMatch185NameNumberfreshSubject_1;if ( true ) {




return (TomTerm) tom_make_Expand(expander).visitLight( tom.engine.adt.tomterm.types.tomterm.BuildReducedTerm.make(tom_t, expander.getTermType(tom_t)) );}}}}}return super.visit_TomTerm(tom__arg,introspector); }}private static  tom.library.sl.Strategy  tom_make_Expand_makeTerm_once( Expander  t0) { return new Expand_makeTerm_once(t0); }



  private TomTerm abstractPattern(TomTerm subject, ArrayList abstractedPattern, ArrayList introducedVariable)  {
    TomTerm abstractedTerm = subject;
    {if ( (subject instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch186NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )subject);if ( (tomMatch186NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch186NameNumber_freshVar_0= tomMatch186NameNumberfreshSubject_1.getNameList() ;{  tom.engine.adt.tomslot.types.SlotList  tomMatch186NameNumber_freshVar_1= tomMatch186NameNumberfreshSubject_1.getSlots() ;if ( ((tomMatch186NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch186NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch186NameNumber_freshVar_2=tomMatch186NameNumber_freshVar_0;if (!( tomMatch186NameNumber_freshVar_2.isEmptyconcTomName() )) {if ( ( tomMatch186NameNumber_freshVar_2.getHeadconcTomName()  instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch186NameNumber_freshVar_5=  tomMatch186NameNumber_freshVar_2.getHeadconcTomName() .getString() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch186NameNumber_freshVar_3= tomMatch186NameNumber_freshVar_2.getTailconcTomName() ;{  tom.engine.adt.tomslot.types.SlotList  tom_arguments=tomMatch186NameNumber_freshVar_1;if ( true ) {

        TomSymbol tomSymbol = symbolTable().getSymbolFromName(tomMatch186NameNumber_freshVar_5);

        SlotList newArgs =  tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ;
        if(TomBase.isListOperator(tomSymbol) || TomBase.isArrayOperator(tomSymbol)) {
          for(Slot elt:(concSlot)tom_arguments) {
            TomTerm newElt = elt.getAppl();
            {if ( (newElt instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch187NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )newElt);if ( (tomMatch187NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomterm.RecordAppl) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch187NameNumber_freshVar_0= tomMatch187NameNumberfreshSubject_1.getNameList() ;if ( ((tomMatch187NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.ConsconcTomName) || (tomMatch187NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomnamelist.EmptyconcTomName)) ) {{  tom.engine.adt.tomname.types.TomNameList  tomMatch187NameNumber_freshVar_1=tomMatch187NameNumber_freshVar_0;if (!( tomMatch187NameNumber_freshVar_1.isEmptyconcTomName() )) {if ( ( tomMatch187NameNumber_freshVar_1.getHeadconcTomName()  instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch187NameNumber_freshVar_4=  tomMatch187NameNumber_freshVar_1.getHeadconcTomName() .getString() ;{  tom.engine.adt.tomname.types.TomNameList  tomMatch187NameNumber_freshVar_2= tomMatch187NameNumber_freshVar_1.getTailconcTomName() ;if ( true ) {

                /*
                 * we no longer abstract syntactic subterm
                 * they are compiled by the KernelExpander
                 */

                //System.out.println("Abstract: " + appl);
                TomSymbol tomSymbol2 = symbolTable().getSymbolFromName(tomMatch187NameNumber_freshVar_4);
                if(TomBase.isListOperator(tomSymbol2) || TomBase.isArrayOperator(tomSymbol2)) {
                  TomType type2 = tomSymbol2.getTypesToType().getCodomain();
                  abstractedPattern.add(tomMatch187NameNumberfreshSubject_1);

                  TomNumberList path =  tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber.make() ;
                  absVarNumber++;
                  path = tom_append_list_concTomNumber(path, tom.engine.adt.tomname.types.tomnumberlist.ConsconcTomNumber.make( tom.engine.adt.tomname.types.tomnumber.AbsVar.make(absVarNumber) , tom.engine.adt.tomname.types.tomnumberlist.EmptyconcTomNumber.make() ) );

                  TomTerm newVariable =  tom.engine.adt.tomterm.types.tomterm.Variable.make( tom.engine.adt.tomoption.types.optionlist.EmptyconcOption.make() ,  tom.engine.adt.tomname.types.tomname.PositionName.make(path) , type2,  tom.engine.adt.tomconstraint.types.constraintlist.EmptyconcConstraint.make() ) ;

                  //System.out.println("newVariable = " + newVariable);

                  introducedVariable.add(newVariable);
                  newElt = newVariable;
                }
              }}}}}}}}}}}}

            newArgs = tom_append_list_concSlot(newArgs, tom.engine.adt.tomslot.types.slotlist.ConsconcSlot.make( tom.engine.adt.tomslot.types.slot.PairSlotAppl.make(elt.getSlotName(), newElt) , tom.engine.adt.tomslot.types.slotlist.EmptyconcSlot.make() ) );
          }
        } else {
          newArgs = TomBase.mergeTomListWithSlotList(abstractPatternList(TomBase.slotListToTomList(tom_arguments),abstractedPattern,introducedVariable),tom_arguments);
        }
        abstractedTerm = subject.setSlots(newArgs);
      }}}}}}}}}}}}}}
 // end match
    return abstractedTerm;
  }

  private TomList abstractPatternList(TomList subjectList, ArrayList abstractedPattern, ArrayList introducedVariable)  {
    {if ( (subjectList instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch188NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )subjectList);if ( ((tomMatch188NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch188NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch188NameNumber_freshVar_0=tomMatch188NameNumberfreshSubject_1;if ( tomMatch188NameNumber_freshVar_0.isEmptyconcTomTerm() ) {if ( true ) {
 return subjectList; }}}}}}if ( (subjectList instanceof tom.engine.adt.tomterm.types.TomList) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch188NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomList )subjectList);if ( ((tomMatch188NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm) || (tomMatch188NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm)) ) {{  tom.engine.adt.tomterm.types.TomList  tomMatch188NameNumber_freshVar_1=tomMatch188NameNumberfreshSubject_1;if (!( tomMatch188NameNumber_freshVar_1.isEmptyconcTomTerm() )) {{  tom.engine.adt.tomterm.types.TomList  tomMatch188NameNumber_freshVar_2= tomMatch188NameNumber_freshVar_1.getTailconcTomTerm() ;if ( true ) {

        TomTerm newElt = abstractPattern( tomMatch188NameNumber_freshVar_1.getHeadconcTomTerm() ,abstractedPattern,introducedVariable);
        TomList tl = abstractPatternList(tomMatch188NameNumber_freshVar_2,abstractedPattern,introducedVariable);
        return  tom.engine.adt.tomterm.types.tomlist.ConsconcTomTerm.make(newElt,tom_append_list_concTomTerm(tl, tom.engine.adt.tomterm.types.tomlist.EmptyconcTomTerm.make() )) ;
      }}}}}}}}

    throw new TomRuntimeException("abstractPatternList: " + subjectList);
  }  

  /*
   * add a prefix (tom_) to back-quoted variables which comes from the lhs
   */
  private static class findRenameVariable extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  context; public findRenameVariable( java.util.Collection  context) { super(( new tom.library.sl.Identity() ));this.context=context;}public  java.util.Collection  getcontext() { return context;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomterm.types.TomTerm  visit_TomTerm( tom.engine.adt.tomterm.types.TomTerm  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomterm.types.TomTerm) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch189NameNumberfreshSubject_1=(( tom.engine.adt.tomterm.types.TomTerm )tom__arg);{ boolean tomMatch189NameNumber_freshVar_2= false ;{  tom.engine.adt.tomname.types.TomName  tomMatch189NameNumber_freshVar_0= null ;if ( (tomMatch189NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomterm.Variable) ) {{tomMatch189NameNumber_freshVar_2= true ;tomMatch189NameNumber_freshVar_0= tomMatch189NameNumberfreshSubject_1.getAstName() ;}} else {if ( (tomMatch189NameNumberfreshSubject_1 instanceof tom.engine.adt.tomterm.types.tomterm.VariableStar) ) {{tomMatch189NameNumber_freshVar_2= true ;tomMatch189NameNumber_freshVar_0= tomMatch189NameNumberfreshSubject_1.getAstName() ;}}}if ((tomMatch189NameNumber_freshVar_2 ==  true )) {if ( (tomMatch189NameNumber_freshVar_0 instanceof tom.engine.adt.tomname.types.tomname.Name) ) {{  String  tomMatch189NameNumber_freshVar_1= tomMatch189NameNumber_freshVar_0.getString() ;if ( true ) {


        if(context.contains(tomMatch189NameNumber_freshVar_0)) {          
          return tomMatch189NameNumberfreshSubject_1.setAstName( tom.engine.adt.tomname.types.tomname.Name.make(ASTFactory.makeTomVariableName(tomMatch189NameNumber_freshVar_1)) );
        }
      }}}}}}}}}return super.visit_TomTerm(tom__arg,introspector); }public  tom.engine.adt.tominstruction.types.Instruction  visit_Instruction( tom.engine.adt.tominstruction.types.Instruction  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tominstruction.types.Instruction) ) {{  tom.engine.adt.tominstruction.types.Instruction  tomMatch190NameNumberfreshSubject_1=(( tom.engine.adt.tominstruction.types.Instruction )tom__arg);if ( (tomMatch190NameNumberfreshSubject_1 instanceof tom.engine.adt.tominstruction.types.instruction.CompiledPattern) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch190NameNumber_freshVar_0= tomMatch190NameNumberfreshSubject_1.getContraint() ;{  tom.engine.adt.tominstruction.types.Instruction  tomMatch190NameNumber_freshVar_1= tomMatch190NameNumberfreshSubject_1.getAutomataInst() ;if ( true ) {




        // only variables found in LHS have to be renamed (this avoids that the JAVA ones are renamed)
        Collection newContext = new ArrayList();
        tom_make_TopDown(tom_make_CollectLHSVars(newContext)).visitLight(tomMatch190NameNumber_freshVar_0);        
        newContext.addAll(context);
        return (Instruction)tom_make_TopDown(tom_make_findRenameVariable(newContext)).visitLight(tomMatch190NameNumber_freshVar_1);
      }}}}}}}return super.visit_Instruction(tom__arg,introspector); }}private static  tom.library.sl.Strategy  tom_make_findRenameVariable( java.util.Collection  t0) { return new findRenameVariable(t0); }private static class CollectLHSVars extends  tom.engine.adt.tomsignature.TomSignatureBasicStrategy  {private  java.util.Collection  bag; public CollectLHSVars( java.util.Collection  bag) { super(( new tom.library.sl.Identity() ));this.bag=bag;}public  java.util.Collection  getbag() { return bag;}public tom.library.sl.Visitable[] getChildren() {tom.library.sl.Visitable[] stratChilds = new tom.library.sl.Visitable[getChildCount()];stratChilds[0] = super.getChildAt(0);return stratChilds;}public tom.library.sl.Visitable setChildren(tom.library.sl.Visitable[] children) {super.setChildAt(0, children[0]);return this;}public int getChildCount() { return 1; }public tom.library.sl.Visitable getChildAt(int index) {switch (index) {case 0: return super.getChildAt(0);default: throw new IndexOutOfBoundsException();}}public tom.library.sl.Visitable setChildAt(int index, tom.library.sl.Visitable child) {switch (index) {case 0: return super.setChildAt(0, child);default: throw new IndexOutOfBoundsException();}}public  tom.engine.adt.tomconstraint.types.Constraint  visit_Constraint( tom.engine.adt.tomconstraint.types.Constraint  tom__arg, tom.library.sl.Introspector introspector) throws tom.library.sl.VisitFailure {{if ( (tom__arg instanceof tom.engine.adt.tomconstraint.types.Constraint) ) {{  tom.engine.adt.tomconstraint.types.Constraint  tomMatch191NameNumberfreshSubject_1=(( tom.engine.adt.tomconstraint.types.Constraint )tom__arg);if ( (tomMatch191NameNumberfreshSubject_1 instanceof tom.engine.adt.tomconstraint.types.constraint.MatchConstraint) ) {{  tom.engine.adt.tomterm.types.TomTerm  tomMatch191NameNumber_freshVar_0= tomMatch191NameNumberfreshSubject_1.getpattern() ;{  tom.engine.adt.tomterm.types.TomTerm  tomMatch191NameNumber_freshVar_1= tomMatch191NameNumberfreshSubject_1.getsubject() ;if ( true ) {





        
        Map map = TomBase.collectMultiplicity(tomMatch191NameNumber_freshVar_0);
        Collection newContext = new HashSet(map.keySet());
        bag.addAll(newContext);
      }}}}}}}return super.visit_Constraint(tom__arg,introspector); }}private static  tom.library.sl.Strategy  tom_make_CollectLHSVars( java.util.Collection  t0) { return new CollectLHSVars(t0); }


}
