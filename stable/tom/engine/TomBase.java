/* Generated by TOM (version 2.4alpha): Do not edit this file *//*
 * 
 * TOM - To One Matching Compiler
 * 
 * Copyright (c) 2000-2006, INRIA
 * Nancy, France.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 * 
 * Pierre-Etienne Moreau  e-mail: Pierre-Etienne.Moreau@loria.fr
 *
 **/

package tom.engine;

import java.util.*;

import aterm.*;

import tom.engine.tools.*;
import tom.engine.adt.tomsignature.*;
import tom.engine.adt.tomsignature.types.*;
import tom.engine.exception.TomRuntimeException;

import tom.platform.adt.platformoption.*;

import tom.library.strategy.mutraveler.MuTraveler;
import jjtraveler.reflective.VisitableVisitor;
import jjtraveler.VisitFailure;


/**
 * Base class for most tom files in the compiler.
 * Provides access to the TomSignatureFactory and helper methods.
 */
public class TomBase {

  /* Generated by TOM (version 2.4alpha): Do not edit this file *//* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_char( char  t1,  char  t2) {  return  (t1==t2)  ;}private static boolean tom_terms_equal_Character(Object t1, Object t2) {  return  (t1.equals(t2))  ;} private static boolean tom_terms_equal_String( String  t1,  String  t2) {  return  (t1.equals(t2))  ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */ private static boolean tom_terms_equal_int( int  t1,  int  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_double( double  t1,  double  t2) {  return  (t1==t2)  ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATerm(Object t1, Object t2) {  return  t1 == t2 ;} /* Generated by TOM (version 2.4alpha): Do not edit this file *//*  *  * Copyright (c) 2004-2006, Pierre-Etienne Moreau  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:   *  - Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.    *  - Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in the  *  documentation and/or other materials provided with the distribution.  *  - Neither the name of the INRIA nor the names of its  *  contributors may be used to endorse or promote products derived from  *  this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **/  private static boolean tom_terms_equal_ATermList(Object l1, Object l2) {  return  l1==l2  ;} private static boolean tom_terms_equal_Expression(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_GetSliceArray( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSliceArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSliceArray_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_subjectListName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSubjectListName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_variableBeginAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableBeginAST() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceArray_variableEndAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableEndAST() ;}private static boolean tom_is_fun_sym_GetSliceList( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSliceList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSliceList_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableBeginAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableBeginAST() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSliceList_variableEndAST( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariableEndAST() ;}private static boolean tom_is_fun_sym_GetElement( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetElement() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetElement_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetElement_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElement_kid1( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid1() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetElement_kid2( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getKid2() ;}private static boolean tom_is_fun_sym_GetTail( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetTail() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetTail_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetTail_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetHead( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetHead() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetHead_opname( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getOpname() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetHead_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetHead_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetSlot( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSlot() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetSlot_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlot_astName( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstName() ;}private static  String  tom_get_slot_GetSlot_slotNameString( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getSlotNameString() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSlot_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static boolean tom_is_fun_sym_GetSubterm( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isGetSubterm() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_GetSubterm_codomain( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getCodomain() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSubterm_variable( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_GetSubterm_number( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_TomTermToExpression( tom.engine.adt.tomsignature.types.Expression t) {  return  (t!= null) && t.isTomTermToExpression() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_TomTermToExpression_astTerm( tom.engine.adt.tomsignature.types.Expression t) {  return  t.getAstTerm() ;}private static boolean tom_terms_equal_Instruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_InstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_KeyEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_NameList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomName( tom.engine.adt.tomsignature.types.NameList t) {  return (t!= null) && t.isSortNameList() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_empty_list_concTomName() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(); }private static  tom.engine.adt.tomsignature.types.NameList tom_cons_list_concTomName( tom.engine.adt.tomsignature.types.TomName e,  tom.engine.adt.tomsignature.types.NameList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_head_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_tail_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomName_NameList( tom.engine.adt.tomsignature.types.NameList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_append_list_concTomName( tom.engine.adt.tomsignature.types.NameList l1,  tom.engine.adt.tomsignature.types.NameList l2) {    if(tom_is_empty_concTomName_NameList(l1)) {     return l2;    } else if(tom_is_empty_concTomName_NameList(l2)) {     return l1;    } else if(tom_is_empty_concTomName_NameList(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1))) {     return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(l1),tom_append_list_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.NameList tom_get_slice_concTomName( tom.engine.adt.tomsignature.types.NameList begin,  tom.engine.adt.tomsignature.types.NameList end) {    if(tom_terms_equal_NameList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.NameList)tom_empty_list_concTomName();    } else {      return ( tom.engine.adt.tomsignature.types.NameList)tom_cons_list_concTomName(( tom.engine.adt.tomsignature.types.TomName)tom_get_head_concTomName_NameList(begin),( tom.engine.adt.tomsignature.types.NameList)tom_get_slice_concTomName(( tom.engine.adt.tomsignature.types.NameList)tom_get_tail_concTomName_NameList(begin),end));    }   }  private static boolean tom_terms_equal_SymbolList(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.SymbolList tom_make_emptySymbolList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(); }private static  tom.engine.adt.tomsignature.types.SymbolList tom_make_manySymbolList( tom.engine.adt.tomsignature.types.TomSymbol e,  tom.engine.adt.tomsignature.types.SymbolList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(e,l); }private static boolean tom_terms_equal_TomEntryList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomVisitList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRuleList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomStructureTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomEntry(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbolTable(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomSymbol(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_Symbol( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  (t!= null) && t.isSymbol() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Symbol_astName( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Symbol_typesToType( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getTypesToType() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_slot_Symbol_pairNameDeclList( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getPairNameDeclList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Symbol_option( tom.engine.adt.tomsignature.types.TomSymbol t) {  return  t.getOption() ;}private static boolean tom_terms_equal_TomVisit(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomRule(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Position(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TargetLanguage(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_ITL( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isITL() ;}private static  String  tom_get_slot_ITL_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static boolean tom_is_fun_sym_TL( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  (t!= null) && t.isTL() ;}private static  String  tom_get_slot_TL_code( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getCode() ;}private static  tom.engine.adt.tomsignature.types.Position tom_get_slot_TL_start( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getStart() ;}private static  tom.engine.adt.tomsignature.types.Position tom_get_slot_TL_end( tom.engine.adt.tomsignature.types.TargetLanguage t) {  return  t.getEnd() ;}private static boolean tom_terms_equal_TomNumberList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concTomNumber( tom.engine.adt.tomsignature.types.TomNumberList t) {  return (t!= null) && t.isSortTomNumberList() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_empty_list_concTomNumber() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(); }private static  tom.engine.adt.tomsignature.types.TomNumberList tom_cons_list_concTomNumber( tom.engine.adt.tomsignature.types.TomNumber e,  tom.engine.adt.tomsignature.types.TomNumberList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(e,l); }private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_head_concTomNumber_TomNumberList( tom.engine.adt.tomsignature.types.TomNumberList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_tail_concTomNumber_TomNumberList( tom.engine.adt.tomsignature.types.TomNumberList l) {  return l.getTail() ;}private static boolean tom_is_empty_concTomNumber_TomNumberList( tom.engine.adt.tomsignature.types.TomNumberList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomNumberList tom_append_list_concTomNumber( tom.engine.adt.tomsignature.types.TomNumberList l1,  tom.engine.adt.tomsignature.types.TomNumberList l2) {    if(tom_is_empty_concTomNumber_TomNumberList(l1)) {     return l2;    } else if(tom_is_empty_concTomNumber_TomNumberList(l2)) {     return l1;    } else if(tom_is_empty_concTomNumber_TomNumberList(( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_tail_concTomNumber_TomNumberList(l1))) {     return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumber)tom_get_head_concTomNumber_TomNumberList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumber)tom_get_head_concTomNumber_TomNumberList(l1),tom_append_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_tail_concTomNumber_TomNumberList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_slice_concTomNumber( tom.engine.adt.tomsignature.types.TomNumberList begin,  tom.engine.adt.tomsignature.types.TomNumberList end) {    if(tom_terms_equal_TomNumberList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_empty_list_concTomNumber();    } else {      return ( tom.engine.adt.tomsignature.types.TomNumberList)tom_cons_list_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumber)tom_get_head_concTomNumber_TomNumberList(begin),( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_slice_concTomNumber(( tom.engine.adt.tomsignature.types.TomNumberList)tom_get_tail_concTomNumber_TomNumberList(begin),end));    }   }  private static boolean tom_terms_equal_TomNumber(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_RuleVar( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isRuleVar() ;}private static boolean tom_is_fun_sym_NameNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isNameNumber() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_NameNumber_astName( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_RenamedVar( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isRenamedVar() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_RenamedVar_astName( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_AbsVar( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isAbsVar() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_AbsVar_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_Number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_make_Number( int  t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_Number(t0); }private static  int  tom_get_slot_Number_integer( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getInteger() ;}private static boolean tom_is_fun_sym_End( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isEnd() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_End_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_Begin( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isBegin() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_Begin_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_IndexNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isIndexNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_IndexNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_ListNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isListNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_ListNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_PatternNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isPatternNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_PatternNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_is_fun_sym_MatchNumber( tom.engine.adt.tomsignature.types.TomNumber t) {  return  (t!= null) && t.isMatchNumber() ;}private static  tom.engine.adt.tomsignature.types.TomNumber tom_get_slot_MatchNumber_number( tom.engine.adt.tomsignature.types.TomNumber t) {  return  t.getNumber() ;}private static boolean tom_terms_equal_TomName(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PositionName( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isPositionName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_make_PositionName( tom.engine.adt.tomsignature.types.TomNumberList t0) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_PositionName(t0); }private static  tom.engine.adt.tomsignature.types.TomNumberList tom_get_slot_PositionName_numberList( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getNumberList() ;}private static boolean tom_is_fun_sym_Name( tom.engine.adt.tomsignature.types.TomName t) {  return  (t!= null) && t.isName() ;}private static  String  tom_get_slot_Name_string( tom.engine.adt.tomsignature.types.TomName t) {  return  t.getString() ;}private static boolean tom_terms_equal_SlotList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_emptySlotList( tom.engine.adt.tomsignature.types.SlotList t) {  return  (t!= null) && t.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_make_emptySlotList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(); }private static boolean tom_is_fun_sym_manySlotList( tom.engine.adt.tomsignature.types.SlotList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_make_manySlotList( tom.engine.adt.tomsignature.types.Slot e,  tom.engine.adt.tomsignature.types.SlotList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l); }private static  tom.engine.adt.tomsignature.types.Slot tom_get_slot_manySlotList_head( tom.engine.adt.tomsignature.types.SlotList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_manySlotList_tail( tom.engine.adt.tomsignature.types.SlotList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_Slot(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PairSlotAppl( tom.engine.adt.tomsignature.types.Slot t) {  return  (t!= null) && t.isPairSlotAppl() ;}private static  tom.engine.adt.tomsignature.types.Slot tom_make_PairSlotAppl( tom.engine.adt.tomsignature.types.TomName t0,  tom.engine.adt.tomsignature.types.TomTerm t1) { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_PairSlotAppl(t0, t1); }private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_PairSlotAppl_slotName( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_PairSlotAppl_appl( tom.engine.adt.tomsignature.types.Slot t) {  return  t.getAppl() ;}private static boolean tom_terms_equal_PairNameDeclList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList t) {  return (t!= null) && t.isSortPairNameDeclList() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_empty_list_concPairNameDecl() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(); }private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_cons_list_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDecl e,  tom.engine.adt.tomsignature.types.PairNameDeclList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(e,l); }private static  tom.engine.adt.tomsignature.types.PairNameDecl tom_get_head_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_tail_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.getTail() ;}private static boolean tom_is_empty_concPairNameDecl_PairNameDeclList( tom.engine.adt.tomsignature.types.PairNameDeclList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_append_list_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList l1,  tom.engine.adt.tomsignature.types.PairNameDeclList l2) {    if(tom_is_empty_concPairNameDecl_PairNameDeclList(l1)) {     return l2;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(l2)) {     return l1;    } else if(tom_is_empty_concPairNameDecl_PairNameDeclList(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(l1))) {     return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(l1),tom_append_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.PairNameDeclList tom_get_slice_concPairNameDecl( tom.engine.adt.tomsignature.types.PairNameDeclList begin,  tom.engine.adt.tomsignature.types.PairNameDeclList end) {    if(tom_terms_equal_PairNameDeclList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_empty_list_concPairNameDecl();    } else {      return ( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_cons_list_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDecl)tom_get_head_concPairNameDecl_PairNameDeclList(begin),( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_slice_concPairNameDecl(( tom.engine.adt.tomsignature.types.PairNameDeclList)tom_get_tail_concPairNameDecl_PairNameDeclList(begin),end));    }   }  private static boolean tom_terms_equal_PairNameDecl(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_PairNameDecl( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  (t!= null) && t.isPairNameDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_PairNameDecl_slotName( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_PairNameDecl_slotDecl( tom.engine.adt.tomsignature.types.PairNameDecl t) {  return  t.getSlotDecl() ;}private static boolean tom_terms_equal_ConstraintList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList t) {  return (t!= null) && t.isSortConstraintList() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_empty_list_concConstraint() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(); }private static  tom.engine.adt.tomsignature.types.ConstraintList tom_cons_list_concConstraint( tom.engine.adt.tomsignature.types.Constraint e,  tom.engine.adt.tomsignature.types.ConstraintList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(e,l); }private static  tom.engine.adt.tomsignature.types.Constraint tom_get_head_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_tail_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.getTail() ;}private static boolean tom_is_empty_concConstraint_ConstraintList( tom.engine.adt.tomsignature.types.ConstraintList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_append_list_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList l1,  tom.engine.adt.tomsignature.types.ConstraintList l2) {    if(tom_is_empty_concConstraint_ConstraintList(l1)) {     return l2;    } else if(tom_is_empty_concConstraint_ConstraintList(l2)) {     return l1;    } else if(tom_is_empty_concConstraint_ConstraintList(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1))) {     return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(l1),tom_append_list_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slice_concConstraint( tom.engine.adt.tomsignature.types.ConstraintList begin,  tom.engine.adt.tomsignature.types.ConstraintList end) {    if(tom_terms_equal_ConstraintList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_empty_list_concConstraint();    } else {      return ( tom.engine.adt.tomsignature.types.ConstraintList)tom_cons_list_concConstraint(( tom.engine.adt.tomsignature.types.Constraint)tom_get_head_concConstraint_ConstraintList(begin),( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_slice_concConstraint(( tom.engine.adt.tomsignature.types.ConstraintList)tom_get_tail_concConstraint_ConstraintList(begin),end));    }   }  private static boolean tom_terms_equal_Constraint(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_AssignTo( tom.engine.adt.tomsignature.types.Constraint t) {  return  (t!= null) && t.isAssignTo() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_AssignTo_variable( tom.engine.adt.tomsignature.types.Constraint t) {  return  t.getVariable() ;}private static boolean tom_terms_equal_OptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_concOption( tom.engine.adt.tomsignature.types.OptionList t) {  return (t!= null) && t.isSortOptionList() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_empty_list_concOption() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(); }private static  tom.engine.adt.tomsignature.types.OptionList tom_cons_list_concOption( tom.engine.adt.tomsignature.types.Option e,  tom.engine.adt.tomsignature.types.OptionList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l); }private static  tom.engine.adt.tomsignature.types.Option tom_get_head_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getHead() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_tail_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.getTail() ;}private static boolean tom_is_empty_concOption_OptionList( tom.engine.adt.tomsignature.types.OptionList l) {  return l.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_append_list_concOption( tom.engine.adt.tomsignature.types.OptionList l1,  tom.engine.adt.tomsignature.types.OptionList l2) {    if(tom_is_empty_concOption_OptionList(l1)) {     return l2;    } else if(tom_is_empty_concOption_OptionList(l2)) {     return l1;    } else if(tom_is_empty_concOption_OptionList(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1))) {     return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),l2);    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(l1),tom_append_list_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(l1),l2));    }   }  private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slice_concOption( tom.engine.adt.tomsignature.types.OptionList begin,  tom.engine.adt.tomsignature.types.OptionList end) {    if(tom_terms_equal_OptionList(begin,end)) {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_empty_list_concOption();    } else {      return ( tom.engine.adt.tomsignature.types.OptionList)tom_cons_list_concOption(( tom.engine.adt.tomsignature.types.Option)tom_get_head_concOption_OptionList(begin),( tom.engine.adt.tomsignature.types.OptionList)tom_get_slice_concOption(( tom.engine.adt.tomsignature.types.OptionList)tom_get_tail_concOption_OptionList(begin),end));    }   }  private static boolean tom_terms_equal_Option(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Option tom_make_noOption() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_NoOption(); }private static boolean tom_is_fun_sym_ImplicitXMLChild( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isImplicitXMLChild() ;}private static boolean tom_is_fun_sym_ImplicitXMLAttribut( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isImplicitXMLAttribut() ;}private static boolean tom_is_fun_sym_ModuleName( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isModuleName() ;}private static  String  tom_get_slot_ModuleName_string( tom.engine.adt.tomsignature.types.Option t) {  return  t.getString() ;}private static boolean tom_is_fun_sym_Debug( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isDebug() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Debug_astName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstName() ;}private static boolean tom_is_fun_sym_Constant( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isConstant() ;}private static boolean tom_is_fun_sym_OriginTracking( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isOriginTracking() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_OriginTracking_astName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstName() ;}private static  int  tom_get_slot_OriginTracking_line( tom.engine.adt.tomsignature.types.Option t) {  return  t.getLine() ;}private static  String  tom_get_slot_OriginTracking_fileName( tom.engine.adt.tomsignature.types.Option t) {  return  t.getFileName() ;}private static boolean tom_is_fun_sym_GeneratedMatch( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isGeneratedMatch() ;}private static boolean tom_is_fun_sym_DefinedSymbol( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isDefinedSymbol() ;}private static boolean tom_is_fun_sym_DeclarationToOption( tom.engine.adt.tomsignature.types.Option t) {  return  (t!= null) && t.isDeclarationToOption() ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_get_slot_DeclarationToOption_astDeclaration( tom.engine.adt.tomsignature.types.Option t) {  return  t.getAstDeclaration() ;}private static boolean tom_terms_equal_TomTypeList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTypeDefinition(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomForwardType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomType(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_EmptyType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isEmptyType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_make_EmptyType() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_EmptyType(); }private static boolean tom_is_fun_sym_TLType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTLType() ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage tom_get_slot_TLType_tl( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTl() ;}private static boolean tom_is_fun_sym_TypesToType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTypesToType() ;}private static  tom.engine.adt.tomsignature.types.TomTypeList tom_get_slot_TypesToType_domain( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getDomain() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_TypesToType_codomain( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getCodomain() ;}private static boolean tom_is_fun_sym_ASTTomType( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isASTTomType() ;}private static  String  tom_get_slot_ASTTomType_string( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getString() ;}private static boolean tom_is_fun_sym_TomTypeAlone( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isTomTypeAlone() ;}private static  String  tom_get_slot_TomTypeAlone_string( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getString() ;}private static boolean tom_is_fun_sym_Type( tom.engine.adt.tomsignature.types.TomType t) {  return  (t!= null) && t.isType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tomType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTomType() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Type_tlType( tom.engine.adt.tomsignature.types.TomType t) {  return  t.getTlType() ;}private static boolean tom_terms_equal_TomList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_emptyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isEmpty() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_make_emptyTomList() { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(); }private static boolean tom_is_fun_sym_manyTomList( tom.engine.adt.tomsignature.types.TomList t) {  return  (t!= null) && t.isMany() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_make_manyTomList( tom.engine.adt.tomsignature.types.TomTerm e,  tom.engine.adt.tomsignature.types.TomList l) { return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l); }private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_manyTomList_head( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getHead() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_manyTomList_tail( tom.engine.adt.tomsignature.types.TomList t) {  return  t.getTail() ;}private static boolean tom_terms_equal_PatternList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstructionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Pattern(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PatternInstruction(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_TomTerm(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_is_fun_sym_FunctionCall( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isFunctionCall() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_FunctionCall_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomList tom_get_slot_FunctionCall_args( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getArgs() ;}private static boolean tom_is_fun_sym_Ref( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRef() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_Ref_tomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTomTerm() ;}private static boolean tom_is_fun_sym_TargetLanguageToTomTerm( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isTargetLanguageToTomTerm() ;}private static  tom.engine.adt.tomsignature.types.TargetLanguage tom_get_slot_TargetLanguageToTomTerm_tl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getTl() ;}private static boolean tom_is_fun_sym_UnamedVariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_UnamedVariable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isUnamedVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_UnamedVariable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_UnamedVariable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_UnamedVariable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_VariableStar( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariableStar() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_VariableStar_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_VariableStar_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_VariableStar_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_VariableStar_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_Variable( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isVariable() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_Variable_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_Variable_astName( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomType tom_get_slot_Variable_astType( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getAstType() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_Variable_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_is_fun_sym_RecordAppl( tom.engine.adt.tomsignature.types.TomTerm t) {  return  (t!= null) && t.isRecordAppl() ;}private static  tom.engine.adt.tomsignature.types.OptionList tom_get_slot_RecordAppl_option( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getOption() ;}private static  tom.engine.adt.tomsignature.types.NameList tom_get_slot_RecordAppl_nameList( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getNameList() ;}private static  tom.engine.adt.tomsignature.types.SlotList tom_get_slot_RecordAppl_slots( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getSlots() ;}private static  tom.engine.adt.tomsignature.types.ConstraintList tom_get_slot_RecordAppl_constraints( tom.engine.adt.tomsignature.types.TomTerm t) {  return  t.getConstraints() ;}private static boolean tom_terms_equal_DeclarationList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_Declaration(Object t1, Object t2) {  return t1.equals(t2) ;}private static  tom.engine.adt.tomsignature.types.Declaration tom_make_EmptyDeclaration() { return  tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_EmptyDeclaration(); }private static boolean tom_is_fun_sym_MakeAddArray( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeAddArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeAddArray_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varElt( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarElt() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddArray_varList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeAddArray_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeAddArray_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeEmptyArray( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeEmptyArray() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyArray_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeEmptyArray_varSize( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarSize() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeEmptyArray_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeEmptyArray_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeAddList( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeAddList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeAddList_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varElt( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarElt() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_MakeAddList_varList( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVarList() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeAddList_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeAddList_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_MakeEmptyList( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isMakeEmptyList() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_MakeEmptyList_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_MakeEmptyList_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_MakeEmptyList_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_GetSlotDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isGetSlotDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_GetSlotDecl_slotName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getSlotName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_GetSlotDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_GetSlotDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_GetSlotDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}private static boolean tom_is_fun_sym_IsFsymDecl( tom.engine.adt.tomsignature.types.Declaration t) {  return  (t!= null) && t.isIsFsymDecl() ;}private static  tom.engine.adt.tomsignature.types.TomName tom_get_slot_IsFsymDecl_astName( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getAstName() ;}private static  tom.engine.adt.tomsignature.types.TomTerm tom_get_slot_IsFsymDecl_variable( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getVariable() ;}private static  tom.engine.adt.tomsignature.types.Instruction tom_get_slot_IsFsymDecl_instr( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getInstr() ;}private static  tom.engine.adt.tomsignature.types.Option tom_get_slot_IsFsymDecl_orgTrack( tom.engine.adt.tomsignature.types.Declaration t) {  return  t.getOrgTrack() ;}  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_Strategy(Object t1, Object t2) {  return t1.equals(t2) ;}private static  jjtraveler.reflective.VisitableVisitor  tom_make_mu( jjtraveler.reflective.VisitableVisitor  var,  jjtraveler.reflective.VisitableVisitor  v) { return  tom.library.strategy.mutraveler.MuTraveler.mu(var,v) ; }/* Generated by TOM (version 2.4alpha): Do not edit this file *//*  * basic operators  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Identity() { return  new tom.library.strategy.mutraveler.Identity() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Fail() { return  new tom.library.strategy.mutraveler.Fail() ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Sequence( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Sequence(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_Choice( jjtraveler.reflective.VisitableVisitor  first,  jjtraveler.reflective.VisitableVisitor  then) { return  new tom.library.strategy.mutraveler.Choice(first,then) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_All( jjtraveler.reflective.VisitableVisitor  v) { return  new tom.library.strategy.mutraveler.All(v) ; }private static  jjtraveler.reflective.VisitableVisitor  tom_make_MuVar( String  name) { return  new tom.library.strategy.mutraveler.MuVar(name) ; } /*  * basic operators with Id considered as a failure  */      /*  * basic probabilistic operators  */      /*  * strategies  */    private static  jjtraveler.reflective.VisitableVisitor  tom_make_Try( jjtraveler.reflective.VisitableVisitor  v) { return tom_make_Choice(v,tom_make_Identity()) ; }  /*  * strategies with Id considered as failure  */       





 public final static String DEFAULT_MODULE_NAME = "default"; 
  
  /** shortcut */
  protected static TomSignatureFactory tsf() {
		return tom.engine.adt.tomsignature.TomSignatureFactory.getInstance(aterm.pure.SingletonFactory.getInstance());
  }
  
  /* Generated by TOM (version 2.4alpha): Do not edit this file */private static boolean tom_terms_equal_PlatformOptionList(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformBoolean(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformValue(Object t1, Object t2) {  return t1.equals(t2) ;}private static boolean tom_terms_equal_PlatformOption(Object t1, Object t2) {  return t1.equals(t2) ;}  
  
  private static TomList empty;
  
  public TomBase() {
    empty = tsf().makeTomList();
  }

  
  protected static TomNumber makeNumber(int n) {
    return tsf().makeTomNumber_Number(n);
  }
  
  protected static OptionList emptyOption() {
    return ASTFactory.makeOption();
  }

  protected static TomList empty() {
    return empty;
  }

  protected static TomList cons(TomTerm t, TomList l) {
    if(t!=null) {
      return tsf().makeTomList(t,l);
    } else {
      System.out.println("cons: Warning t == null");
      return l;
    }
  }

  protected static TomNumberList appendNumber(int n, TomNumberList path) {
    return (TomNumberList) path.append(makeNumber(n));
  }
    
  protected static TomList append(TomTerm t, TomList l) {
    if(l.isEmpty()) {
      return cons(t,l);
    } else {
      return cons(l.getHead(), append(t,l.getTail()));
    }
  }

  protected static TomList concat(TomList l1, TomList l2) {
    if(l1.isEmpty()) {
      return l2;
    } else {
      return cons(l1.getHead(), concat(l1.getTail(),l2));
    }
  }

  protected static TomList reverse(TomList l) {
    TomList reverse = empty();
    while(!l.isEmpty()){
      reverse = cons(l.getHead(),reverse);
      l = l.getTail();
    }
    return reverse;
  }

  protected static int length(TomList l) {
    if(l.isEmpty()) {
      return 0;
    } else {
      return 1 + length(l.getTail());
    }
  }

  public static String getTomType(TomType type) {
     if(type instanceof  tom.engine.adt.tomsignature.types.TomType) { { tom.engine.adt.tomsignature.types.TomType tom_match1_1=(( tom.engine.adt.tomsignature.types.TomType)type); if (tom_is_fun_sym_ASTTomType(tom_match1_1) ||  false ) { { String  tom_match1_1_string=tom_get_slot_ASTTomType_string(tom_match1_1); { String  tom_s=tom_match1_1_string; if ( true ) {
return tom_s; } } } } if (tom_is_fun_sym_TomTypeAlone(tom_match1_1) ||  false ) { { String  tom_match1_1_string=tom_get_slot_TomTypeAlone_string(tom_match1_1); { String  tom_s=tom_match1_1_string; if ( true ) {
return tom_s; } } } } if (tom_is_fun_sym_Type(tom_match1_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match1_1_tomType=tom_get_slot_Type_tomType(tom_match1_1); { tom.engine.adt.tomsignature.types.TomType tom_match1_1_tlType=tom_get_slot_Type_tlType(tom_match1_1); if (tom_is_fun_sym_ASTTomType(tom_match1_1_tomType) ||  false ) { { String  tom_match1_1_tomType_string=tom_get_slot_ASTTomType_string(tom_match1_1_tomType); { String  tom_s=tom_match1_1_tomType_string; if ( true ) {
return tom_s; } } } } } } } if (tom_is_fun_sym_EmptyType(tom_match1_1) ||  false ) { if ( true ) {
return null; } } } }

		System.out.println("getTomType error on term: " + type);
		throw new TomRuntimeException("getTomType error on term: " + type);
  }

  protected static String getTLType(TomType type) {
     if(type instanceof  tom.engine.adt.tomsignature.types.TomType) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1=(( tom.engine.adt.tomsignature.types.TomType)type); if (tom_is_fun_sym_TLType(tom_match2_1) ||  false ) { if ( true ) {
 return getTLCode(type);  } } if (tom_is_fun_sym_Type(tom_match2_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomType tom_match2_1_tlType=tom_get_slot_Type_tlType(tom_match2_1); { tom.engine.adt.tomsignature.types.TomType tom_tlType=tom_match2_1_tlType; if ( true ) {
 return getTLCode(tom_tlType);  } } } } } }

		throw new TomRuntimeException("getTLType error on term: " + type);
  }

  protected static String getTLCode(TomType type) {
     if(type instanceof  tom.engine.adt.tomsignature.types.TomType) { { tom.engine.adt.tomsignature.types.TomType tom_match3_1=(( tom.engine.adt.tomsignature.types.TomType)type); if (tom_is_fun_sym_TLType(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match3_1_tl=tom_get_slot_TLType_tl(tom_match3_1); if (tom_is_fun_sym_TL(tom_match3_1_tl) ||  false ) { { String  tom_match3_1_tl_code=tom_get_slot_TL_code(tom_match3_1_tl); { String  tom_tlType=tom_match3_1_tl_code; if ( true ) {
 return tom_tlType;  } } } } } } if (tom_is_fun_sym_TLType(tom_match3_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match3_1_tl=tom_get_slot_TLType_tl(tom_match3_1); if (tom_is_fun_sym_ITL(tom_match3_1_tl) ||  false ) { { String  tom_match3_1_tl_code=tom_get_slot_ITL_code(tom_match3_1_tl); { String  tom_tlType=tom_match3_1_tl_code; if ( true ) {
 return tom_tlType;  } } } } } } } }

		System.out.println("getTLCode error on term: " + type);
		throw new TomRuntimeException("getTLCode error on term: " + type);
  }

  public static TomType getSymbolCodomain(TomSymbol symbol) {
    if(symbol!=null) {
      return symbol.getTypesToType().getCodomain();
    } else {
      //System.out.println("getSymbolCodomain: symbol = " + symbol);
      return tom_make_EmptyType();
    }
  }   

  protected static TomTypeList getSymbolDomain(TomSymbol symbol) {
    if(symbol!=null) {
      return symbol.getTypesToType().getDomain();
    } else {
      //System.out.println("getSymbolDomain: symbol = " + symbol);
      return tsf().makeTomTypeList();
    }
  }

  private static HashMap numberListToIdentifierMap = new HashMap();

  private static String elementToIdentifier(TomNumber subject) {
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomNumber) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1=(( tom.engine.adt.tomsignature.types.TomNumber)subject); if (tom_is_fun_sym_Begin(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1_number=tom_get_slot_Begin_number(tom_match4_1); if (tom_is_fun_sym_Number(tom_match4_1_number) ||  false ) { { int  tom_match4_1_number_integer=tom_get_slot_Number_integer(tom_match4_1_number); { int  tom_i=tom_match4_1_number_integer; if ( true ) {
 return "_begin" + tom_i;  } } } } } } if (tom_is_fun_sym_End(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1_number=tom_get_slot_End_number(tom_match4_1); if (tom_is_fun_sym_Number(tom_match4_1_number) ||  false ) { { int  tom_match4_1_number_integer=tom_get_slot_Number_integer(tom_match4_1_number); { int  tom_i=tom_match4_1_number_integer; if ( true ) {
 return "_end" + tom_i;  } } } } } } if (tom_is_fun_sym_MatchNumber(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1_number=tom_get_slot_MatchNumber_number(tom_match4_1); if (tom_is_fun_sym_Number(tom_match4_1_number) ||  false ) { { int  tom_match4_1_number_integer=tom_get_slot_Number_integer(tom_match4_1_number); { int  tom_i=tom_match4_1_number_integer; if ( true ) {
 return "_match" + tom_i;  } } } } } } if (tom_is_fun_sym_PatternNumber(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1_number=tom_get_slot_PatternNumber_number(tom_match4_1); if (tom_is_fun_sym_Number(tom_match4_1_number) ||  false ) { { int  tom_match4_1_number_integer=tom_get_slot_Number_integer(tom_match4_1_number); { int  tom_i=tom_match4_1_number_integer; if ( true ) {
 return "_pattern" + tom_i;  } } } } } } if (tom_is_fun_sym_ListNumber(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1_number=tom_get_slot_ListNumber_number(tom_match4_1); if (tom_is_fun_sym_Number(tom_match4_1_number) ||  false ) { { int  tom_match4_1_number_integer=tom_get_slot_Number_integer(tom_match4_1_number); { int  tom_i=tom_match4_1_number_integer; if ( true ) {
 return "_list" + tom_i;  } } } } } } if (tom_is_fun_sym_IndexNumber(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1_number=tom_get_slot_IndexNumber_number(tom_match4_1); if (tom_is_fun_sym_Number(tom_match4_1_number) ||  false ) { { int  tom_match4_1_number_integer=tom_get_slot_Number_integer(tom_match4_1_number); { int  tom_i=tom_match4_1_number_integer; if ( true ) {
 return "_index" + tom_i;  } } } } } } if (tom_is_fun_sym_AbsVar(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumber tom_match4_1_number=tom_get_slot_AbsVar_number(tom_match4_1); if (tom_is_fun_sym_Number(tom_match4_1_number) ||  false ) { { int  tom_match4_1_number_integer=tom_get_slot_Number_integer(tom_match4_1_number); { int  tom_i=tom_match4_1_number_integer; if ( true ) {
 return "_absvar" + tom_i;  } } } } } } if (tom_is_fun_sym_RenamedVar(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_astName=tom_get_slot_RenamedVar_astName(tom_match4_1); if (tom_is_fun_sym_Name(tom_match4_1_astName) ||  false ) { { String  tom_match4_1_astName_string=tom_get_slot_Name_string(tom_match4_1_astName); { String  tom_name=tom_match4_1_astName_string; if ( true ) {
 return "_renamedvar_" + tom_name;  } } } } } } if (tom_is_fun_sym_NameNumber(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_astName=tom_get_slot_NameNumber_astName(tom_match4_1); if (tom_is_fun_sym_Name(tom_match4_1_astName) ||  false ) { { String  tom_match4_1_astName_string=tom_get_slot_Name_string(tom_match4_1_astName); { String  tom_name=tom_match4_1_astName_string; if ( true ) {
 return "_" + tom_name;  } } } } } } if (tom_is_fun_sym_NameNumber(tom_match4_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match4_1_astName=tom_get_slot_NameNumber_astName(tom_match4_1); if (tom_is_fun_sym_PositionName(tom_match4_1_astName) ||  false ) { { tom.engine.adt.tomsignature.types.TomNumberList tom_match4_1_astName_numberList=tom_get_slot_PositionName_numberList(tom_match4_1_astName); { tom.engine.adt.tomsignature.types.TomNumberList tom_numberList=tom_match4_1_astName_numberList; if ( true ) {
 return numberListToIdentifier(tom_numberList);  } } } } } } if (tom_is_fun_sym_RuleVar(tom_match4_1) ||  false ) { if ( true ) {
 return "_rulevar";  } } if (tom_is_fun_sym_Number(tom_match4_1) ||  false ) { { int  tom_match4_1_integer=tom_get_slot_Number_integer(tom_match4_1); { int  tom_i=tom_match4_1_integer; if ( true ) {
 return "_" + tom_i;  } } } } } }

		return subject.toString(); 
  }

  protected static String numberListToIdentifier(TomNumberList l) {
    String res = (String)numberListToIdentifierMap.get(l);
    if(res == null) {
      TomNumberList key = l;
      StringBuffer buf = new StringBuffer(30);
      while(!l.isEmpty()) {
        TomNumber elt = l.getHead();
        //buf.append("_");
        buf.append(elementToIdentifier(elt));
        l = l.getTail();
      }
      res = buf.toString();
      numberListToIdentifierMap.put(key,res);
    }
    return res;
  }

  protected static boolean isListOperator(TomSymbol subject) {
    if(subject==null) {
      return false;
    }
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match5_1=(( tom.engine.adt.tomsignature.types.TomSymbol)subject); if (tom_is_fun_sym_Symbol(tom_match5_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match5_1_option=tom_get_slot_Symbol_option(tom_match5_1); { tom.engine.adt.tomsignature.types.OptionList tom_l=tom_match5_1_option; if ( true ) {

        OptionList optionList = tom_l;
        while(!optionList.isEmpty()) {
          Option opt = optionList.getHead();
           if(opt instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match6_1=(( tom.engine.adt.tomsignature.types.Option)opt); if (tom_is_fun_sym_DeclarationToOption(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match6_1_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match6_1); if (tom_is_fun_sym_MakeEmptyList(tom_match6_1_astDeclaration) ||  false ) { if ( true ) {
 return true;  } } } } if (tom_is_fun_sym_DeclarationToOption(tom_match6_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match6_1_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match6_1); if (tom_is_fun_sym_MakeAddList(tom_match6_1_astDeclaration) ||  false ) { if ( true ) {
 return true;  } } } } } }

          optionList = optionList.getTail();
        }
        return false;
       } } } } } }

		System.out.println("isListOperator: strange case: '" + subject + "'");
		throw new TomRuntimeException("isListOperator: strange case: '" + subject + "'");
  }

  protected static boolean isArrayOperator(TomSymbol subject) {
    //%variable
    if(subject==null) {
      return false;
    }
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match7_1=(( tom.engine.adt.tomsignature.types.TomSymbol)subject); if (tom_is_fun_sym_Symbol(tom_match7_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match7_1_option=tom_get_slot_Symbol_option(tom_match7_1); { tom.engine.adt.tomsignature.types.OptionList tom_l=tom_match7_1_option; if ( true ) {

        OptionList optionList = tom_l;
        while(!optionList.isEmpty()) {
          Option opt = optionList.getHead();
           if(opt instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match8_1=(( tom.engine.adt.tomsignature.types.Option)opt); if (tom_is_fun_sym_DeclarationToOption(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match8_1_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match8_1); if (tom_is_fun_sym_MakeEmptyArray(tom_match8_1_astDeclaration) ||  false ) { if ( true ) {
 return true;  } } } } if (tom_is_fun_sym_DeclarationToOption(tom_match8_1) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match8_1_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match8_1); if (tom_is_fun_sym_MakeAddArray(tom_match8_1_astDeclaration) ||  false ) { if ( true ) {
 return true;  } } } } } }

          optionList = optionList.getTail();
        }
        return false;
       } } } } } }

		System.out.println("isArrayOperator: strange case: '" + subject + "'");
		throw new TomRuntimeException("isArrayOperator: strange case: '" + subject + "'");
  }

  // ------------------------------------------------------------
	 private static class collectVariable  extends  tom.engine.adt.tomsignature.TomSignatureVisitableFwd  {  java.util.Collection  collection;  public collectVariable(  java.util.Collection  collection ) { super(tom_make_Identity() ); this.collection=collection; } public  tom.engine.adt.tomsignature.types.TomTerm visit_TomTerm(  tom.engine.adt.tomsignature.types.TomTerm tom__arg )  throws jjtraveler.VisitFailure { if(tom__arg instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match9_1=(( tom.engine.adt.tomsignature.types.TomTerm)tom__arg); { tom.engine.adt.tomsignature.types.TomTerm tom_v=tom_match9_1; {boolean tom_bool_match9_1= false ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints= null ; if (tom_is_fun_sym_Variable(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_constraints=tom_get_slot_Variable_constraints(tom_match9_1); } else { if (tom_is_fun_sym_VariableStar(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_constraints=tom_get_slot_VariableStar_constraints(tom_match9_1); } } if (tom_bool_match9_1) { { tom.engine.adt.tomsignature.types.ConstraintList tom_constraintList=tom_match9_1_constraints; if ( true ) {


				collection.add(tom_v);
				TomTerm annotedVariable = getAssignToVariable(tom_constraintList);
				if(annotedVariable!=null) {
					collection.add(annotedVariable);
				}
				tom_make_Fail().visit(tom_v);
			 } } } } } } { tom.engine.adt.tomsignature.types.TomTerm tom_v=tom_match9_1; {boolean tom_bool_match9_1= false ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints= null ; if (tom_is_fun_sym_UnamedVariable(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_constraints=tom_get_slot_UnamedVariable_constraints(tom_match9_1); } else { if (tom_is_fun_sym_UnamedVariableStar(tom_match9_1)) {tom_bool_match9_1= true ;tom_match9_1_constraints=tom_get_slot_UnamedVariableStar_constraints(tom_match9_1); } } if (tom_bool_match9_1) { { tom.engine.adt.tomsignature.types.ConstraintList tom_constraintList=tom_match9_1_constraints; if ( true ) {


				TomTerm annotedVariable = getAssignToVariable(tom_constraintList);
				if(annotedVariable!=null) {
					collection.add(annotedVariable);
				}
				tom_make_Fail().visit(tom_v);
			 } } } } } } if (tom_is_fun_sym_RecordAppl(tom_match9_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_t=tom_match9_1; { tom.engine.adt.tomsignature.types.SlotList tom_match9_1_slots=tom_get_slot_RecordAppl_slots(tom_match9_1); { tom.engine.adt.tomsignature.types.ConstraintList tom_match9_1_constraints=tom_get_slot_RecordAppl_constraints(tom_match9_1); { tom.engine.adt.tomsignature.types.SlotList tom_subterms=tom_match9_1_slots; { tom.engine.adt.tomsignature.types.ConstraintList tom_constraintList=tom_match9_1_constraints; if ( true ) {



				collectVariable(collection,tom_subterms);
				TomTerm annotedVariable = getAssignToVariable(tom_constraintList);
				if(annotedVariable!=null) {
					collection.add(annotedVariable);
				}
				tom_make_Fail().visit(tom_t);
			 } } } } } } } } } return super.visit_TomTerm(tom__arg) ;  } }private static  jjtraveler.reflective.VisitableVisitor  tom_make_collectVariable( java.util.Collection  t0) { return new collectVariable(t0); }




  protected static void collectVariable(final Collection collection, ATerm subject) {
		try {
			MuTraveler.init(tom_make_mu(tom_make_MuVar("x"),tom_make_Try(tom_make_Sequence(tom_make_collectVariable(collection),tom_make_All(tom_make_MuVar("x")))))).visit(subject);
		} catch(jjtraveler.VisitFailure e) {
			System.out.println("strategy failed");
		}
  }

  public static Map collectMultiplicity(ATerm subject) {
    // collect variables
    ArrayList variableList = new ArrayList();
    collectVariable(variableList,subject);
    // compute multiplicities
    HashMap multiplicityMap = new HashMap();
    Iterator it = variableList.iterator();
    while(it.hasNext()) {
      TomTerm variable = (TomTerm)it.next();
      TomName name = variable.getAstName();
      if(multiplicityMap.containsKey(name)) {
        Integer value = (Integer)multiplicityMap.get(name);
        multiplicityMap.put(name, new Integer(1+value.intValue()));
      } else {
        multiplicityMap.put(name, new Integer(1));
      }
    }
    return multiplicityMap;
  }

  protected boolean isAnnotedVariable(TomTerm t) {
     if(t instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match10_1=(( tom.engine.adt.tomsignature.types.TomTerm)t); {boolean tom_bool_match10_1= false ; { tom.engine.adt.tomsignature.types.ConstraintList tom_match10_1_constraints= null ; if (tom_is_fun_sym_RecordAppl(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_constraints=tom_get_slot_RecordAppl_constraints(tom_match10_1); } else { if (tom_is_fun_sym_Variable(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_constraints=tom_get_slot_Variable_constraints(tom_match10_1); } else { if (tom_is_fun_sym_VariableStar(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_constraints=tom_get_slot_VariableStar_constraints(tom_match10_1); } else { if (tom_is_fun_sym_UnamedVariable(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_constraints=tom_get_slot_UnamedVariable_constraints(tom_match10_1); } else { if (tom_is_fun_sym_UnamedVariableStar(tom_match10_1)) {tom_bool_match10_1= true ;tom_match10_1_constraints=tom_get_slot_UnamedVariableStar_constraints(tom_match10_1); } } } } } if (tom_bool_match10_1) { { tom.engine.adt.tomsignature.types.ConstraintList tom_constraintList=tom_match10_1_constraints; if ( true ) {

        return getAssignToVariable(tom_constraintList)!=null;
       } } } } } } }

    return false;
  }

  public static TomTerm getAssignToVariable(ConstraintList constraintList) {
     if(constraintList instanceof  tom.engine.adt.tomsignature.types.ConstraintList) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match11_1=(( tom.engine.adt.tomsignature.types.ConstraintList)constraintList); if (tom_is_fun_sym_concConstraint(tom_match11_1) ||  false ) { { tom.engine.adt.tomsignature.types.ConstraintList tom_match11_1_list1=tom_match11_1; { tom.engine.adt.tomsignature.types.ConstraintList tom_match11_1_begin1=tom_match11_1_list1; { tom.engine.adt.tomsignature.types.ConstraintList tom_match11_1_end1=tom_match11_1_list1; { while (!(tom_is_empty_concConstraint_ConstraintList(tom_match11_1_end1))) {tom_match11_1_list1=tom_match11_1_end1; { { tom.engine.adt.tomsignature.types.Constraint tom_match11_1_2=tom_get_head_concConstraint_ConstraintList(tom_match11_1_list1);tom_match11_1_list1=tom_get_tail_concConstraint_ConstraintList(tom_match11_1_list1); if (tom_is_fun_sym_AssignTo(tom_match11_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match11_1_2_variable=tom_get_slot_AssignTo_variable(tom_match11_1_2); if (tom_is_fun_sym_Variable(tom_match11_1_2_variable) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_var=tom_match11_1_2_variable; if ( true ) {
 return tom_var;  } } } } } }tom_match11_1_end1=tom_get_tail_concConstraint_ConstraintList(tom_match11_1_end1); } }tom_match11_1_list1=tom_match11_1_begin1; } } } } } } }

    return null;
  }

  protected static Declaration getIsFsymDecl(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match12_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match12_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match12_1_list1=tom_match12_1; { tom.engine.adt.tomsignature.types.OptionList tom_match12_1_begin1=tom_match12_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match12_1_end1=tom_match12_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match12_1_end1))) {tom_match12_1_list1=tom_match12_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match12_1_2=tom_get_head_concOption_OptionList(tom_match12_1_list1);tom_match12_1_list1=tom_get_tail_concOption_OptionList(tom_match12_1_list1); if (tom_is_fun_sym_DeclarationToOption(tom_match12_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_match12_1_2_astDeclaration=tom_get_slot_DeclarationToOption_astDeclaration(tom_match12_1_2); if (tom_is_fun_sym_IsFsymDecl(tom_match12_1_2_astDeclaration) ||  false ) { { tom.engine.adt.tomsignature.types.Declaration tom_decl=tom_match12_1_2_astDeclaration; if ( true ) {
 return tom_decl;  } } } } } }tom_match12_1_end1=tom_get_tail_concOption_OptionList(tom_match12_1_end1); } }tom_match12_1_list1=tom_match12_1_begin1; } } } } } } }

    return null;
  }
  
	protected static String getModuleName(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match13_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match13_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match13_1_list1=tom_match13_1; { tom.engine.adt.tomsignature.types.OptionList tom_match13_1_begin1=tom_match13_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match13_1_end1=tom_match13_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match13_1_end1))) {tom_match13_1_list1=tom_match13_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match13_1_2=tom_get_head_concOption_OptionList(tom_match13_1_list1);tom_match13_1_list1=tom_get_tail_concOption_OptionList(tom_match13_1_list1); if (tom_is_fun_sym_ModuleName(tom_match13_1_2) ||  false ) { { String  tom_match13_1_2_string=tom_get_slot_ModuleName_string(tom_match13_1_2); { String  tom_moduleName=tom_match13_1_2_string; if ( true ) {
 return tom_moduleName;  } } } } }tom_match13_1_end1=tom_get_tail_concOption_OptionList(tom_match13_1_end1); } }tom_match13_1_list1=tom_match13_1_begin1; } } } } } } }

    return null;
  }

  protected static String getDebug(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match14_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match14_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match14_1_list1=tom_match14_1; { tom.engine.adt.tomsignature.types.OptionList tom_match14_1_begin1=tom_match14_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match14_1_end1=tom_match14_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match14_1_end1))) {tom_match14_1_list1=tom_match14_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match14_1_2=tom_get_head_concOption_OptionList(tom_match14_1_list1);tom_match14_1_list1=tom_get_tail_concOption_OptionList(tom_match14_1_list1); if (tom_is_fun_sym_Debug(tom_match14_1_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match14_1_2_astName=tom_get_slot_Debug_astName(tom_match14_1_2); if (tom_is_fun_sym_Name(tom_match14_1_2_astName) ||  false ) { { String  tom_match14_1_2_astName_string=tom_get_slot_Name_string(tom_match14_1_2_astName); { String  tom_str=tom_match14_1_2_astName_string; if ( true ) {
 return tom_str;  } } } } } } }tom_match14_1_end1=tom_get_tail_concOption_OptionList(tom_match14_1_end1); } }tom_match14_1_list1=tom_match14_1_begin1; } } } } } } }

    return null;
  }

  protected static boolean hasGeneratedMatch(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match15_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match15_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match15_1_list1=tom_match15_1; { tom.engine.adt.tomsignature.types.OptionList tom_match15_1_begin1=tom_match15_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match15_1_end1=tom_match15_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match15_1_end1))) {tom_match15_1_list1=tom_match15_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match15_1_2=tom_get_head_concOption_OptionList(tom_match15_1_list1);tom_match15_1_list1=tom_get_tail_concOption_OptionList(tom_match15_1_list1); if (tom_is_fun_sym_GeneratedMatch(tom_match15_1_2) ||  false ) { if ( true ) {
 return true;  } } }tom_match15_1_end1=tom_get_tail_concOption_OptionList(tom_match15_1_end1); } }tom_match15_1_list1=tom_match15_1_begin1; } } } } } } }

    return false;
  }

  protected static boolean hasConstant(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match16_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match16_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match16_1_list1=tom_match16_1; { tom.engine.adt.tomsignature.types.OptionList tom_match16_1_begin1=tom_match16_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match16_1_end1=tom_match16_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match16_1_end1))) {tom_match16_1_list1=tom_match16_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match16_1_2=tom_get_head_concOption_OptionList(tom_match16_1_list1);tom_match16_1_list1=tom_get_tail_concOption_OptionList(tom_match16_1_list1); if (tom_is_fun_sym_Constant(tom_match16_1_2) ||  false ) { if ( true ) {
 return true;  } } }tom_match16_1_end1=tom_get_tail_concOption_OptionList(tom_match16_1_end1); } }tom_match16_1_list1=tom_match16_1_begin1; } } } } } } }

    return false;
  }

  protected static boolean hasDefinedSymbol(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match17_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match17_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match17_1_list1=tom_match17_1; { tom.engine.adt.tomsignature.types.OptionList tom_match17_1_begin1=tom_match17_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match17_1_end1=tom_match17_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match17_1_end1))) {tom_match17_1_list1=tom_match17_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match17_1_2=tom_get_head_concOption_OptionList(tom_match17_1_list1);tom_match17_1_list1=tom_get_tail_concOption_OptionList(tom_match17_1_list1); if (tom_is_fun_sym_DefinedSymbol(tom_match17_1_2) ||  false ) { if ( true ) {
 return true;  } } }tom_match17_1_end1=tom_get_tail_concOption_OptionList(tom_match17_1_end1); } }tom_match17_1_list1=tom_match17_1_begin1; } } } } } } }

    return false;
  }

  protected static boolean hasImplicitXMLAttribut(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match18_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match18_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match18_1_list1=tom_match18_1; { tom.engine.adt.tomsignature.types.OptionList tom_match18_1_begin1=tom_match18_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match18_1_end1=tom_match18_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match18_1_end1))) {tom_match18_1_list1=tom_match18_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match18_1_2=tom_get_head_concOption_OptionList(tom_match18_1_list1);tom_match18_1_list1=tom_get_tail_concOption_OptionList(tom_match18_1_list1); if (tom_is_fun_sym_ImplicitXMLAttribut(tom_match18_1_2) ||  false ) { if ( true ) {
 return true;  } } }tom_match18_1_end1=tom_get_tail_concOption_OptionList(tom_match18_1_end1); } }tom_match18_1_list1=tom_match18_1_begin1; } } } } } } }

    return false;
  }

  protected static boolean hasImplicitXMLChild(OptionList optionList) {
     if(optionList instanceof  tom.engine.adt.tomsignature.types.OptionList) { { tom.engine.adt.tomsignature.types.OptionList tom_match19_1=(( tom.engine.adt.tomsignature.types.OptionList)optionList); if (tom_is_fun_sym_concOption(tom_match19_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match19_1_list1=tom_match19_1; { tom.engine.adt.tomsignature.types.OptionList tom_match19_1_begin1=tom_match19_1_list1; { tom.engine.adt.tomsignature.types.OptionList tom_match19_1_end1=tom_match19_1_list1; { while (!(tom_is_empty_concOption_OptionList(tom_match19_1_end1))) {tom_match19_1_list1=tom_match19_1_end1; { { tom.engine.adt.tomsignature.types.Option tom_match19_1_2=tom_get_head_concOption_OptionList(tom_match19_1_list1);tom_match19_1_list1=tom_get_tail_concOption_OptionList(tom_match19_1_list1); if (tom_is_fun_sym_ImplicitXMLChild(tom_match19_1_2) ||  false ) { if ( true ) {
 return true;  } } }tom_match19_1_end1=tom_get_tail_concOption_OptionList(tom_match19_1_end1); } }tom_match19_1_list1=tom_match19_1_begin1; } } } } } } }

    return false;
  } 

  /*
  protected boolean hasGetHead(OptionList optionList) {
    %match(OptionList optionList) {
      concOption(_*,DeclarationToOption(GetHeadDecl[]),_*) -> { return true; }
    }
    return false;
  } 

  protected boolean hasGetTail(OptionList optionList) {
    %match(OptionList optionList) {
      concOption(_*,DeclarationToOption(GetTailDecl[]),_*) -> { return true; }
    }
    return false;
  } 

  protected boolean hasIsEmpty(OptionList optionList) {
    %match(OptionList optionList) {
      concOption(_*,DeclarationToOption(IsEmptyDecl[]),_*) -> { return true; }
    }
    return false;
  } 
*/

  protected static TomName getSlotName(TomSymbol symbol, int number) {
    PairNameDeclList pairNameDeclList = symbol.getPairNameDeclList();
    for(int index = 0; !pairNameDeclList.isEmpty() && index<number ; index++) {
      pairNameDeclList = pairNameDeclList.getTail();
    }
    if(pairNameDeclList.isEmpty()) {
      System.out.println("getSlotName: bad index error");
      throw new TomRuntimeException("getSlotName: bad index error");
    }
    PairNameDecl pairNameDecl = pairNameDeclList.getHead();

    Declaration decl = pairNameDecl.getSlotDecl();
     if(decl instanceof  tom.engine.adt.tomsignature.types.Declaration) { { tom.engine.adt.tomsignature.types.Declaration tom_match20_1=(( tom.engine.adt.tomsignature.types.Declaration)decl); if (tom_is_fun_sym_GetSlotDecl(tom_match20_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match20_1_slotName=tom_get_slot_GetSlotDecl_slotName(tom_match20_1); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match20_1_slotName; if ( true ) {
 return tom_name;  } } } } } }


    return pairNameDecl.getSlotName();
  }

  protected static int getSlotIndex(TomSymbol tomSymbol, TomName slotName) {
    //System.out.println("symbol = " + tomSymbol);
    //System.out.println("slotName = " + slotName);
    int index = 0;
    PairNameDeclList pairNameDeclList = tomSymbol.getPairNameDeclList();
    while(!pairNameDeclList.isEmpty()) {
      TomName name = pairNameDeclList.getHead().getSlotName();
      //System.out.println("index = " + index + " name = " + name);
      if(slotName.equals(name)) {
        return index; 
      }
      pairNameDeclList = pairNameDeclList.getTail();
      index++;
    }
    return -1;
  }

  protected static TomType getSlotType(TomSymbol symbol, TomName slotName) {
    if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) {
      tom.engine.adt.tomsignature.types.TomSymbol tom_match21_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol);
      if (tom_is_fun_sym_Symbol(tom_match21_1)) { 
        tom.engine.adt.tomsignature.types.TomType tom_match21_1_typesToType=tom_get_slot_Symbol_typesToType(tom_match21_1);
        if (tom_is_fun_sym_TypesToType(tom_match21_1_typesToType)) { 
          tom.engine.adt.tomsignature.types.TomTypeList tom_match21_1_typesToType_domain=tom_get_slot_TypesToType_domain(tom_match21_1_typesToType); 
              tom.engine.adt.tomsignature.types.TomType tom_match21_1_typesToType_codomain=tom_get_slot_TypesToType_codomain(tom_match21_1_typesToType); 
                tom.engine.adt.tomsignature.types.TomTypeList tom_typeList=tom_match21_1_typesToType_domain;
                int index = getSlotIndex(symbol,slotName);
                return (TomType)tom_typeList.elementAt(index);
        } 
      }
    }
    throw new TomRuntimeException("getSlotType: bad slotName error");
  }

  protected static boolean isDefinedSymbol(TomSymbol subject) {
    if(subject==null) {
      System.out.println("isDefinedSymbol: subject == null");
      return false;
    }
     if(subject instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match22_1=(( tom.engine.adt.tomsignature.types.TomSymbol)subject); if (tom_is_fun_sym_Symbol(tom_match22_1) ||  false ) { { tom.engine.adt.tomsignature.types.OptionList tom_match22_1_option=tom_get_slot_Symbol_option(tom_match22_1); { tom.engine.adt.tomsignature.types.OptionList tom_optionList=tom_match22_1_option; if ( true ) {

        return hasDefinedSymbol(tom_optionList);
       } } } } } }

    return false;
  }

  protected static boolean isDefinedGetSlot(TomSymbol symbol, TomName slotName) {
    if(symbol==null) {
      System.out.println("isDefinedSymbol: symbol == null");
      return false;
    }
     if(symbol instanceof  tom.engine.adt.tomsignature.types.TomSymbol) { { tom.engine.adt.tomsignature.types.TomSymbol tom_match23_1=(( tom.engine.adt.tomsignature.types.TomSymbol)symbol); if (tom_is_fun_sym_Symbol(tom_match23_1) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match23_1_pairNameDeclList=tom_get_slot_Symbol_pairNameDeclList(tom_match23_1); if (tom_is_fun_sym_concPairNameDecl(tom_match23_1_pairNameDeclList) ||  false ) { { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match23_1_pairNameDeclList_list1=tom_match23_1_pairNameDeclList; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match23_1_pairNameDeclList_begin1=tom_match23_1_pairNameDeclList_list1; { tom.engine.adt.tomsignature.types.PairNameDeclList tom_match23_1_pairNameDeclList_end1=tom_match23_1_pairNameDeclList_list1; { while (!(tom_is_empty_concPairNameDecl_PairNameDeclList(tom_match23_1_pairNameDeclList_end1))) {tom_match23_1_pairNameDeclList_list1=tom_match23_1_pairNameDeclList_end1; { { tom.engine.adt.tomsignature.types.PairNameDecl tom_match23_1_pairNameDeclList_2=tom_get_head_concPairNameDecl_PairNameDeclList(tom_match23_1_pairNameDeclList_list1);tom_match23_1_pairNameDeclList_list1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match23_1_pairNameDeclList_list1); if (tom_is_fun_sym_PairNameDecl(tom_match23_1_pairNameDeclList_2) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match23_1_pairNameDeclList_2_slotName=tom_get_slot_PairNameDecl_slotName(tom_match23_1_pairNameDeclList_2); { tom.engine.adt.tomsignature.types.Declaration tom_match23_1_pairNameDeclList_2_slotDecl=tom_get_slot_PairNameDecl_slotDecl(tom_match23_1_pairNameDeclList_2); { tom.engine.adt.tomsignature.types.TomName tom_name=tom_match23_1_pairNameDeclList_2_slotName; { tom.engine.adt.tomsignature.types.Declaration tom_decl=tom_match23_1_pairNameDeclList_2_slotDecl; if ( true ) {

        if(tom_name==slotName && tom_decl!=tom_make_EmptyDeclaration()) {
          return true;
        }
       } } } } } } }tom_match23_1_pairNameDeclList_end1=tom_get_tail_concPairNameDecl_PairNameDeclList(tom_match23_1_pairNameDeclList_end1); } }tom_match23_1_pairNameDeclList_list1=tom_match23_1_pairNameDeclList_begin1; } } } } } } } } }

    return false;
  }


  // findOriginTracking(_) return the option containing OriginTracking information
  protected static Option findOriginTracking(OptionList optionList) {
    if(optionList.isEmpty()) {
      return tom_make_noOption();
    }
    while(!optionList.isEmpty()) {
      Option subject = optionList.getHead();
       if(subject instanceof  tom.engine.adt.tomsignature.types.Option) { { tom.engine.adt.tomsignature.types.Option tom_match24_1=(( tom.engine.adt.tomsignature.types.Option)subject); if (tom_is_fun_sym_OriginTracking(tom_match24_1) ||  false ) { { tom.engine.adt.tomsignature.types.Option tom_orgTrack=tom_match24_1; if ( true ) {

          return tom_orgTrack;
         } } } } }

      optionList = optionList.getTail();
    }
    System.out.println("findOriginTracking:  not found" + optionList);
    throw new TomRuntimeException("findOriginTracking:  not found" + optionList);
  }

  protected static TomSymbol getSymbolFromName(String tomName, SymbolTable symbolTable) {
    return symbolTable.getSymbolFromName(tomName);
  }
  
  protected static TomSymbol getSymbolFromType(TomType tomType, SymbolTable symbolTable) {
    SymbolList list = symbolTable.getSymbolFromType(tomType);
    SymbolList filteredList = tom_make_emptySymbolList();
    // Not necessary since checker ensure the uniqueness of the symbol
    while(!list.isEmpty()) {
      TomSymbol head = list.getHead();
      if(isArrayOperator(head) || isListOperator(head)) {
        filteredList = tom_make_manySymbolList(head,filteredList);
      }
      list = list.getTail();
    }
    return filteredList.getHead();
  }

  protected static TomType getTermType(TomTerm t, SymbolTable symbolTable){
     if(t instanceof  tom.engine.adt.tomsignature.types.TomTerm) { { tom.engine.adt.tomsignature.types.TomTerm tom_match25_1=(( tom.engine.adt.tomsignature.types.TomTerm)t); if (tom_is_fun_sym_RecordAppl(tom_match25_1) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match25_1_nameList=tom_get_slot_RecordAppl_nameList(tom_match25_1); if (tom_is_fun_sym_concTomName(tom_match25_1_nameList) ||  false ) { { tom.engine.adt.tomsignature.types.NameList tom_match25_1_nameList_list1=tom_match25_1_nameList; if (!(tom_is_empty_concTomName_NameList(tom_match25_1_nameList_list1))) { { tom.engine.adt.tomsignature.types.TomName tom_match25_1_nameList_1=tom_get_head_concTomName_NameList(tom_match25_1_nameList_list1);tom_match25_1_nameList_list1=tom_get_tail_concTomName_NameList(tom_match25_1_nameList_list1); if (tom_is_fun_sym_Name(tom_match25_1_nameList_1) ||  false ) { { String  tom_match25_1_nameList_1_string=tom_get_slot_Name_string(tom_match25_1_nameList_1); { String  tom_tomName=tom_match25_1_nameList_1_string; if ( true ) {

        TomSymbol tomSymbol = symbolTable.getSymbolFromName(tom_tomName);
        return tomSymbol.getTypesToType().getCodomain();
       } } } } } } } } } } {boolean tom_bool_match25_1= false ; { tom.engine.adt.tomsignature.types.TomType tom_match25_1_astType= null ; if (tom_is_fun_sym_Variable(tom_match25_1)) {tom_bool_match25_1= true ;tom_match25_1_astType=tom_get_slot_Variable_astType(tom_match25_1); } else { if (tom_is_fun_sym_VariableStar(tom_match25_1)) {tom_bool_match25_1= true ;tom_match25_1_astType=tom_get_slot_VariableStar_astType(tom_match25_1); } else { if (tom_is_fun_sym_UnamedVariable(tom_match25_1)) {tom_bool_match25_1= true ;tom_match25_1_astType=tom_get_slot_UnamedVariable_astType(tom_match25_1); } else { if (tom_is_fun_sym_UnamedVariableStar(tom_match25_1)) {tom_bool_match25_1= true ;tom_match25_1_astType=tom_get_slot_UnamedVariableStar_astType(tom_match25_1); } } } } if (tom_bool_match25_1) { { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match25_1_astType; if ( true ) {

 
        return tom_type; 
       } } } } } if (tom_is_fun_sym_Ref(tom_match25_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match25_1_tomTerm=tom_get_slot_Ref_tomTerm(tom_match25_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match25_1_tomTerm; if ( true ) {

 return getTermType(tom_term, symbolTable);  } } } } if (tom_is_fun_sym_TargetLanguageToTomTerm(tom_match25_1) ||  false ) { { tom.engine.adt.tomsignature.types.TargetLanguage tom_match25_1_tl=tom_get_slot_TargetLanguageToTomTerm_tl(tom_match25_1); if (tom_is_fun_sym_ITL(tom_match25_1_tl) || tom_is_fun_sym_TL(tom_match25_1_tl) ||  false ) { if ( true ) {

 return tom_make_EmptyType();  } } } } if (tom_is_fun_sym_FunctionCall(tom_match25_1) ||  false ) { if ( true ) {

 return tom_make_EmptyType();  } } } }

		System.out.println("getTermType error on term: " + t);
		throw new TomRuntimeException("getTermType error on term: " + t);
  }
  
  protected static TomType getTermType(Expression t, SymbolTable symbolTable){
     if(t instanceof  tom.engine.adt.tomsignature.types.Expression) { { tom.engine.adt.tomsignature.types.Expression tom_match26_1=(( tom.engine.adt.tomsignature.types.Expression)t); {boolean tom_bool_match26_1= false ; { tom.engine.adt.tomsignature.types.TomType tom_match26_1_codomain= null ; if (tom_is_fun_sym_GetSubterm(tom_match26_1)) {tom_bool_match26_1= true ;tom_match26_1_codomain=tom_get_slot_GetSubterm_codomain(tom_match26_1); } else { if (tom_is_fun_sym_GetHead(tom_match26_1)) {tom_bool_match26_1= true ;tom_match26_1_codomain=tom_get_slot_GetHead_codomain(tom_match26_1); } else { if (tom_is_fun_sym_GetSlot(tom_match26_1)) {tom_bool_match26_1= true ;tom_match26_1_codomain=tom_get_slot_GetSlot_codomain(tom_match26_1); } else { if (tom_is_fun_sym_GetElement(tom_match26_1)) {tom_bool_match26_1= true ;tom_match26_1_codomain=tom_get_slot_GetElement_codomain(tom_match26_1); } } } } if (tom_bool_match26_1) { { tom.engine.adt.tomsignature.types.TomType tom_type=tom_match26_1_codomain; if ( true ) {
 return tom_type;  } } } } } if (tom_is_fun_sym_TomTermToExpression(tom_match26_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match26_1_astTerm=tom_get_slot_TomTermToExpression_astTerm(tom_match26_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match26_1_astTerm; if ( true ) {

 return getTermType(tom_term, symbolTable);  } } } } if (tom_is_fun_sym_GetTail(tom_match26_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match26_1_variable=tom_get_slot_GetTail_variable(tom_match26_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match26_1_variable; if ( true ) {
 return getTermType(tom_term, symbolTable);  } } } } if (tom_is_fun_sym_GetSliceList(tom_match26_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match26_1_variableBeginAST=tom_get_slot_GetSliceList_variableBeginAST(tom_match26_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match26_1_variableBeginAST; if ( true ) {
 return getTermType(tom_term, symbolTable);  } } } } if (tom_is_fun_sym_GetSliceArray(tom_match26_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match26_1_subjectListName=tom_get_slot_GetSliceArray_subjectListName(tom_match26_1); { tom.engine.adt.tomsignature.types.TomTerm tom_term=tom_match26_1_subjectListName; if ( true ) {
 return getTermType(tom_term, symbolTable);  } } } } } }

		System.out.println("getTermType error on term: " + t);
		throw new TomRuntimeException("getTermType error on term: " + t);
  }

  protected static SlotList tomListToSlotList(TomList tomList) {
    return tomListToSlotList(tomList,1);
  }

  protected static SlotList tomListToSlotList(TomList tomList, int index) {
     if(tomList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match27_1=(( tom.engine.adt.tomsignature.types.TomList)tomList); if (tom_is_fun_sym_emptyTomList(tom_match27_1) ||  false ) { if ( true ) {
 return tom_make_emptySlotList();  } } if (tom_is_fun_sym_manyTomList(tom_match27_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match27_1_head=tom_get_slot_manyTomList_head(tom_match27_1); { tom.engine.adt.tomsignature.types.TomList tom_match27_1_tail=tom_get_slot_manyTomList_tail(tom_match27_1); { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match27_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match27_1_tail; if ( true ) {
 
        TomName slotName = tom_make_PositionName(tom_cons_list_concTomNumber(tom_make_Number(index),tom_empty_list_concTomNumber()));
        return tom_make_manySlotList(tom_make_PairSlotAppl(slotName,tom_head),tomListToSlotList(tom_tail,index+1)); 
       } } } } } } } }

    throw new TomRuntimeException("tomListToSlotList: " + tomList);
  }

  protected static SlotList mergeTomListWithSlotList(TomList tomList, SlotList slotList) {
     if(tomList instanceof  tom.engine.adt.tomsignature.types.TomList) { { tom.engine.adt.tomsignature.types.TomList tom_match28_1=(( tom.engine.adt.tomsignature.types.TomList)tomList); if(slotList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match28_2=(( tom.engine.adt.tomsignature.types.SlotList)slotList); if (tom_is_fun_sym_emptyTomList(tom_match28_1) ||  false ) { if (tom_is_fun_sym_emptySlotList(tom_match28_2) ||  false ) { if ( true ) {
 
        return tom_make_emptySlotList(); 
       } } } if (tom_is_fun_sym_manyTomList(tom_match28_1) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match28_1_head=tom_get_slot_manyTomList_head(tom_match28_1); { tom.engine.adt.tomsignature.types.TomList tom_match28_1_tail=tom_get_slot_manyTomList_tail(tom_match28_1); { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match28_1_head; { tom.engine.adt.tomsignature.types.TomList tom_tail=tom_match28_1_tail; if (tom_is_fun_sym_manySlotList(tom_match28_2) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match28_2_head=tom_get_slot_manySlotList_head(tom_match28_2); { tom.engine.adt.tomsignature.types.SlotList tom_match28_2_tail=tom_get_slot_manySlotList_tail(tom_match28_2); if (tom_is_fun_sym_PairSlotAppl(tom_match28_2_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomName tom_match28_2_head_slotName=tom_get_slot_PairSlotAppl_slotName(tom_match28_2_head); { tom.engine.adt.tomsignature.types.TomName tom_slotName=tom_match28_2_head_slotName; { tom.engine.adt.tomsignature.types.SlotList tom_tailSlotList=tom_match28_2_tail; if ( true ) {
 
        return tom_make_manySlotList(tom_make_PairSlotAppl(tom_slotName,tom_head),mergeTomListWithSlotList(tom_tail,tom_tailSlotList)); 
       } } } } } } } } } } } } } } } } }

    throw new TomRuntimeException("mergeTomListWithSlotList: " + tomList + " and " + slotList);
  }

  protected static TomList slotListToTomList(SlotList tomList) {
     if(tomList instanceof  tom.engine.adt.tomsignature.types.SlotList) { { tom.engine.adt.tomsignature.types.SlotList tom_match29_1=(( tom.engine.adt.tomsignature.types.SlotList)tomList); if (tom_is_fun_sym_emptySlotList(tom_match29_1) ||  false ) { if ( true ) {
 return tom_make_emptyTomList();  } } if (tom_is_fun_sym_manySlotList(tom_match29_1) ||  false ) { { tom.engine.adt.tomsignature.types.Slot tom_match29_1_head=tom_get_slot_manySlotList_head(tom_match29_1); { tom.engine.adt.tomsignature.types.SlotList tom_match29_1_tail=tom_get_slot_manySlotList_tail(tom_match29_1); if (tom_is_fun_sym_PairSlotAppl(tom_match29_1_head) ||  false ) { { tom.engine.adt.tomsignature.types.TomTerm tom_match29_1_head_appl=tom_get_slot_PairSlotAppl_appl(tom_match29_1_head); { tom.engine.adt.tomsignature.types.TomTerm tom_head=tom_match29_1_head_appl; { tom.engine.adt.tomsignature.types.SlotList tom_tail=tom_match29_1_tail; if ( true ) {
 return tom_make_manyTomList(tom_head,slotListToTomList(tom_tail));  } } } } } } } } } }

    throw new TomRuntimeException("slotListToTomList: " + tomList);
  }

} // class TomBase
