/* Generated by TOM (version 2.6alpha): Do not edit this file *//*
 * ANTLR Mapper
 *
 * Copyright (c) 2000-2008, INRIA
 * Nancy, France.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Yoann Toussaint    e-mail: Yoann.Toussaint@loria.fr
 *
 **/

package tom.antlrmapper;

import java.io.*;
import java.util.*;

public class ANTLRMapper {

  private String fileName;
  private String destDir;
  private String packagePrefix;
  private String packagePath;

  /* Generated by TOM (version 2.6alpha): Do not edit this file *//* Generated by TOM (version 2.6alpha): Do not edit this file */    private static   String  tom_append_list_concString( String l1,  String  l2) {     if( l1.length()==0 ) {       return l2;     } else if( l2.length()==0 ) {       return l1;     } else if(  l1.substring(1) .length()==0 ) {       return   l1.charAt(0) +l2 ;     } else {       return   l1.charAt(0) +tom_append_list_concString( l1.substring(1) ,l2) ;     }   }   private static   String  tom_get_slice_concString( String  begin,  String  end, String  tail) {     if( begin.equals(end) ) {       return tail;     } else {       return   begin.charAt(0) +( String )tom_get_slice_concString( begin.substring(1) ,end,tail) ;     }   }    

  public static void main(String[] args) {
    int errno = exec(args);
    System.exit(errno);
  }

  public static int exec(String[] args) {
    String srcfile = "";
    String destdir = ".";
    String pack = "";

    for (int i=0; i<args.length; i++) {
      if (args[i].equals("--srcfile")) {
        srcfile = args[++i];
      }
      if (args[i].equals("--destdir")) {
        destdir = args[++i];
      }
      if (args[i].equals("--package")) {
        pack = args[++i];
      }
    }
    ANTLRMapper antlrMapper = new ANTLRMapper(srcfile,destdir,pack);
    return antlrMapper.gen();
  }

  public ANTLRMapper(String fileN, String destD, String pack) {
    this.fileName = fileN;
    this.destDir = destD;
    this.packagePrefix = pack;
    this.packagePath = pack.replace('.',File.separatorChar);
  }

  public int gen() {
    // use the first argument as input file
    Map tokenMap = new HashMap();
    try {
      BufferedReader reader = new BufferedReader(new FileReader(fileName));
      String line = "";
      while(line != null) {
        line = reader.readLine();
matchBlock: {
	      {if ( true ) {{  String  tomMatch1NameNumberfreshSubject_1=(( String )line);if ( tomMatch1NameNumberfreshSubject_1!= null && tomMatch1NameNumberfreshSubject_1 instanceof String ) {{  String  tomMatch1NameNumber_freshVar_1=tomMatch1NameNumberfreshSubject_1;{  String  tomMatch1NameNumber_begin_3=tomMatch1NameNumber_freshVar_1;{  String  tomMatch1NameNumber_end_4=tomMatch1NameNumber_freshVar_1;do {{{  String  tomMatch1NameNumber_freshVar_0=tom_get_slice_concString(tomMatch1NameNumber_begin_3,tomMatch1NameNumber_end_4, "" );{  String  tomMatch1NameNumber_freshVar_2=tomMatch1NameNumber_end_4;if ( tomMatch1NameNumber_freshVar_0!= null && tomMatch1NameNumber_freshVar_0 instanceof String ) {{  String  tomMatch1NameNumber_freshVar_6=tomMatch1NameNumber_freshVar_0;if (!( tomMatch1NameNumber_freshVar_6.length()==0 )) {if ( '/'== tomMatch1NameNumber_freshVar_6.charAt(0)  ) {{  String  tomMatch1NameNumber_freshVar_7= tomMatch1NameNumber_freshVar_6.substring(1) ;if (!( tomMatch1NameNumber_freshVar_7.length()==0 )) {if ( '/'== tomMatch1NameNumber_freshVar_7.charAt(0)  ) {{  String  tomMatch1NameNumber_freshVar_8= tomMatch1NameNumber_freshVar_7.substring(1) ;if ( tomMatch1NameNumber_freshVar_8.length()==0 ) {if ( true ) {
 /* comment */
		  break matchBlock;
	        }}}}}}}}}}}}if ( tomMatch1NameNumber_end_4.length()==0 ) {tomMatch1NameNumber_end_4=tomMatch1NameNumber_begin_3;} else {tomMatch1NameNumber_end_4= tomMatch1NameNumber_end_4.substring(1) ;}}} while(!( tomMatch1NameNumber_end_4.equals(tomMatch1NameNumber_begin_3) ));}}}}}}if ( true ) {{  String  tomMatch1NameNumberfreshSubject_1=(( String )line);if ( tomMatch1NameNumberfreshSubject_1!= null && tomMatch1NameNumberfreshSubject_1 instanceof String ) {{  String  tomMatch1NameNumber_freshVar_9=tomMatch1NameNumberfreshSubject_1;{  String  tomMatch1NameNumber_begin_11=tomMatch1NameNumber_freshVar_9;{  String  tomMatch1NameNumber_end_12=tomMatch1NameNumber_freshVar_9;do {{{  String  tomMatch1NameNumber_freshVar_10=tomMatch1NameNumber_end_12;if (!( tomMatch1NameNumber_freshVar_10.length()==0 )) {if ( '='== tomMatch1NameNumber_freshVar_10.charAt(0)  ) {{  String  tomMatch1NameNumber_freshVar_13= tomMatch1NameNumber_freshVar_10.substring(1) ;{  String  tomMatch1NameNumber_begin_15=tomMatch1NameNumber_freshVar_13;{  String  tomMatch1NameNumber_end_16=tomMatch1NameNumber_freshVar_13;do {{{  String  tomMatch1NameNumber_freshVar_14=tomMatch1NameNumber_end_16;if (!( tomMatch1NameNumber_freshVar_14.length()==0 )) {if ( '='== tomMatch1NameNumber_freshVar_14.charAt(0)  ) {{  String  tomMatch1NameNumber_freshVar_17= tomMatch1NameNumber_freshVar_14.substring(1) ;if ( true ) {
//token
		  Integer val = Integer.valueOf(tomMatch1NameNumber_freshVar_17);
		  tokenMap.put(val,tom_get_slice_concString(tomMatch1NameNumber_begin_11,tomMatch1NameNumber_end_12, "" ));
		  break matchBlock;
		}}}}}if ( tomMatch1NameNumber_end_16.length()==0 ) {tomMatch1NameNumber_end_16=tomMatch1NameNumber_begin_15;} else {tomMatch1NameNumber_end_16= tomMatch1NameNumber_end_16.substring(1) ;}}} while(!( tomMatch1NameNumber_end_16.equals(tomMatch1NameNumber_begin_15) ));}}}}}}if ( tomMatch1NameNumber_end_12.length()==0 ) {tomMatch1NameNumber_end_12=tomMatch1NameNumber_begin_11;} else {tomMatch1NameNumber_end_12= tomMatch1NameNumber_end_12.substring(1) ;}}} while(!( tomMatch1NameNumber_end_12.equals(tomMatch1NameNumber_begin_11) ));}}}}}}if ( true ) {{  String  tomMatch1NameNumberfreshSubject_1=(( String )line);if ( tomMatch1NameNumberfreshSubject_1!= null && tomMatch1NameNumberfreshSubject_1 instanceof String ) {{  String  tomMatch1NameNumber_freshVar_19=tomMatch1NameNumberfreshSubject_1;{  String  tomMatch1NameNumber_begin_21=tomMatch1NameNumber_freshVar_19;{  String  tomMatch1NameNumber_end_22=tomMatch1NameNumber_freshVar_19;do {{{  String  tomMatch1NameNumber_freshVar_20=tomMatch1NameNumber_end_22;if (!( tomMatch1NameNumber_freshVar_20.length()==0 )) {if ( '='== tomMatch1NameNumber_freshVar_20.charAt(0)  ) {{  String  tomMatch1NameNumber_freshVar_23= tomMatch1NameNumber_freshVar_20.substring(1) ;if ( true ) {

		  Integer val = Integer.valueOf(tomMatch1NameNumber_freshVar_23);
		  tokenMap.put(val,tom_get_slice_concString(tomMatch1NameNumber_begin_21,tomMatch1NameNumber_end_22, "" ));
		  break matchBlock;
		}}}}}if ( tomMatch1NameNumber_end_22.length()==0 ) {tomMatch1NameNumber_end_22=tomMatch1NameNumber_begin_21;} else {tomMatch1NameNumber_end_22= tomMatch1NameNumber_end_22.substring(1) ;}}} while(!( tomMatch1NameNumber_end_22.equals(tomMatch1NameNumber_begin_21) ));}}}}}}}

	    }
      }
    } catch (Exception e) {
      System.err.println("Exception: "+e);
      return 1;
    }
    System.out.println(tokenMap);
    generateTable(tokenMap);
    generateTomMapping(tokenMap);
    return 0;//no errors
  }

  private void generateTable(Map tokenMap) {
    StringBuilder out = new StringBuilder();
    if(packagePrefix.length()>0) {
      out.append("package "/* Generated by TOM (version 2.6alpha): Do not edit this file */+packagePrefix+";\n\t"
);
    }
    out.append("\n\tpublic class TokenTable {\n\tprivate static java.util.HashMap tokenMap = null;\n\n\tprivate static java.util.HashMap initTokenMap() {\n\ttokenMap = new java.util.HashMap();\n\t"/* Generated by TOM (version 2.6alpha): Do not edit this file */+initMap("tokenMap",tokenMap)+"\n\treturn tokenMap;\n\t}\n\tpublic static java.util.Map getTokenMap() {\n\tif (tokenMap == null) {\n\ttokenMap = initTokenMap();\n\t}\n\treturn (java.util.Map)tokenMap.clone();\n\t}\n\n\t}\n\n\t"

















);
    try {
      Writer writer = new BufferedWriter(
          new FileWriter(destDir + File.separator +
            packagePath + File.separator + "TokenTable.java"));
      writer.write(out.toString());
      writer.close();
    } catch (IOException e) {
      System.err.println(e.getClass() + ": " + e.getMessage());
    } catch (Exception e) {
      System.err.println("Write failed "+e);
      e.printStackTrace();
    }
  }

  private String initMap(String mapName, Map tokMap) {
    StringBuilder out = new StringBuilder();
    Iterator it = tokMap.keySet().iterator();
    while(it.hasNext()) {
      Integer key = (Integer)it.next();
      String value = (String)tokMap.get(key);
      out.append("\n\t  "/* Generated by TOM (version 2.6alpha): Do not edit this file */+mapName+".put(new Integer("/* Generated by TOM (version 2.6alpha): Do not edit this file */+key.intValue()+"),\""/* Generated by TOM (version 2.6alpha): Do not edit this file */+value+"\");"
);
    }
    return out.toString();
  }

  void generateTomMapping(Map tokMap) {
    StringBuilder out = new StringBuilder();

    out.append("\n\t%include{ int.tom }\n\t%include{ string.tom }\n\t%include{ aterm.tom }\n\n\t%op ATerm NodeInfo(text:String,line:int,column:int) {\n\tis_fsym(t) { (($t != null) && ((ATermAppl)$t).getAFun() == SingletonFactory.getInstance().makeAFun(\"NodeInfo\",3,false)) }\n\tget_slot(text, t) { (((ATermAppl)((ATermAppl)$t).getArgument(0)).getAFun().getName()) }\n\tget_slot(line, t) { (((ATermInt)((ATermAppl)$t).getArgument(1)).getInt()) }\n\tget_slot(column, t) { (((ATermInt)((ATermAppl)$t).getArgument(2)).getInt()) }\n\tmake(t,l,c) { (SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun(\"NodeInfo\",3,false),SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun($t,0,true)),SingletonFactory.getInstance().makeInt($l),SingletonFactory.getInstance().makeInt($c))) }\n\t}\n\n\t"












);

	Iterator it = tokMap.keySet().iterator();
	while(it.hasNext()) {
	  Integer key = (Integer)it.next();
	  String value = (String)tokMap.get(key);
	  out.append("\n\t      %op ATerm "/* Generated by TOM (version 2.6alpha): Do not edit this file */+value+"(info:ATerm,childs:ATermList) {\n\t      is_fsym(t) { (($t != null) && ((ATermAppl)$t).getAFun() == SingletonFactory.getInstance().makeAFun(\""/* Generated by TOM (version 2.6alpha): Do not edit this file */+value+"\",2,false)) }\n\t      get_slot(info, t) { ((ATermAppl)$t).getArgument(0) }\n\t      get_slot(childs, t) { (ATermList)((ATermAppl)$t).getArgument(1) }\n\t      make(i,c) {SingletonFactory.getInstance().makeAppl(SingletonFactory.getInstance().makeAFun(\""/* Generated by TOM (version 2.6alpha): Do not edit this file */+value+"\",2,false),$i,$c) }\n\t      }"





);
	}

	try {
	  Writer writer = new BufferedWriter(
	      new FileWriter(destDir + File.separator +
		packagePath + File.separator + "Mapping.tom"));
	  writer.write(out.toString());
	  writer.close();
	} catch (IOException e) {
	  System.err.println(e.getClass() + ": " + e.getMessage());
	} catch (Exception e) {
	  System.err.println("Write failed "+e);
	  e.printStackTrace();
	}
  }
}
