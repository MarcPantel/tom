  %typeterm VisitableVisitor {
    implement { VisitableVisitor}
    get_fun_sym(t) {null}
    cmp_fun_sym(s1,s2) { false}
    get_subterm(t,n) {null}
    equals(t1,t2) {t1.equals(t2)}
  }

  %op VisitableVisitor Identity {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.Identity) }
    make() { new jjtraveler.Identity() }
  }

  %op VisitableVisitor Fail {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.Fail) }
    make() { new jjtraveler.Fail() }
  }

  %op VisitableVisitor Not(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.Not) }
    make(v) { new jjtraveler.Not((VisitableVisitor)v) }
  }

  %op VisitableVisitor Sequence(VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.Sequence) }
    make(first,then) { new jjtraveler.Sequence((VisitableVisitor)first,(VisitableVisitor)then) }
  }

  %op VisitableVisitor Choice(VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.Choice) }
    make(first,then) { new jjtraveler.Choice((VisitableVisitor)first,(VisitableVisitor)then) }
  }

  %op VisitableVisitor All(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.All) }
    make(v) { new jjtraveler.All((VisitableVisitor)v) }
  }

  %op VisitableVisitor One(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.One) }
    make(v) { new jjtraveler.One((VisitableVisitor)v) }
  }

  %op VisitableVisitor Some(VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.Some) }
    make(v) { new jjtraveler.Some((VisitableVisitor)v) }
  }

  %op VisitableVisitor IfThenElse(VisitableVisitor, VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.IfThenElse) }
    make(condition,trueCase,falseCase) { new jjtraveler.IfThenElse((VisitableVisitor)condition,(VisitableVisitor)trueCase,(VisitableVisitor)falseCase) }
  }

  %op VisitableVisitor MuVar(String) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.MuVar) }
    make(name) { new jjtraveler.MuVar(name) }
  }

  %op VisitableVisitor Pselect(int, int, VisitableVisitor, VisitableVisitor) {
    fsym {}
    is_fsym(t) { (t instanceof jjtraveler.Pselect) }
    make(p,q,first,then) { new jjtraveler.Pselect(p,q,(VisitableVisitor)first,(VisitableVisitor)then) }
  }

