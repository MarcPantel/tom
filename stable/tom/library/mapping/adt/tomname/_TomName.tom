  %include { Strategy.tom }
  %op Strategy _MatchNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._MatchNumber)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._MatchNumber($arg0) }
  }
  
  %op Strategy When_MatchNumber(s:Strategy) {
    make(s) { `Sequence(Is_MatchNumber(),s) }
  }

  %op Strategy Is_MatchNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_MatchNumber()}
  }
  
  %op Strategy Make_MatchNumber(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber( $_Integer) }
  }

  %op Strategy _PatternNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._PatternNumber)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._PatternNumber($arg0) }
  }
  
  %op Strategy When_PatternNumber(s:Strategy) {
    make(s) { `Sequence(Is_PatternNumber(),s) }
  }

  %op Strategy Is_PatternNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_PatternNumber()}
  }
  
  %op Strategy Make_PatternNumber(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber( $_Integer) }
  }

  %op Strategy _ListNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._ListNumber)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._ListNumber($arg0) }
  }
  
  %op Strategy When_ListNumber(s:Strategy) {
    make(s) { `Sequence(Is_ListNumber(),s) }
  }

  %op Strategy Is_ListNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_ListNumber()}
  }
  
  %op Strategy Make_ListNumber(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber( $_Integer) }
  }

  %op Strategy _IndexNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._IndexNumber)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._IndexNumber($arg0) }
  }
  
  %op Strategy When_IndexNumber(s:Strategy) {
    make(s) { `Sequence(Is_IndexNumber(),s) }
  }

  %op Strategy Is_IndexNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_IndexNumber()}
  }
  
  %op Strategy Make_IndexNumber(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber( $_Integer) }
  }

  %op Strategy _Begin(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Begin)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Begin($arg0) }
  }
  
  %op Strategy When_Begin(s:Strategy) {
    make(s) { `Sequence(Is_Begin(),s) }
  }

  %op Strategy Is_Begin() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Begin()}
  }
  
  %op Strategy Make_Begin(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Begin))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Begin( $_Integer) }
  }

  %op Strategy _End(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._End)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._End($arg0) }
  }
  
  %op Strategy When_End(s:Strategy) {
    make(s) { `Sequence(Is_End(),s) }
  }

  %op Strategy Is_End() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_End()}
  }
  
  %op Strategy Make_End(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_End))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_End( $_Integer) }
  }

  %op Strategy _Save(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Save)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Save($arg0) }
  }
  
  %op Strategy When_Save(s:Strategy) {
    make(s) { `Sequence(Is_Save(),s) }
  }

  %op Strategy Is_Save() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Save()}
  }
  
  %op Strategy Make_Save(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Save))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Save( $_Integer) }
  }

  %op Strategy _Position(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Position)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Position($arg0) }
  }
  
  %op Strategy When_Position(s:Strategy) {
    make(s) { `Sequence(Is_Position(),s) }
  }

  %op Strategy Is_Position() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Position()}
  }
  
  %op Strategy Make_Position(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Position))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Position( $_Integer) }
  }

  %op Strategy _AbsVar(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._AbsVar)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._AbsVar($arg0) }
  }
  
  %op Strategy When_AbsVar(s:Strategy) {
    make(s) { `Sequence(Is_AbsVar(),s) }
  }

  %op Strategy Is_AbsVar() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_AbsVar()}
  }
  
  %op Strategy Make_AbsVar(_Integer:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar))) }

  get_slot(_Integer, t) { $t._Integer }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar( $_Integer) }
  }

  %op Strategy _RenamedVar(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._RenamedVar)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._RenamedVar($arg0) }
  }
  
  %op Strategy When_RenamedVar(s:Strategy) {
    make(s) { `Sequence(Is_RenamedVar(),s) }
  }

  %op Strategy Is_RenamedVar() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_RenamedVar()}
  }
  
  %op Strategy Make_RenamedVar(_AstName:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar))) }

  get_slot(_AstName, t) { $t._AstName }
    make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar( $new_AstName) }
  }

  %op Strategy _NameNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._NameNumber)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._NameNumber($arg0) }
  }
  
  %op Strategy When_NameNumber(s:Strategy) {
    make(s) { `Sequence(Is_NameNumber(),s) }
  }

  %op Strategy Is_NameNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_NameNumber()}
  }
  
  %op Strategy Make_NameNumber(_AstName:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber))) }

  get_slot(_AstName, t) { $t._AstName }
    make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber( $new_AstName) }
  }

  %op Strategy _EmptyconcTomNumber() {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber)))}
    
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber() }
  }
  
  %op Strategy When_EmptyconcTomNumber(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomNumber(),s) }
  }

  %op Strategy Is_EmptyconcTomNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_EmptyconcTomNumber()}
  }
  
  %op Strategy Make_EmptyconcTomNumber() {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber))) }

    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber() }
  }

  %op Strategy _ConsconcTomNumber(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
    make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomNumber(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomNumber(),s) }
  }

  %op Strategy Is_ConsconcTomNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_ConsconcTomNumber()}
  }
  
  %op Strategy Make_ConsconcTomNumber(_HeadconcTomNumber:Strategy, _TailconcTomNumber:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber))) }

  get_slot(_HeadconcTomNumber, t) { $t._HeadconcTomNumber }
  get_slot(_TailconcTomNumber, t) { $t._TailconcTomNumber }
    make( new_HeadconcTomNumber,  new_TailconcTomNumber) { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber( $new_HeadconcTomNumber,  $new_TailconcTomNumber) }
  }

  %op Strategy _EmptyconcTomName() {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName)))}
    
    make() { new tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName() }
  }
  
  %op Strategy When_EmptyconcTomName(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomName(),s) }
  }

  %op Strategy Is_EmptyconcTomName() {
    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_EmptyconcTomName()}
  }
  
  %op Strategy Make_EmptyconcTomName() {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName))) }

    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName() }
  }

  %op Strategy _ConsconcTomName(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
    make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomName(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomName(),s) }
  }

  %op Strategy Is_ConsconcTomName() {
    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_ConsconcTomName()}
  }
  
  %op Strategy Make_ConsconcTomName(_HeadconcTomName:Strategy, _TailconcTomName:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName))) }

  get_slot(_HeadconcTomName, t) { $t._HeadconcTomName }
  get_slot(_TailconcTomName, t) { $t._TailconcTomName }
    make( new_HeadconcTomName,  new_TailconcTomName) { new tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName( $new_HeadconcTomName,  $new_TailconcTomName) }
  }

  %op Strategy _Name(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._Name)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomname._Name($arg0) }
  }
  
  %op Strategy When_Name(s:Strategy) {
    make(s) { `Sequence(Is_Name(),s) }
  }

  %op Strategy Is_Name() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_Name()}
  }
  
  %op Strategy Make_Name(_String:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_Name))) }

  get_slot(_String, t) { $t._String }
    make( _String) { new tom.engine.adt.tomname.strategy.tomname.Make_Name( $_String) }
  }

  %op Strategy _PositionName(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._PositionName)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomname._PositionName($arg0) }
  }
  
  %op Strategy When_PositionName(s:Strategy) {
    make(s) { `Sequence(Is_PositionName(),s) }
  }

  %op Strategy Is_PositionName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_PositionName()}
  }
  
  %op Strategy Make_PositionName(_NumberList:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_PositionName))) }

  get_slot(_NumberList, t) { $t._NumberList }
    make( new_NumberList) { new tom.engine.adt.tomname.strategy.tomname.Make_PositionName( $new_NumberList) }
  }

  %op Strategy _EmptyName() {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._EmptyName)))}
    
    make() { new tom.engine.adt.tomname.strategy.tomname._EmptyName() }
  }
  
  %op Strategy When_EmptyName(s:Strategy) {
    make(s) { `Sequence(Is_EmptyName(),s) }
  }

  %op Strategy Is_EmptyName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_EmptyName()}
  }
  
  %op Strategy Make_EmptyName() {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_EmptyName))) }

    make() { new tom.engine.adt.tomname.strategy.tomname.Make_EmptyName() }
  }

  %op Strategy _AntiName(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._AntiName)))}
    
        get_slot(arg0, t) { $t.getArgument(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomname._AntiName($arg0) }
  }
  
  %op Strategy When_AntiName(s:Strategy) {
    make(s) { `Sequence(Is_AntiName(),s) }
  }

  %op Strategy Is_AntiName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_AntiName()}
  }
  
  %op Strategy Make_AntiName(_Name:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_AntiName))) }

  get_slot(_Name, t) { $t._Name }
    make( new_Name) { new tom.engine.adt.tomname.strategy.tomname.Make_AntiName( $new_Name) }
  }

  %op Strategy _concTomNumber(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomNumber"),Choice(_ConsconcTomNumber(sub,MuVar("x_concTomNumber")),_EmptyconcTomNumber())) }
  }
  
  %op Strategy _concTomName(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomName"),Choice(_ConsconcTomName(sub,MuVar("x_concTomName")),_EmptyconcTomName())) }
  }
  