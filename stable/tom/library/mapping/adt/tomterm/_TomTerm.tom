
%include { mustrategy.tom }

%op Strategy Is_TypedAction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_TypedAction)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TypedAction() }
}

%op Strategy _TypedAction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TypedAction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._TypedAction(arg0, arg1, arg2) }
}

%op Strategy Make_TypedAction(_AstInstruction:Strategy, _PositivePattern:Strategy, _NegativePatternList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction)}

  get_slot(_AstInstruction, t) { _AstInstruction }
  get_slot(_PositivePattern, t) { _PositivePattern }
  get_slot(_NegativePatternList, t) { _NegativePatternList }
  make( new_AstInstruction,  new_PositivePattern,  new_NegativePatternList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction( new_AstInstruction,  new_PositivePattern,  new_NegativePatternList) }
}

%op Strategy Is_RawAction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_RawAction)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_RawAction() }
}

%op Strategy _RawAction(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._RawAction)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._RawAction(arg0) }
}

%op Strategy Make_RawAction(_AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction)}

  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction( new_AstInstruction) }
}

%op Strategy Is_CheckInstance() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_CheckInstance)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CheckInstance() }
}

%op Strategy _CheckInstance(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CheckInstance)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._CheckInstance(arg0, arg1, arg2) }
}

%op Strategy Make_CheckInstance(_AstType:Strategy, _Source:Strategy, _Instruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CheckInstance)}

  get_slot(_AstType, t) { _AstType }
  get_slot(_Source, t) { _Source }
  get_slot(_Instruction, t) { _Instruction }
  make( new_AstType,  new_Source,  new_Instruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CheckInstance( new_AstType,  new_Source,  new_Instruction) }
}

%op Strategy Is_CheckStamp() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_CheckStamp)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CheckStamp() }
}

%op Strategy _CheckStamp(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CheckStamp)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._CheckStamp(arg0) }
}

%op Strategy Make_CheckStamp(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CheckStamp)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CheckStamp( new_Variable) }
}

%op Strategy Is_EqualityCondition() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_EqualityCondition)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_EqualityCondition() }
}

%op Strategy _EqualityCondition(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._EqualityCondition)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._EqualityCondition(arg0, arg1) }
}

%op Strategy Make_EqualityCondition(_Lhs:Strategy, _Rhs:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_EqualityCondition)}

  get_slot(_Lhs, t) { _Lhs }
  get_slot(_Rhs, t) { _Rhs }
  make( new_Lhs,  new_Rhs) { new tom.engine.adt.tominstruction.strategy.instruction.Make_EqualityCondition( new_Lhs,  new_Rhs) }
}

%op Strategy Is_TypedEqualityCondition() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_TypedEqualityCondition)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TypedEqualityCondition() }
}

%op Strategy _TypedEqualityCondition(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TypedEqualityCondition)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._TypedEqualityCondition(arg0, arg1, arg2) }
}

%op Strategy Make_TypedEqualityCondition(_TomType:Strategy, _Lhs:Strategy, _Rhs:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TypedEqualityCondition)}

  get_slot(_TomType, t) { _TomType }
  get_slot(_Lhs, t) { _Lhs }
  get_slot(_Rhs, t) { _Rhs }
  make( new_TomType,  new_Lhs,  new_Rhs) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TypedEqualityCondition( new_TomType,  new_Lhs,  new_Rhs) }
}

%op Strategy Is_MatchingCondition() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_MatchingCondition)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_MatchingCondition() }
}

%op Strategy _MatchingCondition(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._MatchingCondition)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._MatchingCondition(arg0, arg1) }
}

%op Strategy Make_MatchingCondition(_Lhs:Strategy, _Rhs:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_MatchingCondition)}

  get_slot(_Lhs, t) { _Lhs }
  get_slot(_Rhs, t) { _Rhs }
  make( new_Lhs,  new_Rhs) { new tom.engine.adt.tominstruction.strategy.instruction.Make_MatchingCondition( new_Lhs,  new_Rhs) }
}

%op Strategy Is_CompiledPattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledPattern)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledPattern() }
}

%op Strategy _CompiledPattern(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern(arg0, arg1) }
}

%op Strategy Make_CompiledPattern(_PatternList:Strategy, _AutomataInst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern)}

  get_slot(_PatternList, t) { _PatternList }
  get_slot(_AutomataInst, t) { _AutomataInst }
  make( new_PatternList,  new_AutomataInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern( new_PatternList,  new_AutomataInst) }
}

%op Strategy Is_CompiledMatch() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledMatch)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledMatch() }
}

%op Strategy _CompiledMatch(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch(arg0, arg1) }
}

%op Strategy Make_CompiledMatch(_AutomataInst:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch)}

  get_slot(_AutomataInst, t) { _AutomataInst }
  get_slot(_Option, t) { _Option }
  make( new_AutomataInst,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch( new_AutomataInst,  new_Option) }
}

%op Strategy Is_Match() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_Match)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Match() }
}

%op Strategy _Match(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Match)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._Match(arg0, arg1, arg2) }
}

%op Strategy Make_Match(_SubjectList:Strategy, _AstPatternInstructionList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Match)}

  get_slot(_SubjectList, t) { _SubjectList }
  get_slot(_AstPatternInstructionList, t) { _AstPatternInstructionList }
  get_slot(_Option, t) { _Option }
  make( new_SubjectList,  new_AstPatternInstructionList,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Match( new_SubjectList,  new_AstPatternInstructionList,  new_Option) }
}

%op Strategy Is_NamedBlock() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_NamedBlock)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_NamedBlock() }
}

%op Strategy _NamedBlock(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._NamedBlock)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._NamedBlock(arg0, arg1) }
}

%op Strategy Make_NamedBlock(_BlockName:String, _InstList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock)}

  get_slot(_BlockName, t) { _BlockName }
  get_slot(_InstList, t) { _InstList }
  make( _BlockName,  new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock( _BlockName,  new_InstList) }
}

%op Strategy Is_UnamedBlock() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_UnamedBlock)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_UnamedBlock() }
}

%op Strategy _UnamedBlock(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock(arg0) }
}

%op Strategy Make_UnamedBlock(_InstList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock)}

  get_slot(_InstList, t) { _InstList }
  make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock( new_InstList) }
}

%op Strategy Is_AbstractBlock() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_AbstractBlock)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_AbstractBlock() }
}

%op Strategy _AbstractBlock(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock(arg0) }
}

%op Strategy Make_AbstractBlock(_InstList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock)}

  get_slot(_InstList, t) { _InstList }
  make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock( new_InstList) }
}

%op Strategy Is_Nop() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_Nop)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Nop() }
}

%op Strategy _Nop() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Nop)}

  make() { new tom.engine.adt.tominstruction.strategy.instruction._Nop() }
}

%op Strategy Make_Nop() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Nop)}

  make() { new tom.engine.adt.tominstruction.strategy.instruction.Make_Nop() }
}

%op Strategy Is_Return() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_Return)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Return() }
}

%op Strategy _Return(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Return)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._Return(arg0) }
}

%op Strategy Make_Return(_Kid1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Return)}

  get_slot(_Kid1, t) { _Kid1 }
  make( new_Kid1) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Return( new_Kid1) }
}

%op Strategy Is_AssignMatchSubject() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_AssignMatchSubject)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_AssignMatchSubject() }
}

%op Strategy _AssignMatchSubject(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._AssignMatchSubject)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._AssignMatchSubject(arg0, arg1) }
}

%op Strategy Make_AssignMatchSubject(_Kid1:Strategy, _Source:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_AssignMatchSubject)}

  get_slot(_Kid1, t) { _Kid1 }
  get_slot(_Source, t) { _Source }
  make( new_Kid1,  new_Source) { new tom.engine.adt.tominstruction.strategy.instruction.Make_AssignMatchSubject( new_Kid1,  new_Source) }
}

%op Strategy Is_LetAssign() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_LetAssign)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_LetAssign() }
}

%op Strategy _LetAssign(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._LetAssign)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._LetAssign(arg0, arg1, arg2) }
}

%op Strategy Make_LetAssign(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_LetAssign)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_LetAssign( new_Variable,  new_Source,  new_AstInstruction) }
}

%op Strategy Is_LetRef() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_LetRef)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_LetRef() }
}

%op Strategy _LetRef(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._LetRef)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._LetRef(arg0, arg1, arg2) }
}

%op Strategy Make_LetRef(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef( new_Variable,  new_Source,  new_AstInstruction) }
}

%op Strategy Is_Let() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_Let)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Let() }
}

%op Strategy _Let(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Let)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._Let(arg0, arg1, arg2) }
}

%op Strategy Make_Let(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Let)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Let( new_Variable,  new_Source,  new_AstInstruction) }
}

%op Strategy Is_Assign() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_Assign)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Assign() }
}

%op Strategy _Assign(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Assign)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._Assign(arg0, arg1) }
}

%op Strategy Make_Assign(_Variable:Strategy, _Source:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Assign)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  make( new_Variable,  new_Source) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Assign( new_Variable,  new_Source) }
}

%op Strategy Is_WhileDo() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_WhileDo)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_WhileDo() }
}

%op Strategy _WhileDo(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._WhileDo)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._WhileDo(arg0, arg1) }
}

%op Strategy Make_WhileDo(_Condition:Strategy, _DoInst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo)}

  get_slot(_Condition, t) { _Condition }
  get_slot(_DoInst, t) { _DoInst }
  make( new_Condition,  new_DoInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo( new_Condition,  new_DoInst) }
}

%op Strategy Is_DoWhile() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_DoWhile)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_DoWhile() }
}

%op Strategy _DoWhile(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._DoWhile)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._DoWhile(arg0, arg1) }
}

%op Strategy Make_DoWhile(_DoInst:Strategy, _Condition:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile)}

  get_slot(_DoInst, t) { _DoInst }
  get_slot(_Condition, t) { _Condition }
  make( new_DoInst,  new_Condition) { new tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile( new_DoInst,  new_Condition) }
}

%op Strategy Is_If() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_If)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_If() }
}

%op Strategy _If(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._If)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._If(arg0, arg1, arg2) }
}

%op Strategy Make_If(_Condition:Strategy, _SuccesInst:Strategy, _FailureInst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_If)}

  get_slot(_Condition, t) { _Condition }
  get_slot(_SuccesInst, t) { _SuccesInst }
  get_slot(_FailureInst, t) { _FailureInst }
  make( new_Condition,  new_SuccesInst,  new_FailureInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_If( new_Condition,  new_SuccesInst,  new_FailureInst) }
}

%op Strategy Is_TargetLanguageToInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_TargetLanguageToInstruction)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TargetLanguageToInstruction() }
}

%op Strategy _TargetLanguageToInstruction(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction(arg0) }
}

%op Strategy Make_TargetLanguageToInstruction(_Tl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction)}

  get_slot(_Tl, t) { _Tl }
  make( new_Tl) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction( new_Tl) }
}

%op Strategy Is_TomTermToInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Is_TomTermToInstruction)}
  make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TomTermToInstruction() }
}

%op Strategy _TomTermToInstruction(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction(arg0) }
}

%op Strategy Make_TomTermToInstruction(_Tom:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction)}

  get_slot(_Tom, t) { _Tom }
  make( new_Tom) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction( new_Tom) }
}

%op Strategy Is_EmptyconcInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Is_EmptyconcInstruction)}
  make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Is_EmptyconcInstruction() }
}

%op Strategy _EmptyconcInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction)}

  make() { new tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction() }
}

%op Strategy Make_EmptyconcInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction)}

  make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction() }
}

%op Strategy Is_ConsconcInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Is_ConsconcInstruction)}
  make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Is_ConsconcInstruction() }
}

%op Strategy _ConsconcInstruction(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction(arg0, arg1) }
}

%op Strategy Make_ConsconcInstruction(_HeadconcInstruction:Strategy, _TailconcInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction)}

  get_slot(_HeadconcInstruction, t) { _HeadconcInstruction }
  get_slot(_TailconcInstruction, t) { _TailconcInstruction }
  make( new_HeadconcInstruction,  new_TailconcInstruction) { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction( new_HeadconcInstruction,  new_TailconcInstruction) }
}

%op Strategy Is_EmptyForward() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype.Is_EmptyForward)}
  make() { new tom.engine.adt.tomtype.strategy.tomforwardtype.Is_EmptyForward() }
}

%op Strategy _EmptyForward() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype._EmptyForward)}

  make() { new tom.engine.adt.tomtype.strategy.tomforwardtype._EmptyForward() }
}

%op Strategy Make_EmptyForward() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype.Make_EmptyForward)}

  make() { new tom.engine.adt.tomtype.strategy.tomforwardtype.Make_EmptyForward() }
}

%op Strategy Is_TLForward() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype.Is_TLForward)}
  make() { new tom.engine.adt.tomtype.strategy.tomforwardtype.Is_TLForward() }
}

%op Strategy _TLForward(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype._TLForward)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomforwardtype._TLForward(arg0) }
}

%op Strategy Make_TLForward(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype.Make_TLForward)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomforwardtype.Make_TLForward( _String) }
}

%op Strategy Is_TypeDefinition() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypedefinition.Is_TypeDefinition)}
  make() { new tom.engine.adt.tomtype.strategy.tomtypedefinition.Is_TypeDefinition() }
}

%op Strategy _TypeDefinition(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypedefinition._TypeDefinition)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtypedefinition._TypeDefinition(arg0, arg1) }
}

%op Strategy Make_TypeDefinition(_TomType:Strategy, _Forward:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypedefinition.Make_TypeDefinition)}

  get_slot(_TomType, t) { _TomType }
  get_slot(_Forward, t) { _Forward }
  make( new_TomType,  new_Forward) { new tom.engine.adt.tomtype.strategy.tomtypedefinition.Make_TypeDefinition( new_TomType,  new_Forward) }
}

%op Strategy Is_EmptyconcTomType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Is_EmptyconcTomType)}
  make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Is_EmptyconcTomType() }
}

%op Strategy _EmptyconcTomType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType() }
}

%op Strategy Make_EmptyconcTomType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType() }
}

%op Strategy Is_ConsconcTomType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Is_ConsconcTomType)}
  make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Is_ConsconcTomType() }
}

%op Strategy _ConsconcTomType(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType(arg0, arg1) }
}

%op Strategy Make_ConsconcTomType(_HeadconcTomType:Strategy, _TailconcTomType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType)}

  get_slot(_HeadconcTomType, t) { _HeadconcTomType }
  get_slot(_TailconcTomType, t) { _TailconcTomType }
  make( new_HeadconcTomType,  new_TailconcTomType) { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType( new_HeadconcTomType,  new_TailconcTomType) }
}

%op Strategy Is_TypeList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_TypeList)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TypeList() }
}

%op Strategy _TypeList(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TypeList)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TypeList(arg0) }
}

%op Strategy Make_TypeList(_TypeList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TypeList)}

  get_slot(_TypeList, t) { _TypeList }
  make( new_TypeList) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypeList( new_TypeList) }
}

%op Strategy Is_EmptyType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_EmptyType)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_EmptyType() }
}

%op Strategy _EmptyType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._EmptyType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtype._EmptyType() }
}

%op Strategy Make_EmptyType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType() }
}

%op Strategy Is_TLType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_TLType)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TLType() }
}

%op Strategy _TLType(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TLType)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TLType(arg0) }
}

%op Strategy Make_TLType(_Tl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TLType)}

  get_slot(_Tl, t) { _Tl }
  make( new_Tl) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TLType( new_Tl) }
}

%op Strategy Is_TypesToType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_TypesToType)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TypesToType() }
}

%op Strategy _TypesToType(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TypesToType)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._TypesToType(arg0, arg1) }
}

%op Strategy Make_TypesToType(_Domain:Strategy, _Codomain:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType)}

  get_slot(_Domain, t) { _Domain }
  get_slot(_Codomain, t) { _Codomain }
  make( new_Domain,  new_Codomain) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType( new_Domain,  new_Codomain) }
}

%op Strategy Is_Codomain() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_Codomain)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_Codomain() }
}

%op Strategy _Codomain(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._Codomain)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._Codomain(arg0) }
}

%op Strategy Make_Codomain(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain( new_AstName) }
}

%op Strategy Is_ASTTomType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_ASTTomType)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_ASTTomType() }
}

%op Strategy _ASTTomType(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._ASTTomType)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._ASTTomType(arg0) }
}

%op Strategy Make_ASTTomType(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_ASTTomType)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomtype.Make_ASTTomType( _String) }
}

%op Strategy Is_TomTypeAlone() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_TomTypeAlone)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TomTypeAlone() }
}

%op Strategy _TomTypeAlone(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TomTypeAlone)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TomTypeAlone(arg0) }
}

%op Strategy Make_TomTypeAlone(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TomTypeAlone)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TomTypeAlone( _String) }
}

%op Strategy Is_Type() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Is_Type)}
  make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_Type() }
}

%op Strategy _Type(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._Type)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._Type(arg0, arg1) }
}

%op Strategy Make_Type(_TomType:Strategy, _TlType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_Type)}

  get_slot(_TomType, t) { _TomType }
  get_slot(_TlType, t) { _TlType }
  make( new_TomType,  new_TlType) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Type( new_TomType,  new_TlType) }
}

%op Strategy Is_EmptyconcTomSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_EmptyconcTomSymbol)}
  make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_EmptyconcTomSymbol() }
}

%op Strategy _EmptyconcTomSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol() }
}

%op Strategy Make_EmptyconcTomSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol() }
}

%op Strategy Is_ConsconcTomSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_ConsconcTomSymbol)}
  make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_ConsconcTomSymbol() }
}

%op Strategy _ConsconcTomSymbol(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol(arg0, arg1) }
}

%op Strategy Make_ConsconcTomSymbol(_HeadconcTomSymbol:Strategy, _TailconcTomSymbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol)}

  get_slot(_HeadconcTomSymbol, t) { _HeadconcTomSymbol }
  get_slot(_TailconcTomSymbol, t) { _TailconcTomSymbol }
  make( new_HeadconcTomSymbol,  new_TailconcTomSymbol) { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol( new_HeadconcTomSymbol,  new_TailconcTomSymbol) }
}

%op Strategy Is_StructTable() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomstructuretable.Is_StructTable)}
  make() { new tom.engine.adt.tomsignature.strategy.tomstructuretable.Is_StructTable() }
}

%op Strategy _StructTable(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable(arg0) }
}

%op Strategy Make_StructTable(_StructList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable)}

  get_slot(_StructList, t) { _StructList }
  make( new_StructList) { new tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable( new_StructList) }
}

%op Strategy Is_Entry() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentry.Is_Entry)}
  make() { new tom.engine.adt.tomsignature.strategy.tomentry.Is_Entry() }
}

%op Strategy _Entry(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentry._Entry)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentry._Entry(arg0, arg1) }
}

%op Strategy Make_Entry(_StrName:String, _AstSymbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry)}

  get_slot(_StrName, t) { _StrName }
  get_slot(_AstSymbol, t) { _AstSymbol }
  make( _StrName,  new_AstSymbol) { new tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry( _StrName,  new_AstSymbol) }
}

%op Strategy Is_EmptyconcTomRule() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrulelist.Is_EmptyconcTomRule)}
  make() { new tom.engine.adt.tomsignature.strategy.tomrulelist.Is_EmptyconcTomRule() }
}

%op Strategy _EmptyconcTomRule() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrulelist._EmptyconcTomRule)}

  make() { new tom.engine.adt.tomsignature.strategy.tomrulelist._EmptyconcTomRule() }
}

%op Strategy Make_EmptyconcTomRule() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrulelist.Make_EmptyconcTomRule)}

  make() { new tom.engine.adt.tomsignature.strategy.tomrulelist.Make_EmptyconcTomRule() }
}

%op Strategy Is_ConsconcTomRule() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrulelist.Is_ConsconcTomRule)}
  make() { new tom.engine.adt.tomsignature.strategy.tomrulelist.Is_ConsconcTomRule() }
}

%op Strategy _ConsconcTomRule(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrulelist._ConsconcTomRule)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomrulelist._ConsconcTomRule(arg0, arg1) }
}

%op Strategy Make_ConsconcTomRule(_HeadconcTomRule:Strategy, _TailconcTomRule:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrulelist.Make_ConsconcTomRule)}

  get_slot(_HeadconcTomRule, t) { _HeadconcTomRule }
  get_slot(_TailconcTomRule, t) { _TailconcTomRule }
  make( new_HeadconcTomRule,  new_TailconcTomRule) { new tom.engine.adt.tomsignature.strategy.tomrulelist.Make_ConsconcTomRule( new_HeadconcTomRule,  new_TailconcTomRule) }
}

%op Strategy Is_TL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Is_TL)}
  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_TL() }
}

%op Strategy _TL(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._TL)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.targetlanguage._TL(arg0, arg1, arg2) }
}

%op Strategy Make_TL(_Code:String, _Start:Strategy, _End:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL)}

  get_slot(_Code, t) { _Code }
  get_slot(_Start, t) { _Start }
  get_slot(_End, t) { _End }
  make( _Code,  new_Start,  new_End) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL( _Code,  new_Start,  new_End) }
}

%op Strategy Is_ITL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Is_ITL)}
  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_ITL() }
}

%op Strategy _ITL(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._ITL)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._ITL(arg0) }
}

%op Strategy Make_ITL(_Code:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL)}

  get_slot(_Code, t) { _Code }
  make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL( _Code) }
}

%op Strategy Is_Comment() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Is_Comment)}
  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_Comment() }
}

%op Strategy _Comment(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._Comment)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._Comment(arg0) }
}

%op Strategy Make_Comment(_Code:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment)}

  get_slot(_Code, t) { _Code }
  make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment( _Code) }
}

%op Strategy Is_noTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Is_noTL)}
  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_noTL() }
}

%op Strategy _noTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._noTL)}

  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage._noTL() }
}

%op Strategy Make_noTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL)}

  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL() }
}

%op Strategy Is_TextPosition() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.position.Is_TextPosition)}
  make() { new tom.engine.adt.tomsignature.strategy.position.Is_TextPosition() }
}

%op Strategy _TextPosition(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.position._TextPosition)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.position._TextPosition(arg0, arg1) }
}

%op Strategy Make_TextPosition(_Line:int, _Column:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.position.Make_TextPosition)}

  get_slot(_Line, t) { _Line }
  get_slot(_Column, t) { _Column }
  make( _Line,  _Column) { new tom.engine.adt.tomsignature.strategy.position.Make_TextPosition( _Line,  _Column) }
}

%op Strategy Is_EmptyconcTomEntry() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Is_EmptyconcTomEntry)}
  make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Is_EmptyconcTomEntry() }
}

%op Strategy _EmptyconcTomEntry() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry)}

  make() { new tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry() }
}

%op Strategy Make_EmptyconcTomEntry() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry)}

  make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry() }
}

%op Strategy Is_ConsconcTomEntry() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Is_ConsconcTomEntry)}
  make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Is_ConsconcTomEntry() }
}

%op Strategy _ConsconcTomEntry(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry(arg0, arg1) }
}

%op Strategy Make_ConsconcTomEntry(_HeadconcTomEntry:Strategy, _TailconcTomEntry:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry)}

  get_slot(_HeadconcTomEntry, t) { _HeadconcTomEntry }
  get_slot(_TailconcTomEntry, t) { _TailconcTomEntry }
  make( new_HeadconcTomEntry,  new_TailconcTomEntry) { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry( new_HeadconcTomEntry,  new_TailconcTomEntry) }
}

%op Strategy Is_EmptyconcTomVisit() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_EmptyconcTomVisit)}
  make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_EmptyconcTomVisit() }
}

%op Strategy _EmptyconcTomVisit() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit)}

  make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit() }
}

%op Strategy Make_EmptyconcTomVisit() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit)}

  make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit() }
}

%op Strategy Is_ConsconcTomVisit() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_ConsconcTomVisit)}
  make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_ConsconcTomVisit() }
}

%op Strategy _ConsconcTomVisit(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit(arg0, arg1) }
}

%op Strategy Make_ConsconcTomVisit(_HeadconcTomVisit:Strategy, _TailconcTomVisit:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit)}

  get_slot(_HeadconcTomVisit, t) { _HeadconcTomVisit }
  get_slot(_TailconcTomVisit, t) { _TailconcTomVisit }
  make( new_HeadconcTomVisit,  new_TailconcTomVisit) { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit( new_HeadconcTomVisit,  new_TailconcTomVisit) }
}

%op Strategy Is_Table() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymboltable.Is_Table)}
  make() { new tom.engine.adt.tomsignature.strategy.tomsymboltable.Is_Table() }
}

%op Strategy _Table(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymboltable._Table)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.tomsymboltable._Table(arg0) }
}

%op Strategy Make_Table(_EntryList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table)}

  get_slot(_EntryList, t) { _EntryList }
  make( new_EntryList) { new tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table( new_EntryList) }
}

%op Strategy Is_emptySymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Is_emptySymbol)}
  make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Is_emptySymbol() }
}

%op Strategy _emptySymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol() }
}

%op Strategy Make_emptySymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol() }
}

%op Strategy Is_Symbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Is_Symbol)}
  make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Is_Symbol() }
}

%op Strategy _Symbol(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_Symbol(_AstName:Strategy, _TypesToType:Strategy, _PairNameDeclList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_TypesToType, t) { _TypesToType }
  get_slot(_PairNameDeclList, t) { _PairNameDeclList }
  get_slot(_Option, t) { _Option }
  make( new_AstName,  new_TypesToType,  new_PairNameDeclList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol( new_AstName,  new_TypesToType,  new_PairNameDeclList,  new_Option) }
}

%op Strategy Is_RewriteRule() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrule.Is_RewriteRule)}
  make() { new tom.engine.adt.tomsignature.strategy.tomrule.Is_RewriteRule() }
}

%op Strategy _RewriteRule(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrule._RewriteRule)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomsignature.strategy.tomrule._RewriteRule(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_RewriteRule(_Lhs:Strategy, _Rhs:Strategy, _CondList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomrule.Make_RewriteRule)}

  get_slot(_Lhs, t) { _Lhs }
  get_slot(_Rhs, t) { _Rhs }
  get_slot(_CondList, t) { _CondList }
  get_slot(_Option, t) { _Option }
  make( new_Lhs,  new_Rhs,  new_CondList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomrule.Make_RewriteRule( new_Lhs,  new_Rhs,  new_CondList,  new_Option) }
}

%op Strategy Is_UsedSymbolConstructor() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolConstructor)}
  make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolConstructor() }
}

%op Strategy _UsedSymbolConstructor(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor(arg0) }
}

%op Strategy Make_UsedSymbolConstructor(_Symbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor)}

  get_slot(_Symbol, t) { _Symbol }
  make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor( new_Symbol) }
}

%op Strategy Is_UsedSymbolDestructor() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolDestructor)}
  make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolDestructor() }
}

%op Strategy _UsedSymbolDestructor(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor(arg0) }
}

%op Strategy Make_UsedSymbolDestructor(_Symbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor)}

  get_slot(_Symbol, t) { _Symbol }
  make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor( new_Symbol) }
}

%op Strategy Is_UsedTypeDefinition() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedTypeDefinition)}
  make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedTypeDefinition() }
}

%op Strategy _UsedTypeDefinition(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedTypeDefinition)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedTypeDefinition(arg0) }
}

%op Strategy Make_UsedTypeDefinition(_Typedef:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedTypeDefinition)}

  get_slot(_Typedef, t) { _Typedef }
  make( new_Typedef) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedTypeDefinition( new_Typedef) }
}

%op Strategy Is_VisitTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisit.Is_VisitTerm)}
  make() { new tom.engine.adt.tomsignature.strategy.tomvisit.Is_VisitTerm() }
}

%op Strategy _VisitTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm(arg0, arg1, arg2) }
}

%op Strategy Make_VisitTerm(_VNode:Strategy, _AstPatternInstructionList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm)}

  get_slot(_VNode, t) { _VNode }
  get_slot(_AstPatternInstructionList, t) { _AstPatternInstructionList }
  get_slot(_Option, t) { _Option }
  make( new_VNode,  new_AstPatternInstructionList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm( new_VNode,  new_AstPatternInstructionList,  new_Option) }
}

%op Strategy Is_AbstractDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_AbstractDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_AbstractDecl() }
}

%op Strategy _AbstractDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl(arg0) }
}

%op Strategy Make_AbstractDecl(_DeclList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl)}

  get_slot(_DeclList, t) { _DeclList }
  make( new_DeclList) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl( new_DeclList) }
}

%op Strategy Is_EmptyDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_EmptyDeclaration)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_EmptyDeclaration() }
}

%op Strategy _EmptyDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration() }
}

%op Strategy Make_EmptyDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration() }
}

%op Strategy Is_ArraySymbolDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_ArraySymbolDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_ArraySymbolDecl() }
}

%op Strategy _ArraySymbolDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl(arg0) }
}

%op Strategy Make_ArraySymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl( new_AstName) }
}

%op Strategy Is_ListSymbolDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_ListSymbolDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_ListSymbolDecl() }
}

%op Strategy _ListSymbolDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl(arg0) }
}

%op Strategy Make_ListSymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl( new_AstName) }
}

%op Strategy Is_SymbolDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_SymbolDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_SymbolDecl() }
}

%op Strategy _SymbolDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl(arg0) }
}

%op Strategy Make_SymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl( new_AstName) }
}

%op Strategy Is_Class() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_Class)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_Class() }
}

%op Strategy _Class(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._Class)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Class(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_Class(_AstName:Strategy, _ExtendsType:Strategy, _SuperTerm:Strategy, _Declaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_ExtendsType, t) { _ExtendsType }
  get_slot(_SuperTerm, t) { _SuperTerm }
  get_slot(_Declaration, t) { _Declaration }
  make( new_AstName,  new_ExtendsType,  new_SuperTerm,  new_Declaration) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class( new_AstName,  new_ExtendsType,  new_SuperTerm,  new_Declaration) }
}

%op Strategy Is_MethodDef() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_MethodDef)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MethodDef() }
}

%op Strategy _MethodDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_MethodDef(_AstName:Strategy, _ArgumentList:Strategy, _Codomain:Strategy, _ThrowsType:Strategy, _Instruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_ArgumentList, t) { _ArgumentList }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_ThrowsType, t) { _ThrowsType }
  get_slot(_Instruction, t) { _Instruction }
  make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) }
}

%op Strategy Is_FunctionDef() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_FunctionDef)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_FunctionDef() }
}

%op Strategy _FunctionDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_FunctionDef(_AstName:Strategy, _ArgumentList:Strategy, _Codomain:Strategy, _ThrowsType:Strategy, _Instruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_ArgumentList, t) { _ArgumentList }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_ThrowsType, t) { _ThrowsType }
  get_slot(_Instruction, t) { _Instruction }
  make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) }
}

%op Strategy Is_RuleSet() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_RuleSet)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_RuleSet() }
}

%op Strategy _RuleSet(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._RuleSet)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomdeclaration.strategy.declaration._RuleSet(arg0, arg1) }
}

%op Strategy Make_RuleSet(_RuleList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_RuleSet)}

  get_slot(_RuleList, t) { _RuleList }
  get_slot(_Option, t) { _Option }
  make( new_RuleList,  new_Option) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_RuleSet( new_RuleList,  new_Option) }
}

%op Strategy Is_Strategy() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_Strategy)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_Strategy() }
}

%op Strategy _Strategy(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._Strategy)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Strategy(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_Strategy(_SName:Strategy, _ExtendsTerm:Strategy, _VisitList:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy)}

  get_slot(_SName, t) { _SName }
  get_slot(_ExtendsTerm, t) { _ExtendsTerm }
  get_slot(_VisitList, t) { _VisitList }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_SName,  new_ExtendsTerm,  new_VisitList,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy( new_SName,  new_ExtendsTerm,  new_VisitList,  new_OrgTrack) }
}

%op Strategy Is_MakeDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeDecl() }
}

%op Strategy _MakeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_MakeDecl(_AstName:Strategy, _AstType:Strategy, _Args:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Args, t) { _Args }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_AstType,  new_Args,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl( new_AstName,  new_AstType,  new_Args,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_MakeAddArray() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddArray)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddArray() }
}

%op Strategy _MakeAddArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_MakeAddArray(_AstName:Strategy, _VarElt:Strategy, _VarList:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VarElt, t) { _VarElt }
  get_slot(_VarList, t) { _VarList }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_MakeEmptyArray() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyArray)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyArray() }
}

%op Strategy _MakeEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_MakeEmptyArray(_AstName:Strategy, _VarSize:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VarSize, t) { _VarSize }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_VarSize,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray( new_AstName,  new_VarSize,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_GetSizeDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSizeDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSizeDecl() }
}

%op Strategy _GetSizeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_GetSizeDecl(_Opname:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_GetElementDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetElementDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetElementDecl() }
}

%op Strategy _GetElementDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_GetElementDecl(_Opname:Strategy, _Variable:Strategy, _Index:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Index, t) { _Index }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Index,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl( new_Opname,  new_Variable,  new_Index,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_MakeAddList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddList)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddList() }
}

%op Strategy _MakeAddList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_MakeAddList(_AstName:Strategy, _VarElt:Strategy, _VarList:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VarElt, t) { _VarElt }
  get_slot(_VarList, t) { _VarList }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_MakeEmptyList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyList)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyList() }
}

%op Strategy _MakeEmptyList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList(arg0, arg1, arg2) }
}

%op Strategy Make_MakeEmptyList(_AstName:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList( new_AstName,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_IsEmptyDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsEmptyDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsEmptyDecl() }
}

%op Strategy _IsEmptyDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_IsEmptyDecl(_Opname:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_GetTailDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetTailDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetTailDecl() }
}

%op Strategy _GetTailDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_GetTailDecl(_Opname:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_GetHeadDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetHeadDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetHeadDecl() }
}

%op Strategy _GetHeadDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_GetHeadDecl(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Codomain,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl( new_Opname,  new_Codomain,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_TermsEqualDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_TermsEqualDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_TermsEqualDecl() }
}

%op Strategy _TermsEqualDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._TermsEqualDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._TermsEqualDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_TermsEqualDecl(_TermArg1:Strategy, _TermArg2:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_TermsEqualDecl)}

  get_slot(_TermArg1, t) { _TermArg1 }
  get_slot(_TermArg2, t) { _TermArg2 }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_TermArg1,  new_TermArg2,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_TermsEqualDecl( new_TermArg1,  new_TermArg2,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_GetSlotDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSlotDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSlotDecl() }
}

%op Strategy _GetSlotDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_GetSlotDecl(_AstName:Strategy, _SlotName:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_SlotName, t) { _SlotName }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_SlotName,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl( new_AstName,  new_SlotName,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_IsFsymDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsFsymDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsFsymDecl() }
}

%op Strategy _IsFsymDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_IsFsymDecl(_AstName:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl( new_AstName,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_GetImplementationDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetImplementationDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetImplementationDecl() }
}

%op Strategy _GetImplementationDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl(arg0, arg1, arg2) }
}

%op Strategy Make_GetImplementationDecl(_Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl( new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_SetStampDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_SetStampDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_SetStampDecl() }
}

%op Strategy _SetStampDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._SetStampDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._SetStampDecl(arg0, arg1, arg2) }
}

%op Strategy Make_SetStampDecl(_Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_SetStampDecl)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_SetStampDecl( new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_CheckStampDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_CheckStampDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_CheckStampDecl() }
}

%op Strategy _CheckStampDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._CheckStampDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._CheckStampDecl(arg0, arg1, arg2) }
}

%op Strategy Make_CheckStampDecl(_Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_CheckStampDecl)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_CheckStampDecl( new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy Is_TypeTermDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Is_TypeTermDecl)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_TypeTermDecl() }
}

%op Strategy _TypeTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl(arg0, arg1, arg2) }
}

%op Strategy Make_TypeTermDecl(_AstName:Strategy, _Declarations:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Declarations, t) { _Declarations }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_Declarations,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl( new_AstName,  new_Declarations,  new_OrgTrack) }
}

%op Strategy Is_EmptyconcDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_EmptyconcDeclaration)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_EmptyconcDeclaration() }
}

%op Strategy _EmptyconcDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration() }
}

%op Strategy Make_EmptyconcDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration() }
}

%op Strategy Is_ConsconcDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_ConsconcDeclaration)}
  make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_ConsconcDeclaration() }
}

%op Strategy _ConsconcDeclaration(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration(arg0, arg1) }
}

%op Strategy Make_ConsconcDeclaration(_HeadconcDeclaration:Strategy, _TailconcDeclaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration)}

  get_slot(_HeadconcDeclaration, t) { _HeadconcDeclaration }
  get_slot(_TailconcDeclaration, t) { _TailconcDeclaration }
  make( new_HeadconcDeclaration,  new_TailconcDeclaration) { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration( new_HeadconcDeclaration,  new_TailconcDeclaration) }
}

%op Strategy Is_RuleVar() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_RuleVar)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_RuleVar() }
}

%op Strategy _RuleVar() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._RuleVar)}

  make() { new tom.engine.adt.tomname.strategy.tomnumber._RuleVar() }
}

%op Strategy Make_RuleVar() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_RuleVar)}

  make() { new tom.engine.adt.tomname.strategy.tomnumber.Make_RuleVar() }
}

%op Strategy Is_NameNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_NameNumber)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_NameNumber() }
}

%op Strategy _NameNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._NameNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._NameNumber(arg0) }
}

%op Strategy Make_NameNumber(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber( new_AstName) }
}

%op Strategy Is_RenamedVar() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_RenamedVar)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_RenamedVar() }
}

%op Strategy _RenamedVar(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._RenamedVar)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._RenamedVar(arg0) }
}

%op Strategy Make_RenamedVar(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar( new_AstName) }
}

%op Strategy Is_AbsVar() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_AbsVar)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_AbsVar() }
}

%op Strategy _AbsVar(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._AbsVar)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._AbsVar(arg0) }
}

%op Strategy Make_AbsVar(_Number:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar)}

  get_slot(_Number, t) { _Number }
  make( new_Number) { new tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar( new_Number) }
}

%op Strategy Is_Number() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_Number)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Number() }
}

%op Strategy _Number(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Number)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Number(arg0) }
}

%op Strategy Make_Number(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Number)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Number( _Integer) }
}

%op Strategy Is_End() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_End)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_End() }
}

%op Strategy _End(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._End)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._End(arg0) }
}

%op Strategy Make_End(_Number:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_End)}

  get_slot(_Number, t) { _Number }
  make( new_Number) { new tom.engine.adt.tomname.strategy.tomnumber.Make_End( new_Number) }
}

%op Strategy Is_Begin() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_Begin)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Begin() }
}

%op Strategy _Begin(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Begin)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Begin(arg0) }
}

%op Strategy Make_Begin(_Number:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Begin)}

  get_slot(_Number, t) { _Number }
  make( new_Number) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Begin( new_Number) }
}

%op Strategy Is_IndexNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_IndexNumber)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_IndexNumber() }
}

%op Strategy _IndexNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._IndexNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._IndexNumber(arg0) }
}

%op Strategy Make_IndexNumber(_Number:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber)}

  get_slot(_Number, t) { _Number }
  make( new_Number) { new tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber( new_Number) }
}

%op Strategy Is_ListNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_ListNumber)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_ListNumber() }
}

%op Strategy _ListNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._ListNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._ListNumber(arg0) }
}

%op Strategy Make_ListNumber(_Number:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber)}

  get_slot(_Number, t) { _Number }
  make( new_Number) { new tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber( new_Number) }
}

%op Strategy Is_PatternNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_PatternNumber)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_PatternNumber() }
}

%op Strategy _PatternNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._PatternNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._PatternNumber(arg0) }
}

%op Strategy Make_PatternNumber(_Number:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber)}

  get_slot(_Number, t) { _Number }
  make( new_Number) { new tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber( new_Number) }
}

%op Strategy Is_MatchNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Is_MatchNumber)}
  make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_MatchNumber() }
}

%op Strategy _MatchNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._MatchNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._MatchNumber(arg0) }
}

%op Strategy Make_MatchNumber(_Number:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber)}

  get_slot(_Number, t) { _Number }
  make( new_Number) { new tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber( new_Number) }
}

%op Strategy Is_EmptyconcTomName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Is_EmptyconcTomName)}
  make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_EmptyconcTomName() }
}

%op Strategy _EmptyconcTomName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName)}

  make() { new tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName() }
}

%op Strategy Make_EmptyconcTomName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName)}

  make() { new tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName() }
}

%op Strategy Is_ConsconcTomName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Is_ConsconcTomName)}
  make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_ConsconcTomName() }
}

%op Strategy _ConsconcTomName(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName(arg0, arg1) }
}

%op Strategy Make_ConsconcTomName(_HeadconcTomName:Strategy, _TailconcTomName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName)}

  get_slot(_HeadconcTomName, t) { _HeadconcTomName }
  get_slot(_TailconcTomName, t) { _TailconcTomName }
  make( new_HeadconcTomName,  new_TailconcTomName) { new tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName( new_HeadconcTomName,  new_TailconcTomName) }
}

%op Strategy Is_EmptyconcTomNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Is_EmptyconcTomNumber)}
  make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_EmptyconcTomNumber() }
}

%op Strategy _EmptyconcTomNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber)}

  make() { new tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber() }
}

%op Strategy Make_EmptyconcTomNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber)}

  make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber() }
}

%op Strategy Is_ConsconcTomNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Is_ConsconcTomNumber)}
  make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_ConsconcTomNumber() }
}

%op Strategy _ConsconcTomNumber(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber(arg0, arg1) }
}

%op Strategy Make_ConsconcTomNumber(_HeadconcTomNumber:Strategy, _TailconcTomNumber:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber)}

  get_slot(_HeadconcTomNumber, t) { _HeadconcTomNumber }
  get_slot(_TailconcTomNumber, t) { _TailconcTomNumber }
  make( new_HeadconcTomNumber,  new_TailconcTomNumber) { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber( new_HeadconcTomNumber,  new_TailconcTomNumber) }
}

%op Strategy Is_AntiName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Is_AntiName)}
  make() { new tom.engine.adt.tomname.strategy.tomname.Is_AntiName() }
}

%op Strategy _AntiName(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._AntiName)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomname._AntiName(arg0) }
}

%op Strategy Make_AntiName(_Name:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_AntiName)}

  get_slot(_Name, t) { _Name }
  make( new_Name) { new tom.engine.adt.tomname.strategy.tomname.Make_AntiName( new_Name) }
}

%op Strategy Is_EmptyName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Is_EmptyName)}
  make() { new tom.engine.adt.tomname.strategy.tomname.Is_EmptyName() }
}

%op Strategy _EmptyName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._EmptyName)}

  make() { new tom.engine.adt.tomname.strategy.tomname._EmptyName() }
}

%op Strategy Make_EmptyName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_EmptyName)}

  make() { new tom.engine.adt.tomname.strategy.tomname.Make_EmptyName() }
}

%op Strategy Is_PositionName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Is_PositionName)}
  make() { new tom.engine.adt.tomname.strategy.tomname.Is_PositionName() }
}

%op Strategy _PositionName(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._PositionName)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomname._PositionName(arg0) }
}

%op Strategy Make_PositionName(_NumberList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_PositionName)}

  get_slot(_NumberList, t) { _NumberList }
  make( new_NumberList) { new tom.engine.adt.tomname.strategy.tomname.Make_PositionName( new_NumberList) }
}

%op Strategy Is_Name() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Is_Name)}
  make() { new tom.engine.adt.tomname.strategy.tomname.Is_Name() }
}

%op Strategy _Name(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._Name)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomname._Name(arg0) }
}

%op Strategy Make_Name(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_Name)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomname.strategy.tomname.Make_Name( _String) }
}

%op Strategy Is_GetSliceArray() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceArray)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceArray() }
}

%op Strategy _GetSliceArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSliceArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceArray(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_GetSliceArray(_AstName:Strategy, _SubjectListName:Strategy, _VariableBeginAST:Strategy, _VariableEndAST:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_SubjectListName, t) { _SubjectListName }
  get_slot(_VariableBeginAST, t) { _VariableBeginAST }
  get_slot(_VariableEndAST, t) { _VariableEndAST }
  make( new_AstName,  new_SubjectListName,  new_VariableBeginAST,  new_VariableEndAST) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray( new_AstName,  new_SubjectListName,  new_VariableBeginAST,  new_VariableEndAST) }
}

%op Strategy Is_GetSliceList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceList)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceList() }
}

%op Strategy _GetSliceList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSliceList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceList(arg0, arg1, arg2) }
}

%op Strategy Make_GetSliceList(_AstName:Strategy, _VariableBeginAST:Strategy, _VariableEndAST:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VariableBeginAST, t) { _VariableBeginAST }
  get_slot(_VariableEndAST, t) { _VariableEndAST }
  make( new_AstName,  new_VariableBeginAST,  new_VariableEndAST) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList( new_AstName,  new_VariableBeginAST,  new_VariableEndAST) }
}

%op Strategy Is_GetElement() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GetElement)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetElement() }
}

%op Strategy _GetElement(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetElement)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetElement(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_GetElement(_Opname:Strategy, _Codomain:Strategy, _Kid1:Strategy, _Kid2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetElement)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_Kid1, t) { _Kid1 }
  get_slot(_Kid2, t) { _Kid2 }
  make( new_Opname,  new_Codomain,  new_Kid1,  new_Kid2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetElement( new_Opname,  new_Codomain,  new_Kid1,  new_Kid2) }
}

%op Strategy Is_GetSize() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GetSize)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSize() }
}

%op Strategy _GetSize(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSize)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetSize(arg0, arg1) }
}

%op Strategy Make_GetSize(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSize)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSize( new_Opname,  new_Variable) }
}

%op Strategy Is_AddOne() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_AddOne)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_AddOne() }
}

%op Strategy _AddOne(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._AddOne)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._AddOne(arg0) }
}

%op Strategy Make_AddOne(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_AddOne)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_AddOne( new_Variable) }
}

%op Strategy Is_IsEmptyArray() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyArray)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyArray() }
}

%op Strategy _IsEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray(arg0, arg1, arg2) }
}

%op Strategy Make_IsEmptyArray(_Opname:Strategy, _Variable:Strategy, _Index:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Index, t) { _Index }
  make( new_Opname,  new_Variable,  new_Index) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray( new_Opname,  new_Variable,  new_Index) }
}

%op Strategy Is_IsEmptyList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyList)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyList() }
}

%op Strategy _IsEmptyList(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsEmptyList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyList(arg0, arg1) }
}

%op Strategy Make_IsEmptyList(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList( new_Opname,  new_Variable) }
}

%op Strategy Is_GetTail() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GetTail)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetTail() }
}

%op Strategy _GetTail(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetTail)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetTail(arg0, arg1) }
}

%op Strategy Make_GetTail(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetTail)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetTail( new_Opname,  new_Variable) }
}

%op Strategy Is_GetHead() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GetHead)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetHead() }
}

%op Strategy _GetHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetHead)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._GetHead(arg0, arg1, arg2) }
}

%op Strategy Make_GetHead(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetHead)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Codomain,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetHead( new_Opname,  new_Codomain,  new_Variable) }
}

%op Strategy Is_IsFsym() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_IsFsym)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsFsym() }
}

%op Strategy _IsFsym(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsFsym)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsFsym(arg0, arg1) }
}

%op Strategy Make_IsFsym(_AstName:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Variable, t) { _Variable }
  make( new_AstName,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym( new_AstName,  new_Variable) }
}

%op Strategy Is_GetSlot() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GetSlot)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSlot() }
}

%op Strategy _GetSlot(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSlot)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSlot(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_GetSlot(_Codomain:Strategy, _AstName:Strategy, _SlotNameString:String, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot)}

  get_slot(_Codomain, t) { _Codomain }
  get_slot(_AstName, t) { _AstName }
  get_slot(_SlotNameString, t) { _SlotNameString }
  get_slot(_Variable, t) { _Variable }
  make( new_Codomain,  new_AstName,  _SlotNameString,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot( new_Codomain,  new_AstName,  _SlotNameString,  new_Variable) }
}

%op Strategy Is_Cast() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_Cast)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Cast() }
}

%op Strategy _Cast(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Cast)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Cast(arg0, arg1) }
}

%op Strategy Make_Cast(_AstType:Strategy, _Source:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Cast)}

  get_slot(_AstType, t) { _AstType }
  get_slot(_Source, t) { _Source }
  make( new_AstType,  new_Source) { new tom.engine.adt.tomexpression.strategy.expression.Make_Cast( new_AstType,  new_Source) }
}

%op Strategy Is_EqualTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_EqualTerm)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EqualTerm() }
}

%op Strategy _EqualTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._EqualTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._EqualTerm(arg0, arg1, arg2) }
}

%op Strategy Make_EqualTerm(_TomType:Strategy, _Kid1:Strategy, _Kid2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm)}

  get_slot(_TomType, t) { _TomType }
  get_slot(_Kid1, t) { _Kid1 }
  get_slot(_Kid2, t) { _Kid2 }
  make( new_TomType,  new_Kid1,  new_Kid2) { new tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm( new_TomType,  new_Kid1,  new_Kid2) }
}

%op Strategy Is_EqualFunctionSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_EqualFunctionSymbol)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EqualFunctionSymbol() }
}

%op Strategy _EqualFunctionSymbol(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._EqualFunctionSymbol)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._EqualFunctionSymbol(arg0, arg1, arg2) }
}

%op Strategy Make_EqualFunctionSymbol(_AstType:Strategy, _Exp1:Strategy, _Exp2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_EqualFunctionSymbol)}

  get_slot(_AstType, t) { _AstType }
  get_slot(_Exp1, t) { _Exp1 }
  get_slot(_Exp2, t) { _Exp2 }
  make( new_AstType,  new_Exp1,  new_Exp2) { new tom.engine.adt.tomexpression.strategy.expression.Make_EqualFunctionSymbol( new_AstType,  new_Exp1,  new_Exp2) }
}

%op Strategy Is_FalseTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_FalseTL)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_FalseTL() }
}

%op Strategy _FalseTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._FalseTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression._FalseTL() }
}

%op Strategy Make_FalseTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL() }
}

%op Strategy Is_TrueTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_TrueTL)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TrueTL() }
}

%op Strategy _TrueTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._TrueTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression._TrueTL() }
}

%op Strategy Make_TrueTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL() }
}

%op Strategy Is_GreaterThan() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_GreaterThan)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GreaterThan() }
}

%op Strategy _GreaterThan(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GreaterThan)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GreaterThan(arg0, arg1) }
}

%op Strategy Make_GreaterThan(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan)}

  get_slot(_Arg1, t) { _Arg1 }
  get_slot(_Arg2, t) { _Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan( new_Arg1,  new_Arg2) }
}

%op Strategy Is_Or() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_Or)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Or() }
}

%op Strategy _Or(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Or)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Or(arg0, arg1) }
}

%op Strategy Make_Or(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Or)}

  get_slot(_Arg1, t) { _Arg1 }
  get_slot(_Arg2, t) { _Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_Or( new_Arg1,  new_Arg2) }
}

%op Strategy Is_And() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_And)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_And() }
}

%op Strategy _And(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._And)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._And(arg0, arg1) }
}

%op Strategy Make_And(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_And)}

  get_slot(_Arg1, t) { _Arg1 }
  get_slot(_Arg2, t) { _Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_And( new_Arg1,  new_Arg2) }
}

%op Strategy Is_Negation() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_Negation)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Negation() }
}

%op Strategy _Negation(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Negation)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Negation(arg0) }
}

%op Strategy Make_Negation(_Arg:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Negation)}

  get_slot(_Arg, t) { _Arg }
  make( new_Arg) { new tom.engine.adt.tomexpression.strategy.expression.Make_Negation( new_Arg) }
}

%op Strategy Is_Bottom() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_Bottom)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Bottom() }
}

%op Strategy _Bottom(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Bottom)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Bottom(arg0) }
}

%op Strategy Make_Bottom(_TomType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Bottom)}

  get_slot(_TomType, t) { _TomType }
  make( new_TomType) { new tom.engine.adt.tomexpression.strategy.expression.Make_Bottom( new_TomType) }
}

%op Strategy Is_TomTermToExpression() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Is_TomTermToExpression)}
  make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TomTermToExpression() }
}

%op Strategy _TomTermToExpression(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression(arg0) }
}

%op Strategy Make_TomTermToExpression(_AstTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression)}

  get_slot(_AstTerm, t) { _AstTerm }
  make( new_AstTerm) { new tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression( new_AstTerm) }
}

%op Strategy Is_EmptyconcOr() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.oconstraintlist.Is_EmptyconcOr)}
  make() { new tom.engine.adt.tomconstraint.strategy.oconstraintlist.Is_EmptyconcOr() }
}

%op Strategy _EmptyconcOr() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.oconstraintlist._EmptyconcOr)}

  make() { new tom.engine.adt.tomconstraint.strategy.oconstraintlist._EmptyconcOr() }
}

%op Strategy Make_EmptyconcOr() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.oconstraintlist.Make_EmptyconcOr)}

  make() { new tom.engine.adt.tomconstraint.strategy.oconstraintlist.Make_EmptyconcOr() }
}

%op Strategy Is_ConsconcOr() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.oconstraintlist.Is_ConsconcOr)}
  make() { new tom.engine.adt.tomconstraint.strategy.oconstraintlist.Is_ConsconcOr() }
}

%op Strategy _ConsconcOr(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.oconstraintlist._ConsconcOr)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.oconstraintlist._ConsconcOr(arg0, arg1) }
}

%op Strategy Make_ConsconcOr(_HeadconcOr:Strategy, _TailconcOr:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.oconstraintlist.Make_ConsconcOr)}

  get_slot(_HeadconcOr, t) { _HeadconcOr }
  get_slot(_TailconcOr, t) { _TailconcOr }
  make( new_HeadconcOr,  new_TailconcOr) { new tom.engine.adt.tomconstraint.strategy.oconstraintlist.Make_ConsconcOr( new_HeadconcOr,  new_TailconcOr) }
}

%op Strategy Is_EmptyconcAnd() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.aconstraintlist.Is_EmptyconcAnd)}
  make() { new tom.engine.adt.tomconstraint.strategy.aconstraintlist.Is_EmptyconcAnd() }
}

%op Strategy _EmptyconcAnd() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.aconstraintlist._EmptyconcAnd)}

  make() { new tom.engine.adt.tomconstraint.strategy.aconstraintlist._EmptyconcAnd() }
}

%op Strategy Make_EmptyconcAnd() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.aconstraintlist.Make_EmptyconcAnd)}

  make() { new tom.engine.adt.tomconstraint.strategy.aconstraintlist.Make_EmptyconcAnd() }
}

%op Strategy Is_ConsconcAnd() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.aconstraintlist.Is_ConsconcAnd)}
  make() { new tom.engine.adt.tomconstraint.strategy.aconstraintlist.Is_ConsconcAnd() }
}

%op Strategy _ConsconcAnd(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.aconstraintlist._ConsconcAnd)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.aconstraintlist._ConsconcAnd(arg0, arg1) }
}

%op Strategy Make_ConsconcAnd(_HeadconcAnd:Strategy, _TailconcAnd:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.aconstraintlist.Make_ConsconcAnd)}

  get_slot(_HeadconcAnd, t) { _HeadconcAnd }
  get_slot(_TailconcAnd, t) { _TailconcAnd }
  make( new_HeadconcAnd,  new_TailconcAnd) { new tom.engine.adt.tomconstraint.strategy.aconstraintlist.Make_ConsconcAnd( new_HeadconcAnd,  new_TailconcAnd) }
}

%op Strategy Is_EmptyconcConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Is_EmptyconcConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Is_EmptyconcConstraint() }
}

%op Strategy _EmptyconcConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint() }
}

%op Strategy Make_EmptyconcConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint() }
}

%op Strategy Is_ConsconcConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Is_ConsconcConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Is_ConsconcConstraint() }
}

%op Strategy _ConsconcConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint(arg0, arg1) }
}

%op Strategy Make_ConsconcConstraint(_HeadconcConstraint:Strategy, _TailconcConstraint:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint)}

  get_slot(_HeadconcConstraint, t) { _HeadconcConstraint }
  get_slot(_TailconcConstraint, t) { _TailconcConstraint }
  make( new_HeadconcConstraint,  new_TailconcConstraint) { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint( new_HeadconcConstraint,  new_TailconcConstraint) }
}

%op Strategy Is_ForAll() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_ForAll)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_ForAll() }
}

%op Strategy _ForAll(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._ForAll)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ForAll(arg0, arg1) }
}

%op Strategy Make_ForAll(_var:Strategy, _cons:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_ForAll)}

  get_slot(_var, t) { _var }
  get_slot(_cons, t) { _cons }
  make( new_var,  new_cons) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ForAll( new_var,  new_cons) }
}

%op Strategy Is_Exists() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_Exists)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_Exists() }
}

%op Strategy _Exists(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._Exists)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._Exists(arg0, arg1) }
}

%op Strategy Make_Exists(_var:Strategy, _cons:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_Exists)}

  get_slot(_var, t) { _var }
  get_slot(_cons, t) { _cons }
  make( new_var,  new_cons) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_Exists( new_var,  new_cons) }
}

%op Strategy Is_NEqualConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_NEqualConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_NEqualConstraint() }
}

%op Strategy _NEqualConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._NEqualConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._NEqualConstraint(arg0, arg1) }
}

%op Strategy Make_NEqualConstraint(_pattern:Strategy, _genTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_NEqualConstraint)}

  get_slot(_pattern, t) { _pattern }
  get_slot(_genTerm, t) { _genTerm }
  make( new_pattern,  new_genTerm) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_NEqualConstraint( new_pattern,  new_genTerm) }
}

%op Strategy Is_EqualConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_EqualConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EqualConstraint() }
}

%op Strategy _EqualConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EqualConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._EqualConstraint(arg0, arg1) }
}

%op Strategy Make_EqualConstraint(_pattern:Strategy, _genTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EqualConstraint)}

  get_slot(_pattern, t) { _pattern }
  get_slot(_genTerm, t) { _genTerm }
  make( new_pattern,  new_genTerm) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EqualConstraint( new_pattern,  new_genTerm) }
}

%op Strategy Is_OrConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_OrConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_OrConstraint() }
}

%op Strategy _OrConstraint(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._OrConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._OrConstraint(arg0) }
}

%op Strategy Make_OrConstraint(_clo:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_OrConstraint)}

  get_slot(_clo, t) { _clo }
  make( new_clo) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_OrConstraint( new_clo) }
}

%op Strategy Is_AndConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_AndConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AndConstraint() }
}

%op Strategy _AndConstraint(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AndConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AndConstraint(arg0) }
}

%op Strategy Make_AndConstraint(_cla:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AndConstraint)}

  get_slot(_cla, t) { _cla }
  make( new_cla) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AndConstraint( new_cla) }
}

%op Strategy Is_Neg() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_Neg)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_Neg() }
}

%op Strategy _Neg(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._Neg)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._Neg(arg0) }
}

%op Strategy Make_Neg(_c:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_Neg)}

  get_slot(_c, t) { _c }
  make( new_c) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_Neg( new_c) }
}

%op Strategy Is_FalseConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_FalseConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_FalseConstraint() }
}

%op Strategy _FalseConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint() }
}

%op Strategy Make_FalseConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint() }
}

%op Strategy Is_TrueConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_TrueConstraint)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_TrueConstraint() }
}

%op Strategy _TrueConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint() }
}

%op Strategy Make_TrueConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint() }
}

%op Strategy Is_AssignTo() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_AssignTo)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AssignTo() }
}

%op Strategy _AssignTo(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AssignTo)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AssignTo(arg0) }
}

%op Strategy Make_AssignTo(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo( new_Variable) }
}

%op Strategy Is_Equal() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_Equal)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_Equal() }
}

%op Strategy _Equal(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._Equal)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._Equal(arg0) }
}

%op Strategy Make_Equal(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_Equal)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_Equal( new_Variable) }
}

%op Strategy Is_Ensure() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Is_Ensure)}
  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_Ensure() }
}

%op Strategy _Ensure(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._Ensure)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._Ensure(arg0) }
}

%op Strategy Make_Ensure(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_Ensure)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_Ensure( new_Variable) }
}

%op Strategy Is_noOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_noOption)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_noOption() }
}

%op Strategy _noOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._noOption)}

  make() { new tom.engine.adt.tomoption.strategy.option._noOption() }
}

%op Strategy Make_noOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_noOption)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_noOption() }
}

%op Strategy Is_ImplicitXMLChild() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLChild)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLChild() }
}

%op Strategy _ImplicitXMLChild() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild)}

  make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild() }
}

%op Strategy Make_ImplicitXMLChild() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild() }
}

%op Strategy Is_ImplicitXMLAttribut() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLAttribut)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLAttribut() }
}

%op Strategy _ImplicitXMLAttribut() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut)}

  make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut() }
}

%op Strategy Make_ImplicitXMLAttribut() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut() }
}

%op Strategy Is_ModuleName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_ModuleName)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_ModuleName() }
}

%op Strategy _ModuleName(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._ModuleName)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._ModuleName(arg0) }
}

%op Strategy Make_ModuleName(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ModuleName)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomoption.strategy.option.Make_ModuleName( _String) }
}

%op Strategy Is_Debug() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_Debug)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_Debug() }
}

%op Strategy _Debug(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._Debug)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._Debug(arg0) }
}

%op Strategy Make_Debug(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Debug)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Debug( new_AstName) }
}

%op Strategy Is_Label() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_Label)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_Label() }
}

%op Strategy _Label(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._Label)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._Label(arg0) }
}

%op Strategy Make_Label(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Label)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Label( new_AstName) }
}

%op Strategy Is_Constant() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_Constant)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_Constant() }
}

%op Strategy _Constant() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._Constant)}

  make() { new tom.engine.adt.tomoption.strategy.option._Constant() }
}

%op Strategy Make_Constant() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Constant)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_Constant() }
}

%op Strategy Is_OriginalText() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_OriginalText)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_OriginalText() }
}

%op Strategy _OriginalText(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._OriginalText)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._OriginalText(arg0) }
}

%op Strategy Make_OriginalText(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_OriginalText)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginalText( new_AstName) }
}

%op Strategy Is_OriginTracking() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_OriginTracking)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_OriginTracking() }
}

%op Strategy _OriginTracking(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._OriginTracking)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomoption.strategy.option._OriginTracking(arg0, arg1, arg2) }
}

%op Strategy Make_OriginTracking(_AstName:Strategy, _Line:int, _FileName:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_OriginTracking)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Line, t) { _Line }
  get_slot(_FileName, t) { _FileName }
  make( new_AstName,  _Line,  _FileName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginTracking( new_AstName,  _Line,  _FileName) }
}

%op Strategy Is_GeneratedMatch() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_GeneratedMatch)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_GeneratedMatch() }
}

%op Strategy _GeneratedMatch() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._GeneratedMatch)}

  make() { new tom.engine.adt.tomoption.strategy.option._GeneratedMatch() }
}

%op Strategy Make_GeneratedMatch() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch() }
}

%op Strategy Is_DefinedSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_DefinedSymbol)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_DefinedSymbol() }
}

%op Strategy _DefinedSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._DefinedSymbol)}

  make() { new tom.engine.adt.tomoption.strategy.option._DefinedSymbol() }
}

%op Strategy Make_DefinedSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol() }
}

%op Strategy Is_TomTermToOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_TomTermToOption)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_TomTermToOption() }
}

%op Strategy _TomTermToOption(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._TomTermToOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomTermToOption(arg0) }
}

%op Strategy Make_TomTermToOption(_AstTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption)}

  get_slot(_AstTerm, t) { _AstTerm }
  make( new_AstTerm) { new tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption( new_AstTerm) }
}

%op Strategy Is_TomNameToOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_TomNameToOption)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_TomNameToOption() }
}

%op Strategy _TomNameToOption(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._TomNameToOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomNameToOption(arg0) }
}

%op Strategy Make_TomNameToOption(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption( new_AstName) }
}

%op Strategy Is_DeclarationToOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Is_DeclarationToOption)}
  make() { new tom.engine.adt.tomoption.strategy.option.Is_DeclarationToOption() }
}

%op Strategy _DeclarationToOption(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._DeclarationToOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._DeclarationToOption(arg0) }
}

%op Strategy Make_DeclarationToOption(_AstDeclaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption)}

  get_slot(_AstDeclaration, t) { _AstDeclaration }
  make( new_AstDeclaration) { new tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption( new_AstDeclaration) }
}

%op Strategy Is_EmptyconcOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Is_EmptyconcOption)}
  make() { new tom.engine.adt.tomoption.strategy.optionlist.Is_EmptyconcOption() }
}

%op Strategy _EmptyconcOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption)}

  make() { new tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption() }
}

%op Strategy Make_EmptyconcOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption)}

  make() { new tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption() }
}

%op Strategy Is_ConsconcOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Is_ConsconcOption)}
  make() { new tom.engine.adt.tomoption.strategy.optionlist.Is_ConsconcOption() }
}

%op Strategy _ConsconcOption(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption(arg0, arg1) }
}

%op Strategy Make_ConsconcOption(_HeadconcOption:Strategy, _TailconcOption:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption)}

  get_slot(_HeadconcOption, t) { _HeadconcOption }
  get_slot(_TailconcOption, t) { _TailconcOption }
  make( new_HeadconcOption,  new_TailconcOption) { new tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption( new_HeadconcOption,  new_TailconcOption) }
}

%op Strategy Is_EmptyconcTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Is_EmptyconcTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomlist.Is_EmptyconcTomTerm() }
}

%op Strategy _EmptyconcTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm)}

  make() { new tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm() }
}

%op Strategy Make_EmptyconcTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm)}

  make() { new tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm() }
}

%op Strategy Is_ConsconcTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Is_ConsconcTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomlist.Is_ConsconcTomTerm() }
}

%op Strategy _ConsconcTomTerm(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm(arg0, arg1) }
}

%op Strategy Make_ConsconcTomTerm(_HeadconcTomTerm:Strategy, _TailconcTomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm)}

  get_slot(_HeadconcTomTerm, t) { _HeadconcTomTerm }
  get_slot(_TailconcTomTerm, t) { _TailconcTomTerm }
  make( new_HeadconcTomTerm,  new_TailconcTomTerm) { new tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm( new_HeadconcTomTerm,  new_TailconcTomTerm) }
}

%op Strategy Is_BuildAppendArray() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendArray)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendArray() }
}

%op Strategy _BuildAppendArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray(arg0, arg1, arg2) }
}

%op Strategy Make_BuildAppendArray(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy Is_BuildConsArray() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsArray)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsArray() }
}

%op Strategy _BuildConsArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray(arg0, arg1, arg2) }
}

%op Strategy Make_BuildConsArray(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy Is_BuildEmptyArray() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyArray)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyArray() }
}

%op Strategy _BuildEmptyArray(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray(arg0, arg1) }
}

%op Strategy Make_BuildEmptyArray(_AstName:Strategy, _Size:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Size, t) { _Size }
  make( new_AstName,  _Size) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray( new_AstName,  _Size) }
}

%op Strategy Is_BuildAppendList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendList)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendList() }
}

%op Strategy _BuildAppendList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList(arg0, arg1, arg2) }
}

%op Strategy Make_BuildAppendList(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy Is_BuildConsList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsList)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsList() }
}

%op Strategy _BuildConsList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConsList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsList(arg0, arg1, arg2) }
}

%op Strategy Make_BuildConsList(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy Is_BuildEmptyList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyList)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyList() }
}

%op Strategy _BuildEmptyList(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList(arg0) }
}

%op Strategy Make_BuildEmptyList(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList( new_AstName) }
}

%op Strategy Is_BuildTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildTerm() }
}

%op Strategy _BuildTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildTerm(arg0, arg1, arg2) }
}

%op Strategy Make_BuildTerm(_AstName:Strategy, _Args:Strategy, _ModuleName:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Args, t) { _Args }
  get_slot(_ModuleName, t) { _ModuleName }
  make( new_AstName,  new_Args,  _ModuleName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm( new_AstName,  new_Args,  _ModuleName) }
}

%op Strategy Is_BuildConstant() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConstant)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConstant() }
}

%op Strategy _BuildConstant(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConstant)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConstant(arg0) }
}

%op Strategy Make_BuildConstant(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant( new_AstName) }
}

%op Strategy Is_FunctionCall() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_FunctionCall)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_FunctionCall() }
}

%op Strategy _FunctionCall(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._FunctionCall)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._FunctionCall(arg0, arg1) }
}

%op Strategy Make_FunctionCall(_AstName:Strategy, _Args:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Args, t) { _Args }
  make( new_AstName,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall( new_AstName,  new_Args) }
}

%op Strategy Is_BuildReducedTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BuildReducedTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildReducedTerm() }
}

%op Strategy _BuildReducedTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm(arg0) }
}

%op Strategy Make_BuildReducedTerm(_TomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm)}

  get_slot(_TomTerm, t) { _TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm( new_TomTerm) }
}

%op Strategy Is_Automata() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_Automata)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Automata() }
}

%op Strategy _Automata(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Automata)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Automata(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_Automata(_Option:Strategy, _PatternList:Strategy, _NumberList:Strategy, _Inst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Automata)}

  get_slot(_Option, t) { _Option }
  get_slot(_PatternList, t) { _PatternList }
  get_slot(_NumberList, t) { _NumberList }
  get_slot(_Inst, t) { _Inst }
  make( new_Option,  new_PatternList,  new_NumberList,  new_Inst) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Automata( new_Option,  new_PatternList,  new_NumberList,  new_Inst) }
}

%op Strategy Is_Ref() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_Ref)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Ref() }
}

%op Strategy _Ref(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Ref)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Ref(arg0) }
}

%op Strategy Make_Ref(_TomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Ref)}

  get_slot(_TomTerm, t) { _TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Ref( new_TomTerm) }
}

%op Strategy Is_SymbolOf() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_SymbolOf)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_SymbolOf() }
}

%op Strategy _SymbolOf(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._SymbolOf)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._SymbolOf(arg0) }
}

%op Strategy Make_SymbolOf(_GroundTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf)}

  get_slot(_GroundTerm, t) { _GroundTerm }
  make( new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf( new_GroundTerm) }
}

%op Strategy Is_Subterm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_Subterm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Subterm() }
}

%op Strategy _Subterm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Subterm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._Subterm(arg0, arg1, arg2) }
}

%op Strategy Make_Subterm(_AstName:Strategy, _SlotName:Strategy, _GroundTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_SlotName, t) { _SlotName }
  get_slot(_GroundTerm, t) { _GroundTerm }
  make( new_AstName,  new_SlotName,  new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm( new_AstName,  new_SlotName,  new_GroundTerm) }
}

%op Strategy Is_AntiTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_AntiTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_AntiTerm() }
}

%op Strategy _AntiTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._AntiTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._AntiTerm(arg0) }
}

%op Strategy Make_AntiTerm(_TomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm)}

  get_slot(_TomTerm, t) { _TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm( new_TomTerm) }
}

%op Strategy Is_Term() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_Term)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Term() }
}

%op Strategy _Term(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Term)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Term(arg0) }
}

%op Strategy Make_Term(_TomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Term)}

  get_slot(_TomTerm, t) { _TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Term( new_TomTerm) }
}

%op Strategy Is_SubjectList() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_SubjectList)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_SubjectList() }
}

%op Strategy _SubjectList(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._SubjectList)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._SubjectList(arg0) }
}

%op Strategy Make_SubjectList(_TomList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_SubjectList)}

  get_slot(_TomList, t) { _TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_SubjectList( new_TomList) }
}

%op Strategy Is_Composite() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_Composite)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Composite() }
}

%op Strategy _Composite(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Composite)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Composite(arg0) }
}

%op Strategy Make_Composite(_Args:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Composite)}

  get_slot(_Args, t) { _Args }
  make( new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Composite( new_Args) }
}

%op Strategy Is_BackQuoteAppl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_BackQuoteAppl)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BackQuoteAppl() }
}

%op Strategy _BackQuoteAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl(arg0, arg1, arg2) }
}

%op Strategy Make_BackQuoteAppl(_Option:Strategy, _AstName:Strategy, _Args:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstName, t) { _AstName }
  get_slot(_Args, t) { _Args }
  make( new_Option,  new_AstName,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl( new_Option,  new_AstName,  new_Args) }
}

%op Strategy Is_TomInclude() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_TomInclude)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomInclude() }
}

%op Strategy _TomInclude(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomInclude)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomInclude(arg0) }
}

%op Strategy Make_TomInclude(_TomList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude)}

  get_slot(_TomList, t) { _TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude( new_TomList) }
}

%op Strategy Is_Tom() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_Tom)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Tom() }
}

%op Strategy _Tom(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Tom)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Tom(arg0) }
}

%op Strategy Make_Tom(_TomList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Tom)}

  get_slot(_TomList, t) { _TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Tom( new_TomList) }
}

%op Strategy Is_InstructionToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_InstructionToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_InstructionToTomTerm() }
}

%op Strategy _InstructionToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm(arg0) }
}

%op Strategy Make_InstructionToTomTerm(_AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm)}

  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_AstInstruction) { new tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm( new_AstInstruction) }
}

%op Strategy Is_ExpressionToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_ExpressionToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ExpressionToTomTerm() }
}

%op Strategy _ExpressionToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm(arg0) }
}

%op Strategy Make_ExpressionToTomTerm(_AstExpression:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm)}

  get_slot(_AstExpression, t) { _AstExpression }
  make( new_AstExpression) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm( new_AstExpression) }
}

%op Strategy Is_OptionToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_OptionToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_OptionToTomTerm() }
}

%op Strategy _OptionToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm(arg0) }
}

%op Strategy Make_OptionToTomTerm(_Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm)}

  get_slot(_Option, t) { _Option }
  make( new_Option) { new tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm( new_Option) }
}

%op Strategy Is_DeclarationToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_DeclarationToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_DeclarationToTomTerm() }
}

%op Strategy _DeclarationToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm(arg0) }
}

%op Strategy Make_DeclarationToTomTerm(_AstDeclaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm)}

  get_slot(_AstDeclaration, t) { _AstDeclaration }
  make( new_AstDeclaration) { new tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm( new_AstDeclaration) }
}

%op Strategy Is_TomSymbolToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_TomSymbolToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomSymbolToTomTerm() }
}

%op Strategy _TomSymbolToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm(arg0) }
}

%op Strategy Make_TomSymbolToTomTerm(_AstSymbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm)}

  get_slot(_AstSymbol, t) { _AstSymbol }
  make( new_AstSymbol) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm( new_AstSymbol) }
}

%op Strategy Is_TomNameToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_TomNameToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomNameToTomTerm() }
}

%op Strategy _TomNameToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomNameToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomNameToTomTerm(arg0) }
}

%op Strategy Make_TomNameToTomTerm(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomNameToTomTerm)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomNameToTomTerm( new_AstName) }
}

%op Strategy Is_TomTypeToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_TomTypeToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomTypeToTomTerm() }
}

%op Strategy _TomTypeToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomTypeToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomTypeToTomTerm(arg0) }
}

%op Strategy Make_TomTypeToTomTerm(_AstType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomTypeToTomTerm)}

  get_slot(_AstType, t) { _AstType }
  make( new_AstType) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomTypeToTomTerm( new_AstType) }
}

%op Strategy Is_TargetLanguageToTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_TargetLanguageToTomTerm)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TargetLanguageToTomTerm() }
}

%op Strategy _TargetLanguageToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm(arg0) }
}

%op Strategy Make_TargetLanguageToTomTerm(_Tl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm)}

  get_slot(_Tl, t) { _Tl }
  make( new_Tl) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm( new_Tl) }
}

%op Strategy Is_UnamedVariableStar() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariableStar)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariableStar() }
}

%op Strategy _UnamedVariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar(arg0, arg1, arg2) }
}

%op Strategy Make_UnamedVariableStar(_Option:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar( new_Option,  new_AstType,  new_Constraints) }
}

%op Strategy Is_UnamedVariable() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariable)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariable() }
}

%op Strategy _UnamedVariable(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable(arg0, arg1, arg2) }
}

%op Strategy Make_UnamedVariable(_Option:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable( new_Option,  new_AstType,  new_Constraints) }
}

%op Strategy Is_VariableStar() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_VariableStar)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_VariableStar() }
}

%op Strategy _VariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._VariableStar)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._VariableStar(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_VariableStar(_Option:Strategy, _AstName:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstName, t) { _AstName }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar( new_Option,  new_AstName,  new_AstType,  new_Constraints) }
}

%op Strategy Is_Variable() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_Variable)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Variable() }
}

%op Strategy _Variable(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Variable)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Variable(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_Variable(_Option:Strategy, _AstName:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Variable)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstName, t) { _AstName }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Variable( new_Option,  new_AstName,  new_AstType,  new_Constraints) }
}

%op Strategy Is_XMLAppl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_XMLAppl)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_XMLAppl() }
}

%op Strategy _XMLAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomterm.strategy.tomterm._XMLAppl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy Make_XMLAppl(_Option:Strategy, _NameList:Strategy, _AttrList:Strategy, _ChildList:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_NameList, t) { _NameList }
  get_slot(_AttrList, t) { _AttrList }
  get_slot(_ChildList, t) { _ChildList }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_NameList,  new_AttrList,  new_ChildList,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl( new_Option,  new_NameList,  new_AttrList,  new_ChildList,  new_Constraints) }
}

%op Strategy Is_RecordAppl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_RecordAppl)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_RecordAppl() }
}

%op Strategy _RecordAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._RecordAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._RecordAppl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_RecordAppl(_Option:Strategy, _NameList:Strategy, _Slots:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_NameList, t) { _NameList }
  get_slot(_Slots, t) { _Slots }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_NameList,  new_Slots,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl( new_Option,  new_NameList,  new_Slots,  new_Constraints) }
}

%op Strategy Is_ListAppl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_ListAppl)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ListAppl() }
}

%op Strategy _ListAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ListAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._ListAppl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_ListAppl(_Option:Strategy, _NameList:Strategy, _Args:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ListAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_NameList, t) { _NameList }
  get_slot(_Args, t) { _Args }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_NameList,  new_Args,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ListAppl( new_Option,  new_NameList,  new_Args,  new_Constraints) }
}

%op Strategy Is_TermAppl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Is_TermAppl)}
  make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TermAppl() }
}

%op Strategy _TermAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TermAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._TermAppl(arg0, arg1, arg2, arg3) }
}

%op Strategy Make_TermAppl(_Option:Strategy, _NameList:Strategy, _Args:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_NameList, t) { _NameList }
  get_slot(_Args, t) { _Args }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_NameList,  new_Args,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl( new_Option,  new_NameList,  new_Args,  new_Constraints) }
}

%op Strategy Is_EmptyconcPatternInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist.Is_EmptyconcPatternInstruction)}
  make() { new tom.engine.adt.tomterm.strategy.patterninstructionlist.Is_EmptyconcPatternInstruction() }
}

%op Strategy _EmptyconcPatternInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist._EmptyconcPatternInstruction)}

  make() { new tom.engine.adt.tomterm.strategy.patterninstructionlist._EmptyconcPatternInstruction() }
}

%op Strategy Make_EmptyconcPatternInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_EmptyconcPatternInstruction)}

  make() { new tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_EmptyconcPatternInstruction() }
}

%op Strategy Is_ConsconcPatternInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist.Is_ConsconcPatternInstruction)}
  make() { new tom.engine.adt.tomterm.strategy.patterninstructionlist.Is_ConsconcPatternInstruction() }
}

%op Strategy _ConsconcPatternInstruction(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist._ConsconcPatternInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.patterninstructionlist._ConsconcPatternInstruction(arg0, arg1) }
}

%op Strategy Make_ConsconcPatternInstruction(_HeadconcPatternInstruction:Strategy, _TailconcPatternInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_ConsconcPatternInstruction)}

  get_slot(_HeadconcPatternInstruction, t) { _HeadconcPatternInstruction }
  get_slot(_TailconcPatternInstruction, t) { _TailconcPatternInstruction }
  make( new_HeadconcPatternInstruction,  new_TailconcPatternInstruction) { new tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_ConsconcPatternInstruction( new_HeadconcPatternInstruction,  new_TailconcPatternInstruction) }
}

%op Strategy Is_PatternInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstruction.Is_PatternInstruction)}
  make() { new tom.engine.adt.tomterm.strategy.patterninstruction.Is_PatternInstruction() }
}

%op Strategy _PatternInstruction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstruction._PatternInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.patterninstruction._PatternInstruction(arg0, arg1, arg2) }
}

%op Strategy Make_PatternInstruction(_Pattern:Strategy, _Action:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstruction.Make_PatternInstruction)}

  get_slot(_Pattern, t) { _Pattern }
  get_slot(_Action, t) { _Action }
  get_slot(_Option, t) { _Option }
  make( new_Pattern,  new_Action,  new_Option) { new tom.engine.adt.tomterm.strategy.patterninstruction.Make_PatternInstruction( new_Pattern,  new_Action,  new_Option) }
}

%op Strategy Is_Pattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.pattern.Is_Pattern)}
  make() { new tom.engine.adt.tomterm.strategy.pattern.Is_Pattern() }
}

%op Strategy _Pattern(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.pattern._Pattern)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.pattern._Pattern(arg0, arg1, arg2) }
}

%op Strategy Make_Pattern(_SubjectList:Strategy, _TomList:Strategy, _Guards:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.pattern.Make_Pattern)}

  get_slot(_SubjectList, t) { _SubjectList }
  get_slot(_TomList, t) { _TomList }
  get_slot(_Guards, t) { _Guards }
  make( new_SubjectList,  new_TomList,  new_Guards) { new tom.engine.adt.tomterm.strategy.pattern.Make_Pattern( new_SubjectList,  new_TomList,  new_Guards) }
}

%op Strategy Is_EmptyconcPattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist.Is_EmptyconcPattern)}
  make() { new tom.engine.adt.tomterm.strategy.patternlist.Is_EmptyconcPattern() }
}

%op Strategy _EmptyconcPattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist._EmptyconcPattern)}

  make() { new tom.engine.adt.tomterm.strategy.patternlist._EmptyconcPattern() }
}

%op Strategy Make_EmptyconcPattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist.Make_EmptyconcPattern)}

  make() { new tom.engine.adt.tomterm.strategy.patternlist.Make_EmptyconcPattern() }
}

%op Strategy Is_ConsconcPattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist.Is_ConsconcPattern)}
  make() { new tom.engine.adt.tomterm.strategy.patternlist.Is_ConsconcPattern() }
}

%op Strategy _ConsconcPattern(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist._ConsconcPattern)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.patternlist._ConsconcPattern(arg0, arg1) }
}

%op Strategy Make_ConsconcPattern(_HeadconcPattern:Strategy, _TailconcPattern:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist.Make_ConsconcPattern)}

  get_slot(_HeadconcPattern, t) { _HeadconcPattern }
  get_slot(_TailconcPattern, t) { _TailconcPattern }
  make( new_HeadconcPattern,  new_TailconcPattern) { new tom.engine.adt.tomterm.strategy.patternlist.Make_ConsconcPattern( new_HeadconcPattern,  new_TailconcPattern) }
}

%op Strategy Is_EmptyconcSlot() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Is_EmptyconcSlot)}
  make() { new tom.engine.adt.tomslot.strategy.slotlist.Is_EmptyconcSlot() }
}

%op Strategy _EmptyconcSlot() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot)}

  make() { new tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot() }
}

%op Strategy Make_EmptyconcSlot() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot)}

  make() { new tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot() }
}

%op Strategy Is_ConsconcSlot() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Is_ConsconcSlot)}
  make() { new tom.engine.adt.tomslot.strategy.slotlist.Is_ConsconcSlot() }
}

%op Strategy _ConsconcSlot(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot(arg0, arg1) }
}

%op Strategy Make_ConsconcSlot(_HeadconcSlot:Strategy, _TailconcSlot:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot)}

  get_slot(_HeadconcSlot, t) { _HeadconcSlot }
  get_slot(_TailconcSlot, t) { _TailconcSlot }
  make( new_HeadconcSlot,  new_TailconcSlot) { new tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot( new_HeadconcSlot,  new_TailconcSlot) }
}

%op Strategy Is_EmptyconcPairNameDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_EmptyconcPairNameDecl)}
  make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_EmptyconcPairNameDecl() }
}

%op Strategy _EmptyconcPairNameDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl)}

  make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl() }
}

%op Strategy Make_EmptyconcPairNameDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl)}

  make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl() }
}

%op Strategy Is_ConsconcPairNameDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_ConsconcPairNameDecl)}
  make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_ConsconcPairNameDecl() }
}

%op Strategy _ConsconcPairNameDecl(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl(arg0, arg1) }
}

%op Strategy Make_ConsconcPairNameDecl(_HeadconcPairNameDecl:Strategy, _TailconcPairNameDecl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl)}

  get_slot(_HeadconcPairNameDecl, t) { _HeadconcPairNameDecl }
  get_slot(_TailconcPairNameDecl, t) { _TailconcPairNameDecl }
  make( new_HeadconcPairNameDecl,  new_TailconcPairNameDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl( new_HeadconcPairNameDecl,  new_TailconcPairNameDecl) }
}

%op Strategy Is_PairNameDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecl.Is_PairNameDecl)}
  make() { new tom.engine.adt.tomslot.strategy.pairnamedecl.Is_PairNameDecl() }
}

%op Strategy _PairNameDecl(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl(arg0, arg1) }
}

%op Strategy Make_PairNameDecl(_SlotName:Strategy, _SlotDecl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl)}

  get_slot(_SlotName, t) { _SlotName }
  get_slot(_SlotDecl, t) { _SlotDecl }
  make( new_SlotName,  new_SlotDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl( new_SlotName,  new_SlotDecl) }
}

%op Strategy Is_PairSlotAppl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slot.Is_PairSlotAppl)}
  make() { new tom.engine.adt.tomslot.strategy.slot.Is_PairSlotAppl() }
}

%op Strategy _PairSlotAppl(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slot._PairSlotAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slot._PairSlotAppl(arg0, arg1) }
}

%op Strategy Make_PairSlotAppl(_SlotName:Strategy, _Appl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl)}

  get_slot(_SlotName, t) { _SlotName }
  get_slot(_Appl, t) { _Appl }
  make( new_SlotName,  new_Appl) { new tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl( new_SlotName,  new_Appl) }
}

%op Strategy _concInstruction(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcInstruction(sub,MuVar("x")),_EmptyconcInstruction())) }
}

%op Strategy _concTomType(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomType(sub,MuVar("x")),_EmptyconcTomType())) }
}

%op Strategy _concTomSymbol(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomSymbol(sub,MuVar("x")),_EmptyconcTomSymbol())) }
}

%op Strategy _concTomRule(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomRule(sub,MuVar("x")),_EmptyconcTomRule())) }
}

%op Strategy _concTomEntry(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomEntry(sub,MuVar("x")),_EmptyconcTomEntry())) }
}

%op Strategy _concTomVisit(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomVisit(sub,MuVar("x")),_EmptyconcTomVisit())) }
}

%op Strategy _concDeclaration(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcDeclaration(sub,MuVar("x")),_EmptyconcDeclaration())) }
}

%op Strategy _concTomName(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomName(sub,MuVar("x")),_EmptyconcTomName())) }
}

%op Strategy _concTomNumber(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomNumber(sub,MuVar("x")),_EmptyconcTomNumber())) }
}

%op Strategy _concOr(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcOr(sub,MuVar("x")),_EmptyconcOr())) }
}

%op Strategy _concAnd(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcAnd(sub,MuVar("x")),_EmptyconcAnd())) }
}

%op Strategy _concConstraint(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcConstraint(sub,MuVar("x")),_EmptyconcConstraint())) }
}

%op Strategy _concOption(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcOption(sub,MuVar("x")),_EmptyconcOption())) }
}

%op Strategy _concTomTerm(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomTerm(sub,MuVar("x")),_EmptyconcTomTerm())) }
}

%op Strategy _concPatternInstruction(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcPatternInstruction(sub,MuVar("x")),_EmptyconcPatternInstruction())) }
}

%op Strategy _concPattern(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcPattern(sub,MuVar("x")),_EmptyconcPattern())) }
}

%op Strategy _concSlot(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcSlot(sub,MuVar("x")),_EmptyconcSlot())) }
}

%op Strategy _concPairNameDecl(sub:Strategy) {
  is_fsym(t) { false }
  make(sub)  { `mu(MuVar("x"),Choice(_ConsconcPairNameDecl(sub,MuVar("x")),_EmptyconcPairNameDecl())) }
}
