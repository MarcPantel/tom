
  %op Strategy _TomTermToInstruction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction($arg0) }
  }
  
  %op Strategy When_TomTermToInstruction(s:Strategy) {
    make(s) { `Sequence(Is_TomTermToInstruction(),s) }
  }

  %op Strategy Is_TomTermToInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TomTermToInstruction()}
  }
  
  %op Strategy Make_TomTermToInstruction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction)$t).getChildAt(0) }
    make( new_Tom) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction( $new_Tom) }
  }

  %op Strategy _ExpressionToInstruction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._ExpressionToInstruction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._ExpressionToInstruction)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._ExpressionToInstruction($arg0) }
  }
  
  %op Strategy When_ExpressionToInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ExpressionToInstruction(),s) }
  }

  %op Strategy Is_ExpressionToInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_ExpressionToInstruction()}
  }
  
  %op Strategy Make_ExpressionToInstruction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_ExpressionToInstruction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_ExpressionToInstruction)$t).getChildAt(0) }
    make( new_Expr) { new tom.engine.adt.tominstruction.strategy.instruction.Make_ExpressionToInstruction( $new_Expr) }
  }

  %op Strategy _TargetLanguageToInstruction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction($arg0) }
  }
  
  %op Strategy When_TargetLanguageToInstruction(s:Strategy) {
    make(s) { `Sequence(Is_TargetLanguageToInstruction(),s) }
  }

  %op Strategy Is_TargetLanguageToInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TargetLanguageToInstruction()}
  }
  
  %op Strategy Make_TargetLanguageToInstruction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction)$t).getChildAt(0) }
    make( new_Tl) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction( $new_Tl) }
  }

  %op Strategy _If(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._If))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._If)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._If)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._If)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._If($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_If(s:Strategy) {
    make(s) { `Sequence(Is_If(),s) }
  }

  %op Strategy Is_If() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_If()}
  }
  
  %op Strategy Make_If(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_If)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_If)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_If)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_If)$t).getChildAt(2) }
    make( new_Condition,  new_SuccesInst,  new_FailureInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_If( $new_Condition,  $new_SuccesInst,  $new_FailureInst) }
  }

  %op Strategy _DoWhile(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._DoWhile))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._DoWhile)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._DoWhile)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._DoWhile($arg0, $arg1) }
  }
  
  %op Strategy When_DoWhile(s:Strategy) {
    make(s) { `Sequence(Is_DoWhile(),s) }
  }

  %op Strategy Is_DoWhile() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_DoWhile()}
  }
  
  %op Strategy Make_DoWhile(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile)$t).getChildAt(1) }
    make( new_DoInst,  new_Condition) { new tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile( $new_DoInst,  $new_Condition) }
  }

  %op Strategy _WhileDo(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._WhileDo))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._WhileDo)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._WhileDo)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._WhileDo($arg0, $arg1) }
  }
  
  %op Strategy When_WhileDo(s:Strategy) {
    make(s) { `Sequence(Is_WhileDo(),s) }
  }

  %op Strategy Is_WhileDo() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_WhileDo()}
  }
  
  %op Strategy Make_WhileDo(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo)$t).getChildAt(1) }
    make( new_Condition,  new_DoInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo( $new_Condition,  $new_DoInst) }
  }

  %op Strategy _Let(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._Let))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Let)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Let)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Let)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._Let($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_Let(s:Strategy) {
    make(s) { `Sequence(Is_Let(),s) }
  }

  %op Strategy Is_Let() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Let()}
  }
  
  %op Strategy Make_Let(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_Let)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Let)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Let)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Let)$t).getChildAt(2) }
    make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Let( $new_Variable,  $new_Source,  $new_AstInstruction) }
  }

  %op Strategy _LetRef(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._LetRef))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._LetRef)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._LetRef)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._LetRef)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._LetRef($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_LetRef(s:Strategy) {
    make(s) { `Sequence(Is_LetRef(),s) }
  }

  %op Strategy Is_LetRef() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_LetRef()}
  }
  
  %op Strategy Make_LetRef(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef)$t).getChildAt(2) }
    make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef( $new_Variable,  $new_Source,  $new_AstInstruction) }
  }

  %op Strategy _Assign(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._Assign))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Assign)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Assign)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._Assign($arg0, $arg1) }
  }
  
  %op Strategy When_Assign(s:Strategy) {
    make(s) { `Sequence(Is_Assign(),s) }
  }

  %op Strategy Is_Assign() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Assign()}
  }
  
  %op Strategy Make_Assign(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_Assign)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Assign)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Assign)$t).getChildAt(1) }
    make( new_Variable,  new_Source) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Assign( $new_Variable,  $new_Source) }
  }

  %op Strategy _AssignArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._AssignArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._AssignArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._AssignArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._AssignArray)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._AssignArray($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_AssignArray(s:Strategy) {
    make(s) { `Sequence(Is_AssignArray(),s) }
  }

  %op Strategy Is_AssignArray() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_AssignArray()}
  }
  
  %op Strategy Make_AssignArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_AssignArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_AssignArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_AssignArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_AssignArray)$t).getChildAt(2) }
    make( new_Variable,  new_Index,  new_Source) { new tom.engine.adt.tominstruction.strategy.instruction.Make_AssignArray( $new_Variable,  $new_Index,  $new_Source) }
  }

  %op Strategy _Return(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._Return))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Return)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._Return($arg0) }
  }
  
  %op Strategy When_Return(s:Strategy) {
    make(s) { `Sequence(Is_Return(),s) }
  }

  %op Strategy Is_Return() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Return()}
  }
  
  %op Strategy Make_Return(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_Return)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Return)$t).getChildAt(0) }
    make( new_Kid1) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Return( $new_Kid1) }
  }

  %op Strategy _Nop() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._Nop))}
    
    make() { new tom.engine.adt.tominstruction.strategy.instruction._Nop() }
  }
  
  %op Strategy When_Nop(s:Strategy) {
    make(s) { `Sequence(Is_Nop(),s) }
  }

  %op Strategy Is_Nop() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Nop()}
  }
  
  %op Strategy Make_Nop() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_Nop)) }

    make() { new tom.engine.adt.tominstruction.strategy.instruction.Make_Nop() }
  }

  %op Strategy _AbstractBlock(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock($arg0) }
  }
  
  %op Strategy When_AbstractBlock(s:Strategy) {
    make(s) { `Sequence(Is_AbstractBlock(),s) }
  }

  %op Strategy Is_AbstractBlock() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_AbstractBlock()}
  }
  
  %op Strategy Make_AbstractBlock(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock)$t).getChildAt(0) }
    make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock( $new_InstList) }
  }

  %op Strategy _UnamedBlock(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock($arg0) }
  }
  
  %op Strategy When_UnamedBlock(s:Strategy) {
    make(s) { `Sequence(Is_UnamedBlock(),s) }
  }

  %op Strategy Is_UnamedBlock() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_UnamedBlock()}
  }
  
  %op Strategy Make_UnamedBlock(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock)$t).getChildAt(0) }
    make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock( $new_InstList) }
  }

  %op Strategy _NamedBlock(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._NamedBlock))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._NamedBlock)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._NamedBlock)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._NamedBlock($arg0, $arg1) }
  }
  
  %op Strategy When_NamedBlock(s:Strategy) {
    make(s) { `Sequence(Is_NamedBlock(),s) }
  }

  %op Strategy Is_NamedBlock() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_NamedBlock()}
  }
  
  %op Strategy Make_NamedBlock(arg0:String, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock)$t).getChildAt(1) }
    make( _BlockName,  new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock( $_BlockName,  $new_InstList) }
  }

  %op Strategy _Match(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._Match))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Match)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._Match)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._Match($arg0, $arg1) }
  }
  
  %op Strategy When_Match(s:Strategy) {
    make(s) { `Sequence(Is_Match(),s) }
  }

  %op Strategy Is_Match() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Match()}
  }
  
  %op Strategy Make_Match(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_Match)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Match)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_Match)$t).getChildAt(1) }
    make( new_ConstraintInstructionList,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Match( $new_ConstraintInstructionList,  $new_Option) }
  }

  %op Strategy _CompiledMatch(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch($arg0, $arg1) }
  }
  
  %op Strategy When_CompiledMatch(s:Strategy) {
    make(s) { `Sequence(Is_CompiledMatch(),s) }
  }

  %op Strategy Is_CompiledMatch() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledMatch()}
  }
  
  %op Strategy Make_CompiledMatch(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch)$t).getChildAt(1) }
    make( new_AutomataInst,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch( $new_AutomataInst,  $new_Option) }
  }

  %op Strategy _CompiledPattern(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern($arg0, $arg1) }
  }
  
  %op Strategy When_CompiledPattern(s:Strategy) {
    make(s) { `Sequence(Is_CompiledPattern(),s) }
  }

  %op Strategy Is_CompiledPattern() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledPattern()}
  }
  
  %op Strategy Make_CompiledPattern(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern)$t).getChildAt(1) }
    make( new_Contraint,  new_AutomataInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern( $new_Contraint,  $new_AutomataInst) }
  }

  %op Strategy _RawAction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._RawAction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._RawAction)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._RawAction($arg0) }
  }
  
  %op Strategy When_RawAction(s:Strategy) {
    make(s) { `Sequence(Is_RawAction(),s) }
  }

  %op Strategy Is_RawAction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_RawAction()}
  }
  
  %op Strategy Make_RawAction(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction)$t).getChildAt(0) }
    make( new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction( $new_AstInstruction) }
  }

  %op Strategy _TypedAction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction._TypedAction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._TypedAction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._TypedAction)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction._TypedAction)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._TypedAction($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_TypedAction(s:Strategy) {
    make(s) { `Sequence(Is_TypedAction(),s) }
  }

  %op Strategy Is_TypedAction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TypedAction()}
  }
  
  %op Strategy Make_TypedAction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction)$t).getChildAt(2) }
    make( new_AstInstruction,  new_PositivePattern,  new_NegativePatternList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction( $new_AstInstruction,  $new_PositivePattern,  $new_NegativePatternList) }
  }

  %op Strategy _EmptyconcInstruction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction))}
    
    make() { new tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction() }
  }
  
  %op Strategy When_EmptyconcInstruction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcInstruction(),s) }
  }

  %op Strategy Is_EmptyconcInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Is_EmptyconcInstruction()}
  }
  
  %op Strategy Make_EmptyconcInstruction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction)) }

    make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction() }
  }

  %op Strategy _ConsconcInstruction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcInstruction(),s) }
  }

  %op Strategy Is_ConsconcInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Is_ConsconcInstruction()}
  }
  
  %op Strategy Make_ConsconcInstruction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction)$t).getChildAt(1) }
    make( new_HeadconcInstruction,  new_TailconcInstruction) { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction( $new_HeadconcInstruction,  $new_TailconcInstruction) }
  }

  %op Strategy _ConstraintInstruction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.constraintinstruction._ConstraintInstruction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstruction._ConstraintInstruction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstruction._ConstraintInstruction)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstruction._ConstraintInstruction)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.constraintinstruction._ConstraintInstruction($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_ConstraintInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConstraintInstruction(),s) }
  }

  %op Strategy Is_ConstraintInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.constraintinstruction.Is_ConstraintInstruction()}
  }
  
  %op Strategy Make_ConstraintInstruction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.constraintinstruction.Make_ConstraintInstruction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstruction.Make_ConstraintInstruction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstruction.Make_ConstraintInstruction)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstruction.Make_ConstraintInstruction)$t).getChildAt(2) }
    make( new_Constraint,  new_Action,  new_Option) { new tom.engine.adt.tominstruction.strategy.constraintinstruction.Make_ConstraintInstruction( $new_Constraint,  $new_Action,  $new_Option) }
  }

  %op Strategy _EmptyconcConstraintInstruction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.constraintinstructionlist._EmptyconcConstraintInstruction))}
    
    make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist._EmptyconcConstraintInstruction() }
  }
  
  %op Strategy When_EmptyconcConstraintInstruction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcConstraintInstruction(),s) }
  }

  %op Strategy Is_EmptyconcConstraintInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Is_EmptyconcConstraintInstruction()}
  }
  
  %op Strategy Make_EmptyconcConstraintInstruction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_EmptyconcConstraintInstruction)) }

    make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_EmptyconcConstraintInstruction() }
  }

  %op Strategy _ConsconcConstraintInstruction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.constraintinstructionlist._ConsconcConstraintInstruction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstructionlist._ConsconcConstraintInstruction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstructionlist._ConsconcConstraintInstruction)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist._ConsconcConstraintInstruction($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcConstraintInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcConstraintInstruction(),s) }
  }

  %op Strategy Is_ConsconcConstraintInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Is_ConsconcConstraintInstruction()}
  }
  
  %op Strategy Make_ConsconcConstraintInstruction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_ConsconcConstraintInstruction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_ConsconcConstraintInstruction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_ConsconcConstraintInstruction)$t).getChildAt(1) }
    make( new_HeadconcConstraintInstruction,  new_TailconcConstraintInstruction) { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_ConsconcConstraintInstruction( $new_HeadconcConstraintInstruction,  $new_TailconcConstraintInstruction) }
  }

  %op Strategy _EmptyconcTomType() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType))}
    
    make() { new tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType() }
  }
  
  %op Strategy When_EmptyconcTomType(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomType(),s) }
  }

  %op Strategy Is_EmptyconcTomType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Is_EmptyconcTomType()}
  }
  
  %op Strategy Make_EmptyconcTomType() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType)) }

    make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType() }
  }

  %op Strategy _ConsconcTomType(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomType(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomType(),s) }
  }

  %op Strategy Is_ConsconcTomType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Is_ConsconcTomType()}
  }
  
  %op Strategy Make_ConsconcTomType(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType)$t).getChildAt(1) }
    make( new_HeadconcTomType,  new_TailconcTomType) { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType( $new_HeadconcTomType,  $new_TailconcTomType) }
  }

  %op Strategy _Type(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype._Type))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._Type)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._Type)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._Type($arg0, $arg1) }
  }
  
  %op Strategy When_Type(s:Strategy) {
    make(s) { `Sequence(Is_Type(),s) }
  }

  %op Strategy Is_Type() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_Type()}
  }
  
  %op Strategy Make_Type(arg0:String, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype.Make_Type)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_Type)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_Type)$t).getChildAt(1) }
    make( _TomType,  new_TlType) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Type( $_TomType,  $new_TlType) }
  }

  %op Strategy _Codomain(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype._Codomain))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._Codomain)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._Codomain($arg0) }
  }
  
  %op Strategy When_Codomain(s:Strategy) {
    make(s) { `Sequence(Is_Codomain(),s) }
  }

  %op Strategy Is_Codomain() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_Codomain()}
  }
  
  %op Strategy Make_Codomain(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain)$t).getChildAt(0) }
    make( _AstName) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain( $_AstName) }
  }

  %op Strategy _TypesToType(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype._TypesToType))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._TypesToType)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._TypesToType)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._TypesToType($arg0, $arg1) }
  }
  
  %op Strategy When_TypesToType(s:Strategy) {
    make(s) { `Sequence(Is_TypesToType(),s) }
  }

  %op Strategy Is_TypesToType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TypesToType()}
  }
  
  %op Strategy Make_TypesToType(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType)$t).getChildAt(1) }
    make( new_Domain,  new_Codomain) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType( $new_Domain,  $new_Codomain) }
  }

  %op Strategy _TLType(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype._TLType))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._TLType)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TLType($arg0) }
  }
  
  %op Strategy When_TLType(s:Strategy) {
    make(s) { `Sequence(Is_TLType(),s) }
  }

  %op Strategy Is_TLType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TLType()}
  }
  
  %op Strategy Make_TLType(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype.Make_TLType)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_TLType)$t).getChildAt(0) }
    make( _String) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TLType( $_String) }
  }

  %op Strategy _EmptyType() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype._EmptyType))}
    
    make() { new tom.engine.adt.tomtype.strategy.tomtype._EmptyType() }
  }
  
  %op Strategy When_EmptyType(s:Strategy) {
    make(s) { `Sequence(Is_EmptyType(),s) }
  }

  %op Strategy Is_EmptyType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_EmptyType()}
  }
  
  %op Strategy Make_EmptyType() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType)) }

    make() { new tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType() }
  }

  %op Strategy _TypeWithSymbol(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype._TypeWithSymbol))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._TypeWithSymbol)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._TypeWithSymbol)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype._TypeWithSymbol)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomtype.strategy.tomtype._TypeWithSymbol($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_TypeWithSymbol(s:Strategy) {
    make(s) { `Sequence(Is_TypeWithSymbol(),s) }
  }

  %op Strategy Is_TypeWithSymbol() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TypeWithSymbol()}
  }
  
  %op Strategy Make_TypeWithSymbol(arg0:String, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomtype.strategy.tomtype.Make_TypeWithSymbol)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_TypeWithSymbol)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_TypeWithSymbol)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomtype.strategy.tomtype.Make_TypeWithSymbol)$t).getChildAt(2) }
    make( _TomType,  new_TlType,  new_RootSymbolName) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypeWithSymbol( $_TomType,  $new_TlType,  $new_RootSymbolName) }
  }

  %op Strategy _EmptyconcTomSymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol))}
    
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol() }
  }
  
  %op Strategy When_EmptyconcTomSymbol(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomSymbol(),s) }
  }

  %op Strategy Is_EmptyconcTomSymbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_EmptyconcTomSymbol()}
  }
  
  %op Strategy Make_EmptyconcTomSymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol)) }

    make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol() }
  }

  %op Strategy _ConsconcTomSymbol(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomSymbol(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomSymbol(),s) }
  }

  %op Strategy Is_ConsconcTomSymbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_ConsconcTomSymbol()}
  }
  
  %op Strategy Make_ConsconcTomSymbol(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol)$t).getChildAt(1) }
    make( new_HeadconcTomSymbol,  new_TailconcTomSymbol) { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol( $new_HeadconcTomSymbol,  $new_TailconcTomSymbol) }
  }

  %op Strategy _VisitTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_VisitTerm(s:Strategy) {
    make(s) { `Sequence(Is_VisitTerm(),s) }
  }

  %op Strategy Is_VisitTerm() {
    make() { new tom.engine.adt.tomsignature.strategy.tomvisit.Is_VisitTerm()}
  }
  
  %op Strategy Make_VisitTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm)$t).getChildAt(2) }
    make( new_VNode,  new_AstConstraintInstructionList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm( $new_VNode,  $new_AstConstraintInstructionList,  $new_Option) }
  }

  %op Strategy _StructTable(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable($arg0) }
  }
  
  %op Strategy When_StructTable(s:Strategy) {
    make(s) { `Sequence(Is_StructTable(),s) }
  }

  %op Strategy Is_StructTable() {
    make() { new tom.engine.adt.tomsignature.strategy.tomstructuretable.Is_StructTable()}
  }
  
  %op Strategy Make_StructTable(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable)$t).getChildAt(0) }
    make( new_StructList) { new tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable( $new_StructList) }
  }

  %op Strategy _TextPosition(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.textposition._TextPosition))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.textposition._TextPosition)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.textposition._TextPosition)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.textposition._TextPosition($arg0, $arg1) }
  }
  
  %op Strategy When_TextPosition(s:Strategy) {
    make(s) { `Sequence(Is_TextPosition(),s) }
  }

  %op Strategy Is_TextPosition() {
    make() { new tom.engine.adt.tomsignature.strategy.textposition.Is_TextPosition()}
  }
  
  %op Strategy Make_TextPosition(arg0:int, arg1:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.textposition.Make_TextPosition)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.textposition.Make_TextPosition)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.textposition.Make_TextPosition)$t).getChildAt(1) }
    make( _Line,  _Column) { new tom.engine.adt.tomsignature.strategy.textposition.Make_TextPosition( $_Line,  $_Column) }
  }

  %op Strategy _Entry(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomentry._Entry))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentry._Entry)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentry._Entry)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentry._Entry($arg0, $arg1) }
  }
  
  %op Strategy When_Entry(s:Strategy) {
    make(s) { `Sequence(Is_Entry(),s) }
  }

  %op Strategy Is_Entry() {
    make() { new tom.engine.adt.tomsignature.strategy.tomentry.Is_Entry()}
  }
  
  %op Strategy Make_Entry(arg0:String, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry)$t).getChildAt(1) }
    make( _StrName,  new_AstSymbol) { new tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry( $_StrName,  $new_AstSymbol) }
  }

  %op Strategy _EmptyconcTomEntry() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry))}
    
    make() { new tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry() }
  }
  
  %op Strategy When_EmptyconcTomEntry(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomEntry(),s) }
  }

  %op Strategy Is_EmptyconcTomEntry() {
    make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Is_EmptyconcTomEntry()}
  }
  
  %op Strategy Make_EmptyconcTomEntry() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry)) }

    make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry() }
  }

  %op Strategy _ConsconcTomEntry(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomEntry(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomEntry(),s) }
  }

  %op Strategy Is_ConsconcTomEntry() {
    make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Is_ConsconcTomEntry()}
  }
  
  %op Strategy Make_ConsconcTomEntry(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry)$t).getChildAt(1) }
    make( new_HeadconcTomEntry,  new_TailconcTomEntry) { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry( $new_HeadconcTomEntry,  $new_TailconcTomEntry) }
  }

  %op Strategy _EmptyconcTomVisit() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit))}
    
    make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit() }
  }
  
  %op Strategy When_EmptyconcTomVisit(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomVisit(),s) }
  }

  %op Strategy Is_EmptyconcTomVisit() {
    make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_EmptyconcTomVisit()}
  }
  
  %op Strategy Make_EmptyconcTomVisit() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit)) }

    make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit() }
  }

  %op Strategy _ConsconcTomVisit(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomVisit(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomVisit(),s) }
  }

  %op Strategy Is_ConsconcTomVisit() {
    make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_ConsconcTomVisit()}
  }
  
  %op Strategy Make_ConsconcTomVisit(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit)$t).getChildAt(1) }
    make( new_HeadconcTomVisit,  new_TailconcTomVisit) { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit( $new_HeadconcTomVisit,  $new_TailconcTomVisit) }
  }

  %op Strategy _TL(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage._TL))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage._TL)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage._TL)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage._TL)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.targetlanguage._TL($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_TL(s:Strategy) {
    make(s) { `Sequence(Is_TL(),s) }
  }

  %op Strategy Is_TL() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_TL()}
  }
  
  %op Strategy Make_TL(arg0:String, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL)$t).getChildAt(2) }
    make( _Code,  new_Start,  new_End) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL( $_Code,  $new_Start,  $new_End) }
  }

  %op Strategy _ITL(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage._ITL))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage._ITL)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._ITL($arg0) }
  }
  
  %op Strategy When_ITL(s:Strategy) {
    make(s) { `Sequence(Is_ITL(),s) }
  }

  %op Strategy Is_ITL() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_ITL()}
  }
  
  %op Strategy Make_ITL(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL)$t).getChildAt(0) }
    make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL( $_Code) }
  }

  %op Strategy _Comment(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage._Comment))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage._Comment)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._Comment($arg0) }
  }
  
  %op Strategy When_Comment(s:Strategy) {
    make(s) { `Sequence(Is_Comment(),s) }
  }

  %op Strategy Is_Comment() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_Comment()}
  }
  
  %op Strategy Make_Comment(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment)$t).getChildAt(0) }
    make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment( $_Code) }
  }

  %op Strategy _noTL() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage._noTL))}
    
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage._noTL() }
  }
  
  %op Strategy When_noTL(s:Strategy) {
    make(s) { `Sequence(Is_noTL(),s) }
  }

  %op Strategy Is_noTL() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_noTL()}
  }
  
  %op Strategy Make_noTL() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL)) }

    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL() }
  }

  %op Strategy _Table(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymboltable._Table))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymboltable._Table)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.tomsymboltable._Table($arg0) }
  }
  
  %op Strategy When_Table(s:Strategy) {
    make(s) { `Sequence(Is_Table(),s) }
  }

  %op Strategy Is_Table() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymboltable.Is_Table()}
  }
  
  %op Strategy Make_Table(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table)$t).getChildAt(0) }
    make( new_EntryList) { new tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table( $new_EntryList) }
  }

  %op Strategy _emptySymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol))}
    
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol() }
  }
  
  %op Strategy When_emptySymbol(s:Strategy) {
    make(s) { `Sequence(Is_emptySymbol(),s) }
  }

  %op Strategy Is_emptySymbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Is_emptySymbol()}
  }
  
  %op Strategy Make_emptySymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol)) }

    make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol() }
  }

  %op Strategy _Symbol(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_Symbol(s:Strategy) {
    make(s) { `Sequence(Is_Symbol(),s) }
  }

  %op Strategy Is_Symbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Is_Symbol()}
  }
  
  %op Strategy Make_Symbol(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol)$t).getChildAt(3) }
    make( new_AstName,  new_TypesToType,  new_PairNameDeclList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol( $new_AstName,  $new_TypesToType,  $new_PairNameDeclList,  $new_Option) }
  }

  %op Strategy _UsedSymbolConstructor(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor($arg0) }
  }
  
  %op Strategy When_UsedSymbolConstructor(s:Strategy) {
    make(s) { `Sequence(Is_UsedSymbolConstructor(),s) }
  }

  %op Strategy Is_UsedSymbolConstructor() {
    make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolConstructor()}
  }
  
  %op Strategy Make_UsedSymbolConstructor(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor)$t).getChildAt(0) }
    make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor( $new_Symbol) }
  }

  %op Strategy _UsedSymbolDestructor(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor($arg0) }
  }
  
  %op Strategy When_UsedSymbolDestructor(s:Strategy) {
    make(s) { `Sequence(Is_UsedSymbolDestructor(),s) }
  }

  %op Strategy Is_UsedSymbolDestructor() {
    make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolDestructor()}
  }
  
  %op Strategy Make_UsedSymbolDestructor(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor)$t).getChildAt(0) }
    make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor( $new_Symbol) }
  }

  %op Strategy _UsedSymbolAC(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolAC))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolAC)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolAC($arg0) }
  }
  
  %op Strategy When_UsedSymbolAC(s:Strategy) {
    make(s) { `Sequence(Is_UsedSymbolAC(),s) }
  }

  %op Strategy Is_UsedSymbolAC() {
    make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolAC()}
  }
  
  %op Strategy Make_UsedSymbolAC(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolAC)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolAC)$t).getChildAt(0) }
    make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolAC( $new_Symbol) }
  }

  %op Strategy _UsedType(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry._UsedType))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry._UsedType)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedType($arg0) }
  }
  
  %op Strategy When_UsedType(s:Strategy) {
    make(s) { `Sequence(Is_UsedType(),s) }
  }

  %op Strategy Is_UsedType() {
    make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedType()}
  }
  
  %op Strategy Make_UsedType(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedType)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedType)$t).getChildAt(0) }
    make( new_Typedef) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedType( $new_Typedef) }
  }

  %op Strategy _Syntactic() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory._Syntactic))}
    
    make() { new tom.engine.adt.theory.strategy.elementarytheory._Syntactic() }
  }
  
  %op Strategy When_Syntactic(s:Strategy) {
    make(s) { `Sequence(Is_Syntactic(),s) }
  }

  %op Strategy Is_Syntactic() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_Syntactic()}
  }
  
  %op Strategy Make_Syntactic() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory.Make_Syntactic)) }

    make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Syntactic() }
  }

  %op Strategy _Associative() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory._Associative))}
    
    make() { new tom.engine.adt.theory.strategy.elementarytheory._Associative() }
  }
  
  %op Strategy When_Associative(s:Strategy) {
    make(s) { `Sequence(Is_Associative(),s) }
  }

  %op Strategy Is_Associative() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_Associative()}
  }
  
  %op Strategy Make_Associative() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory.Make_Associative)) }

    make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Associative() }
  }

  %op Strategy _Unitary() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory._Unitary))}
    
    make() { new tom.engine.adt.theory.strategy.elementarytheory._Unitary() }
  }
  
  %op Strategy When_Unitary(s:Strategy) {
    make(s) { `Sequence(Is_Unitary(),s) }
  }

  %op Strategy Is_Unitary() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_Unitary()}
  }
  
  %op Strategy Make_Unitary() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory.Make_Unitary)) }

    make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Unitary() }
  }

  %op Strategy _AC() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory._AC))}
    
    make() { new tom.engine.adt.theory.strategy.elementarytheory._AC() }
  }
  
  %op Strategy When_AC(s:Strategy) {
    make(s) { `Sequence(Is_AC(),s) }
  }

  %op Strategy Is_AC() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_AC()}
  }
  
  %op Strategy Make_AC() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory.Make_AC)) }

    make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_AC() }
  }

  %op Strategy _AU() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory._AU))}
    
    make() { new tom.engine.adt.theory.strategy.elementarytheory._AU() }
  }
  
  %op Strategy When_AU(s:Strategy) {
    make(s) { `Sequence(Is_AU(),s) }
  }

  %op Strategy Is_AU() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_AU()}
  }
  
  %op Strategy Make_AU() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.elementarytheory.Make_AU)) }

    make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_AU() }
  }

  %op Strategy _EmptyconcElementaryTheory() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.theory._EmptyconcElementaryTheory))}
    
    make() { new tom.engine.adt.theory.strategy.theory._EmptyconcElementaryTheory() }
  }
  
  %op Strategy When_EmptyconcElementaryTheory(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcElementaryTheory(),s) }
  }

  %op Strategy Is_EmptyconcElementaryTheory() {
    make() { new tom.engine.adt.theory.strategy.theory.Is_EmptyconcElementaryTheory()}
  }
  
  %op Strategy Make_EmptyconcElementaryTheory() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.theory.Make_EmptyconcElementaryTheory)) }

    make() { new tom.engine.adt.theory.strategy.theory.Make_EmptyconcElementaryTheory() }
  }

  %op Strategy _ConsconcElementaryTheory(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcElementaryTheory(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcElementaryTheory(),s) }
  }

  %op Strategy Is_ConsconcElementaryTheory() {
    make() { new tom.engine.adt.theory.strategy.theory.Is_ConsconcElementaryTheory()}
  }
  
  %op Strategy Make_ConsconcElementaryTheory(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory)$t).getChildAt(1) }
    make( new_HeadconcElementaryTheory,  new_TailconcElementaryTheory) { new tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory( $new_HeadconcElementaryTheory,  $new_TailconcElementaryTheory) }
  }

  %op Strategy _EmptyconcDeclaration() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration))}
    
    make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration() }
  }
  
  %op Strategy When_EmptyconcDeclaration(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcDeclaration(),s) }
  }

  %op Strategy Is_EmptyconcDeclaration() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_EmptyconcDeclaration()}
  }
  
  %op Strategy Make_EmptyconcDeclaration() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration)) }

    make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration() }
  }

  %op Strategy _ConsconcDeclaration(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcDeclaration(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcDeclaration(),s) }
  }

  %op Strategy Is_ConsconcDeclaration() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_ConsconcDeclaration()}
  }
  
  %op Strategy Make_ConsconcDeclaration(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration)$t).getChildAt(1) }
    make( new_HeadconcDeclaration,  new_TailconcDeclaration) { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration( $new_HeadconcDeclaration,  $new_TailconcDeclaration) }
  }

  %op Strategy _TypeTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_TypeTermDecl(s:Strategy) {
    make(s) { `Sequence(Is_TypeTermDecl(),s) }
  }

  %op Strategy Is_TypeTermDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_TypeTermDecl()}
  }
  
  %op Strategy Make_TypeTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl)$t).getChildAt(2) }
    make( new_AstName,  new_Declarations,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl( $new_AstName,  $new_Declarations,  $new_OrgTrack) }
  }

  %op Strategy _GetImplementationDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_GetImplementationDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetImplementationDecl(),s) }
  }

  %op Strategy Is_GetImplementationDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetImplementationDecl()}
  }
  
  %op Strategy Make_GetImplementationDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl)$t).getChildAt(2) }
    make( new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl( $new_Variable,  $new_Instr,  $new_OrgTrack) }
  }

  %op Strategy _IsFsymDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_IsFsymDecl(s:Strategy) {
    make(s) { `Sequence(Is_IsFsymDecl(),s) }
  }

  %op Strategy Is_IsFsymDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsFsymDecl()}
  }
  
  %op Strategy Make_IsFsymDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl)$t).getChildAt(3) }
    make( new_AstName,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl( $new_AstName,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _GetSlotDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_GetSlotDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetSlotDecl(),s) }
  }

  %op Strategy Is_GetSlotDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSlotDecl()}
  }
  
  %op Strategy Make_GetSlotDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)$t).getChildAt(4) }
    make( new_AstName,  new_SlotName,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl( $new_AstName,  $new_SlotName,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _EqualTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_EqualTermDecl(s:Strategy) {
    make(s) { `Sequence(Is_EqualTermDecl(),s) }
  }

  %op Strategy Is_EqualTermDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_EqualTermDecl()}
  }
  
  %op Strategy Make_EqualTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl)$t).getChildAt(3) }
    make( new_TermArg1,  new_TermArg2,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl( $new_TermArg1,  $new_TermArg2,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _IsSortDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_IsSortDecl(s:Strategy) {
    make(s) { `Sequence(Is_IsSortDecl(),s) }
  }

  %op Strategy Is_IsSortDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsSortDecl()}
  }
  
  %op Strategy Make_IsSortDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl)$t).getChildAt(2) }
    make( new_TermArg,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl( $new_TermArg,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _GetHeadDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_GetHeadDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetHeadDecl(),s) }
  }

  %op Strategy Is_GetHeadDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetHeadDecl()}
  }
  
  %op Strategy Make_GetHeadDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)$t).getChildAt(4) }
    make( new_Opname,  new_Codomain,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl( $new_Opname,  $new_Codomain,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _GetTailDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_GetTailDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetTailDecl(),s) }
  }

  %op Strategy Is_GetTailDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetTailDecl()}
  }
  
  %op Strategy Make_GetTailDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl)$t).getChildAt(3) }
    make( new_Opname,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl( $new_Opname,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _IsEmptyDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_IsEmptyDecl(s:Strategy) {
    make(s) { `Sequence(Is_IsEmptyDecl(),s) }
  }

  %op Strategy Is_IsEmptyDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsEmptyDecl()}
  }
  
  %op Strategy Make_IsEmptyDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl)$t).getChildAt(3) }
    make( new_Opname,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl( $new_Opname,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _MakeEmptyList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_MakeEmptyList(s:Strategy) {
    make(s) { `Sequence(Is_MakeEmptyList(),s) }
  }

  %op Strategy Is_MakeEmptyList() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyList()}
  }
  
  %op Strategy Make_MakeEmptyList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList)$t).getChildAt(2) }
    make( new_AstName,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList( $new_AstName,  $new_Instr,  $new_OrgTrack) }
  }

  %op Strategy _MakeAddList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_MakeAddList(s:Strategy) {
    make(s) { `Sequence(Is_MakeAddList(),s) }
  }

  %op Strategy Is_MakeAddList() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddList()}
  }
  
  %op Strategy Make_MakeAddList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)$t).getChildAt(4) }
    make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList( $new_AstName,  $new_VarElt,  $new_VarList,  $new_Instr,  $new_OrgTrack) }
  }

  %op Strategy _GetElementDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_GetElementDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetElementDecl(),s) }
  }

  %op Strategy Is_GetElementDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetElementDecl()}
  }
  
  %op Strategy Make_GetElementDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)$t).getChildAt(4) }
    make( new_Opname,  new_Variable,  new_Index,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl( $new_Opname,  $new_Variable,  $new_Index,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _GetSizeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_GetSizeDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetSizeDecl(),s) }
  }

  %op Strategy Is_GetSizeDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSizeDecl()}
  }
  
  %op Strategy Make_GetSizeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl)$t).getChildAt(3) }
    make( new_Opname,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl( $new_Opname,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
  }

  %op Strategy _MakeEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_MakeEmptyArray(s:Strategy) {
    make(s) { `Sequence(Is_MakeEmptyArray(),s) }
  }

  %op Strategy Is_MakeEmptyArray() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyArray()}
  }
  
  %op Strategy Make_MakeEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray)$t).getChildAt(3) }
    make( new_AstName,  new_VarSize,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray( $new_AstName,  $new_VarSize,  $new_Instr,  $new_OrgTrack) }
  }

  %op Strategy _MakeAddArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_MakeAddArray(s:Strategy) {
    make(s) { `Sequence(Is_MakeAddArray(),s) }
  }

  %op Strategy Is_MakeAddArray() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddArray()}
  }
  
  %op Strategy Make_MakeAddArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)$t).getChildAt(4) }
    make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray( $new_AstName,  $new_VarElt,  $new_VarList,  $new_Instr,  $new_OrgTrack) }
  }

  %op Strategy _MakeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_MakeDecl(s:Strategy) {
    make(s) { `Sequence(Is_MakeDecl(),s) }
  }

  %op Strategy Is_MakeDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeDecl()}
  }
  
  %op Strategy Make_MakeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)$t).getChildAt(4) }
    make( new_AstName,  new_AstType,  new_Args,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl( $new_AstName,  $new_AstType,  $new_Args,  $new_Instr,  $new_OrgTrack) }
  }

  %op Strategy _Strategy(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._Strategy))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Strategy)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Strategy)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Strategy)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Strategy)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Strategy($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_Strategy(s:Strategy) {
    make(s) { `Sequence(Is_Strategy(),s) }
  }

  %op Strategy Is_Strategy() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_Strategy()}
  }
  
  %op Strategy Make_Strategy(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy)$t).getChildAt(3) }
    make( new_SName,  new_ExtendsTerm,  new_VisitList,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy( $new_SName,  $new_ExtendsTerm,  $new_VisitList,  $new_OrgTrack) }
  }

  %op Strategy _FunctionDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_FunctionDef(s:Strategy) {
    make(s) { `Sequence(Is_FunctionDef(),s) }
  }

  %op Strategy Is_FunctionDef() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_FunctionDef()}
  }
  
  %op Strategy Make_FunctionDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)$t).getChildAt(4) }
    make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef( $new_AstName,  $new_ArgumentList,  $new_Codomain,  $new_ThrowsType,  $new_Instruction) }
  }

  %op Strategy _MethodDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_MethodDef(s:Strategy) {
    make(s) { `Sequence(Is_MethodDef(),s) }
  }

  %op Strategy Is_MethodDef() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MethodDef()}
  }
  
  %op Strategy Make_MethodDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)$t).getChildAt(4) }
    make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef( $new_AstName,  $new_ArgumentList,  $new_Codomain,  $new_ThrowsType,  $new_Instruction) }
  }

  %op Strategy _Class(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._Class))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Class)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Class)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Class)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._Class)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Class($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_Class(s:Strategy) {
    make(s) { `Sequence(Is_Class(),s) }
  }

  %op Strategy Is_Class() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_Class()}
  }
  
  %op Strategy Make_Class(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class)$t).getChildAt(3) }
    make( new_AstName,  new_ExtendsType,  new_SuperTerm,  new_Declaration) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class( $new_AstName,  $new_ExtendsType,  $new_SuperTerm,  $new_Declaration) }
  }

  %op Strategy _IntrospectorClass(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._IntrospectorClass))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IntrospectorClass)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._IntrospectorClass)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomdeclaration.strategy.declaration._IntrospectorClass($arg0, $arg1) }
  }
  
  %op Strategy When_IntrospectorClass(s:Strategy) {
    make(s) { `Sequence(Is_IntrospectorClass(),s) }
  }

  %op Strategy Is_IntrospectorClass() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IntrospectorClass()}
  }
  
  %op Strategy Make_IntrospectorClass(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_IntrospectorClass)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IntrospectorClass)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_IntrospectorClass)$t).getChildAt(1) }
    make( new_AstName,  new_Declaration) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IntrospectorClass( $new_AstName,  $new_Declaration) }
  }

  %op Strategy _SymbolDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl($arg0) }
  }
  
  %op Strategy When_SymbolDecl(s:Strategy) {
    make(s) { `Sequence(Is_SymbolDecl(),s) }
  }

  %op Strategy Is_SymbolDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_SymbolDecl()}
  }
  
  %op Strategy Make_SymbolDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl( $new_AstName) }
  }

  %op Strategy _ListSymbolDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl($arg0) }
  }
  
  %op Strategy When_ListSymbolDecl(s:Strategy) {
    make(s) { `Sequence(Is_ListSymbolDecl(),s) }
  }

  %op Strategy Is_ListSymbolDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_ListSymbolDecl()}
  }
  
  %op Strategy Make_ListSymbolDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl( $new_AstName) }
  }

  %op Strategy _ArraySymbolDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl($arg0) }
  }
  
  %op Strategy When_ArraySymbolDecl(s:Strategy) {
    make(s) { `Sequence(Is_ArraySymbolDecl(),s) }
  }

  %op Strategy Is_ArraySymbolDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_ArraySymbolDecl()}
  }
  
  %op Strategy Make_ArraySymbolDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl( $new_AstName) }
  }

  %op Strategy _EmptyDeclaration() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration))}
    
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration() }
  }
  
  %op Strategy When_EmptyDeclaration(s:Strategy) {
    make(s) { `Sequence(Is_EmptyDeclaration(),s) }
  }

  %op Strategy Is_EmptyDeclaration() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_EmptyDeclaration()}
  }
  
  %op Strategy Make_EmptyDeclaration() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration)) }

    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration() }
  }

  %op Strategy _AbstractDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl($arg0) }
  }
  
  %op Strategy When_AbstractDecl(s:Strategy) {
    make(s) { `Sequence(Is_AbstractDecl(),s) }
  }

  %op Strategy Is_AbstractDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_AbstractDecl()}
  }
  
  %op Strategy Make_AbstractDecl(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl)$t).getChildAt(0) }
    make( new_DeclList) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl( $new_DeclList) }
  }

  %op Strategy _MatchNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._MatchNumber))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._MatchNumber)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._MatchNumber($arg0) }
  }
  
  %op Strategy When_MatchNumber(s:Strategy) {
    make(s) { `Sequence(Is_MatchNumber(),s) }
  }

  %op Strategy Is_MatchNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_MatchNumber()}
  }
  
  %op Strategy Make_MatchNumber(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber( $_Integer) }
  }

  %op Strategy _PatternNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._PatternNumber))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._PatternNumber)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._PatternNumber($arg0) }
  }
  
  %op Strategy When_PatternNumber(s:Strategy) {
    make(s) { `Sequence(Is_PatternNumber(),s) }
  }

  %op Strategy Is_PatternNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_PatternNumber()}
  }
  
  %op Strategy Make_PatternNumber(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber( $_Integer) }
  }

  %op Strategy _ListNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._ListNumber))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._ListNumber)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._ListNumber($arg0) }
  }
  
  %op Strategy When_ListNumber(s:Strategy) {
    make(s) { `Sequence(Is_ListNumber(),s) }
  }

  %op Strategy Is_ListNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_ListNumber()}
  }
  
  %op Strategy Make_ListNumber(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber( $_Integer) }
  }

  %op Strategy _IndexNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._IndexNumber))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._IndexNumber)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._IndexNumber($arg0) }
  }
  
  %op Strategy When_IndexNumber(s:Strategy) {
    make(s) { `Sequence(Is_IndexNumber(),s) }
  }

  %op Strategy Is_IndexNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_IndexNumber()}
  }
  
  %op Strategy Make_IndexNumber(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber( $_Integer) }
  }

  %op Strategy _Begin(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._Begin))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._Begin)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Begin($arg0) }
  }
  
  %op Strategy When_Begin(s:Strategy) {
    make(s) { `Sequence(Is_Begin(),s) }
  }

  %op Strategy Is_Begin() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Begin()}
  }
  
  %op Strategy Make_Begin(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_Begin)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_Begin)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Begin( $_Integer) }
  }

  %op Strategy _End(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._End))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._End)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._End($arg0) }
  }
  
  %op Strategy When_End(s:Strategy) {
    make(s) { `Sequence(Is_End(),s) }
  }

  %op Strategy Is_End() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_End()}
  }
  
  %op Strategy Make_End(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_End)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_End)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_End( $_Integer) }
  }

  %op Strategy _Save(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._Save))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._Save)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Save($arg0) }
  }
  
  %op Strategy When_Save(s:Strategy) {
    make(s) { `Sequence(Is_Save(),s) }
  }

  %op Strategy Is_Save() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Save()}
  }
  
  %op Strategy Make_Save(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_Save)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_Save)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Save( $_Integer) }
  }

  %op Strategy _Position(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._Position))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._Position)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Position($arg0) }
  }
  
  %op Strategy When_Position(s:Strategy) {
    make(s) { `Sequence(Is_Position(),s) }
  }

  %op Strategy Is_Position() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Position()}
  }
  
  %op Strategy Make_Position(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_Position)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_Position)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Position( $_Integer) }
  }

  %op Strategy _AbsVar(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._AbsVar))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._AbsVar)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._AbsVar($arg0) }
  }
  
  %op Strategy When_AbsVar(s:Strategy) {
    make(s) { `Sequence(Is_AbsVar(),s) }
  }

  %op Strategy Is_AbsVar() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_AbsVar()}
  }
  
  %op Strategy Make_AbsVar(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar)$t).getChildAt(0) }
    make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar( $_Integer) }
  }

  %op Strategy _RenamedVar(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._RenamedVar))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._RenamedVar)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._RenamedVar($arg0) }
  }
  
  %op Strategy When_RenamedVar(s:Strategy) {
    make(s) { `Sequence(Is_RenamedVar(),s) }
  }

  %op Strategy Is_RenamedVar() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_RenamedVar()}
  }
  
  %op Strategy Make_RenamedVar(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar( $new_AstName) }
  }

  %op Strategy _NameNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber._NameNumber))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber._NameNumber)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._NameNumber($arg0) }
  }
  
  %op Strategy When_NameNumber(s:Strategy) {
    make(s) { `Sequence(Is_NameNumber(),s) }
  }

  %op Strategy Is_NameNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_NameNumber()}
  }
  
  %op Strategy Make_NameNumber(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber( $new_AstName) }
  }

  %op Strategy _EmptyconcTomNumber() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber))}
    
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber() }
  }
  
  %op Strategy When_EmptyconcTomNumber(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomNumber(),s) }
  }

  %op Strategy Is_EmptyconcTomNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_EmptyconcTomNumber()}
  }
  
  %op Strategy Make_EmptyconcTomNumber() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber)) }

    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber() }
  }

  %op Strategy _ConsconcTomNumber(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomNumber(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomNumber(),s) }
  }

  %op Strategy Is_ConsconcTomNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_ConsconcTomNumber()}
  }
  
  %op Strategy Make_ConsconcTomNumber(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber)$t).getChildAt(1) }
    make( new_HeadconcTomNumber,  new_TailconcTomNumber) { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber( $new_HeadconcTomNumber,  $new_TailconcTomNumber) }
  }

  %op Strategy _EmptyconcTomName() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName))}
    
    make() { new tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName() }
  }
  
  %op Strategy When_EmptyconcTomName(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomName(),s) }
  }

  %op Strategy Is_EmptyconcTomName() {
    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_EmptyconcTomName()}
  }
  
  %op Strategy Make_EmptyconcTomName() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName)) }

    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName() }
  }

  %op Strategy _ConsconcTomName(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomName(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomName(),s) }
  }

  %op Strategy Is_ConsconcTomName() {
    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_ConsconcTomName()}
  }
  
  %op Strategy Make_ConsconcTomName(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName)$t).getChildAt(1) }
    make( new_HeadconcTomName,  new_TailconcTomName) { new tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName( $new_HeadconcTomName,  $new_TailconcTomName) }
  }

  %op Strategy _Name(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname._Name))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomname._Name)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomname._Name($arg0) }
  }
  
  %op Strategy When_Name(s:Strategy) {
    make(s) { `Sequence(Is_Name(),s) }
  }

  %op Strategy Is_Name() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_Name()}
  }
  
  %op Strategy Make_Name(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname.Make_Name)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomname.Make_Name)$t).getChildAt(0) }
    make( _String) { new tom.engine.adt.tomname.strategy.tomname.Make_Name( $_String) }
  }

  %op Strategy _PositionName(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname._PositionName))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomname._PositionName)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomname._PositionName($arg0) }
  }
  
  %op Strategy When_PositionName(s:Strategy) {
    make(s) { `Sequence(Is_PositionName(),s) }
  }

  %op Strategy Is_PositionName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_PositionName()}
  }
  
  %op Strategy Make_PositionName(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname.Make_PositionName)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomname.Make_PositionName)$t).getChildAt(0) }
    make( new_NumberList) { new tom.engine.adt.tomname.strategy.tomname.Make_PositionName( $new_NumberList) }
  }

  %op Strategy _EmptyName() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname._EmptyName))}
    
    make() { new tom.engine.adt.tomname.strategy.tomname._EmptyName() }
  }
  
  %op Strategy When_EmptyName(s:Strategy) {
    make(s) { `Sequence(Is_EmptyName(),s) }
  }

  %op Strategy Is_EmptyName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_EmptyName()}
  }
  
  %op Strategy Make_EmptyName() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname.Make_EmptyName)) }

    make() { new tom.engine.adt.tomname.strategy.tomname.Make_EmptyName() }
  }

  %op Strategy _AntiName(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname._AntiName))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomname._AntiName)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomname.strategy.tomname._AntiName($arg0) }
  }
  
  %op Strategy When_AntiName(s:Strategy) {
    make(s) { `Sequence(Is_AntiName(),s) }
  }

  %op Strategy Is_AntiName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_AntiName()}
  }
  
  %op Strategy Make_AntiName(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomname.strategy.tomname.Make_AntiName)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomname.strategy.tomname.Make_AntiName)$t).getChildAt(0) }
    make( new_Name) { new tom.engine.adt.tomname.strategy.tomname.Make_AntiName( $new_Name) }
  }

  %op Strategy _TomTermToExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression($arg0) }
  }
  
  %op Strategy When_TomTermToExpression(s:Strategy) {
    make(s) { `Sequence(Is_TomTermToExpression(),s) }
  }

  %op Strategy Is_TomTermToExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TomTermToExpression()}
  }
  
  %op Strategy Make_TomTermToExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression)$t).getChildAt(0) }
    make( new_AstTerm) { new tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression( $new_AstTerm) }
  }

  %op Strategy _TomInstructionToExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._TomInstructionToExpression))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._TomInstructionToExpression)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._TomInstructionToExpression($arg0) }
  }
  
  %op Strategy When_TomInstructionToExpression(s:Strategy) {
    make(s) { `Sequence(Is_TomInstructionToExpression(),s) }
  }

  %op Strategy Is_TomInstructionToExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TomInstructionToExpression()}
  }
  
  %op Strategy Make_TomInstructionToExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_TomInstructionToExpression)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_TomInstructionToExpression)$t).getChildAt(0) }
    make( new_Instruction) { new tom.engine.adt.tomexpression.strategy.expression.Make_TomInstructionToExpression( $new_Instruction) }
  }

  %op Strategy _Bottom(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Bottom))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Bottom)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Bottom($arg0) }
  }
  
  %op Strategy When_Bottom(s:Strategy) {
    make(s) { `Sequence(Is_Bottom(),s) }
  }

  %op Strategy Is_Bottom() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Bottom()}
  }
  
  %op Strategy Make_Bottom(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Bottom)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Bottom)$t).getChildAt(0) }
    make( new_TomType) { new tom.engine.adt.tomexpression.strategy.expression.Make_Bottom( $new_TomType) }
  }

  %op Strategy _Negation(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Negation))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Negation)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Negation($arg0) }
  }
  
  %op Strategy When_Negation(s:Strategy) {
    make(s) { `Sequence(Is_Negation(),s) }
  }

  %op Strategy Is_Negation() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Negation()}
  }
  
  %op Strategy Make_Negation(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Negation)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Negation)$t).getChildAt(0) }
    make( new_Arg) { new tom.engine.adt.tomexpression.strategy.expression.Make_Negation( $new_Arg) }
  }

  %op Strategy _And(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._And))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._And)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._And)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._And($arg0, $arg1) }
  }
  
  %op Strategy When_And(s:Strategy) {
    make(s) { `Sequence(Is_And(),s) }
  }

  %op Strategy Is_And() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_And()}
  }
  
  %op Strategy Make_And(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_And)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_And)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_And)$t).getChildAt(1) }
    make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_And( $new_Arg1,  $new_Arg2) }
  }

  %op Strategy _Or(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Or))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Or)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Or)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Or($arg0, $arg1) }
  }
  
  %op Strategy When_Or(s:Strategy) {
    make(s) { `Sequence(Is_Or(),s) }
  }

  %op Strategy Is_Or() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Or()}
  }
  
  %op Strategy Make_Or(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Or)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Or)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Or)$t).getChildAt(1) }
    make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_Or( $new_Arg1,  $new_Arg2) }
  }

  %op Strategy _EmptyOrExpressionDisjunction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._EmptyOrExpressionDisjunction))}
    
    make() { new tom.engine.adt.tomexpression.strategy.expression._EmptyOrExpressionDisjunction() }
  }
  
  %op Strategy When_EmptyOrExpressionDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrExpressionDisjunction(),s) }
  }

  %op Strategy Is_EmptyOrExpressionDisjunction() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EmptyOrExpressionDisjunction()}
  }
  
  %op Strategy Make_EmptyOrExpressionDisjunction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrExpressionDisjunction)) }

    make() { new tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrExpressionDisjunction() }
  }

  %op Strategy _ConsOrExpressionDisjunction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction($arg0, $arg1) }
  }
  
  %op Strategy When_ConsOrExpressionDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrExpressionDisjunction(),s) }
  }

  %op Strategy Is_ConsOrExpressionDisjunction() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_ConsOrExpressionDisjunction()}
  }
  
  %op Strategy Make_ConsOrExpressionDisjunction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction)$t).getChildAt(1) }
    make( new_HeadOrExpressionDisjunction,  new_TailOrExpressionDisjunction) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction( $new_HeadOrExpressionDisjunction,  $new_TailOrExpressionDisjunction) }
  }

  %op Strategy _EmptyOrConnector() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._EmptyOrConnector))}
    
    make() { new tom.engine.adt.tomexpression.strategy.expression._EmptyOrConnector() }
  }
  
  %op Strategy When_EmptyOrConnector(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrConnector(),s) }
  }

  %op Strategy Is_EmptyOrConnector() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EmptyOrConnector()}
  }
  
  %op Strategy Make_EmptyOrConnector() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrConnector)) }

    make() { new tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrConnector() }
  }

  %op Strategy _ConsOrConnector(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._ConsOrConnector))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._ConsOrConnector)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._ConsOrConnector)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._ConsOrConnector($arg0, $arg1) }
  }
  
  %op Strategy When_ConsOrConnector(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrConnector(),s) }
  }

  %op Strategy Is_ConsOrConnector() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_ConsOrConnector()}
  }
  
  %op Strategy Make_ConsOrConnector(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrConnector)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrConnector)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrConnector)$t).getChildAt(1) }
    make( new_HeadOrConnector,  new_TailOrConnector) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrConnector( $new_HeadOrConnector,  $new_TailOrConnector) }
  }

  %op Strategy _GreaterThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GreaterThan))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GreaterThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GreaterThan)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GreaterThan($arg0, $arg1) }
  }
  
  %op Strategy When_GreaterThan(s:Strategy) {
    make(s) { `Sequence(Is_GreaterThan(),s) }
  }

  %op Strategy Is_GreaterThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GreaterThan()}
  }
  
  %op Strategy Make_GreaterThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan)$t).getChildAt(1) }
    make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan( $new_Arg1,  $new_Arg2) }
  }

  %op Strategy _GreaterOrEqualThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GreaterOrEqualThan))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GreaterOrEqualThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GreaterOrEqualThan)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GreaterOrEqualThan($arg0, $arg1) }
  }
  
  %op Strategy When_GreaterOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_GreaterOrEqualThan(),s) }
  }

  %op Strategy Is_GreaterOrEqualThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GreaterOrEqualThan()}
  }
  
  %op Strategy Make_GreaterOrEqualThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GreaterOrEqualThan)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GreaterOrEqualThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GreaterOrEqualThan)$t).getChildAt(1) }
    make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GreaterOrEqualThan( $new_Arg1,  $new_Arg2) }
  }

  %op Strategy _LessThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._LessThan))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._LessThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._LessThan)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._LessThan($arg0, $arg1) }
  }
  
  %op Strategy When_LessThan(s:Strategy) {
    make(s) { `Sequence(Is_LessThan(),s) }
  }

  %op Strategy Is_LessThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_LessThan()}
  }
  
  %op Strategy Make_LessThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_LessThan)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_LessThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_LessThan)$t).getChildAt(1) }
    make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_LessThan( $new_Arg1,  $new_Arg2) }
  }

  %op Strategy _LessOrEqualThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._LessOrEqualThan))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._LessOrEqualThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._LessOrEqualThan)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._LessOrEqualThan($arg0, $arg1) }
  }
  
  %op Strategy When_LessOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_LessOrEqualThan(),s) }
  }

  %op Strategy Is_LessOrEqualThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_LessOrEqualThan()}
  }
  
  %op Strategy Make_LessOrEqualThan(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_LessOrEqualThan)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_LessOrEqualThan)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_LessOrEqualThan)$t).getChildAt(1) }
    make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_LessOrEqualThan( $new_Arg1,  $new_Arg2) }
  }

  %op Strategy _AntiMatchExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._AntiMatchExpression))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._AntiMatchExpression)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._AntiMatchExpression($arg0) }
  }
  
  %op Strategy When_AntiMatchExpression(s:Strategy) {
    make(s) { `Sequence(Is_AntiMatchExpression(),s) }
  }

  %op Strategy Is_AntiMatchExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_AntiMatchExpression()}
  }
  
  %op Strategy Make_AntiMatchExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_AntiMatchExpression)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_AntiMatchExpression)$t).getChildAt(0) }
    make( new_Expression) { new tom.engine.adt.tomexpression.strategy.expression.Make_AntiMatchExpression( $new_Expression) }
  }

  %op Strategy _Conditional(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Conditional))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Conditional)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Conditional)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Conditional)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._Conditional($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_Conditional(s:Strategy) {
    make(s) { `Sequence(Is_Conditional(),s) }
  }

  %op Strategy Is_Conditional() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Conditional()}
  }
  
  %op Strategy Make_Conditional(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Conditional)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Conditional)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Conditional)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Conditional)$t).getChildAt(2) }
    make( new_Cond,  new_Then,  new_Else) { new tom.engine.adt.tomexpression.strategy.expression.Make_Conditional( $new_Cond,  $new_Then,  $new_Else) }
  }

  %op Strategy _TrueTL() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._TrueTL))}
    
    make() { new tom.engine.adt.tomexpression.strategy.expression._TrueTL() }
  }
  
  %op Strategy When_TrueTL(s:Strategy) {
    make(s) { `Sequence(Is_TrueTL(),s) }
  }

  %op Strategy Is_TrueTL() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TrueTL()}
  }
  
  %op Strategy Make_TrueTL() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL)) }

    make() { new tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL() }
  }

  %op Strategy _FalseTL() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._FalseTL))}
    
    make() { new tom.engine.adt.tomexpression.strategy.expression._FalseTL() }
  }
  
  %op Strategy When_FalseTL(s:Strategy) {
    make(s) { `Sequence(Is_FalseTL(),s) }
  }

  %op Strategy Is_FalseTL() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_FalseTL()}
  }
  
  %op Strategy Make_FalseTL() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL)) }

    make() { new tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL() }
  }

  %op Strategy _Integer(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Integer))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Integer)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Integer($arg0) }
  }
  
  %op Strategy When_Integer(s:Strategy) {
    make(s) { `Sequence(Is_Integer(),s) }
  }

  %op Strategy Is_Integer() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Integer()}
  }
  
  %op Strategy Make_Integer(arg0:int) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Integer)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Integer)$t).getChildAt(0) }
    make( _value) { new tom.engine.adt.tomexpression.strategy.expression.Make_Integer( $_value) }
  }

  %op Strategy _EqualTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._EqualTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._EqualTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._EqualTerm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._EqualTerm)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._EqualTerm($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_EqualTerm(s:Strategy) {
    make(s) { `Sequence(Is_EqualTerm(),s) }
  }

  %op Strategy Is_EqualTerm() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EqualTerm()}
  }
  
  %op Strategy Make_EqualTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm)$t).getChildAt(2) }
    make( new_TomType,  new_Kid1,  new_Kid2) { new tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm( $new_TomType,  $new_Kid1,  $new_Kid2) }
  }

  %op Strategy _Cast(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Cast))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Cast)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Cast)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Cast($arg0, $arg1) }
  }
  
  %op Strategy When_Cast(s:Strategy) {
    make(s) { `Sequence(Is_Cast(),s) }
  }

  %op Strategy Is_Cast() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Cast()}
  }
  
  %op Strategy Make_Cast(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Cast)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Cast)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Cast)$t).getChildAt(1) }
    make( new_AstType,  new_Source) { new tom.engine.adt.tomexpression.strategy.expression.Make_Cast( $new_AstType,  $new_Source) }
  }

  %op Strategy _GetSlot(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GetSlot))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSlot)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSlot)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSlot)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSlot)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSlot($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_GetSlot(s:Strategy) {
    make(s) { `Sequence(Is_GetSlot(),s) }
  }

  %op Strategy Is_GetSlot() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSlot()}
  }
  
  %op Strategy Make_GetSlot(arg0:Strategy, arg1:Strategy, arg2:String, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot)$t).getChildAt(3) }
    make( new_Codomain,  new_AstName,  _SlotNameString,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot( $new_Codomain,  $new_AstName,  $_SlotNameString,  $new_Variable) }
  }

  %op Strategy _IsFsym(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._IsFsym))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsFsym)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsFsym)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsFsym($arg0, $arg1) }
  }
  
  %op Strategy When_IsFsym(s:Strategy) {
    make(s) { `Sequence(Is_IsFsym(),s) }
  }

  %op Strategy Is_IsFsym() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsFsym()}
  }
  
  %op Strategy Make_IsFsym(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym)$t).getChildAt(1) }
    make( new_AstName,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym( $new_AstName,  $new_Variable) }
  }

  %op Strategy _GetHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GetHead))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetHead)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetHead)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetHead)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._GetHead($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_GetHead(s:Strategy) {
    make(s) { `Sequence(Is_GetHead(),s) }
  }

  %op Strategy Is_GetHead() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetHead()}
  }
  
  %op Strategy Make_GetHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GetHead)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetHead)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetHead)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetHead)$t).getChildAt(2) }
    make( new_Opname,  new_Codomain,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetHead( $new_Opname,  $new_Codomain,  $new_Variable) }
  }

  %op Strategy _GetTail(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GetTail))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetTail)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetTail)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetTail($arg0, $arg1) }
  }
  
  %op Strategy When_GetTail(s:Strategy) {
    make(s) { `Sequence(Is_GetTail(),s) }
  }

  %op Strategy Is_GetTail() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetTail()}
  }
  
  %op Strategy Make_GetTail(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GetTail)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetTail)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetTail)$t).getChildAt(1) }
    make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetTail( $new_Opname,  $new_Variable) }
  }

  %op Strategy _IsEmptyList(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._IsEmptyList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsEmptyList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsEmptyList)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyList($arg0, $arg1) }
  }
  
  %op Strategy When_IsEmptyList(s:Strategy) {
    make(s) { `Sequence(Is_IsEmptyList(),s) }
  }

  %op Strategy Is_IsEmptyList() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyList()}
  }
  
  %op Strategy Make_IsEmptyList(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList)$t).getChildAt(1) }
    make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList( $new_Opname,  $new_Variable) }
  }

  %op Strategy _IsEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_IsEmptyArray(s:Strategy) {
    make(s) { `Sequence(Is_IsEmptyArray(),s) }
  }

  %op Strategy Is_IsEmptyArray() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyArray()}
  }
  
  %op Strategy Make_IsEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray)$t).getChildAt(2) }
    make( new_Opname,  new_Variable,  new_Index) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray( $new_Opname,  $new_Variable,  $new_Index) }
  }

  %op Strategy _AddOne(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._AddOne))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._AddOne)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._AddOne($arg0) }
  }
  
  %op Strategy When_AddOne(s:Strategy) {
    make(s) { `Sequence(Is_AddOne(),s) }
  }

  %op Strategy Is_AddOne() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_AddOne()}
  }
  
  %op Strategy Make_AddOne(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_AddOne)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_AddOne)$t).getChildAt(0) }
    make( new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_AddOne( $new_Variable) }
  }

  %op Strategy _SubstractOne(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._SubstractOne))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._SubstractOne)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._SubstractOne($arg0) }
  }
  
  %op Strategy When_SubstractOne(s:Strategy) {
    make(s) { `Sequence(Is_SubstractOne(),s) }
  }

  %op Strategy Is_SubstractOne() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_SubstractOne()}
  }
  
  %op Strategy Make_SubstractOne(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_SubstractOne)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_SubstractOne)$t).getChildAt(0) }
    make( new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_SubstractOne( $new_Variable) }
  }

  %op Strategy _Substract(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Substract))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Substract)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Substract)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Substract($arg0, $arg1) }
  }
  
  %op Strategy When_Substract(s:Strategy) {
    make(s) { `Sequence(Is_Substract(),s) }
  }

  %op Strategy Is_Substract() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Substract()}
  }
  
  %op Strategy Make_Substract(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Substract)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Substract)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Substract)$t).getChildAt(1) }
    make( new_Term1,  new_Term2) { new tom.engine.adt.tomexpression.strategy.expression.Make_Substract( $new_Term1,  $new_Term2) }
  }

  %op Strategy _GetSize(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GetSize))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSize)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSize)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetSize($arg0, $arg1) }
  }
  
  %op Strategy When_GetSize(s:Strategy) {
    make(s) { `Sequence(Is_GetSize(),s) }
  }

  %op Strategy Is_GetSize() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSize()}
  }
  
  %op Strategy Make_GetSize(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GetSize)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSize)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSize)$t).getChildAt(1) }
    make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSize( $new_Opname,  $new_Variable) }
  }

  %op Strategy _GetElement(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GetElement))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetElement)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetElement)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetElement)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetElement)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetElement($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_GetElement(s:Strategy) {
    make(s) { `Sequence(Is_GetElement(),s) }
  }

  %op Strategy Is_GetElement() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetElement()}
  }
  
  %op Strategy Make_GetElement(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GetElement)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetElement)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetElement)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetElement)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetElement)$t).getChildAt(3) }
    make( new_Opname,  new_Codomain,  new_Variable,  new_Index) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetElement( $new_Opname,  $new_Codomain,  $new_Variable,  $new_Index) }
  }

  %op Strategy _GetSliceList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GetSliceList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceList)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceList)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceList($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_GetSliceList(s:Strategy) {
    make(s) { `Sequence(Is_GetSliceList(),s) }
  }

  %op Strategy Is_GetSliceList() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceList()}
  }
  
  %op Strategy Make_GetSliceList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList)$t).getChildAt(3) }
    make( new_AstName,  new_VariableBeginAST,  new_VariableEndAST,  new_Tail) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList( $new_AstName,  $new_VariableBeginAST,  $new_VariableEndAST,  $new_Tail) }
  }

  %op Strategy _GetSliceArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._GetSliceArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._GetSliceArray)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceArray($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_GetSliceArray(s:Strategy) {
    make(s) { `Sequence(Is_GetSliceArray(),s) }
  }

  %op Strategy Is_GetSliceArray() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceArray()}
  }
  
  %op Strategy Make_GetSliceArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray)$t).getChildAt(3) }
    make( new_AstName,  new_SubjectListName,  new_VariableBeginAST,  new_VariableEndAST) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray( $new_AstName,  $new_SubjectListName,  $new_VariableBeginAST,  $new_VariableEndAST) }
  }

  %op Strategy _ConstraintToExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._ConstraintToExpression))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._ConstraintToExpression)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._ConstraintToExpression($arg0) }
  }
  
  %op Strategy When_ConstraintToExpression(s:Strategy) {
    make(s) { `Sequence(Is_ConstraintToExpression(),s) }
  }

  %op Strategy Is_ConstraintToExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_ConstraintToExpression()}
  }
  
  %op Strategy Make_ConstraintToExpression(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_ConstraintToExpression)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_ConstraintToExpression)$t).getChildAt(0) }
    make( new_cons) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConstraintToExpression( $new_cons) }
  }

  %op Strategy _ACMatchLoop(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._ACMatchLoop))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._ACMatchLoop)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._ACMatchLoop)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._ACMatchLoop($arg0, $arg1) }
  }
  
  %op Strategy When_ACMatchLoop(s:Strategy) {
    make(s) { `Sequence(Is_ACMatchLoop(),s) }
  }

  %op Strategy Is_ACMatchLoop() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_ACMatchLoop()}
  }
  
  %op Strategy Make_ACMatchLoop(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_ACMatchLoop)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_ACMatchLoop)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_ACMatchLoop)$t).getChildAt(1) }
    make( new_Pattern,  new_Subject) { new tom.engine.adt.tomexpression.strategy.expression.Make_ACMatchLoop( $new_Pattern,  $new_Subject) }
  }

  %op Strategy _DoWhileExpression(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression($arg0, $arg1) }
  }
  
  %op Strategy When_DoWhileExpression(s:Strategy) {
    make(s) { `Sequence(Is_DoWhileExpression(),s) }
  }

  %op Strategy Is_DoWhileExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_DoWhileExpression()}
  }
  
  %op Strategy Make_DoWhileExpression(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression)$t).getChildAt(1) }
    make( new_EndExpression,  new_LoopCondition) { new tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression( $new_EndExpression,  $new_LoopCondition) }
  }

  %op Strategy _IfExpression(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._IfExpression))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IfExpression)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IfExpression)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IfExpression)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._IfExpression($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_IfExpression(s:Strategy) {
    make(s) { `Sequence(Is_IfExpression(),s) }
  }

  %op Strategy Is_IfExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IfExpression()}
  }
  
  %op Strategy Make_IfExpression(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression)$t).getChildAt(2) }
    make( new_Condition,  new_ThenExpression,  new_ElseExpression) { new tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression( $new_Condition,  $new_ThenExpression,  $new_ElseExpression) }
  }

  %op Strategy _IsSort(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._IsSort))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsSort)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._IsSort)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsSort($arg0, $arg1) }
  }
  
  %op Strategy When_IsSort(s:Strategy) {
    make(s) { `Sequence(Is_IsSort(),s) }
  }

  %op Strategy Is_IsSort() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsSort()}
  }
  
  %op Strategy Make_IsSort(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_IsSort)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsSort)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_IsSort)$t).getChildAt(1) }
    make( new_AstType,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsSort( $new_AstType,  $new_Variable) }
  }

  %op Strategy _Code(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression._Code))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression._Code)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Code($arg0) }
  }
  
  %op Strategy When_Code(s:Strategy) {
    make(s) { `Sequence(Is_Code(),s) }
  }

  %op Strategy Is_Code() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Code()}
  }
  
  %op Strategy Make_Code(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomexpression.strategy.expression.Make_Code)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomexpression.strategy.expression.Make_Code)$t).getChildAt(0) }
    make( _Code) { new tom.engine.adt.tomexpression.strategy.expression.Make_Code( $_Code) }
  }

  %op Strategy _NumLessThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessThan))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessThan() }
  }
  
  %op Strategy When_NumLessThan(s:Strategy) {
    make(s) { `Sequence(Is_NumLessThan(),s) }
  }

  %op Strategy Is_NumLessThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumLessThan()}
  }
  
  %op Strategy Make_NumLessThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessThan)) }

    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessThan() }
  }

  %op Strategy _NumLessOrEqualThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessOrEqualThan))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessOrEqualThan() }
  }
  
  %op Strategy When_NumLessOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_NumLessOrEqualThan(),s) }
  }

  %op Strategy Is_NumLessOrEqualThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumLessOrEqualThan()}
  }
  
  %op Strategy Make_NumLessOrEqualThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessOrEqualThan)) }

    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessOrEqualThan() }
  }

  %op Strategy _NumGreaterThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterThan))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterThan() }
  }
  
  %op Strategy When_NumGreaterThan(s:Strategy) {
    make(s) { `Sequence(Is_NumGreaterThan(),s) }
  }

  %op Strategy Is_NumGreaterThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumGreaterThan()}
  }
  
  %op Strategy Make_NumGreaterThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterThan)) }

    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterThan() }
  }

  %op Strategy _NumGreaterOrEqualThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterOrEqualThan))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterOrEqualThan() }
  }
  
  %op Strategy When_NumGreaterOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_NumGreaterOrEqualThan(),s) }
  }

  %op Strategy Is_NumGreaterOrEqualThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumGreaterOrEqualThan()}
  }
  
  %op Strategy Make_NumGreaterOrEqualThan() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterOrEqualThan)) }

    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterOrEqualThan() }
  }

  %op Strategy _NumDifferent() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumDifferent))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumDifferent() }
  }
  
  %op Strategy When_NumDifferent(s:Strategy) {
    make(s) { `Sequence(Is_NumDifferent(),s) }
  }

  %op Strategy Is_NumDifferent() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumDifferent()}
  }
  
  %op Strategy Make_NumDifferent() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumDifferent)) }

    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumDifferent() }
  }

  %op Strategy _NumEqual() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumEqual))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumEqual() }
  }
  
  %op Strategy When_NumEqual(s:Strategy) {
    make(s) { `Sequence(Is_NumEqual(),s) }
  }

  %op Strategy Is_NumEqual() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumEqual()}
  }
  
  %op Strategy Make_NumEqual() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumEqual)) }

    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumEqual() }
  }

  %op Strategy _AssignTo(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._AssignTo))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._AssignTo)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AssignTo($arg0) }
  }
  
  %op Strategy When_AssignTo(s:Strategy) {
    make(s) { `Sequence(Is_AssignTo(),s) }
  }

  %op Strategy Is_AssignTo() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AssignTo()}
  }
  
  %op Strategy Make_AssignTo(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo)$t).getChildAt(0) }
    make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo( $new_Variable) }
  }

  %op Strategy _AssignPositionTo(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._AssignPositionTo))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._AssignPositionTo)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AssignPositionTo($arg0) }
  }
  
  %op Strategy When_AssignPositionTo(s:Strategy) {
    make(s) { `Sequence(Is_AssignPositionTo(),s) }
  }

  %op Strategy Is_AssignPositionTo() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AssignPositionTo()}
  }
  
  %op Strategy Make_AssignPositionTo(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignPositionTo)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignPositionTo)$t).getChildAt(0) }
    make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignPositionTo( $new_Variable) }
  }

  %op Strategy _TrueConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint() }
  }
  
  %op Strategy When_TrueConstraint(s:Strategy) {
    make(s) { `Sequence(Is_TrueConstraint(),s) }
  }

  %op Strategy Is_TrueConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_TrueConstraint()}
  }
  
  %op Strategy Make_TrueConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint)) }

    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint() }
  }

  %op Strategy _FalseConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint() }
  }
  
  %op Strategy When_FalseConstraint(s:Strategy) {
    make(s) { `Sequence(Is_FalseConstraint(),s) }
  }

  %op Strategy Is_FalseConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_FalseConstraint()}
  }
  
  %op Strategy Make_FalseConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint)) }

    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint() }
  }

  %op Strategy _Negate(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._Negate))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._Negate)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._Negate($arg0) }
  }
  
  %op Strategy When_Negate(s:Strategy) {
    make(s) { `Sequence(Is_Negate(),s) }
  }

  %op Strategy Is_Negate() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_Negate()}
  }
  
  %op Strategy Make_Negate(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_Negate)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_Negate)$t).getChildAt(0) }
    make( new_c) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_Negate( $new_c) }
  }

  %op Strategy _IsSortConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._IsSortConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._IsSortConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._IsSortConstraint)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._IsSortConstraint($arg0, $arg1) }
  }
  
  %op Strategy When_IsSortConstraint(s:Strategy) {
    make(s) { `Sequence(Is_IsSortConstraint(),s) }
  }

  %op Strategy Is_IsSortConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_IsSortConstraint()}
  }
  
  %op Strategy Make_IsSortConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_IsSortConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_IsSortConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_IsSortConstraint)$t).getChildAt(1) }
    make( new_AstType,  new_TomTerm) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_IsSortConstraint( $new_AstType,  $new_TomTerm) }
  }

  %op Strategy _EmptyAndConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._EmptyAndConstraint))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyAndConstraint() }
  }
  
  %op Strategy When_EmptyAndConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyAndConstraint(),s) }
  }

  %op Strategy Is_EmptyAndConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyAndConstraint()}
  }
  
  %op Strategy Make_EmptyAndConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyAndConstraint)) }

    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyAndConstraint() }
  }

  %op Strategy _ConsAndConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint($arg0, $arg1) }
  }
  
  %op Strategy When_ConsAndConstraint(s:Strategy) {
    make(s) { `Sequence(Is_ConsAndConstraint(),s) }
  }

  %op Strategy Is_ConsAndConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_ConsAndConstraint()}
  }
  
  %op Strategy Make_ConsAndConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint)$t).getChildAt(1) }
    make( new_HeadAndConstraint,  new_TailAndConstraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint( $new_HeadAndConstraint,  $new_TailAndConstraint) }
  }

  %op Strategy _EmptyOrConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraint))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraint() }
  }
  
  %op Strategy When_EmptyOrConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrConstraint(),s) }
  }

  %op Strategy Is_EmptyOrConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyOrConstraint()}
  }
  
  %op Strategy Make_EmptyOrConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraint)) }

    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraint() }
  }

  %op Strategy _ConsOrConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint($arg0, $arg1) }
  }
  
  %op Strategy When_ConsOrConstraint(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrConstraint(),s) }
  }

  %op Strategy Is_ConsOrConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_ConsOrConstraint()}
  }
  
  %op Strategy Make_ConsOrConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint)$t).getChildAt(1) }
    make( new_HeadOrConstraint,  new_TailOrConstraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint( $new_HeadOrConstraint,  $new_TailOrConstraint) }
  }

  %op Strategy _EmptyOrConstraintDisjunction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraintDisjunction))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraintDisjunction() }
  }
  
  %op Strategy When_EmptyOrConstraintDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrConstraintDisjunction(),s) }
  }

  %op Strategy Is_EmptyOrConstraintDisjunction() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyOrConstraintDisjunction()}
  }
  
  %op Strategy Make_EmptyOrConstraintDisjunction() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraintDisjunction)) }

    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraintDisjunction() }
  }

  %op Strategy _ConsOrConstraintDisjunction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction($arg0, $arg1) }
  }
  
  %op Strategy When_ConsOrConstraintDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrConstraintDisjunction(),s) }
  }

  %op Strategy Is_ConsOrConstraintDisjunction() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_ConsOrConstraintDisjunction()}
  }
  
  %op Strategy Make_ConsOrConstraintDisjunction(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction)$t).getChildAt(1) }
    make( new_HeadOrConstraintDisjunction,  new_TailOrConstraintDisjunction) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction( $new_HeadOrConstraintDisjunction,  $new_TailOrConstraintDisjunction) }
  }

  %op Strategy _MatchConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint($arg0, $arg1) }
  }
  
  %op Strategy When_MatchConstraint(s:Strategy) {
    make(s) { `Sequence(Is_MatchConstraint(),s) }
  }

  %op Strategy Is_MatchConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_MatchConstraint()}
  }
  
  %op Strategy Make_MatchConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint)$t).getChildAt(1) }
    make( new_Pattern,  new_Subject) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint( $new_Pattern,  $new_Subject) }
  }

  %op Strategy _AntiMatchConstraint(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._AntiMatchConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._AntiMatchConstraint)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AntiMatchConstraint($arg0) }
  }
  
  %op Strategy When_AntiMatchConstraint(s:Strategy) {
    make(s) { `Sequence(Is_AntiMatchConstraint(),s) }
  }

  %op Strategy Is_AntiMatchConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AntiMatchConstraint()}
  }
  
  %op Strategy Make_AntiMatchConstraint(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_AntiMatchConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_AntiMatchConstraint)$t).getChildAt(0) }
    make( new_Constraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AntiMatchConstraint( $new_Constraint) }
  }

  %op Strategy _NumericConstraint(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._NumericConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._NumericConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._NumericConstraint)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._NumericConstraint)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomconstraint.strategy.constraint._NumericConstraint($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_NumericConstraint(s:Strategy) {
    make(s) { `Sequence(Is_NumericConstraint(),s) }
  }

  %op Strategy Is_NumericConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_NumericConstraint()}
  }
  
  %op Strategy Make_NumericConstraint(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_NumericConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_NumericConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_NumericConstraint)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_NumericConstraint)$t).getChildAt(2) }
    make( new_Pattern,  new_Subject,  new_Type) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_NumericConstraint( $new_Pattern,  $new_Subject,  $new_Type) }
  }

  %op Strategy _EmptyListConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint($arg0, $arg1) }
  }
  
  %op Strategy When_EmptyListConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyListConstraint(),s) }
  }

  %op Strategy Is_EmptyListConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyListConstraint()}
  }
  
  %op Strategy Make_EmptyListConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint)$t).getChildAt(1) }
    make( new_Opname,  new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint( $new_Opname,  $new_Variable) }
  }

  %op Strategy _EmptyArrayConstraint(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_EmptyArrayConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyArrayConstraint(),s) }
  }

  %op Strategy Is_EmptyArrayConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyArrayConstraint()}
  }
  
  %op Strategy Make_EmptyArrayConstraint(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint)$t).getChildAt(2) }
    make( new_Opname,  new_Variable,  new_Index) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint( $new_Opname,  $new_Variable,  $new_Index) }
  }

  %op Strategy _EmptyconcConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint))}
    
    make() { new tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint() }
  }
  
  %op Strategy When_EmptyconcConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcConstraint(),s) }
  }

  %op Strategy Is_EmptyconcConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Is_EmptyconcConstraint()}
  }
  
  %op Strategy Make_EmptyconcConstraint() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint)) }

    make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint() }
  }

  %op Strategy _ConsconcConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcConstraint(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcConstraint(),s) }
  }

  %op Strategy Is_ConsconcConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Is_ConsconcConstraint()}
  }
  
  %op Strategy Make_ConsconcConstraint(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint)$t).getChildAt(1) }
    make( new_HeadconcConstraint,  new_TailconcConstraint) { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint( $new_HeadconcConstraint,  $new_TailconcConstraint) }
  }

  %op Strategy _DeclarationToOption(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._DeclarationToOption))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._DeclarationToOption)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._DeclarationToOption($arg0) }
  }
  
  %op Strategy When_DeclarationToOption(s:Strategy) {
    make(s) { `Sequence(Is_DeclarationToOption(),s) }
  }

  %op Strategy Is_DeclarationToOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_DeclarationToOption()}
  }
  
  %op Strategy Make_DeclarationToOption(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption)$t).getChildAt(0) }
    make( new_AstDeclaration) { new tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption( $new_AstDeclaration) }
  }

  %op Strategy _TomNameToOption(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._TomNameToOption))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._TomNameToOption)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomNameToOption($arg0) }
  }
  
  %op Strategy When_TomNameToOption(s:Strategy) {
    make(s) { `Sequence(Is_TomNameToOption(),s) }
  }

  %op Strategy Is_TomNameToOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_TomNameToOption()}
  }
  
  %op Strategy Make_TomNameToOption(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption( $new_AstName) }
  }

  %op Strategy _TomTermToOption(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._TomTermToOption))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._TomTermToOption)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomTermToOption($arg0) }
  }
  
  %op Strategy When_TomTermToOption(s:Strategy) {
    make(s) { `Sequence(Is_TomTermToOption(),s) }
  }

  %op Strategy Is_TomTermToOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_TomTermToOption()}
  }
  
  %op Strategy Make_TomTermToOption(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption)$t).getChildAt(0) }
    make( new_AstTerm) { new tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption( $new_AstTerm) }
  }

  %op Strategy _GeneratedMatch() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._GeneratedMatch))}
    
    make() { new tom.engine.adt.tomoption.strategy.option._GeneratedMatch() }
  }
  
  %op Strategy When_GeneratedMatch(s:Strategy) {
    make(s) { `Sequence(Is_GeneratedMatch(),s) }
  }

  %op Strategy Is_GeneratedMatch() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_GeneratedMatch()}
  }
  
  %op Strategy Make_GeneratedMatch() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch)) }

    make() { new tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch() }
  }

  %op Strategy _OriginTracking(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._OriginTracking))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._OriginTracking)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._OriginTracking)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._OriginTracking)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomoption.strategy.option._OriginTracking($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_OriginTracking(s:Strategy) {
    make(s) { `Sequence(Is_OriginTracking(),s) }
  }

  %op Strategy Is_OriginTracking() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_OriginTracking()}
  }
  
  %op Strategy Make_OriginTracking(arg0:Strategy, arg1:int, arg2:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_OriginTracking)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_OriginTracking)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_OriginTracking)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_OriginTracking)$t).getChildAt(2) }
    make( new_AstName,  _Line,  _FileName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginTracking( $new_AstName,  $_Line,  $_FileName) }
  }

  %op Strategy _OriginalText(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._OriginalText))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._OriginalText)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._OriginalText($arg0) }
  }
  
  %op Strategy When_OriginalText(s:Strategy) {
    make(s) { `Sequence(Is_OriginalText(),s) }
  }

  %op Strategy Is_OriginalText() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_OriginalText()}
  }
  
  %op Strategy Make_OriginalText(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_OriginalText)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_OriginalText)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginalText( $new_AstName) }
  }

  %op Strategy _Constant() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._Constant))}
    
    make() { new tom.engine.adt.tomoption.strategy.option._Constant() }
  }
  
  %op Strategy When_Constant(s:Strategy) {
    make(s) { `Sequence(Is_Constant(),s) }
  }

  %op Strategy Is_Constant() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_Constant()}
  }
  
  %op Strategy Make_Constant() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_Constant)) }

    make() { new tom.engine.adt.tomoption.strategy.option.Make_Constant() }
  }

  %op Strategy _MatchingTheory(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._MatchingTheory))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._MatchingTheory)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._MatchingTheory($arg0) }
  }
  
  %op Strategy When_MatchingTheory(s:Strategy) {
    make(s) { `Sequence(Is_MatchingTheory(),s) }
  }

  %op Strategy Is_MatchingTheory() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_MatchingTheory()}
  }
  
  %op Strategy Make_MatchingTheory(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_MatchingTheory)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_MatchingTheory)$t).getChildAt(0) }
    make( new_Theory) { new tom.engine.adt.tomoption.strategy.option.Make_MatchingTheory( $new_Theory) }
  }

  %op Strategy _Label(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._Label))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._Label)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._Label($arg0) }
  }
  
  %op Strategy When_Label(s:Strategy) {
    make(s) { `Sequence(Is_Label(),s) }
  }

  %op Strategy Is_Label() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_Label()}
  }
  
  %op Strategy Make_Label(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_Label)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_Label)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Label( $new_AstName) }
  }

  %op Strategy _Debug(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._Debug))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._Debug)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._Debug($arg0) }
  }
  
  %op Strategy When_Debug(s:Strategy) {
    make(s) { `Sequence(Is_Debug(),s) }
  }

  %op Strategy Is_Debug() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_Debug()}
  }
  
  %op Strategy Make_Debug(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_Debug)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_Debug)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Debug( $new_AstName) }
  }

  %op Strategy _ModuleName(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._ModuleName))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._ModuleName)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._ModuleName($arg0) }
  }
  
  %op Strategy When_ModuleName(s:Strategy) {
    make(s) { `Sequence(Is_ModuleName(),s) }
  }

  %op Strategy Is_ModuleName() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_ModuleName()}
  }
  
  %op Strategy Make_ModuleName(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_ModuleName)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_ModuleName)$t).getChildAt(0) }
    make( _String) { new tom.engine.adt.tomoption.strategy.option.Make_ModuleName( $_String) }
  }

  %op Strategy _ImplicitXMLAttribut() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut))}
    
    make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut() }
  }
  
  %op Strategy When_ImplicitXMLAttribut(s:Strategy) {
    make(s) { `Sequence(Is_ImplicitXMLAttribut(),s) }
  }

  %op Strategy Is_ImplicitXMLAttribut() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLAttribut()}
  }
  
  %op Strategy Make_ImplicitXMLAttribut() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut)) }

    make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut() }
  }

  %op Strategy _ImplicitXMLChild() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild))}
    
    make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild() }
  }
  
  %op Strategy When_ImplicitXMLChild(s:Strategy) {
    make(s) { `Sequence(Is_ImplicitXMLChild(),s) }
  }

  %op Strategy Is_ImplicitXMLChild() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLChild()}
  }
  
  %op Strategy Make_ImplicitXMLChild() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild)) }

    make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild() }
  }

  %op Strategy _ACSymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._ACSymbol))}
    
    make() { new tom.engine.adt.tomoption.strategy.option._ACSymbol() }
  }
  
  %op Strategy When_ACSymbol(s:Strategy) {
    make(s) { `Sequence(Is_ACSymbol(),s) }
  }

  %op Strategy Is_ACSymbol() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_ACSymbol()}
  }
  
  %op Strategy Make_ACSymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_ACSymbol)) }

    make() { new tom.engine.adt.tomoption.strategy.option.Make_ACSymbol() }
  }

  %op Strategy _noOption() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._noOption))}
    
    make() { new tom.engine.adt.tomoption.strategy.option._noOption() }
  }
  
  %op Strategy When_noOption(s:Strategy) {
    make(s) { `Sequence(Is_noOption(),s) }
  }

  %op Strategy Is_noOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_noOption()}
  }
  
  %op Strategy Make_noOption() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_noOption)) }

    make() { new tom.engine.adt.tomoption.strategy.option.Make_noOption() }
  }

  %op Strategy _DefinedSymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._DefinedSymbol))}
    
    make() { new tom.engine.adt.tomoption.strategy.option._DefinedSymbol() }
  }
  
  %op Strategy When_DefinedSymbol(s:Strategy) {
    make(s) { `Sequence(Is_DefinedSymbol(),s) }
  }

  %op Strategy Is_DefinedSymbol() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_DefinedSymbol()}
  }
  
  %op Strategy Make_DefinedSymbol() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol)) }

    make() { new tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol() }
  }

  %op Strategy _TypeForVariable(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option._TypeForVariable))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option._TypeForVariable)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomoption.strategy.option._TypeForVariable($arg0) }
  }
  
  %op Strategy When_TypeForVariable(s:Strategy) {
    make(s) { `Sequence(Is_TypeForVariable(),s) }
  }

  %op Strategy Is_TypeForVariable() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_TypeForVariable()}
  }
  
  %op Strategy Make_TypeForVariable(arg0:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.option.Make_TypeForVariable)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.option.Make_TypeForVariable)$t).getChildAt(0) }
    make( _String) { new tom.engine.adt.tomoption.strategy.option.Make_TypeForVariable( $_String) }
  }

  %op Strategy _EmptyconcOption() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption))}
    
    make() { new tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption() }
  }
  
  %op Strategy When_EmptyconcOption(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcOption(),s) }
  }

  %op Strategy Is_EmptyconcOption() {
    make() { new tom.engine.adt.tomoption.strategy.optionlist.Is_EmptyconcOption()}
  }
  
  %op Strategy Make_EmptyconcOption() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption)) }

    make() { new tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption() }
  }

  %op Strategy _ConsconcOption(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcOption(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcOption(),s) }
  }

  %op Strategy Is_ConsconcOption() {
    make() { new tom.engine.adt.tomoption.strategy.optionlist.Is_ConsconcOption()}
  }
  
  %op Strategy Make_ConsconcOption(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption)$t).getChildAt(1) }
    make( new_HeadconcOption,  new_TailconcOption) { new tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption( $new_HeadconcOption,  $new_TailconcOption) }
  }

  %op Strategy _EmptyconcTomTerm() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm))}
    
    make() { new tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm() }
  }
  
  %op Strategy When_EmptyconcTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomTerm(),s) }
  }

  %op Strategy Is_EmptyconcTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomlist.Is_EmptyconcTomTerm()}
  }
  
  %op Strategy Make_EmptyconcTomTerm() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm)) }

    make() { new tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm() }
  }

  %op Strategy _ConsconcTomTerm(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomTerm(),s) }
  }

  %op Strategy Is_ConsconcTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomlist.Is_ConsconcTomTerm()}
  }
  
  %op Strategy Make_ConsconcTomTerm(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm)$t).getChildAt(1) }
    make( new_HeadconcTomTerm,  new_TailconcTomTerm) { new tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm( $new_HeadconcTomTerm,  $new_TailconcTomTerm) }
  }

  %op Strategy _TermAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._TermAppl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TermAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TermAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TermAppl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TermAppl)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._TermAppl($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_TermAppl(s:Strategy) {
    make(s) { `Sequence(Is_TermAppl(),s) }
  }

  %op Strategy Is_TermAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TermAppl()}
  }
  
  %op Strategy Make_TermAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl)$t).getChildAt(3) }
    make( new_Option,  new_NameList,  new_Args,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl( $new_Option,  $new_NameList,  $new_Args,  $new_Constraints) }
  }

  %op Strategy _RecordAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._RecordAppl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._RecordAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._RecordAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._RecordAppl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._RecordAppl)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._RecordAppl($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_RecordAppl(s:Strategy) {
    make(s) { `Sequence(Is_RecordAppl(),s) }
  }

  %op Strategy Is_RecordAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_RecordAppl()}
  }
  
  %op Strategy Make_RecordAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl)$t).getChildAt(3) }
    make( new_Option,  new_NameList,  new_Slots,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl( $new_Option,  $new_NameList,  $new_Slots,  $new_Constraints) }
  }

  %op Strategy _XMLAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._XMLAppl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)$t).getChildAt(4) }
    make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomterm.strategy.tomterm._XMLAppl($arg0, $arg1, $arg2, $arg3, $arg4) }
  }
  
  %op Strategy When_XMLAppl(s:Strategy) {
    make(s) { `Sequence(Is_XMLAppl(),s) }
  }

  %op Strategy Is_XMLAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_XMLAppl()}
  }
  
  %op Strategy Make_XMLAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)$t).getChildAt(3) }
        get_slot(arg4, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)$t).getChildAt(4) }
    make( new_Option,  new_NameList,  new_AttrList,  new_ChildList,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl( $new_Option,  $new_NameList,  $new_AttrList,  $new_ChildList,  $new_Constraints) }
  }

  %op Strategy _Variable(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._Variable))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Variable)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Variable)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Variable)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Variable)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Variable($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_Variable(s:Strategy) {
    make(s) { `Sequence(Is_Variable(),s) }
  }

  %op Strategy Is_Variable() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Variable()}
  }
  
  %op Strategy Make_Variable(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_Variable)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Variable)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Variable)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Variable)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Variable)$t).getChildAt(3) }
    make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Variable( $new_Option,  $new_AstName,  $new_AstType,  $new_Constraints) }
  }

  %op Strategy _VariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._VariableStar))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableStar)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableStar)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableStar)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableStar)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._VariableStar($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_VariableStar(s:Strategy) {
    make(s) { `Sequence(Is_VariableStar(),s) }
  }

  %op Strategy Is_VariableStar() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_VariableStar()}
  }
  
  %op Strategy Make_VariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar)$t).getChildAt(3) }
    make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar( $new_Option,  $new_AstName,  $new_AstType,  $new_Constraints) }
  }

  %op Strategy _UnamedVariable(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_UnamedVariable(s:Strategy) {
    make(s) { `Sequence(Is_UnamedVariable(),s) }
  }

  %op Strategy Is_UnamedVariable() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariable()}
  }
  
  %op Strategy Make_UnamedVariable(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable)$t).getChildAt(2) }
    make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable( $new_Option,  $new_AstType,  $new_Constraints) }
  }

  %op Strategy _UnamedVariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_UnamedVariableStar(s:Strategy) {
    make(s) { `Sequence(Is_UnamedVariableStar(),s) }
  }

  %op Strategy Is_UnamedVariableStar() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariableStar()}
  }
  
  %op Strategy Make_UnamedVariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar)$t).getChildAt(2) }
    make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar( $new_Option,  $new_AstType,  $new_Constraints) }
  }

  %op Strategy _VariableHeadList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_VariableHeadList(s:Strategy) {
    make(s) { `Sequence(Is_VariableHeadList(),s) }
  }

  %op Strategy Is_VariableHeadList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_VariableHeadList()}
  }
  
  %op Strategy Make_VariableHeadList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList)$t).getChildAt(2) }
    make( new_Opname,  new_Begin,  new_End) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList( $new_Opname,  $new_Begin,  $new_End) }
  }

  %op Strategy _VariableHeadArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_VariableHeadArray(s:Strategy) {
    make(s) { `Sequence(Is_VariableHeadArray(),s) }
  }

  %op Strategy Is_VariableHeadArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_VariableHeadArray()}
  }
  
  %op Strategy Make_VariableHeadArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray)$t).getChildAt(3) }
    make( new_Opname,  new_Subject,  new_BeginIndex,  new_EndIndex) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray( $new_Opname,  $new_Subject,  $new_BeginIndex,  $new_EndIndex) }
  }

  %op Strategy _TestVar(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._TestVar))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TestVar)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TestVar($arg0) }
  }
  
  %op Strategy When_TestVar(s:Strategy) {
    make(s) { `Sequence(Is_TestVar(),s) }
  }

  %op Strategy Is_TestVar() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TestVar()}
  }
  
  %op Strategy Make_TestVar(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_TestVar)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TestVar)$t).getChildAt(0) }
    make( new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TestVar( $new_Variable) }
  }

  %op Strategy _ListHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._ListHead))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._ListHead)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._ListHead)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._ListHead)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._ListHead($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_ListHead(s:Strategy) {
    make(s) { `Sequence(Is_ListHead(),s) }
  }

  %op Strategy Is_ListHead() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ListHead()}
  }
  
  %op Strategy Make_ListHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead)$t).getChildAt(2) }
    make( new_Opname,  new_Codomain,  new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead( $new_Opname,  $new_Codomain,  $new_Variable) }
  }

  %op Strategy _ListTail(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._ListTail))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._ListTail)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._ListTail)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._ListTail($arg0, $arg1) }
  }
  
  %op Strategy When_ListTail(s:Strategy) {
    make(s) { `Sequence(Is_ListTail(),s) }
  }

  %op Strategy Is_ListTail() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ListTail()}
  }
  
  %op Strategy Make_ListTail(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail)$t).getChildAt(1) }
    make( new_Opname,  new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail( $new_Opname,  $new_Variable) }
  }

  %op Strategy _TargetLanguageToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm($arg0) }
  }
  
  %op Strategy When_TargetLanguageToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_TargetLanguageToTomTerm(),s) }
  }

  %op Strategy Is_TargetLanguageToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TargetLanguageToTomTerm()}
  }
  
  %op Strategy Make_TargetLanguageToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm)$t).getChildAt(0) }
    make( new_Tl) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm( $new_Tl) }
  }

  %op Strategy _TomSymbolToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm($arg0) }
  }
  
  %op Strategy When_TomSymbolToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_TomSymbolToTomTerm(),s) }
  }

  %op Strategy Is_TomSymbolToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomSymbolToTomTerm()}
  }
  
  %op Strategy Make_TomSymbolToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm)$t).getChildAt(0) }
    make( new_AstSymbol) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm( $new_AstSymbol) }
  }

  %op Strategy _DeclarationToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm($arg0) }
  }
  
  %op Strategy When_DeclarationToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_DeclarationToTomTerm(),s) }
  }

  %op Strategy Is_DeclarationToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_DeclarationToTomTerm()}
  }
  
  %op Strategy Make_DeclarationToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm)$t).getChildAt(0) }
    make( new_AstDeclaration) { new tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm( $new_AstDeclaration) }
  }

  %op Strategy _OptionToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm($arg0) }
  }
  
  %op Strategy When_OptionToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_OptionToTomTerm(),s) }
  }

  %op Strategy Is_OptionToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_OptionToTomTerm()}
  }
  
  %op Strategy Make_OptionToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm)$t).getChildAt(0) }
    make( new_Option) { new tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm( $new_Option) }
  }

  %op Strategy _ExpressionToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm($arg0) }
  }
  
  %op Strategy When_ExpressionToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_ExpressionToTomTerm(),s) }
  }

  %op Strategy Is_ExpressionToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ExpressionToTomTerm()}
  }
  
  %op Strategy Make_ExpressionToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm)$t).getChildAt(0) }
    make( new_AstExpression) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm( $new_AstExpression) }
  }

  %op Strategy _InstructionToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm($arg0) }
  }
  
  %op Strategy When_InstructionToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_InstructionToTomTerm(),s) }
  }

  %op Strategy Is_InstructionToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_InstructionToTomTerm()}
  }
  
  %op Strategy Make_InstructionToTomTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm)$t).getChildAt(0) }
    make( new_AstInstruction) { new tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm( $new_AstInstruction) }
  }

  %op Strategy _Tom(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._Tom))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Tom)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Tom($arg0) }
  }
  
  %op Strategy When_Tom(s:Strategy) {
    make(s) { `Sequence(Is_Tom(),s) }
  }

  %op Strategy Is_Tom() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Tom()}
  }
  
  %op Strategy Make_Tom(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_Tom)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Tom)$t).getChildAt(0) }
    make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Tom( $new_TomList) }
  }

  %op Strategy _TomInclude(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._TomInclude))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._TomInclude)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomInclude($arg0) }
  }
  
  %op Strategy When_TomInclude(s:Strategy) {
    make(s) { `Sequence(Is_TomInclude(),s) }
  }

  %op Strategy Is_TomInclude() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomInclude()}
  }
  
  %op Strategy Make_TomInclude(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude)$t).getChildAt(0) }
    make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude( $new_TomList) }
  }

  %op Strategy _BackQuoteAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_BackQuoteAppl(s:Strategy) {
    make(s) { `Sequence(Is_BackQuoteAppl(),s) }
  }

  %op Strategy Is_BackQuoteAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BackQuoteAppl()}
  }
  
  %op Strategy Make_BackQuoteAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl)$t).getChildAt(2) }
    make( new_Option,  new_AstName,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl( $new_Option,  $new_AstName,  $new_Args) }
  }

  %op Strategy _Composite(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._Composite))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Composite)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Composite($arg0) }
  }
  
  %op Strategy When_Composite(s:Strategy) {
    make(s) { `Sequence(Is_Composite(),s) }
  }

  %op Strategy Is_Composite() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Composite()}
  }
  
  %op Strategy Make_Composite(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_Composite)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Composite)$t).getChildAt(0) }
    make( new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Composite( $new_Args) }
  }

  %op Strategy _AntiTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._AntiTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._AntiTerm)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._AntiTerm($arg0) }
  }
  
  %op Strategy When_AntiTerm(s:Strategy) {
    make(s) { `Sequence(Is_AntiTerm(),s) }
  }

  %op Strategy Is_AntiTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_AntiTerm()}
  }
  
  %op Strategy Make_AntiTerm(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm)$t).getChildAt(0) }
    make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm( $new_TomTerm) }
  }

  %op Strategy _Subterm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._Subterm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Subterm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Subterm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Subterm)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._Subterm($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_Subterm(s:Strategy) {
    make(s) { `Sequence(Is_Subterm(),s) }
  }

  %op Strategy Is_Subterm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Subterm()}
  }
  
  %op Strategy Make_Subterm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm)$t).getChildAt(2) }
    make( new_AstName,  new_SlotName,  new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm( $new_AstName,  $new_SlotName,  $new_GroundTerm) }
  }

  %op Strategy _SymbolOf(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._SymbolOf))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._SymbolOf)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._SymbolOf($arg0) }
  }
  
  %op Strategy When_SymbolOf(s:Strategy) {
    make(s) { `Sequence(Is_SymbolOf(),s) }
  }

  %op Strategy Is_SymbolOf() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_SymbolOf()}
  }
  
  %op Strategy Make_SymbolOf(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf)$t).getChildAt(0) }
    make( new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf( $new_GroundTerm) }
  }

  %op Strategy _Automata(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._Automata))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Automata)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Automata)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Automata)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._Automata)$t).getChildAt(3) }
    make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Automata($arg0, $arg1, $arg2, $arg3) }
  }
  
  %op Strategy When_Automata(s:Strategy) {
    make(s) { `Sequence(Is_Automata(),s) }
  }

  %op Strategy Is_Automata() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Automata()}
  }
  
  %op Strategy Make_Automata(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_Automata)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Automata)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Automata)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Automata)$t).getChildAt(2) }
        get_slot(arg3, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_Automata)$t).getChildAt(3) }
    make( new_Option,  new_Constraint,  new_NumberList,  new_Inst) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Automata( $new_Option,  $new_Constraint,  $new_NumberList,  $new_Inst) }
  }

  %op Strategy _BuildReducedTerm(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm($arg0, $arg1) }
  }
  
  %op Strategy When_BuildReducedTerm(s:Strategy) {
    make(s) { `Sequence(Is_BuildReducedTerm(),s) }
  }

  %op Strategy Is_BuildReducedTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildReducedTerm()}
  }
  
  %op Strategy Make_BuildReducedTerm(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm)$t).getChildAt(1) }
    make( new_TomTerm,  new_AstType) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm( $new_TomTerm,  $new_AstType) }
  }

  %op Strategy _FunctionCall(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._FunctionCall))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._FunctionCall)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._FunctionCall)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._FunctionCall)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._FunctionCall($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_FunctionCall(s:Strategy) {
    make(s) { `Sequence(Is_FunctionCall(),s) }
  }

  %op Strategy Is_FunctionCall() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_FunctionCall()}
  }
  
  %op Strategy Make_FunctionCall(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall)$t).getChildAt(2) }
    make( new_AstName,  new_AstType,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall( $new_AstName,  $new_AstType,  $new_Args) }
  }

  %op Strategy _BuildConstant(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildConstant))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildConstant)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConstant($arg0) }
  }
  
  %op Strategy When_BuildConstant(s:Strategy) {
    make(s) { `Sequence(Is_BuildConstant(),s) }
  }

  %op Strategy Is_BuildConstant() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConstant()}
  }
  
  %op Strategy Make_BuildConstant(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant( $new_AstName) }
  }

  %op Strategy _BuildTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildTerm))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildTerm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildTerm)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildTerm($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_BuildTerm(s:Strategy) {
    make(s) { `Sequence(Is_BuildTerm(),s) }
  }

  %op Strategy Is_BuildTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildTerm()}
  }
  
  %op Strategy Make_BuildTerm(arg0:Strategy, arg1:Strategy, arg2:String) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm)$t).getChildAt(2) }
    make( new_AstName,  new_Args,  _ModuleName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm( $new_AstName,  $new_Args,  $_ModuleName) }
  }

  %op Strategy _BuildEmptyList(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList)$t).getChildAt(0) }
    make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList($arg0) }
  }
  
  %op Strategy When_BuildEmptyList(s:Strategy) {
    make(s) { `Sequence(Is_BuildEmptyList(),s) }
  }

  %op Strategy Is_BuildEmptyList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyList()}
  }
  
  %op Strategy Make_BuildEmptyList(arg0:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList)$t).getChildAt(0) }
    make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList( $new_AstName) }
  }

  %op Strategy _BuildConsList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildConsList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildConsList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildConsList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildConsList)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsList($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_BuildConsList(s:Strategy) {
    make(s) { `Sequence(Is_BuildConsList(),s) }
  }

  %op Strategy Is_BuildConsList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsList()}
  }
  
  %op Strategy Make_BuildConsList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList)$t).getChildAt(2) }
    make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
  }

  %op Strategy _BuildAppendList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_BuildAppendList(s:Strategy) {
    make(s) { `Sequence(Is_BuildAppendList(),s) }
  }

  %op Strategy Is_BuildAppendList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendList()}
  }
  
  %op Strategy Make_BuildAppendList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList)$t).getChildAt(2) }
    make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
  }

  %op Strategy _BuildEmptyArray(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray($arg0, $arg1) }
  }
  
  %op Strategy When_BuildEmptyArray(s:Strategy) {
    make(s) { `Sequence(Is_BuildEmptyArray(),s) }
  }

  %op Strategy Is_BuildEmptyArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyArray()}
  }
  
  %op Strategy Make_BuildEmptyArray(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray)$t).getChildAt(1) }
    make( new_AstName,  new_Size) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray( $new_AstName,  $new_Size) }
  }

  %op Strategy _BuildConsArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_BuildConsArray(s:Strategy) {
    make(s) { `Sequence(Is_BuildConsArray(),s) }
  }

  %op Strategy Is_BuildConsArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsArray()}
  }
  
  %op Strategy Make_BuildConsArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray)$t).getChildAt(2) }
    make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
  }

  %op Strategy _BuildAppendArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray)$t).getChildAt(2) }
    make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray($arg0, $arg1, $arg2) }
  }
  
  %op Strategy When_BuildAppendArray(s:Strategy) {
    make(s) { `Sequence(Is_BuildAppendArray(),s) }
  }

  %op Strategy Is_BuildAppendArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendArray()}
  }
  
  %op Strategy Make_BuildAppendArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray)$t).getChildAt(1) }
        get_slot(arg2, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray)$t).getChildAt(2) }
    make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
  }

  %op Strategy _PairNameDecl(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl($arg0, $arg1) }
  }
  
  %op Strategy When_PairNameDecl(s:Strategy) {
    make(s) { `Sequence(Is_PairNameDecl(),s) }
  }

  %op Strategy Is_PairNameDecl() {
    make() { new tom.engine.adt.tomslot.strategy.pairnamedecl.Is_PairNameDecl()}
  }
  
  %op Strategy Make_PairNameDecl(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl)$t).getChildAt(1) }
    make( new_SlotName,  new_SlotDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl( $new_SlotName,  $new_SlotDecl) }
  }

  %op Strategy _EmptyconcPairNameDecl() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl))}
    
    make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl() }
  }
  
  %op Strategy When_EmptyconcPairNameDecl(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcPairNameDecl(),s) }
  }

  %op Strategy Is_EmptyconcPairNameDecl() {
    make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_EmptyconcPairNameDecl()}
  }
  
  %op Strategy Make_EmptyconcPairNameDecl() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl)) }

    make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl() }
  }

  %op Strategy _ConsconcPairNameDecl(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcPairNameDecl(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcPairNameDecl(),s) }
  }

  %op Strategy Is_ConsconcPairNameDecl() {
    make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_ConsconcPairNameDecl()}
  }
  
  %op Strategy Make_ConsconcPairNameDecl(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl)$t).getChildAt(1) }
    make( new_HeadconcPairNameDecl,  new_TailconcPairNameDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl( $new_HeadconcPairNameDecl,  $new_TailconcPairNameDecl) }
  }

  %op Strategy _EmptyconcSlot() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot))}
    
    make() { new tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot() }
  }
  
  %op Strategy When_EmptyconcSlot(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcSlot(),s) }
  }

  %op Strategy Is_EmptyconcSlot() {
    make() { new tom.engine.adt.tomslot.strategy.slotlist.Is_EmptyconcSlot()}
  }
  
  %op Strategy Make_EmptyconcSlot() {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot)) }

    make() { new tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot() }
  }

  %op Strategy _ConsconcSlot(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot($arg0, $arg1) }
  }
  
  %op Strategy When_ConsconcSlot(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcSlot(),s) }
  }

  %op Strategy Is_ConsconcSlot() {
    make() { new tom.engine.adt.tomslot.strategy.slotlist.Is_ConsconcSlot()}
  }
  
  %op Strategy Make_ConsconcSlot(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot)$t).getChildAt(1) }
    make( new_HeadconcSlot,  new_TailconcSlot) { new tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot( $new_HeadconcSlot,  $new_TailconcSlot) }
  }

  %op Strategy _PairSlotAppl(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.slot._PairSlotAppl))}
    
        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slot._PairSlotAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slot._PairSlotAppl)$t).getChildAt(1) }
    make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slot._PairSlotAppl($arg0, $arg1) }
  }
  
  %op Strategy When_PairSlotAppl(s:Strategy) {
    make(s) { `Sequence(Is_PairSlotAppl(),s) }
  }

  %op Strategy Is_PairSlotAppl() {
    make() { new tom.engine.adt.tomslot.strategy.slot.Is_PairSlotAppl()}
  }
  
  %op Strategy Make_PairSlotAppl(arg0:Strategy, arg1:Strategy) {
    is_fsym(t) { (($t!=null) && ($t instanceof tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl)) }

        get_slot(arg0, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl)$t).getChildAt(0) }
        get_slot(arg1, t) { (tom.library.sl.Strategy)((tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl)$t).getChildAt(1) }
    make( new_SlotName,  new_Appl) { new tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl( $new_SlotName,  $new_Appl) }
  }

  %op Strategy _concInstruction(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concInstruction"),Choice(_ConsconcInstruction(sub,MuVar("x_concInstruction")),_EmptyconcInstruction())) }
  }
  
  %op Strategy _concConstraintInstruction(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concConstraintInstruction"),Choice(_ConsconcConstraintInstruction(sub,MuVar("x_concConstraintInstruction")),_EmptyconcConstraintInstruction())) }
  }
  
  %op Strategy _concTomType(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomType"),Choice(_ConsconcTomType(sub,MuVar("x_concTomType")),_EmptyconcTomType())) }
  }
  
  %op Strategy _concTomSymbol(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomSymbol"),Choice(_ConsconcTomSymbol(sub,MuVar("x_concTomSymbol")),_EmptyconcTomSymbol())) }
  }
  
  %op Strategy _concTomEntry(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomEntry"),Choice(_ConsconcTomEntry(sub,MuVar("x_concTomEntry")),_EmptyconcTomEntry())) }
  }
  
  %op Strategy _concTomVisit(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomVisit"),Choice(_ConsconcTomVisit(sub,MuVar("x_concTomVisit")),_EmptyconcTomVisit())) }
  }
  
  %op Strategy _concElementaryTheory(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concElementaryTheory"),Choice(_ConsconcElementaryTheory(sub,MuVar("x_concElementaryTheory")),_EmptyconcElementaryTheory())) }
  }
  
  %op Strategy _concDeclaration(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concDeclaration"),Choice(_ConsconcDeclaration(sub,MuVar("x_concDeclaration")),_EmptyconcDeclaration())) }
  }
  
  %op Strategy _concTomNumber(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomNumber"),Choice(_ConsconcTomNumber(sub,MuVar("x_concTomNumber")),_EmptyconcTomNumber())) }
  }
  
  %op Strategy _concTomName(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomName"),Choice(_ConsconcTomName(sub,MuVar("x_concTomName")),_EmptyconcTomName())) }
  }
  
  %op Strategy _OrExpressionDisjunction(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_OrExpressionDisjunction"),Choice(_ConsOrExpressionDisjunction(sub,MuVar("x_OrExpressionDisjunction")),_EmptyOrExpressionDisjunction())) }
  }
  
  %op Strategy _OrConnector(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_OrConnector"),Choice(_ConsOrConnector(sub,MuVar("x_OrConnector")),_EmptyOrConnector())) }
  }
  
  %op Strategy _AndConstraint(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_AndConstraint"),Choice(_ConsAndConstraint(sub,MuVar("x_AndConstraint")),_EmptyAndConstraint())) }
  }
  
  %op Strategy _OrConstraint(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_OrConstraint"),Choice(_ConsOrConstraint(sub,MuVar("x_OrConstraint")),_EmptyOrConstraint())) }
  }
  
  %op Strategy _OrConstraintDisjunction(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_OrConstraintDisjunction"),Choice(_ConsOrConstraintDisjunction(sub,MuVar("x_OrConstraintDisjunction")),_EmptyOrConstraintDisjunction())) }
  }
  
  %op Strategy _concConstraint(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concConstraint"),Choice(_ConsconcConstraint(sub,MuVar("x_concConstraint")),_EmptyconcConstraint())) }
  }
  
  %op Strategy _concOption(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concOption"),Choice(_ConsconcOption(sub,MuVar("x_concOption")),_EmptyconcOption())) }
  }
  
  %op Strategy _concTomTerm(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concTomTerm"),Choice(_ConsconcTomTerm(sub,MuVar("x_concTomTerm")),_EmptyconcTomTerm())) }
  }
  
  %op Strategy _concPairNameDecl(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concPairNameDecl"),Choice(_ConsconcPairNameDecl(sub,MuVar("x_concPairNameDecl")),_EmptyconcPairNameDecl())) }
  }
  
  %op Strategy _concSlot(sub:Strategy) {
    is_fsym(t) { false }
    make(sub)  { `mu(MuVar("x_concSlot"),Choice(_ConsconcSlot(sub,MuVar("x_concSlot")),_EmptyconcSlot())) }
  }
  