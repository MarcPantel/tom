
%include { string.tom }

%typeterm Hook {
  implement { tom.gom.adt.objects.types.Hook }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.Hook }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm SlotField {
  implement { tom.gom.adt.objects.types.SlotField }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.SlotField }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm SlotFieldList {
  implement { tom.gom.adt.objects.types.SlotFieldList }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.SlotFieldList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GomClass {
  implement { tom.gom.adt.objects.types.GomClass }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.GomClass }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ClassName {
  implement { tom.gom.adt.objects.types.ClassName }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.ClassName }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GomClassList {
  implement { tom.gom.adt.objects.types.GomClassList }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.GomClassList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ClassNameList {
  implement { tom.gom.adt.objects.types.ClassNameList }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.ClassNameList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm HookList {
  implement { tom.gom.adt.objects.types.HookList }
  is_sort(t) { t instanceof tom.gom.adt.objects.types.HookList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Code {
  implement { tom.gom.adt.code.types.Code }
  is_sort(t) { t instanceof tom.gom.adt.code.types.Code }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Slot {
  implement { tom.gom.adt.gom.types.Slot }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Slot }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ArgList {
  implement { tom.gom.adt.gom.types.ArgList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.ArgList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm IdKind {
  implement { tom.gom.adt.gom.types.IdKind }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.IdKind }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GomModuleList {
  implement { tom.gom.adt.gom.types.GomModuleList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.GomModuleList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GrammarList {
  implement { tom.gom.adt.gom.types.GrammarList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.GrammarList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm TypedProduction {
  implement { tom.gom.adt.gom.types.TypedProduction }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.TypedProduction }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm SectionList {
  implement { tom.gom.adt.gom.types.SectionList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.SectionList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm OperatorDeclList {
  implement { tom.gom.adt.gom.types.OperatorDeclList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.OperatorDeclList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm HookDeclList {
  implement { tom.gom.adt.gom.types.HookDeclList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.HookDeclList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm SortDeclList {
  implement { tom.gom.adt.gom.types.SortDeclList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.SortDeclList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm OperatorDecl {
  implement { tom.gom.adt.gom.types.OperatorDecl }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.OperatorDecl }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GomModule {
  implement { tom.gom.adt.gom.types.GomModule }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.GomModule }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Pair {
  implement { tom.gom.adt.gom.types.Pair }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Pair }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Section {
  implement { tom.gom.adt.gom.types.Section }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Section }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GomTypeList {
  implement { tom.gom.adt.gom.types.GomTypeList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.GomTypeList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ProductionList {
  implement { tom.gom.adt.gom.types.ProductionList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.ProductionList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Decl {
  implement { tom.gom.adt.gom.types.Decl }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Decl }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ImportList {
  implement { tom.gom.adt.gom.types.ImportList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.ImportList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Sort {
  implement { tom.gom.adt.gom.types.Sort }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Sort }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm SortDecl {
  implement { tom.gom.adt.gom.types.SortDecl }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.SortDecl }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm HookDecl {
  implement { tom.gom.adt.gom.types.HookDecl }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.HookDecl }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ModuleDeclList {
  implement { tom.gom.adt.gom.types.ModuleDeclList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.ModuleDeclList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Module {
  implement { tom.gom.adt.gom.types.Module }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Module }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm FieldList {
  implement { tom.gom.adt.gom.types.FieldList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.FieldList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Grammar {
  implement { tom.gom.adt.gom.types.Grammar }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Grammar }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm SlotList {
  implement { tom.gom.adt.gom.types.SlotList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.SlotList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm SortList {
  implement { tom.gom.adt.gom.types.SortList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.SortList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Arg {
  implement { tom.gom.adt.gom.types.Arg }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Arg }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GomModuleName {
  implement { tom.gom.adt.gom.types.GomModuleName }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.GomModuleName }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Field {
  implement { tom.gom.adt.gom.types.Field }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Field }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm Production {
  implement { tom.gom.adt.gom.types.Production }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.Production }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ModuleDecl {
  implement { tom.gom.adt.gom.types.ModuleDecl }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.ModuleDecl }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ModuleList {
  implement { tom.gom.adt.gom.types.ModuleList }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.ModuleList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm GomType {
  implement { tom.gom.adt.gom.types.GomType }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.GomType }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm ImportedModule {
  implement { tom.gom.adt.gom.types.ImportedModule }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.ImportedModule }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}

%typeterm HookKind {
  implement { tom.gom.adt.gom.types.HookKind }
  is_sort(t) { t instanceof tom.gom.adt.gom.types.HookKind }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.gom.adt.code.CodeBasicStrategy }
}
%op Hook MakeHook(HookArguments:SlotFieldList, Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hook.MakeHook }
  get_slot(HookArguments, t) { t.getHookArguments() }
  get_slot(Code, t) { t.getCode() }
  make(t0, t1) { tom.gom.adt.objects.types.hook.MakeHook.make(t0, t1) }
}

%op Hook MakeBeforeHook(HookArguments:SlotFieldList, Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hook.MakeBeforeHook }
  get_slot(HookArguments, t) { t.getHookArguments() }
  get_slot(Code, t) { t.getCode() }
  make(t0, t1) { tom.gom.adt.objects.types.hook.MakeBeforeHook.make(t0, t1) }
}

%op Hook BlockHook(Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hook.BlockHook }
  get_slot(Code, t) { t.getCode() }
  make(t0) { tom.gom.adt.objects.types.hook.BlockHook.make(t0) }
}

%op Hook InterfaceHook(Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hook.InterfaceHook }
  get_slot(Code, t) { t.getCode() }
  make(t0) { tom.gom.adt.objects.types.hook.InterfaceHook.make(t0) }
}

%op Hook ImportHook(Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hook.ImportHook }
  get_slot(Code, t) { t.getCode() }
  make(t0) { tom.gom.adt.objects.types.hook.ImportHook.make(t0) }
}

%op Hook MappingHook(Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hook.MappingHook }
  get_slot(Code, t) { t.getCode() }
  make(t0) { tom.gom.adt.objects.types.hook.MappingHook.make(t0) }
}

%op SlotField SlotField(Name:String, Domain:ClassName) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.slotfield.SlotField }
  get_slot(Name, t) { t.getName() }
  get_slot(Domain, t) { t.getDomain() }
  make(t0, t1) { tom.gom.adt.objects.types.slotfield.SlotField.make(t0, t1) }
}

%op SlotFieldList EmptyconcSlotField() {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField }
  make() { tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() }
}

%op SlotFieldList ConsconcSlotField(HeadconcSlotField:SlotField, TailconcSlotField:SlotFieldList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField }
  get_slot(HeadconcSlotField, t) { t.getHeadconcSlotField() }
  get_slot(TailconcSlotField, t) { t.getTailconcSlotField() }
  make(t0, t1) { tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(t0, t1) }
}

%op GomClass VisitableFwdClass(ClassName:ClassName, Fwd:GomClass) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.VisitableFwdClass }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(Fwd, t) { t.getFwd() }
  make(t0, t1) { tom.gom.adt.objects.types.gomclass.VisitableFwdClass.make(t0, t1) }
}

%op GomClass AbstractTypeClass(ClassName:ClassName, Mapping:ClassName, Visitor:ClassName, SortList:ClassNameList, Hooks:HookList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.AbstractTypeClass }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(Mapping, t) { t.getMapping() }
  get_slot(Visitor, t) { t.getVisitor() }
  get_slot(SortList, t) { t.getSortList() }
  get_slot(Hooks, t) { t.getHooks() }
  make(t0, t1, t2, t3, t4) { tom.gom.adt.objects.types.gomclass.AbstractTypeClass.make(t0, t1, t2, t3, t4) }
}

%op GomClass SortClass(ClassName:ClassName, AbstractType:ClassName, Mapping:ClassName, Visitor:ClassName, Forward:ClassName, Operators:ClassNameList, VariadicOperators:ClassNameList, Slots:SlotFieldList, Hooks:HookList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.SortClass }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(AbstractType, t) { t.getAbstractType() }
  get_slot(Mapping, t) { t.getMapping() }
  get_slot(Visitor, t) { t.getVisitor() }
  get_slot(Forward, t) { t.getForward() }
  get_slot(Operators, t) { t.getOperators() }
  get_slot(VariadicOperators, t) { t.getVariadicOperators() }
  get_slot(Slots, t) { t.getSlots() }
  get_slot(Hooks, t) { t.getHooks() }
  make(t0, t1, t2, t3, t4, t5, t6, t7, t8) { tom.gom.adt.objects.types.gomclass.SortClass.make(t0, t1, t2, t3, t4, t5, t6, t7, t8) }
}

%op GomClass OperatorClass(ClassName:ClassName, AbstractType:ClassName, ExtendsType:ClassName, Mapping:ClassName, SortName:ClassName, Visitor:ClassName, Slots:SlotFieldList, Hooks:HookList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.OperatorClass }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(AbstractType, t) { t.getAbstractType() }
  get_slot(ExtendsType, t) { t.getExtendsType() }
  get_slot(Mapping, t) { t.getMapping() }
  get_slot(SortName, t) { t.getSortName() }
  get_slot(Visitor, t) { t.getVisitor() }
  get_slot(Slots, t) { t.getSlots() }
  get_slot(Hooks, t) { t.getHooks() }
  make(t0, t1, t2, t3, t4, t5, t6, t7) { tom.gom.adt.objects.types.gomclass.OperatorClass.make(t0, t1, t2, t3, t4, t5, t6, t7) }
}

%op GomClass VariadicOperatorClass(ClassName:ClassName, AbstractType:ClassName, Mapping:ClassName, SortName:ClassName, Empty:GomClass, Cons:GomClass, Hooks:HookList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.VariadicOperatorClass }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(AbstractType, t) { t.getAbstractType() }
  get_slot(Mapping, t) { t.getMapping() }
  get_slot(SortName, t) { t.getSortName() }
  get_slot(Empty, t) { t.getEmpty() }
  get_slot(Cons, t) { t.getCons() }
  get_slot(Hooks, t) { t.getHooks() }
  make(t0, t1, t2, t3, t4, t5, t6) { tom.gom.adt.objects.types.gomclass.VariadicOperatorClass.make(t0, t1, t2, t3, t4, t5, t6) }
}

%op GomClass VisitorClass(ClassName:ClassName, SortClasses:GomClassList, OperatorClasses:GomClassList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.VisitorClass }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(SortClasses, t) { t.getSortClasses() }
  get_slot(OperatorClasses, t) { t.getOperatorClasses() }
  make(t0, t1, t2) { tom.gom.adt.objects.types.gomclass.VisitorClass.make(t0, t1, t2) }
}

%op GomClass FwdClass(ClassName:ClassName, Visitor:ClassName, ImportedVisitors:ClassNameList, AbstractType:ClassName, ImportedAbstractTypes:ClassNameList, SortClasses:GomClassList, OperatorClasses:GomClassList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.FwdClass }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(Visitor, t) { t.getVisitor() }
  get_slot(ImportedVisitors, t) { t.getImportedVisitors() }
  get_slot(AbstractType, t) { t.getAbstractType() }
  get_slot(ImportedAbstractTypes, t) { t.getImportedAbstractTypes() }
  get_slot(SortClasses, t) { t.getSortClasses() }
  get_slot(OperatorClasses, t) { t.getOperatorClasses() }
  make(t0, t1, t2, t3, t4, t5, t6) { tom.gom.adt.objects.types.gomclass.FwdClass.make(t0, t1, t2, t3, t4, t5, t6) }
}

%op GomClass TomMapping(ClassName:ClassName, BasicStrategy:ClassName, SortClasses:GomClassList, OperatorClasses:GomClassList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclass.TomMapping }
  get_slot(ClassName, t) { t.getClassName() }
  get_slot(BasicStrategy, t) { t.getBasicStrategy() }
  get_slot(SortClasses, t) { t.getSortClasses() }
  get_slot(OperatorClasses, t) { t.getOperatorClasses() }
  make(t0, t1, t2, t3) { tom.gom.adt.objects.types.gomclass.TomMapping.make(t0, t1, t2, t3) }
}

%op ClassName ClassName(Pkg:String, Name:String) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.classname.ClassName }
  get_slot(Pkg, t) { t.getPkg() }
  get_slot(Name, t) { t.getName() }
  make(t0, t1) { tom.gom.adt.objects.types.classname.ClassName.make(t0, t1) }
}

%op GomClassList EmptyconcGomClass() {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass }
  make() { tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass.make() }
}

%op GomClassList ConsconcGomClass(HeadconcGomClass:GomClass, TailconcGomClass:GomClassList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass }
  get_slot(HeadconcGomClass, t) { t.getHeadconcGomClass() }
  get_slot(TailconcGomClass, t) { t.getTailconcGomClass() }
  make(t0, t1) { tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(t0, t1) }
}

%op ClassNameList EmptyconcClassName() {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.classnamelist.EmptyconcClassName }
  make() { tom.gom.adt.objects.types.classnamelist.EmptyconcClassName.make() }
}

%op ClassNameList ConsconcClassName(HeadconcClassName:ClassName, TailconcClassName:ClassNameList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.classnamelist.ConsconcClassName }
  get_slot(HeadconcClassName, t) { t.getHeadconcClassName() }
  get_slot(TailconcClassName, t) { t.getTailconcClassName() }
  make(t0, t1) { tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(t0, t1) }
}

%op HookList EmptyconcHook() {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hooklist.EmptyconcHook }
  make() { tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() }
}

%op HookList ConsconcHook(HeadconcHook:Hook, TailconcHook:HookList) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hooklist.ConsconcHook }
  get_slot(HeadconcHook, t) { t.getHeadconcHook() }
  get_slot(TailconcHook, t) { t.getTailconcHook() }
  make(t0, t1) { tom.gom.adt.objects.types.hooklist.ConsconcHook.make(t0, t1) }
}

%op Code Code(prog:String) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.Code }
  get_slot(prog, t) { t.getprog() }
  make(t0) { tom.gom.adt.code.types.code.Code.make(t0) }
}

%op Code IsEmpty(Var:String, Operator:OperatorDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.IsEmpty }
  get_slot(Var, t) { t.getVar() }
  get_slot(Operator, t) { t.getOperator() }
  make(t0, t1) { tom.gom.adt.code.types.code.IsEmpty.make(t0, t1) }
}

%op Code IsCons(Var:String, Operator:OperatorDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.IsCons }
  get_slot(Var, t) { t.getVar() }
  get_slot(Operator, t) { t.getOperator() }
  make(t0, t1) { tom.gom.adt.code.types.code.IsCons.make(t0, t1) }
}

%op Code Empty(Operator:OperatorDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.Empty }
  get_slot(Operator, t) { t.getOperator() }
  make(t0) { tom.gom.adt.code.types.code.Empty.make(t0) }
}

%op Code Cons(Operator:OperatorDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.Cons }
  get_slot(Operator, t) { t.getOperator() }
  make(t0) { tom.gom.adt.code.types.code.Cons.make(t0) }
}

%op Code FullSortClass(Sort:SortDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.FullSortClass }
  get_slot(Sort, t) { t.getSort() }
  make(t0) { tom.gom.adt.code.types.code.FullSortClass.make(t0) }
}

%op Code Compare(LCode:Code, RCode:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.Compare }
  get_slot(LCode, t) { t.getLCode() }
  get_slot(RCode, t) { t.getRCode() }
  make(t0, t1) { tom.gom.adt.code.types.code.Compare.make(t0, t1) }
}

%op Code EmptyCodeList() {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.EmptyCodeList }
  make() { tom.gom.adt.code.types.code.EmptyCodeList.make() }
}

%op Code ConsCodeList(HeadCodeList:Code, TailCodeList:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.ConsCodeList }
  get_slot(HeadCodeList, t) { t.getHeadCodeList() }
  get_slot(TailCodeList, t) { t.getTailCodeList() }
  make(t0, t1) { tom.gom.adt.code.types.code.ConsCodeList.make(t0, t1) }
}

%op Slot Slot(Name:String, Sort:SortDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.slot.Slot }
  get_slot(Name, t) { t.getName() }
  get_slot(Sort, t) { t.getSort() }
  make(t0, t1) { tom.gom.adt.gom.types.slot.Slot.make(t0, t1) }
}

%op ArgList EmptyconcArg() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg }
  make() { tom.gom.adt.gom.types.arglist.EmptyconcArg.make() }
}

%op ArgList ConsconcArg(HeadconcArg:Arg, TailconcArg:ArgList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.arglist.ConsconcArg }
  get_slot(HeadconcArg, t) { t.getHeadconcArg() }
  get_slot(TailconcArg, t) { t.getTailconcArg() }
  make(t0, t1) { tom.gom.adt.gom.types.arglist.ConsconcArg.make(t0, t1) }
}

%op IdKind KindModule() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.idkind.KindModule }
  make() { tom.gom.adt.gom.types.idkind.KindModule.make() }
}

%op IdKind KindSort() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.idkind.KindSort }
  make() { tom.gom.adt.gom.types.idkind.KindSort.make() }
}

%op IdKind KindOperator() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.idkind.KindOperator }
  make() { tom.gom.adt.gom.types.idkind.KindOperator.make() }
}

%op GomModuleList EmptyconcGomModule() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule }
  make() { tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule.make() }
}

%op GomModuleList ConsconcGomModule(HeadconcGomModule:GomModule, TailconcGomModule:GomModuleList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule }
  get_slot(HeadconcGomModule, t) { t.getHeadconcGomModule() }
  get_slot(TailconcGomModule, t) { t.getTailconcGomModule() }
  make(t0, t1) { tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make(t0, t1) }
}

%op GrammarList EmptyconcGrammar() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar }
  make() { tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar.make() }
}

%op GrammarList ConsconcGrammar(HeadconcGrammar:Grammar, TailconcGrammar:GrammarList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar }
  get_slot(HeadconcGrammar, t) { t.getHeadconcGrammar() }
  get_slot(TailconcGrammar, t) { t.getTailconcGrammar() }
  make(t0, t1) { tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make(t0, t1) }
}

%op TypedProduction Slots(Slots:SlotList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.typedproduction.Slots }
  get_slot(Slots, t) { t.getSlots() }
  make(t0) { tom.gom.adt.gom.types.typedproduction.Slots.make(t0) }
}

%op TypedProduction Variadic(Sort:SortDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.typedproduction.Variadic }
  get_slot(Sort, t) { t.getSort() }
  make(t0) { tom.gom.adt.gom.types.typedproduction.Variadic.make(t0) }
}

%op SectionList EmptyconcSection() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection }
  make() { tom.gom.adt.gom.types.sectionlist.EmptyconcSection.make() }
}

%op SectionList ConsconcSection(HeadconcSection:Section, TailconcSection:SectionList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection }
  get_slot(HeadconcSection, t) { t.getHeadconcSection() }
  get_slot(TailconcSection, t) { t.getTailconcSection() }
  make(t0, t1) { tom.gom.adt.gom.types.sectionlist.ConsconcSection.make(t0, t1) }
}

%op OperatorDeclList EmptyconcOperator() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator }
  make() { tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() }
}

%op OperatorDeclList ConsconcOperator(HeadconcOperator:OperatorDecl, TailconcOperator:OperatorDeclList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator }
  get_slot(HeadconcOperator, t) { t.getHeadconcOperator() }
  get_slot(TailconcOperator, t) { t.getTailconcOperator() }
  make(t0, t1) { tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(t0, t1) }
}

%op HookDeclList EmptyconcHookDecl() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl }
  make() { tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() }
}

%op HookDeclList ConsconcHookDecl(HeadconcHookDecl:HookDecl, TailconcHookDecl:HookDeclList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl }
  get_slot(HeadconcHookDecl, t) { t.getHeadconcHookDecl() }
  get_slot(TailconcHookDecl, t) { t.getTailconcHookDecl() }
  make(t0, t1) { tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(t0, t1) }
}

%op SortDeclList EmptyconcSortDecl() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl }
  make() { tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() }
}

%op SortDeclList ConsconcSortDecl(HeadconcSortDecl:SortDecl, TailconcSortDecl:SortDeclList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl }
  get_slot(HeadconcSortDecl, t) { t.getHeadconcSortDecl() }
  get_slot(TailconcSortDecl, t) { t.getTailconcSortDecl() }
  make(t0, t1) { tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make(t0, t1) }
}

%op OperatorDecl OperatorDecl(Name:String, Sort:SortDecl, Prod:TypedProduction) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.operatordecl.OperatorDecl }
  get_slot(Name, t) { t.getName() }
  get_slot(Sort, t) { t.getSort() }
  get_slot(Prod, t) { t.getProd() }
  make(t0, t1, t2) { tom.gom.adt.gom.types.operatordecl.OperatorDecl.make(t0, t1, t2) }
}

%op GomModule GomModule(ModuleName:GomModuleName, SectionList:SectionList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gommodule.GomModule }
  get_slot(ModuleName, t) { t.getModuleName() }
  get_slot(SectionList, t) { t.getSectionList() }
  make(t0, t1) { tom.gom.adt.gom.types.gommodule.GomModule.make(t0, t1) }
}

%op Pair ModHookPair(Modules:ModuleList, Hooks:HookDeclList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.pair.ModHookPair }
  get_slot(Modules, t) { t.getModules() }
  get_slot(Hooks, t) { t.getHooks() }
  make(t0, t1) { tom.gom.adt.gom.types.pair.ModHookPair.make(t0, t1) }
}

%op Section Imports(ImportList:ImportList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.section.Imports }
  get_slot(ImportList, t) { t.getImportList() }
  make(t0) { tom.gom.adt.gom.types.section.Imports.make(t0) }
}

%op Section Public(GrammarList:GrammarList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.section.Public }
  get_slot(GrammarList, t) { t.getGrammarList() }
  make(t0) { tom.gom.adt.gom.types.section.Public.make(t0) }
}

%op GomTypeList EmptyconcGomType() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType }
  make() { tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType.make() }
}

%op GomTypeList ConsconcGomType(HeadconcGomType:GomType, TailconcGomType:GomTypeList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gomtypelist.ConsconcGomType }
  get_slot(HeadconcGomType, t) { t.getHeadconcGomType() }
  get_slot(TailconcGomType, t) { t.getTailconcGomType() }
  make(t0, t1) { tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make(t0, t1) }
}

%op ProductionList EmptyconcProduction() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction }
  make() { tom.gom.adt.gom.types.productionlist.EmptyconcProduction.make() }
}

%op ProductionList ConsconcProduction(HeadconcProduction:Production, TailconcProduction:ProductionList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction }
  get_slot(HeadconcProduction, t) { t.getHeadconcProduction() }
  get_slot(TailconcProduction, t) { t.getTailconcProduction() }
  make(t0, t1) { tom.gom.adt.gom.types.productionlist.ConsconcProduction.make(t0, t1) }
}

%op Decl CutModule(MDecl:ModuleDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.decl.CutModule }
  get_slot(MDecl, t) { t.getMDecl() }
  make(t0) { tom.gom.adt.gom.types.decl.CutModule.make(t0) }
}

%op Decl CutSort(Sort:SortDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.decl.CutSort }
  get_slot(Sort, t) { t.getSort() }
  make(t0) { tom.gom.adt.gom.types.decl.CutSort.make(t0) }
}

%op Decl CutOperator(ODecl:OperatorDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.decl.CutOperator }
  get_slot(ODecl, t) { t.getODecl() }
  make(t0) { tom.gom.adt.gom.types.decl.CutOperator.make(t0) }
}

%op ImportList EmptyconcImportedModule() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.importlist.EmptyconcImportedModule }
  make() { tom.gom.adt.gom.types.importlist.EmptyconcImportedModule.make() }
}

%op ImportList ConsconcImportedModule(HeadconcImportedModule:ImportedModule, TailconcImportedModule:ImportList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.importlist.ConsconcImportedModule }
  get_slot(HeadconcImportedModule, t) { t.getHeadconcImportedModule() }
  get_slot(TailconcImportedModule, t) { t.getTailconcImportedModule() }
  make(t0, t1) { tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make(t0, t1) }
}

%op Sort Sort(Decl:SortDecl, Operators:OperatorDeclList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sort.Sort }
  get_slot(Decl, t) { t.getDecl() }
  get_slot(Operators, t) { t.getOperators() }
  make(t0, t1) { tom.gom.adt.gom.types.sort.Sort.make(t0, t1) }
}

%op SortDecl SortDecl(Name:String, ModuleDecl:ModuleDecl) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortdecl.SortDecl }
  get_slot(Name, t) { t.getName() }
  get_slot(ModuleDecl, t) { t.getModuleDecl() }
  make(t0, t1) { tom.gom.adt.gom.types.sortdecl.SortDecl.make(t0, t1) }
}

%op SortDecl BuiltinSortDecl(Name:String) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortdecl.BuiltinSortDecl }
  get_slot(Name, t) { t.getName() }
  make(t0) { tom.gom.adt.gom.types.sortdecl.BuiltinSortDecl.make(t0) }
}

%op HookDecl MakeHookDecl(Pointcut:Decl, SlotArgs:SlotList, Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecl.MakeHookDecl }
  get_slot(Pointcut, t) { t.getPointcut() }
  get_slot(SlotArgs, t) { t.getSlotArgs() }
  get_slot(Code, t) { t.getCode() }
  make(t0, t1, t2) { tom.gom.adt.gom.types.hookdecl.MakeHookDecl.make(t0, t1, t2) }
}

%op HookDecl BlockHookDecl(Pointcut:Decl, Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecl.BlockHookDecl }
  get_slot(Pointcut, t) { t.getPointcut() }
  get_slot(Code, t) { t.getCode() }
  make(t0, t1) { tom.gom.adt.gom.types.hookdecl.BlockHookDecl.make(t0, t1) }
}

%op HookDecl InterfaceHookDecl(Pointcut:Decl, Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl }
  get_slot(Pointcut, t) { t.getPointcut() }
  get_slot(Code, t) { t.getCode() }
  make(t0, t1) { tom.gom.adt.gom.types.hookdecl.InterfaceHookDecl.make(t0, t1) }
}

%op HookDecl ImportHookDecl(Pointcut:Decl, Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecl.ImportHookDecl }
  get_slot(Pointcut, t) { t.getPointcut() }
  get_slot(Code, t) { t.getCode() }
  make(t0, t1) { tom.gom.adt.gom.types.hookdecl.ImportHookDecl.make(t0, t1) }
}

%op HookDecl MappingHookDecl(Pointcut:Decl, Code:Code) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecl.MappingHookDecl }
  get_slot(Pointcut, t) { t.getPointcut() }
  get_slot(Code, t) { t.getCode() }
  make(t0, t1) { tom.gom.adt.gom.types.hookdecl.MappingHookDecl.make(t0, t1) }
}

%op ModuleDeclList EmptyconcModuleDecl() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl }
  make() { tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl.make() }
}

%op ModuleDeclList ConsconcModuleDecl(HeadconcModuleDecl:ModuleDecl, TailconcModuleDecl:ModuleDeclList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl }
  get_slot(HeadconcModuleDecl, t) { t.getHeadconcModuleDecl() }
  get_slot(TailconcModuleDecl, t) { t.getTailconcModuleDecl() }
  make(t0, t1) { tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make(t0, t1) }
}

%op Module Module(MDecl:ModuleDecl, Sorts:SortList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.module.Module }
  get_slot(MDecl, t) { t.getMDecl() }
  get_slot(Sorts, t) { t.getSorts() }
  make(t0, t1) { tom.gom.adt.gom.types.module.Module.make(t0, t1) }
}

%op FieldList EmptyconcField() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField }
  make() { tom.gom.adt.gom.types.fieldlist.EmptyconcField.make() }
}

%op FieldList ConsconcField(HeadconcField:Field, TailconcField:FieldList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField }
  get_slot(HeadconcField, t) { t.getHeadconcField() }
  get_slot(TailconcField, t) { t.getTailconcField() }
  make(t0, t1) { tom.gom.adt.gom.types.fieldlist.ConsconcField.make(t0, t1) }
}

%op Grammar Grammar(ProductionList:ProductionList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.grammar.Grammar }
  get_slot(ProductionList, t) { t.getProductionList() }
  make(t0) { tom.gom.adt.gom.types.grammar.Grammar.make(t0) }
}

%op Grammar Sorts(TypeList:GomTypeList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.grammar.Sorts }
  get_slot(TypeList, t) { t.getTypeList() }
  make(t0) { tom.gom.adt.gom.types.grammar.Sorts.make(t0) }
}

%op SlotList EmptyconcSlot() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot }
  make() { tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() }
}

%op SlotList ConsconcSlot(HeadconcSlot:Slot, TailconcSlot:SlotList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot }
  get_slot(HeadconcSlot, t) { t.getHeadconcSlot() }
  get_slot(TailconcSlot, t) { t.getTailconcSlot() }
  make(t0, t1) { tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(t0, t1) }
}

%op SortList EmptyconcSort() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort }
  make() { tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() }
}

%op SortList ConsconcSort(HeadconcSort:Sort, TailconcSort:SortList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort }
  get_slot(HeadconcSort, t) { t.getHeadconcSort() }
  get_slot(TailconcSort, t) { t.getTailconcSort() }
  make(t0, t1) { tom.gom.adt.gom.types.sortlist.ConsconcSort.make(t0, t1) }
}

%op Arg Arg(Name:String) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.arg.Arg }
  get_slot(Name, t) { t.getName() }
  make(t0) { tom.gom.adt.gom.types.arg.Arg.make(t0) }
}

%op GomModuleName GomModuleName(Name:String) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gommodulename.GomModuleName }
  get_slot(Name, t) { t.getName() }
  make(t0) { tom.gom.adt.gom.types.gommodulename.GomModuleName.make(t0) }
}

%op Field StarredField(FieldType:GomType) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.field.StarredField }
  get_slot(FieldType, t) { t.getFieldType() }
  make(t0) { tom.gom.adt.gom.types.field.StarredField.make(t0) }
}

%op Field NamedField(Name:String, FieldType:GomType) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.field.NamedField }
  get_slot(Name, t) { t.getName() }
  get_slot(FieldType, t) { t.getFieldType() }
  make(t0, t1) { tom.gom.adt.gom.types.field.NamedField.make(t0, t1) }
}

%op Production Production(Name:String, Domain:FieldList, Codomain:GomType) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.production.Production }
  get_slot(Name, t) { t.getName() }
  get_slot(Domain, t) { t.getDomain() }
  get_slot(Codomain, t) { t.getCodomain() }
  make(t0, t1, t2) { tom.gom.adt.gom.types.production.Production.make(t0, t1, t2) }
}

%op Production Hook(NameType:IdKind, Name:String, HookType:HookKind, Args:ArgList, StringCode:String) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.production.Hook }
  get_slot(NameType, t) { t.getNameType() }
  get_slot(Name, t) { t.getName() }
  get_slot(HookType, t) { t.getHookType() }
  get_slot(Args, t) { t.getArgs() }
  get_slot(StringCode, t) { t.getStringCode() }
  make(t0, t1, t2, t3, t4) { tom.gom.adt.gom.types.production.Hook.make(t0, t1, t2, t3, t4) }
}

%op ModuleDecl ModuleDecl(ModuleName:GomModuleName, Pkg:String) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.moduledecl.ModuleDecl }
  get_slot(ModuleName, t) { t.getModuleName() }
  get_slot(Pkg, t) { t.getPkg() }
  make(t0, t1) { tom.gom.adt.gom.types.moduledecl.ModuleDecl.make(t0, t1) }
}

%op ModuleList EmptyconcModule() {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule }
  make() { tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() }
}

%op ModuleList ConsconcModule(HeadconcModule:Module, TailconcModule:ModuleList) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule }
  get_slot(HeadconcModule, t) { t.getHeadconcModule() }
  get_slot(TailconcModule, t) { t.getTailconcModule() }
  make(t0, t1) { tom.gom.adt.gom.types.modulelist.ConsconcModule.make(t0, t1) }
}

%op GomType GomType(Name:String) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gomtype.GomType }
  get_slot(Name, t) { t.getName() }
  make(t0) { tom.gom.adt.gom.types.gomtype.GomType.make(t0) }
}

%op ImportedModule Import(ModuleName:GomModuleName) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.importedmodule.Import }
  get_slot(ModuleName, t) { t.getModuleName() }
  make(t0) { tom.gom.adt.gom.types.importedmodule.Import.make(t0) }
}

%op HookKind HookKind(kind:String) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookkind.HookKind }
  get_slot(kind, t) { t.getkind() }
  make(t0) { tom.gom.adt.gom.types.hookkind.HookKind.make(t0) }
}


%oplist SlotFieldList concSlotField(SlotField*) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField || t instanceof tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField }
  make_empty() { tom.gom.adt.objects.types.slotfieldlist.EmptyconcSlotField.make() }
  make_insert(e,l) { tom.gom.adt.objects.types.slotfieldlist.ConsconcSlotField.make(e,l) }
  get_head(l) { l.getHeadconcSlotField() }
  get_tail(l) { l.getTailconcSlotField() }
  is_empty(l) { l.isEmptyconcSlotField() }
}

%oplist GomClassList concGomClass(GomClass*) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass || t instanceof tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass }
  make_empty() { tom.gom.adt.objects.types.gomclasslist.EmptyconcGomClass.make() }
  make_insert(e,l) { tom.gom.adt.objects.types.gomclasslist.ConsconcGomClass.make(e,l) }
  get_head(l) { l.getHeadconcGomClass() }
  get_tail(l) { l.getTailconcGomClass() }
  is_empty(l) { l.isEmptyconcGomClass() }
}

%oplist ClassNameList concClassName(ClassName*) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.classnamelist.ConsconcClassName || t instanceof tom.gom.adt.objects.types.classnamelist.EmptyconcClassName }
  make_empty() { tom.gom.adt.objects.types.classnamelist.EmptyconcClassName.make() }
  make_insert(e,l) { tom.gom.adt.objects.types.classnamelist.ConsconcClassName.make(e,l) }
  get_head(l) { l.getHeadconcClassName() }
  get_tail(l) { l.getTailconcClassName() }
  is_empty(l) { l.isEmptyconcClassName() }
}

%oplist HookList concHook(Hook*) {
  is_fsym(t) { t instanceof tom.gom.adt.objects.types.hooklist.ConsconcHook || t instanceof tom.gom.adt.objects.types.hooklist.EmptyconcHook }
  make_empty() { tom.gom.adt.objects.types.hooklist.EmptyconcHook.make() }
  make_insert(e,l) { tom.gom.adt.objects.types.hooklist.ConsconcHook.make(e,l) }
  get_head(l) { l.getHeadconcHook() }
  get_tail(l) { l.getTailconcHook() }
  is_empty(l) { l.isEmptyconcHook() }
}

%oplist Code CodeList(Code*) {
  is_fsym(t) { t instanceof tom.gom.adt.code.types.code.ConsCodeList || t instanceof tom.gom.adt.code.types.code.EmptyCodeList }
  make_empty() { tom.gom.adt.code.types.code.EmptyCodeList.make() }
  make_insert(e,l) { tom.gom.adt.code.types.code.ConsCodeList.make(e,l) }
  get_head(l) { l.getHeadCodeList() }
  get_tail(l) { l.getTailCodeList() }
  is_empty(l) { l.isEmptyCodeList() }
}

%oplist ArgList concArg(Arg*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.arglist.ConsconcArg || t instanceof tom.gom.adt.gom.types.arglist.EmptyconcArg }
  make_empty() { tom.gom.adt.gom.types.arglist.EmptyconcArg.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.arglist.ConsconcArg.make(e,l) }
  get_head(l) { l.getHeadconcArg() }
  get_tail(l) { l.getTailconcArg() }
  is_empty(l) { l.isEmptyconcArg() }
}

%oplist GomModuleList concGomModule(GomModule*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule || t instanceof tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule }
  make_empty() { tom.gom.adt.gom.types.gommodulelist.EmptyconcGomModule.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.gommodulelist.ConsconcGomModule.make(e,l) }
  get_head(l) { l.getHeadconcGomModule() }
  get_tail(l) { l.getTailconcGomModule() }
  is_empty(l) { l.isEmptyconcGomModule() }
}

%oplist GrammarList concGrammar(Grammar*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.grammarlist.ConsconcGrammar || t instanceof tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar }
  make_empty() { tom.gom.adt.gom.types.grammarlist.EmptyconcGrammar.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.grammarlist.ConsconcGrammar.make(e,l) }
  get_head(l) { l.getHeadconcGrammar() }
  get_tail(l) { l.getTailconcGrammar() }
  is_empty(l) { l.isEmptyconcGrammar() }
}

%oplist SectionList concSection(Section*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sectionlist.ConsconcSection || t instanceof tom.gom.adt.gom.types.sectionlist.EmptyconcSection }
  make_empty() { tom.gom.adt.gom.types.sectionlist.EmptyconcSection.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.sectionlist.ConsconcSection.make(e,l) }
  get_head(l) { l.getHeadconcSection() }
  get_tail(l) { l.getTailconcSection() }
  is_empty(l) { l.isEmptyconcSection() }
}

%oplist OperatorDeclList concOperator(OperatorDecl*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.operatordecllist.ConsconcOperator || t instanceof tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator }
  make_empty() { tom.gom.adt.gom.types.operatordecllist.EmptyconcOperator.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.operatordecllist.ConsconcOperator.make(e,l) }
  get_head(l) { l.getHeadconcOperator() }
  get_tail(l) { l.getTailconcOperator() }
  is_empty(l) { l.isEmptyconcOperator() }
}

%oplist HookDeclList concHookDecl(HookDecl*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl || t instanceof tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl }
  make_empty() { tom.gom.adt.gom.types.hookdecllist.EmptyconcHookDecl.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.hookdecllist.ConsconcHookDecl.make(e,l) }
  get_head(l) { l.getHeadconcHookDecl() }
  get_tail(l) { l.getTailconcHookDecl() }
  is_empty(l) { l.isEmptyconcHookDecl() }
}

%oplist SortDeclList concSortDecl(SortDecl*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl || t instanceof tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl }
  make_empty() { tom.gom.adt.gom.types.sortdecllist.EmptyconcSortDecl.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.sortdecllist.ConsconcSortDecl.make(e,l) }
  get_head(l) { l.getHeadconcSortDecl() }
  get_tail(l) { l.getTailconcSortDecl() }
  is_empty(l) { l.isEmptyconcSortDecl() }
}

%oplist GomTypeList concGomType(GomType*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.gomtypelist.ConsconcGomType || t instanceof tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType }
  make_empty() { tom.gom.adt.gom.types.gomtypelist.EmptyconcGomType.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.gomtypelist.ConsconcGomType.make(e,l) }
  get_head(l) { l.getHeadconcGomType() }
  get_tail(l) { l.getTailconcGomType() }
  is_empty(l) { l.isEmptyconcGomType() }
}

%oplist ProductionList concProduction(Production*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.productionlist.ConsconcProduction || t instanceof tom.gom.adt.gom.types.productionlist.EmptyconcProduction }
  make_empty() { tom.gom.adt.gom.types.productionlist.EmptyconcProduction.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.productionlist.ConsconcProduction.make(e,l) }
  get_head(l) { l.getHeadconcProduction() }
  get_tail(l) { l.getTailconcProduction() }
  is_empty(l) { l.isEmptyconcProduction() }
}

%oplist ImportList concImportedModule(ImportedModule*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.importlist.ConsconcImportedModule || t instanceof tom.gom.adt.gom.types.importlist.EmptyconcImportedModule }
  make_empty() { tom.gom.adt.gom.types.importlist.EmptyconcImportedModule.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.importlist.ConsconcImportedModule.make(e,l) }
  get_head(l) { l.getHeadconcImportedModule() }
  get_tail(l) { l.getTailconcImportedModule() }
  is_empty(l) { l.isEmptyconcImportedModule() }
}

%oplist ModuleDeclList concModuleDecl(ModuleDecl*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl || t instanceof tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl }
  make_empty() { tom.gom.adt.gom.types.moduledecllist.EmptyconcModuleDecl.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.moduledecllist.ConsconcModuleDecl.make(e,l) }
  get_head(l) { l.getHeadconcModuleDecl() }
  get_tail(l) { l.getTailconcModuleDecl() }
  is_empty(l) { l.isEmptyconcModuleDecl() }
}

%oplist FieldList concField(Field*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.fieldlist.ConsconcField || t instanceof tom.gom.adt.gom.types.fieldlist.EmptyconcField }
  make_empty() { tom.gom.adt.gom.types.fieldlist.EmptyconcField.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.fieldlist.ConsconcField.make(e,l) }
  get_head(l) { l.getHeadconcField() }
  get_tail(l) { l.getTailconcField() }
  is_empty(l) { l.isEmptyconcField() }
}

%oplist SlotList concSlot(Slot*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.slotlist.ConsconcSlot || t instanceof tom.gom.adt.gom.types.slotlist.EmptyconcSlot }
  make_empty() { tom.gom.adt.gom.types.slotlist.EmptyconcSlot.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.slotlist.ConsconcSlot.make(e,l) }
  get_head(l) { l.getHeadconcSlot() }
  get_tail(l) { l.getTailconcSlot() }
  is_empty(l) { l.isEmptyconcSlot() }
}

%oplist SortList concSort(Sort*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.sortlist.ConsconcSort || t instanceof tom.gom.adt.gom.types.sortlist.EmptyconcSort }
  make_empty() { tom.gom.adt.gom.types.sortlist.EmptyconcSort.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.sortlist.ConsconcSort.make(e,l) }
  get_head(l) { l.getHeadconcSort() }
  get_tail(l) { l.getTailconcSort() }
  is_empty(l) { l.isEmptyconcSort() }
}

%oplist ModuleList concModule(Module*) {
  is_fsym(t) { t instanceof tom.gom.adt.gom.types.modulelist.ConsconcModule || t instanceof tom.gom.adt.gom.types.modulelist.EmptyconcModule }
  make_empty() { tom.gom.adt.gom.types.modulelist.EmptyconcModule.make() }
  make_insert(e,l) { tom.gom.adt.gom.types.modulelist.ConsconcModule.make(e,l) }
  get_head(l) { l.getHeadconcModule() }
  get_tail(l) { l.getTailconcModule() }
  is_empty(l) { l.isEmptyconcModule() }
}
