%include { string.tom }
%include { int.tom }
%include { double.tom }
%include { aterm.tom }
%include { atermlist.tom }
%typeterm Expression{
  implement { tom.engine.adt.tomsignature.types.Expression}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Expression)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Expression GetSliceArray(astName:TomName, subjectListName:TomTerm, variableBeginAST:TomTerm, variableEndAST:TomTerm) {
  is_fsym(t) { (t!= null) && t.isGetSliceArray()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(subjectListName,t) { t.getSubjectListName()}
  get_slot(variableBeginAST,t) { t.getVariableBeginAST()}
  get_slot(variableEndAST,t) { t.getVariableEndAST()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetSliceArray(t0, t1, t2, t3)}
}

%op Expression GetSliceList(astName:TomName, variableBeginAST:TomTerm, variableEndAST:TomTerm) {
  is_fsym(t) { (t!= null) && t.isGetSliceList()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(variableBeginAST,t) { t.getVariableBeginAST()}
  get_slot(variableEndAST,t) { t.getVariableEndAST()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetSliceList(t0, t1, t2)}
}

%op Expression GetElement(opname:TomName, codomain:TomType, kid1:TomTerm, kid2:TomTerm) {
  is_fsym(t) { (t!= null) && t.isGetElement()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(codomain,t) { t.getCodomain()}
  get_slot(kid1,t) { t.getKid1()}
  get_slot(kid2,t) { t.getKid2()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetElement(t0, t1, t2, t3)}
}

%op Expression GetSize(opname:TomName, variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isGetSize()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetSize(t0, t1)}
}

%op Expression AddOne(variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isAddOne()}
  get_slot(variable,t) { t.getVariable()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_AddOne(t0)}
}

%op Expression IsEmptyArray(opname:TomName, variable:TomTerm, index:TomTerm) {
  is_fsym(t) { (t!= null) && t.isIsEmptyArray()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(index,t) { t.getIndex()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_IsEmptyArray(t0, t1, t2)}
}

%op Expression IsEmptyList(opname:TomName, variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isIsEmptyList()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_IsEmptyList(t0, t1)}
}

%op Expression GetTail(opname:TomName, variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isGetTail()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetTail(t0, t1)}
}

%op Expression GetHead(opname:TomName, codomain:TomType, variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isGetHead()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(codomain,t) { t.getCodomain()}
  get_slot(variable,t) { t.getVariable()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetHead(t0, t1, t2)}
}

%op Expression IsFsym(astName:TomName, variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isIsFsym()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(variable,t) { t.getVariable()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_IsFsym(t0, t1)}
}

%op Expression GetSlot(codomain:TomType, astName:TomName, slotNameString:String, variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isGetSlot()}
  get_slot(codomain,t) { t.getCodomain()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(slotNameString,t) { t.getSlotNameString()}
  get_slot(variable,t) { t.getVariable()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetSlot(t0, t1, t2, t3)}
}

%op Expression GetSubterm(codomain:TomType, variable:TomTerm, number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isGetSubterm()}
  get_slot(codomain,t) { t.getCodomain()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(number,t) { t.getNumber()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GetSubterm(t0, t1, t2)}
}

%op Expression Cast(astType:TomType, source:Expression) {
  is_fsym(t) { (t!= null) && t.isCast()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(source,t) { t.getSource()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_Cast(t0, t1)}
}

%op Expression EqualTerm(tomType:TomType, kid1:TomTerm, kid2:TomTerm) {
  is_fsym(t) { (t!= null) && t.isEqualTerm()}
  get_slot(tomType,t) { t.getTomType()}
  get_slot(kid1,t) { t.getKid1()}
  get_slot(kid2,t) { t.getKid2()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_EqualTerm(t0, t1, t2)}
}

%op Expression EqualFunctionSymbol(astType:TomType, exp1:TomTerm, exp2:TomTerm) {
  is_fsym(t) { (t!= null) && t.isEqualFunctionSymbol()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(exp1,t) { t.getExp1()}
  get_slot(exp2,t) { t.getExp2()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_EqualFunctionSymbol(t0, t1, t2)}
}

%op Expression FalseTL() {
  is_fsym(t) { (t!= null) && t.isFalseTL()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_FalseTL()}
}

%op Expression TrueTL() {
  is_fsym(t) { (t!= null) && t.isTrueTL()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_TrueTL()}
}

%op Expression GreaterThan(arg1:Expression, arg2:Expression) {
  is_fsym(t) { (t!= null) && t.isGreaterThan()}
  get_slot(arg1,t) { t.getArg1()}
  get_slot(arg2,t) { t.getArg2()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_GreaterThan(t0, t1)}
}

%op Expression Or(arg1:Expression, arg2:Expression) {
  is_fsym(t) { (t!= null) && t.isOr()}
  get_slot(arg1,t) { t.getArg1()}
  get_slot(arg2,t) { t.getArg2()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_Or(t0, t1)}
}

%op Expression And(arg1:Expression, arg2:Expression) {
  is_fsym(t) { (t!= null) && t.isAnd()}
  get_slot(arg1,t) { t.getArg1()}
  get_slot(arg2,t) { t.getArg2()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_And(t0, t1)}
}

%op Expression Negation(arg:Expression) {
  is_fsym(t) { (t!= null) && t.isNegation()}
  get_slot(arg,t) { t.getArg()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_Negation(t0)}
}

%op Expression Bottom() {
  is_fsym(t) { (t!= null) && t.isBottom()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_Bottom()}
}

%op Expression TomTermToExpression(astTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isTomTermToExpression()}
  get_slot(astTerm,t) { t.getAstTerm()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeExpression_TomTermToExpression(t0)}
}

%typeterm Instruction{
  implement { tom.engine.adt.tomsignature.types.Instruction}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Instruction)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Instruction TypedAction(astInstruction:Instruction, positivePattern:Pattern, negativePatternList:PatternList) {
  is_fsym(t) { (t!= null) && t.isTypedAction()}
  get_slot(astInstruction,t) { t.getAstInstruction()}
  get_slot(positivePattern,t) { t.getPositivePattern()}
  get_slot(negativePatternList,t) { t.getNegativePatternList()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_TypedAction(t0, t1, t2)}
}

%op Instruction RawAction(astInstruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isRawAction()}
  get_slot(astInstruction,t) { t.getAstInstruction()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_RawAction(t0)}
}

%op Instruction CheckInstance(astType:TomType, source:Expression, instruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isCheckInstance()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(source,t) { t.getSource()}
  get_slot(instruction,t) { t.getInstruction()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_CheckInstance(t0, t1, t2)}
}

%op Instruction CheckStamp(variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isCheckStamp()}
  get_slot(variable,t) { t.getVariable()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_CheckStamp(t0)}
}

%op Instruction EqualityCondition(lhs:TomTerm, rhs:TomTerm) {
  is_fsym(t) { (t!= null) && t.isEqualityCondition()}
  get_slot(lhs,t) { t.getLhs()}
  get_slot(rhs,t) { t.getRhs()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_EqualityCondition(t0, t1)}
}

%op Instruction TypedEqualityCondition(tomType:TomType, lhs:TomTerm, rhs:TomTerm) {
  is_fsym(t) { (t!= null) && t.isTypedEqualityCondition()}
  get_slot(tomType,t) { t.getTomType()}
  get_slot(lhs,t) { t.getLhs()}
  get_slot(rhs,t) { t.getRhs()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_TypedEqualityCondition(t0, t1, t2)}
}

%op Instruction MatchingCondition(lhs:TomTerm, rhs:TomTerm) {
  is_fsym(t) { (t!= null) && t.isMatchingCondition()}
  get_slot(lhs,t) { t.getLhs()}
  get_slot(rhs,t) { t.getRhs()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_MatchingCondition(t0, t1)}
}

%op Instruction CompiledPattern(patternList:TomList, automataInst:Instruction) {
  is_fsym(t) { (t!= null) && t.isCompiledPattern()}
  get_slot(patternList,t) { t.getPatternList()}
  get_slot(automataInst,t) { t.getAutomataInst()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_CompiledPattern(t0, t1)}
}

%op Instruction CompiledMatch(automataInst:Instruction, option:OptionList) {
  is_fsym(t) { (t!= null) && t.isCompiledMatch()}
  get_slot(automataInst,t) { t.getAutomataInst()}
  get_slot(option,t) { t.getOption()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_CompiledMatch(t0, t1)}
}

%op Instruction Match(subjectList:TomTerm, astPatternInstructionList:PatternInstructionList, option:OptionList) {
  is_fsym(t) { (t!= null) && t.isMatch()}
  get_slot(subjectList,t) { t.getSubjectList()}
  get_slot(astPatternInstructionList,t) { t.getAstPatternInstructionList()}
  get_slot(option,t) { t.getOption()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Match(t0, t1, t2)}
}

%op Instruction NamedBlock(blockName:String, instList:InstructionList) {
  is_fsym(t) { (t!= null) && t.isNamedBlock()}
  get_slot(blockName,t) { t.getBlockName()}
  get_slot(instList,t) { t.getInstList()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_NamedBlock(t0, t1)}
}

%op Instruction UnamedBlock(instList:InstructionList) {
  is_fsym(t) { (t!= null) && t.isUnamedBlock()}
  get_slot(instList,t) { t.getInstList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_UnamedBlock(t0)}
}

%op Instruction AbstractBlock(instList:InstructionList) {
  is_fsym(t) { (t!= null) && t.isAbstractBlock()}
  get_slot(instList,t) { t.getInstList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_AbstractBlock(t0)}
}

%op Instruction Nop() {
  is_fsym(t) { (t!= null) && t.isNop()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Nop()}
}

%op Instruction Return(kid1:TomTerm) {
  is_fsym(t) { (t!= null) && t.isReturn()}
  get_slot(kid1,t) { t.getKid1()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Return(t0)}
}

%op Instruction AssignMatchSubject(kid1:TomTerm, source:Expression) {
  is_fsym(t) { (t!= null) && t.isAssignMatchSubject()}
  get_slot(kid1,t) { t.getKid1()}
  get_slot(source,t) { t.getSource()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_AssignMatchSubject(t0, t1)}
}

%op Instruction LetAssign(variable:TomTerm, source:Expression, astInstruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isLetAssign()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(source,t) { t.getSource()}
  get_slot(astInstruction,t) { t.getAstInstruction()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_LetAssign(t0, t1, t2)}
}

%op Instruction LetRef(variable:TomTerm, source:Expression, astInstruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isLetRef()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(source,t) { t.getSource()}
  get_slot(astInstruction,t) { t.getAstInstruction()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_LetRef(t0, t1, t2)}
}

%op Instruction Let(variable:TomTerm, source:Expression, astInstruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isLet()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(source,t) { t.getSource()}
  get_slot(astInstruction,t) { t.getAstInstruction()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Let(t0, t1, t2)}
}

%op Instruction Assign(variable:TomTerm, source:Expression) {
  is_fsym(t) { (t!= null) && t.isAssign()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(source,t) { t.getSource()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_Assign(t0, t1)}
}

%op Instruction WhileDo(condition:Expression, doInst:Instruction) {
  is_fsym(t) { (t!= null) && t.isWhileDo()}
  get_slot(condition,t) { t.getCondition()}
  get_slot(doInst,t) { t.getDoInst()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_WhileDo(t0, t1)}
}

%op Instruction DoWhile(doInst:Instruction, condition:Expression) {
  is_fsym(t) { (t!= null) && t.isDoWhile()}
  get_slot(doInst,t) { t.getDoInst()}
  get_slot(condition,t) { t.getCondition()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_DoWhile(t0, t1)}
}

%op Instruction If(condition:Expression, succesInst:Instruction, failureInst:Instruction) {
  is_fsym(t) { (t!= null) && t.isIf()}
  get_slot(condition,t) { t.getCondition()}
  get_slot(succesInst,t) { t.getSuccesInst()}
  get_slot(failureInst,t) { t.getFailureInst()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_If(t0, t1, t2)}
}

%op Instruction TargetLanguageToInstruction(tl:TargetLanguage) {
  is_fsym(t) { (t!= null) && t.isTargetLanguageToInstruction()}
  get_slot(tl,t) { t.getTl()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_TargetLanguageToInstruction(t0)}
}

%op Instruction TomTermToInstruction(tom:TomTerm) {
  is_fsym(t) { (t!= null) && t.isTomTermToInstruction()}
  get_slot(tom,t) { t.getTom()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstruction_TomTermToInstruction(t0)}
}

%typeterm InstructionList{
  implement { tom.engine.adt.tomsignature.types.InstructionList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.InstructionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist InstructionList concInstruction(Instruction*) {
  is_fsym(t) {(t!= null) && t.isSortInstructionList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op InstructionList emptyInstructionList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList()}
}
%op InstructionList manyInstructionList(head:Instruction, tail:InstructionList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeInstructionList(e,l)}
}
%typeterm KeyEntry{
  implement { tom.engine.adt.tomsignature.types.KeyEntry}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.KeyEntry)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op KeyEntry UsedTypeDefinition(typedef:TomTypeDefinition) {
  is_fsym(t) { (t!= null) && t.isUsedTypeDefinition()}
  get_slot(typedef,t) { t.getTypedef()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeKeyEntry_UsedTypeDefinition(t0)}
}

%op KeyEntry UsedSymbolDestructor(symbol:TomSymbol) {
  is_fsym(t) { (t!= null) && t.isUsedSymbolDestructor()}
  get_slot(symbol,t) { t.getSymbol()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeKeyEntry_UsedSymbolDestructor(t0)}
}

%op KeyEntry UsedSymbolConstructor(symbol:TomSymbol) {
  is_fsym(t) { (t!= null) && t.isUsedSymbolConstructor()}
  get_slot(symbol,t) { t.getSymbol()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeKeyEntry_UsedSymbolConstructor(t0)}
}

%typeterm NameList{
  implement { tom.engine.adt.tomsignature.types.NameList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.NameList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist NameList concTomName(TomName*) {
  is_fsym(t) {(t!= null) && t.isSortNameList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op NameList emptyNameList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList()}
}
%op NameList manyNameList(head:TomName, tail:NameList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeNameList(e,l)}
}
%typeterm SymbolList{
  implement { tom.engine.adt.tomsignature.types.SymbolList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.SymbolList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist SymbolList concTomSymbol(TomSymbol*) {
  is_fsym(t) {(t!= null) && t.isSortSymbolList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op SymbolList emptySymbolList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList()}
}
%op SymbolList manySymbolList(head:TomSymbol, tail:SymbolList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSymbolList(e,l)}
}
%typeterm TomEntryList{
  implement { tom.engine.adt.tomsignature.types.TomEntryList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomEntryList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist TomEntryList concTomEntry(TomEntry*) {
  is_fsym(t) {(t!= null) && t.isSortTomEntryList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntryList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntryList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op TomEntryList emptyTomEntryList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntryList()}
}
%op TomEntryList manyTomEntryList(head:TomEntry, tail:TomEntryList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntryList(e,l)}
}
%typeterm TomVisitList{
  implement { tom.engine.adt.tomsignature.types.TomVisitList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomVisitList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist TomVisitList concTomVisit(TomVisit*) {
  is_fsym(t) {(t!= null) && t.isSortTomVisitList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomVisitList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomVisitList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op TomVisitList emptyTomVisitList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomVisitList()}
}
%op TomVisitList manyTomVisitList(head:TomVisit, tail:TomVisitList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomVisitList(e,l)}
}
%typeterm TomRuleList{
  implement { tom.engine.adt.tomsignature.types.TomRuleList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomRuleList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist TomRuleList concTomRule(TomRule*) {
  is_fsym(t) {(t!= null) && t.isSortTomRuleList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRuleList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRuleList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op TomRuleList emptyTomRuleList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRuleList()}
}
%op TomRuleList manyTomRuleList(head:TomRule, tail:TomRuleList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRuleList(e,l)}
}
%typeterm TomStructureTable{
  implement { tom.engine.adt.tomsignature.types.TomStructureTable}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomStructureTable)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomStructureTable StructTable(structList:TomList) {
  is_fsym(t) { (t!= null) && t.isStructTable()}
  get_slot(structList,t) { t.getStructList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomStructureTable_StructTable(t0)}
}

%typeterm TomEntry{
  implement { tom.engine.adt.tomsignature.types.TomEntry}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomEntry)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomEntry Entry(strName:String, astSymbol:TomSymbol) {
  is_fsym(t) { (t!= null) && t.isEntry()}
  get_slot(strName,t) { t.getStrName()}
  get_slot(astSymbol,t) { t.getAstSymbol()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomEntry_Entry(t0, t1)}
}

%typeterm TomSymbolTable{
  implement { tom.engine.adt.tomsignature.types.TomSymbolTable}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomSymbolTable)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomSymbolTable Table(entryList:TomEntryList) {
  is_fsym(t) { (t!= null) && t.isTable()}
  get_slot(entryList,t) { t.getEntryList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomSymbolTable_Table(t0)}
}

%typeterm TomSymbol{
  implement { tom.engine.adt.tomsignature.types.TomSymbol}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomSymbol)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomSymbol Symbol(astName:TomName, typesToType:TomType, pairNameDeclList:PairNameDeclList, option:OptionList) {
  is_fsym(t) { (t!= null) && t.isSymbol()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(typesToType,t) { t.getTypesToType()}
  get_slot(pairNameDeclList,t) { t.getPairNameDeclList()}
  get_slot(option,t) { t.getOption()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomSymbol_Symbol(t0, t1, t2, t3)}
}

%op TomSymbol emptySymbol() {
  is_fsym(t) { (t!= null) && t.isEmptySymbol()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomSymbol_EmptySymbol()}
}

%typeterm TomVisit{
  implement { tom.engine.adt.tomsignature.types.TomVisit}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomVisit)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomVisit VisitTerm(vNode:TomType, astPatternInstructionList:PatternInstructionList, option:OptionList) {
  is_fsym(t) { (t!= null) && t.isVisitTerm()}
  get_slot(vNode,t) { t.getVNode()}
  get_slot(astPatternInstructionList,t) { t.getAstPatternInstructionList()}
  get_slot(option,t) { t.getOption()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomVisit_VisitTerm(t0, t1, t2)}
}

%typeterm TomRule{
  implement { tom.engine.adt.tomsignature.types.TomRule}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomRule)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomRule RewriteRule(lhs:TomTerm, rhs:TomTerm, condList:InstructionList, option:OptionList) {
  is_fsym(t) { (t!= null) && t.isRewriteRule()}
  get_slot(lhs,t) { t.getLhs()}
  get_slot(rhs,t) { t.getRhs()}
  get_slot(condList,t) { t.getCondList()}
  get_slot(option,t) { t.getOption()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomRule_RewriteRule(t0, t1, t2, t3)}
}

%typeterm Position{
  implement { tom.engine.adt.tomsignature.types.Position}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Position)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Position TextPosition(line:int, column:int) {
  is_fsym(t) { (t!= null) && t.isTextPosition()}
  get_slot(line,t) { t.getLine()}
  get_slot(column,t) { t.getColumn()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePosition_TextPosition(t0, t1)}
}

%typeterm TargetLanguage{
  implement { tom.engine.adt.tomsignature.types.TargetLanguage}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TargetLanguage)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TargetLanguage noTL() {
  is_fsym(t) { (t!= null) && t.isNoTL()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTargetLanguage_NoTL()}
}

%op TargetLanguage Comment(code:String) {
  is_fsym(t) { (t!= null) && t.isComment()}
  get_slot(code,t) { t.getCode()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTargetLanguage_Comment(t0)}
}

%op TargetLanguage ITL(code:String) {
  is_fsym(t) { (t!= null) && t.isITL()}
  get_slot(code,t) { t.getCode()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTargetLanguage_ITL(t0)}
}

%op TargetLanguage TL(code:String, start:Position, end:Position) {
  is_fsym(t) { (t!= null) && t.isTL()}
  get_slot(code,t) { t.getCode()}
  get_slot(start,t) { t.getStart()}
  get_slot(end,t) { t.getEnd()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTargetLanguage_TL(t0, t1, t2)}
}

%typeterm TomNumberList{
  implement { tom.engine.adt.tomsignature.types.TomNumberList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomNumberList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist TomNumberList concTomNumber(TomNumber*) {
  is_fsym(t) {(t!= null) && t.isSortTomNumberList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op TomNumberList emptyTomNumberList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList()}
}
%op TomNumberList manyTomNumberList(head:TomNumber, tail:TomNumberList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(e,l)}
}
%typeterm TomNumber{
  implement { tom.engine.adt.tomsignature.types.TomNumber}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomNumber)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomNumber RuleVar() {
  is_fsym(t) { (t!= null) && t.isRuleVar()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_RuleVar()}
}

%op TomNumber NameNumber(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isNameNumber()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_NameNumber(t0)}
}

%op TomNumber RenamedVar(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isRenamedVar()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_RenamedVar(t0)}
}

%op TomNumber AbsVar(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isAbsVar()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_AbsVar(t0)}
}

%op TomNumber Number(integer:int) {
  is_fsym(t) { (t!= null) && t.isNumber()}
  get_slot(integer,t) { t.getInteger()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_Number(t0)}
}

%op TomNumber End(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isEnd()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_End(t0)}
}

%op TomNumber Begin(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isBegin()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_Begin(t0)}
}

%op TomNumber IndexNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isIndexNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_IndexNumber(t0)}
}

%op TomNumber ListNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isListNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_ListNumber(t0)}
}

%op TomNumber PatternNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isPatternNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_PatternNumber(t0)}
}

%op TomNumber MatchNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isMatchNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_MatchNumber(t0)}
}

%typeterm TomName{
  implement { tom.engine.adt.tomsignature.types.TomName}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomName)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomName EmptyName() {
  is_fsym(t) { (t!= null) && t.isEmptyName()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_EmptyName()}
}

%op TomName PositionName(numberList:TomNumberList) {
  is_fsym(t) { (t!= null) && t.isPositionName()}
  get_slot(numberList,t) { t.getNumberList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_PositionName(t0)}
}

%op TomName Name(string:String) {
  is_fsym(t) { (t!= null) && t.isName()}
  get_slot(string,t) { t.getString()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_Name(t0)}
}

%typeterm SlotList{
  implement { tom.engine.adt.tomsignature.types.SlotList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.SlotList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist SlotList concSlot(Slot*) {
  is_fsym(t) {(t!= null) && t.isSortSlotList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op SlotList emptySlotList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList()}
}
%op SlotList manySlotList(head:Slot, tail:SlotList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlotList(e,l)}
}
%typeterm Slot{
  implement { tom.engine.adt.tomsignature.types.Slot}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Slot)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Slot PairSlotAppl(slotName:TomName, appl:TomTerm) {
  is_fsym(t) { (t!= null) && t.isPairSlotAppl()}
  get_slot(slotName,t) { t.getSlotName()}
  get_slot(appl,t) { t.getAppl()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeSlot_PairSlotAppl(t0, t1)}
}

%typeterm PairNameDeclList{
  implement { tom.engine.adt.tomsignature.types.PairNameDeclList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.PairNameDeclList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist PairNameDeclList concPairNameDecl(PairNameDecl*) {
  is_fsym(t) {(t!= null) && t.isSortPairNameDeclList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op PairNameDeclList emptyPairNameDeclList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList()}
}
%op PairNameDeclList manyPairNameDeclList(head:PairNameDecl, tail:PairNameDeclList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDeclList(e,l)}
}
%typeterm PairNameDecl{
  implement { tom.engine.adt.tomsignature.types.PairNameDecl}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.PairNameDecl)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op PairNameDecl PairNameDecl(slotName:TomName, slotDecl:Declaration) {
  is_fsym(t) { (t!= null) && t.isPairNameDecl()}
  get_slot(slotName,t) { t.getSlotName()}
  get_slot(slotDecl,t) { t.getSlotDecl()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePairNameDecl_PairNameDecl(t0, t1)}
}

%typeterm OptionList{
  implement { tom.engine.adt.tomsignature.types.OptionList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.OptionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist OptionList concOption(Option*) {
  is_fsym(t) {(t!= null) && t.isSortOptionList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op OptionList emptyOptionList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList()}
}
%op OptionList manyOptionList(head:Option, tail:OptionList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOptionList(e,l)}
}
%typeterm Option{
  implement { tom.engine.adt.tomsignature.types.Option}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Option)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Option noOption() {
  is_fsym(t) { (t!= null) && t.isNoOption()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_NoOption()}
}

%op Option ImplicitXMLChild() {
  is_fsym(t) { (t!= null) && t.isImplicitXMLChild()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_ImplicitXMLChild()}
}

%op Option ImplicitXMLAttribut() {
  is_fsym(t) { (t!= null) && t.isImplicitXMLAttribut()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_ImplicitXMLAttribut()}
}

%op Option ModuleName(string:String) {
  is_fsym(t) { (t!= null) && t.isModuleName()}
  get_slot(string,t) { t.getString()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_ModuleName(t0)}
}

%op Option Debug(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isDebug()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_Debug(t0)}
}

%op Option Label(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isLabel()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_Label(t0)}
}

%op Option Constant() {
  is_fsym(t) { (t!= null) && t.isConstant()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_Constant()}
}

%op Option OriginalText(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isOriginalText()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_OriginalText(t0)}
}

%op Option OriginTracking(astName:TomName, line:int, fileName:String) {
  is_fsym(t) { (t!= null) && t.isOriginTracking()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(line,t) { t.getLine()}
  get_slot(fileName,t) { t.getFileName()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_OriginTracking(t0, t1, t2)}
}

%op Option GeneratedMatch() {
  is_fsym(t) { (t!= null) && t.isGeneratedMatch()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_GeneratedMatch()}
}

%op Option DefinedSymbol() {
  is_fsym(t) { (t!= null) && t.isDefinedSymbol()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_DefinedSymbol()}
}

%op Option TomTermToOption(astTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isTomTermToOption()}
  get_slot(astTerm,t) { t.getAstTerm()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_TomTermToOption(t0)}
}

%op Option TomNameToOption(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isTomNameToOption()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_TomNameToOption(t0)}
}

%op Option DeclarationToOption(astDeclaration:Declaration) {
  is_fsym(t) { (t!= null) && t.isDeclarationToOption()}
  get_slot(astDeclaration,t) { t.getAstDeclaration()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeOption_DeclarationToOption(t0)}
}

%typeterm ConstraintList{
  implement { tom.engine.adt.tomsignature.types.ConstraintList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.ConstraintList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist ConstraintList concConstraint(Constraint*) {
  is_fsym(t) {(t!= null) && t.isSortConstraintList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op ConstraintList emptyConstraintList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList()}
}
%op ConstraintList manyConstraintList(head:Constraint, tail:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraintList(e,l)}
}
%typeterm Constraint{
  implement { tom.engine.adt.tomsignature.types.Constraint}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Constraint)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Constraint AssignTo(variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isAssignTo()}
  get_slot(variable,t) { t.getVariable()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraint_AssignTo(t0)}
}

%op Constraint Equal(variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isEqual()}
  get_slot(variable,t) { t.getVariable()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraint_Equal(t0)}
}

%op Constraint Ensure(variable:TomTerm) {
  is_fsym(t) { (t!= null) && t.isEnsure()}
  get_slot(variable,t) { t.getVariable()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeConstraint_Ensure(t0)}
}

%typeterm TomTypeList{
  implement { tom.engine.adt.tomsignature.types.TomTypeList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomTypeList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist TomTypeList concTomType(TomType*) {
  is_fsym(t) {(t!= null) && t.isSortTomTypeList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op TomTypeList emptyTomTypeList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeList()}
}
%op TomTypeList manyTomTypeList(head:TomType, tail:TomTypeList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeList(e,l)}
}
%typeterm TomTypeDefinition{
  implement { tom.engine.adt.tomsignature.types.TomTypeDefinition}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomTypeDefinition)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomTypeDefinition TypeDefinition(tomType:TomType, forward:TomForwardType) {
  is_fsym(t) { (t!= null) && t.isTypeDefinition()}
  get_slot(tomType,t) { t.getTomType()}
  get_slot(forward,t) { t.getForward()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTypeDefinition_TypeDefinition(t0, t1)}
}

%typeterm TomForwardType{
  implement { tom.engine.adt.tomsignature.types.TomForwardType}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomForwardType)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomForwardType EmptyForward() {
  is_fsym(t) { (t!= null) && t.isEmptyForward()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomForwardType_EmptyForward()}
}

%op TomForwardType TLForward(string:String) {
  is_fsym(t) { (t!= null) && t.isTLForward()}
  get_slot(string,t) { t.getString()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomForwardType_TLForward(t0)}
}

%typeterm TomType{
  implement { tom.engine.adt.tomsignature.types.TomType}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomType)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomType EmptyType() {
  is_fsym(t) { (t!= null) && t.isEmptyType()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_EmptyType()}
}

%op TomType TLType(tl:TargetLanguage) {
  is_fsym(t) { (t!= null) && t.isTLType()}
  get_slot(tl,t) { t.getTl()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_TLType(t0)}
}

%op TomType TypesToType(domain:TomTypeList, codomain:TomType) {
  is_fsym(t) { (t!= null) && t.isTypesToType()}
  get_slot(domain,t) { t.getDomain()}
  get_slot(codomain,t) { t.getCodomain()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_TypesToType(t0, t1)}
}

%op TomType ASTTomType(string:String) {
  is_fsym(t) { (t!= null) && t.isASTTomType()}
  get_slot(string,t) { t.getString()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_ASTTomType(t0)}
}

%op TomType Codomain(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isCodomain()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_Codomain(t0)}
}

%op TomType TomTypeAlone(string:String) {
  is_fsym(t) { (t!= null) && t.isTomTypeAlone()}
  get_slot(string,t) { t.getString()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_TomTypeAlone(t0)}
}

%op TomType Type(tomType:TomType, tlType:TomType) {
  is_fsym(t) { (t!= null) && t.isType()}
  get_slot(tomType,t) { t.getTomType()}
  get_slot(tlType,t) { t.getTlType()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomType_Type(t0, t1)}
}

%typeterm TomList{
  implement { tom.engine.adt.tomsignature.types.TomList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist TomList concTomTerm(TomTerm*) {
  is_fsym(t) {(t!= null) && t.isSortTomList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op TomList emptyTomList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList()}
}
%op TomList manyTomList(head:TomTerm, tail:TomList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomList(e,l)}
}
%typeterm PatternList{
  implement { tom.engine.adt.tomsignature.types.PatternList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.PatternList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist PatternList concPattern(Pattern*) {
  is_fsym(t) {(t!= null) && t.isSortPatternList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op PatternList emptyPatternList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternList()}
}
%op PatternList manyPatternList(head:Pattern, tail:PatternList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternList(e,l)}
}
%typeterm PatternInstructionList{
  implement { tom.engine.adt.tomsignature.types.PatternInstructionList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.PatternInstructionList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist PatternInstructionList concPatternInstruction(PatternInstruction*) {
  is_fsym(t) {(t!= null) && t.isSortPatternInstructionList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op PatternInstructionList emptyPatternInstructionList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList()}
}
%op PatternInstructionList manyPatternInstructionList(head:PatternInstruction, tail:PatternInstructionList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstructionList(e,l)}
}
%typeterm Pattern{
  implement { tom.engine.adt.tomsignature.types.Pattern}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Pattern)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Pattern Pattern(subjectList:TomList, tomList:TomList, guards:TomList) {
  is_fsym(t) { (t!= null) && t.isPattern()}
  get_slot(subjectList,t) { t.getSubjectList()}
  get_slot(tomList,t) { t.getTomList()}
  get_slot(guards,t) { t.getGuards()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePattern_Pattern(t0, t1, t2)}
}

%typeterm PatternInstruction{
  implement { tom.engine.adt.tomsignature.types.PatternInstruction}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.PatternInstruction)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op PatternInstruction PatternInstruction(pattern:Pattern, action:Instruction, option:OptionList) {
  is_fsym(t) { (t!= null) && t.isPatternInstruction()}
  get_slot(pattern,t) { t.getPattern()}
  get_slot(action,t) { t.getAction()}
  get_slot(option,t) { t.getOption()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makePatternInstruction_PatternInstruction(t0, t1, t2)}
}

%typeterm TomTerm{
  implement { tom.engine.adt.tomsignature.types.TomTerm}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomTerm)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomTerm Automata(option:OptionList, patternList:TomList, numberList:TomNumberList, inst:Instruction) {
  is_fsym(t) { (t!= null) && t.isAutomata()}
  get_slot(option,t) { t.getOption()}
  get_slot(patternList,t) { t.getPatternList()}
  get_slot(numberList,t) { t.getNumberList()}
  get_slot(inst,t) { t.getInst()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Automata(t0, t1, t2, t3)}
}

%op TomTerm TomInclude(tomList:TomList) {
  is_fsym(t) { (t!= null) && t.isTomInclude()}
  get_slot(tomList,t) { t.getTomList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TomInclude(t0)}
}

%op TomTerm BuildAppendArray(astName:TomName, headTerm:TomTerm, tailTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isBuildAppendArray()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(headTerm,t) { t.getHeadTerm()}
  get_slot(tailTerm,t) { t.getTailTerm()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildAppendArray(t0, t1, t2)}
}

%op TomTerm BuildConsArray(astName:TomName, headTerm:TomTerm, tailTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isBuildConsArray()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(headTerm,t) { t.getHeadTerm()}
  get_slot(tailTerm,t) { t.getTailTerm()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConsArray(t0, t1, t2)}
}

%op TomTerm BuildEmptyArray(astName:TomName, size:int) {
  is_fsym(t) { (t!= null) && t.isBuildEmptyArray()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(size,t) { t.getSize()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildEmptyArray(t0, t1)}
}

%op TomTerm BuildAppendList(astName:TomName, headTerm:TomTerm, tailTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isBuildAppendList()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(headTerm,t) { t.getHeadTerm()}
  get_slot(tailTerm,t) { t.getTailTerm()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildAppendList(t0, t1, t2)}
}

%op TomTerm BuildConsList(astName:TomName, headTerm:TomTerm, tailTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isBuildConsList()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(headTerm,t) { t.getHeadTerm()}
  get_slot(tailTerm,t) { t.getTailTerm()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConsList(t0, t1, t2)}
}

%op TomTerm BuildEmptyList(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isBuildEmptyList()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildEmptyList(t0)}
}

%op TomTerm BuildTerm(astName:TomName, args:TomList, moduleName:String) {
  is_fsym(t) { (t!= null) && t.isBuildTerm()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(args,t) { t.getArgs()}
  get_slot(moduleName,t) { t.getModuleName()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildTerm(t0, t1, t2)}
}

%op TomTerm BuildConstant(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isBuildConstant()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildConstant(t0)}
}

%op TomTerm FunctionCall(astName:TomName, args:TomList) {
  is_fsym(t) { (t!= null) && t.isFunctionCall()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(args,t) { t.getArgs()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_FunctionCall(t0, t1)}
}

%op TomTerm BuildReducedTerm(kid1:TomTerm) {
  is_fsym(t) { (t!= null) && t.isBuildReducedTerm()}
  get_slot(kid1,t) { t.getKid1()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BuildReducedTerm(t0)}
}

%op TomTerm Ref(tomTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isRef()}
  get_slot(tomTerm,t) { t.getTomTerm()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Ref(t0)}
}

%op TomTerm TLVar(strName:String, astType:TomType) {
  is_fsym(t) { (t!= null) && t.isTLVar()}
  get_slot(strName,t) { t.getStrName()}
  get_slot(astType,t) { t.getAstType()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TLVar(t0, t1)}
}

%op TomTerm AntiTerm(tomTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isAntiTerm()}
  get_slot(tomTerm,t) { t.getTomTerm()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_AntiTerm(t0)}
}

%op TomTerm Term(tomTerm:TomTerm) {
  is_fsym(t) { (t!= null) && t.isTerm()}
  get_slot(tomTerm,t) { t.getTomTerm()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Term(t0)}
}

%op TomTerm SubjectList(tomList:TomList) {
  is_fsym(t) { (t!= null) && t.isSubjectList()}
  get_slot(tomList,t) { t.getTomList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_SubjectList(t0)}
}

%op TomTerm Composite(args:TomList) {
  is_fsym(t) { (t!= null) && t.isComposite()}
  get_slot(args,t) { t.getArgs()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Composite(t0)}
}

%op TomTerm DoubleBackQuote(args:TomList) {
  is_fsym(t) { (t!= null) && t.isDoubleBackQuote()}
  get_slot(args,t) { t.getArgs()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_DoubleBackQuote(t0)}
}

%op TomTerm BackQuoteAppl(option:OptionList, astName:TomName, args:TomList) {
  is_fsym(t) { (t!= null) && t.isBackQuoteAppl()}
  get_slot(option,t) { t.getOption()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(args,t) { t.getArgs()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_BackQuoteAppl(t0, t1, t2)}
}

%op TomTerm Tom(tomList:TomList) {
  is_fsym(t) { (t!= null) && t.isTom()}
  get_slot(tomList,t) { t.getTomList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Tom(t0)}
}

%op TomTerm InstructionToTomTerm(astInstruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isInstructionToTomTerm()}
  get_slot(astInstruction,t) { t.getAstInstruction()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_InstructionToTomTerm(t0)}
}

%op TomTerm ExpressionToTomTerm(astExpression:Expression) {
  is_fsym(t) { (t!= null) && t.isExpressionToTomTerm()}
  get_slot(astExpression,t) { t.getAstExpression()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_ExpressionToTomTerm(t0)}
}

%op TomTerm OptionToTomTerm(option:OptionList) {
  is_fsym(t) { (t!= null) && t.isOptionToTomTerm()}
  get_slot(option,t) { t.getOption()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_OptionToTomTerm(t0)}
}

%op TomTerm DeclarationToTomTerm(astDeclaration:Declaration) {
  is_fsym(t) { (t!= null) && t.isDeclarationToTomTerm()}
  get_slot(astDeclaration,t) { t.getAstDeclaration()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_DeclarationToTomTerm(t0)}
}

%op TomTerm TomSymbolToTomTerm(astSymbol:TomSymbol) {
  is_fsym(t) { (t!= null) && t.isTomSymbolToTomTerm()}
  get_slot(astSymbol,t) { t.getAstSymbol()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TomSymbolToTomTerm(t0)}
}

%op TomTerm TomNameToTomTerm(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isTomNameToTomTerm()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TomNameToTomTerm(t0)}
}

%op TomTerm TomTypeToTomTerm(astType:TomType) {
  is_fsym(t) { (t!= null) && t.isTomTypeToTomTerm()}
  get_slot(astType,t) { t.getAstType()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TomTypeToTomTerm(t0)}
}

%op TomTerm TargetLanguageToTomTerm(tl:TargetLanguage) {
  is_fsym(t) { (t!= null) && t.isTargetLanguageToTomTerm()}
  get_slot(tl,t) { t.getTl()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TargetLanguageToTomTerm(t0)}
}

%op TomTerm emptyTerm() {
  is_fsym(t) { (t!= null) && t.isEmptyTerm()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_EmptyTerm()}
}

%op TomTerm UnamedVariableStar(option:OptionList, astType:TomType, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isUnamedVariableStar()}
  get_slot(option,t) { t.getOption()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_UnamedVariableStar(t0, t1, t2)}
}

%op TomTerm UnamedVariable(option:OptionList, astType:TomType, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isUnamedVariable()}
  get_slot(option,t) { t.getOption()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_UnamedVariable(t0, t1, t2)}
}

%op TomTerm Placeholder(option:OptionList, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isPlaceholder()}
  get_slot(option,t) { t.getOption()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Placeholder(t0, t1)}
}

%op TomTerm VariableStar(option:OptionList, astName:TomName, astType:TomType, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isVariableStar()}
  get_slot(option,t) { t.getOption()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_VariableStar(t0, t1, t2, t3)}
}

%op TomTerm Variable(option:OptionList, astName:TomName, astType:TomType, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isVariable()}
  get_slot(option,t) { t.getOption()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_Variable(t0, t1, t2, t3)}
}

%op TomTerm XMLAppl(option:OptionList, nameList:NameList, attrList:TomList, childList:TomList, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isXMLAppl()}
  get_slot(option,t) { t.getOption()}
  get_slot(nameList,t) { t.getNameList()}
  get_slot(attrList,t) { t.getAttrList()}
  get_slot(childList,t) { t.getChildList()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_XMLAppl(t0, t1, t2, t3, t4)}
}

%op TomTerm RecordAppl(option:OptionList, nameList:NameList, slots:SlotList, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isRecordAppl()}
  get_slot(option,t) { t.getOption()}
  get_slot(nameList,t) { t.getNameList()}
  get_slot(slots,t) { t.getSlots()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_RecordAppl(t0, t1, t2, t3)}
}

%op TomTerm ListAppl(option:OptionList, nameList:NameList, args:TomList, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isListAppl()}
  get_slot(option,t) { t.getOption()}
  get_slot(nameList,t) { t.getNameList()}
  get_slot(args,t) { t.getArgs()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_ListAppl(t0, t1, t2, t3)}
}

%op TomTerm TermAppl(option:OptionList, nameList:NameList, args:TomList, constraints:ConstraintList) {
  is_fsym(t) { (t!= null) && t.isTermAppl()}
  get_slot(option,t) { t.getOption()}
  get_slot(nameList,t) { t.getNameList()}
  get_slot(args,t) { t.getArgs()}
  get_slot(constraints,t) { t.getConstraints()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomTerm_TermAppl(t0, t1, t2, t3)}
}

%typeterm DeclarationList{
  implement { tom.engine.adt.tomsignature.types.DeclarationList}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.DeclarationList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist DeclarationList concDeclaration(Declaration*) {
  is_fsym(t) {(t!= null) && t.isSortDeclarationList()}
  make_empty() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op DeclarationList emptyDeclarationList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList()}
}
%op DeclarationList manyDeclarationList(head:Declaration, tail:DeclarationList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclarationList(e,l)}
}
%typeterm Declaration{
  implement { tom.engine.adt.tomsignature.types.Declaration}
  visitor_fwd { tom.engine.adt.tomsignature.TomConstraintVisitableFwd}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.Declaration)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op Declaration AbstractDecl(declList:DeclarationList) {
  is_fsym(t) { (t!= null) && t.isAbstractDecl()}
  get_slot(declList,t) { t.getDeclList()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_AbstractDecl(t0)}
}

%op Declaration EmptyDeclaration() {
  is_fsym(t) { (t!= null) && t.isEmptyDeclaration()}
  make() { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_EmptyDeclaration()}
}

%op Declaration ArraySymbolDecl(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isArraySymbolDecl()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_ArraySymbolDecl(t0)}
}

%op Declaration ListSymbolDecl(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isListSymbolDecl()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_ListSymbolDecl(t0)}
}

%op Declaration SymbolDecl(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isSymbolDecl()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_SymbolDecl(t0)}
}

%op Declaration Class(astName:TomName, extendsType:TomForwardType, superTerm:TomTerm, declaration:Declaration) {
  is_fsym(t) { (t!= null) && t.isClass()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(extendsType,t) { t.getExtendsType()}
  get_slot(superTerm,t) { t.getSuperTerm()}
  get_slot(declaration,t) { t.getDeclaration()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_Class(t0, t1, t2, t3)}
}

%op Declaration MethodDef(astName:TomName, argumentList:TomList, codomain:TomType, throwsType:TomType, instruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isMethodDef()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(argumentList,t) { t.getArgumentList()}
  get_slot(codomain,t) { t.getCodomain()}
  get_slot(throwsType,t) { t.getThrowsType()}
  get_slot(instruction,t) { t.getInstruction()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_MethodDef(t0, t1, t2, t3, t4)}
}

%op Declaration FunctionDef(astName:TomName, argumentList:TomList, codomain:TomType, throwsType:TomType, instruction:Instruction) {
  is_fsym(t) { (t!= null) && t.isFunctionDef()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(argumentList,t) { t.getArgumentList()}
  get_slot(codomain,t) { t.getCodomain()}
  get_slot(throwsType,t) { t.getThrowsType()}
  get_slot(instruction,t) { t.getInstruction()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_FunctionDef(t0, t1, t2, t3, t4)}
}

%op Declaration RuleSet(ruleList:TomRuleList, option:OptionList) {
  is_fsym(t) { (t!= null) && t.isRuleSet()}
  get_slot(ruleList,t) { t.getRuleList()}
  get_slot(option,t) { t.getOption()}
  make(t0, t1) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_RuleSet(t0, t1)}
}

%op Declaration Strategy(sName:TomName, extendsTerm:TomTerm, visitList:TomVisitList, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isStrategy()}
  get_slot(sName,t) { t.getSName()}
  get_slot(extendsTerm,t) { t.getExtendsTerm()}
  get_slot(visitList,t) { t.getVisitList()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_Strategy(t0, t1, t2, t3)}
}

%op Declaration MakeDecl(astName:TomName, astType:TomType, args:TomList, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isMakeDecl()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(astType,t) { t.getAstType()}
  get_slot(args,t) { t.getArgs()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_MakeDecl(t0, t1, t2, t3, t4)}
}

%op Declaration MakeAddArray(astName:TomName, varElt:TomTerm, varList:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isMakeAddArray()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(varElt,t) { t.getVarElt()}
  get_slot(varList,t) { t.getVarList()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_MakeAddArray(t0, t1, t2, t3, t4)}
}

%op Declaration MakeEmptyArray(astName:TomName, varSize:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isMakeEmptyArray()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(varSize,t) { t.getVarSize()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_MakeEmptyArray(t0, t1, t2, t3)}
}

%op Declaration GetSizeDecl(opname:TomName, variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isGetSizeDecl()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_GetSizeDecl(t0, t1, t2, t3)}
}

%op Declaration GetElementDecl(opname:TomName, variable:TomTerm, index:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isGetElementDecl()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(index,t) { t.getIndex()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_GetElementDecl(t0, t1, t2, t3, t4)}
}

%op Declaration MakeAddList(astName:TomName, varElt:TomTerm, varList:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isMakeAddList()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(varElt,t) { t.getVarElt()}
  get_slot(varList,t) { t.getVarList()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_MakeAddList(t0, t1, t2, t3, t4)}
}

%op Declaration MakeEmptyList(astName:TomName, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isMakeEmptyList()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_MakeEmptyList(t0, t1, t2)}
}

%op Declaration IsEmptyDecl(opname:TomName, variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isIsEmptyDecl()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_IsEmptyDecl(t0, t1, t2, t3)}
}

%op Declaration GetTailDecl(opname:TomName, variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isGetTailDecl()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_GetTailDecl(t0, t1, t2, t3)}
}

%op Declaration GetHeadDecl(opname:TomName, codomain:TomType, variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isGetHeadDecl()}
  get_slot(opname,t) { t.getOpname()}
  get_slot(codomain,t) { t.getCodomain()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_GetHeadDecl(t0, t1, t2, t3, t4)}
}

%op Declaration TermsEqualDecl(termArg1:TomTerm, termArg2:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isTermsEqualDecl()}
  get_slot(termArg1,t) { t.getTermArg1()}
  get_slot(termArg2,t) { t.getTermArg2()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_TermsEqualDecl(t0, t1, t2, t3)}
}

%op Declaration GetSlotDecl(astName:TomName, slotName:TomName, variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isGetSlotDecl()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(slotName,t) { t.getSlotName()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3, t4) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_GetSlotDecl(t0, t1, t2, t3, t4)}
}

%op Declaration IsFsymDecl(astName:TomName, variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isIsFsymDecl()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2, t3) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_IsFsymDecl(t0, t1, t2, t3)}
}

%op Declaration GetImplementationDecl(variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isGetImplementationDecl()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_GetImplementationDecl(t0, t1, t2)}
}

%op Declaration SetStampDecl(variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isSetStampDecl()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_SetStampDecl(t0, t1, t2)}
}

%op Declaration CheckStampDecl(variable:TomTerm, instr:Instruction, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isCheckStampDecl()}
  get_slot(variable,t) { t.getVariable()}
  get_slot(instr,t) { t.getInstr()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_CheckStampDecl(t0, t1, t2)}
}

%op Declaration TypeTermDecl(astName:TomName, declarations:DeclarationList, orgTrack:Option) {
  is_fsym(t) { (t!= null) && t.isTypeTermDecl()}
  get_slot(astName,t) { t.getAstName()}
  get_slot(declarations,t) { t.getDeclarations()}
  get_slot(orgTrack,t) { t.getOrgTrack()}
  make(t0, t1, t2) { tom.engine.adt.tomsignature.TomConstraintFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeDeclaration_TypeTermDecl(t0, t1, t2)}
}

