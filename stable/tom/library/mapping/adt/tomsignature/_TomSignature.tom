
    %op Strategy _TomTermToInstruction(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction($arg0) }
    }
  
  
  %op Strategy When_TomTermToInstruction(s:Strategy) {
    make(s) { `Sequence(Is_TomTermToInstruction(),s) }
  }

  %op Strategy Is_TomTermToInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TomTermToInstruction()}
  }
  
%op Strategy Make_TomTermToInstruction(_Tom:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction))) }

  get_slot(_Tom, t) { $t._Tom }
  make( new_Tom) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction( $new_Tom) }
}

    %op Strategy _ExpressionToInstruction(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._ExpressionToInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._ExpressionToInstruction($arg0) }
    }
  
  
  %op Strategy When_ExpressionToInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ExpressionToInstruction(),s) }
  }

  %op Strategy Is_ExpressionToInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_ExpressionToInstruction()}
  }
  
%op Strategy Make_ExpressionToInstruction(_Expr:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_ExpressionToInstruction))) }

  get_slot(_Expr, t) { $t._Expr }
  make( new_Expr) { new tom.engine.adt.tominstruction.strategy.instruction.Make_ExpressionToInstruction( $new_Expr) }
}

    %op Strategy _TargetLanguageToInstruction(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction($arg0) }
    }
  
  
  %op Strategy When_TargetLanguageToInstruction(s:Strategy) {
    make(s) { `Sequence(Is_TargetLanguageToInstruction(),s) }
  }

  %op Strategy Is_TargetLanguageToInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TargetLanguageToInstruction()}
  }
  
%op Strategy Make_TargetLanguageToInstruction(_Tl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction))) }

  get_slot(_Tl, t) { $t._Tl }
  make( new_Tl) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction( $new_Tl) }
}

    %op Strategy _If(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._If)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._If($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_If(s:Strategy) {
    make(s) { `Sequence(Is_If(),s) }
  }

  %op Strategy Is_If() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_If()}
  }
  
%op Strategy Make_If(_Condition:Strategy, _SuccesInst:Strategy, _FailureInst:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_If))) }

  get_slot(_Condition, t) { $t._Condition }
  get_slot(_SuccesInst, t) { $t._SuccesInst }
  get_slot(_FailureInst, t) { $t._FailureInst }
  make( new_Condition,  new_SuccesInst,  new_FailureInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_If( $new_Condition,  $new_SuccesInst,  $new_FailureInst) }
}

    %op Strategy _DoWhile(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._DoWhile)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._DoWhile($arg0, $arg1) }
    }
  
  
  %op Strategy When_DoWhile(s:Strategy) {
    make(s) { `Sequence(Is_DoWhile(),s) }
  }

  %op Strategy Is_DoWhile() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_DoWhile()}
  }
  
%op Strategy Make_DoWhile(_DoInst:Strategy, _Condition:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile))) }

  get_slot(_DoInst, t) { $t._DoInst }
  get_slot(_Condition, t) { $t._Condition }
  make( new_DoInst,  new_Condition) { new tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile( $new_DoInst,  $new_Condition) }
}

    %op Strategy _WhileDo(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._WhileDo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._WhileDo($arg0, $arg1) }
    }
  
  
  %op Strategy When_WhileDo(s:Strategy) {
    make(s) { `Sequence(Is_WhileDo(),s) }
  }

  %op Strategy Is_WhileDo() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_WhileDo()}
  }
  
%op Strategy Make_WhileDo(_Condition:Strategy, _DoInst:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo))) }

  get_slot(_Condition, t) { $t._Condition }
  get_slot(_DoInst, t) { $t._DoInst }
  make( new_Condition,  new_DoInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo( $new_Condition,  $new_DoInst) }
}

    %op Strategy _Assign(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Assign)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._Assign($arg0, $arg1) }
    }
  
  
  %op Strategy When_Assign(s:Strategy) {
    make(s) { `Sequence(Is_Assign(),s) }
  }

  %op Strategy Is_Assign() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Assign()}
  }
  
%op Strategy Make_Assign(_Variable:Strategy, _Source:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Assign))) }

  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Source, t) { $t._Source }
  make( new_Variable,  new_Source) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Assign( $new_Variable,  $new_Source) }
}

    %op Strategy _Let(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Let)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._Let($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Let(s:Strategy) {
    make(s) { `Sequence(Is_Let(),s) }
  }

  %op Strategy Is_Let() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Let()}
  }
  
%op Strategy Make_Let(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Let))) }

  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Source, t) { $t._Source }
  get_slot(_AstInstruction, t) { $t._AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Let( $new_Variable,  $new_Source,  $new_AstInstruction) }
}

    %op Strategy _LetRef(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._LetRef)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._LetRef($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_LetRef(s:Strategy) {
    make(s) { `Sequence(Is_LetRef(),s) }
  }

  %op Strategy Is_LetRef() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_LetRef()}
  }
  
%op Strategy Make_LetRef(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef))) }

  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Source, t) { $t._Source }
  get_slot(_AstInstruction, t) { $t._AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef( $new_Variable,  $new_Source,  $new_AstInstruction) }
}

    %op Strategy _LetAssign(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._LetAssign)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._LetAssign($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_LetAssign(s:Strategy) {
    make(s) { `Sequence(Is_LetAssign(),s) }
  }

  %op Strategy Is_LetAssign() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_LetAssign()}
  }
  
%op Strategy Make_LetAssign(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_LetAssign))) }

  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Source, t) { $t._Source }
  get_slot(_AstInstruction, t) { $t._AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_LetAssign( $new_Variable,  $new_Source,  $new_AstInstruction) }
}

    %op Strategy _Return(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Return)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._Return($arg0) }
    }
  
  
  %op Strategy When_Return(s:Strategy) {
    make(s) { `Sequence(Is_Return(),s) }
  }

  %op Strategy Is_Return() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Return()}
  }
  
%op Strategy Make_Return(_Kid1:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Return))) }

  get_slot(_Kid1, t) { $t._Kid1 }
  make( new_Kid1) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Return( $new_Kid1) }
}

    %op Strategy _Nop() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Nop)))}
      
        make() { new tom.engine.adt.tominstruction.strategy.instruction._Nop() }
    }
  
  
  %op Strategy When_Nop(s:Strategy) {
    make(s) { `Sequence(Is_Nop(),s) }
  }

  %op Strategy Is_Nop() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Nop()}
  }
  
%op Strategy Make_Nop() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Nop))) }

  make() { new tom.engine.adt.tominstruction.strategy.instruction.Make_Nop() }
}

    %op Strategy _AbstractBlock(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock($arg0) }
    }
  
  
  %op Strategy When_AbstractBlock(s:Strategy) {
    make(s) { `Sequence(Is_AbstractBlock(),s) }
  }

  %op Strategy Is_AbstractBlock() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_AbstractBlock()}
  }
  
%op Strategy Make_AbstractBlock(_InstList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock))) }

  get_slot(_InstList, t) { $t._InstList }
  make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock( $new_InstList) }
}

    %op Strategy _UnamedBlock(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock($arg0) }
    }
  
  
  %op Strategy When_UnamedBlock(s:Strategy) {
    make(s) { `Sequence(Is_UnamedBlock(),s) }
  }

  %op Strategy Is_UnamedBlock() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_UnamedBlock()}
  }
  
%op Strategy Make_UnamedBlock(_InstList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock))) }

  get_slot(_InstList, t) { $t._InstList }
  make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock( $new_InstList) }
}

    %op Strategy _NamedBlock(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._NamedBlock)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._NamedBlock($arg0, $arg1) }
    }
  
  
  %op Strategy When_NamedBlock(s:Strategy) {
    make(s) { `Sequence(Is_NamedBlock(),s) }
  }

  %op Strategy Is_NamedBlock() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_NamedBlock()}
  }
  
%op Strategy Make_NamedBlock(_BlockName:String, _InstList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock))) }

  get_slot(_BlockName, t) { $t._BlockName }
  get_slot(_InstList, t) { $t._InstList }
  make( _BlockName,  new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock( $_BlockName,  $new_InstList) }
}

    %op Strategy _Match(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Match)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._Match($arg0, $arg1) }
    }
  
  
  %op Strategy When_Match(s:Strategy) {
    make(s) { `Sequence(Is_Match(),s) }
  }

  %op Strategy Is_Match() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_Match()}
  }
  
%op Strategy Make_Match(_ConstraintInstructionList:Strategy, _Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Match))) }

  get_slot(_ConstraintInstructionList, t) { $t._ConstraintInstructionList }
  get_slot(_Option, t) { $t._Option }
  make( new_ConstraintInstructionList,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Match( $new_ConstraintInstructionList,  $new_Option) }
}

    %op Strategy _CompiledMatch(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch($arg0, $arg1) }
    }
  
  
  %op Strategy When_CompiledMatch(s:Strategy) {
    make(s) { `Sequence(Is_CompiledMatch(),s) }
  }

  %op Strategy Is_CompiledMatch() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledMatch()}
  }
  
%op Strategy Make_CompiledMatch(_AutomataInst:Strategy, _Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch))) }

  get_slot(_AutomataInst, t) { $t._AutomataInst }
  get_slot(_Option, t) { $t._Option }
  make( new_AutomataInst,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch( $new_AutomataInst,  $new_Option) }
}

    %op Strategy _CompiledPattern(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern($arg0, $arg1) }
    }
  
  
  %op Strategy When_CompiledPattern(s:Strategy) {
    make(s) { `Sequence(Is_CompiledPattern(),s) }
  }

  %op Strategy Is_CompiledPattern() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_CompiledPattern()}
  }
  
%op Strategy Make_CompiledPattern(_Contraint:Strategy, _AutomataInst:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern))) }

  get_slot(_Contraint, t) { $t._Contraint }
  get_slot(_AutomataInst, t) { $t._AutomataInst }
  make( new_Contraint,  new_AutomataInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern( $new_Contraint,  $new_AutomataInst) }
}

    %op Strategy _RawAction(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._RawAction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._RawAction($arg0) }
    }
  
  
  %op Strategy When_RawAction(s:Strategy) {
    make(s) { `Sequence(Is_RawAction(),s) }
  }

  %op Strategy Is_RawAction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_RawAction()}
  }
  
%op Strategy Make_RawAction(_AstInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction))) }

  get_slot(_AstInstruction, t) { $t._AstInstruction }
  make( new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction( $new_AstInstruction) }
}

    %op Strategy _TypedAction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TypedAction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._TypedAction($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_TypedAction(s:Strategy) {
    make(s) { `Sequence(Is_TypedAction(),s) }
  }

  %op Strategy Is_TypedAction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_TypedAction()}
  }
  
%op Strategy Make_TypedAction(_AstInstruction:Strategy, _PositivePattern:Strategy, _NegativePatternList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction))) }

  get_slot(_AstInstruction, t) { $t._AstInstruction }
  get_slot(_PositivePattern, t) { $t._PositivePattern }
  get_slot(_NegativePatternList, t) { $t._NegativePatternList }
  make( new_AstInstruction,  new_PositivePattern,  new_NegativePatternList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction( $new_AstInstruction,  $new_PositivePattern,  $new_NegativePatternList) }
}

    %op Strategy _EmptyAndInstruction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._EmptyAndInstruction)))}
      
        make() { new tom.engine.adt.tominstruction.strategy.instruction._EmptyAndInstruction() }
    }
  
  
  %op Strategy When_EmptyAndInstruction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyAndInstruction(),s) }
  }

  %op Strategy Is_EmptyAndInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_EmptyAndInstruction()}
  }
  
%op Strategy Make_EmptyAndInstruction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_EmptyAndInstruction))) }

  make() { new tom.engine.adt.tominstruction.strategy.instruction.Make_EmptyAndInstruction() }
}

    %op Strategy _ConsAndInstruction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._ConsAndInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._ConsAndInstruction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsAndInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConsAndInstruction(),s) }
  }

  %op Strategy Is_ConsAndInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_ConsAndInstruction()}
  }
  
%op Strategy Make_ConsAndInstruction(_HeadAndInstruction:Strategy, _TailAndInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_ConsAndInstruction))) }

  get_slot(_HeadAndInstruction, t) { $t._HeadAndInstruction }
  get_slot(_TailAndInstruction, t) { $t._TailAndInstruction }
  make( new_HeadAndInstruction,  new_TailAndInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_ConsAndInstruction( $new_HeadAndInstruction,  $new_TailAndInstruction) }
}

    %op Strategy _EmptyOrInstruction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._EmptyOrInstruction)))}
      
        make() { new tom.engine.adt.tominstruction.strategy.instruction._EmptyOrInstruction() }
    }
  
  
  %op Strategy When_EmptyOrInstruction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrInstruction(),s) }
  }

  %op Strategy Is_EmptyOrInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_EmptyOrInstruction()}
  }
  
%op Strategy Make_EmptyOrInstruction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_EmptyOrInstruction))) }

  make() { new tom.engine.adt.tominstruction.strategy.instruction.Make_EmptyOrInstruction() }
}

    %op Strategy _ConsOrInstruction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction._ConsOrInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._ConsOrInstruction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsOrInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrInstruction(),s) }
  }

  %op Strategy Is_ConsOrInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instruction.Is_ConsOrInstruction()}
  }
  
%op Strategy Make_ConsOrInstruction(_HeadOrInstruction:Strategy, _TailOrInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_ConsOrInstruction))) }

  get_slot(_HeadOrInstruction, t) { $t._HeadOrInstruction }
  get_slot(_TailOrInstruction, t) { $t._TailOrInstruction }
  make( new_HeadOrInstruction,  new_TailOrInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_ConsOrInstruction( $new_HeadOrInstruction,  $new_TailOrInstruction) }
}

    %op Strategy _EmptyconcInstruction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction)))}
      
        make() { new tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction() }
    }
  
  
  %op Strategy When_EmptyconcInstruction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcInstruction(),s) }
  }

  %op Strategy Is_EmptyconcInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Is_EmptyconcInstruction()}
  }
  
%op Strategy Make_EmptyconcInstruction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction))) }

  make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction() }
}

    %op Strategy _ConsconcInstruction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcInstruction(),s) }
  }

  %op Strategy Is_ConsconcInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Is_ConsconcInstruction()}
  }
  
%op Strategy Make_ConsconcInstruction(_HeadconcInstruction:Strategy, _TailconcInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction))) }

  get_slot(_HeadconcInstruction, t) { $t._HeadconcInstruction }
  get_slot(_TailconcInstruction, t) { $t._TailconcInstruction }
  make( new_HeadconcInstruction,  new_TailconcInstruction) { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction( $new_HeadconcInstruction,  $new_TailconcInstruction) }
}

    %op Strategy _ConstraintInstruction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.constraintinstruction._ConstraintInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.constraintinstruction._ConstraintInstruction($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_ConstraintInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConstraintInstruction(),s) }
  }

  %op Strategy Is_ConstraintInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.constraintinstruction.Is_ConstraintInstruction()}
  }
  
%op Strategy Make_ConstraintInstruction(_Constraint:Strategy, _Action:Strategy, _Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.constraintinstruction.Make_ConstraintInstruction))) }

  get_slot(_Constraint, t) { $t._Constraint }
  get_slot(_Action, t) { $t._Action }
  get_slot(_Option, t) { $t._Option }
  make( new_Constraint,  new_Action,  new_Option) { new tom.engine.adt.tominstruction.strategy.constraintinstruction.Make_ConstraintInstruction( $new_Constraint,  $new_Action,  $new_Option) }
}

    %op Strategy _EmptyconcConstraintInstruction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.constraintinstructionlist._EmptyconcConstraintInstruction)))}
      
        make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist._EmptyconcConstraintInstruction() }
    }
  
  
  %op Strategy When_EmptyconcConstraintInstruction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcConstraintInstruction(),s) }
  }

  %op Strategy Is_EmptyconcConstraintInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Is_EmptyconcConstraintInstruction()}
  }
  
%op Strategy Make_EmptyconcConstraintInstruction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_EmptyconcConstraintInstruction))) }

  make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_EmptyconcConstraintInstruction() }
}

    %op Strategy _ConsconcConstraintInstruction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.constraintinstructionlist._ConsconcConstraintInstruction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist._ConsconcConstraintInstruction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcConstraintInstruction(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcConstraintInstruction(),s) }
  }

  %op Strategy Is_ConsconcConstraintInstruction() {
    make() { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Is_ConsconcConstraintInstruction()}
  }
  
%op Strategy Make_ConsconcConstraintInstruction(_HeadconcConstraintInstruction:Strategy, _TailconcConstraintInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_ConsconcConstraintInstruction))) }

  get_slot(_HeadconcConstraintInstruction, t) { $t._HeadconcConstraintInstruction }
  get_slot(_TailconcConstraintInstruction, t) { $t._TailconcConstraintInstruction }
  make( new_HeadconcConstraintInstruction,  new_TailconcConstraintInstruction) { new tom.engine.adt.tominstruction.strategy.constraintinstructionlist.Make_ConsconcConstraintInstruction( $new_HeadconcConstraintInstruction,  $new_TailconcConstraintInstruction) }
}

    %op Strategy _EmptyconcTomType() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType)))}
      
        make() { new tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType() }
    }
  
  
  %op Strategy When_EmptyconcTomType(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomType(),s) }
  }

  %op Strategy Is_EmptyconcTomType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Is_EmptyconcTomType()}
  }
  
%op Strategy Make_EmptyconcTomType() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType))) }

  make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType() }
}

    %op Strategy _ConsconcTomType(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcTomType(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomType(),s) }
  }

  %op Strategy Is_ConsconcTomType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Is_ConsconcTomType()}
  }
  
%op Strategy Make_ConsconcTomType(_HeadconcTomType:Strategy, _TailconcTomType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType))) }

  get_slot(_HeadconcTomType, t) { $t._HeadconcTomType }
  get_slot(_TailconcTomType, t) { $t._TailconcTomType }
  make( new_HeadconcTomType,  new_TailconcTomType) { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType( $new_HeadconcTomType,  $new_TailconcTomType) }
}

    %op Strategy _Type(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._Type)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._Type($arg0, $arg1) }
    }
  
  
  %op Strategy When_Type(s:Strategy) {
    make(s) { `Sequence(Is_Type(),s) }
  }

  %op Strategy Is_Type() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_Type()}
  }
  
%op Strategy Make_Type(_TomType:Strategy, _TlType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_Type))) }

  get_slot(_TomType, t) { $t._TomType }
  get_slot(_TlType, t) { $t._TlType }
  make( new_TomType,  new_TlType) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Type( $new_TomType,  $new_TlType) }
}

    %op Strategy _TomTypeAlone(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TomTypeAlone)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TomTypeAlone($arg0) }
    }
  
  
  %op Strategy When_TomTypeAlone(s:Strategy) {
    make(s) { `Sequence(Is_TomTypeAlone(),s) }
  }

  %op Strategy Is_TomTypeAlone() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TomTypeAlone()}
  }
  
%op Strategy Make_TomTypeAlone(_String:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TomTypeAlone))) }

  get_slot(_String, t) { $t._String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TomTypeAlone( $_String) }
}

    %op Strategy _ASTTomType(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._ASTTomType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._ASTTomType($arg0) }
    }
  
  
  %op Strategy When_ASTTomType(s:Strategy) {
    make(s) { `Sequence(Is_ASTTomType(),s) }
  }

  %op Strategy Is_ASTTomType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_ASTTomType()}
  }
  
%op Strategy Make_ASTTomType(_String:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_ASTTomType))) }

  get_slot(_String, t) { $t._String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomtype.Make_ASTTomType( $_String) }
}

    %op Strategy _Codomain(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._Codomain)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._Codomain($arg0) }
    }
  
  
  %op Strategy When_Codomain(s:Strategy) {
    make(s) { `Sequence(Is_Codomain(),s) }
  }

  %op Strategy Is_Codomain() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_Codomain()}
  }
  
%op Strategy Make_Codomain(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain( $new_AstName) }
}

    %op Strategy _TypesToType(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TypesToType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._TypesToType($arg0, $arg1) }
    }
  
  
  %op Strategy When_TypesToType(s:Strategy) {
    make(s) { `Sequence(Is_TypesToType(),s) }
  }

  %op Strategy Is_TypesToType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TypesToType()}
  }
  
%op Strategy Make_TypesToType(_Domain:Strategy, _Codomain:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType))) }

  get_slot(_Domain, t) { $t._Domain }
  get_slot(_Codomain, t) { $t._Codomain }
  make( new_Domain,  new_Codomain) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType( $new_Domain,  $new_Codomain) }
}

    %op Strategy _TLType(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TLType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TLType($arg0) }
    }
  
  
  %op Strategy When_TLType(s:Strategy) {
    make(s) { `Sequence(Is_TLType(),s) }
  }

  %op Strategy Is_TLType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TLType()}
  }
  
%op Strategy Make_TLType(_Tl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TLType))) }

  get_slot(_Tl, t) { $t._Tl }
  make( new_Tl) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TLType( $new_Tl) }
}

    %op Strategy _EmptyType() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._EmptyType)))}
      
        make() { new tom.engine.adt.tomtype.strategy.tomtype._EmptyType() }
    }
  
  
  %op Strategy When_EmptyType(s:Strategy) {
    make(s) { `Sequence(Is_EmptyType(),s) }
  }

  %op Strategy Is_EmptyType() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_EmptyType()}
  }
  
%op Strategy Make_EmptyType() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType))) }

  make() { new tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType() }
}

    %op Strategy _TypeList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TypeList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TypeList($arg0) }
    }
  
  
  %op Strategy When_TypeList(s:Strategy) {
    make(s) { `Sequence(Is_TypeList(),s) }
  }

  %op Strategy Is_TypeList() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TypeList()}
  }
  
%op Strategy Make_TypeList(_TypeList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TypeList))) }

  get_slot(_TypeList, t) { $t._TypeList }
  make( new_TypeList) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypeList( $new_TypeList) }
}

    %op Strategy _TypeWithSymbol(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TypeWithSymbol)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomtype.strategy.tomtype._TypeWithSymbol($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_TypeWithSymbol(s:Strategy) {
    make(s) { `Sequence(Is_TypeWithSymbol(),s) }
  }

  %op Strategy Is_TypeWithSymbol() {
    make() { new tom.engine.adt.tomtype.strategy.tomtype.Is_TypeWithSymbol()}
  }
  
%op Strategy Make_TypeWithSymbol(_TomType:Strategy, _TlType:Strategy, _RootSymbolName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TypeWithSymbol))) }

  get_slot(_TomType, t) { $t._TomType }
  get_slot(_TlType, t) { $t._TlType }
  get_slot(_RootSymbolName, t) { $t._RootSymbolName }
  make( new_TomType,  new_TlType,  new_RootSymbolName) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypeWithSymbol( $new_TomType,  $new_TlType,  $new_RootSymbolName) }
}

    %op Strategy _EmptyconcTomSymbol() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol)))}
      
        make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol() }
    }
  
  
  %op Strategy When_EmptyconcTomSymbol(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomSymbol(),s) }
  }

  %op Strategy Is_EmptyconcTomSymbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_EmptyconcTomSymbol()}
  }
  
%op Strategy Make_EmptyconcTomSymbol() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol))) }

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol() }
}

    %op Strategy _ConsconcTomSymbol(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcTomSymbol(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomSymbol(),s) }
  }

  %op Strategy Is_ConsconcTomSymbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Is_ConsconcTomSymbol()}
  }
  
%op Strategy Make_ConsconcTomSymbol(_HeadconcTomSymbol:Strategy, _TailconcTomSymbol:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol))) }

  get_slot(_HeadconcTomSymbol, t) { $t._HeadconcTomSymbol }
  get_slot(_TailconcTomSymbol, t) { $t._TailconcTomSymbol }
  make( new_HeadconcTomSymbol,  new_TailconcTomSymbol) { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol( $new_HeadconcTomSymbol,  $new_TailconcTomSymbol) }
}

    %op Strategy _VisitTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_VisitTerm(s:Strategy) {
    make(s) { `Sequence(Is_VisitTerm(),s) }
  }

  %op Strategy Is_VisitTerm() {
    make() { new tom.engine.adt.tomsignature.strategy.tomvisit.Is_VisitTerm()}
  }
  
%op Strategy Make_VisitTerm(_VNode:Strategy, _AstConstraintInstructionList:Strategy, _Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm))) }

  get_slot(_VNode, t) { $t._VNode }
  get_slot(_AstConstraintInstructionList, t) { $t._AstConstraintInstructionList }
  get_slot(_Option, t) { $t._Option }
  make( new_VNode,  new_AstConstraintInstructionList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm( $new_VNode,  $new_AstConstraintInstructionList,  $new_Option) }
}

    %op Strategy _StructTable(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable($arg0) }
    }
  
  
  %op Strategy When_StructTable(s:Strategy) {
    make(s) { `Sequence(Is_StructTable(),s) }
  }

  %op Strategy Is_StructTable() {
    make() { new tom.engine.adt.tomsignature.strategy.tomstructuretable.Is_StructTable()}
  }
  
%op Strategy Make_StructTable(_StructList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable))) }

  get_slot(_StructList, t) { $t._StructList }
  make( new_StructList) { new tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable( $new_StructList) }
}

    %op Strategy _TextPosition(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.position._TextPosition)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.position._TextPosition($arg0, $arg1) }
    }
  
  
  %op Strategy When_TextPosition(s:Strategy) {
    make(s) { `Sequence(Is_TextPosition(),s) }
  }

  %op Strategy Is_TextPosition() {
    make() { new tom.engine.adt.tomsignature.strategy.position.Is_TextPosition()}
  }
  
%op Strategy Make_TextPosition(_Line:int, _Column:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.position.Make_TextPosition))) }

  get_slot(_Line, t) { $t._Line }
  get_slot(_Column, t) { $t._Column }
  make( _Line,  _Column) { new tom.engine.adt.tomsignature.strategy.position.Make_TextPosition( $_Line,  $_Column) }
}

    %op Strategy _Entry(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomentry._Entry)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentry._Entry($arg0, $arg1) }
    }
  
  
  %op Strategy When_Entry(s:Strategy) {
    make(s) { `Sequence(Is_Entry(),s) }
  }

  %op Strategy Is_Entry() {
    make() { new tom.engine.adt.tomsignature.strategy.tomentry.Is_Entry()}
  }
  
%op Strategy Make_Entry(_StrName:String, _AstSymbol:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry))) }

  get_slot(_StrName, t) { $t._StrName }
  get_slot(_AstSymbol, t) { $t._AstSymbol }
  make( _StrName,  new_AstSymbol) { new tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry( $_StrName,  $new_AstSymbol) }
}

    %op Strategy _EmptyconcTomEntry() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry)))}
      
        make() { new tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry() }
    }
  
  
  %op Strategy When_EmptyconcTomEntry(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomEntry(),s) }
  }

  %op Strategy Is_EmptyconcTomEntry() {
    make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Is_EmptyconcTomEntry()}
  }
  
%op Strategy Make_EmptyconcTomEntry() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry))) }

  make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry() }
}

    %op Strategy _ConsconcTomEntry(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcTomEntry(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomEntry(),s) }
  }

  %op Strategy Is_ConsconcTomEntry() {
    make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Is_ConsconcTomEntry()}
  }
  
%op Strategy Make_ConsconcTomEntry(_HeadconcTomEntry:Strategy, _TailconcTomEntry:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry))) }

  get_slot(_HeadconcTomEntry, t) { $t._HeadconcTomEntry }
  get_slot(_TailconcTomEntry, t) { $t._TailconcTomEntry }
  make( new_HeadconcTomEntry,  new_TailconcTomEntry) { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry( $new_HeadconcTomEntry,  $new_TailconcTomEntry) }
}

    %op Strategy _EmptyconcTomVisit() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit)))}
      
        make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit() }
    }
  
  
  %op Strategy When_EmptyconcTomVisit(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomVisit(),s) }
  }

  %op Strategy Is_EmptyconcTomVisit() {
    make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_EmptyconcTomVisit()}
  }
  
%op Strategy Make_EmptyconcTomVisit() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit))) }

  make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit() }
}

    %op Strategy _ConsconcTomVisit(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcTomVisit(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomVisit(),s) }
  }

  %op Strategy Is_ConsconcTomVisit() {
    make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Is_ConsconcTomVisit()}
  }
  
%op Strategy Make_ConsconcTomVisit(_HeadconcTomVisit:Strategy, _TailconcTomVisit:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit))) }

  get_slot(_HeadconcTomVisit, t) { $t._HeadconcTomVisit }
  get_slot(_TailconcTomVisit, t) { $t._TailconcTomVisit }
  make( new_HeadconcTomVisit,  new_TailconcTomVisit) { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit( $new_HeadconcTomVisit,  $new_TailconcTomVisit) }
}

    %op Strategy _TL(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._TL)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.targetlanguage._TL($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_TL(s:Strategy) {
    make(s) { `Sequence(Is_TL(),s) }
  }

  %op Strategy Is_TL() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_TL()}
  }
  
%op Strategy Make_TL(_Code:String, _Start:Strategy, _End:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL))) }

  get_slot(_Code, t) { $t._Code }
  get_slot(_Start, t) { $t._Start }
  get_slot(_End, t) { $t._End }
  make( _Code,  new_Start,  new_End) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL( $_Code,  $new_Start,  $new_End) }
}

    %op Strategy _ITL(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._ITL)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._ITL($arg0) }
    }
  
  
  %op Strategy When_ITL(s:Strategy) {
    make(s) { `Sequence(Is_ITL(),s) }
  }

  %op Strategy Is_ITL() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_ITL()}
  }
  
%op Strategy Make_ITL(_Code:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL))) }

  get_slot(_Code, t) { $t._Code }
  make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL( $_Code) }
}

    %op Strategy _Comment(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._Comment)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._Comment($arg0) }
    }
  
  
  %op Strategy When_Comment(s:Strategy) {
    make(s) { `Sequence(Is_Comment(),s) }
  }

  %op Strategy Is_Comment() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_Comment()}
  }
  
%op Strategy Make_Comment(_Code:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment))) }

  get_slot(_Code, t) { $t._Code }
  make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment( $_Code) }
}

    %op Strategy _noTL() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._noTL)))}
      
        make() { new tom.engine.adt.tomsignature.strategy.targetlanguage._noTL() }
    }
  
  
  %op Strategy When_noTL(s:Strategy) {
    make(s) { `Sequence(Is_noTL(),s) }
  }

  %op Strategy Is_noTL() {
    make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Is_noTL()}
  }
  
%op Strategy Make_noTL() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL))) }

  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL() }
}

    %op Strategy _Table(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymboltable._Table)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomsignature.strategy.tomsymboltable._Table($arg0) }
    }
  
  
  %op Strategy When_Table(s:Strategy) {
    make(s) { `Sequence(Is_Table(),s) }
  }

  %op Strategy Is_Table() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymboltable.Is_Table()}
  }
  
%op Strategy Make_Table(_EntryList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table))) }

  get_slot(_EntryList, t) { $t._EntryList }
  make( new_EntryList) { new tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table( $new_EntryList) }
}

    %op Strategy _emptySymbol() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol)))}
      
        make() { new tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol() }
    }
  
  
  %op Strategy When_emptySymbol(s:Strategy) {
    make(s) { `Sequence(Is_emptySymbol(),s) }
  }

  %op Strategy Is_emptySymbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Is_emptySymbol()}
  }
  
%op Strategy Make_emptySymbol() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol))) }

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol() }
}

    %op Strategy _Symbol(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_Symbol(s:Strategy) {
    make(s) { `Sequence(Is_Symbol(),s) }
  }

  %op Strategy Is_Symbol() {
    make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Is_Symbol()}
  }
  
%op Strategy Make_Symbol(_AstName:Strategy, _TypesToType:Strategy, _PairNameDeclList:Strategy, _Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_TypesToType, t) { $t._TypesToType }
  get_slot(_PairNameDeclList, t) { $t._PairNameDeclList }
  get_slot(_Option, t) { $t._Option }
  make( new_AstName,  new_TypesToType,  new_PairNameDeclList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol( $new_AstName,  $new_TypesToType,  $new_PairNameDeclList,  $new_Option) }
}

    %op Strategy _UsedSymbolConstructor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor($arg0) }
    }
  
  
  %op Strategy When_UsedSymbolConstructor(s:Strategy) {
    make(s) { `Sequence(Is_UsedSymbolConstructor(),s) }
  }

  %op Strategy Is_UsedSymbolConstructor() {
    make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolConstructor()}
  }
  
%op Strategy Make_UsedSymbolConstructor(_Symbol:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor))) }

  get_slot(_Symbol, t) { $t._Symbol }
  make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor( $new_Symbol) }
}

    %op Strategy _UsedSymbolDestructor(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor($arg0) }
    }
  
  
  %op Strategy When_UsedSymbolDestructor(s:Strategy) {
    make(s) { `Sequence(Is_UsedSymbolDestructor(),s) }
  }

  %op Strategy Is_UsedSymbolDestructor() {
    make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedSymbolDestructor()}
  }
  
%op Strategy Make_UsedSymbolDestructor(_Symbol:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor))) }

  get_slot(_Symbol, t) { $t._Symbol }
  make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor( $new_Symbol) }
}

    %op Strategy _UsedType(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedType($arg0) }
    }
  
  
  %op Strategy When_UsedType(s:Strategy) {
    make(s) { `Sequence(Is_UsedType(),s) }
  }

  %op Strategy Is_UsedType() {
    make() { new tom.engine.adt.tomsignature.strategy.keyentry.Is_UsedType()}
  }
  
%op Strategy Make_UsedType(_Typedef:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedType))) }

  get_slot(_Typedef, t) { $t._Typedef }
  make( new_Typedef) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedType( $new_Typedef) }
}

    %op Strategy _Syntactic() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory._Syntactic)))}
      
        make() { new tom.engine.adt.theory.strategy.elementarytheory._Syntactic() }
    }
  
  
  %op Strategy When_Syntactic(s:Strategy) {
    make(s) { `Sequence(Is_Syntactic(),s) }
  }

  %op Strategy Is_Syntactic() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_Syntactic()}
  }
  
%op Strategy Make_Syntactic() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_Syntactic))) }

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Syntactic() }
}

    %op Strategy _Associative() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory._Associative)))}
      
        make() { new tom.engine.adt.theory.strategy.elementarytheory._Associative() }
    }
  
  
  %op Strategy When_Associative(s:Strategy) {
    make(s) { `Sequence(Is_Associative(),s) }
  }

  %op Strategy Is_Associative() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_Associative()}
  }
  
%op Strategy Make_Associative() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_Associative))) }

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Associative() }
}

    %op Strategy _Unitary() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory._Unitary)))}
      
        make() { new tom.engine.adt.theory.strategy.elementarytheory._Unitary() }
    }
  
  
  %op Strategy When_Unitary(s:Strategy) {
    make(s) { `Sequence(Is_Unitary(),s) }
  }

  %op Strategy Is_Unitary() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_Unitary()}
  }
  
%op Strategy Make_Unitary() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_Unitary))) }

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Unitary() }
}

    %op Strategy _TrueAU() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory._TrueAU)))}
      
        make() { new tom.engine.adt.theory.strategy.elementarytheory._TrueAU() }
    }
  
  
  %op Strategy When_TrueAU(s:Strategy) {
    make(s) { `Sequence(Is_TrueAU(),s) }
  }

  %op Strategy Is_TrueAU() {
    make() { new tom.engine.adt.theory.strategy.elementarytheory.Is_TrueAU()}
  }
  
%op Strategy Make_TrueAU() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_TrueAU))) }

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_TrueAU() }
}

    %op Strategy _EmptyconcElementaryTheory() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.theory._EmptyconcElementaryTheory)))}
      
        make() { new tom.engine.adt.theory.strategy.theory._EmptyconcElementaryTheory() }
    }
  
  
  %op Strategy When_EmptyconcElementaryTheory(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcElementaryTheory(),s) }
  }

  %op Strategy Is_EmptyconcElementaryTheory() {
    make() { new tom.engine.adt.theory.strategy.theory.Is_EmptyconcElementaryTheory()}
  }
  
%op Strategy Make_EmptyconcElementaryTheory() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.theory.Make_EmptyconcElementaryTheory))) }

  make() { new tom.engine.adt.theory.strategy.theory.Make_EmptyconcElementaryTheory() }
}

    %op Strategy _ConsconcElementaryTheory(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcElementaryTheory(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcElementaryTheory(),s) }
  }

  %op Strategy Is_ConsconcElementaryTheory() {
    make() { new tom.engine.adt.theory.strategy.theory.Is_ConsconcElementaryTheory()}
  }
  
%op Strategy Make_ConsconcElementaryTheory(_HeadconcElementaryTheory:Strategy, _TailconcElementaryTheory:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory))) }

  get_slot(_HeadconcElementaryTheory, t) { $t._HeadconcElementaryTheory }
  get_slot(_TailconcElementaryTheory, t) { $t._TailconcElementaryTheory }
  make( new_HeadconcElementaryTheory,  new_TailconcElementaryTheory) { new tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory( $new_HeadconcElementaryTheory,  $new_TailconcElementaryTheory) }
}

    %op Strategy _EmptyconcDeclaration() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration)))}
      
        make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration() }
    }
  
  
  %op Strategy When_EmptyconcDeclaration(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcDeclaration(),s) }
  }

  %op Strategy Is_EmptyconcDeclaration() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_EmptyconcDeclaration()}
  }
  
%op Strategy Make_EmptyconcDeclaration() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration))) }

  make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration() }
}

    %op Strategy _ConsconcDeclaration(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcDeclaration(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcDeclaration(),s) }
  }

  %op Strategy Is_ConsconcDeclaration() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Is_ConsconcDeclaration()}
  }
  
%op Strategy Make_ConsconcDeclaration(_HeadconcDeclaration:Strategy, _TailconcDeclaration:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration))) }

  get_slot(_HeadconcDeclaration, t) { $t._HeadconcDeclaration }
  get_slot(_TailconcDeclaration, t) { $t._TailconcDeclaration }
  make( new_HeadconcDeclaration,  new_TailconcDeclaration) { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration( $new_HeadconcDeclaration,  $new_TailconcDeclaration) }
}

    %op Strategy _TypeTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_TypeTermDecl(s:Strategy) {
    make(s) { `Sequence(Is_TypeTermDecl(),s) }
  }

  %op Strategy Is_TypeTermDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_TypeTermDecl()}
  }
  
%op Strategy Make_TypeTermDecl(_AstName:Strategy, _Declarations:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Declarations, t) { $t._Declarations }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_Declarations,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl( $new_AstName,  $new_Declarations,  $new_OrgTrack) }
}

    %op Strategy _GetImplementationDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_GetImplementationDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetImplementationDecl(),s) }
  }

  %op Strategy Is_GetImplementationDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetImplementationDecl()}
  }
  
%op Strategy Make_GetImplementationDecl(_Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl))) }

  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Instr, t) { $t._Instr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl( $new_Variable,  $new_Instr,  $new_OrgTrack) }
}

    %op Strategy _IsFsymDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_IsFsymDecl(s:Strategy) {
    make(s) { `Sequence(Is_IsFsymDecl(),s) }
  }

  %op Strategy Is_IsFsymDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsFsymDecl()}
  }
  
%op Strategy Make_IsFsymDecl(_AstName:Strategy, _Variable:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl( $new_AstName,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _GetSlotDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_GetSlotDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetSlotDecl(),s) }
  }

  %op Strategy Is_GetSlotDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSlotDecl()}
  }
  
%op Strategy Make_GetSlotDecl(_AstName:Strategy, _SlotName:Strategy, _Variable:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_SlotName, t) { $t._SlotName }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_SlotName,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl( $new_AstName,  $new_SlotName,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _EqualTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_EqualTermDecl(s:Strategy) {
    make(s) { `Sequence(Is_EqualTermDecl(),s) }
  }

  %op Strategy Is_EqualTermDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_EqualTermDecl()}
  }
  
%op Strategy Make_EqualTermDecl(_TermArg1:Strategy, _TermArg2:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl))) }

  get_slot(_TermArg1, t) { $t._TermArg1 }
  get_slot(_TermArg2, t) { $t._TermArg2 }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_TermArg1,  new_TermArg2,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl( $new_TermArg1,  $new_TermArg2,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _IsSortDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_IsSortDecl(s:Strategy) {
    make(s) { `Sequence(Is_IsSortDecl(),s) }
  }

  %op Strategy Is_IsSortDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsSortDecl()}
  }
  
%op Strategy Make_IsSortDecl(_TermArg:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl))) }

  get_slot(_TermArg, t) { $t._TermArg }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_TermArg,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl( $new_TermArg,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _GetHeadDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_GetHeadDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetHeadDecl(),s) }
  }

  %op Strategy Is_GetHeadDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetHeadDecl()}
  }
  
%op Strategy Make_GetHeadDecl(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_Opname,  new_Codomain,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl( $new_Opname,  $new_Codomain,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _GetTailDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_GetTailDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetTailDecl(),s) }
  }

  %op Strategy Is_GetTailDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetTailDecl()}
  }
  
%op Strategy Make_GetTailDecl(_Opname:Strategy, _Variable:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_Opname,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl( $new_Opname,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _IsEmptyDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_IsEmptyDecl(s:Strategy) {
    make(s) { `Sequence(Is_IsEmptyDecl(),s) }
  }

  %op Strategy Is_IsEmptyDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IsEmptyDecl()}
  }
  
%op Strategy Make_IsEmptyDecl(_Opname:Strategy, _Variable:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_Opname,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl( $new_Opname,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _MakeEmptyList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_MakeEmptyList(s:Strategy) {
    make(s) { `Sequence(Is_MakeEmptyList(),s) }
  }

  %op Strategy Is_MakeEmptyList() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyList()}
  }
  
%op Strategy Make_MakeEmptyList(_AstName:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Instr, t) { $t._Instr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList( $new_AstName,  $new_Instr,  $new_OrgTrack) }
}

    %op Strategy _MakeAddList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_MakeAddList(s:Strategy) {
    make(s) { `Sequence(Is_MakeAddList(),s) }
  }

  %op Strategy Is_MakeAddList() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddList()}
  }
  
%op Strategy Make_MakeAddList(_AstName:Strategy, _VarElt:Strategy, _VarList:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_VarElt, t) { $t._VarElt }
  get_slot(_VarList, t) { $t._VarList }
  get_slot(_Instr, t) { $t._Instr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList( $new_AstName,  $new_VarElt,  $new_VarList,  $new_Instr,  $new_OrgTrack) }
}

    %op Strategy _GetElementDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_GetElementDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetElementDecl(),s) }
  }

  %op Strategy Is_GetElementDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetElementDecl()}
  }
  
%op Strategy Make_GetElementDecl(_Opname:Strategy, _Variable:Strategy, _Index:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Index, t) { $t._Index }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_Opname,  new_Variable,  new_Index,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl( $new_Opname,  $new_Variable,  $new_Index,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _GetSizeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_GetSizeDecl(s:Strategy) {
    make(s) { `Sequence(Is_GetSizeDecl(),s) }
  }

  %op Strategy Is_GetSizeDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_GetSizeDecl()}
  }
  
%op Strategy Make_GetSizeDecl(_Opname:Strategy, _Variable:Strategy, _Expr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Expr, t) { $t._Expr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_Opname,  new_Variable,  new_Expr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl( $new_Opname,  $new_Variable,  $new_Expr,  $new_OrgTrack) }
}

    %op Strategy _MakeEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_MakeEmptyArray(s:Strategy) {
    make(s) { `Sequence(Is_MakeEmptyArray(),s) }
  }

  %op Strategy Is_MakeEmptyArray() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeEmptyArray()}
  }
  
%op Strategy Make_MakeEmptyArray(_AstName:Strategy, _VarSize:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_VarSize, t) { $t._VarSize }
  get_slot(_Instr, t) { $t._Instr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_VarSize,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray( $new_AstName,  $new_VarSize,  $new_Instr,  $new_OrgTrack) }
}

    %op Strategy _MakeAddArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_MakeAddArray(s:Strategy) {
    make(s) { `Sequence(Is_MakeAddArray(),s) }
  }

  %op Strategy Is_MakeAddArray() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeAddArray()}
  }
  
%op Strategy Make_MakeAddArray(_AstName:Strategy, _VarElt:Strategy, _VarList:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_VarElt, t) { $t._VarElt }
  get_slot(_VarList, t) { $t._VarList }
  get_slot(_Instr, t) { $t._Instr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray( $new_AstName,  $new_VarElt,  $new_VarList,  $new_Instr,  $new_OrgTrack) }
}

    %op Strategy _MakeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_MakeDecl(s:Strategy) {
    make(s) { `Sequence(Is_MakeDecl(),s) }
  }

  %op Strategy Is_MakeDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MakeDecl()}
  }
  
%op Strategy Make_MakeDecl(_AstName:Strategy, _AstType:Strategy, _Args:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Args, t) { $t._Args }
  get_slot(_Instr, t) { $t._Instr }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_AstName,  new_AstType,  new_Args,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl( $new_AstName,  $new_AstType,  $new_Args,  $new_Instr,  $new_OrgTrack) }
}

    %op Strategy _Strategy(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._Strategy)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Strategy($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_Strategy(s:Strategy) {
    make(s) { `Sequence(Is_Strategy(),s) }
  }

  %op Strategy Is_Strategy() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_Strategy()}
  }
  
%op Strategy Make_Strategy(_SName:Strategy, _ExtendsTerm:Strategy, _VisitList:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy))) }

  get_slot(_SName, t) { $t._SName }
  get_slot(_ExtendsTerm, t) { $t._ExtendsTerm }
  get_slot(_VisitList, t) { $t._VisitList }
  get_slot(_OrgTrack, t) { $t._OrgTrack }
  make( new_SName,  new_ExtendsTerm,  new_VisitList,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy( $new_SName,  $new_ExtendsTerm,  $new_VisitList,  $new_OrgTrack) }
}

    %op Strategy _FunctionDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_FunctionDef(s:Strategy) {
    make(s) { `Sequence(Is_FunctionDef(),s) }
  }

  %op Strategy Is_FunctionDef() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_FunctionDef()}
  }
  
%op Strategy Make_FunctionDef(_AstName:Strategy, _ArgumentList:Strategy, _Codomain:Strategy, _ThrowsType:Strategy, _Instruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_ArgumentList, t) { $t._ArgumentList }
  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_ThrowsType, t) { $t._ThrowsType }
  get_slot(_Instruction, t) { $t._Instruction }
  make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef( $new_AstName,  $new_ArgumentList,  $new_Codomain,  $new_ThrowsType,  $new_Instruction) }
}

    %op Strategy _MethodDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_MethodDef(s:Strategy) {
    make(s) { `Sequence(Is_MethodDef(),s) }
  }

  %op Strategy Is_MethodDef() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_MethodDef()}
  }
  
%op Strategy Make_MethodDef(_AstName:Strategy, _ArgumentList:Strategy, _Codomain:Strategy, _ThrowsType:Strategy, _Instruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_ArgumentList, t) { $t._ArgumentList }
  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_ThrowsType, t) { $t._ThrowsType }
  get_slot(_Instruction, t) { $t._Instruction }
  make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef( $new_AstName,  $new_ArgumentList,  $new_Codomain,  $new_ThrowsType,  $new_Instruction) }
}

    %op Strategy _Class(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._Class)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Class($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_Class(s:Strategy) {
    make(s) { `Sequence(Is_Class(),s) }
  }

  %op Strategy Is_Class() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_Class()}
  }
  
%op Strategy Make_Class(_AstName:Strategy, _ExtendsType:Strategy, _SuperTerm:Strategy, _Declaration:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_ExtendsType, t) { $t._ExtendsType }
  get_slot(_SuperTerm, t) { $t._SuperTerm }
  get_slot(_Declaration, t) { $t._Declaration }
  make( new_AstName,  new_ExtendsType,  new_SuperTerm,  new_Declaration) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class( $new_AstName,  $new_ExtendsType,  $new_SuperTerm,  $new_Declaration) }
}

    %op Strategy _IntrospectorClass(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IntrospectorClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomdeclaration.strategy.declaration._IntrospectorClass($arg0, $arg1) }
    }
  
  
  %op Strategy When_IntrospectorClass(s:Strategy) {
    make(s) { `Sequence(Is_IntrospectorClass(),s) }
  }

  %op Strategy Is_IntrospectorClass() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_IntrospectorClass()}
  }
  
%op Strategy Make_IntrospectorClass(_AstName:Strategy, _Declaration:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IntrospectorClass))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Declaration, t) { $t._Declaration }
  make( new_AstName,  new_Declaration) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IntrospectorClass( $new_AstName,  $new_Declaration) }
}

    %op Strategy _SymbolDecl(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl($arg0) }
    }
  
  
  %op Strategy When_SymbolDecl(s:Strategy) {
    make(s) { `Sequence(Is_SymbolDecl(),s) }
  }

  %op Strategy Is_SymbolDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_SymbolDecl()}
  }
  
%op Strategy Make_SymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl( $new_AstName) }
}

    %op Strategy _ListSymbolDecl(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl($arg0) }
    }
  
  
  %op Strategy When_ListSymbolDecl(s:Strategy) {
    make(s) { `Sequence(Is_ListSymbolDecl(),s) }
  }

  %op Strategy Is_ListSymbolDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_ListSymbolDecl()}
  }
  
%op Strategy Make_ListSymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl( $new_AstName) }
}

    %op Strategy _ArraySymbolDecl(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl($arg0) }
    }
  
  
  %op Strategy When_ArraySymbolDecl(s:Strategy) {
    make(s) { `Sequence(Is_ArraySymbolDecl(),s) }
  }

  %op Strategy Is_ArraySymbolDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_ArraySymbolDecl()}
  }
  
%op Strategy Make_ArraySymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl( $new_AstName) }
}

    %op Strategy _EmptyDeclaration() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration)))}
      
        make() { new tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration() }
    }
  
  
  %op Strategy When_EmptyDeclaration(s:Strategy) {
    make(s) { `Sequence(Is_EmptyDeclaration(),s) }
  }

  %op Strategy Is_EmptyDeclaration() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_EmptyDeclaration()}
  }
  
%op Strategy Make_EmptyDeclaration() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration))) }

  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration() }
}

    %op Strategy _AbstractDecl(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl($arg0) }
    }
  
  
  %op Strategy When_AbstractDecl(s:Strategy) {
    make(s) { `Sequence(Is_AbstractDecl(),s) }
  }

  %op Strategy Is_AbstractDecl() {
    make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Is_AbstractDecl()}
  }
  
%op Strategy Make_AbstractDecl(_DeclList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl))) }

  get_slot(_DeclList, t) { $t._DeclList }
  make( new_DeclList) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl( $new_DeclList) }
}

    %op Strategy _MatchNumber(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._MatchNumber)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._MatchNumber($arg0) }
    }
  
  
  %op Strategy When_MatchNumber(s:Strategy) {
    make(s) { `Sequence(Is_MatchNumber(),s) }
  }

  %op Strategy Is_MatchNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_MatchNumber()}
  }
  
%op Strategy Make_MatchNumber(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber( $_Integer) }
}

    %op Strategy _PatternNumber(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._PatternNumber)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._PatternNumber($arg0) }
    }
  
  
  %op Strategy When_PatternNumber(s:Strategy) {
    make(s) { `Sequence(Is_PatternNumber(),s) }
  }

  %op Strategy Is_PatternNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_PatternNumber()}
  }
  
%op Strategy Make_PatternNumber(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber( $_Integer) }
}

    %op Strategy _ListNumber(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._ListNumber)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._ListNumber($arg0) }
    }
  
  
  %op Strategy When_ListNumber(s:Strategy) {
    make(s) { `Sequence(Is_ListNumber(),s) }
  }

  %op Strategy Is_ListNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_ListNumber()}
  }
  
%op Strategy Make_ListNumber(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber( $_Integer) }
}

    %op Strategy _IndexNumber(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._IndexNumber)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._IndexNumber($arg0) }
    }
  
  
  %op Strategy When_IndexNumber(s:Strategy) {
    make(s) { `Sequence(Is_IndexNumber(),s) }
  }

  %op Strategy Is_IndexNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_IndexNumber()}
  }
  
%op Strategy Make_IndexNumber(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber( $_Integer) }
}

    %op Strategy _Begin(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Begin)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Begin($arg0) }
    }
  
  
  %op Strategy When_Begin(s:Strategy) {
    make(s) { `Sequence(Is_Begin(),s) }
  }

  %op Strategy Is_Begin() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Begin()}
  }
  
%op Strategy Make_Begin(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Begin))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Begin( $_Integer) }
}

    %op Strategy _End(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._End)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._End($arg0) }
    }
  
  
  %op Strategy When_End(s:Strategy) {
    make(s) { `Sequence(Is_End(),s) }
  }

  %op Strategy Is_End() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_End()}
  }
  
%op Strategy Make_End(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_End))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_End( $_Integer) }
}

    %op Strategy _Save(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Save)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Save($arg0) }
    }
  
  
  %op Strategy When_Save(s:Strategy) {
    make(s) { `Sequence(Is_Save(),s) }
  }

  %op Strategy Is_Save() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Save()}
  }
  
%op Strategy Make_Save(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Save))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Save( $_Integer) }
}

    %op Strategy _Position(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Position)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Position($arg0) }
    }
  
  
  %op Strategy When_Position(s:Strategy) {
    make(s) { `Sequence(Is_Position(),s) }
  }

  %op Strategy Is_Position() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_Position()}
  }
  
%op Strategy Make_Position(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Position))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Position( $_Integer) }
}

    %op Strategy _AbsVar(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._AbsVar)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._AbsVar($arg0) }
    }
  
  
  %op Strategy When_AbsVar(s:Strategy) {
    make(s) { `Sequence(Is_AbsVar(),s) }
  }

  %op Strategy Is_AbsVar() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_AbsVar()}
  }
  
%op Strategy Make_AbsVar(_Integer:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar))) }

  get_slot(_Integer, t) { $t._Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar( $_Integer) }
}

    %op Strategy _RenamedVar(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._RenamedVar)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._RenamedVar($arg0) }
    }
  
  
  %op Strategy When_RenamedVar(s:Strategy) {
    make(s) { `Sequence(Is_RenamedVar(),s) }
  }

  %op Strategy Is_RenamedVar() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_RenamedVar()}
  }
  
%op Strategy Make_RenamedVar(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar( $new_AstName) }
}

    %op Strategy _NameNumber(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber._NameNumber)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._NameNumber($arg0) }
    }
  
  
  %op Strategy When_NameNumber(s:Strategy) {
    make(s) { `Sequence(Is_NameNumber(),s) }
  }

  %op Strategy Is_NameNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumber.Is_NameNumber()}
  }
  
%op Strategy Make_NameNumber(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber( $new_AstName) }
}

    %op Strategy _EmptyconcTomNumber() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber)))}
      
        make() { new tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber() }
    }
  
  
  %op Strategy When_EmptyconcTomNumber(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomNumber(),s) }
  }

  %op Strategy Is_EmptyconcTomNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_EmptyconcTomNumber()}
  }
  
%op Strategy Make_EmptyconcTomNumber() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber))) }

  make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber() }
}

    %op Strategy _ConsconcTomNumber(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcTomNumber(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomNumber(),s) }
  }

  %op Strategy Is_ConsconcTomNumber() {
    make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Is_ConsconcTomNumber()}
  }
  
%op Strategy Make_ConsconcTomNumber(_HeadconcTomNumber:Strategy, _TailconcTomNumber:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber))) }

  get_slot(_HeadconcTomNumber, t) { $t._HeadconcTomNumber }
  get_slot(_TailconcTomNumber, t) { $t._TailconcTomNumber }
  make( new_HeadconcTomNumber,  new_TailconcTomNumber) { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber( $new_HeadconcTomNumber,  $new_TailconcTomNumber) }
}

    %op Strategy _EmptyconcTomName() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName)))}
      
        make() { new tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName() }
    }
  
  
  %op Strategy When_EmptyconcTomName(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomName(),s) }
  }

  %op Strategy Is_EmptyconcTomName() {
    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_EmptyconcTomName()}
  }
  
%op Strategy Make_EmptyconcTomName() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName))) }

  make() { new tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName() }
}

    %op Strategy _ConsconcTomName(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcTomName(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomName(),s) }
  }

  %op Strategy Is_ConsconcTomName() {
    make() { new tom.engine.adt.tomname.strategy.tomnamelist.Is_ConsconcTomName()}
  }
  
%op Strategy Make_ConsconcTomName(_HeadconcTomName:Strategy, _TailconcTomName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName))) }

  get_slot(_HeadconcTomName, t) { $t._HeadconcTomName }
  get_slot(_TailconcTomName, t) { $t._TailconcTomName }
  make( new_HeadconcTomName,  new_TailconcTomName) { new tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName( $new_HeadconcTomName,  $new_TailconcTomName) }
}

    %op Strategy _Name(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._Name)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomname._Name($arg0) }
    }
  
  
  %op Strategy When_Name(s:Strategy) {
    make(s) { `Sequence(Is_Name(),s) }
  }

  %op Strategy Is_Name() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_Name()}
  }
  
%op Strategy Make_Name(_String:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_Name))) }

  get_slot(_String, t) { $t._String }
  make( _String) { new tom.engine.adt.tomname.strategy.tomname.Make_Name( $_String) }
}

    %op Strategy _PositionName(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._PositionName)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomname._PositionName($arg0) }
    }
  
  
  %op Strategy When_PositionName(s:Strategy) {
    make(s) { `Sequence(Is_PositionName(),s) }
  }

  %op Strategy Is_PositionName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_PositionName()}
  }
  
%op Strategy Make_PositionName(_NumberList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_PositionName))) }

  get_slot(_NumberList, t) { $t._NumberList }
  make( new_NumberList) { new tom.engine.adt.tomname.strategy.tomname.Make_PositionName( $new_NumberList) }
}

    %op Strategy _EmptyName() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._EmptyName)))}
      
        make() { new tom.engine.adt.tomname.strategy.tomname._EmptyName() }
    }
  
  
  %op Strategy When_EmptyName(s:Strategy) {
    make(s) { `Sequence(Is_EmptyName(),s) }
  }

  %op Strategy Is_EmptyName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_EmptyName()}
  }
  
%op Strategy Make_EmptyName() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_EmptyName))) }

  make() { new tom.engine.adt.tomname.strategy.tomname.Make_EmptyName() }
}

    %op Strategy _AntiName(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname._AntiName)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomname.strategy.tomname._AntiName($arg0) }
    }
  
  
  %op Strategy When_AntiName(s:Strategy) {
    make(s) { `Sequence(Is_AntiName(),s) }
  }

  %op Strategy Is_AntiName() {
    make() { new tom.engine.adt.tomname.strategy.tomname.Is_AntiName()}
  }
  
%op Strategy Make_AntiName(_Name:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_AntiName))) }

  get_slot(_Name, t) { $t._Name }
  make( new_Name) { new tom.engine.adt.tomname.strategy.tomname.Make_AntiName( $new_Name) }
}

    %op Strategy _TomTermToExpression(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression($arg0) }
    }
  
  
  %op Strategy When_TomTermToExpression(s:Strategy) {
    make(s) { `Sequence(Is_TomTermToExpression(),s) }
  }

  %op Strategy Is_TomTermToExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TomTermToExpression()}
  }
  
%op Strategy Make_TomTermToExpression(_AstTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression))) }

  get_slot(_AstTerm, t) { $t._AstTerm }
  make( new_AstTerm) { new tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression( $new_AstTerm) }
}

    %op Strategy _TomInstructionToExpression(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._TomInstructionToExpression)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._TomInstructionToExpression($arg0) }
    }
  
  
  %op Strategy When_TomInstructionToExpression(s:Strategy) {
    make(s) { `Sequence(Is_TomInstructionToExpression(),s) }
  }

  %op Strategy Is_TomInstructionToExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TomInstructionToExpression()}
  }
  
%op Strategy Make_TomInstructionToExpression(_Instruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TomInstructionToExpression))) }

  get_slot(_Instruction, t) { $t._Instruction }
  make( new_Instruction) { new tom.engine.adt.tomexpression.strategy.expression.Make_TomInstructionToExpression( $new_Instruction) }
}

    %op Strategy _Bottom(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._Bottom)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Bottom($arg0) }
    }
  
  
  %op Strategy When_Bottom(s:Strategy) {
    make(s) { `Sequence(Is_Bottom(),s) }
  }

  %op Strategy Is_Bottom() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Bottom()}
  }
  
%op Strategy Make_Bottom(_TomType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Bottom))) }

  get_slot(_TomType, t) { $t._TomType }
  make( new_TomType) { new tom.engine.adt.tomexpression.strategy.expression.Make_Bottom( $new_TomType) }
}

    %op Strategy _Negation(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._Negation)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Negation($arg0) }
    }
  
  
  %op Strategy When_Negation(s:Strategy) {
    make(s) { `Sequence(Is_Negation(),s) }
  }

  %op Strategy Is_Negation() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Negation()}
  }
  
%op Strategy Make_Negation(_Arg:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Negation))) }

  get_slot(_Arg, t) { $t._Arg }
  make( new_Arg) { new tom.engine.adt.tomexpression.strategy.expression.Make_Negation( $new_Arg) }
}

    %op Strategy _And(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._And)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._And($arg0, $arg1) }
    }
  
  
  %op Strategy When_And(s:Strategy) {
    make(s) { `Sequence(Is_And(),s) }
  }

  %op Strategy Is_And() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_And()}
  }
  
%op Strategy Make_And(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_And))) }

  get_slot(_Arg1, t) { $t._Arg1 }
  get_slot(_Arg2, t) { $t._Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_And( $new_Arg1,  $new_Arg2) }
}

    %op Strategy _Or(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._Or)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Or($arg0, $arg1) }
    }
  
  
  %op Strategy When_Or(s:Strategy) {
    make(s) { `Sequence(Is_Or(),s) }
  }

  %op Strategy Is_Or() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Or()}
  }
  
%op Strategy Make_Or(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Or))) }

  get_slot(_Arg1, t) { $t._Arg1 }
  get_slot(_Arg2, t) { $t._Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_Or( $new_Arg1,  $new_Arg2) }
}

    %op Strategy _EmptyOrExpressionDisjunction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._EmptyOrExpressionDisjunction)))}
      
        make() { new tom.engine.adt.tomexpression.strategy.expression._EmptyOrExpressionDisjunction() }
    }
  
  
  %op Strategy When_EmptyOrExpressionDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrExpressionDisjunction(),s) }
  }

  %op Strategy Is_EmptyOrExpressionDisjunction() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EmptyOrExpressionDisjunction()}
  }
  
%op Strategy Make_EmptyOrExpressionDisjunction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrExpressionDisjunction))) }

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrExpressionDisjunction() }
}

    %op Strategy _ConsOrExpressionDisjunction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsOrExpressionDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrExpressionDisjunction(),s) }
  }

  %op Strategy Is_ConsOrExpressionDisjunction() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_ConsOrExpressionDisjunction()}
  }
  
%op Strategy Make_ConsOrExpressionDisjunction(_HeadOrExpressionDisjunction:Strategy, _TailOrExpressionDisjunction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction))) }

  get_slot(_HeadOrExpressionDisjunction, t) { $t._HeadOrExpressionDisjunction }
  get_slot(_TailOrExpressionDisjunction, t) { $t._TailOrExpressionDisjunction }
  make( new_HeadOrExpressionDisjunction,  new_TailOrExpressionDisjunction) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction( $new_HeadOrExpressionDisjunction,  $new_TailOrExpressionDisjunction) }
}

    %op Strategy _EmptyOrConnector() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._EmptyOrConnector)))}
      
        make() { new tom.engine.adt.tomexpression.strategy.expression._EmptyOrConnector() }
    }
  
  
  %op Strategy When_EmptyOrConnector(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrConnector(),s) }
  }

  %op Strategy Is_EmptyOrConnector() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EmptyOrConnector()}
  }
  
%op Strategy Make_EmptyOrConnector() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrConnector))) }

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrConnector() }
}

    %op Strategy _ConsOrConnector(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._ConsOrConnector)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._ConsOrConnector($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsOrConnector(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrConnector(),s) }
  }

  %op Strategy Is_ConsOrConnector() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_ConsOrConnector()}
  }
  
%op Strategy Make_ConsOrConnector(_HeadOrConnector:Strategy, _TailOrConnector:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrConnector))) }

  get_slot(_HeadOrConnector, t) { $t._HeadOrConnector }
  get_slot(_TailOrConnector, t) { $t._TailOrConnector }
  make( new_HeadOrConnector,  new_TailOrConnector) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrConnector( $new_HeadOrConnector,  $new_TailOrConnector) }
}

    %op Strategy _GreaterThan(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GreaterThan)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GreaterThan($arg0, $arg1) }
    }
  
  
  %op Strategy When_GreaterThan(s:Strategy) {
    make(s) { `Sequence(Is_GreaterThan(),s) }
  }

  %op Strategy Is_GreaterThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GreaterThan()}
  }
  
%op Strategy Make_GreaterThan(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan))) }

  get_slot(_Arg1, t) { $t._Arg1 }
  get_slot(_Arg2, t) { $t._Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan( $new_Arg1,  $new_Arg2) }
}

    %op Strategy _GreaterOrEqualThan(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GreaterOrEqualThan)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GreaterOrEqualThan($arg0, $arg1) }
    }
  
  
  %op Strategy When_GreaterOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_GreaterOrEqualThan(),s) }
  }

  %op Strategy Is_GreaterOrEqualThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GreaterOrEqualThan()}
  }
  
%op Strategy Make_GreaterOrEqualThan(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GreaterOrEqualThan))) }

  get_slot(_Arg1, t) { $t._Arg1 }
  get_slot(_Arg2, t) { $t._Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GreaterOrEqualThan( $new_Arg1,  $new_Arg2) }
}

    %op Strategy _LessThan(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._LessThan)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._LessThan($arg0, $arg1) }
    }
  
  
  %op Strategy When_LessThan(s:Strategy) {
    make(s) { `Sequence(Is_LessThan(),s) }
  }

  %op Strategy Is_LessThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_LessThan()}
  }
  
%op Strategy Make_LessThan(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_LessThan))) }

  get_slot(_Arg1, t) { $t._Arg1 }
  get_slot(_Arg2, t) { $t._Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_LessThan( $new_Arg1,  $new_Arg2) }
}

    %op Strategy _LessOrEqualThan(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._LessOrEqualThan)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._LessOrEqualThan($arg0, $arg1) }
    }
  
  
  %op Strategy When_LessOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_LessOrEqualThan(),s) }
  }

  %op Strategy Is_LessOrEqualThan() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_LessOrEqualThan()}
  }
  
%op Strategy Make_LessOrEqualThan(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_LessOrEqualThan))) }

  get_slot(_Arg1, t) { $t._Arg1 }
  get_slot(_Arg2, t) { $t._Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_LessOrEqualThan( $new_Arg1,  $new_Arg2) }
}

    %op Strategy _AntiMatchExpression(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._AntiMatchExpression)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._AntiMatchExpression($arg0) }
    }
  
  
  %op Strategy When_AntiMatchExpression(s:Strategy) {
    make(s) { `Sequence(Is_AntiMatchExpression(),s) }
  }

  %op Strategy Is_AntiMatchExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_AntiMatchExpression()}
  }
  
%op Strategy Make_AntiMatchExpression(_Expression:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_AntiMatchExpression))) }

  get_slot(_Expression, t) { $t._Expression }
  make( new_Expression) { new tom.engine.adt.tomexpression.strategy.expression.Make_AntiMatchExpression( $new_Expression) }
}

    %op Strategy _Conditional(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._Conditional)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._Conditional($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Conditional(s:Strategy) {
    make(s) { `Sequence(Is_Conditional(),s) }
  }

  %op Strategy Is_Conditional() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Conditional()}
  }
  
%op Strategy Make_Conditional(_Cond:Strategy, _Then:Strategy, _Else:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Conditional))) }

  get_slot(_Cond, t) { $t._Cond }
  get_slot(_Then, t) { $t._Then }
  get_slot(_Else, t) { $t._Else }
  make( new_Cond,  new_Then,  new_Else) { new tom.engine.adt.tomexpression.strategy.expression.Make_Conditional( $new_Cond,  $new_Then,  $new_Else) }
}

    %op Strategy _TrueTL() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._TrueTL)))}
      
        make() { new tom.engine.adt.tomexpression.strategy.expression._TrueTL() }
    }
  
  
  %op Strategy When_TrueTL(s:Strategy) {
    make(s) { `Sequence(Is_TrueTL(),s) }
  }

  %op Strategy Is_TrueTL() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_TrueTL()}
  }
  
%op Strategy Make_TrueTL() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL))) }

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL() }
}

    %op Strategy _FalseTL() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._FalseTL)))}
      
        make() { new tom.engine.adt.tomexpression.strategy.expression._FalseTL() }
    }
  
  
  %op Strategy When_FalseTL(s:Strategy) {
    make(s) { `Sequence(Is_FalseTL(),s) }
  }

  %op Strategy Is_FalseTL() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_FalseTL()}
  }
  
%op Strategy Make_FalseTL() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL))) }

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL() }
}

    %op Strategy _Integer(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._Integer)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Integer($arg0) }
    }
  
  
  %op Strategy When_Integer(s:Strategy) {
    make(s) { `Sequence(Is_Integer(),s) }
  }

  %op Strategy Is_Integer() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Integer()}
  }
  
%op Strategy Make_Integer(_value:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Integer))) }

  get_slot(_value, t) { $t._value }
  make( _value) { new tom.engine.adt.tomexpression.strategy.expression.Make_Integer( $_value) }
}

    %op Strategy _EqualTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._EqualTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._EqualTerm($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_EqualTerm(s:Strategy) {
    make(s) { `Sequence(Is_EqualTerm(),s) }
  }

  %op Strategy Is_EqualTerm() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_EqualTerm()}
  }
  
%op Strategy Make_EqualTerm(_TomType:Strategy, _Kid1:Strategy, _Kid2:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm))) }

  get_slot(_TomType, t) { $t._TomType }
  get_slot(_Kid1, t) { $t._Kid1 }
  get_slot(_Kid2, t) { $t._Kid2 }
  make( new_TomType,  new_Kid1,  new_Kid2) { new tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm( $new_TomType,  $new_Kid1,  $new_Kid2) }
}

    %op Strategy _Cast(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._Cast)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Cast($arg0, $arg1) }
    }
  
  
  %op Strategy When_Cast(s:Strategy) {
    make(s) { `Sequence(Is_Cast(),s) }
  }

  %op Strategy Is_Cast() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Cast()}
  }
  
%op Strategy Make_Cast(_AstType:Strategy, _Source:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Cast))) }

  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Source, t) { $t._Source }
  make( new_AstType,  new_Source) { new tom.engine.adt.tomexpression.strategy.expression.Make_Cast( $new_AstType,  $new_Source) }
}

    %op Strategy _GetSlot(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSlot)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSlot($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_GetSlot(s:Strategy) {
    make(s) { `Sequence(Is_GetSlot(),s) }
  }

  %op Strategy Is_GetSlot() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSlot()}
  }
  
%op Strategy Make_GetSlot(_Codomain:Strategy, _AstName:Strategy, _SlotNameString:String, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot))) }

  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_AstName, t) { $t._AstName }
  get_slot(_SlotNameString, t) { $t._SlotNameString }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Codomain,  new_AstName,  _SlotNameString,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot( $new_Codomain,  $new_AstName,  $_SlotNameString,  $new_Variable) }
}

    %op Strategy _IsFsym(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsFsym)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsFsym($arg0, $arg1) }
    }
  
  
  %op Strategy When_IsFsym(s:Strategy) {
    make(s) { `Sequence(Is_IsFsym(),s) }
  }

  %op Strategy Is_IsFsym() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsFsym()}
  }
  
%op Strategy Make_IsFsym(_AstName:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Variable, t) { $t._Variable }
  make( new_AstName,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym( $new_AstName,  $new_Variable) }
}

    %op Strategy _GetHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetHead)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._GetHead($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_GetHead(s:Strategy) {
    make(s) { `Sequence(Is_GetHead(),s) }
  }

  %op Strategy Is_GetHead() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetHead()}
  }
  
%op Strategy Make_GetHead(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetHead))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Opname,  new_Codomain,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetHead( $new_Opname,  $new_Codomain,  $new_Variable) }
}

    %op Strategy _GetTail(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetTail)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetTail($arg0, $arg1) }
    }
  
  
  %op Strategy When_GetTail(s:Strategy) {
    make(s) { `Sequence(Is_GetTail(),s) }
  }

  %op Strategy Is_GetTail() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetTail()}
  }
  
%op Strategy Make_GetTail(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetTail))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetTail( $new_Opname,  $new_Variable) }
}

    %op Strategy _IsEmptyList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsEmptyList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyList($arg0, $arg1) }
    }
  
  
  %op Strategy When_IsEmptyList(s:Strategy) {
    make(s) { `Sequence(Is_IsEmptyList(),s) }
  }

  %op Strategy Is_IsEmptyList() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyList()}
  }
  
%op Strategy Make_IsEmptyList(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList( $new_Opname,  $new_Variable) }
}

    %op Strategy _IsEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_IsEmptyArray(s:Strategy) {
    make(s) { `Sequence(Is_IsEmptyArray(),s) }
  }

  %op Strategy Is_IsEmptyArray() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsEmptyArray()}
  }
  
%op Strategy Make_IsEmptyArray(_Opname:Strategy, _Variable:Strategy, _Index:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Index, t) { $t._Index }
  make( new_Opname,  new_Variable,  new_Index) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray( $new_Opname,  $new_Variable,  $new_Index) }
}

    %op Strategy _AddOne(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._AddOne)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._AddOne($arg0) }
    }
  
  
  %op Strategy When_AddOne(s:Strategy) {
    make(s) { `Sequence(Is_AddOne(),s) }
  }

  %op Strategy Is_AddOne() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_AddOne()}
  }
  
%op Strategy Make_AddOne(_Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_AddOne))) }

  get_slot(_Variable, t) { $t._Variable }
  make( new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_AddOne( $new_Variable) }
}

    %op Strategy _GetSize(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSize)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetSize($arg0, $arg1) }
    }
  
  
  %op Strategy When_GetSize(s:Strategy) {
    make(s) { `Sequence(Is_GetSize(),s) }
  }

  %op Strategy Is_GetSize() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSize()}
  }
  
%op Strategy Make_GetSize(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSize))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSize( $new_Opname,  $new_Variable) }
}

    %op Strategy _GetElement(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetElement)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetElement($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_GetElement(s:Strategy) {
    make(s) { `Sequence(Is_GetElement(),s) }
  }

  %op Strategy Is_GetElement() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetElement()}
  }
  
%op Strategy Make_GetElement(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy, _Index:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetElement))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Index, t) { $t._Index }
  make( new_Opname,  new_Codomain,  new_Variable,  new_Index) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetElement( $new_Opname,  $new_Codomain,  $new_Variable,  $new_Index) }
}

    %op Strategy _GetSliceList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSliceList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceList($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_GetSliceList(s:Strategy) {
    make(s) { `Sequence(Is_GetSliceList(),s) }
  }

  %op Strategy Is_GetSliceList() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceList()}
  }
  
%op Strategy Make_GetSliceList(_AstName:Strategy, _VariableBeginAST:Strategy, _VariableEndAST:Strategy, _Tail:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_VariableBeginAST, t) { $t._VariableBeginAST }
  get_slot(_VariableEndAST, t) { $t._VariableEndAST }
  get_slot(_Tail, t) { $t._Tail }
  make( new_AstName,  new_VariableBeginAST,  new_VariableEndAST,  new_Tail) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList( $new_AstName,  $new_VariableBeginAST,  $new_VariableEndAST,  $new_Tail) }
}

    %op Strategy _GetSliceArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSliceArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceArray($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_GetSliceArray(s:Strategy) {
    make(s) { `Sequence(Is_GetSliceArray(),s) }
  }

  %op Strategy Is_GetSliceArray() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_GetSliceArray()}
  }
  
%op Strategy Make_GetSliceArray(_AstName:Strategy, _SubjectListName:Strategy, _VariableBeginAST:Strategy, _VariableEndAST:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_SubjectListName, t) { $t._SubjectListName }
  get_slot(_VariableBeginAST, t) { $t._VariableBeginAST }
  get_slot(_VariableEndAST, t) { $t._VariableEndAST }
  make( new_AstName,  new_SubjectListName,  new_VariableBeginAST,  new_VariableEndAST) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray( $new_AstName,  $new_SubjectListName,  $new_VariableBeginAST,  $new_VariableEndAST) }
}

    %op Strategy _ConstraintToExpression(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._ConstraintToExpression)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._ConstraintToExpression($arg0) }
    }
  
  
  %op Strategy When_ConstraintToExpression(s:Strategy) {
    make(s) { `Sequence(Is_ConstraintToExpression(),s) }
  }

  %op Strategy Is_ConstraintToExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_ConstraintToExpression()}
  }
  
%op Strategy Make_ConstraintToExpression(_cons:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_ConstraintToExpression))) }

  get_slot(_cons, t) { $t._cons }
  make( new_cons) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConstraintToExpression( $new_cons) }
}

    %op Strategy _DoWhileExpression(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression($arg0, $arg1) }
    }
  
  
  %op Strategy When_DoWhileExpression(s:Strategy) {
    make(s) { `Sequence(Is_DoWhileExpression(),s) }
  }

  %op Strategy Is_DoWhileExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_DoWhileExpression()}
  }
  
%op Strategy Make_DoWhileExpression(_EndExpression:Strategy, _LoopCondition:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression))) }

  get_slot(_EndExpression, t) { $t._EndExpression }
  get_slot(_LoopCondition, t) { $t._LoopCondition }
  make( new_EndExpression,  new_LoopCondition) { new tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression( $new_EndExpression,  $new_LoopCondition) }
}

    %op Strategy _IfExpression(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._IfExpression)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._IfExpression($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_IfExpression(s:Strategy) {
    make(s) { `Sequence(Is_IfExpression(),s) }
  }

  %op Strategy Is_IfExpression() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IfExpression()}
  }
  
%op Strategy Make_IfExpression(_Condition:Strategy, _ThenExpression:Strategy, _ElseExpression:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression))) }

  get_slot(_Condition, t) { $t._Condition }
  get_slot(_ThenExpression, t) { $t._ThenExpression }
  get_slot(_ElseExpression, t) { $t._ElseExpression }
  make( new_Condition,  new_ThenExpression,  new_ElseExpression) { new tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression( $new_Condition,  $new_ThenExpression,  $new_ElseExpression) }
}

    %op Strategy _IsSort(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsSort)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsSort($arg0, $arg1) }
    }
  
  
  %op Strategy When_IsSort(s:Strategy) {
    make(s) { `Sequence(Is_IsSort(),s) }
  }

  %op Strategy Is_IsSort() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_IsSort()}
  }
  
%op Strategy Make_IsSort(_AstType:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsSort))) }

  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Variable, t) { $t._Variable }
  make( new_AstType,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsSort( $new_AstType,  $new_Variable) }
}

    %op Strategy _Code(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression._Code)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Code($arg0) }
    }
  
  
  %op Strategy When_Code(s:Strategy) {
    make(s) { `Sequence(Is_Code(),s) }
  }

  %op Strategy Is_Code() {
    make() { new tom.engine.adt.tomexpression.strategy.expression.Is_Code()}
  }
  
%op Strategy Make_Code(_Code:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Code))) }

  get_slot(_Code, t) { $t._Code }
  make( _Code) { new tom.engine.adt.tomexpression.strategy.expression.Make_Code( $_Code) }
}

    %op Strategy _EmptyconcTomTerm() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm)))}
      
        make() { new tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm() }
    }
  
  
  %op Strategy When_EmptyconcTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcTomTerm(),s) }
  }

  %op Strategy Is_EmptyconcTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomlist.Is_EmptyconcTomTerm()}
  }
  
%op Strategy Make_EmptyconcTomTerm() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm))) }

  make() { new tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm() }
}

    %op Strategy _ConsconcTomTerm(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcTomTerm(),s) }
  }

  %op Strategy Is_ConsconcTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomlist.Is_ConsconcTomTerm()}
  }
  
%op Strategy Make_ConsconcTomTerm(_HeadconcTomTerm:Strategy, _TailconcTomTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm))) }

  get_slot(_HeadconcTomTerm, t) { $t._HeadconcTomTerm }
  get_slot(_TailconcTomTerm, t) { $t._TailconcTomTerm }
  make( new_HeadconcTomTerm,  new_TailconcTomTerm) { new tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm( $new_HeadconcTomTerm,  $new_TailconcTomTerm) }
}

    %op Strategy _TermAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TermAppl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._TermAppl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_TermAppl(s:Strategy) {
    make(s) { `Sequence(Is_TermAppl(),s) }
  }

  %op Strategy Is_TermAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TermAppl()}
  }
  
%op Strategy Make_TermAppl(_Option:Strategy, _NameList:Strategy, _Args:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_NameList, t) { $t._NameList }
  get_slot(_Args, t) { $t._Args }
  get_slot(_Constraints, t) { $t._Constraints }
  make( new_Option,  new_NameList,  new_Args,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl( $new_Option,  $new_NameList,  $new_Args,  $new_Constraints) }
}

    %op Strategy _RecordAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._RecordAppl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._RecordAppl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_RecordAppl(s:Strategy) {
    make(s) { `Sequence(Is_RecordAppl(),s) }
  }

  %op Strategy Is_RecordAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_RecordAppl()}
  }
  
%op Strategy Make_RecordAppl(_Option:Strategy, _NameList:Strategy, _Slots:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_NameList, t) { $t._NameList }
  get_slot(_Slots, t) { $t._Slots }
  get_slot(_Constraints, t) { $t._Constraints }
  make( new_Option,  new_NameList,  new_Slots,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl( $new_Option,  $new_NameList,  $new_Slots,  $new_Constraints) }
}

    %op Strategy _XMLAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomterm.strategy.tomterm._XMLAppl($arg0, $arg1, $arg2, $arg3, $arg4) }
    }
  
  
  %op Strategy When_XMLAppl(s:Strategy) {
    make(s) { `Sequence(Is_XMLAppl(),s) }
  }

  %op Strategy Is_XMLAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_XMLAppl()}
  }
  
%op Strategy Make_XMLAppl(_Option:Strategy, _NameList:Strategy, _AttrList:Strategy, _ChildList:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_NameList, t) { $t._NameList }
  get_slot(_AttrList, t) { $t._AttrList }
  get_slot(_ChildList, t) { $t._ChildList }
  get_slot(_Constraints, t) { $t._Constraints }
  make( new_Option,  new_NameList,  new_AttrList,  new_ChildList,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl( $new_Option,  $new_NameList,  $new_AttrList,  $new_ChildList,  $new_Constraints) }
}

    %op Strategy _Variable(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Variable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Variable($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_Variable(s:Strategy) {
    make(s) { `Sequence(Is_Variable(),s) }
  }

  %op Strategy Is_Variable() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Variable()}
  }
  
%op Strategy Make_Variable(_Option:Strategy, _AstName:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Variable))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_AstName, t) { $t._AstName }
  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Constraints, t) { $t._Constraints }
  make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Variable( $new_Option,  $new_AstName,  $new_AstType,  $new_Constraints) }
}

    %op Strategy _VariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._VariableStar)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._VariableStar($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_VariableStar(s:Strategy) {
    make(s) { `Sequence(Is_VariableStar(),s) }
  }

  %op Strategy Is_VariableStar() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_VariableStar()}
  }
  
%op Strategy Make_VariableStar(_Option:Strategy, _AstName:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_AstName, t) { $t._AstName }
  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Constraints, t) { $t._Constraints }
  make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar( $new_Option,  $new_AstName,  $new_AstType,  $new_Constraints) }
}

    %op Strategy _UnamedVariable(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_UnamedVariable(s:Strategy) {
    make(s) { `Sequence(Is_UnamedVariable(),s) }
  }

  %op Strategy Is_UnamedVariable() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariable()}
  }
  
%op Strategy Make_UnamedVariable(_Option:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Constraints, t) { $t._Constraints }
  make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable( $new_Option,  $new_AstType,  $new_Constraints) }
}

    %op Strategy _UnamedVariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_UnamedVariableStar(s:Strategy) {
    make(s) { `Sequence(Is_UnamedVariableStar(),s) }
  }

  %op Strategy Is_UnamedVariableStar() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_UnamedVariableStar()}
  }
  
%op Strategy Make_UnamedVariableStar(_Option:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Constraints, t) { $t._Constraints }
  make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar( $new_Option,  $new_AstType,  $new_Constraints) }
}

    %op Strategy _VariableHeadList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_VariableHeadList(s:Strategy) {
    make(s) { `Sequence(Is_VariableHeadList(),s) }
  }

  %op Strategy Is_VariableHeadList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_VariableHeadList()}
  }
  
%op Strategy Make_VariableHeadList(_Opname:Strategy, _Begin:Strategy, _End:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Begin, t) { $t._Begin }
  get_slot(_End, t) { $t._End }
  make( new_Opname,  new_Begin,  new_End) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList( $new_Opname,  $new_Begin,  $new_End) }
}

    %op Strategy _VariableHeadArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_VariableHeadArray(s:Strategy) {
    make(s) { `Sequence(Is_VariableHeadArray(),s) }
  }

  %op Strategy Is_VariableHeadArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_VariableHeadArray()}
  }
  
%op Strategy Make_VariableHeadArray(_Opname:Strategy, _Subject:Strategy, _BeginIndex:Strategy, _EndIndex:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Subject, t) { $t._Subject }
  get_slot(_BeginIndex, t) { $t._BeginIndex }
  get_slot(_EndIndex, t) { $t._EndIndex }
  make( new_Opname,  new_Subject,  new_BeginIndex,  new_EndIndex) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray( $new_Opname,  $new_Subject,  $new_BeginIndex,  $new_EndIndex) }
}

    %op Strategy _TestVar(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TestVar)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TestVar($arg0) }
    }
  
  
  %op Strategy When_TestVar(s:Strategy) {
    make(s) { `Sequence(Is_TestVar(),s) }
  }

  %op Strategy Is_TestVar() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TestVar()}
  }
  
%op Strategy Make_TestVar(_Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TestVar))) }

  get_slot(_Variable, t) { $t._Variable }
  make( new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TestVar( $new_Variable) }
}

    %op Strategy _ListHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ListHead)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._ListHead($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_ListHead(s:Strategy) {
    make(s) { `Sequence(Is_ListHead(),s) }
  }

  %op Strategy Is_ListHead() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ListHead()}
  }
  
%op Strategy Make_ListHead(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Opname,  new_Codomain,  new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead( $new_Opname,  $new_Codomain,  $new_Variable) }
}

    %op Strategy _ListTail(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ListTail)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._ListTail($arg0, $arg1) }
    }
  
  
  %op Strategy When_ListTail(s:Strategy) {
    make(s) { `Sequence(Is_ListTail(),s) }
  }

  %op Strategy Is_ListTail() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ListTail()}
  }
  
%op Strategy Make_ListTail(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail( $new_Opname,  $new_Variable) }
}

    %op Strategy _TargetLanguageToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm($arg0) }
    }
  
  
  %op Strategy When_TargetLanguageToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_TargetLanguageToTomTerm(),s) }
  }

  %op Strategy Is_TargetLanguageToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TargetLanguageToTomTerm()}
  }
  
%op Strategy Make_TargetLanguageToTomTerm(_Tl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm))) }

  get_slot(_Tl, t) { $t._Tl }
  make( new_Tl) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm( $new_Tl) }
}

    %op Strategy _TomTypeToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomTypeToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomTypeToTomTerm($arg0) }
    }
  
  
  %op Strategy When_TomTypeToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_TomTypeToTomTerm(),s) }
  }

  %op Strategy Is_TomTypeToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomTypeToTomTerm()}
  }
  
%op Strategy Make_TomTypeToTomTerm(_AstType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomTypeToTomTerm))) }

  get_slot(_AstType, t) { $t._AstType }
  make( new_AstType) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomTypeToTomTerm( $new_AstType) }
}

    %op Strategy _TomNameToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomNameToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomNameToTomTerm($arg0) }
    }
  
  
  %op Strategy When_TomNameToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_TomNameToTomTerm(),s) }
  }

  %op Strategy Is_TomNameToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomNameToTomTerm()}
  }
  
%op Strategy Make_TomNameToTomTerm(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomNameToTomTerm))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomNameToTomTerm( $new_AstName) }
}

    %op Strategy _TomSymbolToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm($arg0) }
    }
  
  
  %op Strategy When_TomSymbolToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_TomSymbolToTomTerm(),s) }
  }

  %op Strategy Is_TomSymbolToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomSymbolToTomTerm()}
  }
  
%op Strategy Make_TomSymbolToTomTerm(_AstSymbol:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm))) }

  get_slot(_AstSymbol, t) { $t._AstSymbol }
  make( new_AstSymbol) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm( $new_AstSymbol) }
}

    %op Strategy _DeclarationToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm($arg0) }
    }
  
  
  %op Strategy When_DeclarationToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_DeclarationToTomTerm(),s) }
  }

  %op Strategy Is_DeclarationToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_DeclarationToTomTerm()}
  }
  
%op Strategy Make_DeclarationToTomTerm(_AstDeclaration:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm))) }

  get_slot(_AstDeclaration, t) { $t._AstDeclaration }
  make( new_AstDeclaration) { new tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm( $new_AstDeclaration) }
}

    %op Strategy _OptionToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm($arg0) }
    }
  
  
  %op Strategy When_OptionToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_OptionToTomTerm(),s) }
  }

  %op Strategy Is_OptionToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_OptionToTomTerm()}
  }
  
%op Strategy Make_OptionToTomTerm(_Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm))) }

  get_slot(_Option, t) { $t._Option }
  make( new_Option) { new tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm( $new_Option) }
}

    %op Strategy _ExpressionToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm($arg0) }
    }
  
  
  %op Strategy When_ExpressionToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_ExpressionToTomTerm(),s) }
  }

  %op Strategy Is_ExpressionToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_ExpressionToTomTerm()}
  }
  
%op Strategy Make_ExpressionToTomTerm(_AstExpression:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm))) }

  get_slot(_AstExpression, t) { $t._AstExpression }
  make( new_AstExpression) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm( $new_AstExpression) }
}

    %op Strategy _InstructionToTomTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm($arg0) }
    }
  
  
  %op Strategy When_InstructionToTomTerm(s:Strategy) {
    make(s) { `Sequence(Is_InstructionToTomTerm(),s) }
  }

  %op Strategy Is_InstructionToTomTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_InstructionToTomTerm()}
  }
  
%op Strategy Make_InstructionToTomTerm(_AstInstruction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm))) }

  get_slot(_AstInstruction, t) { $t._AstInstruction }
  make( new_AstInstruction) { new tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm( $new_AstInstruction) }
}

    %op Strategy _Tom(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Tom)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Tom($arg0) }
    }
  
  
  %op Strategy When_Tom(s:Strategy) {
    make(s) { `Sequence(Is_Tom(),s) }
  }

  %op Strategy Is_Tom() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Tom()}
  }
  
%op Strategy Make_Tom(_TomList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Tom))) }

  get_slot(_TomList, t) { $t._TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Tom( $new_TomList) }
}

    %op Strategy _TomInclude(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomInclude)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomInclude($arg0) }
    }
  
  
  %op Strategy When_TomInclude(s:Strategy) {
    make(s) { `Sequence(Is_TomInclude(),s) }
  }

  %op Strategy Is_TomInclude() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_TomInclude()}
  }
  
%op Strategy Make_TomInclude(_TomList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude))) }

  get_slot(_TomList, t) { $t._TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude( $new_TomList) }
}

    %op Strategy _BackQuoteAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_BackQuoteAppl(s:Strategy) {
    make(s) { `Sequence(Is_BackQuoteAppl(),s) }
  }

  %op Strategy Is_BackQuoteAppl() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BackQuoteAppl()}
  }
  
%op Strategy Make_BackQuoteAppl(_Option:Strategy, _AstName:Strategy, _Args:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Args, t) { $t._Args }
  make( new_Option,  new_AstName,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl( $new_Option,  $new_AstName,  $new_Args) }
}

    %op Strategy _Composite(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Composite)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Composite($arg0) }
    }
  
  
  %op Strategy When_Composite(s:Strategy) {
    make(s) { `Sequence(Is_Composite(),s) }
  }

  %op Strategy Is_Composite() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Composite()}
  }
  
%op Strategy Make_Composite(_Args:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Composite))) }

  get_slot(_Args, t) { $t._Args }
  make( new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Composite( $new_Args) }
}

    %op Strategy _SubjectList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._SubjectList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._SubjectList($arg0) }
    }
  
  
  %op Strategy When_SubjectList(s:Strategy) {
    make(s) { `Sequence(Is_SubjectList(),s) }
  }

  %op Strategy Is_SubjectList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_SubjectList()}
  }
  
%op Strategy Make_SubjectList(_TomList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_SubjectList))) }

  get_slot(_TomList, t) { $t._TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_SubjectList( $new_TomList) }
}

    %op Strategy _Term(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Term)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Term($arg0) }
    }
  
  
  %op Strategy When_Term(s:Strategy) {
    make(s) { `Sequence(Is_Term(),s) }
  }

  %op Strategy Is_Term() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Term()}
  }
  
%op Strategy Make_Term(_TomTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Term))) }

  get_slot(_TomTerm, t) { $t._TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Term( $new_TomTerm) }
}

    %op Strategy _AntiTerm(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._AntiTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._AntiTerm($arg0) }
    }
  
  
  %op Strategy When_AntiTerm(s:Strategy) {
    make(s) { `Sequence(Is_AntiTerm(),s) }
  }

  %op Strategy Is_AntiTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_AntiTerm()}
  }
  
%op Strategy Make_AntiTerm(_TomTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm))) }

  get_slot(_TomTerm, t) { $t._TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm( $new_TomTerm) }
}

    %op Strategy _Subterm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Subterm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._Subterm($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_Subterm(s:Strategy) {
    make(s) { `Sequence(Is_Subterm(),s) }
  }

  %op Strategy Is_Subterm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Subterm()}
  }
  
%op Strategy Make_Subterm(_AstName:Strategy, _SlotName:Strategy, _GroundTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_SlotName, t) { $t._SlotName }
  get_slot(_GroundTerm, t) { $t._GroundTerm }
  make( new_AstName,  new_SlotName,  new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm( $new_AstName,  $new_SlotName,  $new_GroundTerm) }
}

    %op Strategy _SymbolOf(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._SymbolOf)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._SymbolOf($arg0) }
    }
  
  
  %op Strategy When_SymbolOf(s:Strategy) {
    make(s) { `Sequence(Is_SymbolOf(),s) }
  }

  %op Strategy Is_SymbolOf() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_SymbolOf()}
  }
  
%op Strategy Make_SymbolOf(_GroundTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf))) }

  get_slot(_GroundTerm, t) { $t._GroundTerm }
  make( new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf( $new_GroundTerm) }
}

    %op Strategy _Ref(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Ref)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Ref($arg0) }
    }
  
  
  %op Strategy When_Ref(s:Strategy) {
    make(s) { `Sequence(Is_Ref(),s) }
  }

  %op Strategy Is_Ref() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Ref()}
  }
  
%op Strategy Make_Ref(_TomTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Ref))) }

  get_slot(_TomTerm, t) { $t._TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Ref( $new_TomTerm) }
}

    %op Strategy _Automata(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Automata)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Automata($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_Automata(s:Strategy) {
    make(s) { `Sequence(Is_Automata(),s) }
  }

  %op Strategy Is_Automata() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_Automata()}
  }
  
%op Strategy Make_Automata(_Option:Strategy, _Constraint:Strategy, _NumberList:Strategy, _Inst:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Automata))) }

  get_slot(_Option, t) { $t._Option }
  get_slot(_Constraint, t) { $t._Constraint }
  get_slot(_NumberList, t) { $t._NumberList }
  get_slot(_Inst, t) { $t._Inst }
  make( new_Option,  new_Constraint,  new_NumberList,  new_Inst) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Automata( $new_Option,  $new_Constraint,  $new_NumberList,  $new_Inst) }
}

    %op Strategy _BuildReducedTerm(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm($arg0, $arg1) }
    }
  
  
  %op Strategy When_BuildReducedTerm(s:Strategy) {
    make(s) { `Sequence(Is_BuildReducedTerm(),s) }
  }

  %op Strategy Is_BuildReducedTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildReducedTerm()}
  }
  
%op Strategy Make_BuildReducedTerm(_TomTerm:Strategy, _AstType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm))) }

  get_slot(_TomTerm, t) { $t._TomTerm }
  get_slot(_AstType, t) { $t._AstType }
  make( new_TomTerm,  new_AstType) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm( $new_TomTerm,  $new_AstType) }
}

    %op Strategy _FunctionCall(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._FunctionCall)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._FunctionCall($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_FunctionCall(s:Strategy) {
    make(s) { `Sequence(Is_FunctionCall(),s) }
  }

  %op Strategy Is_FunctionCall() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_FunctionCall()}
  }
  
%op Strategy Make_FunctionCall(_AstName:Strategy, _AstType:Strategy, _Args:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_AstType, t) { $t._AstType }
  get_slot(_Args, t) { $t._Args }
  make( new_AstName,  new_AstType,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall( $new_AstName,  $new_AstType,  $new_Args) }
}

    %op Strategy _BuildConstant(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConstant)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConstant($arg0) }
    }
  
  
  %op Strategy When_BuildConstant(s:Strategy) {
    make(s) { `Sequence(Is_BuildConstant(),s) }
  }

  %op Strategy Is_BuildConstant() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConstant()}
  }
  
%op Strategy Make_BuildConstant(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant( $new_AstName) }
}

    %op Strategy _BuildTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildTerm)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildTerm($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_BuildTerm(s:Strategy) {
    make(s) { `Sequence(Is_BuildTerm(),s) }
  }

  %op Strategy Is_BuildTerm() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildTerm()}
  }
  
%op Strategy Make_BuildTerm(_AstName:Strategy, _Args:Strategy, _ModuleName:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Args, t) { $t._Args }
  get_slot(_ModuleName, t) { $t._ModuleName }
  make( new_AstName,  new_Args,  _ModuleName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm( $new_AstName,  $new_Args,  $_ModuleName) }
}

    %op Strategy _BuildEmptyList(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList($arg0) }
    }
  
  
  %op Strategy When_BuildEmptyList(s:Strategy) {
    make(s) { `Sequence(Is_BuildEmptyList(),s) }
  }

  %op Strategy Is_BuildEmptyList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyList()}
  }
  
%op Strategy Make_BuildEmptyList(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList( $new_AstName) }
}

    %op Strategy _BuildConsList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConsList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsList($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_BuildConsList(s:Strategy) {
    make(s) { `Sequence(Is_BuildConsList(),s) }
  }

  %op Strategy Is_BuildConsList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsList()}
  }
  
%op Strategy Make_BuildConsList(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_HeadTerm, t) { $t._HeadTerm }
  get_slot(_TailTerm, t) { $t._TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
}

    %op Strategy _BuildAppendList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_BuildAppendList(s:Strategy) {
    make(s) { `Sequence(Is_BuildAppendList(),s) }
  }

  %op Strategy Is_BuildAppendList() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendList()}
  }
  
%op Strategy Make_BuildAppendList(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_HeadTerm, t) { $t._HeadTerm }
  get_slot(_TailTerm, t) { $t._TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
}

    %op Strategy _BuildEmptyArray(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray($arg0, $arg1) }
    }
  
  
  %op Strategy When_BuildEmptyArray(s:Strategy) {
    make(s) { `Sequence(Is_BuildEmptyArray(),s) }
  }

  %op Strategy Is_BuildEmptyArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildEmptyArray()}
  }
  
%op Strategy Make_BuildEmptyArray(_AstName:Strategy, _Size:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Size, t) { $t._Size }
  make( new_AstName,  _Size) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray( $new_AstName,  $_Size) }
}

    %op Strategy _BuildConsArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_BuildConsArray(s:Strategy) {
    make(s) { `Sequence(Is_BuildConsArray(),s) }
  }

  %op Strategy Is_BuildConsArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildConsArray()}
  }
  
%op Strategy Make_BuildConsArray(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_HeadTerm, t) { $t._HeadTerm }
  get_slot(_TailTerm, t) { $t._TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
}

    %op Strategy _BuildAppendArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_BuildAppendArray(s:Strategy) {
    make(s) { `Sequence(Is_BuildAppendArray(),s) }
  }

  %op Strategy Is_BuildAppendArray() {
    make() { new tom.engine.adt.tomterm.strategy.tomterm.Is_BuildAppendArray()}
  }
  
%op Strategy Make_BuildAppendArray(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_HeadTerm, t) { $t._HeadTerm }
  get_slot(_TailTerm, t) { $t._TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray( $new_AstName,  $new_HeadTerm,  $new_TailTerm) }
}

    %op Strategy _DeclarationToOption(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._DeclarationToOption)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._DeclarationToOption($arg0) }
    }
  
  
  %op Strategy When_DeclarationToOption(s:Strategy) {
    make(s) { `Sequence(Is_DeclarationToOption(),s) }
  }

  %op Strategy Is_DeclarationToOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_DeclarationToOption()}
  }
  
%op Strategy Make_DeclarationToOption(_AstDeclaration:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption))) }

  get_slot(_AstDeclaration, t) { $t._AstDeclaration }
  make( new_AstDeclaration) { new tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption( $new_AstDeclaration) }
}

    %op Strategy _TomNameToOption(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._TomNameToOption)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomNameToOption($arg0) }
    }
  
  
  %op Strategy When_TomNameToOption(s:Strategy) {
    make(s) { `Sequence(Is_TomNameToOption(),s) }
  }

  %op Strategy Is_TomNameToOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_TomNameToOption()}
  }
  
%op Strategy Make_TomNameToOption(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption( $new_AstName) }
}

    %op Strategy _TomTermToOption(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._TomTermToOption)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomTermToOption($arg0) }
    }
  
  
  %op Strategy When_TomTermToOption(s:Strategy) {
    make(s) { `Sequence(Is_TomTermToOption(),s) }
  }

  %op Strategy Is_TomTermToOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_TomTermToOption()}
  }
  
%op Strategy Make_TomTermToOption(_AstTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption))) }

  get_slot(_AstTerm, t) { $t._AstTerm }
  make( new_AstTerm) { new tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption( $new_AstTerm) }
}

    %op Strategy _DefinedSymbol() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._DefinedSymbol)))}
      
        make() { new tom.engine.adt.tomoption.strategy.option._DefinedSymbol() }
    }
  
  
  %op Strategy When_DefinedSymbol(s:Strategy) {
    make(s) { `Sequence(Is_DefinedSymbol(),s) }
  }

  %op Strategy Is_DefinedSymbol() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_DefinedSymbol()}
  }
  
%op Strategy Make_DefinedSymbol() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol))) }

  make() { new tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol() }
}

    %op Strategy _GeneratedMatch() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._GeneratedMatch)))}
      
        make() { new tom.engine.adt.tomoption.strategy.option._GeneratedMatch() }
    }
  
  
  %op Strategy When_GeneratedMatch(s:Strategy) {
    make(s) { `Sequence(Is_GeneratedMatch(),s) }
  }

  %op Strategy Is_GeneratedMatch() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_GeneratedMatch()}
  }
  
%op Strategy Make_GeneratedMatch() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch))) }

  make() { new tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch() }
}

    %op Strategy _OriginTracking(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._OriginTracking)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomoption.strategy.option._OriginTracking($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_OriginTracking(s:Strategy) {
    make(s) { `Sequence(Is_OriginTracking(),s) }
  }

  %op Strategy Is_OriginTracking() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_OriginTracking()}
  }
  
%op Strategy Make_OriginTracking(_AstName:Strategy, _Line:int, _FileName:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_OriginTracking))) }

  get_slot(_AstName, t) { $t._AstName }
  get_slot(_Line, t) { $t._Line }
  get_slot(_FileName, t) { $t._FileName }
  make( new_AstName,  _Line,  _FileName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginTracking( $new_AstName,  $_Line,  $_FileName) }
}

    %op Strategy _OriginalText(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._OriginalText)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._OriginalText($arg0) }
    }
  
  
  %op Strategy When_OriginalText(s:Strategy) {
    make(s) { `Sequence(Is_OriginalText(),s) }
  }

  %op Strategy Is_OriginalText() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_OriginalText()}
  }
  
%op Strategy Make_OriginalText(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_OriginalText))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginalText( $new_AstName) }
}

    %op Strategy _Constant() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._Constant)))}
      
        make() { new tom.engine.adt.tomoption.strategy.option._Constant() }
    }
  
  
  %op Strategy When_Constant(s:Strategy) {
    make(s) { `Sequence(Is_Constant(),s) }
  }

  %op Strategy Is_Constant() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_Constant()}
  }
  
%op Strategy Make_Constant() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Constant))) }

  make() { new tom.engine.adt.tomoption.strategy.option.Make_Constant() }
}

    %op Strategy _MatchingTheory(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._MatchingTheory)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._MatchingTheory($arg0) }
    }
  
  
  %op Strategy When_MatchingTheory(s:Strategy) {
    make(s) { `Sequence(Is_MatchingTheory(),s) }
  }

  %op Strategy Is_MatchingTheory() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_MatchingTheory()}
  }
  
%op Strategy Make_MatchingTheory(_Theory:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_MatchingTheory))) }

  get_slot(_Theory, t) { $t._Theory }
  make( new_Theory) { new tom.engine.adt.tomoption.strategy.option.Make_MatchingTheory( $new_Theory) }
}

    %op Strategy _Label(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._Label)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._Label($arg0) }
    }
  
  
  %op Strategy When_Label(s:Strategy) {
    make(s) { `Sequence(Is_Label(),s) }
  }

  %op Strategy Is_Label() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_Label()}
  }
  
%op Strategy Make_Label(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Label))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Label( $new_AstName) }
}

    %op Strategy _Debug(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._Debug)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._Debug($arg0) }
    }
  
  
  %op Strategy When_Debug(s:Strategy) {
    make(s) { `Sequence(Is_Debug(),s) }
  }

  %op Strategy Is_Debug() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_Debug()}
  }
  
%op Strategy Make_Debug(_AstName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Debug))) }

  get_slot(_AstName, t) { $t._AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Debug( $new_AstName) }
}

    %op Strategy _ModuleName(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._ModuleName)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomoption.strategy.option._ModuleName($arg0) }
    }
  
  
  %op Strategy When_ModuleName(s:Strategy) {
    make(s) { `Sequence(Is_ModuleName(),s) }
  }

  %op Strategy Is_ModuleName() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_ModuleName()}
  }
  
%op Strategy Make_ModuleName(_String:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ModuleName))) }

  get_slot(_String, t) { $t._String }
  make( _String) { new tom.engine.adt.tomoption.strategy.option.Make_ModuleName( $_String) }
}

    %op Strategy _ImplicitXMLAttribut() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut)))}
      
        make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut() }
    }
  
  
  %op Strategy When_ImplicitXMLAttribut(s:Strategy) {
    make(s) { `Sequence(Is_ImplicitXMLAttribut(),s) }
  }

  %op Strategy Is_ImplicitXMLAttribut() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLAttribut()}
  }
  
%op Strategy Make_ImplicitXMLAttribut() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut))) }

  make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut() }
}

    %op Strategy _ImplicitXMLChild() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild)))}
      
        make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild() }
    }
  
  
  %op Strategy When_ImplicitXMLChild(s:Strategy) {
    make(s) { `Sequence(Is_ImplicitXMLChild(),s) }
  }

  %op Strategy Is_ImplicitXMLChild() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_ImplicitXMLChild()}
  }
  
%op Strategy Make_ImplicitXMLChild() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild))) }

  make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild() }
}

    %op Strategy _noOption() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option._noOption)))}
      
        make() { new tom.engine.adt.tomoption.strategy.option._noOption() }
    }
  
  
  %op Strategy When_noOption(s:Strategy) {
    make(s) { `Sequence(Is_noOption(),s) }
  }

  %op Strategy Is_noOption() {
    make() { new tom.engine.adt.tomoption.strategy.option.Is_noOption()}
  }
  
%op Strategy Make_noOption() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.option.Make_noOption))) }

  make() { new tom.engine.adt.tomoption.strategy.option.Make_noOption() }
}

    %op Strategy _EmptyconcOption() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption)))}
      
        make() { new tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption() }
    }
  
  
  %op Strategy When_EmptyconcOption(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcOption(),s) }
  }

  %op Strategy Is_EmptyconcOption() {
    make() { new tom.engine.adt.tomoption.strategy.optionlist.Is_EmptyconcOption()}
  }
  
%op Strategy Make_EmptyconcOption() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption))) }

  make() { new tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption() }
}

    %op Strategy _ConsconcOption(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcOption(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcOption(),s) }
  }

  %op Strategy Is_ConsconcOption() {
    make() { new tom.engine.adt.tomoption.strategy.optionlist.Is_ConsconcOption()}
  }
  
%op Strategy Make_ConsconcOption(_HeadconcOption:Strategy, _TailconcOption:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption))) }

  get_slot(_HeadconcOption, t) { $t._HeadconcOption }
  get_slot(_TailconcOption, t) { $t._TailconcOption }
  make( new_HeadconcOption,  new_TailconcOption) { new tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption( $new_HeadconcOption,  $new_TailconcOption) }
}

    %op Strategy _NumLessThan() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessThan)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessThan() }
    }
  
  
  %op Strategy When_NumLessThan(s:Strategy) {
    make(s) { `Sequence(Is_NumLessThan(),s) }
  }

  %op Strategy Is_NumLessThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumLessThan()}
  }
  
%op Strategy Make_NumLessThan() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessThan))) }

  make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessThan() }
}

    %op Strategy _NumLessOrEqualThan() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessOrEqualThan)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumLessOrEqualThan() }
    }
  
  
  %op Strategy When_NumLessOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_NumLessOrEqualThan(),s) }
  }

  %op Strategy Is_NumLessOrEqualThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumLessOrEqualThan()}
  }
  
%op Strategy Make_NumLessOrEqualThan() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessOrEqualThan))) }

  make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumLessOrEqualThan() }
}

    %op Strategy _NumGreaterThan() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterThan)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterThan() }
    }
  
  
  %op Strategy When_NumGreaterThan(s:Strategy) {
    make(s) { `Sequence(Is_NumGreaterThan(),s) }
  }

  %op Strategy Is_NumGreaterThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumGreaterThan()}
  }
  
%op Strategy Make_NumGreaterThan() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterThan))) }

  make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterThan() }
}

    %op Strategy _NumGreaterOrEqualThan() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterOrEqualThan)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumGreaterOrEqualThan() }
    }
  
  
  %op Strategy When_NumGreaterOrEqualThan(s:Strategy) {
    make(s) { `Sequence(Is_NumGreaterOrEqualThan(),s) }
  }

  %op Strategy Is_NumGreaterOrEqualThan() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumGreaterOrEqualThan()}
  }
  
%op Strategy Make_NumGreaterOrEqualThan() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterOrEqualThan))) }

  make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumGreaterOrEqualThan() }
}

    %op Strategy _NumDifferent() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumDifferent)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumDifferent() }
    }
  
  
  %op Strategy When_NumDifferent(s:Strategy) {
    make(s) { `Sequence(Is_NumDifferent(),s) }
  }

  %op Strategy Is_NumDifferent() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumDifferent()}
  }
  
%op Strategy Make_NumDifferent() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumDifferent))) }

  make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumDifferent() }
}

    %op Strategy _NumEqual() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumEqual)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype._NumEqual() }
    }
  
  
  %op Strategy When_NumEqual(s:Strategy) {
    make(s) { `Sequence(Is_NumEqual(),s) }
  }

  %op Strategy Is_NumEqual() {
    make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Is_NumEqual()}
  }
  
%op Strategy Make_NumEqual() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumEqual))) }

  make() { new tom.engine.adt.tomconstraint.strategy.numericconstrainttype.Make_NumEqual() }
}

    %op Strategy _AssignTo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AssignTo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AssignTo($arg0) }
    }
  
  
  %op Strategy When_AssignTo(s:Strategy) {
    make(s) { `Sequence(Is_AssignTo(),s) }
  }

  %op Strategy Is_AssignTo() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AssignTo()}
  }
  
%op Strategy Make_AssignTo(_Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo))) }

  get_slot(_Variable, t) { $t._Variable }
  make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo( $new_Variable) }
}

    %op Strategy _AssignPositionTo(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AssignPositionTo)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AssignPositionTo($arg0) }
    }
  
  
  %op Strategy When_AssignPositionTo(s:Strategy) {
    make(s) { `Sequence(Is_AssignPositionTo(),s) }
  }

  %op Strategy Is_AssignPositionTo() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AssignPositionTo()}
  }
  
%op Strategy Make_AssignPositionTo(_Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignPositionTo))) }

  get_slot(_Variable, t) { $t._Variable }
  make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignPositionTo( $new_Variable) }
}

    %op Strategy _TrueConstraint() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint() }
    }
  
  
  %op Strategy When_TrueConstraint(s:Strategy) {
    make(s) { `Sequence(Is_TrueConstraint(),s) }
  }

  %op Strategy Is_TrueConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_TrueConstraint()}
  }
  
%op Strategy Make_TrueConstraint() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint))) }

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint() }
}

    %op Strategy _FalseConstraint() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint() }
    }
  
  
  %op Strategy When_FalseConstraint(s:Strategy) {
    make(s) { `Sequence(Is_FalseConstraint(),s) }
  }

  %op Strategy Is_FalseConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_FalseConstraint()}
  }
  
%op Strategy Make_FalseConstraint() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint))) }

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint() }
}

    %op Strategy _Negate(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._Negate)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._Negate($arg0) }
    }
  
  
  %op Strategy When_Negate(s:Strategy) {
    make(s) { `Sequence(Is_Negate(),s) }
  }

  %op Strategy Is_Negate() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_Negate()}
  }
  
%op Strategy Make_Negate(_c:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_Negate))) }

  get_slot(_c, t) { $t._c }
  make( new_c) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_Negate( $new_c) }
}

    %op Strategy _IsSortConstraint(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._IsSortConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._IsSortConstraint($arg0, $arg1) }
    }
  
  
  %op Strategy When_IsSortConstraint(s:Strategy) {
    make(s) { `Sequence(Is_IsSortConstraint(),s) }
  }

  %op Strategy Is_IsSortConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_IsSortConstraint()}
  }
  
%op Strategy Make_IsSortConstraint(_AstType:Strategy, _TomTerm:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_IsSortConstraint))) }

  get_slot(_AstType, t) { $t._AstType }
  get_slot(_TomTerm, t) { $t._TomTerm }
  make( new_AstType,  new_TomTerm) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_IsSortConstraint( $new_AstType,  $new_TomTerm) }
}

    %op Strategy _EmptyAndConstraint() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyAndConstraint)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyAndConstraint() }
    }
  
  
  %op Strategy When_EmptyAndConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyAndConstraint(),s) }
  }

  %op Strategy Is_EmptyAndConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyAndConstraint()}
  }
  
%op Strategy Make_EmptyAndConstraint() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyAndConstraint))) }

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyAndConstraint() }
}

    %op Strategy _ConsAndConstraint(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsAndConstraint(s:Strategy) {
    make(s) { `Sequence(Is_ConsAndConstraint(),s) }
  }

  %op Strategy Is_ConsAndConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_ConsAndConstraint()}
  }
  
%op Strategy Make_ConsAndConstraint(_HeadAndConstraint:Strategy, _TailAndConstraint:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint))) }

  get_slot(_HeadAndConstraint, t) { $t._HeadAndConstraint }
  get_slot(_TailAndConstraint, t) { $t._TailAndConstraint }
  make( new_HeadAndConstraint,  new_TailAndConstraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint( $new_HeadAndConstraint,  $new_TailAndConstraint) }
}

    %op Strategy _EmptyOrConstraint() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraint)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraint() }
    }
  
  
  %op Strategy When_EmptyOrConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrConstraint(),s) }
  }

  %op Strategy Is_EmptyOrConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyOrConstraint()}
  }
  
%op Strategy Make_EmptyOrConstraint() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraint))) }

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraint() }
}

    %op Strategy _ConsOrConstraint(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsOrConstraint(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrConstraint(),s) }
  }

  %op Strategy Is_ConsOrConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_ConsOrConstraint()}
  }
  
%op Strategy Make_ConsOrConstraint(_HeadOrConstraint:Strategy, _TailOrConstraint:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint))) }

  get_slot(_HeadOrConstraint, t) { $t._HeadOrConstraint }
  get_slot(_TailOrConstraint, t) { $t._TailOrConstraint }
  make( new_HeadOrConstraint,  new_TailOrConstraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint( $new_HeadOrConstraint,  $new_TailOrConstraint) }
}

    %op Strategy _EmptyOrConstraintDisjunction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraintDisjunction)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraintDisjunction() }
    }
  
  
  %op Strategy When_EmptyOrConstraintDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOrConstraintDisjunction(),s) }
  }

  %op Strategy Is_EmptyOrConstraintDisjunction() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyOrConstraintDisjunction()}
  }
  
%op Strategy Make_EmptyOrConstraintDisjunction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraintDisjunction))) }

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraintDisjunction() }
}

    %op Strategy _ConsOrConstraintDisjunction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsOrConstraintDisjunction(s:Strategy) {
    make(s) { `Sequence(Is_ConsOrConstraintDisjunction(),s) }
  }

  %op Strategy Is_ConsOrConstraintDisjunction() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_ConsOrConstraintDisjunction()}
  }
  
%op Strategy Make_ConsOrConstraintDisjunction(_HeadOrConstraintDisjunction:Strategy, _TailOrConstraintDisjunction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction))) }

  get_slot(_HeadOrConstraintDisjunction, t) { $t._HeadOrConstraintDisjunction }
  get_slot(_TailOrConstraintDisjunction, t) { $t._TailOrConstraintDisjunction }
  make( new_HeadOrConstraintDisjunction,  new_TailOrConstraintDisjunction) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction( $new_HeadOrConstraintDisjunction,  $new_TailOrConstraintDisjunction) }
}

    %op Strategy _MatchConstraint(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint($arg0, $arg1) }
    }
  
  
  %op Strategy When_MatchConstraint(s:Strategy) {
    make(s) { `Sequence(Is_MatchConstraint(),s) }
  }

  %op Strategy Is_MatchConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_MatchConstraint()}
  }
  
%op Strategy Make_MatchConstraint(_Pattern:Strategy, _Subject:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint))) }

  get_slot(_Pattern, t) { $t._Pattern }
  get_slot(_Subject, t) { $t._Subject }
  make( new_Pattern,  new_Subject) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint( $new_Pattern,  $new_Subject) }
}

    %op Strategy _AntiMatchConstraint(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AntiMatchConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AntiMatchConstraint($arg0) }
    }
  
  
  %op Strategy When_AntiMatchConstraint(s:Strategy) {
    make(s) { `Sequence(Is_AntiMatchConstraint(),s) }
  }

  %op Strategy Is_AntiMatchConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_AntiMatchConstraint()}
  }
  
%op Strategy Make_AntiMatchConstraint(_Constraint:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AntiMatchConstraint))) }

  get_slot(_Constraint, t) { $t._Constraint }
  make( new_Constraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AntiMatchConstraint( $new_Constraint) }
}

    %op Strategy _NumericConstraint(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._NumericConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomconstraint.strategy.constraint._NumericConstraint($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_NumericConstraint(s:Strategy) {
    make(s) { `Sequence(Is_NumericConstraint(),s) }
  }

  %op Strategy Is_NumericConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_NumericConstraint()}
  }
  
%op Strategy Make_NumericConstraint(_Pattern:Strategy, _Subject:Strategy, _Type:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_NumericConstraint))) }

  get_slot(_Pattern, t) { $t._Pattern }
  get_slot(_Subject, t) { $t._Subject }
  get_slot(_Type, t) { $t._Type }
  make( new_Pattern,  new_Subject,  new_Type) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_NumericConstraint( $new_Pattern,  $new_Subject,  $new_Type) }
}

    %op Strategy _EmptyListConstraint(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint($arg0, $arg1) }
    }
  
  
  %op Strategy When_EmptyListConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyListConstraint(),s) }
  }

  %op Strategy Is_EmptyListConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyListConstraint()}
  }
  
%op Strategy Make_EmptyListConstraint(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint( $new_Opname,  $new_Variable) }
}

    %op Strategy _EmptyArrayConstraint(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_EmptyArrayConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyArrayConstraint(),s) }
  }

  %op Strategy Is_EmptyArrayConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraint.Is_EmptyArrayConstraint()}
  }
  
%op Strategy Make_EmptyArrayConstraint(_Opname:Strategy, _Variable:Strategy, _Index:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint))) }

  get_slot(_Opname, t) { $t._Opname }
  get_slot(_Variable, t) { $t._Variable }
  get_slot(_Index, t) { $t._Index }
  make( new_Opname,  new_Variable,  new_Index) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint( $new_Opname,  $new_Variable,  $new_Index) }
}

    %op Strategy _EmptyconcConstraint() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint)))}
      
        make() { new tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint() }
    }
  
  
  %op Strategy When_EmptyconcConstraint(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcConstraint(),s) }
  }

  %op Strategy Is_EmptyconcConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Is_EmptyconcConstraint()}
  }
  
%op Strategy Make_EmptyconcConstraint() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint))) }

  make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint() }
}

    %op Strategy _ConsconcConstraint(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcConstraint(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcConstraint(),s) }
  }

  %op Strategy Is_ConsconcConstraint() {
    make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Is_ConsconcConstraint()}
  }
  
%op Strategy Make_ConsconcConstraint(_HeadconcConstraint:Strategy, _TailconcConstraint:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint))) }

  get_slot(_HeadconcConstraint, t) { $t._HeadconcConstraint }
  get_slot(_TailconcConstraint, t) { $t._TailconcConstraint }
  make( new_HeadconcConstraint,  new_TailconcConstraint) { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint( $new_HeadconcConstraint,  $new_TailconcConstraint) }
}

    %op Strategy _PairNameDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_PairNameDecl(s:Strategy) {
    make(s) { `Sequence(Is_PairNameDecl(),s) }
  }

  %op Strategy Is_PairNameDecl() {
    make() { new tom.engine.adt.tomslot.strategy.pairnamedecl.Is_PairNameDecl()}
  }
  
%op Strategy Make_PairNameDecl(_SlotName:Strategy, _SlotDecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl))) }

  get_slot(_SlotName, t) { $t._SlotName }
  get_slot(_SlotDecl, t) { $t._SlotDecl }
  make( new_SlotName,  new_SlotDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl( $new_SlotName,  $new_SlotDecl) }
}

    %op Strategy _EmptyconcPairNameDecl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl)))}
      
        make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl() }
    }
  
  
  %op Strategy When_EmptyconcPairNameDecl(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcPairNameDecl(),s) }
  }

  %op Strategy Is_EmptyconcPairNameDecl() {
    make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_EmptyconcPairNameDecl()}
  }
  
%op Strategy Make_EmptyconcPairNameDecl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl))) }

  make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl() }
}

    %op Strategy _ConsconcPairNameDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcPairNameDecl(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcPairNameDecl(),s) }
  }

  %op Strategy Is_ConsconcPairNameDecl() {
    make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Is_ConsconcPairNameDecl()}
  }
  
%op Strategy Make_ConsconcPairNameDecl(_HeadconcPairNameDecl:Strategy, _TailconcPairNameDecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl))) }

  get_slot(_HeadconcPairNameDecl, t) { $t._HeadconcPairNameDecl }
  get_slot(_TailconcPairNameDecl, t) { $t._TailconcPairNameDecl }
  make( new_HeadconcPairNameDecl,  new_TailconcPairNameDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl( $new_HeadconcPairNameDecl,  $new_TailconcPairNameDecl) }
}

    %op Strategy _EmptyconcSlot() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot)))}
      
        make() { new tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot() }
    }
  
  
  %op Strategy When_EmptyconcSlot(s:Strategy) {
    make(s) { `Sequence(Is_EmptyconcSlot(),s) }
  }

  %op Strategy Is_EmptyconcSlot() {
    make() { new tom.engine.adt.tomslot.strategy.slotlist.Is_EmptyconcSlot()}
  }
  
%op Strategy Make_EmptyconcSlot() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot))) }

  make() { new tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot() }
}

    %op Strategy _ConsconcSlot(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsconcSlot(s:Strategy) {
    make(s) { `Sequence(Is_ConsconcSlot(),s) }
  }

  %op Strategy Is_ConsconcSlot() {
    make() { new tom.engine.adt.tomslot.strategy.slotlist.Is_ConsconcSlot()}
  }
  
%op Strategy Make_ConsconcSlot(_HeadconcSlot:Strategy, _TailconcSlot:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot))) }

  get_slot(_HeadconcSlot, t) { $t._HeadconcSlot }
  get_slot(_TailconcSlot, t) { $t._TailconcSlot }
  make( new_HeadconcSlot,  new_TailconcSlot) { new tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot( $new_HeadconcSlot,  $new_TailconcSlot) }
}

    %op Strategy _PairSlotAppl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.slot._PairSlotAppl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slot._PairSlotAppl($arg0, $arg1) }
    }
  
  
  %op Strategy When_PairSlotAppl(s:Strategy) {
    make(s) { `Sequence(Is_PairSlotAppl(),s) }
  }

  %op Strategy Is_PairSlotAppl() {
    make() { new tom.engine.adt.tomslot.strategy.slot.Is_PairSlotAppl()}
  }
  
%op Strategy Make_PairSlotAppl(_SlotName:Strategy, _Appl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl))) }

  get_slot(_SlotName, t) { $t._SlotName }
  get_slot(_Appl, t) { $t._Appl }
  make( new_SlotName,  new_Appl) { new tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl( $new_SlotName,  $new_Appl) }
}

            %op Strategy _AndInstruction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_AndInstruction"),Choice(_ConsAndInstruction(sub,MuVar("x_AndInstruction")),_EmptyAndInstruction())) }
            }
            
            %op Strategy _OrInstruction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_OrInstruction"),Choice(_ConsOrInstruction(sub,MuVar("x_OrInstruction")),_EmptyOrInstruction())) }
            }
            
            %op Strategy _concInstruction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concInstruction"),Choice(_ConsconcInstruction(sub,MuVar("x_concInstruction")),_EmptyconcInstruction())) }
            }
            
            %op Strategy _concConstraintInstruction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concConstraintInstruction"),Choice(_ConsconcConstraintInstruction(sub,MuVar("x_concConstraintInstruction")),_EmptyconcConstraintInstruction())) }
            }
            
            %op Strategy _concTomType(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concTomType"),Choice(_ConsconcTomType(sub,MuVar("x_concTomType")),_EmptyconcTomType())) }
            }
            
            %op Strategy _concTomSymbol(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concTomSymbol"),Choice(_ConsconcTomSymbol(sub,MuVar("x_concTomSymbol")),_EmptyconcTomSymbol())) }
            }
            
            %op Strategy _concTomEntry(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concTomEntry"),Choice(_ConsconcTomEntry(sub,MuVar("x_concTomEntry")),_EmptyconcTomEntry())) }
            }
            
            %op Strategy _concTomVisit(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concTomVisit"),Choice(_ConsconcTomVisit(sub,MuVar("x_concTomVisit")),_EmptyconcTomVisit())) }
            }
            
            %op Strategy _concElementaryTheory(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concElementaryTheory"),Choice(_ConsconcElementaryTheory(sub,MuVar("x_concElementaryTheory")),_EmptyconcElementaryTheory())) }
            }
            
            %op Strategy _concDeclaration(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concDeclaration"),Choice(_ConsconcDeclaration(sub,MuVar("x_concDeclaration")),_EmptyconcDeclaration())) }
            }
            
            %op Strategy _concTomNumber(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concTomNumber"),Choice(_ConsconcTomNumber(sub,MuVar("x_concTomNumber")),_EmptyconcTomNumber())) }
            }
            
            %op Strategy _concTomName(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concTomName"),Choice(_ConsconcTomName(sub,MuVar("x_concTomName")),_EmptyconcTomName())) }
            }
            
            %op Strategy _OrExpressionDisjunction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_OrExpressionDisjunction"),Choice(_ConsOrExpressionDisjunction(sub,MuVar("x_OrExpressionDisjunction")),_EmptyOrExpressionDisjunction())) }
            }
            
            %op Strategy _OrConnector(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_OrConnector"),Choice(_ConsOrConnector(sub,MuVar("x_OrConnector")),_EmptyOrConnector())) }
            }
            
            %op Strategy _concTomTerm(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concTomTerm"),Choice(_ConsconcTomTerm(sub,MuVar("x_concTomTerm")),_EmptyconcTomTerm())) }
            }
            
            %op Strategy _concOption(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concOption"),Choice(_ConsconcOption(sub,MuVar("x_concOption")),_EmptyconcOption())) }
            }
            
            %op Strategy _AndConstraint(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_AndConstraint"),Choice(_ConsAndConstraint(sub,MuVar("x_AndConstraint")),_EmptyAndConstraint())) }
            }
            
            %op Strategy _OrConstraint(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_OrConstraint"),Choice(_ConsOrConstraint(sub,MuVar("x_OrConstraint")),_EmptyOrConstraint())) }
            }
            
            %op Strategy _OrConstraintDisjunction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_OrConstraintDisjunction"),Choice(_ConsOrConstraintDisjunction(sub,MuVar("x_OrConstraintDisjunction")),_EmptyOrConstraintDisjunction())) }
            }
            
            %op Strategy _concConstraint(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concConstraint"),Choice(_ConsconcConstraint(sub,MuVar("x_concConstraint")),_EmptyconcConstraint())) }
            }
            
            %op Strategy _concPairNameDecl(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concPairNameDecl"),Choice(_ConsconcPairNameDecl(sub,MuVar("x_concPairNameDecl")),_EmptyconcPairNameDecl())) }
            }
            
            %op Strategy _concSlot(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_concSlot"),Choice(_ConsconcSlot(sub,MuVar("x_concSlot")),_EmptyconcSlot())) }
            }
            