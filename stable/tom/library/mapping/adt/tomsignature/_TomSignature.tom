
   /*
   %include { mustrategy.tom }
   */

%op Strategy _TomTermToInstruction(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TomTermToInstruction(arg0) }
}

%op Strategy When_TomTermToInstruction(s:Strategy) {
  make(s) { `Sequence(_TomTermToInstruction(Identity()),s) }
}

%op Strategy Is_TomTermToInstruction() {
  make() { `_TomTermToInstruction(Identity()) }
}

%op Strategy Make_TomTermToInstruction(_Tom:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction)}

  get_slot(_Tom, t) { _Tom }
  make( new_Tom) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TomTermToInstruction( new_Tom) }
}

%op Strategy _TargetLanguageToInstruction(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._TargetLanguageToInstruction(arg0) }
}

%op Strategy When_TargetLanguageToInstruction(s:Strategy) {
  make(s) { `Sequence(_TargetLanguageToInstruction(Identity()),s) }
}

%op Strategy Is_TargetLanguageToInstruction() {
  make() { `_TargetLanguageToInstruction(Identity()) }
}

%op Strategy Make_TargetLanguageToInstruction(_Tl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction)}

  get_slot(_Tl, t) { _Tl }
  make( new_Tl) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TargetLanguageToInstruction( new_Tl) }
}

%op Strategy _If(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._If)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._If(arg0, arg1, arg2) }
}

%op Strategy When_If(s:Strategy) {
  make(s) { `Sequence(_If(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_If() {
  make() { `_If(Identity(), Identity(), Identity()) }
}

%op Strategy Make_If(_Condition:Strategy, _SuccesInst:Strategy, _FailureInst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_If)}

  get_slot(_Condition, t) { _Condition }
  get_slot(_SuccesInst, t) { _SuccesInst }
  get_slot(_FailureInst, t) { _FailureInst }
  make( new_Condition,  new_SuccesInst,  new_FailureInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_If( new_Condition,  new_SuccesInst,  new_FailureInst) }
}

%op Strategy _DoWhile(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._DoWhile)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._DoWhile(arg0, arg1) }
}

%op Strategy When_DoWhile(s:Strategy) {
  make(s) { `Sequence(_DoWhile(Identity(), Identity()),s) }
}

%op Strategy Is_DoWhile() {
  make() { `_DoWhile(Identity(), Identity()) }
}

%op Strategy Make_DoWhile(_DoInst:Strategy, _Condition:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile)}

  get_slot(_DoInst, t) { _DoInst }
  get_slot(_Condition, t) { _Condition }
  make( new_DoInst,  new_Condition) { new tom.engine.adt.tominstruction.strategy.instruction.Make_DoWhile( new_DoInst,  new_Condition) }
}

%op Strategy _WhileDo(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._WhileDo)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._WhileDo(arg0, arg1) }
}

%op Strategy When_WhileDo(s:Strategy) {
  make(s) { `Sequence(_WhileDo(Identity(), Identity()),s) }
}

%op Strategy Is_WhileDo() {
  make() { `_WhileDo(Identity(), Identity()) }
}

%op Strategy Make_WhileDo(_Condition:Strategy, _DoInst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo)}

  get_slot(_Condition, t) { _Condition }
  get_slot(_DoInst, t) { _DoInst }
  make( new_Condition,  new_DoInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_WhileDo( new_Condition,  new_DoInst) }
}

%op Strategy _Assign(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Assign)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._Assign(arg0, arg1) }
}

%op Strategy When_Assign(s:Strategy) {
  make(s) { `Sequence(_Assign(Identity(), Identity()),s) }
}

%op Strategy Is_Assign() {
  make() { `_Assign(Identity(), Identity()) }
}

%op Strategy Make_Assign(_Variable:Strategy, _Source:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Assign)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  make( new_Variable,  new_Source) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Assign( new_Variable,  new_Source) }
}

%op Strategy _Let(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Let)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._Let(arg0, arg1, arg2) }
}

%op Strategy When_Let(s:Strategy) {
  make(s) { `Sequence(_Let(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Let() {
  make() { `_Let(Identity(), Identity(), Identity()) }
}

%op Strategy Make_Let(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Let)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Let( new_Variable,  new_Source,  new_AstInstruction) }
}

%op Strategy _LetRef(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._LetRef)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._LetRef(arg0, arg1, arg2) }
}

%op Strategy When_LetRef(s:Strategy) {
  make(s) { `Sequence(_LetRef(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_LetRef() {
  make() { `_LetRef(Identity(), Identity(), Identity()) }
}

%op Strategy Make_LetRef(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_LetRef( new_Variable,  new_Source,  new_AstInstruction) }
}

%op Strategy _LetAssign(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._LetAssign)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._LetAssign(arg0, arg1, arg2) }
}

%op Strategy When_LetAssign(s:Strategy) {
  make(s) { `Sequence(_LetAssign(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_LetAssign() {
  make() { `_LetAssign(Identity(), Identity(), Identity()) }
}

%op Strategy Make_LetAssign(_Variable:Strategy, _Source:Strategy, _AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_LetAssign)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Source, t) { _Source }
  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_Variable,  new_Source,  new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_LetAssign( new_Variable,  new_Source,  new_AstInstruction) }
}

%op Strategy _Return(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Return)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._Return(arg0) }
}

%op Strategy When_Return(s:Strategy) {
  make(s) { `Sequence(_Return(Identity()),s) }
}

%op Strategy Is_Return() {
  make() { `_Return(Identity()) }
}

%op Strategy Make_Return(_Kid1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Return)}

  get_slot(_Kid1, t) { _Kid1 }
  make( new_Kid1) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Return( new_Kid1) }
}

%op Strategy _Nop() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Nop)}

  make() { new tom.engine.adt.tominstruction.strategy.instruction._Nop() }
}

%op Strategy When_Nop(s:Strategy) {
  make(s) { `Sequence(_Nop(),s) }
}

%op Strategy Is_Nop() {
  make() { `_Nop() }
}

%op Strategy Make_Nop() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Nop)}

  make() { new tom.engine.adt.tominstruction.strategy.instruction.Make_Nop() }
}

%op Strategy _AbstractBlock(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._AbstractBlock(arg0) }
}

%op Strategy When_AbstractBlock(s:Strategy) {
  make(s) { `Sequence(_AbstractBlock(Identity()),s) }
}

%op Strategy Is_AbstractBlock() {
  make() { `_AbstractBlock(Identity()) }
}

%op Strategy Make_AbstractBlock(_InstList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock)}

  get_slot(_InstList, t) { _InstList }
  make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_AbstractBlock( new_InstList) }
}

%op Strategy _UnamedBlock(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._UnamedBlock(arg0) }
}

%op Strategy When_UnamedBlock(s:Strategy) {
  make(s) { `Sequence(_UnamedBlock(Identity()),s) }
}

%op Strategy Is_UnamedBlock() {
  make() { `_UnamedBlock(Identity()) }
}

%op Strategy Make_UnamedBlock(_InstList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock)}

  get_slot(_InstList, t) { _InstList }
  make( new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_UnamedBlock( new_InstList) }
}

%op Strategy _NamedBlock(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._NamedBlock)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._NamedBlock(arg0, arg1) }
}

%op Strategy When_NamedBlock(s:Strategy) {
  make(s) { `Sequence(_NamedBlock(Identity(), Identity()),s) }
}

%op Strategy Is_NamedBlock() {
  make() { `_NamedBlock(Identity(), Identity()) }
}

%op Strategy Make_NamedBlock(_BlockName:String, _InstList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock)}

  get_slot(_BlockName, t) { _BlockName }
  get_slot(_InstList, t) { _InstList }
  make( _BlockName,  new_InstList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_NamedBlock( _BlockName,  new_InstList) }
}

%op Strategy _Match(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._Match)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._Match(arg0, arg1, arg2) }
}

%op Strategy When_Match(s:Strategy) {
  make(s) { `Sequence(_Match(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Match() {
  make() { `_Match(Identity(), Identity(), Identity()) }
}

%op Strategy Make_Match(_SubjectList:Strategy, _AstPatternInstructionList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_Match)}

  get_slot(_SubjectList, t) { _SubjectList }
  get_slot(_AstPatternInstructionList, t) { _AstPatternInstructionList }
  get_slot(_Option, t) { _Option }
  make( new_SubjectList,  new_AstPatternInstructionList,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_Match( new_SubjectList,  new_AstPatternInstructionList,  new_Option) }
}

%op Strategy _CompiledMatch(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledMatch(arg0, arg1) }
}

%op Strategy When_CompiledMatch(s:Strategy) {
  make(s) { `Sequence(_CompiledMatch(Identity(), Identity()),s) }
}

%op Strategy Is_CompiledMatch() {
  make() { `_CompiledMatch(Identity(), Identity()) }
}

%op Strategy Make_CompiledMatch(_AutomataInst:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch)}

  get_slot(_AutomataInst, t) { _AutomataInst }
  get_slot(_Option, t) { _Option }
  make( new_AutomataInst,  new_Option) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledMatch( new_AutomataInst,  new_Option) }
}

%op Strategy _CompiledPattern(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instruction._CompiledPattern(arg0, arg1) }
}

%op Strategy When_CompiledPattern(s:Strategy) {
  make(s) { `Sequence(_CompiledPattern(Identity(), Identity()),s) }
}

%op Strategy Is_CompiledPattern() {
  make() { `_CompiledPattern(Identity(), Identity()) }
}

%op Strategy Make_CompiledPattern(_PatternList:Strategy, _AutomataInst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern)}

  get_slot(_PatternList, t) { _PatternList }
  get_slot(_AutomataInst, t) { _AutomataInst }
  make( new_PatternList,  new_AutomataInst) { new tom.engine.adt.tominstruction.strategy.instruction.Make_CompiledPattern( new_PatternList,  new_AutomataInst) }
}

%op Strategy _RawAction(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._RawAction)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tominstruction.strategy.instruction._RawAction(arg0) }
}

%op Strategy When_RawAction(s:Strategy) {
  make(s) { `Sequence(_RawAction(Identity()),s) }
}

%op Strategy Is_RawAction() {
  make() { `_RawAction(Identity()) }
}

%op Strategy Make_RawAction(_AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction)}

  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_AstInstruction) { new tom.engine.adt.tominstruction.strategy.instruction.Make_RawAction( new_AstInstruction) }
}

%op Strategy _TypedAction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction._TypedAction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tominstruction.strategy.instruction._TypedAction(arg0, arg1, arg2) }
}

%op Strategy When_TypedAction(s:Strategy) {
  make(s) { `Sequence(_TypedAction(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_TypedAction() {
  make() { `_TypedAction(Identity(), Identity(), Identity()) }
}

%op Strategy Make_TypedAction(_AstInstruction:Strategy, _PositivePattern:Strategy, _NegativePatternList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction)}

  get_slot(_AstInstruction, t) { _AstInstruction }
  get_slot(_PositivePattern, t) { _PositivePattern }
  get_slot(_NegativePatternList, t) { _NegativePatternList }
  make( new_AstInstruction,  new_PositivePattern,  new_NegativePatternList) { new tom.engine.adt.tominstruction.strategy.instruction.Make_TypedAction( new_AstInstruction,  new_PositivePattern,  new_NegativePatternList) }
}

%op Strategy _EmptyconcInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction)}

  make() { new tom.engine.adt.tominstruction.strategy.instructionlist._EmptyconcInstruction() }
}

%op Strategy When_EmptyconcInstruction(s:Strategy) {
  make(s) { `Sequence(_EmptyconcInstruction(),s) }
}

%op Strategy Is_EmptyconcInstruction() {
  make() { `_EmptyconcInstruction() }
}

%op Strategy Make_EmptyconcInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction)}

  make() { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_EmptyconcInstruction() }
}

%op Strategy _ConsconcInstruction(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tominstruction.strategy.instructionlist._ConsconcInstruction(arg0, arg1) }
}

%op Strategy When_ConsconcInstruction(s:Strategy) {
  make(s) { `Sequence(_ConsconcInstruction(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcInstruction() {
  make() { `_ConsconcInstruction(Identity(), Identity()) }
}

%op Strategy Make_ConsconcInstruction(_HeadconcInstruction:Strategy, _TailconcInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction)}

  get_slot(_HeadconcInstruction, t) { _HeadconcInstruction }
  get_slot(_TailconcInstruction, t) { _TailconcInstruction }
  make( new_HeadconcInstruction,  new_TailconcInstruction) { new tom.engine.adt.tominstruction.strategy.instructionlist.Make_ConsconcInstruction( new_HeadconcInstruction,  new_TailconcInstruction) }
}

%op Strategy _EmptyconcTomType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtypelist._EmptyconcTomType() }
}

%op Strategy When_EmptyconcTomType(s:Strategy) {
  make(s) { `Sequence(_EmptyconcTomType(),s) }
}

%op Strategy Is_EmptyconcTomType() {
  make() { `_EmptyconcTomType() }
}

%op Strategy Make_EmptyconcTomType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_EmptyconcTomType() }
}

%op Strategy _ConsconcTomType(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtypelist._ConsconcTomType(arg0, arg1) }
}

%op Strategy When_ConsconcTomType(s:Strategy) {
  make(s) { `Sequence(_ConsconcTomType(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcTomType() {
  make() { `_ConsconcTomType(Identity(), Identity()) }
}

%op Strategy Make_ConsconcTomType(_HeadconcTomType:Strategy, _TailconcTomType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType)}

  get_slot(_HeadconcTomType, t) { _HeadconcTomType }
  get_slot(_TailconcTomType, t) { _TailconcTomType }
  make( new_HeadconcTomType,  new_TailconcTomType) { new tom.engine.adt.tomtype.strategy.tomtypelist.Make_ConsconcTomType( new_HeadconcTomType,  new_TailconcTomType) }
}

%op Strategy _Type(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._Type)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._Type(arg0, arg1) }
}

%op Strategy When_Type(s:Strategy) {
  make(s) { `Sequence(_Type(Identity(), Identity()),s) }
}

%op Strategy Is_Type() {
  make() { `_Type(Identity(), Identity()) }
}

%op Strategy Make_Type(_TomType:Strategy, _TlType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_Type)}

  get_slot(_TomType, t) { _TomType }
  get_slot(_TlType, t) { _TlType }
  make( new_TomType,  new_TlType) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Type( new_TomType,  new_TlType) }
}

%op Strategy _TomTypeAlone(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TomTypeAlone)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TomTypeAlone(arg0) }
}

%op Strategy When_TomTypeAlone(s:Strategy) {
  make(s) { `Sequence(_TomTypeAlone(Identity()),s) }
}

%op Strategy Is_TomTypeAlone() {
  make() { `_TomTypeAlone(Identity()) }
}

%op Strategy Make_TomTypeAlone(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TomTypeAlone)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TomTypeAlone( _String) }
}

%op Strategy _ASTTomType(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._ASTTomType)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._ASTTomType(arg0) }
}

%op Strategy When_ASTTomType(s:Strategy) {
  make(s) { `Sequence(_ASTTomType(Identity()),s) }
}

%op Strategy Is_ASTTomType() {
  make() { `_ASTTomType(Identity()) }
}

%op Strategy Make_ASTTomType(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_ASTTomType)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomtype.Make_ASTTomType( _String) }
}

%op Strategy _Codomain(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._Codomain)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._Codomain(arg0) }
}

%op Strategy When_Codomain(s:Strategy) {
  make(s) { `Sequence(_Codomain(Identity()),s) }
}

%op Strategy Is_Codomain() {
  make() { `_Codomain(Identity()) }
}

%op Strategy Make_Codomain(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomtype.strategy.tomtype.Make_Codomain( new_AstName) }
}

%op Strategy _TypesToType(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TypesToType)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtype._TypesToType(arg0, arg1) }
}

%op Strategy When_TypesToType(s:Strategy) {
  make(s) { `Sequence(_TypesToType(Identity(), Identity()),s) }
}

%op Strategy Is_TypesToType() {
  make() { `_TypesToType(Identity(), Identity()) }
}

%op Strategy Make_TypesToType(_Domain:Strategy, _Codomain:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType)}

  get_slot(_Domain, t) { _Domain }
  get_slot(_Codomain, t) { _Codomain }
  make( new_Domain,  new_Codomain) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypesToType( new_Domain,  new_Codomain) }
}

%op Strategy _TLType(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TLType)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TLType(arg0) }
}

%op Strategy When_TLType(s:Strategy) {
  make(s) { `Sequence(_TLType(Identity()),s) }
}

%op Strategy Is_TLType() {
  make() { `_TLType(Identity()) }
}

%op Strategy Make_TLType(_Tl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TLType)}

  get_slot(_Tl, t) { _Tl }
  make( new_Tl) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TLType( new_Tl) }
}

%op Strategy _EmptyType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._EmptyType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtype._EmptyType() }
}

%op Strategy When_EmptyType(s:Strategy) {
  make(s) { `Sequence(_EmptyType(),s) }
}

%op Strategy Is_EmptyType() {
  make() { `_EmptyType() }
}

%op Strategy Make_EmptyType() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType)}

  make() { new tom.engine.adt.tomtype.strategy.tomtype.Make_EmptyType() }
}

%op Strategy _TypeList(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype._TypeList)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomtype._TypeList(arg0) }
}

%op Strategy When_TypeList(s:Strategy) {
  make(s) { `Sequence(_TypeList(Identity()),s) }
}

%op Strategy Is_TypeList() {
  make() { `_TypeList(Identity()) }
}

%op Strategy Make_TypeList(_TypeList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtype.Make_TypeList)}

  get_slot(_TypeList, t) { _TypeList }
  make( new_TypeList) { new tom.engine.adt.tomtype.strategy.tomtype.Make_TypeList( new_TypeList) }
}

%op Strategy _TypeDefinition(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypedefinition._TypeDefinition)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomtype.strategy.tomtypedefinition._TypeDefinition(arg0, arg1) }
}

%op Strategy When_TypeDefinition(s:Strategy) {
  make(s) { `Sequence(_TypeDefinition(Identity(), Identity()),s) }
}

%op Strategy Is_TypeDefinition() {
  make() { `_TypeDefinition(Identity(), Identity()) }
}

%op Strategy Make_TypeDefinition(_TomType:Strategy, _Forward:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomtypedefinition.Make_TypeDefinition)}

  get_slot(_TomType, t) { _TomType }
  get_slot(_Forward, t) { _Forward }
  make( new_TomType,  new_Forward) { new tom.engine.adt.tomtype.strategy.tomtypedefinition.Make_TypeDefinition( new_TomType,  new_Forward) }
}

%op Strategy _TLForward(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype._TLForward)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomtype.strategy.tomforwardtype._TLForward(arg0) }
}

%op Strategy When_TLForward(s:Strategy) {
  make(s) { `Sequence(_TLForward(Identity()),s) }
}

%op Strategy Is_TLForward() {
  make() { `_TLForward(Identity()) }
}

%op Strategy Make_TLForward(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype.Make_TLForward)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomtype.strategy.tomforwardtype.Make_TLForward( _String) }
}

%op Strategy _EmptyForward() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype._EmptyForward)}

  make() { new tom.engine.adt.tomtype.strategy.tomforwardtype._EmptyForward() }
}

%op Strategy When_EmptyForward(s:Strategy) {
  make(s) { `Sequence(_EmptyForward(),s) }
}

%op Strategy Is_EmptyForward() {
  make() { `_EmptyForward() }
}

%op Strategy Make_EmptyForward() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomtype.strategy.tomforwardtype.Make_EmptyForward)}

  make() { new tom.engine.adt.tomtype.strategy.tomforwardtype.Make_EmptyForward() }
}

%op Strategy _EmptyconcTomSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist._EmptyconcTomSymbol() }
}

%op Strategy When_EmptyconcTomSymbol(s:Strategy) {
  make(s) { `Sequence(_EmptyconcTomSymbol(),s) }
}

%op Strategy Is_EmptyconcTomSymbol() {
  make() { `_EmptyconcTomSymbol() }
}

%op Strategy Make_EmptyconcTomSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_EmptyconcTomSymbol() }
}

%op Strategy _ConsconcTomSymbol(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomsymbollist._ConsconcTomSymbol(arg0, arg1) }
}

%op Strategy When_ConsconcTomSymbol(s:Strategy) {
  make(s) { `Sequence(_ConsconcTomSymbol(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcTomSymbol() {
  make() { `_ConsconcTomSymbol(Identity(), Identity()) }
}

%op Strategy Make_ConsconcTomSymbol(_HeadconcTomSymbol:Strategy, _TailconcTomSymbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol)}

  get_slot(_HeadconcTomSymbol, t) { _HeadconcTomSymbol }
  get_slot(_TailconcTomSymbol, t) { _TailconcTomSymbol }
  make( new_HeadconcTomSymbol,  new_TailconcTomSymbol) { new tom.engine.adt.tomsignature.strategy.tomsymbollist.Make_ConsconcTomSymbol( new_HeadconcTomSymbol,  new_TailconcTomSymbol) }
}

%op Strategy _VisitTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.tomvisit._VisitTerm(arg0, arg1, arg2) }
}

%op Strategy When_VisitTerm(s:Strategy) {
  make(s) { `Sequence(_VisitTerm(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_VisitTerm() {
  make() { `_VisitTerm(Identity(), Identity(), Identity()) }
}

%op Strategy Make_VisitTerm(_VNode:Strategy, _AstPatternInstructionList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm)}

  get_slot(_VNode, t) { _VNode }
  get_slot(_AstPatternInstructionList, t) { _AstPatternInstructionList }
  get_slot(_Option, t) { _Option }
  make( new_VNode,  new_AstPatternInstructionList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomvisit.Make_VisitTerm( new_VNode,  new_AstPatternInstructionList,  new_Option) }
}

%op Strategy _StructTable(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.tomstructuretable._StructTable(arg0) }
}

%op Strategy When_StructTable(s:Strategy) {
  make(s) { `Sequence(_StructTable(Identity()),s) }
}

%op Strategy Is_StructTable() {
  make() { `_StructTable(Identity()) }
}

%op Strategy Make_StructTable(_StructList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable)}

  get_slot(_StructList, t) { _StructList }
  make( new_StructList) { new tom.engine.adt.tomsignature.strategy.tomstructuretable.Make_StructTable( new_StructList) }
}

%op Strategy _TextPosition(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.position._TextPosition)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.position._TextPosition(arg0, arg1) }
}

%op Strategy When_TextPosition(s:Strategy) {
  make(s) { `Sequence(_TextPosition(Identity(), Identity()),s) }
}

%op Strategy Is_TextPosition() {
  make() { `_TextPosition(Identity(), Identity()) }
}

%op Strategy Make_TextPosition(_Line:int, _Column:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.position.Make_TextPosition)}

  get_slot(_Line, t) { _Line }
  get_slot(_Column, t) { _Column }
  make( _Line,  _Column) { new tom.engine.adt.tomsignature.strategy.position.Make_TextPosition( _Line,  _Column) }
}

%op Strategy _Entry(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentry._Entry)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentry._Entry(arg0, arg1) }
}

%op Strategy When_Entry(s:Strategy) {
  make(s) { `Sequence(_Entry(Identity(), Identity()),s) }
}

%op Strategy Is_Entry() {
  make() { `_Entry(Identity(), Identity()) }
}

%op Strategy Make_Entry(_StrName:String, _AstSymbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry)}

  get_slot(_StrName, t) { _StrName }
  get_slot(_AstSymbol, t) { _AstSymbol }
  make( _StrName,  new_AstSymbol) { new tom.engine.adt.tomsignature.strategy.tomentry.Make_Entry( _StrName,  new_AstSymbol) }
}

%op Strategy _EmptyconcTomEntry() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry)}

  make() { new tom.engine.adt.tomsignature.strategy.tomentrylist._EmptyconcTomEntry() }
}

%op Strategy When_EmptyconcTomEntry(s:Strategy) {
  make(s) { `Sequence(_EmptyconcTomEntry(),s) }
}

%op Strategy Is_EmptyconcTomEntry() {
  make() { `_EmptyconcTomEntry() }
}

%op Strategy Make_EmptyconcTomEntry() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry)}

  make() { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_EmptyconcTomEntry() }
}

%op Strategy _ConsconcTomEntry(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomentrylist._ConsconcTomEntry(arg0, arg1) }
}

%op Strategy When_ConsconcTomEntry(s:Strategy) {
  make(s) { `Sequence(_ConsconcTomEntry(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcTomEntry() {
  make() { `_ConsconcTomEntry(Identity(), Identity()) }
}

%op Strategy Make_ConsconcTomEntry(_HeadconcTomEntry:Strategy, _TailconcTomEntry:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry)}

  get_slot(_HeadconcTomEntry, t) { _HeadconcTomEntry }
  get_slot(_TailconcTomEntry, t) { _TailconcTomEntry }
  make( new_HeadconcTomEntry,  new_TailconcTomEntry) { new tom.engine.adt.tomsignature.strategy.tomentrylist.Make_ConsconcTomEntry( new_HeadconcTomEntry,  new_TailconcTomEntry) }
}

%op Strategy _EmptyconcTomVisit() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit)}

  make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist._EmptyconcTomVisit() }
}

%op Strategy When_EmptyconcTomVisit(s:Strategy) {
  make(s) { `Sequence(_EmptyconcTomVisit(),s) }
}

%op Strategy Is_EmptyconcTomVisit() {
  make() { `_EmptyconcTomVisit() }
}

%op Strategy Make_EmptyconcTomVisit() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit)}

  make() { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_EmptyconcTomVisit() }
}

%op Strategy _ConsconcTomVisit(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomsignature.strategy.tomvisitlist._ConsconcTomVisit(arg0, arg1) }
}

%op Strategy When_ConsconcTomVisit(s:Strategy) {
  make(s) { `Sequence(_ConsconcTomVisit(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcTomVisit() {
  make() { `_ConsconcTomVisit(Identity(), Identity()) }
}

%op Strategy Make_ConsconcTomVisit(_HeadconcTomVisit:Strategy, _TailconcTomVisit:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit)}

  get_slot(_HeadconcTomVisit, t) { _HeadconcTomVisit }
  get_slot(_TailconcTomVisit, t) { _TailconcTomVisit }
  make( new_HeadconcTomVisit,  new_TailconcTomVisit) { new tom.engine.adt.tomsignature.strategy.tomvisitlist.Make_ConsconcTomVisit( new_HeadconcTomVisit,  new_TailconcTomVisit) }
}

%op Strategy _TL(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._TL)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomsignature.strategy.targetlanguage._TL(arg0, arg1, arg2) }
}

%op Strategy When_TL(s:Strategy) {
  make(s) { `Sequence(_TL(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_TL() {
  make() { `_TL(Identity(), Identity(), Identity()) }
}

%op Strategy Make_TL(_Code:String, _Start:Strategy, _End:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL)}

  get_slot(_Code, t) { _Code }
  get_slot(_Start, t) { _Start }
  get_slot(_End, t) { _End }
  make( _Code,  new_Start,  new_End) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_TL( _Code,  new_Start,  new_End) }
}

%op Strategy _ITL(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._ITL)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._ITL(arg0) }
}

%op Strategy When_ITL(s:Strategy) {
  make(s) { `Sequence(_ITL(Identity()),s) }
}

%op Strategy Is_ITL() {
  make() { `_ITL(Identity()) }
}

%op Strategy Make_ITL(_Code:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL)}

  get_slot(_Code, t) { _Code }
  make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_ITL( _Code) }
}

%op Strategy _Comment(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._Comment)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.targetlanguage._Comment(arg0) }
}

%op Strategy When_Comment(s:Strategy) {
  make(s) { `Sequence(_Comment(Identity()),s) }
}

%op Strategy Is_Comment() {
  make() { `_Comment(Identity()) }
}

%op Strategy Make_Comment(_Code:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment)}

  get_slot(_Code, t) { _Code }
  make( _Code) { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_Comment( _Code) }
}

%op Strategy _noTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage._noTL)}

  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage._noTL() }
}

%op Strategy When_noTL(s:Strategy) {
  make(s) { `Sequence(_noTL(),s) }
}

%op Strategy Is_noTL() {
  make() { `_noTL() }
}

%op Strategy Make_noTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL)}

  make() { new tom.engine.adt.tomsignature.strategy.targetlanguage.Make_noTL() }
}

%op Strategy _Table(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymboltable._Table)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.tomsymboltable._Table(arg0) }
}

%op Strategy When_Table(s:Strategy) {
  make(s) { `Sequence(_Table(Identity()),s) }
}

%op Strategy Is_Table() {
  make() { `_Table(Identity()) }
}

%op Strategy Make_Table(_EntryList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table)}

  get_slot(_EntryList, t) { _EntryList }
  make( new_EntryList) { new tom.engine.adt.tomsignature.strategy.tomsymboltable.Make_Table( new_EntryList) }
}

%op Strategy _emptySymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbol._emptySymbol() }
}

%op Strategy When_emptySymbol(s:Strategy) {
  make(s) { `Sequence(_emptySymbol(),s) }
}

%op Strategy Is_emptySymbol() {
  make() { `_emptySymbol() }
}

%op Strategy Make_emptySymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol)}

  make() { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_emptySymbol() }
}

%op Strategy _Symbol(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomsignature.strategy.tomsymbol._Symbol(arg0, arg1, arg2, arg3) }
}

%op Strategy When_Symbol(s:Strategy) {
  make(s) { `Sequence(_Symbol(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Symbol() {
  make() { `_Symbol(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_Symbol(_AstName:Strategy, _TypesToType:Strategy, _PairNameDeclList:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_TypesToType, t) { _TypesToType }
  get_slot(_PairNameDeclList, t) { _PairNameDeclList }
  get_slot(_Option, t) { _Option }
  make( new_AstName,  new_TypesToType,  new_PairNameDeclList,  new_Option) { new tom.engine.adt.tomsignature.strategy.tomsymbol.Make_Symbol( new_AstName,  new_TypesToType,  new_PairNameDeclList,  new_Option) }
}

%op Strategy _UsedSymbolConstructor(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolConstructor(arg0) }
}

%op Strategy When_UsedSymbolConstructor(s:Strategy) {
  make(s) { `Sequence(_UsedSymbolConstructor(Identity()),s) }
}

%op Strategy Is_UsedSymbolConstructor() {
  make() { `_UsedSymbolConstructor(Identity()) }
}

%op Strategy Make_UsedSymbolConstructor(_Symbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor)}

  get_slot(_Symbol, t) { _Symbol }
  make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolConstructor( new_Symbol) }
}

%op Strategy _UsedSymbolDestructor(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedSymbolDestructor(arg0) }
}

%op Strategy When_UsedSymbolDestructor(s:Strategy) {
  make(s) { `Sequence(_UsedSymbolDestructor(Identity()),s) }
}

%op Strategy Is_UsedSymbolDestructor() {
  make() { `_UsedSymbolDestructor(Identity()) }
}

%op Strategy Make_UsedSymbolDestructor(_Symbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor)}

  get_slot(_Symbol, t) { _Symbol }
  make( new_Symbol) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedSymbolDestructor( new_Symbol) }
}

%op Strategy _UsedTypeDefinition(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry._UsedTypeDefinition)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomsignature.strategy.keyentry._UsedTypeDefinition(arg0) }
}

%op Strategy When_UsedTypeDefinition(s:Strategy) {
  make(s) { `Sequence(_UsedTypeDefinition(Identity()),s) }
}

%op Strategy Is_UsedTypeDefinition() {
  make() { `_UsedTypeDefinition(Identity()) }
}

%op Strategy Make_UsedTypeDefinition(_Typedef:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedTypeDefinition)}

  get_slot(_Typedef, t) { _Typedef }
  make( new_Typedef) { new tom.engine.adt.tomsignature.strategy.keyentry.Make_UsedTypeDefinition( new_Typedef) }
}

%op Strategy _Syntactic() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory._Syntactic)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory._Syntactic() }
}

%op Strategy When_Syntactic(s:Strategy) {
  make(s) { `Sequence(_Syntactic(),s) }
}

%op Strategy Is_Syntactic() {
  make() { `_Syntactic() }
}

%op Strategy Make_Syntactic() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_Syntactic)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Syntactic() }
}

%op Strategy _Associative() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory._Associative)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory._Associative() }
}

%op Strategy When_Associative(s:Strategy) {
  make(s) { `Sequence(_Associative(),s) }
}

%op Strategy Is_Associative() {
  make() { `_Associative() }
}

%op Strategy Make_Associative() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_Associative)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Associative() }
}

%op Strategy _Unitary() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory._Unitary)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory._Unitary() }
}

%op Strategy When_Unitary(s:Strategy) {
  make(s) { `Sequence(_Unitary(),s) }
}

%op Strategy Is_Unitary() {
  make() { `_Unitary() }
}

%op Strategy Make_Unitary() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_Unitary)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_Unitary() }
}

%op Strategy _TrueAU() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory._TrueAU)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory._TrueAU() }
}

%op Strategy When_TrueAU(s:Strategy) {
  make(s) { `Sequence(_TrueAU(),s) }
}

%op Strategy Is_TrueAU() {
  make() { `_TrueAU() }
}

%op Strategy Make_TrueAU() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.elementarytheory.Make_TrueAU)}

  make() { new tom.engine.adt.theory.strategy.elementarytheory.Make_TrueAU() }
}

%op Strategy _EmptyconcElementaryTheory() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.theory._EmptyconcElementaryTheory)}

  make() { new tom.engine.adt.theory.strategy.theory._EmptyconcElementaryTheory() }
}

%op Strategy When_EmptyconcElementaryTheory(s:Strategy) {
  make(s) { `Sequence(_EmptyconcElementaryTheory(),s) }
}

%op Strategy Is_EmptyconcElementaryTheory() {
  make() { `_EmptyconcElementaryTheory() }
}

%op Strategy Make_EmptyconcElementaryTheory() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.theory.Make_EmptyconcElementaryTheory)}

  make() { new tom.engine.adt.theory.strategy.theory.Make_EmptyconcElementaryTheory() }
}

%op Strategy _ConsconcElementaryTheory(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.theory.strategy.theory._ConsconcElementaryTheory(arg0, arg1) }
}

%op Strategy When_ConsconcElementaryTheory(s:Strategy) {
  make(s) { `Sequence(_ConsconcElementaryTheory(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcElementaryTheory() {
  make() { `_ConsconcElementaryTheory(Identity(), Identity()) }
}

%op Strategy Make_ConsconcElementaryTheory(_HeadconcElementaryTheory:Strategy, _TailconcElementaryTheory:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory)}

  get_slot(_HeadconcElementaryTheory, t) { _HeadconcElementaryTheory }
  get_slot(_TailconcElementaryTheory, t) { _TailconcElementaryTheory }
  make( new_HeadconcElementaryTheory,  new_TailconcElementaryTheory) { new tom.engine.adt.theory.strategy.theory.Make_ConsconcElementaryTheory( new_HeadconcElementaryTheory,  new_TailconcElementaryTheory) }
}

%op Strategy _EmptyconcDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist._EmptyconcDeclaration() }
}

%op Strategy When_EmptyconcDeclaration(s:Strategy) {
  make(s) { `Sequence(_EmptyconcDeclaration(),s) }
}

%op Strategy Is_EmptyconcDeclaration() {
  make() { `_EmptyconcDeclaration() }
}

%op Strategy Make_EmptyconcDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_EmptyconcDeclaration() }
}

%op Strategy _ConsconcDeclaration(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomdeclaration.strategy.declarationlist._ConsconcDeclaration(arg0, arg1) }
}

%op Strategy When_ConsconcDeclaration(s:Strategy) {
  make(s) { `Sequence(_ConsconcDeclaration(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcDeclaration() {
  make() { `_ConsconcDeclaration(Identity(), Identity()) }
}

%op Strategy Make_ConsconcDeclaration(_HeadconcDeclaration:Strategy, _TailconcDeclaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration)}

  get_slot(_HeadconcDeclaration, t) { _HeadconcDeclaration }
  get_slot(_TailconcDeclaration, t) { _TailconcDeclaration }
  make( new_HeadconcDeclaration,  new_TailconcDeclaration) { new tom.engine.adt.tomdeclaration.strategy.declarationlist.Make_ConsconcDeclaration( new_HeadconcDeclaration,  new_TailconcDeclaration) }
}

%op Strategy _TypeTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._TypeTermDecl(arg0, arg1, arg2) }
}

%op Strategy When_TypeTermDecl(s:Strategy) {
  make(s) { `Sequence(_TypeTermDecl(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_TypeTermDecl() {
  make() { `_TypeTermDecl(Identity(), Identity(), Identity()) }
}

%op Strategy Make_TypeTermDecl(_AstName:Strategy, _Declarations:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Declarations, t) { _Declarations }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_Declarations,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_TypeTermDecl( new_AstName,  new_Declarations,  new_OrgTrack) }
}

%op Strategy _GetImplementationDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetImplementationDecl(arg0, arg1, arg2) }
}

%op Strategy When_GetImplementationDecl(s:Strategy) {
  make(s) { `Sequence(_GetImplementationDecl(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetImplementationDecl() {
  make() { `_GetImplementationDecl(Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetImplementationDecl(_Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl)}

  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetImplementationDecl( new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy _IsFsymDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsFsymDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy When_IsFsymDecl(s:Strategy) {
  make(s) { `Sequence(_IsFsymDecl(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_IsFsymDecl() {
  make() { `_IsFsymDecl(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_IsFsymDecl(_AstName:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsFsymDecl( new_AstName,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy _GetSlotDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSlotDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_GetSlotDecl(s:Strategy) {
  make(s) { `Sequence(_GetSlotDecl(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetSlotDecl() {
  make() { `_GetSlotDecl(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetSlotDecl(_AstName:Strategy, _SlotName:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_SlotName, t) { _SlotName }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_SlotName,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSlotDecl( new_AstName,  new_SlotName,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy _EqualTermDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._EqualTermDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy When_EqualTermDecl(s:Strategy) {
  make(s) { `Sequence(_EqualTermDecl(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_EqualTermDecl() {
  make() { `_EqualTermDecl(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_EqualTermDecl(_TermArg1:Strategy, _TermArg2:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl)}

  get_slot(_TermArg1, t) { _TermArg1 }
  get_slot(_TermArg2, t) { _TermArg2 }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_TermArg1,  new_TermArg2,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_EqualTermDecl( new_TermArg1,  new_TermArg2,  new_Instr,  new_OrgTrack) }
}

%op Strategy _IsSortDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsSortDecl(arg0, arg1, arg2) }
}

%op Strategy When_IsSortDecl(s:Strategy) {
  make(s) { `Sequence(_IsSortDecl(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_IsSortDecl() {
  make() { `_IsSortDecl(Identity(), Identity(), Identity()) }
}

%op Strategy Make_IsSortDecl(_TermArg:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl)}

  get_slot(_TermArg, t) { _TermArg }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_TermArg,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsSortDecl( new_TermArg,  new_Instr,  new_OrgTrack) }
}

%op Strategy _GetHeadDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetHeadDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_GetHeadDecl(s:Strategy) {
  make(s) { `Sequence(_GetHeadDecl(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetHeadDecl() {
  make() { `_GetHeadDecl(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetHeadDecl(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Codomain,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetHeadDecl( new_Opname,  new_Codomain,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy _GetTailDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetTailDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy When_GetTailDecl(s:Strategy) {
  make(s) { `Sequence(_GetTailDecl(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetTailDecl() {
  make() { `_GetTailDecl(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetTailDecl(_Opname:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetTailDecl( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy _IsEmptyDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._IsEmptyDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy When_IsEmptyDecl(s:Strategy) {
  make(s) { `Sequence(_IsEmptyDecl(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_IsEmptyDecl() {
  make() { `_IsEmptyDecl(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_IsEmptyDecl(_Opname:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_IsEmptyDecl( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy _MakeEmptyList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyList(arg0, arg1, arg2) }
}

%op Strategy When_MakeEmptyList(s:Strategy) {
  make(s) { `Sequence(_MakeEmptyList(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_MakeEmptyList() {
  make() { `_MakeEmptyList(Identity(), Identity(), Identity()) }
}

%op Strategy Make_MakeEmptyList(_AstName:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyList( new_AstName,  new_Instr,  new_OrgTrack) }
}

%op Strategy _MakeAddList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddList(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_MakeAddList(s:Strategy) {
  make(s) { `Sequence(_MakeAddList(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_MakeAddList() {
  make() { `_MakeAddList(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_MakeAddList(_AstName:Strategy, _VarElt:Strategy, _VarList:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VarElt, t) { _VarElt }
  get_slot(_VarList, t) { _VarList }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddList( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) }
}

%op Strategy _GetElementDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetElementDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_GetElementDecl(s:Strategy) {
  make(s) { `Sequence(_GetElementDecl(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetElementDecl() {
  make() { `_GetElementDecl(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetElementDecl(_Opname:Strategy, _Variable:Strategy, _Index:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Index, t) { _Index }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Index,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetElementDecl( new_Opname,  new_Variable,  new_Index,  new_Instr,  new_OrgTrack) }
}

%op Strategy _GetSizeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._GetSizeDecl(arg0, arg1, arg2, arg3) }
}

%op Strategy When_GetSizeDecl(s:Strategy) {
  make(s) { `Sequence(_GetSizeDecl(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetSizeDecl() {
  make() { `_GetSizeDecl(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetSizeDecl(_Opname:Strategy, _Variable:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_GetSizeDecl( new_Opname,  new_Variable,  new_Instr,  new_OrgTrack) }
}

%op Strategy _MakeEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeEmptyArray(arg0, arg1, arg2, arg3) }
}

%op Strategy When_MakeEmptyArray(s:Strategy) {
  make(s) { `Sequence(_MakeEmptyArray(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_MakeEmptyArray() {
  make() { `_MakeEmptyArray(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_MakeEmptyArray(_AstName:Strategy, _VarSize:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VarSize, t) { _VarSize }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_VarSize,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeEmptyArray( new_AstName,  new_VarSize,  new_Instr,  new_OrgTrack) }
}

%op Strategy _MakeAddArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeAddArray(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_MakeAddArray(s:Strategy) {
  make(s) { `Sequence(_MakeAddArray(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_MakeAddArray() {
  make() { `_MakeAddArray(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_MakeAddArray(_AstName:Strategy, _VarElt:Strategy, _VarList:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VarElt, t) { _VarElt }
  get_slot(_VarList, t) { _VarList }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeAddArray( new_AstName,  new_VarElt,  new_VarList,  new_Instr,  new_OrgTrack) }
}

%op Strategy _MakeDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MakeDecl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_MakeDecl(s:Strategy) {
  make(s) { `Sequence(_MakeDecl(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_MakeDecl() {
  make() { `_MakeDecl(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_MakeDecl(_AstName:Strategy, _AstType:Strategy, _Args:Strategy, _Instr:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Args, t) { _Args }
  get_slot(_Instr, t) { _Instr }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_AstName,  new_AstType,  new_Args,  new_Instr,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MakeDecl( new_AstName,  new_AstType,  new_Args,  new_Instr,  new_OrgTrack) }
}

%op Strategy _Strategy(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._Strategy)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Strategy(arg0, arg1, arg2, arg3) }
}

%op Strategy When_Strategy(s:Strategy) {
  make(s) { `Sequence(_Strategy(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Strategy() {
  make() { `_Strategy(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_Strategy(_SName:Strategy, _ExtendsTerm:Strategy, _VisitList:Strategy, _OrgTrack:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy)}

  get_slot(_SName, t) { _SName }
  get_slot(_ExtendsTerm, t) { _ExtendsTerm }
  get_slot(_VisitList, t) { _VisitList }
  get_slot(_OrgTrack, t) { _OrgTrack }
  make( new_SName,  new_ExtendsTerm,  new_VisitList,  new_OrgTrack) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Strategy( new_SName,  new_ExtendsTerm,  new_VisitList,  new_OrgTrack) }
}

%op Strategy _FunctionDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._FunctionDef(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_FunctionDef(s:Strategy) {
  make(s) { `Sequence(_FunctionDef(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_FunctionDef() {
  make() { `_FunctionDef(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_FunctionDef(_AstName:Strategy, _ArgumentList:Strategy, _Codomain:Strategy, _ThrowsType:Strategy, _Instruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_ArgumentList, t) { _ArgumentList }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_ThrowsType, t) { _ThrowsType }
  get_slot(_Instruction, t) { _Instruction }
  make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_FunctionDef( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) }
}

%op Strategy _MethodDef(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomdeclaration.strategy.declaration._MethodDef(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_MethodDef(s:Strategy) {
  make(s) { `Sequence(_MethodDef(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_MethodDef() {
  make() { `_MethodDef(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_MethodDef(_AstName:Strategy, _ArgumentList:Strategy, _Codomain:Strategy, _ThrowsType:Strategy, _Instruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_ArgumentList, t) { _ArgumentList }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_ThrowsType, t) { _ThrowsType }
  get_slot(_Instruction, t) { _Instruction }
  make( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_MethodDef( new_AstName,  new_ArgumentList,  new_Codomain,  new_ThrowsType,  new_Instruction) }
}

%op Strategy _Class(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._Class)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomdeclaration.strategy.declaration._Class(arg0, arg1, arg2, arg3) }
}

%op Strategy When_Class(s:Strategy) {
  make(s) { `Sequence(_Class(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Class() {
  make() { `_Class(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_Class(_AstName:Strategy, _ExtendsType:Strategy, _SuperTerm:Strategy, _Declaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_ExtendsType, t) { _ExtendsType }
  get_slot(_SuperTerm, t) { _SuperTerm }
  get_slot(_Declaration, t) { _Declaration }
  make( new_AstName,  new_ExtendsType,  new_SuperTerm,  new_Declaration) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_Class( new_AstName,  new_ExtendsType,  new_SuperTerm,  new_Declaration) }
}

%op Strategy _SymbolDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._SymbolDecl(arg0) }
}

%op Strategy When_SymbolDecl(s:Strategy) {
  make(s) { `Sequence(_SymbolDecl(Identity()),s) }
}

%op Strategy Is_SymbolDecl() {
  make() { `_SymbolDecl(Identity()) }
}

%op Strategy Make_SymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_SymbolDecl( new_AstName) }
}

%op Strategy _ListSymbolDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ListSymbolDecl(arg0) }
}

%op Strategy When_ListSymbolDecl(s:Strategy) {
  make(s) { `Sequence(_ListSymbolDecl(Identity()),s) }
}

%op Strategy Is_ListSymbolDecl() {
  make() { `_ListSymbolDecl(Identity()) }
}

%op Strategy Make_ListSymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ListSymbolDecl( new_AstName) }
}

%op Strategy _ArraySymbolDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._ArraySymbolDecl(arg0) }
}

%op Strategy When_ArraySymbolDecl(s:Strategy) {
  make(s) { `Sequence(_ArraySymbolDecl(Identity()),s) }
}

%op Strategy Is_ArraySymbolDecl() {
  make() { `_ArraySymbolDecl(Identity()) }
}

%op Strategy Make_ArraySymbolDecl(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_ArraySymbolDecl( new_AstName) }
}

%op Strategy _EmptyDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declaration._EmptyDeclaration() }
}

%op Strategy When_EmptyDeclaration(s:Strategy) {
  make(s) { `Sequence(_EmptyDeclaration(),s) }
}

%op Strategy Is_EmptyDeclaration() {
  make() { `_EmptyDeclaration() }
}

%op Strategy Make_EmptyDeclaration() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration)}

  make() { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_EmptyDeclaration() }
}

%op Strategy _AbstractDecl(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomdeclaration.strategy.declaration._AbstractDecl(arg0) }
}

%op Strategy When_AbstractDecl(s:Strategy) {
  make(s) { `Sequence(_AbstractDecl(Identity()),s) }
}

%op Strategy Is_AbstractDecl() {
  make() { `_AbstractDecl(Identity()) }
}

%op Strategy Make_AbstractDecl(_DeclList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl)}

  get_slot(_DeclList, t) { _DeclList }
  make( new_DeclList) { new tom.engine.adt.tomdeclaration.strategy.declaration.Make_AbstractDecl( new_DeclList) }
}

%op Strategy _MatchNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._MatchNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._MatchNumber(arg0) }
}

%op Strategy When_MatchNumber(s:Strategy) {
  make(s) { `Sequence(_MatchNumber(Identity()),s) }
}

%op Strategy Is_MatchNumber() {
  make() { `_MatchNumber(Identity()) }
}

%op Strategy Make_MatchNumber(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_MatchNumber( _Integer) }
}

%op Strategy _PatternNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._PatternNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._PatternNumber(arg0) }
}

%op Strategy When_PatternNumber(s:Strategy) {
  make(s) { `Sequence(_PatternNumber(Identity()),s) }
}

%op Strategy Is_PatternNumber() {
  make() { `_PatternNumber(Identity()) }
}

%op Strategy Make_PatternNumber(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_PatternNumber( _Integer) }
}

%op Strategy _ListNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._ListNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._ListNumber(arg0) }
}

%op Strategy When_ListNumber(s:Strategy) {
  make(s) { `Sequence(_ListNumber(Identity()),s) }
}

%op Strategy Is_ListNumber() {
  make() { `_ListNumber(Identity()) }
}

%op Strategy Make_ListNumber(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_ListNumber( _Integer) }
}

%op Strategy _IndexNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._IndexNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._IndexNumber(arg0) }
}

%op Strategy When_IndexNumber(s:Strategy) {
  make(s) { `Sequence(_IndexNumber(Identity()),s) }
}

%op Strategy Is_IndexNumber() {
  make() { `_IndexNumber(Identity()) }
}

%op Strategy Make_IndexNumber(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_IndexNumber( _Integer) }
}

%op Strategy _Begin(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Begin)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Begin(arg0) }
}

%op Strategy When_Begin(s:Strategy) {
  make(s) { `Sequence(_Begin(Identity()),s) }
}

%op Strategy Is_Begin() {
  make() { `_Begin(Identity()) }
}

%op Strategy Make_Begin(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Begin)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Begin( _Integer) }
}

%op Strategy _End(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._End)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._End(arg0) }
}

%op Strategy When_End(s:Strategy) {
  make(s) { `Sequence(_End(Identity()),s) }
}

%op Strategy Is_End() {
  make() { `_End(Identity()) }
}

%op Strategy Make_End(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_End)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_End( _Integer) }
}

%op Strategy _Save(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Save)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Save(arg0) }
}

%op Strategy When_Save(s:Strategy) {
  make(s) { `Sequence(_Save(Identity()),s) }
}

%op Strategy Is_Save() {
  make() { `_Save(Identity()) }
}

%op Strategy Make_Save(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Save)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Save( _Integer) }
}

%op Strategy _Position(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._Position)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._Position(arg0) }
}

%op Strategy When_Position(s:Strategy) {
  make(s) { `Sequence(_Position(Identity()),s) }
}

%op Strategy Is_Position() {
  make() { `_Position(Identity()) }
}

%op Strategy Make_Position(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_Position)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_Position( _Integer) }
}

%op Strategy _AbsVar(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._AbsVar)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._AbsVar(arg0) }
}

%op Strategy When_AbsVar(s:Strategy) {
  make(s) { `Sequence(_AbsVar(Identity()),s) }
}

%op Strategy Is_AbsVar() {
  make() { `_AbsVar(Identity()) }
}

%op Strategy Make_AbsVar(_Integer:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar)}

  get_slot(_Integer, t) { _Integer }
  make( _Integer) { new tom.engine.adt.tomname.strategy.tomnumber.Make_AbsVar( _Integer) }
}

%op Strategy _RenamedVar(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._RenamedVar)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._RenamedVar(arg0) }
}

%op Strategy When_RenamedVar(s:Strategy) {
  make(s) { `Sequence(_RenamedVar(Identity()),s) }
}

%op Strategy Is_RenamedVar() {
  make() { `_RenamedVar(Identity()) }
}

%op Strategy Make_RenamedVar(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_RenamedVar( new_AstName) }
}

%op Strategy _NameNumber(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber._NameNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomnumber._NameNumber(arg0) }
}

%op Strategy When_NameNumber(s:Strategy) {
  make(s) { `Sequence(_NameNumber(Identity()),s) }
}

%op Strategy Is_NameNumber() {
  make() { `_NameNumber(Identity()) }
}

%op Strategy Make_NameNumber(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomname.strategy.tomnumber.Make_NameNumber( new_AstName) }
}

%op Strategy _EmptyconcTomNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber)}

  make() { new tom.engine.adt.tomname.strategy.tomnumberlist._EmptyconcTomNumber() }
}

%op Strategy When_EmptyconcTomNumber(s:Strategy) {
  make(s) { `Sequence(_EmptyconcTomNumber(),s) }
}

%op Strategy Is_EmptyconcTomNumber() {
  make() { `_EmptyconcTomNumber() }
}

%op Strategy Make_EmptyconcTomNumber() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber)}

  make() { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_EmptyconcTomNumber() }
}

%op Strategy _ConsconcTomNumber(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnumberlist._ConsconcTomNumber(arg0, arg1) }
}

%op Strategy When_ConsconcTomNumber(s:Strategy) {
  make(s) { `Sequence(_ConsconcTomNumber(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcTomNumber() {
  make() { `_ConsconcTomNumber(Identity(), Identity()) }
}

%op Strategy Make_ConsconcTomNumber(_HeadconcTomNumber:Strategy, _TailconcTomNumber:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber)}

  get_slot(_HeadconcTomNumber, t) { _HeadconcTomNumber }
  get_slot(_TailconcTomNumber, t) { _TailconcTomNumber }
  make( new_HeadconcTomNumber,  new_TailconcTomNumber) { new tom.engine.adt.tomname.strategy.tomnumberlist.Make_ConsconcTomNumber( new_HeadconcTomNumber,  new_TailconcTomNumber) }
}

%op Strategy _EmptyconcTomName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName)}

  make() { new tom.engine.adt.tomname.strategy.tomnamelist._EmptyconcTomName() }
}

%op Strategy When_EmptyconcTomName(s:Strategy) {
  make(s) { `Sequence(_EmptyconcTomName(),s) }
}

%op Strategy Is_EmptyconcTomName() {
  make() { `_EmptyconcTomName() }
}

%op Strategy Make_EmptyconcTomName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName)}

  make() { new tom.engine.adt.tomname.strategy.tomnamelist.Make_EmptyconcTomName() }
}

%op Strategy _ConsconcTomName(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomname.strategy.tomnamelist._ConsconcTomName(arg0, arg1) }
}

%op Strategy When_ConsconcTomName(s:Strategy) {
  make(s) { `Sequence(_ConsconcTomName(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcTomName() {
  make() { `_ConsconcTomName(Identity(), Identity()) }
}

%op Strategy Make_ConsconcTomName(_HeadconcTomName:Strategy, _TailconcTomName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName)}

  get_slot(_HeadconcTomName, t) { _HeadconcTomName }
  get_slot(_TailconcTomName, t) { _TailconcTomName }
  make( new_HeadconcTomName,  new_TailconcTomName) { new tom.engine.adt.tomname.strategy.tomnamelist.Make_ConsconcTomName( new_HeadconcTomName,  new_TailconcTomName) }
}

%op Strategy _Name(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._Name)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomname._Name(arg0) }
}

%op Strategy When_Name(s:Strategy) {
  make(s) { `Sequence(_Name(Identity()),s) }
}

%op Strategy Is_Name() {
  make() { `_Name(Identity()) }
}

%op Strategy Make_Name(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_Name)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomname.strategy.tomname.Make_Name( _String) }
}

%op Strategy _PositionName(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._PositionName)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomname._PositionName(arg0) }
}

%op Strategy When_PositionName(s:Strategy) {
  make(s) { `Sequence(_PositionName(Identity()),s) }
}

%op Strategy Is_PositionName() {
  make() { `_PositionName(Identity()) }
}

%op Strategy Make_PositionName(_NumberList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_PositionName)}

  get_slot(_NumberList, t) { _NumberList }
  make( new_NumberList) { new tom.engine.adt.tomname.strategy.tomname.Make_PositionName( new_NumberList) }
}

%op Strategy _EmptyName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._EmptyName)}

  make() { new tom.engine.adt.tomname.strategy.tomname._EmptyName() }
}

%op Strategy When_EmptyName(s:Strategy) {
  make(s) { `Sequence(_EmptyName(),s) }
}

%op Strategy Is_EmptyName() {
  make() { `_EmptyName() }
}

%op Strategy Make_EmptyName() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_EmptyName)}

  make() { new tom.engine.adt.tomname.strategy.tomname.Make_EmptyName() }
}

%op Strategy _AntiName(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname._AntiName)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomname.strategy.tomname._AntiName(arg0) }
}

%op Strategy When_AntiName(s:Strategy) {
  make(s) { `Sequence(_AntiName(Identity()),s) }
}

%op Strategy Is_AntiName() {
  make() { `_AntiName(Identity()) }
}

%op Strategy Make_AntiName(_Name:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomname.strategy.tomname.Make_AntiName)}

  get_slot(_Name, t) { _Name }
  make( new_Name) { new tom.engine.adt.tomname.strategy.tomname.Make_AntiName( new_Name) }
}

%op Strategy _TomTermToExpression(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._TomTermToExpression(arg0) }
}

%op Strategy When_TomTermToExpression(s:Strategy) {
  make(s) { `Sequence(_TomTermToExpression(Identity()),s) }
}

%op Strategy Is_TomTermToExpression() {
  make() { `_TomTermToExpression(Identity()) }
}

%op Strategy Make_TomTermToExpression(_AstTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression)}

  get_slot(_AstTerm, t) { _AstTerm }
  make( new_AstTerm) { new tom.engine.adt.tomexpression.strategy.expression.Make_TomTermToExpression( new_AstTerm) }
}

%op Strategy _TomInstructionToExpression(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._TomInstructionToExpression)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._TomInstructionToExpression(arg0) }
}

%op Strategy When_TomInstructionToExpression(s:Strategy) {
  make(s) { `Sequence(_TomInstructionToExpression(Identity()),s) }
}

%op Strategy Is_TomInstructionToExpression() {
  make() { `_TomInstructionToExpression(Identity()) }
}

%op Strategy Make_TomInstructionToExpression(_Instruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TomInstructionToExpression)}

  get_slot(_Instruction, t) { _Instruction }
  make( new_Instruction) { new tom.engine.adt.tomexpression.strategy.expression.Make_TomInstructionToExpression( new_Instruction) }
}

%op Strategy _Bottom(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Bottom)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Bottom(arg0) }
}

%op Strategy When_Bottom(s:Strategy) {
  make(s) { `Sequence(_Bottom(Identity()),s) }
}

%op Strategy Is_Bottom() {
  make() { `_Bottom(Identity()) }
}

%op Strategy Make_Bottom(_TomType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Bottom)}

  get_slot(_TomType, t) { _TomType }
  make( new_TomType) { new tom.engine.adt.tomexpression.strategy.expression.Make_Bottom( new_TomType) }
}

%op Strategy _Negation(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Negation)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._Negation(arg0) }
}

%op Strategy When_Negation(s:Strategy) {
  make(s) { `Sequence(_Negation(Identity()),s) }
}

%op Strategy Is_Negation() {
  make() { `_Negation(Identity()) }
}

%op Strategy Make_Negation(_Arg:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Negation)}

  get_slot(_Arg, t) { _Arg }
  make( new_Arg) { new tom.engine.adt.tomexpression.strategy.expression.Make_Negation( new_Arg) }
}

%op Strategy _And(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._And)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._And(arg0, arg1) }
}

%op Strategy When_And(s:Strategy) {
  make(s) { `Sequence(_And(Identity(), Identity()),s) }
}

%op Strategy Is_And() {
  make() { `_And(Identity(), Identity()) }
}

%op Strategy Make_And(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_And)}

  get_slot(_Arg1, t) { _Arg1 }
  get_slot(_Arg2, t) { _Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_And( new_Arg1,  new_Arg2) }
}

%op Strategy _Or(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Or)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Or(arg0, arg1) }
}

%op Strategy When_Or(s:Strategy) {
  make(s) { `Sequence(_Or(Identity(), Identity()),s) }
}

%op Strategy Is_Or() {
  make() { `_Or(Identity(), Identity()) }
}

%op Strategy Make_Or(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Or)}

  get_slot(_Arg1, t) { _Arg1 }
  get_slot(_Arg2, t) { _Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_Or( new_Arg1,  new_Arg2) }
}

%op Strategy _EmptyOrExpressionDisjunction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._EmptyOrExpressionDisjunction)}

  make() { new tom.engine.adt.tomexpression.strategy.expression._EmptyOrExpressionDisjunction() }
}

%op Strategy When_EmptyOrExpressionDisjunction(s:Strategy) {
  make(s) { `Sequence(_EmptyOrExpressionDisjunction(),s) }
}

%op Strategy Is_EmptyOrExpressionDisjunction() {
  make() { `_EmptyOrExpressionDisjunction() }
}

%op Strategy Make_EmptyOrExpressionDisjunction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrExpressionDisjunction)}

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_EmptyOrExpressionDisjunction() }
}

%op Strategy _ConsOrExpressionDisjunction(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._ConsOrExpressionDisjunction(arg0, arg1) }
}

%op Strategy When_ConsOrExpressionDisjunction(s:Strategy) {
  make(s) { `Sequence(_ConsOrExpressionDisjunction(Identity(), Identity()),s) }
}

%op Strategy Is_ConsOrExpressionDisjunction() {
  make() { `_ConsOrExpressionDisjunction(Identity(), Identity()) }
}

%op Strategy Make_ConsOrExpressionDisjunction(_HeadOrExpressionDisjunction:Strategy, _TailOrExpressionDisjunction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction)}

  get_slot(_HeadOrExpressionDisjunction, t) { _HeadOrExpressionDisjunction }
  get_slot(_TailOrExpressionDisjunction, t) { _TailOrExpressionDisjunction }
  make( new_HeadOrExpressionDisjunction,  new_TailOrExpressionDisjunction) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConsOrExpressionDisjunction( new_HeadOrExpressionDisjunction,  new_TailOrExpressionDisjunction) }
}

%op Strategy _GreaterThan(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GreaterThan)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GreaterThan(arg0, arg1) }
}

%op Strategy When_GreaterThan(s:Strategy) {
  make(s) { `Sequence(_GreaterThan(Identity(), Identity()),s) }
}

%op Strategy Is_GreaterThan() {
  make() { `_GreaterThan(Identity(), Identity()) }
}

%op Strategy Make_GreaterThan(_Arg1:Strategy, _Arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan)}

  get_slot(_Arg1, t) { _Arg1 }
  get_slot(_Arg2, t) { _Arg2 }
  make( new_Arg1,  new_Arg2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GreaterThan( new_Arg1,  new_Arg2) }
}

%op Strategy _AntiMatchExpression(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._AntiMatchExpression)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._AntiMatchExpression(arg0) }
}

%op Strategy When_AntiMatchExpression(s:Strategy) {
  make(s) { `Sequence(_AntiMatchExpression(Identity()),s) }
}

%op Strategy Is_AntiMatchExpression() {
  make() { `_AntiMatchExpression(Identity()) }
}

%op Strategy Make_AntiMatchExpression(_Expression:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_AntiMatchExpression)}

  get_slot(_Expression, t) { _Expression }
  make( new_Expression) { new tom.engine.adt.tomexpression.strategy.expression.Make_AntiMatchExpression( new_Expression) }
}

%op Strategy _Conditional(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Conditional)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._Conditional(arg0, arg1, arg2) }
}

%op Strategy When_Conditional(s:Strategy) {
  make(s) { `Sequence(_Conditional(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Conditional() {
  make() { `_Conditional(Identity(), Identity(), Identity()) }
}

%op Strategy Make_Conditional(_Cond:Strategy, _Then:Strategy, _Else:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Conditional)}

  get_slot(_Cond, t) { _Cond }
  get_slot(_Then, t) { _Then }
  get_slot(_Else, t) { _Else }
  make( new_Cond,  new_Then,  new_Else) { new tom.engine.adt.tomexpression.strategy.expression.Make_Conditional( new_Cond,  new_Then,  new_Else) }
}

%op Strategy _TrueTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._TrueTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression._TrueTL() }
}

%op Strategy When_TrueTL(s:Strategy) {
  make(s) { `Sequence(_TrueTL(),s) }
}

%op Strategy Is_TrueTL() {
  make() { `_TrueTL() }
}

%op Strategy Make_TrueTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_TrueTL() }
}

%op Strategy _FalseTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._FalseTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression._FalseTL() }
}

%op Strategy When_FalseTL(s:Strategy) {
  make(s) { `Sequence(_FalseTL(),s) }
}

%op Strategy Is_FalseTL() {
  make() { `_FalseTL() }
}

%op Strategy Make_FalseTL() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL)}

  make() { new tom.engine.adt.tomexpression.strategy.expression.Make_FalseTL() }
}

%op Strategy _EqualTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._EqualTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._EqualTerm(arg0, arg1, arg2) }
}

%op Strategy When_EqualTerm(s:Strategy) {
  make(s) { `Sequence(_EqualTerm(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_EqualTerm() {
  make() { `_EqualTerm(Identity(), Identity(), Identity()) }
}

%op Strategy Make_EqualTerm(_TomType:Strategy, _Kid1:Strategy, _Kid2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm)}

  get_slot(_TomType, t) { _TomType }
  get_slot(_Kid1, t) { _Kid1 }
  get_slot(_Kid2, t) { _Kid2 }
  make( new_TomType,  new_Kid1,  new_Kid2) { new tom.engine.adt.tomexpression.strategy.expression.Make_EqualTerm( new_TomType,  new_Kid1,  new_Kid2) }
}

%op Strategy _Cast(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._Cast)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._Cast(arg0, arg1) }
}

%op Strategy When_Cast(s:Strategy) {
  make(s) { `Sequence(_Cast(Identity(), Identity()),s) }
}

%op Strategy Is_Cast() {
  make() { `_Cast(Identity(), Identity()) }
}

%op Strategy Make_Cast(_AstType:Strategy, _Source:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_Cast)}

  get_slot(_AstType, t) { _AstType }
  get_slot(_Source, t) { _Source }
  make( new_AstType,  new_Source) { new tom.engine.adt.tomexpression.strategy.expression.Make_Cast( new_AstType,  new_Source) }
}

%op Strategy _GetSlot(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSlot)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSlot(arg0, arg1, arg2, arg3) }
}

%op Strategy When_GetSlot(s:Strategy) {
  make(s) { `Sequence(_GetSlot(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetSlot() {
  make() { `_GetSlot(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetSlot(_Codomain:Strategy, _AstName:Strategy, _SlotNameString:String, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot)}

  get_slot(_Codomain, t) { _Codomain }
  get_slot(_AstName, t) { _AstName }
  get_slot(_SlotNameString, t) { _SlotNameString }
  get_slot(_Variable, t) { _Variable }
  make( new_Codomain,  new_AstName,  _SlotNameString,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSlot( new_Codomain,  new_AstName,  _SlotNameString,  new_Variable) }
}

%op Strategy _IsFsym(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsFsym)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsFsym(arg0, arg1) }
}

%op Strategy When_IsFsym(s:Strategy) {
  make(s) { `Sequence(_IsFsym(Identity(), Identity()),s) }
}

%op Strategy Is_IsFsym() {
  make() { `_IsFsym(Identity(), Identity()) }
}

%op Strategy Make_IsFsym(_AstName:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Variable, t) { _Variable }
  make( new_AstName,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsFsym( new_AstName,  new_Variable) }
}

%op Strategy _GetHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetHead)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._GetHead(arg0, arg1, arg2) }
}

%op Strategy When_GetHead(s:Strategy) {
  make(s) { `Sequence(_GetHead(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetHead() {
  make() { `_GetHead(Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetHead(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetHead)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Codomain,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetHead( new_Opname,  new_Codomain,  new_Variable) }
}

%op Strategy _GetTail(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetTail)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetTail(arg0, arg1) }
}

%op Strategy When_GetTail(s:Strategy) {
  make(s) { `Sequence(_GetTail(Identity(), Identity()),s) }
}

%op Strategy Is_GetTail() {
  make() { `_GetTail(Identity(), Identity()) }
}

%op Strategy Make_GetTail(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetTail)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetTail( new_Opname,  new_Variable) }
}

%op Strategy _IsEmptyList(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsEmptyList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyList(arg0, arg1) }
}

%op Strategy When_IsEmptyList(s:Strategy) {
  make(s) { `Sequence(_IsEmptyList(Identity(), Identity()),s) }
}

%op Strategy Is_IsEmptyList() {
  make() { `_IsEmptyList(Identity(), Identity()) }
}

%op Strategy Make_IsEmptyList(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyList( new_Opname,  new_Variable) }
}

%op Strategy _IsEmptyArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._IsEmptyArray(arg0, arg1, arg2) }
}

%op Strategy When_IsEmptyArray(s:Strategy) {
  make(s) { `Sequence(_IsEmptyArray(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_IsEmptyArray() {
  make() { `_IsEmptyArray(Identity(), Identity(), Identity()) }
}

%op Strategy Make_IsEmptyArray(_Opname:Strategy, _Variable:Strategy, _Index:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Index, t) { _Index }
  make( new_Opname,  new_Variable,  new_Index) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsEmptyArray( new_Opname,  new_Variable,  new_Index) }
}

%op Strategy _AddOne(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._AddOne)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._AddOne(arg0) }
}

%op Strategy When_AddOne(s:Strategy) {
  make(s) { `Sequence(_AddOne(Identity()),s) }
}

%op Strategy Is_AddOne() {
  make() { `_AddOne(Identity()) }
}

%op Strategy Make_AddOne(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_AddOne)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_AddOne( new_Variable) }
}

%op Strategy _GetSize(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSize)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._GetSize(arg0, arg1) }
}

%op Strategy When_GetSize(s:Strategy) {
  make(s) { `Sequence(_GetSize(Identity(), Identity()),s) }
}

%op Strategy Is_GetSize() {
  make() { `_GetSize(Identity(), Identity()) }
}

%op Strategy Make_GetSize(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSize)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSize( new_Opname,  new_Variable) }
}

%op Strategy _GetElement(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetElement)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetElement(arg0, arg1, arg2, arg3) }
}

%op Strategy When_GetElement(s:Strategy) {
  make(s) { `Sequence(_GetElement(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetElement() {
  make() { `_GetElement(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetElement(_Opname:Strategy, _Codomain:Strategy, _Kid1:Strategy, _Kid2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetElement)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_Kid1, t) { _Kid1 }
  get_slot(_Kid2, t) { _Kid2 }
  make( new_Opname,  new_Codomain,  new_Kid1,  new_Kid2) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetElement( new_Opname,  new_Codomain,  new_Kid1,  new_Kid2) }
}

%op Strategy _GetSliceList(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSliceList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceList(arg0, arg1, arg2, arg3) }
}

%op Strategy When_GetSliceList(s:Strategy) {
  make(s) { `Sequence(_GetSliceList(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetSliceList() {
  make() { `_GetSliceList(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetSliceList(_AstName:Strategy, _VariableBeginAST:Strategy, _VariableEndAST:Strategy, _Tail:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_VariableBeginAST, t) { _VariableBeginAST }
  get_slot(_VariableEndAST, t) { _VariableEndAST }
  get_slot(_Tail, t) { _Tail }
  make( new_AstName,  new_VariableBeginAST,  new_VariableEndAST,  new_Tail) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceList( new_AstName,  new_VariableBeginAST,  new_VariableEndAST,  new_Tail) }
}

%op Strategy _GetSliceArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._GetSliceArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomexpression.strategy.expression._GetSliceArray(arg0, arg1, arg2, arg3) }
}

%op Strategy When_GetSliceArray(s:Strategy) {
  make(s) { `Sequence(_GetSliceArray(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_GetSliceArray() {
  make() { `_GetSliceArray(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_GetSliceArray(_AstName:Strategy, _SubjectListName:Strategy, _VariableBeginAST:Strategy, _VariableEndAST:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_SubjectListName, t) { _SubjectListName }
  get_slot(_VariableBeginAST, t) { _VariableBeginAST }
  get_slot(_VariableEndAST, t) { _VariableEndAST }
  make( new_AstName,  new_SubjectListName,  new_VariableBeginAST,  new_VariableEndAST) { new tom.engine.adt.tomexpression.strategy.expression.Make_GetSliceArray( new_AstName,  new_SubjectListName,  new_VariableBeginAST,  new_VariableEndAST) }
}

%op Strategy _ConstraintToExpression(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._ConstraintToExpression)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomexpression.strategy.expression._ConstraintToExpression(arg0) }
}

%op Strategy When_ConstraintToExpression(s:Strategy) {
  make(s) { `Sequence(_ConstraintToExpression(Identity()),s) }
}

%op Strategy Is_ConstraintToExpression() {
  make() { `_ConstraintToExpression(Identity()) }
}

%op Strategy Make_ConstraintToExpression(_cons:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_ConstraintToExpression)}

  get_slot(_cons, t) { _cons }
  make( new_cons) { new tom.engine.adt.tomexpression.strategy.expression.Make_ConstraintToExpression( new_cons) }
}

%op Strategy _DoWhileExpression(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._DoWhileExpression(arg0, arg1) }
}

%op Strategy When_DoWhileExpression(s:Strategy) {
  make(s) { `Sequence(_DoWhileExpression(Identity(), Identity()),s) }
}

%op Strategy Is_DoWhileExpression() {
  make() { `_DoWhileExpression(Identity(), Identity()) }
}

%op Strategy Make_DoWhileExpression(_EndExpression:Strategy, _LoopCondition:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression)}

  get_slot(_EndExpression, t) { _EndExpression }
  get_slot(_LoopCondition, t) { _LoopCondition }
  make( new_EndExpression,  new_LoopCondition) { new tom.engine.adt.tomexpression.strategy.expression.Make_DoWhileExpression( new_EndExpression,  new_LoopCondition) }
}

%op Strategy _IfExpression(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IfExpression)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomexpression.strategy.expression._IfExpression(arg0, arg1, arg2) }
}

%op Strategy When_IfExpression(s:Strategy) {
  make(s) { `Sequence(_IfExpression(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_IfExpression() {
  make() { `_IfExpression(Identity(), Identity(), Identity()) }
}

%op Strategy Make_IfExpression(_Condition:Strategy, _ThenExpression:Strategy, _ElseExpression:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression)}

  get_slot(_Condition, t) { _Condition }
  get_slot(_ThenExpression, t) { _ThenExpression }
  get_slot(_ElseExpression, t) { _ElseExpression }
  make( new_Condition,  new_ThenExpression,  new_ElseExpression) { new tom.engine.adt.tomexpression.strategy.expression.Make_IfExpression( new_Condition,  new_ThenExpression,  new_ElseExpression) }
}

%op Strategy _IsSort(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression._IsSort)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomexpression.strategy.expression._IsSort(arg0, arg1) }
}

%op Strategy When_IsSort(s:Strategy) {
  make(s) { `Sequence(_IsSort(Identity(), Identity()),s) }
}

%op Strategy Is_IsSort() {
  make() { `_IsSort(Identity(), Identity()) }
}

%op Strategy Make_IsSort(_AstType:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomexpression.strategy.expression.Make_IsSort)}

  get_slot(_AstType, t) { _AstType }
  get_slot(_Variable, t) { _Variable }
  make( new_AstType,  new_Variable) { new tom.engine.adt.tomexpression.strategy.expression.Make_IsSort( new_AstType,  new_Variable) }
}

%op Strategy _EmptyconcPatternInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist._EmptyconcPatternInstruction)}

  make() { new tom.engine.adt.tomterm.strategy.patterninstructionlist._EmptyconcPatternInstruction() }
}

%op Strategy When_EmptyconcPatternInstruction(s:Strategy) {
  make(s) { `Sequence(_EmptyconcPatternInstruction(),s) }
}

%op Strategy Is_EmptyconcPatternInstruction() {
  make() { `_EmptyconcPatternInstruction() }
}

%op Strategy Make_EmptyconcPatternInstruction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_EmptyconcPatternInstruction)}

  make() { new tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_EmptyconcPatternInstruction() }
}

%op Strategy _ConsconcPatternInstruction(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist._ConsconcPatternInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.patterninstructionlist._ConsconcPatternInstruction(arg0, arg1) }
}

%op Strategy When_ConsconcPatternInstruction(s:Strategy) {
  make(s) { `Sequence(_ConsconcPatternInstruction(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcPatternInstruction() {
  make() { `_ConsconcPatternInstruction(Identity(), Identity()) }
}

%op Strategy Make_ConsconcPatternInstruction(_HeadconcPatternInstruction:Strategy, _TailconcPatternInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_ConsconcPatternInstruction)}

  get_slot(_HeadconcPatternInstruction, t) { _HeadconcPatternInstruction }
  get_slot(_TailconcPatternInstruction, t) { _TailconcPatternInstruction }
  make( new_HeadconcPatternInstruction,  new_TailconcPatternInstruction) { new tom.engine.adt.tomterm.strategy.patterninstructionlist.Make_ConsconcPatternInstruction( new_HeadconcPatternInstruction,  new_TailconcPatternInstruction) }
}

%op Strategy _PatternInstruction(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstruction._PatternInstruction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.patterninstruction._PatternInstruction(arg0, arg1, arg2) }
}

%op Strategy When_PatternInstruction(s:Strategy) {
  make(s) { `Sequence(_PatternInstruction(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_PatternInstruction() {
  make() { `_PatternInstruction(Identity(), Identity(), Identity()) }
}

%op Strategy Make_PatternInstruction(_Pattern:Strategy, _Action:Strategy, _Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patterninstruction.Make_PatternInstruction)}

  get_slot(_Pattern, t) { _Pattern }
  get_slot(_Action, t) { _Action }
  get_slot(_Option, t) { _Option }
  make( new_Pattern,  new_Action,  new_Option) { new tom.engine.adt.tomterm.strategy.patterninstruction.Make_PatternInstruction( new_Pattern,  new_Action,  new_Option) }
}

%op Strategy _Pattern(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.pattern._Pattern)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.pattern._Pattern(arg0, arg1, arg2) }
}

%op Strategy When_Pattern(s:Strategy) {
  make(s) { `Sequence(_Pattern(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Pattern() {
  make() { `_Pattern(Identity(), Identity(), Identity()) }
}

%op Strategy Make_Pattern(_SubjectList:Strategy, _TomList:Strategy, _Guards:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.pattern.Make_Pattern)}

  get_slot(_SubjectList, t) { _SubjectList }
  get_slot(_TomList, t) { _TomList }
  get_slot(_Guards, t) { _Guards }
  make( new_SubjectList,  new_TomList,  new_Guards) { new tom.engine.adt.tomterm.strategy.pattern.Make_Pattern( new_SubjectList,  new_TomList,  new_Guards) }
}

%op Strategy _EmptyconcTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm)}

  make() { new tom.engine.adt.tomterm.strategy.tomlist._EmptyconcTomTerm() }
}

%op Strategy When_EmptyconcTomTerm(s:Strategy) {
  make(s) { `Sequence(_EmptyconcTomTerm(),s) }
}

%op Strategy Is_EmptyconcTomTerm() {
  make() { `_EmptyconcTomTerm() }
}

%op Strategy Make_EmptyconcTomTerm() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm)}

  make() { new tom.engine.adt.tomterm.strategy.tomlist.Make_EmptyconcTomTerm() }
}

%op Strategy _ConsconcTomTerm(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomlist._ConsconcTomTerm(arg0, arg1) }
}

%op Strategy When_ConsconcTomTerm(s:Strategy) {
  make(s) { `Sequence(_ConsconcTomTerm(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcTomTerm() {
  make() { `_ConsconcTomTerm(Identity(), Identity()) }
}

%op Strategy Make_ConsconcTomTerm(_HeadconcTomTerm:Strategy, _TailconcTomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm)}

  get_slot(_HeadconcTomTerm, t) { _HeadconcTomTerm }
  get_slot(_TailconcTomTerm, t) { _TailconcTomTerm }
  make( new_HeadconcTomTerm,  new_TailconcTomTerm) { new tom.engine.adt.tomterm.strategy.tomlist.Make_ConsconcTomTerm( new_HeadconcTomTerm,  new_TailconcTomTerm) }
}

%op Strategy _TermAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TermAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._TermAppl(arg0, arg1, arg2, arg3) }
}

%op Strategy When_TermAppl(s:Strategy) {
  make(s) { `Sequence(_TermAppl(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_TermAppl() {
  make() { `_TermAppl(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_TermAppl(_Option:Strategy, _NameList:Strategy, _Args:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_NameList, t) { _NameList }
  get_slot(_Args, t) { _Args }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_NameList,  new_Args,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TermAppl( new_Option,  new_NameList,  new_Args,  new_Constraints) }
}

%op Strategy _RecordAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._RecordAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._RecordAppl(arg0, arg1, arg2, arg3) }
}

%op Strategy When_RecordAppl(s:Strategy) {
  make(s) { `Sequence(_RecordAppl(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_RecordAppl() {
  make() { `_RecordAppl(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_RecordAppl(_Option:Strategy, _NameList:Strategy, _Slots:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_NameList, t) { _NameList }
  get_slot(_Slots, t) { _Slots }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_NameList,  new_Slots,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_RecordAppl( new_Option,  new_NameList,  new_Slots,  new_Constraints) }
}

%op Strategy _XMLAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._XMLAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  get_slot(arg4, t) { t.getArgument(4) }
  make(arg0, arg1, arg2, arg3, arg4) { new tom.engine.adt.tomterm.strategy.tomterm._XMLAppl(arg0, arg1, arg2, arg3, arg4) }
}

%op Strategy When_XMLAppl(s:Strategy) {
  make(s) { `Sequence(_XMLAppl(Identity(), Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_XMLAppl() {
  make() { `_XMLAppl(Identity(), Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_XMLAppl(_Option:Strategy, _NameList:Strategy, _AttrList:Strategy, _ChildList:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_NameList, t) { _NameList }
  get_slot(_AttrList, t) { _AttrList }
  get_slot(_ChildList, t) { _ChildList }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_NameList,  new_AttrList,  new_ChildList,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_XMLAppl( new_Option,  new_NameList,  new_AttrList,  new_ChildList,  new_Constraints) }
}

%op Strategy _Variable(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Variable)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Variable(arg0, arg1, arg2, arg3) }
}

%op Strategy When_Variable(s:Strategy) {
  make(s) { `Sequence(_Variable(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Variable() {
  make() { `_Variable(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_Variable(_Option:Strategy, _AstName:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Variable)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstName, t) { _AstName }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Variable( new_Option,  new_AstName,  new_AstType,  new_Constraints) }
}

%op Strategy _VariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._VariableStar)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._VariableStar(arg0, arg1, arg2, arg3) }
}

%op Strategy When_VariableStar(s:Strategy) {
  make(s) { `Sequence(_VariableStar(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_VariableStar() {
  make() { `_VariableStar(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_VariableStar(_Option:Strategy, _AstName:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstName, t) { _AstName }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstName,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableStar( new_Option,  new_AstName,  new_AstType,  new_Constraints) }
}

%op Strategy _UnamedVariable(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariable(arg0, arg1, arg2) }
}

%op Strategy When_UnamedVariable(s:Strategy) {
  make(s) { `Sequence(_UnamedVariable(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_UnamedVariable() {
  make() { `_UnamedVariable(Identity(), Identity(), Identity()) }
}

%op Strategy Make_UnamedVariable(_Option:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariable( new_Option,  new_AstType,  new_Constraints) }
}

%op Strategy _UnamedVariableStar(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._UnamedVariableStar(arg0, arg1, arg2) }
}

%op Strategy When_UnamedVariableStar(s:Strategy) {
  make(s) { `Sequence(_UnamedVariableStar(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_UnamedVariableStar() {
  make() { `_UnamedVariableStar(Identity(), Identity(), Identity()) }
}

%op Strategy Make_UnamedVariableStar(_Option:Strategy, _AstType:Strategy, _Constraints:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Constraints, t) { _Constraints }
  make( new_Option,  new_AstType,  new_Constraints) { new tom.engine.adt.tomterm.strategy.tomterm.Make_UnamedVariableStar( new_Option,  new_AstType,  new_Constraints) }
}

%op Strategy _VariableHeadList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._VariableHeadList(arg0, arg1, arg2) }
}

%op Strategy When_VariableHeadList(s:Strategy) {
  make(s) { `Sequence(_VariableHeadList(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_VariableHeadList() {
  make() { `_VariableHeadList(Identity(), Identity(), Identity()) }
}

%op Strategy Make_VariableHeadList(_Opname:Strategy, _Begin:Strategy, _End:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Begin, t) { _Begin }
  get_slot(_End, t) { _End }
  make( new_Opname,  new_Begin,  new_End) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadList( new_Opname,  new_Begin,  new_End) }
}

%op Strategy _VariableHeadArray(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._VariableHeadArray(arg0, arg1, arg2, arg3) }
}

%op Strategy When_VariableHeadArray(s:Strategy) {
  make(s) { `Sequence(_VariableHeadArray(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_VariableHeadArray() {
  make() { `_VariableHeadArray(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_VariableHeadArray(_Opname:Strategy, _Subject:Strategy, _BeginIndex:Strategy, _EndIndex:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Subject, t) { _Subject }
  get_slot(_BeginIndex, t) { _BeginIndex }
  get_slot(_EndIndex, t) { _EndIndex }
  make( new_Opname,  new_Subject,  new_BeginIndex,  new_EndIndex) { new tom.engine.adt.tomterm.strategy.tomterm.Make_VariableHeadArray( new_Opname,  new_Subject,  new_BeginIndex,  new_EndIndex) }
}

%op Strategy _TestVar(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TestVar)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TestVar(arg0) }
}

%op Strategy When_TestVar(s:Strategy) {
  make(s) { `Sequence(_TestVar(Identity()),s) }
}

%op Strategy Is_TestVar() {
  make() { `_TestVar(Identity()) }
}

%op Strategy Make_TestVar(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TestVar)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TestVar( new_Variable) }
}

%op Strategy _ListHead(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ListHead)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._ListHead(arg0, arg1, arg2) }
}

%op Strategy When_ListHead(s:Strategy) {
  make(s) { `Sequence(_ListHead(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_ListHead() {
  make() { `_ListHead(Identity(), Identity(), Identity()) }
}

%op Strategy Make_ListHead(_Opname:Strategy, _Codomain:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Codomain, t) { _Codomain }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Codomain,  new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ListHead( new_Opname,  new_Codomain,  new_Variable) }
}

%op Strategy _ListTail(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ListTail)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._ListTail(arg0, arg1) }
}

%op Strategy When_ListTail(s:Strategy) {
  make(s) { `Sequence(_ListTail(Identity(), Identity()),s) }
}

%op Strategy Is_ListTail() {
  make() { `_ListTail(Identity(), Identity()) }
}

%op Strategy Make_ListTail(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ListTail( new_Opname,  new_Variable) }
}

%op Strategy _TargetLanguageToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TargetLanguageToTomTerm(arg0) }
}

%op Strategy When_TargetLanguageToTomTerm(s:Strategy) {
  make(s) { `Sequence(_TargetLanguageToTomTerm(Identity()),s) }
}

%op Strategy Is_TargetLanguageToTomTerm() {
  make() { `_TargetLanguageToTomTerm(Identity()) }
}

%op Strategy Make_TargetLanguageToTomTerm(_Tl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm)}

  get_slot(_Tl, t) { _Tl }
  make( new_Tl) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TargetLanguageToTomTerm( new_Tl) }
}

%op Strategy _TomTypeToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomTypeToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomTypeToTomTerm(arg0) }
}

%op Strategy When_TomTypeToTomTerm(s:Strategy) {
  make(s) { `Sequence(_TomTypeToTomTerm(Identity()),s) }
}

%op Strategy Is_TomTypeToTomTerm() {
  make() { `_TomTypeToTomTerm(Identity()) }
}

%op Strategy Make_TomTypeToTomTerm(_AstType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomTypeToTomTerm)}

  get_slot(_AstType, t) { _AstType }
  make( new_AstType) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomTypeToTomTerm( new_AstType) }
}

%op Strategy _TomNameToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomNameToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomNameToTomTerm(arg0) }
}

%op Strategy When_TomNameToTomTerm(s:Strategy) {
  make(s) { `Sequence(_TomNameToTomTerm(Identity()),s) }
}

%op Strategy Is_TomNameToTomTerm() {
  make() { `_TomNameToTomTerm(Identity()) }
}

%op Strategy Make_TomNameToTomTerm(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomNameToTomTerm)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomNameToTomTerm( new_AstName) }
}

%op Strategy _TomSymbolToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomSymbolToTomTerm(arg0) }
}

%op Strategy When_TomSymbolToTomTerm(s:Strategy) {
  make(s) { `Sequence(_TomSymbolToTomTerm(Identity()),s) }
}

%op Strategy Is_TomSymbolToTomTerm() {
  make() { `_TomSymbolToTomTerm(Identity()) }
}

%op Strategy Make_TomSymbolToTomTerm(_AstSymbol:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm)}

  get_slot(_AstSymbol, t) { _AstSymbol }
  make( new_AstSymbol) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomSymbolToTomTerm( new_AstSymbol) }
}

%op Strategy _DeclarationToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._DeclarationToTomTerm(arg0) }
}

%op Strategy When_DeclarationToTomTerm(s:Strategy) {
  make(s) { `Sequence(_DeclarationToTomTerm(Identity()),s) }
}

%op Strategy Is_DeclarationToTomTerm() {
  make() { `_DeclarationToTomTerm(Identity()) }
}

%op Strategy Make_DeclarationToTomTerm(_AstDeclaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm)}

  get_slot(_AstDeclaration, t) { _AstDeclaration }
  make( new_AstDeclaration) { new tom.engine.adt.tomterm.strategy.tomterm.Make_DeclarationToTomTerm( new_AstDeclaration) }
}

%op Strategy _OptionToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._OptionToTomTerm(arg0) }
}

%op Strategy When_OptionToTomTerm(s:Strategy) {
  make(s) { `Sequence(_OptionToTomTerm(Identity()),s) }
}

%op Strategy Is_OptionToTomTerm() {
  make() { `_OptionToTomTerm(Identity()) }
}

%op Strategy Make_OptionToTomTerm(_Option:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm)}

  get_slot(_Option, t) { _Option }
  make( new_Option) { new tom.engine.adt.tomterm.strategy.tomterm.Make_OptionToTomTerm( new_Option) }
}

%op Strategy _ExpressionToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._ExpressionToTomTerm(arg0) }
}

%op Strategy When_ExpressionToTomTerm(s:Strategy) {
  make(s) { `Sequence(_ExpressionToTomTerm(Identity()),s) }
}

%op Strategy Is_ExpressionToTomTerm() {
  make() { `_ExpressionToTomTerm(Identity()) }
}

%op Strategy Make_ExpressionToTomTerm(_AstExpression:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm)}

  get_slot(_AstExpression, t) { _AstExpression }
  make( new_AstExpression) { new tom.engine.adt.tomterm.strategy.tomterm.Make_ExpressionToTomTerm( new_AstExpression) }
}

%op Strategy _InstructionToTomTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._InstructionToTomTerm(arg0) }
}

%op Strategy When_InstructionToTomTerm(s:Strategy) {
  make(s) { `Sequence(_InstructionToTomTerm(Identity()),s) }
}

%op Strategy Is_InstructionToTomTerm() {
  make() { `_InstructionToTomTerm(Identity()) }
}

%op Strategy Make_InstructionToTomTerm(_AstInstruction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm)}

  get_slot(_AstInstruction, t) { _AstInstruction }
  make( new_AstInstruction) { new tom.engine.adt.tomterm.strategy.tomterm.Make_InstructionToTomTerm( new_AstInstruction) }
}

%op Strategy _Tom(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Tom)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Tom(arg0) }
}

%op Strategy When_Tom(s:Strategy) {
  make(s) { `Sequence(_Tom(Identity()),s) }
}

%op Strategy Is_Tom() {
  make() { `_Tom(Identity()) }
}

%op Strategy Make_Tom(_TomList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Tom)}

  get_slot(_TomList, t) { _TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Tom( new_TomList) }
}

%op Strategy _TomInclude(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._TomInclude)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._TomInclude(arg0) }
}

%op Strategy When_TomInclude(s:Strategy) {
  make(s) { `Sequence(_TomInclude(Identity()),s) }
}

%op Strategy Is_TomInclude() {
  make() { `_TomInclude(Identity()) }
}

%op Strategy Make_TomInclude(_TomList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude)}

  get_slot(_TomList, t) { _TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_TomInclude( new_TomList) }
}

%op Strategy _BackQuoteAppl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BackQuoteAppl(arg0, arg1, arg2) }
}

%op Strategy When_BackQuoteAppl(s:Strategy) {
  make(s) { `Sequence(_BackQuoteAppl(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_BackQuoteAppl() {
  make() { `_BackQuoteAppl(Identity(), Identity(), Identity()) }
}

%op Strategy Make_BackQuoteAppl(_Option:Strategy, _AstName:Strategy, _Args:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl)}

  get_slot(_Option, t) { _Option }
  get_slot(_AstName, t) { _AstName }
  get_slot(_Args, t) { _Args }
  make( new_Option,  new_AstName,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BackQuoteAppl( new_Option,  new_AstName,  new_Args) }
}

%op Strategy _Composite(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Composite)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Composite(arg0) }
}

%op Strategy When_Composite(s:Strategy) {
  make(s) { `Sequence(_Composite(Identity()),s) }
}

%op Strategy Is_Composite() {
  make() { `_Composite(Identity()) }
}

%op Strategy Make_Composite(_Args:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Composite)}

  get_slot(_Args, t) { _Args }
  make( new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Composite( new_Args) }
}

%op Strategy _SubjectList(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._SubjectList)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._SubjectList(arg0) }
}

%op Strategy When_SubjectList(s:Strategy) {
  make(s) { `Sequence(_SubjectList(Identity()),s) }
}

%op Strategy Is_SubjectList() {
  make() { `_SubjectList(Identity()) }
}

%op Strategy Make_SubjectList(_TomList:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_SubjectList)}

  get_slot(_TomList, t) { _TomList }
  make( new_TomList) { new tom.engine.adt.tomterm.strategy.tomterm.Make_SubjectList( new_TomList) }
}

%op Strategy _Term(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Term)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Term(arg0) }
}

%op Strategy When_Term(s:Strategy) {
  make(s) { `Sequence(_Term(Identity()),s) }
}

%op Strategy Is_Term() {
  make() { `_Term(Identity()) }
}

%op Strategy Make_Term(_TomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Term)}

  get_slot(_TomTerm, t) { _TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Term( new_TomTerm) }
}

%op Strategy _AntiTerm(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._AntiTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._AntiTerm(arg0) }
}

%op Strategy When_AntiTerm(s:Strategy) {
  make(s) { `Sequence(_AntiTerm(Identity()),s) }
}

%op Strategy Is_AntiTerm() {
  make() { `_AntiTerm(Identity()) }
}

%op Strategy Make_AntiTerm(_TomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm)}

  get_slot(_TomTerm, t) { _TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_AntiTerm( new_TomTerm) }
}

%op Strategy _Subterm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Subterm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._Subterm(arg0, arg1, arg2) }
}

%op Strategy When_Subterm(s:Strategy) {
  make(s) { `Sequence(_Subterm(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Subterm() {
  make() { `_Subterm(Identity(), Identity(), Identity()) }
}

%op Strategy Make_Subterm(_AstName:Strategy, _SlotName:Strategy, _GroundTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_SlotName, t) { _SlotName }
  get_slot(_GroundTerm, t) { _GroundTerm }
  make( new_AstName,  new_SlotName,  new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Subterm( new_AstName,  new_SlotName,  new_GroundTerm) }
}

%op Strategy _SymbolOf(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._SymbolOf)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._SymbolOf(arg0) }
}

%op Strategy When_SymbolOf(s:Strategy) {
  make(s) { `Sequence(_SymbolOf(Identity()),s) }
}

%op Strategy Is_SymbolOf() {
  make() { `_SymbolOf(Identity()) }
}

%op Strategy Make_SymbolOf(_GroundTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf)}

  get_slot(_GroundTerm, t) { _GroundTerm }
  make( new_GroundTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_SymbolOf( new_GroundTerm) }
}

%op Strategy _Ref(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Ref)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._Ref(arg0) }
}

%op Strategy When_Ref(s:Strategy) {
  make(s) { `Sequence(_Ref(Identity()),s) }
}

%op Strategy Is_Ref() {
  make() { `_Ref(Identity()) }
}

%op Strategy Make_Ref(_TomTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Ref)}

  get_slot(_TomTerm, t) { _TomTerm }
  make( new_TomTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Ref( new_TomTerm) }
}

%op Strategy _Automata(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._Automata)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  get_slot(arg3, t) { t.getArgument(3) }
  make(arg0, arg1, arg2, arg3) { new tom.engine.adt.tomterm.strategy.tomterm._Automata(arg0, arg1, arg2, arg3) }
}

%op Strategy When_Automata(s:Strategy) {
  make(s) { `Sequence(_Automata(Identity(), Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_Automata() {
  make() { `_Automata(Identity(), Identity(), Identity(), Identity()) }
}

%op Strategy Make_Automata(_Option:Strategy, _PatternList:Strategy, _NumberList:Strategy, _Inst:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_Automata)}

  get_slot(_Option, t) { _Option }
  get_slot(_PatternList, t) { _PatternList }
  get_slot(_NumberList, t) { _NumberList }
  get_slot(_Inst, t) { _Inst }
  make( new_Option,  new_PatternList,  new_NumberList,  new_Inst) { new tom.engine.adt.tomterm.strategy.tomterm.Make_Automata( new_Option,  new_PatternList,  new_NumberList,  new_Inst) }
}

%op Strategy _BuildReducedTerm(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._BuildReducedTerm(arg0, arg1) }
}

%op Strategy When_BuildReducedTerm(s:Strategy) {
  make(s) { `Sequence(_BuildReducedTerm(Identity(), Identity()),s) }
}

%op Strategy Is_BuildReducedTerm() {
  make() { `_BuildReducedTerm(Identity(), Identity()) }
}

%op Strategy Make_BuildReducedTerm(_TomTerm:Strategy, _AstType:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm)}

  get_slot(_TomTerm, t) { _TomTerm }
  get_slot(_AstType, t) { _AstType }
  make( new_TomTerm,  new_AstType) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildReducedTerm( new_TomTerm,  new_AstType) }
}

%op Strategy _FunctionCall(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._FunctionCall)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._FunctionCall(arg0, arg1, arg2) }
}

%op Strategy When_FunctionCall(s:Strategy) {
  make(s) { `Sequence(_FunctionCall(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_FunctionCall() {
  make() { `_FunctionCall(Identity(), Identity(), Identity()) }
}

%op Strategy Make_FunctionCall(_AstName:Strategy, _AstType:Strategy, _Args:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_AstType, t) { _AstType }
  get_slot(_Args, t) { _Args }
  make( new_AstName,  new_AstType,  new_Args) { new tom.engine.adt.tomterm.strategy.tomterm.Make_FunctionCall( new_AstName,  new_AstType,  new_Args) }
}

%op Strategy _BuildConstant(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConstant)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConstant(arg0) }
}

%op Strategy When_BuildConstant(s:Strategy) {
  make(s) { `Sequence(_BuildConstant(Identity()),s) }
}

%op Strategy Is_BuildConstant() {
  make() { `_BuildConstant(Identity()) }
}

%op Strategy Make_BuildConstant(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConstant( new_AstName) }
}

%op Strategy _BuildTerm(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildTerm)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildTerm(arg0, arg1, arg2) }
}

%op Strategy When_BuildTerm(s:Strategy) {
  make(s) { `Sequence(_BuildTerm(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_BuildTerm() {
  make() { `_BuildTerm(Identity(), Identity(), Identity()) }
}

%op Strategy Make_BuildTerm(_AstName:Strategy, _Args:Strategy, _ModuleName:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Args, t) { _Args }
  get_slot(_ModuleName, t) { _ModuleName }
  make( new_AstName,  new_Args,  _ModuleName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildTerm( new_AstName,  new_Args,  _ModuleName) }
}

%op Strategy _BuildEmptyList(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyList(arg0) }
}

%op Strategy When_BuildEmptyList(s:Strategy) {
  make(s) { `Sequence(_BuildEmptyList(Identity()),s) }
}

%op Strategy Is_BuildEmptyList() {
  make() { `_BuildEmptyList(Identity()) }
}

%op Strategy Make_BuildEmptyList(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyList( new_AstName) }
}

%op Strategy _BuildConsList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConsList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsList(arg0, arg1, arg2) }
}

%op Strategy When_BuildConsList(s:Strategy) {
  make(s) { `Sequence(_BuildConsList(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_BuildConsList() {
  make() { `_BuildConsList(Identity(), Identity(), Identity()) }
}

%op Strategy Make_BuildConsList(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsList( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy _BuildAppendList(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendList(arg0, arg1, arg2) }
}

%op Strategy When_BuildAppendList(s:Strategy) {
  make(s) { `Sequence(_BuildAppendList(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_BuildAppendList() {
  make() { `_BuildAppendList(Identity(), Identity(), Identity()) }
}

%op Strategy Make_BuildAppendList(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendList( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy _BuildEmptyArray(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.tomterm._BuildEmptyArray(arg0, arg1) }
}

%op Strategy When_BuildEmptyArray(s:Strategy) {
  make(s) { `Sequence(_BuildEmptyArray(Identity(), Identity()),s) }
}

%op Strategy Is_BuildEmptyArray() {
  make() { `_BuildEmptyArray(Identity(), Identity()) }
}

%op Strategy Make_BuildEmptyArray(_AstName:Strategy, _Size:int) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Size, t) { _Size }
  make( new_AstName,  _Size) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildEmptyArray( new_AstName,  _Size) }
}

%op Strategy _BuildConsArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildConsArray(arg0, arg1, arg2) }
}

%op Strategy When_BuildConsArray(s:Strategy) {
  make(s) { `Sequence(_BuildConsArray(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_BuildConsArray() {
  make() { `_BuildConsArray(Identity(), Identity(), Identity()) }
}

%op Strategy Make_BuildConsArray(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildConsArray( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy _BuildAppendArray(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomterm.strategy.tomterm._BuildAppendArray(arg0, arg1, arg2) }
}

%op Strategy When_BuildAppendArray(s:Strategy) {
  make(s) { `Sequence(_BuildAppendArray(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_BuildAppendArray() {
  make() { `_BuildAppendArray(Identity(), Identity(), Identity()) }
}

%op Strategy Make_BuildAppendArray(_AstName:Strategy, _HeadTerm:Strategy, _TailTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_HeadTerm, t) { _HeadTerm }
  get_slot(_TailTerm, t) { _TailTerm }
  make( new_AstName,  new_HeadTerm,  new_TailTerm) { new tom.engine.adt.tomterm.strategy.tomterm.Make_BuildAppendArray( new_AstName,  new_HeadTerm,  new_TailTerm) }
}

%op Strategy _EmptyconcPattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist._EmptyconcPattern)}

  make() { new tom.engine.adt.tomterm.strategy.patternlist._EmptyconcPattern() }
}

%op Strategy When_EmptyconcPattern(s:Strategy) {
  make(s) { `Sequence(_EmptyconcPattern(),s) }
}

%op Strategy Is_EmptyconcPattern() {
  make() { `_EmptyconcPattern() }
}

%op Strategy Make_EmptyconcPattern() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist.Make_EmptyconcPattern)}

  make() { new tom.engine.adt.tomterm.strategy.patternlist.Make_EmptyconcPattern() }
}

%op Strategy _ConsconcPattern(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist._ConsconcPattern)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomterm.strategy.patternlist._ConsconcPattern(arg0, arg1) }
}

%op Strategy When_ConsconcPattern(s:Strategy) {
  make(s) { `Sequence(_ConsconcPattern(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcPattern() {
  make() { `_ConsconcPattern(Identity(), Identity()) }
}

%op Strategy Make_ConsconcPattern(_HeadconcPattern:Strategy, _TailconcPattern:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomterm.strategy.patternlist.Make_ConsconcPattern)}

  get_slot(_HeadconcPattern, t) { _HeadconcPattern }
  get_slot(_TailconcPattern, t) { _TailconcPattern }
  make( new_HeadconcPattern,  new_TailconcPattern) { new tom.engine.adt.tomterm.strategy.patternlist.Make_ConsconcPattern( new_HeadconcPattern,  new_TailconcPattern) }
}

%op Strategy _DeclarationToOption(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._DeclarationToOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._DeclarationToOption(arg0) }
}

%op Strategy When_DeclarationToOption(s:Strategy) {
  make(s) { `Sequence(_DeclarationToOption(Identity()),s) }
}

%op Strategy Is_DeclarationToOption() {
  make() { `_DeclarationToOption(Identity()) }
}

%op Strategy Make_DeclarationToOption(_AstDeclaration:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption)}

  get_slot(_AstDeclaration, t) { _AstDeclaration }
  make( new_AstDeclaration) { new tom.engine.adt.tomoption.strategy.option.Make_DeclarationToOption( new_AstDeclaration) }
}

%op Strategy _TomNameToOption(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._TomNameToOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomNameToOption(arg0) }
}

%op Strategy When_TomNameToOption(s:Strategy) {
  make(s) { `Sequence(_TomNameToOption(Identity()),s) }
}

%op Strategy Is_TomNameToOption() {
  make() { `_TomNameToOption(Identity()) }
}

%op Strategy Make_TomNameToOption(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_TomNameToOption( new_AstName) }
}

%op Strategy _TomTermToOption(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._TomTermToOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._TomTermToOption(arg0) }
}

%op Strategy When_TomTermToOption(s:Strategy) {
  make(s) { `Sequence(_TomTermToOption(Identity()),s) }
}

%op Strategy Is_TomTermToOption() {
  make() { `_TomTermToOption(Identity()) }
}

%op Strategy Make_TomTermToOption(_AstTerm:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption)}

  get_slot(_AstTerm, t) { _AstTerm }
  make( new_AstTerm) { new tom.engine.adt.tomoption.strategy.option.Make_TomTermToOption( new_AstTerm) }
}

%op Strategy _DefinedSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._DefinedSymbol)}

  make() { new tom.engine.adt.tomoption.strategy.option._DefinedSymbol() }
}

%op Strategy When_DefinedSymbol(s:Strategy) {
  make(s) { `Sequence(_DefinedSymbol(),s) }
}

%op Strategy Is_DefinedSymbol() {
  make() { `_DefinedSymbol() }
}

%op Strategy Make_DefinedSymbol() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_DefinedSymbol() }
}

%op Strategy _GeneratedMatch() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._GeneratedMatch)}

  make() { new tom.engine.adt.tomoption.strategy.option._GeneratedMatch() }
}

%op Strategy When_GeneratedMatch(s:Strategy) {
  make(s) { `Sequence(_GeneratedMatch(),s) }
}

%op Strategy Is_GeneratedMatch() {
  make() { `_GeneratedMatch() }
}

%op Strategy Make_GeneratedMatch() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_GeneratedMatch() }
}

%op Strategy _OriginTracking(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._OriginTracking)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomoption.strategy.option._OriginTracking(arg0, arg1, arg2) }
}

%op Strategy When_OriginTracking(s:Strategy) {
  make(s) { `Sequence(_OriginTracking(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_OriginTracking() {
  make() { `_OriginTracking(Identity(), Identity(), Identity()) }
}

%op Strategy Make_OriginTracking(_AstName:Strategy, _Line:int, _FileName:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_OriginTracking)}

  get_slot(_AstName, t) { _AstName }
  get_slot(_Line, t) { _Line }
  get_slot(_FileName, t) { _FileName }
  make( new_AstName,  _Line,  _FileName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginTracking( new_AstName,  _Line,  _FileName) }
}

%op Strategy _OriginalText(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._OriginalText)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._OriginalText(arg0) }
}

%op Strategy When_OriginalText(s:Strategy) {
  make(s) { `Sequence(_OriginalText(Identity()),s) }
}

%op Strategy Is_OriginalText() {
  make() { `_OriginalText(Identity()) }
}

%op Strategy Make_OriginalText(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_OriginalText)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_OriginalText( new_AstName) }
}

%op Strategy _Constant() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._Constant)}

  make() { new tom.engine.adt.tomoption.strategy.option._Constant() }
}

%op Strategy When_Constant(s:Strategy) {
  make(s) { `Sequence(_Constant(),s) }
}

%op Strategy Is_Constant() {
  make() { `_Constant() }
}

%op Strategy Make_Constant() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Constant)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_Constant() }
}

%op Strategy _MatchingTheory(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._MatchingTheory)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._MatchingTheory(arg0) }
}

%op Strategy When_MatchingTheory(s:Strategy) {
  make(s) { `Sequence(_MatchingTheory(Identity()),s) }
}

%op Strategy Is_MatchingTheory() {
  make() { `_MatchingTheory(Identity()) }
}

%op Strategy Make_MatchingTheory(_Theory:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_MatchingTheory)}

  get_slot(_Theory, t) { _Theory }
  make( new_Theory) { new tom.engine.adt.tomoption.strategy.option.Make_MatchingTheory( new_Theory) }
}

%op Strategy _Label(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._Label)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._Label(arg0) }
}

%op Strategy When_Label(s:Strategy) {
  make(s) { `Sequence(_Label(Identity()),s) }
}

%op Strategy Is_Label() {
  make() { `_Label(Identity()) }
}

%op Strategy Make_Label(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Label)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Label( new_AstName) }
}

%op Strategy _Debug(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._Debug)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._Debug(arg0) }
}

%op Strategy When_Debug(s:Strategy) {
  make(s) { `Sequence(_Debug(Identity()),s) }
}

%op Strategy Is_Debug() {
  make() { `_Debug(Identity()) }
}

%op Strategy Make_Debug(_AstName:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_Debug)}

  get_slot(_AstName, t) { _AstName }
  make( new_AstName) { new tom.engine.adt.tomoption.strategy.option.Make_Debug( new_AstName) }
}

%op Strategy _ModuleName(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._ModuleName)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomoption.strategy.option._ModuleName(arg0) }
}

%op Strategy When_ModuleName(s:Strategy) {
  make(s) { `Sequence(_ModuleName(Identity()),s) }
}

%op Strategy Is_ModuleName() {
  make() { `_ModuleName(Identity()) }
}

%op Strategy Make_ModuleName(_String:String) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ModuleName)}

  get_slot(_String, t) { _String }
  make( _String) { new tom.engine.adt.tomoption.strategy.option.Make_ModuleName( _String) }
}

%op Strategy _ImplicitXMLAttribut() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut)}

  make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLAttribut() }
}

%op Strategy When_ImplicitXMLAttribut(s:Strategy) {
  make(s) { `Sequence(_ImplicitXMLAttribut(),s) }
}

%op Strategy Is_ImplicitXMLAttribut() {
  make() { `_ImplicitXMLAttribut() }
}

%op Strategy Make_ImplicitXMLAttribut() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLAttribut() }
}

%op Strategy _ImplicitXMLChild() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild)}

  make() { new tom.engine.adt.tomoption.strategy.option._ImplicitXMLChild() }
}

%op Strategy When_ImplicitXMLChild(s:Strategy) {
  make(s) { `Sequence(_ImplicitXMLChild(),s) }
}

%op Strategy Is_ImplicitXMLChild() {
  make() { `_ImplicitXMLChild() }
}

%op Strategy Make_ImplicitXMLChild() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_ImplicitXMLChild() }
}

%op Strategy _noOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option._noOption)}

  make() { new tom.engine.adt.tomoption.strategy.option._noOption() }
}

%op Strategy When_noOption(s:Strategy) {
  make(s) { `Sequence(_noOption(),s) }
}

%op Strategy Is_noOption() {
  make() { `_noOption() }
}

%op Strategy Make_noOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.option.Make_noOption)}

  make() { new tom.engine.adt.tomoption.strategy.option.Make_noOption() }
}

%op Strategy _EmptyconcOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption)}

  make() { new tom.engine.adt.tomoption.strategy.optionlist._EmptyconcOption() }
}

%op Strategy When_EmptyconcOption(s:Strategy) {
  make(s) { `Sequence(_EmptyconcOption(),s) }
}

%op Strategy Is_EmptyconcOption() {
  make() { `_EmptyconcOption() }
}

%op Strategy Make_EmptyconcOption() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption)}

  make() { new tom.engine.adt.tomoption.strategy.optionlist.Make_EmptyconcOption() }
}

%op Strategy _ConsconcOption(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomoption.strategy.optionlist._ConsconcOption(arg0, arg1) }
}

%op Strategy When_ConsconcOption(s:Strategy) {
  make(s) { `Sequence(_ConsconcOption(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcOption() {
  make() { `_ConsconcOption(Identity(), Identity()) }
}

%op Strategy Make_ConsconcOption(_HeadconcOption:Strategy, _TailconcOption:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption)}

  get_slot(_HeadconcOption, t) { _HeadconcOption }
  get_slot(_TailconcOption, t) { _TailconcOption }
  make( new_HeadconcOption,  new_TailconcOption) { new tom.engine.adt.tomoption.strategy.optionlist.Make_ConsconcOption( new_HeadconcOption,  new_TailconcOption) }
}

%op Strategy _AssignTo(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AssignTo)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AssignTo(arg0) }
}

%op Strategy When_AssignTo(s:Strategy) {
  make(s) { `Sequence(_AssignTo(Identity()),s) }
}

%op Strategy Is_AssignTo() {
  make() { `_AssignTo(Identity()) }
}

%op Strategy Make_AssignTo(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignTo( new_Variable) }
}

%op Strategy _AssignPositionTo(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AssignPositionTo)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AssignPositionTo(arg0) }
}

%op Strategy When_AssignPositionTo(s:Strategy) {
  make(s) { `Sequence(_AssignPositionTo(Identity()),s) }
}

%op Strategy Is_AssignPositionTo() {
  make() { `_AssignPositionTo(Identity()) }
}

%op Strategy Make_AssignPositionTo(_Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignPositionTo)}

  get_slot(_Variable, t) { _Variable }
  make( new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AssignPositionTo( new_Variable) }
}

%op Strategy _TrueConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint._TrueConstraint() }
}

%op Strategy When_TrueConstraint(s:Strategy) {
  make(s) { `Sequence(_TrueConstraint(),s) }
}

%op Strategy Is_TrueConstraint() {
  make() { `_TrueConstraint() }
}

%op Strategy Make_TrueConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_TrueConstraint() }
}

%op Strategy _FalseConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint._FalseConstraint() }
}

%op Strategy When_FalseConstraint(s:Strategy) {
  make(s) { `Sequence(_FalseConstraint(),s) }
}

%op Strategy Is_FalseConstraint() {
  make() { `_FalseConstraint() }
}

%op Strategy Make_FalseConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_FalseConstraint() }
}

%op Strategy _Negate(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._Negate)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._Negate(arg0) }
}

%op Strategy When_Negate(s:Strategy) {
  make(s) { `Sequence(_Negate(Identity()),s) }
}

%op Strategy Is_Negate() {
  make() { `_Negate(Identity()) }
}

%op Strategy Make_Negate(_c:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_Negate)}

  get_slot(_c, t) { _c }
  make( new_c) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_Negate( new_c) }
}

%op Strategy _EmptyAndConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyAndConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyAndConstraint() }
}

%op Strategy When_EmptyAndConstraint(s:Strategy) {
  make(s) { `Sequence(_EmptyAndConstraint(),s) }
}

%op Strategy Is_EmptyAndConstraint() {
  make() { `_EmptyAndConstraint() }
}

%op Strategy Make_EmptyAndConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyAndConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyAndConstraint() }
}

%op Strategy _ConsAndConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsAndConstraint(arg0, arg1) }
}

%op Strategy When_ConsAndConstraint(s:Strategy) {
  make(s) { `Sequence(_ConsAndConstraint(Identity(), Identity()),s) }
}

%op Strategy Is_ConsAndConstraint() {
  make() { `_ConsAndConstraint(Identity(), Identity()) }
}

%op Strategy Make_ConsAndConstraint(_HeadAndConstraint:Strategy, _TailAndConstraint:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint)}

  get_slot(_HeadAndConstraint, t) { _HeadAndConstraint }
  get_slot(_TailAndConstraint, t) { _TailAndConstraint }
  make( new_HeadAndConstraint,  new_TailAndConstraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsAndConstraint( new_HeadAndConstraint,  new_TailAndConstraint) }
}

%op Strategy _EmptyOrConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraint() }
}

%op Strategy When_EmptyOrConstraint(s:Strategy) {
  make(s) { `Sequence(_EmptyOrConstraint(),s) }
}

%op Strategy Is_EmptyOrConstraint() {
  make() { `_EmptyOrConstraint() }
}

%op Strategy Make_EmptyOrConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraint() }
}

%op Strategy _ConsOrConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraint(arg0, arg1) }
}

%op Strategy When_ConsOrConstraint(s:Strategy) {
  make(s) { `Sequence(_ConsOrConstraint(Identity(), Identity()),s) }
}

%op Strategy Is_ConsOrConstraint() {
  make() { `_ConsOrConstraint(Identity(), Identity()) }
}

%op Strategy Make_ConsOrConstraint(_HeadOrConstraint:Strategy, _TailOrConstraint:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint)}

  get_slot(_HeadOrConstraint, t) { _HeadOrConstraint }
  get_slot(_TailOrConstraint, t) { _TailOrConstraint }
  make( new_HeadOrConstraint,  new_TailOrConstraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraint( new_HeadOrConstraint,  new_TailOrConstraint) }
}

%op Strategy _EmptyOrConstraintDisjunction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraintDisjunction)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyOrConstraintDisjunction() }
}

%op Strategy When_EmptyOrConstraintDisjunction(s:Strategy) {
  make(s) { `Sequence(_EmptyOrConstraintDisjunction(),s) }
}

%op Strategy Is_EmptyOrConstraintDisjunction() {
  make() { `_EmptyOrConstraintDisjunction() }
}

%op Strategy Make_EmptyOrConstraintDisjunction() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraintDisjunction)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyOrConstraintDisjunction() }
}

%op Strategy _ConsOrConstraintDisjunction(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._ConsOrConstraintDisjunction(arg0, arg1) }
}

%op Strategy When_ConsOrConstraintDisjunction(s:Strategy) {
  make(s) { `Sequence(_ConsOrConstraintDisjunction(Identity(), Identity()),s) }
}

%op Strategy Is_ConsOrConstraintDisjunction() {
  make() { `_ConsOrConstraintDisjunction(Identity(), Identity()) }
}

%op Strategy Make_ConsOrConstraintDisjunction(_HeadOrConstraintDisjunction:Strategy, _TailOrConstraintDisjunction:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction)}

  get_slot(_HeadOrConstraintDisjunction, t) { _HeadOrConstraintDisjunction }
  get_slot(_TailOrConstraintDisjunction, t) { _TailOrConstraintDisjunction }
  make( new_HeadOrConstraintDisjunction,  new_TailOrConstraintDisjunction) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_ConsOrConstraintDisjunction( new_HeadOrConstraintDisjunction,  new_TailOrConstraintDisjunction) }
}

%op Strategy _MatchConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._MatchConstraint(arg0, arg1) }
}

%op Strategy When_MatchConstraint(s:Strategy) {
  make(s) { `Sequence(_MatchConstraint(Identity(), Identity()),s) }
}

%op Strategy Is_MatchConstraint() {
  make() { `_MatchConstraint(Identity(), Identity()) }
}

%op Strategy Make_MatchConstraint(_pattern:Strategy, _subject:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint)}

  get_slot(_pattern, t) { _pattern }
  get_slot(_subject, t) { _subject }
  make( new_pattern,  new_subject) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_MatchConstraint( new_pattern,  new_subject) }
}

%op Strategy _AntiMatchConstraint(arg0:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._AntiMatchConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  make(arg0) { new tom.engine.adt.tomconstraint.strategy.constraint._AntiMatchConstraint(arg0) }
}

%op Strategy When_AntiMatchConstraint(s:Strategy) {
  make(s) { `Sequence(_AntiMatchConstraint(Identity()),s) }
}

%op Strategy Is_AntiMatchConstraint() {
  make() { `_AntiMatchConstraint(Identity()) }
}

%op Strategy Make_AntiMatchConstraint(_Constraint:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_AntiMatchConstraint)}

  get_slot(_Constraint, t) { _Constraint }
  make( new_Constraint) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_AntiMatchConstraint( new_Constraint) }
}

%op Strategy _EmptyListConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyListConstraint(arg0, arg1) }
}

%op Strategy When_EmptyListConstraint(s:Strategy) {
  make(s) { `Sequence(_EmptyListConstraint(Identity(), Identity()),s) }
}

%op Strategy Is_EmptyListConstraint() {
  make() { `_EmptyListConstraint(Identity(), Identity()) }
}

%op Strategy Make_EmptyListConstraint(_Opname:Strategy, _Variable:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  make( new_Opname,  new_Variable) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyListConstraint( new_Opname,  new_Variable) }
}

%op Strategy _EmptyArrayConstraint(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  get_slot(arg2, t) { t.getArgument(2) }
  make(arg0, arg1, arg2) { new tom.engine.adt.tomconstraint.strategy.constraint._EmptyArrayConstraint(arg0, arg1, arg2) }
}

%op Strategy When_EmptyArrayConstraint(s:Strategy) {
  make(s) { `Sequence(_EmptyArrayConstraint(Identity(), Identity(), Identity()),s) }
}

%op Strategy Is_EmptyArrayConstraint() {
  make() { `_EmptyArrayConstraint(Identity(), Identity(), Identity()) }
}

%op Strategy Make_EmptyArrayConstraint(_Opname:Strategy, _Variable:Strategy, _Index:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint)}

  get_slot(_Opname, t) { _Opname }
  get_slot(_Variable, t) { _Variable }
  get_slot(_Index, t) { _Index }
  make( new_Opname,  new_Variable,  new_Index) { new tom.engine.adt.tomconstraint.strategy.constraint.Make_EmptyArrayConstraint( new_Opname,  new_Variable,  new_Index) }
}

%op Strategy _EmptyconcConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraintlist._EmptyconcConstraint() }
}

%op Strategy When_EmptyconcConstraint(s:Strategy) {
  make(s) { `Sequence(_EmptyconcConstraint(),s) }
}

%op Strategy Is_EmptyconcConstraint() {
  make() { `_EmptyconcConstraint() }
}

%op Strategy Make_EmptyconcConstraint() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint)}

  make() { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_EmptyconcConstraint() }
}

%op Strategy _ConsconcConstraint(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomconstraint.strategy.constraintlist._ConsconcConstraint(arg0, arg1) }
}

%op Strategy When_ConsconcConstraint(s:Strategy) {
  make(s) { `Sequence(_ConsconcConstraint(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcConstraint() {
  make() { `_ConsconcConstraint(Identity(), Identity()) }
}

%op Strategy Make_ConsconcConstraint(_HeadconcConstraint:Strategy, _TailconcConstraint:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint)}

  get_slot(_HeadconcConstraint, t) { _HeadconcConstraint }
  get_slot(_TailconcConstraint, t) { _TailconcConstraint }
  make( new_HeadconcConstraint,  new_TailconcConstraint) { new tom.engine.adt.tomconstraint.strategy.constraintlist.Make_ConsconcConstraint( new_HeadconcConstraint,  new_TailconcConstraint) }
}

%op Strategy _PairNameDecl(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecl._PairNameDecl(arg0, arg1) }
}

%op Strategy When_PairNameDecl(s:Strategy) {
  make(s) { `Sequence(_PairNameDecl(Identity(), Identity()),s) }
}

%op Strategy Is_PairNameDecl() {
  make() { `_PairNameDecl(Identity(), Identity()) }
}

%op Strategy Make_PairNameDecl(_SlotName:Strategy, _SlotDecl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl)}

  get_slot(_SlotName, t) { _SlotName }
  get_slot(_SlotDecl, t) { _SlotDecl }
  make( new_SlotName,  new_SlotDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecl.Make_PairNameDecl( new_SlotName,  new_SlotDecl) }
}

%op Strategy _EmptyconcPairNameDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl)}

  make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist._EmptyconcPairNameDecl() }
}

%op Strategy When_EmptyconcPairNameDecl(s:Strategy) {
  make(s) { `Sequence(_EmptyconcPairNameDecl(),s) }
}

%op Strategy Is_EmptyconcPairNameDecl() {
  make() { `_EmptyconcPairNameDecl() }
}

%op Strategy Make_EmptyconcPairNameDecl() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl)}

  make() { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_EmptyconcPairNameDecl() }
}

%op Strategy _ConsconcPairNameDecl(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.pairnamedecllist._ConsconcPairNameDecl(arg0, arg1) }
}

%op Strategy When_ConsconcPairNameDecl(s:Strategy) {
  make(s) { `Sequence(_ConsconcPairNameDecl(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcPairNameDecl() {
  make() { `_ConsconcPairNameDecl(Identity(), Identity()) }
}

%op Strategy Make_ConsconcPairNameDecl(_HeadconcPairNameDecl:Strategy, _TailconcPairNameDecl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl)}

  get_slot(_HeadconcPairNameDecl, t) { _HeadconcPairNameDecl }
  get_slot(_TailconcPairNameDecl, t) { _TailconcPairNameDecl }
  make( new_HeadconcPairNameDecl,  new_TailconcPairNameDecl) { new tom.engine.adt.tomslot.strategy.pairnamedecllist.Make_ConsconcPairNameDecl( new_HeadconcPairNameDecl,  new_TailconcPairNameDecl) }
}

%op Strategy _EmptyconcSlot() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot)}

  make() { new tom.engine.adt.tomslot.strategy.slotlist._EmptyconcSlot() }
}

%op Strategy When_EmptyconcSlot(s:Strategy) {
  make(s) { `Sequence(_EmptyconcSlot(),s) }
}

%op Strategy Is_EmptyconcSlot() {
  make() { `_EmptyconcSlot() }
}

%op Strategy Make_EmptyconcSlot() {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot)}

  make() { new tom.engine.adt.tomslot.strategy.slotlist.Make_EmptyconcSlot() }
}

%op Strategy _ConsconcSlot(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slotlist._ConsconcSlot(arg0, arg1) }
}

%op Strategy When_ConsconcSlot(s:Strategy) {
  make(s) { `Sequence(_ConsconcSlot(Identity(), Identity()),s) }
}

%op Strategy Is_ConsconcSlot() {
  make() { `_ConsconcSlot(Identity(), Identity()) }
}

%op Strategy Make_ConsconcSlot(_HeadconcSlot:Strategy, _TailconcSlot:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot)}

  get_slot(_HeadconcSlot, t) { _HeadconcSlot }
  get_slot(_TailconcSlot, t) { _TailconcSlot }
  make( new_HeadconcSlot,  new_TailconcSlot) { new tom.engine.adt.tomslot.strategy.slotlist.Make_ConsconcSlot( new_HeadconcSlot,  new_TailconcSlot) }
}

%op Strategy _PairSlotAppl(arg0:Strategy, arg1:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slot._PairSlotAppl)}

  get_slot(arg0, t) { t.getArgument(0) }
  get_slot(arg1, t) { t.getArgument(1) }
  make(arg0, arg1) { new tom.engine.adt.tomslot.strategy.slot._PairSlotAppl(arg0, arg1) }
}

%op Strategy When_PairSlotAppl(s:Strategy) {
  make(s) { `Sequence(_PairSlotAppl(Identity(), Identity()),s) }
}

%op Strategy Is_PairSlotAppl() {
  make() { `_PairSlotAppl(Identity(), Identity()) }
}

%op Strategy Make_PairSlotAppl(_SlotName:Strategy, _Appl:Strategy) {
  is_fsym(t) { (t!=null) && t instanceof (tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl)}

  get_slot(_SlotName, t) { _SlotName }
  get_slot(_Appl, t) { _Appl }
  make( new_SlotName,  new_Appl) { new tom.engine.adt.tomslot.strategy.slot.Make_PairSlotAppl( new_SlotName,  new_Appl) }
}

            %op Strategy _concInstruction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcInstruction(sub,MuVar("x")),_EmptyconcInstruction())) }
            }
            
            %op Strategy _concTomType(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomType(sub,MuVar("x")),_EmptyconcTomType())) }
            }
            
            %op Strategy _concTomSymbol(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomSymbol(sub,MuVar("x")),_EmptyconcTomSymbol())) }
            }
            
            %op Strategy _concTomEntry(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomEntry(sub,MuVar("x")),_EmptyconcTomEntry())) }
            }
            
            %op Strategy _concTomVisit(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomVisit(sub,MuVar("x")),_EmptyconcTomVisit())) }
            }
            
            %op Strategy _concElementaryTheory(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcElementaryTheory(sub,MuVar("x")),_EmptyconcElementaryTheory())) }
            }
            
            %op Strategy _concDeclaration(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcDeclaration(sub,MuVar("x")),_EmptyconcDeclaration())) }
            }
            
            %op Strategy _concTomNumber(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomNumber(sub,MuVar("x")),_EmptyconcTomNumber())) }
            }
            
            %op Strategy _concTomName(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomName(sub,MuVar("x")),_EmptyconcTomName())) }
            }
            
            %op Strategy _OrExpressionDisjunction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsOrExpressionDisjunction(sub,MuVar("x")),_EmptyOrExpressionDisjunction())) }
            }
            
            %op Strategy _concPatternInstruction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcPatternInstruction(sub,MuVar("x")),_EmptyconcPatternInstruction())) }
            }
            
            %op Strategy _concTomTerm(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcTomTerm(sub,MuVar("x")),_EmptyconcTomTerm())) }
            }
            
            %op Strategy _concPattern(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcPattern(sub,MuVar("x")),_EmptyconcPattern())) }
            }
            
            %op Strategy _concOption(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcOption(sub,MuVar("x")),_EmptyconcOption())) }
            }
            
            %op Strategy _AndConstraint(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsAndConstraint(sub,MuVar("x")),_EmptyAndConstraint())) }
            }
            
            %op Strategy _OrConstraint(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsOrConstraint(sub,MuVar("x")),_EmptyOrConstraint())) }
            }
            
            %op Strategy _OrConstraintDisjunction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsOrConstraintDisjunction(sub,MuVar("x")),_EmptyOrConstraintDisjunction())) }
            }
            
            %op Strategy _concConstraint(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcConstraint(sub,MuVar("x")),_EmptyconcConstraint())) }
            }
            
            %op Strategy _concPairNameDecl(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcPairNameDecl(sub,MuVar("x")),_EmptyconcPairNameDecl())) }
            }
            
            %op Strategy _concSlot(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x"),Choice(_ConsconcSlot(sub,MuVar("x")),_EmptyconcSlot())) }
            }
            