%include { string.tom }
%include { int.tom }
%include { double.tom }
%include { aterm.tom }
%include { atermlist.tom }
%typeterm TomNumberList{
  implement { tom.engine.adt.tomsignature.types.TomNumberList}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomNumberList)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%oplist TomNumberList concTomNumber(TomNumber*) {
  is_fsym(t) {(t!= null) && t.isSortTomNumberList()}
  make_empty() {tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList()}
  make_insert(e,l) {tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(e,l)}
  get_head(l) {l.getHead()}
  get_tail(l) {l.getTail()}
  is_empty(l) {l.isEmpty()}
}
%op TomNumberList emptyTomNumberList() {
  is_fsym(t) { (t!= null) && t.isEmpty()}
  make() {tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList()}
}
%op TomNumberList manyTomNumberList(head:TomNumber, tail:TomNumberList) {
  is_fsym(t) { (t!= null) && t.isMany()}
  get_slot(head,t) { t.getHead()}
  get_slot(tail,t) { t.getTail()}
  make(e,l) {tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumberList(e,l)}
}
%typeterm TomNumber{
  implement { tom.engine.adt.tomsignature.types.TomNumber}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomNumber)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomNumber RuleVar() {
  is_fsym(t) { (t!= null) && t.isRuleVar()}
  make() { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_RuleVar()}
}

%op TomNumber NameNumber(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isNameNumber()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_NameNumber(t0)}
}

%op TomNumber RenamedVar(astName:TomName) {
  is_fsym(t) { (t!= null) && t.isRenamedVar()}
  get_slot(astName,t) { t.getAstName()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_RenamedVar(t0)}
}

%op TomNumber AbsVar(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isAbsVar()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_AbsVar(t0)}
}

%op TomNumber Number(integer:int) {
  is_fsym(t) { (t!= null) && t.isNumber()}
  get_slot(integer,t) { t.getInteger()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_Number(t0)}
}

%op TomNumber End(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isEnd()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_End(t0)}
}

%op TomNumber Begin(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isBegin()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_Begin(t0)}
}

%op TomNumber IndexNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isIndexNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_IndexNumber(t0)}
}

%op TomNumber ListNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isListNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_ListNumber(t0)}
}

%op TomNumber PatternNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isPatternNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_PatternNumber(t0)}
}

%op TomNumber MatchNumber(number:TomNumber) {
  is_fsym(t) { (t!= null) && t.isMatchNumber()}
  get_slot(number,t) { t.getNumber()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomNumber_MatchNumber(t0)}
}

%typeterm TomName{
  implement { tom.engine.adt.tomsignature.types.TomName}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.engine.adt.tomsignature.types.TomName)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op TomName EmptyName() {
  is_fsym(t) { (t!= null) && t.isEmptyName()}
  make() { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_EmptyName()}
}

%op TomName PositionName(numberList:TomNumberList) {
  is_fsym(t) { (t!= null) && t.isPositionName()}
  get_slot(numberList,t) { t.getNumberList()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_PositionName(t0)}
}

%op TomName Name(string:String) {
  is_fsym(t) { (t!= null) && t.isName()}
  get_slot(string,t) { t.getString()}
  make(t0) { tom.engine.adt.tomsignature.TomNameFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeTomName_Name(t0)}
}

