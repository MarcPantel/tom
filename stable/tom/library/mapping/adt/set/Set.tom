%include { string.tom }
%include { int.tom }
%include { double.tom }
%include { aterm.tom }
%include { atermlist.tom }
%typeterm JGTreeSet{
  implement { tom.library.adt.set.types.JGTreeSet}
  equals(t1,t2) {t1.equals(t2)}
  check_stamp(t) {if(t.getAnnotation(aterm.pure.SingletonFactory.getInstance().makeList()) == aterm.pure.SingletonFactory.getInstance().makeList())  return; else throw new RuntimeException("bad stamp")}
  set_stamp(t) {(tom.library.adt.set.types.JGTreeSet)t.setAnnotation(aterm.pure.SingletonFactory.getInstance().makeList(),aterm.pure.SingletonFactory.getInstance().makeList())}
  get_implementation(t) {t}
}

%op JGTreeSet branch(left:JGTreeSet, right:JGTreeSet) {
  is_fsym(t) { (t!= null) && t.isBranch()}
  get_slot(left,t) { t.getLeft()}
  get_slot(right,t) { t.getRight()}
  make(t0, t1) { tom.library.adt.set.SetFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeJGTreeSet_Branch(t0, t1)}
}

%op JGTreeSet pair(value:ATerm, multiplicity:int) {
  is_fsym(t) { (t!= null) && t.isPair()}
  get_slot(value,t) { t.getValue()}
  get_slot(multiplicity,t) { t.getMultiplicity()}
  make(t0, t1) { tom.library.adt.set.SetFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeJGTreeSet_Pair(t0, t1)}
}

%op JGTreeSet singleton(value:ATerm) {
  is_fsym(t) { (t!= null) && t.isSingleton()}
  get_slot(value,t) { t.getValue()}
  make(t0) { tom.library.adt.set.SetFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeJGTreeSet_Singleton(t0)}
}

%op JGTreeSet emptySet {
  is_fsym(t) { (t!= null) && t.isEmptySet()}
  make() { tom.library.adt.set.SetFactory.getInstance(aterm.pure.SingletonFactory.getInstance()).makeJGTreeSet_EmptySet()}
}

