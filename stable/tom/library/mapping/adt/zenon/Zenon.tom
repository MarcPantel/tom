
%include { string.tom }
%include { int.tom }
%include { long.tom }
%include { float.tom }
%include { double.tom }
%include { aterm.tom }
%include { atermlist.tom }

%typeterm ZType {
  implement { tom.engine.adt.zenon.types.ZType }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}


%typeterm ZExpr {
  implement { tom.engine.adt.zenon.types.ZExpr }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}


%typeterm ZAxiom {
  implement { tom.engine.adt.zenon.types.ZAxiom }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}


%typeterm ZTerm {
  implement { tom.engine.adt.zenon.types.ZTerm }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}


%typeterm ZAxiomList {
  implement { tom.engine.adt.zenon.types.ZAxiomList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}


%typeterm ZSpec {
  implement { tom.engine.adt.zenon.types.ZSpec }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}


%typeterm ZSymbol {
  implement { tom.engine.adt.zenon.types.ZSymbol }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}


%typeterm ZTermList {
  implement { tom.engine.adt.zenon.types.ZTermList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.zenon.ZenonBasicStrategy }
}

%op ZType ztype(Tname:String) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.ztype.ztype }
  get_slot(Tname, t) { t.getTname() }
  make(t0) { tom.engine.adt.zenon.types.ztype.ztype.make(t0)}
}

%op ZExpr ztrue() {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.ztrue }
  make() { tom.engine.adt.zenon.types.zexpr.ztrue.make()}
}

%op ZExpr zfalse() {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zfalse }
  make() { tom.engine.adt.zenon.types.zexpr.zfalse.make()}
}

%op ZExpr zisfsym(T:ZTerm, Symbol:ZSymbol) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zisfsym }
  get_slot(T, t) { t.getT() }
  get_slot(Symbol, t) { t.getSymbol() }
  make(t0, t1) { tom.engine.adt.zenon.types.zexpr.zisfsym.make(t0, t1)}
}

%op ZExpr zeq(Lt:ZTerm, Rt:ZTerm) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zeq }
  get_slot(Lt, t) { t.getLt() }
  get_slot(Rt, t) { t.getRt() }
  make(t0, t1) { tom.engine.adt.zenon.types.zexpr.zeq.make(t0, t1)}
}

%op ZExpr zforall(Var:ZTerm, Aztype:ZType, Expr:ZExpr) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zforall }
  get_slot(Var, t) { t.getVar() }
  get_slot(Aztype, t) { t.getAztype() }
  get_slot(Expr, t) { t.getExpr() }
  make(t0, t1, t2) { tom.engine.adt.zenon.types.zexpr.zforall.make(t0, t1, t2)}
}

%op ZExpr zexists(Var:ZTerm, Aztype:ZType, Expr:ZExpr) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zexists }
  get_slot(Var, t) { t.getVar() }
  get_slot(Aztype, t) { t.getAztype() }
  get_slot(Expr, t) { t.getExpr() }
  make(t0, t1, t2) { tom.engine.adt.zenon.types.zexpr.zexists.make(t0, t1, t2)}
}

%op ZExpr zand(Lte:ZExpr, Rte:ZExpr) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zand }
  get_slot(Lte, t) { t.getLte() }
  get_slot(Rte, t) { t.getRte() }
  make(t0, t1) { tom.engine.adt.zenon.types.zexpr.zand.make(t0, t1)}
}

%op ZExpr zor(Lte:ZExpr, Rte:ZExpr) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zor }
  get_slot(Lte, t) { t.getLte() }
  get_slot(Rte, t) { t.getRte() }
  make(t0, t1) { tom.engine.adt.zenon.types.zexpr.zor.make(t0, t1)}
}

%op ZExpr znot(Nex:ZExpr) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.znot }
  get_slot(Nex, t) { t.getNex() }
  make(t0) { tom.engine.adt.zenon.types.zexpr.znot.make(t0)}
}

%op ZExpr zequiv(Lte:ZExpr, Rte:ZExpr) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zexpr.zequiv }
  get_slot(Lte, t) { t.getLte() }
  get_slot(Rte, t) { t.getRte() }
  make(t0, t1) { tom.engine.adt.zenon.types.zexpr.zequiv.make(t0, t1)}
}

%op ZAxiom zaxiom(Name:String, Ax:ZExpr) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zaxiom.zaxiom }
  get_slot(Name, t) { t.getName() }
  get_slot(Ax, t) { t.getAx() }
  make(t0, t1) { tom.engine.adt.zenon.types.zaxiom.zaxiom.make(t0, t1)}
}

%op ZTerm zvar(Varname:String) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zterm.zvar }
  get_slot(Varname, t) { t.getVarname() }
  make(t0) { tom.engine.adt.zenon.types.zterm.zvar.make(t0)}
}

%op ZTerm zappl(Zsymb:ZSymbol, Termlist:ZTermList) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zterm.zappl }
  get_slot(Zsymb, t) { t.getZsymb() }
  get_slot(Termlist, t) { t.getTermlist() }
  make(t0, t1) { tom.engine.adt.zenon.types.zterm.zappl.make(t0, t1)}
}

%op ZTerm zst(Abst:ZTerm, Index:int) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zterm.zst }
  get_slot(Abst, t) { t.getAbst() }
  get_slot(Index, t) { t.getIndex() }
  make(t0, t1) { tom.engine.adt.zenon.types.zterm.zst.make(t0, t1)}
}

%op ZTerm zsl(Abst:ZTerm, Name:String) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zterm.zsl }
  get_slot(Abst, t) { t.getAbst() }
  get_slot(Name, t) { t.getName() }
  make(t0, t1) { tom.engine.adt.zenon.types.zterm.zsl.make(t0, t1)}
}

%op ZAxiomList Emptyzby() {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zaxiomlist.Emptyzby }
  make() { tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make()}
}

%op ZAxiomList Conszby(Headzby:ZAxiom, Tailzby:ZAxiomList) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zaxiomlist.Conszby }
  get_slot(Headzby, t) { t.getHeadzby() }
  get_slot(Tailzby, t) { t.getTailzby() }
  make(t0, t1) { tom.engine.adt.zenon.types.zaxiomlist.Conszby.make(t0, t1)}
}

%op ZSpec zthm(Thm:ZExpr, By:ZAxiomList) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zspec.zthm }
  get_slot(Thm, t) { t.getThm() }
  get_slot(By, t) { t.getBy() }
  make(t0, t1) { tom.engine.adt.zenon.types.zspec.zthm.make(t0, t1)}
}

%op ZSymbol zsymbol(Name:String) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zsymbol.zsymbol }
  get_slot(Name, t) { t.getName() }
  make(t0) { tom.engine.adt.zenon.types.zsymbol.zsymbol.make(t0)}
}

%op ZTermList EmptyconcZTerm() {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm }
  make() { tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm.make()}
}

%op ZTermList ConsconcZTerm(HeadconcZTerm:ZTerm, TailconcZTerm:ZTermList) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm }
  get_slot(HeadconcZTerm, t) { t.getHeadconcZTerm() }
  get_slot(TailconcZTerm, t) { t.getTailconcZTerm() }
  make(t0, t1) { tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm.make(t0, t1)}
}


%oplist ZAxiomList zby(ZAxiom*) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.zaxiomlist.Conszby || t instanceof tom.engine.adt.zenon.types.zaxiomlist.Emptyzby }
  make_empty() { tom.engine.adt.zenon.types.zaxiomlist.Emptyzby.make() }
  make_insert(e,l) { tom.engine.adt.zenon.types.zaxiomlist.Conszby.make(e,l) }
  get_head(l) { l.getHeadzby() }
  get_tail(l) { l.getTailzby() }
  is_empty(l) { l.isEmptyzby() }
}

%oplist ZTermList concZTerm(ZTerm*) {
  is_fsym(t) { t instanceof tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm || t instanceof tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm }
  make_empty() { tom.engine.adt.zenon.types.ztermlist.EmptyconcZTerm.make() }
  make_insert(e,l) { tom.engine.adt.zenon.types.ztermlist.ConsconcZTerm.make(e,l) }
  get_head(l) { l.getHeadconcZTerm() }
  get_tail(l) { l.getTailconcZTerm() }
  is_empty(l) { l.isEmptyconcZTerm() }
}
