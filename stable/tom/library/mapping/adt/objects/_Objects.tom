
    %op Strategy _Code(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._Code)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.code.strategy.code._Code($arg0) }
    }
  
  
  %op Strategy When_Code(s:Strategy) {
    make(s) { `Sequence(Is_Code(),s) }
  }

  %op Strategy Is_Code() {
    make() { new tom.gom.adt.code.strategy.code.Is_Code()}
  }
  
%op Strategy Make_Code(_prog:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_Code))) }

  get_slot(_prog, t) { $t._prog }
  make( _prog) { new tom.gom.adt.code.strategy.code.Make_Code( $_prog) }
}

    %op Strategy _IsEmpty(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._IsEmpty)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.code.strategy.code._IsEmpty($arg0, $arg1) }
    }
  
  
  %op Strategy When_IsEmpty(s:Strategy) {
    make(s) { `Sequence(Is_IsEmpty(),s) }
  }

  %op Strategy Is_IsEmpty() {
    make() { new tom.gom.adt.code.strategy.code.Is_IsEmpty()}
  }
  
%op Strategy Make_IsEmpty(_Var:String, _Operator:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_IsEmpty))) }

  get_slot(_Var, t) { $t._Var }
  get_slot(_Operator, t) { $t._Operator }
  make( _Var,  new_Operator) { new tom.gom.adt.code.strategy.code.Make_IsEmpty( $_Var,  $new_Operator) }
}

    %op Strategy _IsCons(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._IsCons)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.code.strategy.code._IsCons($arg0, $arg1) }
    }
  
  
  %op Strategy When_IsCons(s:Strategy) {
    make(s) { `Sequence(Is_IsCons(),s) }
  }

  %op Strategy Is_IsCons() {
    make() { new tom.gom.adt.code.strategy.code.Is_IsCons()}
  }
  
%op Strategy Make_IsCons(_Var:String, _Operator:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_IsCons))) }

  get_slot(_Var, t) { $t._Var }
  get_slot(_Operator, t) { $t._Operator }
  make( _Var,  new_Operator) { new tom.gom.adt.code.strategy.code.Make_IsCons( $_Var,  $new_Operator) }
}

    %op Strategy _Empty(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._Empty)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.code.strategy.code._Empty($arg0) }
    }
  
  
  %op Strategy When_Empty(s:Strategy) {
    make(s) { `Sequence(Is_Empty(),s) }
  }

  %op Strategy Is_Empty() {
    make() { new tom.gom.adt.code.strategy.code.Is_Empty()}
  }
  
%op Strategy Make_Empty(_Operator:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_Empty))) }

  get_slot(_Operator, t) { $t._Operator }
  make( new_Operator) { new tom.gom.adt.code.strategy.code.Make_Empty( $new_Operator) }
}

    %op Strategy _Cons(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._Cons)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.code.strategy.code._Cons($arg0) }
    }
  
  
  %op Strategy When_Cons(s:Strategy) {
    make(s) { `Sequence(Is_Cons(),s) }
  }

  %op Strategy Is_Cons() {
    make() { new tom.gom.adt.code.strategy.code.Is_Cons()}
  }
  
%op Strategy Make_Cons(_Operator:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_Cons))) }

  get_slot(_Operator, t) { $t._Operator }
  make( new_Operator) { new tom.gom.adt.code.strategy.code.Make_Cons( $new_Operator) }
}

    %op Strategy _FullSortClass(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._FullSortClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.code.strategy.code._FullSortClass($arg0) }
    }
  
  
  %op Strategy When_FullSortClass(s:Strategy) {
    make(s) { `Sequence(Is_FullSortClass(),s) }
  }

  %op Strategy Is_FullSortClass() {
    make() { new tom.gom.adt.code.strategy.code.Is_FullSortClass()}
  }
  
%op Strategy Make_FullSortClass(_Sort:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_FullSortClass))) }

  get_slot(_Sort, t) { $t._Sort }
  make( new_Sort) { new tom.gom.adt.code.strategy.code.Make_FullSortClass( $new_Sort) }
}

    %op Strategy _FullOperatorClass(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._FullOperatorClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.code.strategy.code._FullOperatorClass($arg0) }
    }
  
  
  %op Strategy When_FullOperatorClass(s:Strategy) {
    make(s) { `Sequence(Is_FullOperatorClass(),s) }
  }

  %op Strategy Is_FullOperatorClass() {
    make() { new tom.gom.adt.code.strategy.code.Is_FullOperatorClass()}
  }
  
%op Strategy Make_FullOperatorClass(_Operator:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_FullOperatorClass))) }

  get_slot(_Operator, t) { $t._Operator }
  make( new_Operator) { new tom.gom.adt.code.strategy.code.Make_FullOperatorClass( $new_Operator) }
}

    %op Strategy _Compare(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._Compare)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.code.strategy.code._Compare($arg0, $arg1) }
    }
  
  
  %op Strategy When_Compare(s:Strategy) {
    make(s) { `Sequence(Is_Compare(),s) }
  }

  %op Strategy Is_Compare() {
    make() { new tom.gom.adt.code.strategy.code.Is_Compare()}
  }
  
%op Strategy Make_Compare(_LCode:Strategy, _RCode:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_Compare))) }

  get_slot(_LCode, t) { $t._LCode }
  get_slot(_RCode, t) { $t._RCode }
  make( new_LCode,  new_RCode) { new tom.gom.adt.code.strategy.code.Make_Compare( $new_LCode,  $new_RCode) }
}

    %op Strategy _EmptyCodeList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._EmptyCodeList)))}
      
        make() { new tom.gom.adt.code.strategy.code._EmptyCodeList() }
    }
  
  
  %op Strategy When_EmptyCodeList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyCodeList(),s) }
  }

  %op Strategy Is_EmptyCodeList() {
    make() { new tom.gom.adt.code.strategy.code.Is_EmptyCodeList()}
  }
  
%op Strategy Make_EmptyCodeList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_EmptyCodeList))) }

  make() { new tom.gom.adt.code.strategy.code.Make_EmptyCodeList() }
}

    %op Strategy _ConsCodeList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code._ConsCodeList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.code.strategy.code._ConsCodeList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsCodeList(s:Strategy) {
    make(s) { `Sequence(Is_ConsCodeList(),s) }
  }

  %op Strategy Is_ConsCodeList() {
    make() { new tom.gom.adt.code.strategy.code.Is_ConsCodeList()}
  }
  
%op Strategy Make_ConsCodeList(_HeadCodeList:Strategy, _TailCodeList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.code.strategy.code.Make_ConsCodeList))) }

  get_slot(_HeadCodeList, t) { $t._HeadCodeList }
  get_slot(_TailCodeList, t) { $t._TailCodeList }
  make( new_HeadCodeList,  new_TailCodeList) { new tom.gom.adt.code.strategy.code.Make_ConsCodeList( $new_HeadCodeList,  $new_TailCodeList) }
}

    %op Strategy _MakeHook(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook._MakeHook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.hook._MakeHook($arg0, $arg1) }
    }
  
  
  %op Strategy When_MakeHook(s:Strategy) {
    make(s) { `Sequence(Is_MakeHook(),s) }
  }

  %op Strategy Is_MakeHook() {
    make() { new tom.gom.adt.objects.strategy.hook.Is_MakeHook()}
  }
  
%op Strategy Make_MakeHook(_HookArguments:Strategy, _Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook.Make_MakeHook))) }

  get_slot(_HookArguments, t) { $t._HookArguments }
  get_slot(_Code, t) { $t._Code }
  make( new_HookArguments,  new_Code) { new tom.gom.adt.objects.strategy.hook.Make_MakeHook( $new_HookArguments,  $new_Code) }
}

    %op Strategy _MakeBeforeHook(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook._MakeBeforeHook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.hook._MakeBeforeHook($arg0, $arg1) }
    }
  
  
  %op Strategy When_MakeBeforeHook(s:Strategy) {
    make(s) { `Sequence(Is_MakeBeforeHook(),s) }
  }

  %op Strategy Is_MakeBeforeHook() {
    make() { new tom.gom.adt.objects.strategy.hook.Is_MakeBeforeHook()}
  }
  
%op Strategy Make_MakeBeforeHook(_HookArguments:Strategy, _Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook.Make_MakeBeforeHook))) }

  get_slot(_HookArguments, t) { $t._HookArguments }
  get_slot(_Code, t) { $t._Code }
  make( new_HookArguments,  new_Code) { new tom.gom.adt.objects.strategy.hook.Make_MakeBeforeHook( $new_HookArguments,  $new_Code) }
}

    %op Strategy _BlockHook(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook._BlockHook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.objects.strategy.hook._BlockHook($arg0) }
    }
  
  
  %op Strategy When_BlockHook(s:Strategy) {
    make(s) { `Sequence(Is_BlockHook(),s) }
  }

  %op Strategy Is_BlockHook() {
    make() { new tom.gom.adt.objects.strategy.hook.Is_BlockHook()}
  }
  
%op Strategy Make_BlockHook(_Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook.Make_BlockHook))) }

  get_slot(_Code, t) { $t._Code }
  make( new_Code) { new tom.gom.adt.objects.strategy.hook.Make_BlockHook( $new_Code) }
}

    %op Strategy _InterfaceHook(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook._InterfaceHook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.objects.strategy.hook._InterfaceHook($arg0) }
    }
  
  
  %op Strategy When_InterfaceHook(s:Strategy) {
    make(s) { `Sequence(Is_InterfaceHook(),s) }
  }

  %op Strategy Is_InterfaceHook() {
    make() { new tom.gom.adt.objects.strategy.hook.Is_InterfaceHook()}
  }
  
%op Strategy Make_InterfaceHook(_Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook.Make_InterfaceHook))) }

  get_slot(_Code, t) { $t._Code }
  make( new_Code) { new tom.gom.adt.objects.strategy.hook.Make_InterfaceHook( $new_Code) }
}

    %op Strategy _ImportHook(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook._ImportHook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.objects.strategy.hook._ImportHook($arg0) }
    }
  
  
  %op Strategy When_ImportHook(s:Strategy) {
    make(s) { `Sequence(Is_ImportHook(),s) }
  }

  %op Strategy Is_ImportHook() {
    make() { new tom.gom.adt.objects.strategy.hook.Is_ImportHook()}
  }
  
%op Strategy Make_ImportHook(_Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook.Make_ImportHook))) }

  get_slot(_Code, t) { $t._Code }
  make( new_Code) { new tom.gom.adt.objects.strategy.hook.Make_ImportHook( $new_Code) }
}

    %op Strategy _MappingHook(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook._MappingHook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.objects.strategy.hook._MappingHook($arg0) }
    }
  
  
  %op Strategy When_MappingHook(s:Strategy) {
    make(s) { `Sequence(Is_MappingHook(),s) }
  }

  %op Strategy Is_MappingHook() {
    make() { new tom.gom.adt.objects.strategy.hook.Is_MappingHook()}
  }
  
%op Strategy Make_MappingHook(_Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hook.Make_MappingHook))) }

  get_slot(_Code, t) { $t._Code }
  make( new_Code) { new tom.gom.adt.objects.strategy.hook.Make_MappingHook( $new_Code) }
}

    %op Strategy _SlotField(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.slotfield._SlotField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.slotfield._SlotField($arg0, $arg1) }
    }
  
  
  %op Strategy When_SlotField(s:Strategy) {
    make(s) { `Sequence(Is_SlotField(),s) }
  }

  %op Strategy Is_SlotField() {
    make() { new tom.gom.adt.objects.strategy.slotfield.Is_SlotField()}
  }
  
%op Strategy Make_SlotField(_Name:String, _Domain:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.slotfield.Make_SlotField))) }

  get_slot(_Name, t) { $t._Name }
  get_slot(_Domain, t) { $t._Domain }
  make( _Name,  new_Domain) { new tom.gom.adt.objects.strategy.slotfield.Make_SlotField( $_Name,  $new_Domain) }
}

    %op Strategy _EmptyConcSlotField() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.slotfieldlist._EmptyConcSlotField)))}
      
        make() { new tom.gom.adt.objects.strategy.slotfieldlist._EmptyConcSlotField() }
    }
  
  
  %op Strategy When_EmptyConcSlotField(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcSlotField(),s) }
  }

  %op Strategy Is_EmptyConcSlotField() {
    make() { new tom.gom.adt.objects.strategy.slotfieldlist.Is_EmptyConcSlotField()}
  }
  
%op Strategy Make_EmptyConcSlotField() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.slotfieldlist.Make_EmptyConcSlotField))) }

  make() { new tom.gom.adt.objects.strategy.slotfieldlist.Make_EmptyConcSlotField() }
}

    %op Strategy _ConsConcSlotField(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.slotfieldlist._ConsConcSlotField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.slotfieldlist._ConsConcSlotField($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcSlotField(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcSlotField(),s) }
  }

  %op Strategy Is_ConsConcSlotField() {
    make() { new tom.gom.adt.objects.strategy.slotfieldlist.Is_ConsConcSlotField()}
  }
  
%op Strategy Make_ConsConcSlotField(_HeadConcSlotField:Strategy, _TailConcSlotField:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.slotfieldlist.Make_ConsConcSlotField))) }

  get_slot(_HeadConcSlotField, t) { $t._HeadConcSlotField }
  get_slot(_TailConcSlotField, t) { $t._TailConcSlotField }
  make( new_HeadConcSlotField,  new_TailConcSlotField) { new tom.gom.adt.objects.strategy.slotfieldlist.Make_ConsConcSlotField( $new_HeadConcSlotField,  $new_TailConcSlotField) }
}

    %op Strategy _AbstractTypeClass(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass._AbstractTypeClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.gom.adt.objects.strategy.gomclass._AbstractTypeClass($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_AbstractTypeClass(s:Strategy) {
    make(s) { `Sequence(Is_AbstractTypeClass(),s) }
  }

  %op Strategy Is_AbstractTypeClass() {
    make() { new tom.gom.adt.objects.strategy.gomclass.Is_AbstractTypeClass()}
  }
  
%op Strategy Make_AbstractTypeClass(_ClassName:Strategy, _Mapping:Strategy, _SortList:Strategy, _Hooks:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass.Make_AbstractTypeClass))) }

  get_slot(_ClassName, t) { $t._ClassName }
  get_slot(_Mapping, t) { $t._Mapping }
  get_slot(_SortList, t) { $t._SortList }
  get_slot(_Hooks, t) { $t._Hooks }
  make( new_ClassName,  new_Mapping,  new_SortList,  new_Hooks) { new tom.gom.adt.objects.strategy.gomclass.Make_AbstractTypeClass( $new_ClassName,  $new_Mapping,  $new_SortList,  $new_Hooks) }
}

    %op Strategy _SortClass(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy, arg5:Strategy, arg6:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass._SortClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        get_slot(arg5, t) { $t.getArgument(5) }
        get_slot(arg6, t) { $t.getArgument(6) }
        make(arg0, arg1, arg2, arg3, arg4, arg5, arg6) { new tom.gom.adt.objects.strategy.gomclass._SortClass($arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) }
    }
  
  
  %op Strategy When_SortClass(s:Strategy) {
    make(s) { `Sequence(Is_SortClass(),s) }
  }

  %op Strategy Is_SortClass() {
    make() { new tom.gom.adt.objects.strategy.gomclass.Is_SortClass()}
  }
  
%op Strategy Make_SortClass(_ClassName:Strategy, _AbstractType:Strategy, _Mapping:Strategy, _Operators:Strategy, _VariadicOperators:Strategy, _SlotFields:Strategy, _Hooks:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass.Make_SortClass))) }

  get_slot(_ClassName, t) { $t._ClassName }
  get_slot(_AbstractType, t) { $t._AbstractType }
  get_slot(_Mapping, t) { $t._Mapping }
  get_slot(_Operators, t) { $t._Operators }
  get_slot(_VariadicOperators, t) { $t._VariadicOperators }
  get_slot(_SlotFields, t) { $t._SlotFields }
  get_slot(_Hooks, t) { $t._Hooks }
  make( new_ClassName,  new_AbstractType,  new_Mapping,  new_Operators,  new_VariadicOperators,  new_SlotFields,  new_Hooks) { new tom.gom.adt.objects.strategy.gomclass.Make_SortClass( $new_ClassName,  $new_AbstractType,  $new_Mapping,  $new_Operators,  $new_VariadicOperators,  $new_SlotFields,  $new_Hooks) }
}

    %op Strategy _OperatorClass(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy, arg5:Strategy, arg6:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass._OperatorClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        get_slot(arg5, t) { $t.getArgument(5) }
        get_slot(arg6, t) { $t.getArgument(6) }
        make(arg0, arg1, arg2, arg3, arg4, arg5, arg6) { new tom.gom.adt.objects.strategy.gomclass._OperatorClass($arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) }
    }
  
  
  %op Strategy When_OperatorClass(s:Strategy) {
    make(s) { `Sequence(Is_OperatorClass(),s) }
  }

  %op Strategy Is_OperatorClass() {
    make() { new tom.gom.adt.objects.strategy.gomclass.Is_OperatorClass()}
  }
  
%op Strategy Make_OperatorClass(_ClassName:Strategy, _AbstractType:Strategy, _ExtendsType:Strategy, _Mapping:Strategy, _SortName:Strategy, _SlotFields:Strategy, _Hooks:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass.Make_OperatorClass))) }

  get_slot(_ClassName, t) { $t._ClassName }
  get_slot(_AbstractType, t) { $t._AbstractType }
  get_slot(_ExtendsType, t) { $t._ExtendsType }
  get_slot(_Mapping, t) { $t._Mapping }
  get_slot(_SortName, t) { $t._SortName }
  get_slot(_SlotFields, t) { $t._SlotFields }
  get_slot(_Hooks, t) { $t._Hooks }
  make( new_ClassName,  new_AbstractType,  new_ExtendsType,  new_Mapping,  new_SortName,  new_SlotFields,  new_Hooks) { new tom.gom.adt.objects.strategy.gomclass.Make_OperatorClass( $new_ClassName,  $new_AbstractType,  $new_ExtendsType,  $new_Mapping,  $new_SortName,  $new_SlotFields,  $new_Hooks) }
}

    %op Strategy _VariadicOperatorClass(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy, arg5:Strategy, arg6:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass._VariadicOperatorClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        get_slot(arg5, t) { $t.getArgument(5) }
        get_slot(arg6, t) { $t.getArgument(6) }
        make(arg0, arg1, arg2, arg3, arg4, arg5, arg6) { new tom.gom.adt.objects.strategy.gomclass._VariadicOperatorClass($arg0, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6) }
    }
  
  
  %op Strategy When_VariadicOperatorClass(s:Strategy) {
    make(s) { `Sequence(Is_VariadicOperatorClass(),s) }
  }

  %op Strategy Is_VariadicOperatorClass() {
    make() { new tom.gom.adt.objects.strategy.gomclass.Is_VariadicOperatorClass()}
  }
  
%op Strategy Make_VariadicOperatorClass(_ClassName:Strategy, _AbstractType:Strategy, _Mapping:Strategy, _SortName:Strategy, _Empty:Strategy, _Cons:Strategy, _Hooks:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass.Make_VariadicOperatorClass))) }

  get_slot(_ClassName, t) { $t._ClassName }
  get_slot(_AbstractType, t) { $t._AbstractType }
  get_slot(_Mapping, t) { $t._Mapping }
  get_slot(_SortName, t) { $t._SortName }
  get_slot(_Empty, t) { $t._Empty }
  get_slot(_Cons, t) { $t._Cons }
  get_slot(_Hooks, t) { $t._Hooks }
  make( new_ClassName,  new_AbstractType,  new_Mapping,  new_SortName,  new_Empty,  new_Cons,  new_Hooks) { new tom.gom.adt.objects.strategy.gomclass.Make_VariadicOperatorClass( $new_ClassName,  $new_AbstractType,  $new_Mapping,  $new_SortName,  $new_Empty,  $new_Cons,  $new_Hooks) }
}

    %op Strategy _TomMapping(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass._TomMapping)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.gom.adt.objects.strategy.gomclass._TomMapping($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_TomMapping(s:Strategy) {
    make(s) { `Sequence(Is_TomMapping(),s) }
  }

  %op Strategy Is_TomMapping() {
    make() { new tom.gom.adt.objects.strategy.gomclass.Is_TomMapping()}
  }
  
%op Strategy Make_TomMapping(_ClassName:Strategy, _SortClasses:Strategy, _OperatorClasses:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclass.Make_TomMapping))) }

  get_slot(_ClassName, t) { $t._ClassName }
  get_slot(_SortClasses, t) { $t._SortClasses }
  get_slot(_OperatorClasses, t) { $t._OperatorClasses }
  make( new_ClassName,  new_SortClasses,  new_OperatorClasses) { new tom.gom.adt.objects.strategy.gomclass.Make_TomMapping( $new_ClassName,  $new_SortClasses,  $new_OperatorClasses) }
}

    %op Strategy _ClassName(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.classname._ClassName)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.classname._ClassName($arg0, $arg1) }
    }
  
  
  %op Strategy When_ClassName(s:Strategy) {
    make(s) { `Sequence(Is_ClassName(),s) }
  }

  %op Strategy Is_ClassName() {
    make() { new tom.gom.adt.objects.strategy.classname.Is_ClassName()}
  }
  
%op Strategy Make_ClassName(_Pkg:String, _Name:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.classname.Make_ClassName))) }

  get_slot(_Pkg, t) { $t._Pkg }
  get_slot(_Name, t) { $t._Name }
  make( _Pkg,  _Name) { new tom.gom.adt.objects.strategy.classname.Make_ClassName( $_Pkg,  $_Name) }
}

    %op Strategy _EmptyConcGomClass() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclasslist._EmptyConcGomClass)))}
      
        make() { new tom.gom.adt.objects.strategy.gomclasslist._EmptyConcGomClass() }
    }
  
  
  %op Strategy When_EmptyConcGomClass(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcGomClass(),s) }
  }

  %op Strategy Is_EmptyConcGomClass() {
    make() { new tom.gom.adt.objects.strategy.gomclasslist.Is_EmptyConcGomClass()}
  }
  
%op Strategy Make_EmptyConcGomClass() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclasslist.Make_EmptyConcGomClass))) }

  make() { new tom.gom.adt.objects.strategy.gomclasslist.Make_EmptyConcGomClass() }
}

    %op Strategy _ConsConcGomClass(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclasslist._ConsConcGomClass)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.gomclasslist._ConsConcGomClass($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcGomClass(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcGomClass(),s) }
  }

  %op Strategy Is_ConsConcGomClass() {
    make() { new tom.gom.adt.objects.strategy.gomclasslist.Is_ConsConcGomClass()}
  }
  
%op Strategy Make_ConsConcGomClass(_HeadConcGomClass:Strategy, _TailConcGomClass:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.gomclasslist.Make_ConsConcGomClass))) }

  get_slot(_HeadConcGomClass, t) { $t._HeadConcGomClass }
  get_slot(_TailConcGomClass, t) { $t._TailConcGomClass }
  make( new_HeadConcGomClass,  new_TailConcGomClass) { new tom.gom.adt.objects.strategy.gomclasslist.Make_ConsConcGomClass( $new_HeadConcGomClass,  $new_TailConcGomClass) }
}

    %op Strategy _EmptyConcClassName() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.classnamelist._EmptyConcClassName)))}
      
        make() { new tom.gom.adt.objects.strategy.classnamelist._EmptyConcClassName() }
    }
  
  
  %op Strategy When_EmptyConcClassName(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcClassName(),s) }
  }

  %op Strategy Is_EmptyConcClassName() {
    make() { new tom.gom.adt.objects.strategy.classnamelist.Is_EmptyConcClassName()}
  }
  
%op Strategy Make_EmptyConcClassName() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.classnamelist.Make_EmptyConcClassName))) }

  make() { new tom.gom.adt.objects.strategy.classnamelist.Make_EmptyConcClassName() }
}

    %op Strategy _ConsConcClassName(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.classnamelist._ConsConcClassName)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.classnamelist._ConsConcClassName($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcClassName(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcClassName(),s) }
  }

  %op Strategy Is_ConsConcClassName() {
    make() { new tom.gom.adt.objects.strategy.classnamelist.Is_ConsConcClassName()}
  }
  
%op Strategy Make_ConsConcClassName(_HeadConcClassName:Strategy, _TailConcClassName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.classnamelist.Make_ConsConcClassName))) }

  get_slot(_HeadConcClassName, t) { $t._HeadConcClassName }
  get_slot(_TailConcClassName, t) { $t._TailConcClassName }
  make( new_HeadConcClassName,  new_TailConcClassName) { new tom.gom.adt.objects.strategy.classnamelist.Make_ConsConcClassName( $new_HeadConcClassName,  $new_TailConcClassName) }
}

    %op Strategy _EmptyConcHook() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hooklist._EmptyConcHook)))}
      
        make() { new tom.gom.adt.objects.strategy.hooklist._EmptyConcHook() }
    }
  
  
  %op Strategy When_EmptyConcHook(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcHook(),s) }
  }

  %op Strategy Is_EmptyConcHook() {
    make() { new tom.gom.adt.objects.strategy.hooklist.Is_EmptyConcHook()}
  }
  
%op Strategy Make_EmptyConcHook() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hooklist.Make_EmptyConcHook))) }

  make() { new tom.gom.adt.objects.strategy.hooklist.Make_EmptyConcHook() }
}

    %op Strategy _ConsConcHook(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hooklist._ConsConcHook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.objects.strategy.hooklist._ConsConcHook($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcHook(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcHook(),s) }
  }

  %op Strategy Is_ConsConcHook() {
    make() { new tom.gom.adt.objects.strategy.hooklist.Is_ConsConcHook()}
  }
  
%op Strategy Make_ConsConcHook(_HeadConcHook:Strategy, _TailConcHook:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.objects.strategy.hooklist.Make_ConsConcHook))) }

  get_slot(_HeadConcHook, t) { $t._HeadConcHook }
  get_slot(_TailConcHook, t) { $t._TailConcHook }
  make( new_HeadConcHook,  new_TailConcHook) { new tom.gom.adt.objects.strategy.hooklist.Make_ConsConcHook( $new_HeadConcHook,  $new_TailConcHook) }
}

    %op Strategy _Slot(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.slot._Slot)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.slot._Slot($arg0, $arg1) }
    }
  
  
  %op Strategy When_Slot(s:Strategy) {
    make(s) { `Sequence(Is_Slot(),s) }
  }

  %op Strategy Is_Slot() {
    make() { new tom.gom.adt.gom.strategy.slot.Is_Slot()}
  }
  
%op Strategy Make_Slot(_Name:String, _Sort:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.slot.Make_Slot))) }

  get_slot(_Name, t) { $t._Name }
  get_slot(_Sort, t) { $t._Sort }
  make( _Name,  new_Sort) { new tom.gom.adt.gom.strategy.slot.Make_Slot( $_Name,  $new_Sort) }
}

    %op Strategy _EmptyConcArg() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.arglist._EmptyConcArg)))}
      
        make() { new tom.gom.adt.gom.strategy.arglist._EmptyConcArg() }
    }
  
  
  %op Strategy When_EmptyConcArg(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcArg(),s) }
  }

  %op Strategy Is_EmptyConcArg() {
    make() { new tom.gom.adt.gom.strategy.arglist.Is_EmptyConcArg()}
  }
  
%op Strategy Make_EmptyConcArg() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.arglist.Make_EmptyConcArg))) }

  make() { new tom.gom.adt.gom.strategy.arglist.Make_EmptyConcArg() }
}

    %op Strategy _ConsConcArg(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.arglist._ConsConcArg)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.arglist._ConsConcArg($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcArg(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcArg(),s) }
  }

  %op Strategy Is_ConsConcArg() {
    make() { new tom.gom.adt.gom.strategy.arglist.Is_ConsConcArg()}
  }
  
%op Strategy Make_ConsConcArg(_HeadConcArg:Strategy, _TailConcArg:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.arglist.Make_ConsConcArg))) }

  get_slot(_HeadConcArg, t) { $t._HeadConcArg }
  get_slot(_TailConcArg, t) { $t._TailConcArg }
  make( new_HeadConcArg,  new_TailConcArg) { new tom.gom.adt.gom.strategy.arglist.Make_ConsConcArg( $new_HeadConcArg,  $new_TailConcArg) }
}

    %op Strategy _KindModule() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.idkind._KindModule)))}
      
        make() { new tom.gom.adt.gom.strategy.idkind._KindModule() }
    }
  
  
  %op Strategy When_KindModule(s:Strategy) {
    make(s) { `Sequence(Is_KindModule(),s) }
  }

  %op Strategy Is_KindModule() {
    make() { new tom.gom.adt.gom.strategy.idkind.Is_KindModule()}
  }
  
%op Strategy Make_KindModule() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.idkind.Make_KindModule))) }

  make() { new tom.gom.adt.gom.strategy.idkind.Make_KindModule() }
}

    %op Strategy _KindSort() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.idkind._KindSort)))}
      
        make() { new tom.gom.adt.gom.strategy.idkind._KindSort() }
    }
  
  
  %op Strategy When_KindSort(s:Strategy) {
    make(s) { `Sequence(Is_KindSort(),s) }
  }

  %op Strategy Is_KindSort() {
    make() { new tom.gom.adt.gom.strategy.idkind.Is_KindSort()}
  }
  
%op Strategy Make_KindSort() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.idkind.Make_KindSort))) }

  make() { new tom.gom.adt.gom.strategy.idkind.Make_KindSort() }
}

    %op Strategy _KindOperator() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.idkind._KindOperator)))}
      
        make() { new tom.gom.adt.gom.strategy.idkind._KindOperator() }
    }
  
  
  %op Strategy When_KindOperator(s:Strategy) {
    make(s) { `Sequence(Is_KindOperator(),s) }
  }

  %op Strategy Is_KindOperator() {
    make() { new tom.gom.adt.gom.strategy.idkind.Is_KindOperator()}
  }
  
%op Strategy Make_KindOperator() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.idkind.Make_KindOperator))) }

  make() { new tom.gom.adt.gom.strategy.idkind.Make_KindOperator() }
}

    %op Strategy _EmptyConcGomModule() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodulelist._EmptyConcGomModule)))}
      
        make() { new tom.gom.adt.gom.strategy.gommodulelist._EmptyConcGomModule() }
    }
  
  
  %op Strategy When_EmptyConcGomModule(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcGomModule(),s) }
  }

  %op Strategy Is_EmptyConcGomModule() {
    make() { new tom.gom.adt.gom.strategy.gommodulelist.Is_EmptyConcGomModule()}
  }
  
%op Strategy Make_EmptyConcGomModule() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodulelist.Make_EmptyConcGomModule))) }

  make() { new tom.gom.adt.gom.strategy.gommodulelist.Make_EmptyConcGomModule() }
}

    %op Strategy _ConsConcGomModule(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodulelist._ConsConcGomModule)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.gommodulelist._ConsConcGomModule($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcGomModule(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcGomModule(),s) }
  }

  %op Strategy Is_ConsConcGomModule() {
    make() { new tom.gom.adt.gom.strategy.gommodulelist.Is_ConsConcGomModule()}
  }
  
%op Strategy Make_ConsConcGomModule(_HeadConcGomModule:Strategy, _TailConcGomModule:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodulelist.Make_ConsConcGomModule))) }

  get_slot(_HeadConcGomModule, t) { $t._HeadConcGomModule }
  get_slot(_TailConcGomModule, t) { $t._TailConcGomModule }
  make( new_HeadConcGomModule,  new_TailConcGomModule) { new tom.gom.adt.gom.strategy.gommodulelist.Make_ConsConcGomModule( $new_HeadConcGomModule,  $new_TailConcGomModule) }
}

    %op Strategy _EmptyConcGrammar() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammarlist._EmptyConcGrammar)))}
      
        make() { new tom.gom.adt.gom.strategy.grammarlist._EmptyConcGrammar() }
    }
  
  
  %op Strategy When_EmptyConcGrammar(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcGrammar(),s) }
  }

  %op Strategy Is_EmptyConcGrammar() {
    make() { new tom.gom.adt.gom.strategy.grammarlist.Is_EmptyConcGrammar()}
  }
  
%op Strategy Make_EmptyConcGrammar() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammarlist.Make_EmptyConcGrammar))) }

  make() { new tom.gom.adt.gom.strategy.grammarlist.Make_EmptyConcGrammar() }
}

    %op Strategy _ConsConcGrammar(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammarlist._ConsConcGrammar)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.grammarlist._ConsConcGrammar($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcGrammar(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcGrammar(),s) }
  }

  %op Strategy Is_ConsConcGrammar() {
    make() { new tom.gom.adt.gom.strategy.grammarlist.Is_ConsConcGrammar()}
  }
  
%op Strategy Make_ConsConcGrammar(_HeadConcGrammar:Strategy, _TailConcGrammar:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammarlist.Make_ConsConcGrammar))) }

  get_slot(_HeadConcGrammar, t) { $t._HeadConcGrammar }
  get_slot(_TailConcGrammar, t) { $t._TailConcGrammar }
  make( new_HeadConcGrammar,  new_TailConcGrammar) { new tom.gom.adt.gom.strategy.grammarlist.Make_ConsConcGrammar( $new_HeadConcGrammar,  $new_TailConcGrammar) }
}

    %op Strategy _Slots(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.typedproduction._Slots)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.typedproduction._Slots($arg0) }
    }
  
  
  %op Strategy When_Slots(s:Strategy) {
    make(s) { `Sequence(Is_Slots(),s) }
  }

  %op Strategy Is_Slots() {
    make() { new tom.gom.adt.gom.strategy.typedproduction.Is_Slots()}
  }
  
%op Strategy Make_Slots(_Slots:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.typedproduction.Make_Slots))) }

  get_slot(_Slots, t) { $t._Slots }
  make( new_Slots) { new tom.gom.adt.gom.strategy.typedproduction.Make_Slots( $new_Slots) }
}

    %op Strategy _Variadic(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.typedproduction._Variadic)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.typedproduction._Variadic($arg0) }
    }
  
  
  %op Strategy When_Variadic(s:Strategy) {
    make(s) { `Sequence(Is_Variadic(),s) }
  }

  %op Strategy Is_Variadic() {
    make() { new tom.gom.adt.gom.strategy.typedproduction.Is_Variadic()}
  }
  
%op Strategy Make_Variadic(_Sort:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.typedproduction.Make_Variadic))) }

  get_slot(_Sort, t) { $t._Sort }
  make( new_Sort) { new tom.gom.adt.gom.strategy.typedproduction.Make_Variadic( $new_Sort) }
}

    %op Strategy _EmptyConcSection() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sectionlist._EmptyConcSection)))}
      
        make() { new tom.gom.adt.gom.strategy.sectionlist._EmptyConcSection() }
    }
  
  
  %op Strategy When_EmptyConcSection(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcSection(),s) }
  }

  %op Strategy Is_EmptyConcSection() {
    make() { new tom.gom.adt.gom.strategy.sectionlist.Is_EmptyConcSection()}
  }
  
%op Strategy Make_EmptyConcSection() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sectionlist.Make_EmptyConcSection))) }

  make() { new tom.gom.adt.gom.strategy.sectionlist.Make_EmptyConcSection() }
}

    %op Strategy _ConsConcSection(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sectionlist._ConsConcSection)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.sectionlist._ConsConcSection($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcSection(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcSection(),s) }
  }

  %op Strategy Is_ConsConcSection() {
    make() { new tom.gom.adt.gom.strategy.sectionlist.Is_ConsConcSection()}
  }
  
%op Strategy Make_ConsConcSection(_HeadConcSection:Strategy, _TailConcSection:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sectionlist.Make_ConsConcSection))) }

  get_slot(_HeadConcSection, t) { $t._HeadConcSection }
  get_slot(_TailConcSection, t) { $t._TailConcSection }
  make( new_HeadConcSection,  new_TailConcSection) { new tom.gom.adt.gom.strategy.sectionlist.Make_ConsConcSection( $new_HeadConcSection,  $new_TailConcSection) }
}

    %op Strategy _EmptyConcOperator() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.operatordecllist._EmptyConcOperator)))}
      
        make() { new tom.gom.adt.gom.strategy.operatordecllist._EmptyConcOperator() }
    }
  
  
  %op Strategy When_EmptyConcOperator(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcOperator(),s) }
  }

  %op Strategy Is_EmptyConcOperator() {
    make() { new tom.gom.adt.gom.strategy.operatordecllist.Is_EmptyConcOperator()}
  }
  
%op Strategy Make_EmptyConcOperator() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.operatordecllist.Make_EmptyConcOperator))) }

  make() { new tom.gom.adt.gom.strategy.operatordecllist.Make_EmptyConcOperator() }
}

    %op Strategy _ConsConcOperator(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.operatordecllist._ConsConcOperator)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.operatordecllist._ConsConcOperator($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcOperator(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcOperator(),s) }
  }

  %op Strategy Is_ConsConcOperator() {
    make() { new tom.gom.adt.gom.strategy.operatordecllist.Is_ConsConcOperator()}
  }
  
%op Strategy Make_ConsConcOperator(_HeadConcOperator:Strategy, _TailConcOperator:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.operatordecllist.Make_ConsConcOperator))) }

  get_slot(_HeadConcOperator, t) { $t._HeadConcOperator }
  get_slot(_TailConcOperator, t) { $t._TailConcOperator }
  make( new_HeadConcOperator,  new_TailConcOperator) { new tom.gom.adt.gom.strategy.operatordecllist.Make_ConsConcOperator( $new_HeadConcOperator,  $new_TailConcOperator) }
}

    %op Strategy _EmptyConcHookDecl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecllist._EmptyConcHookDecl)))}
      
        make() { new tom.gom.adt.gom.strategy.hookdecllist._EmptyConcHookDecl() }
    }
  
  
  %op Strategy When_EmptyConcHookDecl(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcHookDecl(),s) }
  }

  %op Strategy Is_EmptyConcHookDecl() {
    make() { new tom.gom.adt.gom.strategy.hookdecllist.Is_EmptyConcHookDecl()}
  }
  
%op Strategy Make_EmptyConcHookDecl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecllist.Make_EmptyConcHookDecl))) }

  make() { new tom.gom.adt.gom.strategy.hookdecllist.Make_EmptyConcHookDecl() }
}

    %op Strategy _ConsConcHookDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecllist._ConsConcHookDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.hookdecllist._ConsConcHookDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcHookDecl(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcHookDecl(),s) }
  }

  %op Strategy Is_ConsConcHookDecl() {
    make() { new tom.gom.adt.gom.strategy.hookdecllist.Is_ConsConcHookDecl()}
  }
  
%op Strategy Make_ConsConcHookDecl(_HeadConcHookDecl:Strategy, _TailConcHookDecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecllist.Make_ConsConcHookDecl))) }

  get_slot(_HeadConcHookDecl, t) { $t._HeadConcHookDecl }
  get_slot(_TailConcHookDecl, t) { $t._TailConcHookDecl }
  make( new_HeadConcHookDecl,  new_TailConcHookDecl) { new tom.gom.adt.gom.strategy.hookdecllist.Make_ConsConcHookDecl( $new_HeadConcHookDecl,  $new_TailConcHookDecl) }
}

    %op Strategy _EmptyConcSortDecl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecllist._EmptyConcSortDecl)))}
      
        make() { new tom.gom.adt.gom.strategy.sortdecllist._EmptyConcSortDecl() }
    }
  
  
  %op Strategy When_EmptyConcSortDecl(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcSortDecl(),s) }
  }

  %op Strategy Is_EmptyConcSortDecl() {
    make() { new tom.gom.adt.gom.strategy.sortdecllist.Is_EmptyConcSortDecl()}
  }
  
%op Strategy Make_EmptyConcSortDecl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecllist.Make_EmptyConcSortDecl))) }

  make() { new tom.gom.adt.gom.strategy.sortdecllist.Make_EmptyConcSortDecl() }
}

    %op Strategy _ConsConcSortDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecllist._ConsConcSortDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.sortdecllist._ConsConcSortDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcSortDecl(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcSortDecl(),s) }
  }

  %op Strategy Is_ConsConcSortDecl() {
    make() { new tom.gom.adt.gom.strategy.sortdecllist.Is_ConsConcSortDecl()}
  }
  
%op Strategy Make_ConsConcSortDecl(_HeadConcSortDecl:Strategy, _TailConcSortDecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecllist.Make_ConsConcSortDecl))) }

  get_slot(_HeadConcSortDecl, t) { $t._HeadConcSortDecl }
  get_slot(_TailConcSortDecl, t) { $t._TailConcSortDecl }
  make( new_HeadConcSortDecl,  new_TailConcSortDecl) { new tom.gom.adt.gom.strategy.sortdecllist.Make_ConsConcSortDecl( $new_HeadConcSortDecl,  $new_TailConcSortDecl) }
}

    %op Strategy _OperatorDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.operatordecl._OperatorDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        make(arg0, arg1, arg2) { new tom.gom.adt.gom.strategy.operatordecl._OperatorDecl($arg0, $arg1, $arg2) }
    }
  
  
  %op Strategy When_OperatorDecl(s:Strategy) {
    make(s) { `Sequence(Is_OperatorDecl(),s) }
  }

  %op Strategy Is_OperatorDecl() {
    make() { new tom.gom.adt.gom.strategy.operatordecl.Is_OperatorDecl()}
  }
  
%op Strategy Make_OperatorDecl(_Name:String, _Sort:Strategy, _Prod:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.operatordecl.Make_OperatorDecl))) }

  get_slot(_Name, t) { $t._Name }
  get_slot(_Sort, t) { $t._Sort }
  get_slot(_Prod, t) { $t._Prod }
  make( _Name,  new_Sort,  new_Prod) { new tom.gom.adt.gom.strategy.operatordecl.Make_OperatorDecl( $_Name,  $new_Sort,  $new_Prod) }
}

    %op Strategy _GomModule(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodule._GomModule)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.gommodule._GomModule($arg0, $arg1) }
    }
  
  
  %op Strategy When_GomModule(s:Strategy) {
    make(s) { `Sequence(Is_GomModule(),s) }
  }

  %op Strategy Is_GomModule() {
    make() { new tom.gom.adt.gom.strategy.gommodule.Is_GomModule()}
  }
  
%op Strategy Make_GomModule(_ModuleName:Strategy, _SectionList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodule.Make_GomModule))) }

  get_slot(_ModuleName, t) { $t._ModuleName }
  get_slot(_SectionList, t) { $t._SectionList }
  make( new_ModuleName,  new_SectionList) { new tom.gom.adt.gom.strategy.gommodule.Make_GomModule( $new_ModuleName,  $new_SectionList) }
}

    %op Strategy _ModHookPair(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.pair._ModHookPair)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.pair._ModHookPair($arg0, $arg1) }
    }
  
  
  %op Strategy When_ModHookPair(s:Strategy) {
    make(s) { `Sequence(Is_ModHookPair(),s) }
  }

  %op Strategy Is_ModHookPair() {
    make() { new tom.gom.adt.gom.strategy.pair.Is_ModHookPair()}
  }
  
%op Strategy Make_ModHookPair(_Modules:Strategy, _HookDecls:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.pair.Make_ModHookPair))) }

  get_slot(_Modules, t) { $t._Modules }
  get_slot(_HookDecls, t) { $t._HookDecls }
  make( new_Modules,  new_HookDecls) { new tom.gom.adt.gom.strategy.pair.Make_ModHookPair( $new_Modules,  $new_HookDecls) }
}

    %op Strategy _Imports(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.section._Imports)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.section._Imports($arg0) }
    }
  
  
  %op Strategy When_Imports(s:Strategy) {
    make(s) { `Sequence(Is_Imports(),s) }
  }

  %op Strategy Is_Imports() {
    make() { new tom.gom.adt.gom.strategy.section.Is_Imports()}
  }
  
%op Strategy Make_Imports(_ImportList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.section.Make_Imports))) }

  get_slot(_ImportList, t) { $t._ImportList }
  make( new_ImportList) { new tom.gom.adt.gom.strategy.section.Make_Imports( $new_ImportList) }
}

    %op Strategy _Public(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.section._Public)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.section._Public($arg0) }
    }
  
  
  %op Strategy When_Public(s:Strategy) {
    make(s) { `Sequence(Is_Public(),s) }
  }

  %op Strategy Is_Public() {
    make() { new tom.gom.adt.gom.strategy.section.Is_Public()}
  }
  
%op Strategy Make_Public(_GrammarList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.section.Make_Public))) }

  get_slot(_GrammarList, t) { $t._GrammarList }
  make( new_GrammarList) { new tom.gom.adt.gom.strategy.section.Make_Public( $new_GrammarList) }
}

    %op Strategy _EmptyConcGomType() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gomtypelist._EmptyConcGomType)))}
      
        make() { new tom.gom.adt.gom.strategy.gomtypelist._EmptyConcGomType() }
    }
  
  
  %op Strategy When_EmptyConcGomType(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcGomType(),s) }
  }

  %op Strategy Is_EmptyConcGomType() {
    make() { new tom.gom.adt.gom.strategy.gomtypelist.Is_EmptyConcGomType()}
  }
  
%op Strategy Make_EmptyConcGomType() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gomtypelist.Make_EmptyConcGomType))) }

  make() { new tom.gom.adt.gom.strategy.gomtypelist.Make_EmptyConcGomType() }
}

    %op Strategy _ConsConcGomType(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gomtypelist._ConsConcGomType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.gomtypelist._ConsConcGomType($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcGomType(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcGomType(),s) }
  }

  %op Strategy Is_ConsConcGomType() {
    make() { new tom.gom.adt.gom.strategy.gomtypelist.Is_ConsConcGomType()}
  }
  
%op Strategy Make_ConsConcGomType(_HeadConcGomType:Strategy, _TailConcGomType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gomtypelist.Make_ConsConcGomType))) }

  get_slot(_HeadConcGomType, t) { $t._HeadConcGomType }
  get_slot(_TailConcGomType, t) { $t._TailConcGomType }
  make( new_HeadConcGomType,  new_TailConcGomType) { new tom.gom.adt.gom.strategy.gomtypelist.Make_ConsConcGomType( $new_HeadConcGomType,  $new_TailConcGomType) }
}

    %op Strategy _EmptyConcProduction() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.productionlist._EmptyConcProduction)))}
      
        make() { new tom.gom.adt.gom.strategy.productionlist._EmptyConcProduction() }
    }
  
  
  %op Strategy When_EmptyConcProduction(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcProduction(),s) }
  }

  %op Strategy Is_EmptyConcProduction() {
    make() { new tom.gom.adt.gom.strategy.productionlist.Is_EmptyConcProduction()}
  }
  
%op Strategy Make_EmptyConcProduction() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.productionlist.Make_EmptyConcProduction))) }

  make() { new tom.gom.adt.gom.strategy.productionlist.Make_EmptyConcProduction() }
}

    %op Strategy _ConsConcProduction(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.productionlist._ConsConcProduction)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.productionlist._ConsConcProduction($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcProduction(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcProduction(),s) }
  }

  %op Strategy Is_ConsConcProduction() {
    make() { new tom.gom.adt.gom.strategy.productionlist.Is_ConsConcProduction()}
  }
  
%op Strategy Make_ConsConcProduction(_HeadConcProduction:Strategy, _TailConcProduction:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.productionlist.Make_ConsConcProduction))) }

  get_slot(_HeadConcProduction, t) { $t._HeadConcProduction }
  get_slot(_TailConcProduction, t) { $t._TailConcProduction }
  make( new_HeadConcProduction,  new_TailConcProduction) { new tom.gom.adt.gom.strategy.productionlist.Make_ConsConcProduction( $new_HeadConcProduction,  $new_TailConcProduction) }
}

    %op Strategy _CutModule(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.decl._CutModule)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.decl._CutModule($arg0) }
    }
  
  
  %op Strategy When_CutModule(s:Strategy) {
    make(s) { `Sequence(Is_CutModule(),s) }
  }

  %op Strategy Is_CutModule() {
    make() { new tom.gom.adt.gom.strategy.decl.Is_CutModule()}
  }
  
%op Strategy Make_CutModule(_MDecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.decl.Make_CutModule))) }

  get_slot(_MDecl, t) { $t._MDecl }
  make( new_MDecl) { new tom.gom.adt.gom.strategy.decl.Make_CutModule( $new_MDecl) }
}

    %op Strategy _CutSort(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.decl._CutSort)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.decl._CutSort($arg0) }
    }
  
  
  %op Strategy When_CutSort(s:Strategy) {
    make(s) { `Sequence(Is_CutSort(),s) }
  }

  %op Strategy Is_CutSort() {
    make() { new tom.gom.adt.gom.strategy.decl.Is_CutSort()}
  }
  
%op Strategy Make_CutSort(_Sort:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.decl.Make_CutSort))) }

  get_slot(_Sort, t) { $t._Sort }
  make( new_Sort) { new tom.gom.adt.gom.strategy.decl.Make_CutSort( $new_Sort) }
}

    %op Strategy _CutOperator(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.decl._CutOperator)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.decl._CutOperator($arg0) }
    }
  
  
  %op Strategy When_CutOperator(s:Strategy) {
    make(s) { `Sequence(Is_CutOperator(),s) }
  }

  %op Strategy Is_CutOperator() {
    make() { new tom.gom.adt.gom.strategy.decl.Is_CutOperator()}
  }
  
%op Strategy Make_CutOperator(_ODecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.decl.Make_CutOperator))) }

  get_slot(_ODecl, t) { $t._ODecl }
  make( new_ODecl) { new tom.gom.adt.gom.strategy.decl.Make_CutOperator( $new_ODecl) }
}

    %op Strategy _EmptyConcImportedModule() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.importlist._EmptyConcImportedModule)))}
      
        make() { new tom.gom.adt.gom.strategy.importlist._EmptyConcImportedModule() }
    }
  
  
  %op Strategy When_EmptyConcImportedModule(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcImportedModule(),s) }
  }

  %op Strategy Is_EmptyConcImportedModule() {
    make() { new tom.gom.adt.gom.strategy.importlist.Is_EmptyConcImportedModule()}
  }
  
%op Strategy Make_EmptyConcImportedModule() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.importlist.Make_EmptyConcImportedModule))) }

  make() { new tom.gom.adt.gom.strategy.importlist.Make_EmptyConcImportedModule() }
}

    %op Strategy _ConsConcImportedModule(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.importlist._ConsConcImportedModule)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.importlist._ConsConcImportedModule($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcImportedModule(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcImportedModule(),s) }
  }

  %op Strategy Is_ConsConcImportedModule() {
    make() { new tom.gom.adt.gom.strategy.importlist.Is_ConsConcImportedModule()}
  }
  
%op Strategy Make_ConsConcImportedModule(_HeadConcImportedModule:Strategy, _TailConcImportedModule:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.importlist.Make_ConsConcImportedModule))) }

  get_slot(_HeadConcImportedModule, t) { $t._HeadConcImportedModule }
  get_slot(_TailConcImportedModule, t) { $t._TailConcImportedModule }
  make( new_HeadConcImportedModule,  new_TailConcImportedModule) { new tom.gom.adt.gom.strategy.importlist.Make_ConsConcImportedModule( $new_HeadConcImportedModule,  $new_TailConcImportedModule) }
}

    %op Strategy _Sort(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sort._Sort)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.sort._Sort($arg0, $arg1) }
    }
  
  
  %op Strategy When_Sort(s:Strategy) {
    make(s) { `Sequence(Is_Sort(),s) }
  }

  %op Strategy Is_Sort() {
    make() { new tom.gom.adt.gom.strategy.sort.Is_Sort()}
  }
  
%op Strategy Make_Sort(_Decl:Strategy, _OperatorDecls:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sort.Make_Sort))) }

  get_slot(_Decl, t) { $t._Decl }
  get_slot(_OperatorDecls, t) { $t._OperatorDecls }
  make( new_Decl,  new_OperatorDecls) { new tom.gom.adt.gom.strategy.sort.Make_Sort( $new_Decl,  $new_OperatorDecls) }
}

    %op Strategy _SortDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecl._SortDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.sortdecl._SortDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_SortDecl(s:Strategy) {
    make(s) { `Sequence(Is_SortDecl(),s) }
  }

  %op Strategy Is_SortDecl() {
    make() { new tom.gom.adt.gom.strategy.sortdecl.Is_SortDecl()}
  }
  
%op Strategy Make_SortDecl(_Name:String, _ModuleDecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecl.Make_SortDecl))) }

  get_slot(_Name, t) { $t._Name }
  get_slot(_ModuleDecl, t) { $t._ModuleDecl }
  make( _Name,  new_ModuleDecl) { new tom.gom.adt.gom.strategy.sortdecl.Make_SortDecl( $_Name,  $new_ModuleDecl) }
}

    %op Strategy _BuiltinSortDecl(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecl._BuiltinSortDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.sortdecl._BuiltinSortDecl($arg0) }
    }
  
  
  %op Strategy When_BuiltinSortDecl(s:Strategy) {
    make(s) { `Sequence(Is_BuiltinSortDecl(),s) }
  }

  %op Strategy Is_BuiltinSortDecl() {
    make() { new tom.gom.adt.gom.strategy.sortdecl.Is_BuiltinSortDecl()}
  }
  
%op Strategy Make_BuiltinSortDecl(_Name:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortdecl.Make_BuiltinSortDecl))) }

  get_slot(_Name, t) { $t._Name }
  make( _Name) { new tom.gom.adt.gom.strategy.sortdecl.Make_BuiltinSortDecl( $_Name) }
}

    %op Strategy _MakeHookDecl(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl._MakeHookDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.gom.adt.gom.strategy.hookdecl._MakeHookDecl($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_MakeHookDecl(s:Strategy) {
    make(s) { `Sequence(Is_MakeHookDecl(),s) }
  }

  %op Strategy Is_MakeHookDecl() {
    make() { new tom.gom.adt.gom.strategy.hookdecl.Is_MakeHookDecl()}
  }
  
%op Strategy Make_MakeHookDecl(_Pointcut:Strategy, _SlotArgs:Strategy, _Code:Strategy, _HookType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl.Make_MakeHookDecl))) }

  get_slot(_Pointcut, t) { $t._Pointcut }
  get_slot(_SlotArgs, t) { $t._SlotArgs }
  get_slot(_Code, t) { $t._Code }
  get_slot(_HookType, t) { $t._HookType }
  make( new_Pointcut,  new_SlotArgs,  new_Code,  new_HookType) { new tom.gom.adt.gom.strategy.hookdecl.Make_MakeHookDecl( $new_Pointcut,  $new_SlotArgs,  $new_Code,  $new_HookType) }
}

    %op Strategy _BlockHookDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl._BlockHookDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.hookdecl._BlockHookDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_BlockHookDecl(s:Strategy) {
    make(s) { `Sequence(Is_BlockHookDecl(),s) }
  }

  %op Strategy Is_BlockHookDecl() {
    make() { new tom.gom.adt.gom.strategy.hookdecl.Is_BlockHookDecl()}
  }
  
%op Strategy Make_BlockHookDecl(_Pointcut:Strategy, _Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl.Make_BlockHookDecl))) }

  get_slot(_Pointcut, t) { $t._Pointcut }
  get_slot(_Code, t) { $t._Code }
  make( new_Pointcut,  new_Code) { new tom.gom.adt.gom.strategy.hookdecl.Make_BlockHookDecl( $new_Pointcut,  $new_Code) }
}

    %op Strategy _InterfaceHookDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl._InterfaceHookDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.hookdecl._InterfaceHookDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_InterfaceHookDecl(s:Strategy) {
    make(s) { `Sequence(Is_InterfaceHookDecl(),s) }
  }

  %op Strategy Is_InterfaceHookDecl() {
    make() { new tom.gom.adt.gom.strategy.hookdecl.Is_InterfaceHookDecl()}
  }
  
%op Strategy Make_InterfaceHookDecl(_Pointcut:Strategy, _Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl.Make_InterfaceHookDecl))) }

  get_slot(_Pointcut, t) { $t._Pointcut }
  get_slot(_Code, t) { $t._Code }
  make( new_Pointcut,  new_Code) { new tom.gom.adt.gom.strategy.hookdecl.Make_InterfaceHookDecl( $new_Pointcut,  $new_Code) }
}

    %op Strategy _ImportHookDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl._ImportHookDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.hookdecl._ImportHookDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_ImportHookDecl(s:Strategy) {
    make(s) { `Sequence(Is_ImportHookDecl(),s) }
  }

  %op Strategy Is_ImportHookDecl() {
    make() { new tom.gom.adt.gom.strategy.hookdecl.Is_ImportHookDecl()}
  }
  
%op Strategy Make_ImportHookDecl(_Pointcut:Strategy, _Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl.Make_ImportHookDecl))) }

  get_slot(_Pointcut, t) { $t._Pointcut }
  get_slot(_Code, t) { $t._Code }
  make( new_Pointcut,  new_Code) { new tom.gom.adt.gom.strategy.hookdecl.Make_ImportHookDecl( $new_Pointcut,  $new_Code) }
}

    %op Strategy _MappingHookDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl._MappingHookDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.hookdecl._MappingHookDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_MappingHookDecl(s:Strategy) {
    make(s) { `Sequence(Is_MappingHookDecl(),s) }
  }

  %op Strategy Is_MappingHookDecl() {
    make() { new tom.gom.adt.gom.strategy.hookdecl.Is_MappingHookDecl()}
  }
  
%op Strategy Make_MappingHookDecl(_Pointcut:Strategy, _Code:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookdecl.Make_MappingHookDecl))) }

  get_slot(_Pointcut, t) { $t._Pointcut }
  get_slot(_Code, t) { $t._Code }
  make( new_Pointcut,  new_Code) { new tom.gom.adt.gom.strategy.hookdecl.Make_MappingHookDecl( $new_Pointcut,  $new_Code) }
}

    %op Strategy _EmptyConcModuleDecl() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.moduledecllist._EmptyConcModuleDecl)))}
      
        make() { new tom.gom.adt.gom.strategy.moduledecllist._EmptyConcModuleDecl() }
    }
  
  
  %op Strategy When_EmptyConcModuleDecl(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcModuleDecl(),s) }
  }

  %op Strategy Is_EmptyConcModuleDecl() {
    make() { new tom.gom.adt.gom.strategy.moduledecllist.Is_EmptyConcModuleDecl()}
  }
  
%op Strategy Make_EmptyConcModuleDecl() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.moduledecllist.Make_EmptyConcModuleDecl))) }

  make() { new tom.gom.adt.gom.strategy.moduledecllist.Make_EmptyConcModuleDecl() }
}

    %op Strategy _ConsConcModuleDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.moduledecllist._ConsConcModuleDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.moduledecllist._ConsConcModuleDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcModuleDecl(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcModuleDecl(),s) }
  }

  %op Strategy Is_ConsConcModuleDecl() {
    make() { new tom.gom.adt.gom.strategy.moduledecllist.Is_ConsConcModuleDecl()}
  }
  
%op Strategy Make_ConsConcModuleDecl(_HeadConcModuleDecl:Strategy, _TailConcModuleDecl:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.moduledecllist.Make_ConsConcModuleDecl))) }

  get_slot(_HeadConcModuleDecl, t) { $t._HeadConcModuleDecl }
  get_slot(_TailConcModuleDecl, t) { $t._TailConcModuleDecl }
  make( new_HeadConcModuleDecl,  new_TailConcModuleDecl) { new tom.gom.adt.gom.strategy.moduledecllist.Make_ConsConcModuleDecl( $new_HeadConcModuleDecl,  $new_TailConcModuleDecl) }
}

    %op Strategy _Module(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.module._Module)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.module._Module($arg0, $arg1) }
    }
  
  
  %op Strategy When_Module(s:Strategy) {
    make(s) { `Sequence(Is_Module(),s) }
  }

  %op Strategy Is_Module() {
    make() { new tom.gom.adt.gom.strategy.module.Is_Module()}
  }
  
%op Strategy Make_Module(_MDecl:Strategy, _Sorts:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.module.Make_Module))) }

  get_slot(_MDecl, t) { $t._MDecl }
  get_slot(_Sorts, t) { $t._Sorts }
  make( new_MDecl,  new_Sorts) { new tom.gom.adt.gom.strategy.module.Make_Module( $new_MDecl,  $new_Sorts) }
}

    %op Strategy _EmptyConcField() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.fieldlist._EmptyConcField)))}
      
        make() { new tom.gom.adt.gom.strategy.fieldlist._EmptyConcField() }
    }
  
  
  %op Strategy When_EmptyConcField(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcField(),s) }
  }

  %op Strategy Is_EmptyConcField() {
    make() { new tom.gom.adt.gom.strategy.fieldlist.Is_EmptyConcField()}
  }
  
%op Strategy Make_EmptyConcField() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.fieldlist.Make_EmptyConcField))) }

  make() { new tom.gom.adt.gom.strategy.fieldlist.Make_EmptyConcField() }
}

    %op Strategy _ConsConcField(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.fieldlist._ConsConcField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.fieldlist._ConsConcField($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcField(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcField(),s) }
  }

  %op Strategy Is_ConsConcField() {
    make() { new tom.gom.adt.gom.strategy.fieldlist.Is_ConsConcField()}
  }
  
%op Strategy Make_ConsConcField(_HeadConcField:Strategy, _TailConcField:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.fieldlist.Make_ConsConcField))) }

  get_slot(_HeadConcField, t) { $t._HeadConcField }
  get_slot(_TailConcField, t) { $t._TailConcField }
  make( new_HeadConcField,  new_TailConcField) { new tom.gom.adt.gom.strategy.fieldlist.Make_ConsConcField( $new_HeadConcField,  $new_TailConcField) }
}

    %op Strategy _Grammar(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammar._Grammar)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.grammar._Grammar($arg0) }
    }
  
  
  %op Strategy When_Grammar(s:Strategy) {
    make(s) { `Sequence(Is_Grammar(),s) }
  }

  %op Strategy Is_Grammar() {
    make() { new tom.gom.adt.gom.strategy.grammar.Is_Grammar()}
  }
  
%op Strategy Make_Grammar(_ProductionList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammar.Make_Grammar))) }

  get_slot(_ProductionList, t) { $t._ProductionList }
  make( new_ProductionList) { new tom.gom.adt.gom.strategy.grammar.Make_Grammar( $new_ProductionList) }
}

    %op Strategy _Sorts(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammar._Sorts)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.grammar._Sorts($arg0) }
    }
  
  
  %op Strategy When_Sorts(s:Strategy) {
    make(s) { `Sequence(Is_Sorts(),s) }
  }

  %op Strategy Is_Sorts() {
    make() { new tom.gom.adt.gom.strategy.grammar.Is_Sorts()}
  }
  
%op Strategy Make_Sorts(_TypeList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.grammar.Make_Sorts))) }

  get_slot(_TypeList, t) { $t._TypeList }
  make( new_TypeList) { new tom.gom.adt.gom.strategy.grammar.Make_Sorts( $new_TypeList) }
}

    %op Strategy _EmptyConcSlot() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.slotlist._EmptyConcSlot)))}
      
        make() { new tom.gom.adt.gom.strategy.slotlist._EmptyConcSlot() }
    }
  
  
  %op Strategy When_EmptyConcSlot(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcSlot(),s) }
  }

  %op Strategy Is_EmptyConcSlot() {
    make() { new tom.gom.adt.gom.strategy.slotlist.Is_EmptyConcSlot()}
  }
  
%op Strategy Make_EmptyConcSlot() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.slotlist.Make_EmptyConcSlot))) }

  make() { new tom.gom.adt.gom.strategy.slotlist.Make_EmptyConcSlot() }
}

    %op Strategy _ConsConcSlot(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.slotlist._ConsConcSlot)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.slotlist._ConsConcSlot($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcSlot(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcSlot(),s) }
  }

  %op Strategy Is_ConsConcSlot() {
    make() { new tom.gom.adt.gom.strategy.slotlist.Is_ConsConcSlot()}
  }
  
%op Strategy Make_ConsConcSlot(_HeadConcSlot:Strategy, _TailConcSlot:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.slotlist.Make_ConsConcSlot))) }

  get_slot(_HeadConcSlot, t) { $t._HeadConcSlot }
  get_slot(_TailConcSlot, t) { $t._TailConcSlot }
  make( new_HeadConcSlot,  new_TailConcSlot) { new tom.gom.adt.gom.strategy.slotlist.Make_ConsConcSlot( $new_HeadConcSlot,  $new_TailConcSlot) }
}

    %op Strategy _EmptyConcSort() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortlist._EmptyConcSort)))}
      
        make() { new tom.gom.adt.gom.strategy.sortlist._EmptyConcSort() }
    }
  
  
  %op Strategy When_EmptyConcSort(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcSort(),s) }
  }

  %op Strategy Is_EmptyConcSort() {
    make() { new tom.gom.adt.gom.strategy.sortlist.Is_EmptyConcSort()}
  }
  
%op Strategy Make_EmptyConcSort() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortlist.Make_EmptyConcSort))) }

  make() { new tom.gom.adt.gom.strategy.sortlist.Make_EmptyConcSort() }
}

    %op Strategy _ConsConcSort(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortlist._ConsConcSort)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.sortlist._ConsConcSort($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcSort(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcSort(),s) }
  }

  %op Strategy Is_ConsConcSort() {
    make() { new tom.gom.adt.gom.strategy.sortlist.Is_ConsConcSort()}
  }
  
%op Strategy Make_ConsConcSort(_HeadConcSort:Strategy, _TailConcSort:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.sortlist.Make_ConsConcSort))) }

  get_slot(_HeadConcSort, t) { $t._HeadConcSort }
  get_slot(_TailConcSort, t) { $t._TailConcSort }
  make( new_HeadConcSort,  new_TailConcSort) { new tom.gom.adt.gom.strategy.sortlist.Make_ConsConcSort( $new_HeadConcSort,  $new_TailConcSort) }
}

    %op Strategy _Arg(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.arg._Arg)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.arg._Arg($arg0) }
    }
  
  
  %op Strategy When_Arg(s:Strategy) {
    make(s) { `Sequence(Is_Arg(),s) }
  }

  %op Strategy Is_Arg() {
    make() { new tom.gom.adt.gom.strategy.arg.Is_Arg()}
  }
  
%op Strategy Make_Arg(_Name:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.arg.Make_Arg))) }

  get_slot(_Name, t) { $t._Name }
  make( _Name) { new tom.gom.adt.gom.strategy.arg.Make_Arg( $_Name) }
}

    %op Strategy _GomModuleName(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodulename._GomModuleName)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.gommodulename._GomModuleName($arg0) }
    }
  
  
  %op Strategy When_GomModuleName(s:Strategy) {
    make(s) { `Sequence(Is_GomModuleName(),s) }
  }

  %op Strategy Is_GomModuleName() {
    make() { new tom.gom.adt.gom.strategy.gommodulename.Is_GomModuleName()}
  }
  
%op Strategy Make_GomModuleName(_Name:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gommodulename.Make_GomModuleName))) }

  get_slot(_Name, t) { $t._Name }
  make( _Name) { new tom.gom.adt.gom.strategy.gommodulename.Make_GomModuleName( $_Name) }
}

    %op Strategy _StarredField(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.field._StarredField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.field._StarredField($arg0) }
    }
  
  
  %op Strategy When_StarredField(s:Strategy) {
    make(s) { `Sequence(Is_StarredField(),s) }
  }

  %op Strategy Is_StarredField() {
    make() { new tom.gom.adt.gom.strategy.field.Is_StarredField()}
  }
  
%op Strategy Make_StarredField(_FieldType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.field.Make_StarredField))) }

  get_slot(_FieldType, t) { $t._FieldType }
  make( new_FieldType) { new tom.gom.adt.gom.strategy.field.Make_StarredField( $new_FieldType) }
}

    %op Strategy _NamedField(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.field._NamedField)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.field._NamedField($arg0, $arg1) }
    }
  
  
  %op Strategy When_NamedField(s:Strategy) {
    make(s) { `Sequence(Is_NamedField(),s) }
  }

  %op Strategy Is_NamedField() {
    make() { new tom.gom.adt.gom.strategy.field.Is_NamedField()}
  }
  
%op Strategy Make_NamedField(_Name:String, _FieldType:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.field.Make_NamedField))) }

  get_slot(_Name, t) { $t._Name }
  get_slot(_FieldType, t) { $t._FieldType }
  make( _Name,  new_FieldType) { new tom.gom.adt.gom.strategy.field.Make_NamedField( $_Name,  $new_FieldType) }
}

    %op Strategy _Production(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.production._Production)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        make(arg0, arg1, arg2, arg3) { new tom.gom.adt.gom.strategy.production._Production($arg0, $arg1, $arg2, $arg3) }
    }
  
  
  %op Strategy When_Production(s:Strategy) {
    make(s) { `Sequence(Is_Production(),s) }
  }

  %op Strategy Is_Production() {
    make() { new tom.gom.adt.gom.strategy.production.Is_Production()}
  }
  
%op Strategy Make_Production(_Name:String, _DomainList:Strategy, _Codomain:Strategy, _Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.production.Make_Production))) }

  get_slot(_Name, t) { $t._Name }
  get_slot(_DomainList, t) { $t._DomainList }
  get_slot(_Codomain, t) { $t._Codomain }
  get_slot(_Option, t) { $t._Option }
  make( _Name,  new_DomainList,  new_Codomain,  new_Option) { new tom.gom.adt.gom.strategy.production.Make_Production( $_Name,  $new_DomainList,  $new_Codomain,  $new_Option) }
}

    %op Strategy _Hook(arg0:Strategy, arg1:Strategy, arg2:Strategy, arg3:Strategy, arg4:Strategy, arg5:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.production._Hook)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        get_slot(arg2, t) { $t.getArgument(2) }
        get_slot(arg3, t) { $t.getArgument(3) }
        get_slot(arg4, t) { $t.getArgument(4) }
        get_slot(arg5, t) { $t.getArgument(5) }
        make(arg0, arg1, arg2, arg3, arg4, arg5) { new tom.gom.adt.gom.strategy.production._Hook($arg0, $arg1, $arg2, $arg3, $arg4, $arg5) }
    }
  
  
  %op Strategy When_Hook(s:Strategy) {
    make(s) { `Sequence(Is_Hook(),s) }
  }

  %op Strategy Is_Hook() {
    make() { new tom.gom.adt.gom.strategy.production.Is_Hook()}
  }
  
%op Strategy Make_Hook(_NameType:Strategy, _Name:String, _HookType:Strategy, _Args:Strategy, _StringCode:String, _Option:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.production.Make_Hook))) }

  get_slot(_NameType, t) { $t._NameType }
  get_slot(_Name, t) { $t._Name }
  get_slot(_HookType, t) { $t._HookType }
  get_slot(_Args, t) { $t._Args }
  get_slot(_StringCode, t) { $t._StringCode }
  get_slot(_Option, t) { $t._Option }
  make( new_NameType,  _Name,  new_HookType,  new_Args,  _StringCode,  new_Option) { new tom.gom.adt.gom.strategy.production.Make_Hook( $new_NameType,  $_Name,  $new_HookType,  $new_Args,  $_StringCode,  $new_Option) }
}

    %op Strategy _SortType(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.production._SortType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.production._SortType($arg0, $arg1) }
    }
  
  
  %op Strategy When_SortType(s:Strategy) {
    make(s) { `Sequence(Is_SortType(),s) }
  }

  %op Strategy Is_SortType() {
    make() { new tom.gom.adt.gom.strategy.production.Is_SortType()}
  }
  
%op Strategy Make_SortType(_Type:Strategy, _ProductionList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.production.Make_SortType))) }

  get_slot(_Type, t) { $t._Type }
  get_slot(_ProductionList, t) { $t._ProductionList }
  make( new_Type,  new_ProductionList) { new tom.gom.adt.gom.strategy.production.Make_SortType( $new_Type,  $new_ProductionList) }
}

    %op Strategy _ModuleDecl(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.moduledecl._ModuleDecl)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.moduledecl._ModuleDecl($arg0, $arg1) }
    }
  
  
  %op Strategy When_ModuleDecl(s:Strategy) {
    make(s) { `Sequence(Is_ModuleDecl(),s) }
  }

  %op Strategy Is_ModuleDecl() {
    make() { new tom.gom.adt.gom.strategy.moduledecl.Is_ModuleDecl()}
  }
  
%op Strategy Make_ModuleDecl(_ModuleName:Strategy, _Pkg:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.moduledecl.Make_ModuleDecl))) }

  get_slot(_ModuleName, t) { $t._ModuleName }
  get_slot(_Pkg, t) { $t._Pkg }
  make( new_ModuleName,  _Pkg) { new tom.gom.adt.gom.strategy.moduledecl.Make_ModuleDecl( $new_ModuleName,  $_Pkg) }
}

    %op Strategy _EmptyConcModule() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.modulelist._EmptyConcModule)))}
      
        make() { new tom.gom.adt.gom.strategy.modulelist._EmptyConcModule() }
    }
  
  
  %op Strategy When_EmptyConcModule(s:Strategy) {
    make(s) { `Sequence(Is_EmptyConcModule(),s) }
  }

  %op Strategy Is_EmptyConcModule() {
    make() { new tom.gom.adt.gom.strategy.modulelist.Is_EmptyConcModule()}
  }
  
%op Strategy Make_EmptyConcModule() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.modulelist.Make_EmptyConcModule))) }

  make() { new tom.gom.adt.gom.strategy.modulelist.Make_EmptyConcModule() }
}

    %op Strategy _ConsConcModule(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.modulelist._ConsConcModule)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.modulelist._ConsConcModule($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsConcModule(s:Strategy) {
    make(s) { `Sequence(Is_ConsConcModule(),s) }
  }

  %op Strategy Is_ConsConcModule() {
    make() { new tom.gom.adt.gom.strategy.modulelist.Is_ConsConcModule()}
  }
  
%op Strategy Make_ConsConcModule(_HeadConcModule:Strategy, _TailConcModule:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.modulelist.Make_ConsConcModule))) }

  get_slot(_HeadConcModule, t) { $t._HeadConcModule }
  get_slot(_TailConcModule, t) { $t._TailConcModule }
  make( new_HeadConcModule,  new_TailConcModule) { new tom.gom.adt.gom.strategy.modulelist.Make_ConsConcModule( $new_HeadConcModule,  $new_TailConcModule) }
}

    %op Strategy _GomType(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gomtype._GomType)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.gomtype._GomType($arg0) }
    }
  
  
  %op Strategy When_GomType(s:Strategy) {
    make(s) { `Sequence(Is_GomType(),s) }
  }

  %op Strategy Is_GomType() {
    make() { new tom.gom.adt.gom.strategy.gomtype.Is_GomType()}
  }
  
%op Strategy Make_GomType(_Name:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.gomtype.Make_GomType))) }

  get_slot(_Name, t) { $t._Name }
  make( _Name) { new tom.gom.adt.gom.strategy.gomtype.Make_GomType( $_Name) }
}

    %op Strategy _Import(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.importedmodule._Import)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.importedmodule._Import($arg0) }
    }
  
  
  %op Strategy When_Import(s:Strategy) {
    make(s) { `Sequence(Is_Import(),s) }
  }

  %op Strategy Is_Import() {
    make() { new tom.gom.adt.gom.strategy.importedmodule.Is_Import()}
  }
  
%op Strategy Make_Import(_ModuleName:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.importedmodule.Make_Import))) }

  get_slot(_ModuleName, t) { $t._ModuleName }
  make( new_ModuleName) { new tom.gom.adt.gom.strategy.importedmodule.Make_Import( $new_ModuleName) }
}

    %op Strategy _Origin(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.option._Origin)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.option._Origin($arg0) }
    }
  
  
  %op Strategy When_Origin(s:Strategy) {
    make(s) { `Sequence(Is_Origin(),s) }
  }

  %op Strategy Is_Origin() {
    make() { new tom.gom.adt.gom.strategy.option.Is_Origin()}
  }
  
%op Strategy Make_Origin(_Line:int) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.option.Make_Origin))) }

  get_slot(_Line, t) { $t._Line }
  make( _Line) { new tom.gom.adt.gom.strategy.option.Make_Origin( $_Line) }
}

    %op Strategy _EmptyOptionList() {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.option._EmptyOptionList)))}
      
        make() { new tom.gom.adt.gom.strategy.option._EmptyOptionList() }
    }
  
  
  %op Strategy When_EmptyOptionList(s:Strategy) {
    make(s) { `Sequence(Is_EmptyOptionList(),s) }
  }

  %op Strategy Is_EmptyOptionList() {
    make() { new tom.gom.adt.gom.strategy.option.Is_EmptyOptionList()}
  }
  
%op Strategy Make_EmptyOptionList() {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.option.Make_EmptyOptionList))) }

  make() { new tom.gom.adt.gom.strategy.option.Make_EmptyOptionList() }
}

    %op Strategy _ConsOptionList(arg0:Strategy, arg1:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.option._ConsOptionList)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        get_slot(arg1, t) { $t.getArgument(1) }
        make(arg0, arg1) { new tom.gom.adt.gom.strategy.option._ConsOptionList($arg0, $arg1) }
    }
  
  
  %op Strategy When_ConsOptionList(s:Strategy) {
    make(s) { `Sequence(Is_ConsOptionList(),s) }
  }

  %op Strategy Is_ConsOptionList() {
    make() { new tom.gom.adt.gom.strategy.option.Is_ConsOptionList()}
  }
  
%op Strategy Make_ConsOptionList(_HeadOptionList:Strategy, _TailOptionList:Strategy) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.option.Make_ConsOptionList))) }

  get_slot(_HeadOptionList, t) { $t._HeadOptionList }
  get_slot(_TailOptionList, t) { $t._TailOptionList }
  make( new_HeadOptionList,  new_TailOptionList) { new tom.gom.adt.gom.strategy.option.Make_ConsOptionList( $new_HeadOptionList,  $new_TailOptionList) }
}

    %op Strategy _HookKind(arg0:Strategy) {
      is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookkind._HookKind)))}
      
        get_slot(arg0, t) { $t.getArgument(0) }
        make(arg0) { new tom.gom.adt.gom.strategy.hookkind._HookKind($arg0) }
    }
  
  
  %op Strategy When_HookKind(s:Strategy) {
    make(s) { `Sequence(Is_HookKind(),s) }
  }

  %op Strategy Is_HookKind() {
    make() { new tom.gom.adt.gom.strategy.hookkind.Is_HookKind()}
  }
  
%op Strategy Make_HookKind(_kind:String) {
  is_fsym(t) { (($t!=null) && ($t instanceof (tom.gom.adt.gom.strategy.hookkind.Make_HookKind))) }

  get_slot(_kind, t) { $t._kind }
  make( _kind) { new tom.gom.adt.gom.strategy.hookkind.Make_HookKind( $_kind) }
}

            %op Strategy _CodeList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_CodeList"),Choice(_ConsCodeList(sub,MuVar("x_CodeList")),_EmptyCodeList())) }
            }
            
            %op Strategy _ConcSlotField(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcSlotField"),Choice(_ConsConcSlotField(sub,MuVar("x_ConcSlotField")),_EmptyConcSlotField())) }
            }
            
            %op Strategy _ConcGomClass(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcGomClass"),Choice(_ConsConcGomClass(sub,MuVar("x_ConcGomClass")),_EmptyConcGomClass())) }
            }
            
            %op Strategy _ConcClassName(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcClassName"),Choice(_ConsConcClassName(sub,MuVar("x_ConcClassName")),_EmptyConcClassName())) }
            }
            
            %op Strategy _ConcHook(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcHook"),Choice(_ConsConcHook(sub,MuVar("x_ConcHook")),_EmptyConcHook())) }
            }
            
            %op Strategy _ConcArg(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcArg"),Choice(_ConsConcArg(sub,MuVar("x_ConcArg")),_EmptyConcArg())) }
            }
            
            %op Strategy _ConcGomModule(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcGomModule"),Choice(_ConsConcGomModule(sub,MuVar("x_ConcGomModule")),_EmptyConcGomModule())) }
            }
            
            %op Strategy _ConcGrammar(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcGrammar"),Choice(_ConsConcGrammar(sub,MuVar("x_ConcGrammar")),_EmptyConcGrammar())) }
            }
            
            %op Strategy _ConcSection(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcSection"),Choice(_ConsConcSection(sub,MuVar("x_ConcSection")),_EmptyConcSection())) }
            }
            
            %op Strategy _ConcOperator(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcOperator"),Choice(_ConsConcOperator(sub,MuVar("x_ConcOperator")),_EmptyConcOperator())) }
            }
            
            %op Strategy _ConcHookDecl(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcHookDecl"),Choice(_ConsConcHookDecl(sub,MuVar("x_ConcHookDecl")),_EmptyConcHookDecl())) }
            }
            
            %op Strategy _ConcSortDecl(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcSortDecl"),Choice(_ConsConcSortDecl(sub,MuVar("x_ConcSortDecl")),_EmptyConcSortDecl())) }
            }
            
            %op Strategy _ConcGomType(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcGomType"),Choice(_ConsConcGomType(sub,MuVar("x_ConcGomType")),_EmptyConcGomType())) }
            }
            
            %op Strategy _ConcProduction(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcProduction"),Choice(_ConsConcProduction(sub,MuVar("x_ConcProduction")),_EmptyConcProduction())) }
            }
            
            %op Strategy _ConcImportedModule(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcImportedModule"),Choice(_ConsConcImportedModule(sub,MuVar("x_ConcImportedModule")),_EmptyConcImportedModule())) }
            }
            
            %op Strategy _ConcModuleDecl(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcModuleDecl"),Choice(_ConsConcModuleDecl(sub,MuVar("x_ConcModuleDecl")),_EmptyConcModuleDecl())) }
            }
            
            %op Strategy _ConcField(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcField"),Choice(_ConsConcField(sub,MuVar("x_ConcField")),_EmptyConcField())) }
            }
            
            %op Strategy _ConcSlot(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcSlot"),Choice(_ConsConcSlot(sub,MuVar("x_ConcSlot")),_EmptyConcSlot())) }
            }
            
            %op Strategy _ConcSort(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcSort"),Choice(_ConsConcSort(sub,MuVar("x_ConcSort")),_EmptyConcSort())) }
            }
            
            %op Strategy _ConcModule(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_ConcModule"),Choice(_ConsConcModule(sub,MuVar("x_ConcModule")),_EmptyConcModule())) }
            }
            
            %op Strategy _OptionList(sub:Strategy) {
            is_fsym(t) { false }
            make(sub)  { `mu(MuVar("x_OptionList"),Choice(_ConsOptionList(sub,MuVar("x_OptionList")),_EmptyOptionList())) }
            }
            