
%include { string.tom }

%include { int.tom }

%typeterm Theory {
  implement { tom.engine.adt.theory.types.Theory }
  is_sort(t) { ($t instanceof tom.engine.adt.theory.types.Theory) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm ElementaryTheory {
  implement { tom.engine.adt.theory.types.ElementaryTheory }
  is_sort(t) { ($t instanceof tom.engine.adt.theory.types.ElementaryTheory) }

  equals(t1,t2) { ($t1==$t2) }

}
%op Theory EmptyconcElementaryTheory() {
  is_fsym(t) { ($t instanceof tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory) }
  make() { tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() }
}

%op Theory ConsconcElementaryTheory(HeadconcElementaryTheory:ElementaryTheory, TailconcElementaryTheory:Theory) {
  is_fsym(t) { ($t instanceof tom.engine.adt.theory.types.theory.ConsconcElementaryTheory) }
  get_slot(HeadconcElementaryTheory, t) { $t.getHeadconcElementaryTheory() }
  get_slot(TailconcElementaryTheory, t) { $t.getTailconcElementaryTheory() }
  make(t0, t1) { tom.engine.adt.theory.types.theory.ConsconcElementaryTheory.make($t0, $t1) }
}

%op ElementaryTheory Syntactic() {
  is_fsym(t) { ($t instanceof tom.engine.adt.theory.types.elementarytheory.Syntactic) }
  make() { tom.engine.adt.theory.types.elementarytheory.Syntactic.make() }
}

%op ElementaryTheory Associative() {
  is_fsym(t) { ($t instanceof tom.engine.adt.theory.types.elementarytheory.Associative) }
  make() { tom.engine.adt.theory.types.elementarytheory.Associative.make() }
}

%op ElementaryTheory Unitary() {
  is_fsym(t) { ($t instanceof tom.engine.adt.theory.types.elementarytheory.Unitary) }
  make() { tom.engine.adt.theory.types.elementarytheory.Unitary.make() }
}

%op ElementaryTheory TrueAU() {
  is_fsym(t) { ($t instanceof tom.engine.adt.theory.types.elementarytheory.TrueAU) }
  make() { tom.engine.adt.theory.types.elementarytheory.TrueAU.make() }
}


%oplist Theory concElementaryTheory(ElementaryTheory*) {
  is_fsym(t) { (($t instanceof tom.engine.adt.theory.types.theory.ConsconcElementaryTheory) || ($t instanceof tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory)) }
  make_empty() { tom.engine.adt.theory.types.theory.EmptyconcElementaryTheory.make() }
  make_insert(e,l) { tom.engine.adt.theory.types.theory.ConsconcElementaryTheory.make($e,$l) }
  get_head(l) { $l.getHeadconcElementaryTheory() }
  get_tail(l) { $l.getTailconcElementaryTheory() }
  is_empty(l) { $l.isEmptyconcElementaryTheory() }
}
