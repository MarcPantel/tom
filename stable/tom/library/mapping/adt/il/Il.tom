
%include { string.tom }
%include { int.tom }
%include { double.tom }
%include { aterm.tom }
%include { atermlist.tom }

%typeterm Deriv {
  implement { tom.engine.adt.il.types.Deriv }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Expr {
  implement { tom.engine.adt.il.types.Expr }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Variable {
  implement { tom.engine.adt.il.types.Variable }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Environment {
  implement { tom.engine.adt.il.types.Environment }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm InstrList {
  implement { tom.engine.adt.il.types.InstrList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm ExprList {
  implement { tom.engine.adt.il.types.ExprList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Substitution {
  implement { tom.engine.adt.il.types.Substitution }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Symbol {
  implement { tom.engine.adt.il.types.Symbol }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Seq {
  implement { tom.engine.adt.il.types.Seq }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm SubstitutionList {
  implement { tom.engine.adt.il.types.SubstitutionList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Term {
  implement { tom.engine.adt.il.types.Term }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm TermList {
  implement { tom.engine.adt.il.types.TermList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm Instr {
  implement { tom.engine.adt.il.types.Instr }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm AbsTerm {
  implement { tom.engine.adt.il.types.AbsTerm }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}


%typeterm DerivTree {
  implement { tom.engine.adt.il.types.DerivTree }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.engine.adt.il.IlBasicStrategy }
}

%op Deriv ebs(Lhs:Environment, Rhs:Environment) {
  is_fsym(t) { (t!=null) && t.isebs() }
  get_slot(Lhs, t) { t.getLhs() }
  get_slot(Rhs, t) { t.getRhs() }
  make(t0, t1) { tom.engine.adt.il.types.deriv.ebs.make(t0, t1)}
}

%op Expr iltrue(Subst:SubstitutionList) {
  is_fsym(t) { (t!=null) && t.isiltrue() }
  get_slot(Subst, t) { t.getSubst() }
  make(t0) { tom.engine.adt.il.types.expr.iltrue.make(t0)}
}

%op Expr ilfalse() {
  is_fsym(t) { (t!=null) && t.isilfalse() }
  make() { tom.engine.adt.il.types.expr.ilfalse.make()}
}

%op Expr isfsym(T:Term, Symbol:Symbol) {
  is_fsym(t) { (t!=null) && t.isisfsym() }
  get_slot(T, t) { t.getT() }
  get_slot(Symbol, t) { t.getSymbol() }
  make(t0, t1) { tom.engine.adt.il.types.expr.isfsym.make(t0, t1)}
}

%op Expr eq(Lt:Term, Rt:Term) {
  is_fsym(t) { (t!=null) && t.iseq() }
  get_slot(Lt, t) { t.getLt() }
  get_slot(Rt, t) { t.getRt() }
  make(t0, t1) { tom.engine.adt.il.types.expr.eq.make(t0, t1)}
}

%op Expr tisfsym(Abst:AbsTerm, Symbol:Symbol) {
  is_fsym(t) { (t!=null) && t.istisfsym() }
  get_slot(Abst, t) { t.getAbst() }
  get_slot(Symbol, t) { t.getSymbol() }
  make(t0, t1) { tom.engine.adt.il.types.expr.tisfsym.make(t0, t1)}
}

%op Expr teq(Labst:AbsTerm, Rabst:AbsTerm) {
  is_fsym(t) { (t!=null) && t.isteq() }
  get_slot(Labst, t) { t.getLabst() }
  get_slot(Rabst, t) { t.getRabst() }
  make(t0, t1) { tom.engine.adt.il.types.expr.teq.make(t0, t1)}
}

%op Expr iland(Left:Expr, Right:Expr) {
  is_fsym(t) { (t!=null) && t.isiland() }
  get_slot(Left, t) { t.getLeft() }
  get_slot(Right, t) { t.getRight() }
  make(t0, t1) { tom.engine.adt.il.types.expr.iland.make(t0, t1)}
}

%op Expr ilor(Left:Expr, Right:Expr) {
  is_fsym(t) { (t!=null) && t.isilor() }
  get_slot(Left, t) { t.getLeft() }
  get_slot(Right, t) { t.getRight() }
  make(t0, t1) { tom.engine.adt.il.types.expr.ilor.make(t0, t1)}
}

%op Expr ilnot(Exp:Expr) {
  is_fsym(t) { (t!=null) && t.isilnot() }
  get_slot(Exp, t) { t.getExp() }
  make(t0) { tom.engine.adt.il.types.expr.ilnot.make(t0)}
}

%op Expr appSubsE(Subs:SubstitutionList, E:Expr) {
  is_fsym(t) { (t!=null) && t.isappSubsE() }
  get_slot(Subs, t) { t.getSubs() }
  get_slot(E, t) { t.getE() }
  make(t0, t1) { tom.engine.adt.il.types.expr.appSubsE.make(t0, t1)}
}

%op Variable var(Name:String) {
  is_fsym(t) { (t!=null) && t.isvar() }
  get_slot(Name, t) { t.getName() }
  make(t0) { tom.engine.adt.il.types.variable.var.make(t0)}
}

%op Environment env(Subs:SubstitutionList, I:Instr) {
  is_fsym(t) { (t!=null) && t.isenv() }
  get_slot(Subs, t) { t.getSubs() }
  get_slot(I, t) { t.getI() }
  make(t0, t1) { tom.engine.adt.il.types.environment.env.make(t0, t1)}
}

%op Substitution undefsubs() {
  is_fsym(t) { (t!=null) && t.isundefsubs() }
  make() { tom.engine.adt.il.types.substitution.undefsubs.make()}
}

%op Substitution is(Var:Variable, Term:Term) {
  is_fsym(t) { (t!=null) && t.isis() }
  get_slot(Var, t) { t.getVar() }
  get_slot(Term, t) { t.getTerm() }
  make(t0, t1) { tom.engine.adt.il.types.substitution.is.make(t0, t1)}
}

%op Symbol fsymbol(Name:String) {
  is_fsym(t) { (t!=null) && t.isfsymbol() }
  get_slot(Name, t) { t.getName() }
  make(t0) { tom.engine.adt.il.types.symbol.fsymbol.make(t0)}
}

%op Seq seq() {
  is_fsym(t) { (t!=null) && t.isseq() }
  make() { tom.engine.adt.il.types.seq.seq.make()}
}

%op Seq dedexpr(Exprs:ExprList) {
  is_fsym(t) { (t!=null) && t.isdedexpr() }
  get_slot(Exprs, t) { t.getExprs() }
  make(t0) { tom.engine.adt.il.types.seq.dedexpr.make(t0)}
}

%op Seq dedterm(Terms:TermList) {
  is_fsym(t) { (t!=null) && t.isdedterm() }
  get_slot(Terms, t) { t.getTerms() }
  make(t0) { tom.engine.adt.il.types.seq.dedterm.make(t0)}
}

%op Term tau(Abst:AbsTerm) {
  is_fsym(t) { (t!=null) && t.istau() }
  get_slot(Abst, t) { t.getAbst() }
  make(t0) { tom.engine.adt.il.types.term.tau.make(t0)}
}

%op Term repr(Term:String) {
  is_fsym(t) { (t!=null) && t.isrepr() }
  get_slot(Term, t) { t.getTerm() }
  make(t0) { tom.engine.adt.il.types.term.repr.make(t0)}
}

%op Term subterm(Symbol:Symbol, T:Term, Index:int) {
  is_fsym(t) { (t!=null) && t.issubterm() }
  get_slot(Symbol, t) { t.getSymbol() }
  get_slot(T, t) { t.getT() }
  get_slot(Index, t) { t.getIndex() }
  make(t0, t1, t2) { tom.engine.adt.il.types.term.subterm.make(t0, t1, t2)}
}

%op Term slot(Symbol:Symbol, T:Term, Name:String) {
  is_fsym(t) { (t!=null) && t.isslot() }
  get_slot(Symbol, t) { t.getSymbol() }
  get_slot(T, t) { t.getT() }
  get_slot(Name, t) { t.getName() }
  make(t0, t1, t2) { tom.engine.adt.il.types.term.slot.make(t0, t1, t2)}
}

%op Term appSubsT(Subs:SubstitutionList, T:Term) {
  is_fsym(t) { (t!=null) && t.isappSubsT() }
  get_slot(Subs, t) { t.getSubs() }
  get_slot(T, t) { t.getT() }
  make(t0, t1) { tom.engine.adt.il.types.term.appSubsT.make(t0, t1)}
}

%op Instr accept(Positive:ATerm, Negative:ATerm) {
  is_fsym(t) { (t!=null) && t.isaccept() }
  get_slot(Positive, t) { t.getPositive() }
  get_slot(Negative, t) { t.getNegative() }
  make(t0, t1) { tom.engine.adt.il.types.instr.accept.make(t0, t1)}
}

%op Instr refuse() {
  is_fsym(t) { (t!=null) && t.isrefuse() }
  make() { tom.engine.adt.il.types.instr.refuse.make()}
}

%op Instr ITE(E:Expr, Ift:Instr, Iff:Instr) {
  is_fsym(t) { (t!=null) && t.isITE() }
  get_slot(E, t) { t.getE() }
  get_slot(Ift, t) { t.getIft() }
  get_slot(Iff, t) { t.getIff() }
  make(t0, t1, t2) { tom.engine.adt.il.types.instr.ITE.make(t0, t1, t2)}
}

%op Instr ILLet(Var:Variable, T:Term, Body:Instr) {
  is_fsym(t) { (t!=null) && t.isILLet() }
  get_slot(Var, t) { t.getVar() }
  get_slot(T, t) { t.getT() }
  get_slot(Body, t) { t.getBody() }
  make(t0, t1, t2) { tom.engine.adt.il.types.instr.ILLet.make(t0, t1, t2)}
}

%op Instr sequence(Instrlist:InstrList) {
  is_fsym(t) { (t!=null) && t.issequence() }
  get_slot(Instrlist, t) { t.getInstrlist() }
  make(t0) { tom.engine.adt.il.types.instr.sequence.make(t0)}
}

%op AbsTerm absvar(Varname:Variable) {
  is_fsym(t) { (t!=null) && t.isabsvar() }
  get_slot(Varname, t) { t.getVarname() }
  make(t0) { tom.engine.adt.il.types.absterm.absvar.make(t0)}
}

%op AbsTerm st(Symbol:Symbol, Abst:AbsTerm, Index:int) {
  is_fsym(t) { (t!=null) && t.isst() }
  get_slot(Symbol, t) { t.getSymbol() }
  get_slot(Abst, t) { t.getAbst() }
  get_slot(Index, t) { t.getIndex() }
  make(t0, t1, t2) { tom.engine.adt.il.types.absterm.st.make(t0, t1, t2)}
}

%op AbsTerm sl(Symbol:Symbol, Abst:AbsTerm, Name:String) {
  is_fsym(t) { (t!=null) && t.issl() }
  get_slot(Symbol, t) { t.getSymbol() }
  get_slot(Abst, t) { t.getAbst() }
  get_slot(Name, t) { t.getName() }
  make(t0, t1, t2) { tom.engine.adt.il.types.absterm.sl.make(t0, t1, t2)}
}

%op DerivTree endderiv() {
  is_fsym(t) { (t!=null) && t.isendderiv() }
  make() { tom.engine.adt.il.types.derivtree.endderiv.make()}
}

%op DerivTree derivrule(Name:String, Post:Deriv, Pre:DerivTree, Cond:Seq) {
  is_fsym(t) { (t!=null) && t.isderivrule() }
  get_slot(Name, t) { t.getName() }
  get_slot(Post, t) { t.getPost() }
  get_slot(Pre, t) { t.getPre() }
  get_slot(Cond, t) { t.getCond() }
  make(t0, t1, t2, t3) { tom.engine.adt.il.types.derivtree.derivrule.make(t0, t1, t2, t3)}
}

%op DerivTree derivrule2(Name:String, Post:Deriv, Pre:DerivTree, Pre2:DerivTree, Cond:Seq) {
  is_fsym(t) { (t!=null) && t.isderivrule2() }
  get_slot(Name, t) { t.getName() }
  get_slot(Post, t) { t.getPost() }
  get_slot(Pre, t) { t.getPre() }
  get_slot(Pre2, t) { t.getPre2() }
  get_slot(Cond, t) { t.getCond() }
  make(t0, t1, t2, t3, t4) { tom.engine.adt.il.types.derivtree.derivrule2.make(t0, t1, t2, t3, t4)}
}


%oplist InstrList semicolon(Instr*) {
  is_fsym(t) { t instanceof tom.engine.adt.il.types.instrlist.Conssemicolon || t instanceof tom.engine.adt.il.types.instrlist.Emptysemicolon }
  make_empty() { tom.engine.adt.il.types.instrlist.Emptysemicolon.make() }
  make_insert(e,l) { tom.engine.adt.il.types.instrlist.Conssemicolon.make(e,l) }
  get_head(l) { l.getHeadsemicolon() }
  get_tail(l) { l.getTailsemicolon() }
  is_empty(l) { l.isEmptysemicolon() }
}

%oplist ExprList concExpr(Expr*) {
  is_fsym(t) { t instanceof tom.engine.adt.il.types.exprlist.ConsconcExpr || t instanceof tom.engine.adt.il.types.exprlist.EmptyconcExpr }
  make_empty() { tom.engine.adt.il.types.exprlist.EmptyconcExpr.make() }
  make_insert(e,l) { tom.engine.adt.il.types.exprlist.ConsconcExpr.make(e,l) }
  get_head(l) { l.getHeadconcExpr() }
  get_tail(l) { l.getTailconcExpr() }
  is_empty(l) { l.isEmptyconcExpr() }
}

%oplist SubstitutionList subs(Substitution*) {
  is_fsym(t) { t instanceof tom.engine.adt.il.types.substitutionlist.Conssubs || t instanceof tom.engine.adt.il.types.substitutionlist.Emptysubs }
  make_empty() { tom.engine.adt.il.types.substitutionlist.Emptysubs.make() }
  make_insert(e,l) { tom.engine.adt.il.types.substitutionlist.Conssubs.make(e,l) }
  get_head(l) { l.getHeadsubs() }
  get_tail(l) { l.getTailsubs() }
  is_empty(l) { l.isEmptysubs() }
}

%oplist TermList concTerm(Term*) {
  is_fsym(t) { t instanceof tom.engine.adt.il.types.termlist.ConsconcTerm || t instanceof tom.engine.adt.il.types.termlist.EmptyconcTerm }
  make_empty() { tom.engine.adt.il.types.termlist.EmptyconcTerm.make() }
  make_insert(e,l) { tom.engine.adt.il.types.termlist.ConsconcTerm.make(e,l) }
  get_head(l) { l.getHeadconcTerm() }
  get_tail(l) { l.getTailconcTerm() }
  is_empty(l) { l.isEmptyconcTerm() }
}
