
%include { boolean.tom }

%include { string.tom }

%include { int.tom }

%typeterm Condition {
  implement { tom.gom.adt.rule.types.Condition }
  is_sort(t) { ($t instanceof tom.gom.adt.rule.types.Condition) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm RuleList {
  implement { tom.gom.adt.rule.types.RuleList }
  is_sort(t) { ($t instanceof tom.gom.adt.rule.types.RuleList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm Rule {
  implement { tom.gom.adt.rule.types.Rule }
  is_sort(t) { ($t instanceof tom.gom.adt.rule.types.Rule) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TermList {
  implement { tom.gom.adt.rule.types.TermList }
  is_sort(t) { ($t instanceof tom.gom.adt.rule.types.TermList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm Term {
  implement { tom.gom.adt.rule.types.Term }
  is_sort(t) { ($t instanceof tom.gom.adt.rule.types.Term) }

  equals(t1,t2) { ($t1==$t2) }

}
%op Condition CondEquals(t1:Term, t2:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.CondEquals) }
  get_slot(t1, t) { $t.gett1() }
  get_slot(t2, t) { $t.gett2() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.CondEquals.make($t0, $t1) }
}

%op Condition CondNotEquals(t1:Term, t2:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.CondNotEquals) }
  get_slot(t1, t) { $t.gett1() }
  get_slot(t2, t) { $t.gett2() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.CondNotEquals.make($t0, $t1) }
}

%op Condition CondLessEquals(t1:Term, t2:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.CondLessEquals) }
  get_slot(t1, t) { $t.gett1() }
  get_slot(t2, t) { $t.gett2() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.CondLessEquals.make($t0, $t1) }
}

%op Condition CondLessThan(t1:Term, t2:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.CondLessThan) }
  get_slot(t1, t) { $t.gett1() }
  get_slot(t2, t) { $t.gett2() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.CondLessThan.make($t0, $t1) }
}

%op Condition CondGreaterEquals(t1:Term, t2:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.CondGreaterEquals) }
  get_slot(t1, t) { $t.gett1() }
  get_slot(t2, t) { $t.gett2() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.CondGreaterEquals.make($t0, $t1) }
}

%op Condition CondGreaterThan(t1:Term, t2:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.CondGreaterThan) }
  get_slot(t1, t) { $t.gett1() }
  get_slot(t2, t) { $t.gett2() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.CondGreaterThan.make($t0, $t1) }
}

%op Condition EmptyCondAnd() {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.EmptyCondAnd) }
  make() { tom.gom.adt.rule.types.condition.EmptyCondAnd.make() }
}

%op Condition ConsCondAnd(HeadCondAnd:Condition, TailCondAnd:Condition) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.ConsCondAnd) }
  get_slot(HeadCondAnd, t) { $t.getHeadCondAnd() }
  get_slot(TailCondAnd, t) { $t.getTailCondAnd() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.ConsCondAnd.make($t0, $t1) }
}

%op Condition EmptyCondOr() {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.EmptyCondOr) }
  make() { tom.gom.adt.rule.types.condition.EmptyCondOr.make() }
}

%op Condition ConsCondOr(HeadCondOr:Condition, TailCondOr:Condition) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.ConsCondOr) }
  get_slot(HeadCondOr, t) { $t.getHeadCondOr() }
  get_slot(TailCondOr, t) { $t.getTailCondOr() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.ConsCondOr.make($t0, $t1) }
}

%op Condition CondMatch(t1:Term, t2:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.condition.CondMatch) }
  get_slot(t1, t) { $t.gett1() }
  get_slot(t2, t) { $t.gett2() }
  make(t0, t1) { tom.gom.adt.rule.types.condition.CondMatch.make($t0, $t1) }
}

%op RuleList EmptyRuleList() {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.rulelist.EmptyRuleList) }
  make() { tom.gom.adt.rule.types.rulelist.EmptyRuleList.make() }
}

%op RuleList ConsRuleList(HeadRuleList:Rule, TailRuleList:RuleList) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.rulelist.ConsRuleList) }
  get_slot(HeadRuleList, t) { $t.getHeadRuleList() }
  get_slot(TailRuleList, t) { $t.getTailRuleList() }
  make(t0, t1) { tom.gom.adt.rule.types.rulelist.ConsRuleList.make($t0, $t1) }
}

%op Rule Rule(lhs:Term, rhs:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.rule.Rule) }
  get_slot(lhs, t) { $t.getlhs() }
  get_slot(rhs, t) { $t.getrhs() }
  make(t0, t1) { tom.gom.adt.rule.types.rule.Rule.make($t0, $t1) }
}

%op Rule ConditionalRule(lhs:Term, rhs:Term, cond:Condition) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.rule.ConditionalRule) }
  get_slot(lhs, t) { $t.getlhs() }
  get_slot(rhs, t) { $t.getrhs() }
  get_slot(cond, t) { $t.getcond() }
  make(t0, t1, t2) { tom.gom.adt.rule.types.rule.ConditionalRule.make($t0, $t1, $t2) }
}

%op TermList EmptyTermList() {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.termlist.EmptyTermList) }
  make() { tom.gom.adt.rule.types.termlist.EmptyTermList.make() }
}

%op TermList ConsTermList(HeadTermList:Term, TailTermList:TermList) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.termlist.ConsTermList) }
  get_slot(HeadTermList, t) { $t.getHeadTermList() }
  get_slot(TailTermList, t) { $t.getTailTermList() }
  make(t0, t1) { tom.gom.adt.rule.types.termlist.ConsTermList.make($t0, $t1) }
}

%op Term Appl(symbol:String, args:TermList) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.Appl) }
  get_slot(symbol, t) { $t.getsymbol() }
  get_slot(args, t) { $t.getargs() }
  make(t0, t1) { tom.gom.adt.rule.types.term.Appl.make($t0, $t1) }
}

%op Term Var(name:String) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.Var) }
  get_slot(name, t) { $t.getname() }
  make(t0) { tom.gom.adt.rule.types.term.Var.make($t0) }
}

%op Term VarStar(name:String) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.VarStar) }
  get_slot(name, t) { $t.getname() }
  make(t0) { tom.gom.adt.rule.types.term.VarStar.make($t0) }
}

%op Term UnnamedVar() {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.UnnamedVar) }
  make() { tom.gom.adt.rule.types.term.UnnamedVar.make() }
}

%op Term UnnamedVarStar() {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.UnnamedVarStar) }
  make() { tom.gom.adt.rule.types.term.UnnamedVarStar.make() }
}

%op Term At(name:String, term:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.At) }
  get_slot(name, t) { $t.getname() }
  get_slot(term, t) { $t.getterm() }
  make(t0, t1) { tom.gom.adt.rule.types.term.At.make($t0, $t1) }
}

%op Term Anti(term:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.Anti) }
  get_slot(term, t) { $t.getterm() }
  make(t0) { tom.gom.adt.rule.types.term.Anti.make($t0) }
}

%op Term BuiltinInt(i:int) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.BuiltinInt) }
  get_slot(i, t) { $t.geti() }
  make(t0) { tom.gom.adt.rule.types.term.BuiltinInt.make($t0) }
}

%op Term BuiltinString(s:String) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.BuiltinString) }
  get_slot(s, t) { $t.gets() }
  make(t0) { tom.gom.adt.rule.types.term.BuiltinString.make($t0) }
}

%op Term LabTerm(l:String, t:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.LabTerm) }
  get_slot(l, t) { $t.getl() }
  get_slot(t, t) { $t.gett() }
  make(t0, t1) { tom.gom.adt.rule.types.term.LabTerm.make($t0, $t1) }
}

%op Term RefTerm(l:String) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.RefTerm) }
  get_slot(l, t) { $t.getl() }
  make(t0) { tom.gom.adt.rule.types.term.RefTerm.make($t0) }
}

%op Term EmptyPathTerm() {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.EmptyPathTerm) }
  make() { tom.gom.adt.rule.types.term.EmptyPathTerm.make() }
}

%op Term ConsPathTerm(HeadPathTerm:int, TailPathTerm:Term) {
  is_fsym(t) { ($t instanceof tom.gom.adt.rule.types.term.ConsPathTerm) }
  get_slot(HeadPathTerm, t) { $t.getHeadPathTerm() }
  get_slot(TailPathTerm, t) { $t.getTailPathTerm() }
  make(t0, t1) { tom.gom.adt.rule.types.term.ConsPathTerm.make($t0, $t1) }
}


%oplist Condition CondAnd(Condition*) {
  is_fsym(t) { (($t instanceof tom.gom.adt.rule.types.condition.ConsCondAnd) || ($t instanceof tom.gom.adt.rule.types.condition.EmptyCondAnd)) }
  make_empty() { tom.gom.adt.rule.types.condition.EmptyCondAnd.make() }
  make_insert(e,l) { tom.gom.adt.rule.types.condition.ConsCondAnd.make($e,$l) }
  get_head(l) { $l.getHeadCondAnd() }
  get_tail(l) { $l.getTailCondAnd() }
  is_empty(l) { $l.isEmptyCondAnd() }
}

%oplist Condition CondOr(Condition*) {
  is_fsym(t) { (($t instanceof tom.gom.adt.rule.types.condition.ConsCondOr) || ($t instanceof tom.gom.adt.rule.types.condition.EmptyCondOr)) }
  make_empty() { tom.gom.adt.rule.types.condition.EmptyCondOr.make() }
  make_insert(e,l) { tom.gom.adt.rule.types.condition.ConsCondOr.make($e,$l) }
  get_head(l) { $l.getHeadCondOr() }
  get_tail(l) { $l.getTailCondOr() }
  is_empty(l) { $l.isEmptyCondOr() }
}

%oplist RuleList RuleList(Rule*) {
  is_fsym(t) { (($t instanceof tom.gom.adt.rule.types.rulelist.ConsRuleList) || ($t instanceof tom.gom.adt.rule.types.rulelist.EmptyRuleList)) }
  make_empty() { tom.gom.adt.rule.types.rulelist.EmptyRuleList.make() }
  make_insert(e,l) { tom.gom.adt.rule.types.rulelist.ConsRuleList.make($e,$l) }
  get_head(l) { $l.getHeadRuleList() }
  get_tail(l) { $l.getTailRuleList() }
  is_empty(l) { $l.isEmptyRuleList() }
}

%oplist TermList TermList(Term*) {
  is_fsym(t) { (($t instanceof tom.gom.adt.rule.types.termlist.ConsTermList) || ($t instanceof tom.gom.adt.rule.types.termlist.EmptyTermList)) }
  make_empty() { tom.gom.adt.rule.types.termlist.EmptyTermList.make() }
  make_insert(e,l) { tom.gom.adt.rule.types.termlist.ConsTermList.make($e,$l) }
  get_head(l) { $l.getHeadTermList() }
  get_tail(l) { $l.getTailTermList() }
  is_empty(l) { $l.isEmptyTermList() }
}

%oplist Term PathTerm(int*) {
  is_fsym(t) { (($t instanceof tom.gom.adt.rule.types.term.ConsPathTerm) || ($t instanceof tom.gom.adt.rule.types.term.EmptyPathTerm)) }
  make_empty() { tom.gom.adt.rule.types.term.EmptyPathTerm.make() }
  make_insert(e,l) { tom.gom.adt.rule.types.term.ConsPathTerm.make($e,$l) }
  get_head(l) { $l.getHeadPathTerm() }
  get_tail(l) { $l.getTailPathTerm() }
  is_empty(l) { $l.isEmptyPathTerm() }
}
