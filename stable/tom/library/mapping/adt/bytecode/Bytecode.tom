
%include { string.tom }

%include { int.tom }

%include { double.tom }

%include { long.tom }

%include { float.tom }

%typeterm TLocalVariable {
  implement { tom.library.adt.bytecode.types.TLocalVariable }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TLocalVariable) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TMethodCode {
  implement { tom.library.adt.bytecode.types.TMethodCode }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TMethodCode) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TMethodList {
  implement { tom.library.adt.bytecode.types.TMethodList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TMethodList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TSignature {
  implement { tom.library.adt.bytecode.types.TSignature }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TSignature) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TInnerClassInfo {
  implement { tom.library.adt.bytecode.types.TInnerClassInfo }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TInnerClassInfo) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TAccess {
  implement { tom.library.adt.bytecode.types.TAccess }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TAccess) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TReturnDescriptor {
  implement { tom.library.adt.bytecode.types.TReturnDescriptor }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TReturnDescriptor) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TStringList {
  implement { tom.library.adt.bytecode.types.TStringList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TStringList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TMethod {
  implement { tom.library.adt.bytecode.types.TMethod }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TMethod) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TLabelList {
  implement { tom.library.adt.bytecode.types.TLabelList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TLabelList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TInstruction {
  implement { tom.library.adt.bytecode.types.TInstruction }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TInstruction) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TClass {
  implement { tom.library.adt.bytecode.types.TClass }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TClass) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TInnerClassInfoList {
  implement { tom.library.adt.bytecode.types.TInnerClassInfoList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TInnerClassInfoList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TValue {
  implement { tom.library.adt.bytecode.types.TValue }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TValue) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TField {
  implement { tom.library.adt.bytecode.types.TField }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TField) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TTryCatchBlockList {
  implement { tom.library.adt.bytecode.types.TTryCatchBlockList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TTryCatchBlockList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TType {
  implement { tom.library.adt.bytecode.types.TType }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TType) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TClassInfo {
  implement { tom.library.adt.bytecode.types.TClassInfo }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TClassInfo) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TAccessList {
  implement { tom.library.adt.bytecode.types.TAccessList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TAccessList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TMethodDescriptor {
  implement { tom.library.adt.bytecode.types.TMethodDescriptor }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TMethodDescriptor) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TFieldList {
  implement { tom.library.adt.bytecode.types.TFieldList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TFieldList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TOuterClassInfo {
  implement { tom.library.adt.bytecode.types.TOuterClassInfo }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TOuterClassInfo) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TFieldDescriptor {
  implement { tom.library.adt.bytecode.types.TFieldDescriptor }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TFieldDescriptor) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TTryCatchBlock {
  implement { tom.library.adt.bytecode.types.TTryCatchBlock }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TTryCatchBlock) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TintList {
  implement { tom.library.adt.bytecode.types.TintList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TintList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TMethodInfo {
  implement { tom.library.adt.bytecode.types.TMethodInfo }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TMethodInfo) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm THandler {
  implement { tom.library.adt.bytecode.types.THandler }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.THandler) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TInstructionList {
  implement { tom.library.adt.bytecode.types.TInstructionList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TInstructionList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TFieldDescriptorList {
  implement { tom.library.adt.bytecode.types.TFieldDescriptorList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TFieldDescriptorList) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TLabel {
  implement { tom.library.adt.bytecode.types.TLabel }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TLabel) }

  equals(t1,t2) { ($t1==$t2) }

}

%typeterm TLocalVariableList {
  implement { tom.library.adt.bytecode.types.TLocalVariableList }
  is_sort(t) { ($t instanceof tom.library.adt.bytecode.types.TLocalVariableList) }

  equals(t1,t2) { ($t1==$t2) }

}
%op TLocalVariable VarTLocalVariable(labelTLocalVariable:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.VarTLocalVariable) }
  get_slot(labelTLocalVariable, t) { $t.getlabelTLocalVariable() }
  make(t0) { tom.library.adt.bytecode.types.tlocalvariable.VarTLocalVariable.make($t0) }
}

%op TLocalVariable EmptyPathTLocalVariable() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.EmptyPathTLocalVariable) }
  make() { tom.library.adt.bytecode.types.tlocalvariable.EmptyPathTLocalVariable.make() }
}

%op TLocalVariable ConsPathTLocalVariable(HeadPathTLocalVariable:int, TailPathTLocalVariable:TLocalVariable) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.ConsPathTLocalVariable) }
  get_slot(HeadPathTLocalVariable, t) { $t.getHeadPathTLocalVariable() }
  get_slot(TailPathTLocalVariable, t) { $t.getTailPathTLocalVariable() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlocalvariable.ConsPathTLocalVariable.make($t0, $t1) }
}

%op TLocalVariable RefTLocalVariable(labelTLocalVariable:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.RefTLocalVariable) }
  get_slot(labelTLocalVariable, t) { $t.getlabelTLocalVariable() }
  make(t0) { tom.library.adt.bytecode.types.tlocalvariable.RefTLocalVariable.make($t0) }
}

%op TLocalVariable LabTLocalVariable(labelTLocalVariable:String, termTLocalVariable:TLocalVariable) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.LabTLocalVariable) }
  get_slot(labelTLocalVariable, t) { $t.getlabelTLocalVariable() }
  get_slot(termTLocalVariable, t) { $t.gettermTLocalVariable() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlocalvariable.LabTLocalVariable.make($t0, $t1) }
}

%op TLocalVariable LocalVariable(name:String, typeDesc:String, signature:TSignature, start:TLabel, end:TLabel, index:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.LocalVariable) }
  get_slot(name, t) { $t.getname() }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(start, t) { $t.getstart() }
  get_slot(end, t) { $t.getend() }
  get_slot(index, t) { $t.getindex() }
  make(t0, t1, t2, t3, t4, t5) { tom.library.adt.bytecode.types.tlocalvariable.LocalVariable.make($t0, $t1, $t2, $t3, $t4, $t5) }
}

%op TMethodCode VarTMethodCode(labelTMethodCode:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.VarTMethodCode) }
  get_slot(labelTMethodCode, t) { $t.getlabelTMethodCode() }
  make(t0) { tom.library.adt.bytecode.types.tmethodcode.VarTMethodCode.make($t0) }
}

%op TMethodCode EmptyPathTMethodCode() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.EmptyPathTMethodCode) }
  make() { tom.library.adt.bytecode.types.tmethodcode.EmptyPathTMethodCode.make() }
}

%op TMethodCode ConsPathTMethodCode(HeadPathTMethodCode:int, TailPathTMethodCode:TMethodCode) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.ConsPathTMethodCode) }
  get_slot(HeadPathTMethodCode, t) { $t.getHeadPathTMethodCode() }
  get_slot(TailPathTMethodCode, t) { $t.getTailPathTMethodCode() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodcode.ConsPathTMethodCode.make($t0, $t1) }
}

%op TMethodCode RefTMethodCode(labelTMethodCode:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.RefTMethodCode) }
  get_slot(labelTMethodCode, t) { $t.getlabelTMethodCode() }
  make(t0) { tom.library.adt.bytecode.types.tmethodcode.RefTMethodCode.make($t0) }
}

%op TMethodCode LabTMethodCode(labelTMethodCode:String, termTMethodCode:TMethodCode) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.LabTMethodCode) }
  get_slot(labelTMethodCode, t) { $t.getlabelTMethodCode() }
  get_slot(termTMethodCode, t) { $t.gettermTMethodCode() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodcode.LabTMethodCode.make($t0, $t1) }
}

%op TMethodCode MethodCode(instructions:TInstructionList, localVariables:TLocalVariableList, tryCatchBlocks:TTryCatchBlockList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.MethodCode) }
  get_slot(instructions, t) { $t.getinstructions() }
  get_slot(localVariables, t) { $t.getlocalVariables() }
  get_slot(tryCatchBlocks, t) { $t.gettryCatchBlocks() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tmethodcode.MethodCode.make($t0, $t1, $t2) }
}

%op TMethodCode EmptyCode() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.EmptyCode) }
  make() { tom.library.adt.bytecode.types.tmethodcode.EmptyCode.make() }
}

%op TMethodList VarTMethodList(labelTMethodList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.VarTMethodList) }
  get_slot(labelTMethodList, t) { $t.getlabelTMethodList() }
  make(t0) { tom.library.adt.bytecode.types.tmethodlist.VarTMethodList.make($t0) }
}

%op TMethodList EmptyPathTMethodList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyPathTMethodList) }
  make() { tom.library.adt.bytecode.types.tmethodlist.EmptyPathTMethodList.make() }
}

%op TMethodList ConsPathTMethodList(HeadPathTMethodList:int, TailPathTMethodList:TMethodList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsPathTMethodList) }
  get_slot(HeadPathTMethodList, t) { $t.getHeadPathTMethodList() }
  get_slot(TailPathTMethodList, t) { $t.getTailPathTMethodList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodlist.ConsPathTMethodList.make($t0, $t1) }
}

%op TMethodList RefTMethodList(labelTMethodList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.RefTMethodList) }
  get_slot(labelTMethodList, t) { $t.getlabelTMethodList() }
  make(t0) { tom.library.adt.bytecode.types.tmethodlist.RefTMethodList.make($t0) }
}

%op TMethodList LabTMethodList(labelTMethodList:String, termTMethodList:TMethodList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.LabTMethodList) }
  get_slot(labelTMethodList, t) { $t.getlabelTMethodList() }
  get_slot(termTMethodList, t) { $t.gettermTMethodList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodlist.LabTMethodList.make($t0, $t1) }
}

%op TMethodList EmptyMethodList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList) }
  make() { tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() }
}

%op TMethodList ConsMethodList(HeadMethodList:TMethod, TailMethodList:TMethodList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList) }
  get_slot(HeadMethodList, t) { $t.getHeadMethodList() }
  get_slot(TailMethodList, t) { $t.getTailMethodList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make($t0, $t1) }
}

%op TSignature VarTSignature(labelTSignature:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.VarTSignature) }
  get_slot(labelTSignature, t) { $t.getlabelTSignature() }
  make(t0) { tom.library.adt.bytecode.types.tsignature.VarTSignature.make($t0) }
}

%op TSignature EmptyPathTSignature() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.EmptyPathTSignature) }
  make() { tom.library.adt.bytecode.types.tsignature.EmptyPathTSignature.make() }
}

%op TSignature ConsPathTSignature(HeadPathTSignature:int, TailPathTSignature:TSignature) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.ConsPathTSignature) }
  get_slot(HeadPathTSignature, t) { $t.getHeadPathTSignature() }
  get_slot(TailPathTSignature, t) { $t.getTailPathTSignature() }
  make(t0, t1) { tom.library.adt.bytecode.types.tsignature.ConsPathTSignature.make($t0, $t1) }
}

%op TSignature RefTSignature(labelTSignature:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.RefTSignature) }
  get_slot(labelTSignature, t) { $t.getlabelTSignature() }
  make(t0) { tom.library.adt.bytecode.types.tsignature.RefTSignature.make($t0) }
}

%op TSignature LabTSignature(labelTSignature:String, termTSignature:TSignature) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.LabTSignature) }
  get_slot(labelTSignature, t) { $t.getlabelTSignature() }
  get_slot(termTSignature, t) { $t.gettermTSignature() }
  make(t0, t1) { tom.library.adt.bytecode.types.tsignature.LabTSignature.make($t0, $t1) }
}

%op TSignature Signature(sig:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.Signature) }
  get_slot(sig, t) { $t.getsig() }
  make(t0) { tom.library.adt.bytecode.types.tsignature.Signature.make($t0) }
}

%op TSignature EmptySignature() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.EmptySignature) }
  make() { tom.library.adt.bytecode.types.tsignature.EmptySignature.make() }
}

%op TInnerClassInfo VarTInnerClassInfo(labelTInnerClassInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.VarTInnerClassInfo) }
  get_slot(labelTInnerClassInfo, t) { $t.getlabelTInnerClassInfo() }
  make(t0) { tom.library.adt.bytecode.types.tinnerclassinfo.VarTInnerClassInfo.make($t0) }
}

%op TInnerClassInfo EmptyPathTInnerClassInfo() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.EmptyPathTInnerClassInfo) }
  make() { tom.library.adt.bytecode.types.tinnerclassinfo.EmptyPathTInnerClassInfo.make() }
}

%op TInnerClassInfo ConsPathTInnerClassInfo(HeadPathTInnerClassInfo:int, TailPathTInnerClassInfo:TInnerClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.ConsPathTInnerClassInfo) }
  get_slot(HeadPathTInnerClassInfo, t) { $t.getHeadPathTInnerClassInfo() }
  get_slot(TailPathTInnerClassInfo, t) { $t.getTailPathTInnerClassInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinnerclassinfo.ConsPathTInnerClassInfo.make($t0, $t1) }
}

%op TInnerClassInfo RefTInnerClassInfo(labelTInnerClassInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.RefTInnerClassInfo) }
  get_slot(labelTInnerClassInfo, t) { $t.getlabelTInnerClassInfo() }
  make(t0) { tom.library.adt.bytecode.types.tinnerclassinfo.RefTInnerClassInfo.make($t0) }
}

%op TInnerClassInfo LabTInnerClassInfo(labelTInnerClassInfo:String, termTInnerClassInfo:TInnerClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.LabTInnerClassInfo) }
  get_slot(labelTInnerClassInfo, t) { $t.getlabelTInnerClassInfo() }
  get_slot(termTInnerClassInfo, t) { $t.gettermTInnerClassInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinnerclassinfo.LabTInnerClassInfo.make($t0, $t1) }
}

%op TInnerClassInfo InnerClassInfo(name:String, outerName:String, innerName:String, access:TAccessList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.InnerClassInfo) }
  get_slot(name, t) { $t.getname() }
  get_slot(outerName, t) { $t.getouterName() }
  get_slot(innerName, t) { $t.getinnerName() }
  get_slot(access, t) { $t.getaccess() }
  make(t0, t1, t2, t3) { tom.library.adt.bytecode.types.tinnerclassinfo.InnerClassInfo.make($t0, $t1, $t2, $t3) }
}

%op TAccess VarTAccess(labelTAccess:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.VarTAccess) }
  get_slot(labelTAccess, t) { $t.getlabelTAccess() }
  make(t0) { tom.library.adt.bytecode.types.taccess.VarTAccess.make($t0) }
}

%op TAccess EmptyPathTAccess() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.EmptyPathTAccess) }
  make() { tom.library.adt.bytecode.types.taccess.EmptyPathTAccess.make() }
}

%op TAccess ConsPathTAccess(HeadPathTAccess:int, TailPathTAccess:TAccess) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.ConsPathTAccess) }
  get_slot(HeadPathTAccess, t) { $t.getHeadPathTAccess() }
  get_slot(TailPathTAccess, t) { $t.getTailPathTAccess() }
  make(t0, t1) { tom.library.adt.bytecode.types.taccess.ConsPathTAccess.make($t0, $t1) }
}

%op TAccess RefTAccess(labelTAccess:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.RefTAccess) }
  get_slot(labelTAccess, t) { $t.getlabelTAccess() }
  make(t0) { tom.library.adt.bytecode.types.taccess.RefTAccess.make($t0) }
}

%op TAccess LabTAccess(labelTAccess:String, termTAccess:TAccess) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.LabTAccess) }
  get_slot(labelTAccess, t) { $t.getlabelTAccess() }
  get_slot(termTAccess, t) { $t.gettermTAccess() }
  make(t0, t1) { tom.library.adt.bytecode.types.taccess.LabTAccess.make($t0, $t1) }
}

%op TAccess ABSTRACT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.ABSTRACT) }
  make() { tom.library.adt.bytecode.types.taccess.ABSTRACT.make() }
}

%op TAccess ANNOTATION() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.ANNOTATION) }
  make() { tom.library.adt.bytecode.types.taccess.ANNOTATION.make() }
}

%op TAccess BRIDGE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.BRIDGE) }
  make() { tom.library.adt.bytecode.types.taccess.BRIDGE.make() }
}

%op TAccess DEPRECATED() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.DEPRECATED) }
  make() { tom.library.adt.bytecode.types.taccess.DEPRECATED.make() }
}

%op TAccess ENUM() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.ENUM) }
  make() { tom.library.adt.bytecode.types.taccess.ENUM.make() }
}

%op TAccess FINAL() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.FINAL) }
  make() { tom.library.adt.bytecode.types.taccess.FINAL.make() }
}

%op TAccess INTERFACE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.INTERFACE) }
  make() { tom.library.adt.bytecode.types.taccess.INTERFACE.make() }
}

%op TAccess NATIVE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.NATIVE) }
  make() { tom.library.adt.bytecode.types.taccess.NATIVE.make() }
}

%op TAccess PRIVATE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.PRIVATE) }
  make() { tom.library.adt.bytecode.types.taccess.PRIVATE.make() }
}

%op TAccess PROTECTED() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.PROTECTED) }
  make() { tom.library.adt.bytecode.types.taccess.PROTECTED.make() }
}

%op TAccess PUBLIC() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.PUBLIC) }
  make() { tom.library.adt.bytecode.types.taccess.PUBLIC.make() }
}

%op TAccess STATIC() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.STATIC) }
  make() { tom.library.adt.bytecode.types.taccess.STATIC.make() }
}

%op TAccess STRICT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.STRICT) }
  make() { tom.library.adt.bytecode.types.taccess.STRICT.make() }
}

%op TAccess SUPER() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.SUPER) }
  make() { tom.library.adt.bytecode.types.taccess.SUPER.make() }
}

%op TAccess SYNCHRONIZED() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.SYNCHRONIZED) }
  make() { tom.library.adt.bytecode.types.taccess.SYNCHRONIZED.make() }
}

%op TAccess SYNTHETIC() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.SYNTHETIC) }
  make() { tom.library.adt.bytecode.types.taccess.SYNTHETIC.make() }
}

%op TAccess TRANSIENT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.TRANSIENT) }
  make() { tom.library.adt.bytecode.types.taccess.TRANSIENT.make() }
}

%op TAccess VARARGS() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.VARARGS) }
  make() { tom.library.adt.bytecode.types.taccess.VARARGS.make() }
}

%op TAccess VOLATILE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.VOLATILE) }
  make() { tom.library.adt.bytecode.types.taccess.VOLATILE.make() }
}

%op TReturnDescriptor VarTReturnDescriptor(labelTReturnDescriptor:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.VarTReturnDescriptor) }
  get_slot(labelTReturnDescriptor, t) { $t.getlabelTReturnDescriptor() }
  make(t0) { tom.library.adt.bytecode.types.treturndescriptor.VarTReturnDescriptor.make($t0) }
}

%op TReturnDescriptor EmptyPathTReturnDescriptor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.EmptyPathTReturnDescriptor) }
  make() { tom.library.adt.bytecode.types.treturndescriptor.EmptyPathTReturnDescriptor.make() }
}

%op TReturnDescriptor ConsPathTReturnDescriptor(HeadPathTReturnDescriptor:int, TailPathTReturnDescriptor:TReturnDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.ConsPathTReturnDescriptor) }
  get_slot(HeadPathTReturnDescriptor, t) { $t.getHeadPathTReturnDescriptor() }
  get_slot(TailPathTReturnDescriptor, t) { $t.getTailPathTReturnDescriptor() }
  make(t0, t1) { tom.library.adt.bytecode.types.treturndescriptor.ConsPathTReturnDescriptor.make($t0, $t1) }
}

%op TReturnDescriptor RefTReturnDescriptor(labelTReturnDescriptor:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.RefTReturnDescriptor) }
  get_slot(labelTReturnDescriptor, t) { $t.getlabelTReturnDescriptor() }
  make(t0) { tom.library.adt.bytecode.types.treturndescriptor.RefTReturnDescriptor.make($t0) }
}

%op TReturnDescriptor LabTReturnDescriptor(labelTReturnDescriptor:String, termTReturnDescriptor:TReturnDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.LabTReturnDescriptor) }
  get_slot(labelTReturnDescriptor, t) { $t.getlabelTReturnDescriptor() }
  get_slot(termTReturnDescriptor, t) { $t.gettermTReturnDescriptor() }
  make(t0, t1) { tom.library.adt.bytecode.types.treturndescriptor.LabTReturnDescriptor.make($t0, $t1) }
}

%op TReturnDescriptor ReturnDescriptor(type:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.ReturnDescriptor) }
  get_slot(type, t) { $t.gettype() }
  make(t0) { tom.library.adt.bytecode.types.treturndescriptor.ReturnDescriptor.make($t0) }
}

%op TReturnDescriptor Void() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.Void) }
  make() { tom.library.adt.bytecode.types.treturndescriptor.Void.make() }
}

%op TStringList VarTStringList(labelTStringList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.VarTStringList) }
  get_slot(labelTStringList, t) { $t.getlabelTStringList() }
  make(t0) { tom.library.adt.bytecode.types.tstringlist.VarTStringList.make($t0) }
}

%op TStringList EmptyPathTStringList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.EmptyPathTStringList) }
  make() { tom.library.adt.bytecode.types.tstringlist.EmptyPathTStringList.make() }
}

%op TStringList ConsPathTStringList(HeadPathTStringList:int, TailPathTStringList:TStringList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.ConsPathTStringList) }
  get_slot(HeadPathTStringList, t) { $t.getHeadPathTStringList() }
  get_slot(TailPathTStringList, t) { $t.getTailPathTStringList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tstringlist.ConsPathTStringList.make($t0, $t1) }
}

%op TStringList RefTStringList(labelTStringList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.RefTStringList) }
  get_slot(labelTStringList, t) { $t.getlabelTStringList() }
  make(t0) { tom.library.adt.bytecode.types.tstringlist.RefTStringList.make($t0) }
}

%op TStringList LabTStringList(labelTStringList:String, termTStringList:TStringList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.LabTStringList) }
  get_slot(labelTStringList, t) { $t.getlabelTStringList() }
  get_slot(termTStringList, t) { $t.gettermTStringList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tstringlist.LabTStringList.make($t0, $t1) }
}

%op TStringList EmptyStringList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.EmptyStringList) }
  make() { tom.library.adt.bytecode.types.tstringlist.EmptyStringList.make() }
}

%op TStringList ConsStringList(HeadStringList:String, TailStringList:TStringList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.ConsStringList) }
  get_slot(HeadStringList, t) { $t.getHeadStringList() }
  get_slot(TailStringList, t) { $t.getTailStringList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tstringlist.ConsStringList.make($t0, $t1) }
}

%op TMethod VarTMethod(labelTMethod:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethod.VarTMethod) }
  get_slot(labelTMethod, t) { $t.getlabelTMethod() }
  make(t0) { tom.library.adt.bytecode.types.tmethod.VarTMethod.make($t0) }
}

%op TMethod EmptyPathTMethod() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethod.EmptyPathTMethod) }
  make() { tom.library.adt.bytecode.types.tmethod.EmptyPathTMethod.make() }
}

%op TMethod ConsPathTMethod(HeadPathTMethod:int, TailPathTMethod:TMethod) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethod.ConsPathTMethod) }
  get_slot(HeadPathTMethod, t) { $t.getHeadPathTMethod() }
  get_slot(TailPathTMethod, t) { $t.getTailPathTMethod() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethod.ConsPathTMethod.make($t0, $t1) }
}

%op TMethod RefTMethod(labelTMethod:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethod.RefTMethod) }
  get_slot(labelTMethod, t) { $t.getlabelTMethod() }
  make(t0) { tom.library.adt.bytecode.types.tmethod.RefTMethod.make($t0) }
}

%op TMethod LabTMethod(labelTMethod:String, termTMethod:TMethod) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethod.LabTMethod) }
  get_slot(labelTMethod, t) { $t.getlabelTMethod() }
  get_slot(termTMethod, t) { $t.gettermTMethod() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethod.LabTMethod.make($t0, $t1) }
}

%op TMethod Method(info:TMethodInfo, code:TMethodCode) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethod.Method) }
  get_slot(info, t) { $t.getinfo() }
  get_slot(code, t) { $t.getcode() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethod.Method.make($t0, $t1) }
}

%op TLabelList VarTLabelList(labelTLabelList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.VarTLabelList) }
  get_slot(labelTLabelList, t) { $t.getlabelTLabelList() }
  make(t0) { tom.library.adt.bytecode.types.tlabellist.VarTLabelList.make($t0) }
}

%op TLabelList EmptyPathTLabelList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyPathTLabelList) }
  make() { tom.library.adt.bytecode.types.tlabellist.EmptyPathTLabelList.make() }
}

%op TLabelList ConsPathTLabelList(HeadPathTLabelList:int, TailPathTLabelList:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.ConsPathTLabelList) }
  get_slot(HeadPathTLabelList, t) { $t.getHeadPathTLabelList() }
  get_slot(TailPathTLabelList, t) { $t.getTailPathTLabelList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlabellist.ConsPathTLabelList.make($t0, $t1) }
}

%op TLabelList RefTLabelList(labelTLabelList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.RefTLabelList) }
  get_slot(labelTLabelList, t) { $t.getlabelTLabelList() }
  make(t0) { tom.library.adt.bytecode.types.tlabellist.RefTLabelList.make($t0) }
}

%op TLabelList LabTLabelList(labelTLabelList:String, termTLabelList:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.LabTLabelList) }
  get_slot(labelTLabelList, t) { $t.getlabelTLabelList() }
  get_slot(termTLabelList, t) { $t.gettermTLabelList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlabellist.LabTLabelList.make($t0, $t1) }
}

%op TLabelList EmptyLabelList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList) }
  make() { tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() }
}

%op TLabelList ConsLabelList(HeadLabelList:TLabel, TailLabelList:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList) }
  get_slot(HeadLabelList, t) { $t.getHeadLabelList() }
  get_slot(TailLabelList, t) { $t.getTailLabelList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make($t0, $t1) }
}

%op TInstruction VarTInstruction(labelTInstruction:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.VarTInstruction) }
  get_slot(labelTInstruction, t) { $t.getlabelTInstruction() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.VarTInstruction.make($t0) }
}

%op TInstruction EmptyPathTInstruction() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.EmptyPathTInstruction) }
  make() { tom.library.adt.bytecode.types.tinstruction.EmptyPathTInstruction.make() }
}

%op TInstruction ConsPathTInstruction(HeadPathTInstruction:int, TailPathTInstruction:TInstruction) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.ConsPathTInstruction) }
  get_slot(HeadPathTInstruction, t) { $t.getHeadPathTInstruction() }
  get_slot(TailPathTInstruction, t) { $t.getTailPathTInstruction() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstruction.ConsPathTInstruction.make($t0, $t1) }
}

%op TInstruction RefTInstruction(labelTInstruction:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.RefTInstruction) }
  get_slot(labelTInstruction, t) { $t.getlabelTInstruction() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.RefTInstruction.make($t0) }
}

%op TInstruction LabTInstruction(labelTInstruction:String, termTInstruction:TInstruction) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.LabTInstruction) }
  get_slot(labelTInstruction, t) { $t.getlabelTInstruction() }
  get_slot(termTInstruction, t) { $t.gettermTInstruction() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstruction.LabTInstruction.make($t0, $t1) }
}

%op TInstruction Anchor(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Anchor) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Anchor.make($t0) }
}

%op TInstruction Nop() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Nop) }
  make() { tom.library.adt.bytecode.types.tinstruction.Nop.make() }
}

%op TInstruction Aconst_null() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aconst_null) }
  make() { tom.library.adt.bytecode.types.tinstruction.Aconst_null.make() }
}

%op TInstruction Iconst_m1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_m1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_m1.make() }
}

%op TInstruction Iconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_0.make() }
}

%op TInstruction Iconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_1.make() }
}

%op TInstruction Iconst_2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_2.make() }
}

%op TInstruction Iconst_3() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_3) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_3.make() }
}

%op TInstruction Iconst_4() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_4) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_4.make() }
}

%op TInstruction Iconst_5() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_5) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_5.make() }
}

%op TInstruction Lconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lconst_0.make() }
}

%op TInstruction Lconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lconst_1.make() }
}

%op TInstruction Fconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fconst_0.make() }
}

%op TInstruction Fconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fconst_1.make() }
}

%op TInstruction Fconst_2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fconst_2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fconst_2.make() }
}

%op TInstruction Dconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dconst_0.make() }
}

%op TInstruction Dconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dconst_1.make() }
}

%op TInstruction Bipush(operand:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Bipush) }
  get_slot(operand, t) { $t.getoperand() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Bipush.make($t0) }
}

%op TInstruction Sipush(operand:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Sipush) }
  get_slot(operand, t) { $t.getoperand() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Sipush.make($t0) }
}

%op TInstruction Ldc(cst:TValue) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ldc) }
  get_slot(cst, t) { $t.getcst() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ldc.make($t0) }
}

%op TInstruction Iload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Iload.make($t0) }
}

%op TInstruction Lload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Lload.make($t0) }
}

%op TInstruction Fload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Fload.make($t0) }
}

%op TInstruction Dload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Dload.make($t0) }
}

%op TInstruction Aload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Aload.make($t0) }
}

%op TInstruction Iaload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iaload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iaload.make() }
}

%op TInstruction Laload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Laload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Laload.make() }
}

%op TInstruction Faload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Faload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Faload.make() }
}

%op TInstruction Daload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Daload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Daload.make() }
}

%op TInstruction Aaload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aaload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Aaload.make() }
}

%op TInstruction Baload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Baload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Baload.make() }
}

%op TInstruction Caload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Caload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Caload.make() }
}

%op TInstruction Saload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Saload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Saload.make() }
}

%op TInstruction Istore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Istore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Istore.make($t0) }
}

%op TInstruction Lstore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lstore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Lstore.make($t0) }
}

%op TInstruction Fstore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fstore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Fstore.make($t0) }
}

%op TInstruction Dstore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dstore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Dstore.make($t0) }
}

%op TInstruction Astore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Astore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Astore.make($t0) }
}

%op TInstruction Iastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iastore.make() }
}

%op TInstruction Lastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lastore.make() }
}

%op TInstruction Fastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fastore.make() }
}

%op TInstruction Dastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dastore.make() }
}

%op TInstruction Aastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Aastore.make() }
}

%op TInstruction Bastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Bastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Bastore.make() }
}

%op TInstruction Castore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Castore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Castore.make() }
}

%op TInstruction Sastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Sastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Sastore.make() }
}

%op TInstruction Pop() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Pop) }
  make() { tom.library.adt.bytecode.types.tinstruction.Pop.make() }
}

%op TInstruction Pop2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Pop2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Pop2.make() }
}

%op TInstruction Dup() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup.make() }
}

%op TInstruction Dup_x1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup_x1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup_x1.make() }
}

%op TInstruction Dup_x2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup_x2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup_x2.make() }
}

%op TInstruction Dup2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup2.make() }
}

%op TInstruction Dup2_x1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup2_x1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup2_x1.make() }
}

%op TInstruction Dup2_x2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup2_x2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup2_x2.make() }
}

%op TInstruction Swap() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Swap) }
  make() { tom.library.adt.bytecode.types.tinstruction.Swap.make() }
}

%op TInstruction Iadd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iadd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iadd.make() }
}

%op TInstruction Ladd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ladd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ladd.make() }
}

%op TInstruction Fadd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fadd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fadd.make() }
}

%op TInstruction Dadd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dadd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dadd.make() }
}

%op TInstruction Isub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Isub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Isub.make() }
}

%op TInstruction Lsub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lsub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lsub.make() }
}

%op TInstruction Fsub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fsub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fsub.make() }
}

%op TInstruction Dsub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dsub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dsub.make() }
}

%op TInstruction Imul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Imul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Imul.make() }
}

%op TInstruction Lmul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lmul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lmul.make() }
}

%op TInstruction Fmul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fmul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fmul.make() }
}

%op TInstruction Dmul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dmul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dmul.make() }
}

%op TInstruction Idiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Idiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Idiv.make() }
}

%op TInstruction Ldiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ldiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ldiv.make() }
}

%op TInstruction Fdiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fdiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fdiv.make() }
}

%op TInstruction Ddiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ddiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ddiv.make() }
}

%op TInstruction Irem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Irem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Irem.make() }
}

%op TInstruction Lrem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lrem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lrem.make() }
}

%op TInstruction Frem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Frem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Frem.make() }
}

%op TInstruction Drem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Drem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Drem.make() }
}

%op TInstruction Ineg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ineg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ineg.make() }
}

%op TInstruction Lneg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lneg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lneg.make() }
}

%op TInstruction Fneg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fneg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fneg.make() }
}

%op TInstruction Dneg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dneg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dneg.make() }
}

%op TInstruction Ishl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ishl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ishl.make() }
}

%op TInstruction Lshl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lshl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lshl.make() }
}

%op TInstruction Ishr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ishr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ishr.make() }
}

%op TInstruction Lshr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lshr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lshr.make() }
}

%op TInstruction Iushr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iushr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iushr.make() }
}

%op TInstruction Lushr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lushr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lushr.make() }
}

%op TInstruction Iand() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iand) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iand.make() }
}

%op TInstruction Land() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Land) }
  make() { tom.library.adt.bytecode.types.tinstruction.Land.make() }
}

%op TInstruction Ior() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ior) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ior.make() }
}

%op TInstruction Lor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lor) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lor.make() }
}

%op TInstruction Ixor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ixor) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ixor.make() }
}

%op TInstruction Lxor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lxor) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lxor.make() }
}

%op TInstruction Iinc(incr:int, var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iinc) }
  get_slot(incr, t) { $t.getincr() }
  get_slot(var, t) { $t.getvar() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstruction.Iinc.make($t0, $t1) }
}

%op TInstruction I2l() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2l) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2l.make() }
}

%op TInstruction I2f() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2f) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2f.make() }
}

%op TInstruction I2d() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2d) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2d.make() }
}

%op TInstruction L2i() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.L2i) }
  make() { tom.library.adt.bytecode.types.tinstruction.L2i.make() }
}

%op TInstruction L2f() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.L2f) }
  make() { tom.library.adt.bytecode.types.tinstruction.L2f.make() }
}

%op TInstruction L2d() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.L2d) }
  make() { tom.library.adt.bytecode.types.tinstruction.L2d.make() }
}

%op TInstruction F2i() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.F2i) }
  make() { tom.library.adt.bytecode.types.tinstruction.F2i.make() }
}

%op TInstruction F2l() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.F2l) }
  make() { tom.library.adt.bytecode.types.tinstruction.F2l.make() }
}

%op TInstruction F2d() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.F2d) }
  make() { tom.library.adt.bytecode.types.tinstruction.F2d.make() }
}

%op TInstruction D2i() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.D2i) }
  make() { tom.library.adt.bytecode.types.tinstruction.D2i.make() }
}

%op TInstruction D2l() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.D2l) }
  make() { tom.library.adt.bytecode.types.tinstruction.D2l.make() }
}

%op TInstruction D2f() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.D2f) }
  make() { tom.library.adt.bytecode.types.tinstruction.D2f.make() }
}

%op TInstruction I2b() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2b) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2b.make() }
}

%op TInstruction I2c() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2c) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2c.make() }
}

%op TInstruction I2s() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2s) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2s.make() }
}

%op TInstruction Lcmp() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lcmp) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lcmp.make() }
}

%op TInstruction Fcmpl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fcmpl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fcmpl.make() }
}

%op TInstruction Fcmpg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fcmpg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fcmpg.make() }
}

%op TInstruction Dcmpl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dcmpl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dcmpl.make() }
}

%op TInstruction Dcmpg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dcmpg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dcmpg.make() }
}

%op TInstruction Ifeq(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifeq) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifeq.make($t0) }
}

%op TInstruction Ifne(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifne) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifne.make($t0) }
}

%op TInstruction Iflt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iflt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Iflt.make($t0) }
}

%op TInstruction Ifge(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifge) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifge.make($t0) }
}

%op TInstruction Ifgt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifgt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifgt.make($t0) }
}

%op TInstruction Ifle(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifle) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifle.make($t0) }
}

%op TInstruction If_icmpeq(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpeq) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpeq.make($t0) }
}

%op TInstruction If_icmpne(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpne) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpne.make($t0) }
}

%op TInstruction If_icmplt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmplt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmplt.make($t0) }
}

%op TInstruction If_icmpge(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpge) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpge.make($t0) }
}

%op TInstruction If_icmpgt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpgt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpgt.make($t0) }
}

%op TInstruction If_icmple(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmple) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmple.make($t0) }
}

%op TInstruction If_acmpeq(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpeq) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_acmpeq.make($t0) }
}

%op TInstruction If_acmpne(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpne) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_acmpne.make($t0) }
}

%op TInstruction Goto(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Goto) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Goto.make($t0) }
}

%op TInstruction Jsr(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Jsr) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Jsr.make($t0) }
}

%op TInstruction Ret(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ret) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ret.make($t0) }
}

%op TInstruction Tableswitch(min:int, max:int, dflt:TLabel, labels:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Tableswitch) }
  get_slot(min, t) { $t.getmin() }
  get_slot(max, t) { $t.getmax() }
  get_slot(dflt, t) { $t.getdflt() }
  get_slot(labels, t) { $t.getlabels() }
  make(t0, t1, t2, t3) { tom.library.adt.bytecode.types.tinstruction.Tableswitch.make($t0, $t1, $t2, $t3) }
}

%op TInstruction Lookupswitch(dflt:TLabel, keys:TintList, labels:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lookupswitch) }
  get_slot(dflt, t) { $t.getdflt() }
  get_slot(keys, t) { $t.getkeys() }
  get_slot(labels, t) { $t.getlabels() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Lookupswitch.make($t0, $t1, $t2) }
}

%op TInstruction Ireturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ireturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ireturn.make() }
}

%op TInstruction Lreturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lreturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lreturn.make() }
}

%op TInstruction Freturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Freturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Freturn.make() }
}

%op TInstruction Dreturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dreturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dreturn.make() }
}

%op TInstruction Areturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Areturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Areturn.make() }
}

%op TInstruction Return() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Return) }
  make() { tom.library.adt.bytecode.types.tinstruction.Return.make() }
}

%op TInstruction Getstatic(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Getstatic) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Getstatic.make($t0, $t1, $t2) }
}

%op TInstruction Putstatic(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Putstatic) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Putstatic.make($t0, $t1, $t2) }
}

%op TInstruction Getfield(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Getfield) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Getfield.make($t0, $t1, $t2) }
}

%op TInstruction Putfield(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Putfield) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Putfield.make($t0, $t1, $t2) }
}

%op TInstruction Invokevirtual(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokevirtual) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokevirtual.make($t0, $t1, $t2) }
}

%op TInstruction Invokespecial(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokespecial) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokespecial.make($t0, $t1, $t2) }
}

%op TInstruction Invokestatic(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokestatic) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokestatic.make($t0, $t1, $t2) }
}

%op TInstruction Invokeinterface(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokeinterface) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokeinterface.make($t0, $t1, $t2) }
}

%op TInstruction New(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.New) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.New.make($t0) }
}

%op TInstruction Newarray(operand:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Newarray) }
  get_slot(operand, t) { $t.getoperand() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Newarray.make($t0) }
}

%op TInstruction Anewarray(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Anewarray) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Anewarray.make($t0) }
}

%op TInstruction Arraylength() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Arraylength) }
  make() { tom.library.adt.bytecode.types.tinstruction.Arraylength.make() }
}

%op TInstruction Athrow() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Athrow) }
  make() { tom.library.adt.bytecode.types.tinstruction.Athrow.make() }
}

%op TInstruction Checkcast(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Checkcast) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Checkcast.make($t0) }
}

%op TInstruction Instanceof(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Instanceof) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Instanceof.make($t0) }
}

%op TInstruction Monitorenter() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Monitorenter) }
  make() { tom.library.adt.bytecode.types.tinstruction.Monitorenter.make() }
}

%op TInstruction Monitorexit() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Monitorexit) }
  make() { tom.library.adt.bytecode.types.tinstruction.Monitorexit.make() }
}

%op TInstruction Multianewarray(typeDesc:String, dims:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Multianewarray) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  get_slot(dims, t) { $t.getdims() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstruction.Multianewarray.make($t0, $t1) }
}

%op TInstruction Ifnull(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnull) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifnull.make($t0) }
}

%op TInstruction Ifnonnull(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnonnull) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifnonnull.make($t0) }
}

%op TClass VarTClass(labelTClass:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclass.VarTClass) }
  get_slot(labelTClass, t) { $t.getlabelTClass() }
  make(t0) { tom.library.adt.bytecode.types.tclass.VarTClass.make($t0) }
}

%op TClass EmptyPathTClass() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclass.EmptyPathTClass) }
  make() { tom.library.adt.bytecode.types.tclass.EmptyPathTClass.make() }
}

%op TClass ConsPathTClass(HeadPathTClass:int, TailPathTClass:TClass) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclass.ConsPathTClass) }
  get_slot(HeadPathTClass, t) { $t.getHeadPathTClass() }
  get_slot(TailPathTClass, t) { $t.getTailPathTClass() }
  make(t0, t1) { tom.library.adt.bytecode.types.tclass.ConsPathTClass.make($t0, $t1) }
}

%op TClass RefTClass(labelTClass:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclass.RefTClass) }
  get_slot(labelTClass, t) { $t.getlabelTClass() }
  make(t0) { tom.library.adt.bytecode.types.tclass.RefTClass.make($t0) }
}

%op TClass LabTClass(labelTClass:String, termTClass:TClass) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclass.LabTClass) }
  get_slot(labelTClass, t) { $t.getlabelTClass() }
  get_slot(termTClass, t) { $t.gettermTClass() }
  make(t0, t1) { tom.library.adt.bytecode.types.tclass.LabTClass.make($t0, $t1) }
}

%op TClass Class(info:TClassInfo, fields:TFieldList, methods:TMethodList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclass.Class) }
  get_slot(info, t) { $t.getinfo() }
  get_slot(fields, t) { $t.getfields() }
  get_slot(methods, t) { $t.getmethods() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tclass.Class.make($t0, $t1, $t2) }
}

%op TInnerClassInfoList VarTInnerClassInfoList(labelTInnerClassInfoList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.VarTInnerClassInfoList) }
  get_slot(labelTInnerClassInfoList, t) { $t.getlabelTInnerClassInfoList() }
  make(t0) { tom.library.adt.bytecode.types.tinnerclassinfolist.VarTInnerClassInfoList.make($t0) }
}

%op TInnerClassInfoList EmptyPathTInnerClassInfoList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyPathTInnerClassInfoList) }
  make() { tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyPathTInnerClassInfoList.make() }
}

%op TInnerClassInfoList ConsPathTInnerClassInfoList(HeadPathTInnerClassInfoList:int, TailPathTInnerClassInfoList:TInnerClassInfoList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.ConsPathTInnerClassInfoList) }
  get_slot(HeadPathTInnerClassInfoList, t) { $t.getHeadPathTInnerClassInfoList() }
  get_slot(TailPathTInnerClassInfoList, t) { $t.getTailPathTInnerClassInfoList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinnerclassinfolist.ConsPathTInnerClassInfoList.make($t0, $t1) }
}

%op TInnerClassInfoList RefTInnerClassInfoList(labelTInnerClassInfoList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.RefTInnerClassInfoList) }
  get_slot(labelTInnerClassInfoList, t) { $t.getlabelTInnerClassInfoList() }
  make(t0) { tom.library.adt.bytecode.types.tinnerclassinfolist.RefTInnerClassInfoList.make($t0) }
}

%op TInnerClassInfoList LabTInnerClassInfoList(labelTInnerClassInfoList:String, termTInnerClassInfoList:TInnerClassInfoList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.LabTInnerClassInfoList) }
  get_slot(labelTInnerClassInfoList, t) { $t.getlabelTInnerClassInfoList() }
  get_slot(termTInnerClassInfoList, t) { $t.gettermTInnerClassInfoList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinnerclassinfolist.LabTInnerClassInfoList.make($t0, $t1) }
}

%op TInnerClassInfoList EmptyInnerClassInfoList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList) }
  make() { tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList.make() }
}

%op TInnerClassInfoList ConsInnerClassInfoList(HeadInnerClassInfoList:TInnerClassInfo, TailInnerClassInfoList:TInnerClassInfoList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList) }
  get_slot(HeadInnerClassInfoList, t) { $t.getHeadInnerClassInfoList() }
  get_slot(TailInnerClassInfoList, t) { $t.getTailInnerClassInfoList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList.make($t0, $t1) }
}

%op TValue VarTValue(labelTValue:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.VarTValue) }
  get_slot(labelTValue, t) { $t.getlabelTValue() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.VarTValue.make($t0) }
}

%op TValue EmptyPathTValue() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.EmptyPathTValue) }
  make() { tom.library.adt.bytecode.types.tvalue.EmptyPathTValue.make() }
}

%op TValue ConsPathTValue(HeadPathTValue:int, TailPathTValue:TValue) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.ConsPathTValue) }
  get_slot(HeadPathTValue, t) { $t.getHeadPathTValue() }
  get_slot(TailPathTValue, t) { $t.getTailPathTValue() }
  make(t0, t1) { tom.library.adt.bytecode.types.tvalue.ConsPathTValue.make($t0, $t1) }
}

%op TValue RefTValue(labelTValue:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.RefTValue) }
  get_slot(labelTValue, t) { $t.getlabelTValue() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.RefTValue.make($t0) }
}

%op TValue LabTValue(labelTValue:String, termTValue:TValue) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.LabTValue) }
  get_slot(labelTValue, t) { $t.getlabelTValue() }
  get_slot(termTValue, t) { $t.gettermTValue() }
  make(t0, t1) { tom.library.adt.bytecode.types.tvalue.LabTValue.make($t0, $t1) }
}

%op TValue StringValue(s:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.StringValue) }
  get_slot(s, t) { $t.gets() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.StringValue.make($t0) }
}

%op TValue IntValue(i:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.IntValue) }
  get_slot(i, t) { $t.geti() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.IntValue.make($t0) }
}

%op TValue LongValue(l:long) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.LongValue) }
  get_slot(l, t) { $t.getl() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.LongValue.make($t0) }
}

%op TValue FloatValue(f:float) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.FloatValue) }
  get_slot(f, t) { $t.getf() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.FloatValue.make($t0) }
}

%op TValue DoubleValue(d:double) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.DoubleValue) }
  get_slot(d, t) { $t.getd() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.DoubleValue.make($t0) }
}

%op TValue EmptyValue() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.EmptyValue) }
  make() { tom.library.adt.bytecode.types.tvalue.EmptyValue.make() }
}

%op TField VarTField(labelTField:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfield.VarTField) }
  get_slot(labelTField, t) { $t.getlabelTField() }
  make(t0) { tom.library.adt.bytecode.types.tfield.VarTField.make($t0) }
}

%op TField EmptyPathTField() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfield.EmptyPathTField) }
  make() { tom.library.adt.bytecode.types.tfield.EmptyPathTField.make() }
}

%op TField ConsPathTField(HeadPathTField:int, TailPathTField:TField) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfield.ConsPathTField) }
  get_slot(HeadPathTField, t) { $t.getHeadPathTField() }
  get_slot(TailPathTField, t) { $t.getTailPathTField() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfield.ConsPathTField.make($t0, $t1) }
}

%op TField RefTField(labelTField:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfield.RefTField) }
  get_slot(labelTField, t) { $t.getlabelTField() }
  make(t0) { tom.library.adt.bytecode.types.tfield.RefTField.make($t0) }
}

%op TField LabTField(labelTField:String, termTField:TField) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfield.LabTField) }
  get_slot(labelTField, t) { $t.getlabelTField() }
  get_slot(termTField, t) { $t.gettermTField() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfield.LabTField.make($t0, $t1) }
}

%op TField Field(access:TAccessList, name:String, desc:TFieldDescriptor, signature:TSignature, value:TValue) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfield.Field) }
  get_slot(access, t) { $t.getaccess() }
  get_slot(name, t) { $t.getname() }
  get_slot(desc, t) { $t.getdesc() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(value, t) { $t.getvalue() }
  make(t0, t1, t2, t3, t4) { tom.library.adt.bytecode.types.tfield.Field.make($t0, $t1, $t2, $t3, $t4) }
}

%op TTryCatchBlockList VarTTryCatchBlockList(labelTTryCatchBlockList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.VarTTryCatchBlockList) }
  get_slot(labelTTryCatchBlockList, t) { $t.getlabelTTryCatchBlockList() }
  make(t0) { tom.library.adt.bytecode.types.ttrycatchblocklist.VarTTryCatchBlockList.make($t0) }
}

%op TTryCatchBlockList EmptyPathTTryCatchBlockList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyPathTTryCatchBlockList) }
  make() { tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyPathTTryCatchBlockList.make() }
}

%op TTryCatchBlockList ConsPathTTryCatchBlockList(HeadPathTTryCatchBlockList:int, TailPathTTryCatchBlockList:TTryCatchBlockList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsPathTTryCatchBlockList) }
  get_slot(HeadPathTTryCatchBlockList, t) { $t.getHeadPathTTryCatchBlockList() }
  get_slot(TailPathTTryCatchBlockList, t) { $t.getTailPathTTryCatchBlockList() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttrycatchblocklist.ConsPathTTryCatchBlockList.make($t0, $t1) }
}

%op TTryCatchBlockList RefTTryCatchBlockList(labelTTryCatchBlockList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.RefTTryCatchBlockList) }
  get_slot(labelTTryCatchBlockList, t) { $t.getlabelTTryCatchBlockList() }
  make(t0) { tom.library.adt.bytecode.types.ttrycatchblocklist.RefTTryCatchBlockList.make($t0) }
}

%op TTryCatchBlockList LabTTryCatchBlockList(labelTTryCatchBlockList:String, termTTryCatchBlockList:TTryCatchBlockList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.LabTTryCatchBlockList) }
  get_slot(labelTTryCatchBlockList, t) { $t.getlabelTTryCatchBlockList() }
  get_slot(termTTryCatchBlockList, t) { $t.gettermTTryCatchBlockList() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttrycatchblocklist.LabTTryCatchBlockList.make($t0, $t1) }
}

%op TTryCatchBlockList EmptyTryCatchBlockList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList) }
  make() { tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() }
}

%op TTryCatchBlockList ConsTryCatchBlockList(HeadTryCatchBlockList:TTryCatchBlock, TailTryCatchBlockList:TTryCatchBlockList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList) }
  get_slot(HeadTryCatchBlockList, t) { $t.getHeadTryCatchBlockList() }
  get_slot(TailTryCatchBlockList, t) { $t.getTailTryCatchBlockList() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make($t0, $t1) }
}

%op TType VarTType(labelTType:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.VarTType) }
  get_slot(labelTType, t) { $t.getlabelTType() }
  make(t0) { tom.library.adt.bytecode.types.ttype.VarTType.make($t0) }
}

%op TType EmptyPathTType() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.EmptyPathTType) }
  make() { tom.library.adt.bytecode.types.ttype.EmptyPathTType.make() }
}

%op TType ConsPathTType(HeadPathTType:int, TailPathTType:TType) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.ConsPathTType) }
  get_slot(HeadPathTType, t) { $t.getHeadPathTType() }
  get_slot(TailPathTType, t) { $t.getTailPathTType() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttype.ConsPathTType.make($t0, $t1) }
}

%op TType RefTType(labelTType:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.RefTType) }
  get_slot(labelTType, t) { $t.getlabelTType() }
  make(t0) { tom.library.adt.bytecode.types.ttype.RefTType.make($t0) }
}

%op TType LabTType(labelTType:String, termTType:TType) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.LabTType) }
  get_slot(labelTType, t) { $t.getlabelTType() }
  get_slot(termTType, t) { $t.gettermTType() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttype.LabTType.make($t0, $t1) }
}

%op TType ARRAY() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.ARRAY) }
  make() { tom.library.adt.bytecode.types.ttype.ARRAY.make() }
}

%op TType BOOLEAN() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.BOOLEAN) }
  make() { tom.library.adt.bytecode.types.ttype.BOOLEAN.make() }
}

%op TType BYTE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.BYTE) }
  make() { tom.library.adt.bytecode.types.ttype.BYTE.make() }
}

%op TType CHAR() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.CHAR) }
  make() { tom.library.adt.bytecode.types.ttype.CHAR.make() }
}

%op TType DOUBLE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.DOUBLE) }
  make() { tom.library.adt.bytecode.types.ttype.DOUBLE.make() }
}

%op TType FLOAT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.FLOAT) }
  make() { tom.library.adt.bytecode.types.ttype.FLOAT.make() }
}

%op TType INT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.INT) }
  make() { tom.library.adt.bytecode.types.ttype.INT.make() }
}

%op TType LONG() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.LONG) }
  make() { tom.library.adt.bytecode.types.ttype.LONG.make() }
}

%op TType OBJECT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.OBJECT) }
  make() { tom.library.adt.bytecode.types.ttype.OBJECT.make() }
}

%op TType SHORT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.SHORT) }
  make() { tom.library.adt.bytecode.types.ttype.SHORT.make() }
}

%op TType VOID() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.VOID) }
  make() { tom.library.adt.bytecode.types.ttype.VOID.make() }
}

%op TClassInfo VarTClassInfo(labelTClassInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclassinfo.VarTClassInfo) }
  get_slot(labelTClassInfo, t) { $t.getlabelTClassInfo() }
  make(t0) { tom.library.adt.bytecode.types.tclassinfo.VarTClassInfo.make($t0) }
}

%op TClassInfo EmptyPathTClassInfo() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclassinfo.EmptyPathTClassInfo) }
  make() { tom.library.adt.bytecode.types.tclassinfo.EmptyPathTClassInfo.make() }
}

%op TClassInfo ConsPathTClassInfo(HeadPathTClassInfo:int, TailPathTClassInfo:TClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclassinfo.ConsPathTClassInfo) }
  get_slot(HeadPathTClassInfo, t) { $t.getHeadPathTClassInfo() }
  get_slot(TailPathTClassInfo, t) { $t.getTailPathTClassInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.tclassinfo.ConsPathTClassInfo.make($t0, $t1) }
}

%op TClassInfo RefTClassInfo(labelTClassInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclassinfo.RefTClassInfo) }
  get_slot(labelTClassInfo, t) { $t.getlabelTClassInfo() }
  make(t0) { tom.library.adt.bytecode.types.tclassinfo.RefTClassInfo.make($t0) }
}

%op TClassInfo LabTClassInfo(labelTClassInfo:String, termTClassInfo:TClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclassinfo.LabTClassInfo) }
  get_slot(labelTClassInfo, t) { $t.getlabelTClassInfo() }
  get_slot(termTClassInfo, t) { $t.gettermTClassInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.tclassinfo.LabTClassInfo.make($t0, $t1) }
}

%op TClassInfo ClassInfo(name:String, signature:TSignature, access:TAccessList, superName:String, interfaces:TStringList, innerClasses:TInnerClassInfoList, outerClass:TOuterClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclassinfo.ClassInfo) }
  get_slot(name, t) { $t.getname() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(access, t) { $t.getaccess() }
  get_slot(superName, t) { $t.getsuperName() }
  get_slot(interfaces, t) { $t.getinterfaces() }
  get_slot(innerClasses, t) { $t.getinnerClasses() }
  get_slot(outerClass, t) { $t.getouterClass() }
  make(t0, t1, t2, t3, t4, t5, t6) { tom.library.adt.bytecode.types.tclassinfo.ClassInfo.make($t0, $t1, $t2, $t3, $t4, $t5, $t6) }
}

%op TAccessList VarTAccessList(labelTAccessList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.VarTAccessList) }
  get_slot(labelTAccessList, t) { $t.getlabelTAccessList() }
  make(t0) { tom.library.adt.bytecode.types.taccesslist.VarTAccessList.make($t0) }
}

%op TAccessList EmptyPathTAccessList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.EmptyPathTAccessList) }
  make() { tom.library.adt.bytecode.types.taccesslist.EmptyPathTAccessList.make() }
}

%op TAccessList ConsPathTAccessList(HeadPathTAccessList:int, TailPathTAccessList:TAccessList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.ConsPathTAccessList) }
  get_slot(HeadPathTAccessList, t) { $t.getHeadPathTAccessList() }
  get_slot(TailPathTAccessList, t) { $t.getTailPathTAccessList() }
  make(t0, t1) { tom.library.adt.bytecode.types.taccesslist.ConsPathTAccessList.make($t0, $t1) }
}

%op TAccessList RefTAccessList(labelTAccessList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.RefTAccessList) }
  get_slot(labelTAccessList, t) { $t.getlabelTAccessList() }
  make(t0) { tom.library.adt.bytecode.types.taccesslist.RefTAccessList.make($t0) }
}

%op TAccessList LabTAccessList(labelTAccessList:String, termTAccessList:TAccessList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.LabTAccessList) }
  get_slot(labelTAccessList, t) { $t.getlabelTAccessList() }
  get_slot(termTAccessList, t) { $t.gettermTAccessList() }
  make(t0, t1) { tom.library.adt.bytecode.types.taccesslist.LabTAccessList.make($t0, $t1) }
}

%op TAccessList EmptyAccessList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.EmptyAccessList) }
  make() { tom.library.adt.bytecode.types.taccesslist.EmptyAccessList.make() }
}

%op TAccessList ConsAccessList(HeadAccessList:TAccess, TailAccessList:TAccessList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.ConsAccessList) }
  get_slot(HeadAccessList, t) { $t.getHeadAccessList() }
  get_slot(TailAccessList, t) { $t.getTailAccessList() }
  make(t0, t1) { tom.library.adt.bytecode.types.taccesslist.ConsAccessList.make($t0, $t1) }
}

%op TMethodDescriptor VarTMethodDescriptor(labelTMethodDescriptor:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.VarTMethodDescriptor) }
  get_slot(labelTMethodDescriptor, t) { $t.getlabelTMethodDescriptor() }
  make(t0) { tom.library.adt.bytecode.types.tmethoddescriptor.VarTMethodDescriptor.make($t0) }
}

%op TMethodDescriptor EmptyPathTMethodDescriptor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.EmptyPathTMethodDescriptor) }
  make() { tom.library.adt.bytecode.types.tmethoddescriptor.EmptyPathTMethodDescriptor.make() }
}

%op TMethodDescriptor ConsPathTMethodDescriptor(HeadPathTMethodDescriptor:int, TailPathTMethodDescriptor:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.ConsPathTMethodDescriptor) }
  get_slot(HeadPathTMethodDescriptor, t) { $t.getHeadPathTMethodDescriptor() }
  get_slot(TailPathTMethodDescriptor, t) { $t.getTailPathTMethodDescriptor() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethoddescriptor.ConsPathTMethodDescriptor.make($t0, $t1) }
}

%op TMethodDescriptor RefTMethodDescriptor(labelTMethodDescriptor:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.RefTMethodDescriptor) }
  get_slot(labelTMethodDescriptor, t) { $t.getlabelTMethodDescriptor() }
  make(t0) { tom.library.adt.bytecode.types.tmethoddescriptor.RefTMethodDescriptor.make($t0) }
}

%op TMethodDescriptor LabTMethodDescriptor(labelTMethodDescriptor:String, termTMethodDescriptor:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.LabTMethodDescriptor) }
  get_slot(labelTMethodDescriptor, t) { $t.getlabelTMethodDescriptor() }
  get_slot(termTMethodDescriptor, t) { $t.gettermTMethodDescriptor() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethoddescriptor.LabTMethodDescriptor.make($t0, $t1) }
}

%op TMethodDescriptor MethodDescriptor(parameters:TFieldDescriptorList, return:TReturnDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.MethodDescriptor) }
  get_slot(parameters, t) { $t.getparameters() }
  get_slot(return, t) { $t.getreturn() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethoddescriptor.MethodDescriptor.make($t0, $t1) }
}

%op TFieldList VarTFieldList(labelTFieldList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.VarTFieldList) }
  get_slot(labelTFieldList, t) { $t.getlabelTFieldList() }
  make(t0) { tom.library.adt.bytecode.types.tfieldlist.VarTFieldList.make($t0) }
}

%op TFieldList EmptyPathTFieldList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.EmptyPathTFieldList) }
  make() { tom.library.adt.bytecode.types.tfieldlist.EmptyPathTFieldList.make() }
}

%op TFieldList ConsPathTFieldList(HeadPathTFieldList:int, TailPathTFieldList:TFieldList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.ConsPathTFieldList) }
  get_slot(HeadPathTFieldList, t) { $t.getHeadPathTFieldList() }
  get_slot(TailPathTFieldList, t) { $t.getTailPathTFieldList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfieldlist.ConsPathTFieldList.make($t0, $t1) }
}

%op TFieldList RefTFieldList(labelTFieldList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.RefTFieldList) }
  get_slot(labelTFieldList, t) { $t.getlabelTFieldList() }
  make(t0) { tom.library.adt.bytecode.types.tfieldlist.RefTFieldList.make($t0) }
}

%op TFieldList LabTFieldList(labelTFieldList:String, termTFieldList:TFieldList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.LabTFieldList) }
  get_slot(labelTFieldList, t) { $t.getlabelTFieldList() }
  get_slot(termTFieldList, t) { $t.gettermTFieldList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfieldlist.LabTFieldList.make($t0, $t1) }
}

%op TFieldList EmptyFieldList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList) }
  make() { tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList.make() }
}

%op TFieldList ConsFieldList(HeadFieldList:TField, TailFieldList:TFieldList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.ConsFieldList) }
  get_slot(HeadFieldList, t) { $t.getHeadFieldList() }
  get_slot(TailFieldList, t) { $t.getTailFieldList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfieldlist.ConsFieldList.make($t0, $t1) }
}

%op TOuterClassInfo VarTOuterClassInfo(labelTOuterClassInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.VarTOuterClassInfo) }
  get_slot(labelTOuterClassInfo, t) { $t.getlabelTOuterClassInfo() }
  make(t0) { tom.library.adt.bytecode.types.touterclassinfo.VarTOuterClassInfo.make($t0) }
}

%op TOuterClassInfo EmptyPathTOuterClassInfo() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.EmptyPathTOuterClassInfo) }
  make() { tom.library.adt.bytecode.types.touterclassinfo.EmptyPathTOuterClassInfo.make() }
}

%op TOuterClassInfo ConsPathTOuterClassInfo(HeadPathTOuterClassInfo:int, TailPathTOuterClassInfo:TOuterClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.ConsPathTOuterClassInfo) }
  get_slot(HeadPathTOuterClassInfo, t) { $t.getHeadPathTOuterClassInfo() }
  get_slot(TailPathTOuterClassInfo, t) { $t.getTailPathTOuterClassInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.touterclassinfo.ConsPathTOuterClassInfo.make($t0, $t1) }
}

%op TOuterClassInfo RefTOuterClassInfo(labelTOuterClassInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.RefTOuterClassInfo) }
  get_slot(labelTOuterClassInfo, t) { $t.getlabelTOuterClassInfo() }
  make(t0) { tom.library.adt.bytecode.types.touterclassinfo.RefTOuterClassInfo.make($t0) }
}

%op TOuterClassInfo LabTOuterClassInfo(labelTOuterClassInfo:String, termTOuterClassInfo:TOuterClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.LabTOuterClassInfo) }
  get_slot(labelTOuterClassInfo, t) { $t.getlabelTOuterClassInfo() }
  get_slot(termTOuterClassInfo, t) { $t.gettermTOuterClassInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.touterclassinfo.LabTOuterClassInfo.make($t0, $t1) }
}

%op TOuterClassInfo OuterClassInfo(owner:String, name:String, desc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.OuterClassInfo) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(desc, t) { $t.getdesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.touterclassinfo.OuterClassInfo.make($t0, $t1, $t2) }
}

%op TOuterClassInfo EmptyOuterClassInfo() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.EmptyOuterClassInfo) }
  make() { tom.library.adt.bytecode.types.touterclassinfo.EmptyOuterClassInfo.make() }
}

%op TFieldDescriptor VarTFieldDescriptor(labelTFieldDescriptor:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.VarTFieldDescriptor) }
  get_slot(labelTFieldDescriptor, t) { $t.getlabelTFieldDescriptor() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptor.VarTFieldDescriptor.make($t0) }
}

%op TFieldDescriptor EmptyPathTFieldDescriptor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.EmptyPathTFieldDescriptor) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.EmptyPathTFieldDescriptor.make() }
}

%op TFieldDescriptor ConsPathTFieldDescriptor(HeadPathTFieldDescriptor:int, TailPathTFieldDescriptor:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.ConsPathTFieldDescriptor) }
  get_slot(HeadPathTFieldDescriptor, t) { $t.getHeadPathTFieldDescriptor() }
  get_slot(TailPathTFieldDescriptor, t) { $t.getTailPathTFieldDescriptor() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfielddescriptor.ConsPathTFieldDescriptor.make($t0, $t1) }
}

%op TFieldDescriptor RefTFieldDescriptor(labelTFieldDescriptor:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.RefTFieldDescriptor) }
  get_slot(labelTFieldDescriptor, t) { $t.getlabelTFieldDescriptor() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptor.RefTFieldDescriptor.make($t0) }
}

%op TFieldDescriptor LabTFieldDescriptor(labelTFieldDescriptor:String, termTFieldDescriptor:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.LabTFieldDescriptor) }
  get_slot(labelTFieldDescriptor, t) { $t.getlabelTFieldDescriptor() }
  get_slot(termTFieldDescriptor, t) { $t.gettermTFieldDescriptor() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfielddescriptor.LabTFieldDescriptor.make($t0, $t1) }
}

%op TFieldDescriptor ObjectType(className:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.ObjectType) }
  get_slot(className, t) { $t.getclassName() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptor.ObjectType.make($t0) }
}

%op TFieldDescriptor ArrayType(arrayType:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.ArrayType) }
  get_slot(arrayType, t) { $t.getarrayType() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptor.ArrayType.make($t0) }
}

%op TFieldDescriptor B() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.B) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.B.make() }
}

%op TFieldDescriptor C() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.C) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.C.make() }
}

%op TFieldDescriptor D() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.D) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.D.make() }
}

%op TFieldDescriptor F() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.F) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.F.make() }
}

%op TFieldDescriptor I() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.I) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.I.make() }
}

%op TFieldDescriptor J() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.J) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.J.make() }
}

%op TFieldDescriptor S() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.S) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.S.make() }
}

%op TFieldDescriptor Z() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.Z) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.Z.make() }
}

%op TTryCatchBlock VarTTryCatchBlock(labelTTryCatchBlock:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.VarTTryCatchBlock) }
  get_slot(labelTTryCatchBlock, t) { $t.getlabelTTryCatchBlock() }
  make(t0) { tom.library.adt.bytecode.types.ttrycatchblock.VarTTryCatchBlock.make($t0) }
}

%op TTryCatchBlock EmptyPathTTryCatchBlock() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.EmptyPathTTryCatchBlock) }
  make() { tom.library.adt.bytecode.types.ttrycatchblock.EmptyPathTTryCatchBlock.make() }
}

%op TTryCatchBlock ConsPathTTryCatchBlock(HeadPathTTryCatchBlock:int, TailPathTTryCatchBlock:TTryCatchBlock) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.ConsPathTTryCatchBlock) }
  get_slot(HeadPathTTryCatchBlock, t) { $t.getHeadPathTTryCatchBlock() }
  get_slot(TailPathTTryCatchBlock, t) { $t.getTailPathTTryCatchBlock() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttrycatchblock.ConsPathTTryCatchBlock.make($t0, $t1) }
}

%op TTryCatchBlock RefTTryCatchBlock(labelTTryCatchBlock:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.RefTTryCatchBlock) }
  get_slot(labelTTryCatchBlock, t) { $t.getlabelTTryCatchBlock() }
  make(t0) { tom.library.adt.bytecode.types.ttrycatchblock.RefTTryCatchBlock.make($t0) }
}

%op TTryCatchBlock LabTTryCatchBlock(labelTTryCatchBlock:String, termTTryCatchBlock:TTryCatchBlock) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.LabTTryCatchBlock) }
  get_slot(labelTTryCatchBlock, t) { $t.getlabelTTryCatchBlock() }
  get_slot(termTTryCatchBlock, t) { $t.gettermTTryCatchBlock() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttrycatchblock.LabTTryCatchBlock.make($t0, $t1) }
}

%op TTryCatchBlock TryCatchBlock(start:TLabel, end:TLabel, handler:THandler) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.TryCatchBlock) }
  get_slot(start, t) { $t.getstart() }
  get_slot(end, t) { $t.getend() }
  get_slot(handler, t) { $t.gethandler() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.ttrycatchblock.TryCatchBlock.make($t0, $t1, $t2) }
}

%op TintList VarTintList(labelTintList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.VarTintList) }
  get_slot(labelTintList, t) { $t.getlabelTintList() }
  make(t0) { tom.library.adt.bytecode.types.tintlist.VarTintList.make($t0) }
}

%op TintList EmptyPathTintList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.EmptyPathTintList) }
  make() { tom.library.adt.bytecode.types.tintlist.EmptyPathTintList.make() }
}

%op TintList ConsPathTintList(HeadPathTintList:int, TailPathTintList:TintList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.ConsPathTintList) }
  get_slot(HeadPathTintList, t) { $t.getHeadPathTintList() }
  get_slot(TailPathTintList, t) { $t.getTailPathTintList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tintlist.ConsPathTintList.make($t0, $t1) }
}

%op TintList RefTintList(labelTintList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.RefTintList) }
  get_slot(labelTintList, t) { $t.getlabelTintList() }
  make(t0) { tom.library.adt.bytecode.types.tintlist.RefTintList.make($t0) }
}

%op TintList LabTintList(labelTintList:String, termTintList:TintList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.LabTintList) }
  get_slot(labelTintList, t) { $t.getlabelTintList() }
  get_slot(termTintList, t) { $t.gettermTintList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tintlist.LabTintList.make($t0, $t1) }
}

%op TintList EmptyintList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList) }
  make() { tom.library.adt.bytecode.types.tintlist.EmptyintList.make() }
}

%op TintList ConsintList(HeadintList:int, TailintList:TintList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.ConsintList) }
  get_slot(HeadintList, t) { $t.getHeadintList() }
  get_slot(TailintList, t) { $t.getTailintList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tintlist.ConsintList.make($t0, $t1) }
}

%op TMethodInfo VarTMethodInfo(labelTMethodInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.VarTMethodInfo) }
  get_slot(labelTMethodInfo, t) { $t.getlabelTMethodInfo() }
  make(t0) { tom.library.adt.bytecode.types.tmethodinfo.VarTMethodInfo.make($t0) }
}

%op TMethodInfo EmptyPathTMethodInfo() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.EmptyPathTMethodInfo) }
  make() { tom.library.adt.bytecode.types.tmethodinfo.EmptyPathTMethodInfo.make() }
}

%op TMethodInfo ConsPathTMethodInfo(HeadPathTMethodInfo:int, TailPathTMethodInfo:TMethodInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.ConsPathTMethodInfo) }
  get_slot(HeadPathTMethodInfo, t) { $t.getHeadPathTMethodInfo() }
  get_slot(TailPathTMethodInfo, t) { $t.getTailPathTMethodInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodinfo.ConsPathTMethodInfo.make($t0, $t1) }
}

%op TMethodInfo RefTMethodInfo(labelTMethodInfo:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.RefTMethodInfo) }
  get_slot(labelTMethodInfo, t) { $t.getlabelTMethodInfo() }
  make(t0) { tom.library.adt.bytecode.types.tmethodinfo.RefTMethodInfo.make($t0) }
}

%op TMethodInfo LabTMethodInfo(labelTMethodInfo:String, termTMethodInfo:TMethodInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.LabTMethodInfo) }
  get_slot(labelTMethodInfo, t) { $t.getlabelTMethodInfo() }
  get_slot(termTMethodInfo, t) { $t.gettermTMethodInfo() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodinfo.LabTMethodInfo.make($t0, $t1) }
}

%op TMethodInfo MethodInfo(owner:String, access:TAccessList, name:String, desc:TMethodDescriptor, signature:TSignature, exceptions:TStringList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.MethodInfo) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(access, t) { $t.getaccess() }
  get_slot(name, t) { $t.getname() }
  get_slot(desc, t) { $t.getdesc() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(exceptions, t) { $t.getexceptions() }
  make(t0, t1, t2, t3, t4, t5) { tom.library.adt.bytecode.types.tmethodinfo.MethodInfo.make($t0, $t1, $t2, $t3, $t4, $t5) }
}

%op THandler VarTHandler(labelTHandler:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.VarTHandler) }
  get_slot(labelTHandler, t) { $t.getlabelTHandler() }
  make(t0) { tom.library.adt.bytecode.types.thandler.VarTHandler.make($t0) }
}

%op THandler EmptyPathTHandler() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.EmptyPathTHandler) }
  make() { tom.library.adt.bytecode.types.thandler.EmptyPathTHandler.make() }
}

%op THandler ConsPathTHandler(HeadPathTHandler:int, TailPathTHandler:THandler) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.ConsPathTHandler) }
  get_slot(HeadPathTHandler, t) { $t.getHeadPathTHandler() }
  get_slot(TailPathTHandler, t) { $t.getTailPathTHandler() }
  make(t0, t1) { tom.library.adt.bytecode.types.thandler.ConsPathTHandler.make($t0, $t1) }
}

%op THandler RefTHandler(labelTHandler:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.RefTHandler) }
  get_slot(labelTHandler, t) { $t.getlabelTHandler() }
  make(t0) { tom.library.adt.bytecode.types.thandler.RefTHandler.make($t0) }
}

%op THandler LabTHandler(labelTHandler:String, termTHandler:THandler) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.LabTHandler) }
  get_slot(labelTHandler, t) { $t.getlabelTHandler() }
  get_slot(termTHandler, t) { $t.gettermTHandler() }
  make(t0, t1) { tom.library.adt.bytecode.types.thandler.LabTHandler.make($t0, $t1) }
}

%op THandler CatchHandler(handler:TLabel, type:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.CatchHandler) }
  get_slot(handler, t) { $t.gethandler() }
  get_slot(type, t) { $t.gettype() }
  make(t0, t1) { tom.library.adt.bytecode.types.thandler.CatchHandler.make($t0, $t1) }
}

%op THandler FinallyHandler(handler:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.FinallyHandler) }
  get_slot(handler, t) { $t.gethandler() }
  make(t0) { tom.library.adt.bytecode.types.thandler.FinallyHandler.make($t0) }
}

%op TInstructionList VarTInstructionList(labelTInstructionList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.VarTInstructionList) }
  get_slot(labelTInstructionList, t) { $t.getlabelTInstructionList() }
  make(t0) { tom.library.adt.bytecode.types.tinstructionlist.VarTInstructionList.make($t0) }
}

%op TInstructionList EmptyPathTInstructionList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyPathTInstructionList) }
  make() { tom.library.adt.bytecode.types.tinstructionlist.EmptyPathTInstructionList.make() }
}

%op TInstructionList ConsPathTInstructionList(HeadPathTInstructionList:int, TailPathTInstructionList:TInstructionList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsPathTInstructionList) }
  get_slot(HeadPathTInstructionList, t) { $t.getHeadPathTInstructionList() }
  get_slot(TailPathTInstructionList, t) { $t.getTailPathTInstructionList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstructionlist.ConsPathTInstructionList.make($t0, $t1) }
}

%op TInstructionList RefTInstructionList(labelTInstructionList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.RefTInstructionList) }
  get_slot(labelTInstructionList, t) { $t.getlabelTInstructionList() }
  make(t0) { tom.library.adt.bytecode.types.tinstructionlist.RefTInstructionList.make($t0) }
}

%op TInstructionList LabTInstructionList(labelTInstructionList:String, termTInstructionList:TInstructionList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.LabTInstructionList) }
  get_slot(labelTInstructionList, t) { $t.getlabelTInstructionList() }
  get_slot(termTInstructionList, t) { $t.gettermTInstructionList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstructionlist.LabTInstructionList.make($t0, $t1) }
}

%op TInstructionList EmptyInstructionList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList) }
  make() { tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList.make() }
}

%op TInstructionList ConsInstructionList(HeadInstructionList:TInstruction, TailInstructionList:TInstructionList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) }
  get_slot(HeadInstructionList, t) { $t.getHeadInstructionList() }
  get_slot(TailInstructionList, t) { $t.getTailInstructionList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make($t0, $t1) }
}

%op TFieldDescriptorList VarTFieldDescriptorList(labelTFieldDescriptorList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.VarTFieldDescriptorList) }
  get_slot(labelTFieldDescriptorList, t) { $t.getlabelTFieldDescriptorList() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptorlist.VarTFieldDescriptorList.make($t0) }
}

%op TFieldDescriptorList EmptyPathTFieldDescriptorList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyPathTFieldDescriptorList) }
  make() { tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyPathTFieldDescriptorList.make() }
}

%op TFieldDescriptorList ConsPathTFieldDescriptorList(HeadPathTFieldDescriptorList:int, TailPathTFieldDescriptorList:TFieldDescriptorList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.ConsPathTFieldDescriptorList) }
  get_slot(HeadPathTFieldDescriptorList, t) { $t.getHeadPathTFieldDescriptorList() }
  get_slot(TailPathTFieldDescriptorList, t) { $t.getTailPathTFieldDescriptorList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfielddescriptorlist.ConsPathTFieldDescriptorList.make($t0, $t1) }
}

%op TFieldDescriptorList RefTFieldDescriptorList(labelTFieldDescriptorList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.RefTFieldDescriptorList) }
  get_slot(labelTFieldDescriptorList, t) { $t.getlabelTFieldDescriptorList() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptorlist.RefTFieldDescriptorList.make($t0) }
}

%op TFieldDescriptorList LabTFieldDescriptorList(labelTFieldDescriptorList:String, termTFieldDescriptorList:TFieldDescriptorList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.LabTFieldDescriptorList) }
  get_slot(labelTFieldDescriptorList, t) { $t.getlabelTFieldDescriptorList() }
  get_slot(termTFieldDescriptorList, t) { $t.gettermTFieldDescriptorList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfielddescriptorlist.LabTFieldDescriptorList.make($t0, $t1) }
}

%op TFieldDescriptorList EmptyFieldDescriptorList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList) }
  make() { tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList.make() }
}

%op TFieldDescriptorList ConsFieldDescriptorList(HeadFieldDescriptorList:TFieldDescriptor, TailFieldDescriptorList:TFieldDescriptorList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList) }
  get_slot(HeadFieldDescriptorList, t) { $t.getHeadFieldDescriptorList() }
  get_slot(TailFieldDescriptorList, t) { $t.getTailFieldDescriptorList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList.make($t0, $t1) }
}

%op TLabel VarTLabel(labelTLabel:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.VarTLabel) }
  get_slot(labelTLabel, t) { $t.getlabelTLabel() }
  make(t0) { tom.library.adt.bytecode.types.tlabel.VarTLabel.make($t0) }
}

%op TLabel EmptyPathTLabel() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.EmptyPathTLabel) }
  make() { tom.library.adt.bytecode.types.tlabel.EmptyPathTLabel.make() }
}

%op TLabel ConsPathTLabel(HeadPathTLabel:int, TailPathTLabel:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.ConsPathTLabel) }
  get_slot(HeadPathTLabel, t) { $t.getHeadPathTLabel() }
  get_slot(TailPathTLabel, t) { $t.getTailPathTLabel() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlabel.ConsPathTLabel.make($t0, $t1) }
}

%op TLabel RefTLabel(labelTLabel:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.RefTLabel) }
  get_slot(labelTLabel, t) { $t.getlabelTLabel() }
  make(t0) { tom.library.adt.bytecode.types.tlabel.RefTLabel.make($t0) }
}

%op TLabel LabTLabel(labelTLabel:String, termTLabel:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.LabTLabel) }
  get_slot(labelTLabel, t) { $t.getlabelTLabel() }
  get_slot(termTLabel, t) { $t.gettermTLabel() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlabel.LabTLabel.make($t0, $t1) }
}

%op TLabel Label(id:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.Label) }
  get_slot(id, t) { $t.getid() }
  make(t0) { tom.library.adt.bytecode.types.tlabel.Label.make($t0) }
}

%op TLabel Ref(inst:TInstruction) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.Ref) }
  get_slot(inst, t) { $t.getinst() }
  make(t0) { tom.library.adt.bytecode.types.tlabel.Ref.make($t0) }
}

%op TLocalVariableList VarTLocalVariableList(labelTLocalVariableList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.VarTLocalVariableList) }
  get_slot(labelTLocalVariableList, t) { $t.getlabelTLocalVariableList() }
  make(t0) { tom.library.adt.bytecode.types.tlocalvariablelist.VarTLocalVariableList.make($t0) }
}

%op TLocalVariableList EmptyPathTLocalVariableList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyPathTLocalVariableList) }
  make() { tom.library.adt.bytecode.types.tlocalvariablelist.EmptyPathTLocalVariableList.make() }
}

%op TLocalVariableList ConsPathTLocalVariableList(HeadPathTLocalVariableList:int, TailPathTLocalVariableList:TLocalVariableList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsPathTLocalVariableList) }
  get_slot(HeadPathTLocalVariableList, t) { $t.getHeadPathTLocalVariableList() }
  get_slot(TailPathTLocalVariableList, t) { $t.getTailPathTLocalVariableList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlocalvariablelist.ConsPathTLocalVariableList.make($t0, $t1) }
}

%op TLocalVariableList RefTLocalVariableList(labelTLocalVariableList:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.RefTLocalVariableList) }
  get_slot(labelTLocalVariableList, t) { $t.getlabelTLocalVariableList() }
  make(t0) { tom.library.adt.bytecode.types.tlocalvariablelist.RefTLocalVariableList.make($t0) }
}

%op TLocalVariableList LabTLocalVariableList(labelTLocalVariableList:String, termTLocalVariableList:TLocalVariableList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.LabTLocalVariableList) }
  get_slot(labelTLocalVariableList, t) { $t.getlabelTLocalVariableList() }
  get_slot(termTLocalVariableList, t) { $t.gettermTLocalVariableList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlocalvariablelist.LabTLocalVariableList.make($t0, $t1) }
}

%op TLocalVariableList EmptyLocalVariableList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList) }
  make() { tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() }
}

%op TLocalVariableList ConsLocalVariableList(HeadLocalVariableList:TLocalVariable, TailLocalVariableList:TLocalVariableList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList) }
  get_slot(HeadLocalVariableList, t) { $t.getHeadLocalVariableList() }
  get_slot(TailLocalVariableList, t) { $t.getTailLocalVariableList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make($t0, $t1) }
}


%oplist TLocalVariable PathTLocalVariable(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlocalvariable.ConsPathTLocalVariable) || ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.EmptyPathTLocalVariable)) }
  make_empty() { tom.library.adt.bytecode.types.tlocalvariable.EmptyPathTLocalVariable.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlocalvariable.ConsPathTLocalVariable.make($e,$l) }
  get_head(l) { $l.getHeadPathTLocalVariable() }
  get_tail(l) { $l.getTailPathTLocalVariable() }
  is_empty(l) { $l.isEmptyPathTLocalVariable() }
}

%oplist TMethodCode PathTMethodCode(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tmethodcode.ConsPathTMethodCode) || ($t instanceof tom.library.adt.bytecode.types.tmethodcode.EmptyPathTMethodCode)) }
  make_empty() { tom.library.adt.bytecode.types.tmethodcode.EmptyPathTMethodCode.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tmethodcode.ConsPathTMethodCode.make($e,$l) }
  get_head(l) { $l.getHeadPathTMethodCode() }
  get_tail(l) { $l.getTailPathTMethodCode() }
  is_empty(l) { $l.isEmptyPathTMethodCode() }
}

%oplist TMethodList PathTMethodList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsPathTMethodList) || ($t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyPathTMethodList)) }
  make_empty() { tom.library.adt.bytecode.types.tmethodlist.EmptyPathTMethodList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tmethodlist.ConsPathTMethodList.make($e,$l) }
  get_head(l) { $l.getHeadPathTMethodList() }
  get_tail(l) { $l.getTailPathTMethodList() }
  is_empty(l) { $l.isEmptyPathTMethodList() }
}

%oplist TMethodList MethodList(TMethod*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList) || ($t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList)) }
  make_empty() { tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make($e,$l) }
  get_head(l) { $l.getHeadMethodList() }
  get_tail(l) { $l.getTailMethodList() }
  is_empty(l) { $l.isEmptyMethodList() }
}

%oplist TSignature PathTSignature(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tsignature.ConsPathTSignature) || ($t instanceof tom.library.adt.bytecode.types.tsignature.EmptyPathTSignature)) }
  make_empty() { tom.library.adt.bytecode.types.tsignature.EmptyPathTSignature.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tsignature.ConsPathTSignature.make($e,$l) }
  get_head(l) { $l.getHeadPathTSignature() }
  get_tail(l) { $l.getTailPathTSignature() }
  is_empty(l) { $l.isEmptyPathTSignature() }
}

%oplist TInnerClassInfo PathTInnerClassInfo(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.ConsPathTInnerClassInfo) || ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.EmptyPathTInnerClassInfo)) }
  make_empty() { tom.library.adt.bytecode.types.tinnerclassinfo.EmptyPathTInnerClassInfo.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinnerclassinfo.ConsPathTInnerClassInfo.make($e,$l) }
  get_head(l) { $l.getHeadPathTInnerClassInfo() }
  get_tail(l) { $l.getTailPathTInnerClassInfo() }
  is_empty(l) { $l.isEmptyPathTInnerClassInfo() }
}

%oplist TAccess PathTAccess(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.taccess.ConsPathTAccess) || ($t instanceof tom.library.adt.bytecode.types.taccess.EmptyPathTAccess)) }
  make_empty() { tom.library.adt.bytecode.types.taccess.EmptyPathTAccess.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.taccess.ConsPathTAccess.make($e,$l) }
  get_head(l) { $l.getHeadPathTAccess() }
  get_tail(l) { $l.getTailPathTAccess() }
  is_empty(l) { $l.isEmptyPathTAccess() }
}

%oplist TReturnDescriptor PathTReturnDescriptor(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.treturndescriptor.ConsPathTReturnDescriptor) || ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.EmptyPathTReturnDescriptor)) }
  make_empty() { tom.library.adt.bytecode.types.treturndescriptor.EmptyPathTReturnDescriptor.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.treturndescriptor.ConsPathTReturnDescriptor.make($e,$l) }
  get_head(l) { $l.getHeadPathTReturnDescriptor() }
  get_tail(l) { $l.getTailPathTReturnDescriptor() }
  is_empty(l) { $l.isEmptyPathTReturnDescriptor() }
}

%oplist TStringList PathTStringList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tstringlist.ConsPathTStringList) || ($t instanceof tom.library.adt.bytecode.types.tstringlist.EmptyPathTStringList)) }
  make_empty() { tom.library.adt.bytecode.types.tstringlist.EmptyPathTStringList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tstringlist.ConsPathTStringList.make($e,$l) }
  get_head(l) { $l.getHeadPathTStringList() }
  get_tail(l) { $l.getTailPathTStringList() }
  is_empty(l) { $l.isEmptyPathTStringList() }
}

%oplist TStringList StringList(String*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tstringlist.ConsStringList) || ($t instanceof tom.library.adt.bytecode.types.tstringlist.EmptyStringList)) }
  make_empty() { tom.library.adt.bytecode.types.tstringlist.EmptyStringList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tstringlist.ConsStringList.make($e,$l) }
  get_head(l) { $l.getHeadStringList() }
  get_tail(l) { $l.getTailStringList() }
  is_empty(l) { $l.isEmptyStringList() }
}

%oplist TMethod PathTMethod(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tmethod.ConsPathTMethod) || ($t instanceof tom.library.adt.bytecode.types.tmethod.EmptyPathTMethod)) }
  make_empty() { tom.library.adt.bytecode.types.tmethod.EmptyPathTMethod.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tmethod.ConsPathTMethod.make($e,$l) }
  get_head(l) { $l.getHeadPathTMethod() }
  get_tail(l) { $l.getTailPathTMethod() }
  is_empty(l) { $l.isEmptyPathTMethod() }
}

%oplist TLabelList PathTLabelList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlabellist.ConsPathTLabelList) || ($t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyPathTLabelList)) }
  make_empty() { tom.library.adt.bytecode.types.tlabellist.EmptyPathTLabelList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlabellist.ConsPathTLabelList.make($e,$l) }
  get_head(l) { $l.getHeadPathTLabelList() }
  get_tail(l) { $l.getTailPathTLabelList() }
  is_empty(l) { $l.isEmptyPathTLabelList() }
}

%oplist TLabelList LabelList(TLabel*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList) || ($t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList)) }
  make_empty() { tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make($e,$l) }
  get_head(l) { $l.getHeadLabelList() }
  get_tail(l) { $l.getTailLabelList() }
  is_empty(l) { $l.isEmptyLabelList() }
}

%oplist TInstruction PathTInstruction(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinstruction.ConsPathTInstruction) || ($t instanceof tom.library.adt.bytecode.types.tinstruction.EmptyPathTInstruction)) }
  make_empty() { tom.library.adt.bytecode.types.tinstruction.EmptyPathTInstruction.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinstruction.ConsPathTInstruction.make($e,$l) }
  get_head(l) { $l.getHeadPathTInstruction() }
  get_tail(l) { $l.getTailPathTInstruction() }
  is_empty(l) { $l.isEmptyPathTInstruction() }
}

%oplist TClass PathTClass(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tclass.ConsPathTClass) || ($t instanceof tom.library.adt.bytecode.types.tclass.EmptyPathTClass)) }
  make_empty() { tom.library.adt.bytecode.types.tclass.EmptyPathTClass.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tclass.ConsPathTClass.make($e,$l) }
  get_head(l) { $l.getHeadPathTClass() }
  get_tail(l) { $l.getTailPathTClass() }
  is_empty(l) { $l.isEmptyPathTClass() }
}

%oplist TInnerClassInfoList PathTInnerClassInfoList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.ConsPathTInnerClassInfoList) || ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyPathTInnerClassInfoList)) }
  make_empty() { tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyPathTInnerClassInfoList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinnerclassinfolist.ConsPathTInnerClassInfoList.make($e,$l) }
  get_head(l) { $l.getHeadPathTInnerClassInfoList() }
  get_tail(l) { $l.getTailPathTInnerClassInfoList() }
  is_empty(l) { $l.isEmptyPathTInnerClassInfoList() }
}

%oplist TInnerClassInfoList InnerClassInfoList(TInnerClassInfo*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList) || ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList)) }
  make_empty() { tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList.make($e,$l) }
  get_head(l) { $l.getHeadInnerClassInfoList() }
  get_tail(l) { $l.getTailInnerClassInfoList() }
  is_empty(l) { $l.isEmptyInnerClassInfoList() }
}

%oplist TValue PathTValue(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tvalue.ConsPathTValue) || ($t instanceof tom.library.adt.bytecode.types.tvalue.EmptyPathTValue)) }
  make_empty() { tom.library.adt.bytecode.types.tvalue.EmptyPathTValue.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tvalue.ConsPathTValue.make($e,$l) }
  get_head(l) { $l.getHeadPathTValue() }
  get_tail(l) { $l.getTailPathTValue() }
  is_empty(l) { $l.isEmptyPathTValue() }
}

%oplist TField PathTField(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfield.ConsPathTField) || ($t instanceof tom.library.adt.bytecode.types.tfield.EmptyPathTField)) }
  make_empty() { tom.library.adt.bytecode.types.tfield.EmptyPathTField.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfield.ConsPathTField.make($e,$l) }
  get_head(l) { $l.getHeadPathTField() }
  get_tail(l) { $l.getTailPathTField() }
  is_empty(l) { $l.isEmptyPathTField() }
}

%oplist TTryCatchBlockList PathTTryCatchBlockList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsPathTTryCatchBlockList) || ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyPathTTryCatchBlockList)) }
  make_empty() { tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyPathTTryCatchBlockList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.ttrycatchblocklist.ConsPathTTryCatchBlockList.make($e,$l) }
  get_head(l) { $l.getHeadPathTTryCatchBlockList() }
  get_tail(l) { $l.getTailPathTTryCatchBlockList() }
  is_empty(l) { $l.isEmptyPathTTryCatchBlockList() }
}

%oplist TTryCatchBlockList TryCatchBlockList(TTryCatchBlock*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList) || ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList)) }
  make_empty() { tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make($e,$l) }
  get_head(l) { $l.getHeadTryCatchBlockList() }
  get_tail(l) { $l.getTailTryCatchBlockList() }
  is_empty(l) { $l.isEmptyTryCatchBlockList() }
}

%oplist TType PathTType(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.ttype.ConsPathTType) || ($t instanceof tom.library.adt.bytecode.types.ttype.EmptyPathTType)) }
  make_empty() { tom.library.adt.bytecode.types.ttype.EmptyPathTType.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.ttype.ConsPathTType.make($e,$l) }
  get_head(l) { $l.getHeadPathTType() }
  get_tail(l) { $l.getTailPathTType() }
  is_empty(l) { $l.isEmptyPathTType() }
}

%oplist TClassInfo PathTClassInfo(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tclassinfo.ConsPathTClassInfo) || ($t instanceof tom.library.adt.bytecode.types.tclassinfo.EmptyPathTClassInfo)) }
  make_empty() { tom.library.adt.bytecode.types.tclassinfo.EmptyPathTClassInfo.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tclassinfo.ConsPathTClassInfo.make($e,$l) }
  get_head(l) { $l.getHeadPathTClassInfo() }
  get_tail(l) { $l.getTailPathTClassInfo() }
  is_empty(l) { $l.isEmptyPathTClassInfo() }
}

%oplist TAccessList PathTAccessList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.taccesslist.ConsPathTAccessList) || ($t instanceof tom.library.adt.bytecode.types.taccesslist.EmptyPathTAccessList)) }
  make_empty() { tom.library.adt.bytecode.types.taccesslist.EmptyPathTAccessList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.taccesslist.ConsPathTAccessList.make($e,$l) }
  get_head(l) { $l.getHeadPathTAccessList() }
  get_tail(l) { $l.getTailPathTAccessList() }
  is_empty(l) { $l.isEmptyPathTAccessList() }
}

%oplist TAccessList AccessList(TAccess*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.taccesslist.ConsAccessList) || ($t instanceof tom.library.adt.bytecode.types.taccesslist.EmptyAccessList)) }
  make_empty() { tom.library.adt.bytecode.types.taccesslist.EmptyAccessList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.taccesslist.ConsAccessList.make($e,$l) }
  get_head(l) { $l.getHeadAccessList() }
  get_tail(l) { $l.getTailAccessList() }
  is_empty(l) { $l.isEmptyAccessList() }
}

%oplist TMethodDescriptor PathTMethodDescriptor(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.ConsPathTMethodDescriptor) || ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.EmptyPathTMethodDescriptor)) }
  make_empty() { tom.library.adt.bytecode.types.tmethoddescriptor.EmptyPathTMethodDescriptor.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tmethoddescriptor.ConsPathTMethodDescriptor.make($e,$l) }
  get_head(l) { $l.getHeadPathTMethodDescriptor() }
  get_tail(l) { $l.getTailPathTMethodDescriptor() }
  is_empty(l) { $l.isEmptyPathTMethodDescriptor() }
}

%oplist TFieldList PathTFieldList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfieldlist.ConsPathTFieldList) || ($t instanceof tom.library.adt.bytecode.types.tfieldlist.EmptyPathTFieldList)) }
  make_empty() { tom.library.adt.bytecode.types.tfieldlist.EmptyPathTFieldList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfieldlist.ConsPathTFieldList.make($e,$l) }
  get_head(l) { $l.getHeadPathTFieldList() }
  get_tail(l) { $l.getTailPathTFieldList() }
  is_empty(l) { $l.isEmptyPathTFieldList() }
}

%oplist TFieldList FieldList(TField*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfieldlist.ConsFieldList) || ($t instanceof tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList)) }
  make_empty() { tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfieldlist.ConsFieldList.make($e,$l) }
  get_head(l) { $l.getHeadFieldList() }
  get_tail(l) { $l.getTailFieldList() }
  is_empty(l) { $l.isEmptyFieldList() }
}

%oplist TOuterClassInfo PathTOuterClassInfo(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.touterclassinfo.ConsPathTOuterClassInfo) || ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.EmptyPathTOuterClassInfo)) }
  make_empty() { tom.library.adt.bytecode.types.touterclassinfo.EmptyPathTOuterClassInfo.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.touterclassinfo.ConsPathTOuterClassInfo.make($e,$l) }
  get_head(l) { $l.getHeadPathTOuterClassInfo() }
  get_tail(l) { $l.getTailPathTOuterClassInfo() }
  is_empty(l) { $l.isEmptyPathTOuterClassInfo() }
}

%oplist TFieldDescriptor PathTFieldDescriptor(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.ConsPathTFieldDescriptor) || ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.EmptyPathTFieldDescriptor)) }
  make_empty() { tom.library.adt.bytecode.types.tfielddescriptor.EmptyPathTFieldDescriptor.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfielddescriptor.ConsPathTFieldDescriptor.make($e,$l) }
  get_head(l) { $l.getHeadPathTFieldDescriptor() }
  get_tail(l) { $l.getTailPathTFieldDescriptor() }
  is_empty(l) { $l.isEmptyPathTFieldDescriptor() }
}

%oplist TTryCatchBlock PathTTryCatchBlock(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.ConsPathTTryCatchBlock) || ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.EmptyPathTTryCatchBlock)) }
  make_empty() { tom.library.adt.bytecode.types.ttrycatchblock.EmptyPathTTryCatchBlock.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.ttrycatchblock.ConsPathTTryCatchBlock.make($e,$l) }
  get_head(l) { $l.getHeadPathTTryCatchBlock() }
  get_tail(l) { $l.getTailPathTTryCatchBlock() }
  is_empty(l) { $l.isEmptyPathTTryCatchBlock() }
}

%oplist TintList PathTintList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tintlist.ConsPathTintList) || ($t instanceof tom.library.adt.bytecode.types.tintlist.EmptyPathTintList)) }
  make_empty() { tom.library.adt.bytecode.types.tintlist.EmptyPathTintList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tintlist.ConsPathTintList.make($e,$l) }
  get_head(l) { $l.getHeadPathTintList() }
  get_tail(l) { $l.getTailPathTintList() }
  is_empty(l) { $l.isEmptyPathTintList() }
}

%oplist TintList intList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tintlist.ConsintList) || ($t instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList)) }
  make_empty() { tom.library.adt.bytecode.types.tintlist.EmptyintList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tintlist.ConsintList.make($e,$l) }
  get_head(l) { $l.getHeadintList() }
  get_tail(l) { $l.getTailintList() }
  is_empty(l) { $l.isEmptyintList() }
}

%oplist TMethodInfo PathTMethodInfo(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tmethodinfo.ConsPathTMethodInfo) || ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.EmptyPathTMethodInfo)) }
  make_empty() { tom.library.adt.bytecode.types.tmethodinfo.EmptyPathTMethodInfo.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tmethodinfo.ConsPathTMethodInfo.make($e,$l) }
  get_head(l) { $l.getHeadPathTMethodInfo() }
  get_tail(l) { $l.getTailPathTMethodInfo() }
  is_empty(l) { $l.isEmptyPathTMethodInfo() }
}

%oplist THandler PathTHandler(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.thandler.ConsPathTHandler) || ($t instanceof tom.library.adt.bytecode.types.thandler.EmptyPathTHandler)) }
  make_empty() { tom.library.adt.bytecode.types.thandler.EmptyPathTHandler.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.thandler.ConsPathTHandler.make($e,$l) }
  get_head(l) { $l.getHeadPathTHandler() }
  get_tail(l) { $l.getTailPathTHandler() }
  is_empty(l) { $l.isEmptyPathTHandler() }
}

%oplist TInstructionList PathTInstructionList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsPathTInstructionList) || ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyPathTInstructionList)) }
  make_empty() { tom.library.adt.bytecode.types.tinstructionlist.EmptyPathTInstructionList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinstructionlist.ConsPathTInstructionList.make($e,$l) }
  get_head(l) { $l.getHeadPathTInstructionList() }
  get_tail(l) { $l.getTailPathTInstructionList() }
  is_empty(l) { $l.isEmptyPathTInstructionList() }
}

%oplist TInstructionList InstructionList(TInstruction*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) || ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList)) }
  make_empty() { tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make($e,$l) }
  get_head(l) { $l.getHeadInstructionList() }
  get_tail(l) { $l.getTailInstructionList() }
  is_empty(l) { $l.isEmptyInstructionList() }
}

%oplist TFieldDescriptorList PathTFieldDescriptorList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.ConsPathTFieldDescriptorList) || ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyPathTFieldDescriptorList)) }
  make_empty() { tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyPathTFieldDescriptorList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfielddescriptorlist.ConsPathTFieldDescriptorList.make($e,$l) }
  get_head(l) { $l.getHeadPathTFieldDescriptorList() }
  get_tail(l) { $l.getTailPathTFieldDescriptorList() }
  is_empty(l) { $l.isEmptyPathTFieldDescriptorList() }
}

%oplist TFieldDescriptorList FieldDescriptorList(TFieldDescriptor*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList) || ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList)) }
  make_empty() { tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList.make($e,$l) }
  get_head(l) { $l.getHeadFieldDescriptorList() }
  get_tail(l) { $l.getTailFieldDescriptorList() }
  is_empty(l) { $l.isEmptyFieldDescriptorList() }
}

%oplist TLabel PathTLabel(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlabel.ConsPathTLabel) || ($t instanceof tom.library.adt.bytecode.types.tlabel.EmptyPathTLabel)) }
  make_empty() { tom.library.adt.bytecode.types.tlabel.EmptyPathTLabel.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlabel.ConsPathTLabel.make($e,$l) }
  get_head(l) { $l.getHeadPathTLabel() }
  get_tail(l) { $l.getTailPathTLabel() }
  is_empty(l) { $l.isEmptyPathTLabel() }
}

%oplist TLocalVariableList PathTLocalVariableList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsPathTLocalVariableList) || ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyPathTLocalVariableList)) }
  make_empty() { tom.library.adt.bytecode.types.tlocalvariablelist.EmptyPathTLocalVariableList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlocalvariablelist.ConsPathTLocalVariableList.make($e,$l) }
  get_head(l) { $l.getHeadPathTLocalVariableList() }
  get_tail(l) { $l.getTailPathTLocalVariableList() }
  is_empty(l) { $l.isEmptyPathTLocalVariableList() }
}

%oplist TLocalVariableList LocalVariableList(TLocalVariable*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList) || ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList)) }
  make_empty() { tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make($e,$l) }
  get_head(l) { $l.getHeadLocalVariableList() }
  get_tail(l) { $l.getTailLocalVariableList() }
  is_empty(l) { $l.isEmptyLocalVariableList() }
}
