
%include { string.tom }

%include { int.tom }

%include { double.tom }

%include { long.tom }

%include { float.tom }

%typeterm TLocalVariable {
  implement { tom.library.adt.bytecode.types.TLocalVariable }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TLocalVariable }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TMethodCode {
  implement { tom.library.adt.bytecode.types.TMethodCode }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TMethodCode }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TMethodList {
  implement { tom.library.adt.bytecode.types.TMethodList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TMethodList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TSignature {
  implement { tom.library.adt.bytecode.types.TSignature }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TSignature }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TInnerClassInfo {
  implement { tom.library.adt.bytecode.types.TInnerClassInfo }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TInnerClassInfo }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TAccess {
  implement { tom.library.adt.bytecode.types.TAccess }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TAccess }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TReturnDescriptor {
  implement { tom.library.adt.bytecode.types.TReturnDescriptor }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TReturnDescriptor }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TStringList {
  implement { tom.library.adt.bytecode.types.TStringList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TStringList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TMethod {
  implement { tom.library.adt.bytecode.types.TMethod }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TMethod }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TLabelList {
  implement { tom.library.adt.bytecode.types.TLabelList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TLabelList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TInstruction {
  implement { tom.library.adt.bytecode.types.TInstruction }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TInstruction }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TClass {
  implement { tom.library.adt.bytecode.types.TClass }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TClass }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TInnerClassInfoList {
  implement { tom.library.adt.bytecode.types.TInnerClassInfoList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TInnerClassInfoList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TValue {
  implement { tom.library.adt.bytecode.types.TValue }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TValue }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TField {
  implement { tom.library.adt.bytecode.types.TField }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TField }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TTryCatchBlockList {
  implement { tom.library.adt.bytecode.types.TTryCatchBlockList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TTryCatchBlockList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TType {
  implement { tom.library.adt.bytecode.types.TType }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TType }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TClassInfo {
  implement { tom.library.adt.bytecode.types.TClassInfo }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TClassInfo }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TAccessList {
  implement { tom.library.adt.bytecode.types.TAccessList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TAccessList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TMethodDescriptor {
  implement { tom.library.adt.bytecode.types.TMethodDescriptor }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TMethodDescriptor }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TFieldList {
  implement { tom.library.adt.bytecode.types.TFieldList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TFieldList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TOuterClassInfo {
  implement { tom.library.adt.bytecode.types.TOuterClassInfo }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TOuterClassInfo }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TFieldDescriptor {
  implement { tom.library.adt.bytecode.types.TFieldDescriptor }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TFieldDescriptor }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TTryCatchBlock {
  implement { tom.library.adt.bytecode.types.TTryCatchBlock }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TTryCatchBlock }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TintList {
  implement { tom.library.adt.bytecode.types.TintList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TintList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TMethodInfo {
  implement { tom.library.adt.bytecode.types.TMethodInfo }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TMethodInfo }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm THandler {
  implement { tom.library.adt.bytecode.types.THandler }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.THandler }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TInstructionList {
  implement { tom.library.adt.bytecode.types.TInstructionList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TInstructionList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TFieldDescriptorList {
  implement { tom.library.adt.bytecode.types.TFieldDescriptorList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TFieldDescriptorList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TLabel {
  implement { tom.library.adt.bytecode.types.TLabel }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TLabel }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}

%typeterm TLocalVariableList {
  implement { tom.library.adt.bytecode.types.TLocalVariableList }
  is_sort(t) { t instanceof tom.library.adt.bytecode.types.TLocalVariableList }
  equals(t1,t2) { t1.equals(t2) }
  visitor_fwd { tom.library.adt.bytecode.BytecodeBasicStrategy }
}
%op TLocalVariable LocalVariable(name:String, typeDesc:String, signature:TSignature, start:TLabel, end:TLabel, index:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariable.LocalVariable) }
  get_slot(name, t) { $t.getname() }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(start, t) { $t.getstart() }
  get_slot(end, t) { $t.getend() }
  get_slot(index, t) { $t.getindex() }
  make(t0, t1, t2, t3, t4, t5) { tom.library.adt.bytecode.types.tlocalvariable.LocalVariable.make(t0, t1, t2, t3, t4, t5) }
}

%op TMethodCode MethodCode(instructions:TInstructionList, localVariables:TLocalVariableList, tryCatchBlocks:TTryCatchBlockList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.MethodCode) }
  get_slot(instructions, t) { $t.getinstructions() }
  get_slot(localVariables, t) { $t.getlocalVariables() }
  get_slot(tryCatchBlocks, t) { $t.gettryCatchBlocks() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tmethodcode.MethodCode.make(t0, t1, t2) }
}

%op TMethodCode EmptyCode() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodcode.EmptyCode) }
  make() { tom.library.adt.bytecode.types.tmethodcode.EmptyCode.make() }
}

%op TMethodList EmptyMethodList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList) }
  make() { tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() }
}

%op TMethodList ConsMethodList(HeadMethodList:TMethod, TailMethodList:TMethodList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList) }
  get_slot(HeadMethodList, t) { $t.getHeadMethodList() }
  get_slot(TailMethodList, t) { $t.getTailMethodList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make(t0, t1) }
}

%op TSignature Signature(sig:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.Signature) }
  get_slot(sig, t) { $t.getsig() }
  make(t0) { tom.library.adt.bytecode.types.tsignature.Signature.make(t0) }
}

%op TSignature EmptySignature() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tsignature.EmptySignature) }
  make() { tom.library.adt.bytecode.types.tsignature.EmptySignature.make() }
}

%op TInnerClassInfo InnerClassInfo(name:String, outerName:String, innerName:String, access:TAccessList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfo.InnerClassInfo) }
  get_slot(name, t) { $t.getname() }
  get_slot(outerName, t) { $t.getouterName() }
  get_slot(innerName, t) { $t.getinnerName() }
  get_slot(access, t) { $t.getaccess() }
  make(t0, t1, t2, t3) { tom.library.adt.bytecode.types.tinnerclassinfo.InnerClassInfo.make(t0, t1, t2, t3) }
}

%op TAccess ABSTRACT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.ABSTRACT) }
  make() { tom.library.adt.bytecode.types.taccess.ABSTRACT.make() }
}

%op TAccess ANNOTATION() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.ANNOTATION) }
  make() { tom.library.adt.bytecode.types.taccess.ANNOTATION.make() }
}

%op TAccess BRIDGE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.BRIDGE) }
  make() { tom.library.adt.bytecode.types.taccess.BRIDGE.make() }
}

%op TAccess DEPRECATED() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.DEPRECATED) }
  make() { tom.library.adt.bytecode.types.taccess.DEPRECATED.make() }
}

%op TAccess ENUM() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.ENUM) }
  make() { tom.library.adt.bytecode.types.taccess.ENUM.make() }
}

%op TAccess FINAL() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.FINAL) }
  make() { tom.library.adt.bytecode.types.taccess.FINAL.make() }
}

%op TAccess INTERFACE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.INTERFACE) }
  make() { tom.library.adt.bytecode.types.taccess.INTERFACE.make() }
}

%op TAccess NATIVE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.NATIVE) }
  make() { tom.library.adt.bytecode.types.taccess.NATIVE.make() }
}

%op TAccess PRIVATE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.PRIVATE) }
  make() { tom.library.adt.bytecode.types.taccess.PRIVATE.make() }
}

%op TAccess PROTECTED() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.PROTECTED) }
  make() { tom.library.adt.bytecode.types.taccess.PROTECTED.make() }
}

%op TAccess PUBLIC() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.PUBLIC) }
  make() { tom.library.adt.bytecode.types.taccess.PUBLIC.make() }
}

%op TAccess STATIC() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.STATIC) }
  make() { tom.library.adt.bytecode.types.taccess.STATIC.make() }
}

%op TAccess STRICT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.STRICT) }
  make() { tom.library.adt.bytecode.types.taccess.STRICT.make() }
}

%op TAccess SUPER() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.SUPER) }
  make() { tom.library.adt.bytecode.types.taccess.SUPER.make() }
}

%op TAccess SYNCHRONIZED() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.SYNCHRONIZED) }
  make() { tom.library.adt.bytecode.types.taccess.SYNCHRONIZED.make() }
}

%op TAccess SYNTHETIC() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.SYNTHETIC) }
  make() { tom.library.adt.bytecode.types.taccess.SYNTHETIC.make() }
}

%op TAccess TRANSIENT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.TRANSIENT) }
  make() { tom.library.adt.bytecode.types.taccess.TRANSIENT.make() }
}

%op TAccess VARARGS() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.VARARGS) }
  make() { tom.library.adt.bytecode.types.taccess.VARARGS.make() }
}

%op TAccess VOLATILE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccess.VOLATILE) }
  make() { tom.library.adt.bytecode.types.taccess.VOLATILE.make() }
}

%op TReturnDescriptor ReturnDescriptor(type:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.ReturnDescriptor) }
  get_slot(type, t) { $t.gettype() }
  make(t0) { tom.library.adt.bytecode.types.treturndescriptor.ReturnDescriptor.make(t0) }
}

%op TReturnDescriptor Void() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.treturndescriptor.Void) }
  make() { tom.library.adt.bytecode.types.treturndescriptor.Void.make() }
}

%op TStringList EmptyStringList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.EmptyStringList) }
  make() { tom.library.adt.bytecode.types.tstringlist.EmptyStringList.make() }
}

%op TStringList ConsStringList(HeadStringList:String, TailStringList:TStringList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tstringlist.ConsStringList) }
  get_slot(HeadStringList, t) { $t.getHeadStringList() }
  get_slot(TailStringList, t) { $t.getTailStringList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tstringlist.ConsStringList.make(t0, t1) }
}

%op TMethod Method(info:TMethodInfo, code:TMethodCode) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethod.Method) }
  get_slot(info, t) { $t.getinfo() }
  get_slot(code, t) { $t.getcode() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethod.Method.make(t0, t1) }
}

%op TLabelList EmptyLabelList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList) }
  make() { tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() }
}

%op TLabelList ConsLabelList(HeadLabelList:TLabel, TailLabelList:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList) }
  get_slot(HeadLabelList, t) { $t.getHeadLabelList() }
  get_slot(TailLabelList, t) { $t.getTailLabelList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make(t0, t1) }
}

%op TInstruction Anchor(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Anchor) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Anchor.make(t0) }
}

%op TInstruction Nop() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Nop) }
  make() { tom.library.adt.bytecode.types.tinstruction.Nop.make() }
}

%op TInstruction Aconst_null() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aconst_null) }
  make() { tom.library.adt.bytecode.types.tinstruction.Aconst_null.make() }
}

%op TInstruction Iconst_m1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_m1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_m1.make() }
}

%op TInstruction Iconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_0.make() }
}

%op TInstruction Iconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_1.make() }
}

%op TInstruction Iconst_2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_2.make() }
}

%op TInstruction Iconst_3() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_3) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_3.make() }
}

%op TInstruction Iconst_4() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_4) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_4.make() }
}

%op TInstruction Iconst_5() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iconst_5) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iconst_5.make() }
}

%op TInstruction Lconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lconst_0.make() }
}

%op TInstruction Lconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lconst_1.make() }
}

%op TInstruction Fconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fconst_0.make() }
}

%op TInstruction Fconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fconst_1.make() }
}

%op TInstruction Fconst_2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fconst_2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fconst_2.make() }
}

%op TInstruction Dconst_0() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dconst_0) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dconst_0.make() }
}

%op TInstruction Dconst_1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dconst_1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dconst_1.make() }
}

%op TInstruction Bipush(operand:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Bipush) }
  get_slot(operand, t) { $t.getoperand() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Bipush.make(t0) }
}

%op TInstruction Sipush(operand:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Sipush) }
  get_slot(operand, t) { $t.getoperand() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Sipush.make(t0) }
}

%op TInstruction Ldc(cst:TValue) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ldc) }
  get_slot(cst, t) { $t.getcst() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ldc.make(t0) }
}

%op TInstruction Iload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Iload.make(t0) }
}

%op TInstruction Lload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Lload.make(t0) }
}

%op TInstruction Fload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Fload.make(t0) }
}

%op TInstruction Dload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Dload.make(t0) }
}

%op TInstruction Aload(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aload) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Aload.make(t0) }
}

%op TInstruction Iaload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iaload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iaload.make() }
}

%op TInstruction Laload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Laload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Laload.make() }
}

%op TInstruction Faload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Faload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Faload.make() }
}

%op TInstruction Daload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Daload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Daload.make() }
}

%op TInstruction Aaload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aaload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Aaload.make() }
}

%op TInstruction Baload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Baload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Baload.make() }
}

%op TInstruction Caload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Caload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Caload.make() }
}

%op TInstruction Saload() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Saload) }
  make() { tom.library.adt.bytecode.types.tinstruction.Saload.make() }
}

%op TInstruction Istore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Istore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Istore.make(t0) }
}

%op TInstruction Lstore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lstore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Lstore.make(t0) }
}

%op TInstruction Fstore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fstore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Fstore.make(t0) }
}

%op TInstruction Dstore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dstore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Dstore.make(t0) }
}

%op TInstruction Astore(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Astore) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Astore.make(t0) }
}

%op TInstruction Iastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iastore.make() }
}

%op TInstruction Lastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lastore.make() }
}

%op TInstruction Fastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fastore.make() }
}

%op TInstruction Dastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dastore.make() }
}

%op TInstruction Aastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Aastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Aastore.make() }
}

%op TInstruction Bastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Bastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Bastore.make() }
}

%op TInstruction Castore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Castore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Castore.make() }
}

%op TInstruction Sastore() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Sastore) }
  make() { tom.library.adt.bytecode.types.tinstruction.Sastore.make() }
}

%op TInstruction Pop() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Pop) }
  make() { tom.library.adt.bytecode.types.tinstruction.Pop.make() }
}

%op TInstruction Pop2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Pop2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Pop2.make() }
}

%op TInstruction Dup() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup.make() }
}

%op TInstruction Dup_x1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup_x1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup_x1.make() }
}

%op TInstruction Dup_x2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup_x2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup_x2.make() }
}

%op TInstruction Dup2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup2.make() }
}

%op TInstruction Dup2_x1() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup2_x1) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup2_x1.make() }
}

%op TInstruction Dup2_x2() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dup2_x2) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dup2_x2.make() }
}

%op TInstruction Swap() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Swap) }
  make() { tom.library.adt.bytecode.types.tinstruction.Swap.make() }
}

%op TInstruction Iadd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iadd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iadd.make() }
}

%op TInstruction Ladd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ladd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ladd.make() }
}

%op TInstruction Fadd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fadd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fadd.make() }
}

%op TInstruction Dadd() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dadd) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dadd.make() }
}

%op TInstruction Isub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Isub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Isub.make() }
}

%op TInstruction Lsub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lsub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lsub.make() }
}

%op TInstruction Fsub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fsub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fsub.make() }
}

%op TInstruction Dsub() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dsub) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dsub.make() }
}

%op TInstruction Imul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Imul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Imul.make() }
}

%op TInstruction Lmul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lmul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lmul.make() }
}

%op TInstruction Fmul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fmul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fmul.make() }
}

%op TInstruction Dmul() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dmul) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dmul.make() }
}

%op TInstruction Idiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Idiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Idiv.make() }
}

%op TInstruction Ldiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ldiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ldiv.make() }
}

%op TInstruction Fdiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fdiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fdiv.make() }
}

%op TInstruction Ddiv() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ddiv) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ddiv.make() }
}

%op TInstruction Irem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Irem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Irem.make() }
}

%op TInstruction Lrem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lrem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lrem.make() }
}

%op TInstruction Frem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Frem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Frem.make() }
}

%op TInstruction Drem() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Drem) }
  make() { tom.library.adt.bytecode.types.tinstruction.Drem.make() }
}

%op TInstruction Ineg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ineg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ineg.make() }
}

%op TInstruction Lneg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lneg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lneg.make() }
}

%op TInstruction Fneg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fneg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fneg.make() }
}

%op TInstruction Dneg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dneg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dneg.make() }
}

%op TInstruction Ishl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ishl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ishl.make() }
}

%op TInstruction Lshl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lshl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lshl.make() }
}

%op TInstruction Ishr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ishr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ishr.make() }
}

%op TInstruction Lshr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lshr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lshr.make() }
}

%op TInstruction Iushr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iushr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iushr.make() }
}

%op TInstruction Lushr() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lushr) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lushr.make() }
}

%op TInstruction Iand() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iand) }
  make() { tom.library.adt.bytecode.types.tinstruction.Iand.make() }
}

%op TInstruction Land() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Land) }
  make() { tom.library.adt.bytecode.types.tinstruction.Land.make() }
}

%op TInstruction Ior() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ior) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ior.make() }
}

%op TInstruction Lor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lor) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lor.make() }
}

%op TInstruction Ixor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ixor) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ixor.make() }
}

%op TInstruction Lxor() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lxor) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lxor.make() }
}

%op TInstruction Iinc(incr:int, var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iinc) }
  get_slot(incr, t) { $t.getincr() }
  get_slot(var, t) { $t.getvar() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstruction.Iinc.make(t0, t1) }
}

%op TInstruction I2l() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2l) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2l.make() }
}

%op TInstruction I2f() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2f) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2f.make() }
}

%op TInstruction I2d() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2d) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2d.make() }
}

%op TInstruction L2i() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.L2i) }
  make() { tom.library.adt.bytecode.types.tinstruction.L2i.make() }
}

%op TInstruction L2f() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.L2f) }
  make() { tom.library.adt.bytecode.types.tinstruction.L2f.make() }
}

%op TInstruction L2d() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.L2d) }
  make() { tom.library.adt.bytecode.types.tinstruction.L2d.make() }
}

%op TInstruction F2i() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.F2i) }
  make() { tom.library.adt.bytecode.types.tinstruction.F2i.make() }
}

%op TInstruction F2l() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.F2l) }
  make() { tom.library.adt.bytecode.types.tinstruction.F2l.make() }
}

%op TInstruction F2d() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.F2d) }
  make() { tom.library.adt.bytecode.types.tinstruction.F2d.make() }
}

%op TInstruction D2i() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.D2i) }
  make() { tom.library.adt.bytecode.types.tinstruction.D2i.make() }
}

%op TInstruction D2l() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.D2l) }
  make() { tom.library.adt.bytecode.types.tinstruction.D2l.make() }
}

%op TInstruction D2f() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.D2f) }
  make() { tom.library.adt.bytecode.types.tinstruction.D2f.make() }
}

%op TInstruction I2b() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2b) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2b.make() }
}

%op TInstruction I2c() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2c) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2c.make() }
}

%op TInstruction I2s() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.I2s) }
  make() { tom.library.adt.bytecode.types.tinstruction.I2s.make() }
}

%op TInstruction Lcmp() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lcmp) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lcmp.make() }
}

%op TInstruction Fcmpl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fcmpl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fcmpl.make() }
}

%op TInstruction Fcmpg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Fcmpg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Fcmpg.make() }
}

%op TInstruction Dcmpl() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dcmpl) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dcmpl.make() }
}

%op TInstruction Dcmpg() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dcmpg) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dcmpg.make() }
}

%op TInstruction Ifeq(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifeq) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifeq.make(t0) }
}

%op TInstruction Ifne(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifne) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifne.make(t0) }
}

%op TInstruction Iflt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Iflt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Iflt.make(t0) }
}

%op TInstruction Ifge(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifge) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifge.make(t0) }
}

%op TInstruction Ifgt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifgt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifgt.make(t0) }
}

%op TInstruction Ifle(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifle) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifle.make(t0) }
}

%op TInstruction If_icmpeq(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpeq) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpeq.make(t0) }
}

%op TInstruction If_icmpne(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpne) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpne.make(t0) }
}

%op TInstruction If_icmplt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmplt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmplt.make(t0) }
}

%op TInstruction If_icmpge(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpge) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpge.make(t0) }
}

%op TInstruction If_icmpgt(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmpgt) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmpgt.make(t0) }
}

%op TInstruction If_icmple(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_icmple) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_icmple.make(t0) }
}

%op TInstruction If_acmpeq(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpeq) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_acmpeq.make(t0) }
}

%op TInstruction If_acmpne(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.If_acmpne) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.If_acmpne.make(t0) }
}

%op TInstruction Goto(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Goto) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Goto.make(t0) }
}

%op TInstruction Jsr(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Jsr) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Jsr.make(t0) }
}

%op TInstruction Ret(var:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ret) }
  get_slot(var, t) { $t.getvar() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ret.make(t0) }
}

%op TInstruction Tableswitch(min:int, max:int, dflt:TLabel, labels:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Tableswitch) }
  get_slot(min, t) { $t.getmin() }
  get_slot(max, t) { $t.getmax() }
  get_slot(dflt, t) { $t.getdflt() }
  get_slot(labels, t) { $t.getlabels() }
  make(t0, t1, t2, t3) { tom.library.adt.bytecode.types.tinstruction.Tableswitch.make(t0, t1, t2, t3) }
}

%op TInstruction Lookupswitch(dflt:TLabel, keys:TintList, labels:TLabelList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lookupswitch) }
  get_slot(dflt, t) { $t.getdflt() }
  get_slot(keys, t) { $t.getkeys() }
  get_slot(labels, t) { $t.getlabels() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Lookupswitch.make(t0, t1, t2) }
}

%op TInstruction Ireturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ireturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Ireturn.make() }
}

%op TInstruction Lreturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Lreturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Lreturn.make() }
}

%op TInstruction Freturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Freturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Freturn.make() }
}

%op TInstruction Dreturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Dreturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Dreturn.make() }
}

%op TInstruction Areturn() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Areturn) }
  make() { tom.library.adt.bytecode.types.tinstruction.Areturn.make() }
}

%op TInstruction Return() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Return) }
  make() { tom.library.adt.bytecode.types.tinstruction.Return.make() }
}

%op TInstruction Getstatic(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Getstatic) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Getstatic.make(t0, t1, t2) }
}

%op TInstruction Putstatic(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Putstatic) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Putstatic.make(t0, t1, t2) }
}

%op TInstruction Getfield(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Getfield) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Getfield.make(t0, t1, t2) }
}

%op TInstruction Putfield(owner:String, name:String, fieldDesc:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Putfield) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(fieldDesc, t) { $t.getfieldDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Putfield.make(t0, t1, t2) }
}

%op TInstruction Invokevirtual(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokevirtual) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokevirtual.make(t0, t1, t2) }
}

%op TInstruction Invokespecial(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokespecial) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokespecial.make(t0, t1, t2) }
}

%op TInstruction Invokestatic(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokestatic) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokestatic.make(t0, t1, t2) }
}

%op TInstruction Invokeinterface(owner:String, name:String, methodDesc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Invokeinterface) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(methodDesc, t) { $t.getmethodDesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tinstruction.Invokeinterface.make(t0, t1, t2) }
}

%op TInstruction New(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.New) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.New.make(t0) }
}

%op TInstruction Newarray(operand:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Newarray) }
  get_slot(operand, t) { $t.getoperand() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Newarray.make(t0) }
}

%op TInstruction Anewarray(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Anewarray) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Anewarray.make(t0) }
}

%op TInstruction Arraylength() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Arraylength) }
  make() { tom.library.adt.bytecode.types.tinstruction.Arraylength.make() }
}

%op TInstruction Athrow() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Athrow) }
  make() { tom.library.adt.bytecode.types.tinstruction.Athrow.make() }
}

%op TInstruction Checkcast(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Checkcast) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Checkcast.make(t0) }
}

%op TInstruction Instanceof(typeDesc:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Instanceof) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Instanceof.make(t0) }
}

%op TInstruction Monitorenter() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Monitorenter) }
  make() { tom.library.adt.bytecode.types.tinstruction.Monitorenter.make() }
}

%op TInstruction Monitorexit() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Monitorexit) }
  make() { tom.library.adt.bytecode.types.tinstruction.Monitorexit.make() }
}

%op TInstruction Multianewarray(typeDesc:String, dims:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Multianewarray) }
  get_slot(typeDesc, t) { $t.gettypeDesc() }
  get_slot(dims, t) { $t.getdims() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstruction.Multianewarray.make(t0, t1) }
}

%op TInstruction Ifnull(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnull) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifnull.make(t0) }
}

%op TInstruction Ifnonnull(label:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstruction.Ifnonnull) }
  get_slot(label, t) { $t.getlabel() }
  make(t0) { tom.library.adt.bytecode.types.tinstruction.Ifnonnull.make(t0) }
}

%op TClass Class(info:TClassInfo, fields:TFieldList, methods:TMethodList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclass.Class) }
  get_slot(info, t) { $t.getinfo() }
  get_slot(fields, t) { $t.getfields() }
  get_slot(methods, t) { $t.getmethods() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.tclass.Class.make(t0, t1, t2) }
}

%op TInnerClassInfoList EmptyInnerClassInfoList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList) }
  make() { tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList.make() }
}

%op TInnerClassInfoList ConsInnerClassInfoList(HeadInnerClassInfoList:TInnerClassInfo, TailInnerClassInfoList:TInnerClassInfoList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList) }
  get_slot(HeadInnerClassInfoList, t) { $t.getHeadInnerClassInfoList() }
  get_slot(TailInnerClassInfoList, t) { $t.getTailInnerClassInfoList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList.make(t0, t1) }
}

%op TValue StringValue(s:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.StringValue) }
  get_slot(s, t) { $t.gets() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.StringValue.make(t0) }
}

%op TValue IntValue(i:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.IntValue) }
  get_slot(i, t) { $t.geti() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.IntValue.make(t0) }
}

%op TValue LongValue(l:long) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.LongValue) }
  get_slot(l, t) { $t.getl() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.LongValue.make(t0) }
}

%op TValue FloatValue(f:float) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.FloatValue) }
  get_slot(f, t) { $t.getf() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.FloatValue.make(t0) }
}

%op TValue DoubleValue(d:double) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.DoubleValue) }
  get_slot(d, t) { $t.getd() }
  make(t0) { tom.library.adt.bytecode.types.tvalue.DoubleValue.make(t0) }
}

%op TValue EmptyValue() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tvalue.EmptyValue) }
  make() { tom.library.adt.bytecode.types.tvalue.EmptyValue.make() }
}

%op TField Field(access:TAccessList, name:String, desc:TFieldDescriptor, signature:TSignature, value:TValue) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfield.Field) }
  get_slot(access, t) { $t.getaccess() }
  get_slot(name, t) { $t.getname() }
  get_slot(desc, t) { $t.getdesc() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(value, t) { $t.getvalue() }
  make(t0, t1, t2, t3, t4) { tom.library.adt.bytecode.types.tfield.Field.make(t0, t1, t2, t3, t4) }
}

%op TTryCatchBlockList EmptyTryCatchBlockList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList) }
  make() { tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() }
}

%op TTryCatchBlockList ConsTryCatchBlockList(HeadTryCatchBlockList:TTryCatchBlock, TailTryCatchBlockList:TTryCatchBlockList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList) }
  get_slot(HeadTryCatchBlockList, t) { $t.getHeadTryCatchBlockList() }
  get_slot(TailTryCatchBlockList, t) { $t.getTailTryCatchBlockList() }
  make(t0, t1) { tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make(t0, t1) }
}

%op TType ARRAY() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.ARRAY) }
  make() { tom.library.adt.bytecode.types.ttype.ARRAY.make() }
}

%op TType BOOLEAN() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.BOOLEAN) }
  make() { tom.library.adt.bytecode.types.ttype.BOOLEAN.make() }
}

%op TType BYTE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.BYTE) }
  make() { tom.library.adt.bytecode.types.ttype.BYTE.make() }
}

%op TType CHAR() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.CHAR) }
  make() { tom.library.adt.bytecode.types.ttype.CHAR.make() }
}

%op TType DOUBLE() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.DOUBLE) }
  make() { tom.library.adt.bytecode.types.ttype.DOUBLE.make() }
}

%op TType FLOAT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.FLOAT) }
  make() { tom.library.adt.bytecode.types.ttype.FLOAT.make() }
}

%op TType INT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.INT) }
  make() { tom.library.adt.bytecode.types.ttype.INT.make() }
}

%op TType LONG() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.LONG) }
  make() { tom.library.adt.bytecode.types.ttype.LONG.make() }
}

%op TType OBJECT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.OBJECT) }
  make() { tom.library.adt.bytecode.types.ttype.OBJECT.make() }
}

%op TType SHORT() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.SHORT) }
  make() { tom.library.adt.bytecode.types.ttype.SHORT.make() }
}

%op TType VOID() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttype.VOID) }
  make() { tom.library.adt.bytecode.types.ttype.VOID.make() }
}

%op TClassInfo ClassInfo(name:String, signature:TSignature, access:TAccessList, superName:String, interfaces:TStringList, innerClasses:TInnerClassInfoList, outerClass:TOuterClassInfo) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tclassinfo.ClassInfo) }
  get_slot(name, t) { $t.getname() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(access, t) { $t.getaccess() }
  get_slot(superName, t) { $t.getsuperName() }
  get_slot(interfaces, t) { $t.getinterfaces() }
  get_slot(innerClasses, t) { $t.getinnerClasses() }
  get_slot(outerClass, t) { $t.getouterClass() }
  make(t0, t1, t2, t3, t4, t5, t6) { tom.library.adt.bytecode.types.tclassinfo.ClassInfo.make(t0, t1, t2, t3, t4, t5, t6) }
}

%op TAccessList EmptyAccessList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.EmptyAccessList) }
  make() { tom.library.adt.bytecode.types.taccesslist.EmptyAccessList.make() }
}

%op TAccessList ConsAccessList(HeadAccessList:TAccess, TailAccessList:TAccessList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.taccesslist.ConsAccessList) }
  get_slot(HeadAccessList, t) { $t.getHeadAccessList() }
  get_slot(TailAccessList, t) { $t.getTailAccessList() }
  make(t0, t1) { tom.library.adt.bytecode.types.taccesslist.ConsAccessList.make(t0, t1) }
}

%op TMethodDescriptor MethodDescriptor(parameters:TFieldDescriptorList, return:TReturnDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethoddescriptor.MethodDescriptor) }
  get_slot(parameters, t) { $t.getparameters() }
  get_slot(return, t) { $t.getreturn() }
  make(t0, t1) { tom.library.adt.bytecode.types.tmethoddescriptor.MethodDescriptor.make(t0, t1) }
}

%op TFieldList EmptyFieldList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList) }
  make() { tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList.make() }
}

%op TFieldList ConsFieldList(HeadFieldList:TField, TailFieldList:TFieldList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfieldlist.ConsFieldList) }
  get_slot(HeadFieldList, t) { $t.getHeadFieldList() }
  get_slot(TailFieldList, t) { $t.getTailFieldList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfieldlist.ConsFieldList.make(t0, t1) }
}

%op TOuterClassInfo OuterClassInfo(owner:String, name:String, desc:TMethodDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.OuterClassInfo) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(name, t) { $t.getname() }
  get_slot(desc, t) { $t.getdesc() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.touterclassinfo.OuterClassInfo.make(t0, t1, t2) }
}

%op TOuterClassInfo EmptyOuterClassInfo() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.touterclassinfo.EmptyOuterClassInfo) }
  make() { tom.library.adt.bytecode.types.touterclassinfo.EmptyOuterClassInfo.make() }
}

%op TFieldDescriptor ObjectType(className:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.ObjectType) }
  get_slot(className, t) { $t.getclassName() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptor.ObjectType.make(t0) }
}

%op TFieldDescriptor ArrayType(arrayType:TFieldDescriptor) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.ArrayType) }
  get_slot(arrayType, t) { $t.getarrayType() }
  make(t0) { tom.library.adt.bytecode.types.tfielddescriptor.ArrayType.make(t0) }
}

%op TFieldDescriptor B() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.B) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.B.make() }
}

%op TFieldDescriptor C() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.C) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.C.make() }
}

%op TFieldDescriptor D() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.D) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.D.make() }
}

%op TFieldDescriptor F() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.F) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.F.make() }
}

%op TFieldDescriptor I() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.I) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.I.make() }
}

%op TFieldDescriptor J() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.J) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.J.make() }
}

%op TFieldDescriptor S() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.S) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.S.make() }
}

%op TFieldDescriptor Z() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptor.Z) }
  make() { tom.library.adt.bytecode.types.tfielddescriptor.Z.make() }
}

%op TTryCatchBlock TryCatchBlock(start:TLabel, end:TLabel, handler:THandler) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.ttrycatchblock.TryCatchBlock) }
  get_slot(start, t) { $t.getstart() }
  get_slot(end, t) { $t.getend() }
  get_slot(handler, t) { $t.gethandler() }
  make(t0, t1, t2) { tom.library.adt.bytecode.types.ttrycatchblock.TryCatchBlock.make(t0, t1, t2) }
}

%op TintList EmptyintList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList) }
  make() { tom.library.adt.bytecode.types.tintlist.EmptyintList.make() }
}

%op TintList ConsintList(HeadintList:int, TailintList:TintList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tintlist.ConsintList) }
  get_slot(HeadintList, t) { $t.getHeadintList() }
  get_slot(TailintList, t) { $t.getTailintList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tintlist.ConsintList.make(t0, t1) }
}

%op TMethodInfo MethodInfo(owner:String, access:TAccessList, name:String, desc:TMethodDescriptor, signature:TSignature, exceptions:TStringList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tmethodinfo.MethodInfo) }
  get_slot(owner, t) { $t.getowner() }
  get_slot(access, t) { $t.getaccess() }
  get_slot(name, t) { $t.getname() }
  get_slot(desc, t) { $t.getdesc() }
  get_slot(signature, t) { $t.getsignature() }
  get_slot(exceptions, t) { $t.getexceptions() }
  make(t0, t1, t2, t3, t4, t5) { tom.library.adt.bytecode.types.tmethodinfo.MethodInfo.make(t0, t1, t2, t3, t4, t5) }
}

%op THandler CatchHandler(handler:TLabel, type:String) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.CatchHandler) }
  get_slot(handler, t) { $t.gethandler() }
  get_slot(type, t) { $t.gettype() }
  make(t0, t1) { tom.library.adt.bytecode.types.thandler.CatchHandler.make(t0, t1) }
}

%op THandler FinallyHandler(handler:TLabel) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.thandler.FinallyHandler) }
  get_slot(handler, t) { $t.gethandler() }
  make(t0) { tom.library.adt.bytecode.types.thandler.FinallyHandler.make(t0) }
}

%op TInstructionList EmptyInstructionList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList) }
  make() { tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList.make() }
}

%op TInstructionList ConsInstructionList(HeadInstructionList:TInstruction, TailInstructionList:TInstructionList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) }
  get_slot(HeadInstructionList, t) { $t.getHeadInstructionList() }
  get_slot(TailInstructionList, t) { $t.getTailInstructionList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make(t0, t1) }
}

%op TFieldDescriptorList EmptyFieldDescriptorList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList) }
  make() { tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList.make() }
}

%op TFieldDescriptorList ConsFieldDescriptorList(HeadFieldDescriptorList:TFieldDescriptor, TailFieldDescriptorList:TFieldDescriptorList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList) }
  get_slot(HeadFieldDescriptorList, t) { $t.getHeadFieldDescriptorList() }
  get_slot(TailFieldDescriptorList, t) { $t.getTailFieldDescriptorList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList.make(t0, t1) }
}

%op TLabel Label(id:int) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlabel.Label) }
  get_slot(id, t) { $t.getid() }
  make(t0) { tom.library.adt.bytecode.types.tlabel.Label.make(t0) }
}

%op TLocalVariableList EmptyLocalVariableList() {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList) }
  make() { tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() }
}

%op TLocalVariableList ConsLocalVariableList(HeadLocalVariableList:TLocalVariable, TailLocalVariableList:TLocalVariableList) {
  is_fsym(t) { ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList) }
  get_slot(HeadLocalVariableList, t) { $t.getHeadLocalVariableList() }
  get_slot(TailLocalVariableList, t) { $t.getTailLocalVariableList() }
  make(t0, t1) { tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make(t0, t1) }
}


%oplist TMethodList MethodList(TMethod*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tmethodlist.ConsMethodList) || ($t instanceof tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList)) }
  make_empty() { tom.library.adt.bytecode.types.tmethodlist.EmptyMethodList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tmethodlist.ConsMethodList.make(e,l) }
  get_head(l) { $l.getHeadMethodList() }
  get_tail(l) { $l.getTailMethodList() }
  is_empty(l) { $l.isEmptyMethodList() }
}

%oplist TStringList StringList(String*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tstringlist.ConsStringList) || ($t instanceof tom.library.adt.bytecode.types.tstringlist.EmptyStringList)) }
  make_empty() { tom.library.adt.bytecode.types.tstringlist.EmptyStringList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tstringlist.ConsStringList.make(e,l) }
  get_head(l) { $l.getHeadStringList() }
  get_tail(l) { $l.getTailStringList() }
  is_empty(l) { $l.isEmptyStringList() }
}

%oplist TLabelList LabelList(TLabel*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlabellist.ConsLabelList) || ($t instanceof tom.library.adt.bytecode.types.tlabellist.EmptyLabelList)) }
  make_empty() { tom.library.adt.bytecode.types.tlabellist.EmptyLabelList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlabellist.ConsLabelList.make(e,l) }
  get_head(l) { $l.getHeadLabelList() }
  get_tail(l) { $l.getTailLabelList() }
  is_empty(l) { $l.isEmptyLabelList() }
}

%oplist TInnerClassInfoList InnerClassInfoList(TInnerClassInfo*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList) || ($t instanceof tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList)) }
  make_empty() { tom.library.adt.bytecode.types.tinnerclassinfolist.EmptyInnerClassInfoList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinnerclassinfolist.ConsInnerClassInfoList.make(e,l) }
  get_head(l) { $l.getHeadInnerClassInfoList() }
  get_tail(l) { $l.getTailInnerClassInfoList() }
  is_empty(l) { $l.isEmptyInnerClassInfoList() }
}

%oplist TTryCatchBlockList TryCatchBlockList(TTryCatchBlock*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList) || ($t instanceof tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList)) }
  make_empty() { tom.library.adt.bytecode.types.ttrycatchblocklist.EmptyTryCatchBlockList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.ttrycatchblocklist.ConsTryCatchBlockList.make(e,l) }
  get_head(l) { $l.getHeadTryCatchBlockList() }
  get_tail(l) { $l.getTailTryCatchBlockList() }
  is_empty(l) { $l.isEmptyTryCatchBlockList() }
}

%oplist TAccessList AccessList(TAccess*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.taccesslist.ConsAccessList) || ($t instanceof tom.library.adt.bytecode.types.taccesslist.EmptyAccessList)) }
  make_empty() { tom.library.adt.bytecode.types.taccesslist.EmptyAccessList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.taccesslist.ConsAccessList.make(e,l) }
  get_head(l) { $l.getHeadAccessList() }
  get_tail(l) { $l.getTailAccessList() }
  is_empty(l) { $l.isEmptyAccessList() }
}

%oplist TFieldList FieldList(TField*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfieldlist.ConsFieldList) || ($t instanceof tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList)) }
  make_empty() { tom.library.adt.bytecode.types.tfieldlist.EmptyFieldList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfieldlist.ConsFieldList.make(e,l) }
  get_head(l) { $l.getHeadFieldList() }
  get_tail(l) { $l.getTailFieldList() }
  is_empty(l) { $l.isEmptyFieldList() }
}

%oplist TintList intList(int*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tintlist.ConsintList) || ($t instanceof tom.library.adt.bytecode.types.tintlist.EmptyintList)) }
  make_empty() { tom.library.adt.bytecode.types.tintlist.EmptyintList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tintlist.ConsintList.make(e,l) }
  get_head(l) { $l.getHeadintList() }
  get_tail(l) { $l.getTailintList() }
  is_empty(l) { $l.isEmptyintList() }
}

%oplist TInstructionList InstructionList(TInstruction*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList) || ($t instanceof tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList)) }
  make_empty() { tom.library.adt.bytecode.types.tinstructionlist.EmptyInstructionList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tinstructionlist.ConsInstructionList.make(e,l) }
  get_head(l) { $l.getHeadInstructionList() }
  get_tail(l) { $l.getTailInstructionList() }
  is_empty(l) { $l.isEmptyInstructionList() }
}

%oplist TFieldDescriptorList FieldDescriptorList(TFieldDescriptor*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList) || ($t instanceof tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList)) }
  make_empty() { tom.library.adt.bytecode.types.tfielddescriptorlist.EmptyFieldDescriptorList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tfielddescriptorlist.ConsFieldDescriptorList.make(e,l) }
  get_head(l) { $l.getHeadFieldDescriptorList() }
  get_tail(l) { $l.getTailFieldDescriptorList() }
  is_empty(l) { $l.isEmptyFieldDescriptorList() }
}

%oplist TLocalVariableList LocalVariableList(TLocalVariable*) {
  is_fsym(t) { (($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList) || ($t instanceof tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList)) }
  make_empty() { tom.library.adt.bytecode.types.tlocalvariablelist.EmptyLocalVariableList.make() }
  make_insert(e,l) { tom.library.adt.bytecode.types.tlocalvariablelist.ConsLocalVariableList.make(e,l) }
  get_head(l) { $l.getHeadLocalVariableList() }
  get_tail(l) { $l.getTailLocalVariableList() }
  is_empty(l) { $l.isEmptyLocalVariableList() }
}
